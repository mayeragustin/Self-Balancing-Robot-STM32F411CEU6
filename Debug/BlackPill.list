
BlackPill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000126c8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001724  08012868  08012868  00013868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013f8c  08013f8c  00015168  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08013f8c  08013f8c  00014f8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013f94  08013f94  00015168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013f94  08013f94  00014f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08013f98  08013f98  00014f98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000168  20000000  08013f9c  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000026b0  20000168  08014104  00015168  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002818  08014104  00015818  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00015168  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fc76  00000000  00000000  00015198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004e68  00000000  00000000  00034e0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c20  00000000  00000000  00039c78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000015be  00000000  00000000  0003b898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c83e  00000000  00000000  0003ce56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024f34  00000000  00000000  00059694  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a36b4  00000000  00000000  0007e5c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00121c7c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007b5c  00000000  00000000  00121cc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009b  00000000  00000000  0012981c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000168 	.word	0x20000168
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08012850 	.word	0x08012850

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000016c 	.word	0x2000016c
 80001dc:	08012850 	.word	0x08012850

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <ADC_Conversion_Cplt>:
	0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff,
	0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff,
	0xff, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xf8
};

void ADC_Conversion_Cplt(uint16_t *rawData, uint16_t *filtredData){
 80005bc:	b490      	push	{r4, r7}
 80005be:	b084      	sub	sp, #16
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
 80005c4:	6039      	str	r1, [r7, #0]
	for(uint8_t channel = 0; channel < ADC_NUM_SENSORS; channel++){
 80005c6:	2300      	movs	r3, #0
 80005c8:	73fb      	strb	r3, [r7, #15]
 80005ca:	e042      	b.n	8000652 <ADC_Conversion_Cplt+0x96>
		sumData[channel] -= mediaBuffer[index][channel];
 80005cc:	7bfb      	ldrb	r3, [r7, #15]
 80005ce:	4a2b      	ldr	r2, [pc, #172]	@ (800067c <ADC_Conversion_Cplt+0xc0>)
 80005d0:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80005d4:	4b2a      	ldr	r3, [pc, #168]	@ (8000680 <ADC_Conversion_Cplt+0xc4>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	461c      	mov	r4, r3
 80005da:	7bfa      	ldrb	r2, [r7, #15]
 80005dc:	4829      	ldr	r0, [pc, #164]	@ (8000684 <ADC_Conversion_Cplt+0xc8>)
 80005de:	4623      	mov	r3, r4
 80005e0:	00db      	lsls	r3, r3, #3
 80005e2:	4423      	add	r3, r4
 80005e4:	4413      	add	r3, r2
 80005e6:	f830 2013 	ldrh.w	r2, [r0, r3, lsl #1]
 80005ea:	7bfb      	ldrb	r3, [r7, #15]
 80005ec:	1a8a      	subs	r2, r1, r2
 80005ee:	b291      	uxth	r1, r2
 80005f0:	4a22      	ldr	r2, [pc, #136]	@ (800067c <ADC_Conversion_Cplt+0xc0>)
 80005f2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		sumData[channel] += rawData[channel];
 80005f6:	7bfb      	ldrb	r3, [r7, #15]
 80005f8:	4a20      	ldr	r2, [pc, #128]	@ (800067c <ADC_Conversion_Cplt+0xc0>)
 80005fa:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80005fe:	7bfb      	ldrb	r3, [r7, #15]
 8000600:	005b      	lsls	r3, r3, #1
 8000602:	687a      	ldr	r2, [r7, #4]
 8000604:	4413      	add	r3, r2
 8000606:	881a      	ldrh	r2, [r3, #0]
 8000608:	7bfb      	ldrb	r3, [r7, #15]
 800060a:	440a      	add	r2, r1
 800060c:	b291      	uxth	r1, r2
 800060e:	4a1b      	ldr	r2, [pc, #108]	@ (800067c <ADC_Conversion_Cplt+0xc0>)
 8000610:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		mediaBuffer[index][channel] = rawData[channel];
 8000614:	7bfb      	ldrb	r3, [r7, #15]
 8000616:	005b      	lsls	r3, r3, #1
 8000618:	687a      	ldr	r2, [r7, #4]
 800061a:	4413      	add	r3, r2
 800061c:	4a18      	ldr	r2, [pc, #96]	@ (8000680 <ADC_Conversion_Cplt+0xc4>)
 800061e:	7812      	ldrb	r2, [r2, #0]
 8000620:	4610      	mov	r0, r2
 8000622:	7bfa      	ldrb	r2, [r7, #15]
 8000624:	881c      	ldrh	r4, [r3, #0]
 8000626:	4917      	ldr	r1, [pc, #92]	@ (8000684 <ADC_Conversion_Cplt+0xc8>)
 8000628:	4603      	mov	r3, r0
 800062a:	00db      	lsls	r3, r3, #3
 800062c:	4403      	add	r3, r0
 800062e:	4413      	add	r3, r2
 8000630:	4622      	mov	r2, r4
 8000632:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		filtredData[channel] = (sumData[channel] >> ADC_DESPLAZAMIENTOS);
 8000636:	7bfb      	ldrb	r3, [r7, #15]
 8000638:	4a10      	ldr	r2, [pc, #64]	@ (800067c <ADC_Conversion_Cplt+0xc0>)
 800063a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800063e:	7bfb      	ldrb	r3, [r7, #15]
 8000640:	005b      	lsls	r3, r3, #1
 8000642:	6839      	ldr	r1, [r7, #0]
 8000644:	440b      	add	r3, r1
 8000646:	0952      	lsrs	r2, r2, #5
 8000648:	b292      	uxth	r2, r2
 800064a:	801a      	strh	r2, [r3, #0]
	for(uint8_t channel = 0; channel < ADC_NUM_SENSORS; channel++){
 800064c:	7bfb      	ldrb	r3, [r7, #15]
 800064e:	3301      	adds	r3, #1
 8000650:	73fb      	strb	r3, [r7, #15]
 8000652:	7bfb      	ldrb	r3, [r7, #15]
 8000654:	2b08      	cmp	r3, #8
 8000656:	d9b9      	bls.n	80005cc <ADC_Conversion_Cplt+0x10>
	}
	index++;
 8000658:	4b09      	ldr	r3, [pc, #36]	@ (8000680 <ADC_Conversion_Cplt+0xc4>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	3301      	adds	r3, #1
 800065e:	b2da      	uxtb	r2, r3
 8000660:	4b07      	ldr	r3, [pc, #28]	@ (8000680 <ADC_Conversion_Cplt+0xc4>)
 8000662:	701a      	strb	r2, [r3, #0]
	index &= (ADC_MEDIA_SIZE - 1);
 8000664:	4b06      	ldr	r3, [pc, #24]	@ (8000680 <ADC_Conversion_Cplt+0xc4>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	f003 031f 	and.w	r3, r3, #31
 800066c:	b2da      	uxtb	r2, r3
 800066e:	4b04      	ldr	r3, [pc, #16]	@ (8000680 <ADC_Conversion_Cplt+0xc4>)
 8000670:	701a      	strb	r2, [r3, #0]
}
 8000672:	bf00      	nop
 8000674:	3710      	adds	r7, #16
 8000676:	46bd      	mov	sp, r7
 8000678:	bc90      	pop	{r4, r7}
 800067a:	4770      	bx	lr
 800067c:	200003c4 	.word	0x200003c4
 8000680:	200003d6 	.word	0x200003d6
 8000684:	20000184 	.word	0x20000184

08000688 <inputState>:
#include "utilities.h"

s_Input debouncerBuff[MAX_INPUTS_DEBOUNCED];
uint8_t	inputIndex = 0;

void inputState(s_Input *stateInput){
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
	switch(stateInput->state){
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	785b      	ldrb	r3, [r3, #1]
 8000694:	2b03      	cmp	r3, #3
 8000696:	d849      	bhi.n	800072c <inputState+0xa4>
 8000698:	a201      	add	r2, pc, #4	@ (adr r2, 80006a0 <inputState+0x18>)
 800069a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800069e:	bf00      	nop
 80006a0:	080006c1 	.word	0x080006c1
 80006a4:	080006b1 	.word	0x080006b1
 80006a8:	080006ff 	.word	0x080006ff
 80006ac:	080006d1 	.word	0x080006d1
		case UP:
			if(stateInput->value == DOWN)
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d13d      	bne.n	8000734 <inputState+0xac>
				stateInput->state = FALLING;
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	2202      	movs	r2, #2
 80006bc:	705a      	strb	r2, [r3, #1]
		break;
 80006be:	e039      	b.n	8000734 <inputState+0xac>
		case DOWN:
			if(stateInput->value == UP)
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	2b01      	cmp	r3, #1
 80006c6:	d137      	bne.n	8000738 <inputState+0xb0>
				stateInput->state = RISING;
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	2203      	movs	r2, #3
 80006cc:	705a      	strb	r2, [r3, #1]
		break;
 80006ce:	e033      	b.n	8000738 <inputState+0xb0>
		case RISING:
			if(stateInput->value == UP){
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	2b01      	cmp	r3, #1
 80006d6:	d10e      	bne.n	80006f6 <inputState+0x6e>
				stateInput->state = UP;
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	2201      	movs	r2, #1
 80006dc:	705a      	strb	r2, [r3, #1]
				/*------------------------------*/
				stateInput->val = UP;
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	2201      	movs	r2, #1
 80006e2:	709a      	strb	r2, [r3, #2]
				if(stateInput->stateChanged != NULL)
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	685b      	ldr	r3, [r3, #4]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d027      	beq.n	800073c <inputState+0xb4>
					stateInput->stateChanged(RISING);
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	685b      	ldr	r3, [r3, #4]
 80006f0:	2003      	movs	r0, #3
 80006f2:	4798      	blx	r3
				/*------------------------------*/
			}else{
				stateInput->state = DOWN;
			}
		break;
 80006f4:	e022      	b.n	800073c <inputState+0xb4>
				stateInput->state = DOWN;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	2200      	movs	r2, #0
 80006fa:	705a      	strb	r2, [r3, #1]
		break;
 80006fc:	e01e      	b.n	800073c <inputState+0xb4>
		case FALLING:
			if(stateInput->value == DOWN){
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	2b00      	cmp	r3, #0
 8000704:	d10e      	bne.n	8000724 <inputState+0x9c>
				stateInput->state = DOWN;
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	2200      	movs	r2, #0
 800070a:	705a      	strb	r2, [r3, #1]
				/*------------------------------*/
				stateInput->val = DOWN;
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	2200      	movs	r2, #0
 8000710:	709a      	strb	r2, [r3, #2]
				if(stateInput->stateChanged != NULL)
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	685b      	ldr	r3, [r3, #4]
 8000716:	2b00      	cmp	r3, #0
 8000718:	d012      	beq.n	8000740 <inputState+0xb8>
					stateInput->stateChanged(FALLING);
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	685b      	ldr	r3, [r3, #4]
 800071e:	2002      	movs	r0, #2
 8000720:	4798      	blx	r3
				/*------------------------------*/
			}else{
				stateInput->state = UP;
			}
		break;
 8000722:	e00d      	b.n	8000740 <inputState+0xb8>
				stateInput->state = UP;
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	2201      	movs	r2, #1
 8000728:	705a      	strb	r2, [r3, #1]
		break;
 800072a:	e009      	b.n	8000740 <inputState+0xb8>
		default:
		stateInput->state = UP;
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	2201      	movs	r2, #1
 8000730:	705a      	strb	r2, [r3, #1]
	}
}
 8000732:	e006      	b.n	8000742 <inputState+0xba>
		break;
 8000734:	bf00      	nop
 8000736:	e004      	b.n	8000742 <inputState+0xba>
		break;
 8000738:	bf00      	nop
 800073a:	e002      	b.n	8000742 <inputState+0xba>
		break;
 800073c:	bf00      	nop
 800073e:	e000      	b.n	8000742 <inputState+0xba>
		break;
 8000740:	bf00      	nop
}
 8000742:	bf00      	nop
 8000744:	3708      	adds	r7, #8
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop

0800074c <Debounce_Init>:

void Debounce_Init(){
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
	for(inputIndex=0; inputIndex<MAX_INPUTS_DEBOUNCED; inputIndex++){
 8000750:	4b16      	ldr	r3, [pc, #88]	@ (80007ac <Debounce_Init+0x60>)
 8000752:	2200      	movs	r2, #0
 8000754:	701a      	strb	r2, [r3, #0]
 8000756:	e01d      	b.n	8000794 <Debounce_Init+0x48>
		debouncerBuff[inputIndex].getInputState = NULL;
 8000758:	4b14      	ldr	r3, [pc, #80]	@ (80007ac <Debounce_Init+0x60>)
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	4619      	mov	r1, r3
 800075e:	4a14      	ldr	r2, [pc, #80]	@ (80007b0 <Debounce_Init+0x64>)
 8000760:	460b      	mov	r3, r1
 8000762:	005b      	lsls	r3, r3, #1
 8000764:	440b      	add	r3, r1
 8000766:	009b      	lsls	r3, r3, #2
 8000768:	4413      	add	r3, r2
 800076a:	3308      	adds	r3, #8
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
		debouncerBuff[inputIndex].stateChanged = NULL;
 8000770:	4b0e      	ldr	r3, [pc, #56]	@ (80007ac <Debounce_Init+0x60>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	4619      	mov	r1, r3
 8000776:	4a0e      	ldr	r2, [pc, #56]	@ (80007b0 <Debounce_Init+0x64>)
 8000778:	460b      	mov	r3, r1
 800077a:	005b      	lsls	r3, r3, #1
 800077c:	440b      	add	r3, r1
 800077e:	009b      	lsls	r3, r3, #2
 8000780:	4413      	add	r3, r2
 8000782:	3304      	adds	r3, #4
 8000784:	2200      	movs	r2, #0
 8000786:	601a      	str	r2, [r3, #0]
	for(inputIndex=0; inputIndex<MAX_INPUTS_DEBOUNCED; inputIndex++){
 8000788:	4b08      	ldr	r3, [pc, #32]	@ (80007ac <Debounce_Init+0x60>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	3301      	adds	r3, #1
 800078e:	b2da      	uxtb	r2, r3
 8000790:	4b06      	ldr	r3, [pc, #24]	@ (80007ac <Debounce_Init+0x60>)
 8000792:	701a      	strb	r2, [r3, #0]
 8000794:	4b05      	ldr	r3, [pc, #20]	@ (80007ac <Debounce_Init+0x60>)
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d0dd      	beq.n	8000758 <Debounce_Init+0xc>
	}
	inputIndex = 0;
 800079c:	4b03      	ldr	r3, [pc, #12]	@ (80007ac <Debounce_Init+0x60>)
 800079e:	2200      	movs	r2, #0
 80007a0:	701a      	strb	r2, [r3, #0]
}
 80007a2:	bf00      	nop
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr
 80007ac:	200003e4 	.word	0x200003e4
 80007b0:	200003d8 	.word	0x200003d8

080007b4 <Debounce_Add>:

uint8_t Debounce_Add(uint8_t (*AbstHard)(), void (*STATECHANGED)(e_Estados estado)){
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
 80007bc:	6039      	str	r1, [r7, #0]
	if(inputIndex >= MAX_INPUTS_DEBOUNCED)
 80007be:	4b15      	ldr	r3, [pc, #84]	@ (8000814 <Debounce_Add+0x60>)
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <Debounce_Add+0x16>
		return 0;
 80007c6:	2300      	movs	r3, #0
 80007c8:	e01d      	b.n	8000806 <Debounce_Add+0x52>
	debouncerBuff[inputIndex].getInputState = AbstHard;
 80007ca:	4b12      	ldr	r3, [pc, #72]	@ (8000814 <Debounce_Add+0x60>)
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	4619      	mov	r1, r3
 80007d0:	4a11      	ldr	r2, [pc, #68]	@ (8000818 <Debounce_Add+0x64>)
 80007d2:	460b      	mov	r3, r1
 80007d4:	005b      	lsls	r3, r3, #1
 80007d6:	440b      	add	r3, r1
 80007d8:	009b      	lsls	r3, r3, #2
 80007da:	4413      	add	r3, r2
 80007dc:	3308      	adds	r3, #8
 80007de:	687a      	ldr	r2, [r7, #4]
 80007e0:	601a      	str	r2, [r3, #0]
	debouncerBuff[inputIndex].stateChanged = STATECHANGED;
 80007e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000814 <Debounce_Add+0x60>)
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	4619      	mov	r1, r3
 80007e8:	4a0b      	ldr	r2, [pc, #44]	@ (8000818 <Debounce_Add+0x64>)
 80007ea:	460b      	mov	r3, r1
 80007ec:	005b      	lsls	r3, r3, #1
 80007ee:	440b      	add	r3, r1
 80007f0:	009b      	lsls	r3, r3, #2
 80007f2:	4413      	add	r3, r2
 80007f4:	3304      	adds	r3, #4
 80007f6:	683a      	ldr	r2, [r7, #0]
 80007f8:	601a      	str	r2, [r3, #0]
	return inputIndex++;
 80007fa:	4b06      	ldr	r3, [pc, #24]	@ (8000814 <Debounce_Add+0x60>)
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	1c5a      	adds	r2, r3, #1
 8000800:	b2d1      	uxtb	r1, r2
 8000802:	4a04      	ldr	r2, [pc, #16]	@ (8000814 <Debounce_Add+0x60>)
 8000804:	7011      	strb	r1, [r2, #0]
}
 8000806:	4618      	mov	r0, r3
 8000808:	370c      	adds	r7, #12
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	200003e4 	.word	0x200003e4
 8000818:	200003d8 	.word	0x200003d8

0800081c <Debouncer_Task>:

void Debouncer_Task(){
 800081c:	b590      	push	{r4, r7, lr}
 800081e:	b083      	sub	sp, #12
 8000820:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < MAX_INPUTS_DEBOUNCED; i++){
 8000822:	2300      	movs	r3, #0
 8000824:	71fb      	strb	r3, [r7, #7]
 8000826:	e021      	b.n	800086c <Debouncer_Task+0x50>
		debouncerBuff[i].value = debouncerBuff[i].getInputState();
 8000828:	79fa      	ldrb	r2, [r7, #7]
 800082a:	4914      	ldr	r1, [pc, #80]	@ (800087c <Debouncer_Task+0x60>)
 800082c:	4613      	mov	r3, r2
 800082e:	005b      	lsls	r3, r3, #1
 8000830:	4413      	add	r3, r2
 8000832:	009b      	lsls	r3, r3, #2
 8000834:	440b      	add	r3, r1
 8000836:	3308      	adds	r3, #8
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	79fc      	ldrb	r4, [r7, #7]
 800083c:	4798      	blx	r3
 800083e:	4603      	mov	r3, r0
 8000840:	4619      	mov	r1, r3
 8000842:	4a0e      	ldr	r2, [pc, #56]	@ (800087c <Debouncer_Task+0x60>)
 8000844:	4623      	mov	r3, r4
 8000846:	005b      	lsls	r3, r3, #1
 8000848:	4423      	add	r3, r4
 800084a:	009b      	lsls	r3, r3, #2
 800084c:	4413      	add	r3, r2
 800084e:	460a      	mov	r2, r1
 8000850:	701a      	strb	r2, [r3, #0]
		inputState(&debouncerBuff[i]);
 8000852:	79fa      	ldrb	r2, [r7, #7]
 8000854:	4613      	mov	r3, r2
 8000856:	005b      	lsls	r3, r3, #1
 8000858:	4413      	add	r3, r2
 800085a:	009b      	lsls	r3, r3, #2
 800085c:	4a07      	ldr	r2, [pc, #28]	@ (800087c <Debouncer_Task+0x60>)
 800085e:	4413      	add	r3, r2
 8000860:	4618      	mov	r0, r3
 8000862:	f7ff ff11 	bl	8000688 <inputState>
	for(uint8_t i = 0; i < MAX_INPUTS_DEBOUNCED; i++){
 8000866:	79fb      	ldrb	r3, [r7, #7]
 8000868:	3301      	adds	r3, #1
 800086a:	71fb      	strb	r3, [r7, #7]
 800086c:	79fb      	ldrb	r3, [r7, #7]
 800086e:	2b00      	cmp	r3, #0
 8000870:	d0da      	beq.n	8000828 <Debouncer_Task+0xc>
	}
}
 8000872:	bf00      	nop
 8000874:	bf00      	nop
 8000876:	370c      	adds	r7, #12
 8000878:	46bd      	mov	sp, r7
 800087a:	bd90      	pop	{r4, r7, pc}
 800087c:	200003d8 	.word	0x200003d8

08000880 <MPU6050_Set_I2C_Communication>:
static e_system (*I2C_Mem_Read)(uint16_t Dev_Address, uint8_t Mem_Adress, uint8_t Mem_AddSize, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout);


void MPU6050_Set_I2C_Communication(
		e_system (*Mem_Write_Blocking)(uint16_t Dev_Address, uint8_t Mem_Adress, uint8_t Mem_AddSize, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout),
		e_system (*Mem_Read_Blocking)(uint16_t Dev_Address, uint8_t Mem_Adress, uint8_t Mem_AddSize, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout)){
 8000880:	b480      	push	{r7}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
 8000888:	6039      	str	r1, [r7, #0]
	I2C_Master_Transmit_Blocking = Mem_Write_Blocking;
 800088a:	4a06      	ldr	r2, [pc, #24]	@ (80008a4 <MPU6050_Set_I2C_Communication+0x24>)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	6013      	str	r3, [r2, #0]
	I2C_Mem_Read = Mem_Read_Blocking;
 8000890:	4a05      	ldr	r2, [pc, #20]	@ (80008a8 <MPU6050_Set_I2C_Communication+0x28>)
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	6013      	str	r3, [r2, #0]
}
 8000896:	bf00      	nop
 8000898:	370c      	adds	r7, #12
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop
 80008a4:	200003e8 	.word	0x200003e8
 80008a8:	200003ec 	.word	0x200003ec

080008ac <MPU6050_Init>:

e_system MPU6050_Init(s_MPU *mpu){
 80008ac:	b590      	push	{r4, r7, lr}
 80008ae:	b0b7      	sub	sp, #220	@ 0xdc
 80008b0:	af02      	add	r7, sp, #8
 80008b2:	6078      	str	r0, [r7, #4]
	uint8_t data = 0;
 80008b4:	2300      	movs	r3, #0
 80008b6:	f887 30ce 	strb.w	r3, [r7, #206]	@ 0xce
	e_system status = SYS_OK;
 80008ba:	2300      	movs	r3, #0
 80008bc:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf
	status += I2C_Mem_Read(MPU6050_ADDR, WHO_AM_I_MPU6050, 1, &data, 1, MPU_TIMEOUT);
 80008c0:	4b51      	ldr	r3, [pc, #324]	@ (8000a08 <MPU6050_Init+0x15c>)
 80008c2:	681c      	ldr	r4, [r3, #0]
 80008c4:	f107 03ce 	add.w	r3, r7, #206	@ 0xce
 80008c8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80008cc:	9201      	str	r2, [sp, #4]
 80008ce:	2201      	movs	r2, #1
 80008d0:	9200      	str	r2, [sp, #0]
 80008d2:	2201      	movs	r2, #1
 80008d4:	2175      	movs	r1, #117	@ 0x75
 80008d6:	20d0      	movs	r0, #208	@ 0xd0
 80008d8:	47a0      	blx	r4
 80008da:	4603      	mov	r3, r0
 80008dc:	461a      	mov	r2, r3
 80008de:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 80008e2:	4413      	add	r3, r2
 80008e4:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf
	if(data == WHO_AM_I_DEFAULT_VALUE){
 80008e8:	f897 30ce 	ldrb.w	r3, [r7, #206]	@ 0xce
 80008ec:	2b68      	cmp	r3, #104	@ 0x68
 80008ee:	f040 8084 	bne.w	80009fa <MPU6050_Init+0x14e>
		data = 0x00;
 80008f2:	2300      	movs	r3, #0
 80008f4:	f887 30ce 	strb.w	r3, [r7, #206]	@ 0xce
		status += I2C_Master_Transmit_Blocking(MPU6050_ADDR, POWER_MANAGEMENT_REG, 1, &data, 1, MPU_TIMEOUT);
 80008f8:	4b44      	ldr	r3, [pc, #272]	@ (8000a0c <MPU6050_Init+0x160>)
 80008fa:	681c      	ldr	r4, [r3, #0]
 80008fc:	f107 03ce 	add.w	r3, r7, #206	@ 0xce
 8000900:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000904:	9201      	str	r2, [sp, #4]
 8000906:	2201      	movs	r2, #1
 8000908:	9200      	str	r2, [sp, #0]
 800090a:	2201      	movs	r2, #1
 800090c:	216b      	movs	r1, #107	@ 0x6b
 800090e:	20d0      	movs	r0, #208	@ 0xd0
 8000910:	47a0      	blx	r4
 8000912:	4603      	mov	r3, r0
 8000914:	461a      	mov	r2, r3
 8000916:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 800091a:	4413      	add	r3, r2
 800091c:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf

		// Set data rate of 1 KHz (default)
		data = 0x07;
 8000920:	2307      	movs	r3, #7
 8000922:	f887 30ce 	strb.w	r3, [r7, #206]	@ 0xce
		status +=I2C_Master_Transmit_Blocking(MPU6050_ADDR, SMPLRT_DIV_REG, 1, &data, 1, MPU_TIMEOUT);
 8000926:	4b39      	ldr	r3, [pc, #228]	@ (8000a0c <MPU6050_Init+0x160>)
 8000928:	681c      	ldr	r4, [r3, #0]
 800092a:	f107 03ce 	add.w	r3, r7, #206	@ 0xce
 800092e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000932:	9201      	str	r2, [sp, #4]
 8000934:	2201      	movs	r2, #1
 8000936:	9200      	str	r2, [sp, #0]
 8000938:	2201      	movs	r2, #1
 800093a:	2119      	movs	r1, #25
 800093c:	20d0      	movs	r0, #208	@ 0xd0
 800093e:	47a0      	blx	r4
 8000940:	4603      	mov	r3, r0
 8000942:	461a      	mov	r2, r3
 8000944:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 8000948:	4413      	add	r3, r2
 800094a:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf

		// Set accelerometer range of +/- 2g (default)
		data = 0x00;
 800094e:	2300      	movs	r3, #0
 8000950:	f887 30ce 	strb.w	r3, [r7, #206]	@ 0xce
		status += I2C_Master_Transmit_Blocking(MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &data, 1, MPU_TIMEOUT);
 8000954:	4b2d      	ldr	r3, [pc, #180]	@ (8000a0c <MPU6050_Init+0x160>)
 8000956:	681c      	ldr	r4, [r3, #0]
 8000958:	f107 03ce 	add.w	r3, r7, #206	@ 0xce
 800095c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000960:	9201      	str	r2, [sp, #4]
 8000962:	2201      	movs	r2, #1
 8000964:	9200      	str	r2, [sp, #0]
 8000966:	2201      	movs	r2, #1
 8000968:	211c      	movs	r1, #28
 800096a:	20d0      	movs	r0, #208	@ 0xd0
 800096c:	47a0      	blx	r4
 800096e:	4603      	mov	r3, r0
 8000970:	461a      	mov	r2, r3
 8000972:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 8000976:	4413      	add	r3, r2
 8000978:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf

		// Set gyroscope range of +/- 250 degree/s (default)
		data = 0x00;
 800097c:	2300      	movs	r3, #0
 800097e:	f887 30ce 	strb.w	r3, [r7, #206]	@ 0xce
		status += I2C_Master_Transmit_Blocking(MPU6050_ADDR, GYRO_CONFIG_REG, 1, &data, 1, MPU_TIMEOUT);
 8000982:	4b22      	ldr	r3, [pc, #136]	@ (8000a0c <MPU6050_Init+0x160>)
 8000984:	681c      	ldr	r4, [r3, #0]
 8000986:	f107 03ce 	add.w	r3, r7, #206	@ 0xce
 800098a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800098e:	9201      	str	r2, [sp, #4]
 8000990:	2201      	movs	r2, #1
 8000992:	9200      	str	r2, [sp, #0]
 8000994:	2201      	movs	r2, #1
 8000996:	211b      	movs	r1, #27
 8000998:	20d0      	movs	r0, #208	@ 0xd0
 800099a:	47a0      	blx	r4
 800099c:	4603      	mov	r3, r0
 800099e:	461a      	mov	r2, r3
 80009a0:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 80009a4:	4413      	add	r3, r2
 80009a6:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf

		// Set Digital Low Pass Filter
		data = 0x03;
 80009aa:	2303      	movs	r3, #3
 80009ac:	f887 30ce 	strb.w	r3, [r7, #206]	@ 0xce
		status += I2C_Master_Transmit_Blocking(MPU6050_ADDR, CONFIG, 1, &data, 1, MPU_TIMEOUT);
 80009b0:	4b16      	ldr	r3, [pc, #88]	@ (8000a0c <MPU6050_Init+0x160>)
 80009b2:	681c      	ldr	r4, [r3, #0]
 80009b4:	f107 03ce 	add.w	r3, r7, #206	@ 0xce
 80009b8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80009bc:	9201      	str	r2, [sp, #4]
 80009be:	2201      	movs	r2, #1
 80009c0:	9200      	str	r2, [sp, #0]
 80009c2:	2201      	movs	r2, #1
 80009c4:	211a      	movs	r1, #26
 80009c6:	20d0      	movs	r0, #208	@ 0xd0
 80009c8:	47a0      	blx	r4
 80009ca:	4603      	mov	r3, r0
 80009cc:	461a      	mov	r2, r3
 80009ce:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 80009d2:	4413      	add	r3, r2
 80009d4:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf
		I2C_Master_Transmit_Blocking(MPU6050_ADDR, INT_PIN_CFG, 1, &data, 1, MPU_TIMEOUT);

		data = 0x01;
		I2C_Master_Transmit_Blocking(MPU6050_ADDR, INT_ENABLE, 1, &data, 1, MPU_TIMEOUT);
		 */
		*mpu = (s_MPU){
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	4618      	mov	r0, r3
 80009dc:	23c4      	movs	r3, #196	@ 0xc4
 80009de:	461a      	mov	r2, r3
 80009e0:	2100      	movs	r1, #0
 80009e2:	f011 faa3 	bl	8011f2c <memset>
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	2201      	movs	r2, #1
 80009ea:	f883 20c2 	strb.w	r2, [r3, #194]	@ 0xc2
		    },
		    .bit_data = {0},
		    .isInit = 1
		};

		if(status != SYS_OK){
 80009ee:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d003      	beq.n	80009fe <MPU6050_Init+0x152>
			return SYS_ERROR;
 80009f6:	2301      	movs	r3, #1
 80009f8:	e002      	b.n	8000a00 <MPU6050_Init+0x154>
		}

	}else{
		return SYS_ERROR;
 80009fa:	2301      	movs	r3, #1
 80009fc:	e000      	b.n	8000a00 <MPU6050_Init+0x154>
	}
	return SYS_OK;
 80009fe:	2300      	movs	r3, #0
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	37d4      	adds	r7, #212	@ 0xd4
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd90      	pop	{r4, r7, pc}
 8000a08:	200003ec 	.word	0x200003ec
 8000a0c:	200003e8 	.word	0x200003e8

08000a10 <MPU6050_Calibrate>:

void MPU6050_Calibrate(s_MPU *mpu){
 8000a10:	b590      	push	{r4, r7, lr}
 8000a12:	b08d      	sub	sp, #52	@ 0x34
 8000a14:	af02      	add	r7, sp, #8
 8000a16:	6078      	str	r0, [r7, #4]
	int32_t temp_raw[6] = {0};
 8000a18:	f107 030c 	add.w	r3, r7, #12
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	60da      	str	r2, [r3, #12]
 8000a26:	611a      	str	r2, [r3, #16]
 8000a28:	615a      	str	r2, [r3, #20]
	for (uint16_t i=0; i < NUM_SAMPLES; i++){
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8000a2e:	e069      	b.n	8000b04 <MPU6050_Calibrate+0xf4>
		I2C_Mem_Read(MPU6050_ADDR, ACCEL_XOUT_REG, 1, mpu->bit_data, 14, MPU_TIMEOUT);
 8000a30:	4b49      	ldr	r3, [pc, #292]	@ (8000b58 <MPU6050_Calibrate+0x148>)
 8000a32:	681c      	ldr	r4, [r3, #0]
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	33b4      	adds	r3, #180	@ 0xb4
 8000a38:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000a3c:	9201      	str	r2, [sp, #4]
 8000a3e:	220e      	movs	r2, #14
 8000a40:	9200      	str	r2, [sp, #0]
 8000a42:	2201      	movs	r2, #1
 8000a44:	213b      	movs	r1, #59	@ 0x3b
 8000a46:	20d0      	movs	r0, #208	@ 0xd0
 8000a48:	47a0      	blx	r4
		temp_raw[0] += (int16_t)((mpu->bit_data[0] << 8) | mpu->bit_data[1]);
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	687a      	ldr	r2, [r7, #4]
 8000a4e:	f892 20b4 	ldrb.w	r2, [r2, #180]	@ 0xb4
 8000a52:	b212      	sxth	r2, r2
 8000a54:	0212      	lsls	r2, r2, #8
 8000a56:	b211      	sxth	r1, r2
 8000a58:	687a      	ldr	r2, [r7, #4]
 8000a5a:	f892 20b5 	ldrb.w	r2, [r2, #181]	@ 0xb5
 8000a5e:	b212      	sxth	r2, r2
 8000a60:	430a      	orrs	r2, r1
 8000a62:	b212      	sxth	r2, r2
 8000a64:	4413      	add	r3, r2
 8000a66:	60fb      	str	r3, [r7, #12]
		temp_raw[1] += (int16_t)((mpu->bit_data[2] << 8) | mpu->bit_data[3]);
 8000a68:	693b      	ldr	r3, [r7, #16]
 8000a6a:	687a      	ldr	r2, [r7, #4]
 8000a6c:	f892 20b6 	ldrb.w	r2, [r2, #182]	@ 0xb6
 8000a70:	b212      	sxth	r2, r2
 8000a72:	0212      	lsls	r2, r2, #8
 8000a74:	b211      	sxth	r1, r2
 8000a76:	687a      	ldr	r2, [r7, #4]
 8000a78:	f892 20b7 	ldrb.w	r2, [r2, #183]	@ 0xb7
 8000a7c:	b212      	sxth	r2, r2
 8000a7e:	430a      	orrs	r2, r1
 8000a80:	b212      	sxth	r2, r2
 8000a82:	4413      	add	r3, r2
 8000a84:	613b      	str	r3, [r7, #16]
		temp_raw[2] += (int16_t)((mpu->bit_data[4] << 8) | mpu->bit_data[5]);
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	687a      	ldr	r2, [r7, #4]
 8000a8a:	f892 20b8 	ldrb.w	r2, [r2, #184]	@ 0xb8
 8000a8e:	b212      	sxth	r2, r2
 8000a90:	0212      	lsls	r2, r2, #8
 8000a92:	b211      	sxth	r1, r2
 8000a94:	687a      	ldr	r2, [r7, #4]
 8000a96:	f892 20b9 	ldrb.w	r2, [r2, #185]	@ 0xb9
 8000a9a:	b212      	sxth	r2, r2
 8000a9c:	430a      	orrs	r2, r1
 8000a9e:	b212      	sxth	r2, r2
 8000aa0:	4413      	add	r3, r2
 8000aa2:	617b      	str	r3, [r7, #20]

		temp_raw[3] += (int16_t)((mpu->bit_data[8 ] << 8) | mpu->bit_data[9 ]);
 8000aa4:	69bb      	ldr	r3, [r7, #24]
 8000aa6:	687a      	ldr	r2, [r7, #4]
 8000aa8:	f892 20bc 	ldrb.w	r2, [r2, #188]	@ 0xbc
 8000aac:	b212      	sxth	r2, r2
 8000aae:	0212      	lsls	r2, r2, #8
 8000ab0:	b211      	sxth	r1, r2
 8000ab2:	687a      	ldr	r2, [r7, #4]
 8000ab4:	f892 20bd 	ldrb.w	r2, [r2, #189]	@ 0xbd
 8000ab8:	b212      	sxth	r2, r2
 8000aba:	430a      	orrs	r2, r1
 8000abc:	b212      	sxth	r2, r2
 8000abe:	4413      	add	r3, r2
 8000ac0:	61bb      	str	r3, [r7, #24]
		temp_raw[4] += (int16_t)((mpu->bit_data[10] << 8) | mpu->bit_data[11]);
 8000ac2:	69fb      	ldr	r3, [r7, #28]
 8000ac4:	687a      	ldr	r2, [r7, #4]
 8000ac6:	f892 20be 	ldrb.w	r2, [r2, #190]	@ 0xbe
 8000aca:	b212      	sxth	r2, r2
 8000acc:	0212      	lsls	r2, r2, #8
 8000ace:	b211      	sxth	r1, r2
 8000ad0:	687a      	ldr	r2, [r7, #4]
 8000ad2:	f892 20bf 	ldrb.w	r2, [r2, #191]	@ 0xbf
 8000ad6:	b212      	sxth	r2, r2
 8000ad8:	430a      	orrs	r2, r1
 8000ada:	b212      	sxth	r2, r2
 8000adc:	4413      	add	r3, r2
 8000ade:	61fb      	str	r3, [r7, #28]
		temp_raw[5] += (int16_t)((mpu->bit_data[12] << 8) | mpu->bit_data[13]);
 8000ae0:	6a3b      	ldr	r3, [r7, #32]
 8000ae2:	687a      	ldr	r2, [r7, #4]
 8000ae4:	f892 20c0 	ldrb.w	r2, [r2, #192]	@ 0xc0
 8000ae8:	b212      	sxth	r2, r2
 8000aea:	0212      	lsls	r2, r2, #8
 8000aec:	b211      	sxth	r1, r2
 8000aee:	687a      	ldr	r2, [r7, #4]
 8000af0:	f892 20c1 	ldrb.w	r2, [r2, #193]	@ 0xc1
 8000af4:	b212      	sxth	r2, r2
 8000af6:	430a      	orrs	r2, r1
 8000af8:	b212      	sxth	r2, r2
 8000afa:	4413      	add	r3, r2
 8000afc:	623b      	str	r3, [r7, #32]
	for (uint16_t i=0; i < NUM_SAMPLES; i++){
 8000afe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000b00:	3301      	adds	r3, #1
 8000b02:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8000b04:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000b06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000b0a:	d391      	bcc.n	8000a30 <MPU6050_Calibrate+0x20>
	}
    mpu->Acc.offset.x = (int16_t)(temp_raw[0] >> NUM_SAMPLES_BITS);
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	131b      	asrs	r3, r3, #12
 8000b10:	b21a      	sxth	r2, r3
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	80da      	strh	r2, [r3, #6]
    mpu->Acc.offset.y = (int16_t)(temp_raw[1] >> NUM_SAMPLES_BITS);
 8000b16:	693b      	ldr	r3, [r7, #16]
 8000b18:	131b      	asrs	r3, r3, #12
 8000b1a:	b21a      	sxth	r2, r3
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	811a      	strh	r2, [r3, #8]
    mpu->Acc.offset.z = (int16_t)(temp_raw[2] >> NUM_SAMPLES_BITS) - SCALE_FACTOR;
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	131b      	asrs	r3, r3, #12
 8000b24:	b29b      	uxth	r3, r3
 8000b26:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8000b2a:	b29b      	uxth	r3, r3
 8000b2c:	b21a      	sxth	r2, r3
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	815a      	strh	r2, [r3, #10]

    mpu->Gyro.offset.x = (int16_t)(temp_raw[3] >> NUM_SAMPLES_BITS);
 8000b32:	69bb      	ldr	r3, [r7, #24]
 8000b34:	131b      	asrs	r3, r3, #12
 8000b36:	b21a      	sxth	r2, r3
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	825a      	strh	r2, [r3, #18]
	mpu->Gyro.offset.y = (int16_t)(temp_raw[4] >> NUM_SAMPLES_BITS);
 8000b3c:	69fb      	ldr	r3, [r7, #28]
 8000b3e:	131b      	asrs	r3, r3, #12
 8000b40:	b21a      	sxth	r2, r3
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	829a      	strh	r2, [r3, #20]
	mpu->Gyro.offset.z = (int16_t)(temp_raw[5] >> NUM_SAMPLES_BITS);
 8000b46:	6a3b      	ldr	r3, [r7, #32]
 8000b48:	131b      	asrs	r3, r3, #12
 8000b4a:	b21a      	sxth	r2, r3
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	82da      	strh	r2, [r3, #22]

	//mpu->Angle.pitch = atan2f(mpu->Acc.offset.y, sqrtf(mpu->Acc.offset.x * mpu->Acc.offset.x + mpu->Acc.offset.z * mpu->Acc.offset.z)) * 180.0f / M_PI;
	//mpu->Angle.roll  = atan2f(-mpu->Acc.offset.x, mpu->Acc.offset.z) * 180.0f / M_PI;
}
 8000b50:	bf00      	nop
 8000b52:	372c      	adds	r7, #44	@ 0x2c
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd90      	pop	{r4, r7, pc}
 8000b58:	200003ec 	.word	0x200003ec

08000b5c <MPU6050_I2C_DMA_Cplt>:

void MPU6050_I2C_DMA_Cplt(s_MPU *mpu){
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
	// ACC: GET RAW INFORMATION
	mpu->MAF.rawData[0] = (((mpu->bit_data[0] << 8) | mpu->bit_data[1]));
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 8000b6a:	b21b      	sxth	r3, r3
 8000b6c:	021b      	lsls	r3, r3, #8
 8000b6e:	b21a      	sxth	r2, r3
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	f893 30b5 	ldrb.w	r3, [r3, #181]	@ 0xb5
 8000b76:	b21b      	sxth	r3, r3
 8000b78:	4313      	orrs	r3, r2
 8000b7a:	b21a      	sxth	r2, r3
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	f8a3 2098 	strh.w	r2, [r3, #152]	@ 0x98
	mpu->MAF.rawData[1] = (((mpu->bit_data[2] << 8) | mpu->bit_data[3]));
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	f893 30b6 	ldrb.w	r3, [r3, #182]	@ 0xb6
 8000b88:	b21b      	sxth	r3, r3
 8000b8a:	021b      	lsls	r3, r3, #8
 8000b8c:	b21a      	sxth	r2, r3
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	f893 30b7 	ldrb.w	r3, [r3, #183]	@ 0xb7
 8000b94:	b21b      	sxth	r3, r3
 8000b96:	4313      	orrs	r3, r2
 8000b98:	b21a      	sxth	r2, r3
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
	mpu->MAF.rawData[2] = (((mpu->bit_data[4] << 8) | mpu->bit_data[5]));
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	f893 30b8 	ldrb.w	r3, [r3, #184]	@ 0xb8
 8000ba6:	b21b      	sxth	r3, r3
 8000ba8:	021b      	lsls	r3, r3, #8
 8000baa:	b21a      	sxth	r2, r3
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	f893 30b9 	ldrb.w	r3, [r3, #185]	@ 0xb9
 8000bb2:	b21b      	sxth	r3, r3
 8000bb4:	4313      	orrs	r3, r2
 8000bb6:	b21a      	sxth	r2, r3
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
	// GYR: GET RAW INFORMATION
	mpu->MAF.rawData[3] = (((mpu->bit_data[8 ] << 8) | mpu->bit_data[9 ]));
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	f893 30bc 	ldrb.w	r3, [r3, #188]	@ 0xbc
 8000bc4:	b21b      	sxth	r3, r3
 8000bc6:	021b      	lsls	r3, r3, #8
 8000bc8:	b21a      	sxth	r2, r3
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	f893 30bd 	ldrb.w	r3, [r3, #189]	@ 0xbd
 8000bd0:	b21b      	sxth	r3, r3
 8000bd2:	4313      	orrs	r3, r2
 8000bd4:	b21a      	sxth	r2, r3
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	f8a3 209e 	strh.w	r2, [r3, #158]	@ 0x9e
	mpu->MAF.rawData[4] = (((mpu->bit_data[10] << 8) | mpu->bit_data[11]));
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	f893 30be 	ldrb.w	r3, [r3, #190]	@ 0xbe
 8000be2:	b21b      	sxth	r3, r3
 8000be4:	021b      	lsls	r3, r3, #8
 8000be6:	b21a      	sxth	r2, r3
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	f893 30bf 	ldrb.w	r3, [r3, #191]	@ 0xbf
 8000bee:	b21b      	sxth	r3, r3
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	b21a      	sxth	r2, r3
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
	mpu->MAF.rawData[5] = (((mpu->bit_data[12] << 8) | mpu->bit_data[13]));
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 8000c00:	b21b      	sxth	r3, r3
 8000c02:	021b      	lsls	r3, r3, #8
 8000c04:	b21a      	sxth	r2, r3
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 8000c0c:	b21b      	sxth	r3, r3
 8000c0e:	4313      	orrs	r3, r2
 8000c10:	b21a      	sxth	r2, r3
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	f8a3 20a2 	strh.w	r2, [r3, #162]	@ 0xa2
	mpu->MAF.isOn = TRUE;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	f883 20b1 	strb.w	r2, [r3, #177]	@ 0xb1
}
 8000c20:	bf00      	nop
 8000c22:	370c      	adds	r7, #12
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr

08000c2c <MPU6050_MAF>:

void MPU6050_MAF(s_MPU *mpu){ //Moving Average Filter
 8000c2c:	b490      	push	{r4, r7}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
	if(mpu->MAF.isOn){
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	f893 30b1 	ldrb.w	r3, [r3, #177]	@ 0xb1
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	f000 80b8 	beq.w	8000db0 <MPU6050_MAF+0x184>
		mpu->MAF.isOn = FALSE;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2200      	movs	r2, #0
 8000c44:	f883 20b1 	strb.w	r2, [r3, #177]	@ 0xb1
		for(uint8_t axis = 0; axis < NUM_AXIS; axis++){
 8000c48:	2300      	movs	r3, #0
 8000c4a:	73fb      	strb	r3, [r7, #15]
 8000c4c:	e04e      	b.n	8000cec <MPU6050_MAF+0xc0>
			mpu->MAF.sumData[axis] -= mpu->MAF.mediaBuffer[mpu->MAF.index][axis];
 8000c4e:	7bfa      	ldrb	r2, [r7, #15]
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	3208      	adds	r2, #8
 8000c54:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 8000c5e:	461c      	mov	r4, r3
 8000c60:	7bf8      	ldrb	r0, [r7, #15]
 8000c62:	687a      	ldr	r2, [r7, #4]
 8000c64:	4623      	mov	r3, r4
 8000c66:	005b      	lsls	r3, r3, #1
 8000c68:	4423      	add	r3, r4
 8000c6a:	005b      	lsls	r3, r3, #1
 8000c6c:	4403      	add	r3, r0
 8000c6e:	331c      	adds	r3, #28
 8000c70:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000c74:	7bfa      	ldrb	r2, [r7, #15]
 8000c76:	1ac9      	subs	r1, r1, r3
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	3208      	adds	r2, #8
 8000c7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			mpu->MAF.sumData[axis] += mpu->MAF.rawData[axis];
 8000c80:	7bfa      	ldrb	r2, [r7, #15]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	3208      	adds	r2, #8
 8000c86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c8a:	7bf9      	ldrb	r1, [r7, #15]
 8000c8c:	687a      	ldr	r2, [r7, #4]
 8000c8e:	314c      	adds	r1, #76	@ 0x4c
 8000c90:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8000c94:	4611      	mov	r1, r2
 8000c96:	7bfa      	ldrb	r2, [r7, #15]
 8000c98:	4419      	add	r1, r3
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	3208      	adds	r2, #8
 8000c9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			mpu->MAF.mediaBuffer[mpu->MAF.index][axis] = mpu->MAF.rawData[axis];
 8000ca2:	7bfa      	ldrb	r2, [r7, #15]
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 8000caa:	4618      	mov	r0, r3
 8000cac:	7bf9      	ldrb	r1, [r7, #15]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	324c      	adds	r2, #76	@ 0x4c
 8000cb2:	f933 4012 	ldrsh.w	r4, [r3, r2, lsl #1]
 8000cb6:	687a      	ldr	r2, [r7, #4]
 8000cb8:	4603      	mov	r3, r0
 8000cba:	005b      	lsls	r3, r3, #1
 8000cbc:	4403      	add	r3, r0
 8000cbe:	005b      	lsls	r3, r3, #1
 8000cc0:	440b      	add	r3, r1
 8000cc2:	331c      	adds	r3, #28
 8000cc4:	4621      	mov	r1, r4
 8000cc6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			mpu->MAF.filtredData[axis] = (mpu->MAF.sumData[axis] >> NUM_MAF_BITS);
 8000cca:	7bfa      	ldrb	r2, [r7, #15]
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	3208      	adds	r2, #8
 8000cd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cd4:	10da      	asrs	r2, r3, #3
 8000cd6:	7bfb      	ldrb	r3, [r7, #15]
 8000cd8:	b211      	sxth	r1, r2
 8000cda:	687a      	ldr	r2, [r7, #4]
 8000cdc:	3350      	adds	r3, #80	@ 0x50
 8000cde:	005b      	lsls	r3, r3, #1
 8000ce0:	4413      	add	r3, r2
 8000ce2:	460a      	mov	r2, r1
 8000ce4:	809a      	strh	r2, [r3, #4]
		for(uint8_t axis = 0; axis < NUM_AXIS; axis++){
 8000ce6:	7bfb      	ldrb	r3, [r7, #15]
 8000ce8:	3301      	adds	r3, #1
 8000cea:	73fb      	strb	r3, [r7, #15]
 8000cec:	7bfb      	ldrb	r3, [r7, #15]
 8000cee:	2b05      	cmp	r3, #5
 8000cf0:	d9ad      	bls.n	8000c4e <MPU6050_MAF+0x22>
		}
		mpu->MAF.index++;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	b2da      	uxtb	r2, r3
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0
		mpu->MAF.index &= (NUM_MAF - 1);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 8000d08:	f003 0307 	and.w	r3, r3, #7
 8000d0c:	b2da      	uxtb	r2, r3
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0

		// ACC: CALCULATE TRUE ACCELERATION
		mpu->Acc.x = mpu->MAF.filtredData[0] - mpu->Acc.offset.x;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	f9b3 30a4 	ldrsh.w	r3, [r3, #164]	@ 0xa4
 8000d1a:	b29a      	uxth	r2, r3
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000d22:	b29b      	uxth	r3, r3
 8000d24:	1ad3      	subs	r3, r2, r3
 8000d26:	b29b      	uxth	r3, r3
 8000d28:	b21a      	sxth	r2, r3
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	801a      	strh	r2, [r3, #0]
		mpu->Acc.y = mpu->MAF.filtredData[1] - mpu->Acc.offset.y;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	f9b3 30a6 	ldrsh.w	r3, [r3, #166]	@ 0xa6
 8000d34:	b29a      	uxth	r2, r3
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000d3c:	b29b      	uxth	r3, r3
 8000d3e:	1ad3      	subs	r3, r2, r3
 8000d40:	b29b      	uxth	r3, r3
 8000d42:	b21a      	sxth	r2, r3
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	805a      	strh	r2, [r3, #2]
		mpu->Acc.z = mpu->MAF.filtredData[2] - mpu->Acc.offset.z;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	f9b3 30a8 	ldrsh.w	r3, [r3, #168]	@ 0xa8
 8000d4e:	b29a      	uxth	r2, r3
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000d56:	b29b      	uxth	r3, r3
 8000d58:	1ad3      	subs	r3, r2, r3
 8000d5a:	b29b      	uxth	r3, r3
 8000d5c:	b21a      	sxth	r2, r3
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	809a      	strh	r2, [r3, #4]
		// GYR: CALCULATE TRUE ACCELERATION
		mpu->Gyro.x = mpu->MAF.filtredData[3] - mpu->Gyro.offset.x;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	f9b3 30aa 	ldrsh.w	r3, [r3, #170]	@ 0xaa
 8000d68:	b29a      	uxth	r2, r3
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8000d70:	b29b      	uxth	r3, r3
 8000d72:	1ad3      	subs	r3, r2, r3
 8000d74:	b29b      	uxth	r3, r3
 8000d76:	b21a      	sxth	r2, r3
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	819a      	strh	r2, [r3, #12]
		mpu->Gyro.y = mpu->MAF.filtredData[4] - mpu->Gyro.offset.y;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	f9b3 30ac 	ldrsh.w	r3, [r3, #172]	@ 0xac
 8000d82:	b29a      	uxth	r2, r3
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000d8a:	b29b      	uxth	r3, r3
 8000d8c:	1ad3      	subs	r3, r2, r3
 8000d8e:	b29b      	uxth	r3, r3
 8000d90:	b21a      	sxth	r2, r3
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	81da      	strh	r2, [r3, #14]
		mpu->Gyro.z = mpu->MAF.filtredData[5] - mpu->Gyro.offset.z;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	f9b3 30ae 	ldrsh.w	r3, [r3, #174]	@ 0xae
 8000d9c:	b29a      	uxth	r2, r3
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8000da4:	b29b      	uxth	r3, r3
 8000da6:	1ad3      	subs	r3, r2, r3
 8000da8:	b29b      	uxth	r3, r3
 8000daa:	b21a      	sxth	r2, r3
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	821a      	strh	r2, [r3, #16]
	}
}
 8000db0:	bf00      	nop
 8000db2:	3710      	adds	r7, #16
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bc90      	pop	{r4, r7}
 8000db8:	4770      	bx	lr
	...

08000dbc <Display_Set_I2C_Master_Transmit>:
	uint8_t PageData[6];
}Update;

void Display_Set_I2C_Master_Transmit(
		e_system (*Master_Transmit)(uint16_t DevAddress, uint8_t reg, uint8_t *pData, uint16_t Size),
		e_system (*Master_Transmit_Blocking)(uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)){
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
 8000dc4:	6039      	str	r1, [r7, #0]
	I2C_Master_Transmit = Master_Transmit;
 8000dc6:	4a06      	ldr	r2, [pc, #24]	@ (8000de0 <Display_Set_I2C_Master_Transmit+0x24>)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	6013      	str	r3, [r2, #0]
	I2C_Master_Transmit_Blocking = Master_Transmit_Blocking;
 8000dcc:	4a05      	ldr	r2, [pc, #20]	@ (8000de4 <Display_Set_I2C_Master_Transmit+0x28>)
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	6013      	str	r3, [r2, #0]
}
 8000dd2:	bf00      	nop
 8000dd4:	370c      	adds	r7, #12
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	200003f8 	.word	0x200003f8
 8000de4:	200003fc 	.word	0x200003fc

08000de8 <Display_Init>:

e_system Display_Init(){
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 8000dee:	2300      	movs	r3, #0
 8000df0:	71fb      	strb	r3, [r7, #7]

    status += SSD1306_WRITECOMMAND(0xAE);   // Display off
 8000df2:	22ae      	movs	r2, #174	@ 0xae
 8000df4:	2100      	movs	r1, #0
 8000df6:	2078      	movs	r0, #120	@ 0x78
 8000df8:	f000 f94a 	bl	8001090 <ssd1306_I2C_Write>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	461a      	mov	r2, r3
 8000e00:	79fb      	ldrb	r3, [r7, #7]
 8000e02:	4413      	add	r3, r2
 8000e04:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x20);   // Set Memory Addressing Mode
 8000e06:	2220      	movs	r2, #32
 8000e08:	2100      	movs	r1, #0
 8000e0a:	2078      	movs	r0, #120	@ 0x78
 8000e0c:	f000 f940 	bl	8001090 <ssd1306_I2C_Write>
 8000e10:	4603      	mov	r3, r0
 8000e12:	461a      	mov	r2, r3
 8000e14:	79fb      	ldrb	r3, [r7, #7]
 8000e16:	4413      	add	r3, r2
 8000e18:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x10);   // 00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000e1a:	2210      	movs	r2, #16
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	2078      	movs	r0, #120	@ 0x78
 8000e20:	f000 f936 	bl	8001090 <ssd1306_I2C_Write>
 8000e24:	4603      	mov	r3, r0
 8000e26:	461a      	mov	r2, r3
 8000e28:	79fb      	ldrb	r3, [r7, #7]
 8000e2a:	4413      	add	r3, r2
 8000e2c:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xB0);   // Set Page Start Address for Page Addressing Mode,0-7
 8000e2e:	22b0      	movs	r2, #176	@ 0xb0
 8000e30:	2100      	movs	r1, #0
 8000e32:	2078      	movs	r0, #120	@ 0x78
 8000e34:	f000 f92c 	bl	8001090 <ssd1306_I2C_Write>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	79fb      	ldrb	r3, [r7, #7]
 8000e3e:	4413      	add	r3, r2
 8000e40:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xC8);   // Set COM Output Scan Direction
 8000e42:	22c8      	movs	r2, #200	@ 0xc8
 8000e44:	2100      	movs	r1, #0
 8000e46:	2078      	movs	r0, #120	@ 0x78
 8000e48:	f000 f922 	bl	8001090 <ssd1306_I2C_Write>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	461a      	mov	r2, r3
 8000e50:	79fb      	ldrb	r3, [r7, #7]
 8000e52:	4413      	add	r3, r2
 8000e54:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x00);   // Set low column address
 8000e56:	2200      	movs	r2, #0
 8000e58:	2100      	movs	r1, #0
 8000e5a:	2078      	movs	r0, #120	@ 0x78
 8000e5c:	f000 f918 	bl	8001090 <ssd1306_I2C_Write>
 8000e60:	4603      	mov	r3, r0
 8000e62:	461a      	mov	r2, r3
 8000e64:	79fb      	ldrb	r3, [r7, #7]
 8000e66:	4413      	add	r3, r2
 8000e68:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x10);   // Set high column address
 8000e6a:	2210      	movs	r2, #16
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	2078      	movs	r0, #120	@ 0x78
 8000e70:	f000 f90e 	bl	8001090 <ssd1306_I2C_Write>
 8000e74:	4603      	mov	r3, r0
 8000e76:	461a      	mov	r2, r3
 8000e78:	79fb      	ldrb	r3, [r7, #7]
 8000e7a:	4413      	add	r3, r2
 8000e7c:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x40);   // Set start line address
 8000e7e:	2240      	movs	r2, #64	@ 0x40
 8000e80:	2100      	movs	r1, #0
 8000e82:	2078      	movs	r0, #120	@ 0x78
 8000e84:	f000 f904 	bl	8001090 <ssd1306_I2C_Write>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	79fb      	ldrb	r3, [r7, #7]
 8000e8e:	4413      	add	r3, r2
 8000e90:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x81);   // set contrast control register
 8000e92:	2281      	movs	r2, #129	@ 0x81
 8000e94:	2100      	movs	r1, #0
 8000e96:	2078      	movs	r0, #120	@ 0x78
 8000e98:	f000 f8fa 	bl	8001090 <ssd1306_I2C_Write>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	461a      	mov	r2, r3
 8000ea0:	79fb      	ldrb	r3, [r7, #7]
 8000ea2:	4413      	add	r3, r2
 8000ea4:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xFF);
 8000ea6:	22ff      	movs	r2, #255	@ 0xff
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	2078      	movs	r0, #120	@ 0x78
 8000eac:	f000 f8f0 	bl	8001090 <ssd1306_I2C_Write>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	79fb      	ldrb	r3, [r7, #7]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xA1);   // Set segment re-map 0 to 127
 8000eba:	22a1      	movs	r2, #161	@ 0xa1
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	2078      	movs	r0, #120	@ 0x78
 8000ec0:	f000 f8e6 	bl	8001090 <ssd1306_I2C_Write>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	461a      	mov	r2, r3
 8000ec8:	79fb      	ldrb	r3, [r7, #7]
 8000eca:	4413      	add	r3, r2
 8000ecc:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xA6);   // Set normal display
 8000ece:	22a6      	movs	r2, #166	@ 0xa6
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	2078      	movs	r0, #120	@ 0x78
 8000ed4:	f000 f8dc 	bl	8001090 <ssd1306_I2C_Write>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	461a      	mov	r2, r3
 8000edc:	79fb      	ldrb	r3, [r7, #7]
 8000ede:	4413      	add	r3, r2
 8000ee0:	71fb      	strb	r3, [r7, #7]

    status += SSD1306_WRITECOMMAND(0xA8);   // Set multiplex ratio(1 to 64)
 8000ee2:	22a8      	movs	r2, #168	@ 0xa8
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	2078      	movs	r0, #120	@ 0x78
 8000ee8:	f000 f8d2 	bl	8001090 <ssd1306_I2C_Write>
 8000eec:	4603      	mov	r3, r0
 8000eee:	461a      	mov	r2, r3
 8000ef0:	79fb      	ldrb	r3, [r7, #7]
 8000ef2:	4413      	add	r3, r2
 8000ef4:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(SSD1306_HEIGHT - 1);
 8000ef6:	223f      	movs	r2, #63	@ 0x3f
 8000ef8:	2100      	movs	r1, #0
 8000efa:	2078      	movs	r0, #120	@ 0x78
 8000efc:	f000 f8c8 	bl	8001090 <ssd1306_I2C_Write>
 8000f00:	4603      	mov	r3, r0
 8000f02:	461a      	mov	r2, r3
 8000f04:	79fb      	ldrb	r3, [r7, #7]
 8000f06:	4413      	add	r3, r2
 8000f08:	71fb      	strb	r3, [r7, #7]

    status += SSD1306_WRITECOMMAND(0xA4);   // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000f0a:	22a4      	movs	r2, #164	@ 0xa4
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	2078      	movs	r0, #120	@ 0x78
 8000f10:	f000 f8be 	bl	8001090 <ssd1306_I2C_Write>
 8000f14:	4603      	mov	r3, r0
 8000f16:	461a      	mov	r2, r3
 8000f18:	79fb      	ldrb	r3, [r7, #7]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xD3);   // Set display offset
 8000f1e:	22d3      	movs	r2, #211	@ 0xd3
 8000f20:	2100      	movs	r1, #0
 8000f22:	2078      	movs	r0, #120	@ 0x78
 8000f24:	f000 f8b4 	bl	8001090 <ssd1306_I2C_Write>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	79fb      	ldrb	r3, [r7, #7]
 8000f2e:	4413      	add	r3, r2
 8000f30:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x00);   // No offset
 8000f32:	2200      	movs	r2, #0
 8000f34:	2100      	movs	r1, #0
 8000f36:	2078      	movs	r0, #120	@ 0x78
 8000f38:	f000 f8aa 	bl	8001090 <ssd1306_I2C_Write>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	461a      	mov	r2, r3
 8000f40:	79fb      	ldrb	r3, [r7, #7]
 8000f42:	4413      	add	r3, r2
 8000f44:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xD5);   // Set display clock divide ratio/oscillator frequency
 8000f46:	22d5      	movs	r2, #213	@ 0xd5
 8000f48:	2100      	movs	r1, #0
 8000f4a:	2078      	movs	r0, #120	@ 0x78
 8000f4c:	f000 f8a0 	bl	8001090 <ssd1306_I2C_Write>
 8000f50:	4603      	mov	r3, r0
 8000f52:	461a      	mov	r2, r3
 8000f54:	79fb      	ldrb	r3, [r7, #7]
 8000f56:	4413      	add	r3, r2
 8000f58:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xF0);   // Set divide ratio
 8000f5a:	22f0      	movs	r2, #240	@ 0xf0
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	2078      	movs	r0, #120	@ 0x78
 8000f60:	f000 f896 	bl	8001090 <ssd1306_I2C_Write>
 8000f64:	4603      	mov	r3, r0
 8000f66:	461a      	mov	r2, r3
 8000f68:	79fb      	ldrb	r3, [r7, #7]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xD9);   // Set pre-charge period
 8000f6e:	22d9      	movs	r2, #217	@ 0xd9
 8000f70:	2100      	movs	r1, #0
 8000f72:	2078      	movs	r0, #120	@ 0x78
 8000f74:	f000 f88c 	bl	8001090 <ssd1306_I2C_Write>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	79fb      	ldrb	r3, [r7, #7]
 8000f7e:	4413      	add	r3, r2
 8000f80:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x22);
 8000f82:	2222      	movs	r2, #34	@ 0x22
 8000f84:	2100      	movs	r1, #0
 8000f86:	2078      	movs	r0, #120	@ 0x78
 8000f88:	f000 f882 	bl	8001090 <ssd1306_I2C_Write>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	461a      	mov	r2, r3
 8000f90:	79fb      	ldrb	r3, [r7, #7]
 8000f92:	4413      	add	r3, r2
 8000f94:	71fb      	strb	r3, [r7, #7]

    status += SSD1306_WRITECOMMAND(0xDA);   // Set com pins hardware configuration
 8000f96:	22da      	movs	r2, #218	@ 0xda
 8000f98:	2100      	movs	r1, #0
 8000f9a:	2078      	movs	r0, #120	@ 0x78
 8000f9c:	f000 f878 	bl	8001090 <ssd1306_I2C_Write>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	79fb      	ldrb	r3, [r7, #7]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(Display_COM_LR_REMAP << 5 | Display_COM_ALTERNATIVE_PIN_CONFIG << 4 | 0x02);
 8000faa:	2212      	movs	r2, #18
 8000fac:	2100      	movs	r1, #0
 8000fae:	2078      	movs	r0, #120	@ 0x78
 8000fb0:	f000 f86e 	bl	8001090 <ssd1306_I2C_Write>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	79fb      	ldrb	r3, [r7, #7]
 8000fba:	4413      	add	r3, r2
 8000fbc:	71fb      	strb	r3, [r7, #7]

    status += SSD1306_WRITECOMMAND(0xDB);   // Set vcomh
 8000fbe:	22db      	movs	r2, #219	@ 0xdb
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	2078      	movs	r0, #120	@ 0x78
 8000fc4:	f000 f864 	bl	8001090 <ssd1306_I2C_Write>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	461a      	mov	r2, r3
 8000fcc:	79fb      	ldrb	r3, [r7, #7]
 8000fce:	4413      	add	r3, r2
 8000fd0:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x20);   // 0x20,0.77xVcc
 8000fd2:	2220      	movs	r2, #32
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	2078      	movs	r0, #120	@ 0x78
 8000fd8:	f000 f85a 	bl	8001090 <ssd1306_I2C_Write>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	461a      	mov	r2, r3
 8000fe0:	79fb      	ldrb	r3, [r7, #7]
 8000fe2:	4413      	add	r3, r2
 8000fe4:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x8D);   // Set DC-DC enable
 8000fe6:	228d      	movs	r2, #141	@ 0x8d
 8000fe8:	2100      	movs	r1, #0
 8000fea:	2078      	movs	r0, #120	@ 0x78
 8000fec:	f000 f850 	bl	8001090 <ssd1306_I2C_Write>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	4413      	add	r3, r2
 8000ff8:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x14);   //
 8000ffa:	2214      	movs	r2, #20
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	2078      	movs	r0, #120	@ 0x78
 8001000:	f000 f846 	bl	8001090 <ssd1306_I2C_Write>
 8001004:	4603      	mov	r3, r0
 8001006:	461a      	mov	r2, r3
 8001008:	79fb      	ldrb	r3, [r7, #7]
 800100a:	4413      	add	r3, r2
 800100c:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xAF);   // Turn on Display panel
 800100e:	22af      	movs	r2, #175	@ 0xaf
 8001010:	2100      	movs	r1, #0
 8001012:	2078      	movs	r0, #120	@ 0x78
 8001014:	f000 f83c 	bl	8001090 <ssd1306_I2C_Write>
 8001018:	4603      	mov	r3, r0
 800101a:	461a      	mov	r2, r3
 800101c:	79fb      	ldrb	r3, [r7, #7]
 800101e:	4413      	add	r3, r2
 8001020:	71fb      	strb	r3, [r7, #7]

	status += SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001022:	222e      	movs	r2, #46	@ 0x2e
 8001024:	2100      	movs	r1, #0
 8001026:	2078      	movs	r0, #120	@ 0x78
 8001028:	f000 f832 	bl	8001090 <ssd1306_I2C_Write>
 800102c:	4603      	mov	r3, r0
 800102e:	461a      	mov	r2, r3
 8001030:	79fb      	ldrb	r3, [r7, #7]
 8001032:	4413      	add	r3, r2
 8001034:	71fb      	strb	r3, [r7, #7]

	/* Clear screen */
	Display_Fill(SSD1306_COLOR_BLACK);
 8001036:	2000      	movs	r0, #0
 8001038:	f000 f8e8 	bl	800120c <Display_Fill>

	/* Set default values */
	SSD1306.CurrentX = 0;
 800103c:	4b12      	ldr	r3, [pc, #72]	@ (8001088 <Display_Init+0x2a0>)
 800103e:	2200      	movs	r2, #0
 8001040:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001042:	4b11      	ldr	r3, [pc, #68]	@ (8001088 <Display_Init+0x2a0>)
 8001044:	2200      	movs	r2, #0
 8001046:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = TRUE;
 8001048:	4b0f      	ldr	r3, [pc, #60]	@ (8001088 <Display_Init+0x2a0>)
 800104a:	2201      	movs	r2, #1
 800104c:	715a      	strb	r2, [r3, #5]

	Update.state = PAGE;
 800104e:	4b0f      	ldr	r3, [pc, #60]	@ (800108c <Display_Init+0x2a4>)
 8001050:	2200      	movs	r2, #0
 8001052:	70da      	strb	r2, [r3, #3]
	Update.Page = 0;
 8001054:	4b0d      	ldr	r3, [pc, #52]	@ (800108c <Display_Init+0x2a4>)
 8001056:	2200      	movs	r2, #0
 8001058:	709a      	strb	r2, [r3, #2]
	Update.Ready_DMA = TRUE;
 800105a:	4b0c      	ldr	r3, [pc, #48]	@ (800108c <Display_Init+0x2a4>)
 800105c:	2201      	movs	r2, #1
 800105e:	705a      	strb	r2, [r3, #1]
	Update.Ready_To_Refresh = FALSE;
 8001060:	4b0a      	ldr	r3, [pc, #40]	@ (800108c <Display_Init+0x2a4>)
 8001062:	2200      	movs	r2, #0
 8001064:	701a      	strb	r2, [r3, #0]

	Update.PageData[0] = 0xB0 + Update.Page;
 8001066:	4b09      	ldr	r3, [pc, #36]	@ (800108c <Display_Init+0x2a4>)
 8001068:	789b      	ldrb	r3, [r3, #2]
 800106a:	3b50      	subs	r3, #80	@ 0x50
 800106c:	b2da      	uxtb	r2, r3
 800106e:	4b07      	ldr	r3, [pc, #28]	@ (800108c <Display_Init+0x2a4>)
 8001070:	711a      	strb	r2, [r3, #4]
	Update.PageData[1] = 0x00; //< acá seleccionamos Lower start
 8001072:	4b06      	ldr	r3, [pc, #24]	@ (800108c <Display_Init+0x2a4>)
 8001074:	2200      	movs	r2, #0
 8001076:	715a      	strb	r2, [r3, #5]
	Update.PageData[2] = 0x10; //< y acá upper start
 8001078:	4b04      	ldr	r3, [pc, #16]	@ (800108c <Display_Init+0x2a4>)
 800107a:	2210      	movs	r2, #16
 800107c:	719a      	strb	r2, [r3, #6]

	/* Return OK */
	return status;
 800107e:	79fb      	ldrb	r3, [r7, #7]
}
 8001080:	4618      	mov	r0, r3
 8001082:	3708      	adds	r7, #8
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	200003f0 	.word	0x200003f0
 800108c:	20000800 	.word	0x20000800

08001090 <ssd1306_I2C_Write>:

e_system ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data){
 8001090:	b590      	push	{r4, r7, lr}
 8001092:	b085      	sub	sp, #20
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	71fb      	strb	r3, [r7, #7]
 800109a:	460b      	mov	r3, r1
 800109c:	71bb      	strb	r3, [r7, #6]
 800109e:	4613      	mov	r3, r2
 80010a0:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80010a2:	79bb      	ldrb	r3, [r7, #6]
 80010a4:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80010a6:	797b      	ldrb	r3, [r7, #5]
 80010a8:	737b      	strb	r3, [r7, #13]
	return I2C_Master_Transmit_Blocking(address, dt, 2, 10);
 80010aa:	4b07      	ldr	r3, [pc, #28]	@ (80010c8 <ssd1306_I2C_Write+0x38>)
 80010ac:	681c      	ldr	r4, [r3, #0]
 80010ae:	79fb      	ldrb	r3, [r7, #7]
 80010b0:	b298      	uxth	r0, r3
 80010b2:	f107 010c 	add.w	r1, r7, #12
 80010b6:	230a      	movs	r3, #10
 80010b8:	2202      	movs	r2, #2
 80010ba:	47a0      	blx	r4
 80010bc:	4603      	mov	r3, r0
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3714      	adds	r7, #20
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd90      	pop	{r4, r7, pc}
 80010c6:	bf00      	nop
 80010c8:	200003fc 	.word	0x200003fc

080010cc <Display_UpdateScreen_Task>:

e_system Display_UpdateScreen_Task() {
 80010cc:	b598      	push	{r3, r4, r7, lr}
 80010ce:	af00      	add	r7, sp, #0
	if(Update.Ready_To_Refresh && Update.Ready_DMA && SSD1306.Initialized){
 80010d0:	4b2d      	ldr	r3, [pc, #180]	@ (8001188 <Display_UpdateScreen_Task+0xbc>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d054      	beq.n	8001182 <Display_UpdateScreen_Task+0xb6>
 80010d8:	4b2b      	ldr	r3, [pc, #172]	@ (8001188 <Display_UpdateScreen_Task+0xbc>)
 80010da:	785b      	ldrb	r3, [r3, #1]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d050      	beq.n	8001182 <Display_UpdateScreen_Task+0xb6>
 80010e0:	4b2a      	ldr	r3, [pc, #168]	@ (800118c <Display_UpdateScreen_Task+0xc0>)
 80010e2:	795b      	ldrb	r3, [r3, #5]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d04c      	beq.n	8001182 <Display_UpdateScreen_Task+0xb6>

		switch(Update.state){
 80010e8:	4b27      	ldr	r3, [pc, #156]	@ (8001188 <Display_UpdateScreen_Task+0xbc>)
 80010ea:	78db      	ldrb	r3, [r3, #3]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d002      	beq.n	80010f6 <Display_UpdateScreen_Task+0x2a>
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	d01c      	beq.n	800112e <Display_UpdateScreen_Task+0x62>
 80010f4:	e038      	b.n	8001168 <Display_UpdateScreen_Task+0x9c>
		case PAGE:
			Update.PageData[0] = 0xB0 + Update.Page;     // Set Page
 80010f6:	4b24      	ldr	r3, [pc, #144]	@ (8001188 <Display_UpdateScreen_Task+0xbc>)
 80010f8:	789b      	ldrb	r3, [r3, #2]
 80010fa:	3b50      	subs	r3, #80	@ 0x50
 80010fc:	b2da      	uxtb	r2, r3
 80010fe:	4b22      	ldr	r3, [pc, #136]	@ (8001188 <Display_UpdateScreen_Task+0xbc>)
 8001100:	711a      	strb	r2, [r3, #4]
			Update.PageData[1] = 0x00;                   // Lower Column
 8001102:	4b21      	ldr	r3, [pc, #132]	@ (8001188 <Display_UpdateScreen_Task+0xbc>)
 8001104:	2200      	movs	r2, #0
 8001106:	715a      	strb	r2, [r3, #5]
			Update.PageData[2] = 0x10;                   // Upper Column
 8001108:	4b1f      	ldr	r3, [pc, #124]	@ (8001188 <Display_UpdateScreen_Task+0xbc>)
 800110a:	2210      	movs	r2, #16
 800110c:	719a      	strb	r2, [r3, #6]
			if(I2C_Master_Transmit(SSD1306_I2C_ADDR, 0x00, Update.PageData, 3)		== SYS_OK){
 800110e:	4b20      	ldr	r3, [pc, #128]	@ (8001190 <Display_UpdateScreen_Task+0xc4>)
 8001110:	681c      	ldr	r4, [r3, #0]
 8001112:	2303      	movs	r3, #3
 8001114:	4a1f      	ldr	r2, [pc, #124]	@ (8001194 <Display_UpdateScreen_Task+0xc8>)
 8001116:	2100      	movs	r1, #0
 8001118:	2078      	movs	r0, #120	@ 0x78
 800111a:	47a0      	blx	r4
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d103      	bne.n	800112a <Display_UpdateScreen_Task+0x5e>
				Update.state = DATA;
 8001122:	4b19      	ldr	r3, [pc, #100]	@ (8001188 <Display_UpdateScreen_Task+0xbc>)
 8001124:	2201      	movs	r2, #1
 8001126:	70da      	strb	r2, [r3, #3]
				//Update.Ready_DMA = FALSE;     //< LO DESACTIVO PARA QUE PAGE Y DATA SE HAGA DE UNA SOLA PASADA
			}else{
				return SYS_ERROR;
			}
			break;
 8001128:	e021      	b.n	800116e <Display_UpdateScreen_Task+0xa2>
				return SYS_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	e02a      	b.n	8001184 <Display_UpdateScreen_Task+0xb8>
		case DATA:
			if(I2C_Master_Transmit(	SSD1306_I2C_ADDR, 0x40,
 800112e:	4b18      	ldr	r3, [pc, #96]	@ (8001190 <Display_UpdateScreen_Task+0xc4>)
 8001130:	681c      	ldr	r4, [r3, #0]
									&OLED_DMA_BUFFER[SSD1306_WIDTH * Update.Page],
 8001132:	4b15      	ldr	r3, [pc, #84]	@ (8001188 <Display_UpdateScreen_Task+0xbc>)
 8001134:	789b      	ldrb	r3, [r3, #2]
 8001136:	01db      	lsls	r3, r3, #7
			if(I2C_Master_Transmit(	SSD1306_I2C_ADDR, 0x40,
 8001138:	4a17      	ldr	r2, [pc, #92]	@ (8001198 <Display_UpdateScreen_Task+0xcc>)
 800113a:	441a      	add	r2, r3
 800113c:	2380      	movs	r3, #128	@ 0x80
 800113e:	2140      	movs	r1, #64	@ 0x40
 8001140:	2078      	movs	r0, #120	@ 0x78
 8001142:	47a0      	blx	r4
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d10c      	bne.n	8001164 <Display_UpdateScreen_Task+0x98>
									SSD1306_WIDTH) 									== SYS_OK){
				Update.Page++;
 800114a:	4b0f      	ldr	r3, [pc, #60]	@ (8001188 <Display_UpdateScreen_Task+0xbc>)
 800114c:	789b      	ldrb	r3, [r3, #2]
 800114e:	3301      	adds	r3, #1
 8001150:	b2da      	uxtb	r2, r3
 8001152:	4b0d      	ldr	r3, [pc, #52]	@ (8001188 <Display_UpdateScreen_Task+0xbc>)
 8001154:	709a      	strb	r2, [r3, #2]
				Update.state = PAGE;
 8001156:	4b0c      	ldr	r3, [pc, #48]	@ (8001188 <Display_UpdateScreen_Task+0xbc>)
 8001158:	2200      	movs	r2, #0
 800115a:	70da      	strb	r2, [r3, #3]
				Update.Ready_DMA = FALSE;
 800115c:	4b0a      	ldr	r3, [pc, #40]	@ (8001188 <Display_UpdateScreen_Task+0xbc>)
 800115e:	2200      	movs	r2, #0
 8001160:	705a      	strb	r2, [r3, #1]
			}else{
				return SYS_ERROR;
			}
			break;
 8001162:	e004      	b.n	800116e <Display_UpdateScreen_Task+0xa2>
				return SYS_ERROR;
 8001164:	2301      	movs	r3, #1
 8001166:	e00d      	b.n	8001184 <Display_UpdateScreen_Task+0xb8>
		default:
			Update.Page = 8; //!< fuerzo el if de abajo para reiniciar el sistema
 8001168:	4b07      	ldr	r3, [pc, #28]	@ (8001188 <Display_UpdateScreen_Task+0xbc>)
 800116a:	2208      	movs	r2, #8
 800116c:	709a      	strb	r2, [r3, #2]
		}
		if(Update.Page > 7){
 800116e:	4b06      	ldr	r3, [pc, #24]	@ (8001188 <Display_UpdateScreen_Task+0xbc>)
 8001170:	789b      	ldrb	r3, [r3, #2]
 8001172:	2b07      	cmp	r3, #7
 8001174:	d905      	bls.n	8001182 <Display_UpdateScreen_Task+0xb6>
			Update.Page = 0;
 8001176:	4b04      	ldr	r3, [pc, #16]	@ (8001188 <Display_UpdateScreen_Task+0xbc>)
 8001178:	2200      	movs	r2, #0
 800117a:	709a      	strb	r2, [r3, #2]
			Update.Ready_To_Refresh = FALSE;
 800117c:	4b02      	ldr	r3, [pc, #8]	@ (8001188 <Display_UpdateScreen_Task+0xbc>)
 800117e:	2200      	movs	r2, #0
 8001180:	701a      	strb	r2, [r3, #0]
		}
	}

	return SYS_OK;
 8001182:	2300      	movs	r3, #0
}
 8001184:	4618      	mov	r0, r3
 8001186:	bd98      	pop	{r3, r4, r7, pc}
 8001188:	20000800 	.word	0x20000800
 800118c:	200003f0 	.word	0x200003f0
 8001190:	200003f8 	.word	0x200003f8
 8001194:	20000804 	.word	0x20000804
 8001198:	20000400 	.word	0x20000400

0800119c <Display_I2C_DMA_Ready>:

void Display_I2C_DMA_Ready(uint8_t val){
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	4603      	mov	r3, r0
 80011a4:	71fb      	strb	r3, [r7, #7]
	Update.Ready_DMA = val;
 80011a6:	4a04      	ldr	r2, [pc, #16]	@ (80011b8 <Display_I2C_DMA_Ready+0x1c>)
 80011a8:	79fb      	ldrb	r3, [r7, #7]
 80011aa:	7053      	strb	r3, [r2, #1]
}
 80011ac:	bf00      	nop
 80011ae:	370c      	adds	r7, #12
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr
 80011b8:	20000800 	.word	0x20000800

080011bc <Display_I2C_Refresh_Ready>:

void Display_I2C_Refresh_Ready(uint8_t val){
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	71fb      	strb	r3, [r7, #7]
	Update.Ready_To_Refresh = val;
 80011c6:	4a04      	ldr	r2, [pc, #16]	@ (80011d8 <Display_I2C_Refresh_Ready+0x1c>)
 80011c8:	79fb      	ldrb	r3, [r7, #7]
 80011ca:	7013      	strb	r3, [r2, #0]
}
 80011cc:	bf00      	nop
 80011ce:	370c      	adds	r7, #12
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr
 80011d8:	20000800 	.word	0x20000800

080011dc <Display_SetCursor>:

/**
 * SET CURSOR POSITION
 */
void Display_SetCursor(uint8_t x, uint8_t y)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	460a      	mov	r2, r1
 80011e6:	71fb      	strb	r3, [r7, #7]
 80011e8:	4613      	mov	r3, r2
 80011ea:	71bb      	strb	r3, [r7, #6]
	SSD1306.CurrentX = x;
 80011ec:	79fb      	ldrb	r3, [r7, #7]
 80011ee:	b29a      	uxth	r2, r3
 80011f0:	4b05      	ldr	r3, [pc, #20]	@ (8001208 <Display_SetCursor+0x2c>)
 80011f2:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 80011f4:	79bb      	ldrb	r3, [r7, #6]
 80011f6:	b29a      	uxth	r2, r3
 80011f8:	4b03      	ldr	r3, [pc, #12]	@ (8001208 <Display_SetCursor+0x2c>)
 80011fa:	805a      	strh	r2, [r3, #2]
}
 80011fc:	bf00      	nop
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr
 8001208:	200003f0 	.word	0x200003f0

0800120c <Display_Fill>:

void Display_Fill(SSD1306_COLOR_t color) {
 800120c:	b480      	push	{r7}
 800120e:	b085      	sub	sp, #20
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	//memset(OLED_DMA_BUFFER, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, 1024);
	uint32_t i;

	for(i = 0; i < sizeof(OLED_DMA_BUFFER); i++)	// Fill screenbuffer with a constant value (color)
 8001216:	2300      	movs	r3, #0
 8001218:	60fb      	str	r3, [r7, #12]
 800121a:	e00d      	b.n	8001238 <Display_Fill+0x2c>
	{
		OLED_DMA_BUFFER[i] = (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF;
 800121c:	79fb      	ldrb	r3, [r7, #7]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d101      	bne.n	8001226 <Display_Fill+0x1a>
 8001222:	2100      	movs	r1, #0
 8001224:	e000      	b.n	8001228 <Display_Fill+0x1c>
 8001226:	21ff      	movs	r1, #255	@ 0xff
 8001228:	4a09      	ldr	r2, [pc, #36]	@ (8001250 <Display_Fill+0x44>)
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	4413      	add	r3, r2
 800122e:	460a      	mov	r2, r1
 8001230:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < sizeof(OLED_DMA_BUFFER); i++)	// Fill screenbuffer with a constant value (color)
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	3301      	adds	r3, #1
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800123e:	d3ed      	bcc.n	800121c <Display_Fill+0x10>
	}
}
 8001240:	bf00      	nop
 8001242:	bf00      	nop
 8001244:	3714      	adds	r7, #20
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	20000400 	.word	0x20000400

08001254 <Display_DrawPixel>:

void Display_Clear (void){
	Display_Fill (0);
}

void Display_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	4603      	mov	r3, r0
 800125c:	80fb      	strh	r3, [r7, #6]
 800125e:	460b      	mov	r3, r1
 8001260:	80bb      	strh	r3, [r7, #4]
 8001262:	4613      	mov	r3, r2
 8001264:	70fb      	strb	r3, [r7, #3]
	if (
 8001266:	88fb      	ldrh	r3, [r7, #6]
 8001268:	2b7f      	cmp	r3, #127	@ 0x7f
 800126a:	d848      	bhi.n	80012fe <Display_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 800126c:	88bb      	ldrh	r3, [r7, #4]
 800126e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001270:	d845      	bhi.n	80012fe <Display_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001272:	4b26      	ldr	r3, [pc, #152]	@ (800130c <Display_DrawPixel+0xb8>)
 8001274:	791b      	ldrb	r3, [r3, #4]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d006      	beq.n	8001288 <Display_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800127a:	78fb      	ldrb	r3, [r7, #3]
 800127c:	2b00      	cmp	r3, #0
 800127e:	bf0c      	ite	eq
 8001280:	2301      	moveq	r3, #1
 8001282:	2300      	movne	r3, #0
 8001284:	b2db      	uxtb	r3, r3
 8001286:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001288:	78fb      	ldrb	r3, [r7, #3]
 800128a:	2b01      	cmp	r3, #1
 800128c:	d11a      	bne.n	80012c4 <Display_DrawPixel+0x70>
		OLED_DMA_BUFFER[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800128e:	88fa      	ldrh	r2, [r7, #6]
 8001290:	88bb      	ldrh	r3, [r7, #4]
 8001292:	08db      	lsrs	r3, r3, #3
 8001294:	b298      	uxth	r0, r3
 8001296:	4603      	mov	r3, r0
 8001298:	01db      	lsls	r3, r3, #7
 800129a:	4413      	add	r3, r2
 800129c:	4a1c      	ldr	r2, [pc, #112]	@ (8001310 <Display_DrawPixel+0xbc>)
 800129e:	5cd3      	ldrb	r3, [r2, r3]
 80012a0:	b25a      	sxtb	r2, r3
 80012a2:	88bb      	ldrh	r3, [r7, #4]
 80012a4:	f003 0307 	and.w	r3, r3, #7
 80012a8:	2101      	movs	r1, #1
 80012aa:	fa01 f303 	lsl.w	r3, r1, r3
 80012ae:	b25b      	sxtb	r3, r3
 80012b0:	4313      	orrs	r3, r2
 80012b2:	b259      	sxtb	r1, r3
 80012b4:	88fa      	ldrh	r2, [r7, #6]
 80012b6:	4603      	mov	r3, r0
 80012b8:	01db      	lsls	r3, r3, #7
 80012ba:	4413      	add	r3, r2
 80012bc:	b2c9      	uxtb	r1, r1
 80012be:	4a14      	ldr	r2, [pc, #80]	@ (8001310 <Display_DrawPixel+0xbc>)
 80012c0:	54d1      	strb	r1, [r2, r3]
 80012c2:	e01d      	b.n	8001300 <Display_DrawPixel+0xac>
	} else {
		OLED_DMA_BUFFER[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80012c4:	88fa      	ldrh	r2, [r7, #6]
 80012c6:	88bb      	ldrh	r3, [r7, #4]
 80012c8:	08db      	lsrs	r3, r3, #3
 80012ca:	b298      	uxth	r0, r3
 80012cc:	4603      	mov	r3, r0
 80012ce:	01db      	lsls	r3, r3, #7
 80012d0:	4413      	add	r3, r2
 80012d2:	4a0f      	ldr	r2, [pc, #60]	@ (8001310 <Display_DrawPixel+0xbc>)
 80012d4:	5cd3      	ldrb	r3, [r2, r3]
 80012d6:	b25a      	sxtb	r2, r3
 80012d8:	88bb      	ldrh	r3, [r7, #4]
 80012da:	f003 0307 	and.w	r3, r3, #7
 80012de:	2101      	movs	r1, #1
 80012e0:	fa01 f303 	lsl.w	r3, r1, r3
 80012e4:	b25b      	sxtb	r3, r3
 80012e6:	43db      	mvns	r3, r3
 80012e8:	b25b      	sxtb	r3, r3
 80012ea:	4013      	ands	r3, r2
 80012ec:	b259      	sxtb	r1, r3
 80012ee:	88fa      	ldrh	r2, [r7, #6]
 80012f0:	4603      	mov	r3, r0
 80012f2:	01db      	lsls	r3, r3, #7
 80012f4:	4413      	add	r3, r2
 80012f6:	b2c9      	uxtb	r1, r1
 80012f8:	4a05      	ldr	r2, [pc, #20]	@ (8001310 <Display_DrawPixel+0xbc>)
 80012fa:	54d1      	strb	r1, [r2, r3]
 80012fc:	e000      	b.n	8001300 <Display_DrawPixel+0xac>
		return;
 80012fe:	bf00      	nop
	}
}
 8001300:	370c      	adds	r7, #12
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	200003f0 	.word	0x200003f0
 8001310:	20000400 	.word	0x20000400

08001314 <Display_DrawBitmap>:

void Display_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b086      	sub	sp, #24
 8001318:	af00      	add	r7, sp, #0
 800131a:	60ba      	str	r2, [r7, #8]
 800131c:	461a      	mov	r2, r3
 800131e:	4603      	mov	r3, r0
 8001320:	81fb      	strh	r3, [r7, #14]
 8001322:	460b      	mov	r3, r1
 8001324:	81bb      	strh	r3, [r7, #12]
 8001326:	4613      	mov	r3, r2
 8001328:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 800132a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800132e:	3307      	adds	r3, #7
 8001330:	2b00      	cmp	r3, #0
 8001332:	da00      	bge.n	8001336 <Display_DrawBitmap+0x22>
 8001334:	3307      	adds	r3, #7
 8001336:	10db      	asrs	r3, r3, #3
 8001338:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 800133a:	2300      	movs	r3, #0
 800133c:	75fb      	strb	r3, [r7, #23]

    //memcpy(&OLED_DMA_BUFFER[OFFSET_DATA], bitmap, 1024);
	/*for(uint16_t i = 0; i<1024; i++){
		OLED_DMA_BUFFER[i] = bitmap[i];
	}*/
    for(int16_t j=0; j<h; j++, y++)
 800133e:	2300      	movs	r3, #0
 8001340:	82bb      	strh	r3, [r7, #20]
 8001342:	e044      	b.n	80013ce <Display_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 8001344:	2300      	movs	r3, #0
 8001346:	827b      	strh	r3, [r7, #18]
 8001348:	e02f      	b.n	80013aa <Display_DrawBitmap+0x96>
        {
            if(i & 7)
 800134a:	8a7b      	ldrh	r3, [r7, #18]
 800134c:	f003 0307 	and.w	r3, r3, #7
 8001350:	2b00      	cmp	r3, #0
 8001352:	d003      	beq.n	800135c <Display_DrawBitmap+0x48>
            {
               byte <<= 1;
 8001354:	7dfb      	ldrb	r3, [r7, #23]
 8001356:	005b      	lsls	r3, r3, #1
 8001358:	75fb      	strb	r3, [r7, #23]
 800135a:	e012      	b.n	8001382 <Display_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 800135c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001360:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001364:	fb03 f202 	mul.w	r2, r3, r2
 8001368:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800136c:	2b00      	cmp	r3, #0
 800136e:	da00      	bge.n	8001372 <Display_DrawBitmap+0x5e>
 8001370:	3307      	adds	r3, #7
 8001372:	10db      	asrs	r3, r3, #3
 8001374:	b21b      	sxth	r3, r3
 8001376:	4413      	add	r3, r2
 8001378:	461a      	mov	r2, r3
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	4413      	add	r3, r2
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) Display_DrawPixel(x+i, y, color);
 8001382:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001386:	2b00      	cmp	r3, #0
 8001388:	da09      	bge.n	800139e <Display_DrawBitmap+0x8a>
 800138a:	89fa      	ldrh	r2, [r7, #14]
 800138c:	8a7b      	ldrh	r3, [r7, #18]
 800138e:	4413      	add	r3, r2
 8001390:	b29b      	uxth	r3, r3
 8001392:	89b9      	ldrh	r1, [r7, #12]
 8001394:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001396:	b2d2      	uxtb	r2, r2
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff ff5b 	bl	8001254 <Display_DrawPixel>
        for(int16_t i=0; i<w; i++)
 800139e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80013a2:	b29b      	uxth	r3, r3
 80013a4:	3301      	adds	r3, #1
 80013a6:	b29b      	uxth	r3, r3
 80013a8:	827b      	strh	r3, [r7, #18]
 80013aa:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80013ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013b2:	429a      	cmp	r2, r3
 80013b4:	dbc9      	blt.n	800134a <Display_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 80013b6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80013ba:	b29b      	uxth	r3, r3
 80013bc:	3301      	adds	r3, #1
 80013be:	b29b      	uxth	r3, r3
 80013c0:	82bb      	strh	r3, [r7, #20]
 80013c2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80013c6:	b29b      	uxth	r3, r3
 80013c8:	3301      	adds	r3, #1
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	81bb      	strh	r3, [r7, #12]
 80013ce:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80013d2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80013d6:	429a      	cmp	r2, r3
 80013d8:	dbb4      	blt.n	8001344 <Display_DrawBitmap+0x30>
        }
    }
}
 80013da:	bf00      	nop
 80013dc:	bf00      	nop
 80013de:	3718      	adds	r7, #24
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}

080013e4 <Display_WriteChar>:

/**
 * WRITE A CHAR INTO THE DISPLAY BUFFER
 */
char Display_WriteChar(char ch, FontDef_t Font, SSD1306_COLOR_t color)
{
 80013e4:	b590      	push	{r4, r7, lr}
 80013e6:	b089      	sub	sp, #36	@ 0x24
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4604      	mov	r4, r0
 80013ec:	1d38      	adds	r0, r7, #4
 80013ee:	e880 0006 	stmia.w	r0, {r1, r2}
 80013f2:	461a      	mov	r2, r3
 80013f4:	4623      	mov	r3, r4
 80013f6:	73fb      	strb	r3, [r7, #15]
 80013f8:	4613      	mov	r3, r2
 80013fa:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80013fc:	4b36      	ldr	r3, [pc, #216]	@ (80014d8 <Display_WriteChar+0xf4>)
 80013fe:	881b      	ldrh	r3, [r3, #0]
 8001400:	461a      	mov	r2, r3
 8001402:	793b      	ldrb	r3, [r7, #4]
 8001404:	4413      	add	r3, r2
 8001406:	2b7f      	cmp	r3, #127	@ 0x7f
 8001408:	dc06      	bgt.n	8001418 <Display_WriteChar+0x34>
    		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 800140a:	4b33      	ldr	r3, [pc, #204]	@ (80014d8 <Display_WriteChar+0xf4>)
 800140c:	885b      	ldrh	r3, [r3, #2]
 800140e:	461a      	mov	r2, r3
 8001410:	797b      	ldrb	r3, [r7, #5]
 8001412:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8001414:	2b3f      	cmp	r3, #63	@ 0x3f
 8001416:	dd01      	ble.n	800141c <Display_WriteChar+0x38>
    {

        return 0;	// Not enough space on current line
 8001418:	2300      	movs	r3, #0
 800141a:	e058      	b.n	80014ce <Display_WriteChar+0xea>
    }

    for (i = 0; i < Font.FontHeight; i++)	// Translate font to screenbuffer
 800141c:	2300      	movs	r3, #0
 800141e:	61fb      	str	r3, [r7, #28]
 8001420:	e048      	b.n	80014b4 <Display_WriteChar+0xd0>
    {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001422:	68ba      	ldr	r2, [r7, #8]
 8001424:	7bfb      	ldrb	r3, [r7, #15]
 8001426:	3b20      	subs	r3, #32
 8001428:	7979      	ldrb	r1, [r7, #5]
 800142a:	fb01 f303 	mul.w	r3, r1, r3
 800142e:	4619      	mov	r1, r3
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	440b      	add	r3, r1
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	4413      	add	r3, r2
 8001438:	881b      	ldrh	r3, [r3, #0]
 800143a:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++)
 800143c:	2300      	movs	r3, #0
 800143e:	61bb      	str	r3, [r7, #24]
 8001440:	e030      	b.n	80014a4 <Display_WriteChar+0xc0>
        {
            if ((b << j) & 0x8000)
 8001442:	697a      	ldr	r2, [r7, #20]
 8001444:	69bb      	ldr	r3, [r7, #24]
 8001446:	fa02 f303 	lsl.w	r3, r2, r3
 800144a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d010      	beq.n	8001474 <Display_WriteChar+0x90>
                Display_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001452:	4b21      	ldr	r3, [pc, #132]	@ (80014d8 <Display_WriteChar+0xf4>)
 8001454:	881a      	ldrh	r2, [r3, #0]
 8001456:	69bb      	ldr	r3, [r7, #24]
 8001458:	b29b      	uxth	r3, r3
 800145a:	4413      	add	r3, r2
 800145c:	b298      	uxth	r0, r3
 800145e:	4b1e      	ldr	r3, [pc, #120]	@ (80014d8 <Display_WriteChar+0xf4>)
 8001460:	885a      	ldrh	r2, [r3, #2]
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	b29b      	uxth	r3, r3
 8001466:	4413      	add	r3, r2
 8001468:	b29b      	uxth	r3, r3
 800146a:	7bba      	ldrb	r2, [r7, #14]
 800146c:	4619      	mov	r1, r3
 800146e:	f7ff fef1 	bl	8001254 <Display_DrawPixel>
 8001472:	e014      	b.n	800149e <Display_WriteChar+0xba>
            else
                Display_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001474:	4b18      	ldr	r3, [pc, #96]	@ (80014d8 <Display_WriteChar+0xf4>)
 8001476:	881a      	ldrh	r2, [r3, #0]
 8001478:	69bb      	ldr	r3, [r7, #24]
 800147a:	b29b      	uxth	r3, r3
 800147c:	4413      	add	r3, r2
 800147e:	b298      	uxth	r0, r3
 8001480:	4b15      	ldr	r3, [pc, #84]	@ (80014d8 <Display_WriteChar+0xf4>)
 8001482:	885a      	ldrh	r2, [r3, #2]
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	b29b      	uxth	r3, r3
 8001488:	4413      	add	r3, r2
 800148a:	b299      	uxth	r1, r3
 800148c:	7bbb      	ldrb	r3, [r7, #14]
 800148e:	2b00      	cmp	r3, #0
 8001490:	bf0c      	ite	eq
 8001492:	2301      	moveq	r3, #1
 8001494:	2300      	movne	r3, #0
 8001496:	b2db      	uxtb	r3, r3
 8001498:	461a      	mov	r2, r3
 800149a:	f7ff fedb 	bl	8001254 <Display_DrawPixel>
        for (j = 0; j < Font.FontWidth; j++)
 800149e:	69bb      	ldr	r3, [r7, #24]
 80014a0:	3301      	adds	r3, #1
 80014a2:	61bb      	str	r3, [r7, #24]
 80014a4:	793b      	ldrb	r3, [r7, #4]
 80014a6:	461a      	mov	r2, r3
 80014a8:	69bb      	ldr	r3, [r7, #24]
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d3c9      	bcc.n	8001442 <Display_WriteChar+0x5e>
    for (i = 0; i < Font.FontHeight; i++)	// Translate font to screenbuffer
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	3301      	adds	r3, #1
 80014b2:	61fb      	str	r3, [r7, #28]
 80014b4:	797b      	ldrb	r3, [r7, #5]
 80014b6:	461a      	mov	r2, r3
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d3b1      	bcc.n	8001422 <Display_WriteChar+0x3e>
        }
    }
    SSD1306.CurrentX += Font.FontWidth;	// The current space is now taken
 80014be:	4b06      	ldr	r3, [pc, #24]	@ (80014d8 <Display_WriteChar+0xf4>)
 80014c0:	881b      	ldrh	r3, [r3, #0]
 80014c2:	793a      	ldrb	r2, [r7, #4]
 80014c4:	4413      	add	r3, r2
 80014c6:	b29a      	uxth	r2, r3
 80014c8:	4b03      	ldr	r3, [pc, #12]	@ (80014d8 <Display_WriteChar+0xf4>)
 80014ca:	801a      	strh	r2, [r3, #0]

    return ch;	// Return written char for validation
 80014cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3724      	adds	r7, #36	@ 0x24
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd90      	pop	{r4, r7, pc}
 80014d6:	bf00      	nop
 80014d8:	200003f0 	.word	0x200003f0

080014dc <Display_WriteString>:

/**
 * WRITE STRING INTO THE DISPLAY BUFFER
 */
char Display_WriteString(char* str, FontDef_t Font, SSD1306_COLOR_t color)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	60f8      	str	r0, [r7, #12]
 80014e4:	1d38      	adds	r0, r7, #4
 80014e6:	e880 0006 	stmia.w	r0, {r1, r2}
 80014ea:	70fb      	strb	r3, [r7, #3]
    while (*str){
 80014ec:	e012      	b.n	8001514 <Display_WriteString+0x38>
        if (Display_WriteChar(*str, Font, color) != *str)	// Write until null-byte
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	7818      	ldrb	r0, [r3, #0]
 80014f2:	78fb      	ldrb	r3, [r7, #3]
 80014f4:	1d3a      	adds	r2, r7, #4
 80014f6:	ca06      	ldmia	r2, {r1, r2}
 80014f8:	f7ff ff74 	bl	80013e4 <Display_WriteChar>
 80014fc:	4603      	mov	r3, r0
 80014fe:	461a      	mov	r2, r3
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	429a      	cmp	r2, r3
 8001506:	d002      	beq.n	800150e <Display_WriteString+0x32>
        	return *str;	// Char could not be written
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	e008      	b.n	8001520 <Display_WriteString+0x44>

        str++;	// Next char
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	3301      	adds	r3, #1
 8001512:	60fb      	str	r3, [r7, #12]
    while (*str){
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d1e8      	bne.n	80014ee <Display_WriteString+0x12>
    }
    return *str;	// Everything ok
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	781b      	ldrb	r3, [r3, #0]
}
 8001520:	4618      	mov	r0, r3
 8001522:	3710      	adds	r7, #16
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}

08001528 <Display_DrawLine>:

void Display_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 8001528:	b590      	push	{r4, r7, lr}
 800152a:	b085      	sub	sp, #20
 800152c:	af00      	add	r7, sp, #0
 800152e:	4604      	mov	r4, r0
 8001530:	4608      	mov	r0, r1
 8001532:	4611      	mov	r1, r2
 8001534:	461a      	mov	r2, r3
 8001536:	4623      	mov	r3, r4
 8001538:	80fb      	strh	r3, [r7, #6]
 800153a:	4603      	mov	r3, r0
 800153c:	80bb      	strh	r3, [r7, #4]
 800153e:	460b      	mov	r3, r1
 8001540:	807b      	strh	r3, [r7, #2]
 8001542:	4613      	mov	r3, r2
 8001544:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, i, tmp;

	if(x0 != x1 && y0 != y1)
 8001546:	88fa      	ldrh	r2, [r7, #6]
 8001548:	887b      	ldrh	r3, [r7, #2]
 800154a:	429a      	cmp	r2, r3
 800154c:	d004      	beq.n	8001558 <Display_DrawLine+0x30>
 800154e:	88ba      	ldrh	r2, [r7, #4]
 8001550:	883b      	ldrh	r3, [r7, #0]
 8001552:	429a      	cmp	r2, r3
 8001554:	f040 8090 	bne.w	8001678 <Display_DrawLine+0x150>
		return;

	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 8001558:	88fb      	ldrh	r3, [r7, #6]
 800155a:	2b7f      	cmp	r3, #127	@ 0x7f
 800155c:	d901      	bls.n	8001562 <Display_DrawLine+0x3a>
		x0 = SSD1306_WIDTH - 1;
 800155e:	237f      	movs	r3, #127	@ 0x7f
 8001560:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= SSD1306_WIDTH) {
 8001562:	887b      	ldrh	r3, [r7, #2]
 8001564:	2b7f      	cmp	r3, #127	@ 0x7f
 8001566:	d901      	bls.n	800156c <Display_DrawLine+0x44>
		x1 = SSD1306_WIDTH - 1;
 8001568:	237f      	movs	r3, #127	@ 0x7f
 800156a:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= SSD1306_HEIGHT) {
 800156c:	88bb      	ldrh	r3, [r7, #4]
 800156e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001570:	d901      	bls.n	8001576 <Display_DrawLine+0x4e>
		y0 = SSD1306_HEIGHT - 1;
 8001572:	233f      	movs	r3, #63	@ 0x3f
 8001574:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= SSD1306_HEIGHT) {
 8001576:	883b      	ldrh	r3, [r7, #0]
 8001578:	2b3f      	cmp	r3, #63	@ 0x3f
 800157a:	d901      	bls.n	8001580 <Display_DrawLine+0x58>
		y1 = SSD1306_HEIGHT - 1;
 800157c:	233f      	movs	r3, #63	@ 0x3f
 800157e:	803b      	strh	r3, [r7, #0]
	}

	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1);
 8001580:	88fa      	ldrh	r2, [r7, #6]
 8001582:	887b      	ldrh	r3, [r7, #2]
 8001584:	429a      	cmp	r2, r3
 8001586:	d205      	bcs.n	8001594 <Display_DrawLine+0x6c>
 8001588:	887a      	ldrh	r2, [r7, #2]
 800158a:	88fb      	ldrh	r3, [r7, #6]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	b29b      	uxth	r3, r3
 8001590:	b21b      	sxth	r3, r3
 8001592:	e004      	b.n	800159e <Display_DrawLine+0x76>
 8001594:	88fa      	ldrh	r2, [r7, #6]
 8001596:	887b      	ldrh	r3, [r7, #2]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	b29b      	uxth	r3, r3
 800159c:	b21b      	sxth	r3, r3
 800159e:	81bb      	strh	r3, [r7, #12]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1);
 80015a0:	88ba      	ldrh	r2, [r7, #4]
 80015a2:	883b      	ldrh	r3, [r7, #0]
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d205      	bcs.n	80015b4 <Display_DrawLine+0x8c>
 80015a8:	883a      	ldrh	r2, [r7, #0]
 80015aa:	88bb      	ldrh	r3, [r7, #4]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	b21b      	sxth	r3, r3
 80015b2:	e004      	b.n	80015be <Display_DrawLine+0x96>
 80015b4:	88ba      	ldrh	r2, [r7, #4]
 80015b6:	883b      	ldrh	r3, [r7, #0]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	b29b      	uxth	r3, r3
 80015bc:	b21b      	sxth	r3, r3
 80015be:	817b      	strh	r3, [r7, #10]

	if (dx == 0) {
 80015c0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d129      	bne.n	800161c <Display_DrawLine+0xf4>
		if (y1 < y0) {
 80015c8:	883a      	ldrh	r2, [r7, #0]
 80015ca:	88bb      	ldrh	r3, [r7, #4]
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d205      	bcs.n	80015dc <Display_DrawLine+0xb4>
			tmp = y1;
 80015d0:	883b      	ldrh	r3, [r7, #0]
 80015d2:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 80015d4:	88bb      	ldrh	r3, [r7, #4]
 80015d6:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 80015d8:	893b      	ldrh	r3, [r7, #8]
 80015da:	80bb      	strh	r3, [r7, #4]
		}

		if (x1 < x0) {
 80015dc:	887a      	ldrh	r2, [r7, #2]
 80015de:	88fb      	ldrh	r3, [r7, #6]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d205      	bcs.n	80015f0 <Display_DrawLine+0xc8>
			tmp = x1;
 80015e4:	887b      	ldrh	r3, [r7, #2]
 80015e6:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 80015e8:	88fb      	ldrh	r3, [r7, #6]
 80015ea:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 80015ec:	893b      	ldrh	r3, [r7, #8]
 80015ee:	80fb      	strh	r3, [r7, #6]
		}

		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 80015f0:	88bb      	ldrh	r3, [r7, #4]
 80015f2:	81fb      	strh	r3, [r7, #14]
 80015f4:	e00c      	b.n	8001610 <Display_DrawLine+0xe8>
			Display_DrawPixel(x0, i, c);
 80015f6:	89f9      	ldrh	r1, [r7, #14]
 80015f8:	f897 2020 	ldrb.w	r2, [r7, #32]
 80015fc:	88fb      	ldrh	r3, [r7, #6]
 80015fe:	4618      	mov	r0, r3
 8001600:	f7ff fe28 	bl	8001254 <Display_DrawPixel>
		for (i = y0; i <= y1; i++) {
 8001604:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001608:	b29b      	uxth	r3, r3
 800160a:	3301      	adds	r3, #1
 800160c:	b29b      	uxth	r3, r3
 800160e:	81fb      	strh	r3, [r7, #14]
 8001610:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001614:	883b      	ldrh	r3, [r7, #0]
 8001616:	429a      	cmp	r2, r3
 8001618:	dded      	ble.n	80015f6 <Display_DrawLine+0xce>
		}

		/* Return from function */
		return;
 800161a:	e030      	b.n	800167e <Display_DrawLine+0x156>
	}

	if (dy == 0) {
 800161c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d12b      	bne.n	800167c <Display_DrawLine+0x154>
		if (y1 < y0) {
 8001624:	883a      	ldrh	r2, [r7, #0]
 8001626:	88bb      	ldrh	r3, [r7, #4]
 8001628:	429a      	cmp	r2, r3
 800162a:	d205      	bcs.n	8001638 <Display_DrawLine+0x110>
			tmp = y1;
 800162c:	883b      	ldrh	r3, [r7, #0]
 800162e:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8001630:	88bb      	ldrh	r3, [r7, #4]
 8001632:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8001634:	893b      	ldrh	r3, [r7, #8]
 8001636:	80bb      	strh	r3, [r7, #4]
		}

		if (x1 < x0) {
 8001638:	887a      	ldrh	r2, [r7, #2]
 800163a:	88fb      	ldrh	r3, [r7, #6]
 800163c:	429a      	cmp	r2, r3
 800163e:	d205      	bcs.n	800164c <Display_DrawLine+0x124>
			tmp = x1;
 8001640:	887b      	ldrh	r3, [r7, #2]
 8001642:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8001644:	88fb      	ldrh	r3, [r7, #6]
 8001646:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8001648:	893b      	ldrh	r3, [r7, #8]
 800164a:	80fb      	strh	r3, [r7, #6]
		}

		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 800164c:	88fb      	ldrh	r3, [r7, #6]
 800164e:	81fb      	strh	r3, [r7, #14]
 8001650:	e00c      	b.n	800166c <Display_DrawLine+0x144>
			Display_DrawPixel(i, y0, c);
 8001652:	89fb      	ldrh	r3, [r7, #14]
 8001654:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001658:	88b9      	ldrh	r1, [r7, #4]
 800165a:	4618      	mov	r0, r3
 800165c:	f7ff fdfa 	bl	8001254 <Display_DrawPixel>
		for (i = x0; i <= x1; i++) {
 8001660:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001664:	b29b      	uxth	r3, r3
 8001666:	3301      	adds	r3, #1
 8001668:	b29b      	uxth	r3, r3
 800166a:	81fb      	strh	r3, [r7, #14]
 800166c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001670:	887b      	ldrh	r3, [r7, #2]
 8001672:	429a      	cmp	r2, r3
 8001674:	dded      	ble.n	8001652 <Display_DrawLine+0x12a>
		}
	}
	return;
 8001676:	e001      	b.n	800167c <Display_DrawLine+0x154>
		return;
 8001678:	bf00      	nop
 800167a:	e000      	b.n	800167e <Display_DrawLine+0x156>
	return;
 800167c:	bf00      	nop
}
 800167e:	3714      	adds	r7, #20
 8001680:	46bd      	mov	sp, r7
 8001682:	bd90      	pop	{r4, r7, pc}

08001684 <Display_DrawFilledRectangle>:
	Display_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
	Display_DrawLine(x, y, x, y + h, c);         /* Left line */
	Display_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
}

void Display_DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 8001684:	b590      	push	{r4, r7, lr}
 8001686:	b087      	sub	sp, #28
 8001688:	af02      	add	r7, sp, #8
 800168a:	4604      	mov	r4, r0
 800168c:	4608      	mov	r0, r1
 800168e:	4611      	mov	r1, r2
 8001690:	461a      	mov	r2, r3
 8001692:	4623      	mov	r3, r4
 8001694:	80fb      	strh	r3, [r7, #6]
 8001696:	4603      	mov	r3, r0
 8001698:	80bb      	strh	r3, [r7, #4]
 800169a:	460b      	mov	r3, r1
 800169c:	807b      	strh	r3, [r7, #2]
 800169e:	4613      	mov	r3, r2
 80016a0:	803b      	strh	r3, [r7, #0]
	uint8_t i;

	/* Check input parameters */
	if (
 80016a2:	88fb      	ldrh	r3, [r7, #6]
 80016a4:	2b7f      	cmp	r3, #127	@ 0x7f
 80016a6:	d836      	bhi.n	8001716 <Display_DrawFilledRectangle+0x92>
		x >= SSD1306_WIDTH ||
 80016a8:	88bb      	ldrh	r3, [r7, #4]
 80016aa:	2b3f      	cmp	r3, #63	@ 0x3f
 80016ac:	d833      	bhi.n	8001716 <Display_DrawFilledRectangle+0x92>
		/* Return error */
		return;
	}

	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 80016ae:	88fa      	ldrh	r2, [r7, #6]
 80016b0:	887b      	ldrh	r3, [r7, #2]
 80016b2:	4413      	add	r3, r2
 80016b4:	2b7f      	cmp	r3, #127	@ 0x7f
 80016b6:	dd03      	ble.n	80016c0 <Display_DrawFilledRectangle+0x3c>
		w = SSD1306_WIDTH - x;
 80016b8:	88fb      	ldrh	r3, [r7, #6]
 80016ba:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 80016be:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 80016c0:	88ba      	ldrh	r2, [r7, #4]
 80016c2:	883b      	ldrh	r3, [r7, #0]
 80016c4:	4413      	add	r3, r2
 80016c6:	2b3f      	cmp	r3, #63	@ 0x3f
 80016c8:	dd03      	ble.n	80016d2 <Display_DrawFilledRectangle+0x4e>
		h = SSD1306_HEIGHT - y;
 80016ca:	88bb      	ldrh	r3, [r7, #4]
 80016cc:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 80016d0:	803b      	strh	r3, [r7, #0]
	}

	/* Draw lines */
	for (i = 0; i <= h; i++) {
 80016d2:	2300      	movs	r3, #0
 80016d4:	73fb      	strb	r3, [r7, #15]
 80016d6:	e018      	b.n	800170a <Display_DrawFilledRectangle+0x86>
		/* Draw lines */
		Display_DrawLine(x, y + i, x + w, y + i, c);
 80016d8:	7bfb      	ldrb	r3, [r7, #15]
 80016da:	b29a      	uxth	r2, r3
 80016dc:	88bb      	ldrh	r3, [r7, #4]
 80016de:	4413      	add	r3, r2
 80016e0:	b299      	uxth	r1, r3
 80016e2:	88fa      	ldrh	r2, [r7, #6]
 80016e4:	887b      	ldrh	r3, [r7, #2]
 80016e6:	4413      	add	r3, r2
 80016e8:	b29c      	uxth	r4, r3
 80016ea:	7bfb      	ldrb	r3, [r7, #15]
 80016ec:	b29a      	uxth	r2, r3
 80016ee:	88bb      	ldrh	r3, [r7, #4]
 80016f0:	4413      	add	r3, r2
 80016f2:	b29a      	uxth	r2, r3
 80016f4:	88f8      	ldrh	r0, [r7, #6]
 80016f6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80016fa:	9300      	str	r3, [sp, #0]
 80016fc:	4613      	mov	r3, r2
 80016fe:	4622      	mov	r2, r4
 8001700:	f7ff ff12 	bl	8001528 <Display_DrawLine>
	for (i = 0; i <= h; i++) {
 8001704:	7bfb      	ldrb	r3, [r7, #15]
 8001706:	3301      	adds	r3, #1
 8001708:	73fb      	strb	r3, [r7, #15]
 800170a:	7bfb      	ldrb	r3, [r7, #15]
 800170c:	b29b      	uxth	r3, r3
 800170e:	883a      	ldrh	r2, [r7, #0]
 8001710:	429a      	cmp	r2, r3
 8001712:	d2e1      	bcs.n	80016d8 <Display_DrawFilledRectangle+0x54>
 8001714:	e000      	b.n	8001718 <Display_DrawFilledRectangle+0x94>
		return;
 8001716:	bf00      	nop
	}
}
 8001718:	3714      	adds	r7, #20
 800171a:	46bd      	mov	sp, r7
 800171c:	bd90      	pop	{r4, r7, pc}

0800171e <Encoder_Init>:
 *      Author: Agustín Alejandro Mayer
 */

#include "Motors/encoder.h"

void Encoder_Init(s_encoder *enc, uint8_t reset){
 800171e:	b480      	push	{r7}
 8001720:	b083      	sub	sp, #12
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
 8001726:	460b      	mov	r3, r1
 8001728:	70fb      	strb	r3, [r7, #3]
	enc->pulses = 0;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2200      	movs	r2, #0
 800172e:	809a      	strh	r2, [r3, #4]
	enc->resetBase = reset;
 8001730:	78fb      	ldrb	r3, [r7, #3]
 8001732:	b29a      	uxth	r2, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	801a      	strh	r2, [r3, #0]
	enc->timeReset = reset;
 8001738:	78fb      	ldrb	r3, [r7, #3]
 800173a:	b29a      	uxth	r2, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	805a      	strh	r2, [r3, #2]
	enc->counter1s = 1000 / reset;
 8001740:	78fb      	ldrb	r3, [r7, #3]
 8001742:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001746:	fb92 f3f3 	sdiv	r3, r2, r3
 800174a:	b2da      	uxtb	r2, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	729a      	strb	r2, [r3, #10]
}
 8001750:	bf00      	nop
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <Encoder_Task>:

void Encoder_Task(s_encoder *enc){
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
	enc->timeReset--;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	885b      	ldrh	r3, [r3, #2]
 8001768:	3b01      	subs	r3, #1
 800176a:	b29a      	uxth	r2, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	805a      	strh	r2, [r3, #2]
	if(!enc->timeReset){
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	885b      	ldrh	r3, [r3, #2]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d10e      	bne.n	8001796 <Encoder_Task+0x3a>

		enc->fastPPS += enc->pulses;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	88da      	ldrh	r2, [r3, #6]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	889b      	ldrh	r3, [r3, #4]
 8001780:	4413      	add	r3, r2
 8001782:	b29a      	uxth	r2, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	80da      	strh	r2, [r3, #6]

		enc->timeReset = enc->resetBase;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	881a      	ldrh	r2, [r3, #0]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	805a      	strh	r2, [r3, #2]
		enc->pulses = 0;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2200      	movs	r2, #0
 8001794:	809a      	strh	r2, [r3, #4]
	}
	enc->counter1s--;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	7a9b      	ldrb	r3, [r3, #10]
 800179a:	3b01      	subs	r3, #1
 800179c:	b2da      	uxtb	r2, r3
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	729a      	strb	r2, [r3, #10]
	if(!enc->counter1s){
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	7a9b      	ldrb	r3, [r3, #10]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d102      	bne.n	80017b0 <Encoder_Task+0x54>
		enc->pps = 0;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2200      	movs	r2, #0
 80017ae:	811a      	strh	r2, [r3, #8]
	}
}
 80017b0:	bf00      	nop
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr

080017bc <Encoder_Add_Pulse>:

void Encoder_Add_Pulse(s_encoder *enc){
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
	enc->pulses++;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	889b      	ldrh	r3, [r3, #4]
 80017c8:	3301      	adds	r3, #1
 80017ca:	b29a      	uxth	r2, r3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	809a      	strh	r2, [r3, #4]
}
 80017d0:	bf00      	nop
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr

080017dc <Encoder_1s_Elapsed>:

void Encoder_1s_Elapsed(s_encoder *enc){
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
	enc->pps = enc->fastPPS;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	88da      	ldrh	r2, [r3, #6]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	811a      	strh	r2, [r3, #8]
	enc->fastPPS=0;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2200      	movs	r2, #0
 80017f0:	80da      	strh	r2, [r3, #6]
}
 80017f2:	bf00      	nop
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr

080017fe <Motor_Init>:
 */
#include "Motors/motors.h"
#include <stddef.h>

void Motor_Init(s_motor *motor, void (*PWM_set)(uint16_t dCycle),
		void (*PIN_set)(uint8_t A, uint8_t B), uint16_t max_value){
 80017fe:	b480      	push	{r7}
 8001800:	b085      	sub	sp, #20
 8001802:	af00      	add	r7, sp, #0
 8001804:	60f8      	str	r0, [r7, #12]
 8001806:	60b9      	str	r1, [r7, #8]
 8001808:	607a      	str	r2, [r7, #4]
 800180a:	807b      	strh	r3, [r7, #2]

	motor->direction = NO_INIT;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	2200      	movs	r2, #0
 8001810:	701a      	strb	r2, [r3, #0]
	motor->setPins = PIN_set;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	611a      	str	r2, [r3, #16]
	motor->setPWM = PWM_set;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	68ba      	ldr	r2, [r7, #8]
 800181c:	615a      	str	r2, [r3, #20]
	motor->maxValue = max_value;
 800181e:	887a      	ldrh	r2, [r7, #2]
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	605a      	str	r2, [r3, #4]
	motor->vel = 0;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	2200      	movs	r2, #0
 8001828:	609a      	str	r2, [r3, #8]
	motor->brakeTimeout = 0;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	2200      	movs	r2, #0
 800182e:	819a      	strh	r2, [r3, #12]
}
 8001830:	bf00      	nop
 8001832:	3714      	adds	r7, #20
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <Motor_Set_Speed>:

void Motor_Set_Speed(s_motor *motor, int8_t speed){
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	460b      	mov	r3, r1
 8001846:	70fb      	strb	r3, [r7, #3]
	if(motor->setPWM == NULL)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	695b      	ldr	r3, [r3, #20]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d050      	beq.n	80018f2 <Motor_Set_Speed+0xb6>
		return;
	if(speed > 100)
 8001850:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001854:	2b64      	cmp	r3, #100	@ 0x64
 8001856:	dd01      	ble.n	800185c <Motor_Set_Speed+0x20>
		speed = 100;
 8001858:	2364      	movs	r3, #100	@ 0x64
 800185a:	70fb      	strb	r3, [r7, #3]
	if(speed < -100)
 800185c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001860:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 8001864:	da01      	bge.n	800186a <Motor_Set_Speed+0x2e>
		speed = -100;
 8001866:	239c      	movs	r3, #156	@ 0x9c
 8001868:	70fb      	strb	r3, [r7, #3]
	if(speed == motor->vel)
 800186a:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	429a      	cmp	r2, r3
 8001874:	d03f      	beq.n	80018f6 <Motor_Set_Speed+0xba>
		return;

	motor->vel = speed * 600;
 8001876:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800187a:	f44f 7216 	mov.w	r2, #600	@ 0x258
 800187e:	fb03 f202 	mul.w	r2, r3, r2
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	609a      	str	r2, [r3, #8]

	if(speed > 0){
 8001886:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800188a:	2b00      	cmp	r3, #0
 800188c:	dd10      	ble.n	80018b0 <Motor_Set_Speed+0x74>
		motor->direction = FORWARD;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2202      	movs	r2, #2
 8001892:	701a      	strb	r2, [r3, #0]
		Motor_Set_Direction(motor, FORWARD);
 8001894:	2102      	movs	r1, #2
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f000 f832 	bl	8001900 <Motor_Set_Direction>
		motor->setPWM((uint16_t)motor->vel-1);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	695b      	ldr	r3, [r3, #20]
 80018a0:	687a      	ldr	r2, [r7, #4]
 80018a2:	6892      	ldr	r2, [r2, #8]
 80018a4:	b292      	uxth	r2, r2
 80018a6:	3a01      	subs	r2, #1
 80018a8:	b292      	uxth	r2, r2
 80018aa:	4610      	mov	r0, r2
 80018ac:	4798      	blx	r3
 80018ae:	e023      	b.n	80018f8 <Motor_Set_Speed+0xbc>
	}else if(speed < 0){
 80018b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	da10      	bge.n	80018da <Motor_Set_Speed+0x9e>
		motor->direction = BACKWARD;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2203      	movs	r2, #3
 80018bc:	701a      	strb	r2, [r3, #0]
		Motor_Set_Direction(motor, BACKWARD);
 80018be:	2103      	movs	r1, #3
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	f000 f81d 	bl	8001900 <Motor_Set_Direction>
		motor->setPWM((uint16_t)(motor->vel * -1)-1);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	695b      	ldr	r3, [r3, #20]
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	6892      	ldr	r2, [r2, #8]
 80018ce:	b292      	uxth	r2, r2
 80018d0:	43d2      	mvns	r2, r2
 80018d2:	b292      	uxth	r2, r2
 80018d4:	4610      	mov	r0, r2
 80018d6:	4798      	blx	r3
 80018d8:	e00e      	b.n	80018f8 <Motor_Set_Speed+0xbc>
	}else{
		motor->direction = FREE_WHEEL;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2201      	movs	r2, #1
 80018de:	701a      	strb	r2, [r3, #0]
		Motor_Set_Direction(motor, FREE_WHEEL);
 80018e0:	2101      	movs	r1, #1
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f000 f80c 	bl	8001900 <Motor_Set_Direction>
		motor->setPWM(0);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	695b      	ldr	r3, [r3, #20]
 80018ec:	2000      	movs	r0, #0
 80018ee:	4798      	blx	r3
 80018f0:	e002      	b.n	80018f8 <Motor_Set_Speed+0xbc>
		return;
 80018f2:	bf00      	nop
 80018f4:	e000      	b.n	80018f8 <Motor_Set_Speed+0xbc>
		return;
 80018f6:	bf00      	nop
	}
}
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
	...

08001900 <Motor_Set_Direction>:

void Motor_Set_Direction(s_motor *motor, e_direction direction){
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	460b      	mov	r3, r1
 800190a:	70fb      	strb	r3, [r7, #3]
	if(motor->setPins == NULL)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	691b      	ldr	r3, [r3, #16]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d027      	beq.n	8001964 <Motor_Set_Direction+0x64>
		return;
	switch(direction){
 8001914:	78fb      	ldrb	r3, [r7, #3]
 8001916:	2b04      	cmp	r3, #4
 8001918:	d825      	bhi.n	8001966 <Motor_Set_Direction+0x66>
 800191a:	a201      	add	r2, pc, #4	@ (adr r2, 8001920 <Motor_Set_Direction+0x20>)
 800191c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001920:	08001967 	.word	0x08001967
 8001924:	08001935 	.word	0x08001935
 8001928:	08001941 	.word	0x08001941
 800192c:	0800194d 	.word	0x0800194d
 8001930:	08001959 	.word	0x08001959
		case NO_INIT:
			break;
		case FREE_WHEEL:
			motor->setPins(0, 0);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	691b      	ldr	r3, [r3, #16]
 8001938:	2100      	movs	r1, #0
 800193a:	2000      	movs	r0, #0
 800193c:	4798      	blx	r3
			break;
 800193e:	e012      	b.n	8001966 <Motor_Set_Direction+0x66>
		case FORWARD:
			motor->setPins(1, 0);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	691b      	ldr	r3, [r3, #16]
 8001944:	2100      	movs	r1, #0
 8001946:	2001      	movs	r0, #1
 8001948:	4798      	blx	r3
			break;
 800194a:	e00c      	b.n	8001966 <Motor_Set_Direction+0x66>
		case BACKWARD:
			motor->setPins(0, 1);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	691b      	ldr	r3, [r3, #16]
 8001950:	2101      	movs	r1, #1
 8001952:	2000      	movs	r0, #0
 8001954:	4798      	blx	r3
			break;
 8001956:	e006      	b.n	8001966 <Motor_Set_Direction+0x66>
		case BRAKE:
			motor->setPins(1, 1);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	691b      	ldr	r3, [r3, #16]
 800195c:	2101      	movs	r1, #1
 800195e:	2001      	movs	r0, #1
 8001960:	4798      	blx	r3
			break;
 8001962:	e000      	b.n	8001966 <Motor_Set_Direction+0x66>
		return;
 8001964:	bf00      	nop
	}
}
 8001966:	3708      	adds	r7, #8
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}

0800196c <Motor_Break_Timeout>:
	motor->direction = BRAKE;
	Motor_Set_Direction(motor, BRAKE);

}

void Motor_Break_Timeout(s_motor *motor){
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
	if(motor->direction == BRAKE){
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	2b04      	cmp	r3, #4
 800197a:	d10c      	bne.n	8001996 <Motor_Break_Timeout+0x2a>
		motor->brakeTimeout--;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	899b      	ldrh	r3, [r3, #12]
 8001980:	3b01      	subs	r3, #1
 8001982:	b29a      	uxth	r2, r3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	819a      	strh	r2, [r3, #12]
		if(!motor->brakeTimeout)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	899b      	ldrh	r3, [r3, #12]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d102      	bne.n	8001996 <Motor_Break_Timeout+0x2a>
			motor->direction = FREE_WHEEL;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2201      	movs	r2, #1
 8001994:	701a      	strb	r2, [r3, #0]
	}
}
 8001996:	bf00      	nop
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr

080019a2 <Comm_Init>:
static uint8_t TxAuxBuffer[30];
static uint8_t indexStart;
static uint8_t indexStartValue;
static uint8_t checksum;

void Comm_Init(s_commData* comm, void (*dataD)(s_commData *comm), void (*dataW)(s_commData *comm)){
 80019a2:	b480      	push	{r7}
 80019a4:	b085      	sub	sp, #20
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	60f8      	str	r0, [r7, #12]
 80019aa:	60b9      	str	r1, [r7, #8]
 80019ac:	607a      	str	r2, [r7, #4]
	comm->dataDecoder = dataD;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	68ba      	ldr	r2, [r7, #8]
 80019b2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
	comm->dataWriter = dataW;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	687a      	ldr	r2, [r7, #4]
 80019ba:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
	comm->timeOut = 0;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	2200      	movs	r2, #0
 80019c2:	701a      	strb	r2, [r3, #0]
	comm->indexStart = 0;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	2200      	movs	r2, #0
 80019c8:	705a      	strb	r2, [r3, #1]
	comm->checksumRx = 0;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	2200      	movs	r2, #0
 80019ce:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
	comm->Tx.write=0;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	2200      	movs	r2, #0
 80019d6:	70da      	strb	r2, [r3, #3]
	comm->Tx.read=0;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	2200      	movs	r2, #0
 80019dc:	709a      	strb	r2, [r3, #2]
	comm->Rx.write=0;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	2200      	movs	r2, #0
 80019e2:	f883 2105 	strb.w	r2, [r3, #261]	@ 0x105
	comm->Rx.read=0;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	2200      	movs	r2, #0
 80019ea:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
	comm->isESP01 = 0;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	2200      	movs	r2, #0
 80019f2:	f883 222f 	strb.w	r2, [r3, #559]	@ 0x22f
	comm->protocolState = START;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	2200      	movs	r2, #0
 80019fa:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
}
 80019fe:	bf00      	nop
 8001a00:	3714      	adds	r7, #20
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr

08001a0a <Comm_Task>:

void Comm_Task(s_commData* comm){
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b082      	sub	sp, #8
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
	if(comm->Rx.read != comm->Rx.write){
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	f893 2104 	ldrb.w	r2, [r3, #260]	@ 0x104
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d002      	beq.n	8001a28 <Comm_Task+0x1e>
		decodeProtocol(comm);
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f000 f814 	bl	8001a50 <decodeProtocol>
	}
	if (comm->Tx.read != comm->Tx.write) {
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	789a      	ldrb	r2, [r3, #2]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	78db      	ldrb	r3, [r3, #3]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d009      	beq.n	8001a48 <Comm_Task+0x3e>
		if(comm->dataWriter != NULL)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d004      	beq.n	8001a48 <Comm_Task+0x3e>
			comm->dataWriter(comm);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	4798      	blx	r3
	}
}
 8001a48:	bf00      	nop
 8001a4a:	3708      	adds	r7, #8
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <decodeProtocol>:

void decodeProtocol(s_commData *datosCom){
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
	static uint8_t nBytes=0;
	uint8_t indexWriteRxCopy = datosCom->Rx.write;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 8001a5e:	73fb      	strb	r3, [r7, #15]

	while (datosCom->Rx.read != indexWriteRxCopy){
 8001a60:	e11b      	b.n	8001c9a <decodeProtocol+0x24a>
		switch(datosCom->protocolState){
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	f893 322e 	ldrb.w	r3, [r3, #558]	@ 0x22e
 8001a68:	2b06      	cmp	r3, #6
 8001a6a:	f200 810e 	bhi.w	8001c8a <decodeProtocol+0x23a>
 8001a6e:	a201      	add	r2, pc, #4	@ (adr r2, 8001a74 <decodeProtocol+0x24>)
 8001a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a74:	08001a91 	.word	0x08001a91
 8001a78:	08001ac3 	.word	0x08001ac3
 8001a7c:	08001b05 	.word	0x08001b05
 8001a80:	08001b47 	.word	0x08001b47
 8001a84:	08001b89 	.word	0x08001b89
 8001a88:	08001bbb 	.word	0x08001bbb
 8001a8c:	08001c0d 	.word	0x08001c0d
		case START:
			if (datosCom->Rx.buffer[datosCom->Rx.read++] == 'U'){
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8001a96:	1c5a      	adds	r2, r3, #1
 8001a98:	b2d1      	uxtb	r1, r2
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	f882 1104 	strb.w	r1, [r2, #260]	@ 0x104
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4413      	add	r3, r2
 8001aa6:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8001aaa:	2b55      	cmp	r3, #85	@ 0x55
 8001aac:	f040 80f2 	bne.w	8001c94 <decodeProtocol+0x244>
				datosCom->protocolState = HEADER_1;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
				datosCom->checksumRx = 0;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2200      	movs	r2, #0
 8001abc:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
			}
			break;
 8001ac0:	e0e8      	b.n	8001c94 <decodeProtocol+0x244>
		case HEADER_1:
			if (datosCom->Rx.buffer[datosCom->Rx.read++] == 'N')
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8001ac8:	1c5a      	adds	r2, r3, #1
 8001aca:	b2d1      	uxtb	r1, r2
 8001acc:	687a      	ldr	r2, [r7, #4]
 8001ace:	f882 1104 	strb.w	r1, [r2, #260]	@ 0x104
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	4413      	add	r3, r2
 8001ad8:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8001adc:	2b4e      	cmp	r3, #78	@ 0x4e
 8001ade:	d104      	bne.n	8001aea <decodeProtocol+0x9a>
				datosCom->protocolState = HEADER_2;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2202      	movs	r2, #2
 8001ae4:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			else{
				datosCom->Rx.read--;
				datosCom->protocolState = START;
			}
			break;
 8001ae8:	e0d7      	b.n	8001c9a <decodeProtocol+0x24a>
				datosCom->Rx.read--;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8001af0:	3b01      	subs	r3, #1
 8001af2:	b2da      	uxtb	r2, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
				datosCom->protocolState = START;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2200      	movs	r2, #0
 8001afe:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			break;
 8001b02:	e0ca      	b.n	8001c9a <decodeProtocol+0x24a>
		case HEADER_2:
			if (datosCom->Rx.buffer[datosCom->Rx.read++] == 'E')
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8001b0a:	1c5a      	adds	r2, r3, #1
 8001b0c:	b2d1      	uxtb	r1, r2
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	f882 1104 	strb.w	r1, [r2, #260]	@ 0x104
 8001b14:	461a      	mov	r2, r3
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4413      	add	r3, r2
 8001b1a:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8001b1e:	2b45      	cmp	r3, #69	@ 0x45
 8001b20:	d104      	bne.n	8001b2c <decodeProtocol+0xdc>
				datosCom->protocolState = HEADER_3;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2203      	movs	r2, #3
 8001b26:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			else{
				datosCom->Rx.read--;
				datosCom->protocolState = START;
			}
			break;
 8001b2a:	e0b6      	b.n	8001c9a <decodeProtocol+0x24a>
				datosCom->Rx.read--;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8001b32:	3b01      	subs	r3, #1
 8001b34:	b2da      	uxtb	r2, r3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
				datosCom->protocolState = START;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			break;
 8001b44:	e0a9      	b.n	8001c9a <decodeProtocol+0x24a>
		case HEADER_3:
			if (datosCom->Rx.buffer[datosCom->Rx.read++] == 'R')
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8001b4c:	1c5a      	adds	r2, r3, #1
 8001b4e:	b2d1      	uxtb	r1, r2
 8001b50:	687a      	ldr	r2, [r7, #4]
 8001b52:	f882 1104 	strb.w	r1, [r2, #260]	@ 0x104
 8001b56:	461a      	mov	r2, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8001b60:	2b52      	cmp	r3, #82	@ 0x52
 8001b62:	d104      	bne.n	8001b6e <decodeProtocol+0x11e>
				datosCom->protocolState = NBYTES;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2204      	movs	r2, #4
 8001b68:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			else{
				datosCom->Rx.read--;
				datosCom->protocolState = START;
			}
			break;
 8001b6c:	e095      	b.n	8001c9a <decodeProtocol+0x24a>
				datosCom->Rx.read--;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8001b74:	3b01      	subs	r3, #1
 8001b76:	b2da      	uxtb	r2, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
				datosCom->protocolState = START;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2200      	movs	r2, #0
 8001b82:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			break;
 8001b86:	e088      	b.n	8001c9a <decodeProtocol+0x24a>
		case NBYTES:
			datosCom->indexStart = datosCom->Rx.read;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	f893 2104 	ldrb.w	r2, [r3, #260]	@ 0x104
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	705a      	strb	r2, [r3, #1]
			nBytes = datosCom->Rx.buffer[datosCom->Rx.read++];
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8001b98:	1c5a      	adds	r2, r3, #1
 8001b9a:	b2d1      	uxtb	r1, r2
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	f882 1104 	strb.w	r1, [r2, #260]	@ 0x104
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	f893 2106 	ldrb.w	r2, [r3, #262]	@ 0x106
 8001bac:	4b41      	ldr	r3, [pc, #260]	@ (8001cb4 <decodeProtocol+0x264>)
 8001bae:	701a      	strb	r2, [r3, #0]
			datosCom->protocolState = TOKEN;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2205      	movs	r2, #5
 8001bb4:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			break;
 8001bb8:	e06f      	b.n	8001c9a <decodeProtocol+0x24a>
		case TOKEN:
			if (datosCom->Rx.buffer[datosCom->Rx.read++] == ':'){
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8001bc0:	1c5a      	adds	r2, r3, #1
 8001bc2:	b2d1      	uxtb	r1, r2
 8001bc4:	687a      	ldr	r2, [r7, #4]
 8001bc6:	f882 1104 	strb.w	r1, [r2, #260]	@ 0x104
 8001bca:	461a      	mov	r2, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	4413      	add	r3, r2
 8001bd0:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8001bd4:	2b3a      	cmp	r3, #58	@ 0x3a
 8001bd6:	d10c      	bne.n	8001bf2 <decodeProtocol+0x1a2>
				datosCom->protocolState = PAYLOAD;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2206      	movs	r2, #6
 8001bdc:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
				datosCom->checksumRx ='U' ^ 'N' ^ 'E' ^ 'R' ^ nBytes ^ ':';
 8001be0:	4b34      	ldr	r3, [pc, #208]	@ (8001cb4 <decodeProtocol+0x264>)
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	f083 0336 	eor.w	r3, r3, #54	@ 0x36
 8001be8:	b2da      	uxtb	r2, r3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
			}
			else{
				datosCom->Rx.read--;
				datosCom->protocolState = START;
			}
			break;
 8001bf0:	e053      	b.n	8001c9a <decodeProtocol+0x24a>
				datosCom->Rx.read--;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8001bf8:	3b01      	subs	r3, #1
 8001bfa:	b2da      	uxtb	r2, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
				datosCom->protocolState = START;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			break;
 8001c0a:	e046      	b.n	8001c9a <decodeProtocol+0x24a>
		case PAYLOAD:
			if (nBytes > 1){
 8001c0c:	4b29      	ldr	r3, [pc, #164]	@ (8001cb4 <decodeProtocol+0x264>)
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d914      	bls.n	8001c3e <decodeProtocol+0x1ee>
				datosCom->checksumRx ^= datosCom->Rx.buffer[datosCom->Rx.read++];
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8001c1a:	1c5a      	adds	r2, r3, #1
 8001c1c:	b2d1      	uxtb	r1, r2
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	f882 1104 	strb.w	r1, [r2, #260]	@ 0x104
 8001c24:	461a      	mov	r2, r3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4413      	add	r3, r2
 8001c2a:	f893 2106 	ldrb.w	r2, [r3, #262]	@ 0x106
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8001c34:	4053      	eors	r3, r2
 8001c36:	b2da      	uxtb	r2, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
			}
			nBytes--;
 8001c3e:	4b1d      	ldr	r3, [pc, #116]	@ (8001cb4 <decodeProtocol+0x264>)
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	3b01      	subs	r3, #1
 8001c44:	b2da      	uxtb	r2, r3
 8001c46:	4b1b      	ldr	r3, [pc, #108]	@ (8001cb4 <decodeProtocol+0x264>)
 8001c48:	701a      	strb	r2, [r3, #0]
			if(nBytes<=0){
 8001c4a:	4b1a      	ldr	r3, [pc, #104]	@ (8001cb4 <decodeProtocol+0x264>)
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d122      	bne.n	8001c98 <decodeProtocol+0x248>
				datosCom->protocolState = START;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2200      	movs	r2, #0
 8001c56:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
				if(datosCom->checksumRx == datosCom->Rx.buffer[datosCom->Rx.read]){
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	f893 2206 	ldrb.w	r2, [r3, #518]	@ 0x206
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8001c66:	4619      	mov	r1, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	440b      	add	r3, r1
 8001c6c:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d111      	bne.n	8001c98 <decodeProtocol+0x248>
					if(datosCom->dataDecoder != NULL)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d00c      	beq.n	8001c98 <decodeProtocol+0x248>
						datosCom->dataDecoder(datosCom);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	4798      	blx	r3
				}
			}
			break;
 8001c88:	e006      	b.n	8001c98 <decodeProtocol+0x248>
		default:
			datosCom->protocolState = START;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			break;
 8001c92:	e002      	b.n	8001c9a <decodeProtocol+0x24a>
			break;
 8001c94:	bf00      	nop
 8001c96:	e000      	b.n	8001c9a <decodeProtocol+0x24a>
			break;
 8001c98:	bf00      	nop
	while (datosCom->Rx.read != indexWriteRxCopy){
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8001ca0:	7bfa      	ldrb	r2, [r7, #15]
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	f47f aedd 	bne.w	8001a62 <decodeProtocol+0x12>
		}
	}
}
 8001ca8:	bf00      	nop
 8001caa:	bf00      	nop
 8001cac:	3710      	adds	r7, #16
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	2000082d 	.word	0x2000082d

08001cb8 <comm_sendCMD>:

void comm_sendCMD(s_commData *datosCom, _eID cmd, uint8_t *str, uint8_t len){
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	60f8      	str	r0, [r7, #12]
 8001cc0:	607a      	str	r2, [r7, #4]
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	72fb      	strb	r3, [r7, #11]
 8001cc8:	4613      	mov	r3, r2
 8001cca:	72bb      	strb	r3, [r7, #10]
    i = 0;
 8001ccc:	4b62      	ldr	r3, [pc, #392]	@ (8001e58 <comm_sendCMD+0x1a0>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	701a      	strb	r2, [r3, #0]
    auxIndex = 0;
 8001cd2:	4b62      	ldr	r3, [pc, #392]	@ (8001e5c <comm_sendCMD+0x1a4>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	701a      	strb	r2, [r3, #0]

    // Cabecera
    TxAuxBuffer[auxIndex++] = 'U'; // Start
 8001cd8:	4b60      	ldr	r3, [pc, #384]	@ (8001e5c <comm_sendCMD+0x1a4>)
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	1c5a      	adds	r2, r3, #1
 8001cde:	b2d1      	uxtb	r1, r2
 8001ce0:	4a5e      	ldr	r2, [pc, #376]	@ (8001e5c <comm_sendCMD+0x1a4>)
 8001ce2:	7011      	strb	r1, [r2, #0]
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	4b5e      	ldr	r3, [pc, #376]	@ (8001e60 <comm_sendCMD+0x1a8>)
 8001ce8:	2155      	movs	r1, #85	@ 0x55
 8001cea:	5499      	strb	r1, [r3, r2]
    TxAuxBuffer[auxIndex++] = 'N'; // Header 1
 8001cec:	4b5b      	ldr	r3, [pc, #364]	@ (8001e5c <comm_sendCMD+0x1a4>)
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	1c5a      	adds	r2, r3, #1
 8001cf2:	b2d1      	uxtb	r1, r2
 8001cf4:	4a59      	ldr	r2, [pc, #356]	@ (8001e5c <comm_sendCMD+0x1a4>)
 8001cf6:	7011      	strb	r1, [r2, #0]
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	4b59      	ldr	r3, [pc, #356]	@ (8001e60 <comm_sendCMD+0x1a8>)
 8001cfc:	214e      	movs	r1, #78	@ 0x4e
 8001cfe:	5499      	strb	r1, [r3, r2]
    TxAuxBuffer[auxIndex++] = 'E'; // Header 2
 8001d00:	4b56      	ldr	r3, [pc, #344]	@ (8001e5c <comm_sendCMD+0x1a4>)
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	1c5a      	adds	r2, r3, #1
 8001d06:	b2d1      	uxtb	r1, r2
 8001d08:	4a54      	ldr	r2, [pc, #336]	@ (8001e5c <comm_sendCMD+0x1a4>)
 8001d0a:	7011      	strb	r1, [r2, #0]
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	4b54      	ldr	r3, [pc, #336]	@ (8001e60 <comm_sendCMD+0x1a8>)
 8001d10:	2145      	movs	r1, #69	@ 0x45
 8001d12:	5499      	strb	r1, [r3, r2]
    TxAuxBuffer[auxIndex++] = 'R'; // Header 3
 8001d14:	4b51      	ldr	r3, [pc, #324]	@ (8001e5c <comm_sendCMD+0x1a4>)
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	1c5a      	adds	r2, r3, #1
 8001d1a:	b2d1      	uxtb	r1, r2
 8001d1c:	4a4f      	ldr	r2, [pc, #316]	@ (8001e5c <comm_sendCMD+0x1a4>)
 8001d1e:	7011      	strb	r1, [r2, #0]
 8001d20:	461a      	mov	r2, r3
 8001d22:	4b4f      	ldr	r3, [pc, #316]	@ (8001e60 <comm_sendCMD+0x1a8>)
 8001d24:	2152      	movs	r1, #82	@ 0x52
 8001d26:	5499      	strb	r1, [r3, r2]

    indexStart = auxIndex; // Se guarda la posición del primer dato del mensaje (cmd)
 8001d28:	4b4c      	ldr	r3, [pc, #304]	@ (8001e5c <comm_sendCMD+0x1a4>)
 8001d2a:	781a      	ldrb	r2, [r3, #0]
 8001d2c:	4b4d      	ldr	r3, [pc, #308]	@ (8001e64 <comm_sendCMD+0x1ac>)
 8001d2e:	701a      	strb	r2, [r3, #0]
    TxAuxBuffer[auxIndex++] = 0;   // Placeholder del indexStart, se sobrescribirá después
 8001d30:	4b4a      	ldr	r3, [pc, #296]	@ (8001e5c <comm_sendCMD+0x1a4>)
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	1c5a      	adds	r2, r3, #1
 8001d36:	b2d1      	uxtb	r1, r2
 8001d38:	4a48      	ldr	r2, [pc, #288]	@ (8001e5c <comm_sendCMD+0x1a4>)
 8001d3a:	7011      	strb	r1, [r2, #0]
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	4b48      	ldr	r3, [pc, #288]	@ (8001e60 <comm_sendCMD+0x1a8>)
 8001d40:	2100      	movs	r1, #0
 8001d42:	5499      	strb	r1, [r3, r2]

    TxAuxBuffer[auxIndex++] = ':'; // Token
 8001d44:	4b45      	ldr	r3, [pc, #276]	@ (8001e5c <comm_sendCMD+0x1a4>)
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	1c5a      	adds	r2, r3, #1
 8001d4a:	b2d1      	uxtb	r1, r2
 8001d4c:	4a43      	ldr	r2, [pc, #268]	@ (8001e5c <comm_sendCMD+0x1a4>)
 8001d4e:	7011      	strb	r1, [r2, #0]
 8001d50:	461a      	mov	r2, r3
 8001d52:	4b43      	ldr	r3, [pc, #268]	@ (8001e60 <comm_sendCMD+0x1a8>)
 8001d54:	213a      	movs	r1, #58	@ 0x3a
 8001d56:	5499      	strb	r1, [r3, r2]
    TxAuxBuffer[auxIndex++] = cmd; // Comando
 8001d58:	4b40      	ldr	r3, [pc, #256]	@ (8001e5c <comm_sendCMD+0x1a4>)
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	1c5a      	adds	r2, r3, #1
 8001d5e:	b2d1      	uxtb	r1, r2
 8001d60:	4a3e      	ldr	r2, [pc, #248]	@ (8001e5c <comm_sendCMD+0x1a4>)
 8001d62:	7011      	strb	r1, [r2, #0]
 8001d64:	4619      	mov	r1, r3
 8001d66:	4a3e      	ldr	r2, [pc, #248]	@ (8001e60 <comm_sendCMD+0x1a8>)
 8001d68:	7afb      	ldrb	r3, [r7, #11]
 8001d6a:	5453      	strb	r3, [r2, r1]

    if(cmd == USERTEXT || cmd == SYSERROR)
 8001d6c:	7afb      	ldrb	r3, [r7, #11]
 8001d6e:	2bb1      	cmp	r3, #177	@ 0xb1
 8001d70:	d002      	beq.n	8001d78 <comm_sendCMD+0xc0>
 8001d72:	7afb      	ldrb	r3, [r7, #11]
 8001d74:	2bee      	cmp	r3, #238	@ 0xee
 8001d76:	d109      	bne.n	8001d8c <comm_sendCMD+0xd4>
    	TxAuxBuffer[auxIndex++] = len;
 8001d78:	4b38      	ldr	r3, [pc, #224]	@ (8001e5c <comm_sendCMD+0x1a4>)
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	1c5a      	adds	r2, r3, #1
 8001d7e:	b2d1      	uxtb	r1, r2
 8001d80:	4a36      	ldr	r2, [pc, #216]	@ (8001e5c <comm_sendCMD+0x1a4>)
 8001d82:	7011      	strb	r1, [r2, #0]
 8001d84:	4619      	mov	r1, r3
 8001d86:	4a36      	ldr	r2, [pc, #216]	@ (8001e60 <comm_sendCMD+0x1a8>)
 8001d88:	7abb      	ldrb	r3, [r7, #10]
 8001d8a:	5453      	strb	r3, [r2, r1]

    // Copia de datos si hay
    if (str != NULL && len > 0) {
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d013      	beq.n	8001dba <comm_sendCMD+0x102>
 8001d92:	7abb      	ldrb	r3, [r7, #10]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d010      	beq.n	8001dba <comm_sendCMD+0x102>
        memcpy(&TxAuxBuffer[auxIndex], str, len);
 8001d98:	4b30      	ldr	r3, [pc, #192]	@ (8001e5c <comm_sendCMD+0x1a4>)
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	4b30      	ldr	r3, [pc, #192]	@ (8001e60 <comm_sendCMD+0x1a8>)
 8001da0:	4413      	add	r3, r2
 8001da2:	7aba      	ldrb	r2, [r7, #10]
 8001da4:	6879      	ldr	r1, [r7, #4]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f010 f908 	bl	8011fbc <memcpy>
        auxIndex += len;
 8001dac:	4b2b      	ldr	r3, [pc, #172]	@ (8001e5c <comm_sendCMD+0x1a4>)
 8001dae:	781a      	ldrb	r2, [r3, #0]
 8001db0:	7abb      	ldrb	r3, [r7, #10]
 8001db2:	4413      	add	r3, r2
 8001db4:	b2da      	uxtb	r2, r3
 8001db6:	4b29      	ldr	r3, [pc, #164]	@ (8001e5c <comm_sendCMD+0x1a4>)
 8001db8:	701a      	strb	r2, [r3, #0]
    }

    indexStartValue = auxIndex - indexStart - 1; // Cantidad de datos desde cmd hasta checksum
 8001dba:	4b28      	ldr	r3, [pc, #160]	@ (8001e5c <comm_sendCMD+0x1a4>)
 8001dbc:	781a      	ldrb	r2, [r3, #0]
 8001dbe:	4b29      	ldr	r3, [pc, #164]	@ (8001e64 <comm_sendCMD+0x1ac>)
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	3b01      	subs	r3, #1
 8001dc8:	b2da      	uxtb	r2, r3
 8001dca:	4b27      	ldr	r3, [pc, #156]	@ (8001e68 <comm_sendCMD+0x1b0>)
 8001dcc:	701a      	strb	r2, [r3, #0]
    TxAuxBuffer[indexStart] = indexStartValue;
 8001dce:	4b25      	ldr	r3, [pc, #148]	@ (8001e64 <comm_sendCMD+0x1ac>)
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	4b24      	ldr	r3, [pc, #144]	@ (8001e68 <comm_sendCMD+0x1b0>)
 8001dd6:	7819      	ldrb	r1, [r3, #0]
 8001dd8:	4b21      	ldr	r3, [pc, #132]	@ (8001e60 <comm_sendCMD+0x1a8>)
 8001dda:	5499      	strb	r1, [r3, r2]

    // Checksum
    checksum = 0;
 8001ddc:	4b23      	ldr	r3, [pc, #140]	@ (8001e6c <comm_sendCMD+0x1b4>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < auxIndex; i++) {
 8001de2:	4b1d      	ldr	r3, [pc, #116]	@ (8001e58 <comm_sendCMD+0x1a0>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	701a      	strb	r2, [r3, #0]
 8001de8:	e01f      	b.n	8001e2a <comm_sendCMD+0x172>
        checksum ^= TxAuxBuffer[i];
 8001dea:	4b1b      	ldr	r3, [pc, #108]	@ (8001e58 <comm_sendCMD+0x1a0>)
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	461a      	mov	r2, r3
 8001df0:	4b1b      	ldr	r3, [pc, #108]	@ (8001e60 <comm_sendCMD+0x1a8>)
 8001df2:	5c9a      	ldrb	r2, [r3, r2]
 8001df4:	4b1d      	ldr	r3, [pc, #116]	@ (8001e6c <comm_sendCMD+0x1b4>)
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	4053      	eors	r3, r2
 8001dfa:	b2da      	uxtb	r2, r3
 8001dfc:	4b1b      	ldr	r3, [pc, #108]	@ (8001e6c <comm_sendCMD+0x1b4>)
 8001dfe:	701a      	strb	r2, [r3, #0]
        datosCom->Tx.buffer[datosCom->Tx.write++] = TxAuxBuffer[i];
 8001e00:	4b15      	ldr	r3, [pc, #84]	@ (8001e58 <comm_sendCMD+0x1a0>)
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	4618      	mov	r0, r3
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	78db      	ldrb	r3, [r3, #3]
 8001e0a:	1c5a      	adds	r2, r3, #1
 8001e0c:	b2d1      	uxtb	r1, r2
 8001e0e:	68fa      	ldr	r2, [r7, #12]
 8001e10:	70d1      	strb	r1, [r2, #3]
 8001e12:	4619      	mov	r1, r3
 8001e14:	4b12      	ldr	r3, [pc, #72]	@ (8001e60 <comm_sendCMD+0x1a8>)
 8001e16:	5c1a      	ldrb	r2, [r3, r0]
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	440b      	add	r3, r1
 8001e1c:	711a      	strb	r2, [r3, #4]
    for (i = 0; i < auxIndex; i++) {
 8001e1e:	4b0e      	ldr	r3, [pc, #56]	@ (8001e58 <comm_sendCMD+0x1a0>)
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	3301      	adds	r3, #1
 8001e24:	b2da      	uxtb	r2, r3
 8001e26:	4b0c      	ldr	r3, [pc, #48]	@ (8001e58 <comm_sendCMD+0x1a0>)
 8001e28:	701a      	strb	r2, [r3, #0]
 8001e2a:	4b0b      	ldr	r3, [pc, #44]	@ (8001e58 <comm_sendCMD+0x1a0>)
 8001e2c:	781a      	ldrb	r2, [r3, #0]
 8001e2e:	4b0b      	ldr	r3, [pc, #44]	@ (8001e5c <comm_sendCMD+0x1a4>)
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d3d9      	bcc.n	8001dea <comm_sendCMD+0x132>
    }

    datosCom->Tx.buffer[datosCom->Tx.write++] = checksum;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	78db      	ldrb	r3, [r3, #3]
 8001e3a:	1c5a      	adds	r2, r3, #1
 8001e3c:	b2d1      	uxtb	r1, r2
 8001e3e:	68fa      	ldr	r2, [r7, #12]
 8001e40:	70d1      	strb	r1, [r2, #3]
 8001e42:	4619      	mov	r1, r3
 8001e44:	4b09      	ldr	r3, [pc, #36]	@ (8001e6c <comm_sendCMD+0x1b4>)
 8001e46:	781a      	ldrb	r2, [r3, #0]
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	440b      	add	r3, r1
 8001e4c:	711a      	strb	r2, [r3, #4]
}
 8001e4e:	bf00      	nop
 8001e50:	3710      	adds	r7, #16
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	2000080a 	.word	0x2000080a
 8001e5c:	2000080b 	.word	0x2000080b
 8001e60:	2000080c 	.word	0x2000080c
 8001e64:	2000082a 	.word	0x2000082a
 8001e68:	2000082b 	.word	0x2000082b
 8001e6c:	2000082c 	.word	0x2000082c

08001e70 <ESP01_SetWIFI>:
//const char CIFSRAPMAC[] = "+CIFSR:APMAC\r";
//const char CIFSRSTAIP[] = "+CIFSR:STAIP\r";
//const char CIFSRSTAMAC[] = "+CIFSR:STAMAC\r";


void ESP01_SetWIFI(const char *ssid, const char *password){
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	6039      	str	r1, [r7, #0]
	esp01ATSate = ESP01ATIDLE;
 8001e7a:	4b12      	ldr	r3, [pc, #72]	@ (8001ec4 <ESP01_SetWIFI+0x54>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	701a      	strb	r2, [r3, #0]
	esp01Flags.byte = 0;
 8001e80:	4b11      	ldr	r3, [pc, #68]	@ (8001ec8 <ESP01_SetWIFI+0x58>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	701a      	strb	r2, [r3, #0]

	strncpy(esp01SSID, ssid, 64);
 8001e86:	2240      	movs	r2, #64	@ 0x40
 8001e88:	6879      	ldr	r1, [r7, #4]
 8001e8a:	4810      	ldr	r0, [pc, #64]	@ (8001ecc <ESP01_SetWIFI+0x5c>)
 8001e8c:	f010 f856 	bl	8011f3c <strncpy>
	esp01SSID[63] = '\0';
 8001e90:	4b0e      	ldr	r3, [pc, #56]	@ (8001ecc <ESP01_SetWIFI+0x5c>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
	strncpy(esp01PASSWORD, password, 32);
 8001e98:	2220      	movs	r2, #32
 8001e9a:	6839      	ldr	r1, [r7, #0]
 8001e9c:	480c      	ldr	r0, [pc, #48]	@ (8001ed0 <ESP01_SetWIFI+0x60>)
 8001e9e:	f010 f84d 	bl	8011f3c <strncpy>
	esp01PASSWORD[31] = '\0';
 8001ea2:	4b0b      	ldr	r3, [pc, #44]	@ (8001ed0 <ESP01_SetWIFI+0x60>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	77da      	strb	r2, [r3, #31]

	esp01TimeoutTask = 50;
 8001ea8:	4b0a      	ldr	r3, [pc, #40]	@ (8001ed4 <ESP01_SetWIFI+0x64>)
 8001eaa:	2232      	movs	r2, #50	@ 0x32
 8001eac:	601a      	str	r2, [r3, #0]
	esp01ATSate = ESP01ATHARDRST0;
 8001eae:	4b05      	ldr	r3, [pc, #20]	@ (8001ec4 <ESP01_SetWIFI+0x54>)
 8001eb0:	220d      	movs	r2, #13
 8001eb2:	701a      	strb	r2, [r3, #0]

	esp01TriesAT = 0;
 8001eb4:	4b08      	ldr	r3, [pc, #32]	@ (8001ed8 <ESP01_SetWIFI+0x68>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	701a      	strb	r2, [r3, #0]

}
 8001eba:	bf00      	nop
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	2000082e 	.word	0x2000082e
 8001ec8:	20000830 	.word	0x20000830
 8001ecc:	20000848 	.word	0x20000848
 8001ed0:	20000888 	.word	0x20000888
 8001ed4:	20000834 	.word	0x20000834
 8001ed8:	20000a64 	.word	0x20000a64

08001edc <ESP01_StartUDP>:


_eESP01STATUS ESP01_StartUDP(const char *RemoteIP, uint16_t RemotePORT, uint16_t LocalPORT){
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	807b      	strh	r3, [r7, #2]
 8001ee8:	4613      	mov	r3, r2
 8001eea:	803b      	strh	r3, [r7, #0]
	if(esp01Handle.WriteUSARTByte == NULL)
 8001eec:	4b1d      	ldr	r3, [pc, #116]	@ (8001f64 <ESP01_StartUDP+0x88>)
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d102      	bne.n	8001efa <ESP01_StartUDP+0x1e>
		return ESP01_NOT_INIT;
 8001ef4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ef8:	e02f      	b.n	8001f5a <ESP01_StartUDP+0x7e>

	if(LocalPORT == 0)
 8001efa:	883b      	ldrh	r3, [r7, #0]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d102      	bne.n	8001f06 <ESP01_StartUDP+0x2a>
		LocalPORT = 30000;
 8001f00:	f247 5330 	movw	r3, #30000	@ 0x7530
 8001f04:	803b      	strh	r3, [r7, #0]

	strcpy(esp01PROTO, "UDP");
 8001f06:	4b18      	ldr	r3, [pc, #96]	@ (8001f68 <ESP01_StartUDP+0x8c>)
 8001f08:	4a18      	ldr	r2, [pc, #96]	@ (8001f6c <ESP01_StartUDP+0x90>)
 8001f0a:	601a      	str	r2, [r3, #0]

	strncpy(esp01RemoteIP, RemoteIP, 15);
 8001f0c:	220f      	movs	r2, #15
 8001f0e:	6879      	ldr	r1, [r7, #4]
 8001f10:	4817      	ldr	r0, [pc, #92]	@ (8001f70 <ESP01_StartUDP+0x94>)
 8001f12:	f010 f813 	bl	8011f3c <strncpy>
	esp01RemoteIP[15] = '\0';
 8001f16:	4b16      	ldr	r3, [pc, #88]	@ (8001f70 <ESP01_StartUDP+0x94>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	73da      	strb	r2, [r3, #15]

	itoa(RemotePORT, esp01RemotePORT, 10);
 8001f1c:	887b      	ldrh	r3, [r7, #2]
 8001f1e:	220a      	movs	r2, #10
 8001f20:	4914      	ldr	r1, [pc, #80]	@ (8001f74 <ESP01_StartUDP+0x98>)
 8001f22:	4618      	mov	r0, r3
 8001f24:	f00f ff9c 	bl	8011e60 <itoa>
	itoa(LocalPORT, esp01LocalPORT, 10);
 8001f28:	883b      	ldrh	r3, [r7, #0]
 8001f2a:	220a      	movs	r2, #10
 8001f2c:	4912      	ldr	r1, [pc, #72]	@ (8001f78 <ESP01_StartUDP+0x9c>)
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f00f ff96 	bl	8011e60 <itoa>

	if(esp01SSID[0] == '\0')
 8001f34:	4b11      	ldr	r3, [pc, #68]	@ (8001f7c <ESP01_StartUDP+0xa0>)
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d101      	bne.n	8001f40 <ESP01_StartUDP+0x64>
		return ESP01_WIFI_NOT_SETED;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e00c      	b.n	8001f5a <ESP01_StartUDP+0x7e>

	if(esp01Flags.bit.WIFICONNECTED == 0)
 8001f40:	4b0f      	ldr	r3, [pc, #60]	@ (8001f80 <ESP01_StartUDP+0xa4>)
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	f003 0302 	and.w	r3, r3, #2
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d101      	bne.n	8001f52 <ESP01_StartUDP+0x76>
		return ESP01_WIFI_DISCONNECTED;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	e003      	b.n	8001f5a <ESP01_StartUDP+0x7e>

	esp01ATSate = ESP01ATCIPCLOSE;
 8001f52:	4b0c      	ldr	r3, [pc, #48]	@ (8001f84 <ESP01_StartUDP+0xa8>)
 8001f54:	2209      	movs	r2, #9
 8001f56:	701a      	strb	r2, [r3, #0]

	return ESP01_UDPTCP_CONNECTING;
 8001f58:	2306      	movs	r3, #6
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3708      	adds	r7, #8
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	20000a68 	.word	0x20000a68
 8001f68:	20000008 	.word	0x20000008
 8001f6c:	00504455 	.word	0x00504455
 8001f70:	200008a8 	.word	0x200008a8
 8001f74:	200008b8 	.word	0x200008b8
 8001f78:	200008d0 	.word	0x200008d0
 8001f7c:	20000848 	.word	0x20000848
 8001f80:	20000830 	.word	0x20000830
 8001f84:	2000082e 	.word	0x2000082e

08001f88 <ESP01_StateWIFI>:
		return;

	esp01ATSate = ESP01ATCIPCLOSE;
}

_eESP01STATUS ESP01_StateWIFI(){
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
	if(esp01Handle.WriteUSARTByte == NULL)
 8001f8c:	4b0a      	ldr	r3, [pc, #40]	@ (8001fb8 <ESP01_StateWIFI+0x30>)
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d102      	bne.n	8001f9a <ESP01_StateWIFI+0x12>
		return ESP01_NOT_INIT;
 8001f94:	f04f 33ff 	mov.w	r3, #4294967295
 8001f98:	e009      	b.n	8001fae <ESP01_StateWIFI+0x26>

	if(esp01Flags.bit.WIFICONNECTED)
 8001f9a:	4b08      	ldr	r3, [pc, #32]	@ (8001fbc <ESP01_StateWIFI+0x34>)
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	f003 0302 	and.w	r3, r3, #2
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d001      	beq.n	8001fac <ESP01_StateWIFI+0x24>
		return ESP01_WIFI_CONNECTED;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	e000      	b.n	8001fae <ESP01_StateWIFI+0x26>
	else
		return ESP01_WIFI_DISCONNECTED;
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr
 8001fb8:	20000a68 	.word	0x20000a68
 8001fbc:	20000830 	.word	0x20000830

08001fc0 <ESP01_WriteRX>:
	else
		return ESP01_UDPTCP_DISCONNECTED;
}


void ESP01_WriteRX(uint8_t value){
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	71fb      	strb	r3, [r7, #7]
//	if(esp01Handle.bufRX == NULL)
//		return;
	esp01RXATBuf[esp01iwRXAT++] = value;
 8001fca:	4b0b      	ldr	r3, [pc, #44]	@ (8001ff8 <ESP01_WriteRX+0x38>)
 8001fcc:	881b      	ldrh	r3, [r3, #0]
 8001fce:	1c5a      	adds	r2, r3, #1
 8001fd0:	b291      	uxth	r1, r2
 8001fd2:	4a09      	ldr	r2, [pc, #36]	@ (8001ff8 <ESP01_WriteRX+0x38>)
 8001fd4:	8011      	strh	r1, [r2, #0]
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	4a08      	ldr	r2, [pc, #32]	@ (8001ffc <ESP01_WriteRX+0x3c>)
 8001fda:	79fb      	ldrb	r3, [r7, #7]
 8001fdc:	5453      	strb	r3, [r2, r1]
	if(esp01iwRXAT == ESP01RXBUFAT)
 8001fde:	4b06      	ldr	r3, [pc, #24]	@ (8001ff8 <ESP01_WriteRX+0x38>)
 8001fe0:	881b      	ldrh	r3, [r3, #0]
 8001fe2:	2b80      	cmp	r3, #128	@ 0x80
 8001fe4:	d102      	bne.n	8001fec <ESP01_WriteRX+0x2c>
		esp01iwRXAT = 0;
 8001fe6:	4b04      	ldr	r3, [pc, #16]	@ (8001ff8 <ESP01_WriteRX+0x38>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	801a      	strh	r2, [r3, #0]
}
 8001fec:	bf00      	nop
 8001fee:	370c      	adds	r7, #12
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr
 8001ff8:	20000a5c 	.word	0x20000a5c
 8001ffc:	200008dc 	.word	0x200008dc

08002000 <ESP01_Send>:

_eESP01STATUS ESP01_Send(uint8_t *buf, uint16_t irRingBuf, uint16_t length, uint16_t sizeRingBuf){
 8002000:	b580      	push	{r7, lr}
 8002002:	b088      	sub	sp, #32
 8002004:	af00      	add	r7, sp, #0
 8002006:	60f8      	str	r0, [r7, #12]
 8002008:	4608      	mov	r0, r1
 800200a:	4611      	mov	r1, r2
 800200c:	461a      	mov	r2, r3
 800200e:	4603      	mov	r3, r0
 8002010:	817b      	strh	r3, [r7, #10]
 8002012:	460b      	mov	r3, r1
 8002014:	813b      	strh	r3, [r7, #8]
 8002016:	4613      	mov	r3, r2
 8002018:	80fb      	strh	r3, [r7, #6]
	if(esp01Handle.WriteUSARTByte == NULL)
 800201a:	4b46      	ldr	r3, [pc, #280]	@ (8002134 <ESP01_Send+0x134>)
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d102      	bne.n	8002028 <ESP01_Send+0x28>
		return ESP01_NOT_INIT;
 8002022:	f04f 33ff 	mov.w	r3, #4294967295
 8002026:	e081      	b.n	800212c <ESP01_Send+0x12c>

	if(esp01Flags.bit.UDPTCPCONNECTED == 0)
 8002028:	4b43      	ldr	r3, [pc, #268]	@ (8002138 <ESP01_Send+0x138>)
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002030:	b2db      	uxtb	r3, r3
 8002032:	2b00      	cmp	r3, #0
 8002034:	d101      	bne.n	800203a <ESP01_Send+0x3a>
		return ESP01_UDPTCP_DISCONNECTED;
 8002036:	2305      	movs	r3, #5
 8002038:	e078      	b.n	800212c <ESP01_Send+0x12c>

	if(esp01Flags.bit.SENDINGDATA == 0){
 800203a:	4b3f      	ldr	r3, [pc, #252]	@ (8002138 <ESP01_Send+0x138>)
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	f003 0308 	and.w	r3, r3, #8
 8002042:	b2db      	uxtb	r3, r3
 8002044:	2b00      	cmp	r3, #0
 8002046:	d168      	bne.n	800211a <ESP01_Send+0x11a>
		char strInt[10];
		uint8_t l = 0;
 8002048:	2300      	movs	r3, #0
 800204a:	777b      	strb	r3, [r7, #29]

		itoa(length, strInt, 10);
 800204c:	893b      	ldrh	r3, [r7, #8]
 800204e:	f107 0110 	add.w	r1, r7, #16
 8002052:	220a      	movs	r2, #10
 8002054:	4618      	mov	r0, r3
 8002056:	f00f ff03 	bl	8011e60 <itoa>
		l = strlen(strInt);
 800205a:	f107 0310 	add.w	r3, r7, #16
 800205e:	4618      	mov	r0, r3
 8002060:	f7fe f8be 	bl	80001e0 <strlen>
 8002064:	4603      	mov	r3, r0
 8002066:	777b      	strb	r3, [r7, #29]
		if(l>4 || l==0)
 8002068:	7f7b      	ldrb	r3, [r7, #29]
 800206a:	2b04      	cmp	r3, #4
 800206c:	d802      	bhi.n	8002074 <ESP01_Send+0x74>
 800206e:	7f7b      	ldrb	r3, [r7, #29]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d101      	bne.n	8002078 <ESP01_Send+0x78>
			return ESP01_SEND_ERROR;
 8002074:	230b      	movs	r3, #11
 8002076:	e059      	b.n	800212c <ESP01_Send+0x12c>
		ESP01StrToBufTX(ATCIPSEND);
 8002078:	4830      	ldr	r0, [pc, #192]	@ (800213c <ESP01_Send+0x13c>)
 800207a:	f000 ff4f 	bl	8002f1c <ESP01StrToBufTX>
		ESP01StrToBufTX(strInt);
 800207e:	f107 0310 	add.w	r3, r7, #16
 8002082:	4618      	mov	r0, r3
 8002084:	f000 ff4a 	bl	8002f1c <ESP01StrToBufTX>
		ESP01StrToBufTX("\r>");
 8002088:	482d      	ldr	r0, [pc, #180]	@ (8002140 <ESP01_Send+0x140>)
 800208a:	f000 ff47 	bl	8002f1c <ESP01StrToBufTX>
		for(uint16_t i=0; i<length; i++){
 800208e:	2300      	movs	r3, #0
 8002090:	83fb      	strh	r3, [r7, #30]
 8002092:	e020      	b.n	80020d6 <ESP01_Send+0xd6>
			esp01TXATBuf[esp01iwTX++] = buf[irRingBuf++];
 8002094:	897b      	ldrh	r3, [r7, #10]
 8002096:	1c5a      	adds	r2, r3, #1
 8002098:	817a      	strh	r2, [r7, #10]
 800209a:	461a      	mov	r2, r3
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	441a      	add	r2, r3
 80020a0:	4b28      	ldr	r3, [pc, #160]	@ (8002144 <ESP01_Send+0x144>)
 80020a2:	881b      	ldrh	r3, [r3, #0]
 80020a4:	1c59      	adds	r1, r3, #1
 80020a6:	b288      	uxth	r0, r1
 80020a8:	4926      	ldr	r1, [pc, #152]	@ (8002144 <ESP01_Send+0x144>)
 80020aa:	8008      	strh	r0, [r1, #0]
 80020ac:	4619      	mov	r1, r3
 80020ae:	7812      	ldrb	r2, [r2, #0]
 80020b0:	4b25      	ldr	r3, [pc, #148]	@ (8002148 <ESP01_Send+0x148>)
 80020b2:	545a      	strb	r2, [r3, r1]
			if(esp01iwTX == ESP01TXBUFAT)
 80020b4:	4b23      	ldr	r3, [pc, #140]	@ (8002144 <ESP01_Send+0x144>)
 80020b6:	881b      	ldrh	r3, [r3, #0]
 80020b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80020bc:	d102      	bne.n	80020c4 <ESP01_Send+0xc4>
				esp01iwTX = 0;
 80020be:	4b21      	ldr	r3, [pc, #132]	@ (8002144 <ESP01_Send+0x144>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	801a      	strh	r2, [r3, #0]
			if(irRingBuf == sizeRingBuf)
 80020c4:	897a      	ldrh	r2, [r7, #10]
 80020c6:	88fb      	ldrh	r3, [r7, #6]
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d101      	bne.n	80020d0 <ESP01_Send+0xd0>
				irRingBuf = 0;
 80020cc:	2300      	movs	r3, #0
 80020ce:	817b      	strh	r3, [r7, #10]
		for(uint16_t i=0; i<length; i++){
 80020d0:	8bfb      	ldrh	r3, [r7, #30]
 80020d2:	3301      	adds	r3, #1
 80020d4:	83fb      	strh	r3, [r7, #30]
 80020d6:	8bfa      	ldrh	r2, [r7, #30]
 80020d8:	893b      	ldrh	r3, [r7, #8]
 80020da:	429a      	cmp	r2, r3
 80020dc:	d3da      	bcc.n	8002094 <ESP01_Send+0x94>
		}
		esp01Flags.bit.TXCIPSEND = 1;
 80020de:	4a16      	ldr	r2, [pc, #88]	@ (8002138 <ESP01_Send+0x138>)
 80020e0:	7813      	ldrb	r3, [r2, #0]
 80020e2:	f043 0304 	orr.w	r3, r3, #4
 80020e6:	7013      	strb	r3, [r2, #0]
		esp01Flags.bit.SENDINGDATA = 1;
 80020e8:	4a13      	ldr	r2, [pc, #76]	@ (8002138 <ESP01_Send+0x138>)
 80020ea:	7813      	ldrb	r3, [r2, #0]
 80020ec:	f043 0308 	orr.w	r3, r3, #8
 80020f0:	7013      	strb	r3, [r2, #0]
		if(ESP01DbgStr != NULL){
 80020f2:	4b16      	ldr	r3, [pc, #88]	@ (800214c <ESP01_Send+0x14c>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d00d      	beq.n	8002116 <ESP01_Send+0x116>
			ESP01DbgStr("+&DBGSENDING DATA ");
 80020fa:	4b14      	ldr	r3, [pc, #80]	@ (800214c <ESP01_Send+0x14c>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4814      	ldr	r0, [pc, #80]	@ (8002150 <ESP01_Send+0x150>)
 8002100:	4798      	blx	r3
			ESP01DbgStr(strInt);
 8002102:	4b12      	ldr	r3, [pc, #72]	@ (800214c <ESP01_Send+0x14c>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f107 0210 	add.w	r2, r7, #16
 800210a:	4610      	mov	r0, r2
 800210c:	4798      	blx	r3
			ESP01DbgStr("\n");
 800210e:	4b0f      	ldr	r3, [pc, #60]	@ (800214c <ESP01_Send+0x14c>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4810      	ldr	r0, [pc, #64]	@ (8002154 <ESP01_Send+0x154>)
 8002114:	4798      	blx	r3
		}
		return ESP01_SEND_READY;
 8002116:	2309      	movs	r3, #9
 8002118:	e008      	b.n	800212c <ESP01_Send+0x12c>
	}
	if(ESP01DbgStr != NULL)
 800211a:	4b0c      	ldr	r3, [pc, #48]	@ (800214c <ESP01_Send+0x14c>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d003      	beq.n	800212a <ESP01_Send+0x12a>
		ESP01DbgStr("+&DBGSENDING DATA BUSY\n");
 8002122:	4b0a      	ldr	r3, [pc, #40]	@ (800214c <ESP01_Send+0x14c>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	480c      	ldr	r0, [pc, #48]	@ (8002158 <ESP01_Send+0x158>)
 8002128:	4798      	blx	r3
	return ESP01_SEND_BUSY;
 800212a:	2308      	movs	r3, #8
}
 800212c:	4618      	mov	r0, r3
 800212e:	3720      	adds	r7, #32
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	20000a68 	.word	0x20000a68
 8002138:	20000830 	.word	0x20000830
 800213c:	08013da4 	.word	0x08013da4
 8002140:	08012868 	.word	0x08012868
 8002144:	20000a62 	.word	0x20000a62
 8002148:	2000095c 	.word	0x2000095c
 800214c:	20000844 	.word	0x20000844
 8002150:	0801286c 	.word	0x0801286c
 8002154:	08012880 	.word	0x08012880
 8002158:	08012884 	.word	0x08012884

0800215c <ESP01_Init>:


void ESP01_Init(_sESP01Handle *hESP01){
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]

	memcpy(&esp01Handle, hESP01, sizeof(_sESP01Handle));
 8002164:	220c      	movs	r2, #12
 8002166:	6879      	ldr	r1, [r7, #4]
 8002168:	4810      	ldr	r0, [pc, #64]	@ (80021ac <ESP01_Init+0x50>)
 800216a:	f00f ff27 	bl	8011fbc <memcpy>

	esp01ATSate = ESP01ATIDLE;
 800216e:	4b10      	ldr	r3, [pc, #64]	@ (80021b0 <ESP01_Init+0x54>)
 8002170:	2200      	movs	r2, #0
 8002172:	701a      	strb	r2, [r3, #0]
	esp01HState = 0;
 8002174:	4b0f      	ldr	r3, [pc, #60]	@ (80021b4 <ESP01_Init+0x58>)
 8002176:	2200      	movs	r2, #0
 8002178:	701a      	strb	r2, [r3, #0]
	esp01irTX = 0;
 800217a:	4b0f      	ldr	r3, [pc, #60]	@ (80021b8 <ESP01_Init+0x5c>)
 800217c:	2200      	movs	r2, #0
 800217e:	801a      	strh	r2, [r3, #0]
	esp01iwTX = 0;
 8002180:	4b0e      	ldr	r3, [pc, #56]	@ (80021bc <ESP01_Init+0x60>)
 8002182:	2200      	movs	r2, #0
 8002184:	801a      	strh	r2, [r3, #0]
	esp01irRXAT = 0;
 8002186:	4b0e      	ldr	r3, [pc, #56]	@ (80021c0 <ESP01_Init+0x64>)
 8002188:	2200      	movs	r2, #0
 800218a:	801a      	strh	r2, [r3, #0]
	esp01iwRXAT = 0;
 800218c:	4b0d      	ldr	r3, [pc, #52]	@ (80021c4 <ESP01_Init+0x68>)
 800218e:	2200      	movs	r2, #0
 8002190:	801a      	strh	r2, [r3, #0]
	esp01Flags.byte = 0;
 8002192:	4b0d      	ldr	r3, [pc, #52]	@ (80021c8 <ESP01_Init+0x6c>)
 8002194:	2200      	movs	r2, #0
 8002196:	701a      	strb	r2, [r3, #0]
	ESP01ChangeState = NULL;
 8002198:	4b0c      	ldr	r3, [pc, #48]	@ (80021cc <ESP01_Init+0x70>)
 800219a:	2200      	movs	r2, #0
 800219c:	601a      	str	r2, [r3, #0]
	ESP01DbgStr = NULL;
 800219e:	4b0c      	ldr	r3, [pc, #48]	@ (80021d0 <ESP01_Init+0x74>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	601a      	str	r2, [r3, #0]
}
 80021a4:	bf00      	nop
 80021a6:	3708      	adds	r7, #8
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	20000a68 	.word	0x20000a68
 80021b0:	2000082e 	.word	0x2000082e
 80021b4:	200008d6 	.word	0x200008d6
 80021b8:	20000a60 	.word	0x20000a60
 80021bc:	20000a62 	.word	0x20000a62
 80021c0:	20000a5e 	.word	0x20000a5e
 80021c4:	20000a5c 	.word	0x20000a5c
 80021c8:	20000830 	.word	0x20000830
 80021cc:	20000840 	.word	0x20000840
 80021d0:	20000844 	.word	0x20000844

080021d4 <ESP01_Timeout10ms>:


void ESP01_Timeout10ms(){
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
	if(esp01TimeoutTask)
 80021d8:	4b13      	ldr	r3, [pc, #76]	@ (8002228 <ESP01_Timeout10ms+0x54>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d004      	beq.n	80021ea <ESP01_Timeout10ms+0x16>
		esp01TimeoutTask--;
 80021e0:	4b11      	ldr	r3, [pc, #68]	@ (8002228 <ESP01_Timeout10ms+0x54>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	3b01      	subs	r3, #1
 80021e6:	4a10      	ldr	r2, [pc, #64]	@ (8002228 <ESP01_Timeout10ms+0x54>)
 80021e8:	6013      	str	r3, [r2, #0]

	if(esp01TimeoutDataRx){
 80021ea:	4b10      	ldr	r3, [pc, #64]	@ (800222c <ESP01_Timeout10ms+0x58>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d00b      	beq.n	800220a <ESP01_Timeout10ms+0x36>
		esp01TimeoutDataRx--;
 80021f2:	4b0e      	ldr	r3, [pc, #56]	@ (800222c <ESP01_Timeout10ms+0x58>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	3b01      	subs	r3, #1
 80021f8:	4a0c      	ldr	r2, [pc, #48]	@ (800222c <ESP01_Timeout10ms+0x58>)
 80021fa:	6013      	str	r3, [r2, #0]
		if(!esp01TimeoutDataRx)
 80021fc:	4b0b      	ldr	r3, [pc, #44]	@ (800222c <ESP01_Timeout10ms+0x58>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d102      	bne.n	800220a <ESP01_Timeout10ms+0x36>
			esp01HState = 0;
 8002204:	4b0a      	ldr	r3, [pc, #40]	@ (8002230 <ESP01_Timeout10ms+0x5c>)
 8002206:	2200      	movs	r2, #0
 8002208:	701a      	strb	r2, [r3, #0]
	}

	if(esp01TimeoutTxSymbol)
 800220a:	4b0a      	ldr	r3, [pc, #40]	@ (8002234 <ESP01_Timeout10ms+0x60>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d004      	beq.n	800221c <ESP01_Timeout10ms+0x48>
		esp01TimeoutTxSymbol--;
 8002212:	4b08      	ldr	r3, [pc, #32]	@ (8002234 <ESP01_Timeout10ms+0x60>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	3b01      	subs	r3, #1
 8002218:	4a06      	ldr	r2, [pc, #24]	@ (8002234 <ESP01_Timeout10ms+0x60>)
 800221a:	6013      	str	r3, [r2, #0]
}
 800221c:	bf00      	nop
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	20000834 	.word	0x20000834
 800222c:	20000838 	.word	0x20000838
 8002230:	200008d6 	.word	0x200008d6
 8002234:	2000083c 	.word	0x2000083c

08002238 <ESP01_Task>:

void ESP01_Task(){
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
	if(esp01irRXAT != esp01iwRXAT)
 800223c:	4b08      	ldr	r3, [pc, #32]	@ (8002260 <ESP01_Task+0x28>)
 800223e:	881a      	ldrh	r2, [r3, #0]
 8002240:	4b08      	ldr	r3, [pc, #32]	@ (8002264 <ESP01_Task+0x2c>)
 8002242:	881b      	ldrh	r3, [r3, #0]
 8002244:	429a      	cmp	r2, r3
 8002246:	d001      	beq.n	800224c <ESP01_Task+0x14>
		ESP01ATDecode();
 8002248:	f000 f820 	bl	800228c <ESP01ATDecode>

	if(!esp01TimeoutTask)
 800224c:	4b06      	ldr	r3, [pc, #24]	@ (8002268 <ESP01_Task+0x30>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d101      	bne.n	8002258 <ESP01_Task+0x20>
		ESP01DOConnection();
 8002254:	f000 fbdc 	bl	8002a10 <ESP01DOConnection>

	ESP01SENDData();
 8002258:	f000 fde4 	bl	8002e24 <ESP01SENDData>
}
 800225c:	bf00      	nop
 800225e:	bd80      	pop	{r7, pc}
 8002260:	20000a5e 	.word	0x20000a5e
 8002264:	20000a5c 	.word	0x20000a5c
 8002268:	20000834 	.word	0x20000834

0800226c <ESP01_AttachChangeState>:

void ESP01_AttachChangeState(void (*aESP01ChangeState)(_eESP01STATUS esp01State)){
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
	ESP01ChangeState = aESP01ChangeState;
 8002274:	4a04      	ldr	r2, [pc, #16]	@ (8002288 <ESP01_AttachChangeState+0x1c>)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6013      	str	r3, [r2, #0]
}
 800227a:	bf00      	nop
 800227c:	370c      	adds	r7, #12
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop
 8002288:	20000840 	.word	0x20000840

0800228c <ESP01ATDecode>:
		return 1;
	return 0;
}

/* Private Functions */
static void ESP01ATDecode(){
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
	uint16_t i;
	uint8_t value;
	if(esp01ATSate==ESP01ATHARDRST0 || esp01ATSate==ESP01ATHARDRST1 ||
 8002292:	4b7f      	ldr	r3, [pc, #508]	@ (8002490 <ESP01ATDecode+0x204>)
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	2b0d      	cmp	r3, #13
 8002298:	d007      	beq.n	80022aa <ESP01ATDecode+0x1e>
 800229a:	4b7d      	ldr	r3, [pc, #500]	@ (8002490 <ESP01ATDecode+0x204>)
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	2b0e      	cmp	r3, #14
 80022a0:	d003      	beq.n	80022aa <ESP01ATDecode+0x1e>
	   esp01ATSate==ESP01ATHARDRSTSTOP){
 80022a2:	4b7b      	ldr	r3, [pc, #492]	@ (8002490 <ESP01ATDecode+0x204>)
 80022a4:	781b      	ldrb	r3, [r3, #0]
	if(esp01ATSate==ESP01ATHARDRST0 || esp01ATSate==ESP01ATHARDRST1 ||
 80022a6:	2b0f      	cmp	r3, #15
 80022a8:	d104      	bne.n	80022b4 <ESP01ATDecode+0x28>
		esp01irRXAT = esp01iwRXAT;
 80022aa:	4b7a      	ldr	r3, [pc, #488]	@ (8002494 <ESP01ATDecode+0x208>)
 80022ac:	881a      	ldrh	r2, [r3, #0]
 80022ae:	4b7a      	ldr	r3, [pc, #488]	@ (8002498 <ESP01ATDecode+0x20c>)
 80022b0:	801a      	strh	r2, [r3, #0]
		return;
 80022b2:	e3a7      	b.n	8002a04 <ESP01ATDecode+0x778>
	}
	i = esp01iwRXAT;
 80022b4:	4b77      	ldr	r3, [pc, #476]	@ (8002494 <ESP01ATDecode+0x208>)
 80022b6:	881b      	ldrh	r3, [r3, #0]
 80022b8:	80fb      	strh	r3, [r7, #6]
	esp01TimeoutDataRx = 2;
 80022ba:	4b78      	ldr	r3, [pc, #480]	@ (800249c <ESP01ATDecode+0x210>)
 80022bc:	2202      	movs	r2, #2
 80022be:	601a      	str	r2, [r3, #0]
	while(esp01irRXAT != i){
 80022c0:	e39a      	b.n	80029f8 <ESP01ATDecode+0x76c>
		value = esp01RXATBuf[esp01irRXAT];
 80022c2:	4b75      	ldr	r3, [pc, #468]	@ (8002498 <ESP01ATDecode+0x20c>)
 80022c4:	881b      	ldrh	r3, [r3, #0]
 80022c6:	461a      	mov	r2, r3
 80022c8:	4b75      	ldr	r3, [pc, #468]	@ (80024a0 <ESP01ATDecode+0x214>)
 80022ca:	5c9b      	ldrb	r3, [r3, r2]
 80022cc:	717b      	strb	r3, [r7, #5]
		switch(esp01HState){
 80022ce:	4b75      	ldr	r3, [pc, #468]	@ (80024a4 <ESP01ATDecode+0x218>)
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	2b0c      	cmp	r3, #12
 80022d4:	f200 8353 	bhi.w	800297e <ESP01ATDecode+0x6f2>
 80022d8:	a201      	add	r2, pc, #4	@ (adr r2, 80022e0 <ESP01ATDecode+0x54>)
 80022da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022de:	bf00      	nop
 80022e0:	08002315 	.word	0x08002315
 80022e4:	08002405 	.word	0x08002405
 80022e8:	080025e7 	.word	0x080025e7
 80022ec:	0800297f 	.word	0x0800297f
 80022f0:	0800297f 	.word	0x0800297f
 80022f4:	080027ef 	.word	0x080027ef
 80022f8:	08002835 	.word	0x08002835
 80022fc:	0800284b 	.word	0x0800284b
 8002300:	08002877 	.word	0x08002877
 8002304:	0800297f 	.word	0x0800297f
 8002308:	080028c3 	.word	0x080028c3
 800230c:	080028eb 	.word	0x080028eb
 8002310:	08002941 	.word	0x08002941
		case 0:
            indexResponse = 0;
 8002314:	4b64      	ldr	r3, [pc, #400]	@ (80024a8 <ESP01ATDecode+0x21c>)
 8002316:	2200      	movs	r2, #0
 8002318:	701a      	strb	r2, [r3, #0]
            indexResponseChar = 4;
 800231a:	4b64      	ldr	r3, [pc, #400]	@ (80024ac <ESP01ATDecode+0x220>)
 800231c:	2204      	movs	r2, #4
 800231e:	701a      	strb	r2, [r3, #0]
            while(responses[indexResponse] != NULL){
 8002320:	e03e      	b.n	80023a0 <ESP01ATDecode+0x114>
                if(value == responses[indexResponse][indexResponseChar]){ // todos los ocmandos de respuesta tienen una cabecer
 8002322:	4b61      	ldr	r3, [pc, #388]	@ (80024a8 <ESP01ATDecode+0x21c>)
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	461a      	mov	r2, r3
 8002328:	4b61      	ldr	r3, [pc, #388]	@ (80024b0 <ESP01ATDecode+0x224>)
 800232a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800232e:	4a5f      	ldr	r2, [pc, #380]	@ (80024ac <ESP01ATDecode+0x220>)
 8002330:	7812      	ldrb	r2, [r2, #0]
 8002332:	4413      	add	r3, r2
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	797a      	ldrb	r2, [r7, #5]
 8002338:	429a      	cmp	r2, r3
 800233a:	d12b      	bne.n	8002394 <ESP01ATDecode+0x108>
                    esp01nBytes = (responses[indexResponse][0] - '0');			// aca saca los primeros dos numero que guarda la cantidad de bytes de la cabecera hace el *10 pq pone el primer byte en las decenas  y al otro lo suma así nomas
 800233c:	4b5a      	ldr	r3, [pc, #360]	@ (80024a8 <ESP01ATDecode+0x21c>)
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	461a      	mov	r2, r3
 8002342:	4b5b      	ldr	r3, [pc, #364]	@ (80024b0 <ESP01ATDecode+0x224>)
 8002344:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	3b30      	subs	r3, #48	@ 0x30
 800234c:	b29a      	uxth	r2, r3
 800234e:	4b59      	ldr	r3, [pc, #356]	@ (80024b4 <ESP01ATDecode+0x228>)
 8002350:	801a      	strh	r2, [r3, #0]
                    esp01nBytes *= 10;
 8002352:	4b58      	ldr	r3, [pc, #352]	@ (80024b4 <ESP01ATDecode+0x228>)
 8002354:	881b      	ldrh	r3, [r3, #0]
 8002356:	461a      	mov	r2, r3
 8002358:	0092      	lsls	r2, r2, #2
 800235a:	4413      	add	r3, r2
 800235c:	005b      	lsls	r3, r3, #1
 800235e:	b29a      	uxth	r2, r3
 8002360:	4b54      	ldr	r3, [pc, #336]	@ (80024b4 <ESP01ATDecode+0x228>)
 8002362:	801a      	strh	r2, [r3, #0]
                    esp01nBytes += (responses[indexResponse][1] - '0');
 8002364:	4b50      	ldr	r3, [pc, #320]	@ (80024a8 <ESP01ATDecode+0x21c>)
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	461a      	mov	r2, r3
 800236a:	4b51      	ldr	r3, [pc, #324]	@ (80024b0 <ESP01ATDecode+0x224>)
 800236c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002370:	3301      	adds	r3, #1
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	461a      	mov	r2, r3
 8002376:	4b4f      	ldr	r3, [pc, #316]	@ (80024b4 <ESP01ATDecode+0x228>)
 8002378:	881b      	ldrh	r3, [r3, #0]
 800237a:	4413      	add	r3, r2
 800237c:	b29b      	uxth	r3, r3
 800237e:	3b30      	subs	r3, #48	@ 0x30
 8002380:	b29a      	uxth	r2, r3
 8002382:	4b4c      	ldr	r3, [pc, #304]	@ (80024b4 <ESP01ATDecode+0x228>)
 8002384:	801a      	strh	r2, [r3, #0]
                    esp01nBytes--;			//y esta bosta es pq
 8002386:	4b4b      	ldr	r3, [pc, #300]	@ (80024b4 <ESP01ATDecode+0x228>)
 8002388:	881b      	ldrh	r3, [r3, #0]
 800238a:	3b01      	subs	r3, #1
 800238c:	b29a      	uxth	r2, r3
 800238e:	4b49      	ldr	r3, [pc, #292]	@ (80024b4 <ESP01ATDecode+0x228>)
 8002390:	801a      	strh	r2, [r3, #0]
                    break;
 8002392:	e00d      	b.n	80023b0 <ESP01ATDecode+0x124>
                }
                indexResponse++;
 8002394:	4b44      	ldr	r3, [pc, #272]	@ (80024a8 <ESP01ATDecode+0x21c>)
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	3301      	adds	r3, #1
 800239a:	b2da      	uxtb	r2, r3
 800239c:	4b42      	ldr	r3, [pc, #264]	@ (80024a8 <ESP01ATDecode+0x21c>)
 800239e:	701a      	strb	r2, [r3, #0]
            while(responses[indexResponse] != NULL){
 80023a0:	4b41      	ldr	r3, [pc, #260]	@ (80024a8 <ESP01ATDecode+0x21c>)
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	461a      	mov	r2, r3
 80023a6:	4b42      	ldr	r3, [pc, #264]	@ (80024b0 <ESP01ATDecode+0x224>)
 80023a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d1b8      	bne.n	8002322 <ESP01ATDecode+0x96>
            }
            if(responses[indexResponse] != NULL){
 80023b0:	4b3d      	ldr	r3, [pc, #244]	@ (80024a8 <ESP01ATDecode+0x21c>)
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	461a      	mov	r2, r3
 80023b6:	4b3e      	ldr	r3, [pc, #248]	@ (80024b0 <ESP01ATDecode+0x224>)
 80023b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d009      	beq.n	80023d4 <ESP01ATDecode+0x148>
                esp01HState = 1;
 80023c0:	4b38      	ldr	r3, [pc, #224]	@ (80024a4 <ESP01ATDecode+0x218>)
 80023c2:	2201      	movs	r2, #1
 80023c4:	701a      	strb	r2, [r3, #0]
                indexResponseChar++;
 80023c6:	4b39      	ldr	r3, [pc, #228]	@ (80024ac <ESP01ATDecode+0x220>)
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	3301      	adds	r3, #1
 80023cc:	b2da      	uxtb	r2, r3
 80023ce:	4b37      	ldr	r3, [pc, #220]	@ (80024ac <ESP01ATDecode+0x220>)
 80023d0:	701a      	strb	r2, [r3, #0]
						esp01Flags.bit.WAITINGSYMBOL = 0;
						esp01TimeoutTxSymbol = 0;
					}
				}
			}
			break;
 80023d2:	e2db      	b.n	800298c <ESP01ATDecode+0x700>
				esp01TimeoutDataRx = 0;
 80023d4:	4b31      	ldr	r3, [pc, #196]	@ (800249c <ESP01ATDecode+0x210>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	601a      	str	r2, [r3, #0]
				if(esp01Flags.bit.WAITINGSYMBOL){
 80023da:	4b37      	ldr	r3, [pc, #220]	@ (80024b8 <ESP01ATDecode+0x22c>)
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	f003 0301 	and.w	r3, r3, #1
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	f000 82d1 	beq.w	800298c <ESP01ATDecode+0x700>
					if(value == '>'){
 80023ea:	797b      	ldrb	r3, [r7, #5]
 80023ec:	2b3e      	cmp	r3, #62	@ 0x3e
 80023ee:	f040 82cd 	bne.w	800298c <ESP01ATDecode+0x700>
						esp01Flags.bit.WAITINGSYMBOL = 0;
 80023f2:	4a31      	ldr	r2, [pc, #196]	@ (80024b8 <ESP01ATDecode+0x22c>)
 80023f4:	7813      	ldrb	r3, [r2, #0]
 80023f6:	f023 0301 	bic.w	r3, r3, #1
 80023fa:	7013      	strb	r3, [r2, #0]
						esp01TimeoutTxSymbol = 0;
 80023fc:	4b2f      	ldr	r3, [pc, #188]	@ (80024bc <ESP01ATDecode+0x230>)
 80023fe:	2200      	movs	r2, #0
 8002400:	601a      	str	r2, [r3, #0]
			break;
 8002402:	e2c3      	b.n	800298c <ESP01ATDecode+0x700>
		case 1:
            if(value == responses[indexResponse][indexResponseChar]){
 8002404:	4b28      	ldr	r3, [pc, #160]	@ (80024a8 <ESP01ATDecode+0x21c>)
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	461a      	mov	r2, r3
 800240a:	4b29      	ldr	r3, [pc, #164]	@ (80024b0 <ESP01ATDecode+0x224>)
 800240c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002410:	4a26      	ldr	r2, [pc, #152]	@ (80024ac <ESP01ATDecode+0x220>)
 8002412:	7812      	ldrb	r2, [r2, #0]
 8002414:	4413      	add	r3, r2
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	797a      	ldrb	r2, [r7, #5]
 800241a:	429a      	cmp	r2, r3
 800241c:	d133      	bne.n	8002486 <ESP01ATDecode+0x1fa>
                esp01nBytes--;
 800241e:	4b25      	ldr	r3, [pc, #148]	@ (80024b4 <ESP01ATDecode+0x228>)
 8002420:	881b      	ldrh	r3, [r3, #0]
 8002422:	3b01      	subs	r3, #1
 8002424:	b29a      	uxth	r2, r3
 8002426:	4b23      	ldr	r3, [pc, #140]	@ (80024b4 <ESP01ATDecode+0x228>)
 8002428:	801a      	strh	r2, [r3, #0]
                if(!esp01nBytes || value=='\r'){
 800242a:	4b22      	ldr	r3, [pc, #136]	@ (80024b4 <ESP01ATDecode+0x228>)
 800242c:	881b      	ldrh	r3, [r3, #0]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d003      	beq.n	800243a <ESP01ATDecode+0x1ae>
 8002432:	797b      	ldrb	r3, [r7, #5]
 8002434:	2b0d      	cmp	r3, #13
 8002436:	f040 80cf 	bne.w	80025d8 <ESP01ATDecode+0x34c>
                    esp01HState = (responses[indexResponse][2] - '0');
 800243a:	4b1b      	ldr	r3, [pc, #108]	@ (80024a8 <ESP01ATDecode+0x21c>)
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	461a      	mov	r2, r3
 8002440:	4b1b      	ldr	r3, [pc, #108]	@ (80024b0 <ESP01ATDecode+0x224>)
 8002442:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002446:	3302      	adds	r3, #2
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	3b30      	subs	r3, #48	@ 0x30
 800244c:	b2da      	uxtb	r2, r3
 800244e:	4b15      	ldr	r3, [pc, #84]	@ (80024a4 <ESP01ATDecode+0x218>)
 8002450:	701a      	strb	r2, [r3, #0]
                    esp01HState *= 10;
 8002452:	4b14      	ldr	r3, [pc, #80]	@ (80024a4 <ESP01ATDecode+0x218>)
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	461a      	mov	r2, r3
 8002458:	0092      	lsls	r2, r2, #2
 800245a:	4413      	add	r3, r2
 800245c:	005b      	lsls	r3, r3, #1
 800245e:	b2da      	uxtb	r2, r3
 8002460:	4b10      	ldr	r3, [pc, #64]	@ (80024a4 <ESP01ATDecode+0x218>)
 8002462:	701a      	strb	r2, [r3, #0]
                    esp01HState += (responses[indexResponse][3] - '0');
 8002464:	4b10      	ldr	r3, [pc, #64]	@ (80024a8 <ESP01ATDecode+0x21c>)
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	461a      	mov	r2, r3
 800246a:	4b11      	ldr	r3, [pc, #68]	@ (80024b0 <ESP01ATDecode+0x224>)
 800246c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002470:	3303      	adds	r3, #3
 8002472:	781a      	ldrb	r2, [r3, #0]
 8002474:	4b0b      	ldr	r3, [pc, #44]	@ (80024a4 <ESP01ATDecode+0x218>)
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	4413      	add	r3, r2
 800247a:	b2db      	uxtb	r3, r3
 800247c:	3b30      	subs	r3, #48	@ 0x30
 800247e:	b2da      	uxtb	r2, r3
 8002480:	4b08      	ldr	r3, [pc, #32]	@ (80024a4 <ESP01ATDecode+0x218>)
 8002482:	701a      	strb	r2, [r3, #0]
                    break;
 8002484:	e2ab      	b.n	80029de <ESP01ATDecode+0x752>
                }
            }
            else{
                indexResponse = 0;
 8002486:	4b08      	ldr	r3, [pc, #32]	@ (80024a8 <ESP01ATDecode+0x21c>)
 8002488:	2200      	movs	r2, #0
 800248a:	701a      	strb	r2, [r3, #0]
                while(responses[indexResponse] != NULL){
 800248c:	e088      	b.n	80025a0 <ESP01ATDecode+0x314>
 800248e:	bf00      	nop
 8002490:	2000082e 	.word	0x2000082e
 8002494:	20000a5c 	.word	0x20000a5c
 8002498:	20000a5e 	.word	0x20000a5e
 800249c:	20000838 	.word	0x20000838
 80024a0:	200008dc 	.word	0x200008dc
 80024a4:	200008d6 	.word	0x200008d6
 80024a8:	20000a74 	.word	0x20000a74
 80024ac:	20000a75 	.word	0x20000a75
 80024b0:	08013ec8 	.word	0x08013ec8
 80024b4:	200008d8 	.word	0x200008d8
 80024b8:	20000830 	.word	0x20000830
 80024bc:	2000083c 	.word	0x2000083c
                    esp01nBytes = (responses[indexResponse][0] - '0');
 80024c0:	4b99      	ldr	r3, [pc, #612]	@ (8002728 <ESP01ATDecode+0x49c>)
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	461a      	mov	r2, r3
 80024c6:	4b99      	ldr	r3, [pc, #612]	@ (800272c <ESP01ATDecode+0x4a0>)
 80024c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	3b30      	subs	r3, #48	@ 0x30
 80024d0:	b29a      	uxth	r2, r3
 80024d2:	4b97      	ldr	r3, [pc, #604]	@ (8002730 <ESP01ATDecode+0x4a4>)
 80024d4:	801a      	strh	r2, [r3, #0]
                    esp01nBytes *= 10;
 80024d6:	4b96      	ldr	r3, [pc, #600]	@ (8002730 <ESP01ATDecode+0x4a4>)
 80024d8:	881b      	ldrh	r3, [r3, #0]
 80024da:	461a      	mov	r2, r3
 80024dc:	0092      	lsls	r2, r2, #2
 80024de:	4413      	add	r3, r2
 80024e0:	005b      	lsls	r3, r3, #1
 80024e2:	b29a      	uxth	r2, r3
 80024e4:	4b92      	ldr	r3, [pc, #584]	@ (8002730 <ESP01ATDecode+0x4a4>)
 80024e6:	801a      	strh	r2, [r3, #0]
                    esp01nBytes += (responses[indexResponse][1] - '0');
 80024e8:	4b8f      	ldr	r3, [pc, #572]	@ (8002728 <ESP01ATDecode+0x49c>)
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	461a      	mov	r2, r3
 80024ee:	4b8f      	ldr	r3, [pc, #572]	@ (800272c <ESP01ATDecode+0x4a0>)
 80024f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024f4:	3301      	adds	r3, #1
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	461a      	mov	r2, r3
 80024fa:	4b8d      	ldr	r3, [pc, #564]	@ (8002730 <ESP01ATDecode+0x4a4>)
 80024fc:	881b      	ldrh	r3, [r3, #0]
 80024fe:	4413      	add	r3, r2
 8002500:	b29b      	uxth	r3, r3
 8002502:	3b30      	subs	r3, #48	@ 0x30
 8002504:	b29a      	uxth	r2, r3
 8002506:	4b8a      	ldr	r3, [pc, #552]	@ (8002730 <ESP01ATDecode+0x4a4>)
 8002508:	801a      	strh	r2, [r3, #0]
                    esp01nBytes -= (indexResponseChar-3);
 800250a:	4b89      	ldr	r3, [pc, #548]	@ (8002730 <ESP01ATDecode+0x4a4>)
 800250c:	881b      	ldrh	r3, [r3, #0]
 800250e:	4a89      	ldr	r2, [pc, #548]	@ (8002734 <ESP01ATDecode+0x4a8>)
 8002510:	7812      	ldrb	r2, [r2, #0]
 8002512:	1a9b      	subs	r3, r3, r2
 8002514:	b29b      	uxth	r3, r3
 8002516:	3303      	adds	r3, #3
 8002518:	b29a      	uxth	r2, r3
 800251a:	4b85      	ldr	r3, [pc, #532]	@ (8002730 <ESP01ATDecode+0x4a4>)
 800251c:	801a      	strh	r2, [r3, #0]
                    if(esp01nBytes<128 && value==responses[indexResponse][indexResponseChar]){
 800251e:	4b84      	ldr	r3, [pc, #528]	@ (8002730 <ESP01ATDecode+0x4a4>)
 8002520:	881b      	ldrh	r3, [r3, #0]
 8002522:	2b7f      	cmp	r3, #127	@ 0x7f
 8002524:	d836      	bhi.n	8002594 <ESP01ATDecode+0x308>
 8002526:	4b80      	ldr	r3, [pc, #512]	@ (8002728 <ESP01ATDecode+0x49c>)
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	461a      	mov	r2, r3
 800252c:	4b7f      	ldr	r3, [pc, #508]	@ (800272c <ESP01ATDecode+0x4a0>)
 800252e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002532:	4a80      	ldr	r2, [pc, #512]	@ (8002734 <ESP01ATDecode+0x4a8>)
 8002534:	7812      	ldrb	r2, [r2, #0]
 8002536:	4413      	add	r3, r2
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	797a      	ldrb	r2, [r7, #5]
 800253c:	429a      	cmp	r2, r3
 800253e:	d129      	bne.n	8002594 <ESP01ATDecode+0x308>
                        if(esp01nBytes == 0){
 8002540:	4b7b      	ldr	r3, [pc, #492]	@ (8002730 <ESP01ATDecode+0x4a4>)
 8002542:	881b      	ldrh	r3, [r3, #0]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d134      	bne.n	80025b2 <ESP01ATDecode+0x326>
                            esp01HState = (responses[indexResponse][2] - '0');
 8002548:	4b77      	ldr	r3, [pc, #476]	@ (8002728 <ESP01ATDecode+0x49c>)
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	461a      	mov	r2, r3
 800254e:	4b77      	ldr	r3, [pc, #476]	@ (800272c <ESP01ATDecode+0x4a0>)
 8002550:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002554:	3302      	adds	r3, #2
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	3b30      	subs	r3, #48	@ 0x30
 800255a:	b2da      	uxtb	r2, r3
 800255c:	4b76      	ldr	r3, [pc, #472]	@ (8002738 <ESP01ATDecode+0x4ac>)
 800255e:	701a      	strb	r2, [r3, #0]
                            esp01HState *= 10;
 8002560:	4b75      	ldr	r3, [pc, #468]	@ (8002738 <ESP01ATDecode+0x4ac>)
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	461a      	mov	r2, r3
 8002566:	0092      	lsls	r2, r2, #2
 8002568:	4413      	add	r3, r2
 800256a:	005b      	lsls	r3, r3, #1
 800256c:	b2da      	uxtb	r2, r3
 800256e:	4b72      	ldr	r3, [pc, #456]	@ (8002738 <ESP01ATDecode+0x4ac>)
 8002570:	701a      	strb	r2, [r3, #0]
                            esp01HState += (responses[indexResponse][3] - '0');
 8002572:	4b6d      	ldr	r3, [pc, #436]	@ (8002728 <ESP01ATDecode+0x49c>)
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	461a      	mov	r2, r3
 8002578:	4b6c      	ldr	r3, [pc, #432]	@ (800272c <ESP01ATDecode+0x4a0>)
 800257a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800257e:	3303      	adds	r3, #3
 8002580:	781a      	ldrb	r2, [r3, #0]
 8002582:	4b6d      	ldr	r3, [pc, #436]	@ (8002738 <ESP01ATDecode+0x4ac>)
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	4413      	add	r3, r2
 8002588:	b2db      	uxtb	r3, r3
 800258a:	3b30      	subs	r3, #48	@ 0x30
 800258c:	b2da      	uxtb	r2, r3
 800258e:	4b6a      	ldr	r3, [pc, #424]	@ (8002738 <ESP01ATDecode+0x4ac>)
 8002590:	701a      	strb	r2, [r3, #0]
                        }
                        break;
 8002592:	e00e      	b.n	80025b2 <ESP01ATDecode+0x326>
                    }
                    indexResponse++;
 8002594:	4b64      	ldr	r3, [pc, #400]	@ (8002728 <ESP01ATDecode+0x49c>)
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	3301      	adds	r3, #1
 800259a:	b2da      	uxtb	r2, r3
 800259c:	4b62      	ldr	r3, [pc, #392]	@ (8002728 <ESP01ATDecode+0x49c>)
 800259e:	701a      	strb	r2, [r3, #0]
                while(responses[indexResponse] != NULL){
 80025a0:	4b61      	ldr	r3, [pc, #388]	@ (8002728 <ESP01ATDecode+0x49c>)
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	461a      	mov	r2, r3
 80025a6:	4b61      	ldr	r3, [pc, #388]	@ (800272c <ESP01ATDecode+0x4a0>)
 80025a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d187      	bne.n	80024c0 <ESP01ATDecode+0x234>
 80025b0:	e000      	b.n	80025b4 <ESP01ATDecode+0x328>
                        break;
 80025b2:	bf00      	nop
                }
                if(responses[indexResponse] == NULL){
 80025b4:	4b5c      	ldr	r3, [pc, #368]	@ (8002728 <ESP01ATDecode+0x49c>)
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	461a      	mov	r2, r3
 80025ba:	4b5c      	ldr	r3, [pc, #368]	@ (800272c <ESP01ATDecode+0x4a0>)
 80025bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d109      	bne.n	80025d8 <ESP01ATDecode+0x34c>
                    esp01HState = 0;
 80025c4:	4b5c      	ldr	r3, [pc, #368]	@ (8002738 <ESP01ATDecode+0x4ac>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	701a      	strb	r2, [r3, #0]
                    esp01irRXAT--;
 80025ca:	4b5c      	ldr	r3, [pc, #368]	@ (800273c <ESP01ATDecode+0x4b0>)
 80025cc:	881b      	ldrh	r3, [r3, #0]
 80025ce:	3b01      	subs	r3, #1
 80025d0:	b29a      	uxth	r2, r3
 80025d2:	4b5a      	ldr	r3, [pc, #360]	@ (800273c <ESP01ATDecode+0x4b0>)
 80025d4:	801a      	strh	r2, [r3, #0]
                    break;
 80025d6:	e202      	b.n	80029de <ESP01ATDecode+0x752>
                }
            }
			indexResponseChar++;
 80025d8:	4b56      	ldr	r3, [pc, #344]	@ (8002734 <ESP01ATDecode+0x4a8>)
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	3301      	adds	r3, #1
 80025de:	b2da      	uxtb	r2, r3
 80025e0:	4b54      	ldr	r3, [pc, #336]	@ (8002734 <ESP01ATDecode+0x4a8>)
 80025e2:	701a      	strb	r2, [r3, #0]
			break;
 80025e4:	e1fb      	b.n	80029de <ESP01ATDecode+0x752>
		case 2:
			if(value == '\n'){
 80025e6:	797b      	ldrb	r3, [r7, #5]
 80025e8:	2b0a      	cmp	r3, #10
 80025ea:	f040 81d1 	bne.w	8002990 <ESP01ATDecode+0x704>
				esp01HState = 0;
 80025ee:	4b52      	ldr	r3, [pc, #328]	@ (8002738 <ESP01ATDecode+0x4ac>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	701a      	strb	r2, [r3, #0]
				switch(indexResponse){
 80025f4:	4b4c      	ldr	r3, [pc, #304]	@ (8002728 <ESP01ATDecode+0x49c>)
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	2b11      	cmp	r3, #17
 80025fa:	f200 81c9 	bhi.w	8002990 <ESP01ATDecode+0x704>
 80025fe:	a201      	add	r2, pc, #4	@ (adr r2, 8002604 <ESP01ATDecode+0x378>)
 8002600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002604:	080027d3 	.word	0x080027d3
 8002608:	080027d3 	.word	0x080027d3
 800260c:	0800264d 	.word	0x0800264d
 8002610:	08002669 	.word	0x08002669
 8002614:	08002697 	.word	0x08002697
 8002618:	080027d3 	.word	0x080027d3
 800261c:	080026cd 	.word	0x080026cd
 8002620:	080026cd 	.word	0x080026cd
 8002624:	08002701 	.word	0x08002701
 8002628:	0800270d 	.word	0x0800270d
 800262c:	08002759 	.word	0x08002759
 8002630:	08002795 	.word	0x08002795
 8002634:	08002991 	.word	0x08002991
 8002638:	080027a1 	.word	0x080027a1
 800263c:	08002991 	.word	0x08002991
 8002640:	080027b7 	.word	0x080027b7
 8002644:	080027d3 	.word	0x080027d3
 8002648:	080027d3 	.word	0x080027d3
				case 0://AT
				case 1:
					break;
				case 2://OK
					if(esp01ATSate == ESP01ATRESPONSE){
 800264c:	4b3c      	ldr	r3, [pc, #240]	@ (8002740 <ESP01ATDecode+0x4b4>)
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	2b02      	cmp	r3, #2
 8002652:	f040 80c0 	bne.w	80027d6 <ESP01ATDecode+0x54a>
						esp01TimeoutTask = 0;
 8002656:	4b3b      	ldr	r3, [pc, #236]	@ (8002744 <ESP01ATDecode+0x4b8>)
 8002658:	2200      	movs	r2, #0
 800265a:	601a      	str	r2, [r3, #0]
						esp01Flags.bit.ATRESPONSEOK = 1;
 800265c:	4a3a      	ldr	r2, [pc, #232]	@ (8002748 <ESP01ATDecode+0x4bc>)
 800265e:	7813      	ldrb	r3, [r2, #0]
 8002660:	f043 0320 	orr.w	r3, r3, #32
 8002664:	7013      	strb	r3, [r2, #0]
					}
					break;
 8002666:	e0b6      	b.n	80027d6 <ESP01ATDecode+0x54a>
				case 3://ERROR
					if(esp01Flags.bit.SENDINGDATA){
 8002668:	4b37      	ldr	r3, [pc, #220]	@ (8002748 <ESP01ATDecode+0x4bc>)
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	f003 0308 	and.w	r3, r3, #8
 8002670:	b2db      	uxtb	r3, r3
 8002672:	2b00      	cmp	r3, #0
 8002674:	f000 80b1 	beq.w	80027da <ESP01ATDecode+0x54e>
						esp01Flags.bit.SENDINGDATA = 0;
 8002678:	4a33      	ldr	r2, [pc, #204]	@ (8002748 <ESP01ATDecode+0x4bc>)
 800267a:	7813      	ldrb	r3, [r2, #0]
 800267c:	f023 0308 	bic.w	r3, r3, #8
 8002680:	7013      	strb	r3, [r2, #0]
						esp01Flags.bit.UDPTCPCONNECTED = 0;
 8002682:	4a31      	ldr	r2, [pc, #196]	@ (8002748 <ESP01ATDecode+0x4bc>)
 8002684:	7813      	ldrb	r3, [r2, #0]
 8002686:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800268a:	7013      	strb	r3, [r2, #0]
						esp01irTX = esp01iwTX;
 800268c:	4b2f      	ldr	r3, [pc, #188]	@ (800274c <ESP01ATDecode+0x4c0>)
 800268e:	881a      	ldrh	r2, [r3, #0]
 8002690:	4b2f      	ldr	r3, [pc, #188]	@ (8002750 <ESP01ATDecode+0x4c4>)
 8002692:	801a      	strh	r2, [r3, #0]
					}
					break;
 8002694:	e0a1      	b.n	80027da <ESP01ATDecode+0x54e>
				case 4://WIFI GOT IP
					esp01TimeoutTask = 0;
 8002696:	4b2b      	ldr	r3, [pc, #172]	@ (8002744 <ESP01ATDecode+0x4b8>)
 8002698:	2200      	movs	r2, #0
 800269a:	601a      	str	r2, [r3, #0]
					if(esp01ATSate == ESP01CWJAPRESPONSE)
 800269c:	4b28      	ldr	r3, [pc, #160]	@ (8002740 <ESP01ATDecode+0x4b4>)
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	2b06      	cmp	r3, #6
 80026a2:	d104      	bne.n	80026ae <ESP01ATDecode+0x422>
						esp01Flags.bit.ATRESPONSEOK = 1;
 80026a4:	4a28      	ldr	r2, [pc, #160]	@ (8002748 <ESP01ATDecode+0x4bc>)
 80026a6:	7813      	ldrb	r3, [r2, #0]
 80026a8:	f043 0320 	orr.w	r3, r3, #32
 80026ac:	7013      	strb	r3, [r2, #0]
					esp01Flags.bit.WIFICONNECTED = 1;
 80026ae:	4a26      	ldr	r2, [pc, #152]	@ (8002748 <ESP01ATDecode+0x4bc>)
 80026b0:	7813      	ldrb	r3, [r2, #0]
 80026b2:	f043 0302 	orr.w	r3, r3, #2
 80026b6:	7013      	strb	r3, [r2, #0]
					if(ESP01ChangeState != NULL)
 80026b8:	4b26      	ldr	r3, [pc, #152]	@ (8002754 <ESP01ATDecode+0x4c8>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	f000 808e 	beq.w	80027de <ESP01ATDecode+0x552>
						ESP01ChangeState(ESP01_WIFI_CONNECTED);
 80026c2:	4b24      	ldr	r3, [pc, #144]	@ (8002754 <ESP01ATDecode+0x4c8>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	2003      	movs	r0, #3
 80026c8:	4798      	blx	r3
					break;
 80026ca:	e088      	b.n	80027de <ESP01ATDecode+0x552>
				case 5://WIFI CONNECTED
					break;
				case 6://WIFI DISCONNECT
				case 7://WIFI DISCONNECTED
					esp01Flags.bit.UDPTCPCONNECTED = 0;
 80026cc:	4a1e      	ldr	r2, [pc, #120]	@ (8002748 <ESP01ATDecode+0x4bc>)
 80026ce:	7813      	ldrb	r3, [r2, #0]
 80026d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80026d4:	7013      	strb	r3, [r2, #0]
					esp01Flags.bit.WIFICONNECTED = 0;
 80026d6:	4a1c      	ldr	r2, [pc, #112]	@ (8002748 <ESP01ATDecode+0x4bc>)
 80026d8:	7813      	ldrb	r3, [r2, #0]
 80026da:	f023 0302 	bic.w	r3, r3, #2
 80026de:	7013      	strb	r3, [r2, #0]
					if(ESP01ChangeState != NULL)
 80026e0:	4b1c      	ldr	r3, [pc, #112]	@ (8002754 <ESP01ATDecode+0x4c8>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d003      	beq.n	80026f0 <ESP01ATDecode+0x464>
						ESP01ChangeState(ESP01_WIFI_DISCONNECTED);
 80026e8:	4b1a      	ldr	r3, [pc, #104]	@ (8002754 <ESP01ATDecode+0x4c8>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	2000      	movs	r0, #0
 80026ee:	4798      	blx	r3
					if(esp01ATSate == ESP01CWJAPRESPONSE)
 80026f0:	4b13      	ldr	r3, [pc, #76]	@ (8002740 <ESP01ATDecode+0x4b4>)
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	2b06      	cmp	r3, #6
 80026f6:	d074      	beq.n	80027e2 <ESP01ATDecode+0x556>
						break;
					esp01ATSate = ESP01ATHARDRSTSTOP;
 80026f8:	4b11      	ldr	r3, [pc, #68]	@ (8002740 <ESP01ATDecode+0x4b4>)
 80026fa:	220f      	movs	r2, #15
 80026fc:	701a      	strb	r2, [r3, #0]
					break;
 80026fe:	e075      	b.n	80027ec <ESP01ATDecode+0x560>
				case 8://DISCONNECTED
					esp01Flags.bit.UDPTCPCONNECTED = 0;
 8002700:	4a11      	ldr	r2, [pc, #68]	@ (8002748 <ESP01ATDecode+0x4bc>)
 8002702:	7813      	ldrb	r3, [r2, #0]
 8002704:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002708:	7013      	strb	r3, [r2, #0]
					break;
 800270a:	e06f      	b.n	80027ec <ESP01ATDecode+0x560>
				case 9://SEND OK
					esp01Flags.bit.SENDINGDATA = 0;
 800270c:	4a0e      	ldr	r2, [pc, #56]	@ (8002748 <ESP01ATDecode+0x4bc>)
 800270e:	7813      	ldrb	r3, [r2, #0]
 8002710:	f023 0308 	bic.w	r3, r3, #8
 8002714:	7013      	strb	r3, [r2, #0]
					if(ESP01ChangeState != NULL)
 8002716:	4b0f      	ldr	r3, [pc, #60]	@ (8002754 <ESP01ATDecode+0x4c8>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d063      	beq.n	80027e6 <ESP01ATDecode+0x55a>
						ESP01ChangeState(ESP01_SEND_OK);
 800271e:	4b0d      	ldr	r3, [pc, #52]	@ (8002754 <ESP01ATDecode+0x4c8>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	200a      	movs	r0, #10
 8002724:	4798      	blx	r3
					break;
 8002726:	e05e      	b.n	80027e6 <ESP01ATDecode+0x55a>
 8002728:	20000a74 	.word	0x20000a74
 800272c:	08013ec8 	.word	0x08013ec8
 8002730:	200008d8 	.word	0x200008d8
 8002734:	20000a75 	.word	0x20000a75
 8002738:	200008d6 	.word	0x200008d6
 800273c:	20000a5e 	.word	0x20000a5e
 8002740:	2000082e 	.word	0x2000082e
 8002744:	20000834 	.word	0x20000834
 8002748:	20000830 	.word	0x20000830
 800274c:	20000a62 	.word	0x20000a62
 8002750:	20000a60 	.word	0x20000a60
 8002754:	20000840 	.word	0x20000840
				case 10://CONNECT
					esp01TimeoutTask = 0;
 8002758:	4b91      	ldr	r3, [pc, #580]	@ (80029a0 <ESP01ATDecode+0x714>)
 800275a:	2200      	movs	r2, #0
 800275c:	601a      	str	r2, [r3, #0]
					esp01Flags.bit.ATRESPONSEOK = 1;
 800275e:	4a91      	ldr	r2, [pc, #580]	@ (80029a4 <ESP01ATDecode+0x718>)
 8002760:	7813      	ldrb	r3, [r2, #0]
 8002762:	f043 0320 	orr.w	r3, r3, #32
 8002766:	7013      	strb	r3, [r2, #0]
					esp01Flags.bit.UDPTCPCONNECTED = 1;
 8002768:	4a8e      	ldr	r2, [pc, #568]	@ (80029a4 <ESP01ATDecode+0x718>)
 800276a:	7813      	ldrb	r3, [r2, #0]
 800276c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002770:	7013      	strb	r3, [r2, #0]
					if(ESP01DbgStr != NULL)
 8002772:	4b8d      	ldr	r3, [pc, #564]	@ (80029a8 <ESP01ATDecode+0x71c>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d003      	beq.n	8002782 <ESP01ATDecode+0x4f6>
							ESP01DbgStr("+&UDPTCPCONNECTED=1\n");
 800277a:	4b8b      	ldr	r3, [pc, #556]	@ (80029a8 <ESP01ATDecode+0x71c>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	488b      	ldr	r0, [pc, #556]	@ (80029ac <ESP01ATDecode+0x720>)
 8002780:	4798      	blx	r3
					if(ESP01ChangeState != NULL)
 8002782:	4b8b      	ldr	r3, [pc, #556]	@ (80029b0 <ESP01ATDecode+0x724>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d02f      	beq.n	80027ea <ESP01ATDecode+0x55e>
						ESP01ChangeState(ESP01_UDPTCP_CONNECTED);
 800278a:	4b89      	ldr	r3, [pc, #548]	@ (80029b0 <ESP01ATDecode+0x724>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	2007      	movs	r0, #7
 8002790:	4798      	blx	r3
					break;
 8002792:	e02a      	b.n	80027ea <ESP01ATDecode+0x55e>
				case 11://CLOSED
					esp01Flags.bit.UDPTCPCONNECTED = 0;
 8002794:	4a83      	ldr	r2, [pc, #524]	@ (80029a4 <ESP01ATDecode+0x718>)
 8002796:	7813      	ldrb	r3, [r2, #0]
 8002798:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800279c:	7013      	strb	r3, [r2, #0]
					break;
 800279e:	e025      	b.n	80027ec <ESP01ATDecode+0x560>
				case 13://busy
					esp01Flags.bit.UDPTCPCONNECTED = 0;
 80027a0:	4a80      	ldr	r2, [pc, #512]	@ (80029a4 <ESP01ATDecode+0x718>)
 80027a2:	7813      	ldrb	r3, [r2, #0]
 80027a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80027a8:	7013      	strb	r3, [r2, #0]
					esp01Flags.bit.WIFICONNECTED = 0;
 80027aa:	4a7e      	ldr	r2, [pc, #504]	@ (80029a4 <ESP01ATDecode+0x718>)
 80027ac:	7813      	ldrb	r3, [r2, #0]
 80027ae:	f023 0302 	bic.w	r3, r3, #2
 80027b2:	7013      	strb	r3, [r2, #0]
					break;
 80027b4:	e01a      	b.n	80027ec <ESP01ATDecode+0x560>
				case 15://ready
					esp01Flags.bit.UDPTCPCONNECTED = 0;
 80027b6:	4a7b      	ldr	r2, [pc, #492]	@ (80029a4 <ESP01ATDecode+0x718>)
 80027b8:	7813      	ldrb	r3, [r2, #0]
 80027ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80027be:	7013      	strb	r3, [r2, #0]
					esp01Flags.bit.WIFICONNECTED = 0;
 80027c0:	4a78      	ldr	r2, [pc, #480]	@ (80029a4 <ESP01ATDecode+0x718>)
 80027c2:	7813      	ldrb	r3, [r2, #0]
 80027c4:	f023 0302 	bic.w	r3, r3, #2
 80027c8:	7013      	strb	r3, [r2, #0]
					esp01ATSate = ESP01ATHARDRSTSTOP;
 80027ca:	4b7a      	ldr	r3, [pc, #488]	@ (80029b4 <ESP01ATDecode+0x728>)
 80027cc:	220f      	movs	r2, #15
 80027ce:	701a      	strb	r2, [r3, #0]
					break;
 80027d0:	e00c      	b.n	80027ec <ESP01ATDecode+0x560>
					break;
 80027d2:	bf00      	nop
 80027d4:	e0dc      	b.n	8002990 <ESP01ATDecode+0x704>
					break;
 80027d6:	bf00      	nop
 80027d8:	e0da      	b.n	8002990 <ESP01ATDecode+0x704>
					break;
 80027da:	bf00      	nop
 80027dc:	e0d8      	b.n	8002990 <ESP01ATDecode+0x704>
					break;
 80027de:	bf00      	nop
 80027e0:	e0d6      	b.n	8002990 <ESP01ATDecode+0x704>
						break;
 80027e2:	bf00      	nop
 80027e4:	e0d4      	b.n	8002990 <ESP01ATDecode+0x704>
					break;
 80027e6:	bf00      	nop
 80027e8:	e0d2      	b.n	8002990 <ESP01ATDecode+0x704>
					break;
 80027ea:	bf00      	nop
					break;
				case 17://busy s
					break;
				}
			}
			break;
 80027ec:	e0d0      	b.n	8002990 <ESP01ATDecode+0x704>
		case 5://CIFR,STAIP
			if(value == ','){
 80027ee:	797b      	ldrb	r3, [r7, #5]
 80027f0:	2b2c      	cmp	r3, #44	@ 0x2c
 80027f2:	d10c      	bne.n	800280e <ESP01ATDecode+0x582>
				esp01HState = 6;
 80027f4:	4b70      	ldr	r3, [pc, #448]	@ (80029b8 <ESP01ATDecode+0x72c>)
 80027f6:	2206      	movs	r2, #6
 80027f8:	701a      	strb	r2, [r3, #0]
				if(ESP01DbgStr != NULL)
 80027fa:	4b6b      	ldr	r3, [pc, #428]	@ (80029a8 <ESP01ATDecode+0x71c>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	f000 80c8 	beq.w	8002994 <ESP01ATDecode+0x708>
					ESP01DbgStr("+&DBGRESPONSE CIFSR\n");
 8002804:	4b68      	ldr	r3, [pc, #416]	@ (80029a8 <ESP01ATDecode+0x71c>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	486c      	ldr	r0, [pc, #432]	@ (80029bc <ESP01ATDecode+0x730>)
 800280a:	4798      	blx	r3
				esp01HState = 0;
				esp01irRXAT--;
				if(ESP01DbgStr != NULL)
					ESP01DbgStr("+&DBGERROR CIFSR 5\n");
			}
			break;
 800280c:	e0c2      	b.n	8002994 <ESP01ATDecode+0x708>
				esp01HState = 0;
 800280e:	4b6a      	ldr	r3, [pc, #424]	@ (80029b8 <ESP01ATDecode+0x72c>)
 8002810:	2200      	movs	r2, #0
 8002812:	701a      	strb	r2, [r3, #0]
				esp01irRXAT--;
 8002814:	4b6a      	ldr	r3, [pc, #424]	@ (80029c0 <ESP01ATDecode+0x734>)
 8002816:	881b      	ldrh	r3, [r3, #0]
 8002818:	3b01      	subs	r3, #1
 800281a:	b29a      	uxth	r2, r3
 800281c:	4b68      	ldr	r3, [pc, #416]	@ (80029c0 <ESP01ATDecode+0x734>)
 800281e:	801a      	strh	r2, [r3, #0]
				if(ESP01DbgStr != NULL)
 8002820:	4b61      	ldr	r3, [pc, #388]	@ (80029a8 <ESP01ATDecode+0x71c>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2b00      	cmp	r3, #0
 8002826:	f000 80b5 	beq.w	8002994 <ESP01ATDecode+0x708>
					ESP01DbgStr("+&DBGERROR CIFSR 5\n");
 800282a:	4b5f      	ldr	r3, [pc, #380]	@ (80029a8 <ESP01ATDecode+0x71c>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4865      	ldr	r0, [pc, #404]	@ (80029c4 <ESP01ATDecode+0x738>)
 8002830:	4798      	blx	r3
			break;
 8002832:	e0af      	b.n	8002994 <ESP01ATDecode+0x708>
		case 6:
			if(value == '\"'){
 8002834:	797b      	ldrb	r3, [r7, #5]
 8002836:	2b22      	cmp	r3, #34	@ 0x22
 8002838:	f040 80ae 	bne.w	8002998 <ESP01ATDecode+0x70c>
				esp01HState = 7;
 800283c:	4b5e      	ldr	r3, [pc, #376]	@ (80029b8 <ESP01ATDecode+0x72c>)
 800283e:	2207      	movs	r2, #7
 8002840:	701a      	strb	r2, [r3, #0]
				esp01nBytes = 0;
 8002842:	4b61      	ldr	r3, [pc, #388]	@ (80029c8 <ESP01ATDecode+0x73c>)
 8002844:	2200      	movs	r2, #0
 8002846:	801a      	strh	r2, [r3, #0]
			}
			break;
 8002848:	e0a6      	b.n	8002998 <ESP01ATDecode+0x70c>
		case 7:
			if(value == '\"' || esp01nBytes==16)
 800284a:	797b      	ldrb	r3, [r7, #5]
 800284c:	2b22      	cmp	r3, #34	@ 0x22
 800284e:	d003      	beq.n	8002858 <ESP01ATDecode+0x5cc>
 8002850:	4b5d      	ldr	r3, [pc, #372]	@ (80029c8 <ESP01ATDecode+0x73c>)
 8002852:	881b      	ldrh	r3, [r3, #0]
 8002854:	2b10      	cmp	r3, #16
 8002856:	d103      	bne.n	8002860 <ESP01ATDecode+0x5d4>
				esp01HState = 8;
 8002858:	4b57      	ldr	r3, [pc, #348]	@ (80029b8 <ESP01ATDecode+0x72c>)
 800285a:	2208      	movs	r2, #8
 800285c:	701a      	strb	r2, [r3, #0]
			else
				esp01LocalIP[esp01nBytes++] = value;
			break;
 800285e:	e0be      	b.n	80029de <ESP01ATDecode+0x752>
				esp01LocalIP[esp01nBytes++] = value;
 8002860:	4b59      	ldr	r3, [pc, #356]	@ (80029c8 <ESP01ATDecode+0x73c>)
 8002862:	881b      	ldrh	r3, [r3, #0]
 8002864:	1c5a      	adds	r2, r3, #1
 8002866:	b291      	uxth	r1, r2
 8002868:	4a57      	ldr	r2, [pc, #348]	@ (80029c8 <ESP01ATDecode+0x73c>)
 800286a:	8011      	strh	r1, [r2, #0]
 800286c:	4619      	mov	r1, r3
 800286e:	4a57      	ldr	r2, [pc, #348]	@ (80029cc <ESP01ATDecode+0x740>)
 8002870:	797b      	ldrb	r3, [r7, #5]
 8002872:	5453      	strb	r3, [r2, r1]
			break;
 8002874:	e0b3      	b.n	80029de <ESP01ATDecode+0x752>
		case 8:
			if(value == '\n'){
 8002876:	797b      	ldrb	r3, [r7, #5]
 8002878:	2b0a      	cmp	r3, #10
 800287a:	f040 808f 	bne.w	800299c <ESP01ATDecode+0x710>
				esp01HState = 0;
 800287e:	4b4e      	ldr	r3, [pc, #312]	@ (80029b8 <ESP01ATDecode+0x72c>)
 8002880:	2200      	movs	r2, #0
 8002882:	701a      	strb	r2, [r3, #0]
				if(esp01nBytes < 16){
 8002884:	4b50      	ldr	r3, [pc, #320]	@ (80029c8 <ESP01ATDecode+0x73c>)
 8002886:	881b      	ldrh	r3, [r3, #0]
 8002888:	2b0f      	cmp	r3, #15
 800288a:	d80e      	bhi.n	80028aa <ESP01ATDecode+0x61e>
					esp01LocalIP[esp01nBytes] = '\0';
 800288c:	4b4e      	ldr	r3, [pc, #312]	@ (80029c8 <ESP01ATDecode+0x73c>)
 800288e:	881b      	ldrh	r3, [r3, #0]
 8002890:	461a      	mov	r2, r3
 8002892:	4b4e      	ldr	r3, [pc, #312]	@ (80029cc <ESP01ATDecode+0x740>)
 8002894:	2100      	movs	r1, #0
 8002896:	5499      	strb	r1, [r3, r2]
					esp01Flags.bit.ATRESPONSEOK = 1;
 8002898:	4a42      	ldr	r2, [pc, #264]	@ (80029a4 <ESP01ATDecode+0x718>)
 800289a:	7813      	ldrb	r3, [r2, #0]
 800289c:	f043 0320 	orr.w	r3, r3, #32
 80028a0:	7013      	strb	r3, [r2, #0]
					esp01TimeoutTask = 0;
 80028a2:	4b3f      	ldr	r3, [pc, #252]	@ (80029a0 <ESP01ATDecode+0x714>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	601a      	str	r2, [r3, #0]
 80028a8:	e002      	b.n	80028b0 <ESP01ATDecode+0x624>
				}
				else
					esp01LocalIP[0] = '\0';
 80028aa:	4b48      	ldr	r3, [pc, #288]	@ (80029cc <ESP01ATDecode+0x740>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	701a      	strb	r2, [r3, #0]
				if(ESP01ChangeState != NULL)
 80028b0:	4b3f      	ldr	r3, [pc, #252]	@ (80029b0 <ESP01ATDecode+0x724>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d071      	beq.n	800299c <ESP01ATDecode+0x710>
					ESP01ChangeState(ESP01_WIFI_NEW_IP);
 80028b8:	4b3d      	ldr	r3, [pc, #244]	@ (80029b0 <ESP01ATDecode+0x724>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2004      	movs	r0, #4
 80028be:	4798      	blx	r3
			}
			break;
 80028c0:	e06c      	b.n	800299c <ESP01ATDecode+0x710>
		case 10://IPD
			if(value == ','){
 80028c2:	797b      	ldrb	r3, [r7, #5]
 80028c4:	2b2c      	cmp	r3, #44	@ 0x2c
 80028c6:	d106      	bne.n	80028d6 <ESP01ATDecode+0x64a>
				esp01HState = 11;
 80028c8:	4b3b      	ldr	r3, [pc, #236]	@ (80029b8 <ESP01ATDecode+0x72c>)
 80028ca:	220b      	movs	r2, #11
 80028cc:	701a      	strb	r2, [r3, #0]
				esp01nBytes = 0;
 80028ce:	4b3e      	ldr	r3, [pc, #248]	@ (80029c8 <ESP01ATDecode+0x73c>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	801a      	strh	r2, [r3, #0]
			}
			else{
				esp01HState = 0;
				esp01irRXAT--;
			}
			break;
 80028d4:	e083      	b.n	80029de <ESP01ATDecode+0x752>
				esp01HState = 0;
 80028d6:	4b38      	ldr	r3, [pc, #224]	@ (80029b8 <ESP01ATDecode+0x72c>)
 80028d8:	2200      	movs	r2, #0
 80028da:	701a      	strb	r2, [r3, #0]
				esp01irRXAT--;
 80028dc:	4b38      	ldr	r3, [pc, #224]	@ (80029c0 <ESP01ATDecode+0x734>)
 80028de:	881b      	ldrh	r3, [r3, #0]
 80028e0:	3b01      	subs	r3, #1
 80028e2:	b29a      	uxth	r2, r3
 80028e4:	4b36      	ldr	r3, [pc, #216]	@ (80029c0 <ESP01ATDecode+0x734>)
 80028e6:	801a      	strh	r2, [r3, #0]
			break;
 80028e8:	e079      	b.n	80029de <ESP01ATDecode+0x752>
		case 11:
			if(value == ':')
 80028ea:	797b      	ldrb	r3, [r7, #5]
 80028ec:	2b3a      	cmp	r3, #58	@ 0x3a
 80028ee:	d103      	bne.n	80028f8 <ESP01ATDecode+0x66c>
				esp01HState = 12;
 80028f0:	4b31      	ldr	r3, [pc, #196]	@ (80029b8 <ESP01ATDecode+0x72c>)
 80028f2:	220c      	movs	r2, #12
 80028f4:	701a      	strb	r2, [r3, #0]
				else{
					esp01nBytes *= 10;
					esp01nBytes += (value - '0');
				}
			}
			break;
 80028f6:	e072      	b.n	80029de <ESP01ATDecode+0x752>
				if(value<'0' || value>'9'){
 80028f8:	797b      	ldrb	r3, [r7, #5]
 80028fa:	2b2f      	cmp	r3, #47	@ 0x2f
 80028fc:	d902      	bls.n	8002904 <ESP01ATDecode+0x678>
 80028fe:	797b      	ldrb	r3, [r7, #5]
 8002900:	2b39      	cmp	r3, #57	@ 0x39
 8002902:	d909      	bls.n	8002918 <ESP01ATDecode+0x68c>
					esp01HState = 0;
 8002904:	4b2c      	ldr	r3, [pc, #176]	@ (80029b8 <ESP01ATDecode+0x72c>)
 8002906:	2200      	movs	r2, #0
 8002908:	701a      	strb	r2, [r3, #0]
					esp01irRXAT--;
 800290a:	4b2d      	ldr	r3, [pc, #180]	@ (80029c0 <ESP01ATDecode+0x734>)
 800290c:	881b      	ldrh	r3, [r3, #0]
 800290e:	3b01      	subs	r3, #1
 8002910:	b29a      	uxth	r2, r3
 8002912:	4b2b      	ldr	r3, [pc, #172]	@ (80029c0 <ESP01ATDecode+0x734>)
 8002914:	801a      	strh	r2, [r3, #0]
			break;
 8002916:	e062      	b.n	80029de <ESP01ATDecode+0x752>
					esp01nBytes *= 10;
 8002918:	4b2b      	ldr	r3, [pc, #172]	@ (80029c8 <ESP01ATDecode+0x73c>)
 800291a:	881b      	ldrh	r3, [r3, #0]
 800291c:	461a      	mov	r2, r3
 800291e:	0092      	lsls	r2, r2, #2
 8002920:	4413      	add	r3, r2
 8002922:	005b      	lsls	r3, r3, #1
 8002924:	b29a      	uxth	r2, r3
 8002926:	4b28      	ldr	r3, [pc, #160]	@ (80029c8 <ESP01ATDecode+0x73c>)
 8002928:	801a      	strh	r2, [r3, #0]
					esp01nBytes += (value - '0');
 800292a:	797b      	ldrb	r3, [r7, #5]
 800292c:	b29a      	uxth	r2, r3
 800292e:	4b26      	ldr	r3, [pc, #152]	@ (80029c8 <ESP01ATDecode+0x73c>)
 8002930:	881b      	ldrh	r3, [r3, #0]
 8002932:	4413      	add	r3, r2
 8002934:	b29b      	uxth	r3, r3
 8002936:	3b30      	subs	r3, #48	@ 0x30
 8002938:	b29a      	uxth	r2, r3
 800293a:	4b23      	ldr	r3, [pc, #140]	@ (80029c8 <ESP01ATDecode+0x73c>)
 800293c:	801a      	strh	r2, [r3, #0]
			break;
 800293e:	e04e      	b.n	80029de <ESP01ATDecode+0x752>
		case 12:
			if(esp01Handle.WriteByteToBufRX != NULL)
 8002940:	4b23      	ldr	r3, [pc, #140]	@ (80029d0 <ESP01ATDecode+0x744>)
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d004      	beq.n	8002952 <ESP01ATDecode+0x6c6>
				esp01Handle.WriteByteToBufRX(value);
 8002948:	4b21      	ldr	r3, [pc, #132]	@ (80029d0 <ESP01ATDecode+0x744>)
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	797a      	ldrb	r2, [r7, #5]
 800294e:	4610      	mov	r0, r2
 8002950:	4798      	blx	r3
			esp01nBytes--;
 8002952:	4b1d      	ldr	r3, [pc, #116]	@ (80029c8 <ESP01ATDecode+0x73c>)
 8002954:	881b      	ldrh	r3, [r3, #0]
 8002956:	3b01      	subs	r3, #1
 8002958:	b29a      	uxth	r2, r3
 800295a:	4b1b      	ldr	r3, [pc, #108]	@ (80029c8 <ESP01ATDecode+0x73c>)
 800295c:	801a      	strh	r2, [r3, #0]
			if(!esp01nBytes){
 800295e:	4b1a      	ldr	r3, [pc, #104]	@ (80029c8 <ESP01ATDecode+0x73c>)
 8002960:	881b      	ldrh	r3, [r3, #0]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d13a      	bne.n	80029dc <ESP01ATDecode+0x750>
				esp01HState = 0;
 8002966:	4b14      	ldr	r3, [pc, #80]	@ (80029b8 <ESP01ATDecode+0x72c>)
 8002968:	2200      	movs	r2, #0
 800296a:	701a      	strb	r2, [r3, #0]
				if(ESP01DbgStr != NULL)
 800296c:	4b0e      	ldr	r3, [pc, #56]	@ (80029a8 <ESP01ATDecode+0x71c>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d033      	beq.n	80029dc <ESP01ATDecode+0x750>
					ESP01DbgStr("+&DBGRESPONSE IPD\n");
 8002974:	4b0c      	ldr	r3, [pc, #48]	@ (80029a8 <ESP01ATDecode+0x71c>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4816      	ldr	r0, [pc, #88]	@ (80029d4 <ESP01ATDecode+0x748>)
 800297a:	4798      	blx	r3
			}
			break;
 800297c:	e02e      	b.n	80029dc <ESP01ATDecode+0x750>
		default:
			esp01HState = 0;
 800297e:	4b0e      	ldr	r3, [pc, #56]	@ (80029b8 <ESP01ATDecode+0x72c>)
 8002980:	2200      	movs	r2, #0
 8002982:	701a      	strb	r2, [r3, #0]
			esp01TimeoutDataRx = 0;
 8002984:	4b14      	ldr	r3, [pc, #80]	@ (80029d8 <ESP01ATDecode+0x74c>)
 8002986:	2200      	movs	r2, #0
 8002988:	601a      	str	r2, [r3, #0]
 800298a:	e028      	b.n	80029de <ESP01ATDecode+0x752>
			break;
 800298c:	bf00      	nop
 800298e:	e026      	b.n	80029de <ESP01ATDecode+0x752>
			break;
 8002990:	bf00      	nop
 8002992:	e024      	b.n	80029de <ESP01ATDecode+0x752>
			break;
 8002994:	bf00      	nop
 8002996:	e022      	b.n	80029de <ESP01ATDecode+0x752>
			break;
 8002998:	bf00      	nop
 800299a:	e020      	b.n	80029de <ESP01ATDecode+0x752>
			break;
 800299c:	bf00      	nop
 800299e:	e01e      	b.n	80029de <ESP01ATDecode+0x752>
 80029a0:	20000834 	.word	0x20000834
 80029a4:	20000830 	.word	0x20000830
 80029a8:	20000844 	.word	0x20000844
 80029ac:	0801289c 	.word	0x0801289c
 80029b0:	20000840 	.word	0x20000840
 80029b4:	2000082e 	.word	0x2000082e
 80029b8:	200008d6 	.word	0x200008d6
 80029bc:	080128b4 	.word	0x080128b4
 80029c0:	20000a5e 	.word	0x20000a5e
 80029c4:	080128cc 	.word	0x080128cc
 80029c8:	200008d8 	.word	0x200008d8
 80029cc:	200008c0 	.word	0x200008c0
 80029d0:	20000a68 	.word	0x20000a68
 80029d4:	080128e0 	.word	0x080128e0
 80029d8:	20000838 	.word	0x20000838
			break;
 80029dc:	bf00      	nop
		}

		esp01irRXAT++;
 80029de:	4b0b      	ldr	r3, [pc, #44]	@ (8002a0c <ESP01ATDecode+0x780>)
 80029e0:	881b      	ldrh	r3, [r3, #0]
 80029e2:	3301      	adds	r3, #1
 80029e4:	b29a      	uxth	r2, r3
 80029e6:	4b09      	ldr	r3, [pc, #36]	@ (8002a0c <ESP01ATDecode+0x780>)
 80029e8:	801a      	strh	r2, [r3, #0]
		if(esp01irRXAT == ESP01RXBUFAT)
 80029ea:	4b08      	ldr	r3, [pc, #32]	@ (8002a0c <ESP01ATDecode+0x780>)
 80029ec:	881b      	ldrh	r3, [r3, #0]
 80029ee:	2b80      	cmp	r3, #128	@ 0x80
 80029f0:	d102      	bne.n	80029f8 <ESP01ATDecode+0x76c>
			esp01irRXAT = 0;
 80029f2:	4b06      	ldr	r3, [pc, #24]	@ (8002a0c <ESP01ATDecode+0x780>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	801a      	strh	r2, [r3, #0]
	while(esp01irRXAT != i){
 80029f8:	4b04      	ldr	r3, [pc, #16]	@ (8002a0c <ESP01ATDecode+0x780>)
 80029fa:	881b      	ldrh	r3, [r3, #0]
 80029fc:	88fa      	ldrh	r2, [r7, #6]
 80029fe:	429a      	cmp	r2, r3
 8002a00:	f47f ac5f 	bne.w	80022c2 <ESP01ATDecode+0x36>
	}
}
 8002a04:	3708      	adds	r7, #8
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	20000a5e 	.word	0x20000a5e

08002a10 <ESP01DOConnection>:

static void ESP01DOConnection(){
 8002a10:	b580      	push	{r7, lr}
 8002a12:	af00      	add	r7, sp, #0
	esp01TimeoutTask = 100;
 8002a14:	4b9c      	ldr	r3, [pc, #624]	@ (8002c88 <ESP01DOConnection+0x278>)
 8002a16:	2264      	movs	r2, #100	@ 0x64
 8002a18:	601a      	str	r2, [r3, #0]
	switch(esp01ATSate){
 8002a1a:	4b9c      	ldr	r3, [pc, #624]	@ (8002c8c <ESP01DOConnection+0x27c>)
 8002a1c:	781b      	ldrb	r3, [r3, #0]
 8002a1e:	2b0f      	cmp	r3, #15
 8002a20:	f200 81e6 	bhi.w	8002df0 <ESP01DOConnection+0x3e0>
 8002a24:	a201      	add	r2, pc, #4	@ (adr r2, 8002a2c <ESP01DOConnection+0x1c>)
 8002a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a2a:	bf00      	nop
 8002a2c:	08002a6d 	.word	0x08002a6d
 8002a30:	08002acb 	.word	0x08002acb
 8002a34:	08002b1d 	.word	0x08002b1d
 8002a38:	08002b3b 	.word	0x08002b3b
 8002a3c:	08002b59 	.word	0x08002b59
 8002a40:	08002b77 	.word	0x08002b77
 8002a44:	08002bfd 	.word	0x08002bfd
 8002a48:	08002c21 	.word	0x08002c21
 8002a4c:	08002c4f 	.word	0x08002c4f
 8002a50:	08002cdd 	.word	0x08002cdd
 8002a54:	08002d05 	.word	0x08002d05
 8002a58:	08002d99 	.word	0x08002d99
 8002a5c:	08002db7 	.word	0x08002db7
 8002a60:	08002a75 	.word	0x08002a75
 8002a64:	08002a95 	.word	0x08002a95
 8002a68:	08002abd 	.word	0x08002abd
	case ESP01ATIDLE:
		esp01TimeoutTask = 0;
 8002a6c:	4b86      	ldr	r3, [pc, #536]	@ (8002c88 <ESP01DOConnection+0x278>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	601a      	str	r2, [r3, #0]
		break;
 8002a72:	e1bd      	b.n	8002df0 <ESP01DOConnection+0x3e0>
	case ESP01ATHARDRST0:
		esp01Handle.DoCHPD(0);
 8002a74:	4b86      	ldr	r3, [pc, #536]	@ (8002c90 <ESP01DOConnection+0x280>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	2000      	movs	r0, #0
 8002a7a:	4798      	blx	r3
		if(ESP01DbgStr != NULL)
 8002a7c:	4b85      	ldr	r3, [pc, #532]	@ (8002c94 <ESP01DOConnection+0x284>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d003      	beq.n	8002a8c <ESP01DOConnection+0x7c>
			ESP01DbgStr("+&DBGESP01HARDRESET0\n");
 8002a84:	4b83      	ldr	r3, [pc, #524]	@ (8002c94 <ESP01DOConnection+0x284>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4883      	ldr	r0, [pc, #524]	@ (8002c98 <ESP01DOConnection+0x288>)
 8002a8a:	4798      	blx	r3
		esp01ATSate = ESP01ATHARDRST1;
 8002a8c:	4b7f      	ldr	r3, [pc, #508]	@ (8002c8c <ESP01DOConnection+0x27c>)
 8002a8e:	220e      	movs	r2, #14
 8002a90:	701a      	strb	r2, [r3, #0]
		break;
 8002a92:	e1ad      	b.n	8002df0 <ESP01DOConnection+0x3e0>
	case ESP01ATHARDRST1:
		esp01Handle.DoCHPD(1);
 8002a94:	4b7e      	ldr	r3, [pc, #504]	@ (8002c90 <ESP01DOConnection+0x280>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2001      	movs	r0, #1
 8002a9a:	4798      	blx	r3
		if(ESP01DbgStr != NULL)
 8002a9c:	4b7d      	ldr	r3, [pc, #500]	@ (8002c94 <ESP01DOConnection+0x284>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d003      	beq.n	8002aac <ESP01DOConnection+0x9c>
			ESP01DbgStr("+&DBGESP01HARDRESET1\n");
 8002aa4:	4b7b      	ldr	r3, [pc, #492]	@ (8002c94 <ESP01DOConnection+0x284>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	487c      	ldr	r0, [pc, #496]	@ (8002c9c <ESP01DOConnection+0x28c>)
 8002aaa:	4798      	blx	r3
		esp01ATSate = ESP01ATHARDRSTSTOP;
 8002aac:	4b77      	ldr	r3, [pc, #476]	@ (8002c8c <ESP01DOConnection+0x27c>)
 8002aae:	220f      	movs	r2, #15
 8002ab0:	701a      	strb	r2, [r3, #0]
		esp01TimeoutTask = 500;
 8002ab2:	4b75      	ldr	r3, [pc, #468]	@ (8002c88 <ESP01DOConnection+0x278>)
 8002ab4:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002ab8:	601a      	str	r2, [r3, #0]
		break;
 8002aba:	e199      	b.n	8002df0 <ESP01DOConnection+0x3e0>
	case ESP01ATHARDRSTSTOP:
		esp01ATSate = ESP01ATAT;
 8002abc:	4b73      	ldr	r3, [pc, #460]	@ (8002c8c <ESP01DOConnection+0x27c>)
 8002abe:	2201      	movs	r2, #1
 8002ac0:	701a      	strb	r2, [r3, #0]
		esp01TriesAT = 0;
 8002ac2:	4b77      	ldr	r3, [pc, #476]	@ (8002ca0 <ESP01DOConnection+0x290>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	701a      	strb	r2, [r3, #0]
		break;
 8002ac8:	e192      	b.n	8002df0 <ESP01DOConnection+0x3e0>
	case ESP01ATAT:
		if(esp01TriesAT){
 8002aca:	4b75      	ldr	r3, [pc, #468]	@ (8002ca0 <ESP01DOConnection+0x290>)
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d00d      	beq.n	8002aee <ESP01DOConnection+0xde>
			esp01TriesAT--;
 8002ad2:	4b73      	ldr	r3, [pc, #460]	@ (8002ca0 <ESP01DOConnection+0x290>)
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	3b01      	subs	r3, #1
 8002ad8:	b2da      	uxtb	r2, r3
 8002ada:	4b71      	ldr	r3, [pc, #452]	@ (8002ca0 <ESP01DOConnection+0x290>)
 8002adc:	701a      	strb	r2, [r3, #0]
			if(!esp01TriesAT){
 8002ade:	4b70      	ldr	r3, [pc, #448]	@ (8002ca0 <ESP01DOConnection+0x290>)
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d106      	bne.n	8002af4 <ESP01DOConnection+0xe4>
				esp01ATSate = ESP01ATHARDRST0;
 8002ae6:	4b69      	ldr	r3, [pc, #420]	@ (8002c8c <ESP01DOConnection+0x27c>)
 8002ae8:	220d      	movs	r2, #13
 8002aea:	701a      	strb	r2, [r3, #0]
				break;
 8002aec:	e180      	b.n	8002df0 <ESP01DOConnection+0x3e0>
			}
		}
		else
			esp01TriesAT = 4;
 8002aee:	4b6c      	ldr	r3, [pc, #432]	@ (8002ca0 <ESP01DOConnection+0x290>)
 8002af0:	2204      	movs	r2, #4
 8002af2:	701a      	strb	r2, [r3, #0]

		esp01Flags.bit.ATRESPONSEOK = 0;
 8002af4:	4a6b      	ldr	r2, [pc, #428]	@ (8002ca4 <ESP01DOConnection+0x294>)
 8002af6:	7813      	ldrb	r3, [r2, #0]
 8002af8:	f023 0320 	bic.w	r3, r3, #32
 8002afc:	7013      	strb	r3, [r2, #0]
		ESP01StrToBufTX(ATAT);
 8002afe:	486a      	ldr	r0, [pc, #424]	@ (8002ca8 <ESP01DOConnection+0x298>)
 8002b00:	f000 fa0c 	bl	8002f1c <ESP01StrToBufTX>
		if(ESP01DbgStr != NULL)
 8002b04:	4b63      	ldr	r3, [pc, #396]	@ (8002c94 <ESP01DOConnection+0x284>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d003      	beq.n	8002b14 <ESP01DOConnection+0x104>
			ESP01DbgStr("+&DBGESP01AT\n");
 8002b0c:	4b61      	ldr	r3, [pc, #388]	@ (8002c94 <ESP01DOConnection+0x284>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4866      	ldr	r0, [pc, #408]	@ (8002cac <ESP01DOConnection+0x29c>)
 8002b12:	4798      	blx	r3
		esp01ATSate = ESP01ATRESPONSE;
 8002b14:	4b5d      	ldr	r3, [pc, #372]	@ (8002c8c <ESP01DOConnection+0x27c>)
 8002b16:	2202      	movs	r2, #2
 8002b18:	701a      	strb	r2, [r3, #0]
		break;
 8002b1a:	e169      	b.n	8002df0 <ESP01DOConnection+0x3e0>
	case ESP01ATRESPONSE:
		if(esp01Flags.bit.ATRESPONSEOK)
 8002b1c:	4b61      	ldr	r3, [pc, #388]	@ (8002ca4 <ESP01DOConnection+0x294>)
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	f003 0320 	and.w	r3, r3, #32
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d003      	beq.n	8002b32 <ESP01DOConnection+0x122>
			esp01ATSate = ESP01ATCWMODE;
 8002b2a:	4b58      	ldr	r3, [pc, #352]	@ (8002c8c <ESP01DOConnection+0x27c>)
 8002b2c:	2203      	movs	r2, #3
 8002b2e:	701a      	strb	r2, [r3, #0]
		else
			esp01ATSate = ESP01ATAT;
		break;
 8002b30:	e15e      	b.n	8002df0 <ESP01DOConnection+0x3e0>
			esp01ATSate = ESP01ATAT;
 8002b32:	4b56      	ldr	r3, [pc, #344]	@ (8002c8c <ESP01DOConnection+0x27c>)
 8002b34:	2201      	movs	r2, #1
 8002b36:	701a      	strb	r2, [r3, #0]
		break;
 8002b38:	e15a      	b.n	8002df0 <ESP01DOConnection+0x3e0>
	case ESP01ATCWMODE:
		ESP01StrToBufTX(ATCWMODE);
 8002b3a:	485d      	ldr	r0, [pc, #372]	@ (8002cb0 <ESP01DOConnection+0x2a0>)
 8002b3c:	f000 f9ee 	bl	8002f1c <ESP01StrToBufTX>
		if(ESP01DbgStr != NULL)
 8002b40:	4b54      	ldr	r3, [pc, #336]	@ (8002c94 <ESP01DOConnection+0x284>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d003      	beq.n	8002b50 <ESP01DOConnection+0x140>
			ESP01DbgStr("+&DBGESP01ATCWMODE\n");
 8002b48:	4b52      	ldr	r3, [pc, #328]	@ (8002c94 <ESP01DOConnection+0x284>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4859      	ldr	r0, [pc, #356]	@ (8002cb4 <ESP01DOConnection+0x2a4>)
 8002b4e:	4798      	blx	r3
		esp01ATSate = ESP01ATCIPMUX;
 8002b50:	4b4e      	ldr	r3, [pc, #312]	@ (8002c8c <ESP01DOConnection+0x27c>)
 8002b52:	2204      	movs	r2, #4
 8002b54:	701a      	strb	r2, [r3, #0]
		break;
 8002b56:	e14b      	b.n	8002df0 <ESP01DOConnection+0x3e0>
	case ESP01ATCIPMUX:
		ESP01StrToBufTX(ATCIPMUX);
 8002b58:	4857      	ldr	r0, [pc, #348]	@ (8002cb8 <ESP01DOConnection+0x2a8>)
 8002b5a:	f000 f9df 	bl	8002f1c <ESP01StrToBufTX>
		if(ESP01DbgStr != NULL)
 8002b5e:	4b4d      	ldr	r3, [pc, #308]	@ (8002c94 <ESP01DOConnection+0x284>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d003      	beq.n	8002b6e <ESP01DOConnection+0x15e>
			ESP01DbgStr("+&DBGESP01ATCIPMUX\n");
 8002b66:	4b4b      	ldr	r3, [pc, #300]	@ (8002c94 <ESP01DOConnection+0x284>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4854      	ldr	r0, [pc, #336]	@ (8002cbc <ESP01DOConnection+0x2ac>)
 8002b6c:	4798      	blx	r3
		esp01ATSate = ESP01ATCWJAP;
 8002b6e:	4b47      	ldr	r3, [pc, #284]	@ (8002c8c <ESP01DOConnection+0x27c>)
 8002b70:	2205      	movs	r2, #5
 8002b72:	701a      	strb	r2, [r3, #0]
		break;
 8002b74:	e13c      	b.n	8002df0 <ESP01DOConnection+0x3e0>
	case ESP01ATCWJAP:
		if(esp01Flags.bit.WIFICONNECTED){
 8002b76:	4b4b      	ldr	r3, [pc, #300]	@ (8002ca4 <ESP01DOConnection+0x294>)
 8002b78:	781b      	ldrb	r3, [r3, #0]
 8002b7a:	f003 0302 	and.w	r3, r3, #2
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d003      	beq.n	8002b8c <ESP01DOConnection+0x17c>
			esp01ATSate = ESP01ATCIFSR;
 8002b84:	4b41      	ldr	r3, [pc, #260]	@ (8002c8c <ESP01DOConnection+0x27c>)
 8002b86:	2207      	movs	r2, #7
 8002b88:	701a      	strb	r2, [r3, #0]
			break;
 8002b8a:	e131      	b.n	8002df0 <ESP01DOConnection+0x3e0>
		}
		if(esp01SSID[0] == '\0')
 8002b8c:	4b4c      	ldr	r3, [pc, #304]	@ (8002cc0 <ESP01DOConnection+0x2b0>)
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	f000 812a 	beq.w	8002dea <ESP01DOConnection+0x3da>
			break;
		ESP01StrToBufTX(ATCWJAP);
 8002b96:	484b      	ldr	r0, [pc, #300]	@ (8002cc4 <ESP01DOConnection+0x2b4>)
 8002b98:	f000 f9c0 	bl	8002f1c <ESP01StrToBufTX>
		ESP01ByteToBufTX('\"');
 8002b9c:	2022      	movs	r0, #34	@ 0x22
 8002b9e:	f000 f9ed 	bl	8002f7c <ESP01ByteToBufTX>
		ESP01StrToBufTX(esp01SSID);
 8002ba2:	4847      	ldr	r0, [pc, #284]	@ (8002cc0 <ESP01DOConnection+0x2b0>)
 8002ba4:	f000 f9ba 	bl	8002f1c <ESP01StrToBufTX>
		ESP01ByteToBufTX('\"');
 8002ba8:	2022      	movs	r0, #34	@ 0x22
 8002baa:	f000 f9e7 	bl	8002f7c <ESP01ByteToBufTX>
		ESP01ByteToBufTX(',');
 8002bae:	202c      	movs	r0, #44	@ 0x2c
 8002bb0:	f000 f9e4 	bl	8002f7c <ESP01ByteToBufTX>
		ESP01ByteToBufTX('\"');
 8002bb4:	2022      	movs	r0, #34	@ 0x22
 8002bb6:	f000 f9e1 	bl	8002f7c <ESP01ByteToBufTX>
		ESP01StrToBufTX(esp01PASSWORD);
 8002bba:	4843      	ldr	r0, [pc, #268]	@ (8002cc8 <ESP01DOConnection+0x2b8>)
 8002bbc:	f000 f9ae 	bl	8002f1c <ESP01StrToBufTX>
		ESP01ByteToBufTX('\"');
 8002bc0:	2022      	movs	r0, #34	@ 0x22
 8002bc2:	f000 f9db 	bl	8002f7c <ESP01ByteToBufTX>
		ESP01ByteToBufTX('\r');
 8002bc6:	200d      	movs	r0, #13
 8002bc8:	f000 f9d8 	bl	8002f7c <ESP01ByteToBufTX>
		ESP01ByteToBufTX('\n');
 8002bcc:	200a      	movs	r0, #10
 8002bce:	f000 f9d5 	bl	8002f7c <ESP01ByteToBufTX>
		if(ESP01DbgStr != NULL)
 8002bd2:	4b30      	ldr	r3, [pc, #192]	@ (8002c94 <ESP01DOConnection+0x284>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d003      	beq.n	8002be2 <ESP01DOConnection+0x1d2>
			ESP01DbgStr("+&DBGESP01ATCWJAP\n");
 8002bda:	4b2e      	ldr	r3, [pc, #184]	@ (8002c94 <ESP01DOConnection+0x284>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	483b      	ldr	r0, [pc, #236]	@ (8002ccc <ESP01DOConnection+0x2bc>)
 8002be0:	4798      	blx	r3
		esp01Flags.bit.ATRESPONSEOK = 0;
 8002be2:	4a30      	ldr	r2, [pc, #192]	@ (8002ca4 <ESP01DOConnection+0x294>)
 8002be4:	7813      	ldrb	r3, [r2, #0]
 8002be6:	f023 0320 	bic.w	r3, r3, #32
 8002bea:	7013      	strb	r3, [r2, #0]
		esp01ATSate = ESP01CWJAPRESPONSE;
 8002bec:	4b27      	ldr	r3, [pc, #156]	@ (8002c8c <ESP01DOConnection+0x27c>)
 8002bee:	2206      	movs	r2, #6
 8002bf0:	701a      	strb	r2, [r3, #0]
		esp01TimeoutTask = 5000;
 8002bf2:	4b25      	ldr	r3, [pc, #148]	@ (8002c88 <ESP01DOConnection+0x278>)
 8002bf4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bf8:	601a      	str	r2, [r3, #0]
		break;
 8002bfa:	e0f9      	b.n	8002df0 <ESP01DOConnection+0x3e0>
	case ESP01CWJAPRESPONSE:
		if(esp01Flags.bit.ATRESPONSEOK){
 8002bfc:	4b29      	ldr	r3, [pc, #164]	@ (8002ca4 <ESP01DOConnection+0x294>)
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	f003 0320 	and.w	r3, r3, #32
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d006      	beq.n	8002c18 <ESP01DOConnection+0x208>
			esp01ATSate = ESP01ATCIFSR;
 8002c0a:	4b20      	ldr	r3, [pc, #128]	@ (8002c8c <ESP01DOConnection+0x27c>)
 8002c0c:	2207      	movs	r2, #7
 8002c0e:	701a      	strb	r2, [r3, #0]
			esp01TriesAT = 4;
 8002c10:	4b23      	ldr	r3, [pc, #140]	@ (8002ca0 <ESP01DOConnection+0x290>)
 8002c12:	2204      	movs	r2, #4
 8002c14:	701a      	strb	r2, [r3, #0]
		}
		else
			esp01ATSate = ESP01ATAT;
		break;
 8002c16:	e0eb      	b.n	8002df0 <ESP01DOConnection+0x3e0>
			esp01ATSate = ESP01ATAT;
 8002c18:	4b1c      	ldr	r3, [pc, #112]	@ (8002c8c <ESP01DOConnection+0x27c>)
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	701a      	strb	r2, [r3, #0]
		break;
 8002c1e:	e0e7      	b.n	8002df0 <ESP01DOConnection+0x3e0>
	case ESP01ATCIFSR:
		esp01LocalIP[0] = '\0';
 8002c20:	4b2b      	ldr	r3, [pc, #172]	@ (8002cd0 <ESP01DOConnection+0x2c0>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	701a      	strb	r2, [r3, #0]
		ESP01StrToBufTX(ATCIFSR);
 8002c26:	482b      	ldr	r0, [pc, #172]	@ (8002cd4 <ESP01DOConnection+0x2c4>)
 8002c28:	f000 f978 	bl	8002f1c <ESP01StrToBufTX>
		if(ESP01DbgStr != NULL)
 8002c2c:	4b19      	ldr	r3, [pc, #100]	@ (8002c94 <ESP01DOConnection+0x284>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d003      	beq.n	8002c3c <ESP01DOConnection+0x22c>
			ESP01DbgStr("+&DBGESP01CIFSR\n");
 8002c34:	4b17      	ldr	r3, [pc, #92]	@ (8002c94 <ESP01DOConnection+0x284>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4827      	ldr	r0, [pc, #156]	@ (8002cd8 <ESP01DOConnection+0x2c8>)
 8002c3a:	4798      	blx	r3
		esp01Flags.bit.ATRESPONSEOK = 0;
 8002c3c:	4a19      	ldr	r2, [pc, #100]	@ (8002ca4 <ESP01DOConnection+0x294>)
 8002c3e:	7813      	ldrb	r3, [r2, #0]
 8002c40:	f023 0320 	bic.w	r3, r3, #32
 8002c44:	7013      	strb	r3, [r2, #0]
		esp01ATSate = ESP01CIFSRRESPONSE;
 8002c46:	4b11      	ldr	r3, [pc, #68]	@ (8002c8c <ESP01DOConnection+0x27c>)
 8002c48:	2208      	movs	r2, #8
 8002c4a:	701a      	strb	r2, [r3, #0]
		break;
 8002c4c:	e0d0      	b.n	8002df0 <ESP01DOConnection+0x3e0>
	case ESP01CIFSRRESPONSE:
		if(esp01Flags.bit.ATRESPONSEOK)
 8002c4e:	4b15      	ldr	r3, [pc, #84]	@ (8002ca4 <ESP01DOConnection+0x294>)
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	f003 0320 	and.w	r3, r3, #32
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d003      	beq.n	8002c64 <ESP01DOConnection+0x254>
			esp01ATSate = ESP01ATCIPCLOSE;
 8002c5c:	4b0b      	ldr	r3, [pc, #44]	@ (8002c8c <ESP01DOConnection+0x27c>)
 8002c5e:	2209      	movs	r2, #9
 8002c60:	701a      	strb	r2, [r3, #0]
				esp01ATSate = ESP01ATAT;
				break;
			}
			esp01ATSate = ESP01ATCIFSR;
		}
		break;
 8002c62:	e0c5      	b.n	8002df0 <ESP01DOConnection+0x3e0>
			esp01TriesAT--;
 8002c64:	4b0e      	ldr	r3, [pc, #56]	@ (8002ca0 <ESP01DOConnection+0x290>)
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	3b01      	subs	r3, #1
 8002c6a:	b2da      	uxtb	r2, r3
 8002c6c:	4b0c      	ldr	r3, [pc, #48]	@ (8002ca0 <ESP01DOConnection+0x290>)
 8002c6e:	701a      	strb	r2, [r3, #0]
			if(esp01TriesAT == 0){
 8002c70:	4b0b      	ldr	r3, [pc, #44]	@ (8002ca0 <ESP01DOConnection+0x290>)
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d103      	bne.n	8002c80 <ESP01DOConnection+0x270>
				esp01ATSate = ESP01ATAT;
 8002c78:	4b04      	ldr	r3, [pc, #16]	@ (8002c8c <ESP01DOConnection+0x27c>)
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	701a      	strb	r2, [r3, #0]
				break;
 8002c7e:	e0b7      	b.n	8002df0 <ESP01DOConnection+0x3e0>
			esp01ATSate = ESP01ATCIFSR;
 8002c80:	4b02      	ldr	r3, [pc, #8]	@ (8002c8c <ESP01DOConnection+0x27c>)
 8002c82:	2207      	movs	r2, #7
 8002c84:	701a      	strb	r2, [r3, #0]
		break;
 8002c86:	e0b3      	b.n	8002df0 <ESP01DOConnection+0x3e0>
 8002c88:	20000834 	.word	0x20000834
 8002c8c:	2000082e 	.word	0x2000082e
 8002c90:	20000a68 	.word	0x20000a68
 8002c94:	20000844 	.word	0x20000844
 8002c98:	080128f4 	.word	0x080128f4
 8002c9c:	0801290c 	.word	0x0801290c
 8002ca0:	20000a64 	.word	0x20000a64
 8002ca4:	20000830 	.word	0x20000830
 8002ca8:	08013d44 	.word	0x08013d44
 8002cac:	08012924 	.word	0x08012924
 8002cb0:	08013d5c 	.word	0x08013d5c
 8002cb4:	08012934 	.word	0x08012934
 8002cb8:	08013d4c 	.word	0x08013d4c
 8002cbc:	08012948 	.word	0x08012948
 8002cc0:	20000848 	.word	0x20000848
 8002cc4:	08013d6c 	.word	0x08013d6c
 8002cc8:	20000888 	.word	0x20000888
 8002ccc:	0801295c 	.word	0x0801295c
 8002cd0:	200008c0 	.word	0x200008c0
 8002cd4:	08013d78 	.word	0x08013d78
 8002cd8:	08012970 	.word	0x08012970
	case ESP01ATCIPCLOSE:
		if(esp01RemoteIP[0] == '\0')
 8002cdc:	4b45      	ldr	r3, [pc, #276]	@ (8002df4 <ESP01DOConnection+0x3e4>)
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	f000 8084 	beq.w	8002dee <ESP01DOConnection+0x3de>
			break;
		ESP01StrToBufTX(ATCIPCLOSE);
 8002ce6:	4844      	ldr	r0, [pc, #272]	@ (8002df8 <ESP01DOConnection+0x3e8>)
 8002ce8:	f000 f918 	bl	8002f1c <ESP01StrToBufTX>
		if(ESP01DbgStr != NULL)
 8002cec:	4b43      	ldr	r3, [pc, #268]	@ (8002dfc <ESP01DOConnection+0x3ec>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d003      	beq.n	8002cfc <ESP01DOConnection+0x2ec>
			ESP01DbgStr("+&DBGESP01ATCIPCLOSE\n");
 8002cf4:	4b41      	ldr	r3, [pc, #260]	@ (8002dfc <ESP01DOConnection+0x3ec>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4841      	ldr	r0, [pc, #260]	@ (8002e00 <ESP01DOConnection+0x3f0>)
 8002cfa:	4798      	blx	r3
		esp01ATSate = ESP01ATCIPSTART;
 8002cfc:	4b41      	ldr	r3, [pc, #260]	@ (8002e04 <ESP01DOConnection+0x3f4>)
 8002cfe:	220a      	movs	r2, #10
 8002d00:	701a      	strb	r2, [r3, #0]
		break;
 8002d02:	e075      	b.n	8002df0 <ESP01DOConnection+0x3e0>
	case ESP01ATCIPSTART:
		ESP01StrToBufTX(ATCIPSTART);
 8002d04:	4840      	ldr	r0, [pc, #256]	@ (8002e08 <ESP01DOConnection+0x3f8>)
 8002d06:	f000 f909 	bl	8002f1c <ESP01StrToBufTX>
		ESP01ByteToBufTX('\"');
 8002d0a:	2022      	movs	r0, #34	@ 0x22
 8002d0c:	f000 f936 	bl	8002f7c <ESP01ByteToBufTX>
		ESP01StrToBufTX(esp01PROTO);
 8002d10:	483e      	ldr	r0, [pc, #248]	@ (8002e0c <ESP01DOConnection+0x3fc>)
 8002d12:	f000 f903 	bl	8002f1c <ESP01StrToBufTX>
		ESP01ByteToBufTX('\"');
 8002d16:	2022      	movs	r0, #34	@ 0x22
 8002d18:	f000 f930 	bl	8002f7c <ESP01ByteToBufTX>
		ESP01ByteToBufTX(',');
 8002d1c:	202c      	movs	r0, #44	@ 0x2c
 8002d1e:	f000 f92d 	bl	8002f7c <ESP01ByteToBufTX>
		ESP01ByteToBufTX('\"');
 8002d22:	2022      	movs	r0, #34	@ 0x22
 8002d24:	f000 f92a 	bl	8002f7c <ESP01ByteToBufTX>
		ESP01StrToBufTX(esp01RemoteIP);
 8002d28:	4832      	ldr	r0, [pc, #200]	@ (8002df4 <ESP01DOConnection+0x3e4>)
 8002d2a:	f000 f8f7 	bl	8002f1c <ESP01StrToBufTX>
		ESP01ByteToBufTX('\"');
 8002d2e:	2022      	movs	r0, #34	@ 0x22
 8002d30:	f000 f924 	bl	8002f7c <ESP01ByteToBufTX>
		ESP01ByteToBufTX(',');
 8002d34:	202c      	movs	r0, #44	@ 0x2c
 8002d36:	f000 f921 	bl	8002f7c <ESP01ByteToBufTX>
		ESP01StrToBufTX(esp01RemotePORT);
 8002d3a:	4835      	ldr	r0, [pc, #212]	@ (8002e10 <ESP01DOConnection+0x400>)
 8002d3c:	f000 f8ee 	bl	8002f1c <ESP01StrToBufTX>
		ESP01ByteToBufTX(',');
 8002d40:	202c      	movs	r0, #44	@ 0x2c
 8002d42:	f000 f91b 	bl	8002f7c <ESP01ByteToBufTX>
		ESP01StrToBufTX(esp01LocalPORT);
 8002d46:	4833      	ldr	r0, [pc, #204]	@ (8002e14 <ESP01DOConnection+0x404>)
 8002d48:	f000 f8e8 	bl	8002f1c <ESP01StrToBufTX>
		ESP01ByteToBufTX(',');
 8002d4c:	202c      	movs	r0, #44	@ 0x2c
 8002d4e:	f000 f915 	bl	8002f7c <ESP01ByteToBufTX>
		ESP01ByteToBufTX('0');
 8002d52:	2030      	movs	r0, #48	@ 0x30
 8002d54:	f000 f912 	bl	8002f7c <ESP01ByteToBufTX>
		ESP01ByteToBufTX('\r');
 8002d58:	200d      	movs	r0, #13
 8002d5a:	f000 f90f 	bl	8002f7c <ESP01ByteToBufTX>
		ESP01ByteToBufTX('\n');
 8002d5e:	200a      	movs	r0, #10
 8002d60:	f000 f90c 	bl	8002f7c <ESP01ByteToBufTX>
		if(ESP01DbgStr != NULL)
 8002d64:	4b25      	ldr	r3, [pc, #148]	@ (8002dfc <ESP01DOConnection+0x3ec>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d003      	beq.n	8002d74 <ESP01DOConnection+0x364>
			ESP01DbgStr("+&DBGESP01ATCIPSTART\n");
 8002d6c:	4b23      	ldr	r3, [pc, #140]	@ (8002dfc <ESP01DOConnection+0x3ec>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4829      	ldr	r0, [pc, #164]	@ (8002e18 <ESP01DOConnection+0x408>)
 8002d72:	4798      	blx	r3
		esp01Flags.bit.ATRESPONSEOK = 0;
 8002d74:	4a29      	ldr	r2, [pc, #164]	@ (8002e1c <ESP01DOConnection+0x40c>)
 8002d76:	7813      	ldrb	r3, [r2, #0]
 8002d78:	f023 0320 	bic.w	r3, r3, #32
 8002d7c:	7013      	strb	r3, [r2, #0]
		esp01Flags.bit.UDPTCPCONNECTED = 0;
 8002d7e:	4a27      	ldr	r2, [pc, #156]	@ (8002e1c <ESP01DOConnection+0x40c>)
 8002d80:	7813      	ldrb	r3, [r2, #0]
 8002d82:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002d86:	7013      	strb	r3, [r2, #0]
		esp01ATSate = ESP01CIPSTARTRESPONSE;
 8002d88:	4b1e      	ldr	r3, [pc, #120]	@ (8002e04 <ESP01DOConnection+0x3f4>)
 8002d8a:	220b      	movs	r2, #11
 8002d8c:	701a      	strb	r2, [r3, #0]
		esp01TimeoutTask = 5000;
 8002d8e:	4b24      	ldr	r3, [pc, #144]	@ (8002e20 <ESP01DOConnection+0x410>)
 8002d90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d94:	601a      	str	r2, [r3, #0]
		break;
 8002d96:	e02b      	b.n	8002df0 <ESP01DOConnection+0x3e0>
	case ESP01CIPSTARTRESPONSE:
		if(esp01Flags.bit.ATRESPONSEOK)
 8002d98:	4b20      	ldr	r3, [pc, #128]	@ (8002e1c <ESP01DOConnection+0x40c>)
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	f003 0320 	and.w	r3, r3, #32
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d003      	beq.n	8002dae <ESP01DOConnection+0x39e>
			esp01ATSate = ESP01ATCONNECTED;
 8002da6:	4b17      	ldr	r3, [pc, #92]	@ (8002e04 <ESP01DOConnection+0x3f4>)
 8002da8:	220c      	movs	r2, #12
 8002daa:	701a      	strb	r2, [r3, #0]
		else
			esp01ATSate = ESP01ATAT;
		break;
 8002dac:	e020      	b.n	8002df0 <ESP01DOConnection+0x3e0>
			esp01ATSate = ESP01ATAT;
 8002dae:	4b15      	ldr	r3, [pc, #84]	@ (8002e04 <ESP01DOConnection+0x3f4>)
 8002db0:	2201      	movs	r2, #1
 8002db2:	701a      	strb	r2, [r3, #0]
		break;
 8002db4:	e01c      	b.n	8002df0 <ESP01DOConnection+0x3e0>
	case ESP01ATCONNECTED:
		if(esp01Flags.bit.WIFICONNECTED == 0){
 8002db6:	4b19      	ldr	r3, [pc, #100]	@ (8002e1c <ESP01DOConnection+0x40c>)
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	f003 0302 	and.w	r3, r3, #2
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d103      	bne.n	8002dcc <ESP01DOConnection+0x3bc>
			esp01ATSate = ESP01ATAT;
 8002dc4:	4b0f      	ldr	r3, [pc, #60]	@ (8002e04 <ESP01DOConnection+0x3f4>)
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	701a      	strb	r2, [r3, #0]
			break;
 8002dca:	e011      	b.n	8002df0 <ESP01DOConnection+0x3e0>
		}
		if(esp01Flags.bit.UDPTCPCONNECTED == 0){
 8002dcc:	4b13      	ldr	r3, [pc, #76]	@ (8002e1c <ESP01DOConnection+0x40c>)
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d103      	bne.n	8002de2 <ESP01DOConnection+0x3d2>
			esp01ATSate = ESP01ATCIPCLOSE;
 8002dda:	4b0a      	ldr	r3, [pc, #40]	@ (8002e04 <ESP01DOConnection+0x3f4>)
 8002ddc:	2209      	movs	r2, #9
 8002dde:	701a      	strb	r2, [r3, #0]
			break;
 8002de0:	e006      	b.n	8002df0 <ESP01DOConnection+0x3e0>
		}
		esp01TimeoutTask = 0;
 8002de2:	4b0f      	ldr	r3, [pc, #60]	@ (8002e20 <ESP01DOConnection+0x410>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	601a      	str	r2, [r3, #0]
		break;
 8002de8:	e002      	b.n	8002df0 <ESP01DOConnection+0x3e0>
			break;
 8002dea:	bf00      	nop
 8002dec:	e000      	b.n	8002df0 <ESP01DOConnection+0x3e0>
			break;
 8002dee:	bf00      	nop
	}
}
 8002df0:	bf00      	nop
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	200008a8 	.word	0x200008a8
 8002df8:	08013d94 	.word	0x08013d94
 8002dfc:	20000844 	.word	0x20000844
 8002e00:	08012984 	.word	0x08012984
 8002e04:	2000082e 	.word	0x2000082e
 8002e08:	08013d84 	.word	0x08013d84
 8002e0c:	20000008 	.word	0x20000008
 8002e10:	200008b8 	.word	0x200008b8
 8002e14:	200008d0 	.word	0x200008d0
 8002e18:	0801299c 	.word	0x0801299c
 8002e1c:	20000830 	.word	0x20000830
 8002e20:	20000834 	.word	0x20000834

08002e24 <ESP01SENDData>:

static void ESP01SENDData(){
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
	uint8_t value;

	if(esp01Flags.bit.WAITINGSYMBOL){
 8002e2a:	4b34      	ldr	r3, [pc, #208]	@ (8002efc <ESP01SENDData+0xd8>)
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	f003 0301 	and.w	r3, r3, #1
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d013      	beq.n	8002e60 <ESP01SENDData+0x3c>
		if(!esp01TimeoutTxSymbol){
 8002e38:	4b31      	ldr	r3, [pc, #196]	@ (8002f00 <ESP01SENDData+0xdc>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d159      	bne.n	8002ef4 <ESP01SENDData+0xd0>
			esp01irTX = esp01iwTX;
 8002e40:	4b30      	ldr	r3, [pc, #192]	@ (8002f04 <ESP01SENDData+0xe0>)
 8002e42:	881a      	ldrh	r2, [r3, #0]
 8002e44:	4b30      	ldr	r3, [pc, #192]	@ (8002f08 <ESP01SENDData+0xe4>)
 8002e46:	801a      	strh	r2, [r3, #0]
			esp01Flags.bit.WAITINGSYMBOL = 0;
 8002e48:	4a2c      	ldr	r2, [pc, #176]	@ (8002efc <ESP01SENDData+0xd8>)
 8002e4a:	7813      	ldrb	r3, [r2, #0]
 8002e4c:	f023 0301 	bic.w	r3, r3, #1
 8002e50:	7013      	strb	r3, [r2, #0]
			esp01ATSate = ESP01ATAT;
 8002e52:	4b2e      	ldr	r3, [pc, #184]	@ (8002f0c <ESP01SENDData+0xe8>)
 8002e54:	2201      	movs	r2, #1
 8002e56:	701a      	strb	r2, [r3, #0]
			esp01TimeoutTask = 10;
 8002e58:	4b2d      	ldr	r3, [pc, #180]	@ (8002f10 <ESP01SENDData+0xec>)
 8002e5a:	220a      	movs	r2, #10
 8002e5c:	601a      	str	r2, [r3, #0]
		}
		return;
 8002e5e:	e049      	b.n	8002ef4 <ESP01SENDData+0xd0>
	}
	if(esp01irTX != esp01iwTX){
 8002e60:	4b29      	ldr	r3, [pc, #164]	@ (8002f08 <ESP01SENDData+0xe4>)
 8002e62:	881a      	ldrh	r2, [r3, #0]
 8002e64:	4b27      	ldr	r3, [pc, #156]	@ (8002f04 <ESP01SENDData+0xe0>)
 8002e66:	881b      	ldrh	r3, [r3, #0]
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d044      	beq.n	8002ef6 <ESP01SENDData+0xd2>
		value = esp01TXATBuf[esp01irTX];
 8002e6c:	4b26      	ldr	r3, [pc, #152]	@ (8002f08 <ESP01SENDData+0xe4>)
 8002e6e:	881b      	ldrh	r3, [r3, #0]
 8002e70:	461a      	mov	r2, r3
 8002e72:	4b28      	ldr	r3, [pc, #160]	@ (8002f14 <ESP01SENDData+0xf0>)
 8002e74:	5c9b      	ldrb	r3, [r3, r2]
 8002e76:	71fb      	strb	r3, [r7, #7]
		if(esp01Flags.bit.TXCIPSEND){
 8002e78:	4b20      	ldr	r3, [pc, #128]	@ (8002efc <ESP01SENDData+0xd8>)
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	f003 0304 	and.w	r3, r3, #4
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d004      	beq.n	8002e90 <ESP01SENDData+0x6c>
			if(value == '>')
 8002e86:	79fb      	ldrb	r3, [r7, #7]
 8002e88:	2b3e      	cmp	r3, #62	@ 0x3e
 8002e8a:	d101      	bne.n	8002e90 <ESP01SENDData+0x6c>
				value = '\n';
 8002e8c:	230a      	movs	r3, #10
 8002e8e:	71fb      	strb	r3, [r7, #7]
		}
		if(esp01Handle.WriteUSARTByte(value)){
 8002e90:	4b21      	ldr	r3, [pc, #132]	@ (8002f18 <ESP01SENDData+0xf4>)
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	79fa      	ldrb	r2, [r7, #7]
 8002e96:	4610      	mov	r0, r2
 8002e98:	4798      	blx	r3
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d02a      	beq.n	8002ef6 <ESP01SENDData+0xd2>
			if(esp01Flags.bit.TXCIPSEND){
 8002ea0:	4b16      	ldr	r3, [pc, #88]	@ (8002efc <ESP01SENDData+0xd8>)
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	f003 0304 	and.w	r3, r3, #4
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d013      	beq.n	8002ed6 <ESP01SENDData+0xb2>
				if(esp01TXATBuf[esp01irTX] == '>'){
 8002eae:	4b16      	ldr	r3, [pc, #88]	@ (8002f08 <ESP01SENDData+0xe4>)
 8002eb0:	881b      	ldrh	r3, [r3, #0]
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	4b17      	ldr	r3, [pc, #92]	@ (8002f14 <ESP01SENDData+0xf0>)
 8002eb6:	5c9b      	ldrb	r3, [r3, r2]
 8002eb8:	2b3e      	cmp	r3, #62	@ 0x3e
 8002eba:	d10c      	bne.n	8002ed6 <ESP01SENDData+0xb2>
					esp01Flags.bit.TXCIPSEND = 0;
 8002ebc:	4a0f      	ldr	r2, [pc, #60]	@ (8002efc <ESP01SENDData+0xd8>)
 8002ebe:	7813      	ldrb	r3, [r2, #0]
 8002ec0:	f023 0304 	bic.w	r3, r3, #4
 8002ec4:	7013      	strb	r3, [r2, #0]
					esp01Flags.bit.WAITINGSYMBOL = 1;
 8002ec6:	4a0d      	ldr	r2, [pc, #52]	@ (8002efc <ESP01SENDData+0xd8>)
 8002ec8:	7813      	ldrb	r3, [r2, #0]
 8002eca:	f043 0301 	orr.w	r3, r3, #1
 8002ece:	7013      	strb	r3, [r2, #0]
					esp01TimeoutTxSymbol = 5;
 8002ed0:	4b0b      	ldr	r3, [pc, #44]	@ (8002f00 <ESP01SENDData+0xdc>)
 8002ed2:	2205      	movs	r2, #5
 8002ed4:	601a      	str	r2, [r3, #0]
				}
			}
			esp01irTX++;
 8002ed6:	4b0c      	ldr	r3, [pc, #48]	@ (8002f08 <ESP01SENDData+0xe4>)
 8002ed8:	881b      	ldrh	r3, [r3, #0]
 8002eda:	3301      	adds	r3, #1
 8002edc:	b29a      	uxth	r2, r3
 8002ede:	4b0a      	ldr	r3, [pc, #40]	@ (8002f08 <ESP01SENDData+0xe4>)
 8002ee0:	801a      	strh	r2, [r3, #0]
			if(esp01irTX == ESP01TXBUFAT)
 8002ee2:	4b09      	ldr	r3, [pc, #36]	@ (8002f08 <ESP01SENDData+0xe4>)
 8002ee4:	881b      	ldrh	r3, [r3, #0]
 8002ee6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002eea:	d104      	bne.n	8002ef6 <ESP01SENDData+0xd2>
				esp01irTX = 0;
 8002eec:	4b06      	ldr	r3, [pc, #24]	@ (8002f08 <ESP01SENDData+0xe4>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	801a      	strh	r2, [r3, #0]
 8002ef2:	e000      	b.n	8002ef6 <ESP01SENDData+0xd2>
		return;
 8002ef4:	bf00      	nop
		}
	}
}
 8002ef6:	3708      	adds	r7, #8
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	20000830 	.word	0x20000830
 8002f00:	2000083c 	.word	0x2000083c
 8002f04:	20000a62 	.word	0x20000a62
 8002f08:	20000a60 	.word	0x20000a60
 8002f0c:	2000082e 	.word	0x2000082e
 8002f10:	20000834 	.word	0x20000834
 8002f14:	2000095c 	.word	0x2000095c
 8002f18:	20000a68 	.word	0x20000a68

08002f1c <ESP01StrToBufTX>:

static void ESP01StrToBufTX(const char *str){
 8002f1c:	b480      	push	{r7}
 8002f1e:	b085      	sub	sp, #20
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
	for(int i=0; str[i]; i++){
 8002f24:	2300      	movs	r3, #0
 8002f26:	60fb      	str	r3, [r7, #12]
 8002f28:	e017      	b.n	8002f5a <ESP01StrToBufTX+0x3e>
		esp01TXATBuf[esp01iwTX++] = str[i];
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	441a      	add	r2, r3
 8002f30:	4b10      	ldr	r3, [pc, #64]	@ (8002f74 <ESP01StrToBufTX+0x58>)
 8002f32:	881b      	ldrh	r3, [r3, #0]
 8002f34:	1c59      	adds	r1, r3, #1
 8002f36:	b288      	uxth	r0, r1
 8002f38:	490e      	ldr	r1, [pc, #56]	@ (8002f74 <ESP01StrToBufTX+0x58>)
 8002f3a:	8008      	strh	r0, [r1, #0]
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	7812      	ldrb	r2, [r2, #0]
 8002f40:	4b0d      	ldr	r3, [pc, #52]	@ (8002f78 <ESP01StrToBufTX+0x5c>)
 8002f42:	545a      	strb	r2, [r3, r1]
		if(esp01iwTX == ESP01TXBUFAT)
 8002f44:	4b0b      	ldr	r3, [pc, #44]	@ (8002f74 <ESP01StrToBufTX+0x58>)
 8002f46:	881b      	ldrh	r3, [r3, #0]
 8002f48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f4c:	d102      	bne.n	8002f54 <ESP01StrToBufTX+0x38>
			esp01iwTX = 0;
 8002f4e:	4b09      	ldr	r3, [pc, #36]	@ (8002f74 <ESP01StrToBufTX+0x58>)
 8002f50:	2200      	movs	r2, #0
 8002f52:	801a      	strh	r2, [r3, #0]
	for(int i=0; str[i]; i++){
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	3301      	adds	r3, #1
 8002f58:	60fb      	str	r3, [r7, #12]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	687a      	ldr	r2, [r7, #4]
 8002f5e:	4413      	add	r3, r2
 8002f60:	781b      	ldrb	r3, [r3, #0]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d1e1      	bne.n	8002f2a <ESP01StrToBufTX+0xe>
	}
}
 8002f66:	bf00      	nop
 8002f68:	bf00      	nop
 8002f6a:	3714      	adds	r7, #20
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr
 8002f74:	20000a62 	.word	0x20000a62
 8002f78:	2000095c 	.word	0x2000095c

08002f7c <ESP01ByteToBufTX>:

static void ESP01ByteToBufTX(uint8_t value){
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	4603      	mov	r3, r0
 8002f84:	71fb      	strb	r3, [r7, #7]
	esp01TXATBuf[esp01iwTX++] = value;
 8002f86:	4b0c      	ldr	r3, [pc, #48]	@ (8002fb8 <ESP01ByteToBufTX+0x3c>)
 8002f88:	881b      	ldrh	r3, [r3, #0]
 8002f8a:	1c5a      	adds	r2, r3, #1
 8002f8c:	b291      	uxth	r1, r2
 8002f8e:	4a0a      	ldr	r2, [pc, #40]	@ (8002fb8 <ESP01ByteToBufTX+0x3c>)
 8002f90:	8011      	strh	r1, [r2, #0]
 8002f92:	4619      	mov	r1, r3
 8002f94:	4a09      	ldr	r2, [pc, #36]	@ (8002fbc <ESP01ByteToBufTX+0x40>)
 8002f96:	79fb      	ldrb	r3, [r7, #7]
 8002f98:	5453      	strb	r3, [r2, r1]
	if(esp01iwTX == ESP01TXBUFAT)
 8002f9a:	4b07      	ldr	r3, [pc, #28]	@ (8002fb8 <ESP01ByteToBufTX+0x3c>)
 8002f9c:	881b      	ldrh	r3, [r3, #0]
 8002f9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002fa2:	d102      	bne.n	8002faa <ESP01ByteToBufTX+0x2e>
		esp01iwTX = 0;
 8002fa4:	4b04      	ldr	r3, [pc, #16]	@ (8002fb8 <ESP01ByteToBufTX+0x3c>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	801a      	strh	r2, [r3, #0]
}
 8002faa:	bf00      	nop
 8002fac:	370c      	adds	r7, #12
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
 8002fb6:	bf00      	nop
 8002fb8:	20000a62 	.word	0x20000a62
 8002fbc:	2000095c 	.word	0x2000095c

08002fc0 <OLED_Print_Data_Task>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void OLED_Print_Data_Task(){
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b084      	sub	sp, #16
 8002fc4:	af02      	add	r7, sp, #8
	uint8_t auxPos = 0;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	717b      	strb	r3, [r7, #5]
	if(Display.isInit){
 8002fca:	4ba3      	ldr	r3, [pc, #652]	@ (8003258 <OLED_Print_Data_Task+0x298>)
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	f000 812b 	beq.w	800322a <OLED_Print_Data_Task+0x26a>
		switch(Display.state){
 8002fd4:	4ba0      	ldr	r3, [pc, #640]	@ (8003258 <OLED_Print_Data_Task+0x298>)
 8002fd6:	f893 3401 	ldrb.w	r3, [r3, #1025]	@ 0x401
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d023      	beq.n	8003026 <OLED_Print_Data_Task+0x66>
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	f300 8123 	bgt.w	800322a <OLED_Print_Data_Task+0x26a>
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d001      	beq.n	8002fec <OLED_Print_Data_Task+0x2c>
 8002fe8:	2b01      	cmp	r3, #1
				Display.state = INPUTS;
			}
			break;
		case MENU:

			break;
 8002fea:	e11e      	b.n	800322a <OLED_Print_Data_Task+0x26a>
			if(HAL_GetTick() - Display.timer > 2000){
 8002fec:	f002 f852 	bl	8005094 <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	4b99      	ldr	r3, [pc, #612]	@ (8003258 <OLED_Print_Data_Task+0x298>)
 8002ff4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8002ffe:	f240 8111 	bls.w	8003224 <OLED_Print_Data_Task+0x264>
				Display_Fill(SSD1306_COLOR_BLACK);
 8003002:	2000      	movs	r0, #0
 8003004:	f7fe f902 	bl	800120c <Display_Fill>
				Display_DrawBitmap(0, 0, status_screen, 128, 64, SSD1306_COLOR_WHITE);
 8003008:	2301      	movs	r3, #1
 800300a:	9301      	str	r3, [sp, #4]
 800300c:	2340      	movs	r3, #64	@ 0x40
 800300e:	9300      	str	r3, [sp, #0]
 8003010:	2380      	movs	r3, #128	@ 0x80
 8003012:	4a92      	ldr	r2, [pc, #584]	@ (800325c <OLED_Print_Data_Task+0x29c>)
 8003014:	2100      	movs	r1, #0
 8003016:	2000      	movs	r0, #0
 8003018:	f7fe f97c 	bl	8001314 <Display_DrawBitmap>
				Display.state = INPUTS;
 800301c:	4b8e      	ldr	r3, [pc, #568]	@ (8003258 <OLED_Print_Data_Task+0x298>)
 800301e:	2202      	movs	r2, #2
 8003020:	f883 2401 	strb.w	r2, [r3, #1025]	@ 0x401
			break;
 8003024:	e0fe      	b.n	8003224 <OLED_Print_Data_Task+0x264>
		case INPUTS:
			Display_DrawBitmap(2, 17, ADC_Blackout, 37, 44, SSD1306_COLOR_BLACK);
 8003026:	2300      	movs	r3, #0
 8003028:	9301      	str	r3, [sp, #4]
 800302a:	232c      	movs	r3, #44	@ 0x2c
 800302c:	9300      	str	r3, [sp, #0]
 800302e:	2325      	movs	r3, #37	@ 0x25
 8003030:	4a8b      	ldr	r2, [pc, #556]	@ (8003260 <OLED_Print_Data_Task+0x2a0>)
 8003032:	2111      	movs	r1, #17
 8003034:	2002      	movs	r0, #2
 8003036:	f7fe f96d 	bl	8001314 <Display_DrawBitmap>
			for(uint8_t i = 0; i < 8; i++){
 800303a:	2300      	movs	r3, #0
 800303c:	71fb      	strb	r3, [r7, #7]
 800303e:	e03f      	b.n	80030c0 <OLED_Print_Data_Task+0x100>
				for(uint8_t j = 0; j < 45; j++){
 8003040:	2300      	movs	r3, #0
 8003042:	71bb      	strb	r3, [r7, #6]
 8003044:	e036      	b.n	80030b4 <OLED_Print_Data_Task+0xf4>
					if(Analog.value[i] <= ADC_to_Index[j]){
 8003046:	79fb      	ldrb	r3, [r7, #7]
 8003048:	4a86      	ldr	r2, [pc, #536]	@ (8003264 <OLED_Print_Data_Task+0x2a4>)
 800304a:	3308      	adds	r3, #8
 800304c:	005b      	lsls	r3, r3, #1
 800304e:	4413      	add	r3, r2
 8003050:	885a      	ldrh	r2, [r3, #2]
 8003052:	79bb      	ldrb	r3, [r7, #6]
 8003054:	4984      	ldr	r1, [pc, #528]	@ (8003268 <OLED_Print_Data_Task+0x2a8>)
 8003056:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800305a:	429a      	cmp	r2, r3
 800305c:	d827      	bhi.n	80030ae <OLED_Print_Data_Task+0xee>
						auxPos = 2 + i * 3;
 800305e:	79fb      	ldrb	r3, [r7, #7]
 8003060:	461a      	mov	r2, r3
 8003062:	0052      	lsls	r2, r2, #1
 8003064:	4413      	add	r3, r2
 8003066:	b2db      	uxtb	r3, r3
 8003068:	3302      	adds	r3, #2
 800306a:	717b      	strb	r3, [r7, #5]
						Display_DrawLine(auxPos, 61,  auxPos, Index_to_Bar[j], SSD1306_COLOR_WHITE);
 800306c:	797b      	ldrb	r3, [r7, #5]
 800306e:	b298      	uxth	r0, r3
 8003070:	797b      	ldrb	r3, [r7, #5]
 8003072:	b29a      	uxth	r2, r3
 8003074:	79bb      	ldrb	r3, [r7, #6]
 8003076:	497d      	ldr	r1, [pc, #500]	@ (800326c <OLED_Print_Data_Task+0x2ac>)
 8003078:	5ccb      	ldrb	r3, [r1, r3]
 800307a:	4619      	mov	r1, r3
 800307c:	2301      	movs	r3, #1
 800307e:	9300      	str	r3, [sp, #0]
 8003080:	460b      	mov	r3, r1
 8003082:	213d      	movs	r1, #61	@ 0x3d
 8003084:	f7fe fa50 	bl	8001528 <Display_DrawLine>
						Display_DrawLine(auxPos+1, 61,  auxPos+1, Index_to_Bar[j], SSD1306_COLOR_WHITE);
 8003088:	797b      	ldrb	r3, [r7, #5]
 800308a:	b29b      	uxth	r3, r3
 800308c:	3301      	adds	r3, #1
 800308e:	b298      	uxth	r0, r3
 8003090:	797b      	ldrb	r3, [r7, #5]
 8003092:	b29b      	uxth	r3, r3
 8003094:	3301      	adds	r3, #1
 8003096:	b29a      	uxth	r2, r3
 8003098:	79bb      	ldrb	r3, [r7, #6]
 800309a:	4974      	ldr	r1, [pc, #464]	@ (800326c <OLED_Print_Data_Task+0x2ac>)
 800309c:	5ccb      	ldrb	r3, [r1, r3]
 800309e:	4619      	mov	r1, r3
 80030a0:	2301      	movs	r3, #1
 80030a2:	9300      	str	r3, [sp, #0]
 80030a4:	460b      	mov	r3, r1
 80030a6:	213d      	movs	r1, #61	@ 0x3d
 80030a8:	f7fe fa3e 	bl	8001528 <Display_DrawLine>
						break;
 80030ac:	e005      	b.n	80030ba <OLED_Print_Data_Task+0xfa>
				for(uint8_t j = 0; j < 45; j++){
 80030ae:	79bb      	ldrb	r3, [r7, #6]
 80030b0:	3301      	adds	r3, #1
 80030b2:	71bb      	strb	r3, [r7, #6]
 80030b4:	79bb      	ldrb	r3, [r7, #6]
 80030b6:	2b2c      	cmp	r3, #44	@ 0x2c
 80030b8:	d9c5      	bls.n	8003046 <OLED_Print_Data_Task+0x86>
			for(uint8_t i = 0; i < 8; i++){
 80030ba:	79fb      	ldrb	r3, [r7, #7]
 80030bc:	3301      	adds	r3, #1
 80030be:	71fb      	strb	r3, [r7, #7]
 80030c0:	79fb      	ldrb	r3, [r7, #7]
 80030c2:	2b07      	cmp	r3, #7
 80030c4:	d9bc      	bls.n	8003040 <OLED_Print_Data_Task+0x80>
					}
				}
			}

			if(MPU6050.isInit){
 80030c6:	4b6a      	ldr	r3, [pc, #424]	@ (8003270 <OLED_Print_Data_Task+0x2b0>)
 80030c8:	f893 30c2 	ldrb.w	r3, [r3, #194]	@ 0xc2
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	f000 80ab 	beq.w	8003228 <OLED_Print_Data_Task+0x268>
				MPU6050.Acc.x = (MPU6050.Acc.x >> 14) * 9.8f;
 80030d2:	4b67      	ldr	r3, [pc, #412]	@ (8003270 <OLED_Print_Data_Task+0x2b0>)
 80030d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030d8:	139b      	asrs	r3, r3, #14
 80030da:	b21b      	sxth	r3, r3
 80030dc:	ee07 3a90 	vmov	s15, r3
 80030e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030e4:	ed9f 7a63 	vldr	s14, [pc, #396]	@ 8003274 <OLED_Print_Data_Task+0x2b4>
 80030e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80030ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80030f0:	ee17 3a90 	vmov	r3, s15
 80030f4:	b21a      	sxth	r2, r3
 80030f6:	4b5e      	ldr	r3, [pc, #376]	@ (8003270 <OLED_Print_Data_Task+0x2b0>)
 80030f8:	801a      	strh	r2, [r3, #0]
				MPU6050.Acc.y = (MPU6050.Acc.y >> 14) * 9.8f;
 80030fa:	4b5d      	ldr	r3, [pc, #372]	@ (8003270 <OLED_Print_Data_Task+0x2b0>)
 80030fc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003100:	139b      	asrs	r3, r3, #14
 8003102:	b21b      	sxth	r3, r3
 8003104:	ee07 3a90 	vmov	s15, r3
 8003108:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800310c:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8003274 <OLED_Print_Data_Task+0x2b4>
 8003110:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003114:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003118:	ee17 3a90 	vmov	r3, s15
 800311c:	b21a      	sxth	r2, r3
 800311e:	4b54      	ldr	r3, [pc, #336]	@ (8003270 <OLED_Print_Data_Task+0x2b0>)
 8003120:	805a      	strh	r2, [r3, #2]
				MPU6050.Acc.z = (MPU6050.Acc.z >> 14) * 9.8f;
 8003122:	4b53      	ldr	r3, [pc, #332]	@ (8003270 <OLED_Print_Data_Task+0x2b0>)
 8003124:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003128:	139b      	asrs	r3, r3, #14
 800312a:	b21b      	sxth	r3, r3
 800312c:	ee07 3a90 	vmov	s15, r3
 8003130:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003134:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 8003274 <OLED_Print_Data_Task+0x2b4>
 8003138:	ee67 7a87 	vmul.f32	s15, s15, s14
 800313c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003140:	ee17 3a90 	vmov	r3, s15
 8003144:	b21a      	sxth	r2, r3
 8003146:	4b4a      	ldr	r3, [pc, #296]	@ (8003270 <OLED_Print_Data_Task+0x2b0>)
 8003148:	809a      	strh	r2, [r3, #4]
				sprintf((char*)Display.auxString, "Ax:%d", MPU6050.Acc.x);
 800314a:	4b49      	ldr	r3, [pc, #292]	@ (8003270 <OLED_Print_Data_Task+0x2b0>)
 800314c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003150:	461a      	mov	r2, r3
 8003152:	4949      	ldr	r1, [pc, #292]	@ (8003278 <OLED_Print_Data_Task+0x2b8>)
 8003154:	4849      	ldr	r0, [pc, #292]	@ (800327c <OLED_Print_Data_Task+0x2bc>)
 8003156:	f00e fec7 	bl	8011ee8 <siprintf>
				Display_SetCursor(25, 17);
 800315a:	2111      	movs	r1, #17
 800315c:	2019      	movs	r0, #25
 800315e:	f7fe f83d 	bl	80011dc <Display_SetCursor>
				Display_WriteString((char*)Display.auxString, Font_7x10, SSD1306_COLOR_WHITE);
 8003162:	4a47      	ldr	r2, [pc, #284]	@ (8003280 <OLED_Print_Data_Task+0x2c0>)
 8003164:	2301      	movs	r3, #1
 8003166:	ca06      	ldmia	r2, {r1, r2}
 8003168:	4844      	ldr	r0, [pc, #272]	@ (800327c <OLED_Print_Data_Task+0x2bc>)
 800316a:	f7fe f9b7 	bl	80014dc <Display_WriteString>
				sprintf((char*)Display.auxString, "Ay:%d", MPU6050.Acc.y);
 800316e:	4b40      	ldr	r3, [pc, #256]	@ (8003270 <OLED_Print_Data_Task+0x2b0>)
 8003170:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003174:	461a      	mov	r2, r3
 8003176:	4943      	ldr	r1, [pc, #268]	@ (8003284 <OLED_Print_Data_Task+0x2c4>)
 8003178:	4840      	ldr	r0, [pc, #256]	@ (800327c <OLED_Print_Data_Task+0x2bc>)
 800317a:	f00e feb5 	bl	8011ee8 <siprintf>
				Display_SetCursor(25, 34);
 800317e:	2122      	movs	r1, #34	@ 0x22
 8003180:	2019      	movs	r0, #25
 8003182:	f7fe f82b 	bl	80011dc <Display_SetCursor>
				Display_WriteString((char*)Display.auxString, Font_7x10, SSD1306_COLOR_WHITE);
 8003186:	4a3e      	ldr	r2, [pc, #248]	@ (8003280 <OLED_Print_Data_Task+0x2c0>)
 8003188:	2301      	movs	r3, #1
 800318a:	ca06      	ldmia	r2, {r1, r2}
 800318c:	483b      	ldr	r0, [pc, #236]	@ (800327c <OLED_Print_Data_Task+0x2bc>)
 800318e:	f7fe f9a5 	bl	80014dc <Display_WriteString>
				sprintf((char*)Display.auxString, "Az:%d", MPU6050.Acc.z);
 8003192:	4b37      	ldr	r3, [pc, #220]	@ (8003270 <OLED_Print_Data_Task+0x2b0>)
 8003194:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003198:	461a      	mov	r2, r3
 800319a:	493b      	ldr	r1, [pc, #236]	@ (8003288 <OLED_Print_Data_Task+0x2c8>)
 800319c:	4837      	ldr	r0, [pc, #220]	@ (800327c <OLED_Print_Data_Task+0x2bc>)
 800319e:	f00e fea3 	bl	8011ee8 <siprintf>
				Display_SetCursor(25, 51);
 80031a2:	2133      	movs	r1, #51	@ 0x33
 80031a4:	2019      	movs	r0, #25
 80031a6:	f7fe f819 	bl	80011dc <Display_SetCursor>
				Display_WriteString((char*)Display.auxString, Font_7x10, SSD1306_COLOR_WHITE);
 80031aa:	4a35      	ldr	r2, [pc, #212]	@ (8003280 <OLED_Print_Data_Task+0x2c0>)
 80031ac:	2301      	movs	r3, #1
 80031ae:	ca06      	ldmia	r2, {r1, r2}
 80031b0:	4832      	ldr	r0, [pc, #200]	@ (800327c <OLED_Print_Data_Task+0x2bc>)
 80031b2:	f7fe f993 	bl	80014dc <Display_WriteString>
				sprintf((char*)Display.auxString, "Gx:%d", MPU6050.Gyro.x);
 80031b6:	4b2e      	ldr	r3, [pc, #184]	@ (8003270 <OLED_Print_Data_Task+0x2b0>)
 80031b8:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80031bc:	461a      	mov	r2, r3
 80031be:	4933      	ldr	r1, [pc, #204]	@ (800328c <OLED_Print_Data_Task+0x2cc>)
 80031c0:	482e      	ldr	r0, [pc, #184]	@ (800327c <OLED_Print_Data_Task+0x2bc>)
 80031c2:	f00e fe91 	bl	8011ee8 <siprintf>
				Display_SetCursor(73, 17);
 80031c6:	2111      	movs	r1, #17
 80031c8:	2049      	movs	r0, #73	@ 0x49
 80031ca:	f7fe f807 	bl	80011dc <Display_SetCursor>
				Display_WriteString((char*)Display.auxString, Font_7x10, SSD1306_COLOR_WHITE);
 80031ce:	4a2c      	ldr	r2, [pc, #176]	@ (8003280 <OLED_Print_Data_Task+0x2c0>)
 80031d0:	2301      	movs	r3, #1
 80031d2:	ca06      	ldmia	r2, {r1, r2}
 80031d4:	4829      	ldr	r0, [pc, #164]	@ (800327c <OLED_Print_Data_Task+0x2bc>)
 80031d6:	f7fe f981 	bl	80014dc <Display_WriteString>
				sprintf((char*)Display.auxString, "Gy:%d", MPU6050.Gyro.y);
 80031da:	4b25      	ldr	r3, [pc, #148]	@ (8003270 <OLED_Print_Data_Task+0x2b0>)
 80031dc:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80031e0:	461a      	mov	r2, r3
 80031e2:	492b      	ldr	r1, [pc, #172]	@ (8003290 <OLED_Print_Data_Task+0x2d0>)
 80031e4:	4825      	ldr	r0, [pc, #148]	@ (800327c <OLED_Print_Data_Task+0x2bc>)
 80031e6:	f00e fe7f 	bl	8011ee8 <siprintf>
				Display_SetCursor(73, 34);
 80031ea:	2122      	movs	r1, #34	@ 0x22
 80031ec:	2049      	movs	r0, #73	@ 0x49
 80031ee:	f7fd fff5 	bl	80011dc <Display_SetCursor>
				Display_WriteString((char*)Display.auxString, Font_7x10, SSD1306_COLOR_WHITE);
 80031f2:	4a23      	ldr	r2, [pc, #140]	@ (8003280 <OLED_Print_Data_Task+0x2c0>)
 80031f4:	2301      	movs	r3, #1
 80031f6:	ca06      	ldmia	r2, {r1, r2}
 80031f8:	4820      	ldr	r0, [pc, #128]	@ (800327c <OLED_Print_Data_Task+0x2bc>)
 80031fa:	f7fe f96f 	bl	80014dc <Display_WriteString>
				sprintf((char*)Display.auxString, "Gz:%d", MPU6050.Gyro.z);
 80031fe:	4b1c      	ldr	r3, [pc, #112]	@ (8003270 <OLED_Print_Data_Task+0x2b0>)
 8003200:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8003204:	461a      	mov	r2, r3
 8003206:	4923      	ldr	r1, [pc, #140]	@ (8003294 <OLED_Print_Data_Task+0x2d4>)
 8003208:	481c      	ldr	r0, [pc, #112]	@ (800327c <OLED_Print_Data_Task+0x2bc>)
 800320a:	f00e fe6d 	bl	8011ee8 <siprintf>
				Display_SetCursor(73, 51);
 800320e:	2133      	movs	r1, #51	@ 0x33
 8003210:	2049      	movs	r0, #73	@ 0x49
 8003212:	f7fd ffe3 	bl	80011dc <Display_SetCursor>
				Display_WriteString((char*)Display.auxString, Font_7x10, SSD1306_COLOR_WHITE);
 8003216:	4a1a      	ldr	r2, [pc, #104]	@ (8003280 <OLED_Print_Data_Task+0x2c0>)
 8003218:	2301      	movs	r3, #1
 800321a:	ca06      	ldmia	r2, {r1, r2}
 800321c:	4817      	ldr	r0, [pc, #92]	@ (800327c <OLED_Print_Data_Task+0x2bc>)
 800321e:	f7fe f95d 	bl	80014dc <Display_WriteString>
			}

			break;
 8003222:	e001      	b.n	8003228 <OLED_Print_Data_Task+0x268>
			break;
 8003224:	bf00      	nop
 8003226:	e000      	b.n	800322a <OLED_Print_Data_Task+0x26a>
			break;
 8003228:	bf00      	nop
		}
	}

	is30s--;
 800322a:	4b1b      	ldr	r3, [pc, #108]	@ (8003298 <OLED_Print_Data_Task+0x2d8>)
 800322c:	881b      	ldrh	r3, [r3, #0]
 800322e:	3b01      	subs	r3, #1
 8003230:	b29a      	uxth	r2, r3
 8003232:	4b19      	ldr	r3, [pc, #100]	@ (8003298 <OLED_Print_Data_Task+0x2d8>)
 8003234:	801a      	strh	r2, [r3, #0]
	if(!is30s){
 8003236:	4b18      	ldr	r3, [pc, #96]	@ (8003298 <OLED_Print_Data_Task+0x2d8>)
 8003238:	881b      	ldrh	r3, [r3, #0]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d105      	bne.n	800324a <OLED_Print_Data_Task+0x28a>
		is30s = 300;
 800323e:	4b16      	ldr	r3, [pc, #88]	@ (8003298 <OLED_Print_Data_Task+0x2d8>)
 8003240:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003244:	801a      	strh	r2, [r3, #0]
		BateryLevel_Set();
 8003246:	f000 f829 	bl	800329c <BateryLevel_Set>
	}

	Display_I2C_Refresh_Ready(TRUE);
 800324a:	2001      	movs	r0, #1
 800324c:	f7fd ffb6 	bl	80011bc <Display_I2C_Refresh_Ready>
}
 8003250:	bf00      	nop
 8003252:	3708      	adds	r7, #8
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}
 8003258:	20000e24 	.word	0x20000e24
 800325c:	080131d8 	.word	0x080131d8
 8003260:	08012cfc 	.word	0x08012cfc
 8003264:	20001238 	.word	0x20001238
 8003268:	08012ca0 	.word	0x08012ca0
 800326c:	08012c70 	.word	0x08012c70
 8003270:	20000d60 	.word	0x20000d60
 8003274:	411ccccd 	.word	0x411ccccd
 8003278:	080129b4 	.word	0x080129b4
 800327c:	2000122c 	.word	0x2000122c
 8003280:	20000000 	.word	0x20000000
 8003284:	080129bc 	.word	0x080129bc
 8003288:	080129c4 	.word	0x080129c4
 800328c:	080129cc 	.word	0x080129cc
 8003290:	080129d4 	.word	0x080129d4
 8003294:	080129dc 	.word	0x080129dc
 8003298:	20000010 	.word	0x20000010

0800329c <BateryLevel_Set>:

void BateryLevel_Set(){
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af02      	add	r7, sp, #8
	Display_DrawFilledRectangle(3, 4, 6, 9, SSD1306_COLOR_BLACK);
 80032a2:	2300      	movs	r3, #0
 80032a4:	9300      	str	r3, [sp, #0]
 80032a6:	2309      	movs	r3, #9
 80032a8:	2206      	movs	r2, #6
 80032aa:	2104      	movs	r1, #4
 80032ac:	2003      	movs	r0, #3
 80032ae:	f7fe f9e9 	bl	8001684 <Display_DrawFilledRectangle>
	if(Analog.value[8] >= 3900){
 80032b2:	4b1f      	ldr	r3, [pc, #124]	@ (8003330 <BateryLevel_Set+0x94>)
 80032b4:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80032b6:	f640 723b 	movw	r2, #3899	@ 0xf3b
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d908      	bls.n	80032d0 <BateryLevel_Set+0x34>
		Display_DrawFilledRectangle(3, 4, 6, 9, SSD1306_COLOR_WHITE);
 80032be:	2301      	movs	r3, #1
 80032c0:	9300      	str	r3, [sp, #0]
 80032c2:	2309      	movs	r3, #9
 80032c4:	2206      	movs	r2, #6
 80032c6:	2104      	movs	r1, #4
 80032c8:	2003      	movs	r0, #3
 80032ca:	f7fe f9db 	bl	8001684 <Display_DrawFilledRectangle>
	}else if(Analog.value[8] >= 2047){
		Display_DrawFilledRectangle(3, 8, 6, 5, SSD1306_COLOR_WHITE);
	}else if(Analog.value[8] >= 1023){
		Display_DrawFilledRectangle(3, 11, 6, 2, SSD1306_COLOR_WHITE);
	}
}
 80032ce:	e02b      	b.n	8003328 <BateryLevel_Set+0x8c>
	}else if(Analog.value[8] >= 3000){
 80032d0:	4b17      	ldr	r3, [pc, #92]	@ (8003330 <BateryLevel_Set+0x94>)
 80032d2:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80032d4:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 80032d8:	4293      	cmp	r3, r2
 80032da:	d908      	bls.n	80032ee <BateryLevel_Set+0x52>
		Display_DrawFilledRectangle(3, 6, 6, 7, SSD1306_COLOR_WHITE);
 80032dc:	2301      	movs	r3, #1
 80032de:	9300      	str	r3, [sp, #0]
 80032e0:	2307      	movs	r3, #7
 80032e2:	2206      	movs	r2, #6
 80032e4:	2106      	movs	r1, #6
 80032e6:	2003      	movs	r0, #3
 80032e8:	f7fe f9cc 	bl	8001684 <Display_DrawFilledRectangle>
}
 80032ec:	e01c      	b.n	8003328 <BateryLevel_Set+0x8c>
	}else if(Analog.value[8] >= 2047){
 80032ee:	4b10      	ldr	r3, [pc, #64]	@ (8003330 <BateryLevel_Set+0x94>)
 80032f0:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80032f2:	f240 72fe 	movw	r2, #2046	@ 0x7fe
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d908      	bls.n	800330c <BateryLevel_Set+0x70>
		Display_DrawFilledRectangle(3, 8, 6, 5, SSD1306_COLOR_WHITE);
 80032fa:	2301      	movs	r3, #1
 80032fc:	9300      	str	r3, [sp, #0]
 80032fe:	2305      	movs	r3, #5
 8003300:	2206      	movs	r2, #6
 8003302:	2108      	movs	r1, #8
 8003304:	2003      	movs	r0, #3
 8003306:	f7fe f9bd 	bl	8001684 <Display_DrawFilledRectangle>
}
 800330a:	e00d      	b.n	8003328 <BateryLevel_Set+0x8c>
	}else if(Analog.value[8] >= 1023){
 800330c:	4b08      	ldr	r3, [pc, #32]	@ (8003330 <BateryLevel_Set+0x94>)
 800330e:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8003310:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 8003314:	4293      	cmp	r3, r2
 8003316:	d907      	bls.n	8003328 <BateryLevel_Set+0x8c>
		Display_DrawFilledRectangle(3, 11, 6, 2, SSD1306_COLOR_WHITE);
 8003318:	2301      	movs	r3, #1
 800331a:	9300      	str	r3, [sp, #0]
 800331c:	2302      	movs	r3, #2
 800331e:	2206      	movs	r2, #6
 8003320:	210b      	movs	r1, #11
 8003322:	2003      	movs	r0, #3
 8003324:	f7fe f9ae 	bl	8001684 <Display_DrawFilledRectangle>
}
 8003328:	bf00      	nop
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	20001238 	.word	0x20001238

08003334 <decodeOn_USB>:

void decodeOn_USB(s_commData *data){
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
	switch(RXBUF[RXCMD]){
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	785b      	ldrb	r3, [r3, #1]
 8003340:	3302      	adds	r3, #2
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	4413      	add	r3, r2
 8003346:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 800334a:	2bf1      	cmp	r3, #241	@ 0xf1
 800334c:	f000 81c8 	beq.w	80036e0 <decodeOn_USB+0x3ac>
 8003350:	2bf1      	cmp	r3, #241	@ 0xf1
 8003352:	f300 81be 	bgt.w	80036d2 <decodeOn_USB+0x39e>
 8003356:	2bf0      	cmp	r3, #240	@ 0xf0
 8003358:	d036      	beq.n	80033c8 <decodeOn_USB+0x94>
 800335a:	2bf0      	cmp	r3, #240	@ 0xf0
 800335c:	f300 81b9 	bgt.w	80036d2 <decodeOn_USB+0x39e>
 8003360:	2bb1      	cmp	r3, #177	@ 0xb1
 8003362:	dc2d      	bgt.n	80033c0 <decodeOn_USB+0x8c>
 8003364:	2ba0      	cmp	r3, #160	@ 0xa0
 8003366:	f2c0 81b4 	blt.w	80036d2 <decodeOn_USB+0x39e>
 800336a:	3ba0      	subs	r3, #160	@ 0xa0
 800336c:	2b11      	cmp	r3, #17
 800336e:	f200 81b0 	bhi.w	80036d2 <decodeOn_USB+0x39e>
 8003372:	a201      	add	r2, pc, #4	@ (adr r2, 8003378 <decodeOn_USB+0x44>)
 8003374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003378:	080033e3 	.word	0x080033e3
 800337c:	08003459 	.word	0x08003459
 8003380:	080034b3 	.word	0x080034b3
 8003384:	08003547 	.word	0x08003547
 8003388:	0800360d 	.word	0x0800360d
 800338c:	080036d3 	.word	0x080036d3
 8003390:	080036d3 	.word	0x080036d3
 8003394:	080036d3 	.word	0x080036d3
 8003398:	080036d3 	.word	0x080036d3
 800339c:	080036d3 	.word	0x080036d3
 80033a0:	080036d3 	.word	0x080036d3
 80033a4:	080036d3 	.word	0x080036d3
 80033a8:	080036d3 	.word	0x080036d3
 80033ac:	080036d3 	.word	0x080036d3
 80033b0:	080036d3 	.word	0x080036d3
 80033b4:	080036d3 	.word	0x080036d3
 80033b8:	080036d3 	.word	0x080036d3
 80033bc:	080036e5 	.word	0x080036e5
 80033c0:	2bde      	cmp	r3, #222	@ 0xde
 80033c2:	f000 8191 	beq.w	80036e8 <decodeOn_USB+0x3b4>
 80033c6:	e184      	b.n	80036d2 <decodeOn_USB+0x39e>
	case GETALIVE:
		data->auxBuffer[0] = ACK;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	220d      	movs	r2, #13
 80033cc:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
		comm_sendCMD(data, GETALIVE, &data->auxBuffer[0], 1);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 80033d6:	2301      	movs	r3, #1
 80033d8:	21f0      	movs	r1, #240	@ 0xf0
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f7fe fc6c 	bl	8001cb8 <comm_sendCMD>
		break;
 80033e0:	e183      	b.n	80036ea <decodeOn_USB+0x3b6>
	case FIRMWARE:
		break;
	case USERTEXT:
		break;
	case ADCSINGLE:
		if(RXBUF[RXCMD + 1] <= 8 && RXBUF[RXCMD + 1] >= 0){
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	785b      	ldrb	r3, [r3, #1]
 80033e6:	3303      	adds	r3, #3
 80033e8:	687a      	ldr	r2, [r7, #4]
 80033ea:	4413      	add	r3, r2
 80033ec:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 80033f0:	2b08      	cmp	r3, #8
 80033f2:	d82a      	bhi.n	800344a <decodeOn_USB+0x116>
			decom.ui16[0] = Analog.value[RXBUF[RXCMD + 1]];
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	785b      	ldrb	r3, [r3, #1]
 80033f8:	3303      	adds	r3, #3
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	4413      	add	r3, r2
 80033fe:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8003402:	4a78      	ldr	r2, [pc, #480]	@ (80035e4 <decodeOn_USB+0x2b0>)
 8003404:	3308      	adds	r3, #8
 8003406:	005b      	lsls	r3, r3, #1
 8003408:	4413      	add	r3, r2
 800340a:	885a      	ldrh	r2, [r3, #2]
 800340c:	4b76      	ldr	r3, [pc, #472]	@ (80035e8 <decodeOn_USB+0x2b4>)
 800340e:	801a      	strh	r2, [r3, #0]
			data->auxBuffer[0] = RXBUF[RXCMD + 1];
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	785b      	ldrb	r3, [r3, #1]
 8003414:	3303      	adds	r3, #3
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	4413      	add	r3, r2
 800341a:	f893 2106 	ldrb.w	r2, [r3, #262]	@ 0x106
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
			data->auxBuffer[1] = decom.ui8[0];
 8003424:	4b70      	ldr	r3, [pc, #448]	@ (80035e8 <decodeOn_USB+0x2b4>)
 8003426:	781a      	ldrb	r2, [r3, #0]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f883 2211 	strb.w	r2, [r3, #529]	@ 0x211
			data->auxBuffer[2] = decom.ui8[1];
 800342e:	4b6e      	ldr	r3, [pc, #440]	@ (80035e8 <decodeOn_USB+0x2b4>)
 8003430:	785a      	ldrb	r2, [r3, #1]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f883 2212 	strb.w	r2, [r3, #530]	@ 0x212
			comm_sendCMD(data, ADCSINGLE, &data->auxBuffer[0], 3);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 800343e:	2303      	movs	r3, #3
 8003440:	21a0      	movs	r1, #160	@ 0xa0
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f7fe fc38 	bl	8001cb8 <comm_sendCMD>
		}else{
			comm_sendCMD(data, SYSWARNING, (uint8_t*)"NO ADC", 6);
		}
		break;
 8003448:	e14f      	b.n	80036ea <decodeOn_USB+0x3b6>
			comm_sendCMD(data, SYSWARNING, (uint8_t*)"NO ADC", 6);
 800344a:	2306      	movs	r3, #6
 800344c:	4a67      	ldr	r2, [pc, #412]	@ (80035ec <decodeOn_USB+0x2b8>)
 800344e:	21ef      	movs	r1, #239	@ 0xef
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f7fe fc31 	bl	8001cb8 <comm_sendCMD>
		break;
 8003456:	e148      	b.n	80036ea <decodeOn_USB+0x3b6>
	case ADCBLOCK:
		for(uint8_t i = 0; i < ADC_NUM_SENSORS; i++){
 8003458:	2300      	movs	r3, #0
 800345a:	73fb      	strb	r3, [r7, #15]
 800345c:	e01d      	b.n	800349a <decodeOn_USB+0x166>
			decom.ui16[0] = Analog.value[i];
 800345e:	7bfb      	ldrb	r3, [r7, #15]
 8003460:	4a60      	ldr	r2, [pc, #384]	@ (80035e4 <decodeOn_USB+0x2b0>)
 8003462:	3308      	adds	r3, #8
 8003464:	005b      	lsls	r3, r3, #1
 8003466:	4413      	add	r3, r2
 8003468:	885a      	ldrh	r2, [r3, #2]
 800346a:	4b5f      	ldr	r3, [pc, #380]	@ (80035e8 <decodeOn_USB+0x2b4>)
 800346c:	801a      	strh	r2, [r3, #0]
			data->auxBuffer[i*2] = decom.ui8[0];
 800346e:	7bfb      	ldrb	r3, [r7, #15]
 8003470:	005b      	lsls	r3, r3, #1
 8003472:	4a5d      	ldr	r2, [pc, #372]	@ (80035e8 <decodeOn_USB+0x2b4>)
 8003474:	7811      	ldrb	r1, [r2, #0]
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	4413      	add	r3, r2
 800347a:	460a      	mov	r2, r1
 800347c:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
			data->auxBuffer[i*2+1] = decom.ui8[1];
 8003480:	7bfb      	ldrb	r3, [r7, #15]
 8003482:	005b      	lsls	r3, r3, #1
 8003484:	3301      	adds	r3, #1
 8003486:	4a58      	ldr	r2, [pc, #352]	@ (80035e8 <decodeOn_USB+0x2b4>)
 8003488:	7851      	ldrb	r1, [r2, #1]
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	4413      	add	r3, r2
 800348e:	460a      	mov	r2, r1
 8003490:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
		for(uint8_t i = 0; i < ADC_NUM_SENSORS; i++){
 8003494:	7bfb      	ldrb	r3, [r7, #15]
 8003496:	3301      	adds	r3, #1
 8003498:	73fb      	strb	r3, [r7, #15]
 800349a:	7bfb      	ldrb	r3, [r7, #15]
 800349c:	2b08      	cmp	r3, #8
 800349e:	d9de      	bls.n	800345e <decodeOn_USB+0x12a>
		}
		comm_sendCMD(data, ADCBLOCK, data->auxBuffer, 17);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 80034a6:	2311      	movs	r3, #17
 80034a8:	21a1      	movs	r1, #161	@ 0xa1
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f7fe fc04 	bl	8001cb8 <comm_sendCMD>
		break;
 80034b0:	e11b      	b.n	80036ea <decodeOn_USB+0x3b6>
	case DEBUGER:

		break;
	case SETMOTOR:
		if(RXBUF[RXCMD + 1] == MOTOR_L){
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	785b      	ldrb	r3, [r3, #1]
 80034b6:	3303      	adds	r3, #3
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	4413      	add	r3, r2
 80034bc:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d117      	bne.n	80034f4 <decodeOn_USB+0x1c0>
			Motor_Set_Speed(&MotorL, RXBUF[RXCMD + 2]);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	785b      	ldrb	r3, [r3, #1]
 80034c8:	3304      	adds	r3, #4
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	4413      	add	r3, r2
 80034ce:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 80034d2:	b25b      	sxtb	r3, r3
 80034d4:	4619      	mov	r1, r3
 80034d6:	4846      	ldr	r0, [pc, #280]	@ (80035f0 <decodeOn_USB+0x2bc>)
 80034d8:	f7fe f9b0 	bl	800183c <Motor_Set_Speed>
			USB.data.auxBuffer[0] = ACK;
 80034dc:	4b45      	ldr	r3, [pc, #276]	@ (80035f4 <decodeOn_USB+0x2c0>)
 80034de:	220d      	movs	r2, #13
 80034e0:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
			comm_sendCMD(data, SETMOTOR, data->auxBuffer, 1);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 80034ea:	2301      	movs	r3, #1
 80034ec:	21a2      	movs	r1, #162	@ 0xa2
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f7fe fbe2 	bl	8001cb8 <comm_sendCMD>
		}
		if(RXBUF[RXCMD + 1] == MOTOR_R){
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	785b      	ldrb	r3, [r3, #1]
 80034f8:	3303      	adds	r3, #3
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	4413      	add	r3, r2
 80034fe:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8003502:	2b01      	cmp	r3, #1
 8003504:	d118      	bne.n	8003538 <decodeOn_USB+0x204>
			Motor_Set_Speed(&MotorR, RXBUF[RXCMD + 2]);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	785b      	ldrb	r3, [r3, #1]
 800350a:	3304      	adds	r3, #4
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	4413      	add	r3, r2
 8003510:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8003514:	b25b      	sxtb	r3, r3
 8003516:	4619      	mov	r1, r3
 8003518:	4837      	ldr	r0, [pc, #220]	@ (80035f8 <decodeOn_USB+0x2c4>)
 800351a:	f7fe f98f 	bl	800183c <Motor_Set_Speed>
			USB.data.auxBuffer[0] = ACK;
 800351e:	4b35      	ldr	r3, [pc, #212]	@ (80035f4 <decodeOn_USB+0x2c0>)
 8003520:	220d      	movs	r2, #13
 8003522:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
			comm_sendCMD(data, SETMOTOR, data->auxBuffer, 1);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 800352c:	2301      	movs	r3, #1
 800352e:	21a2      	movs	r1, #162	@ 0xa2
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f7fe fbc1 	bl	8001cb8 <comm_sendCMD>
		}else{
			comm_sendCMD(data, SYSWARNING, (uint8_t*)"NO MOTOR", 8);
		}
		break;
 8003536:	e0d8      	b.n	80036ea <decodeOn_USB+0x3b6>
			comm_sendCMD(data, SYSWARNING, (uint8_t*)"NO MOTOR", 8);
 8003538:	2308      	movs	r3, #8
 800353a:	4a30      	ldr	r2, [pc, #192]	@ (80035fc <decodeOn_USB+0x2c8>)
 800353c:	21ef      	movs	r1, #239	@ 0xef
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f7fe fbba 	bl	8001cb8 <comm_sendCMD>
		break;
 8003544:	e0d1      	b.n	80036ea <decodeOn_USB+0x3b6>
	case GET_ENCODER:
		if(RXBUF[RXCMD + 1] == ENCODER_L){
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	785b      	ldrb	r3, [r3, #1]
 800354a:	3303      	adds	r3, #3
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	4413      	add	r3, r2
 8003550:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8003554:	2b00      	cmp	r3, #0
 8003556:	d11a      	bne.n	800358e <decodeOn_USB+0x25a>
			decom.ui16[0] = EncoderL.pps;
 8003558:	4b29      	ldr	r3, [pc, #164]	@ (8003600 <decodeOn_USB+0x2cc>)
 800355a:	891a      	ldrh	r2, [r3, #8]
 800355c:	4b22      	ldr	r3, [pc, #136]	@ (80035e8 <decodeOn_USB+0x2b4>)
 800355e:	801a      	strh	r2, [r3, #0]
			data->auxBuffer[0] = ENCODER_L;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2200      	movs	r2, #0
 8003564:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
			data->auxBuffer[1] = decom.ui8[0];
 8003568:	4b1f      	ldr	r3, [pc, #124]	@ (80035e8 <decodeOn_USB+0x2b4>)
 800356a:	781a      	ldrb	r2, [r3, #0]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f883 2211 	strb.w	r2, [r3, #529]	@ 0x211
			data->auxBuffer[2] = decom.ui8[1];
 8003572:	4b1d      	ldr	r3, [pc, #116]	@ (80035e8 <decodeOn_USB+0x2b4>)
 8003574:	785a      	ldrb	r2, [r3, #1]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f883 2212 	strb.w	r2, [r3, #530]	@ 0x212
			comm_sendCMD(data, GET_ENCODER, &data->auxBuffer[0], 3);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 8003582:	2303      	movs	r3, #3
 8003584:	21a3      	movs	r1, #163	@ 0xa3
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f7fe fb96 	bl	8001cb8 <comm_sendCMD>
			data->auxBuffer[2] = decom.ui8[1];
			comm_sendCMD(data, GET_ENCODER, &data->auxBuffer[0], 3);
		}else{
			comm_sendCMD(data, SYSWARNING, (uint8_t*)"NO ENCODER", 10);
		}
		break;
 800358c:	e0ad      	b.n	80036ea <decodeOn_USB+0x3b6>
		}else if(RXBUF[RXCMD + 1] == ENCODER_R){
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	785b      	ldrb	r3, [r3, #1]
 8003592:	3303      	adds	r3, #3
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	4413      	add	r3, r2
 8003598:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 800359c:	2b01      	cmp	r3, #1
 800359e:	d11a      	bne.n	80035d6 <decodeOn_USB+0x2a2>
			decom.ui16[0] = EncoderR.pps;
 80035a0:	4b18      	ldr	r3, [pc, #96]	@ (8003604 <decodeOn_USB+0x2d0>)
 80035a2:	891a      	ldrh	r2, [r3, #8]
 80035a4:	4b10      	ldr	r3, [pc, #64]	@ (80035e8 <decodeOn_USB+0x2b4>)
 80035a6:	801a      	strh	r2, [r3, #0]
			data->auxBuffer[0] = ENCODER_R;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
			data->auxBuffer[1] = decom.ui8[0];
 80035b0:	4b0d      	ldr	r3, [pc, #52]	@ (80035e8 <decodeOn_USB+0x2b4>)
 80035b2:	781a      	ldrb	r2, [r3, #0]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f883 2211 	strb.w	r2, [r3, #529]	@ 0x211
			data->auxBuffer[2] = decom.ui8[1];
 80035ba:	4b0b      	ldr	r3, [pc, #44]	@ (80035e8 <decodeOn_USB+0x2b4>)
 80035bc:	785a      	ldrb	r2, [r3, #1]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f883 2212 	strb.w	r2, [r3, #530]	@ 0x212
			comm_sendCMD(data, GET_ENCODER, &data->auxBuffer[0], 3);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 80035ca:	2303      	movs	r3, #3
 80035cc:	21a3      	movs	r1, #163	@ 0xa3
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f7fe fb72 	bl	8001cb8 <comm_sendCMD>
		break;
 80035d4:	e089      	b.n	80036ea <decodeOn_USB+0x3b6>
			comm_sendCMD(data, SYSWARNING, (uint8_t*)"NO ENCODER", 10);
 80035d6:	230a      	movs	r3, #10
 80035d8:	4a0b      	ldr	r2, [pc, #44]	@ (8003608 <decodeOn_USB+0x2d4>)
 80035da:	21ef      	movs	r1, #239	@ 0xef
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f7fe fb6b 	bl	8001cb8 <comm_sendCMD>
		break;
 80035e2:	e082      	b.n	80036ea <decodeOn_USB+0x3b6>
 80035e4:	20001238 	.word	0x20001238
 80035e8:	20000d10 	.word	0x20000d10
 80035ec:	080129e4 	.word	0x080129e4
 80035f0:	20000d18 	.word	0x20000d18
 80035f4:	2000125c 	.word	0x2000125c
 80035f8:	20000d30 	.word	0x20000d30
 80035fc:	080129ec 	.word	0x080129ec
 8003600:	20000d48 	.word	0x20000d48
 8003604:	20000d54 	.word	0x20000d54
 8003608:	080129f8 	.word	0x080129f8
	case MPUBLOCK:
		decom.i16[0] = MPU6050.Acc.x;
 800360c:	4b39      	ldr	r3, [pc, #228]	@ (80036f4 <decodeOn_USB+0x3c0>)
 800360e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003612:	4b39      	ldr	r3, [pc, #228]	@ (80036f8 <decodeOn_USB+0x3c4>)
 8003614:	801a      	strh	r2, [r3, #0]
		data->auxBuffer[0] = decom.ui8[0];
 8003616:	4b38      	ldr	r3, [pc, #224]	@ (80036f8 <decodeOn_USB+0x3c4>)
 8003618:	781a      	ldrb	r2, [r3, #0]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
		data->auxBuffer[1] = decom.ui8[1];
 8003620:	4b35      	ldr	r3, [pc, #212]	@ (80036f8 <decodeOn_USB+0x3c4>)
 8003622:	785a      	ldrb	r2, [r3, #1]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f883 2211 	strb.w	r2, [r3, #529]	@ 0x211
		decom.i16[0] = MPU6050.Acc.y;
 800362a:	4b32      	ldr	r3, [pc, #200]	@ (80036f4 <decodeOn_USB+0x3c0>)
 800362c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8003630:	4b31      	ldr	r3, [pc, #196]	@ (80036f8 <decodeOn_USB+0x3c4>)
 8003632:	801a      	strh	r2, [r3, #0]
		data->auxBuffer[2] = decom.ui8[0];
 8003634:	4b30      	ldr	r3, [pc, #192]	@ (80036f8 <decodeOn_USB+0x3c4>)
 8003636:	781a      	ldrb	r2, [r3, #0]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	f883 2212 	strb.w	r2, [r3, #530]	@ 0x212
		data->auxBuffer[3] = decom.ui8[1];
 800363e:	4b2e      	ldr	r3, [pc, #184]	@ (80036f8 <decodeOn_USB+0x3c4>)
 8003640:	785a      	ldrb	r2, [r3, #1]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	f883 2213 	strb.w	r2, [r3, #531]	@ 0x213
		decom.i16[0] = MPU6050.Acc.z;
 8003648:	4b2a      	ldr	r3, [pc, #168]	@ (80036f4 <decodeOn_USB+0x3c0>)
 800364a:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800364e:	4b2a      	ldr	r3, [pc, #168]	@ (80036f8 <decodeOn_USB+0x3c4>)
 8003650:	801a      	strh	r2, [r3, #0]
		data->auxBuffer[4] = decom.ui8[0];
 8003652:	4b29      	ldr	r3, [pc, #164]	@ (80036f8 <decodeOn_USB+0x3c4>)
 8003654:	781a      	ldrb	r2, [r3, #0]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f883 2214 	strb.w	r2, [r3, #532]	@ 0x214
		data->auxBuffer[5] = decom.ui8[1];
 800365c:	4b26      	ldr	r3, [pc, #152]	@ (80036f8 <decodeOn_USB+0x3c4>)
 800365e:	785a      	ldrb	r2, [r3, #1]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f883 2215 	strb.w	r2, [r3, #533]	@ 0x215
		decom.i16[0] = MPU6050.Gyro.x;
 8003666:	4b23      	ldr	r3, [pc, #140]	@ (80036f4 <decodeOn_USB+0x3c0>)
 8003668:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 800366c:	4b22      	ldr	r3, [pc, #136]	@ (80036f8 <decodeOn_USB+0x3c4>)
 800366e:	801a      	strh	r2, [r3, #0]
		data->auxBuffer[6] = decom.ui8[0];
 8003670:	4b21      	ldr	r3, [pc, #132]	@ (80036f8 <decodeOn_USB+0x3c4>)
 8003672:	781a      	ldrb	r2, [r3, #0]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f883 2216 	strb.w	r2, [r3, #534]	@ 0x216
		data->auxBuffer[7] = decom.ui8[1];
 800367a:	4b1f      	ldr	r3, [pc, #124]	@ (80036f8 <decodeOn_USB+0x3c4>)
 800367c:	785a      	ldrb	r2, [r3, #1]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f883 2217 	strb.w	r2, [r3, #535]	@ 0x217
		decom.i16[0] = MPU6050.Gyro.y;
 8003684:	4b1b      	ldr	r3, [pc, #108]	@ (80036f4 <decodeOn_USB+0x3c0>)
 8003686:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 800368a:	4b1b      	ldr	r3, [pc, #108]	@ (80036f8 <decodeOn_USB+0x3c4>)
 800368c:	801a      	strh	r2, [r3, #0]
		data->auxBuffer[8] = decom.ui8[0];
 800368e:	4b1a      	ldr	r3, [pc, #104]	@ (80036f8 <decodeOn_USB+0x3c4>)
 8003690:	781a      	ldrb	r2, [r3, #0]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f883 2218 	strb.w	r2, [r3, #536]	@ 0x218
		data->auxBuffer[9] = decom.ui8[1];
 8003698:	4b17      	ldr	r3, [pc, #92]	@ (80036f8 <decodeOn_USB+0x3c4>)
 800369a:	785a      	ldrb	r2, [r3, #1]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	f883 2219 	strb.w	r2, [r3, #537]	@ 0x219
		decom.i16[0] = MPU6050.Gyro.z;
 80036a2:	4b14      	ldr	r3, [pc, #80]	@ (80036f4 <decodeOn_USB+0x3c0>)
 80036a4:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 80036a8:	4b13      	ldr	r3, [pc, #76]	@ (80036f8 <decodeOn_USB+0x3c4>)
 80036aa:	801a      	strh	r2, [r3, #0]
		data->auxBuffer[10] = decom.ui8[0];
 80036ac:	4b12      	ldr	r3, [pc, #72]	@ (80036f8 <decodeOn_USB+0x3c4>)
 80036ae:	781a      	ldrb	r2, [r3, #0]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	f883 221a 	strb.w	r2, [r3, #538]	@ 0x21a
		data->auxBuffer[11] = decom.ui8[1];
 80036b6:	4b10      	ldr	r3, [pc, #64]	@ (80036f8 <decodeOn_USB+0x3c4>)
 80036b8:	785a      	ldrb	r2, [r3, #1]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	f883 221b 	strb.w	r2, [r3, #539]	@ 0x21b
		comm_sendCMD(data, MPUBLOCK, data->auxBuffer, 12);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 80036c6:	230c      	movs	r3, #12
 80036c8:	21a4      	movs	r1, #164	@ 0xa4
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f7fe faf4 	bl	8001cb8 <comm_sendCMD>
		break;
 80036d0:	e00b      	b.n	80036ea <decodeOn_USB+0x3b6>
	default:
		comm_sendCMD(data, SYSWARNING, (uint8_t*)"NO CMD", 6);
 80036d2:	2306      	movs	r3, #6
 80036d4:	4a09      	ldr	r2, [pc, #36]	@ (80036fc <decodeOn_USB+0x3c8>)
 80036d6:	21ef      	movs	r1, #239	@ 0xef
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f7fe faed 	bl	8001cb8 <comm_sendCMD>
		break;
 80036de:	e004      	b.n	80036ea <decodeOn_USB+0x3b6>
		break;
 80036e0:	bf00      	nop
 80036e2:	e002      	b.n	80036ea <decodeOn_USB+0x3b6>
		break;
 80036e4:	bf00      	nop
 80036e6:	e000      	b.n	80036ea <decodeOn_USB+0x3b6>
		break;
 80036e8:	bf00      	nop
	}
}
 80036ea:	bf00      	nop
 80036ec:	3710      	adds	r7, #16
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	20000d60 	.word	0x20000d60
 80036f8:	20000d10 	.word	0x20000d10
 80036fc:	08012a04 	.word	0x08012a04

08003700 <onKeyChangeState>:

void onKeyChangeState(e_Estados value){
 8003700:	b480      	push	{r7}
 8003702:	b083      	sub	sp, #12
 8003704:	af00      	add	r7, sp, #0
 8003706:	4603      	mov	r3, r0
 8003708:	71fb      	strb	r3, [r7, #7]

}
 800370a:	bf00      	nop
 800370c:	370c      	adds	r7, #12
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr
	...

08003718 <onESP01ChangeState>:

void onESP01ChangeState(_eESP01STATUS esp01State) {
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
 800371e:	4603      	mov	r3, r0
 8003720:	71fb      	strb	r3, [r7, #7]
   switch (esp01State) {
 8003722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003726:	3301      	adds	r3, #1
 8003728:	2b0c      	cmp	r3, #12
 800372a:	d85e      	bhi.n	80037ea <onESP01ChangeState+0xd2>
 800372c:	a201      	add	r2, pc, #4	@ (adr r2, 8003734 <onESP01ChangeState+0x1c>)
 800372e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003732:	bf00      	nop
 8003734:	08003769 	.word	0x08003769
 8003738:	08003773 	.word	0x08003773
 800373c:	0800377d 	.word	0x0800377d
 8003740:	08003787 	.word	0x08003787
 8003744:	08003791 	.word	0x08003791
 8003748:	0800379b 	.word	0x0800379b
 800374c:	080037a5 	.word	0x080037a5
 8003750:	080037af 	.word	0x080037af
 8003754:	080037b9 	.word	0x080037b9
 8003758:	080037c3 	.word	0x080037c3
 800375c:	080037cd 	.word	0x080037cd
 8003760:	080037d7 	.word	0x080037d7
 8003764:	080037e1 	.word	0x080037e1
        case ESP01_NOT_INIT:
            sprintf((char*)USB.data.auxBuffer, "ESP01: No inicializado");
 8003768:	4929      	ldr	r1, [pc, #164]	@ (8003810 <onESP01ChangeState+0xf8>)
 800376a:	482a      	ldr	r0, [pc, #168]	@ (8003814 <onESP01ChangeState+0xfc>)
 800376c:	f00e fbbc 	bl	8011ee8 <siprintf>
            break;
 8003770:	e040      	b.n	80037f4 <onESP01ChangeState+0xdc>
        case ESP01_WIFI_DISCONNECTED:
            sprintf((char*)USB.data.auxBuffer, "ESP01: WiFi desconectado");
 8003772:	4929      	ldr	r1, [pc, #164]	@ (8003818 <onESP01ChangeState+0x100>)
 8003774:	4827      	ldr	r0, [pc, #156]	@ (8003814 <onESP01ChangeState+0xfc>)
 8003776:	f00e fbb7 	bl	8011ee8 <siprintf>
            break;
 800377a:	e03b      	b.n	80037f4 <onESP01ChangeState+0xdc>
        case ESP01_WIFI_NOT_SETED:
            sprintf((char*)USB.data.auxBuffer, "ESP01: WiFi no configurado");
 800377c:	4927      	ldr	r1, [pc, #156]	@ (800381c <onESP01ChangeState+0x104>)
 800377e:	4825      	ldr	r0, [pc, #148]	@ (8003814 <onESP01ChangeState+0xfc>)
 8003780:	f00e fbb2 	bl	8011ee8 <siprintf>
            break;
 8003784:	e036      	b.n	80037f4 <onESP01ChangeState+0xdc>
        case ESP01_WIFI_CONNECTING_WIFI:
            sprintf((char*)USB.data.auxBuffer, "ESP01: Conectando a WiFi...");
 8003786:	4926      	ldr	r1, [pc, #152]	@ (8003820 <onESP01ChangeState+0x108>)
 8003788:	4822      	ldr	r0, [pc, #136]	@ (8003814 <onESP01ChangeState+0xfc>)
 800378a:	f00e fbad 	bl	8011ee8 <siprintf>
            break;
 800378e:	e031      	b.n	80037f4 <onESP01ChangeState+0xdc>
        case ESP01_WIFI_CONNECTED:
            sprintf((char*)USB.data.auxBuffer, "ESP01: WiFi conectado");
 8003790:	4924      	ldr	r1, [pc, #144]	@ (8003824 <onESP01ChangeState+0x10c>)
 8003792:	4820      	ldr	r0, [pc, #128]	@ (8003814 <onESP01ChangeState+0xfc>)
 8003794:	f00e fba8 	bl	8011ee8 <siprintf>
            break;
 8003798:	e02c      	b.n	80037f4 <onESP01ChangeState+0xdc>
        case ESP01_WIFI_NEW_IP:
            sprintf((char*)USB.data.auxBuffer, "ESP01: Nueva IP asignada");
 800379a:	4923      	ldr	r1, [pc, #140]	@ (8003828 <onESP01ChangeState+0x110>)
 800379c:	481d      	ldr	r0, [pc, #116]	@ (8003814 <onESP01ChangeState+0xfc>)
 800379e:	f00e fba3 	bl	8011ee8 <siprintf>
            break;
 80037a2:	e027      	b.n	80037f4 <onESP01ChangeState+0xdc>
        case ESP01_UDPTCP_DISCONNECTED:
            sprintf((char*)USB.data.auxBuffer, "ESP01: UDP/TCP desconectado");
 80037a4:	4921      	ldr	r1, [pc, #132]	@ (800382c <onESP01ChangeState+0x114>)
 80037a6:	481b      	ldr	r0, [pc, #108]	@ (8003814 <onESP01ChangeState+0xfc>)
 80037a8:	f00e fb9e 	bl	8011ee8 <siprintf>
            break;
 80037ac:	e022      	b.n	80037f4 <onESP01ChangeState+0xdc>
        case ESP01_UDPTCP_CONNECTING:
            sprintf((char*)USB.data.auxBuffer, "ESP01: Conectando UDP/TCP...");
 80037ae:	4920      	ldr	r1, [pc, #128]	@ (8003830 <onESP01ChangeState+0x118>)
 80037b0:	4818      	ldr	r0, [pc, #96]	@ (8003814 <onESP01ChangeState+0xfc>)
 80037b2:	f00e fb99 	bl	8011ee8 <siprintf>
            break;
 80037b6:	e01d      	b.n	80037f4 <onESP01ChangeState+0xdc>
        case ESP01_UDPTCP_CONNECTED:
            sprintf((char*)USB.data.auxBuffer, "ESP01: UDP/TCP conectado");
 80037b8:	491e      	ldr	r1, [pc, #120]	@ (8003834 <onESP01ChangeState+0x11c>)
 80037ba:	4816      	ldr	r0, [pc, #88]	@ (8003814 <onESP01ChangeState+0xfc>)
 80037bc:	f00e fb94 	bl	8011ee8 <siprintf>
            break;
 80037c0:	e018      	b.n	80037f4 <onESP01ChangeState+0xdc>
        case ESP01_SEND_BUSY:
            sprintf((char*)USB.data.auxBuffer, "ESP01: Enviando datos...");
 80037c2:	491d      	ldr	r1, [pc, #116]	@ (8003838 <onESP01ChangeState+0x120>)
 80037c4:	4813      	ldr	r0, [pc, #76]	@ (8003814 <onESP01ChangeState+0xfc>)
 80037c6:	f00e fb8f 	bl	8011ee8 <siprintf>
            break;
 80037ca:	e013      	b.n	80037f4 <onESP01ChangeState+0xdc>
        case ESP01_SEND_READY:
            sprintf((char*)USB.data.auxBuffer, "ESP01: Listo para enviar");
 80037cc:	491b      	ldr	r1, [pc, #108]	@ (800383c <onESP01ChangeState+0x124>)
 80037ce:	4811      	ldr	r0, [pc, #68]	@ (8003814 <onESP01ChangeState+0xfc>)
 80037d0:	f00e fb8a 	bl	8011ee8 <siprintf>
            break;
 80037d4:	e00e      	b.n	80037f4 <onESP01ChangeState+0xdc>
        case ESP01_SEND_OK:
            sprintf((char*)USB.data.auxBuffer, "ESP01: Envío OK");
 80037d6:	491a      	ldr	r1, [pc, #104]	@ (8003840 <onESP01ChangeState+0x128>)
 80037d8:	480e      	ldr	r0, [pc, #56]	@ (8003814 <onESP01ChangeState+0xfc>)
 80037da:	f00e fb85 	bl	8011ee8 <siprintf>
            break;
 80037de:	e009      	b.n	80037f4 <onESP01ChangeState+0xdc>
        case ESP01_SEND_ERROR:
            sprintf((char*)USB.data.auxBuffer, "ESP01: Error al enviar");
 80037e0:	4918      	ldr	r1, [pc, #96]	@ (8003844 <onESP01ChangeState+0x12c>)
 80037e2:	480c      	ldr	r0, [pc, #48]	@ (8003814 <onESP01ChangeState+0xfc>)
 80037e4:	f00e fb80 	bl	8011ee8 <siprintf>
            break;
 80037e8:	e004      	b.n	80037f4 <onESP01ChangeState+0xdc>
        default:
            sprintf((char*)USB.data.auxBuffer, "ESP01: Estado desconocido");
 80037ea:	4917      	ldr	r1, [pc, #92]	@ (8003848 <onESP01ChangeState+0x130>)
 80037ec:	4809      	ldr	r0, [pc, #36]	@ (8003814 <onESP01ChangeState+0xfc>)
 80037ee:	f00e fb7b 	bl	8011ee8 <siprintf>
            break;
 80037f2:	bf00      	nop
    }

    // Cast explícito también aplicado aquí
    comm_sendCMD(&USB.data, USERTEXT, USB.data.auxBuffer, strlen((char*)USB.data.auxBuffer));
 80037f4:	4807      	ldr	r0, [pc, #28]	@ (8003814 <onESP01ChangeState+0xfc>)
 80037f6:	f7fc fcf3 	bl	80001e0 <strlen>
 80037fa:	4603      	mov	r3, r0
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	4a05      	ldr	r2, [pc, #20]	@ (8003814 <onESP01ChangeState+0xfc>)
 8003800:	21b1      	movs	r1, #177	@ 0xb1
 8003802:	4812      	ldr	r0, [pc, #72]	@ (800384c <onESP01ChangeState+0x134>)
 8003804:	f7fe fa58 	bl	8001cb8 <comm_sendCMD>
}
 8003808:	bf00      	nop
 800380a:	3708      	adds	r7, #8
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}
 8003810:	08012a0c 	.word	0x08012a0c
 8003814:	2000146c 	.word	0x2000146c
 8003818:	08012a24 	.word	0x08012a24
 800381c:	08012a40 	.word	0x08012a40
 8003820:	08012a5c 	.word	0x08012a5c
 8003824:	08012a78 	.word	0x08012a78
 8003828:	08012a90 	.word	0x08012a90
 800382c:	08012aac 	.word	0x08012aac
 8003830:	08012ac8 	.word	0x08012ac8
 8003834:	08012ae8 	.word	0x08012ae8
 8003838:	08012b04 	.word	0x08012b04
 800383c:	08012b20 	.word	0x08012b20
 8003840:	08012b3c 	.word	0x08012b3c
 8003844:	08012b50 	.word	0x08012b50
 8003848:	08012b68 	.word	0x08012b68
 800384c:	2000125c 	.word	0x2000125c

08003850 <setESP01_CHPD>:

void onESP01Debug(const char *dbgStr) {
    comm_sendCMD(&USB.data, USERTEXT, (uint8_t *)dbgStr, strlen(dbgStr));
}

void setESP01_CHPD(uint8_t val){
 8003850:	b580      	push	{r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0
 8003856:	4603      	mov	r3, r0
 8003858:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ESP_EN_GPIO_Port, ESP_EN_Pin, val);
 800385a:	79fb      	ldrb	r3, [r7, #7]
 800385c:	461a      	mov	r2, r3
 800385e:	2104      	movs	r1, #4
 8003860:	4803      	ldr	r0, [pc, #12]	@ (8003870 <setESP01_CHPD+0x20>)
 8003862:	f003 f82d 	bl	80068c0 <HAL_GPIO_WritePin>
}
 8003866:	bf00      	nop
 8003868:	3708      	adds	r7, #8
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	40020400 	.word	0x40020400

08003874 <task_10ms>:

void task_10ms(){
 8003874:	b580      	push	{r7, lr}
 8003876:	af00      	add	r7, sp, #0
	IS10MS = FALSE;
 8003878:	4a31      	ldr	r2, [pc, #196]	@ (8003940 <task_10ms+0xcc>)
 800387a:	7813      	ldrb	r3, [r2, #0]
 800387c:	f023 0301 	bic.w	r3, r3, #1
 8003880:	7013      	strb	r3, [r2, #0]

	is100ms1--;
 8003882:	4b30      	ldr	r3, [pc, #192]	@ (8003944 <task_10ms+0xd0>)
 8003884:	781b      	ldrb	r3, [r3, #0]
 8003886:	3b01      	subs	r3, #1
 8003888:	b2da      	uxtb	r2, r3
 800388a:	4b2e      	ldr	r3, [pc, #184]	@ (8003944 <task_10ms+0xd0>)
 800388c:	701a      	strb	r2, [r3, #0]
	if(!is100ms1){
 800388e:	4b2d      	ldr	r3, [pc, #180]	@ (8003944 <task_10ms+0xd0>)
 8003890:	781b      	ldrb	r3, [r3, #0]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d12d      	bne.n	80038f2 <task_10ms+0x7e>
		is100ms1 = 10;
 8003896:	4b2b      	ldr	r3, [pc, #172]	@ (8003944 <task_10ms+0xd0>)
 8003898:	220a      	movs	r2, #10
 800389a:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800389c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80038a0:	4829      	ldr	r0, [pc, #164]	@ (8003948 <task_10ms+0xd4>)
 80038a2:	f003 f826 	bl	80068f2 <HAL_GPIO_TogglePin>
		is1s--;
 80038a6:	4b29      	ldr	r3, [pc, #164]	@ (800394c <task_10ms+0xd8>)
 80038a8:	781b      	ldrb	r3, [r3, #0]
 80038aa:	3b01      	subs	r3, #1
 80038ac:	b2da      	uxtb	r2, r3
 80038ae:	4b27      	ldr	r3, [pc, #156]	@ (800394c <task_10ms+0xd8>)
 80038b0:	701a      	strb	r2, [r3, #0]
		if(!is1s){
 80038b2:	4b26      	ldr	r3, [pc, #152]	@ (800394c <task_10ms+0xd8>)
 80038b4:	781b      	ldrb	r3, [r3, #0]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d11b      	bne.n	80038f2 <task_10ms+0x7e>
			is1s = 10;
 80038ba:	4b24      	ldr	r3, [pc, #144]	@ (800394c <task_10ms+0xd8>)
 80038bc:	220a      	movs	r2, #10
 80038be:	701a      	strb	r2, [r3, #0]
			Encoder_1s_Elapsed(&EncoderL);
 80038c0:	4823      	ldr	r0, [pc, #140]	@ (8003950 <task_10ms+0xdc>)
 80038c2:	f7fd ff8b 	bl	80017dc <Encoder_1s_Elapsed>
			Encoder_1s_Elapsed(&EncoderR);
 80038c6:	4823      	ldr	r0, [pc, #140]	@ (8003954 <task_10ms+0xe0>)
 80038c8:	f7fd ff88 	bl	80017dc <Encoder_1s_Elapsed>

			is20s--;
 80038cc:	4b22      	ldr	r3, [pc, #136]	@ (8003958 <task_10ms+0xe4>)
 80038ce:	781b      	ldrb	r3, [r3, #0]
 80038d0:	3b01      	subs	r3, #1
 80038d2:	b2da      	uxtb	r2, r3
 80038d4:	4b20      	ldr	r3, [pc, #128]	@ (8003958 <task_10ms+0xe4>)
 80038d6:	701a      	strb	r2, [r3, #0]
			if(!is20s){
 80038d8:	4b1f      	ldr	r3, [pc, #124]	@ (8003958 <task_10ms+0xe4>)
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d108      	bne.n	80038f2 <task_10ms+0x7e>
				is20s = 10;
 80038e0:	4b1d      	ldr	r3, [pc, #116]	@ (8003958 <task_10ms+0xe4>)
 80038e2:	220a      	movs	r2, #10
 80038e4:	701a      	strb	r2, [r3, #0]
				/*if(ESP01_StateWIFI() == ESP01_WIFI_CONNECTED){
					char* pepe = ESP01_GetLocalIP();
					comm_sendCMD(&USB.data, USERTEXT, (uint8_t*)pepe, 17);
				}*/
				comm_sendCMD(&ESP.data, GETALIVE, NULL, 0);
 80038e6:	2300      	movs	r3, #0
 80038e8:	2200      	movs	r2, #0
 80038ea:	21f0      	movs	r1, #240	@ 0xf0
 80038ec:	481b      	ldr	r0, [pc, #108]	@ (800395c <task_10ms+0xe8>)
 80038ee:	f7fe f9e3 	bl	8001cb8 <comm_sendCMD>

			}
		}
	}

	Display.refreshCounter_10ms--;
 80038f2:	4b1b      	ldr	r3, [pc, #108]	@ (8003960 <task_10ms+0xec>)
 80038f4:	f893 3413 	ldrb.w	r3, [r3, #1043]	@ 0x413
 80038f8:	3b01      	subs	r3, #1
 80038fa:	b2da      	uxtb	r2, r3
 80038fc:	4b18      	ldr	r3, [pc, #96]	@ (8003960 <task_10ms+0xec>)
 80038fe:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
	if(!Display.refreshCounter_10ms){ //Tasa de refresco variable
 8003902:	4b17      	ldr	r3, [pc, #92]	@ (8003960 <task_10ms+0xec>)
 8003904:	f893 3413 	ldrb.w	r3, [r3, #1043]	@ 0x413
 8003908:	2b00      	cmp	r3, #0
 800390a:	d107      	bne.n	800391c <task_10ms+0xa8>
		Display.refreshCounter_10ms = Display.refreshRate_10ms;
 800390c:	4b14      	ldr	r3, [pc, #80]	@ (8003960 <task_10ms+0xec>)
 800390e:	f893 2412 	ldrb.w	r2, [r3, #1042]	@ 0x412
 8003912:	4b13      	ldr	r3, [pc, #76]	@ (8003960 <task_10ms+0xec>)
 8003914:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
		OLED_Print_Data_Task();
 8003918:	f7ff fb52 	bl	8002fc0 <OLED_Print_Data_Task>
	}

	ESP01_Timeout10ms();
 800391c:	f7fe fc5a 	bl	80021d4 <ESP01_Timeout10ms>

	Debouncer_Task();
 8003920:	f7fc ff7c 	bl	800081c <Debouncer_Task>
	Motor_Break_Timeout(&MotorL);
 8003924:	480f      	ldr	r0, [pc, #60]	@ (8003964 <task_10ms+0xf0>)
 8003926:	f7fe f821 	bl	800196c <Motor_Break_Timeout>
	Motor_Break_Timeout(&MotorR);
 800392a:	480f      	ldr	r0, [pc, #60]	@ (8003968 <task_10ms+0xf4>)
 800392c:	f7fe f81e 	bl	800196c <Motor_Break_Timeout>
	Encoder_Task(&EncoderL);
 8003930:	4807      	ldr	r0, [pc, #28]	@ (8003950 <task_10ms+0xdc>)
 8003932:	f7fd ff13 	bl	800175c <Encoder_Task>
	Encoder_Task(&EncoderR);
 8003936:	4807      	ldr	r0, [pc, #28]	@ (8003954 <task_10ms+0xe0>)
 8003938:	f7fd ff10 	bl	800175c <Encoder_Task>
}
 800393c:	bf00      	nop
 800393e:	bd80      	pop	{r7, pc}
 8003940:	20000d0c 	.word	0x20000d0c
 8003944:	2000000c 	.word	0x2000000c
 8003948:	40020800 	.word	0x40020800
 800394c:	2000000d 	.word	0x2000000d
 8003950:	20000d48 	.word	0x20000d48
 8003954:	20000d54 	.word	0x20000d54
 8003958:	2000000f 	.word	0x2000000f
 800395c:	200014a8 	.word	0x200014a8
 8003960:	20000e24 	.word	0x20000e24
 8003964:	20000d18 	.word	0x20000d18
 8003968:	20000d30 	.word	0x20000d30

0800396c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003970:	f001 fb2a 	bl	8004fc8 <HAL_Init>

  /* USER CODE BEGIN Init */
  MPU6050.isInit = FALSE;
 8003974:	4b57      	ldr	r3, [pc, #348]	@ (8003ad4 <main+0x168>)
 8003976:	2200      	movs	r2, #0
 8003978:	f883 20c2 	strb.w	r2, [r3, #194]	@ 0xc2
  Display.isInit = FALSE;
 800397c:	4b56      	ldr	r3, [pc, #344]	@ (8003ad8 <main+0x16c>)
 800397e:	2200      	movs	r2, #0
 8003980:	701a      	strb	r2, [r3, #0]
  Display.state = INIT;
 8003982:	4b55      	ldr	r3, [pc, #340]	@ (8003ad8 <main+0x16c>)
 8003984:	2200      	movs	r2, #0
 8003986:	f883 2401 	strb.w	r2, [r3, #1025]	@ 0x401

  ESP.password = "wlan412877";
 800398a:	4b54      	ldr	r3, [pc, #336]	@ (8003adc <main+0x170>)
 800398c:	4a54      	ldr	r2, [pc, #336]	@ (8003ae0 <main+0x174>)
 800398e:	611a      	str	r2, [r3, #16]
  ESP.ssid = "InternetPlus_bed788";
 8003990:	4b52      	ldr	r3, [pc, #328]	@ (8003adc <main+0x170>)
 8003992:	4a54      	ldr	r2, [pc, #336]	@ (8003ae4 <main+0x178>)
 8003994:	60da      	str	r2, [r3, #12]
  ESP.IP = "192.168.1.10";
 8003996:	4b51      	ldr	r3, [pc, #324]	@ (8003adc <main+0x170>)
 8003998:	4a53      	ldr	r2, [pc, #332]	@ (8003ae8 <main+0x17c>)
 800399a:	615a      	str	r2, [r3, #20]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800399c:	f000 f8da 	bl	8003b54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80039a0:	f000 fb6c 	bl	800407c <MX_GPIO_Init>
  MX_DMA_Init();
 80039a4:	f000 fb2c 	bl	8004000 <MX_DMA_Init>
  MX_ADC1_Init();
 80039a8:	f000 f93e 	bl	8003c28 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 80039ac:	f00d fcc4 	bl	8011338 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 80039b0:	f000 fa2a 	bl	8003e08 <MX_TIM1_Init>
  MX_I2C1_Init();
 80039b4:	f000 f9fa 	bl	8003dac <MX_I2C1_Init>
  MX_TIM3_Init();
 80039b8:	f000 fa76 	bl	8003ea8 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80039bc:	f000 faf6 	bl	8003fac <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  /* INICIALIZACIÓN DE PROTOCOLO MEDIANTE USB */
  Comm_Init(&USB.data, &decodeOn_USB, &writeOn_USB);
 80039c0:	4a4a      	ldr	r2, [pc, #296]	@ (8003aec <main+0x180>)
 80039c2:	494b      	ldr	r1, [pc, #300]	@ (8003af0 <main+0x184>)
 80039c4:	484b      	ldr	r0, [pc, #300]	@ (8003af4 <main+0x188>)
 80039c6:	f7fd ffec 	bl	80019a2 <Comm_Init>
  CDC_Attach_Rx(&dataRxOn_USB);
 80039ca:	484b      	ldr	r0, [pc, #300]	@ (8003af8 <main+0x18c>)
 80039cc:	f00d fe06 	bl	80115dc <CDC_Attach_Rx>
  /* FIN INICIALIZACIÓN DE PROTOCOLO MEDIANTE USB */

  /* INICIALIZACIÓN DE USER KEY Y DEBOUNCE */
  Debounce_Init();
 80039d0:	f7fc febc 	bl	800074c <Debounce_Init>
  key = Debounce_Add(&KEY_Read_Value, &onKeyChangeState);
 80039d4:	4949      	ldr	r1, [pc, #292]	@ (8003afc <main+0x190>)
 80039d6:	484a      	ldr	r0, [pc, #296]	@ (8003b00 <main+0x194>)
 80039d8:	f7fc feec 	bl	80007b4 <Debounce_Add>
 80039dc:	4603      	mov	r3, r0
 80039de:	461a      	mov	r2, r3
 80039e0:	4b48      	ldr	r3, [pc, #288]	@ (8003b04 <main+0x198>)
 80039e2:	701a      	strb	r2, [r3, #0]
  /* FIN INICIALIZACIÓN DE USER KEY Y DEBOUNCE */

  /* INICIALIZACIÓN DE MPU6050 */
  Init_MPU6050();
 80039e4:	f000 fc6a 	bl	80042bc <Init_MPU6050>
  /* FIN INICIALIZACIÓN DE MPU6050 */

  /* INICIALIZACIÓN DISPLAY*/
  Init_Display();
 80039e8:	f000 fca0 	bl	800432c <Init_Display>
  /* FIN INICIALIZACIÓN DISPLAY */

  /* INICIALIZACIÓN DE MOTORES Y ENCODERS */
  Motor_Init(&MotorL, &Motor_Left_SetPWM , &Motor_Left_SetPins , htim3.Instance->ARR);
 80039ec:	4b46      	ldr	r3, [pc, #280]	@ (8003b08 <main+0x19c>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039f2:	b29b      	uxth	r3, r3
 80039f4:	4a45      	ldr	r2, [pc, #276]	@ (8003b0c <main+0x1a0>)
 80039f6:	4946      	ldr	r1, [pc, #280]	@ (8003b10 <main+0x1a4>)
 80039f8:	4846      	ldr	r0, [pc, #280]	@ (8003b14 <main+0x1a8>)
 80039fa:	f7fd ff00 	bl	80017fe <Motor_Init>
  Motor_Init(&MotorR, &Motor_Right_SetPWM, &Motor_Right_SetPins, htim3.Instance->ARR);
 80039fe:	4b42      	ldr	r3, [pc, #264]	@ (8003b08 <main+0x19c>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a04:	b29b      	uxth	r3, r3
 8003a06:	4a44      	ldr	r2, [pc, #272]	@ (8003b18 <main+0x1ac>)
 8003a08:	4944      	ldr	r1, [pc, #272]	@ (8003b1c <main+0x1b0>)
 8003a0a:	4845      	ldr	r0, [pc, #276]	@ (8003b20 <main+0x1b4>)
 8003a0c:	f7fd fef7 	bl	80017fe <Motor_Init>

  Encoder_Init(&EncoderL, ENCODER_FASTPPS_COUNTER_10MS);
 8003a10:	210a      	movs	r1, #10
 8003a12:	4844      	ldr	r0, [pc, #272]	@ (8003b24 <main+0x1b8>)
 8003a14:	f7fd fe83 	bl	800171e <Encoder_Init>
  Encoder_Init(&EncoderR, ENCODER_FASTPPS_COUNTER_10MS);
 8003a18:	210a      	movs	r1, #10
 8003a1a:	4843      	ldr	r0, [pc, #268]	@ (8003b28 <main+0x1bc>)
 8003a1c:	f7fd fe7f 	bl	800171e <Encoder_Init>
  /* FIN INICIALIZACIÓN DE MOTORES Y ENCODERS */

  /* ESP01 INITIALIZATION */
  Comm_Init(&ESP.data, &decodeOn_USB, &writeOn_ESP);
 8003a20:	4a42      	ldr	r2, [pc, #264]	@ (8003b2c <main+0x1c0>)
 8003a22:	4933      	ldr	r1, [pc, #204]	@ (8003af0 <main+0x184>)
 8003a24:	4842      	ldr	r0, [pc, #264]	@ (8003b30 <main+0x1c4>)
 8003a26:	f7fd ffbc 	bl	80019a2 <Comm_Init>
  ESP.data.isESP01 = TRUE;
 8003a2a:	4b2c      	ldr	r3, [pc, #176]	@ (8003adc <main+0x170>)
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	f883 2247 	strb.w	r2, [r3, #583]	@ 0x247
  HAL_UART_Receive_IT(&huart1, &ESP.AT_Rx_data, 1);
 8003a32:	2201      	movs	r2, #1
 8003a34:	493f      	ldr	r1, [pc, #252]	@ (8003b34 <main+0x1c8>)
 8003a36:	4840      	ldr	r0, [pc, #256]	@ (8003b38 <main+0x1cc>)
 8003a38:	f009 fa40 	bl	800cebc <HAL_UART_Receive_IT>

  ESP.Config.DoCHPD = setESP01_CHPD;
 8003a3c:	4b27      	ldr	r3, [pc, #156]	@ (8003adc <main+0x170>)
 8003a3e:	4a3f      	ldr	r2, [pc, #252]	@ (8003b3c <main+0x1d0>)
 8003a40:	601a      	str	r2, [r3, #0]
  ESP.Config.WriteUSARTByte = ESP01_UART_Transmit;
 8003a42:	4b26      	ldr	r3, [pc, #152]	@ (8003adc <main+0x170>)
 8003a44:	4a3e      	ldr	r2, [pc, #248]	@ (8003b40 <main+0x1d4>)
 8003a46:	605a      	str	r2, [r3, #4]
  ESP.Config.WriteByteToBufRX = ESP01_Data_Recived;
 8003a48:	4b24      	ldr	r3, [pc, #144]	@ (8003adc <main+0x170>)
 8003a4a:	4a3e      	ldr	r2, [pc, #248]	@ (8003b44 <main+0x1d8>)
 8003a4c:	609a      	str	r2, [r3, #8]

  ESP01_Init(&ESP.Config);
 8003a4e:	4823      	ldr	r0, [pc, #140]	@ (8003adc <main+0x170>)
 8003a50:	f7fe fb84 	bl	800215c <ESP01_Init>
  if(ESP01_StateWIFI() == ESP01_WIFI_DISCONNECTED){
 8003a54:	f7fe fa98 	bl	8001f88 <ESP01_StateWIFI>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d107      	bne.n	8003a6e <main+0x102>
	  ESP01_SetWIFI(ESP.ssid, ESP.password);
 8003a5e:	4b1f      	ldr	r3, [pc, #124]	@ (8003adc <main+0x170>)
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	4a1e      	ldr	r2, [pc, #120]	@ (8003adc <main+0x170>)
 8003a64:	6912      	ldr	r2, [r2, #16]
 8003a66:	4611      	mov	r1, r2
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f7fe fa01 	bl	8001e70 <ESP01_SetWIFI>
  }
  ESP01_StartUDP("192.168.1.10", 30010, 30000);
 8003a6e:	f247 5230 	movw	r2, #30000	@ 0x7530
 8003a72:	f247 513a 	movw	r1, #30010	@ 0x753a
 8003a76:	481c      	ldr	r0, [pc, #112]	@ (8003ae8 <main+0x17c>)
 8003a78:	f7fe fa30 	bl	8001edc <ESP01_StartUDP>
  ESP01_AttachChangeState(&onESP01ChangeState);
 8003a7c:	4832      	ldr	r0, [pc, #200]	@ (8003b48 <main+0x1dc>)
 8003a7e:	f7fe fbf5 	bl	800226c <ESP01_AttachChangeState>
  //ESP01_AttachDebugStr(&onESP01Debug);
  /* END ESP01 INITIALIZATION */
  Car.state = IDLE;
 8003a82:	4b32      	ldr	r3, [pc, #200]	@ (8003b4c <main+0x1e0>)
 8003a84:	2200      	movs	r2, #0
 8003a86:	701a      	strb	r2, [r3, #0]

  Init_Timing();
 8003a88:	f000 fbd4 	bl	8004234 <Init_Timing>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  /* USER TASK */
	Comm_Task(&USB.data);
 8003a8c:	4819      	ldr	r0, [pc, #100]	@ (8003af4 <main+0x188>)
 8003a8e:	f7fd ffbc 	bl	8001a0a <Comm_Task>
	Comm_Task(&ESP.data);
 8003a92:	4827      	ldr	r0, [pc, #156]	@ (8003b30 <main+0x1c4>)
 8003a94:	f7fd ffb9 	bl	8001a0a <Comm_Task>
	Display_UpdateScreen_Task();
 8003a98:	f7fd fb18 	bl	80010cc <Display_UpdateScreen_Task>
	MPU6050_MAF(&MPU6050);
 8003a9c:	480d      	ldr	r0, [pc, #52]	@ (8003ad4 <main+0x168>)
 8003a9e:	f7fd f8c5 	bl	8000c2c <MPU6050_MAF>
	ESP01_Task();
 8003aa2:	f7fe fbc9 	bl	8002238 <ESP01_Task>

	if(IS10MS){
 8003aa6:	4b2a      	ldr	r3, [pc, #168]	@ (8003b50 <main+0x1e4>)
 8003aa8:	781b      	ldrb	r3, [r3, #0]
 8003aaa:	f003 0301 	and.w	r3, r3, #1
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d001      	beq.n	8003ab8 <main+0x14c>
		task_10ms();
 8003ab4:	f7ff fede 	bl	8003874 <task_10ms>
	}

	switch(Car.state){
 8003ab8:	4b24      	ldr	r3, [pc, #144]	@ (8003b4c <main+0x1e0>)
 8003aba:	781b      	ldrb	r3, [r3, #0]
 8003abc:	2b02      	cmp	r3, #2
 8003abe:	d005      	beq.n	8003acc <main+0x160>
 8003ac0:	2b02      	cmp	r3, #2
 8003ac2:	dce3      	bgt.n	8003a8c <main+0x120>
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d003      	beq.n	8003ad0 <main+0x164>
 8003ac8:	2b01      	cmp	r3, #1
	case IDLE:

		break;
	case FOLLOW_LINE:

		break;
 8003aca:	e002      	b.n	8003ad2 <main+0x166>
	case GO_FROM_TO:

		break;
 8003acc:	bf00      	nop
 8003ace:	e7dd      	b.n	8003a8c <main+0x120>
		break;
 8003ad0:	bf00      	nop
	Comm_Task(&USB.data);
 8003ad2:	e7db      	b.n	8003a8c <main+0x120>
 8003ad4:	20000d60 	.word	0x20000d60
 8003ad8:	20000e24 	.word	0x20000e24
 8003adc:	20001490 	.word	0x20001490
 8003ae0:	08012b84 	.word	0x08012b84
 8003ae4:	08012b90 	.word	0x08012b90
 8003ae8:	08012ba4 	.word	0x08012ba4
 8003aec:	08004745 	.word	0x08004745
 8003af0:	08003335 	.word	0x08003335
 8003af4:	2000125c 	.word	0x2000125c
 8003af8:	080047b9 	.word	0x080047b9
 8003afc:	08003701 	.word	0x08003701
 8003b00:	0800472d 	.word	0x0800472d
 8003b04:	20000d14 	.word	0x20000d14
 8003b08:	20000c7c 	.word	0x20000c7c
 8003b0c:	08004811 	.word	0x08004811
 8003b10:	08004885 	.word	0x08004885
 8003b14:	20000d18 	.word	0x20000d18
 8003b18:	08004849 	.word	0x08004849
 8003b1c:	080048a9 	.word	0x080048a9
 8003b20:	20000d30 	.word	0x20000d30
 8003b24:	20000d48 	.word	0x20000d48
 8003b28:	20000d54 	.word	0x20000d54
 8003b2c:	080045c9 	.word	0x080045c9
 8003b30:	200014a8 	.word	0x200014a8
 8003b34:	200016d8 	.word	0x200016d8
 8003b38:	20000cc4 	.word	0x20000cc4
 8003b3c:	08003851 	.word	0x08003851
 8003b40:	08004559 	.word	0x08004559
 8003b44:	08004591 	.word	0x08004591
 8003b48:	08003719 	.word	0x08003719
 8003b4c:	200016dc 	.word	0x200016dc
 8003b50:	20000d0c 	.word	0x20000d0c

08003b54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b094      	sub	sp, #80	@ 0x50
 8003b58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003b5a:	f107 0320 	add.w	r3, r7, #32
 8003b5e:	2230      	movs	r2, #48	@ 0x30
 8003b60:	2100      	movs	r1, #0
 8003b62:	4618      	mov	r0, r3
 8003b64:	f00e f9e2 	bl	8011f2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003b68:	f107 030c 	add.w	r3, r7, #12
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	601a      	str	r2, [r3, #0]
 8003b70:	605a      	str	r2, [r3, #4]
 8003b72:	609a      	str	r2, [r3, #8]
 8003b74:	60da      	str	r2, [r3, #12]
 8003b76:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b78:	2300      	movs	r3, #0
 8003b7a:	60bb      	str	r3, [r7, #8]
 8003b7c:	4b28      	ldr	r3, [pc, #160]	@ (8003c20 <SystemClock_Config+0xcc>)
 8003b7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b80:	4a27      	ldr	r2, [pc, #156]	@ (8003c20 <SystemClock_Config+0xcc>)
 8003b82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b86:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b88:	4b25      	ldr	r3, [pc, #148]	@ (8003c20 <SystemClock_Config+0xcc>)
 8003b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b90:	60bb      	str	r3, [r7, #8]
 8003b92:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b94:	2300      	movs	r3, #0
 8003b96:	607b      	str	r3, [r7, #4]
 8003b98:	4b22      	ldr	r3, [pc, #136]	@ (8003c24 <SystemClock_Config+0xd0>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a21      	ldr	r2, [pc, #132]	@ (8003c24 <SystemClock_Config+0xd0>)
 8003b9e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003ba2:	6013      	str	r3, [r2, #0]
 8003ba4:	4b1f      	ldr	r3, [pc, #124]	@ (8003c24 <SystemClock_Config+0xd0>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003bac:	607b      	str	r3, [r7, #4]
 8003bae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003bb4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003bb8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003bba:	2302      	movs	r3, #2
 8003bbc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003bbe:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003bc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8003bc4:	2319      	movs	r3, #25
 8003bc6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8003bc8:	23c0      	movs	r3, #192	@ 0xc0
 8003bca:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003bcc:	2302      	movs	r3, #2
 8003bce:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003bd0:	2304      	movs	r3, #4
 8003bd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003bd4:	f107 0320 	add.w	r3, r7, #32
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f007 fce9 	bl	800b5b0 <HAL_RCC_OscConfig>
 8003bde:	4603      	mov	r3, r0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d001      	beq.n	8003be8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003be4:	f000 fe72 	bl	80048cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003be8:	230f      	movs	r3, #15
 8003bea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003bec:	2302      	movs	r3, #2
 8003bee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003bf4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003bf8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8003bfe:	f107 030c 	add.w	r3, r7, #12
 8003c02:	2103      	movs	r1, #3
 8003c04:	4618      	mov	r0, r3
 8003c06:	f007 ff4b 	bl	800baa0 <HAL_RCC_ClockConfig>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d001      	beq.n	8003c14 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8003c10:	f000 fe5c 	bl	80048cc <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8003c14:	f008 f82a 	bl	800bc6c <HAL_RCC_EnableCSS>
}
 8003c18:	bf00      	nop
 8003c1a:	3750      	adds	r7, #80	@ 0x50
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	40023800 	.word	0x40023800
 8003c24:	40007000 	.word	0x40007000

08003c28 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003c2e:	463b      	mov	r3, r7
 8003c30:	2200      	movs	r2, #0
 8003c32:	601a      	str	r2, [r3, #0]
 8003c34:	605a      	str	r2, [r3, #4]
 8003c36:	609a      	str	r2, [r3, #8]
 8003c38:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003c3a:	4b59      	ldr	r3, [pc, #356]	@ (8003da0 <MX_ADC1_Init+0x178>)
 8003c3c:	4a59      	ldr	r2, [pc, #356]	@ (8003da4 <MX_ADC1_Init+0x17c>)
 8003c3e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003c40:	4b57      	ldr	r3, [pc, #348]	@ (8003da0 <MX_ADC1_Init+0x178>)
 8003c42:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003c46:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003c48:	4b55      	ldr	r3, [pc, #340]	@ (8003da0 <MX_ADC1_Init+0x178>)
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8003c4e:	4b54      	ldr	r3, [pc, #336]	@ (8003da0 <MX_ADC1_Init+0x178>)
 8003c50:	2201      	movs	r2, #1
 8003c52:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003c54:	4b52      	ldr	r3, [pc, #328]	@ (8003da0 <MX_ADC1_Init+0x178>)
 8003c56:	2200      	movs	r2, #0
 8003c58:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003c5a:	4b51      	ldr	r3, [pc, #324]	@ (8003da0 <MX_ADC1_Init+0x178>)
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003c62:	4b4f      	ldr	r3, [pc, #316]	@ (8003da0 <MX_ADC1_Init+0x178>)
 8003c64:	2200      	movs	r2, #0
 8003c66:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003c68:	4b4d      	ldr	r3, [pc, #308]	@ (8003da0 <MX_ADC1_Init+0x178>)
 8003c6a:	4a4f      	ldr	r2, [pc, #316]	@ (8003da8 <MX_ADC1_Init+0x180>)
 8003c6c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003c6e:	4b4c      	ldr	r3, [pc, #304]	@ (8003da0 <MX_ADC1_Init+0x178>)
 8003c70:	2200      	movs	r2, #0
 8003c72:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 9;
 8003c74:	4b4a      	ldr	r3, [pc, #296]	@ (8003da0 <MX_ADC1_Init+0x178>)
 8003c76:	2209      	movs	r2, #9
 8003c78:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003c7a:	4b49      	ldr	r3, [pc, #292]	@ (8003da0 <MX_ADC1_Init+0x178>)
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003c82:	4b47      	ldr	r3, [pc, #284]	@ (8003da0 <MX_ADC1_Init+0x178>)
 8003c84:	2201      	movs	r2, #1
 8003c86:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003c88:	4845      	ldr	r0, [pc, #276]	@ (8003da0 <MX_ADC1_Init+0x178>)
 8003c8a:	f001 fa33 	bl	80050f4 <HAL_ADC_Init>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d001      	beq.n	8003c98 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8003c94:	f000 fe1a 	bl	80048cc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8003ca0:	2303      	movs	r3, #3
 8003ca2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003ca4:	463b      	mov	r3, r7
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	483d      	ldr	r0, [pc, #244]	@ (8003da0 <MX_ADC1_Init+0x178>)
 8003caa:	f001 fc85 	bl	80055b8 <HAL_ADC_ConfigChannel>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d001      	beq.n	8003cb8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8003cb4:	f000 fe0a 	bl	80048cc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8003cb8:	2302      	movs	r3, #2
 8003cba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8003cbc:	2302      	movs	r3, #2
 8003cbe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003cc0:	463b      	mov	r3, r7
 8003cc2:	4619      	mov	r1, r3
 8003cc4:	4836      	ldr	r0, [pc, #216]	@ (8003da0 <MX_ADC1_Init+0x178>)
 8003cc6:	f001 fc77 	bl	80055b8 <HAL_ADC_ConfigChannel>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d001      	beq.n	8003cd4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8003cd0:	f000 fdfc 	bl	80048cc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8003cd4:	2303      	movs	r3, #3
 8003cd6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8003cd8:	2303      	movs	r3, #3
 8003cda:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003cdc:	463b      	mov	r3, r7
 8003cde:	4619      	mov	r1, r3
 8003ce0:	482f      	ldr	r0, [pc, #188]	@ (8003da0 <MX_ADC1_Init+0x178>)
 8003ce2:	f001 fc69 	bl	80055b8 <HAL_ADC_ConfigChannel>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d001      	beq.n	8003cf0 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8003cec:	f000 fdee 	bl	80048cc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8003cf0:	2304      	movs	r3, #4
 8003cf2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8003cf4:	2304      	movs	r3, #4
 8003cf6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003cf8:	463b      	mov	r3, r7
 8003cfa:	4619      	mov	r1, r3
 8003cfc:	4828      	ldr	r0, [pc, #160]	@ (8003da0 <MX_ADC1_Init+0x178>)
 8003cfe:	f001 fc5b 	bl	80055b8 <HAL_ADC_ConfigChannel>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d001      	beq.n	8003d0c <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8003d08:	f000 fde0 	bl	80048cc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8003d0c:	2305      	movs	r3, #5
 8003d0e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8003d10:	2305      	movs	r3, #5
 8003d12:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003d14:	463b      	mov	r3, r7
 8003d16:	4619      	mov	r1, r3
 8003d18:	4821      	ldr	r0, [pc, #132]	@ (8003da0 <MX_ADC1_Init+0x178>)
 8003d1a:	f001 fc4d 	bl	80055b8 <HAL_ADC_ConfigChannel>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d001      	beq.n	8003d28 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8003d24:	f000 fdd2 	bl	80048cc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8003d28:	2306      	movs	r3, #6
 8003d2a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8003d2c:	2306      	movs	r3, #6
 8003d2e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003d30:	463b      	mov	r3, r7
 8003d32:	4619      	mov	r1, r3
 8003d34:	481a      	ldr	r0, [pc, #104]	@ (8003da0 <MX_ADC1_Init+0x178>)
 8003d36:	f001 fc3f 	bl	80055b8 <HAL_ADC_ConfigChannel>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d001      	beq.n	8003d44 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8003d40:	f000 fdc4 	bl	80048cc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8003d44:	2307      	movs	r3, #7
 8003d46:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8003d48:	2307      	movs	r3, #7
 8003d4a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003d4c:	463b      	mov	r3, r7
 8003d4e:	4619      	mov	r1, r3
 8003d50:	4813      	ldr	r0, [pc, #76]	@ (8003da0 <MX_ADC1_Init+0x178>)
 8003d52:	f001 fc31 	bl	80055b8 <HAL_ADC_ConfigChannel>
 8003d56:	4603      	mov	r3, r0
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d001      	beq.n	8003d60 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8003d5c:	f000 fdb6 	bl	80048cc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8003d60:	2308      	movs	r3, #8
 8003d62:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8003d64:	2308      	movs	r3, #8
 8003d66:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003d68:	463b      	mov	r3, r7
 8003d6a:	4619      	mov	r1, r3
 8003d6c:	480c      	ldr	r0, [pc, #48]	@ (8003da0 <MX_ADC1_Init+0x178>)
 8003d6e:	f001 fc23 	bl	80055b8 <HAL_ADC_ConfigChannel>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d001      	beq.n	8003d7c <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8003d78:	f000 fda8 	bl	80048cc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8003d7c:	2309      	movs	r3, #9
 8003d7e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8003d80:	2309      	movs	r3, #9
 8003d82:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003d84:	463b      	mov	r3, r7
 8003d86:	4619      	mov	r1, r3
 8003d88:	4805      	ldr	r0, [pc, #20]	@ (8003da0 <MX_ADC1_Init+0x178>)
 8003d8a:	f001 fc15 	bl	80055b8 <HAL_ADC_ConfigChannel>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d001      	beq.n	8003d98 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8003d94:	f000 fd9a 	bl	80048cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003d98:	bf00      	nop
 8003d9a:	3710      	adds	r7, #16
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}
 8003da0:	20000a78 	.word	0x20000a78
 8003da4:	40012000 	.word	0x40012000
 8003da8:	0f000001 	.word	0x0f000001

08003dac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003db0:	4b12      	ldr	r3, [pc, #72]	@ (8003dfc <MX_I2C1_Init+0x50>)
 8003db2:	4a13      	ldr	r2, [pc, #76]	@ (8003e00 <MX_I2C1_Init+0x54>)
 8003db4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8003db6:	4b11      	ldr	r3, [pc, #68]	@ (8003dfc <MX_I2C1_Init+0x50>)
 8003db8:	4a12      	ldr	r2, [pc, #72]	@ (8003e04 <MX_I2C1_Init+0x58>)
 8003dba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003dbc:	4b0f      	ldr	r3, [pc, #60]	@ (8003dfc <MX_I2C1_Init+0x50>)
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003dc2:	4b0e      	ldr	r3, [pc, #56]	@ (8003dfc <MX_I2C1_Init+0x50>)
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003dc8:	4b0c      	ldr	r3, [pc, #48]	@ (8003dfc <MX_I2C1_Init+0x50>)
 8003dca:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003dce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003dd0:	4b0a      	ldr	r3, [pc, #40]	@ (8003dfc <MX_I2C1_Init+0x50>)
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003dd6:	4b09      	ldr	r3, [pc, #36]	@ (8003dfc <MX_I2C1_Init+0x50>)
 8003dd8:	2200      	movs	r2, #0
 8003dda:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003ddc:	4b07      	ldr	r3, [pc, #28]	@ (8003dfc <MX_I2C1_Init+0x50>)
 8003dde:	2200      	movs	r2, #0
 8003de0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003de2:	4b06      	ldr	r3, [pc, #24]	@ (8003dfc <MX_I2C1_Init+0x50>)
 8003de4:	2200      	movs	r2, #0
 8003de6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003de8:	4804      	ldr	r0, [pc, #16]	@ (8003dfc <MX_I2C1_Init+0x50>)
 8003dea:	f002 fdb5 	bl	8006958 <HAL_I2C_Init>
 8003dee:	4603      	mov	r3, r0
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d001      	beq.n	8003df8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003df4:	f000 fd6a 	bl	80048cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003df8:	bf00      	nop
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	20000b20 	.word	0x20000b20
 8003e00:	40005400 	.word	0x40005400
 8003e04:	00061a80 	.word	0x00061a80

08003e08 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b086      	sub	sp, #24
 8003e0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003e0e:	f107 0308 	add.w	r3, r7, #8
 8003e12:	2200      	movs	r2, #0
 8003e14:	601a      	str	r2, [r3, #0]
 8003e16:	605a      	str	r2, [r3, #4]
 8003e18:	609a      	str	r2, [r3, #8]
 8003e1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e1c:	463b      	mov	r3, r7
 8003e1e:	2200      	movs	r2, #0
 8003e20:	601a      	str	r2, [r3, #0]
 8003e22:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003e24:	4b1e      	ldr	r3, [pc, #120]	@ (8003ea0 <MX_TIM1_Init+0x98>)
 8003e26:	4a1f      	ldr	r2, [pc, #124]	@ (8003ea4 <MX_TIM1_Init+0x9c>)
 8003e28:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003e2a:	4b1d      	ldr	r3, [pc, #116]	@ (8003ea0 <MX_TIM1_Init+0x98>)
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e30:	4b1b      	ldr	r3, [pc, #108]	@ (8003ea0 <MX_TIM1_Init+0x98>)
 8003e32:	2200      	movs	r2, #0
 8003e34:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 23999;
 8003e36:	4b1a      	ldr	r3, [pc, #104]	@ (8003ea0 <MX_TIM1_Init+0x98>)
 8003e38:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 8003e3c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e3e:	4b18      	ldr	r3, [pc, #96]	@ (8003ea0 <MX_TIM1_Init+0x98>)
 8003e40:	2200      	movs	r2, #0
 8003e42:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003e44:	4b16      	ldr	r3, [pc, #88]	@ (8003ea0 <MX_TIM1_Init+0x98>)
 8003e46:	2200      	movs	r2, #0
 8003e48:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e4a:	4b15      	ldr	r3, [pc, #84]	@ (8003ea0 <MX_TIM1_Init+0x98>)
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003e50:	4813      	ldr	r0, [pc, #76]	@ (8003ea0 <MX_TIM1_Init+0x98>)
 8003e52:	f008 f82c 	bl	800beae <HAL_TIM_Base_Init>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d001      	beq.n	8003e60 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8003e5c:	f000 fd36 	bl	80048cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e60:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003e64:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003e66:	f107 0308 	add.w	r3, r7, #8
 8003e6a:	4619      	mov	r1, r3
 8003e6c:	480c      	ldr	r0, [pc, #48]	@ (8003ea0 <MX_TIM1_Init+0x98>)
 8003e6e:	f008 fb8b 	bl	800c588 <HAL_TIM_ConfigClockSource>
 8003e72:	4603      	mov	r3, r0
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d001      	beq.n	8003e7c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8003e78:	f000 fd28 	bl	80048cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e80:	2300      	movs	r3, #0
 8003e82:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003e84:	463b      	mov	r3, r7
 8003e86:	4619      	mov	r1, r3
 8003e88:	4805      	ldr	r0, [pc, #20]	@ (8003ea0 <MX_TIM1_Init+0x98>)
 8003e8a:	f008 ff45 	bl	800cd18 <HAL_TIMEx_MasterConfigSynchronization>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d001      	beq.n	8003e98 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8003e94:	f000 fd1a 	bl	80048cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003e98:	bf00      	nop
 8003e9a:	3718      	adds	r7, #24
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}
 8003ea0:	20000c34 	.word	0x20000c34
 8003ea4:	40010000 	.word	0x40010000

08003ea8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b08e      	sub	sp, #56	@ 0x38
 8003eac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003eae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	601a      	str	r2, [r3, #0]
 8003eb6:	605a      	str	r2, [r3, #4]
 8003eb8:	609a      	str	r2, [r3, #8]
 8003eba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ebc:	f107 0320 	add.w	r3, r7, #32
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	601a      	str	r2, [r3, #0]
 8003ec4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003ec6:	1d3b      	adds	r3, r7, #4
 8003ec8:	2200      	movs	r2, #0
 8003eca:	601a      	str	r2, [r3, #0]
 8003ecc:	605a      	str	r2, [r3, #4]
 8003ece:	609a      	str	r2, [r3, #8]
 8003ed0:	60da      	str	r2, [r3, #12]
 8003ed2:	611a      	str	r2, [r3, #16]
 8003ed4:	615a      	str	r2, [r3, #20]
 8003ed6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003ed8:	4b32      	ldr	r3, [pc, #200]	@ (8003fa4 <MX_TIM3_Init+0xfc>)
 8003eda:	4a33      	ldr	r2, [pc, #204]	@ (8003fa8 <MX_TIM3_Init+0x100>)
 8003edc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15;
 8003ede:	4b31      	ldr	r3, [pc, #196]	@ (8003fa4 <MX_TIM3_Init+0xfc>)
 8003ee0:	220f      	movs	r2, #15
 8003ee2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ee4:	4b2f      	ldr	r3, [pc, #188]	@ (8003fa4 <MX_TIM3_Init+0xfc>)
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 59999;
 8003eea:	4b2e      	ldr	r3, [pc, #184]	@ (8003fa4 <MX_TIM3_Init+0xfc>)
 8003eec:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8003ef0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ef2:	4b2c      	ldr	r3, [pc, #176]	@ (8003fa4 <MX_TIM3_Init+0xfc>)
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ef8:	4b2a      	ldr	r3, [pc, #168]	@ (8003fa4 <MX_TIM3_Init+0xfc>)
 8003efa:	2200      	movs	r2, #0
 8003efc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003efe:	4829      	ldr	r0, [pc, #164]	@ (8003fa4 <MX_TIM3_Init+0xfc>)
 8003f00:	f007 ffd5 	bl	800beae <HAL_TIM_Base_Init>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d001      	beq.n	8003f0e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8003f0a:	f000 fcdf 	bl	80048cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003f0e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003f12:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003f14:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003f18:	4619      	mov	r1, r3
 8003f1a:	4822      	ldr	r0, [pc, #136]	@ (8003fa4 <MX_TIM3_Init+0xfc>)
 8003f1c:	f008 fb34 	bl	800c588 <HAL_TIM_ConfigClockSource>
 8003f20:	4603      	mov	r3, r0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d001      	beq.n	8003f2a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8003f26:	f000 fcd1 	bl	80048cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003f2a:	481e      	ldr	r0, [pc, #120]	@ (8003fa4 <MX_TIM3_Init+0xfc>)
 8003f2c:	f008 f870 	bl	800c010 <HAL_TIM_PWM_Init>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d001      	beq.n	8003f3a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8003f36:	f000 fcc9 	bl	80048cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003f42:	f107 0320 	add.w	r3, r7, #32
 8003f46:	4619      	mov	r1, r3
 8003f48:	4816      	ldr	r0, [pc, #88]	@ (8003fa4 <MX_TIM3_Init+0xfc>)
 8003f4a:	f008 fee5 	bl	800cd18 <HAL_TIMEx_MasterConfigSynchronization>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d001      	beq.n	8003f58 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8003f54:	f000 fcba 	bl	80048cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003f58:	2360      	movs	r3, #96	@ 0x60
 8003f5a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003f60:	2300      	movs	r3, #0
 8003f62:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003f64:	2300      	movs	r3, #0
 8003f66:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003f68:	1d3b      	adds	r3, r7, #4
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	4619      	mov	r1, r3
 8003f6e:	480d      	ldr	r0, [pc, #52]	@ (8003fa4 <MX_TIM3_Init+0xfc>)
 8003f70:	f008 fa48 	bl	800c404 <HAL_TIM_PWM_ConfigChannel>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d001      	beq.n	8003f7e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8003f7a:	f000 fca7 	bl	80048cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003f7e:	1d3b      	adds	r3, r7, #4
 8003f80:	2204      	movs	r2, #4
 8003f82:	4619      	mov	r1, r3
 8003f84:	4807      	ldr	r0, [pc, #28]	@ (8003fa4 <MX_TIM3_Init+0xfc>)
 8003f86:	f008 fa3d 	bl	800c404 <HAL_TIM_PWM_ConfigChannel>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d001      	beq.n	8003f94 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8003f90:	f000 fc9c 	bl	80048cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003f94:	4803      	ldr	r0, [pc, #12]	@ (8003fa4 <MX_TIM3_Init+0xfc>)
 8003f96:	f000 fe6d 	bl	8004c74 <HAL_TIM_MspPostInit>

}
 8003f9a:	bf00      	nop
 8003f9c:	3738      	adds	r7, #56	@ 0x38
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	20000c7c 	.word	0x20000c7c
 8003fa8:	40000400 	.word	0x40000400

08003fac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003fb0:	4b11      	ldr	r3, [pc, #68]	@ (8003ff8 <MX_USART1_UART_Init+0x4c>)
 8003fb2:	4a12      	ldr	r2, [pc, #72]	@ (8003ffc <MX_USART1_UART_Init+0x50>)
 8003fb4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003fb6:	4b10      	ldr	r3, [pc, #64]	@ (8003ff8 <MX_USART1_UART_Init+0x4c>)
 8003fb8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003fbc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003fbe:	4b0e      	ldr	r3, [pc, #56]	@ (8003ff8 <MX_USART1_UART_Init+0x4c>)
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003fc4:	4b0c      	ldr	r3, [pc, #48]	@ (8003ff8 <MX_USART1_UART_Init+0x4c>)
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003fca:	4b0b      	ldr	r3, [pc, #44]	@ (8003ff8 <MX_USART1_UART_Init+0x4c>)
 8003fcc:	2200      	movs	r2, #0
 8003fce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003fd0:	4b09      	ldr	r3, [pc, #36]	@ (8003ff8 <MX_USART1_UART_Init+0x4c>)
 8003fd2:	220c      	movs	r2, #12
 8003fd4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003fd6:	4b08      	ldr	r3, [pc, #32]	@ (8003ff8 <MX_USART1_UART_Init+0x4c>)
 8003fd8:	2200      	movs	r2, #0
 8003fda:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003fdc:	4b06      	ldr	r3, [pc, #24]	@ (8003ff8 <MX_USART1_UART_Init+0x4c>)
 8003fde:	2200      	movs	r2, #0
 8003fe0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003fe2:	4805      	ldr	r0, [pc, #20]	@ (8003ff8 <MX_USART1_UART_Init+0x4c>)
 8003fe4:	f008 ff1a 	bl	800ce1c <HAL_UART_Init>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d001      	beq.n	8003ff2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003fee:	f000 fc6d 	bl	80048cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003ff2:	bf00      	nop
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	20000cc4 	.word	0x20000cc4
 8003ffc:	40011000 	.word	0x40011000

08004000 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b082      	sub	sp, #8
 8004004:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004006:	2300      	movs	r3, #0
 8004008:	607b      	str	r3, [r7, #4]
 800400a:	4b1b      	ldr	r3, [pc, #108]	@ (8004078 <MX_DMA_Init+0x78>)
 800400c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800400e:	4a1a      	ldr	r2, [pc, #104]	@ (8004078 <MX_DMA_Init+0x78>)
 8004010:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004014:	6313      	str	r3, [r2, #48]	@ 0x30
 8004016:	4b18      	ldr	r3, [pc, #96]	@ (8004078 <MX_DMA_Init+0x78>)
 8004018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800401a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800401e:	607b      	str	r3, [r7, #4]
 8004020:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004022:	2300      	movs	r3, #0
 8004024:	603b      	str	r3, [r7, #0]
 8004026:	4b14      	ldr	r3, [pc, #80]	@ (8004078 <MX_DMA_Init+0x78>)
 8004028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800402a:	4a13      	ldr	r2, [pc, #76]	@ (8004078 <MX_DMA_Init+0x78>)
 800402c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004030:	6313      	str	r3, [r2, #48]	@ 0x30
 8004032:	4b11      	ldr	r3, [pc, #68]	@ (8004078 <MX_DMA_Init+0x78>)
 8004034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004036:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800403a:	603b      	str	r3, [r7, #0]
 800403c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800403e:	2200      	movs	r2, #0
 8004040:	2100      	movs	r1, #0
 8004042:	200b      	movs	r0, #11
 8004044:	f001 fe4d 	bl	8005ce2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8004048:	200b      	movs	r0, #11
 800404a:	f001 fe66 	bl	8005d1a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800404e:	2200      	movs	r2, #0
 8004050:	2100      	movs	r1, #0
 8004052:	200c      	movs	r0, #12
 8004054:	f001 fe45 	bl	8005ce2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8004058:	200c      	movs	r0, #12
 800405a:	f001 fe5e 	bl	8005d1a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800405e:	2200      	movs	r2, #0
 8004060:	2100      	movs	r1, #0
 8004062:	2038      	movs	r0, #56	@ 0x38
 8004064:	f001 fe3d 	bl	8005ce2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8004068:	2038      	movs	r0, #56	@ 0x38
 800406a:	f001 fe56 	bl	8005d1a <HAL_NVIC_EnableIRQ>

}
 800406e:	bf00      	nop
 8004070:	3708      	adds	r7, #8
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
 8004076:	bf00      	nop
 8004078:	40023800 	.word	0x40023800

0800407c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b08a      	sub	sp, #40	@ 0x28
 8004080:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004082:	f107 0314 	add.w	r3, r7, #20
 8004086:	2200      	movs	r2, #0
 8004088:	601a      	str	r2, [r3, #0]
 800408a:	605a      	str	r2, [r3, #4]
 800408c:	609a      	str	r2, [r3, #8]
 800408e:	60da      	str	r2, [r3, #12]
 8004090:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004092:	2300      	movs	r3, #0
 8004094:	613b      	str	r3, [r7, #16]
 8004096:	4b63      	ldr	r3, [pc, #396]	@ (8004224 <MX_GPIO_Init+0x1a8>)
 8004098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800409a:	4a62      	ldr	r2, [pc, #392]	@ (8004224 <MX_GPIO_Init+0x1a8>)
 800409c:	f043 0304 	orr.w	r3, r3, #4
 80040a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80040a2:	4b60      	ldr	r3, [pc, #384]	@ (8004224 <MX_GPIO_Init+0x1a8>)
 80040a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040a6:	f003 0304 	and.w	r3, r3, #4
 80040aa:	613b      	str	r3, [r7, #16]
 80040ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80040ae:	2300      	movs	r3, #0
 80040b0:	60fb      	str	r3, [r7, #12]
 80040b2:	4b5c      	ldr	r3, [pc, #368]	@ (8004224 <MX_GPIO_Init+0x1a8>)
 80040b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040b6:	4a5b      	ldr	r2, [pc, #364]	@ (8004224 <MX_GPIO_Init+0x1a8>)
 80040b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80040bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80040be:	4b59      	ldr	r3, [pc, #356]	@ (8004224 <MX_GPIO_Init+0x1a8>)
 80040c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040c6:	60fb      	str	r3, [r7, #12]
 80040c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80040ca:	2300      	movs	r3, #0
 80040cc:	60bb      	str	r3, [r7, #8]
 80040ce:	4b55      	ldr	r3, [pc, #340]	@ (8004224 <MX_GPIO_Init+0x1a8>)
 80040d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040d2:	4a54      	ldr	r2, [pc, #336]	@ (8004224 <MX_GPIO_Init+0x1a8>)
 80040d4:	f043 0301 	orr.w	r3, r3, #1
 80040d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80040da:	4b52      	ldr	r3, [pc, #328]	@ (8004224 <MX_GPIO_Init+0x1a8>)
 80040dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040de:	f003 0301 	and.w	r3, r3, #1
 80040e2:	60bb      	str	r3, [r7, #8]
 80040e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80040e6:	2300      	movs	r3, #0
 80040e8:	607b      	str	r3, [r7, #4]
 80040ea:	4b4e      	ldr	r3, [pc, #312]	@ (8004224 <MX_GPIO_Init+0x1a8>)
 80040ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040ee:	4a4d      	ldr	r2, [pc, #308]	@ (8004224 <MX_GPIO_Init+0x1a8>)
 80040f0:	f043 0302 	orr.w	r3, r3, #2
 80040f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80040f6:	4b4b      	ldr	r3, [pc, #300]	@ (8004224 <MX_GPIO_Init+0x1a8>)
 80040f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040fa:	f003 0302 	and.w	r3, r3, #2
 80040fe:	607b      	str	r3, [r7, #4]
 8004100:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8004102:	2200      	movs	r2, #0
 8004104:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004108:	4847      	ldr	r0, [pc, #284]	@ (8004228 <MX_GPIO_Init+0x1ac>)
 800410a:	f002 fbd9 	bl	80068c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP_EN_GPIO_Port, ESP_EN_Pin, GPIO_PIN_SET);
 800410e:	2201      	movs	r2, #1
 8004110:	2104      	movs	r1, #4
 8004112:	4846      	ldr	r0, [pc, #280]	@ (800422c <MX_GPIO_Init+0x1b0>)
 8004114:	f002 fbd4 	bl	80068c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LedStatus_2_Pin|M2_IN2_Pin, GPIO_PIN_RESET);
 8004118:	2200      	movs	r2, #0
 800411a:	f44f 6181 	mov.w	r1, #1032	@ 0x408
 800411e:	4843      	ldr	r0, [pc, #268]	@ (800422c <MX_GPIO_Init+0x1b0>)
 8004120:	f002 fbce 	bl	80068c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, M1_IN1_Pin|M1_IN2_Pin|M2_IN1_Pin, GPIO_PIN_RESET);
 8004124:	2200      	movs	r2, #0
 8004126:	f44f 4106 	mov.w	r1, #34304	@ 0x8600
 800412a:	4841      	ldr	r0, [pc, #260]	@ (8004230 <MX_GPIO_Init+0x1b4>)
 800412c:	f002 fbc8 	bl	80068c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8004130:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004134:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004136:	2301      	movs	r3, #1
 8004138:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800413a:	2300      	movs	r3, #0
 800413c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800413e:	2300      	movs	r3, #0
 8004140:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8004142:	f107 0314 	add.w	r3, r7, #20
 8004146:	4619      	mov	r1, r3
 8004148:	4837      	ldr	r0, [pc, #220]	@ (8004228 <MX_GPIO_Init+0x1ac>)
 800414a:	f002 fa1d 	bl	8006588 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY_Pin */
  GPIO_InitStruct.Pin = KEY_Pin;
 800414e:	2301      	movs	r3, #1
 8004150:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004152:	2300      	movs	r3, #0
 8004154:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004156:	2300      	movs	r3, #0
 8004158:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 800415a:	f107 0314 	add.w	r3, r7, #20
 800415e:	4619      	mov	r1, r3
 8004160:	4833      	ldr	r0, [pc, #204]	@ (8004230 <MX_GPIO_Init+0x1b4>)
 8004162:	f002 fa11 	bl	8006588 <HAL_GPIO_Init>

  /*Configure GPIO pins : ESP_EN_Pin LedStatus_2_Pin M2_IN2_Pin */
  GPIO_InitStruct.Pin = ESP_EN_Pin|LedStatus_2_Pin|M2_IN2_Pin;
 8004166:	f240 430c 	movw	r3, #1036	@ 0x40c
 800416a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800416c:	2301      	movs	r3, #1
 800416e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004170:	2300      	movs	r3, #0
 8004172:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004174:	2300      	movs	r3, #0
 8004176:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004178:	f107 0314 	add.w	r3, r7, #20
 800417c:	4619      	mov	r1, r3
 800417e:	482b      	ldr	r0, [pc, #172]	@ (800422c <MX_GPIO_Init+0x1b0>)
 8004180:	f002 fa02 	bl	8006588 <HAL_GPIO_Init>

  /*Configure GPIO pin : M1_ENC_A_Pin */
  GPIO_InitStruct.Pin = M1_ENC_A_Pin;
 8004184:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004188:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800418a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800418e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004190:	2300      	movs	r3, #0
 8004192:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(M1_ENC_A_GPIO_Port, &GPIO_InitStruct);
 8004194:	f107 0314 	add.w	r3, r7, #20
 8004198:	4619      	mov	r1, r3
 800419a:	4824      	ldr	r0, [pc, #144]	@ (800422c <MX_GPIO_Init+0x1b0>)
 800419c:	f002 f9f4 	bl	8006588 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80041a0:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80041a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041a6:	2302      	movs	r3, #2
 80041a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041aa:	2300      	movs	r3, #0
 80041ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041ae:	2303      	movs	r3, #3
 80041b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80041b2:	2305      	movs	r3, #5
 80041b4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041b6:	f107 0314 	add.w	r3, r7, #20
 80041ba:	4619      	mov	r1, r3
 80041bc:	481b      	ldr	r0, [pc, #108]	@ (800422c <MX_GPIO_Init+0x1b0>)
 80041be:	f002 f9e3 	bl	8006588 <HAL_GPIO_Init>

  /*Configure GPIO pin : M2_ENC_A_Pin */
  GPIO_InitStruct.Pin = M2_ENC_A_Pin;
 80041c2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80041c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80041c8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80041cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041ce:	2300      	movs	r3, #0
 80041d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(M2_ENC_A_GPIO_Port, &GPIO_InitStruct);
 80041d2:	f107 0314 	add.w	r3, r7, #20
 80041d6:	4619      	mov	r1, r3
 80041d8:	4815      	ldr	r0, [pc, #84]	@ (8004230 <MX_GPIO_Init+0x1b4>)
 80041da:	f002 f9d5 	bl	8006588 <HAL_GPIO_Init>

  /*Configure GPIO pins : M1_IN1_Pin M1_IN2_Pin M2_IN1_Pin */
  GPIO_InitStruct.Pin = M1_IN1_Pin|M1_IN2_Pin|M2_IN1_Pin;
 80041de:	f44f 4306 	mov.w	r3, #34304	@ 0x8600
 80041e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80041e4:	2301      	movs	r3, #1
 80041e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041e8:	2300      	movs	r3, #0
 80041ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041ec:	2300      	movs	r3, #0
 80041ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041f0:	f107 0314 	add.w	r3, r7, #20
 80041f4:	4619      	mov	r1, r3
 80041f6:	480e      	ldr	r0, [pc, #56]	@ (8004230 <MX_GPIO_Init+0x1b4>)
 80041f8:	f002 f9c6 	bl	8006588 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80041fc:	2200      	movs	r2, #0
 80041fe:	2100      	movs	r1, #0
 8004200:	2017      	movs	r0, #23
 8004202:	f001 fd6e 	bl	8005ce2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004206:	2017      	movs	r0, #23
 8004208:	f001 fd87 	bl	8005d1a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800420c:	2200      	movs	r2, #0
 800420e:	2100      	movs	r1, #0
 8004210:	2028      	movs	r0, #40	@ 0x28
 8004212:	f001 fd66 	bl	8005ce2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004216:	2028      	movs	r0, #40	@ 0x28
 8004218:	f001 fd7f 	bl	8005d1a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800421c:	bf00      	nop
 800421e:	3728      	adds	r7, #40	@ 0x28
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}
 8004224:	40023800 	.word	0x40023800
 8004228:	40020800 	.word	0x40020800
 800422c:	40020400 	.word	0x40020400
 8004230:	40020000 	.word	0x40020000

08004234 <Init_Timing>:

/* USER CODE BEGIN 4 */
/************************************ USER INIT FUNCTIONS ****************************************/
/* INICIALIZACIÓN DE TIMERS Y PWM*/
void Init_Timing(){
 8004234:	b580      	push	{r7, lr}
 8004236:	af00      	add	r7, sp, #0
	  if(HAL_TIM_Base_Start_IT(&htim1) != HAL_OK){
 8004238:	4819      	ldr	r0, [pc, #100]	@ (80042a0 <Init_Timing+0x6c>)
 800423a:	f007 fe87 	bl	800bf4c <HAL_TIM_Base_Start_IT>
 800423e:	4603      	mov	r3, r0
 8004240:	2b00      	cmp	r3, #0
 8004242:	d005      	beq.n	8004250 <Init_Timing+0x1c>
		  comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"TIM1 INIT", 9);
 8004244:	2309      	movs	r3, #9
 8004246:	4a17      	ldr	r2, [pc, #92]	@ (80042a4 <Init_Timing+0x70>)
 8004248:	21ee      	movs	r1, #238	@ 0xee
 800424a:	4817      	ldr	r0, [pc, #92]	@ (80042a8 <Init_Timing+0x74>)
 800424c:	f7fd fd34 	bl	8001cb8 <comm_sendCMD>
	  }
	  if(HAL_TIM_Base_Start_IT(&htim3) != HAL_OK){
 8004250:	4816      	ldr	r0, [pc, #88]	@ (80042ac <Init_Timing+0x78>)
 8004252:	f007 fe7b 	bl	800bf4c <HAL_TIM_Base_Start_IT>
 8004256:	4603      	mov	r3, r0
 8004258:	2b00      	cmp	r3, #0
 800425a:	d005      	beq.n	8004268 <Init_Timing+0x34>
	  	  comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"TIM3 INIT BASE", 14);
 800425c:	230e      	movs	r3, #14
 800425e:	4a14      	ldr	r2, [pc, #80]	@ (80042b0 <Init_Timing+0x7c>)
 8004260:	21ee      	movs	r1, #238	@ 0xee
 8004262:	4811      	ldr	r0, [pc, #68]	@ (80042a8 <Init_Timing+0x74>)
 8004264:	f7fd fd28 	bl	8001cb8 <comm_sendCMD>
	  }
	  if(HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1) != HAL_OK){
 8004268:	2100      	movs	r1, #0
 800426a:	4810      	ldr	r0, [pc, #64]	@ (80042ac <Init_Timing+0x78>)
 800426c:	f007 ff2a 	bl	800c0c4 <HAL_TIM_PWM_Start>
 8004270:	4603      	mov	r3, r0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d005      	beq.n	8004282 <Init_Timing+0x4e>
		  comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"TIM3 INIT PWM1", 14);
 8004276:	230e      	movs	r3, #14
 8004278:	4a0e      	ldr	r2, [pc, #56]	@ (80042b4 <Init_Timing+0x80>)
 800427a:	21ee      	movs	r1, #238	@ 0xee
 800427c:	480a      	ldr	r0, [pc, #40]	@ (80042a8 <Init_Timing+0x74>)
 800427e:	f7fd fd1b 	bl	8001cb8 <comm_sendCMD>
	  }
	  if(HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2) != HAL_OK){
 8004282:	2104      	movs	r1, #4
 8004284:	4809      	ldr	r0, [pc, #36]	@ (80042ac <Init_Timing+0x78>)
 8004286:	f007 ff1d 	bl	800c0c4 <HAL_TIM_PWM_Start>
 800428a:	4603      	mov	r3, r0
 800428c:	2b00      	cmp	r3, #0
 800428e:	d005      	beq.n	800429c <Init_Timing+0x68>
		  comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"TIM3 INIT PWM2", 14);
 8004290:	230e      	movs	r3, #14
 8004292:	4a09      	ldr	r2, [pc, #36]	@ (80042b8 <Init_Timing+0x84>)
 8004294:	21ee      	movs	r1, #238	@ 0xee
 8004296:	4804      	ldr	r0, [pc, #16]	@ (80042a8 <Init_Timing+0x74>)
 8004298:	f7fd fd0e 	bl	8001cb8 <comm_sendCMD>
	  }
}
 800429c:	bf00      	nop
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	20000c34 	.word	0x20000c34
 80042a4:	08012bb4 	.word	0x08012bb4
 80042a8:	2000125c 	.word	0x2000125c
 80042ac:	20000c7c 	.word	0x20000c7c
 80042b0:	08012bc0 	.word	0x08012bc0
 80042b4:	08012bd0 	.word	0x08012bd0
 80042b8:	08012be0 	.word	0x08012be0

080042bc <Init_MPU6050>:
/* FIN INICIALIZACIÓN DE TIMERS Y PWM*/
/* INICIALIZACIÓN DE MPU6050 */
void Init_MPU6050(){
 80042bc:	b580      	push	{r7, lr}
 80042be:	af00      	add	r7, sp, #0
	if(HAL_I2C_IsDeviceReady(&hi2c1, MPU6050_ADDR, 1, 10000) != HAL_OK){
 80042c0:	f242 7310 	movw	r3, #10000	@ 0x2710
 80042c4:	2201      	movs	r2, #1
 80042c6:	21d0      	movs	r1, #208	@ 0xd0
 80042c8:	4811      	ldr	r0, [pc, #68]	@ (8004310 <Init_MPU6050+0x54>)
 80042ca:	f003 fbb7 	bl	8007a3c <HAL_I2C_IsDeviceReady>
 80042ce:	4603      	mov	r3, r0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d006      	beq.n	80042e2 <Init_MPU6050+0x26>
		comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"MPU6050 READY", 13);
 80042d4:	230d      	movs	r3, #13
 80042d6:	4a0f      	ldr	r2, [pc, #60]	@ (8004314 <Init_MPU6050+0x58>)
 80042d8:	21ee      	movs	r1, #238	@ 0xee
 80042da:	480f      	ldr	r0, [pc, #60]	@ (8004318 <Init_MPU6050+0x5c>)
 80042dc:	f7fd fcec 	bl	8001cb8 <comm_sendCMD>
			comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"MPU6050 INIT", 12);
		}else{
			MPU6050_Calibrate(&MPU6050);
		}
	}
}
 80042e0:	e013      	b.n	800430a <Init_MPU6050+0x4e>
		MPU6050_Set_I2C_Communication(&I2C_1_Abstract_Mem_Write_Blocking, &I2C_1_Abstract_Mem_Read_Blocking);
 80042e2:	490e      	ldr	r1, [pc, #56]	@ (800431c <Init_MPU6050+0x60>)
 80042e4:	480e      	ldr	r0, [pc, #56]	@ (8004320 <Init_MPU6050+0x64>)
 80042e6:	f7fc facb 	bl	8000880 <MPU6050_Set_I2C_Communication>
		if(MPU6050_Init(&MPU6050) != SYS_OK){
 80042ea:	480e      	ldr	r0, [pc, #56]	@ (8004324 <Init_MPU6050+0x68>)
 80042ec:	f7fc fade 	bl	80008ac <MPU6050_Init>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d006      	beq.n	8004304 <Init_MPU6050+0x48>
			comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"MPU6050 INIT", 12);
 80042f6:	230c      	movs	r3, #12
 80042f8:	4a0b      	ldr	r2, [pc, #44]	@ (8004328 <Init_MPU6050+0x6c>)
 80042fa:	21ee      	movs	r1, #238	@ 0xee
 80042fc:	4806      	ldr	r0, [pc, #24]	@ (8004318 <Init_MPU6050+0x5c>)
 80042fe:	f7fd fcdb 	bl	8001cb8 <comm_sendCMD>
}
 8004302:	e002      	b.n	800430a <Init_MPU6050+0x4e>
			MPU6050_Calibrate(&MPU6050);
 8004304:	4807      	ldr	r0, [pc, #28]	@ (8004324 <Init_MPU6050+0x68>)
 8004306:	f7fc fb83 	bl	8000a10 <MPU6050_Calibrate>
}
 800430a:	bf00      	nop
 800430c:	bd80      	pop	{r7, pc}
 800430e:	bf00      	nop
 8004310:	20000b20 	.word	0x20000b20
 8004314:	08012bf0 	.word	0x08012bf0
 8004318:	2000125c 	.word	0x2000125c
 800431c:	080046ed 	.word	0x080046ed
 8004320:	080046ad 	.word	0x080046ad
 8004324:	20000d60 	.word	0x20000d60
 8004328:	08012c00 	.word	0x08012c00

0800432c <Init_Display>:
/* FIN INICIALIZACIÓN DE MPU6050 */
/* INICIALIZACIÓN DISPLAY*/
void Init_Display(){
 800432c:	b580      	push	{r7, lr}
 800432e:	b082      	sub	sp, #8
 8004330:	af02      	add	r7, sp, #8
	Display.refreshCounter_10ms = DISPLAY_MEDIUM_REFRESH_RATE_10MS;
 8004332:	4b1f      	ldr	r3, [pc, #124]	@ (80043b0 <Init_Display+0x84>)
 8004334:	2214      	movs	r2, #20
 8004336:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
	Display.refreshRate_10ms = DISPLAY_MEDIUM_REFRESH_RATE_10MS;
 800433a:	4b1d      	ldr	r3, [pc, #116]	@ (80043b0 <Init_Display+0x84>)
 800433c:	2214      	movs	r2, #20
 800433e:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412

	if(HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 10000) != HAL_OK){
 8004342:	f242 7310 	movw	r3, #10000	@ 0x2710
 8004346:	2201      	movs	r2, #1
 8004348:	2178      	movs	r1, #120	@ 0x78
 800434a:	481a      	ldr	r0, [pc, #104]	@ (80043b4 <Init_Display+0x88>)
 800434c:	f003 fb76 	bl	8007a3c <HAL_I2C_IsDeviceReady>
 8004350:	4603      	mov	r3, r0
 8004352:	2b00      	cmp	r3, #0
 8004354:	d006      	beq.n	8004364 <Init_Display+0x38>
		comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"OLED READY", 10);
 8004356:	230a      	movs	r3, #10
 8004358:	4a17      	ldr	r2, [pc, #92]	@ (80043b8 <Init_Display+0x8c>)
 800435a:	21ee      	movs	r1, #238	@ 0xee
 800435c:	4817      	ldr	r0, [pc, #92]	@ (80043bc <Init_Display+0x90>)
 800435e:	f7fd fcab 	bl	8001cb8 <comm_sendCMD>
			Display_DrawBitmap(0,0, uner_logo, 128, 64, 1);
			Display.isInit = TRUE;
			Display.timer = HAL_GetTick();
		}
	}
}
 8004362:	e022      	b.n	80043aa <Init_Display+0x7e>
		Display_Set_I2C_Master_Transmit(&I2C_1_Abstract_Mem_DMA_Transmit, &I2C_1_Abstract_Master_Transmit_Blocking);
 8004364:	4916      	ldr	r1, [pc, #88]	@ (80043c0 <Init_Display+0x94>)
 8004366:	4817      	ldr	r0, [pc, #92]	@ (80043c4 <Init_Display+0x98>)
 8004368:	f7fc fd28 	bl	8000dbc <Display_Set_I2C_Master_Transmit>
		if(Display_Init() != SYS_OK){
 800436c:	f7fc fd3c 	bl	8000de8 <Display_Init>
 8004370:	4603      	mov	r3, r0
 8004372:	2b00      	cmp	r3, #0
 8004374:	d006      	beq.n	8004384 <Init_Display+0x58>
			comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"OLED INIT", 9);
 8004376:	2309      	movs	r3, #9
 8004378:	4a13      	ldr	r2, [pc, #76]	@ (80043c8 <Init_Display+0x9c>)
 800437a:	21ee      	movs	r1, #238	@ 0xee
 800437c:	480f      	ldr	r0, [pc, #60]	@ (80043bc <Init_Display+0x90>)
 800437e:	f7fd fc9b 	bl	8001cb8 <comm_sendCMD>
}
 8004382:	e012      	b.n	80043aa <Init_Display+0x7e>
			Display_DrawBitmap(0,0, uner_logo, 128, 64, 1);
 8004384:	2301      	movs	r3, #1
 8004386:	9301      	str	r3, [sp, #4]
 8004388:	2340      	movs	r3, #64	@ 0x40
 800438a:	9300      	str	r3, [sp, #0]
 800438c:	2380      	movs	r3, #128	@ 0x80
 800438e:	4a0f      	ldr	r2, [pc, #60]	@ (80043cc <Init_Display+0xa0>)
 8004390:	2100      	movs	r1, #0
 8004392:	2000      	movs	r0, #0
 8004394:	f7fc ffbe 	bl	8001314 <Display_DrawBitmap>
			Display.isInit = TRUE;
 8004398:	4b05      	ldr	r3, [pc, #20]	@ (80043b0 <Init_Display+0x84>)
 800439a:	2201      	movs	r2, #1
 800439c:	701a      	strb	r2, [r3, #0]
			Display.timer = HAL_GetTick();
 800439e:	f000 fe79 	bl	8005094 <HAL_GetTick>
 80043a2:	4603      	mov	r3, r0
 80043a4:	4a02      	ldr	r2, [pc, #8]	@ (80043b0 <Init_Display+0x84>)
 80043a6:	f8c2 3404 	str.w	r3, [r2, #1028]	@ 0x404
}
 80043aa:	bf00      	nop
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	20000e24 	.word	0x20000e24
 80043b4:	20000b20 	.word	0x20000b20
 80043b8:	08012c10 	.word	0x08012c10
 80043bc:	2000125c 	.word	0x2000125c
 80043c0:	08004679 	.word	0x08004679
 80043c4:	0800463d 	.word	0x0800463d
 80043c8:	08012c1c 	.word	0x08012c1c
 80043cc:	08012dd8 	.word	0x08012dd8

080043d0 <HAL_TIM_PeriodElapsedCallback>:
/* FIN INICIALIZACIÓN DISPLAY */
/************************************ END USER INIT FUNCTIONS ****************************************/
/***************************************** HAL CALLBACKS *********************************************/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){ //								1/4000s
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b084      	sub	sp, #16
 80043d4:	af02      	add	r7, sp, #8
 80043d6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1){
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a1a      	ldr	r2, [pc, #104]	@ (8004448 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d123      	bne.n	800442a <HAL_TIM_PeriodElapsedCallback+0x5a>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&Analog.raw, ADC_NUM_SENSORS);
 80043e2:	2209      	movs	r2, #9
 80043e4:	4919      	ldr	r1, [pc, #100]	@ (800444c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80043e6:	481a      	ldr	r0, [pc, #104]	@ (8004450 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80043e8:	f000 ffd8 	bl	800539c <HAL_ADC_Start_DMA>
		is5ms--;
 80043ec:	4b19      	ldr	r3, [pc, #100]	@ (8004454 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80043ee:	781b      	ldrb	r3, [r3, #0]
 80043f0:	3b01      	subs	r3, #1
 80043f2:	b2da      	uxtb	r2, r3
 80043f4:	4b17      	ldr	r3, [pc, #92]	@ (8004454 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80043f6:	701a      	strb	r2, [r3, #0]
		if(!is5ms){
 80043f8:	4b16      	ldr	r3, [pc, #88]	@ (8004454 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d114      	bne.n	800442a <HAL_TIM_PeriodElapsedCallback+0x5a>
			is5ms = 20;
 8004400:	4b14      	ldr	r3, [pc, #80]	@ (8004454 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8004402:	2214      	movs	r2, #20
 8004404:	701a      	strb	r2, [r3, #0]
			if(MPU6050.isInit){
 8004406:	4b14      	ldr	r3, [pc, #80]	@ (8004458 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8004408:	f893 30c2 	ldrb.w	r3, [r3, #194]	@ 0xc2
 800440c:	2b00      	cmp	r3, #0
 800440e:	d00c      	beq.n	800442a <HAL_TIM_PeriodElapsedCallback+0x5a>
				HAL_I2C_Mem_Read_DMA(&hi2c1, MPU6050_ADDR, ACCEL_XOUT_REG, 1, MPU6050.bit_data, 14);
 8004410:	230e      	movs	r3, #14
 8004412:	9301      	str	r3, [sp, #4]
 8004414:	4b11      	ldr	r3, [pc, #68]	@ (800445c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8004416:	9300      	str	r3, [sp, #0]
 8004418:	2301      	movs	r3, #1
 800441a:	223b      	movs	r2, #59	@ 0x3b
 800441c:	21d0      	movs	r1, #208	@ 0xd0
 800441e:	4810      	ldr	r0, [pc, #64]	@ (8004460 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8004420:	f003 f97c 	bl	800771c <HAL_I2C_Mem_Read_DMA>
				Display_I2C_DMA_Ready(FALSE);
 8004424:	2000      	movs	r0, #0
 8004426:	f7fc feb9 	bl	800119c <Display_I2C_DMA_Ready>
			}
		}
	}
	if(htim->Instance == TIM3){
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a0d      	ldr	r2, [pc, #52]	@ (8004464 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d104      	bne.n	800443e <HAL_TIM_PeriodElapsedCallback+0x6e>
		IS10MS = TRUE;
 8004434:	4a0c      	ldr	r2, [pc, #48]	@ (8004468 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8004436:	7813      	ldrb	r3, [r2, #0]
 8004438:	f043 0301 	orr.w	r3, r3, #1
 800443c:	7013      	strb	r3, [r2, #0]
	}
}
 800443e:	bf00      	nop
 8004440:	3708      	adds	r7, #8
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	40010000 	.word	0x40010000
 800444c:	20001238 	.word	0x20001238
 8004450:	20000a78 	.word	0x20000a78
 8004454:	2000000e 	.word	0x2000000e
 8004458:	20000d60 	.word	0x20000d60
 800445c:	20000e14 	.word	0x20000e14
 8004460:	20000b20 	.word	0x20000b20
 8004464:	40000400 	.word	0x40000400
 8004468:	20000d0c 	.word	0x20000d0c

0800446c <HAL_I2C_MemTxCpltCallback>:

void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c){
 800446c:	b580      	push	{r7, lr}
 800446e:	b082      	sub	sp, #8
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
	if(hi2c->Devaddress == SSD1306_I2C_ADDR){
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004478:	2b78      	cmp	r3, #120	@ 0x78
 800447a:	d107      	bne.n	800448c <HAL_I2C_MemTxCpltCallback+0x20>
		if(!MPU6050.isInit){
 800447c:	4b05      	ldr	r3, [pc, #20]	@ (8004494 <HAL_I2C_MemTxCpltCallback+0x28>)
 800447e:	f893 30c2 	ldrb.w	r3, [r3, #194]	@ 0xc2
 8004482:	2b00      	cmp	r3, #0
 8004484:	d102      	bne.n	800448c <HAL_I2C_MemTxCpltCallback+0x20>
			Display_I2C_DMA_Ready(TRUE);
 8004486:	2001      	movs	r0, #1
 8004488:	f7fc fe88 	bl	800119c <Display_I2C_DMA_Ready>
		}
	}
}
 800448c:	bf00      	nop
 800448e:	3708      	adds	r7, #8
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}
 8004494:	20000d60 	.word	0x20000d60

08004498 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){
 8004498:	b580      	push	{r7, lr}
 800449a:	b082      	sub	sp, #8
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
	if(hi2c->Devaddress == MPU6050_ADDR){
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044a4:	2bd0      	cmp	r3, #208	@ 0xd0
 80044a6:	d105      	bne.n	80044b4 <HAL_I2C_MemRxCpltCallback+0x1c>
		MPU6050_I2C_DMA_Cplt(&MPU6050);
 80044a8:	4804      	ldr	r0, [pc, #16]	@ (80044bc <HAL_I2C_MemRxCpltCallback+0x24>)
 80044aa:	f7fc fb57 	bl	8000b5c <MPU6050_I2C_DMA_Cplt>
		Display_I2C_DMA_Ready(TRUE);
 80044ae:	2001      	movs	r0, #1
 80044b0:	f7fc fe74 	bl	800119c <Display_I2C_DMA_Ready>
	}
}
 80044b4:	bf00      	nop
 80044b6:	3708      	adds	r7, #8
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}
 80044bc:	20000d60 	.word	0x20000d60

080044c0 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b082      	sub	sp, #8
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
	ADC_Conversion_Cplt(Analog.raw, Analog.value);
 80044c8:	4903      	ldr	r1, [pc, #12]	@ (80044d8 <HAL_ADC_ConvCpltCallback+0x18>)
 80044ca:	4804      	ldr	r0, [pc, #16]	@ (80044dc <HAL_ADC_ConvCpltCallback+0x1c>)
 80044cc:	f7fc f876 	bl	80005bc <ADC_Conversion_Cplt>
}
 80044d0:	bf00      	nop
 80044d2:	3708      	adds	r7, #8
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}
 80044d8:	2000124a 	.word	0x2000124a
 80044dc:	20001238 	.word	0x20001238

080044e0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b082      	sub	sp, #8
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	4603      	mov	r3, r0
 80044e8:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == M1_ENC_A_Pin){
 80044ea:	88fb      	ldrh	r3, [r7, #6]
 80044ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044f0:	d102      	bne.n	80044f8 <HAL_GPIO_EXTI_Callback+0x18>
    	Encoder_Add_Pulse(&EncoderL);
 80044f2:	4807      	ldr	r0, [pc, #28]	@ (8004510 <HAL_GPIO_EXTI_Callback+0x30>)
 80044f4:	f7fd f962 	bl	80017bc <Encoder_Add_Pulse>
    }
    if (GPIO_Pin == M2_ENC_A_Pin){
 80044f8:	88fb      	ldrh	r3, [r7, #6]
 80044fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044fe:	d102      	bne.n	8004506 <HAL_GPIO_EXTI_Callback+0x26>
    	Encoder_Add_Pulse(&EncoderR);
 8004500:	4804      	ldr	r0, [pc, #16]	@ (8004514 <HAL_GPIO_EXTI_Callback+0x34>)
 8004502:	f7fd f95b 	bl	80017bc <Encoder_Add_Pulse>
	}
}
 8004506:	bf00      	nop
 8004508:	3708      	adds	r7, #8
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}
 800450e:	bf00      	nop
 8004510:	20000d48 	.word	0x20000d48
 8004514:	20000d54 	.word	0x20000d54

08004518 <HAL_UART_RxCpltCallback>:
/**************************************** END HAL CALLBACKS ***************************************/

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8004518:	b580      	push	{r7, lr}
 800451a:	b082      	sub	sp, #8
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a08      	ldr	r2, [pc, #32]	@ (8004548 <HAL_UART_RxCpltCallback+0x30>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d10a      	bne.n	8004540 <HAL_UART_RxCpltCallback+0x28>
		ESP01_WriteRX(ESP.AT_Rx_data);
 800452a:	4b08      	ldr	r3, [pc, #32]	@ (800454c <HAL_UART_RxCpltCallback+0x34>)
 800452c:	f893 3248 	ldrb.w	r3, [r3, #584]	@ 0x248
 8004530:	4618      	mov	r0, r3
 8004532:	f7fd fd45 	bl	8001fc0 <ESP01_WriteRX>
		HAL_UART_Receive_IT(&huart1, &ESP.AT_Rx_data, 1);
 8004536:	2201      	movs	r2, #1
 8004538:	4905      	ldr	r1, [pc, #20]	@ (8004550 <HAL_UART_RxCpltCallback+0x38>)
 800453a:	4806      	ldr	r0, [pc, #24]	@ (8004554 <HAL_UART_RxCpltCallback+0x3c>)
 800453c:	f008 fcbe 	bl	800cebc <HAL_UART_Receive_IT>

	}
}
 8004540:	bf00      	nop
 8004542:	3708      	adds	r7, #8
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}
 8004548:	40011000 	.word	0x40011000
 800454c:	20001490 	.word	0x20001490
 8004550:	200016d8 	.word	0x200016d8
 8004554:	20000cc4 	.word	0x20000cc4

08004558 <ESP01_UART_Transmit>:

int ESP01_UART_Transmit(uint8_t val){
 8004558:	b480      	push	{r7}
 800455a:	b083      	sub	sp, #12
 800455c:	af00      	add	r7, sp, #0
 800455e:	4603      	mov	r3, r0
 8004560:	71fb      	strb	r3, [r7, #7]
	if(__HAL_UART_GET_FLAG(&huart1, UART_FLAG_TXE)){
 8004562:	4b09      	ldr	r3, [pc, #36]	@ (8004588 <ESP01_UART_Transmit+0x30>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800456c:	2b80      	cmp	r3, #128	@ 0x80
 800456e:	d104      	bne.n	800457a <ESP01_UART_Transmit+0x22>
		USART1->DR = val;
 8004570:	4a06      	ldr	r2, [pc, #24]	@ (800458c <ESP01_UART_Transmit+0x34>)
 8004572:	79fb      	ldrb	r3, [r7, #7]
 8004574:	6053      	str	r3, [r2, #4]
		return 1;
 8004576:	2301      	movs	r3, #1
 8004578:	e000      	b.n	800457c <ESP01_UART_Transmit+0x24>
	}
	return 0;
 800457a:	2300      	movs	r3, #0
}
 800457c:	4618      	mov	r0, r3
 800457e:	370c      	adds	r7, #12
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr
 8004588:	20000cc4 	.word	0x20000cc4
 800458c:	40011000 	.word	0x40011000

08004590 <ESP01_Data_Recived>:

void ESP01_Data_Recived(uint8_t value){
 8004590:	b480      	push	{r7}
 8004592:	b083      	sub	sp, #12
 8004594:	af00      	add	r7, sp, #0
 8004596:	4603      	mov	r3, r0
 8004598:	71fb      	strb	r3, [r7, #7]
	ESP.data.Rx.buffer[ESP.data.Rx.write++] = value;
 800459a:	4b0a      	ldr	r3, [pc, #40]	@ (80045c4 <ESP01_Data_Recived+0x34>)
 800459c:	f893 311d 	ldrb.w	r3, [r3, #285]	@ 0x11d
 80045a0:	1c5a      	adds	r2, r3, #1
 80045a2:	b2d1      	uxtb	r1, r2
 80045a4:	4a07      	ldr	r2, [pc, #28]	@ (80045c4 <ESP01_Data_Recived+0x34>)
 80045a6:	f882 111d 	strb.w	r1, [r2, #285]	@ 0x11d
 80045aa:	461a      	mov	r2, r3
 80045ac:	4b05      	ldr	r3, [pc, #20]	@ (80045c4 <ESP01_Data_Recived+0x34>)
 80045ae:	4413      	add	r3, r2
 80045b0:	79fa      	ldrb	r2, [r7, #7]
 80045b2:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
}
 80045b6:	bf00      	nop
 80045b8:	370c      	adds	r7, #12
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr
 80045c2:	bf00      	nop
 80045c4:	20001490 	.word	0x20001490

080045c8 <writeOn_ESP>:

void writeOn_ESP(s_commData *data){
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b082      	sub	sp, #8
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
	//comm_sendCMD(&USB.data, USERTEXT, (uint8_t *)"writeONESP", 10);
	if(data->Tx.write > data->Tx.read){
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	78da      	ldrb	r2, [r3, #3]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	789b      	ldrb	r3, [r3, #2]
 80045d8:	429a      	cmp	r2, r3
 80045da:	d909      	bls.n	80045f0 <writeOn_ESP+0x28>
		ESP.bytesToTx = data->Tx.write - data->Tx.read;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	78da      	ldrb	r2, [r3, #3]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	789b      	ldrb	r3, [r3, #2]
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	b2da      	uxtb	r2, r3
 80045e8:	4b13      	ldr	r3, [pc, #76]	@ (8004638 <writeOn_ESP+0x70>)
 80045ea:	f883 2249 	strb.w	r2, [r3, #585]	@ 0x249
 80045ee:	e006      	b.n	80045fe <writeOn_ESP+0x36>
	}else{
		ESP.bytesToTx = RINGBUFFLENGTH - data->Tx.read;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	789b      	ldrb	r3, [r3, #2]
 80045f4:	425b      	negs	r3, r3
 80045f6:	b2da      	uxtb	r2, r3
 80045f8:	4b0f      	ldr	r3, [pc, #60]	@ (8004638 <writeOn_ESP+0x70>)
 80045fa:	f883 2249 	strb.w	r2, [r3, #585]	@ 0x249
	}
	if(ESP01_Send(data->Tx.buffer,  data->Tx.read,  ESP.bytesToTx,  RINGBUFFLENGTH) == ESP01_SEND_READY){
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	1d18      	adds	r0, r3, #4
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	789b      	ldrb	r3, [r3, #2]
 8004606:	4619      	mov	r1, r3
 8004608:	4b0b      	ldr	r3, [pc, #44]	@ (8004638 <writeOn_ESP+0x70>)
 800460a:	f893 3249 	ldrb.w	r3, [r3, #585]	@ 0x249
 800460e:	461a      	mov	r2, r3
 8004610:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004614:	f7fd fcf4 	bl	8002000 <ESP01_Send>
 8004618:	4603      	mov	r3, r0
 800461a:	2b09      	cmp	r3, #9
 800461c:	d108      	bne.n	8004630 <writeOn_ESP+0x68>
		data->Tx.read += ESP.bytesToTx;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	789a      	ldrb	r2, [r3, #2]
 8004622:	4b05      	ldr	r3, [pc, #20]	@ (8004638 <writeOn_ESP+0x70>)
 8004624:	f893 3249 	ldrb.w	r3, [r3, #585]	@ 0x249
 8004628:	4413      	add	r3, r2
 800462a:	b2da      	uxtb	r2, r3
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	709a      	strb	r2, [r3, #2]
		data->Tx.read += ESP.bytesToTx;
		break;
	case ESP01_SEND_BUSY:
		break;
	}*/
}
 8004630:	bf00      	nop
 8004632:	3708      	adds	r7, #8
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}
 8004638:	20001490 	.word	0x20001490

0800463c <I2C_1_Abstract_Mem_DMA_Transmit>:


/*************************************** HARDWARE ABSTRACTION ************************************/
e_system I2C_1_Abstract_Mem_DMA_Transmit(uint16_t Dev_Address, uint8_t reg, uint8_t *p_Data, uint16_t _Size){
 800463c:	b580      	push	{r7, lr}
 800463e:	b086      	sub	sp, #24
 8004640:	af02      	add	r7, sp, #8
 8004642:	60ba      	str	r2, [r7, #8]
 8004644:	461a      	mov	r2, r3
 8004646:	4603      	mov	r3, r0
 8004648:	81fb      	strh	r3, [r7, #14]
 800464a:	460b      	mov	r3, r1
 800464c:	737b      	strb	r3, [r7, #13]
 800464e:	4613      	mov	r3, r2
 8004650:	80fb      	strh	r3, [r7, #6]
	return (e_system)HAL_I2C_Mem_Write_DMA(&hi2c1, Dev_Address, reg, 1, p_Data, _Size);
 8004652:	7b7b      	ldrb	r3, [r7, #13]
 8004654:	b29a      	uxth	r2, r3
 8004656:	89f9      	ldrh	r1, [r7, #14]
 8004658:	88fb      	ldrh	r3, [r7, #6]
 800465a:	9301      	str	r3, [sp, #4]
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	9300      	str	r3, [sp, #0]
 8004660:	2301      	movs	r3, #1
 8004662:	4804      	ldr	r0, [pc, #16]	@ (8004674 <I2C_1_Abstract_Mem_DMA_Transmit+0x38>)
 8004664:	f002 fefc 	bl	8007460 <HAL_I2C_Mem_Write_DMA>
 8004668:	4603      	mov	r3, r0
}
 800466a:	4618      	mov	r0, r3
 800466c:	3710      	adds	r7, #16
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}
 8004672:	bf00      	nop
 8004674:	20000b20 	.word	0x20000b20

08004678 <I2C_1_Abstract_Master_Transmit_Blocking>:

e_system I2C_1_Abstract_Master_Transmit_Blocking(uint16_t Dev_Address, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout){
 8004678:	b580      	push	{r7, lr}
 800467a:	b086      	sub	sp, #24
 800467c:	af02      	add	r7, sp, #8
 800467e:	60b9      	str	r1, [r7, #8]
 8004680:	607b      	str	r3, [r7, #4]
 8004682:	4603      	mov	r3, r0
 8004684:	81fb      	strh	r3, [r7, #14]
 8004686:	4613      	mov	r3, r2
 8004688:	81bb      	strh	r3, [r7, #12]
	return (e_system)HAL_I2C_Master_Transmit(&hi2c1, Dev_Address, p_Data, _Size, _Timeout);
 800468a:	89ba      	ldrh	r2, [r7, #12]
 800468c:	89f9      	ldrh	r1, [r7, #14]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	9300      	str	r3, [sp, #0]
 8004692:	4613      	mov	r3, r2
 8004694:	68ba      	ldr	r2, [r7, #8]
 8004696:	4804      	ldr	r0, [pc, #16]	@ (80046a8 <I2C_1_Abstract_Master_Transmit_Blocking+0x30>)
 8004698:	f002 fab8 	bl	8006c0c <HAL_I2C_Master_Transmit>
 800469c:	4603      	mov	r3, r0
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3710      	adds	r7, #16
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop
 80046a8:	20000b20 	.word	0x20000b20

080046ac <I2C_1_Abstract_Mem_Write_Blocking>:

e_system I2C_1_Abstract_Mem_Write_Blocking(uint16_t Dev_Address, uint8_t Mem_Adress, uint8_t Mem_AddSize, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout){
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b086      	sub	sp, #24
 80046b0:	af04      	add	r7, sp, #16
 80046b2:	603b      	str	r3, [r7, #0]
 80046b4:	4603      	mov	r3, r0
 80046b6:	80fb      	strh	r3, [r7, #6]
 80046b8:	460b      	mov	r3, r1
 80046ba:	717b      	strb	r3, [r7, #5]
 80046bc:	4613      	mov	r3, r2
 80046be:	713b      	strb	r3, [r7, #4]
	return HAL_I2C_Mem_Write(&hi2c1, Dev_Address, Mem_Adress, Mem_AddSize, p_Data, _Size, _Timeout);
 80046c0:	797b      	ldrb	r3, [r7, #5]
 80046c2:	b29a      	uxth	r2, r3
 80046c4:	793b      	ldrb	r3, [r7, #4]
 80046c6:	b298      	uxth	r0, r3
 80046c8:	88f9      	ldrh	r1, [r7, #6]
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	9302      	str	r3, [sp, #8]
 80046ce:	8a3b      	ldrh	r3, [r7, #16]
 80046d0:	9301      	str	r3, [sp, #4]
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	9300      	str	r3, [sp, #0]
 80046d6:	4603      	mov	r3, r0
 80046d8:	4803      	ldr	r0, [pc, #12]	@ (80046e8 <I2C_1_Abstract_Mem_Write_Blocking+0x3c>)
 80046da:	f002 fb95 	bl	8006e08 <HAL_I2C_Mem_Write>
 80046de:	4603      	mov	r3, r0
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3708      	adds	r7, #8
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}
 80046e8:	20000b20 	.word	0x20000b20

080046ec <I2C_1_Abstract_Mem_Read_Blocking>:

e_system I2C_1_Abstract_Mem_Read_Blocking(uint16_t Dev_Address, uint8_t Mem_Adress, uint8_t Mem_AddSize, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout){
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b086      	sub	sp, #24
 80046f0:	af04      	add	r7, sp, #16
 80046f2:	603b      	str	r3, [r7, #0]
 80046f4:	4603      	mov	r3, r0
 80046f6:	80fb      	strh	r3, [r7, #6]
 80046f8:	460b      	mov	r3, r1
 80046fa:	717b      	strb	r3, [r7, #5]
 80046fc:	4613      	mov	r3, r2
 80046fe:	713b      	strb	r3, [r7, #4]
	return HAL_I2C_Mem_Read(&hi2c1, Dev_Address, Mem_Adress, Mem_AddSize, p_Data, _Size, _Timeout);
 8004700:	797b      	ldrb	r3, [r7, #5]
 8004702:	b29a      	uxth	r2, r3
 8004704:	793b      	ldrb	r3, [r7, #4]
 8004706:	b298      	uxth	r0, r3
 8004708:	88f9      	ldrh	r1, [r7, #6]
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	9302      	str	r3, [sp, #8]
 800470e:	8a3b      	ldrh	r3, [r7, #16]
 8004710:	9301      	str	r3, [sp, #4]
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	9300      	str	r3, [sp, #0]
 8004716:	4603      	mov	r3, r0
 8004718:	4803      	ldr	r0, [pc, #12]	@ (8004728 <I2C_1_Abstract_Mem_Read_Blocking+0x3c>)
 800471a:	f002 fc6f 	bl	8006ffc <HAL_I2C_Mem_Read>
 800471e:	4603      	mov	r3, r0
}
 8004720:	4618      	mov	r0, r3
 8004722:	3708      	adds	r7, #8
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}
 8004728:	20000b20 	.word	0x20000b20

0800472c <KEY_Read_Value>:

uint8_t KEY_Read_Value(){
 800472c:	b580      	push	{r7, lr}
 800472e:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin);
 8004730:	2101      	movs	r1, #1
 8004732:	4803      	ldr	r0, [pc, #12]	@ (8004740 <KEY_Read_Value+0x14>)
 8004734:	f002 f8ac 	bl	8006890 <HAL_GPIO_ReadPin>
 8004738:	4603      	mov	r3, r0
}
 800473a:	4618      	mov	r0, r3
 800473c:	bd80      	pop	{r7, pc}
 800473e:	bf00      	nop
 8004740:	40020000 	.word	0x40020000

08004744 <writeOn_USB>:

void writeOn_USB(s_commData *data){
 8004744:	b580      	push	{r7, lr}
 8004746:	b082      	sub	sp, #8
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
	if(USB.data.Tx.write > USB.data.Tx.read){
 800474c:	4b19      	ldr	r3, [pc, #100]	@ (80047b4 <writeOn_USB+0x70>)
 800474e:	78da      	ldrb	r2, [r3, #3]
 8004750:	4b18      	ldr	r3, [pc, #96]	@ (80047b4 <writeOn_USB+0x70>)
 8004752:	789b      	ldrb	r3, [r3, #2]
 8004754:	429a      	cmp	r2, r3
 8004756:	d909      	bls.n	800476c <writeOn_USB+0x28>
		USB.bytesToTx = USB.data.Tx.write - USB.data.Tx.read;
 8004758:	4b16      	ldr	r3, [pc, #88]	@ (80047b4 <writeOn_USB+0x70>)
 800475a:	78da      	ldrb	r2, [r3, #3]
 800475c:	4b15      	ldr	r3, [pc, #84]	@ (80047b4 <writeOn_USB+0x70>)
 800475e:	789b      	ldrb	r3, [r3, #2]
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	b2da      	uxtb	r2, r3
 8004764:	4b13      	ldr	r3, [pc, #76]	@ (80047b4 <writeOn_USB+0x70>)
 8004766:	f883 2230 	strb.w	r2, [r3, #560]	@ 0x230
 800476a:	e006      	b.n	800477a <writeOn_USB+0x36>
	}else{
		USB.bytesToTx = RINGBUFFLENGTH - USB.data.Tx.read;
 800476c:	4b11      	ldr	r3, [pc, #68]	@ (80047b4 <writeOn_USB+0x70>)
 800476e:	789b      	ldrb	r3, [r3, #2]
 8004770:	425b      	negs	r3, r3
 8004772:	b2da      	uxtb	r2, r3
 8004774:	4b0f      	ldr	r3, [pc, #60]	@ (80047b4 <writeOn_USB+0x70>)
 8004776:	f883 2230 	strb.w	r2, [r3, #560]	@ 0x230
	}
	if(CDC_Transmit_FS(&USB.data.Tx.buffer[USB.data.Tx.read], USB.bytesToTx) == USBD_OK){
 800477a:	4b0e      	ldr	r3, [pc, #56]	@ (80047b4 <writeOn_USB+0x70>)
 800477c:	789b      	ldrb	r3, [r3, #2]
 800477e:	461a      	mov	r2, r3
 8004780:	4b0c      	ldr	r3, [pc, #48]	@ (80047b4 <writeOn_USB+0x70>)
 8004782:	4413      	add	r3, r2
 8004784:	3304      	adds	r3, #4
 8004786:	4a0b      	ldr	r2, [pc, #44]	@ (80047b4 <writeOn_USB+0x70>)
 8004788:	f892 2230 	ldrb.w	r2, [r2, #560]	@ 0x230
 800478c:	4611      	mov	r1, r2
 800478e:	4618      	mov	r0, r3
 8004790:	f00c feec 	bl	801156c <CDC_Transmit_FS>
 8004794:	4603      	mov	r3, r0
 8004796:	2b00      	cmp	r3, #0
 8004798:	d108      	bne.n	80047ac <writeOn_USB+0x68>
		USB.data.Tx.read += USB.bytesToTx;
 800479a:	4b06      	ldr	r3, [pc, #24]	@ (80047b4 <writeOn_USB+0x70>)
 800479c:	789a      	ldrb	r2, [r3, #2]
 800479e:	4b05      	ldr	r3, [pc, #20]	@ (80047b4 <writeOn_USB+0x70>)
 80047a0:	f893 3230 	ldrb.w	r3, [r3, #560]	@ 0x230
 80047a4:	4413      	add	r3, r2
 80047a6:	b2da      	uxtb	r2, r3
 80047a8:	4b02      	ldr	r3, [pc, #8]	@ (80047b4 <writeOn_USB+0x70>)
 80047aa:	709a      	strb	r2, [r3, #2]
	}
}
 80047ac:	bf00      	nop
 80047ae:	3708      	adds	r7, #8
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	2000125c 	.word	0x2000125c

080047b8 <dataRxOn_USB>:

void dataRxOn_USB(uint8_t *buff, uint32_t len){
 80047b8:	b480      	push	{r7}
 80047ba:	b085      	sub	sp, #20
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	6039      	str	r1, [r7, #0]
	if(buff != NULL){
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d01a      	beq.n	80047fe <dataRxOn_USB+0x46>
		for(uint16_t i = 0; i < len; i++){
 80047c8:	2300      	movs	r3, #0
 80047ca:	81fb      	strh	r3, [r7, #14]
 80047cc:	e013      	b.n	80047f6 <dataRxOn_USB+0x3e>
			USB.data.Rx.buffer[USB.data.Rx.write++] = buff[i];
 80047ce:	89fb      	ldrh	r3, [r7, #14]
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	441a      	add	r2, r3
 80047d4:	4b0d      	ldr	r3, [pc, #52]	@ (800480c <dataRxOn_USB+0x54>)
 80047d6:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 80047da:	1c59      	adds	r1, r3, #1
 80047dc:	b2c8      	uxtb	r0, r1
 80047de:	490b      	ldr	r1, [pc, #44]	@ (800480c <dataRxOn_USB+0x54>)
 80047e0:	f881 0105 	strb.w	r0, [r1, #261]	@ 0x105
 80047e4:	4619      	mov	r1, r3
 80047e6:	7812      	ldrb	r2, [r2, #0]
 80047e8:	4b08      	ldr	r3, [pc, #32]	@ (800480c <dataRxOn_USB+0x54>)
 80047ea:	440b      	add	r3, r1
 80047ec:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
		for(uint16_t i = 0; i < len; i++){
 80047f0:	89fb      	ldrh	r3, [r7, #14]
 80047f2:	3301      	adds	r3, #1
 80047f4:	81fb      	strh	r3, [r7, #14]
 80047f6:	89fb      	ldrh	r3, [r7, #14]
 80047f8:	683a      	ldr	r2, [r7, #0]
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d8e7      	bhi.n	80047ce <dataRxOn_USB+0x16>
		}
	}
}
 80047fe:	bf00      	nop
 8004800:	3714      	adds	r7, #20
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr
 800480a:	bf00      	nop
 800480c:	2000125c 	.word	0x2000125c

08004810 <Motor_Left_SetPins>:

void Motor_Left_SetPins(uint8_t pinA, uint8_t pinB){
 8004810:	b580      	push	{r7, lr}
 8004812:	b082      	sub	sp, #8
 8004814:	af00      	add	r7, sp, #0
 8004816:	4603      	mov	r3, r0
 8004818:	460a      	mov	r2, r1
 800481a:	71fb      	strb	r3, [r7, #7]
 800481c:	4613      	mov	r3, r2
 800481e:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(M1_IN1_GPIO_Port, M1_IN1_Pin, pinA);
 8004820:	79fb      	ldrb	r3, [r7, #7]
 8004822:	461a      	mov	r2, r3
 8004824:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004828:	4806      	ldr	r0, [pc, #24]	@ (8004844 <Motor_Left_SetPins+0x34>)
 800482a:	f002 f849 	bl	80068c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(M1_IN2_GPIO_Port, M1_IN2_Pin, pinB);
 800482e:	79bb      	ldrb	r3, [r7, #6]
 8004830:	461a      	mov	r2, r3
 8004832:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004836:	4803      	ldr	r0, [pc, #12]	@ (8004844 <Motor_Left_SetPins+0x34>)
 8004838:	f002 f842 	bl	80068c0 <HAL_GPIO_WritePin>
}
 800483c:	bf00      	nop
 800483e:	3708      	adds	r7, #8
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}
 8004844:	40020000 	.word	0x40020000

08004848 <Motor_Right_SetPins>:

void Motor_Right_SetPins(uint8_t pinA, uint8_t pinB){
 8004848:	b580      	push	{r7, lr}
 800484a:	b082      	sub	sp, #8
 800484c:	af00      	add	r7, sp, #0
 800484e:	4603      	mov	r3, r0
 8004850:	460a      	mov	r2, r1
 8004852:	71fb      	strb	r3, [r7, #7]
 8004854:	4613      	mov	r3, r2
 8004856:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(M2_IN1_GPIO_Port, M2_IN1_Pin, pinA);
 8004858:	79fb      	ldrb	r3, [r7, #7]
 800485a:	461a      	mov	r2, r3
 800485c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004860:	4806      	ldr	r0, [pc, #24]	@ (800487c <Motor_Right_SetPins+0x34>)
 8004862:	f002 f82d 	bl	80068c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(M2_IN2_GPIO_Port, M2_IN2_Pin, pinB);
 8004866:	79bb      	ldrb	r3, [r7, #6]
 8004868:	461a      	mov	r2, r3
 800486a:	2108      	movs	r1, #8
 800486c:	4804      	ldr	r0, [pc, #16]	@ (8004880 <Motor_Right_SetPins+0x38>)
 800486e:	f002 f827 	bl	80068c0 <HAL_GPIO_WritePin>
}
 8004872:	bf00      	nop
 8004874:	3708      	adds	r7, #8
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}
 800487a:	bf00      	nop
 800487c:	40020000 	.word	0x40020000
 8004880:	40020400 	.word	0x40020400

08004884 <Motor_Left_SetPWM>:

void Motor_Left_SetPWM(uint16_t dCycle){
 8004884:	b480      	push	{r7}
 8004886:	b083      	sub	sp, #12
 8004888:	af00      	add	r7, sp, #0
 800488a:	4603      	mov	r3, r0
 800488c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, dCycle);
 800488e:	4b05      	ldr	r3, [pc, #20]	@ (80048a4 <Motor_Left_SetPWM+0x20>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	88fa      	ldrh	r2, [r7, #6]
 8004894:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8004896:	bf00      	nop
 8004898:	370c      	adds	r7, #12
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr
 80048a2:	bf00      	nop
 80048a4:	20000c7c 	.word	0x20000c7c

080048a8 <Motor_Right_SetPWM>:

void Motor_Right_SetPWM(uint16_t dCycle){
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	4603      	mov	r3, r0
 80048b0:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, dCycle);
 80048b2:	4b05      	ldr	r3, [pc, #20]	@ (80048c8 <Motor_Right_SetPWM+0x20>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	88fa      	ldrh	r2, [r7, #6]
 80048b8:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80048ba:	bf00      	nop
 80048bc:	370c      	adds	r7, #12
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr
 80048c6:	bf00      	nop
 80048c8:	20000c7c 	.word	0x20000c7c

080048cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80048cc:	b480      	push	{r7}
 80048ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80048d0:	b672      	cpsid	i
}
 80048d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80048d4:	bf00      	nop
 80048d6:	e7fd      	b.n	80048d4 <Error_Handler+0x8>

080048d8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b082      	sub	sp, #8
 80048dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048de:	2300      	movs	r3, #0
 80048e0:	607b      	str	r3, [r7, #4]
 80048e2:	4b13      	ldr	r3, [pc, #76]	@ (8004930 <HAL_MspInit+0x58>)
 80048e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048e6:	4a12      	ldr	r2, [pc, #72]	@ (8004930 <HAL_MspInit+0x58>)
 80048e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80048ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80048ee:	4b10      	ldr	r3, [pc, #64]	@ (8004930 <HAL_MspInit+0x58>)
 80048f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80048f6:	607b      	str	r3, [r7, #4]
 80048f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80048fa:	2300      	movs	r3, #0
 80048fc:	603b      	str	r3, [r7, #0]
 80048fe:	4b0c      	ldr	r3, [pc, #48]	@ (8004930 <HAL_MspInit+0x58>)
 8004900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004902:	4a0b      	ldr	r2, [pc, #44]	@ (8004930 <HAL_MspInit+0x58>)
 8004904:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004908:	6413      	str	r3, [r2, #64]	@ 0x40
 800490a:	4b09      	ldr	r3, [pc, #36]	@ (8004930 <HAL_MspInit+0x58>)
 800490c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800490e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004912:	603b      	str	r3, [r7, #0]
 8004914:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 0, 0);
 8004916:	2200      	movs	r2, #0
 8004918:	2100      	movs	r1, #0
 800491a:	2051      	movs	r0, #81	@ 0x51
 800491c:	f001 f9e1 	bl	8005ce2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8004920:	2051      	movs	r0, #81	@ 0x51
 8004922:	f001 f9fa 	bl	8005d1a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004926:	bf00      	nop
 8004928:	3708      	adds	r7, #8
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}
 800492e:	bf00      	nop
 8004930:	40023800 	.word	0x40023800

08004934 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b08a      	sub	sp, #40	@ 0x28
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800493c:	f107 0314 	add.w	r3, r7, #20
 8004940:	2200      	movs	r2, #0
 8004942:	601a      	str	r2, [r3, #0]
 8004944:	605a      	str	r2, [r3, #4]
 8004946:	609a      	str	r2, [r3, #8]
 8004948:	60da      	str	r2, [r3, #12]
 800494a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a40      	ldr	r2, [pc, #256]	@ (8004a54 <HAL_ADC_MspInit+0x120>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d179      	bne.n	8004a4a <HAL_ADC_MspInit+0x116>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004956:	2300      	movs	r3, #0
 8004958:	613b      	str	r3, [r7, #16]
 800495a:	4b3f      	ldr	r3, [pc, #252]	@ (8004a58 <HAL_ADC_MspInit+0x124>)
 800495c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800495e:	4a3e      	ldr	r2, [pc, #248]	@ (8004a58 <HAL_ADC_MspInit+0x124>)
 8004960:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004964:	6453      	str	r3, [r2, #68]	@ 0x44
 8004966:	4b3c      	ldr	r3, [pc, #240]	@ (8004a58 <HAL_ADC_MspInit+0x124>)
 8004968:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800496a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800496e:	613b      	str	r3, [r7, #16]
 8004970:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004972:	2300      	movs	r3, #0
 8004974:	60fb      	str	r3, [r7, #12]
 8004976:	4b38      	ldr	r3, [pc, #224]	@ (8004a58 <HAL_ADC_MspInit+0x124>)
 8004978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800497a:	4a37      	ldr	r2, [pc, #220]	@ (8004a58 <HAL_ADC_MspInit+0x124>)
 800497c:	f043 0301 	orr.w	r3, r3, #1
 8004980:	6313      	str	r3, [r2, #48]	@ 0x30
 8004982:	4b35      	ldr	r3, [pc, #212]	@ (8004a58 <HAL_ADC_MspInit+0x124>)
 8004984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004986:	f003 0301 	and.w	r3, r3, #1
 800498a:	60fb      	str	r3, [r7, #12]
 800498c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800498e:	2300      	movs	r3, #0
 8004990:	60bb      	str	r3, [r7, #8]
 8004992:	4b31      	ldr	r3, [pc, #196]	@ (8004a58 <HAL_ADC_MspInit+0x124>)
 8004994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004996:	4a30      	ldr	r2, [pc, #192]	@ (8004a58 <HAL_ADC_MspInit+0x124>)
 8004998:	f043 0302 	orr.w	r3, r3, #2
 800499c:	6313      	str	r3, [r2, #48]	@ 0x30
 800499e:	4b2e      	ldr	r3, [pc, #184]	@ (8004a58 <HAL_ADC_MspInit+0x124>)
 80049a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049a2:	f003 0302 	and.w	r3, r3, #2
 80049a6:	60bb      	str	r3, [r7, #8]
 80049a8:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = LF1_Pin|LF2_Pin|LF3_Pin|LF4_Pin
 80049aa:	23fe      	movs	r3, #254	@ 0xfe
 80049ac:	617b      	str	r3, [r7, #20]
                          |WD1_Pin|WD2_Pin|WD3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80049ae:	2303      	movs	r3, #3
 80049b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049b2:	2300      	movs	r3, #0
 80049b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049b6:	f107 0314 	add.w	r3, r7, #20
 80049ba:	4619      	mov	r1, r3
 80049bc:	4827      	ldr	r0, [pc, #156]	@ (8004a5c <HAL_ADC_MspInit+0x128>)
 80049be:	f001 fde3 	bl	8006588 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = WD4_Pin|BAT_LVL_Pin;
 80049c2:	2303      	movs	r3, #3
 80049c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80049c6:	2303      	movs	r3, #3
 80049c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049ca:	2300      	movs	r3, #0
 80049cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049ce:	f107 0314 	add.w	r3, r7, #20
 80049d2:	4619      	mov	r1, r3
 80049d4:	4822      	ldr	r0, [pc, #136]	@ (8004a60 <HAL_ADC_MspInit+0x12c>)
 80049d6:	f001 fdd7 	bl	8006588 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80049da:	4b22      	ldr	r3, [pc, #136]	@ (8004a64 <HAL_ADC_MspInit+0x130>)
 80049dc:	4a22      	ldr	r2, [pc, #136]	@ (8004a68 <HAL_ADC_MspInit+0x134>)
 80049de:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80049e0:	4b20      	ldr	r3, [pc, #128]	@ (8004a64 <HAL_ADC_MspInit+0x130>)
 80049e2:	2200      	movs	r2, #0
 80049e4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80049e6:	4b1f      	ldr	r3, [pc, #124]	@ (8004a64 <HAL_ADC_MspInit+0x130>)
 80049e8:	2200      	movs	r2, #0
 80049ea:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80049ec:	4b1d      	ldr	r3, [pc, #116]	@ (8004a64 <HAL_ADC_MspInit+0x130>)
 80049ee:	2200      	movs	r2, #0
 80049f0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80049f2:	4b1c      	ldr	r3, [pc, #112]	@ (8004a64 <HAL_ADC_MspInit+0x130>)
 80049f4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80049f8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80049fa:	4b1a      	ldr	r3, [pc, #104]	@ (8004a64 <HAL_ADC_MspInit+0x130>)
 80049fc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004a00:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004a02:	4b18      	ldr	r3, [pc, #96]	@ (8004a64 <HAL_ADC_MspInit+0x130>)
 8004a04:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004a08:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8004a0a:	4b16      	ldr	r3, [pc, #88]	@ (8004a64 <HAL_ADC_MspInit+0x130>)
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004a10:	4b14      	ldr	r3, [pc, #80]	@ (8004a64 <HAL_ADC_MspInit+0x130>)
 8004a12:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8004a16:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004a18:	4b12      	ldr	r3, [pc, #72]	@ (8004a64 <HAL_ADC_MspInit+0x130>)
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004a1e:	4811      	ldr	r0, [pc, #68]	@ (8004a64 <HAL_ADC_MspInit+0x130>)
 8004a20:	f001 f996 	bl	8005d50 <HAL_DMA_Init>
 8004a24:	4603      	mov	r3, r0
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d001      	beq.n	8004a2e <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8004a2a:	f7ff ff4f 	bl	80048cc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4a0c      	ldr	r2, [pc, #48]	@ (8004a64 <HAL_ADC_MspInit+0x130>)
 8004a32:	639a      	str	r2, [r3, #56]	@ 0x38
 8004a34:	4a0b      	ldr	r2, [pc, #44]	@ (8004a64 <HAL_ADC_MspInit+0x130>)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	2100      	movs	r1, #0
 8004a3e:	2012      	movs	r0, #18
 8004a40:	f001 f94f 	bl	8005ce2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8004a44:	2012      	movs	r0, #18
 8004a46:	f001 f968 	bl	8005d1a <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8004a4a:	bf00      	nop
 8004a4c:	3728      	adds	r7, #40	@ 0x28
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}
 8004a52:	bf00      	nop
 8004a54:	40012000 	.word	0x40012000
 8004a58:	40023800 	.word	0x40023800
 8004a5c:	40020000 	.word	0x40020000
 8004a60:	40020400 	.word	0x40020400
 8004a64:	20000ac0 	.word	0x20000ac0
 8004a68:	40026410 	.word	0x40026410

08004a6c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b08a      	sub	sp, #40	@ 0x28
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a74:	f107 0314 	add.w	r3, r7, #20
 8004a78:	2200      	movs	r2, #0
 8004a7a:	601a      	str	r2, [r3, #0]
 8004a7c:	605a      	str	r2, [r3, #4]
 8004a7e:	609a      	str	r2, [r3, #8]
 8004a80:	60da      	str	r2, [r3, #12]
 8004a82:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a50      	ldr	r2, [pc, #320]	@ (8004bcc <HAL_I2C_MspInit+0x160>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	f040 8099 	bne.w	8004bc2 <HAL_I2C_MspInit+0x156>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a90:	2300      	movs	r3, #0
 8004a92:	613b      	str	r3, [r7, #16]
 8004a94:	4b4e      	ldr	r3, [pc, #312]	@ (8004bd0 <HAL_I2C_MspInit+0x164>)
 8004a96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a98:	4a4d      	ldr	r2, [pc, #308]	@ (8004bd0 <HAL_I2C_MspInit+0x164>)
 8004a9a:	f043 0302 	orr.w	r3, r3, #2
 8004a9e:	6313      	str	r3, [r2, #48]	@ 0x30
 8004aa0:	4b4b      	ldr	r3, [pc, #300]	@ (8004bd0 <HAL_I2C_MspInit+0x164>)
 8004aa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aa4:	f003 0302 	and.w	r3, r3, #2
 8004aa8:	613b      	str	r3, [r7, #16]
 8004aaa:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 8004aac:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004ab0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004ab2:	2312      	movs	r3, #18
 8004ab4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004aba:	2303      	movs	r3, #3
 8004abc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004abe:	2304      	movs	r3, #4
 8004ac0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ac2:	f107 0314 	add.w	r3, r7, #20
 8004ac6:	4619      	mov	r1, r3
 8004ac8:	4842      	ldr	r0, [pc, #264]	@ (8004bd4 <HAL_I2C_MspInit+0x168>)
 8004aca:	f001 fd5d 	bl	8006588 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004ace:	2300      	movs	r3, #0
 8004ad0:	60fb      	str	r3, [r7, #12]
 8004ad2:	4b3f      	ldr	r3, [pc, #252]	@ (8004bd0 <HAL_I2C_MspInit+0x164>)
 8004ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ad6:	4a3e      	ldr	r2, [pc, #248]	@ (8004bd0 <HAL_I2C_MspInit+0x164>)
 8004ad8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004adc:	6413      	str	r3, [r2, #64]	@ 0x40
 8004ade:	4b3c      	ldr	r3, [pc, #240]	@ (8004bd0 <HAL_I2C_MspInit+0x164>)
 8004ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ae2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004ae6:	60fb      	str	r3, [r7, #12]
 8004ae8:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 8004aea:	4b3b      	ldr	r3, [pc, #236]	@ (8004bd8 <HAL_I2C_MspInit+0x16c>)
 8004aec:	4a3b      	ldr	r2, [pc, #236]	@ (8004bdc <HAL_I2C_MspInit+0x170>)
 8004aee:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 8004af0:	4b39      	ldr	r3, [pc, #228]	@ (8004bd8 <HAL_I2C_MspInit+0x16c>)
 8004af2:	2200      	movs	r2, #0
 8004af4:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004af6:	4b38      	ldr	r3, [pc, #224]	@ (8004bd8 <HAL_I2C_MspInit+0x16c>)
 8004af8:	2240      	movs	r2, #64	@ 0x40
 8004afa:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004afc:	4b36      	ldr	r3, [pc, #216]	@ (8004bd8 <HAL_I2C_MspInit+0x16c>)
 8004afe:	2200      	movs	r2, #0
 8004b00:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004b02:	4b35      	ldr	r3, [pc, #212]	@ (8004bd8 <HAL_I2C_MspInit+0x16c>)
 8004b04:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004b08:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004b0a:	4b33      	ldr	r3, [pc, #204]	@ (8004bd8 <HAL_I2C_MspInit+0x16c>)
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004b10:	4b31      	ldr	r3, [pc, #196]	@ (8004bd8 <HAL_I2C_MspInit+0x16c>)
 8004b12:	2200      	movs	r2, #0
 8004b14:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8004b16:	4b30      	ldr	r3, [pc, #192]	@ (8004bd8 <HAL_I2C_MspInit+0x16c>)
 8004b18:	2200      	movs	r2, #0
 8004b1a:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004b1c:	4b2e      	ldr	r3, [pc, #184]	@ (8004bd8 <HAL_I2C_MspInit+0x16c>)
 8004b1e:	2200      	movs	r2, #0
 8004b20:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004b22:	4b2d      	ldr	r3, [pc, #180]	@ (8004bd8 <HAL_I2C_MspInit+0x16c>)
 8004b24:	2200      	movs	r2, #0
 8004b26:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8004b28:	482b      	ldr	r0, [pc, #172]	@ (8004bd8 <HAL_I2C_MspInit+0x16c>)
 8004b2a:	f001 f911 	bl	8005d50 <HAL_DMA_Init>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d001      	beq.n	8004b38 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8004b34:	f7ff feca 	bl	80048cc <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	4a27      	ldr	r2, [pc, #156]	@ (8004bd8 <HAL_I2C_MspInit+0x16c>)
 8004b3c:	635a      	str	r2, [r3, #52]	@ 0x34
 8004b3e:	4a26      	ldr	r2, [pc, #152]	@ (8004bd8 <HAL_I2C_MspInit+0x16c>)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8004b44:	4b26      	ldr	r3, [pc, #152]	@ (8004be0 <HAL_I2C_MspInit+0x174>)
 8004b46:	4a27      	ldr	r2, [pc, #156]	@ (8004be4 <HAL_I2C_MspInit+0x178>)
 8004b48:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8004b4a:	4b25      	ldr	r3, [pc, #148]	@ (8004be0 <HAL_I2C_MspInit+0x174>)
 8004b4c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004b50:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004b52:	4b23      	ldr	r3, [pc, #140]	@ (8004be0 <HAL_I2C_MspInit+0x174>)
 8004b54:	2200      	movs	r2, #0
 8004b56:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004b58:	4b21      	ldr	r3, [pc, #132]	@ (8004be0 <HAL_I2C_MspInit+0x174>)
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004b5e:	4b20      	ldr	r3, [pc, #128]	@ (8004be0 <HAL_I2C_MspInit+0x174>)
 8004b60:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004b64:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004b66:	4b1e      	ldr	r3, [pc, #120]	@ (8004be0 <HAL_I2C_MspInit+0x174>)
 8004b68:	2200      	movs	r2, #0
 8004b6a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004b6c:	4b1c      	ldr	r3, [pc, #112]	@ (8004be0 <HAL_I2C_MspInit+0x174>)
 8004b6e:	2200      	movs	r2, #0
 8004b70:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8004b72:	4b1b      	ldr	r3, [pc, #108]	@ (8004be0 <HAL_I2C_MspInit+0x174>)
 8004b74:	2200      	movs	r2, #0
 8004b76:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004b78:	4b19      	ldr	r3, [pc, #100]	@ (8004be0 <HAL_I2C_MspInit+0x174>)
 8004b7a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8004b7e:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004b80:	4b17      	ldr	r3, [pc, #92]	@ (8004be0 <HAL_I2C_MspInit+0x174>)
 8004b82:	2200      	movs	r2, #0
 8004b84:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8004b86:	4816      	ldr	r0, [pc, #88]	@ (8004be0 <HAL_I2C_MspInit+0x174>)
 8004b88:	f001 f8e2 	bl	8005d50 <HAL_DMA_Init>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d001      	beq.n	8004b96 <HAL_I2C_MspInit+0x12a>
    {
      Error_Handler();
 8004b92:	f7ff fe9b 	bl	80048cc <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	4a11      	ldr	r2, [pc, #68]	@ (8004be0 <HAL_I2C_MspInit+0x174>)
 8004b9a:	639a      	str	r2, [r3, #56]	@ 0x38
 8004b9c:	4a10      	ldr	r2, [pc, #64]	@ (8004be0 <HAL_I2C_MspInit+0x174>)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	2100      	movs	r1, #0
 8004ba6:	201f      	movs	r0, #31
 8004ba8:	f001 f89b 	bl	8005ce2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8004bac:	201f      	movs	r0, #31
 8004bae:	f001 f8b4 	bl	8005d1a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	2100      	movs	r1, #0
 8004bb6:	2020      	movs	r0, #32
 8004bb8:	f001 f893 	bl	8005ce2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8004bbc:	2020      	movs	r0, #32
 8004bbe:	f001 f8ac 	bl	8005d1a <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8004bc2:	bf00      	nop
 8004bc4:	3728      	adds	r7, #40	@ 0x28
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	bf00      	nop
 8004bcc:	40005400 	.word	0x40005400
 8004bd0:	40023800 	.word	0x40023800
 8004bd4:	40020400 	.word	0x40020400
 8004bd8:	20000b74 	.word	0x20000b74
 8004bdc:	40026028 	.word	0x40026028
 8004be0:	20000bd4 	.word	0x20000bd4
 8004be4:	40026010 	.word	0x40026010

08004be8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b084      	sub	sp, #16
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a1c      	ldr	r2, [pc, #112]	@ (8004c68 <HAL_TIM_Base_MspInit+0x80>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d116      	bne.n	8004c28 <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	60fb      	str	r3, [r7, #12]
 8004bfe:	4b1b      	ldr	r3, [pc, #108]	@ (8004c6c <HAL_TIM_Base_MspInit+0x84>)
 8004c00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c02:	4a1a      	ldr	r2, [pc, #104]	@ (8004c6c <HAL_TIM_Base_MspInit+0x84>)
 8004c04:	f043 0301 	orr.w	r3, r3, #1
 8004c08:	6453      	str	r3, [r2, #68]	@ 0x44
 8004c0a:	4b18      	ldr	r3, [pc, #96]	@ (8004c6c <HAL_TIM_Base_MspInit+0x84>)
 8004c0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c0e:	f003 0301 	and.w	r3, r3, #1
 8004c12:	60fb      	str	r3, [r7, #12]
 8004c14:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8004c16:	2200      	movs	r2, #0
 8004c18:	2100      	movs	r1, #0
 8004c1a:	2019      	movs	r0, #25
 8004c1c:	f001 f861 	bl	8005ce2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004c20:	2019      	movs	r0, #25
 8004c22:	f001 f87a 	bl	8005d1a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004c26:	e01a      	b.n	8004c5e <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a10      	ldr	r2, [pc, #64]	@ (8004c70 <HAL_TIM_Base_MspInit+0x88>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d115      	bne.n	8004c5e <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004c32:	2300      	movs	r3, #0
 8004c34:	60bb      	str	r3, [r7, #8]
 8004c36:	4b0d      	ldr	r3, [pc, #52]	@ (8004c6c <HAL_TIM_Base_MspInit+0x84>)
 8004c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c3a:	4a0c      	ldr	r2, [pc, #48]	@ (8004c6c <HAL_TIM_Base_MspInit+0x84>)
 8004c3c:	f043 0302 	orr.w	r3, r3, #2
 8004c40:	6413      	str	r3, [r2, #64]	@ 0x40
 8004c42:	4b0a      	ldr	r3, [pc, #40]	@ (8004c6c <HAL_TIM_Base_MspInit+0x84>)
 8004c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c46:	f003 0302 	and.w	r3, r3, #2
 8004c4a:	60bb      	str	r3, [r7, #8]
 8004c4c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004c4e:	2200      	movs	r2, #0
 8004c50:	2100      	movs	r1, #0
 8004c52:	201d      	movs	r0, #29
 8004c54:	f001 f845 	bl	8005ce2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004c58:	201d      	movs	r0, #29
 8004c5a:	f001 f85e 	bl	8005d1a <HAL_NVIC_EnableIRQ>
}
 8004c5e:	bf00      	nop
 8004c60:	3710      	adds	r7, #16
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
 8004c66:	bf00      	nop
 8004c68:	40010000 	.word	0x40010000
 8004c6c:	40023800 	.word	0x40023800
 8004c70:	40000400 	.word	0x40000400

08004c74 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b088      	sub	sp, #32
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c7c:	f107 030c 	add.w	r3, r7, #12
 8004c80:	2200      	movs	r2, #0
 8004c82:	601a      	str	r2, [r3, #0]
 8004c84:	605a      	str	r2, [r3, #4]
 8004c86:	609a      	str	r2, [r3, #8]
 8004c88:	60da      	str	r2, [r3, #12]
 8004c8a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a12      	ldr	r2, [pc, #72]	@ (8004cdc <HAL_TIM_MspPostInit+0x68>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d11d      	bne.n	8004cd2 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c96:	2300      	movs	r3, #0
 8004c98:	60bb      	str	r3, [r7, #8]
 8004c9a:	4b11      	ldr	r3, [pc, #68]	@ (8004ce0 <HAL_TIM_MspPostInit+0x6c>)
 8004c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c9e:	4a10      	ldr	r2, [pc, #64]	@ (8004ce0 <HAL_TIM_MspPostInit+0x6c>)
 8004ca0:	f043 0302 	orr.w	r3, r3, #2
 8004ca4:	6313      	str	r3, [r2, #48]	@ 0x30
 8004ca6:	4b0e      	ldr	r3, [pc, #56]	@ (8004ce0 <HAL_TIM_MspPostInit+0x6c>)
 8004ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004caa:	f003 0302 	and.w	r3, r3, #2
 8004cae:	60bb      	str	r3, [r7, #8]
 8004cb0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = M1_PWM_Pin|M2_PWM_Pin;
 8004cb2:	2330      	movs	r3, #48	@ 0x30
 8004cb4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cb6:	2302      	movs	r3, #2
 8004cb8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004cc2:	2302      	movs	r3, #2
 8004cc4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004cc6:	f107 030c 	add.w	r3, r7, #12
 8004cca:	4619      	mov	r1, r3
 8004ccc:	4805      	ldr	r0, [pc, #20]	@ (8004ce4 <HAL_TIM_MspPostInit+0x70>)
 8004cce:	f001 fc5b 	bl	8006588 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004cd2:	bf00      	nop
 8004cd4:	3720      	adds	r7, #32
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}
 8004cda:	bf00      	nop
 8004cdc:	40000400 	.word	0x40000400
 8004ce0:	40023800 	.word	0x40023800
 8004ce4:	40020400 	.word	0x40020400

08004ce8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b08a      	sub	sp, #40	@ 0x28
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cf0:	f107 0314 	add.w	r3, r7, #20
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	601a      	str	r2, [r3, #0]
 8004cf8:	605a      	str	r2, [r3, #4]
 8004cfa:	609a      	str	r2, [r3, #8]
 8004cfc:	60da      	str	r2, [r3, #12]
 8004cfe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a1d      	ldr	r2, [pc, #116]	@ (8004d7c <HAL_UART_MspInit+0x94>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d133      	bne.n	8004d72 <HAL_UART_MspInit+0x8a>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	613b      	str	r3, [r7, #16]
 8004d0e:	4b1c      	ldr	r3, [pc, #112]	@ (8004d80 <HAL_UART_MspInit+0x98>)
 8004d10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d12:	4a1b      	ldr	r2, [pc, #108]	@ (8004d80 <HAL_UART_MspInit+0x98>)
 8004d14:	f043 0310 	orr.w	r3, r3, #16
 8004d18:	6453      	str	r3, [r2, #68]	@ 0x44
 8004d1a:	4b19      	ldr	r3, [pc, #100]	@ (8004d80 <HAL_UART_MspInit+0x98>)
 8004d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d1e:	f003 0310 	and.w	r3, r3, #16
 8004d22:	613b      	str	r3, [r7, #16]
 8004d24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d26:	2300      	movs	r3, #0
 8004d28:	60fb      	str	r3, [r7, #12]
 8004d2a:	4b15      	ldr	r3, [pc, #84]	@ (8004d80 <HAL_UART_MspInit+0x98>)
 8004d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d2e:	4a14      	ldr	r2, [pc, #80]	@ (8004d80 <HAL_UART_MspInit+0x98>)
 8004d30:	f043 0302 	orr.w	r3, r3, #2
 8004d34:	6313      	str	r3, [r2, #48]	@ 0x30
 8004d36:	4b12      	ldr	r3, [pc, #72]	@ (8004d80 <HAL_UART_MspInit+0x98>)
 8004d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d3a:	f003 0302 	and.w	r3, r3, #2
 8004d3e:	60fb      	str	r3, [r7, #12]
 8004d40:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ESP_RX_Pin|ESP_TX_Pin;
 8004d42:	23c0      	movs	r3, #192	@ 0xc0
 8004d44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d46:	2302      	movs	r3, #2
 8004d48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d4e:	2303      	movs	r3, #3
 8004d50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004d52:	2307      	movs	r3, #7
 8004d54:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d56:	f107 0314 	add.w	r3, r7, #20
 8004d5a:	4619      	mov	r1, r3
 8004d5c:	4809      	ldr	r0, [pc, #36]	@ (8004d84 <HAL_UART_MspInit+0x9c>)
 8004d5e:	f001 fc13 	bl	8006588 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004d62:	2200      	movs	r2, #0
 8004d64:	2100      	movs	r1, #0
 8004d66:	2025      	movs	r0, #37	@ 0x25
 8004d68:	f000 ffbb 	bl	8005ce2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004d6c:	2025      	movs	r0, #37	@ 0x25
 8004d6e:	f000 ffd4 	bl	8005d1a <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8004d72:	bf00      	nop
 8004d74:	3728      	adds	r7, #40	@ 0x28
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	bf00      	nop
 8004d7c:	40011000 	.word	0x40011000
 8004d80:	40023800 	.word	0x40023800
 8004d84:	40020400 	.word	0x40020400

08004d88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8004d8c:	f007 f874 	bl	800be78 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004d90:	bf00      	nop
 8004d92:	e7fd      	b.n	8004d90 <NMI_Handler+0x8>

08004d94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004d94:	b480      	push	{r7}
 8004d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004d98:	bf00      	nop
 8004d9a:	e7fd      	b.n	8004d98 <HardFault_Handler+0x4>

08004d9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004da0:	bf00      	nop
 8004da2:	e7fd      	b.n	8004da0 <MemManage_Handler+0x4>

08004da4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004da4:	b480      	push	{r7}
 8004da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004da8:	bf00      	nop
 8004daa:	e7fd      	b.n	8004da8 <BusFault_Handler+0x4>

08004dac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004dac:	b480      	push	{r7}
 8004dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004db0:	bf00      	nop
 8004db2:	e7fd      	b.n	8004db0 <UsageFault_Handler+0x4>

08004db4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004db4:	b480      	push	{r7}
 8004db6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004db8:	bf00      	nop
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc0:	4770      	bx	lr

08004dc2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004dc2:	b480      	push	{r7}
 8004dc4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004dc6:	bf00      	nop
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr

08004dd0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004dd4:	bf00      	nop
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr

08004dde <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004dde:	b580      	push	{r7, lr}
 8004de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004de2:	f000 f943 	bl	800506c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004de6:	bf00      	nop
 8004de8:	bd80      	pop	{r7, pc}
	...

08004dec <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8004df0:	4802      	ldr	r0, [pc, #8]	@ (8004dfc <DMA1_Stream0_IRQHandler+0x10>)
 8004df2:	f001 f945 	bl	8006080 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8004df6:	bf00      	nop
 8004df8:	bd80      	pop	{r7, pc}
 8004dfa:	bf00      	nop
 8004dfc:	20000bd4 	.word	0x20000bd4

08004e00 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8004e04:	4802      	ldr	r0, [pc, #8]	@ (8004e10 <DMA1_Stream1_IRQHandler+0x10>)
 8004e06:	f001 f93b 	bl	8006080 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8004e0a:	bf00      	nop
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	bf00      	nop
 8004e10:	20000b74 	.word	0x20000b74

08004e14 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004e18:	4802      	ldr	r0, [pc, #8]	@ (8004e24 <ADC_IRQHandler+0x10>)
 8004e1a:	f000 f9ae 	bl	800517a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8004e1e:	bf00      	nop
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	bf00      	nop
 8004e24:	20000a78 	.word	0x20000a78

08004e28 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(M2_ENC_A_Pin);
 8004e2c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8004e30:	f001 fd7a 	bl	8006928 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004e34:	bf00      	nop
 8004e36:	bd80      	pop	{r7, pc}

08004e38 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004e3c:	4802      	ldr	r0, [pc, #8]	@ (8004e48 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8004e3e:	f007 f9f1 	bl	800c224 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004e42:	bf00      	nop
 8004e44:	bd80      	pop	{r7, pc}
 8004e46:	bf00      	nop
 8004e48:	20000c34 	.word	0x20000c34

08004e4c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004e50:	4802      	ldr	r0, [pc, #8]	@ (8004e5c <TIM3_IRQHandler+0x10>)
 8004e52:	f007 f9e7 	bl	800c224 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004e56:	bf00      	nop
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	bf00      	nop
 8004e5c:	20000c7c 	.word	0x20000c7c

08004e60 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004e64:	4802      	ldr	r0, [pc, #8]	@ (8004e70 <I2C1_EV_IRQHandler+0x10>)
 8004e66:	f002 ff17 	bl	8007c98 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8004e6a:	bf00      	nop
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	bf00      	nop
 8004e70:	20000b20 	.word	0x20000b20

08004e74 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8004e78:	4802      	ldr	r0, [pc, #8]	@ (8004e84 <I2C1_ER_IRQHandler+0x10>)
 8004e7a:	f003 f87e 	bl	8007f7a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8004e7e:	bf00      	nop
 8004e80:	bd80      	pop	{r7, pc}
 8004e82:	bf00      	nop
 8004e84:	20000b20 	.word	0x20000b20

08004e88 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004e8c:	4802      	ldr	r0, [pc, #8]	@ (8004e98 <USART1_IRQHandler+0x10>)
 8004e8e:	f008 f83b 	bl	800cf08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004e92:	bf00      	nop
 8004e94:	bd80      	pop	{r7, pc}
 8004e96:	bf00      	nop
 8004e98:	20000cc4 	.word	0x20000cc4

08004e9c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(M1_ENC_A_Pin);
 8004ea0:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8004ea4:	f001 fd40 	bl	8006928 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004ea8:	bf00      	nop
 8004eaa:	bd80      	pop	{r7, pc}

08004eac <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004eb0:	4802      	ldr	r0, [pc, #8]	@ (8004ebc <DMA2_Stream0_IRQHandler+0x10>)
 8004eb2:	f001 f8e5 	bl	8006080 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004eb6:	bf00      	nop
 8004eb8:	bd80      	pop	{r7, pc}
 8004eba:	bf00      	nop
 8004ebc:	20000ac0 	.word	0x20000ac0

08004ec0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8004ec4:	4802      	ldr	r0, [pc, #8]	@ (8004ed0 <OTG_FS_IRQHandler+0x10>)
 8004ec6:	f005 fa64 	bl	800a392 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8004eca:	bf00      	nop
 8004ecc:	bd80      	pop	{r7, pc}
 8004ece:	bf00      	nop
 8004ed0:	20001fcc 	.word	0x20001fcc

08004ed4 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 8004ed8:	bf00      	nop
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr
	...

08004ee4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b086      	sub	sp, #24
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004eec:	4a14      	ldr	r2, [pc, #80]	@ (8004f40 <_sbrk+0x5c>)
 8004eee:	4b15      	ldr	r3, [pc, #84]	@ (8004f44 <_sbrk+0x60>)
 8004ef0:	1ad3      	subs	r3, r2, r3
 8004ef2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004ef8:	4b13      	ldr	r3, [pc, #76]	@ (8004f48 <_sbrk+0x64>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d102      	bne.n	8004f06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004f00:	4b11      	ldr	r3, [pc, #68]	@ (8004f48 <_sbrk+0x64>)
 8004f02:	4a12      	ldr	r2, [pc, #72]	@ (8004f4c <_sbrk+0x68>)
 8004f04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004f06:	4b10      	ldr	r3, [pc, #64]	@ (8004f48 <_sbrk+0x64>)
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	4413      	add	r3, r2
 8004f0e:	693a      	ldr	r2, [r7, #16]
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d207      	bcs.n	8004f24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004f14:	f00d f826 	bl	8011f64 <__errno>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	220c      	movs	r2, #12
 8004f1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8004f22:	e009      	b.n	8004f38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004f24:	4b08      	ldr	r3, [pc, #32]	@ (8004f48 <_sbrk+0x64>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004f2a:	4b07      	ldr	r3, [pc, #28]	@ (8004f48 <_sbrk+0x64>)
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	4413      	add	r3, r2
 8004f32:	4a05      	ldr	r2, [pc, #20]	@ (8004f48 <_sbrk+0x64>)
 8004f34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004f36:	68fb      	ldr	r3, [r7, #12]
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3718      	adds	r7, #24
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}
 8004f40:	20020000 	.word	0x20020000
 8004f44:	00000400 	.word	0x00000400
 8004f48:	200016e0 	.word	0x200016e0
 8004f4c:	20002818 	.word	0x20002818

08004f50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004f50:	b480      	push	{r7}
 8004f52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004f54:	4b06      	ldr	r3, [pc, #24]	@ (8004f70 <SystemInit+0x20>)
 8004f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f5a:	4a05      	ldr	r2, [pc, #20]	@ (8004f70 <SystemInit+0x20>)
 8004f5c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004f60:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004f64:	bf00      	nop
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr
 8004f6e:	bf00      	nop
 8004f70:	e000ed00 	.word	0xe000ed00

08004f74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004f74:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004fac <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004f78:	f7ff ffea 	bl	8004f50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004f7c:	480c      	ldr	r0, [pc, #48]	@ (8004fb0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004f7e:	490d      	ldr	r1, [pc, #52]	@ (8004fb4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004f80:	4a0d      	ldr	r2, [pc, #52]	@ (8004fb8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004f82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004f84:	e002      	b.n	8004f8c <LoopCopyDataInit>

08004f86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004f86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004f88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004f8a:	3304      	adds	r3, #4

08004f8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004f8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004f8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004f90:	d3f9      	bcc.n	8004f86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004f92:	4a0a      	ldr	r2, [pc, #40]	@ (8004fbc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004f94:	4c0a      	ldr	r4, [pc, #40]	@ (8004fc0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004f96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004f98:	e001      	b.n	8004f9e <LoopFillZerobss>

08004f9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004f9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004f9c:	3204      	adds	r2, #4

08004f9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004f9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004fa0:	d3fb      	bcc.n	8004f9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004fa2:	f00c ffe5 	bl	8011f70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004fa6:	f7fe fce1 	bl	800396c <main>
  bx  lr    
 8004faa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004fac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004fb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004fb4:	20000168 	.word	0x20000168
  ldr r2, =_sidata
 8004fb8:	08013f9c 	.word	0x08013f9c
  ldr r2, =_sbss
 8004fbc:	20000168 	.word	0x20000168
  ldr r4, =_ebss
 8004fc0:	20002818 	.word	0x20002818

08004fc4 <DMA1_Stream2_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004fc4:	e7fe      	b.n	8004fc4 <DMA1_Stream2_IRQHandler>
	...

08004fc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004fcc:	4b0e      	ldr	r3, [pc, #56]	@ (8005008 <HAL_Init+0x40>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a0d      	ldr	r2, [pc, #52]	@ (8005008 <HAL_Init+0x40>)
 8004fd2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004fd6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004fd8:	4b0b      	ldr	r3, [pc, #44]	@ (8005008 <HAL_Init+0x40>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a0a      	ldr	r2, [pc, #40]	@ (8005008 <HAL_Init+0x40>)
 8004fde:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004fe2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004fe4:	4b08      	ldr	r3, [pc, #32]	@ (8005008 <HAL_Init+0x40>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a07      	ldr	r2, [pc, #28]	@ (8005008 <HAL_Init+0x40>)
 8004fea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004ff0:	2003      	movs	r0, #3
 8004ff2:	f000 fe6b 	bl	8005ccc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004ff6:	200f      	movs	r0, #15
 8004ff8:	f000 f808 	bl	800500c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004ffc:	f7ff fc6c 	bl	80048d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005000:	2300      	movs	r3, #0
}
 8005002:	4618      	mov	r0, r3
 8005004:	bd80      	pop	{r7, pc}
 8005006:	bf00      	nop
 8005008:	40023c00 	.word	0x40023c00

0800500c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b082      	sub	sp, #8
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005014:	4b12      	ldr	r3, [pc, #72]	@ (8005060 <HAL_InitTick+0x54>)
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	4b12      	ldr	r3, [pc, #72]	@ (8005064 <HAL_InitTick+0x58>)
 800501a:	781b      	ldrb	r3, [r3, #0]
 800501c:	4619      	mov	r1, r3
 800501e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005022:	fbb3 f3f1 	udiv	r3, r3, r1
 8005026:	fbb2 f3f3 	udiv	r3, r2, r3
 800502a:	4618      	mov	r0, r3
 800502c:	f000 fe83 	bl	8005d36 <HAL_SYSTICK_Config>
 8005030:	4603      	mov	r3, r0
 8005032:	2b00      	cmp	r3, #0
 8005034:	d001      	beq.n	800503a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	e00e      	b.n	8005058 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2b0f      	cmp	r3, #15
 800503e:	d80a      	bhi.n	8005056 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005040:	2200      	movs	r2, #0
 8005042:	6879      	ldr	r1, [r7, #4]
 8005044:	f04f 30ff 	mov.w	r0, #4294967295
 8005048:	f000 fe4b 	bl	8005ce2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800504c:	4a06      	ldr	r2, [pc, #24]	@ (8005068 <HAL_InitTick+0x5c>)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005052:	2300      	movs	r3, #0
 8005054:	e000      	b.n	8005058 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
}
 8005058:	4618      	mov	r0, r3
 800505a:	3708      	adds	r7, #8
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}
 8005060:	20000014 	.word	0x20000014
 8005064:	2000001c 	.word	0x2000001c
 8005068:	20000018 	.word	0x20000018

0800506c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800506c:	b480      	push	{r7}
 800506e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005070:	4b06      	ldr	r3, [pc, #24]	@ (800508c <HAL_IncTick+0x20>)
 8005072:	781b      	ldrb	r3, [r3, #0]
 8005074:	461a      	mov	r2, r3
 8005076:	4b06      	ldr	r3, [pc, #24]	@ (8005090 <HAL_IncTick+0x24>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4413      	add	r3, r2
 800507c:	4a04      	ldr	r2, [pc, #16]	@ (8005090 <HAL_IncTick+0x24>)
 800507e:	6013      	str	r3, [r2, #0]
}
 8005080:	bf00      	nop
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr
 800508a:	bf00      	nop
 800508c:	2000001c 	.word	0x2000001c
 8005090:	200016e4 	.word	0x200016e4

08005094 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005094:	b480      	push	{r7}
 8005096:	af00      	add	r7, sp, #0
  return uwTick;
 8005098:	4b03      	ldr	r3, [pc, #12]	@ (80050a8 <HAL_GetTick+0x14>)
 800509a:	681b      	ldr	r3, [r3, #0]
}
 800509c:	4618      	mov	r0, r3
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr
 80050a6:	bf00      	nop
 80050a8:	200016e4 	.word	0x200016e4

080050ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b084      	sub	sp, #16
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80050b4:	f7ff ffee 	bl	8005094 <HAL_GetTick>
 80050b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050c4:	d005      	beq.n	80050d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80050c6:	4b0a      	ldr	r3, [pc, #40]	@ (80050f0 <HAL_Delay+0x44>)
 80050c8:	781b      	ldrb	r3, [r3, #0]
 80050ca:	461a      	mov	r2, r3
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	4413      	add	r3, r2
 80050d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80050d2:	bf00      	nop
 80050d4:	f7ff ffde 	bl	8005094 <HAL_GetTick>
 80050d8:	4602      	mov	r2, r0
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	1ad3      	subs	r3, r2, r3
 80050de:	68fa      	ldr	r2, [r7, #12]
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d8f7      	bhi.n	80050d4 <HAL_Delay+0x28>
  {
  }
}
 80050e4:	bf00      	nop
 80050e6:	bf00      	nop
 80050e8:	3710      	adds	r7, #16
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	bf00      	nop
 80050f0:	2000001c 	.word	0x2000001c

080050f4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b084      	sub	sp, #16
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80050fc:	2300      	movs	r3, #0
 80050fe:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d101      	bne.n	800510a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	e033      	b.n	8005172 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800510e:	2b00      	cmp	r3, #0
 8005110:	d109      	bne.n	8005126 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f7ff fc0e 	bl	8004934 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2200      	movs	r2, #0
 8005122:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800512a:	f003 0310 	and.w	r3, r3, #16
 800512e:	2b00      	cmp	r3, #0
 8005130:	d118      	bne.n	8005164 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005136:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800513a:	f023 0302 	bic.w	r3, r3, #2
 800513e:	f043 0202 	orr.w	r2, r3, #2
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f000 fb68 	bl	800581c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2200      	movs	r2, #0
 8005150:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005156:	f023 0303 	bic.w	r3, r3, #3
 800515a:	f043 0201 	orr.w	r2, r3, #1
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	641a      	str	r2, [r3, #64]	@ 0x40
 8005162:	e001      	b.n	8005168 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2200      	movs	r2, #0
 800516c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005170:	7bfb      	ldrb	r3, [r7, #15]
}
 8005172:	4618      	mov	r0, r3
 8005174:	3710      	adds	r7, #16
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}

0800517a <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800517a:	b580      	push	{r7, lr}
 800517c:	b086      	sub	sp, #24
 800517e:	af00      	add	r7, sp, #0
 8005180:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8005182:	2300      	movs	r3, #0
 8005184:	617b      	str	r3, [r7, #20]
 8005186:	2300      	movs	r3, #0
 8005188:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	f003 0302 	and.w	r3, r3, #2
 80051a0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	f003 0320 	and.w	r3, r3, #32
 80051a8:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d049      	beq.n	8005244 <HAL_ADC_IRQHandler+0xca>
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d046      	beq.n	8005244 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051ba:	f003 0310 	and.w	r3, r3, #16
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d105      	bne.n	80051ce <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051c6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d12b      	bne.n	8005234 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d127      	bne.n	8005234 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051ea:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d006      	beq.n	8005200 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d119      	bne.n	8005234 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	685a      	ldr	r2, [r3, #4]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f022 0220 	bic.w	r2, r2, #32
 800520e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005214:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005220:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005224:	2b00      	cmp	r3, #0
 8005226:	d105      	bne.n	8005234 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800522c:	f043 0201 	orr.w	r2, r3, #1
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	f7ff f943 	bl	80044c0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f06f 0212 	mvn.w	r2, #18
 8005242:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f003 0304 	and.w	r3, r3, #4
 800524a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005252:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d057      	beq.n	800530a <HAL_ADC_IRQHandler+0x190>
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d054      	beq.n	800530a <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005264:	f003 0310 	and.w	r3, r3, #16
 8005268:	2b00      	cmp	r3, #0
 800526a:	d105      	bne.n	8005278 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005270:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8005282:	2b00      	cmp	r3, #0
 8005284:	d139      	bne.n	80052fa <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800528c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8005290:	2b00      	cmp	r3, #0
 8005292:	d006      	beq.n	80052a2 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d12b      	bne.n	80052fa <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d124      	bne.n	80052fa <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d11d      	bne.n	80052fa <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d119      	bne.n	80052fa <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	685a      	ldr	r2, [r3, #4]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80052d4:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052da:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d105      	bne.n	80052fa <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052f2:	f043 0201 	orr.w	r2, r3, #1
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f000 fc0c 	bl	8005b18 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f06f 020c 	mvn.w	r2, #12
 8005308:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	f003 0301 	and.w	r3, r3, #1
 8005310:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005318:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d017      	beq.n	8005350 <HAL_ADC_IRQHandler+0x1d6>
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d014      	beq.n	8005350 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f003 0301 	and.w	r3, r3, #1
 8005330:	2b01      	cmp	r3, #1
 8005332:	d10d      	bne.n	8005350 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005338:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f000 f925 	bl	8005590 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f06f 0201 	mvn.w	r2, #1
 800534e:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f003 0320 	and.w	r3, r3, #32
 8005356:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800535e:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d015      	beq.n	8005392 <HAL_ADC_IRQHandler+0x218>
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d012      	beq.n	8005392 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005370:	f043 0202 	orr.w	r2, r3, #2
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f06f 0220 	mvn.w	r2, #32
 8005380:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f000 f90e 	bl	80055a4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f06f 0220 	mvn.w	r2, #32
 8005390:	601a      	str	r2, [r3, #0]
  }
}
 8005392:	bf00      	nop
 8005394:	3718      	adds	r7, #24
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}
	...

0800539c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b086      	sub	sp, #24
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	60f8      	str	r0, [r7, #12]
 80053a4:	60b9      	str	r1, [r7, #8]
 80053a6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80053a8:	2300      	movs	r3, #0
 80053aa:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	d101      	bne.n	80053ba <HAL_ADC_Start_DMA+0x1e>
 80053b6:	2302      	movs	r3, #2
 80053b8:	e0ce      	b.n	8005558 <HAL_ADC_Start_DMA+0x1bc>
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2201      	movs	r2, #1
 80053be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	689b      	ldr	r3, [r3, #8]
 80053c8:	f003 0301 	and.w	r3, r3, #1
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d018      	beq.n	8005402 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	689a      	ldr	r2, [r3, #8]
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f042 0201 	orr.w	r2, r2, #1
 80053de:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80053e0:	4b5f      	ldr	r3, [pc, #380]	@ (8005560 <HAL_ADC_Start_DMA+0x1c4>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a5f      	ldr	r2, [pc, #380]	@ (8005564 <HAL_ADC_Start_DMA+0x1c8>)
 80053e6:	fba2 2303 	umull	r2, r3, r2, r3
 80053ea:	0c9a      	lsrs	r2, r3, #18
 80053ec:	4613      	mov	r3, r2
 80053ee:	005b      	lsls	r3, r3, #1
 80053f0:	4413      	add	r3, r2
 80053f2:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80053f4:	e002      	b.n	80053fc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	3b01      	subs	r3, #1
 80053fa:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d1f9      	bne.n	80053f6 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800540c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005410:	d107      	bne.n	8005422 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	689a      	ldr	r2, [r3, #8]
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005420:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	f003 0301 	and.w	r3, r3, #1
 800542c:	2b01      	cmp	r3, #1
 800542e:	f040 8086 	bne.w	800553e <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005436:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800543a:	f023 0301 	bic.w	r3, r3, #1
 800543e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005450:	2b00      	cmp	r3, #0
 8005452:	d007      	beq.n	8005464 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005458:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800545c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005468:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800546c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005470:	d106      	bne.n	8005480 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005476:	f023 0206 	bic.w	r2, r3, #6
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	645a      	str	r2, [r3, #68]	@ 0x44
 800547e:	e002      	b.n	8005486 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2200      	movs	r2, #0
 8005484:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2200      	movs	r2, #0
 800548a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800548e:	4b36      	ldr	r3, [pc, #216]	@ (8005568 <HAL_ADC_Start_DMA+0x1cc>)
 8005490:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005496:	4a35      	ldr	r2, [pc, #212]	@ (800556c <HAL_ADC_Start_DMA+0x1d0>)
 8005498:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800549e:	4a34      	ldr	r2, [pc, #208]	@ (8005570 <HAL_ADC_Start_DMA+0x1d4>)
 80054a0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054a6:	4a33      	ldr	r2, [pc, #204]	@ (8005574 <HAL_ADC_Start_DMA+0x1d8>)
 80054a8:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80054b2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	685a      	ldr	r2, [r3, #4]
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80054c2:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	689a      	ldr	r2, [r3, #8]
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80054d2:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	334c      	adds	r3, #76	@ 0x4c
 80054de:	4619      	mov	r1, r3
 80054e0:	68ba      	ldr	r2, [r7, #8]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f000 fce2 	bl	8005eac <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	f003 031f 	and.w	r3, r3, #31
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d10f      	bne.n	8005514 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d129      	bne.n	8005556 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	689a      	ldr	r2, [r3, #8]
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8005510:	609a      	str	r2, [r3, #8]
 8005512:	e020      	b.n	8005556 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a17      	ldr	r2, [pc, #92]	@ (8005578 <HAL_ADC_Start_DMA+0x1dc>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d11b      	bne.n	8005556 <HAL_ADC_Start_DMA+0x1ba>
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005528:	2b00      	cmp	r3, #0
 800552a:	d114      	bne.n	8005556 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	689a      	ldr	r2, [r3, #8]
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800553a:	609a      	str	r2, [r3, #8]
 800553c:	e00b      	b.n	8005556 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005542:	f043 0210 	orr.w	r2, r3, #16
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800554e:	f043 0201 	orr.w	r2, r3, #1
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8005556:	2300      	movs	r3, #0
}
 8005558:	4618      	mov	r0, r3
 800555a:	3718      	adds	r7, #24
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}
 8005560:	20000014 	.word	0x20000014
 8005564:	431bde83 	.word	0x431bde83
 8005568:	40012300 	.word	0x40012300
 800556c:	08005a15 	.word	0x08005a15
 8005570:	08005acf 	.word	0x08005acf
 8005574:	08005aeb 	.word	0x08005aeb
 8005578:	40012000 	.word	0x40012000

0800557c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800557c:	b480      	push	{r7}
 800557e:	b083      	sub	sp, #12
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8005584:	bf00      	nop
 8005586:	370c      	adds	r7, #12
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr

08005590 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8005590:	b480      	push	{r7}
 8005592:	b083      	sub	sp, #12
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8005598:	bf00      	nop
 800559a:	370c      	adds	r7, #12
 800559c:	46bd      	mov	sp, r7
 800559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a2:	4770      	bx	lr

080055a4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b083      	sub	sp, #12
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80055ac:	bf00      	nop
 80055ae:	370c      	adds	r7, #12
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr

080055b8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b085      	sub	sp, #20
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80055c2:	2300      	movs	r3, #0
 80055c4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80055cc:	2b01      	cmp	r3, #1
 80055ce:	d101      	bne.n	80055d4 <HAL_ADC_ConfigChannel+0x1c>
 80055d0:	2302      	movs	r3, #2
 80055d2:	e113      	b.n	80057fc <HAL_ADC_ConfigChannel+0x244>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2201      	movs	r2, #1
 80055d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	2b09      	cmp	r3, #9
 80055e2:	d925      	bls.n	8005630 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	68d9      	ldr	r1, [r3, #12]
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	b29b      	uxth	r3, r3
 80055f0:	461a      	mov	r2, r3
 80055f2:	4613      	mov	r3, r2
 80055f4:	005b      	lsls	r3, r3, #1
 80055f6:	4413      	add	r3, r2
 80055f8:	3b1e      	subs	r3, #30
 80055fa:	2207      	movs	r2, #7
 80055fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005600:	43da      	mvns	r2, r3
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	400a      	ands	r2, r1
 8005608:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	68d9      	ldr	r1, [r3, #12]
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	689a      	ldr	r2, [r3, #8]
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	b29b      	uxth	r3, r3
 800561a:	4618      	mov	r0, r3
 800561c:	4603      	mov	r3, r0
 800561e:	005b      	lsls	r3, r3, #1
 8005620:	4403      	add	r3, r0
 8005622:	3b1e      	subs	r3, #30
 8005624:	409a      	lsls	r2, r3
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	430a      	orrs	r2, r1
 800562c:	60da      	str	r2, [r3, #12]
 800562e:	e022      	b.n	8005676 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	6919      	ldr	r1, [r3, #16]
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	b29b      	uxth	r3, r3
 800563c:	461a      	mov	r2, r3
 800563e:	4613      	mov	r3, r2
 8005640:	005b      	lsls	r3, r3, #1
 8005642:	4413      	add	r3, r2
 8005644:	2207      	movs	r2, #7
 8005646:	fa02 f303 	lsl.w	r3, r2, r3
 800564a:	43da      	mvns	r2, r3
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	400a      	ands	r2, r1
 8005652:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	6919      	ldr	r1, [r3, #16]
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	689a      	ldr	r2, [r3, #8]
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	b29b      	uxth	r3, r3
 8005664:	4618      	mov	r0, r3
 8005666:	4603      	mov	r3, r0
 8005668:	005b      	lsls	r3, r3, #1
 800566a:	4403      	add	r3, r0
 800566c:	409a      	lsls	r2, r3
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	430a      	orrs	r2, r1
 8005674:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	2b06      	cmp	r3, #6
 800567c:	d824      	bhi.n	80056c8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	685a      	ldr	r2, [r3, #4]
 8005688:	4613      	mov	r3, r2
 800568a:	009b      	lsls	r3, r3, #2
 800568c:	4413      	add	r3, r2
 800568e:	3b05      	subs	r3, #5
 8005690:	221f      	movs	r2, #31
 8005692:	fa02 f303 	lsl.w	r3, r2, r3
 8005696:	43da      	mvns	r2, r3
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	400a      	ands	r2, r1
 800569e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	b29b      	uxth	r3, r3
 80056ac:	4618      	mov	r0, r3
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	685a      	ldr	r2, [r3, #4]
 80056b2:	4613      	mov	r3, r2
 80056b4:	009b      	lsls	r3, r3, #2
 80056b6:	4413      	add	r3, r2
 80056b8:	3b05      	subs	r3, #5
 80056ba:	fa00 f203 	lsl.w	r2, r0, r3
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	430a      	orrs	r2, r1
 80056c4:	635a      	str	r2, [r3, #52]	@ 0x34
 80056c6:	e04c      	b.n	8005762 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	2b0c      	cmp	r3, #12
 80056ce:	d824      	bhi.n	800571a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	685a      	ldr	r2, [r3, #4]
 80056da:	4613      	mov	r3, r2
 80056dc:	009b      	lsls	r3, r3, #2
 80056de:	4413      	add	r3, r2
 80056e0:	3b23      	subs	r3, #35	@ 0x23
 80056e2:	221f      	movs	r2, #31
 80056e4:	fa02 f303 	lsl.w	r3, r2, r3
 80056e8:	43da      	mvns	r2, r3
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	400a      	ands	r2, r1
 80056f0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	b29b      	uxth	r3, r3
 80056fe:	4618      	mov	r0, r3
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	685a      	ldr	r2, [r3, #4]
 8005704:	4613      	mov	r3, r2
 8005706:	009b      	lsls	r3, r3, #2
 8005708:	4413      	add	r3, r2
 800570a:	3b23      	subs	r3, #35	@ 0x23
 800570c:	fa00 f203 	lsl.w	r2, r0, r3
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	430a      	orrs	r2, r1
 8005716:	631a      	str	r2, [r3, #48]	@ 0x30
 8005718:	e023      	b.n	8005762 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	685a      	ldr	r2, [r3, #4]
 8005724:	4613      	mov	r3, r2
 8005726:	009b      	lsls	r3, r3, #2
 8005728:	4413      	add	r3, r2
 800572a:	3b41      	subs	r3, #65	@ 0x41
 800572c:	221f      	movs	r2, #31
 800572e:	fa02 f303 	lsl.w	r3, r2, r3
 8005732:	43da      	mvns	r2, r3
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	400a      	ands	r2, r1
 800573a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	b29b      	uxth	r3, r3
 8005748:	4618      	mov	r0, r3
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	685a      	ldr	r2, [r3, #4]
 800574e:	4613      	mov	r3, r2
 8005750:	009b      	lsls	r3, r3, #2
 8005752:	4413      	add	r3, r2
 8005754:	3b41      	subs	r3, #65	@ 0x41
 8005756:	fa00 f203 	lsl.w	r2, r0, r3
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	430a      	orrs	r2, r1
 8005760:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005762:	4b29      	ldr	r3, [pc, #164]	@ (8005808 <HAL_ADC_ConfigChannel+0x250>)
 8005764:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a28      	ldr	r2, [pc, #160]	@ (800580c <HAL_ADC_ConfigChannel+0x254>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d10f      	bne.n	8005790 <HAL_ADC_ConfigChannel+0x1d8>
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	2b12      	cmp	r3, #18
 8005776:	d10b      	bne.n	8005790 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a1d      	ldr	r2, [pc, #116]	@ (800580c <HAL_ADC_ConfigChannel+0x254>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d12b      	bne.n	80057f2 <HAL_ADC_ConfigChannel+0x23a>
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a1c      	ldr	r2, [pc, #112]	@ (8005810 <HAL_ADC_ConfigChannel+0x258>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d003      	beq.n	80057ac <HAL_ADC_ConfigChannel+0x1f4>
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	2b11      	cmp	r3, #17
 80057aa:	d122      	bne.n	80057f2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a11      	ldr	r2, [pc, #68]	@ (8005810 <HAL_ADC_ConfigChannel+0x258>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d111      	bne.n	80057f2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80057ce:	4b11      	ldr	r3, [pc, #68]	@ (8005814 <HAL_ADC_ConfigChannel+0x25c>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a11      	ldr	r2, [pc, #68]	@ (8005818 <HAL_ADC_ConfigChannel+0x260>)
 80057d4:	fba2 2303 	umull	r2, r3, r2, r3
 80057d8:	0c9a      	lsrs	r2, r3, #18
 80057da:	4613      	mov	r3, r2
 80057dc:	009b      	lsls	r3, r3, #2
 80057de:	4413      	add	r3, r2
 80057e0:	005b      	lsls	r3, r3, #1
 80057e2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80057e4:	e002      	b.n	80057ec <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	3b01      	subs	r3, #1
 80057ea:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d1f9      	bne.n	80057e6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2200      	movs	r2, #0
 80057f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80057fa:	2300      	movs	r3, #0
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3714      	adds	r7, #20
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr
 8005808:	40012300 	.word	0x40012300
 800580c:	40012000 	.word	0x40012000
 8005810:	10000012 	.word	0x10000012
 8005814:	20000014 	.word	0x20000014
 8005818:	431bde83 	.word	0x431bde83

0800581c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800581c:	b480      	push	{r7}
 800581e:	b085      	sub	sp, #20
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005824:	4b79      	ldr	r3, [pc, #484]	@ (8005a0c <ADC_Init+0x1f0>)
 8005826:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	685a      	ldr	r2, [r3, #4]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	431a      	orrs	r2, r3
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	685a      	ldr	r2, [r3, #4]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005850:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	6859      	ldr	r1, [r3, #4]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	691b      	ldr	r3, [r3, #16]
 800585c:	021a      	lsls	r2, r3, #8
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	430a      	orrs	r2, r1
 8005864:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	685a      	ldr	r2, [r3, #4]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8005874:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	6859      	ldr	r1, [r3, #4]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	689a      	ldr	r2, [r3, #8]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	430a      	orrs	r2, r1
 8005886:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	689a      	ldr	r2, [r3, #8]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005896:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	6899      	ldr	r1, [r3, #8]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	68da      	ldr	r2, [r3, #12]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	430a      	orrs	r2, r1
 80058a8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058ae:	4a58      	ldr	r2, [pc, #352]	@ (8005a10 <ADC_Init+0x1f4>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d022      	beq.n	80058fa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	689a      	ldr	r2, [r3, #8]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80058c2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	6899      	ldr	r1, [r3, #8]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	430a      	orrs	r2, r1
 80058d4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	689a      	ldr	r2, [r3, #8]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80058e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	6899      	ldr	r1, [r3, #8]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	430a      	orrs	r2, r1
 80058f6:	609a      	str	r2, [r3, #8]
 80058f8:	e00f      	b.n	800591a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	689a      	ldr	r2, [r3, #8]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005908:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	689a      	ldr	r2, [r3, #8]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005918:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	689a      	ldr	r2, [r3, #8]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f022 0202 	bic.w	r2, r2, #2
 8005928:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	6899      	ldr	r1, [r3, #8]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	7e1b      	ldrb	r3, [r3, #24]
 8005934:	005a      	lsls	r2, r3, #1
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	430a      	orrs	r2, r1
 800593c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d01b      	beq.n	8005980 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	685a      	ldr	r2, [r3, #4]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005956:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	685a      	ldr	r2, [r3, #4]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8005966:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	6859      	ldr	r1, [r3, #4]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005972:	3b01      	subs	r3, #1
 8005974:	035a      	lsls	r2, r3, #13
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	430a      	orrs	r2, r1
 800597c:	605a      	str	r2, [r3, #4]
 800597e:	e007      	b.n	8005990 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	685a      	ldr	r2, [r3, #4]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800598e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800599e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	69db      	ldr	r3, [r3, #28]
 80059aa:	3b01      	subs	r3, #1
 80059ac:	051a      	lsls	r2, r3, #20
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	430a      	orrs	r2, r1
 80059b4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	689a      	ldr	r2, [r3, #8]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80059c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	6899      	ldr	r1, [r3, #8]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80059d2:	025a      	lsls	r2, r3, #9
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	430a      	orrs	r2, r1
 80059da:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	689a      	ldr	r2, [r3, #8]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80059ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	6899      	ldr	r1, [r3, #8]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	695b      	ldr	r3, [r3, #20]
 80059f6:	029a      	lsls	r2, r3, #10
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	430a      	orrs	r2, r1
 80059fe:	609a      	str	r2, [r3, #8]
}
 8005a00:	bf00      	nop
 8005a02:	3714      	adds	r7, #20
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr
 8005a0c:	40012300 	.word	0x40012300
 8005a10:	0f000001 	.word	0x0f000001

08005a14 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b084      	sub	sp, #16
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a20:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a26:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d13c      	bne.n	8005aa8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a32:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d12b      	bne.n	8005aa0 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d127      	bne.n	8005aa0 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a56:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d006      	beq.n	8005a6c <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	689b      	ldr	r3, [r3, #8]
 8005a64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d119      	bne.n	8005aa0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	685a      	ldr	r2, [r3, #4]
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f022 0220 	bic.w	r2, r2, #32
 8005a7a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a80:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a8c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d105      	bne.n	8005aa0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a98:	f043 0201 	orr.w	r2, r3, #1
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005aa0:	68f8      	ldr	r0, [r7, #12]
 8005aa2:	f7fe fd0d 	bl	80044c0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005aa6:	e00e      	b.n	8005ac6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aac:	f003 0310 	and.w	r3, r3, #16
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d003      	beq.n	8005abc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8005ab4:	68f8      	ldr	r0, [r7, #12]
 8005ab6:	f7ff fd75 	bl	80055a4 <HAL_ADC_ErrorCallback>
}
 8005aba:	e004      	b.n	8005ac6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ac0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	4798      	blx	r3
}
 8005ac6:	bf00      	nop
 8005ac8:	3710      	adds	r7, #16
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}

08005ace <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005ace:	b580      	push	{r7, lr}
 8005ad0:	b084      	sub	sp, #16
 8005ad2:	af00      	add	r7, sp, #0
 8005ad4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ada:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005adc:	68f8      	ldr	r0, [r7, #12]
 8005ade:	f7ff fd4d 	bl	800557c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005ae2:	bf00      	nop
 8005ae4:	3710      	adds	r7, #16
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}

08005aea <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005aea:	b580      	push	{r7, lr}
 8005aec:	b084      	sub	sp, #16
 8005aee:	af00      	add	r7, sp, #0
 8005af0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005af6:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2240      	movs	r2, #64	@ 0x40
 8005afc:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b02:	f043 0204 	orr.w	r2, r3, #4
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005b0a:	68f8      	ldr	r0, [r7, #12]
 8005b0c:	f7ff fd4a 	bl	80055a4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005b10:	bf00      	nop
 8005b12:	3710      	adds	r7, #16
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}

08005b18 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b083      	sub	sp, #12
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8005b20:	bf00      	nop
 8005b22:	370c      	adds	r7, #12
 8005b24:	46bd      	mov	sp, r7
 8005b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2a:	4770      	bx	lr

08005b2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b085      	sub	sp, #20
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f003 0307 	and.w	r3, r3, #7
 8005b3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005b3c:	4b0c      	ldr	r3, [pc, #48]	@ (8005b70 <__NVIC_SetPriorityGrouping+0x44>)
 8005b3e:	68db      	ldr	r3, [r3, #12]
 8005b40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005b42:	68ba      	ldr	r2, [r7, #8]
 8005b44:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005b48:	4013      	ands	r3, r2
 8005b4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005b54:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005b58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005b5e:	4a04      	ldr	r2, [pc, #16]	@ (8005b70 <__NVIC_SetPriorityGrouping+0x44>)
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	60d3      	str	r3, [r2, #12]
}
 8005b64:	bf00      	nop
 8005b66:	3714      	adds	r7, #20
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6e:	4770      	bx	lr
 8005b70:	e000ed00 	.word	0xe000ed00

08005b74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005b74:	b480      	push	{r7}
 8005b76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005b78:	4b04      	ldr	r3, [pc, #16]	@ (8005b8c <__NVIC_GetPriorityGrouping+0x18>)
 8005b7a:	68db      	ldr	r3, [r3, #12]
 8005b7c:	0a1b      	lsrs	r3, r3, #8
 8005b7e:	f003 0307 	and.w	r3, r3, #7
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr
 8005b8c:	e000ed00 	.word	0xe000ed00

08005b90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b083      	sub	sp, #12
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	4603      	mov	r3, r0
 8005b98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	db0b      	blt.n	8005bba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005ba2:	79fb      	ldrb	r3, [r7, #7]
 8005ba4:	f003 021f 	and.w	r2, r3, #31
 8005ba8:	4907      	ldr	r1, [pc, #28]	@ (8005bc8 <__NVIC_EnableIRQ+0x38>)
 8005baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bae:	095b      	lsrs	r3, r3, #5
 8005bb0:	2001      	movs	r0, #1
 8005bb2:	fa00 f202 	lsl.w	r2, r0, r2
 8005bb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005bba:	bf00      	nop
 8005bbc:	370c      	adds	r7, #12
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr
 8005bc6:	bf00      	nop
 8005bc8:	e000e100 	.word	0xe000e100

08005bcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b083      	sub	sp, #12
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	6039      	str	r1, [r7, #0]
 8005bd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005bd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	db0a      	blt.n	8005bf6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	b2da      	uxtb	r2, r3
 8005be4:	490c      	ldr	r1, [pc, #48]	@ (8005c18 <__NVIC_SetPriority+0x4c>)
 8005be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bea:	0112      	lsls	r2, r2, #4
 8005bec:	b2d2      	uxtb	r2, r2
 8005bee:	440b      	add	r3, r1
 8005bf0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005bf4:	e00a      	b.n	8005c0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	b2da      	uxtb	r2, r3
 8005bfa:	4908      	ldr	r1, [pc, #32]	@ (8005c1c <__NVIC_SetPriority+0x50>)
 8005bfc:	79fb      	ldrb	r3, [r7, #7]
 8005bfe:	f003 030f 	and.w	r3, r3, #15
 8005c02:	3b04      	subs	r3, #4
 8005c04:	0112      	lsls	r2, r2, #4
 8005c06:	b2d2      	uxtb	r2, r2
 8005c08:	440b      	add	r3, r1
 8005c0a:	761a      	strb	r2, [r3, #24]
}
 8005c0c:	bf00      	nop
 8005c0e:	370c      	adds	r7, #12
 8005c10:	46bd      	mov	sp, r7
 8005c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c16:	4770      	bx	lr
 8005c18:	e000e100 	.word	0xe000e100
 8005c1c:	e000ed00 	.word	0xe000ed00

08005c20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b089      	sub	sp, #36	@ 0x24
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	60f8      	str	r0, [r7, #12]
 8005c28:	60b9      	str	r1, [r7, #8]
 8005c2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f003 0307 	and.w	r3, r3, #7
 8005c32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005c34:	69fb      	ldr	r3, [r7, #28]
 8005c36:	f1c3 0307 	rsb	r3, r3, #7
 8005c3a:	2b04      	cmp	r3, #4
 8005c3c:	bf28      	it	cs
 8005c3e:	2304      	movcs	r3, #4
 8005c40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005c42:	69fb      	ldr	r3, [r7, #28]
 8005c44:	3304      	adds	r3, #4
 8005c46:	2b06      	cmp	r3, #6
 8005c48:	d902      	bls.n	8005c50 <NVIC_EncodePriority+0x30>
 8005c4a:	69fb      	ldr	r3, [r7, #28]
 8005c4c:	3b03      	subs	r3, #3
 8005c4e:	e000      	b.n	8005c52 <NVIC_EncodePriority+0x32>
 8005c50:	2300      	movs	r3, #0
 8005c52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c54:	f04f 32ff 	mov.w	r2, #4294967295
 8005c58:	69bb      	ldr	r3, [r7, #24]
 8005c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c5e:	43da      	mvns	r2, r3
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	401a      	ands	r2, r3
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005c68:	f04f 31ff 	mov.w	r1, #4294967295
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8005c72:	43d9      	mvns	r1, r3
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c78:	4313      	orrs	r3, r2
         );
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3724      	adds	r7, #36	@ 0x24
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c84:	4770      	bx	lr
	...

08005c88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b082      	sub	sp, #8
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	3b01      	subs	r3, #1
 8005c94:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005c98:	d301      	bcc.n	8005c9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	e00f      	b.n	8005cbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005c9e:	4a0a      	ldr	r2, [pc, #40]	@ (8005cc8 <SysTick_Config+0x40>)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	3b01      	subs	r3, #1
 8005ca4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005ca6:	210f      	movs	r1, #15
 8005ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8005cac:	f7ff ff8e 	bl	8005bcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005cb0:	4b05      	ldr	r3, [pc, #20]	@ (8005cc8 <SysTick_Config+0x40>)
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005cb6:	4b04      	ldr	r3, [pc, #16]	@ (8005cc8 <SysTick_Config+0x40>)
 8005cb8:	2207      	movs	r2, #7
 8005cba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005cbc:	2300      	movs	r3, #0
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3708      	adds	r7, #8
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}
 8005cc6:	bf00      	nop
 8005cc8:	e000e010 	.word	0xe000e010

08005ccc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b082      	sub	sp, #8
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f7ff ff29 	bl	8005b2c <__NVIC_SetPriorityGrouping>
}
 8005cda:	bf00      	nop
 8005cdc:	3708      	adds	r7, #8
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}

08005ce2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005ce2:	b580      	push	{r7, lr}
 8005ce4:	b086      	sub	sp, #24
 8005ce6:	af00      	add	r7, sp, #0
 8005ce8:	4603      	mov	r3, r0
 8005cea:	60b9      	str	r1, [r7, #8]
 8005cec:	607a      	str	r2, [r7, #4]
 8005cee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005cf4:	f7ff ff3e 	bl	8005b74 <__NVIC_GetPriorityGrouping>
 8005cf8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005cfa:	687a      	ldr	r2, [r7, #4]
 8005cfc:	68b9      	ldr	r1, [r7, #8]
 8005cfe:	6978      	ldr	r0, [r7, #20]
 8005d00:	f7ff ff8e 	bl	8005c20 <NVIC_EncodePriority>
 8005d04:	4602      	mov	r2, r0
 8005d06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d0a:	4611      	mov	r1, r2
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	f7ff ff5d 	bl	8005bcc <__NVIC_SetPriority>
}
 8005d12:	bf00      	nop
 8005d14:	3718      	adds	r7, #24
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}

08005d1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005d1a:	b580      	push	{r7, lr}
 8005d1c:	b082      	sub	sp, #8
 8005d1e:	af00      	add	r7, sp, #0
 8005d20:	4603      	mov	r3, r0
 8005d22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005d24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f7ff ff31 	bl	8005b90 <__NVIC_EnableIRQ>
}
 8005d2e:	bf00      	nop
 8005d30:	3708      	adds	r7, #8
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}

08005d36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005d36:	b580      	push	{r7, lr}
 8005d38:	b082      	sub	sp, #8
 8005d3a:	af00      	add	r7, sp, #0
 8005d3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f7ff ffa2 	bl	8005c88 <SysTick_Config>
 8005d44:	4603      	mov	r3, r0
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3708      	adds	r7, #8
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}
	...

08005d50 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b086      	sub	sp, #24
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005d5c:	f7ff f99a 	bl	8005094 <HAL_GetTick>
 8005d60:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d101      	bne.n	8005d6c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	e099      	b.n	8005ea0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2202      	movs	r2, #2
 8005d70:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2200      	movs	r2, #0
 8005d78:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	681a      	ldr	r2, [r3, #0]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f022 0201 	bic.w	r2, r2, #1
 8005d8a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005d8c:	e00f      	b.n	8005dae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005d8e:	f7ff f981 	bl	8005094 <HAL_GetTick>
 8005d92:	4602      	mov	r2, r0
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	1ad3      	subs	r3, r2, r3
 8005d98:	2b05      	cmp	r3, #5
 8005d9a:	d908      	bls.n	8005dae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2220      	movs	r2, #32
 8005da0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2203      	movs	r2, #3
 8005da6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8005daa:	2303      	movs	r3, #3
 8005dac:	e078      	b.n	8005ea0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f003 0301 	and.w	r3, r3, #1
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d1e8      	bne.n	8005d8e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005dc4:	697a      	ldr	r2, [r7, #20]
 8005dc6:	4b38      	ldr	r3, [pc, #224]	@ (8005ea8 <HAL_DMA_Init+0x158>)
 8005dc8:	4013      	ands	r3, r2
 8005dca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	685a      	ldr	r2, [r3, #4]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	689b      	ldr	r3, [r3, #8]
 8005dd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005dda:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	691b      	ldr	r3, [r3, #16]
 8005de0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005de6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	699b      	ldr	r3, [r3, #24]
 8005dec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005df2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6a1b      	ldr	r3, [r3, #32]
 8005df8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005dfa:	697a      	ldr	r2, [r7, #20]
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e04:	2b04      	cmp	r3, #4
 8005e06:	d107      	bne.n	8005e18 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e10:	4313      	orrs	r3, r2
 8005e12:	697a      	ldr	r2, [r7, #20]
 8005e14:	4313      	orrs	r3, r2
 8005e16:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	697a      	ldr	r2, [r7, #20]
 8005e1e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	695b      	ldr	r3, [r3, #20]
 8005e26:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	f023 0307 	bic.w	r3, r3, #7
 8005e2e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e34:	697a      	ldr	r2, [r7, #20]
 8005e36:	4313      	orrs	r3, r2
 8005e38:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e3e:	2b04      	cmp	r3, #4
 8005e40:	d117      	bne.n	8005e72 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e46:	697a      	ldr	r2, [r7, #20]
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d00e      	beq.n	8005e72 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	f000 fb1b 	bl	8006490 <DMA_CheckFifoParam>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d008      	beq.n	8005e72 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2240      	movs	r2, #64	@ 0x40
 8005e64:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2201      	movs	r2, #1
 8005e6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8005e6e:	2301      	movs	r3, #1
 8005e70:	e016      	b.n	8005ea0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	697a      	ldr	r2, [r7, #20]
 8005e78:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f000 fad2 	bl	8006424 <DMA_CalcBaseAndBitshift>
 8005e80:	4603      	mov	r3, r0
 8005e82:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e88:	223f      	movs	r2, #63	@ 0x3f
 8005e8a:	409a      	lsls	r2, r3
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2200      	movs	r2, #0
 8005e94:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2201      	movs	r2, #1
 8005e9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005e9e:	2300      	movs	r3, #0
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	3718      	adds	r7, #24
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}
 8005ea8:	f010803f 	.word	0xf010803f

08005eac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b086      	sub	sp, #24
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	60f8      	str	r0, [r7, #12]
 8005eb4:	60b9      	str	r1, [r7, #8]
 8005eb6:	607a      	str	r2, [r7, #4]
 8005eb8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ec2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005eca:	2b01      	cmp	r3, #1
 8005ecc:	d101      	bne.n	8005ed2 <HAL_DMA_Start_IT+0x26>
 8005ece:	2302      	movs	r3, #2
 8005ed0:	e040      	b.n	8005f54 <HAL_DMA_Start_IT+0xa8>
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	2201      	movs	r2, #1
 8005ed6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005ee0:	b2db      	uxtb	r3, r3
 8005ee2:	2b01      	cmp	r3, #1
 8005ee4:	d12f      	bne.n	8005f46 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2202      	movs	r2, #2
 8005eea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	687a      	ldr	r2, [r7, #4]
 8005ef8:	68b9      	ldr	r1, [r7, #8]
 8005efa:	68f8      	ldr	r0, [r7, #12]
 8005efc:	f000 fa64 	bl	80063c8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f04:	223f      	movs	r2, #63	@ 0x3f
 8005f06:	409a      	lsls	r2, r3
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	681a      	ldr	r2, [r3, #0]
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f042 0216 	orr.w	r2, r2, #22
 8005f1a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d007      	beq.n	8005f34 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f042 0208 	orr.w	r2, r2, #8
 8005f32:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f042 0201 	orr.w	r2, r2, #1
 8005f42:	601a      	str	r2, [r3, #0]
 8005f44:	e005      	b.n	8005f52 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005f4e:	2302      	movs	r3, #2
 8005f50:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005f52:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	3718      	adds	r7, #24
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bd80      	pop	{r7, pc}

08005f5c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b084      	sub	sp, #16
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f68:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005f6a:	f7ff f893 	bl	8005094 <HAL_GetTick>
 8005f6e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005f76:	b2db      	uxtb	r3, r3
 8005f78:	2b02      	cmp	r3, #2
 8005f7a:	d008      	beq.n	8005f8e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2280      	movs	r2, #128	@ 0x80
 8005f80:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2200      	movs	r2, #0
 8005f86:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	e052      	b.n	8006034 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	681a      	ldr	r2, [r3, #0]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f022 0216 	bic.w	r2, r2, #22
 8005f9c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	695a      	ldr	r2, [r3, #20]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005fac:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d103      	bne.n	8005fbe <HAL_DMA_Abort+0x62>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d007      	beq.n	8005fce <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f022 0208 	bic.w	r2, r2, #8
 8005fcc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	681a      	ldr	r2, [r3, #0]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f022 0201 	bic.w	r2, r2, #1
 8005fdc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005fde:	e013      	b.n	8006008 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005fe0:	f7ff f858 	bl	8005094 <HAL_GetTick>
 8005fe4:	4602      	mov	r2, r0
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	1ad3      	subs	r3, r2, r3
 8005fea:	2b05      	cmp	r3, #5
 8005fec:	d90c      	bls.n	8006008 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2220      	movs	r2, #32
 8005ff2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2203      	movs	r2, #3
 8005ff8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2200      	movs	r2, #0
 8006000:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8006004:	2303      	movs	r3, #3
 8006006:	e015      	b.n	8006034 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f003 0301 	and.w	r3, r3, #1
 8006012:	2b00      	cmp	r3, #0
 8006014:	d1e4      	bne.n	8005fe0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800601a:	223f      	movs	r2, #63	@ 0x3f
 800601c:	409a      	lsls	r2, r3
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2201      	movs	r2, #1
 8006026:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2200      	movs	r2, #0
 800602e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8006032:	2300      	movs	r3, #0
}
 8006034:	4618      	mov	r0, r3
 8006036:	3710      	adds	r7, #16
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}

0800603c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800603c:	b480      	push	{r7}
 800603e:	b083      	sub	sp, #12
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800604a:	b2db      	uxtb	r3, r3
 800604c:	2b02      	cmp	r3, #2
 800604e:	d004      	beq.n	800605a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2280      	movs	r2, #128	@ 0x80
 8006054:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8006056:	2301      	movs	r3, #1
 8006058:	e00c      	b.n	8006074 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2205      	movs	r2, #5
 800605e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	681a      	ldr	r2, [r3, #0]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f022 0201 	bic.w	r2, r2, #1
 8006070:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006072:	2300      	movs	r3, #0
}
 8006074:	4618      	mov	r0, r3
 8006076:	370c      	adds	r7, #12
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr

08006080 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b086      	sub	sp, #24
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006088:	2300      	movs	r3, #0
 800608a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800608c:	4b8e      	ldr	r3, [pc, #568]	@ (80062c8 <HAL_DMA_IRQHandler+0x248>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a8e      	ldr	r2, [pc, #568]	@ (80062cc <HAL_DMA_IRQHandler+0x24c>)
 8006092:	fba2 2303 	umull	r2, r3, r2, r3
 8006096:	0a9b      	lsrs	r3, r3, #10
 8006098:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800609e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060aa:	2208      	movs	r2, #8
 80060ac:	409a      	lsls	r2, r3
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	4013      	ands	r3, r2
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d01a      	beq.n	80060ec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f003 0304 	and.w	r3, r3, #4
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d013      	beq.n	80060ec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	681a      	ldr	r2, [r3, #0]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f022 0204 	bic.w	r2, r2, #4
 80060d2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060d8:	2208      	movs	r2, #8
 80060da:	409a      	lsls	r2, r3
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060e4:	f043 0201 	orr.w	r2, r3, #1
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060f0:	2201      	movs	r2, #1
 80060f2:	409a      	lsls	r2, r3
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	4013      	ands	r3, r2
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d012      	beq.n	8006122 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	695b      	ldr	r3, [r3, #20]
 8006102:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006106:	2b00      	cmp	r3, #0
 8006108:	d00b      	beq.n	8006122 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800610e:	2201      	movs	r2, #1
 8006110:	409a      	lsls	r2, r3
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800611a:	f043 0202 	orr.w	r2, r3, #2
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006126:	2204      	movs	r2, #4
 8006128:	409a      	lsls	r2, r3
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	4013      	ands	r3, r2
 800612e:	2b00      	cmp	r3, #0
 8006130:	d012      	beq.n	8006158 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f003 0302 	and.w	r3, r3, #2
 800613c:	2b00      	cmp	r3, #0
 800613e:	d00b      	beq.n	8006158 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006144:	2204      	movs	r2, #4
 8006146:	409a      	lsls	r2, r3
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006150:	f043 0204 	orr.w	r2, r3, #4
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800615c:	2210      	movs	r2, #16
 800615e:	409a      	lsls	r2, r3
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	4013      	ands	r3, r2
 8006164:	2b00      	cmp	r3, #0
 8006166:	d043      	beq.n	80061f0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f003 0308 	and.w	r3, r3, #8
 8006172:	2b00      	cmp	r3, #0
 8006174:	d03c      	beq.n	80061f0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800617a:	2210      	movs	r2, #16
 800617c:	409a      	lsls	r2, r3
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800618c:	2b00      	cmp	r3, #0
 800618e:	d018      	beq.n	80061c2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800619a:	2b00      	cmp	r3, #0
 800619c:	d108      	bne.n	80061b0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d024      	beq.n	80061f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	4798      	blx	r3
 80061ae:	e01f      	b.n	80061f0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d01b      	beq.n	80061f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	4798      	blx	r3
 80061c0:	e016      	b.n	80061f0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d107      	bne.n	80061e0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	681a      	ldr	r2, [r3, #0]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f022 0208 	bic.w	r2, r2, #8
 80061de:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d003      	beq.n	80061f0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061f4:	2220      	movs	r2, #32
 80061f6:	409a      	lsls	r2, r3
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	4013      	ands	r3, r2
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	f000 808f 	beq.w	8006320 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f003 0310 	and.w	r3, r3, #16
 800620c:	2b00      	cmp	r3, #0
 800620e:	f000 8087 	beq.w	8006320 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006216:	2220      	movs	r2, #32
 8006218:	409a      	lsls	r2, r3
 800621a:	693b      	ldr	r3, [r7, #16]
 800621c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006224:	b2db      	uxtb	r3, r3
 8006226:	2b05      	cmp	r3, #5
 8006228:	d136      	bne.n	8006298 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	681a      	ldr	r2, [r3, #0]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f022 0216 	bic.w	r2, r2, #22
 8006238:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	695a      	ldr	r2, [r3, #20]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006248:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800624e:	2b00      	cmp	r3, #0
 8006250:	d103      	bne.n	800625a <HAL_DMA_IRQHandler+0x1da>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006256:	2b00      	cmp	r3, #0
 8006258:	d007      	beq.n	800626a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	681a      	ldr	r2, [r3, #0]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f022 0208 	bic.w	r2, r2, #8
 8006268:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800626e:	223f      	movs	r2, #63	@ 0x3f
 8006270:	409a      	lsls	r2, r3
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2201      	movs	r2, #1
 800627a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2200      	movs	r2, #0
 8006282:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800628a:	2b00      	cmp	r3, #0
 800628c:	d07e      	beq.n	800638c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	4798      	blx	r3
        }
        return;
 8006296:	e079      	b.n	800638c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d01d      	beq.n	80062e2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d10d      	bne.n	80062d0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d031      	beq.n	8006320 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	4798      	blx	r3
 80062c4:	e02c      	b.n	8006320 <HAL_DMA_IRQHandler+0x2a0>
 80062c6:	bf00      	nop
 80062c8:	20000014 	.word	0x20000014
 80062cc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d023      	beq.n	8006320 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	4798      	blx	r3
 80062e0:	e01e      	b.n	8006320 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d10f      	bne.n	8006310 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	681a      	ldr	r2, [r3, #0]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f022 0210 	bic.w	r2, r2, #16
 80062fe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2201      	movs	r2, #1
 8006304:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2200      	movs	r2, #0
 800630c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006314:	2b00      	cmp	r3, #0
 8006316:	d003      	beq.n	8006320 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006324:	2b00      	cmp	r3, #0
 8006326:	d032      	beq.n	800638e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800632c:	f003 0301 	and.w	r3, r3, #1
 8006330:	2b00      	cmp	r3, #0
 8006332:	d022      	beq.n	800637a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2205      	movs	r2, #5
 8006338:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f022 0201 	bic.w	r2, r2, #1
 800634a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	3301      	adds	r3, #1
 8006350:	60bb      	str	r3, [r7, #8]
 8006352:	697a      	ldr	r2, [r7, #20]
 8006354:	429a      	cmp	r2, r3
 8006356:	d307      	bcc.n	8006368 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f003 0301 	and.w	r3, r3, #1
 8006362:	2b00      	cmp	r3, #0
 8006364:	d1f2      	bne.n	800634c <HAL_DMA_IRQHandler+0x2cc>
 8006366:	e000      	b.n	800636a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006368:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2201      	movs	r2, #1
 800636e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2200      	movs	r2, #0
 8006376:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800637e:	2b00      	cmp	r3, #0
 8006380:	d005      	beq.n	800638e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	4798      	blx	r3
 800638a:	e000      	b.n	800638e <HAL_DMA_IRQHandler+0x30e>
        return;
 800638c:	bf00      	nop
    }
  }
}
 800638e:	3718      	adds	r7, #24
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}

08006394 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8006394:	b480      	push	{r7}
 8006396:	b083      	sub	sp, #12
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80063a2:	b2db      	uxtb	r3, r3
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	370c      	adds	r7, #12
 80063a8:	46bd      	mov	sp, r7
 80063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ae:	4770      	bx	lr

080063b0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b083      	sub	sp, #12
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80063bc:	4618      	mov	r0, r3
 80063be:	370c      	adds	r7, #12
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr

080063c8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b085      	sub	sp, #20
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	60f8      	str	r0, [r7, #12]
 80063d0:	60b9      	str	r1, [r7, #8]
 80063d2:	607a      	str	r2, [r7, #4]
 80063d4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	681a      	ldr	r2, [r3, #0]
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80063e4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	683a      	ldr	r2, [r7, #0]
 80063ec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	689b      	ldr	r3, [r3, #8]
 80063f2:	2b40      	cmp	r3, #64	@ 0x40
 80063f4:	d108      	bne.n	8006408 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	687a      	ldr	r2, [r7, #4]
 80063fc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	68ba      	ldr	r2, [r7, #8]
 8006404:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006406:	e007      	b.n	8006418 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	68ba      	ldr	r2, [r7, #8]
 800640e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	687a      	ldr	r2, [r7, #4]
 8006416:	60da      	str	r2, [r3, #12]
}
 8006418:	bf00      	nop
 800641a:	3714      	adds	r7, #20
 800641c:	46bd      	mov	sp, r7
 800641e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006422:	4770      	bx	lr

08006424 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006424:	b480      	push	{r7}
 8006426:	b085      	sub	sp, #20
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	b2db      	uxtb	r3, r3
 8006432:	3b10      	subs	r3, #16
 8006434:	4a14      	ldr	r2, [pc, #80]	@ (8006488 <DMA_CalcBaseAndBitshift+0x64>)
 8006436:	fba2 2303 	umull	r2, r3, r2, r3
 800643a:	091b      	lsrs	r3, r3, #4
 800643c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800643e:	4a13      	ldr	r2, [pc, #76]	@ (800648c <DMA_CalcBaseAndBitshift+0x68>)
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	4413      	add	r3, r2
 8006444:	781b      	ldrb	r3, [r3, #0]
 8006446:	461a      	mov	r2, r3
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2b03      	cmp	r3, #3
 8006450:	d909      	bls.n	8006466 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800645a:	f023 0303 	bic.w	r3, r3, #3
 800645e:	1d1a      	adds	r2, r3, #4
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	659a      	str	r2, [r3, #88]	@ 0x58
 8006464:	e007      	b.n	8006476 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800646e:	f023 0303 	bic.w	r3, r3, #3
 8006472:	687a      	ldr	r2, [r7, #4]
 8006474:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800647a:	4618      	mov	r0, r3
 800647c:	3714      	adds	r7, #20
 800647e:	46bd      	mov	sp, r7
 8006480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006484:	4770      	bx	lr
 8006486:	bf00      	nop
 8006488:	aaaaaaab 	.word	0xaaaaaaab
 800648c:	08013f2c 	.word	0x08013f2c

08006490 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006490:	b480      	push	{r7}
 8006492:	b085      	sub	sp, #20
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006498:	2300      	movs	r3, #0
 800649a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064a0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	699b      	ldr	r3, [r3, #24]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d11f      	bne.n	80064ea <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	2b03      	cmp	r3, #3
 80064ae:	d856      	bhi.n	800655e <DMA_CheckFifoParam+0xce>
 80064b0:	a201      	add	r2, pc, #4	@ (adr r2, 80064b8 <DMA_CheckFifoParam+0x28>)
 80064b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064b6:	bf00      	nop
 80064b8:	080064c9 	.word	0x080064c9
 80064bc:	080064db 	.word	0x080064db
 80064c0:	080064c9 	.word	0x080064c9
 80064c4:	0800655f 	.word	0x0800655f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064cc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d046      	beq.n	8006562 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80064d4:	2301      	movs	r3, #1
 80064d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80064d8:	e043      	b.n	8006562 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064de:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80064e2:	d140      	bne.n	8006566 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80064e4:	2301      	movs	r3, #1
 80064e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80064e8:	e03d      	b.n	8006566 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	699b      	ldr	r3, [r3, #24]
 80064ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80064f2:	d121      	bne.n	8006538 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	2b03      	cmp	r3, #3
 80064f8:	d837      	bhi.n	800656a <DMA_CheckFifoParam+0xda>
 80064fa:	a201      	add	r2, pc, #4	@ (adr r2, 8006500 <DMA_CheckFifoParam+0x70>)
 80064fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006500:	08006511 	.word	0x08006511
 8006504:	08006517 	.word	0x08006517
 8006508:	08006511 	.word	0x08006511
 800650c:	08006529 	.word	0x08006529
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006510:	2301      	movs	r3, #1
 8006512:	73fb      	strb	r3, [r7, #15]
      break;
 8006514:	e030      	b.n	8006578 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800651a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800651e:	2b00      	cmp	r3, #0
 8006520:	d025      	beq.n	800656e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006522:	2301      	movs	r3, #1
 8006524:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006526:	e022      	b.n	800656e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800652c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006530:	d11f      	bne.n	8006572 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006532:	2301      	movs	r3, #1
 8006534:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006536:	e01c      	b.n	8006572 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	2b02      	cmp	r3, #2
 800653c:	d903      	bls.n	8006546 <DMA_CheckFifoParam+0xb6>
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	2b03      	cmp	r3, #3
 8006542:	d003      	beq.n	800654c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006544:	e018      	b.n	8006578 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006546:	2301      	movs	r3, #1
 8006548:	73fb      	strb	r3, [r7, #15]
      break;
 800654a:	e015      	b.n	8006578 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006550:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006554:	2b00      	cmp	r3, #0
 8006556:	d00e      	beq.n	8006576 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006558:	2301      	movs	r3, #1
 800655a:	73fb      	strb	r3, [r7, #15]
      break;
 800655c:	e00b      	b.n	8006576 <DMA_CheckFifoParam+0xe6>
      break;
 800655e:	bf00      	nop
 8006560:	e00a      	b.n	8006578 <DMA_CheckFifoParam+0xe8>
      break;
 8006562:	bf00      	nop
 8006564:	e008      	b.n	8006578 <DMA_CheckFifoParam+0xe8>
      break;
 8006566:	bf00      	nop
 8006568:	e006      	b.n	8006578 <DMA_CheckFifoParam+0xe8>
      break;
 800656a:	bf00      	nop
 800656c:	e004      	b.n	8006578 <DMA_CheckFifoParam+0xe8>
      break;
 800656e:	bf00      	nop
 8006570:	e002      	b.n	8006578 <DMA_CheckFifoParam+0xe8>
      break;   
 8006572:	bf00      	nop
 8006574:	e000      	b.n	8006578 <DMA_CheckFifoParam+0xe8>
      break;
 8006576:	bf00      	nop
    }
  } 
  
  return status; 
 8006578:	7bfb      	ldrb	r3, [r7, #15]
}
 800657a:	4618      	mov	r0, r3
 800657c:	3714      	adds	r7, #20
 800657e:	46bd      	mov	sp, r7
 8006580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006584:	4770      	bx	lr
 8006586:	bf00      	nop

08006588 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006588:	b480      	push	{r7}
 800658a:	b089      	sub	sp, #36	@ 0x24
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
 8006590:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006592:	2300      	movs	r3, #0
 8006594:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006596:	2300      	movs	r3, #0
 8006598:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800659a:	2300      	movs	r3, #0
 800659c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800659e:	2300      	movs	r3, #0
 80065a0:	61fb      	str	r3, [r7, #28]
 80065a2:	e159      	b.n	8006858 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80065a4:	2201      	movs	r2, #1
 80065a6:	69fb      	ldr	r3, [r7, #28]
 80065a8:	fa02 f303 	lsl.w	r3, r2, r3
 80065ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	697a      	ldr	r2, [r7, #20]
 80065b4:	4013      	ands	r3, r2
 80065b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80065b8:	693a      	ldr	r2, [r7, #16]
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	429a      	cmp	r2, r3
 80065be:	f040 8148 	bne.w	8006852 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	f003 0303 	and.w	r3, r3, #3
 80065ca:	2b01      	cmp	r3, #1
 80065cc:	d005      	beq.n	80065da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80065d6:	2b02      	cmp	r3, #2
 80065d8:	d130      	bne.n	800663c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	689b      	ldr	r3, [r3, #8]
 80065de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80065e0:	69fb      	ldr	r3, [r7, #28]
 80065e2:	005b      	lsls	r3, r3, #1
 80065e4:	2203      	movs	r2, #3
 80065e6:	fa02 f303 	lsl.w	r3, r2, r3
 80065ea:	43db      	mvns	r3, r3
 80065ec:	69ba      	ldr	r2, [r7, #24]
 80065ee:	4013      	ands	r3, r2
 80065f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	68da      	ldr	r2, [r3, #12]
 80065f6:	69fb      	ldr	r3, [r7, #28]
 80065f8:	005b      	lsls	r3, r3, #1
 80065fa:	fa02 f303 	lsl.w	r3, r2, r3
 80065fe:	69ba      	ldr	r2, [r7, #24]
 8006600:	4313      	orrs	r3, r2
 8006602:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	69ba      	ldr	r2, [r7, #24]
 8006608:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006610:	2201      	movs	r2, #1
 8006612:	69fb      	ldr	r3, [r7, #28]
 8006614:	fa02 f303 	lsl.w	r3, r2, r3
 8006618:	43db      	mvns	r3, r3
 800661a:	69ba      	ldr	r2, [r7, #24]
 800661c:	4013      	ands	r3, r2
 800661e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	091b      	lsrs	r3, r3, #4
 8006626:	f003 0201 	and.w	r2, r3, #1
 800662a:	69fb      	ldr	r3, [r7, #28]
 800662c:	fa02 f303 	lsl.w	r3, r2, r3
 8006630:	69ba      	ldr	r2, [r7, #24]
 8006632:	4313      	orrs	r3, r2
 8006634:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	69ba      	ldr	r2, [r7, #24]
 800663a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	f003 0303 	and.w	r3, r3, #3
 8006644:	2b03      	cmp	r3, #3
 8006646:	d017      	beq.n	8006678 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	68db      	ldr	r3, [r3, #12]
 800664c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800664e:	69fb      	ldr	r3, [r7, #28]
 8006650:	005b      	lsls	r3, r3, #1
 8006652:	2203      	movs	r2, #3
 8006654:	fa02 f303 	lsl.w	r3, r2, r3
 8006658:	43db      	mvns	r3, r3
 800665a:	69ba      	ldr	r2, [r7, #24]
 800665c:	4013      	ands	r3, r2
 800665e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	689a      	ldr	r2, [r3, #8]
 8006664:	69fb      	ldr	r3, [r7, #28]
 8006666:	005b      	lsls	r3, r3, #1
 8006668:	fa02 f303 	lsl.w	r3, r2, r3
 800666c:	69ba      	ldr	r2, [r7, #24]
 800666e:	4313      	orrs	r3, r2
 8006670:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	69ba      	ldr	r2, [r7, #24]
 8006676:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	f003 0303 	and.w	r3, r3, #3
 8006680:	2b02      	cmp	r3, #2
 8006682:	d123      	bne.n	80066cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006684:	69fb      	ldr	r3, [r7, #28]
 8006686:	08da      	lsrs	r2, r3, #3
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	3208      	adds	r2, #8
 800668c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006690:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006692:	69fb      	ldr	r3, [r7, #28]
 8006694:	f003 0307 	and.w	r3, r3, #7
 8006698:	009b      	lsls	r3, r3, #2
 800669a:	220f      	movs	r2, #15
 800669c:	fa02 f303 	lsl.w	r3, r2, r3
 80066a0:	43db      	mvns	r3, r3
 80066a2:	69ba      	ldr	r2, [r7, #24]
 80066a4:	4013      	ands	r3, r2
 80066a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	691a      	ldr	r2, [r3, #16]
 80066ac:	69fb      	ldr	r3, [r7, #28]
 80066ae:	f003 0307 	and.w	r3, r3, #7
 80066b2:	009b      	lsls	r3, r3, #2
 80066b4:	fa02 f303 	lsl.w	r3, r2, r3
 80066b8:	69ba      	ldr	r2, [r7, #24]
 80066ba:	4313      	orrs	r3, r2
 80066bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80066be:	69fb      	ldr	r3, [r7, #28]
 80066c0:	08da      	lsrs	r2, r3, #3
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	3208      	adds	r2, #8
 80066c6:	69b9      	ldr	r1, [r7, #24]
 80066c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80066d2:	69fb      	ldr	r3, [r7, #28]
 80066d4:	005b      	lsls	r3, r3, #1
 80066d6:	2203      	movs	r2, #3
 80066d8:	fa02 f303 	lsl.w	r3, r2, r3
 80066dc:	43db      	mvns	r3, r3
 80066de:	69ba      	ldr	r2, [r7, #24]
 80066e0:	4013      	ands	r3, r2
 80066e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	f003 0203 	and.w	r2, r3, #3
 80066ec:	69fb      	ldr	r3, [r7, #28]
 80066ee:	005b      	lsls	r3, r3, #1
 80066f0:	fa02 f303 	lsl.w	r3, r2, r3
 80066f4:	69ba      	ldr	r2, [r7, #24]
 80066f6:	4313      	orrs	r3, r2
 80066f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	69ba      	ldr	r2, [r7, #24]
 80066fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006708:	2b00      	cmp	r3, #0
 800670a:	f000 80a2 	beq.w	8006852 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800670e:	2300      	movs	r3, #0
 8006710:	60fb      	str	r3, [r7, #12]
 8006712:	4b57      	ldr	r3, [pc, #348]	@ (8006870 <HAL_GPIO_Init+0x2e8>)
 8006714:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006716:	4a56      	ldr	r2, [pc, #344]	@ (8006870 <HAL_GPIO_Init+0x2e8>)
 8006718:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800671c:	6453      	str	r3, [r2, #68]	@ 0x44
 800671e:	4b54      	ldr	r3, [pc, #336]	@ (8006870 <HAL_GPIO_Init+0x2e8>)
 8006720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006722:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006726:	60fb      	str	r3, [r7, #12]
 8006728:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800672a:	4a52      	ldr	r2, [pc, #328]	@ (8006874 <HAL_GPIO_Init+0x2ec>)
 800672c:	69fb      	ldr	r3, [r7, #28]
 800672e:	089b      	lsrs	r3, r3, #2
 8006730:	3302      	adds	r3, #2
 8006732:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006736:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006738:	69fb      	ldr	r3, [r7, #28]
 800673a:	f003 0303 	and.w	r3, r3, #3
 800673e:	009b      	lsls	r3, r3, #2
 8006740:	220f      	movs	r2, #15
 8006742:	fa02 f303 	lsl.w	r3, r2, r3
 8006746:	43db      	mvns	r3, r3
 8006748:	69ba      	ldr	r2, [r7, #24]
 800674a:	4013      	ands	r3, r2
 800674c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	4a49      	ldr	r2, [pc, #292]	@ (8006878 <HAL_GPIO_Init+0x2f0>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d019      	beq.n	800678a <HAL_GPIO_Init+0x202>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	4a48      	ldr	r2, [pc, #288]	@ (800687c <HAL_GPIO_Init+0x2f4>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d013      	beq.n	8006786 <HAL_GPIO_Init+0x1fe>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	4a47      	ldr	r2, [pc, #284]	@ (8006880 <HAL_GPIO_Init+0x2f8>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d00d      	beq.n	8006782 <HAL_GPIO_Init+0x1fa>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	4a46      	ldr	r2, [pc, #280]	@ (8006884 <HAL_GPIO_Init+0x2fc>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d007      	beq.n	800677e <HAL_GPIO_Init+0x1f6>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	4a45      	ldr	r2, [pc, #276]	@ (8006888 <HAL_GPIO_Init+0x300>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d101      	bne.n	800677a <HAL_GPIO_Init+0x1f2>
 8006776:	2304      	movs	r3, #4
 8006778:	e008      	b.n	800678c <HAL_GPIO_Init+0x204>
 800677a:	2307      	movs	r3, #7
 800677c:	e006      	b.n	800678c <HAL_GPIO_Init+0x204>
 800677e:	2303      	movs	r3, #3
 8006780:	e004      	b.n	800678c <HAL_GPIO_Init+0x204>
 8006782:	2302      	movs	r3, #2
 8006784:	e002      	b.n	800678c <HAL_GPIO_Init+0x204>
 8006786:	2301      	movs	r3, #1
 8006788:	e000      	b.n	800678c <HAL_GPIO_Init+0x204>
 800678a:	2300      	movs	r3, #0
 800678c:	69fa      	ldr	r2, [r7, #28]
 800678e:	f002 0203 	and.w	r2, r2, #3
 8006792:	0092      	lsls	r2, r2, #2
 8006794:	4093      	lsls	r3, r2
 8006796:	69ba      	ldr	r2, [r7, #24]
 8006798:	4313      	orrs	r3, r2
 800679a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800679c:	4935      	ldr	r1, [pc, #212]	@ (8006874 <HAL_GPIO_Init+0x2ec>)
 800679e:	69fb      	ldr	r3, [r7, #28]
 80067a0:	089b      	lsrs	r3, r3, #2
 80067a2:	3302      	adds	r3, #2
 80067a4:	69ba      	ldr	r2, [r7, #24]
 80067a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80067aa:	4b38      	ldr	r3, [pc, #224]	@ (800688c <HAL_GPIO_Init+0x304>)
 80067ac:	689b      	ldr	r3, [r3, #8]
 80067ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	43db      	mvns	r3, r3
 80067b4:	69ba      	ldr	r2, [r7, #24]
 80067b6:	4013      	ands	r3, r2
 80067b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d003      	beq.n	80067ce <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80067c6:	69ba      	ldr	r2, [r7, #24]
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	4313      	orrs	r3, r2
 80067cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80067ce:	4a2f      	ldr	r2, [pc, #188]	@ (800688c <HAL_GPIO_Init+0x304>)
 80067d0:	69bb      	ldr	r3, [r7, #24]
 80067d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80067d4:	4b2d      	ldr	r3, [pc, #180]	@ (800688c <HAL_GPIO_Init+0x304>)
 80067d6:	68db      	ldr	r3, [r3, #12]
 80067d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	43db      	mvns	r3, r3
 80067de:	69ba      	ldr	r2, [r7, #24]
 80067e0:	4013      	ands	r3, r2
 80067e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d003      	beq.n	80067f8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80067f0:	69ba      	ldr	r2, [r7, #24]
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	4313      	orrs	r3, r2
 80067f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80067f8:	4a24      	ldr	r2, [pc, #144]	@ (800688c <HAL_GPIO_Init+0x304>)
 80067fa:	69bb      	ldr	r3, [r7, #24]
 80067fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80067fe:	4b23      	ldr	r3, [pc, #140]	@ (800688c <HAL_GPIO_Init+0x304>)
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006804:	693b      	ldr	r3, [r7, #16]
 8006806:	43db      	mvns	r3, r3
 8006808:	69ba      	ldr	r2, [r7, #24]
 800680a:	4013      	ands	r3, r2
 800680c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006816:	2b00      	cmp	r3, #0
 8006818:	d003      	beq.n	8006822 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800681a:	69ba      	ldr	r2, [r7, #24]
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	4313      	orrs	r3, r2
 8006820:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006822:	4a1a      	ldr	r2, [pc, #104]	@ (800688c <HAL_GPIO_Init+0x304>)
 8006824:	69bb      	ldr	r3, [r7, #24]
 8006826:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006828:	4b18      	ldr	r3, [pc, #96]	@ (800688c <HAL_GPIO_Init+0x304>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	43db      	mvns	r3, r3
 8006832:	69ba      	ldr	r2, [r7, #24]
 8006834:	4013      	ands	r3, r2
 8006836:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006840:	2b00      	cmp	r3, #0
 8006842:	d003      	beq.n	800684c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8006844:	69ba      	ldr	r2, [r7, #24]
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	4313      	orrs	r3, r2
 800684a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800684c:	4a0f      	ldr	r2, [pc, #60]	@ (800688c <HAL_GPIO_Init+0x304>)
 800684e:	69bb      	ldr	r3, [r7, #24]
 8006850:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006852:	69fb      	ldr	r3, [r7, #28]
 8006854:	3301      	adds	r3, #1
 8006856:	61fb      	str	r3, [r7, #28]
 8006858:	69fb      	ldr	r3, [r7, #28]
 800685a:	2b0f      	cmp	r3, #15
 800685c:	f67f aea2 	bls.w	80065a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006860:	bf00      	nop
 8006862:	bf00      	nop
 8006864:	3724      	adds	r7, #36	@ 0x24
 8006866:	46bd      	mov	sp, r7
 8006868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686c:	4770      	bx	lr
 800686e:	bf00      	nop
 8006870:	40023800 	.word	0x40023800
 8006874:	40013800 	.word	0x40013800
 8006878:	40020000 	.word	0x40020000
 800687c:	40020400 	.word	0x40020400
 8006880:	40020800 	.word	0x40020800
 8006884:	40020c00 	.word	0x40020c00
 8006888:	40021000 	.word	0x40021000
 800688c:	40013c00 	.word	0x40013c00

08006890 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006890:	b480      	push	{r7}
 8006892:	b085      	sub	sp, #20
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
 8006898:	460b      	mov	r3, r1
 800689a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	691a      	ldr	r2, [r3, #16]
 80068a0:	887b      	ldrh	r3, [r7, #2]
 80068a2:	4013      	ands	r3, r2
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d002      	beq.n	80068ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80068a8:	2301      	movs	r3, #1
 80068aa:	73fb      	strb	r3, [r7, #15]
 80068ac:	e001      	b.n	80068b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80068ae:	2300      	movs	r3, #0
 80068b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80068b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	3714      	adds	r7, #20
 80068b8:	46bd      	mov	sp, r7
 80068ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068be:	4770      	bx	lr

080068c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b083      	sub	sp, #12
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
 80068c8:	460b      	mov	r3, r1
 80068ca:	807b      	strh	r3, [r7, #2]
 80068cc:	4613      	mov	r3, r2
 80068ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80068d0:	787b      	ldrb	r3, [r7, #1]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d003      	beq.n	80068de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80068d6:	887a      	ldrh	r2, [r7, #2]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80068dc:	e003      	b.n	80068e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80068de:	887b      	ldrh	r3, [r7, #2]
 80068e0:	041a      	lsls	r2, r3, #16
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	619a      	str	r2, [r3, #24]
}
 80068e6:	bf00      	nop
 80068e8:	370c      	adds	r7, #12
 80068ea:	46bd      	mov	sp, r7
 80068ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f0:	4770      	bx	lr

080068f2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80068f2:	b480      	push	{r7}
 80068f4:	b085      	sub	sp, #20
 80068f6:	af00      	add	r7, sp, #0
 80068f8:	6078      	str	r0, [r7, #4]
 80068fa:	460b      	mov	r3, r1
 80068fc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	695b      	ldr	r3, [r3, #20]
 8006902:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006904:	887a      	ldrh	r2, [r7, #2]
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	4013      	ands	r3, r2
 800690a:	041a      	lsls	r2, r3, #16
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	43d9      	mvns	r1, r3
 8006910:	887b      	ldrh	r3, [r7, #2]
 8006912:	400b      	ands	r3, r1
 8006914:	431a      	orrs	r2, r3
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	619a      	str	r2, [r3, #24]
}
 800691a:	bf00      	nop
 800691c:	3714      	adds	r7, #20
 800691e:	46bd      	mov	sp, r7
 8006920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006924:	4770      	bx	lr
	...

08006928 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b082      	sub	sp, #8
 800692c:	af00      	add	r7, sp, #0
 800692e:	4603      	mov	r3, r0
 8006930:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006932:	4b08      	ldr	r3, [pc, #32]	@ (8006954 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006934:	695a      	ldr	r2, [r3, #20]
 8006936:	88fb      	ldrh	r3, [r7, #6]
 8006938:	4013      	ands	r3, r2
 800693a:	2b00      	cmp	r3, #0
 800693c:	d006      	beq.n	800694c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800693e:	4a05      	ldr	r2, [pc, #20]	@ (8006954 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006940:	88fb      	ldrh	r3, [r7, #6]
 8006942:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006944:	88fb      	ldrh	r3, [r7, #6]
 8006946:	4618      	mov	r0, r3
 8006948:	f7fd fdca 	bl	80044e0 <HAL_GPIO_EXTI_Callback>
  }
}
 800694c:	bf00      	nop
 800694e:	3708      	adds	r7, #8
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}
 8006954:	40013c00 	.word	0x40013c00

08006958 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b084      	sub	sp, #16
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d101      	bne.n	800696a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006966:	2301      	movs	r3, #1
 8006968:	e12b      	b.n	8006bc2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006970:	b2db      	uxtb	r3, r3
 8006972:	2b00      	cmp	r3, #0
 8006974:	d106      	bne.n	8006984 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2200      	movs	r2, #0
 800697a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f7fe f874 	bl	8004a6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2224      	movs	r2, #36	@ 0x24
 8006988:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	681a      	ldr	r2, [r3, #0]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f022 0201 	bic.w	r2, r2, #1
 800699a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	681a      	ldr	r2, [r3, #0]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80069aa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	681a      	ldr	r2, [r3, #0]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80069ba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80069bc:	f005 fa34 	bl	800be28 <HAL_RCC_GetPCLK1Freq>
 80069c0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	4a81      	ldr	r2, [pc, #516]	@ (8006bcc <HAL_I2C_Init+0x274>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d807      	bhi.n	80069dc <HAL_I2C_Init+0x84>
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	4a80      	ldr	r2, [pc, #512]	@ (8006bd0 <HAL_I2C_Init+0x278>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	bf94      	ite	ls
 80069d4:	2301      	movls	r3, #1
 80069d6:	2300      	movhi	r3, #0
 80069d8:	b2db      	uxtb	r3, r3
 80069da:	e006      	b.n	80069ea <HAL_I2C_Init+0x92>
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	4a7d      	ldr	r2, [pc, #500]	@ (8006bd4 <HAL_I2C_Init+0x27c>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	bf94      	ite	ls
 80069e4:	2301      	movls	r3, #1
 80069e6:	2300      	movhi	r3, #0
 80069e8:	b2db      	uxtb	r3, r3
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d001      	beq.n	80069f2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80069ee:	2301      	movs	r3, #1
 80069f0:	e0e7      	b.n	8006bc2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	4a78      	ldr	r2, [pc, #480]	@ (8006bd8 <HAL_I2C_Init+0x280>)
 80069f6:	fba2 2303 	umull	r2, r3, r2, r3
 80069fa:	0c9b      	lsrs	r3, r3, #18
 80069fc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	68ba      	ldr	r2, [r7, #8]
 8006a0e:	430a      	orrs	r2, r1
 8006a10:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	6a1b      	ldr	r3, [r3, #32]
 8006a18:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	4a6a      	ldr	r2, [pc, #424]	@ (8006bcc <HAL_I2C_Init+0x274>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d802      	bhi.n	8006a2c <HAL_I2C_Init+0xd4>
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	3301      	adds	r3, #1
 8006a2a:	e009      	b.n	8006a40 <HAL_I2C_Init+0xe8>
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8006a32:	fb02 f303 	mul.w	r3, r2, r3
 8006a36:	4a69      	ldr	r2, [pc, #420]	@ (8006bdc <HAL_I2C_Init+0x284>)
 8006a38:	fba2 2303 	umull	r2, r3, r2, r3
 8006a3c:	099b      	lsrs	r3, r3, #6
 8006a3e:	3301      	adds	r3, #1
 8006a40:	687a      	ldr	r2, [r7, #4]
 8006a42:	6812      	ldr	r2, [r2, #0]
 8006a44:	430b      	orrs	r3, r1
 8006a46:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	69db      	ldr	r3, [r3, #28]
 8006a4e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8006a52:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	495c      	ldr	r1, [pc, #368]	@ (8006bcc <HAL_I2C_Init+0x274>)
 8006a5c:	428b      	cmp	r3, r1
 8006a5e:	d819      	bhi.n	8006a94 <HAL_I2C_Init+0x13c>
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	1e59      	subs	r1, r3, #1
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	685b      	ldr	r3, [r3, #4]
 8006a68:	005b      	lsls	r3, r3, #1
 8006a6a:	fbb1 f3f3 	udiv	r3, r1, r3
 8006a6e:	1c59      	adds	r1, r3, #1
 8006a70:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006a74:	400b      	ands	r3, r1
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d00a      	beq.n	8006a90 <HAL_I2C_Init+0x138>
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	1e59      	subs	r1, r3, #1
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	005b      	lsls	r3, r3, #1
 8006a84:	fbb1 f3f3 	udiv	r3, r1, r3
 8006a88:	3301      	adds	r3, #1
 8006a8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a8e:	e051      	b.n	8006b34 <HAL_I2C_Init+0x1dc>
 8006a90:	2304      	movs	r3, #4
 8006a92:	e04f      	b.n	8006b34 <HAL_I2C_Init+0x1dc>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	689b      	ldr	r3, [r3, #8]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d111      	bne.n	8006ac0 <HAL_I2C_Init+0x168>
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	1e58      	subs	r0, r3, #1
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6859      	ldr	r1, [r3, #4]
 8006aa4:	460b      	mov	r3, r1
 8006aa6:	005b      	lsls	r3, r3, #1
 8006aa8:	440b      	add	r3, r1
 8006aaa:	fbb0 f3f3 	udiv	r3, r0, r3
 8006aae:	3301      	adds	r3, #1
 8006ab0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	bf0c      	ite	eq
 8006ab8:	2301      	moveq	r3, #1
 8006aba:	2300      	movne	r3, #0
 8006abc:	b2db      	uxtb	r3, r3
 8006abe:	e012      	b.n	8006ae6 <HAL_I2C_Init+0x18e>
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	1e58      	subs	r0, r3, #1
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6859      	ldr	r1, [r3, #4]
 8006ac8:	460b      	mov	r3, r1
 8006aca:	009b      	lsls	r3, r3, #2
 8006acc:	440b      	add	r3, r1
 8006ace:	0099      	lsls	r1, r3, #2
 8006ad0:	440b      	add	r3, r1
 8006ad2:	fbb0 f3f3 	udiv	r3, r0, r3
 8006ad6:	3301      	adds	r3, #1
 8006ad8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	bf0c      	ite	eq
 8006ae0:	2301      	moveq	r3, #1
 8006ae2:	2300      	movne	r3, #0
 8006ae4:	b2db      	uxtb	r3, r3
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d001      	beq.n	8006aee <HAL_I2C_Init+0x196>
 8006aea:	2301      	movs	r3, #1
 8006aec:	e022      	b.n	8006b34 <HAL_I2C_Init+0x1dc>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	689b      	ldr	r3, [r3, #8]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d10e      	bne.n	8006b14 <HAL_I2C_Init+0x1bc>
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	1e58      	subs	r0, r3, #1
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6859      	ldr	r1, [r3, #4]
 8006afe:	460b      	mov	r3, r1
 8006b00:	005b      	lsls	r3, r3, #1
 8006b02:	440b      	add	r3, r1
 8006b04:	fbb0 f3f3 	udiv	r3, r0, r3
 8006b08:	3301      	adds	r3, #1
 8006b0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b0e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b12:	e00f      	b.n	8006b34 <HAL_I2C_Init+0x1dc>
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	1e58      	subs	r0, r3, #1
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6859      	ldr	r1, [r3, #4]
 8006b1c:	460b      	mov	r3, r1
 8006b1e:	009b      	lsls	r3, r3, #2
 8006b20:	440b      	add	r3, r1
 8006b22:	0099      	lsls	r1, r3, #2
 8006b24:	440b      	add	r3, r1
 8006b26:	fbb0 f3f3 	udiv	r3, r0, r3
 8006b2a:	3301      	adds	r3, #1
 8006b2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b30:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006b34:	6879      	ldr	r1, [r7, #4]
 8006b36:	6809      	ldr	r1, [r1, #0]
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	69da      	ldr	r2, [r3, #28]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6a1b      	ldr	r3, [r3, #32]
 8006b4e:	431a      	orrs	r2, r3
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	430a      	orrs	r2, r1
 8006b56:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	689b      	ldr	r3, [r3, #8]
 8006b5e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8006b62:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006b66:	687a      	ldr	r2, [r7, #4]
 8006b68:	6911      	ldr	r1, [r2, #16]
 8006b6a:	687a      	ldr	r2, [r7, #4]
 8006b6c:	68d2      	ldr	r2, [r2, #12]
 8006b6e:	4311      	orrs	r1, r2
 8006b70:	687a      	ldr	r2, [r7, #4]
 8006b72:	6812      	ldr	r2, [r2, #0]
 8006b74:	430b      	orrs	r3, r1
 8006b76:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	68db      	ldr	r3, [r3, #12]
 8006b7e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	695a      	ldr	r2, [r3, #20]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	699b      	ldr	r3, [r3, #24]
 8006b8a:	431a      	orrs	r2, r3
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	430a      	orrs	r2, r1
 8006b92:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	681a      	ldr	r2, [r3, #0]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f042 0201 	orr.w	r2, r2, #1
 8006ba2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2220      	movs	r2, #32
 8006bae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8006bc0:	2300      	movs	r3, #0
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	3710      	adds	r7, #16
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}
 8006bca:	bf00      	nop
 8006bcc:	000186a0 	.word	0x000186a0
 8006bd0:	001e847f 	.word	0x001e847f
 8006bd4:	003d08ff 	.word	0x003d08ff
 8006bd8:	431bde83 	.word	0x431bde83
 8006bdc:	10624dd3 	.word	0x10624dd3

08006be0 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b083      	sub	sp, #12
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	695b      	ldr	r3, [r3, #20]
 8006bee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006bf2:	2b80      	cmp	r3, #128	@ 0x80
 8006bf4:	d103      	bne.n	8006bfe <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	611a      	str	r2, [r3, #16]
  }
}
 8006bfe:	bf00      	nop
 8006c00:	370c      	adds	r7, #12
 8006c02:	46bd      	mov	sp, r7
 8006c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c08:	4770      	bx	lr
	...

08006c0c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b088      	sub	sp, #32
 8006c10:	af02      	add	r7, sp, #8
 8006c12:	60f8      	str	r0, [r7, #12]
 8006c14:	607a      	str	r2, [r7, #4]
 8006c16:	461a      	mov	r2, r3
 8006c18:	460b      	mov	r3, r1
 8006c1a:	817b      	strh	r3, [r7, #10]
 8006c1c:	4613      	mov	r3, r2
 8006c1e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006c20:	f7fe fa38 	bl	8005094 <HAL_GetTick>
 8006c24:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c2c:	b2db      	uxtb	r3, r3
 8006c2e:	2b20      	cmp	r3, #32
 8006c30:	f040 80e0 	bne.w	8006df4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	9300      	str	r3, [sp, #0]
 8006c38:	2319      	movs	r3, #25
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	4970      	ldr	r1, [pc, #448]	@ (8006e00 <HAL_I2C_Master_Transmit+0x1f4>)
 8006c3e:	68f8      	ldr	r0, [r7, #12]
 8006c40:	f002 ffe0 	bl	8009c04 <I2C_WaitOnFlagUntilTimeout>
 8006c44:	4603      	mov	r3, r0
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d001      	beq.n	8006c4e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8006c4a:	2302      	movs	r3, #2
 8006c4c:	e0d3      	b.n	8006df6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d101      	bne.n	8006c5c <HAL_I2C_Master_Transmit+0x50>
 8006c58:	2302      	movs	r3, #2
 8006c5a:	e0cc      	b.n	8006df6 <HAL_I2C_Master_Transmit+0x1ea>
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	2201      	movs	r2, #1
 8006c60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f003 0301 	and.w	r3, r3, #1
 8006c6e:	2b01      	cmp	r3, #1
 8006c70:	d007      	beq.n	8006c82 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	681a      	ldr	r2, [r3, #0]
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f042 0201 	orr.w	r2, r2, #1
 8006c80:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	681a      	ldr	r2, [r3, #0]
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006c90:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	2221      	movs	r2, #33	@ 0x21
 8006c96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	2210      	movs	r2, #16
 8006c9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	687a      	ldr	r2, [r7, #4]
 8006cac:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	893a      	ldrh	r2, [r7, #8]
 8006cb2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006cb8:	b29a      	uxth	r2, r3
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	4a50      	ldr	r2, [pc, #320]	@ (8006e04 <HAL_I2C_Master_Transmit+0x1f8>)
 8006cc2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006cc4:	8979      	ldrh	r1, [r7, #10]
 8006cc6:	697b      	ldr	r3, [r7, #20]
 8006cc8:	6a3a      	ldr	r2, [r7, #32]
 8006cca:	68f8      	ldr	r0, [r7, #12]
 8006ccc:	f002 fbd6 	bl	800947c <I2C_MasterRequestWrite>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d001      	beq.n	8006cda <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	e08d      	b.n	8006df6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006cda:	2300      	movs	r3, #0
 8006cdc:	613b      	str	r3, [r7, #16]
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	695b      	ldr	r3, [r3, #20]
 8006ce4:	613b      	str	r3, [r7, #16]
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	699b      	ldr	r3, [r3, #24]
 8006cec:	613b      	str	r3, [r7, #16]
 8006cee:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006cf0:	e066      	b.n	8006dc0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006cf2:	697a      	ldr	r2, [r7, #20]
 8006cf4:	6a39      	ldr	r1, [r7, #32]
 8006cf6:	68f8      	ldr	r0, [r7, #12]
 8006cf8:	f003 f89e 	bl	8009e38 <I2C_WaitOnTXEFlagUntilTimeout>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d00d      	beq.n	8006d1e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d06:	2b04      	cmp	r3, #4
 8006d08:	d107      	bne.n	8006d1a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	681a      	ldr	r2, [r3, #0]
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006d18:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	e06b      	b.n	8006df6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d22:	781a      	ldrb	r2, [r3, #0]
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d2e:	1c5a      	adds	r2, r3, #1
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d38:	b29b      	uxth	r3, r3
 8006d3a:	3b01      	subs	r3, #1
 8006d3c:	b29a      	uxth	r2, r3
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d46:	3b01      	subs	r3, #1
 8006d48:	b29a      	uxth	r2, r3
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	695b      	ldr	r3, [r3, #20]
 8006d54:	f003 0304 	and.w	r3, r3, #4
 8006d58:	2b04      	cmp	r3, #4
 8006d5a:	d11b      	bne.n	8006d94 <HAL_I2C_Master_Transmit+0x188>
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d017      	beq.n	8006d94 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d68:	781a      	ldrb	r2, [r3, #0]
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d74:	1c5a      	adds	r2, r3, #1
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d7e:	b29b      	uxth	r3, r3
 8006d80:	3b01      	subs	r3, #1
 8006d82:	b29a      	uxth	r2, r3
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d8c:	3b01      	subs	r3, #1
 8006d8e:	b29a      	uxth	r2, r3
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d94:	697a      	ldr	r2, [r7, #20]
 8006d96:	6a39      	ldr	r1, [r7, #32]
 8006d98:	68f8      	ldr	r0, [r7, #12]
 8006d9a:	f003 f895 	bl	8009ec8 <I2C_WaitOnBTFFlagUntilTimeout>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d00d      	beq.n	8006dc0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006da8:	2b04      	cmp	r3, #4
 8006daa:	d107      	bne.n	8006dbc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	681a      	ldr	r2, [r3, #0]
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006dba:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	e01a      	b.n	8006df6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d194      	bne.n	8006cf2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	681a      	ldr	r2, [r3, #0]
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006dd6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	2220      	movs	r2, #32
 8006ddc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	2200      	movs	r2, #0
 8006de4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	2200      	movs	r2, #0
 8006dec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006df0:	2300      	movs	r3, #0
 8006df2:	e000      	b.n	8006df6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006df4:	2302      	movs	r3, #2
  }
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	3718      	adds	r7, #24
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}
 8006dfe:	bf00      	nop
 8006e00:	00100002 	.word	0x00100002
 8006e04:	ffff0000 	.word	0xffff0000

08006e08 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b088      	sub	sp, #32
 8006e0c:	af02      	add	r7, sp, #8
 8006e0e:	60f8      	str	r0, [r7, #12]
 8006e10:	4608      	mov	r0, r1
 8006e12:	4611      	mov	r1, r2
 8006e14:	461a      	mov	r2, r3
 8006e16:	4603      	mov	r3, r0
 8006e18:	817b      	strh	r3, [r7, #10]
 8006e1a:	460b      	mov	r3, r1
 8006e1c:	813b      	strh	r3, [r7, #8]
 8006e1e:	4613      	mov	r3, r2
 8006e20:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006e22:	f7fe f937 	bl	8005094 <HAL_GetTick>
 8006e26:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e2e:	b2db      	uxtb	r3, r3
 8006e30:	2b20      	cmp	r3, #32
 8006e32:	f040 80d9 	bne.w	8006fe8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	9300      	str	r3, [sp, #0]
 8006e3a:	2319      	movs	r3, #25
 8006e3c:	2201      	movs	r2, #1
 8006e3e:	496d      	ldr	r1, [pc, #436]	@ (8006ff4 <HAL_I2C_Mem_Write+0x1ec>)
 8006e40:	68f8      	ldr	r0, [r7, #12]
 8006e42:	f002 fedf 	bl	8009c04 <I2C_WaitOnFlagUntilTimeout>
 8006e46:	4603      	mov	r3, r0
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d001      	beq.n	8006e50 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006e4c:	2302      	movs	r3, #2
 8006e4e:	e0cc      	b.n	8006fea <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006e56:	2b01      	cmp	r3, #1
 8006e58:	d101      	bne.n	8006e5e <HAL_I2C_Mem_Write+0x56>
 8006e5a:	2302      	movs	r3, #2
 8006e5c:	e0c5      	b.n	8006fea <HAL_I2C_Mem_Write+0x1e2>
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	2201      	movs	r2, #1
 8006e62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f003 0301 	and.w	r3, r3, #1
 8006e70:	2b01      	cmp	r3, #1
 8006e72:	d007      	beq.n	8006e84 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	681a      	ldr	r2, [r3, #0]
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f042 0201 	orr.w	r2, r2, #1
 8006e82:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	681a      	ldr	r2, [r3, #0]
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006e92:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	2221      	movs	r2, #33	@ 0x21
 8006e98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	2240      	movs	r2, #64	@ 0x40
 8006ea0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	6a3a      	ldr	r2, [r7, #32]
 8006eae:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006eb4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006eba:	b29a      	uxth	r2, r3
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	4a4d      	ldr	r2, [pc, #308]	@ (8006ff8 <HAL_I2C_Mem_Write+0x1f0>)
 8006ec4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006ec6:	88f8      	ldrh	r0, [r7, #6]
 8006ec8:	893a      	ldrh	r2, [r7, #8]
 8006eca:	8979      	ldrh	r1, [r7, #10]
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	9301      	str	r3, [sp, #4]
 8006ed0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ed2:	9300      	str	r3, [sp, #0]
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	68f8      	ldr	r0, [r7, #12]
 8006ed8:	f002 fb52 	bl	8009580 <I2C_RequestMemoryWrite>
 8006edc:	4603      	mov	r3, r0
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d052      	beq.n	8006f88 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	e081      	b.n	8006fea <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ee6:	697a      	ldr	r2, [r7, #20]
 8006ee8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006eea:	68f8      	ldr	r0, [r7, #12]
 8006eec:	f002 ffa4 	bl	8009e38 <I2C_WaitOnTXEFlagUntilTimeout>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d00d      	beq.n	8006f12 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006efa:	2b04      	cmp	r3, #4
 8006efc:	d107      	bne.n	8006f0e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	681a      	ldr	r2, [r3, #0]
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006f0c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006f0e:	2301      	movs	r3, #1
 8006f10:	e06b      	b.n	8006fea <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f16:	781a      	ldrb	r2, [r3, #0]
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f22:	1c5a      	adds	r2, r3, #1
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f2c:	3b01      	subs	r3, #1
 8006f2e:	b29a      	uxth	r2, r3
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f38:	b29b      	uxth	r3, r3
 8006f3a:	3b01      	subs	r3, #1
 8006f3c:	b29a      	uxth	r2, r3
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	695b      	ldr	r3, [r3, #20]
 8006f48:	f003 0304 	and.w	r3, r3, #4
 8006f4c:	2b04      	cmp	r3, #4
 8006f4e:	d11b      	bne.n	8006f88 <HAL_I2C_Mem_Write+0x180>
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d017      	beq.n	8006f88 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f5c:	781a      	ldrb	r2, [r3, #0]
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f68:	1c5a      	adds	r2, r3, #1
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f72:	3b01      	subs	r3, #1
 8006f74:	b29a      	uxth	r2, r3
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f7e:	b29b      	uxth	r3, r3
 8006f80:	3b01      	subs	r3, #1
 8006f82:	b29a      	uxth	r2, r3
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d1aa      	bne.n	8006ee6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f90:	697a      	ldr	r2, [r7, #20]
 8006f92:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006f94:	68f8      	ldr	r0, [r7, #12]
 8006f96:	f002 ff97 	bl	8009ec8 <I2C_WaitOnBTFFlagUntilTimeout>
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d00d      	beq.n	8006fbc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fa4:	2b04      	cmp	r3, #4
 8006fa6:	d107      	bne.n	8006fb8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	681a      	ldr	r2, [r3, #0]
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006fb6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006fb8:	2301      	movs	r3, #1
 8006fba:	e016      	b.n	8006fea <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	681a      	ldr	r2, [r3, #0]
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006fca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	2220      	movs	r2, #32
 8006fd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	e000      	b.n	8006fea <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006fe8:	2302      	movs	r3, #2
  }
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	3718      	adds	r7, #24
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}
 8006ff2:	bf00      	nop
 8006ff4:	00100002 	.word	0x00100002
 8006ff8:	ffff0000 	.word	0xffff0000

08006ffc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b08c      	sub	sp, #48	@ 0x30
 8007000:	af02      	add	r7, sp, #8
 8007002:	60f8      	str	r0, [r7, #12]
 8007004:	4608      	mov	r0, r1
 8007006:	4611      	mov	r1, r2
 8007008:	461a      	mov	r2, r3
 800700a:	4603      	mov	r3, r0
 800700c:	817b      	strh	r3, [r7, #10]
 800700e:	460b      	mov	r3, r1
 8007010:	813b      	strh	r3, [r7, #8]
 8007012:	4613      	mov	r3, r2
 8007014:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007016:	f7fe f83d 	bl	8005094 <HAL_GetTick>
 800701a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007022:	b2db      	uxtb	r3, r3
 8007024:	2b20      	cmp	r3, #32
 8007026:	f040 8214 	bne.w	8007452 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800702a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800702c:	9300      	str	r3, [sp, #0]
 800702e:	2319      	movs	r3, #25
 8007030:	2201      	movs	r2, #1
 8007032:	497b      	ldr	r1, [pc, #492]	@ (8007220 <HAL_I2C_Mem_Read+0x224>)
 8007034:	68f8      	ldr	r0, [r7, #12]
 8007036:	f002 fde5 	bl	8009c04 <I2C_WaitOnFlagUntilTimeout>
 800703a:	4603      	mov	r3, r0
 800703c:	2b00      	cmp	r3, #0
 800703e:	d001      	beq.n	8007044 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8007040:	2302      	movs	r3, #2
 8007042:	e207      	b.n	8007454 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800704a:	2b01      	cmp	r3, #1
 800704c:	d101      	bne.n	8007052 <HAL_I2C_Mem_Read+0x56>
 800704e:	2302      	movs	r3, #2
 8007050:	e200      	b.n	8007454 <HAL_I2C_Mem_Read+0x458>
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2201      	movs	r2, #1
 8007056:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f003 0301 	and.w	r3, r3, #1
 8007064:	2b01      	cmp	r3, #1
 8007066:	d007      	beq.n	8007078 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	681a      	ldr	r2, [r3, #0]
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f042 0201 	orr.w	r2, r2, #1
 8007076:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	681a      	ldr	r2, [r3, #0]
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007086:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	2222      	movs	r2, #34	@ 0x22
 800708c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	2240      	movs	r2, #64	@ 0x40
 8007094:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	2200      	movs	r2, #0
 800709c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80070a2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80070a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070ae:	b29a      	uxth	r2, r3
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	4a5b      	ldr	r2, [pc, #364]	@ (8007224 <HAL_I2C_Mem_Read+0x228>)
 80070b8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80070ba:	88f8      	ldrh	r0, [r7, #6]
 80070bc:	893a      	ldrh	r2, [r7, #8]
 80070be:	8979      	ldrh	r1, [r7, #10]
 80070c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070c2:	9301      	str	r3, [sp, #4]
 80070c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070c6:	9300      	str	r3, [sp, #0]
 80070c8:	4603      	mov	r3, r0
 80070ca:	68f8      	ldr	r0, [r7, #12]
 80070cc:	f002 faee 	bl	80096ac <I2C_RequestMemoryRead>
 80070d0:	4603      	mov	r3, r0
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d001      	beq.n	80070da <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80070d6:	2301      	movs	r3, #1
 80070d8:	e1bc      	b.n	8007454 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d113      	bne.n	800710a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80070e2:	2300      	movs	r3, #0
 80070e4:	623b      	str	r3, [r7, #32]
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	695b      	ldr	r3, [r3, #20]
 80070ec:	623b      	str	r3, [r7, #32]
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	699b      	ldr	r3, [r3, #24]
 80070f4:	623b      	str	r3, [r7, #32]
 80070f6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	681a      	ldr	r2, [r3, #0]
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007106:	601a      	str	r2, [r3, #0]
 8007108:	e190      	b.n	800742c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800710e:	2b01      	cmp	r3, #1
 8007110:	d11b      	bne.n	800714a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	681a      	ldr	r2, [r3, #0]
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007120:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007122:	2300      	movs	r3, #0
 8007124:	61fb      	str	r3, [r7, #28]
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	695b      	ldr	r3, [r3, #20]
 800712c:	61fb      	str	r3, [r7, #28]
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	699b      	ldr	r3, [r3, #24]
 8007134:	61fb      	str	r3, [r7, #28]
 8007136:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	681a      	ldr	r2, [r3, #0]
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007146:	601a      	str	r2, [r3, #0]
 8007148:	e170      	b.n	800742c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800714e:	2b02      	cmp	r3, #2
 8007150:	d11b      	bne.n	800718a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	681a      	ldr	r2, [r3, #0]
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007160:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	681a      	ldr	r2, [r3, #0]
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007170:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007172:	2300      	movs	r3, #0
 8007174:	61bb      	str	r3, [r7, #24]
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	695b      	ldr	r3, [r3, #20]
 800717c:	61bb      	str	r3, [r7, #24]
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	699b      	ldr	r3, [r3, #24]
 8007184:	61bb      	str	r3, [r7, #24]
 8007186:	69bb      	ldr	r3, [r7, #24]
 8007188:	e150      	b.n	800742c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800718a:	2300      	movs	r3, #0
 800718c:	617b      	str	r3, [r7, #20]
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	695b      	ldr	r3, [r3, #20]
 8007194:	617b      	str	r3, [r7, #20]
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	699b      	ldr	r3, [r3, #24]
 800719c:	617b      	str	r3, [r7, #20]
 800719e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80071a0:	e144      	b.n	800742c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80071a6:	2b03      	cmp	r3, #3
 80071a8:	f200 80f1 	bhi.w	800738e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80071b0:	2b01      	cmp	r3, #1
 80071b2:	d123      	bne.n	80071fc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80071b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80071b6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80071b8:	68f8      	ldr	r0, [r7, #12]
 80071ba:	f002 feff 	bl	8009fbc <I2C_WaitOnRXNEFlagUntilTimeout>
 80071be:	4603      	mov	r3, r0
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d001      	beq.n	80071c8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80071c4:	2301      	movs	r3, #1
 80071c6:	e145      	b.n	8007454 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	691a      	ldr	r2, [r3, #16]
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071d2:	b2d2      	uxtb	r2, r2
 80071d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071da:	1c5a      	adds	r2, r3, #1
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80071e4:	3b01      	subs	r3, #1
 80071e6:	b29a      	uxth	r2, r3
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80071f0:	b29b      	uxth	r3, r3
 80071f2:	3b01      	subs	r3, #1
 80071f4:	b29a      	uxth	r2, r3
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80071fa:	e117      	b.n	800742c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007200:	2b02      	cmp	r3, #2
 8007202:	d14e      	bne.n	80072a2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007206:	9300      	str	r3, [sp, #0]
 8007208:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800720a:	2200      	movs	r2, #0
 800720c:	4906      	ldr	r1, [pc, #24]	@ (8007228 <HAL_I2C_Mem_Read+0x22c>)
 800720e:	68f8      	ldr	r0, [r7, #12]
 8007210:	f002 fcf8 	bl	8009c04 <I2C_WaitOnFlagUntilTimeout>
 8007214:	4603      	mov	r3, r0
 8007216:	2b00      	cmp	r3, #0
 8007218:	d008      	beq.n	800722c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800721a:	2301      	movs	r3, #1
 800721c:	e11a      	b.n	8007454 <HAL_I2C_Mem_Read+0x458>
 800721e:	bf00      	nop
 8007220:	00100002 	.word	0x00100002
 8007224:	ffff0000 	.word	0xffff0000
 8007228:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	681a      	ldr	r2, [r3, #0]
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800723a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	691a      	ldr	r2, [r3, #16]
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007246:	b2d2      	uxtb	r2, r2
 8007248:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800724e:	1c5a      	adds	r2, r3, #1
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007258:	3b01      	subs	r3, #1
 800725a:	b29a      	uxth	r2, r3
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007264:	b29b      	uxth	r3, r3
 8007266:	3b01      	subs	r3, #1
 8007268:	b29a      	uxth	r2, r3
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	691a      	ldr	r2, [r3, #16]
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007278:	b2d2      	uxtb	r2, r2
 800727a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007280:	1c5a      	adds	r2, r3, #1
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800728a:	3b01      	subs	r3, #1
 800728c:	b29a      	uxth	r2, r3
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007296:	b29b      	uxth	r3, r3
 8007298:	3b01      	subs	r3, #1
 800729a:	b29a      	uxth	r2, r3
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80072a0:	e0c4      	b.n	800742c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80072a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072a4:	9300      	str	r3, [sp, #0]
 80072a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072a8:	2200      	movs	r2, #0
 80072aa:	496c      	ldr	r1, [pc, #432]	@ (800745c <HAL_I2C_Mem_Read+0x460>)
 80072ac:	68f8      	ldr	r0, [r7, #12]
 80072ae:	f002 fca9 	bl	8009c04 <I2C_WaitOnFlagUntilTimeout>
 80072b2:	4603      	mov	r3, r0
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d001      	beq.n	80072bc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80072b8:	2301      	movs	r3, #1
 80072ba:	e0cb      	b.n	8007454 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	681a      	ldr	r2, [r3, #0]
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80072ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	691a      	ldr	r2, [r3, #16]
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072d6:	b2d2      	uxtb	r2, r2
 80072d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072de:	1c5a      	adds	r2, r3, #1
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80072e8:	3b01      	subs	r3, #1
 80072ea:	b29a      	uxth	r2, r3
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80072f4:	b29b      	uxth	r3, r3
 80072f6:	3b01      	subs	r3, #1
 80072f8:	b29a      	uxth	r2, r3
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80072fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007300:	9300      	str	r3, [sp, #0]
 8007302:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007304:	2200      	movs	r2, #0
 8007306:	4955      	ldr	r1, [pc, #340]	@ (800745c <HAL_I2C_Mem_Read+0x460>)
 8007308:	68f8      	ldr	r0, [r7, #12]
 800730a:	f002 fc7b 	bl	8009c04 <I2C_WaitOnFlagUntilTimeout>
 800730e:	4603      	mov	r3, r0
 8007310:	2b00      	cmp	r3, #0
 8007312:	d001      	beq.n	8007318 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8007314:	2301      	movs	r3, #1
 8007316:	e09d      	b.n	8007454 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	681a      	ldr	r2, [r3, #0]
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007326:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	691a      	ldr	r2, [r3, #16]
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007332:	b2d2      	uxtb	r2, r2
 8007334:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800733a:	1c5a      	adds	r2, r3, #1
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007344:	3b01      	subs	r3, #1
 8007346:	b29a      	uxth	r2, r3
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007350:	b29b      	uxth	r3, r3
 8007352:	3b01      	subs	r3, #1
 8007354:	b29a      	uxth	r2, r3
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	691a      	ldr	r2, [r3, #16]
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007364:	b2d2      	uxtb	r2, r2
 8007366:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800736c:	1c5a      	adds	r2, r3, #1
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007376:	3b01      	subs	r3, #1
 8007378:	b29a      	uxth	r2, r3
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007382:	b29b      	uxth	r3, r3
 8007384:	3b01      	subs	r3, #1
 8007386:	b29a      	uxth	r2, r3
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800738c:	e04e      	b.n	800742c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800738e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007390:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007392:	68f8      	ldr	r0, [r7, #12]
 8007394:	f002 fe12 	bl	8009fbc <I2C_WaitOnRXNEFlagUntilTimeout>
 8007398:	4603      	mov	r3, r0
 800739a:	2b00      	cmp	r3, #0
 800739c:	d001      	beq.n	80073a2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800739e:	2301      	movs	r3, #1
 80073a0:	e058      	b.n	8007454 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	691a      	ldr	r2, [r3, #16]
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073ac:	b2d2      	uxtb	r2, r2
 80073ae:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073b4:	1c5a      	adds	r2, r3, #1
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80073be:	3b01      	subs	r3, #1
 80073c0:	b29a      	uxth	r2, r3
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073ca:	b29b      	uxth	r3, r3
 80073cc:	3b01      	subs	r3, #1
 80073ce:	b29a      	uxth	r2, r3
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	695b      	ldr	r3, [r3, #20]
 80073da:	f003 0304 	and.w	r3, r3, #4
 80073de:	2b04      	cmp	r3, #4
 80073e0:	d124      	bne.n	800742c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80073e6:	2b03      	cmp	r3, #3
 80073e8:	d107      	bne.n	80073fa <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	681a      	ldr	r2, [r3, #0]
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80073f8:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	691a      	ldr	r2, [r3, #16]
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007404:	b2d2      	uxtb	r2, r2
 8007406:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800740c:	1c5a      	adds	r2, r3, #1
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007416:	3b01      	subs	r3, #1
 8007418:	b29a      	uxth	r2, r3
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007422:	b29b      	uxth	r3, r3
 8007424:	3b01      	subs	r3, #1
 8007426:	b29a      	uxth	r2, r3
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007430:	2b00      	cmp	r3, #0
 8007432:	f47f aeb6 	bne.w	80071a2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	2220      	movs	r2, #32
 800743a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	2200      	movs	r2, #0
 8007442:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2200      	movs	r2, #0
 800744a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800744e:	2300      	movs	r3, #0
 8007450:	e000      	b.n	8007454 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8007452:	2302      	movs	r3, #2
  }
}
 8007454:	4618      	mov	r0, r3
 8007456:	3728      	adds	r7, #40	@ 0x28
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}
 800745c:	00010004 	.word	0x00010004

08007460 <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b08a      	sub	sp, #40	@ 0x28
 8007464:	af02      	add	r7, sp, #8
 8007466:	60f8      	str	r0, [r7, #12]
 8007468:	4608      	mov	r0, r1
 800746a:	4611      	mov	r1, r2
 800746c:	461a      	mov	r2, r3
 800746e:	4603      	mov	r3, r0
 8007470:	817b      	strh	r3, [r7, #10]
 8007472:	460b      	mov	r3, r1
 8007474:	813b      	strh	r3, [r7, #8]
 8007476:	4613      	mov	r3, r2
 8007478:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800747a:	2300      	movs	r3, #0
 800747c:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800747e:	f7fd fe09 	bl	8005094 <HAL_GetTick>
 8007482:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800748a:	b2db      	uxtb	r3, r3
 800748c:	2b20      	cmp	r3, #32
 800748e:	f040 8136 	bne.w	80076fe <HAL_I2C_Mem_Write_DMA+0x29e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8007492:	4b9d      	ldr	r3, [pc, #628]	@ (8007708 <HAL_I2C_Mem_Write_DMA+0x2a8>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	08db      	lsrs	r3, r3, #3
 8007498:	4a9c      	ldr	r2, [pc, #624]	@ (800770c <HAL_I2C_Mem_Write_DMA+0x2ac>)
 800749a:	fba2 2303 	umull	r2, r3, r2, r3
 800749e:	0a1a      	lsrs	r2, r3, #8
 80074a0:	4613      	mov	r3, r2
 80074a2:	009b      	lsls	r3, r3, #2
 80074a4:	4413      	add	r3, r2
 80074a6:	009a      	lsls	r2, r3, #2
 80074a8:	4413      	add	r3, r2
 80074aa:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80074ac:	697b      	ldr	r3, [r7, #20]
 80074ae:	3b01      	subs	r3, #1
 80074b0:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d112      	bne.n	80074de <HAL_I2C_Mem_Write_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	2200      	movs	r2, #0
 80074bc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	2220      	movs	r2, #32
 80074c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	2200      	movs	r2, #0
 80074ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074d2:	f043 0220 	orr.w	r2, r3, #32
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 80074da:	2302      	movs	r3, #2
 80074dc:	e110      	b.n	8007700 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	699b      	ldr	r3, [r3, #24]
 80074e4:	f003 0302 	and.w	r3, r3, #2
 80074e8:	2b02      	cmp	r3, #2
 80074ea:	d0df      	beq.n	80074ac <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80074f2:	2b01      	cmp	r3, #1
 80074f4:	d101      	bne.n	80074fa <HAL_I2C_Mem_Write_DMA+0x9a>
 80074f6:	2302      	movs	r3, #2
 80074f8:	e102      	b.n	8007700 <HAL_I2C_Mem_Write_DMA+0x2a0>
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2201      	movs	r2, #1
 80074fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f003 0301 	and.w	r3, r3, #1
 800750c:	2b01      	cmp	r3, #1
 800750e:	d007      	beq.n	8007520 <HAL_I2C_Mem_Write_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	681a      	ldr	r2, [r3, #0]
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f042 0201 	orr.w	r2, r2, #1
 800751e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	681a      	ldr	r2, [r3, #0]
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800752e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	2221      	movs	r2, #33	@ 0x21
 8007534:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	2240      	movs	r2, #64	@ 0x40
 800753c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	2200      	movs	r2, #0
 8007544:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800754a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8007550:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007556:	b29a      	uxth	r2, r3
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	4a6c      	ldr	r2, [pc, #432]	@ (8007710 <HAL_I2C_Mem_Write_DMA+0x2b0>)
 8007560:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8007562:	897a      	ldrh	r2, [r7, #10]
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8007568:	893a      	ldrh	r2, [r7, #8]
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 800756e:	88fa      	ldrh	r2, [r7, #6]
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	2200      	movs	r2, #0
 8007578:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800757e:	2b00      	cmp	r3, #0
 8007580:	f000 80a9 	beq.w	80076d6 <HAL_I2C_Mem_Write_DMA+0x276>
    {
      if (hi2c->hdmatx != NULL)
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007588:	2b00      	cmp	r3, #0
 800758a:	d02a      	beq.n	80075e2 <HAL_I2C_Mem_Write_DMA+0x182>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007590:	4a60      	ldr	r2, [pc, #384]	@ (8007714 <HAL_I2C_Mem_Write_DMA+0x2b4>)
 8007592:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007598:	4a5f      	ldr	r2, [pc, #380]	@ (8007718 <HAL_I2C_Mem_Write_DMA+0x2b8>)
 800759a:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075a0:	2200      	movs	r2, #0
 80075a2:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075a8:	2200      	movs	r2, #0
 80075aa:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075b0:	2200      	movs	r2, #0
 80075b2:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075b8:	2200      	movs	r2, #0
 80075ba:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075c4:	4619      	mov	r1, r3
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	3310      	adds	r3, #16
 80075cc:	461a      	mov	r2, r3
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80075d2:	f7fe fc6b 	bl	8005eac <HAL_DMA_Start_IT>
 80075d6:	4603      	mov	r3, r0
 80075d8:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80075da:	7efb      	ldrb	r3, [r7, #27]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d166      	bne.n	80076ae <HAL_I2C_Mem_Write_DMA+0x24e>
 80075e0:	e013      	b.n	800760a <HAL_I2C_Mem_Write_DMA+0x1aa>
        hi2c->State     = HAL_I2C_STATE_READY;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	2220      	movs	r2, #32
 80075e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	2200      	movs	r2, #0
 80075ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075f6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	2200      	movs	r2, #0
 8007602:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8007606:	2301      	movs	r3, #1
 8007608:	e07a      	b.n	8007700 <HAL_I2C_Mem_Write_DMA+0x2a0>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800760a:	88f8      	ldrh	r0, [r7, #6]
 800760c:	893a      	ldrh	r2, [r7, #8]
 800760e:	8979      	ldrh	r1, [r7, #10]
 8007610:	69fb      	ldr	r3, [r7, #28]
 8007612:	9301      	str	r3, [sp, #4]
 8007614:	2323      	movs	r3, #35	@ 0x23
 8007616:	9300      	str	r3, [sp, #0]
 8007618:	4603      	mov	r3, r0
 800761a:	68f8      	ldr	r0, [r7, #12]
 800761c:	f001 ffb0 	bl	8009580 <I2C_RequestMemoryWrite>
 8007620:	4603      	mov	r3, r0
 8007622:	2b00      	cmp	r3, #0
 8007624:	d022      	beq.n	800766c <HAL_I2C_Mem_Write_DMA+0x20c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800762a:	4618      	mov	r0, r3
 800762c:	f7fe fd06 	bl	800603c <HAL_DMA_Abort_IT>
 8007630:	4603      	mov	r3, r0
 8007632:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007638:	2200      	movs	r2, #0
 800763a:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	681a      	ldr	r2, [r3, #0]
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800764a:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	2200      	movs	r2, #0
 8007650:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	2200      	movs	r2, #0
 8007656:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	681a      	ldr	r2, [r3, #0]
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f022 0201 	bic.w	r2, r2, #1
 8007666:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8007668:	2301      	movs	r3, #1
 800766a:	e049      	b.n	8007700 <HAL_I2C_Mem_Write_DMA+0x2a0>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800766c:	2300      	movs	r3, #0
 800766e:	613b      	str	r3, [r7, #16]
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	695b      	ldr	r3, [r3, #20]
 8007676:	613b      	str	r3, [r7, #16]
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	699b      	ldr	r3, [r3, #24]
 800767e:	613b      	str	r3, [r7, #16]
 8007680:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	2200      	movs	r2, #0
 8007686:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	685a      	ldr	r2, [r3, #4]
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007698:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	685a      	ldr	r2, [r3, #4]
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80076a8:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 80076aa:	2300      	movs	r3, #0
 80076ac:	e028      	b.n	8007700 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	2220      	movs	r2, #32
 80076b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	2200      	movs	r2, #0
 80076ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076c2:	f043 0210 	orr.w	r2, r3, #16
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	2200      	movs	r2, #0
 80076ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80076d2:	2301      	movs	r3, #1
 80076d4:	e014      	b.n	8007700 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	2220      	movs	r2, #32
 80076da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	2200      	movs	r2, #0
 80076e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076ea:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	2200      	movs	r2, #0
 80076f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80076fa:	2301      	movs	r3, #1
 80076fc:	e000      	b.n	8007700 <HAL_I2C_Mem_Write_DMA+0x2a0>
    }
  }
  else
  {
    return HAL_BUSY;
 80076fe:	2302      	movs	r3, #2
  }
}
 8007700:	4618      	mov	r0, r3
 8007702:	3720      	adds	r7, #32
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}
 8007708:	20000014 	.word	0x20000014
 800770c:	14f8b589 	.word	0x14f8b589
 8007710:	ffff0000 	.word	0xffff0000
 8007714:	0800987d 	.word	0x0800987d
 8007718:	08009a3b 	.word	0x08009a3b

0800771c <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b08c      	sub	sp, #48	@ 0x30
 8007720:	af02      	add	r7, sp, #8
 8007722:	60f8      	str	r0, [r7, #12]
 8007724:	4608      	mov	r0, r1
 8007726:	4611      	mov	r1, r2
 8007728:	461a      	mov	r2, r3
 800772a:	4603      	mov	r3, r0
 800772c:	817b      	strh	r3, [r7, #10]
 800772e:	460b      	mov	r3, r1
 8007730:	813b      	strh	r3, [r7, #8]
 8007732:	4613      	mov	r3, r2
 8007734:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007736:	f7fd fcad 	bl	8005094 <HAL_GetTick>
 800773a:	6278      	str	r0, [r7, #36]	@ 0x24
  __IO uint32_t count = 0U;
 800773c:	2300      	movs	r3, #0
 800773e:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007746:	b2db      	uxtb	r3, r3
 8007748:	2b20      	cmp	r3, #32
 800774a:	f040 8172 	bne.w	8007a32 <HAL_I2C_Mem_Read_DMA+0x316>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800774e:	4b93      	ldr	r3, [pc, #588]	@ (800799c <HAL_I2C_Mem_Read_DMA+0x280>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	08db      	lsrs	r3, r3, #3
 8007754:	4a92      	ldr	r2, [pc, #584]	@ (80079a0 <HAL_I2C_Mem_Read_DMA+0x284>)
 8007756:	fba2 2303 	umull	r2, r3, r2, r3
 800775a:	0a1a      	lsrs	r2, r3, #8
 800775c:	4613      	mov	r3, r2
 800775e:	009b      	lsls	r3, r3, #2
 8007760:	4413      	add	r3, r2
 8007762:	009a      	lsls	r2, r3, #2
 8007764:	4413      	add	r3, r2
 8007766:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8007768:	69fb      	ldr	r3, [r7, #28]
 800776a:	3b01      	subs	r3, #1
 800776c:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 800776e:	69fb      	ldr	r3, [r7, #28]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d112      	bne.n	800779a <HAL_I2C_Mem_Read_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	2200      	movs	r2, #0
 8007778:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2220      	movs	r2, #32
 800777e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	2200      	movs	r2, #0
 8007786:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800778e:	f043 0220 	orr.w	r2, r3, #32
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8007796:	2302      	movs	r3, #2
 8007798:	e14c      	b.n	8007a34 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	699b      	ldr	r3, [r3, #24]
 80077a0:	f003 0302 	and.w	r3, r3, #2
 80077a4:	2b02      	cmp	r3, #2
 80077a6:	d0df      	beq.n	8007768 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80077ae:	2b01      	cmp	r3, #1
 80077b0:	d101      	bne.n	80077b6 <HAL_I2C_Mem_Read_DMA+0x9a>
 80077b2:	2302      	movs	r3, #2
 80077b4:	e13e      	b.n	8007a34 <HAL_I2C_Mem_Read_DMA+0x318>
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	2201      	movs	r2, #1
 80077ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f003 0301 	and.w	r3, r3, #1
 80077c8:	2b01      	cmp	r3, #1
 80077ca:	d007      	beq.n	80077dc <HAL_I2C_Mem_Read_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	681a      	ldr	r2, [r3, #0]
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f042 0201 	orr.w	r2, r2, #1
 80077da:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	681a      	ldr	r2, [r3, #0]
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80077ea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	2222      	movs	r2, #34	@ 0x22
 80077f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	2240      	movs	r2, #64	@ 0x40
 80077f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	2200      	movs	r2, #0
 8007800:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007806:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800780c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007812:	b29a      	uxth	r2, r3
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	4a62      	ldr	r2, [pc, #392]	@ (80079a4 <HAL_I2C_Mem_Read_DMA+0x288>)
 800781c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 800781e:	897a      	ldrh	r2, [r7, #10]
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8007824:	893a      	ldrh	r2, [r7, #8]
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 800782a:	88fa      	ldrh	r2, [r7, #6]
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	2200      	movs	r2, #0
 8007834:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800783a:	2b00      	cmp	r3, #0
 800783c:	f000 80cc 	beq.w	80079d8 <HAL_I2C_Mem_Read_DMA+0x2bc>
    {
      if (hi2c->hdmarx != NULL)
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007844:	2b00      	cmp	r3, #0
 8007846:	d02d      	beq.n	80078a4 <HAL_I2C_Mem_Read_DMA+0x188>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800784c:	4a56      	ldr	r2, [pc, #344]	@ (80079a8 <HAL_I2C_Mem_Read_DMA+0x28c>)
 800784e:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007854:	4a55      	ldr	r2, [pc, #340]	@ (80079ac <HAL_I2C_Mem_Read_DMA+0x290>)
 8007856:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800785c:	2200      	movs	r2, #0
 800785e:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007864:	2200      	movs	r2, #0
 8007866:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800786c:	2200      	movs	r2, #0
 800786e:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007874:	2200      	movs	r2, #0
 8007876:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	3310      	adds	r3, #16
 8007882:	4619      	mov	r1, r3
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007888:	461a      	mov	r2, r3
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800788e:	f7fe fb0d 	bl	8005eac <HAL_DMA_Start_IT>
 8007892:	4603      	mov	r3, r0
 8007894:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8007898:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800789c:	2b00      	cmp	r3, #0
 800789e:	f040 8087 	bne.w	80079b0 <HAL_I2C_Mem_Read_DMA+0x294>
 80078a2:	e013      	b.n	80078cc <HAL_I2C_Mem_Read_DMA+0x1b0>
        hi2c->State     = HAL_I2C_STATE_READY;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	2220      	movs	r2, #32
 80078a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	2200      	movs	r2, #0
 80078b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078b8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	2200      	movs	r2, #0
 80078c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 80078c8:	2301      	movs	r3, #1
 80078ca:	e0b3      	b.n	8007a34 <HAL_I2C_Mem_Read_DMA+0x318>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80078cc:	88f8      	ldrh	r0, [r7, #6]
 80078ce:	893a      	ldrh	r2, [r7, #8]
 80078d0:	8979      	ldrh	r1, [r7, #10]
 80078d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078d4:	9301      	str	r3, [sp, #4]
 80078d6:	2323      	movs	r3, #35	@ 0x23
 80078d8:	9300      	str	r3, [sp, #0]
 80078da:	4603      	mov	r3, r0
 80078dc:	68f8      	ldr	r0, [r7, #12]
 80078de:	f001 fee5 	bl	80096ac <I2C_RequestMemoryRead>
 80078e2:	4603      	mov	r3, r0
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d023      	beq.n	8007930 <HAL_I2C_Mem_Read_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078ec:	4618      	mov	r0, r3
 80078ee:	f7fe fba5 	bl	800603c <HAL_DMA_Abort_IT>
 80078f2:	4603      	mov	r3, r0
 80078f4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078fc:	2200      	movs	r2, #0
 80078fe:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	681a      	ldr	r2, [r3, #0]
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800790e:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	2200      	movs	r2, #0
 8007914:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	2200      	movs	r2, #0
 800791a:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	681a      	ldr	r2, [r3, #0]
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f022 0201 	bic.w	r2, r2, #1
 800792a:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 800792c:	2301      	movs	r3, #1
 800792e:	e081      	b.n	8007a34 <HAL_I2C_Mem_Read_DMA+0x318>
        }

        if (hi2c->XferSize == 1U)
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007934:	2b01      	cmp	r3, #1
 8007936:	d108      	bne.n	800794a <HAL_I2C_Mem_Read_DMA+0x22e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	681a      	ldr	r2, [r3, #0]
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007946:	601a      	str	r2, [r3, #0]
 8007948:	e007      	b.n	800795a <HAL_I2C_Mem_Read_DMA+0x23e>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	685a      	ldr	r2, [r3, #4]
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007958:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800795a:	2300      	movs	r3, #0
 800795c:	61bb      	str	r3, [r7, #24]
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	695b      	ldr	r3, [r3, #20]
 8007964:	61bb      	str	r3, [r7, #24]
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	699b      	ldr	r3, [r3, #24]
 800796c:	61bb      	str	r3, [r7, #24]
 800796e:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	2200      	movs	r2, #0
 8007974:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	685a      	ldr	r2, [r3, #4]
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007986:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	685a      	ldr	r2, [r3, #4]
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007996:	605a      	str	r2, [r3, #4]
 8007998:	e049      	b.n	8007a2e <HAL_I2C_Mem_Read_DMA+0x312>
 800799a:	bf00      	nop
 800799c:	20000014 	.word	0x20000014
 80079a0:	14f8b589 	.word	0x14f8b589
 80079a4:	ffff0000 	.word	0xffff0000
 80079a8:	0800987d 	.word	0x0800987d
 80079ac:	08009a3b 	.word	0x08009a3b
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	2220      	movs	r2, #32
 80079b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	2200      	movs	r2, #0
 80079bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079c4:	f043 0210 	orr.w	r2, r3, #16
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	2200      	movs	r2, #0
 80079d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80079d4:	2301      	movs	r3, #1
 80079d6:	e02d      	b.n	8007a34 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80079d8:	88f8      	ldrh	r0, [r7, #6]
 80079da:	893a      	ldrh	r2, [r7, #8]
 80079dc:	8979      	ldrh	r1, [r7, #10]
 80079de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079e0:	9301      	str	r3, [sp, #4]
 80079e2:	2323      	movs	r3, #35	@ 0x23
 80079e4:	9300      	str	r3, [sp, #0]
 80079e6:	4603      	mov	r3, r0
 80079e8:	68f8      	ldr	r0, [r7, #12]
 80079ea:	f001 fe5f 	bl	80096ac <I2C_RequestMemoryRead>
 80079ee:	4603      	mov	r3, r0
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d001      	beq.n	80079f8 <HAL_I2C_Mem_Read_DMA+0x2dc>
      {
        return HAL_ERROR;
 80079f4:	2301      	movs	r3, #1
 80079f6:	e01d      	b.n	8007a34 <HAL_I2C_Mem_Read_DMA+0x318>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80079f8:	2300      	movs	r3, #0
 80079fa:	617b      	str	r3, [r7, #20]
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	695b      	ldr	r3, [r3, #20]
 8007a02:	617b      	str	r3, [r7, #20]
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	699b      	ldr	r3, [r3, #24]
 8007a0a:	617b      	str	r3, [r7, #20]
 8007a0c:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	681a      	ldr	r2, [r3, #0]
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007a1c:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	2220      	movs	r2, #32
 8007a22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }

    return HAL_OK;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	e000      	b.n	8007a34 <HAL_I2C_Mem_Read_DMA+0x318>
  }
  else
  {
    return HAL_BUSY;
 8007a32:	2302      	movs	r3, #2
  }
}
 8007a34:	4618      	mov	r0, r3
 8007a36:	3728      	adds	r7, #40	@ 0x28
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	bd80      	pop	{r7, pc}

08007a3c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b08a      	sub	sp, #40	@ 0x28
 8007a40:	af02      	add	r7, sp, #8
 8007a42:	60f8      	str	r0, [r7, #12]
 8007a44:	607a      	str	r2, [r7, #4]
 8007a46:	603b      	str	r3, [r7, #0]
 8007a48:	460b      	mov	r3, r1
 8007a4a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8007a4c:	f7fd fb22 	bl	8005094 <HAL_GetTick>
 8007a50:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8007a52:	2300      	movs	r3, #0
 8007a54:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007a5c:	b2db      	uxtb	r3, r3
 8007a5e:	2b20      	cmp	r3, #32
 8007a60:	f040 8111 	bne.w	8007c86 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007a64:	69fb      	ldr	r3, [r7, #28]
 8007a66:	9300      	str	r3, [sp, #0]
 8007a68:	2319      	movs	r3, #25
 8007a6a:	2201      	movs	r2, #1
 8007a6c:	4988      	ldr	r1, [pc, #544]	@ (8007c90 <HAL_I2C_IsDeviceReady+0x254>)
 8007a6e:	68f8      	ldr	r0, [r7, #12]
 8007a70:	f002 f8c8 	bl	8009c04 <I2C_WaitOnFlagUntilTimeout>
 8007a74:	4603      	mov	r3, r0
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d001      	beq.n	8007a7e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8007a7a:	2302      	movs	r3, #2
 8007a7c:	e104      	b.n	8007c88 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007a84:	2b01      	cmp	r3, #1
 8007a86:	d101      	bne.n	8007a8c <HAL_I2C_IsDeviceReady+0x50>
 8007a88:	2302      	movs	r3, #2
 8007a8a:	e0fd      	b.n	8007c88 <HAL_I2C_IsDeviceReady+0x24c>
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	2201      	movs	r2, #1
 8007a90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f003 0301 	and.w	r3, r3, #1
 8007a9e:	2b01      	cmp	r3, #1
 8007aa0:	d007      	beq.n	8007ab2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	681a      	ldr	r2, [r3, #0]
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f042 0201 	orr.w	r2, r2, #1
 8007ab0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	681a      	ldr	r2, [r3, #0]
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007ac0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	2224      	movs	r2, #36	@ 0x24
 8007ac6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	2200      	movs	r2, #0
 8007ace:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	4a70      	ldr	r2, [pc, #448]	@ (8007c94 <HAL_I2C_IsDeviceReady+0x258>)
 8007ad4:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	681a      	ldr	r2, [r3, #0]
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007ae4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8007ae6:	69fb      	ldr	r3, [r7, #28]
 8007ae8:	9300      	str	r3, [sp, #0]
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	2200      	movs	r2, #0
 8007aee:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007af2:	68f8      	ldr	r0, [r7, #12]
 8007af4:	f002 f886 	bl	8009c04 <I2C_WaitOnFlagUntilTimeout>
 8007af8:	4603      	mov	r3, r0
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d00d      	beq.n	8007b1a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b08:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b0c:	d103      	bne.n	8007b16 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007b14:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8007b16:	2303      	movs	r3, #3
 8007b18:	e0b6      	b.n	8007c88 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007b1a:	897b      	ldrh	r3, [r7, #10]
 8007b1c:	b2db      	uxtb	r3, r3
 8007b1e:	461a      	mov	r2, r3
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007b28:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8007b2a:	f7fd fab3 	bl	8005094 <HAL_GetTick>
 8007b2e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	695b      	ldr	r3, [r3, #20]
 8007b36:	f003 0302 	and.w	r3, r3, #2
 8007b3a:	2b02      	cmp	r3, #2
 8007b3c:	bf0c      	ite	eq
 8007b3e:	2301      	moveq	r3, #1
 8007b40:	2300      	movne	r3, #0
 8007b42:	b2db      	uxtb	r3, r3
 8007b44:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	695b      	ldr	r3, [r3, #20]
 8007b4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007b50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b54:	bf0c      	ite	eq
 8007b56:	2301      	moveq	r3, #1
 8007b58:	2300      	movne	r3, #0
 8007b5a:	b2db      	uxtb	r3, r3
 8007b5c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8007b5e:	e025      	b.n	8007bac <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007b60:	f7fd fa98 	bl	8005094 <HAL_GetTick>
 8007b64:	4602      	mov	r2, r0
 8007b66:	69fb      	ldr	r3, [r7, #28]
 8007b68:	1ad3      	subs	r3, r2, r3
 8007b6a:	683a      	ldr	r2, [r7, #0]
 8007b6c:	429a      	cmp	r2, r3
 8007b6e:	d302      	bcc.n	8007b76 <HAL_I2C_IsDeviceReady+0x13a>
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d103      	bne.n	8007b7e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	22a0      	movs	r2, #160	@ 0xa0
 8007b7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	695b      	ldr	r3, [r3, #20]
 8007b84:	f003 0302 	and.w	r3, r3, #2
 8007b88:	2b02      	cmp	r3, #2
 8007b8a:	bf0c      	ite	eq
 8007b8c:	2301      	moveq	r3, #1
 8007b8e:	2300      	movne	r3, #0
 8007b90:	b2db      	uxtb	r3, r3
 8007b92:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	695b      	ldr	r3, [r3, #20]
 8007b9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007b9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007ba2:	bf0c      	ite	eq
 8007ba4:	2301      	moveq	r3, #1
 8007ba6:	2300      	movne	r3, #0
 8007ba8:	b2db      	uxtb	r3, r3
 8007baa:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007bb2:	b2db      	uxtb	r3, r3
 8007bb4:	2ba0      	cmp	r3, #160	@ 0xa0
 8007bb6:	d005      	beq.n	8007bc4 <HAL_I2C_IsDeviceReady+0x188>
 8007bb8:	7dfb      	ldrb	r3, [r7, #23]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d102      	bne.n	8007bc4 <HAL_I2C_IsDeviceReady+0x188>
 8007bbe:	7dbb      	ldrb	r3, [r7, #22]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d0cd      	beq.n	8007b60 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	2220      	movs	r2, #32
 8007bc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	695b      	ldr	r3, [r3, #20]
 8007bd2:	f003 0302 	and.w	r3, r3, #2
 8007bd6:	2b02      	cmp	r3, #2
 8007bd8:	d129      	bne.n	8007c2e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	681a      	ldr	r2, [r3, #0]
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007be8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007bea:	2300      	movs	r3, #0
 8007bec:	613b      	str	r3, [r7, #16]
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	695b      	ldr	r3, [r3, #20]
 8007bf4:	613b      	str	r3, [r7, #16]
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	699b      	ldr	r3, [r3, #24]
 8007bfc:	613b      	str	r3, [r7, #16]
 8007bfe:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007c00:	69fb      	ldr	r3, [r7, #28]
 8007c02:	9300      	str	r3, [sp, #0]
 8007c04:	2319      	movs	r3, #25
 8007c06:	2201      	movs	r2, #1
 8007c08:	4921      	ldr	r1, [pc, #132]	@ (8007c90 <HAL_I2C_IsDeviceReady+0x254>)
 8007c0a:	68f8      	ldr	r0, [r7, #12]
 8007c0c:	f001 fffa 	bl	8009c04 <I2C_WaitOnFlagUntilTimeout>
 8007c10:	4603      	mov	r3, r0
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d001      	beq.n	8007c1a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8007c16:	2301      	movs	r3, #1
 8007c18:	e036      	b.n	8007c88 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	2220      	movs	r2, #32
 8007c1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	2200      	movs	r2, #0
 8007c26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	e02c      	b.n	8007c88 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	681a      	ldr	r2, [r3, #0]
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007c3c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007c46:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007c48:	69fb      	ldr	r3, [r7, #28]
 8007c4a:	9300      	str	r3, [sp, #0]
 8007c4c:	2319      	movs	r3, #25
 8007c4e:	2201      	movs	r2, #1
 8007c50:	490f      	ldr	r1, [pc, #60]	@ (8007c90 <HAL_I2C_IsDeviceReady+0x254>)
 8007c52:	68f8      	ldr	r0, [r7, #12]
 8007c54:	f001 ffd6 	bl	8009c04 <I2C_WaitOnFlagUntilTimeout>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d001      	beq.n	8007c62 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8007c5e:	2301      	movs	r3, #1
 8007c60:	e012      	b.n	8007c88 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8007c62:	69bb      	ldr	r3, [r7, #24]
 8007c64:	3301      	adds	r3, #1
 8007c66:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8007c68:	69ba      	ldr	r2, [r7, #24]
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	429a      	cmp	r2, r3
 8007c6e:	f4ff af32 	bcc.w	8007ad6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	2220      	movs	r2, #32
 8007c76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8007c82:	2301      	movs	r3, #1
 8007c84:	e000      	b.n	8007c88 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8007c86:	2302      	movs	r3, #2
  }
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3720      	adds	r7, #32
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}
 8007c90:	00100002 	.word	0x00100002
 8007c94:	ffff0000 	.word	0xffff0000

08007c98 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b088      	sub	sp, #32
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	685b      	ldr	r3, [r3, #4]
 8007caa:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cb0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007cb8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007cc0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8007cc2:	7bfb      	ldrb	r3, [r7, #15]
 8007cc4:	2b10      	cmp	r3, #16
 8007cc6:	d003      	beq.n	8007cd0 <HAL_I2C_EV_IRQHandler+0x38>
 8007cc8:	7bfb      	ldrb	r3, [r7, #15]
 8007cca:	2b40      	cmp	r3, #64	@ 0x40
 8007ccc:	f040 80c1 	bne.w	8007e52 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	699b      	ldr	r3, [r3, #24]
 8007cd6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	695b      	ldr	r3, [r3, #20]
 8007cde:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8007ce0:	69fb      	ldr	r3, [r7, #28]
 8007ce2:	f003 0301 	and.w	r3, r3, #1
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d10d      	bne.n	8007d06 <HAL_I2C_EV_IRQHandler+0x6e>
 8007cea:	693b      	ldr	r3, [r7, #16]
 8007cec:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8007cf0:	d003      	beq.n	8007cfa <HAL_I2C_EV_IRQHandler+0x62>
 8007cf2:	693b      	ldr	r3, [r7, #16]
 8007cf4:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8007cf8:	d101      	bne.n	8007cfe <HAL_I2C_EV_IRQHandler+0x66>
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	e000      	b.n	8007d00 <HAL_I2C_EV_IRQHandler+0x68>
 8007cfe:	2300      	movs	r3, #0
 8007d00:	2b01      	cmp	r3, #1
 8007d02:	f000 8132 	beq.w	8007f6a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007d06:	69fb      	ldr	r3, [r7, #28]
 8007d08:	f003 0301 	and.w	r3, r3, #1
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d00c      	beq.n	8007d2a <HAL_I2C_EV_IRQHandler+0x92>
 8007d10:	697b      	ldr	r3, [r7, #20]
 8007d12:	0a5b      	lsrs	r3, r3, #9
 8007d14:	f003 0301 	and.w	r3, r3, #1
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d006      	beq.n	8007d2a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f002 f9d9 	bl	800a0d4 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f000 fd8b 	bl	800883e <I2C_Master_SB>
 8007d28:	e092      	b.n	8007e50 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007d2a:	69fb      	ldr	r3, [r7, #28]
 8007d2c:	08db      	lsrs	r3, r3, #3
 8007d2e:	f003 0301 	and.w	r3, r3, #1
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d009      	beq.n	8007d4a <HAL_I2C_EV_IRQHandler+0xb2>
 8007d36:	697b      	ldr	r3, [r7, #20]
 8007d38:	0a5b      	lsrs	r3, r3, #9
 8007d3a:	f003 0301 	and.w	r3, r3, #1
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d003      	beq.n	8007d4a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f000 fe01 	bl	800894a <I2C_Master_ADD10>
 8007d48:	e082      	b.n	8007e50 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007d4a:	69fb      	ldr	r3, [r7, #28]
 8007d4c:	085b      	lsrs	r3, r3, #1
 8007d4e:	f003 0301 	and.w	r3, r3, #1
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d009      	beq.n	8007d6a <HAL_I2C_EV_IRQHandler+0xd2>
 8007d56:	697b      	ldr	r3, [r7, #20]
 8007d58:	0a5b      	lsrs	r3, r3, #9
 8007d5a:	f003 0301 	and.w	r3, r3, #1
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d003      	beq.n	8007d6a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8007d62:	6878      	ldr	r0, [r7, #4]
 8007d64:	f000 fe1b 	bl	800899e <I2C_Master_ADDR>
 8007d68:	e072      	b.n	8007e50 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8007d6a:	69bb      	ldr	r3, [r7, #24]
 8007d6c:	089b      	lsrs	r3, r3, #2
 8007d6e:	f003 0301 	and.w	r3, r3, #1
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d03b      	beq.n	8007dee <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	685b      	ldr	r3, [r3, #4]
 8007d7c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007d80:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007d84:	f000 80f3 	beq.w	8007f6e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007d88:	69fb      	ldr	r3, [r7, #28]
 8007d8a:	09db      	lsrs	r3, r3, #7
 8007d8c:	f003 0301 	and.w	r3, r3, #1
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d00f      	beq.n	8007db4 <HAL_I2C_EV_IRQHandler+0x11c>
 8007d94:	697b      	ldr	r3, [r7, #20]
 8007d96:	0a9b      	lsrs	r3, r3, #10
 8007d98:	f003 0301 	and.w	r3, r3, #1
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d009      	beq.n	8007db4 <HAL_I2C_EV_IRQHandler+0x11c>
 8007da0:	69fb      	ldr	r3, [r7, #28]
 8007da2:	089b      	lsrs	r3, r3, #2
 8007da4:	f003 0301 	and.w	r3, r3, #1
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d103      	bne.n	8007db4 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	f000 f9df 	bl	8008170 <I2C_MasterTransmit_TXE>
 8007db2:	e04d      	b.n	8007e50 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007db4:	69fb      	ldr	r3, [r7, #28]
 8007db6:	089b      	lsrs	r3, r3, #2
 8007db8:	f003 0301 	and.w	r3, r3, #1
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	f000 80d6 	beq.w	8007f6e <HAL_I2C_EV_IRQHandler+0x2d6>
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	0a5b      	lsrs	r3, r3, #9
 8007dc6:	f003 0301 	and.w	r3, r3, #1
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	f000 80cf 	beq.w	8007f6e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8007dd0:	7bbb      	ldrb	r3, [r7, #14]
 8007dd2:	2b21      	cmp	r3, #33	@ 0x21
 8007dd4:	d103      	bne.n	8007dde <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f000 fa66 	bl	80082a8 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007ddc:	e0c7      	b.n	8007f6e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8007dde:	7bfb      	ldrb	r3, [r7, #15]
 8007de0:	2b40      	cmp	r3, #64	@ 0x40
 8007de2:	f040 80c4 	bne.w	8007f6e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f000 fad4 	bl	8008394 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007dec:	e0bf      	b.n	8007f6e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	685b      	ldr	r3, [r3, #4]
 8007df4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007df8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007dfc:	f000 80b7 	beq.w	8007f6e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007e00:	69fb      	ldr	r3, [r7, #28]
 8007e02:	099b      	lsrs	r3, r3, #6
 8007e04:	f003 0301 	and.w	r3, r3, #1
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d00f      	beq.n	8007e2c <HAL_I2C_EV_IRQHandler+0x194>
 8007e0c:	697b      	ldr	r3, [r7, #20]
 8007e0e:	0a9b      	lsrs	r3, r3, #10
 8007e10:	f003 0301 	and.w	r3, r3, #1
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d009      	beq.n	8007e2c <HAL_I2C_EV_IRQHandler+0x194>
 8007e18:	69fb      	ldr	r3, [r7, #28]
 8007e1a:	089b      	lsrs	r3, r3, #2
 8007e1c:	f003 0301 	and.w	r3, r3, #1
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d103      	bne.n	8007e2c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f000 fb4d 	bl	80084c4 <I2C_MasterReceive_RXNE>
 8007e2a:	e011      	b.n	8007e50 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007e2c:	69fb      	ldr	r3, [r7, #28]
 8007e2e:	089b      	lsrs	r3, r3, #2
 8007e30:	f003 0301 	and.w	r3, r3, #1
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	f000 809a 	beq.w	8007f6e <HAL_I2C_EV_IRQHandler+0x2d6>
 8007e3a:	697b      	ldr	r3, [r7, #20]
 8007e3c:	0a5b      	lsrs	r3, r3, #9
 8007e3e:	f003 0301 	and.w	r3, r3, #1
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	f000 8093 	beq.w	8007f6e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f000 fc03 	bl	8008654 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007e4e:	e08e      	b.n	8007f6e <HAL_I2C_EV_IRQHandler+0x2d6>
 8007e50:	e08d      	b.n	8007f6e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d004      	beq.n	8007e64 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	695b      	ldr	r3, [r3, #20]
 8007e60:	61fb      	str	r3, [r7, #28]
 8007e62:	e007      	b.n	8007e74 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	699b      	ldr	r3, [r3, #24]
 8007e6a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	695b      	ldr	r3, [r3, #20]
 8007e72:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007e74:	69fb      	ldr	r3, [r7, #28]
 8007e76:	085b      	lsrs	r3, r3, #1
 8007e78:	f003 0301 	and.w	r3, r3, #1
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d012      	beq.n	8007ea6 <HAL_I2C_EV_IRQHandler+0x20e>
 8007e80:	697b      	ldr	r3, [r7, #20]
 8007e82:	0a5b      	lsrs	r3, r3, #9
 8007e84:	f003 0301 	and.w	r3, r3, #1
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d00c      	beq.n	8007ea6 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d003      	beq.n	8007e9c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	699b      	ldr	r3, [r3, #24]
 8007e9a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8007e9c:	69b9      	ldr	r1, [r7, #24]
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f000 ffcc 	bl	8008e3c <I2C_Slave_ADDR>
 8007ea4:	e066      	b.n	8007f74 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007ea6:	69fb      	ldr	r3, [r7, #28]
 8007ea8:	091b      	lsrs	r3, r3, #4
 8007eaa:	f003 0301 	and.w	r3, r3, #1
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d009      	beq.n	8007ec6 <HAL_I2C_EV_IRQHandler+0x22e>
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	0a5b      	lsrs	r3, r3, #9
 8007eb6:	f003 0301 	and.w	r3, r3, #1
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d003      	beq.n	8007ec6 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	f001 f806 	bl	8008ed0 <I2C_Slave_STOPF>
 8007ec4:	e056      	b.n	8007f74 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007ec6:	7bbb      	ldrb	r3, [r7, #14]
 8007ec8:	2b21      	cmp	r3, #33	@ 0x21
 8007eca:	d002      	beq.n	8007ed2 <HAL_I2C_EV_IRQHandler+0x23a>
 8007ecc:	7bbb      	ldrb	r3, [r7, #14]
 8007ece:	2b29      	cmp	r3, #41	@ 0x29
 8007ed0:	d125      	bne.n	8007f1e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007ed2:	69fb      	ldr	r3, [r7, #28]
 8007ed4:	09db      	lsrs	r3, r3, #7
 8007ed6:	f003 0301 	and.w	r3, r3, #1
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d00f      	beq.n	8007efe <HAL_I2C_EV_IRQHandler+0x266>
 8007ede:	697b      	ldr	r3, [r7, #20]
 8007ee0:	0a9b      	lsrs	r3, r3, #10
 8007ee2:	f003 0301 	and.w	r3, r3, #1
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d009      	beq.n	8007efe <HAL_I2C_EV_IRQHandler+0x266>
 8007eea:	69fb      	ldr	r3, [r7, #28]
 8007eec:	089b      	lsrs	r3, r3, #2
 8007eee:	f003 0301 	and.w	r3, r3, #1
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d103      	bne.n	8007efe <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f000 fee2 	bl	8008cc0 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007efc:	e039      	b.n	8007f72 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007efe:	69fb      	ldr	r3, [r7, #28]
 8007f00:	089b      	lsrs	r3, r3, #2
 8007f02:	f003 0301 	and.w	r3, r3, #1
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d033      	beq.n	8007f72 <HAL_I2C_EV_IRQHandler+0x2da>
 8007f0a:	697b      	ldr	r3, [r7, #20]
 8007f0c:	0a5b      	lsrs	r3, r3, #9
 8007f0e:	f003 0301 	and.w	r3, r3, #1
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d02d      	beq.n	8007f72 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f000 ff0f 	bl	8008d3a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007f1c:	e029      	b.n	8007f72 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007f1e:	69fb      	ldr	r3, [r7, #28]
 8007f20:	099b      	lsrs	r3, r3, #6
 8007f22:	f003 0301 	and.w	r3, r3, #1
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d00f      	beq.n	8007f4a <HAL_I2C_EV_IRQHandler+0x2b2>
 8007f2a:	697b      	ldr	r3, [r7, #20]
 8007f2c:	0a9b      	lsrs	r3, r3, #10
 8007f2e:	f003 0301 	and.w	r3, r3, #1
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d009      	beq.n	8007f4a <HAL_I2C_EV_IRQHandler+0x2b2>
 8007f36:	69fb      	ldr	r3, [r7, #28]
 8007f38:	089b      	lsrs	r3, r3, #2
 8007f3a:	f003 0301 	and.w	r3, r3, #1
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d103      	bne.n	8007f4a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f000 ff1a 	bl	8008d7c <I2C_SlaveReceive_RXNE>
 8007f48:	e014      	b.n	8007f74 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007f4a:	69fb      	ldr	r3, [r7, #28]
 8007f4c:	089b      	lsrs	r3, r3, #2
 8007f4e:	f003 0301 	and.w	r3, r3, #1
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d00e      	beq.n	8007f74 <HAL_I2C_EV_IRQHandler+0x2dc>
 8007f56:	697b      	ldr	r3, [r7, #20]
 8007f58:	0a5b      	lsrs	r3, r3, #9
 8007f5a:	f003 0301 	and.w	r3, r3, #1
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d008      	beq.n	8007f74 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f000 ff48 	bl	8008df8 <I2C_SlaveReceive_BTF>
 8007f68:	e004      	b.n	8007f74 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8007f6a:	bf00      	nop
 8007f6c:	e002      	b.n	8007f74 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007f6e:	bf00      	nop
 8007f70:	e000      	b.n	8007f74 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007f72:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8007f74:	3720      	adds	r7, #32
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}

08007f7a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007f7a:	b580      	push	{r7, lr}
 8007f7c:	b08a      	sub	sp, #40	@ 0x28
 8007f7e:	af00      	add	r7, sp, #0
 8007f80:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	695b      	ldr	r3, [r3, #20]
 8007f88:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	685b      	ldr	r3, [r3, #4]
 8007f90:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8007f92:	2300      	movs	r3, #0
 8007f94:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007f9c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007f9e:	6a3b      	ldr	r3, [r7, #32]
 8007fa0:	0a1b      	lsrs	r3, r3, #8
 8007fa2:	f003 0301 	and.w	r3, r3, #1
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d00e      	beq.n	8007fc8 <HAL_I2C_ER_IRQHandler+0x4e>
 8007faa:	69fb      	ldr	r3, [r7, #28]
 8007fac:	0a1b      	lsrs	r3, r3, #8
 8007fae:	f003 0301 	and.w	r3, r3, #1
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d008      	beq.n	8007fc8 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8007fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fb8:	f043 0301 	orr.w	r3, r3, #1
 8007fbc:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007fc6:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007fc8:	6a3b      	ldr	r3, [r7, #32]
 8007fca:	0a5b      	lsrs	r3, r3, #9
 8007fcc:	f003 0301 	and.w	r3, r3, #1
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d00e      	beq.n	8007ff2 <HAL_I2C_ER_IRQHandler+0x78>
 8007fd4:	69fb      	ldr	r3, [r7, #28]
 8007fd6:	0a1b      	lsrs	r3, r3, #8
 8007fd8:	f003 0301 	and.w	r3, r3, #1
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d008      	beq.n	8007ff2 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8007fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fe2:	f043 0302 	orr.w	r3, r3, #2
 8007fe6:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8007ff0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007ff2:	6a3b      	ldr	r3, [r7, #32]
 8007ff4:	0a9b      	lsrs	r3, r3, #10
 8007ff6:	f003 0301 	and.w	r3, r3, #1
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d03f      	beq.n	800807e <HAL_I2C_ER_IRQHandler+0x104>
 8007ffe:	69fb      	ldr	r3, [r7, #28]
 8008000:	0a1b      	lsrs	r3, r3, #8
 8008002:	f003 0301 	and.w	r3, r3, #1
 8008006:	2b00      	cmp	r3, #0
 8008008:	d039      	beq.n	800807e <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800800a:	7efb      	ldrb	r3, [r7, #27]
 800800c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008012:	b29b      	uxth	r3, r3
 8008014:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800801c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008022:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8008024:	7ebb      	ldrb	r3, [r7, #26]
 8008026:	2b20      	cmp	r3, #32
 8008028:	d112      	bne.n	8008050 <HAL_I2C_ER_IRQHandler+0xd6>
 800802a:	697b      	ldr	r3, [r7, #20]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d10f      	bne.n	8008050 <HAL_I2C_ER_IRQHandler+0xd6>
 8008030:	7cfb      	ldrb	r3, [r7, #19]
 8008032:	2b21      	cmp	r3, #33	@ 0x21
 8008034:	d008      	beq.n	8008048 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8008036:	7cfb      	ldrb	r3, [r7, #19]
 8008038:	2b29      	cmp	r3, #41	@ 0x29
 800803a:	d005      	beq.n	8008048 <HAL_I2C_ER_IRQHandler+0xce>
 800803c:	7cfb      	ldrb	r3, [r7, #19]
 800803e:	2b28      	cmp	r3, #40	@ 0x28
 8008040:	d106      	bne.n	8008050 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	2b21      	cmp	r3, #33	@ 0x21
 8008046:	d103      	bne.n	8008050 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f001 f871 	bl	8009130 <I2C_Slave_AF>
 800804e:	e016      	b.n	800807e <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008058:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800805a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800805c:	f043 0304 	orr.w	r3, r3, #4
 8008060:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8008062:	7efb      	ldrb	r3, [r7, #27]
 8008064:	2b10      	cmp	r3, #16
 8008066:	d002      	beq.n	800806e <HAL_I2C_ER_IRQHandler+0xf4>
 8008068:	7efb      	ldrb	r3, [r7, #27]
 800806a:	2b40      	cmp	r3, #64	@ 0x40
 800806c:	d107      	bne.n	800807e <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	681a      	ldr	r2, [r3, #0]
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800807c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800807e:	6a3b      	ldr	r3, [r7, #32]
 8008080:	0adb      	lsrs	r3, r3, #11
 8008082:	f003 0301 	and.w	r3, r3, #1
 8008086:	2b00      	cmp	r3, #0
 8008088:	d00e      	beq.n	80080a8 <HAL_I2C_ER_IRQHandler+0x12e>
 800808a:	69fb      	ldr	r3, [r7, #28]
 800808c:	0a1b      	lsrs	r3, r3, #8
 800808e:	f003 0301 	and.w	r3, r3, #1
 8008092:	2b00      	cmp	r3, #0
 8008094:	d008      	beq.n	80080a8 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8008096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008098:	f043 0308 	orr.w	r3, r3, #8
 800809c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 80080a6:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80080a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d008      	beq.n	80080c0 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80080b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080b4:	431a      	orrs	r2, r3
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f001 f8ac 	bl	8009218 <I2C_ITError>
  }
}
 80080c0:	bf00      	nop
 80080c2:	3728      	adds	r7, #40	@ 0x28
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}

080080c8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80080c8:	b480      	push	{r7}
 80080ca:	b083      	sub	sp, #12
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80080d0:	bf00      	nop
 80080d2:	370c      	adds	r7, #12
 80080d4:	46bd      	mov	sp, r7
 80080d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080da:	4770      	bx	lr

080080dc <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80080dc:	b480      	push	{r7}
 80080de:	b083      	sub	sp, #12
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80080e4:	bf00      	nop
 80080e6:	370c      	adds	r7, #12
 80080e8:	46bd      	mov	sp, r7
 80080ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ee:	4770      	bx	lr

080080f0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80080f0:	b480      	push	{r7}
 80080f2:	b083      	sub	sp, #12
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80080f8:	bf00      	nop
 80080fa:	370c      	adds	r7, #12
 80080fc:	46bd      	mov	sp, r7
 80080fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008102:	4770      	bx	lr

08008104 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008104:	b480      	push	{r7}
 8008106:	b083      	sub	sp, #12
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800810c:	bf00      	nop
 800810e:	370c      	adds	r7, #12
 8008110:	46bd      	mov	sp, r7
 8008112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008116:	4770      	bx	lr

08008118 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8008118:	b480      	push	{r7}
 800811a:	b083      	sub	sp, #12
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
 8008120:	460b      	mov	r3, r1
 8008122:	70fb      	strb	r3, [r7, #3]
 8008124:	4613      	mov	r3, r2
 8008126:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8008128:	bf00      	nop
 800812a:	370c      	adds	r7, #12
 800812c:	46bd      	mov	sp, r7
 800812e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008132:	4770      	bx	lr

08008134 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008134:	b480      	push	{r7}
 8008136:	b083      	sub	sp, #12
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800813c:	bf00      	nop
 800813e:	370c      	adds	r7, #12
 8008140:	46bd      	mov	sp, r7
 8008142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008146:	4770      	bx	lr

08008148 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8008148:	b480      	push	{r7}
 800814a:	b083      	sub	sp, #12
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8008150:	bf00      	nop
 8008152:	370c      	adds	r7, #12
 8008154:	46bd      	mov	sp, r7
 8008156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815a:	4770      	bx	lr

0800815c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800815c:	b480      	push	{r7}
 800815e:	b083      	sub	sp, #12
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8008164:	bf00      	nop
 8008166:	370c      	adds	r7, #12
 8008168:	46bd      	mov	sp, r7
 800816a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816e:	4770      	bx	lr

08008170 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b084      	sub	sp, #16
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800817e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008186:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800818c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008192:	2b00      	cmp	r3, #0
 8008194:	d150      	bne.n	8008238 <I2C_MasterTransmit_TXE+0xc8>
 8008196:	7bfb      	ldrb	r3, [r7, #15]
 8008198:	2b21      	cmp	r3, #33	@ 0x21
 800819a:	d14d      	bne.n	8008238 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	2b08      	cmp	r3, #8
 80081a0:	d01d      	beq.n	80081de <I2C_MasterTransmit_TXE+0x6e>
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	2b20      	cmp	r3, #32
 80081a6:	d01a      	beq.n	80081de <I2C_MasterTransmit_TXE+0x6e>
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80081ae:	d016      	beq.n	80081de <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	685a      	ldr	r2, [r3, #4]
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80081be:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2211      	movs	r2, #17
 80081c4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2200      	movs	r2, #0
 80081ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2220      	movs	r2, #32
 80081d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f7ff ff76 	bl	80080c8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80081dc:	e060      	b.n	80082a0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	685a      	ldr	r2, [r3, #4]
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80081ec:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	681a      	ldr	r2, [r3, #0]
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80081fc:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2200      	movs	r2, #0
 8008202:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2220      	movs	r2, #32
 8008208:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008212:	b2db      	uxtb	r3, r3
 8008214:	2b40      	cmp	r3, #64	@ 0x40
 8008216:	d107      	bne.n	8008228 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2200      	movs	r2, #0
 800821c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8008220:	6878      	ldr	r0, [r7, #4]
 8008222:	f7fc f923 	bl	800446c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008226:	e03b      	b.n	80082a0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2200      	movs	r2, #0
 800822c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8008230:	6878      	ldr	r0, [r7, #4]
 8008232:	f7ff ff49 	bl	80080c8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008236:	e033      	b.n	80082a0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8008238:	7bfb      	ldrb	r3, [r7, #15]
 800823a:	2b21      	cmp	r3, #33	@ 0x21
 800823c:	d005      	beq.n	800824a <I2C_MasterTransmit_TXE+0xda>
 800823e:	7bbb      	ldrb	r3, [r7, #14]
 8008240:	2b40      	cmp	r3, #64	@ 0x40
 8008242:	d12d      	bne.n	80082a0 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8008244:	7bfb      	ldrb	r3, [r7, #15]
 8008246:	2b22      	cmp	r3, #34	@ 0x22
 8008248:	d12a      	bne.n	80082a0 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800824e:	b29b      	uxth	r3, r3
 8008250:	2b00      	cmp	r3, #0
 8008252:	d108      	bne.n	8008266 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	685a      	ldr	r2, [r3, #4]
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008262:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8008264:	e01c      	b.n	80082a0 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800826c:	b2db      	uxtb	r3, r3
 800826e:	2b40      	cmp	r3, #64	@ 0x40
 8008270:	d103      	bne.n	800827a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f000 f88e 	bl	8008394 <I2C_MemoryTransmit_TXE_BTF>
}
 8008278:	e012      	b.n	80082a0 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800827e:	781a      	ldrb	r2, [r3, #0]
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800828a:	1c5a      	adds	r2, r3, #1
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008294:	b29b      	uxth	r3, r3
 8008296:	3b01      	subs	r3, #1
 8008298:	b29a      	uxth	r2, r3
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800829e:	e7ff      	b.n	80082a0 <I2C_MasterTransmit_TXE+0x130>
 80082a0:	bf00      	nop
 80082a2:	3710      	adds	r7, #16
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}

080082a8 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b084      	sub	sp, #16
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082b4:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80082bc:	b2db      	uxtb	r3, r3
 80082be:	2b21      	cmp	r3, #33	@ 0x21
 80082c0:	d164      	bne.n	800838c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80082c6:	b29b      	uxth	r3, r3
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d012      	beq.n	80082f2 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082d0:	781a      	ldrb	r2, [r3, #0]
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082dc:	1c5a      	adds	r2, r3, #1
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80082e6:	b29b      	uxth	r3, r3
 80082e8:	3b01      	subs	r3, #1
 80082ea:	b29a      	uxth	r2, r3
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80082f0:	e04c      	b.n	800838c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	2b08      	cmp	r3, #8
 80082f6:	d01d      	beq.n	8008334 <I2C_MasterTransmit_BTF+0x8c>
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	2b20      	cmp	r3, #32
 80082fc:	d01a      	beq.n	8008334 <I2C_MasterTransmit_BTF+0x8c>
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008304:	d016      	beq.n	8008334 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	685a      	ldr	r2, [r3, #4]
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8008314:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2211      	movs	r2, #17
 800831a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2200      	movs	r2, #0
 8008320:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2220      	movs	r2, #32
 8008328:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	f7ff fecb 	bl	80080c8 <HAL_I2C_MasterTxCpltCallback>
}
 8008332:	e02b      	b.n	800838c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	685a      	ldr	r2, [r3, #4]
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8008342:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	681a      	ldr	r2, [r3, #0]
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008352:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2200      	movs	r2, #0
 8008358:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2220      	movs	r2, #32
 800835e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008368:	b2db      	uxtb	r3, r3
 800836a:	2b40      	cmp	r3, #64	@ 0x40
 800836c:	d107      	bne.n	800837e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2200      	movs	r2, #0
 8008372:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	f7fc f878 	bl	800446c <HAL_I2C_MemTxCpltCallback>
}
 800837c:	e006      	b.n	800838c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2200      	movs	r2, #0
 8008382:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	f7ff fe9e 	bl	80080c8 <HAL_I2C_MasterTxCpltCallback>
}
 800838c:	bf00      	nop
 800838e:	3710      	adds	r7, #16
 8008390:	46bd      	mov	sp, r7
 8008392:	bd80      	pop	{r7, pc}

08008394 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b084      	sub	sp, #16
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80083a2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d11d      	bne.n	80083e8 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80083b0:	2b01      	cmp	r3, #1
 80083b2:	d10b      	bne.n	80083cc <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80083b8:	b2da      	uxtb	r2, r3
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80083c4:	1c9a      	adds	r2, r3, #2
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 80083ca:	e077      	b.n	80084bc <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80083d0:	b29b      	uxth	r3, r3
 80083d2:	121b      	asrs	r3, r3, #8
 80083d4:	b2da      	uxtb	r2, r3
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80083e0:	1c5a      	adds	r2, r3, #1
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80083e6:	e069      	b.n	80084bc <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80083ec:	2b01      	cmp	r3, #1
 80083ee:	d10b      	bne.n	8008408 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80083f4:	b2da      	uxtb	r2, r3
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008400:	1c5a      	adds	r2, r3, #1
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8008406:	e059      	b.n	80084bc <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800840c:	2b02      	cmp	r3, #2
 800840e:	d152      	bne.n	80084b6 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8008410:	7bfb      	ldrb	r3, [r7, #15]
 8008412:	2b22      	cmp	r3, #34	@ 0x22
 8008414:	d10d      	bne.n	8008432 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	681a      	ldr	r2, [r3, #0]
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008424:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800842a:	1c5a      	adds	r2, r3, #1
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8008430:	e044      	b.n	80084bc <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008436:	b29b      	uxth	r3, r3
 8008438:	2b00      	cmp	r3, #0
 800843a:	d015      	beq.n	8008468 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800843c:	7bfb      	ldrb	r3, [r7, #15]
 800843e:	2b21      	cmp	r3, #33	@ 0x21
 8008440:	d112      	bne.n	8008468 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008446:	781a      	ldrb	r2, [r3, #0]
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008452:	1c5a      	adds	r2, r3, #1
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800845c:	b29b      	uxth	r3, r3
 800845e:	3b01      	subs	r3, #1
 8008460:	b29a      	uxth	r2, r3
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8008466:	e029      	b.n	80084bc <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800846c:	b29b      	uxth	r3, r3
 800846e:	2b00      	cmp	r3, #0
 8008470:	d124      	bne.n	80084bc <I2C_MemoryTransmit_TXE_BTF+0x128>
 8008472:	7bfb      	ldrb	r3, [r7, #15]
 8008474:	2b21      	cmp	r3, #33	@ 0x21
 8008476:	d121      	bne.n	80084bc <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	685a      	ldr	r2, [r3, #4]
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8008486:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	681a      	ldr	r2, [r3, #0]
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008496:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2200      	movs	r2, #0
 800849c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2220      	movs	r2, #32
 80084a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2200      	movs	r2, #0
 80084aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f7fb ffdc 	bl	800446c <HAL_I2C_MemTxCpltCallback>
}
 80084b4:	e002      	b.n	80084bc <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f7fe fb92 	bl	8006be0 <I2C_Flush_DR>
}
 80084bc:	bf00      	nop
 80084be:	3710      	adds	r7, #16
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd80      	pop	{r7, pc}

080084c4 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b084      	sub	sp, #16
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80084d2:	b2db      	uxtb	r3, r3
 80084d4:	2b22      	cmp	r3, #34	@ 0x22
 80084d6:	f040 80b9 	bne.w	800864c <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084de:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80084e4:	b29b      	uxth	r3, r3
 80084e6:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	2b03      	cmp	r3, #3
 80084ec:	d921      	bls.n	8008532 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	691a      	ldr	r2, [r3, #16]
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084f8:	b2d2      	uxtb	r2, r2
 80084fa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008500:	1c5a      	adds	r2, r3, #1
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800850a:	b29b      	uxth	r3, r3
 800850c:	3b01      	subs	r3, #1
 800850e:	b29a      	uxth	r2, r3
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008518:	b29b      	uxth	r3, r3
 800851a:	2b03      	cmp	r3, #3
 800851c:	f040 8096 	bne.w	800864c <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	685a      	ldr	r2, [r3, #4]
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800852e:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8008530:	e08c      	b.n	800864c <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008536:	2b02      	cmp	r3, #2
 8008538:	d07f      	beq.n	800863a <I2C_MasterReceive_RXNE+0x176>
 800853a:	68bb      	ldr	r3, [r7, #8]
 800853c:	2b01      	cmp	r3, #1
 800853e:	d002      	beq.n	8008546 <I2C_MasterReceive_RXNE+0x82>
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d179      	bne.n	800863a <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8008546:	6878      	ldr	r0, [r7, #4]
 8008548:	f001 fd06 	bl	8009f58 <I2C_WaitOnSTOPRequestThroughIT>
 800854c:	4603      	mov	r3, r0
 800854e:	2b00      	cmp	r3, #0
 8008550:	d14c      	bne.n	80085ec <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	681a      	ldr	r2, [r3, #0]
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008560:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	685a      	ldr	r2, [r3, #4]
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8008570:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	691a      	ldr	r2, [r3, #16]
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800857c:	b2d2      	uxtb	r2, r2
 800857e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008584:	1c5a      	adds	r2, r3, #1
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800858e:	b29b      	uxth	r3, r3
 8008590:	3b01      	subs	r3, #1
 8008592:	b29a      	uxth	r2, r3
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2220      	movs	r2, #32
 800859c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80085a6:	b2db      	uxtb	r3, r3
 80085a8:	2b40      	cmp	r3, #64	@ 0x40
 80085aa:	d10a      	bne.n	80085c2 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2200      	movs	r2, #0
 80085b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2200      	movs	r2, #0
 80085b8:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	f7fb ff6c 	bl	8004498 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80085c0:	e044      	b.n	800864c <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2200      	movs	r2, #0
 80085c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	2b08      	cmp	r3, #8
 80085ce:	d002      	beq.n	80085d6 <I2C_MasterReceive_RXNE+0x112>
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	2b20      	cmp	r3, #32
 80085d4:	d103      	bne.n	80085de <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2200      	movs	r2, #0
 80085da:	631a      	str	r2, [r3, #48]	@ 0x30
 80085dc:	e002      	b.n	80085e4 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2212      	movs	r2, #18
 80085e2:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	f7ff fd79 	bl	80080dc <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80085ea:	e02f      	b.n	800864c <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	685a      	ldr	r2, [r3, #4]
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80085fa:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	691a      	ldr	r2, [r3, #16]
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008606:	b2d2      	uxtb	r2, r2
 8008608:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800860e:	1c5a      	adds	r2, r3, #1
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008618:	b29b      	uxth	r3, r3
 800861a:	3b01      	subs	r3, #1
 800861c:	b29a      	uxth	r2, r3
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2220      	movs	r2, #32
 8008626:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2200      	movs	r2, #0
 800862e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8008632:	6878      	ldr	r0, [r7, #4]
 8008634:	f7ff fd88 	bl	8008148 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8008638:	e008      	b.n	800864c <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	685a      	ldr	r2, [r3, #4]
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008648:	605a      	str	r2, [r3, #4]
}
 800864a:	e7ff      	b.n	800864c <I2C_MasterReceive_RXNE+0x188>
 800864c:	bf00      	nop
 800864e:	3710      	adds	r7, #16
 8008650:	46bd      	mov	sp, r7
 8008652:	bd80      	pop	{r7, pc}

08008654 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b084      	sub	sp, #16
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008660:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008666:	b29b      	uxth	r3, r3
 8008668:	2b04      	cmp	r3, #4
 800866a:	d11b      	bne.n	80086a4 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	685a      	ldr	r2, [r3, #4]
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800867a:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	691a      	ldr	r2, [r3, #16]
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008686:	b2d2      	uxtb	r2, r2
 8008688:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800868e:	1c5a      	adds	r2, r3, #1
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008698:	b29b      	uxth	r3, r3
 800869a:	3b01      	subs	r3, #1
 800869c:	b29a      	uxth	r2, r3
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80086a2:	e0c8      	b.n	8008836 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80086a8:	b29b      	uxth	r3, r3
 80086aa:	2b03      	cmp	r3, #3
 80086ac:	d129      	bne.n	8008702 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	685a      	ldr	r2, [r3, #4]
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80086bc:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	2b04      	cmp	r3, #4
 80086c2:	d00a      	beq.n	80086da <I2C_MasterReceive_BTF+0x86>
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	2b02      	cmp	r3, #2
 80086c8:	d007      	beq.n	80086da <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	681a      	ldr	r2, [r3, #0]
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80086d8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	691a      	ldr	r2, [r3, #16]
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086e4:	b2d2      	uxtb	r2, r2
 80086e6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086ec:	1c5a      	adds	r2, r3, #1
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80086f6:	b29b      	uxth	r3, r3
 80086f8:	3b01      	subs	r3, #1
 80086fa:	b29a      	uxth	r2, r3
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8008700:	e099      	b.n	8008836 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008706:	b29b      	uxth	r3, r3
 8008708:	2b02      	cmp	r3, #2
 800870a:	f040 8081 	bne.w	8008810 <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	2b01      	cmp	r3, #1
 8008712:	d002      	beq.n	800871a <I2C_MasterReceive_BTF+0xc6>
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	2b10      	cmp	r3, #16
 8008718:	d108      	bne.n	800872c <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	681a      	ldr	r2, [r3, #0]
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008728:	601a      	str	r2, [r3, #0]
 800872a:	e019      	b.n	8008760 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	2b04      	cmp	r3, #4
 8008730:	d002      	beq.n	8008738 <I2C_MasterReceive_BTF+0xe4>
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	2b02      	cmp	r3, #2
 8008736:	d108      	bne.n	800874a <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	681a      	ldr	r2, [r3, #0]
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008746:	601a      	str	r2, [r3, #0]
 8008748:	e00a      	b.n	8008760 <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	2b10      	cmp	r3, #16
 800874e:	d007      	beq.n	8008760 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	681a      	ldr	r2, [r3, #0]
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800875e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	691a      	ldr	r2, [r3, #16]
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800876a:	b2d2      	uxtb	r2, r2
 800876c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008772:	1c5a      	adds	r2, r3, #1
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800877c:	b29b      	uxth	r3, r3
 800877e:	3b01      	subs	r3, #1
 8008780:	b29a      	uxth	r2, r3
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	691a      	ldr	r2, [r3, #16]
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008790:	b2d2      	uxtb	r2, r2
 8008792:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008798:	1c5a      	adds	r2, r3, #1
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80087a2:	b29b      	uxth	r3, r3
 80087a4:	3b01      	subs	r3, #1
 80087a6:	b29a      	uxth	r2, r3
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	685a      	ldr	r2, [r3, #4]
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80087ba:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2220      	movs	r2, #32
 80087c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80087ca:	b2db      	uxtb	r3, r3
 80087cc:	2b40      	cmp	r3, #64	@ 0x40
 80087ce:	d10a      	bne.n	80087e6 <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2200      	movs	r2, #0
 80087d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2200      	movs	r2, #0
 80087dc:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	f7fb fe5a 	bl	8004498 <HAL_I2C_MemRxCpltCallback>
}
 80087e4:	e027      	b.n	8008836 <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	2200      	movs	r2, #0
 80087ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	2b08      	cmp	r3, #8
 80087f2:	d002      	beq.n	80087fa <I2C_MasterReceive_BTF+0x1a6>
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	2b20      	cmp	r3, #32
 80087f8:	d103      	bne.n	8008802 <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2200      	movs	r2, #0
 80087fe:	631a      	str	r2, [r3, #48]	@ 0x30
 8008800:	e002      	b.n	8008808 <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2212      	movs	r2, #18
 8008806:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f7ff fc67 	bl	80080dc <HAL_I2C_MasterRxCpltCallback>
}
 800880e:	e012      	b.n	8008836 <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	691a      	ldr	r2, [r3, #16]
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800881a:	b2d2      	uxtb	r2, r2
 800881c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008822:	1c5a      	adds	r2, r3, #1
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800882c:	b29b      	uxth	r3, r3
 800882e:	3b01      	subs	r3, #1
 8008830:	b29a      	uxth	r2, r3
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8008836:	bf00      	nop
 8008838:	3710      	adds	r7, #16
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}

0800883e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800883e:	b480      	push	{r7}
 8008840:	b083      	sub	sp, #12
 8008842:	af00      	add	r7, sp, #0
 8008844:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800884c:	b2db      	uxtb	r3, r3
 800884e:	2b40      	cmp	r3, #64	@ 0x40
 8008850:	d117      	bne.n	8008882 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008856:	2b00      	cmp	r3, #0
 8008858:	d109      	bne.n	800886e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800885e:	b2db      	uxtb	r3, r3
 8008860:	461a      	mov	r2, r3
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800886a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800886c:	e067      	b.n	800893e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008872:	b2db      	uxtb	r3, r3
 8008874:	f043 0301 	orr.w	r3, r3, #1
 8008878:	b2da      	uxtb	r2, r3
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	611a      	str	r2, [r3, #16]
}
 8008880:	e05d      	b.n	800893e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	691b      	ldr	r3, [r3, #16]
 8008886:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800888a:	d133      	bne.n	80088f4 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008892:	b2db      	uxtb	r3, r3
 8008894:	2b21      	cmp	r3, #33	@ 0x21
 8008896:	d109      	bne.n	80088ac <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800889c:	b2db      	uxtb	r3, r3
 800889e:	461a      	mov	r2, r3
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80088a8:	611a      	str	r2, [r3, #16]
 80088aa:	e008      	b.n	80088be <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80088b0:	b2db      	uxtb	r3, r3
 80088b2:	f043 0301 	orr.w	r3, r3, #1
 80088b6:	b2da      	uxtb	r2, r3
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d004      	beq.n	80088d0 <I2C_Master_SB+0x92>
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d108      	bne.n	80088e2 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d032      	beq.n	800893e <I2C_Master_SB+0x100>
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d02d      	beq.n	800893e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	685a      	ldr	r2, [r3, #4]
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80088f0:	605a      	str	r2, [r3, #4]
}
 80088f2:	e024      	b.n	800893e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d10e      	bne.n	800891a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008900:	b29b      	uxth	r3, r3
 8008902:	11db      	asrs	r3, r3, #7
 8008904:	b2db      	uxtb	r3, r3
 8008906:	f003 0306 	and.w	r3, r3, #6
 800890a:	b2db      	uxtb	r3, r3
 800890c:	f063 030f 	orn	r3, r3, #15
 8008910:	b2da      	uxtb	r2, r3
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	611a      	str	r2, [r3, #16]
}
 8008918:	e011      	b.n	800893e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800891e:	2b01      	cmp	r3, #1
 8008920:	d10d      	bne.n	800893e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008926:	b29b      	uxth	r3, r3
 8008928:	11db      	asrs	r3, r3, #7
 800892a:	b2db      	uxtb	r3, r3
 800892c:	f003 0306 	and.w	r3, r3, #6
 8008930:	b2db      	uxtb	r3, r3
 8008932:	f063 030e 	orn	r3, r3, #14
 8008936:	b2da      	uxtb	r2, r3
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	611a      	str	r2, [r3, #16]
}
 800893e:	bf00      	nop
 8008940:	370c      	adds	r7, #12
 8008942:	46bd      	mov	sp, r7
 8008944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008948:	4770      	bx	lr

0800894a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800894a:	b480      	push	{r7}
 800894c:	b083      	sub	sp, #12
 800894e:	af00      	add	r7, sp, #0
 8008950:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008956:	b2da      	uxtb	r2, r3
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008962:	2b00      	cmp	r3, #0
 8008964:	d004      	beq.n	8008970 <I2C_Master_ADD10+0x26>
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800896a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800896c:	2b00      	cmp	r3, #0
 800896e:	d108      	bne.n	8008982 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008974:	2b00      	cmp	r3, #0
 8008976:	d00c      	beq.n	8008992 <I2C_Master_ADD10+0x48>
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800897c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800897e:	2b00      	cmp	r3, #0
 8008980:	d007      	beq.n	8008992 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	685a      	ldr	r2, [r3, #4]
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008990:	605a      	str	r2, [r3, #4]
  }
}
 8008992:	bf00      	nop
 8008994:	370c      	adds	r7, #12
 8008996:	46bd      	mov	sp, r7
 8008998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899c:	4770      	bx	lr

0800899e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800899e:	b480      	push	{r7}
 80089a0:	b091      	sub	sp, #68	@ 0x44
 80089a2:	af00      	add	r7, sp, #0
 80089a4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80089ac:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089ba:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80089c2:	b2db      	uxtb	r3, r3
 80089c4:	2b22      	cmp	r3, #34	@ 0x22
 80089c6:	f040 8169 	bne.w	8008c9c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d10f      	bne.n	80089f2 <I2C_Master_ADDR+0x54>
 80089d2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80089d6:	2b40      	cmp	r3, #64	@ 0x40
 80089d8:	d10b      	bne.n	80089f2 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80089da:	2300      	movs	r3, #0
 80089dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	695b      	ldr	r3, [r3, #20]
 80089e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	699b      	ldr	r3, [r3, #24]
 80089ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80089ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089f0:	e160      	b.n	8008cb4 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d11d      	bne.n	8008a36 <I2C_Master_ADDR+0x98>
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	691b      	ldr	r3, [r3, #16]
 80089fe:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8008a02:	d118      	bne.n	8008a36 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008a04:	2300      	movs	r3, #0
 8008a06:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	695b      	ldr	r3, [r3, #20]
 8008a0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	699b      	ldr	r3, [r3, #24]
 8008a16:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008a18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	681a      	ldr	r2, [r3, #0]
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008a28:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a2e:	1c5a      	adds	r2, r3, #1
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	651a      	str	r2, [r3, #80]	@ 0x50
 8008a34:	e13e      	b.n	8008cb4 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a3a:	b29b      	uxth	r3, r3
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d113      	bne.n	8008a68 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008a40:	2300      	movs	r3, #0
 8008a42:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	695b      	ldr	r3, [r3, #20]
 8008a4a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	699b      	ldr	r3, [r3, #24]
 8008a52:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008a54:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	681a      	ldr	r2, [r3, #0]
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008a64:	601a      	str	r2, [r3, #0]
 8008a66:	e115      	b.n	8008c94 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a6c:	b29b      	uxth	r3, r3
 8008a6e:	2b01      	cmp	r3, #1
 8008a70:	f040 808a 	bne.w	8008b88 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8008a74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a76:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008a7a:	d137      	bne.n	8008aec <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	681a      	ldr	r2, [r3, #0]
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008a8a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	685b      	ldr	r3, [r3, #4]
 8008a92:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008a96:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008a9a:	d113      	bne.n	8008ac4 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	681a      	ldr	r2, [r3, #0]
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008aaa:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008aac:	2300      	movs	r3, #0
 8008aae:	627b      	str	r3, [r7, #36]	@ 0x24
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	695b      	ldr	r3, [r3, #20]
 8008ab6:	627b      	str	r3, [r7, #36]	@ 0x24
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	699b      	ldr	r3, [r3, #24]
 8008abe:	627b      	str	r3, [r7, #36]	@ 0x24
 8008ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ac2:	e0e7      	b.n	8008c94 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	623b      	str	r3, [r7, #32]
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	695b      	ldr	r3, [r3, #20]
 8008ace:	623b      	str	r3, [r7, #32]
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	699b      	ldr	r3, [r3, #24]
 8008ad6:	623b      	str	r3, [r7, #32]
 8008ad8:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	681a      	ldr	r2, [r3, #0]
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008ae8:	601a      	str	r2, [r3, #0]
 8008aea:	e0d3      	b.n	8008c94 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8008aec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008aee:	2b08      	cmp	r3, #8
 8008af0:	d02e      	beq.n	8008b50 <I2C_Master_ADDR+0x1b2>
 8008af2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008af4:	2b20      	cmp	r3, #32
 8008af6:	d02b      	beq.n	8008b50 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8008af8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008afa:	2b12      	cmp	r3, #18
 8008afc:	d102      	bne.n	8008b04 <I2C_Master_ADDR+0x166>
 8008afe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b00:	2b01      	cmp	r3, #1
 8008b02:	d125      	bne.n	8008b50 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8008b04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b06:	2b04      	cmp	r3, #4
 8008b08:	d00e      	beq.n	8008b28 <I2C_Master_ADDR+0x18a>
 8008b0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b0c:	2b02      	cmp	r3, #2
 8008b0e:	d00b      	beq.n	8008b28 <I2C_Master_ADDR+0x18a>
 8008b10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b12:	2b10      	cmp	r3, #16
 8008b14:	d008      	beq.n	8008b28 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	681a      	ldr	r2, [r3, #0]
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008b24:	601a      	str	r2, [r3, #0]
 8008b26:	e007      	b.n	8008b38 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	681a      	ldr	r2, [r3, #0]
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008b36:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008b38:	2300      	movs	r3, #0
 8008b3a:	61fb      	str	r3, [r7, #28]
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	695b      	ldr	r3, [r3, #20]
 8008b42:	61fb      	str	r3, [r7, #28]
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	699b      	ldr	r3, [r3, #24]
 8008b4a:	61fb      	str	r3, [r7, #28]
 8008b4c:	69fb      	ldr	r3, [r7, #28]
 8008b4e:	e0a1      	b.n	8008c94 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	681a      	ldr	r2, [r3, #0]
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008b5e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008b60:	2300      	movs	r3, #0
 8008b62:	61bb      	str	r3, [r7, #24]
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	695b      	ldr	r3, [r3, #20]
 8008b6a:	61bb      	str	r3, [r7, #24]
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	699b      	ldr	r3, [r3, #24]
 8008b72:	61bb      	str	r3, [r7, #24]
 8008b74:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	681a      	ldr	r2, [r3, #0]
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008b84:	601a      	str	r2, [r3, #0]
 8008b86:	e085      	b.n	8008c94 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b8c:	b29b      	uxth	r3, r3
 8008b8e:	2b02      	cmp	r3, #2
 8008b90:	d14d      	bne.n	8008c2e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8008b92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b94:	2b04      	cmp	r3, #4
 8008b96:	d016      	beq.n	8008bc6 <I2C_Master_ADDR+0x228>
 8008b98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b9a:	2b02      	cmp	r3, #2
 8008b9c:	d013      	beq.n	8008bc6 <I2C_Master_ADDR+0x228>
 8008b9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ba0:	2b10      	cmp	r3, #16
 8008ba2:	d010      	beq.n	8008bc6 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	681a      	ldr	r2, [r3, #0]
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008bb2:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	681a      	ldr	r2, [r3, #0]
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008bc2:	601a      	str	r2, [r3, #0]
 8008bc4:	e007      	b.n	8008bd6 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	681a      	ldr	r2, [r3, #0]
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008bd4:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	685b      	ldr	r3, [r3, #4]
 8008bdc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008be0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008be4:	d117      	bne.n	8008c16 <I2C_Master_ADDR+0x278>
 8008be6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008be8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008bec:	d00b      	beq.n	8008c06 <I2C_Master_ADDR+0x268>
 8008bee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bf0:	2b01      	cmp	r3, #1
 8008bf2:	d008      	beq.n	8008c06 <I2C_Master_ADDR+0x268>
 8008bf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bf6:	2b08      	cmp	r3, #8
 8008bf8:	d005      	beq.n	8008c06 <I2C_Master_ADDR+0x268>
 8008bfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bfc:	2b10      	cmp	r3, #16
 8008bfe:	d002      	beq.n	8008c06 <I2C_Master_ADDR+0x268>
 8008c00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c02:	2b20      	cmp	r3, #32
 8008c04:	d107      	bne.n	8008c16 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	685a      	ldr	r2, [r3, #4]
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008c14:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008c16:	2300      	movs	r3, #0
 8008c18:	617b      	str	r3, [r7, #20]
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	695b      	ldr	r3, [r3, #20]
 8008c20:	617b      	str	r3, [r7, #20]
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	699b      	ldr	r3, [r3, #24]
 8008c28:	617b      	str	r3, [r7, #20]
 8008c2a:	697b      	ldr	r3, [r7, #20]
 8008c2c:	e032      	b.n	8008c94 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	681a      	ldr	r2, [r3, #0]
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008c3c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	685b      	ldr	r3, [r3, #4]
 8008c44:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008c48:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008c4c:	d117      	bne.n	8008c7e <I2C_Master_ADDR+0x2e0>
 8008c4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c50:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008c54:	d00b      	beq.n	8008c6e <I2C_Master_ADDR+0x2d0>
 8008c56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c58:	2b01      	cmp	r3, #1
 8008c5a:	d008      	beq.n	8008c6e <I2C_Master_ADDR+0x2d0>
 8008c5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c5e:	2b08      	cmp	r3, #8
 8008c60:	d005      	beq.n	8008c6e <I2C_Master_ADDR+0x2d0>
 8008c62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c64:	2b10      	cmp	r3, #16
 8008c66:	d002      	beq.n	8008c6e <I2C_Master_ADDR+0x2d0>
 8008c68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c6a:	2b20      	cmp	r3, #32
 8008c6c:	d107      	bne.n	8008c7e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	685a      	ldr	r2, [r3, #4]
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008c7c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008c7e:	2300      	movs	r3, #0
 8008c80:	613b      	str	r3, [r7, #16]
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	695b      	ldr	r3, [r3, #20]
 8008c88:	613b      	str	r3, [r7, #16]
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	699b      	ldr	r3, [r3, #24]
 8008c90:	613b      	str	r3, [r7, #16]
 8008c92:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2200      	movs	r2, #0
 8008c98:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8008c9a:	e00b      	b.n	8008cb4 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	60fb      	str	r3, [r7, #12]
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	695b      	ldr	r3, [r3, #20]
 8008ca6:	60fb      	str	r3, [r7, #12]
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	699b      	ldr	r3, [r3, #24]
 8008cae:	60fb      	str	r3, [r7, #12]
 8008cb0:	68fb      	ldr	r3, [r7, #12]
}
 8008cb2:	e7ff      	b.n	8008cb4 <I2C_Master_ADDR+0x316>
 8008cb4:	bf00      	nop
 8008cb6:	3744      	adds	r7, #68	@ 0x44
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbe:	4770      	bx	lr

08008cc0 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b084      	sub	sp, #16
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008cce:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008cd4:	b29b      	uxth	r3, r3
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d02b      	beq.n	8008d32 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cde:	781a      	ldrb	r2, [r3, #0]
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cea:	1c5a      	adds	r2, r3, #1
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008cf4:	b29b      	uxth	r3, r3
 8008cf6:	3b01      	subs	r3, #1
 8008cf8:	b29a      	uxth	r2, r3
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008d02:	b29b      	uxth	r3, r3
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d114      	bne.n	8008d32 <I2C_SlaveTransmit_TXE+0x72>
 8008d08:	7bfb      	ldrb	r3, [r7, #15]
 8008d0a:	2b29      	cmp	r3, #41	@ 0x29
 8008d0c:	d111      	bne.n	8008d32 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	685a      	ldr	r2, [r3, #4]
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008d1c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	2221      	movs	r2, #33	@ 0x21
 8008d22:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2228      	movs	r2, #40	@ 0x28
 8008d28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008d2c:	6878      	ldr	r0, [r7, #4]
 8008d2e:	f7ff f9df 	bl	80080f0 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8008d32:	bf00      	nop
 8008d34:	3710      	adds	r7, #16
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd80      	pop	{r7, pc}

08008d3a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8008d3a:	b480      	push	{r7}
 8008d3c:	b083      	sub	sp, #12
 8008d3e:	af00      	add	r7, sp, #0
 8008d40:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008d46:	b29b      	uxth	r3, r3
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d011      	beq.n	8008d70 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d50:	781a      	ldrb	r2, [r3, #0]
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d5c:	1c5a      	adds	r2, r3, #1
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008d66:	b29b      	uxth	r3, r3
 8008d68:	3b01      	subs	r3, #1
 8008d6a:	b29a      	uxth	r2, r3
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8008d70:	bf00      	nop
 8008d72:	370c      	adds	r7, #12
 8008d74:	46bd      	mov	sp, r7
 8008d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7a:	4770      	bx	lr

08008d7c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b084      	sub	sp, #16
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008d8a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008d90:	b29b      	uxth	r3, r3
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d02c      	beq.n	8008df0 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	691a      	ldr	r2, [r3, #16]
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008da0:	b2d2      	uxtb	r2, r2
 8008da2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008da8:	1c5a      	adds	r2, r3, #1
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008db2:	b29b      	uxth	r3, r3
 8008db4:	3b01      	subs	r3, #1
 8008db6:	b29a      	uxth	r2, r3
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008dc0:	b29b      	uxth	r3, r3
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d114      	bne.n	8008df0 <I2C_SlaveReceive_RXNE+0x74>
 8008dc6:	7bfb      	ldrb	r3, [r7, #15]
 8008dc8:	2b2a      	cmp	r3, #42	@ 0x2a
 8008dca:	d111      	bne.n	8008df0 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	685a      	ldr	r2, [r3, #4]
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008dda:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2222      	movs	r2, #34	@ 0x22
 8008de0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2228      	movs	r2, #40	@ 0x28
 8008de6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	f7ff f98a 	bl	8008104 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8008df0:	bf00      	nop
 8008df2:	3710      	adds	r7, #16
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bd80      	pop	{r7, pc}

08008df8 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8008df8:	b480      	push	{r7}
 8008dfa:	b083      	sub	sp, #12
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008e04:	b29b      	uxth	r3, r3
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d012      	beq.n	8008e30 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	691a      	ldr	r2, [r3, #16]
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e14:	b2d2      	uxtb	r2, r2
 8008e16:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e1c:	1c5a      	adds	r2, r3, #1
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008e26:	b29b      	uxth	r3, r3
 8008e28:	3b01      	subs	r3, #1
 8008e2a:	b29a      	uxth	r2, r3
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8008e30:	bf00      	nop
 8008e32:	370c      	adds	r7, #12
 8008e34:	46bd      	mov	sp, r7
 8008e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3a:	4770      	bx	lr

08008e3c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b084      	sub	sp, #16
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
 8008e44:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8008e46:	2300      	movs	r3, #0
 8008e48:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008e50:	b2db      	uxtb	r3, r3
 8008e52:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008e56:	2b28      	cmp	r3, #40	@ 0x28
 8008e58:	d127      	bne.n	8008eaa <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	685a      	ldr	r2, [r3, #4]
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008e68:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	089b      	lsrs	r3, r3, #2
 8008e6e:	f003 0301 	and.w	r3, r3, #1
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d101      	bne.n	8008e7a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8008e76:	2301      	movs	r3, #1
 8008e78:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	09db      	lsrs	r3, r3, #7
 8008e7e:	f003 0301 	and.w	r3, r3, #1
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d103      	bne.n	8008e8e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	68db      	ldr	r3, [r3, #12]
 8008e8a:	81bb      	strh	r3, [r7, #12]
 8008e8c:	e002      	b.n	8008e94 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	699b      	ldr	r3, [r3, #24]
 8008e92:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2200      	movs	r2, #0
 8008e98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8008e9c:	89ba      	ldrh	r2, [r7, #12]
 8008e9e:	7bfb      	ldrb	r3, [r7, #15]
 8008ea0:	4619      	mov	r1, r3
 8008ea2:	6878      	ldr	r0, [r7, #4]
 8008ea4:	f7ff f938 	bl	8008118 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8008ea8:	e00e      	b.n	8008ec8 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008eaa:	2300      	movs	r3, #0
 8008eac:	60bb      	str	r3, [r7, #8]
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	695b      	ldr	r3, [r3, #20]
 8008eb4:	60bb      	str	r3, [r7, #8]
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	699b      	ldr	r3, [r3, #24]
 8008ebc:	60bb      	str	r3, [r7, #8]
 8008ebe:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8008ec8:	bf00      	nop
 8008eca:	3710      	adds	r7, #16
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bd80      	pop	{r7, pc}

08008ed0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b084      	sub	sp, #16
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008ede:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	685a      	ldr	r2, [r3, #4]
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8008eee:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	60bb      	str	r3, [r7, #8]
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	695b      	ldr	r3, [r3, #20]
 8008efa:	60bb      	str	r3, [r7, #8]
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	681a      	ldr	r2, [r3, #0]
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f042 0201 	orr.w	r2, r2, #1
 8008f0a:	601a      	str	r2, [r3, #0]
 8008f0c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	681a      	ldr	r2, [r3, #0]
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008f1c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	685b      	ldr	r3, [r3, #4]
 8008f24:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008f28:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008f2c:	d172      	bne.n	8009014 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008f2e:	7bfb      	ldrb	r3, [r7, #15]
 8008f30:	2b22      	cmp	r3, #34	@ 0x22
 8008f32:	d002      	beq.n	8008f3a <I2C_Slave_STOPF+0x6a>
 8008f34:	7bfb      	ldrb	r3, [r7, #15]
 8008f36:	2b2a      	cmp	r3, #42	@ 0x2a
 8008f38:	d135      	bne.n	8008fa6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	685b      	ldr	r3, [r3, #4]
 8008f42:	b29a      	uxth	r2, r3
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008f4c:	b29b      	uxth	r3, r3
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d005      	beq.n	8008f5e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f56:	f043 0204 	orr.w	r2, r3, #4
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	685a      	ldr	r2, [r3, #4]
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008f6c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f72:	4618      	mov	r0, r3
 8008f74:	f7fd fa0e 	bl	8006394 <HAL_DMA_GetState>
 8008f78:	4603      	mov	r3, r0
 8008f7a:	2b01      	cmp	r3, #1
 8008f7c:	d049      	beq.n	8009012 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f82:	4a69      	ldr	r2, [pc, #420]	@ (8009128 <I2C_Slave_STOPF+0x258>)
 8008f84:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	f7fd f856 	bl	800603c <HAL_DMA_Abort_IT>
 8008f90:	4603      	mov	r3, r0
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d03d      	beq.n	8009012 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f9c:	687a      	ldr	r2, [r7, #4]
 8008f9e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8008fa0:	4610      	mov	r0, r2
 8008fa2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008fa4:	e035      	b.n	8009012 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	685b      	ldr	r3, [r3, #4]
 8008fae:	b29a      	uxth	r2, r3
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008fb8:	b29b      	uxth	r3, r3
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d005      	beq.n	8008fca <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fc2:	f043 0204 	orr.w	r2, r3, #4
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	685a      	ldr	r2, [r3, #4]
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008fd8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008fde:	4618      	mov	r0, r3
 8008fe0:	f7fd f9d8 	bl	8006394 <HAL_DMA_GetState>
 8008fe4:	4603      	mov	r3, r0
 8008fe6:	2b01      	cmp	r3, #1
 8008fe8:	d014      	beq.n	8009014 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008fee:	4a4e      	ldr	r2, [pc, #312]	@ (8009128 <I2C_Slave_STOPF+0x258>)
 8008ff0:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	f7fd f820 	bl	800603c <HAL_DMA_Abort_IT>
 8008ffc:	4603      	mov	r3, r0
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d008      	beq.n	8009014 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009006:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009008:	687a      	ldr	r2, [r7, #4]
 800900a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800900c:	4610      	mov	r0, r2
 800900e:	4798      	blx	r3
 8009010:	e000      	b.n	8009014 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009012:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009018:	b29b      	uxth	r3, r3
 800901a:	2b00      	cmp	r3, #0
 800901c:	d03e      	beq.n	800909c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	695b      	ldr	r3, [r3, #20]
 8009024:	f003 0304 	and.w	r3, r3, #4
 8009028:	2b04      	cmp	r3, #4
 800902a:	d112      	bne.n	8009052 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	691a      	ldr	r2, [r3, #16]
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009036:	b2d2      	uxtb	r2, r2
 8009038:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800903e:	1c5a      	adds	r2, r3, #1
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009048:	b29b      	uxth	r3, r3
 800904a:	3b01      	subs	r3, #1
 800904c:	b29a      	uxth	r2, r3
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	695b      	ldr	r3, [r3, #20]
 8009058:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800905c:	2b40      	cmp	r3, #64	@ 0x40
 800905e:	d112      	bne.n	8009086 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	691a      	ldr	r2, [r3, #16]
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800906a:	b2d2      	uxtb	r2, r2
 800906c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009072:	1c5a      	adds	r2, r3, #1
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800907c:	b29b      	uxth	r3, r3
 800907e:	3b01      	subs	r3, #1
 8009080:	b29a      	uxth	r2, r3
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800908a:	b29b      	uxth	r3, r3
 800908c:	2b00      	cmp	r3, #0
 800908e:	d005      	beq.n	800909c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009094:	f043 0204 	orr.w	r2, r3, #4
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d003      	beq.n	80090ac <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80090a4:	6878      	ldr	r0, [r7, #4]
 80090a6:	f000 f8b7 	bl	8009218 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80090aa:	e039      	b.n	8009120 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80090ac:	7bfb      	ldrb	r3, [r7, #15]
 80090ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80090b0:	d109      	bne.n	80090c6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	2200      	movs	r2, #0
 80090b6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2228      	movs	r2, #40	@ 0x28
 80090bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80090c0:	6878      	ldr	r0, [r7, #4]
 80090c2:	f7ff f81f 	bl	8008104 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80090cc:	b2db      	uxtb	r3, r3
 80090ce:	2b28      	cmp	r3, #40	@ 0x28
 80090d0:	d111      	bne.n	80090f6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	4a15      	ldr	r2, [pc, #84]	@ (800912c <I2C_Slave_STOPF+0x25c>)
 80090d6:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2200      	movs	r2, #0
 80090dc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2220      	movs	r2, #32
 80090e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2200      	movs	r2, #0
 80090ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f7ff f820 	bl	8008134 <HAL_I2C_ListenCpltCallback>
}
 80090f4:	e014      	b.n	8009120 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090fa:	2b22      	cmp	r3, #34	@ 0x22
 80090fc:	d002      	beq.n	8009104 <I2C_Slave_STOPF+0x234>
 80090fe:	7bfb      	ldrb	r3, [r7, #15]
 8009100:	2b22      	cmp	r3, #34	@ 0x22
 8009102:	d10d      	bne.n	8009120 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2200      	movs	r2, #0
 8009108:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	2220      	movs	r2, #32
 800910e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2200      	movs	r2, #0
 8009116:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	f7fe fff2 	bl	8008104 <HAL_I2C_SlaveRxCpltCallback>
}
 8009120:	bf00      	nop
 8009122:	3710      	adds	r7, #16
 8009124:	46bd      	mov	sp, r7
 8009126:	bd80      	pop	{r7, pc}
 8009128:	08009ab5 	.word	0x08009ab5
 800912c:	ffff0000 	.word	0xffff0000

08009130 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b084      	sub	sp, #16
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800913e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009144:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8009146:	68bb      	ldr	r3, [r7, #8]
 8009148:	2b08      	cmp	r3, #8
 800914a:	d002      	beq.n	8009152 <I2C_Slave_AF+0x22>
 800914c:	68bb      	ldr	r3, [r7, #8]
 800914e:	2b20      	cmp	r3, #32
 8009150:	d129      	bne.n	80091a6 <I2C_Slave_AF+0x76>
 8009152:	7bfb      	ldrb	r3, [r7, #15]
 8009154:	2b28      	cmp	r3, #40	@ 0x28
 8009156:	d126      	bne.n	80091a6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	4a2e      	ldr	r2, [pc, #184]	@ (8009214 <I2C_Slave_AF+0xe4>)
 800915c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	685a      	ldr	r2, [r3, #4]
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800916c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8009176:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	681a      	ldr	r2, [r3, #0]
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009186:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2200      	movs	r2, #0
 800918c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	2220      	movs	r2, #32
 8009192:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2200      	movs	r2, #0
 800919a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800919e:	6878      	ldr	r0, [r7, #4]
 80091a0:	f7fe ffc8 	bl	8008134 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80091a4:	e031      	b.n	800920a <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80091a6:	7bfb      	ldrb	r3, [r7, #15]
 80091a8:	2b21      	cmp	r3, #33	@ 0x21
 80091aa:	d129      	bne.n	8009200 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	4a19      	ldr	r2, [pc, #100]	@ (8009214 <I2C_Slave_AF+0xe4>)
 80091b0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	2221      	movs	r2, #33	@ 0x21
 80091b6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2220      	movs	r2, #32
 80091bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2200      	movs	r2, #0
 80091c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	685a      	ldr	r2, [r3, #4]
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80091d6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80091e0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	681a      	ldr	r2, [r3, #0]
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80091f0:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 80091f2:	6878      	ldr	r0, [r7, #4]
 80091f4:	f7fd fcf4 	bl	8006be0 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80091f8:	6878      	ldr	r0, [r7, #4]
 80091fa:	f7fe ff79 	bl	80080f0 <HAL_I2C_SlaveTxCpltCallback>
}
 80091fe:	e004      	b.n	800920a <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8009208:	615a      	str	r2, [r3, #20]
}
 800920a:	bf00      	nop
 800920c:	3710      	adds	r7, #16
 800920e:	46bd      	mov	sp, r7
 8009210:	bd80      	pop	{r7, pc}
 8009212:	bf00      	nop
 8009214:	ffff0000 	.word	0xffff0000

08009218 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b084      	sub	sp, #16
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009226:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800922e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8009230:	7bbb      	ldrb	r3, [r7, #14]
 8009232:	2b10      	cmp	r3, #16
 8009234:	d002      	beq.n	800923c <I2C_ITError+0x24>
 8009236:	7bbb      	ldrb	r3, [r7, #14]
 8009238:	2b40      	cmp	r3, #64	@ 0x40
 800923a:	d10a      	bne.n	8009252 <I2C_ITError+0x3a>
 800923c:	7bfb      	ldrb	r3, [r7, #15]
 800923e:	2b22      	cmp	r3, #34	@ 0x22
 8009240:	d107      	bne.n	8009252 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	681a      	ldr	r2, [r3, #0]
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009250:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009252:	7bfb      	ldrb	r3, [r7, #15]
 8009254:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8009258:	2b28      	cmp	r3, #40	@ 0x28
 800925a:	d107      	bne.n	800926c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2200      	movs	r2, #0
 8009260:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2228      	movs	r2, #40	@ 0x28
 8009266:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800926a:	e015      	b.n	8009298 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	685b      	ldr	r3, [r3, #4]
 8009272:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009276:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800927a:	d00a      	beq.n	8009292 <I2C_ITError+0x7a>
 800927c:	7bfb      	ldrb	r3, [r7, #15]
 800927e:	2b60      	cmp	r3, #96	@ 0x60
 8009280:	d007      	beq.n	8009292 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2220      	movs	r2, #32
 8009286:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2200      	movs	r2, #0
 800928e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	2200      	movs	r2, #0
 8009296:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	685b      	ldr	r3, [r3, #4]
 800929e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80092a2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80092a6:	d162      	bne.n	800936e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	685a      	ldr	r2, [r3, #4]
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80092b6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80092bc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80092c0:	b2db      	uxtb	r3, r3
 80092c2:	2b01      	cmp	r3, #1
 80092c4:	d020      	beq.n	8009308 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80092ca:	4a6a      	ldr	r2, [pc, #424]	@ (8009474 <I2C_ITError+0x25c>)
 80092cc:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80092d2:	4618      	mov	r0, r3
 80092d4:	f7fc feb2 	bl	800603c <HAL_DMA_Abort_IT>
 80092d8:	4603      	mov	r3, r0
 80092da:	2b00      	cmp	r3, #0
 80092dc:	f000 8089 	beq.w	80093f2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	681a      	ldr	r2, [r3, #0]
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	f022 0201 	bic.w	r2, r2, #1
 80092ee:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2220      	movs	r2, #32
 80092f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80092fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80092fe:	687a      	ldr	r2, [r7, #4]
 8009300:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8009302:	4610      	mov	r0, r2
 8009304:	4798      	blx	r3
 8009306:	e074      	b.n	80093f2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800930c:	4a59      	ldr	r2, [pc, #356]	@ (8009474 <I2C_ITError+0x25c>)
 800930e:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009314:	4618      	mov	r0, r3
 8009316:	f7fc fe91 	bl	800603c <HAL_DMA_Abort_IT>
 800931a:	4603      	mov	r3, r0
 800931c:	2b00      	cmp	r3, #0
 800931e:	d068      	beq.n	80093f2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	695b      	ldr	r3, [r3, #20]
 8009326:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800932a:	2b40      	cmp	r3, #64	@ 0x40
 800932c:	d10b      	bne.n	8009346 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	691a      	ldr	r2, [r3, #16]
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009338:	b2d2      	uxtb	r2, r2
 800933a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009340:	1c5a      	adds	r2, r3, #1
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	681a      	ldr	r2, [r3, #0]
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	f022 0201 	bic.w	r2, r2, #1
 8009354:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2220      	movs	r2, #32
 800935a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009362:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009364:	687a      	ldr	r2, [r7, #4]
 8009366:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8009368:	4610      	mov	r0, r2
 800936a:	4798      	blx	r3
 800936c:	e041      	b.n	80093f2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009374:	b2db      	uxtb	r3, r3
 8009376:	2b60      	cmp	r3, #96	@ 0x60
 8009378:	d125      	bne.n	80093c6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	2220      	movs	r2, #32
 800937e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2200      	movs	r2, #0
 8009386:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	695b      	ldr	r3, [r3, #20]
 800938e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009392:	2b40      	cmp	r3, #64	@ 0x40
 8009394:	d10b      	bne.n	80093ae <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	691a      	ldr	r2, [r3, #16]
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093a0:	b2d2      	uxtb	r2, r2
 80093a2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093a8:	1c5a      	adds	r2, r3, #1
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	681a      	ldr	r2, [r3, #0]
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f022 0201 	bic.w	r2, r2, #1
 80093bc:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80093be:	6878      	ldr	r0, [r7, #4]
 80093c0:	f7fe fecc 	bl	800815c <HAL_I2C_AbortCpltCallback>
 80093c4:	e015      	b.n	80093f2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	695b      	ldr	r3, [r3, #20]
 80093cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093d0:	2b40      	cmp	r3, #64	@ 0x40
 80093d2:	d10b      	bne.n	80093ec <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	691a      	ldr	r2, [r3, #16]
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093de:	b2d2      	uxtb	r2, r2
 80093e0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093e6:	1c5a      	adds	r2, r3, #1
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80093ec:	6878      	ldr	r0, [r7, #4]
 80093ee:	f7fe feab 	bl	8008148 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093f6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80093f8:	68bb      	ldr	r3, [r7, #8]
 80093fa:	f003 0301 	and.w	r3, r3, #1
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d10e      	bne.n	8009420 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8009402:	68bb      	ldr	r3, [r7, #8]
 8009404:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8009408:	2b00      	cmp	r3, #0
 800940a:	d109      	bne.n	8009420 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800940c:	68bb      	ldr	r3, [r7, #8]
 800940e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8009412:	2b00      	cmp	r3, #0
 8009414:	d104      	bne.n	8009420 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8009416:	68bb      	ldr	r3, [r7, #8]
 8009418:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800941c:	2b00      	cmp	r3, #0
 800941e:	d007      	beq.n	8009430 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	685a      	ldr	r2, [r3, #4]
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800942e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009436:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800943c:	f003 0304 	and.w	r3, r3, #4
 8009440:	2b04      	cmp	r3, #4
 8009442:	d113      	bne.n	800946c <I2C_ITError+0x254>
 8009444:	7bfb      	ldrb	r3, [r7, #15]
 8009446:	2b28      	cmp	r3, #40	@ 0x28
 8009448:	d110      	bne.n	800946c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	4a0a      	ldr	r2, [pc, #40]	@ (8009478 <I2C_ITError+0x260>)
 800944e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2200      	movs	r2, #0
 8009454:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	2220      	movs	r2, #32
 800945a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2200      	movs	r2, #0
 8009462:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8009466:	6878      	ldr	r0, [r7, #4]
 8009468:	f7fe fe64 	bl	8008134 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800946c:	bf00      	nop
 800946e:	3710      	adds	r7, #16
 8009470:	46bd      	mov	sp, r7
 8009472:	bd80      	pop	{r7, pc}
 8009474:	08009ab5 	.word	0x08009ab5
 8009478:	ffff0000 	.word	0xffff0000

0800947c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b088      	sub	sp, #32
 8009480:	af02      	add	r7, sp, #8
 8009482:	60f8      	str	r0, [r7, #12]
 8009484:	607a      	str	r2, [r7, #4]
 8009486:	603b      	str	r3, [r7, #0]
 8009488:	460b      	mov	r3, r1
 800948a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009490:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8009492:	697b      	ldr	r3, [r7, #20]
 8009494:	2b08      	cmp	r3, #8
 8009496:	d006      	beq.n	80094a6 <I2C_MasterRequestWrite+0x2a>
 8009498:	697b      	ldr	r3, [r7, #20]
 800949a:	2b01      	cmp	r3, #1
 800949c:	d003      	beq.n	80094a6 <I2C_MasterRequestWrite+0x2a>
 800949e:	697b      	ldr	r3, [r7, #20]
 80094a0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80094a4:	d108      	bne.n	80094b8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	681a      	ldr	r2, [r3, #0]
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80094b4:	601a      	str	r2, [r3, #0]
 80094b6:	e00b      	b.n	80094d0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094bc:	2b12      	cmp	r3, #18
 80094be:	d107      	bne.n	80094d0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	681a      	ldr	r2, [r3, #0]
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80094ce:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	9300      	str	r3, [sp, #0]
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2200      	movs	r2, #0
 80094d8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80094dc:	68f8      	ldr	r0, [r7, #12]
 80094de:	f000 fb91 	bl	8009c04 <I2C_WaitOnFlagUntilTimeout>
 80094e2:	4603      	mov	r3, r0
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d00d      	beq.n	8009504 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80094f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80094f6:	d103      	bne.n	8009500 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80094fe:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8009500:	2303      	movs	r3, #3
 8009502:	e035      	b.n	8009570 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	691b      	ldr	r3, [r3, #16]
 8009508:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800950c:	d108      	bne.n	8009520 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800950e:	897b      	ldrh	r3, [r7, #10]
 8009510:	b2db      	uxtb	r3, r3
 8009512:	461a      	mov	r2, r3
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800951c:	611a      	str	r2, [r3, #16]
 800951e:	e01b      	b.n	8009558 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009520:	897b      	ldrh	r3, [r7, #10]
 8009522:	11db      	asrs	r3, r3, #7
 8009524:	b2db      	uxtb	r3, r3
 8009526:	f003 0306 	and.w	r3, r3, #6
 800952a:	b2db      	uxtb	r3, r3
 800952c:	f063 030f 	orn	r3, r3, #15
 8009530:	b2da      	uxtb	r2, r3
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	687a      	ldr	r2, [r7, #4]
 800953c:	490e      	ldr	r1, [pc, #56]	@ (8009578 <I2C_MasterRequestWrite+0xfc>)
 800953e:	68f8      	ldr	r0, [r7, #12]
 8009540:	f000 fbda 	bl	8009cf8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009544:	4603      	mov	r3, r0
 8009546:	2b00      	cmp	r3, #0
 8009548:	d001      	beq.n	800954e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800954a:	2301      	movs	r3, #1
 800954c:	e010      	b.n	8009570 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800954e:	897b      	ldrh	r3, [r7, #10]
 8009550:	b2da      	uxtb	r2, r3
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	687a      	ldr	r2, [r7, #4]
 800955c:	4907      	ldr	r1, [pc, #28]	@ (800957c <I2C_MasterRequestWrite+0x100>)
 800955e:	68f8      	ldr	r0, [r7, #12]
 8009560:	f000 fbca 	bl	8009cf8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009564:	4603      	mov	r3, r0
 8009566:	2b00      	cmp	r3, #0
 8009568:	d001      	beq.n	800956e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800956a:	2301      	movs	r3, #1
 800956c:	e000      	b.n	8009570 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800956e:	2300      	movs	r3, #0
}
 8009570:	4618      	mov	r0, r3
 8009572:	3718      	adds	r7, #24
 8009574:	46bd      	mov	sp, r7
 8009576:	bd80      	pop	{r7, pc}
 8009578:	00010008 	.word	0x00010008
 800957c:	00010002 	.word	0x00010002

08009580 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b088      	sub	sp, #32
 8009584:	af02      	add	r7, sp, #8
 8009586:	60f8      	str	r0, [r7, #12]
 8009588:	4608      	mov	r0, r1
 800958a:	4611      	mov	r1, r2
 800958c:	461a      	mov	r2, r3
 800958e:	4603      	mov	r3, r0
 8009590:	817b      	strh	r3, [r7, #10]
 8009592:	460b      	mov	r3, r1
 8009594:	813b      	strh	r3, [r7, #8]
 8009596:	4613      	mov	r3, r2
 8009598:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	681a      	ldr	r2, [r3, #0]
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80095a8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80095aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095ac:	9300      	str	r3, [sp, #0]
 80095ae:	6a3b      	ldr	r3, [r7, #32]
 80095b0:	2200      	movs	r2, #0
 80095b2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80095b6:	68f8      	ldr	r0, [r7, #12]
 80095b8:	f000 fb24 	bl	8009c04 <I2C_WaitOnFlagUntilTimeout>
 80095bc:	4603      	mov	r3, r0
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d00d      	beq.n	80095de <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80095cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80095d0:	d103      	bne.n	80095da <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80095d8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80095da:	2303      	movs	r3, #3
 80095dc:	e05f      	b.n	800969e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80095de:	897b      	ldrh	r3, [r7, #10]
 80095e0:	b2db      	uxtb	r3, r3
 80095e2:	461a      	mov	r2, r3
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80095ec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80095ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095f0:	6a3a      	ldr	r2, [r7, #32]
 80095f2:	492d      	ldr	r1, [pc, #180]	@ (80096a8 <I2C_RequestMemoryWrite+0x128>)
 80095f4:	68f8      	ldr	r0, [r7, #12]
 80095f6:	f000 fb7f 	bl	8009cf8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80095fa:	4603      	mov	r3, r0
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d001      	beq.n	8009604 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8009600:	2301      	movs	r3, #1
 8009602:	e04c      	b.n	800969e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009604:	2300      	movs	r3, #0
 8009606:	617b      	str	r3, [r7, #20]
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	695b      	ldr	r3, [r3, #20]
 800960e:	617b      	str	r3, [r7, #20]
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	699b      	ldr	r3, [r3, #24]
 8009616:	617b      	str	r3, [r7, #20]
 8009618:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800961a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800961c:	6a39      	ldr	r1, [r7, #32]
 800961e:	68f8      	ldr	r0, [r7, #12]
 8009620:	f000 fc0a 	bl	8009e38 <I2C_WaitOnTXEFlagUntilTimeout>
 8009624:	4603      	mov	r3, r0
 8009626:	2b00      	cmp	r3, #0
 8009628:	d00d      	beq.n	8009646 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800962e:	2b04      	cmp	r3, #4
 8009630:	d107      	bne.n	8009642 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	681a      	ldr	r2, [r3, #0]
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009640:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009642:	2301      	movs	r3, #1
 8009644:	e02b      	b.n	800969e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009646:	88fb      	ldrh	r3, [r7, #6]
 8009648:	2b01      	cmp	r3, #1
 800964a:	d105      	bne.n	8009658 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800964c:	893b      	ldrh	r3, [r7, #8]
 800964e:	b2da      	uxtb	r2, r3
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	611a      	str	r2, [r3, #16]
 8009656:	e021      	b.n	800969c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009658:	893b      	ldrh	r3, [r7, #8]
 800965a:	0a1b      	lsrs	r3, r3, #8
 800965c:	b29b      	uxth	r3, r3
 800965e:	b2da      	uxtb	r2, r3
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009666:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009668:	6a39      	ldr	r1, [r7, #32]
 800966a:	68f8      	ldr	r0, [r7, #12]
 800966c:	f000 fbe4 	bl	8009e38 <I2C_WaitOnTXEFlagUntilTimeout>
 8009670:	4603      	mov	r3, r0
 8009672:	2b00      	cmp	r3, #0
 8009674:	d00d      	beq.n	8009692 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800967a:	2b04      	cmp	r3, #4
 800967c:	d107      	bne.n	800968e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	681a      	ldr	r2, [r3, #0]
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800968c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800968e:	2301      	movs	r3, #1
 8009690:	e005      	b.n	800969e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009692:	893b      	ldrh	r3, [r7, #8]
 8009694:	b2da      	uxtb	r2, r3
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800969c:	2300      	movs	r3, #0
}
 800969e:	4618      	mov	r0, r3
 80096a0:	3718      	adds	r7, #24
 80096a2:	46bd      	mov	sp, r7
 80096a4:	bd80      	pop	{r7, pc}
 80096a6:	bf00      	nop
 80096a8:	00010002 	.word	0x00010002

080096ac <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b088      	sub	sp, #32
 80096b0:	af02      	add	r7, sp, #8
 80096b2:	60f8      	str	r0, [r7, #12]
 80096b4:	4608      	mov	r0, r1
 80096b6:	4611      	mov	r1, r2
 80096b8:	461a      	mov	r2, r3
 80096ba:	4603      	mov	r3, r0
 80096bc:	817b      	strh	r3, [r7, #10]
 80096be:	460b      	mov	r3, r1
 80096c0:	813b      	strh	r3, [r7, #8]
 80096c2:	4613      	mov	r3, r2
 80096c4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	681a      	ldr	r2, [r3, #0]
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80096d4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	681a      	ldr	r2, [r3, #0]
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80096e4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80096e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096e8:	9300      	str	r3, [sp, #0]
 80096ea:	6a3b      	ldr	r3, [r7, #32]
 80096ec:	2200      	movs	r2, #0
 80096ee:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80096f2:	68f8      	ldr	r0, [r7, #12]
 80096f4:	f000 fa86 	bl	8009c04 <I2C_WaitOnFlagUntilTimeout>
 80096f8:	4603      	mov	r3, r0
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d00d      	beq.n	800971a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009708:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800970c:	d103      	bne.n	8009716 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009714:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8009716:	2303      	movs	r3, #3
 8009718:	e0aa      	b.n	8009870 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800971a:	897b      	ldrh	r3, [r7, #10]
 800971c:	b2db      	uxtb	r3, r3
 800971e:	461a      	mov	r2, r3
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8009728:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800972a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800972c:	6a3a      	ldr	r2, [r7, #32]
 800972e:	4952      	ldr	r1, [pc, #328]	@ (8009878 <I2C_RequestMemoryRead+0x1cc>)
 8009730:	68f8      	ldr	r0, [r7, #12]
 8009732:	f000 fae1 	bl	8009cf8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009736:	4603      	mov	r3, r0
 8009738:	2b00      	cmp	r3, #0
 800973a:	d001      	beq.n	8009740 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800973c:	2301      	movs	r3, #1
 800973e:	e097      	b.n	8009870 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009740:	2300      	movs	r3, #0
 8009742:	617b      	str	r3, [r7, #20]
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	695b      	ldr	r3, [r3, #20]
 800974a:	617b      	str	r3, [r7, #20]
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	699b      	ldr	r3, [r3, #24]
 8009752:	617b      	str	r3, [r7, #20]
 8009754:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009756:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009758:	6a39      	ldr	r1, [r7, #32]
 800975a:	68f8      	ldr	r0, [r7, #12]
 800975c:	f000 fb6c 	bl	8009e38 <I2C_WaitOnTXEFlagUntilTimeout>
 8009760:	4603      	mov	r3, r0
 8009762:	2b00      	cmp	r3, #0
 8009764:	d00d      	beq.n	8009782 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800976a:	2b04      	cmp	r3, #4
 800976c:	d107      	bne.n	800977e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	681a      	ldr	r2, [r3, #0]
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800977c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800977e:	2301      	movs	r3, #1
 8009780:	e076      	b.n	8009870 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009782:	88fb      	ldrh	r3, [r7, #6]
 8009784:	2b01      	cmp	r3, #1
 8009786:	d105      	bne.n	8009794 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009788:	893b      	ldrh	r3, [r7, #8]
 800978a:	b2da      	uxtb	r2, r3
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	611a      	str	r2, [r3, #16]
 8009792:	e021      	b.n	80097d8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009794:	893b      	ldrh	r3, [r7, #8]
 8009796:	0a1b      	lsrs	r3, r3, #8
 8009798:	b29b      	uxth	r3, r3
 800979a:	b2da      	uxtb	r2, r3
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80097a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80097a4:	6a39      	ldr	r1, [r7, #32]
 80097a6:	68f8      	ldr	r0, [r7, #12]
 80097a8:	f000 fb46 	bl	8009e38 <I2C_WaitOnTXEFlagUntilTimeout>
 80097ac:	4603      	mov	r3, r0
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d00d      	beq.n	80097ce <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097b6:	2b04      	cmp	r3, #4
 80097b8:	d107      	bne.n	80097ca <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	681a      	ldr	r2, [r3, #0]
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80097c8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80097ca:	2301      	movs	r3, #1
 80097cc:	e050      	b.n	8009870 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80097ce:	893b      	ldrh	r3, [r7, #8]
 80097d0:	b2da      	uxtb	r2, r3
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80097d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80097da:	6a39      	ldr	r1, [r7, #32]
 80097dc:	68f8      	ldr	r0, [r7, #12]
 80097de:	f000 fb2b 	bl	8009e38 <I2C_WaitOnTXEFlagUntilTimeout>
 80097e2:	4603      	mov	r3, r0
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d00d      	beq.n	8009804 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097ec:	2b04      	cmp	r3, #4
 80097ee:	d107      	bne.n	8009800 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	681a      	ldr	r2, [r3, #0]
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80097fe:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009800:	2301      	movs	r3, #1
 8009802:	e035      	b.n	8009870 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	681a      	ldr	r2, [r3, #0]
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009812:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009816:	9300      	str	r3, [sp, #0]
 8009818:	6a3b      	ldr	r3, [r7, #32]
 800981a:	2200      	movs	r2, #0
 800981c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009820:	68f8      	ldr	r0, [r7, #12]
 8009822:	f000 f9ef 	bl	8009c04 <I2C_WaitOnFlagUntilTimeout>
 8009826:	4603      	mov	r3, r0
 8009828:	2b00      	cmp	r3, #0
 800982a:	d00d      	beq.n	8009848 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009836:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800983a:	d103      	bne.n	8009844 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009842:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8009844:	2303      	movs	r3, #3
 8009846:	e013      	b.n	8009870 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009848:	897b      	ldrh	r3, [r7, #10]
 800984a:	b2db      	uxtb	r3, r3
 800984c:	f043 0301 	orr.w	r3, r3, #1
 8009850:	b2da      	uxtb	r2, r3
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800985a:	6a3a      	ldr	r2, [r7, #32]
 800985c:	4906      	ldr	r1, [pc, #24]	@ (8009878 <I2C_RequestMemoryRead+0x1cc>)
 800985e:	68f8      	ldr	r0, [r7, #12]
 8009860:	f000 fa4a 	bl	8009cf8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009864:	4603      	mov	r3, r0
 8009866:	2b00      	cmp	r3, #0
 8009868:	d001      	beq.n	800986e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800986a:	2301      	movs	r3, #1
 800986c:	e000      	b.n	8009870 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800986e:	2300      	movs	r3, #0
}
 8009870:	4618      	mov	r0, r3
 8009872:	3718      	adds	r7, #24
 8009874:	46bd      	mov	sp, r7
 8009876:	bd80      	pop	{r7, pc}
 8009878:	00010002 	.word	0x00010002

0800987c <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b086      	sub	sp, #24
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009888:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800988a:	697b      	ldr	r3, [r7, #20]
 800988c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009890:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8009892:	697b      	ldr	r3, [r7, #20]
 8009894:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009898:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800989a:	697b      	ldr	r3, [r7, #20]
 800989c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800989e:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80098a0:	697b      	ldr	r3, [r7, #20]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	685a      	ldr	r2, [r3, #4]
 80098a6:	697b      	ldr	r3, [r7, #20]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80098ae:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80098b0:	697b      	ldr	r3, [r7, #20]
 80098b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d003      	beq.n	80098c0 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80098b8:	697b      	ldr	r3, [r7, #20]
 80098ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80098bc:	2200      	movs	r2, #0
 80098be:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80098c0:	697b      	ldr	r3, [r7, #20]
 80098c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d003      	beq.n	80098d0 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80098c8:	697b      	ldr	r3, [r7, #20]
 80098ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098cc:	2200      	movs	r2, #0
 80098ce:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 80098d0:	7cfb      	ldrb	r3, [r7, #19]
 80098d2:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 80098d6:	2b21      	cmp	r3, #33	@ 0x21
 80098d8:	d007      	beq.n	80098ea <I2C_DMAXferCplt+0x6e>
 80098da:	7cfb      	ldrb	r3, [r7, #19]
 80098dc:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 80098e0:	2b22      	cmp	r3, #34	@ 0x22
 80098e2:	d131      	bne.n	8009948 <I2C_DMAXferCplt+0xcc>
 80098e4:	7cbb      	ldrb	r3, [r7, #18]
 80098e6:	2b20      	cmp	r3, #32
 80098e8:	d12e      	bne.n	8009948 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80098ea:	697b      	ldr	r3, [r7, #20]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	685a      	ldr	r2, [r3, #4]
 80098f0:	697b      	ldr	r3, [r7, #20]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80098f8:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 80098fa:	697b      	ldr	r3, [r7, #20]
 80098fc:	2200      	movs	r2, #0
 80098fe:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8009900:	7cfb      	ldrb	r3, [r7, #19]
 8009902:	2b29      	cmp	r3, #41	@ 0x29
 8009904:	d10a      	bne.n	800991c <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009906:	697b      	ldr	r3, [r7, #20]
 8009908:	2221      	movs	r2, #33	@ 0x21
 800990a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800990c:	697b      	ldr	r3, [r7, #20]
 800990e:	2228      	movs	r2, #40	@ 0x28
 8009910:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009914:	6978      	ldr	r0, [r7, #20]
 8009916:	f7fe fbeb 	bl	80080f0 <HAL_I2C_SlaveTxCpltCallback>
 800991a:	e00c      	b.n	8009936 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800991c:	7cfb      	ldrb	r3, [r7, #19]
 800991e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009920:	d109      	bne.n	8009936 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8009922:	697b      	ldr	r3, [r7, #20]
 8009924:	2222      	movs	r2, #34	@ 0x22
 8009926:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009928:	697b      	ldr	r3, [r7, #20]
 800992a:	2228      	movs	r2, #40	@ 0x28
 800992c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009930:	6978      	ldr	r0, [r7, #20]
 8009932:	f7fe fbe7 	bl	8008104 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8009936:	697b      	ldr	r3, [r7, #20]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	685a      	ldr	r2, [r3, #4]
 800993c:	697b      	ldr	r3, [r7, #20]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8009944:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8009946:	e074      	b.n	8009a32 <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8009948:	697b      	ldr	r3, [r7, #20]
 800994a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800994e:	b2db      	uxtb	r3, r3
 8009950:	2b00      	cmp	r3, #0
 8009952:	d06e      	beq.n	8009a32 <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 8009954:	697b      	ldr	r3, [r7, #20]
 8009956:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009958:	b29b      	uxth	r3, r3
 800995a:	2b01      	cmp	r3, #1
 800995c:	d107      	bne.n	800996e <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800995e:	697b      	ldr	r3, [r7, #20]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	681a      	ldr	r2, [r3, #0]
 8009964:	697b      	ldr	r3, [r7, #20]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800996c:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800996e:	697b      	ldr	r3, [r7, #20]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	685a      	ldr	r2, [r3, #4]
 8009974:	697b      	ldr	r3, [r7, #20]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800997c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009984:	d009      	beq.n	800999a <I2C_DMAXferCplt+0x11e>
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	2b08      	cmp	r3, #8
 800998a:	d006      	beq.n	800999a <I2C_DMAXferCplt+0x11e>
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8009992:	d002      	beq.n	800999a <I2C_DMAXferCplt+0x11e>
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	2b20      	cmp	r3, #32
 8009998:	d107      	bne.n	80099aa <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800999a:	697b      	ldr	r3, [r7, #20]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	681a      	ldr	r2, [r3, #0]
 80099a0:	697b      	ldr	r3, [r7, #20]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80099a8:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80099aa:	697b      	ldr	r3, [r7, #20]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	685a      	ldr	r2, [r3, #4]
 80099b0:	697b      	ldr	r3, [r7, #20]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80099b8:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80099ba:	697b      	ldr	r3, [r7, #20]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	685a      	ldr	r2, [r3, #4]
 80099c0:	697b      	ldr	r3, [r7, #20]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80099c8:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 80099ca:	697b      	ldr	r3, [r7, #20]
 80099cc:	2200      	movs	r2, #0
 80099ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80099d0:	697b      	ldr	r3, [r7, #20]
 80099d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d003      	beq.n	80099e0 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 80099d8:	6978      	ldr	r0, [r7, #20]
 80099da:	f7fe fbb5 	bl	8008148 <HAL_I2C_ErrorCallback>
}
 80099de:	e028      	b.n	8009a32 <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 80099e0:	697b      	ldr	r3, [r7, #20]
 80099e2:	2220      	movs	r2, #32
 80099e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80099e8:	697b      	ldr	r3, [r7, #20]
 80099ea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80099ee:	b2db      	uxtb	r3, r3
 80099f0:	2b40      	cmp	r3, #64	@ 0x40
 80099f2:	d10a      	bne.n	8009a0a <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80099f4:	697b      	ldr	r3, [r7, #20]
 80099f6:	2200      	movs	r2, #0
 80099f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80099fc:	697b      	ldr	r3, [r7, #20]
 80099fe:	2200      	movs	r2, #0
 8009a00:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8009a02:	6978      	ldr	r0, [r7, #20]
 8009a04:	f7fa fd48 	bl	8004498 <HAL_I2C_MemRxCpltCallback>
}
 8009a08:	e013      	b.n	8009a32 <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a0a:	697b      	ldr	r3, [r7, #20]
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	2b08      	cmp	r3, #8
 8009a16:	d002      	beq.n	8009a1e <I2C_DMAXferCplt+0x1a2>
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	2b20      	cmp	r3, #32
 8009a1c:	d103      	bne.n	8009a26 <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 8009a1e:	697b      	ldr	r3, [r7, #20]
 8009a20:	2200      	movs	r2, #0
 8009a22:	631a      	str	r2, [r3, #48]	@ 0x30
 8009a24:	e002      	b.n	8009a2c <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8009a26:	697b      	ldr	r3, [r7, #20]
 8009a28:	2212      	movs	r2, #18
 8009a2a:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8009a2c:	6978      	ldr	r0, [r7, #20]
 8009a2e:	f7fe fb55 	bl	80080dc <HAL_I2C_MasterRxCpltCallback>
}
 8009a32:	bf00      	nop
 8009a34:	3718      	adds	r7, #24
 8009a36:	46bd      	mov	sp, r7
 8009a38:	bd80      	pop	{r7, pc}

08009a3a <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8009a3a:	b580      	push	{r7, lr}
 8009a3c:	b084      	sub	sp, #16
 8009a3e:	af00      	add	r7, sp, #0
 8009a40:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a46:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d003      	beq.n	8009a58 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a54:	2200      	movs	r2, #0
 8009a56:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d003      	beq.n	8009a68 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a64:	2200      	movs	r2, #0
 8009a66:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8009a68:	6878      	ldr	r0, [r7, #4]
 8009a6a:	f7fc fca1 	bl	80063b0 <HAL_DMA_GetError>
 8009a6e:	4603      	mov	r3, r0
 8009a70:	2b02      	cmp	r3, #2
 8009a72:	d01b      	beq.n	8009aac <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	681a      	ldr	r2, [r3, #0]
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009a82:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	2200      	movs	r2, #0
 8009a88:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	2220      	movs	r2, #32
 8009a8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	2200      	movs	r2, #0
 8009a96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a9e:	f043 0210 	orr.w	r2, r3, #16
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8009aa6:	68f8      	ldr	r0, [r7, #12]
 8009aa8:	f7fe fb4e 	bl	8008148 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009aac:	bf00      	nop
 8009aae:	3710      	adds	r7, #16
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	bd80      	pop	{r7, pc}

08009ab4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b086      	sub	sp, #24
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009abc:	2300      	movs	r3, #0
 8009abe:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ac4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009ac6:	697b      	ldr	r3, [r7, #20]
 8009ac8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009acc:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8009ace:	4b4b      	ldr	r3, [pc, #300]	@ (8009bfc <I2C_DMAAbort+0x148>)
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	08db      	lsrs	r3, r3, #3
 8009ad4:	4a4a      	ldr	r2, [pc, #296]	@ (8009c00 <I2C_DMAAbort+0x14c>)
 8009ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8009ada:	0a1a      	lsrs	r2, r3, #8
 8009adc:	4613      	mov	r3, r2
 8009ade:	009b      	lsls	r3, r3, #2
 8009ae0:	4413      	add	r3, r2
 8009ae2:	00da      	lsls	r2, r3, #3
 8009ae4:	1ad3      	subs	r3, r2, r3
 8009ae6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d106      	bne.n	8009afc <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009aee:	697b      	ldr	r3, [r7, #20]
 8009af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009af2:	f043 0220 	orr.w	r2, r3, #32
 8009af6:	697b      	ldr	r3, [r7, #20]
 8009af8:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8009afa:	e00a      	b.n	8009b12 <I2C_DMAAbort+0x5e>
    }
    count--;
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	3b01      	subs	r3, #1
 8009b00:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8009b02:	697b      	ldr	r3, [r7, #20]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009b0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009b10:	d0ea      	beq.n	8009ae8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8009b12:	697b      	ldr	r3, [r7, #20]
 8009b14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d003      	beq.n	8009b22 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8009b1a:	697b      	ldr	r3, [r7, #20]
 8009b1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b1e:	2200      	movs	r2, #0
 8009b20:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8009b22:	697b      	ldr	r3, [r7, #20]
 8009b24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d003      	beq.n	8009b32 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8009b2a:	697b      	ldr	r3, [r7, #20]
 8009b2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b2e:	2200      	movs	r2, #0
 8009b30:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009b32:	697b      	ldr	r3, [r7, #20]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	681a      	ldr	r2, [r3, #0]
 8009b38:	697b      	ldr	r3, [r7, #20]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009b40:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8009b42:	697b      	ldr	r3, [r7, #20]
 8009b44:	2200      	movs	r2, #0
 8009b46:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8009b48:	697b      	ldr	r3, [r7, #20]
 8009b4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d003      	beq.n	8009b58 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8009b50:	697b      	ldr	r3, [r7, #20]
 8009b52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b54:	2200      	movs	r2, #0
 8009b56:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8009b58:	697b      	ldr	r3, [r7, #20]
 8009b5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d003      	beq.n	8009b68 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8009b60:	697b      	ldr	r3, [r7, #20]
 8009b62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b64:	2200      	movs	r2, #0
 8009b66:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8009b68:	697b      	ldr	r3, [r7, #20]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	681a      	ldr	r2, [r3, #0]
 8009b6e:	697b      	ldr	r3, [r7, #20]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	f022 0201 	bic.w	r2, r2, #1
 8009b76:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8009b78:	697b      	ldr	r3, [r7, #20]
 8009b7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009b7e:	b2db      	uxtb	r3, r3
 8009b80:	2b60      	cmp	r3, #96	@ 0x60
 8009b82:	d10e      	bne.n	8009ba2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8009b84:	697b      	ldr	r3, [r7, #20]
 8009b86:	2220      	movs	r2, #32
 8009b88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009b8c:	697b      	ldr	r3, [r7, #20]
 8009b8e:	2200      	movs	r2, #0
 8009b90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8009b94:	697b      	ldr	r3, [r7, #20]
 8009b96:	2200      	movs	r2, #0
 8009b98:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8009b9a:	6978      	ldr	r0, [r7, #20]
 8009b9c:	f7fe fade 	bl	800815c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009ba0:	e027      	b.n	8009bf2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009ba2:	7cfb      	ldrb	r3, [r7, #19]
 8009ba4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8009ba8:	2b28      	cmp	r3, #40	@ 0x28
 8009baa:	d117      	bne.n	8009bdc <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8009bac:	697b      	ldr	r3, [r7, #20]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	681a      	ldr	r2, [r3, #0]
 8009bb2:	697b      	ldr	r3, [r7, #20]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	f042 0201 	orr.w	r2, r2, #1
 8009bba:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009bbc:	697b      	ldr	r3, [r7, #20]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	681a      	ldr	r2, [r3, #0]
 8009bc2:	697b      	ldr	r3, [r7, #20]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009bca:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8009bcc:	697b      	ldr	r3, [r7, #20]
 8009bce:	2200      	movs	r2, #0
 8009bd0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009bd2:	697b      	ldr	r3, [r7, #20]
 8009bd4:	2228      	movs	r2, #40	@ 0x28
 8009bd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8009bda:	e007      	b.n	8009bec <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8009bdc:	697b      	ldr	r3, [r7, #20]
 8009bde:	2220      	movs	r2, #32
 8009be0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009be4:	697b      	ldr	r3, [r7, #20]
 8009be6:	2200      	movs	r2, #0
 8009be8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8009bec:	6978      	ldr	r0, [r7, #20]
 8009bee:	f7fe faab 	bl	8008148 <HAL_I2C_ErrorCallback>
}
 8009bf2:	bf00      	nop
 8009bf4:	3718      	adds	r7, #24
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	bd80      	pop	{r7, pc}
 8009bfa:	bf00      	nop
 8009bfc:	20000014 	.word	0x20000014
 8009c00:	14f8b589 	.word	0x14f8b589

08009c04 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b084      	sub	sp, #16
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	60f8      	str	r0, [r7, #12]
 8009c0c:	60b9      	str	r1, [r7, #8]
 8009c0e:	603b      	str	r3, [r7, #0]
 8009c10:	4613      	mov	r3, r2
 8009c12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009c14:	e048      	b.n	8009ca8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009c16:	683b      	ldr	r3, [r7, #0]
 8009c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c1c:	d044      	beq.n	8009ca8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c1e:	f7fb fa39 	bl	8005094 <HAL_GetTick>
 8009c22:	4602      	mov	r2, r0
 8009c24:	69bb      	ldr	r3, [r7, #24]
 8009c26:	1ad3      	subs	r3, r2, r3
 8009c28:	683a      	ldr	r2, [r7, #0]
 8009c2a:	429a      	cmp	r2, r3
 8009c2c:	d302      	bcc.n	8009c34 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009c2e:	683b      	ldr	r3, [r7, #0]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d139      	bne.n	8009ca8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009c34:	68bb      	ldr	r3, [r7, #8]
 8009c36:	0c1b      	lsrs	r3, r3, #16
 8009c38:	b2db      	uxtb	r3, r3
 8009c3a:	2b01      	cmp	r3, #1
 8009c3c:	d10d      	bne.n	8009c5a <I2C_WaitOnFlagUntilTimeout+0x56>
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	695b      	ldr	r3, [r3, #20]
 8009c44:	43da      	mvns	r2, r3
 8009c46:	68bb      	ldr	r3, [r7, #8]
 8009c48:	4013      	ands	r3, r2
 8009c4a:	b29b      	uxth	r3, r3
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	bf0c      	ite	eq
 8009c50:	2301      	moveq	r3, #1
 8009c52:	2300      	movne	r3, #0
 8009c54:	b2db      	uxtb	r3, r3
 8009c56:	461a      	mov	r2, r3
 8009c58:	e00c      	b.n	8009c74 <I2C_WaitOnFlagUntilTimeout+0x70>
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	699b      	ldr	r3, [r3, #24]
 8009c60:	43da      	mvns	r2, r3
 8009c62:	68bb      	ldr	r3, [r7, #8]
 8009c64:	4013      	ands	r3, r2
 8009c66:	b29b      	uxth	r3, r3
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	bf0c      	ite	eq
 8009c6c:	2301      	moveq	r3, #1
 8009c6e:	2300      	movne	r3, #0
 8009c70:	b2db      	uxtb	r3, r3
 8009c72:	461a      	mov	r2, r3
 8009c74:	79fb      	ldrb	r3, [r7, #7]
 8009c76:	429a      	cmp	r2, r3
 8009c78:	d116      	bne.n	8009ca8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	2220      	movs	r2, #32
 8009c84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c94:	f043 0220 	orr.w	r2, r3, #32
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009ca4:	2301      	movs	r3, #1
 8009ca6:	e023      	b.n	8009cf0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009ca8:	68bb      	ldr	r3, [r7, #8]
 8009caa:	0c1b      	lsrs	r3, r3, #16
 8009cac:	b2db      	uxtb	r3, r3
 8009cae:	2b01      	cmp	r3, #1
 8009cb0:	d10d      	bne.n	8009cce <I2C_WaitOnFlagUntilTimeout+0xca>
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	695b      	ldr	r3, [r3, #20]
 8009cb8:	43da      	mvns	r2, r3
 8009cba:	68bb      	ldr	r3, [r7, #8]
 8009cbc:	4013      	ands	r3, r2
 8009cbe:	b29b      	uxth	r3, r3
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	bf0c      	ite	eq
 8009cc4:	2301      	moveq	r3, #1
 8009cc6:	2300      	movne	r3, #0
 8009cc8:	b2db      	uxtb	r3, r3
 8009cca:	461a      	mov	r2, r3
 8009ccc:	e00c      	b.n	8009ce8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	699b      	ldr	r3, [r3, #24]
 8009cd4:	43da      	mvns	r2, r3
 8009cd6:	68bb      	ldr	r3, [r7, #8]
 8009cd8:	4013      	ands	r3, r2
 8009cda:	b29b      	uxth	r3, r3
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	bf0c      	ite	eq
 8009ce0:	2301      	moveq	r3, #1
 8009ce2:	2300      	movne	r3, #0
 8009ce4:	b2db      	uxtb	r3, r3
 8009ce6:	461a      	mov	r2, r3
 8009ce8:	79fb      	ldrb	r3, [r7, #7]
 8009cea:	429a      	cmp	r2, r3
 8009cec:	d093      	beq.n	8009c16 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009cee:	2300      	movs	r3, #0
}
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	3710      	adds	r7, #16
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	bd80      	pop	{r7, pc}

08009cf8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b084      	sub	sp, #16
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	60f8      	str	r0, [r7, #12]
 8009d00:	60b9      	str	r1, [r7, #8]
 8009d02:	607a      	str	r2, [r7, #4]
 8009d04:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009d06:	e071      	b.n	8009dec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	695b      	ldr	r3, [r3, #20]
 8009d0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009d12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009d16:	d123      	bne.n	8009d60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	681a      	ldr	r2, [r3, #0]
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009d26:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8009d30:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	2200      	movs	r2, #0
 8009d36:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	2220      	movs	r2, #32
 8009d3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	2200      	movs	r2, #0
 8009d44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d4c:	f043 0204 	orr.w	r2, r3, #4
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	2200      	movs	r2, #0
 8009d58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8009d5c:	2301      	movs	r3, #1
 8009d5e:	e067      	b.n	8009e30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d66:	d041      	beq.n	8009dec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009d68:	f7fb f994 	bl	8005094 <HAL_GetTick>
 8009d6c:	4602      	mov	r2, r0
 8009d6e:	683b      	ldr	r3, [r7, #0]
 8009d70:	1ad3      	subs	r3, r2, r3
 8009d72:	687a      	ldr	r2, [r7, #4]
 8009d74:	429a      	cmp	r2, r3
 8009d76:	d302      	bcc.n	8009d7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d136      	bne.n	8009dec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8009d7e:	68bb      	ldr	r3, [r7, #8]
 8009d80:	0c1b      	lsrs	r3, r3, #16
 8009d82:	b2db      	uxtb	r3, r3
 8009d84:	2b01      	cmp	r3, #1
 8009d86:	d10c      	bne.n	8009da2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	695b      	ldr	r3, [r3, #20]
 8009d8e:	43da      	mvns	r2, r3
 8009d90:	68bb      	ldr	r3, [r7, #8]
 8009d92:	4013      	ands	r3, r2
 8009d94:	b29b      	uxth	r3, r3
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	bf14      	ite	ne
 8009d9a:	2301      	movne	r3, #1
 8009d9c:	2300      	moveq	r3, #0
 8009d9e:	b2db      	uxtb	r3, r3
 8009da0:	e00b      	b.n	8009dba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	699b      	ldr	r3, [r3, #24]
 8009da8:	43da      	mvns	r2, r3
 8009daa:	68bb      	ldr	r3, [r7, #8]
 8009dac:	4013      	ands	r3, r2
 8009dae:	b29b      	uxth	r3, r3
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	bf14      	ite	ne
 8009db4:	2301      	movne	r3, #1
 8009db6:	2300      	moveq	r3, #0
 8009db8:	b2db      	uxtb	r3, r3
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d016      	beq.n	8009dec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	2220      	movs	r2, #32
 8009dc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	2200      	movs	r2, #0
 8009dd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009dd8:	f043 0220 	orr.w	r2, r3, #32
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	2200      	movs	r2, #0
 8009de4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009de8:	2301      	movs	r3, #1
 8009dea:	e021      	b.n	8009e30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009dec:	68bb      	ldr	r3, [r7, #8]
 8009dee:	0c1b      	lsrs	r3, r3, #16
 8009df0:	b2db      	uxtb	r3, r3
 8009df2:	2b01      	cmp	r3, #1
 8009df4:	d10c      	bne.n	8009e10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	695b      	ldr	r3, [r3, #20]
 8009dfc:	43da      	mvns	r2, r3
 8009dfe:	68bb      	ldr	r3, [r7, #8]
 8009e00:	4013      	ands	r3, r2
 8009e02:	b29b      	uxth	r3, r3
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	bf14      	ite	ne
 8009e08:	2301      	movne	r3, #1
 8009e0a:	2300      	moveq	r3, #0
 8009e0c:	b2db      	uxtb	r3, r3
 8009e0e:	e00b      	b.n	8009e28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	699b      	ldr	r3, [r3, #24]
 8009e16:	43da      	mvns	r2, r3
 8009e18:	68bb      	ldr	r3, [r7, #8]
 8009e1a:	4013      	ands	r3, r2
 8009e1c:	b29b      	uxth	r3, r3
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	bf14      	ite	ne
 8009e22:	2301      	movne	r3, #1
 8009e24:	2300      	moveq	r3, #0
 8009e26:	b2db      	uxtb	r3, r3
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	f47f af6d 	bne.w	8009d08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8009e2e:	2300      	movs	r3, #0
}
 8009e30:	4618      	mov	r0, r3
 8009e32:	3710      	adds	r7, #16
 8009e34:	46bd      	mov	sp, r7
 8009e36:	bd80      	pop	{r7, pc}

08009e38 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b084      	sub	sp, #16
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	60f8      	str	r0, [r7, #12]
 8009e40:	60b9      	str	r1, [r7, #8]
 8009e42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009e44:	e034      	b.n	8009eb0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009e46:	68f8      	ldr	r0, [r7, #12]
 8009e48:	f000 f915 	bl	800a076 <I2C_IsAcknowledgeFailed>
 8009e4c:	4603      	mov	r3, r0
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d001      	beq.n	8009e56 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009e52:	2301      	movs	r3, #1
 8009e54:	e034      	b.n	8009ec0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009e56:	68bb      	ldr	r3, [r7, #8]
 8009e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e5c:	d028      	beq.n	8009eb0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e5e:	f7fb f919 	bl	8005094 <HAL_GetTick>
 8009e62:	4602      	mov	r2, r0
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	1ad3      	subs	r3, r2, r3
 8009e68:	68ba      	ldr	r2, [r7, #8]
 8009e6a:	429a      	cmp	r2, r3
 8009e6c:	d302      	bcc.n	8009e74 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009e6e:	68bb      	ldr	r3, [r7, #8]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d11d      	bne.n	8009eb0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	695b      	ldr	r3, [r3, #20]
 8009e7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e7e:	2b80      	cmp	r3, #128	@ 0x80
 8009e80:	d016      	beq.n	8009eb0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	2200      	movs	r2, #0
 8009e86:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	2220      	movs	r2, #32
 8009e8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	2200      	movs	r2, #0
 8009e94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e9c:	f043 0220 	orr.w	r2, r3, #32
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009eac:	2301      	movs	r3, #1
 8009eae:	e007      	b.n	8009ec0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	695b      	ldr	r3, [r3, #20]
 8009eb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009eba:	2b80      	cmp	r3, #128	@ 0x80
 8009ebc:	d1c3      	bne.n	8009e46 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009ebe:	2300      	movs	r3, #0
}
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	3710      	adds	r7, #16
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	bd80      	pop	{r7, pc}

08009ec8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b084      	sub	sp, #16
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	60f8      	str	r0, [r7, #12]
 8009ed0:	60b9      	str	r1, [r7, #8]
 8009ed2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009ed4:	e034      	b.n	8009f40 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009ed6:	68f8      	ldr	r0, [r7, #12]
 8009ed8:	f000 f8cd 	bl	800a076 <I2C_IsAcknowledgeFailed>
 8009edc:	4603      	mov	r3, r0
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d001      	beq.n	8009ee6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009ee2:	2301      	movs	r3, #1
 8009ee4:	e034      	b.n	8009f50 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009ee6:	68bb      	ldr	r3, [r7, #8]
 8009ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009eec:	d028      	beq.n	8009f40 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009eee:	f7fb f8d1 	bl	8005094 <HAL_GetTick>
 8009ef2:	4602      	mov	r2, r0
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	1ad3      	subs	r3, r2, r3
 8009ef8:	68ba      	ldr	r2, [r7, #8]
 8009efa:	429a      	cmp	r2, r3
 8009efc:	d302      	bcc.n	8009f04 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009efe:	68bb      	ldr	r3, [r7, #8]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d11d      	bne.n	8009f40 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	695b      	ldr	r3, [r3, #20]
 8009f0a:	f003 0304 	and.w	r3, r3, #4
 8009f0e:	2b04      	cmp	r3, #4
 8009f10:	d016      	beq.n	8009f40 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	2200      	movs	r2, #0
 8009f16:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	2220      	movs	r2, #32
 8009f1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	2200      	movs	r2, #0
 8009f24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f2c:	f043 0220 	orr.w	r2, r3, #32
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	2200      	movs	r2, #0
 8009f38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009f3c:	2301      	movs	r3, #1
 8009f3e:	e007      	b.n	8009f50 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	695b      	ldr	r3, [r3, #20]
 8009f46:	f003 0304 	and.w	r3, r3, #4
 8009f4a:	2b04      	cmp	r3, #4
 8009f4c:	d1c3      	bne.n	8009ed6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009f4e:	2300      	movs	r3, #0
}
 8009f50:	4618      	mov	r0, r3
 8009f52:	3710      	adds	r7, #16
 8009f54:	46bd      	mov	sp, r7
 8009f56:	bd80      	pop	{r7, pc}

08009f58 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8009f58:	b480      	push	{r7}
 8009f5a:	b085      	sub	sp, #20
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009f60:	2300      	movs	r3, #0
 8009f62:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8009f64:	4b13      	ldr	r3, [pc, #76]	@ (8009fb4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	08db      	lsrs	r3, r3, #3
 8009f6a:	4a13      	ldr	r2, [pc, #76]	@ (8009fb8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8009f6c:	fba2 2303 	umull	r2, r3, r2, r3
 8009f70:	0a1a      	lsrs	r2, r3, #8
 8009f72:	4613      	mov	r3, r2
 8009f74:	009b      	lsls	r3, r3, #2
 8009f76:	4413      	add	r3, r2
 8009f78:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	3b01      	subs	r3, #1
 8009f7e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d107      	bne.n	8009f96 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f8a:	f043 0220 	orr.w	r2, r3, #32
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8009f92:	2301      	movs	r3, #1
 8009f94:	e008      	b.n	8009fa8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009fa0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009fa4:	d0e9      	beq.n	8009f7a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8009fa6:	2300      	movs	r3, #0
}
 8009fa8:	4618      	mov	r0, r3
 8009faa:	3714      	adds	r7, #20
 8009fac:	46bd      	mov	sp, r7
 8009fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb2:	4770      	bx	lr
 8009fb4:	20000014 	.word	0x20000014
 8009fb8:	14f8b589 	.word	0x14f8b589

08009fbc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b084      	sub	sp, #16
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	60f8      	str	r0, [r7, #12]
 8009fc4:	60b9      	str	r1, [r7, #8]
 8009fc6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009fc8:	e049      	b.n	800a05e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	695b      	ldr	r3, [r3, #20]
 8009fd0:	f003 0310 	and.w	r3, r3, #16
 8009fd4:	2b10      	cmp	r3, #16
 8009fd6:	d119      	bne.n	800a00c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	f06f 0210 	mvn.w	r2, #16
 8009fe0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	2220      	movs	r2, #32
 8009fec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	2200      	movs	r2, #0
 800a004:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800a008:	2301      	movs	r3, #1
 800a00a:	e030      	b.n	800a06e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a00c:	f7fb f842 	bl	8005094 <HAL_GetTick>
 800a010:	4602      	mov	r2, r0
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	1ad3      	subs	r3, r2, r3
 800a016:	68ba      	ldr	r2, [r7, #8]
 800a018:	429a      	cmp	r2, r3
 800a01a:	d302      	bcc.n	800a022 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800a01c:	68bb      	ldr	r3, [r7, #8]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d11d      	bne.n	800a05e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	695b      	ldr	r3, [r3, #20]
 800a028:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a02c:	2b40      	cmp	r3, #64	@ 0x40
 800a02e:	d016      	beq.n	800a05e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	2200      	movs	r2, #0
 800a034:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	2220      	movs	r2, #32
 800a03a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	2200      	movs	r2, #0
 800a042:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a04a:	f043 0220 	orr.w	r2, r3, #32
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	2200      	movs	r2, #0
 800a056:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800a05a:	2301      	movs	r3, #1
 800a05c:	e007      	b.n	800a06e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	695b      	ldr	r3, [r3, #20]
 800a064:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a068:	2b40      	cmp	r3, #64	@ 0x40
 800a06a:	d1ae      	bne.n	8009fca <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a06c:	2300      	movs	r3, #0
}
 800a06e:	4618      	mov	r0, r3
 800a070:	3710      	adds	r7, #16
 800a072:	46bd      	mov	sp, r7
 800a074:	bd80      	pop	{r7, pc}

0800a076 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a076:	b480      	push	{r7}
 800a078:	b083      	sub	sp, #12
 800a07a:	af00      	add	r7, sp, #0
 800a07c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	695b      	ldr	r3, [r3, #20]
 800a084:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a088:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a08c:	d11b      	bne.n	800a0c6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800a096:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	2200      	movs	r2, #0
 800a09c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	2220      	movs	r2, #32
 800a0a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0b2:	f043 0204 	orr.w	r2, r3, #4
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	2200      	movs	r2, #0
 800a0be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800a0c2:	2301      	movs	r3, #1
 800a0c4:	e000      	b.n	800a0c8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a0c6:	2300      	movs	r3, #0
}
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	370c      	adds	r7, #12
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d2:	4770      	bx	lr

0800a0d4 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800a0d4:	b480      	push	{r7}
 800a0d6:	b083      	sub	sp, #12
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0e0:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800a0e4:	d103      	bne.n	800a0ee <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	2201      	movs	r2, #1
 800a0ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800a0ec:	e007      	b.n	800a0fe <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0f2:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800a0f6:	d102      	bne.n	800a0fe <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2208      	movs	r2, #8
 800a0fc:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800a0fe:	bf00      	nop
 800a100:	370c      	adds	r7, #12
 800a102:	46bd      	mov	sp, r7
 800a104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a108:	4770      	bx	lr

0800a10a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800a10a:	b580      	push	{r7, lr}
 800a10c:	b086      	sub	sp, #24
 800a10e:	af02      	add	r7, sp, #8
 800a110:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d101      	bne.n	800a11c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800a118:	2301      	movs	r3, #1
 800a11a:	e101      	b.n	800a320 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800a128:	b2db      	uxtb	r3, r3
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d106      	bne.n	800a13c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2200      	movs	r2, #0
 800a132:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800a136:	6878      	ldr	r0, [r7, #4]
 800a138:	f007 fb70 	bl	801181c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	2203      	movs	r2, #3
 800a140:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800a144:	68bb      	ldr	r3, [r7, #8]
 800a146:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a14a:	d102      	bne.n	800a152 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	2200      	movs	r2, #0
 800a150:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	4618      	mov	r0, r3
 800a158:	f003 feeb 	bl	800df32 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	6818      	ldr	r0, [r3, #0]
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	7c1a      	ldrb	r2, [r3, #16]
 800a164:	f88d 2000 	strb.w	r2, [sp]
 800a168:	3304      	adds	r3, #4
 800a16a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a16c:	f003 fdca 	bl	800dd04 <USB_CoreInit>
 800a170:	4603      	mov	r3, r0
 800a172:	2b00      	cmp	r3, #0
 800a174:	d005      	beq.n	800a182 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	2202      	movs	r2, #2
 800a17a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800a17e:	2301      	movs	r3, #1
 800a180:	e0ce      	b.n	800a320 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	2100      	movs	r1, #0
 800a188:	4618      	mov	r0, r3
 800a18a:	f003 fee3 	bl	800df54 <USB_SetCurrentMode>
 800a18e:	4603      	mov	r3, r0
 800a190:	2b00      	cmp	r3, #0
 800a192:	d005      	beq.n	800a1a0 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2202      	movs	r2, #2
 800a198:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800a19c:	2301      	movs	r3, #1
 800a19e:	e0bf      	b.n	800a320 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	73fb      	strb	r3, [r7, #15]
 800a1a4:	e04a      	b.n	800a23c <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800a1a6:	7bfa      	ldrb	r2, [r7, #15]
 800a1a8:	6879      	ldr	r1, [r7, #4]
 800a1aa:	4613      	mov	r3, r2
 800a1ac:	00db      	lsls	r3, r3, #3
 800a1ae:	4413      	add	r3, r2
 800a1b0:	009b      	lsls	r3, r3, #2
 800a1b2:	440b      	add	r3, r1
 800a1b4:	3315      	adds	r3, #21
 800a1b6:	2201      	movs	r2, #1
 800a1b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800a1ba:	7bfa      	ldrb	r2, [r7, #15]
 800a1bc:	6879      	ldr	r1, [r7, #4]
 800a1be:	4613      	mov	r3, r2
 800a1c0:	00db      	lsls	r3, r3, #3
 800a1c2:	4413      	add	r3, r2
 800a1c4:	009b      	lsls	r3, r3, #2
 800a1c6:	440b      	add	r3, r1
 800a1c8:	3314      	adds	r3, #20
 800a1ca:	7bfa      	ldrb	r2, [r7, #15]
 800a1cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800a1ce:	7bfa      	ldrb	r2, [r7, #15]
 800a1d0:	7bfb      	ldrb	r3, [r7, #15]
 800a1d2:	b298      	uxth	r0, r3
 800a1d4:	6879      	ldr	r1, [r7, #4]
 800a1d6:	4613      	mov	r3, r2
 800a1d8:	00db      	lsls	r3, r3, #3
 800a1da:	4413      	add	r3, r2
 800a1dc:	009b      	lsls	r3, r3, #2
 800a1de:	440b      	add	r3, r1
 800a1e0:	332e      	adds	r3, #46	@ 0x2e
 800a1e2:	4602      	mov	r2, r0
 800a1e4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800a1e6:	7bfa      	ldrb	r2, [r7, #15]
 800a1e8:	6879      	ldr	r1, [r7, #4]
 800a1ea:	4613      	mov	r3, r2
 800a1ec:	00db      	lsls	r3, r3, #3
 800a1ee:	4413      	add	r3, r2
 800a1f0:	009b      	lsls	r3, r3, #2
 800a1f2:	440b      	add	r3, r1
 800a1f4:	3318      	adds	r3, #24
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800a1fa:	7bfa      	ldrb	r2, [r7, #15]
 800a1fc:	6879      	ldr	r1, [r7, #4]
 800a1fe:	4613      	mov	r3, r2
 800a200:	00db      	lsls	r3, r3, #3
 800a202:	4413      	add	r3, r2
 800a204:	009b      	lsls	r3, r3, #2
 800a206:	440b      	add	r3, r1
 800a208:	331c      	adds	r3, #28
 800a20a:	2200      	movs	r2, #0
 800a20c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800a20e:	7bfa      	ldrb	r2, [r7, #15]
 800a210:	6879      	ldr	r1, [r7, #4]
 800a212:	4613      	mov	r3, r2
 800a214:	00db      	lsls	r3, r3, #3
 800a216:	4413      	add	r3, r2
 800a218:	009b      	lsls	r3, r3, #2
 800a21a:	440b      	add	r3, r1
 800a21c:	3320      	adds	r3, #32
 800a21e:	2200      	movs	r2, #0
 800a220:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800a222:	7bfa      	ldrb	r2, [r7, #15]
 800a224:	6879      	ldr	r1, [r7, #4]
 800a226:	4613      	mov	r3, r2
 800a228:	00db      	lsls	r3, r3, #3
 800a22a:	4413      	add	r3, r2
 800a22c:	009b      	lsls	r3, r3, #2
 800a22e:	440b      	add	r3, r1
 800a230:	3324      	adds	r3, #36	@ 0x24
 800a232:	2200      	movs	r2, #0
 800a234:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a236:	7bfb      	ldrb	r3, [r7, #15]
 800a238:	3301      	adds	r3, #1
 800a23a:	73fb      	strb	r3, [r7, #15]
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	791b      	ldrb	r3, [r3, #4]
 800a240:	7bfa      	ldrb	r2, [r7, #15]
 800a242:	429a      	cmp	r2, r3
 800a244:	d3af      	bcc.n	800a1a6 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a246:	2300      	movs	r3, #0
 800a248:	73fb      	strb	r3, [r7, #15]
 800a24a:	e044      	b.n	800a2d6 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800a24c:	7bfa      	ldrb	r2, [r7, #15]
 800a24e:	6879      	ldr	r1, [r7, #4]
 800a250:	4613      	mov	r3, r2
 800a252:	00db      	lsls	r3, r3, #3
 800a254:	4413      	add	r3, r2
 800a256:	009b      	lsls	r3, r3, #2
 800a258:	440b      	add	r3, r1
 800a25a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800a25e:	2200      	movs	r2, #0
 800a260:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800a262:	7bfa      	ldrb	r2, [r7, #15]
 800a264:	6879      	ldr	r1, [r7, #4]
 800a266:	4613      	mov	r3, r2
 800a268:	00db      	lsls	r3, r3, #3
 800a26a:	4413      	add	r3, r2
 800a26c:	009b      	lsls	r3, r3, #2
 800a26e:	440b      	add	r3, r1
 800a270:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800a274:	7bfa      	ldrb	r2, [r7, #15]
 800a276:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800a278:	7bfa      	ldrb	r2, [r7, #15]
 800a27a:	6879      	ldr	r1, [r7, #4]
 800a27c:	4613      	mov	r3, r2
 800a27e:	00db      	lsls	r3, r3, #3
 800a280:	4413      	add	r3, r2
 800a282:	009b      	lsls	r3, r3, #2
 800a284:	440b      	add	r3, r1
 800a286:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800a28a:	2200      	movs	r2, #0
 800a28c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800a28e:	7bfa      	ldrb	r2, [r7, #15]
 800a290:	6879      	ldr	r1, [r7, #4]
 800a292:	4613      	mov	r3, r2
 800a294:	00db      	lsls	r3, r3, #3
 800a296:	4413      	add	r3, r2
 800a298:	009b      	lsls	r3, r3, #2
 800a29a:	440b      	add	r3, r1
 800a29c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800a2a4:	7bfa      	ldrb	r2, [r7, #15]
 800a2a6:	6879      	ldr	r1, [r7, #4]
 800a2a8:	4613      	mov	r3, r2
 800a2aa:	00db      	lsls	r3, r3, #3
 800a2ac:	4413      	add	r3, r2
 800a2ae:	009b      	lsls	r3, r3, #2
 800a2b0:	440b      	add	r3, r1
 800a2b2:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800a2ba:	7bfa      	ldrb	r2, [r7, #15]
 800a2bc:	6879      	ldr	r1, [r7, #4]
 800a2be:	4613      	mov	r3, r2
 800a2c0:	00db      	lsls	r3, r3, #3
 800a2c2:	4413      	add	r3, r2
 800a2c4:	009b      	lsls	r3, r3, #2
 800a2c6:	440b      	add	r3, r1
 800a2c8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a2d0:	7bfb      	ldrb	r3, [r7, #15]
 800a2d2:	3301      	adds	r3, #1
 800a2d4:	73fb      	strb	r3, [r7, #15]
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	791b      	ldrb	r3, [r3, #4]
 800a2da:	7bfa      	ldrb	r2, [r7, #15]
 800a2dc:	429a      	cmp	r2, r3
 800a2de:	d3b5      	bcc.n	800a24c <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	6818      	ldr	r0, [r3, #0]
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	7c1a      	ldrb	r2, [r3, #16]
 800a2e8:	f88d 2000 	strb.w	r2, [sp]
 800a2ec:	3304      	adds	r3, #4
 800a2ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a2f0:	f003 fe7c 	bl	800dfec <USB_DevInit>
 800a2f4:	4603      	mov	r3, r0
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d005      	beq.n	800a306 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	2202      	movs	r2, #2
 800a2fe:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800a302:	2301      	movs	r3, #1
 800a304:	e00c      	b.n	800a320 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	2200      	movs	r2, #0
 800a30a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2201      	movs	r2, #1
 800a310:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	4618      	mov	r0, r3
 800a31a:	f004 fec6 	bl	800f0aa <USB_DevDisconnect>

  return HAL_OK;
 800a31e:	2300      	movs	r3, #0
}
 800a320:	4618      	mov	r0, r3
 800a322:	3710      	adds	r7, #16
 800a324:	46bd      	mov	sp, r7
 800a326:	bd80      	pop	{r7, pc}

0800a328 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b084      	sub	sp, #16
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800a33c:	2b01      	cmp	r3, #1
 800a33e:	d101      	bne.n	800a344 <HAL_PCD_Start+0x1c>
 800a340:	2302      	movs	r3, #2
 800a342:	e022      	b.n	800a38a <HAL_PCD_Start+0x62>
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	2201      	movs	r2, #1
 800a348:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	68db      	ldr	r3, [r3, #12]
 800a350:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a354:	2b00      	cmp	r3, #0
 800a356:	d009      	beq.n	800a36c <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800a35c:	2b01      	cmp	r3, #1
 800a35e:	d105      	bne.n	800a36c <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a364:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	4618      	mov	r0, r3
 800a372:	f003 fdcd 	bl	800df10 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	4618      	mov	r0, r3
 800a37c:	f004 fe74 	bl	800f068 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	2200      	movs	r2, #0
 800a384:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800a388:	2300      	movs	r3, #0
}
 800a38a:	4618      	mov	r0, r3
 800a38c:	3710      	adds	r7, #16
 800a38e:	46bd      	mov	sp, r7
 800a390:	bd80      	pop	{r7, pc}

0800a392 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800a392:	b590      	push	{r4, r7, lr}
 800a394:	b08d      	sub	sp, #52	@ 0x34
 800a396:	af00      	add	r7, sp, #0
 800a398:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3a0:	6a3b      	ldr	r3, [r7, #32]
 800a3a2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	f004 ff32 	bl	800f212 <USB_GetMode>
 800a3ae:	4603      	mov	r3, r0
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	f040 848c 	bne.w	800acce <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	f004 fe96 	bl	800f0ec <USB_ReadInterrupts>
 800a3c0:	4603      	mov	r3, r0
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	f000 8482 	beq.w	800accc <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800a3c8:	69fb      	ldr	r3, [r7, #28]
 800a3ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a3ce:	689b      	ldr	r3, [r3, #8]
 800a3d0:	0a1b      	lsrs	r3, r3, #8
 800a3d2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	f004 fe83 	bl	800f0ec <USB_ReadInterrupts>
 800a3e6:	4603      	mov	r3, r0
 800a3e8:	f003 0302 	and.w	r3, r3, #2
 800a3ec:	2b02      	cmp	r3, #2
 800a3ee:	d107      	bne.n	800a400 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	695a      	ldr	r2, [r3, #20]
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	f002 0202 	and.w	r2, r2, #2
 800a3fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	4618      	mov	r0, r3
 800a406:	f004 fe71 	bl	800f0ec <USB_ReadInterrupts>
 800a40a:	4603      	mov	r3, r0
 800a40c:	f003 0310 	and.w	r3, r3, #16
 800a410:	2b10      	cmp	r3, #16
 800a412:	d161      	bne.n	800a4d8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	699a      	ldr	r2, [r3, #24]
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	f022 0210 	bic.w	r2, r2, #16
 800a422:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800a424:	6a3b      	ldr	r3, [r7, #32]
 800a426:	6a1b      	ldr	r3, [r3, #32]
 800a428:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800a42a:	69bb      	ldr	r3, [r7, #24]
 800a42c:	f003 020f 	and.w	r2, r3, #15
 800a430:	4613      	mov	r3, r2
 800a432:	00db      	lsls	r3, r3, #3
 800a434:	4413      	add	r3, r2
 800a436:	009b      	lsls	r3, r3, #2
 800a438:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800a43c:	687a      	ldr	r2, [r7, #4]
 800a43e:	4413      	add	r3, r2
 800a440:	3304      	adds	r3, #4
 800a442:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800a444:	69bb      	ldr	r3, [r7, #24]
 800a446:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800a44a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a44e:	d124      	bne.n	800a49a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800a450:	69ba      	ldr	r2, [r7, #24]
 800a452:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800a456:	4013      	ands	r3, r2
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d035      	beq.n	800a4c8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800a45c:	697b      	ldr	r3, [r7, #20]
 800a45e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800a460:	69bb      	ldr	r3, [r7, #24]
 800a462:	091b      	lsrs	r3, r3, #4
 800a464:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800a466:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a46a:	b29b      	uxth	r3, r3
 800a46c:	461a      	mov	r2, r3
 800a46e:	6a38      	ldr	r0, [r7, #32]
 800a470:	f004 fca8 	bl	800edc4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a474:	697b      	ldr	r3, [r7, #20]
 800a476:	68da      	ldr	r2, [r3, #12]
 800a478:	69bb      	ldr	r3, [r7, #24]
 800a47a:	091b      	lsrs	r3, r3, #4
 800a47c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a480:	441a      	add	r2, r3
 800a482:	697b      	ldr	r3, [r7, #20]
 800a484:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a486:	697b      	ldr	r3, [r7, #20]
 800a488:	695a      	ldr	r2, [r3, #20]
 800a48a:	69bb      	ldr	r3, [r7, #24]
 800a48c:	091b      	lsrs	r3, r3, #4
 800a48e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a492:	441a      	add	r2, r3
 800a494:	697b      	ldr	r3, [r7, #20]
 800a496:	615a      	str	r2, [r3, #20]
 800a498:	e016      	b.n	800a4c8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800a49a:	69bb      	ldr	r3, [r7, #24]
 800a49c:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800a4a0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800a4a4:	d110      	bne.n	800a4c8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800a4ac:	2208      	movs	r2, #8
 800a4ae:	4619      	mov	r1, r3
 800a4b0:	6a38      	ldr	r0, [r7, #32]
 800a4b2:	f004 fc87 	bl	800edc4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a4b6:	697b      	ldr	r3, [r7, #20]
 800a4b8:	695a      	ldr	r2, [r3, #20]
 800a4ba:	69bb      	ldr	r3, [r7, #24]
 800a4bc:	091b      	lsrs	r3, r3, #4
 800a4be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a4c2:	441a      	add	r2, r3
 800a4c4:	697b      	ldr	r3, [r7, #20]
 800a4c6:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	699a      	ldr	r2, [r3, #24]
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	f042 0210 	orr.w	r2, r2, #16
 800a4d6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	4618      	mov	r0, r3
 800a4de:	f004 fe05 	bl	800f0ec <USB_ReadInterrupts>
 800a4e2:	4603      	mov	r3, r0
 800a4e4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800a4e8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800a4ec:	f040 80a7 	bne.w	800a63e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	f004 fe0a 	bl	800f112 <USB_ReadDevAllOutEpInterrupt>
 800a4fe:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800a500:	e099      	b.n	800a636 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800a502:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a504:	f003 0301 	and.w	r3, r3, #1
 800a508:	2b00      	cmp	r3, #0
 800a50a:	f000 808e 	beq.w	800a62a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a514:	b2d2      	uxtb	r2, r2
 800a516:	4611      	mov	r1, r2
 800a518:	4618      	mov	r0, r3
 800a51a:	f004 fe2e 	bl	800f17a <USB_ReadDevOutEPInterrupt>
 800a51e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800a520:	693b      	ldr	r3, [r7, #16]
 800a522:	f003 0301 	and.w	r3, r3, #1
 800a526:	2b00      	cmp	r3, #0
 800a528:	d00c      	beq.n	800a544 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800a52a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a52c:	015a      	lsls	r2, r3, #5
 800a52e:	69fb      	ldr	r3, [r7, #28]
 800a530:	4413      	add	r3, r2
 800a532:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a536:	461a      	mov	r2, r3
 800a538:	2301      	movs	r3, #1
 800a53a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800a53c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a53e:	6878      	ldr	r0, [r7, #4]
 800a540:	f000 fea4 	bl	800b28c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800a544:	693b      	ldr	r3, [r7, #16]
 800a546:	f003 0308 	and.w	r3, r3, #8
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d00c      	beq.n	800a568 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800a54e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a550:	015a      	lsls	r2, r3, #5
 800a552:	69fb      	ldr	r3, [r7, #28]
 800a554:	4413      	add	r3, r2
 800a556:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a55a:	461a      	mov	r2, r3
 800a55c:	2308      	movs	r3, #8
 800a55e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800a560:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a562:	6878      	ldr	r0, [r7, #4]
 800a564:	f000 ff7a 	bl	800b45c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800a568:	693b      	ldr	r3, [r7, #16]
 800a56a:	f003 0310 	and.w	r3, r3, #16
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d008      	beq.n	800a584 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800a572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a574:	015a      	lsls	r2, r3, #5
 800a576:	69fb      	ldr	r3, [r7, #28]
 800a578:	4413      	add	r3, r2
 800a57a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a57e:	461a      	mov	r2, r3
 800a580:	2310      	movs	r3, #16
 800a582:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800a584:	693b      	ldr	r3, [r7, #16]
 800a586:	f003 0302 	and.w	r3, r3, #2
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d030      	beq.n	800a5f0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800a58e:	6a3b      	ldr	r3, [r7, #32]
 800a590:	695b      	ldr	r3, [r3, #20]
 800a592:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a596:	2b80      	cmp	r3, #128	@ 0x80
 800a598:	d109      	bne.n	800a5ae <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800a59a:	69fb      	ldr	r3, [r7, #28]
 800a59c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a5a0:	685b      	ldr	r3, [r3, #4]
 800a5a2:	69fa      	ldr	r2, [r7, #28]
 800a5a4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a5a8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800a5ac:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800a5ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a5b0:	4613      	mov	r3, r2
 800a5b2:	00db      	lsls	r3, r3, #3
 800a5b4:	4413      	add	r3, r2
 800a5b6:	009b      	lsls	r3, r3, #2
 800a5b8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800a5bc:	687a      	ldr	r2, [r7, #4]
 800a5be:	4413      	add	r3, r2
 800a5c0:	3304      	adds	r3, #4
 800a5c2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800a5c4:	697b      	ldr	r3, [r7, #20]
 800a5c6:	78db      	ldrb	r3, [r3, #3]
 800a5c8:	2b01      	cmp	r3, #1
 800a5ca:	d108      	bne.n	800a5de <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800a5cc:	697b      	ldr	r3, [r7, #20]
 800a5ce:	2200      	movs	r2, #0
 800a5d0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800a5d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5d4:	b2db      	uxtb	r3, r3
 800a5d6:	4619      	mov	r1, r3
 800a5d8:	6878      	ldr	r0, [r7, #4]
 800a5da:	f007 fa1b 	bl	8011a14 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800a5de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5e0:	015a      	lsls	r2, r3, #5
 800a5e2:	69fb      	ldr	r3, [r7, #28]
 800a5e4:	4413      	add	r3, r2
 800a5e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a5ea:	461a      	mov	r2, r3
 800a5ec:	2302      	movs	r3, #2
 800a5ee:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800a5f0:	693b      	ldr	r3, [r7, #16]
 800a5f2:	f003 0320 	and.w	r3, r3, #32
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d008      	beq.n	800a60c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a5fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5fc:	015a      	lsls	r2, r3, #5
 800a5fe:	69fb      	ldr	r3, [r7, #28]
 800a600:	4413      	add	r3, r2
 800a602:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a606:	461a      	mov	r2, r3
 800a608:	2320      	movs	r3, #32
 800a60a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800a60c:	693b      	ldr	r3, [r7, #16]
 800a60e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a612:	2b00      	cmp	r3, #0
 800a614:	d009      	beq.n	800a62a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800a616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a618:	015a      	lsls	r2, r3, #5
 800a61a:	69fb      	ldr	r3, [r7, #28]
 800a61c:	4413      	add	r3, r2
 800a61e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a622:	461a      	mov	r2, r3
 800a624:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a628:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800a62a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a62c:	3301      	adds	r3, #1
 800a62e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800a630:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a632:	085b      	lsrs	r3, r3, #1
 800a634:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800a636:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a638:	2b00      	cmp	r3, #0
 800a63a:	f47f af62 	bne.w	800a502 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	4618      	mov	r0, r3
 800a644:	f004 fd52 	bl	800f0ec <USB_ReadInterrupts>
 800a648:	4603      	mov	r3, r0
 800a64a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a64e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a652:	f040 80db 	bne.w	800a80c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	4618      	mov	r0, r3
 800a65c:	f004 fd73 	bl	800f146 <USB_ReadDevAllInEpInterrupt>
 800a660:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800a662:	2300      	movs	r3, #0
 800a664:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800a666:	e0cd      	b.n	800a804 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800a668:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a66a:	f003 0301 	and.w	r3, r3, #1
 800a66e:	2b00      	cmp	r3, #0
 800a670:	f000 80c2 	beq.w	800a7f8 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a67a:	b2d2      	uxtb	r2, r2
 800a67c:	4611      	mov	r1, r2
 800a67e:	4618      	mov	r0, r3
 800a680:	f004 fd99 	bl	800f1b6 <USB_ReadDevInEPInterrupt>
 800a684:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800a686:	693b      	ldr	r3, [r7, #16]
 800a688:	f003 0301 	and.w	r3, r3, #1
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d057      	beq.n	800a740 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800a690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a692:	f003 030f 	and.w	r3, r3, #15
 800a696:	2201      	movs	r2, #1
 800a698:	fa02 f303 	lsl.w	r3, r2, r3
 800a69c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a69e:	69fb      	ldr	r3, [r7, #28]
 800a6a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a6a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	43db      	mvns	r3, r3
 800a6aa:	69f9      	ldr	r1, [r7, #28]
 800a6ac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a6b0:	4013      	ands	r3, r2
 800a6b2:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800a6b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6b6:	015a      	lsls	r2, r3, #5
 800a6b8:	69fb      	ldr	r3, [r7, #28]
 800a6ba:	4413      	add	r3, r2
 800a6bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a6c0:	461a      	mov	r2, r3
 800a6c2:	2301      	movs	r3, #1
 800a6c4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	799b      	ldrb	r3, [r3, #6]
 800a6ca:	2b01      	cmp	r3, #1
 800a6cc:	d132      	bne.n	800a734 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800a6ce:	6879      	ldr	r1, [r7, #4]
 800a6d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a6d2:	4613      	mov	r3, r2
 800a6d4:	00db      	lsls	r3, r3, #3
 800a6d6:	4413      	add	r3, r2
 800a6d8:	009b      	lsls	r3, r3, #2
 800a6da:	440b      	add	r3, r1
 800a6dc:	3320      	adds	r3, #32
 800a6de:	6819      	ldr	r1, [r3, #0]
 800a6e0:	6878      	ldr	r0, [r7, #4]
 800a6e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a6e4:	4613      	mov	r3, r2
 800a6e6:	00db      	lsls	r3, r3, #3
 800a6e8:	4413      	add	r3, r2
 800a6ea:	009b      	lsls	r3, r3, #2
 800a6ec:	4403      	add	r3, r0
 800a6ee:	331c      	adds	r3, #28
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	4419      	add	r1, r3
 800a6f4:	6878      	ldr	r0, [r7, #4]
 800a6f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a6f8:	4613      	mov	r3, r2
 800a6fa:	00db      	lsls	r3, r3, #3
 800a6fc:	4413      	add	r3, r2
 800a6fe:	009b      	lsls	r3, r3, #2
 800a700:	4403      	add	r3, r0
 800a702:	3320      	adds	r3, #32
 800a704:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800a706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d113      	bne.n	800a734 <HAL_PCD_IRQHandler+0x3a2>
 800a70c:	6879      	ldr	r1, [r7, #4]
 800a70e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a710:	4613      	mov	r3, r2
 800a712:	00db      	lsls	r3, r3, #3
 800a714:	4413      	add	r3, r2
 800a716:	009b      	lsls	r3, r3, #2
 800a718:	440b      	add	r3, r1
 800a71a:	3324      	adds	r3, #36	@ 0x24
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d108      	bne.n	800a734 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	6818      	ldr	r0, [r3, #0]
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800a72c:	461a      	mov	r2, r3
 800a72e:	2101      	movs	r1, #1
 800a730:	f004 fda0 	bl	800f274 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800a734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a736:	b2db      	uxtb	r3, r3
 800a738:	4619      	mov	r1, r3
 800a73a:	6878      	ldr	r0, [r7, #4]
 800a73c:	f007 f8ef 	bl	801191e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800a740:	693b      	ldr	r3, [r7, #16]
 800a742:	f003 0308 	and.w	r3, r3, #8
 800a746:	2b00      	cmp	r3, #0
 800a748:	d008      	beq.n	800a75c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800a74a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a74c:	015a      	lsls	r2, r3, #5
 800a74e:	69fb      	ldr	r3, [r7, #28]
 800a750:	4413      	add	r3, r2
 800a752:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a756:	461a      	mov	r2, r3
 800a758:	2308      	movs	r3, #8
 800a75a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800a75c:	693b      	ldr	r3, [r7, #16]
 800a75e:	f003 0310 	and.w	r3, r3, #16
 800a762:	2b00      	cmp	r3, #0
 800a764:	d008      	beq.n	800a778 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800a766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a768:	015a      	lsls	r2, r3, #5
 800a76a:	69fb      	ldr	r3, [r7, #28]
 800a76c:	4413      	add	r3, r2
 800a76e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a772:	461a      	mov	r2, r3
 800a774:	2310      	movs	r3, #16
 800a776:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800a778:	693b      	ldr	r3, [r7, #16]
 800a77a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d008      	beq.n	800a794 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800a782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a784:	015a      	lsls	r2, r3, #5
 800a786:	69fb      	ldr	r3, [r7, #28]
 800a788:	4413      	add	r3, r2
 800a78a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a78e:	461a      	mov	r2, r3
 800a790:	2340      	movs	r3, #64	@ 0x40
 800a792:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800a794:	693b      	ldr	r3, [r7, #16]
 800a796:	f003 0302 	and.w	r3, r3, #2
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d023      	beq.n	800a7e6 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800a79e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a7a0:	6a38      	ldr	r0, [r7, #32]
 800a7a2:	f003 fd87 	bl	800e2b4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800a7a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a7a8:	4613      	mov	r3, r2
 800a7aa:	00db      	lsls	r3, r3, #3
 800a7ac:	4413      	add	r3, r2
 800a7ae:	009b      	lsls	r3, r3, #2
 800a7b0:	3310      	adds	r3, #16
 800a7b2:	687a      	ldr	r2, [r7, #4]
 800a7b4:	4413      	add	r3, r2
 800a7b6:	3304      	adds	r3, #4
 800a7b8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800a7ba:	697b      	ldr	r3, [r7, #20]
 800a7bc:	78db      	ldrb	r3, [r3, #3]
 800a7be:	2b01      	cmp	r3, #1
 800a7c0:	d108      	bne.n	800a7d4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800a7c2:	697b      	ldr	r3, [r7, #20]
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800a7c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7ca:	b2db      	uxtb	r3, r3
 800a7cc:	4619      	mov	r1, r3
 800a7ce:	6878      	ldr	r0, [r7, #4]
 800a7d0:	f007 f932 	bl	8011a38 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800a7d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7d6:	015a      	lsls	r2, r3, #5
 800a7d8:	69fb      	ldr	r3, [r7, #28]
 800a7da:	4413      	add	r3, r2
 800a7dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a7e0:	461a      	mov	r2, r3
 800a7e2:	2302      	movs	r3, #2
 800a7e4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800a7e6:	693b      	ldr	r3, [r7, #16]
 800a7e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d003      	beq.n	800a7f8 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800a7f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a7f2:	6878      	ldr	r0, [r7, #4]
 800a7f4:	f000 fcbd 	bl	800b172 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800a7f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7fa:	3301      	adds	r3, #1
 800a7fc:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800a7fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a800:	085b      	lsrs	r3, r3, #1
 800a802:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800a804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a806:	2b00      	cmp	r3, #0
 800a808:	f47f af2e 	bne.w	800a668 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	4618      	mov	r0, r3
 800a812:	f004 fc6b 	bl	800f0ec <USB_ReadInterrupts>
 800a816:	4603      	mov	r3, r0
 800a818:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a81c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a820:	d122      	bne.n	800a868 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800a822:	69fb      	ldr	r3, [r7, #28]
 800a824:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a828:	685b      	ldr	r3, [r3, #4]
 800a82a:	69fa      	ldr	r2, [r7, #28]
 800a82c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a830:	f023 0301 	bic.w	r3, r3, #1
 800a834:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800a83c:	2b01      	cmp	r3, #1
 800a83e:	d108      	bne.n	800a852 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	2200      	movs	r2, #0
 800a844:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800a848:	2100      	movs	r1, #0
 800a84a:	6878      	ldr	r0, [r7, #4]
 800a84c:	f000 fea4 	bl	800b598 <HAL_PCDEx_LPM_Callback>
 800a850:	e002      	b.n	800a858 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800a852:	6878      	ldr	r0, [r7, #4]
 800a854:	f007 f8d0 	bl	80119f8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	695a      	ldr	r2, [r3, #20]
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800a866:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	4618      	mov	r0, r3
 800a86e:	f004 fc3d 	bl	800f0ec <USB_ReadInterrupts>
 800a872:	4603      	mov	r3, r0
 800a874:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a878:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a87c:	d112      	bne.n	800a8a4 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800a87e:	69fb      	ldr	r3, [r7, #28]
 800a880:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a884:	689b      	ldr	r3, [r3, #8]
 800a886:	f003 0301 	and.w	r3, r3, #1
 800a88a:	2b01      	cmp	r3, #1
 800a88c:	d102      	bne.n	800a894 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800a88e:	6878      	ldr	r0, [r7, #4]
 800a890:	f007 f88c 	bl	80119ac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	695a      	ldr	r2, [r3, #20]
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800a8a2:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	f004 fc1f 	bl	800f0ec <USB_ReadInterrupts>
 800a8ae:	4603      	mov	r3, r0
 800a8b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a8b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a8b8:	f040 80b7 	bne.w	800aa2a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800a8bc:	69fb      	ldr	r3, [r7, #28]
 800a8be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a8c2:	685b      	ldr	r3, [r3, #4]
 800a8c4:	69fa      	ldr	r2, [r7, #28]
 800a8c6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a8ca:	f023 0301 	bic.w	r3, r3, #1
 800a8ce:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	2110      	movs	r1, #16
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	f003 fcec 	bl	800e2b4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a8dc:	2300      	movs	r3, #0
 800a8de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a8e0:	e046      	b.n	800a970 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800a8e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8e4:	015a      	lsls	r2, r3, #5
 800a8e6:	69fb      	ldr	r3, [r7, #28]
 800a8e8:	4413      	add	r3, r2
 800a8ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a8ee:	461a      	mov	r2, r3
 800a8f0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a8f4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a8f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8f8:	015a      	lsls	r2, r3, #5
 800a8fa:	69fb      	ldr	r3, [r7, #28]
 800a8fc:	4413      	add	r3, r2
 800a8fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a906:	0151      	lsls	r1, r2, #5
 800a908:	69fa      	ldr	r2, [r7, #28]
 800a90a:	440a      	add	r2, r1
 800a90c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a910:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a914:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800a916:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a918:	015a      	lsls	r2, r3, #5
 800a91a:	69fb      	ldr	r3, [r7, #28]
 800a91c:	4413      	add	r3, r2
 800a91e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a922:	461a      	mov	r2, r3
 800a924:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a928:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a92a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a92c:	015a      	lsls	r2, r3, #5
 800a92e:	69fb      	ldr	r3, [r7, #28]
 800a930:	4413      	add	r3, r2
 800a932:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a93a:	0151      	lsls	r1, r2, #5
 800a93c:	69fa      	ldr	r2, [r7, #28]
 800a93e:	440a      	add	r2, r1
 800a940:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a944:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a948:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a94a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a94c:	015a      	lsls	r2, r3, #5
 800a94e:	69fb      	ldr	r3, [r7, #28]
 800a950:	4413      	add	r3, r2
 800a952:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a95a:	0151      	lsls	r1, r2, #5
 800a95c:	69fa      	ldr	r2, [r7, #28]
 800a95e:	440a      	add	r2, r1
 800a960:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a964:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a968:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a96a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a96c:	3301      	adds	r3, #1
 800a96e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	791b      	ldrb	r3, [r3, #4]
 800a974:	461a      	mov	r2, r3
 800a976:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a978:	4293      	cmp	r3, r2
 800a97a:	d3b2      	bcc.n	800a8e2 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800a97c:	69fb      	ldr	r3, [r7, #28]
 800a97e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a982:	69db      	ldr	r3, [r3, #28]
 800a984:	69fa      	ldr	r2, [r7, #28]
 800a986:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a98a:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800a98e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	7bdb      	ldrb	r3, [r3, #15]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d016      	beq.n	800a9c6 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800a998:	69fb      	ldr	r3, [r7, #28]
 800a99a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a99e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a9a2:	69fa      	ldr	r2, [r7, #28]
 800a9a4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a9a8:	f043 030b 	orr.w	r3, r3, #11
 800a9ac:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800a9b0:	69fb      	ldr	r3, [r7, #28]
 800a9b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a9b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a9b8:	69fa      	ldr	r2, [r7, #28]
 800a9ba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a9be:	f043 030b 	orr.w	r3, r3, #11
 800a9c2:	6453      	str	r3, [r2, #68]	@ 0x44
 800a9c4:	e015      	b.n	800a9f2 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800a9c6:	69fb      	ldr	r3, [r7, #28]
 800a9c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a9cc:	695b      	ldr	r3, [r3, #20]
 800a9ce:	69fa      	ldr	r2, [r7, #28]
 800a9d0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a9d4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800a9d8:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800a9dc:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800a9de:	69fb      	ldr	r3, [r7, #28]
 800a9e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a9e4:	691b      	ldr	r3, [r3, #16]
 800a9e6:	69fa      	ldr	r2, [r7, #28]
 800a9e8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a9ec:	f043 030b 	orr.w	r3, r3, #11
 800a9f0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800a9f2:	69fb      	ldr	r3, [r7, #28]
 800a9f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	69fa      	ldr	r2, [r7, #28]
 800a9fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800aa00:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800aa04:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	6818      	ldr	r0, [r3, #0]
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800aa14:	461a      	mov	r2, r3
 800aa16:	f004 fc2d 	bl	800f274 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	695a      	ldr	r2, [r3, #20]
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800aa28:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	4618      	mov	r0, r3
 800aa30:	f004 fb5c 	bl	800f0ec <USB_ReadInterrupts>
 800aa34:	4603      	mov	r3, r0
 800aa36:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800aa3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aa3e:	d123      	bne.n	800aa88 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	4618      	mov	r0, r3
 800aa46:	f004 fbf2 	bl	800f22e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	4618      	mov	r0, r3
 800aa50:	f003 fca9 	bl	800e3a6 <USB_GetDevSpeed>
 800aa54:	4603      	mov	r3, r0
 800aa56:	461a      	mov	r2, r3
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681c      	ldr	r4, [r3, #0]
 800aa60:	f001 f9d6 	bl	800be10 <HAL_RCC_GetHCLKFreq>
 800aa64:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800aa6a:	461a      	mov	r2, r3
 800aa6c:	4620      	mov	r0, r4
 800aa6e:	f003 f9ad 	bl	800ddcc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800aa72:	6878      	ldr	r0, [r7, #4]
 800aa74:	f006 ff7b 	bl	801196e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	695a      	ldr	r2, [r3, #20]
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800aa86:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	f004 fb2d 	bl	800f0ec <USB_ReadInterrupts>
 800aa92:	4603      	mov	r3, r0
 800aa94:	f003 0308 	and.w	r3, r3, #8
 800aa98:	2b08      	cmp	r3, #8
 800aa9a:	d10a      	bne.n	800aab2 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800aa9c:	6878      	ldr	r0, [r7, #4]
 800aa9e:	f006 ff58 	bl	8011952 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	695a      	ldr	r2, [r3, #20]
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	f002 0208 	and.w	r2, r2, #8
 800aab0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	4618      	mov	r0, r3
 800aab8:	f004 fb18 	bl	800f0ec <USB_ReadInterrupts>
 800aabc:	4603      	mov	r3, r0
 800aabe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aac2:	2b80      	cmp	r3, #128	@ 0x80
 800aac4:	d123      	bne.n	800ab0e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800aac6:	6a3b      	ldr	r3, [r7, #32]
 800aac8:	699b      	ldr	r3, [r3, #24]
 800aaca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800aace:	6a3b      	ldr	r3, [r7, #32]
 800aad0:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800aad2:	2301      	movs	r3, #1
 800aad4:	627b      	str	r3, [r7, #36]	@ 0x24
 800aad6:	e014      	b.n	800ab02 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800aad8:	6879      	ldr	r1, [r7, #4]
 800aada:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aadc:	4613      	mov	r3, r2
 800aade:	00db      	lsls	r3, r3, #3
 800aae0:	4413      	add	r3, r2
 800aae2:	009b      	lsls	r3, r3, #2
 800aae4:	440b      	add	r3, r1
 800aae6:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800aaea:	781b      	ldrb	r3, [r3, #0]
 800aaec:	2b01      	cmp	r3, #1
 800aaee:	d105      	bne.n	800aafc <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800aaf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaf2:	b2db      	uxtb	r3, r3
 800aaf4:	4619      	mov	r1, r3
 800aaf6:	6878      	ldr	r0, [r7, #4]
 800aaf8:	f000 fb0a 	bl	800b110 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800aafc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aafe:	3301      	adds	r3, #1
 800ab00:	627b      	str	r3, [r7, #36]	@ 0x24
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	791b      	ldrb	r3, [r3, #4]
 800ab06:	461a      	mov	r2, r3
 800ab08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab0a:	4293      	cmp	r3, r2
 800ab0c:	d3e4      	bcc.n	800aad8 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	4618      	mov	r0, r3
 800ab14:	f004 faea 	bl	800f0ec <USB_ReadInterrupts>
 800ab18:	4603      	mov	r3, r0
 800ab1a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ab1e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ab22:	d13c      	bne.n	800ab9e <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800ab24:	2301      	movs	r3, #1
 800ab26:	627b      	str	r3, [r7, #36]	@ 0x24
 800ab28:	e02b      	b.n	800ab82 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800ab2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab2c:	015a      	lsls	r2, r3, #5
 800ab2e:	69fb      	ldr	r3, [r7, #28]
 800ab30:	4413      	add	r3, r2
 800ab32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800ab3a:	6879      	ldr	r1, [r7, #4]
 800ab3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ab3e:	4613      	mov	r3, r2
 800ab40:	00db      	lsls	r3, r3, #3
 800ab42:	4413      	add	r3, r2
 800ab44:	009b      	lsls	r3, r3, #2
 800ab46:	440b      	add	r3, r1
 800ab48:	3318      	adds	r3, #24
 800ab4a:	781b      	ldrb	r3, [r3, #0]
 800ab4c:	2b01      	cmp	r3, #1
 800ab4e:	d115      	bne.n	800ab7c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800ab50:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	da12      	bge.n	800ab7c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800ab56:	6879      	ldr	r1, [r7, #4]
 800ab58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ab5a:	4613      	mov	r3, r2
 800ab5c:	00db      	lsls	r3, r3, #3
 800ab5e:	4413      	add	r3, r2
 800ab60:	009b      	lsls	r3, r3, #2
 800ab62:	440b      	add	r3, r1
 800ab64:	3317      	adds	r3, #23
 800ab66:	2201      	movs	r2, #1
 800ab68:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800ab6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab6c:	b2db      	uxtb	r3, r3
 800ab6e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800ab72:	b2db      	uxtb	r3, r3
 800ab74:	4619      	mov	r1, r3
 800ab76:	6878      	ldr	r0, [r7, #4]
 800ab78:	f000 faca 	bl	800b110 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800ab7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab7e:	3301      	adds	r3, #1
 800ab80:	627b      	str	r3, [r7, #36]	@ 0x24
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	791b      	ldrb	r3, [r3, #4]
 800ab86:	461a      	mov	r2, r3
 800ab88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab8a:	4293      	cmp	r3, r2
 800ab8c:	d3cd      	bcc.n	800ab2a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	695a      	ldr	r2, [r3, #20]
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800ab9c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	4618      	mov	r0, r3
 800aba4:	f004 faa2 	bl	800f0ec <USB_ReadInterrupts>
 800aba8:	4603      	mov	r3, r0
 800abaa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800abae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800abb2:	d156      	bne.n	800ac62 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800abb4:	2301      	movs	r3, #1
 800abb6:	627b      	str	r3, [r7, #36]	@ 0x24
 800abb8:	e045      	b.n	800ac46 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800abba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abbc:	015a      	lsls	r2, r3, #5
 800abbe:	69fb      	ldr	r3, [r7, #28]
 800abc0:	4413      	add	r3, r2
 800abc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800abca:	6879      	ldr	r1, [r7, #4]
 800abcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800abce:	4613      	mov	r3, r2
 800abd0:	00db      	lsls	r3, r3, #3
 800abd2:	4413      	add	r3, r2
 800abd4:	009b      	lsls	r3, r3, #2
 800abd6:	440b      	add	r3, r1
 800abd8:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800abdc:	781b      	ldrb	r3, [r3, #0]
 800abde:	2b01      	cmp	r3, #1
 800abe0:	d12e      	bne.n	800ac40 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800abe2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	da2b      	bge.n	800ac40 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800abe8:	69bb      	ldr	r3, [r7, #24]
 800abea:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800abf4:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800abf8:	429a      	cmp	r2, r3
 800abfa:	d121      	bne.n	800ac40 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800abfc:	6879      	ldr	r1, [r7, #4]
 800abfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ac00:	4613      	mov	r3, r2
 800ac02:	00db      	lsls	r3, r3, #3
 800ac04:	4413      	add	r3, r2
 800ac06:	009b      	lsls	r3, r3, #2
 800ac08:	440b      	add	r3, r1
 800ac0a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800ac0e:	2201      	movs	r2, #1
 800ac10:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800ac12:	6a3b      	ldr	r3, [r7, #32]
 800ac14:	699b      	ldr	r3, [r3, #24]
 800ac16:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800ac1a:	6a3b      	ldr	r3, [r7, #32]
 800ac1c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800ac1e:	6a3b      	ldr	r3, [r7, #32]
 800ac20:	695b      	ldr	r3, [r3, #20]
 800ac22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d10a      	bne.n	800ac40 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800ac2a:	69fb      	ldr	r3, [r7, #28]
 800ac2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac30:	685b      	ldr	r3, [r3, #4]
 800ac32:	69fa      	ldr	r2, [r7, #28]
 800ac34:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ac38:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800ac3c:	6053      	str	r3, [r2, #4]
            break;
 800ac3e:	e008      	b.n	800ac52 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800ac40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac42:	3301      	adds	r3, #1
 800ac44:	627b      	str	r3, [r7, #36]	@ 0x24
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	791b      	ldrb	r3, [r3, #4]
 800ac4a:	461a      	mov	r2, r3
 800ac4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac4e:	4293      	cmp	r3, r2
 800ac50:	d3b3      	bcc.n	800abba <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	695a      	ldr	r2, [r3, #20]
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800ac60:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	4618      	mov	r0, r3
 800ac68:	f004 fa40 	bl	800f0ec <USB_ReadInterrupts>
 800ac6c:	4603      	mov	r3, r0
 800ac6e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800ac72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ac76:	d10a      	bne.n	800ac8e <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800ac78:	6878      	ldr	r0, [r7, #4]
 800ac7a:	f006 feef 	bl	8011a5c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	695a      	ldr	r2, [r3, #20]
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800ac8c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	4618      	mov	r0, r3
 800ac94:	f004 fa2a 	bl	800f0ec <USB_ReadInterrupts>
 800ac98:	4603      	mov	r3, r0
 800ac9a:	f003 0304 	and.w	r3, r3, #4
 800ac9e:	2b04      	cmp	r3, #4
 800aca0:	d115      	bne.n	800acce <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	685b      	ldr	r3, [r3, #4]
 800aca8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800acaa:	69bb      	ldr	r3, [r7, #24]
 800acac:	f003 0304 	and.w	r3, r3, #4
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d002      	beq.n	800acba <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800acb4:	6878      	ldr	r0, [r7, #4]
 800acb6:	f006 fedf 	bl	8011a78 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	6859      	ldr	r1, [r3, #4]
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	69ba      	ldr	r2, [r7, #24]
 800acc6:	430a      	orrs	r2, r1
 800acc8:	605a      	str	r2, [r3, #4]
 800acca:	e000      	b.n	800acce <HAL_PCD_IRQHandler+0x93c>
      return;
 800accc:	bf00      	nop
    }
  }
}
 800acce:	3734      	adds	r7, #52	@ 0x34
 800acd0:	46bd      	mov	sp, r7
 800acd2:	bd90      	pop	{r4, r7, pc}

0800acd4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b082      	sub	sp, #8
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
 800acdc:	460b      	mov	r3, r1
 800acde:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800ace6:	2b01      	cmp	r3, #1
 800ace8:	d101      	bne.n	800acee <HAL_PCD_SetAddress+0x1a>
 800acea:	2302      	movs	r3, #2
 800acec:	e012      	b.n	800ad14 <HAL_PCD_SetAddress+0x40>
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	2201      	movs	r2, #1
 800acf2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	78fa      	ldrb	r2, [r7, #3]
 800acfa:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	78fa      	ldrb	r2, [r7, #3]
 800ad02:	4611      	mov	r1, r2
 800ad04:	4618      	mov	r0, r3
 800ad06:	f004 f989 	bl	800f01c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	2200      	movs	r2, #0
 800ad0e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800ad12:	2300      	movs	r3, #0
}
 800ad14:	4618      	mov	r0, r3
 800ad16:	3708      	adds	r7, #8
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	bd80      	pop	{r7, pc}

0800ad1c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800ad1c:	b580      	push	{r7, lr}
 800ad1e:	b084      	sub	sp, #16
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
 800ad24:	4608      	mov	r0, r1
 800ad26:	4611      	mov	r1, r2
 800ad28:	461a      	mov	r2, r3
 800ad2a:	4603      	mov	r3, r0
 800ad2c:	70fb      	strb	r3, [r7, #3]
 800ad2e:	460b      	mov	r3, r1
 800ad30:	803b      	strh	r3, [r7, #0]
 800ad32:	4613      	mov	r3, r2
 800ad34:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800ad36:	2300      	movs	r3, #0
 800ad38:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800ad3a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	da0f      	bge.n	800ad62 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ad42:	78fb      	ldrb	r3, [r7, #3]
 800ad44:	f003 020f 	and.w	r2, r3, #15
 800ad48:	4613      	mov	r3, r2
 800ad4a:	00db      	lsls	r3, r3, #3
 800ad4c:	4413      	add	r3, r2
 800ad4e:	009b      	lsls	r3, r3, #2
 800ad50:	3310      	adds	r3, #16
 800ad52:	687a      	ldr	r2, [r7, #4]
 800ad54:	4413      	add	r3, r2
 800ad56:	3304      	adds	r3, #4
 800ad58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	2201      	movs	r2, #1
 800ad5e:	705a      	strb	r2, [r3, #1]
 800ad60:	e00f      	b.n	800ad82 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ad62:	78fb      	ldrb	r3, [r7, #3]
 800ad64:	f003 020f 	and.w	r2, r3, #15
 800ad68:	4613      	mov	r3, r2
 800ad6a:	00db      	lsls	r3, r3, #3
 800ad6c:	4413      	add	r3, r2
 800ad6e:	009b      	lsls	r3, r3, #2
 800ad70:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800ad74:	687a      	ldr	r2, [r7, #4]
 800ad76:	4413      	add	r3, r2
 800ad78:	3304      	adds	r3, #4
 800ad7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	2200      	movs	r2, #0
 800ad80:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800ad82:	78fb      	ldrb	r3, [r7, #3]
 800ad84:	f003 030f 	and.w	r3, r3, #15
 800ad88:	b2da      	uxtb	r2, r3
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800ad8e:	883b      	ldrh	r3, [r7, #0]
 800ad90:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	78ba      	ldrb	r2, [r7, #2]
 800ad9c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	785b      	ldrb	r3, [r3, #1]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d004      	beq.n	800adb0 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	781b      	ldrb	r3, [r3, #0]
 800adaa:	461a      	mov	r2, r3
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800adb0:	78bb      	ldrb	r3, [r7, #2]
 800adb2:	2b02      	cmp	r3, #2
 800adb4:	d102      	bne.n	800adbc <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	2200      	movs	r2, #0
 800adba:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800adc2:	2b01      	cmp	r3, #1
 800adc4:	d101      	bne.n	800adca <HAL_PCD_EP_Open+0xae>
 800adc6:	2302      	movs	r3, #2
 800adc8:	e00e      	b.n	800ade8 <HAL_PCD_EP_Open+0xcc>
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	2201      	movs	r2, #1
 800adce:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	68f9      	ldr	r1, [r7, #12]
 800add8:	4618      	mov	r0, r3
 800adda:	f003 fb09 	bl	800e3f0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	2200      	movs	r2, #0
 800ade2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800ade6:	7afb      	ldrb	r3, [r7, #11]
}
 800ade8:	4618      	mov	r0, r3
 800adea:	3710      	adds	r7, #16
 800adec:	46bd      	mov	sp, r7
 800adee:	bd80      	pop	{r7, pc}

0800adf0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800adf0:	b580      	push	{r7, lr}
 800adf2:	b084      	sub	sp, #16
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
 800adf8:	460b      	mov	r3, r1
 800adfa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800adfc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	da0f      	bge.n	800ae24 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ae04:	78fb      	ldrb	r3, [r7, #3]
 800ae06:	f003 020f 	and.w	r2, r3, #15
 800ae0a:	4613      	mov	r3, r2
 800ae0c:	00db      	lsls	r3, r3, #3
 800ae0e:	4413      	add	r3, r2
 800ae10:	009b      	lsls	r3, r3, #2
 800ae12:	3310      	adds	r3, #16
 800ae14:	687a      	ldr	r2, [r7, #4]
 800ae16:	4413      	add	r3, r2
 800ae18:	3304      	adds	r3, #4
 800ae1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	2201      	movs	r2, #1
 800ae20:	705a      	strb	r2, [r3, #1]
 800ae22:	e00f      	b.n	800ae44 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ae24:	78fb      	ldrb	r3, [r7, #3]
 800ae26:	f003 020f 	and.w	r2, r3, #15
 800ae2a:	4613      	mov	r3, r2
 800ae2c:	00db      	lsls	r3, r3, #3
 800ae2e:	4413      	add	r3, r2
 800ae30:	009b      	lsls	r3, r3, #2
 800ae32:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800ae36:	687a      	ldr	r2, [r7, #4]
 800ae38:	4413      	add	r3, r2
 800ae3a:	3304      	adds	r3, #4
 800ae3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	2200      	movs	r2, #0
 800ae42:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800ae44:	78fb      	ldrb	r3, [r7, #3]
 800ae46:	f003 030f 	and.w	r3, r3, #15
 800ae4a:	b2da      	uxtb	r2, r3
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800ae56:	2b01      	cmp	r3, #1
 800ae58:	d101      	bne.n	800ae5e <HAL_PCD_EP_Close+0x6e>
 800ae5a:	2302      	movs	r3, #2
 800ae5c:	e00e      	b.n	800ae7c <HAL_PCD_EP_Close+0x8c>
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	2201      	movs	r2, #1
 800ae62:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	68f9      	ldr	r1, [r7, #12]
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	f003 fb47 	bl	800e500 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	2200      	movs	r2, #0
 800ae76:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800ae7a:	2300      	movs	r3, #0
}
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	3710      	adds	r7, #16
 800ae80:	46bd      	mov	sp, r7
 800ae82:	bd80      	pop	{r7, pc}

0800ae84 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b086      	sub	sp, #24
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	60f8      	str	r0, [r7, #12]
 800ae8c:	607a      	str	r2, [r7, #4]
 800ae8e:	603b      	str	r3, [r7, #0]
 800ae90:	460b      	mov	r3, r1
 800ae92:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ae94:	7afb      	ldrb	r3, [r7, #11]
 800ae96:	f003 020f 	and.w	r2, r3, #15
 800ae9a:	4613      	mov	r3, r2
 800ae9c:	00db      	lsls	r3, r3, #3
 800ae9e:	4413      	add	r3, r2
 800aea0:	009b      	lsls	r3, r3, #2
 800aea2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800aea6:	68fa      	ldr	r2, [r7, #12]
 800aea8:	4413      	add	r3, r2
 800aeaa:	3304      	adds	r3, #4
 800aeac:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800aeae:	697b      	ldr	r3, [r7, #20]
 800aeb0:	687a      	ldr	r2, [r7, #4]
 800aeb2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800aeb4:	697b      	ldr	r3, [r7, #20]
 800aeb6:	683a      	ldr	r2, [r7, #0]
 800aeb8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800aeba:	697b      	ldr	r3, [r7, #20]
 800aebc:	2200      	movs	r2, #0
 800aebe:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800aec0:	697b      	ldr	r3, [r7, #20]
 800aec2:	2200      	movs	r2, #0
 800aec4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800aec6:	7afb      	ldrb	r3, [r7, #11]
 800aec8:	f003 030f 	and.w	r3, r3, #15
 800aecc:	b2da      	uxtb	r2, r3
 800aece:	697b      	ldr	r3, [r7, #20]
 800aed0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	799b      	ldrb	r3, [r3, #6]
 800aed6:	2b01      	cmp	r3, #1
 800aed8:	d102      	bne.n	800aee0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800aeda:	687a      	ldr	r2, [r7, #4]
 800aedc:	697b      	ldr	r3, [r7, #20]
 800aede:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	6818      	ldr	r0, [r3, #0]
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	799b      	ldrb	r3, [r3, #6]
 800aee8:	461a      	mov	r2, r3
 800aeea:	6979      	ldr	r1, [r7, #20]
 800aeec:	f003 fbe4 	bl	800e6b8 <USB_EPStartXfer>

  return HAL_OK;
 800aef0:	2300      	movs	r3, #0
}
 800aef2:	4618      	mov	r0, r3
 800aef4:	3718      	adds	r7, #24
 800aef6:	46bd      	mov	sp, r7
 800aef8:	bd80      	pop	{r7, pc}

0800aefa <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800aefa:	b480      	push	{r7}
 800aefc:	b083      	sub	sp, #12
 800aefe:	af00      	add	r7, sp, #0
 800af00:	6078      	str	r0, [r7, #4]
 800af02:	460b      	mov	r3, r1
 800af04:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800af06:	78fb      	ldrb	r3, [r7, #3]
 800af08:	f003 020f 	and.w	r2, r3, #15
 800af0c:	6879      	ldr	r1, [r7, #4]
 800af0e:	4613      	mov	r3, r2
 800af10:	00db      	lsls	r3, r3, #3
 800af12:	4413      	add	r3, r2
 800af14:	009b      	lsls	r3, r3, #2
 800af16:	440b      	add	r3, r1
 800af18:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800af1c:	681b      	ldr	r3, [r3, #0]
}
 800af1e:	4618      	mov	r0, r3
 800af20:	370c      	adds	r7, #12
 800af22:	46bd      	mov	sp, r7
 800af24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af28:	4770      	bx	lr

0800af2a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800af2a:	b580      	push	{r7, lr}
 800af2c:	b086      	sub	sp, #24
 800af2e:	af00      	add	r7, sp, #0
 800af30:	60f8      	str	r0, [r7, #12]
 800af32:	607a      	str	r2, [r7, #4]
 800af34:	603b      	str	r3, [r7, #0]
 800af36:	460b      	mov	r3, r1
 800af38:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800af3a:	7afb      	ldrb	r3, [r7, #11]
 800af3c:	f003 020f 	and.w	r2, r3, #15
 800af40:	4613      	mov	r3, r2
 800af42:	00db      	lsls	r3, r3, #3
 800af44:	4413      	add	r3, r2
 800af46:	009b      	lsls	r3, r3, #2
 800af48:	3310      	adds	r3, #16
 800af4a:	68fa      	ldr	r2, [r7, #12]
 800af4c:	4413      	add	r3, r2
 800af4e:	3304      	adds	r3, #4
 800af50:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800af52:	697b      	ldr	r3, [r7, #20]
 800af54:	687a      	ldr	r2, [r7, #4]
 800af56:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800af58:	697b      	ldr	r3, [r7, #20]
 800af5a:	683a      	ldr	r2, [r7, #0]
 800af5c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800af5e:	697b      	ldr	r3, [r7, #20]
 800af60:	2200      	movs	r2, #0
 800af62:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800af64:	697b      	ldr	r3, [r7, #20]
 800af66:	2201      	movs	r2, #1
 800af68:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800af6a:	7afb      	ldrb	r3, [r7, #11]
 800af6c:	f003 030f 	and.w	r3, r3, #15
 800af70:	b2da      	uxtb	r2, r3
 800af72:	697b      	ldr	r3, [r7, #20]
 800af74:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	799b      	ldrb	r3, [r3, #6]
 800af7a:	2b01      	cmp	r3, #1
 800af7c:	d102      	bne.n	800af84 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800af7e:	687a      	ldr	r2, [r7, #4]
 800af80:	697b      	ldr	r3, [r7, #20]
 800af82:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	6818      	ldr	r0, [r3, #0]
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	799b      	ldrb	r3, [r3, #6]
 800af8c:	461a      	mov	r2, r3
 800af8e:	6979      	ldr	r1, [r7, #20]
 800af90:	f003 fb92 	bl	800e6b8 <USB_EPStartXfer>

  return HAL_OK;
 800af94:	2300      	movs	r3, #0
}
 800af96:	4618      	mov	r0, r3
 800af98:	3718      	adds	r7, #24
 800af9a:	46bd      	mov	sp, r7
 800af9c:	bd80      	pop	{r7, pc}

0800af9e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800af9e:	b580      	push	{r7, lr}
 800afa0:	b084      	sub	sp, #16
 800afa2:	af00      	add	r7, sp, #0
 800afa4:	6078      	str	r0, [r7, #4]
 800afa6:	460b      	mov	r3, r1
 800afa8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800afaa:	78fb      	ldrb	r3, [r7, #3]
 800afac:	f003 030f 	and.w	r3, r3, #15
 800afb0:	687a      	ldr	r2, [r7, #4]
 800afb2:	7912      	ldrb	r2, [r2, #4]
 800afb4:	4293      	cmp	r3, r2
 800afb6:	d901      	bls.n	800afbc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800afb8:	2301      	movs	r3, #1
 800afba:	e04f      	b.n	800b05c <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800afbc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	da0f      	bge.n	800afe4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800afc4:	78fb      	ldrb	r3, [r7, #3]
 800afc6:	f003 020f 	and.w	r2, r3, #15
 800afca:	4613      	mov	r3, r2
 800afcc:	00db      	lsls	r3, r3, #3
 800afce:	4413      	add	r3, r2
 800afd0:	009b      	lsls	r3, r3, #2
 800afd2:	3310      	adds	r3, #16
 800afd4:	687a      	ldr	r2, [r7, #4]
 800afd6:	4413      	add	r3, r2
 800afd8:	3304      	adds	r3, #4
 800afda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	2201      	movs	r2, #1
 800afe0:	705a      	strb	r2, [r3, #1]
 800afe2:	e00d      	b.n	800b000 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800afe4:	78fa      	ldrb	r2, [r7, #3]
 800afe6:	4613      	mov	r3, r2
 800afe8:	00db      	lsls	r3, r3, #3
 800afea:	4413      	add	r3, r2
 800afec:	009b      	lsls	r3, r3, #2
 800afee:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800aff2:	687a      	ldr	r2, [r7, #4]
 800aff4:	4413      	add	r3, r2
 800aff6:	3304      	adds	r3, #4
 800aff8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	2200      	movs	r2, #0
 800affe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	2201      	movs	r2, #1
 800b004:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b006:	78fb      	ldrb	r3, [r7, #3]
 800b008:	f003 030f 	and.w	r3, r3, #15
 800b00c:	b2da      	uxtb	r2, r3
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800b018:	2b01      	cmp	r3, #1
 800b01a:	d101      	bne.n	800b020 <HAL_PCD_EP_SetStall+0x82>
 800b01c:	2302      	movs	r3, #2
 800b01e:	e01d      	b.n	800b05c <HAL_PCD_EP_SetStall+0xbe>
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	2201      	movs	r2, #1
 800b024:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	68f9      	ldr	r1, [r7, #12]
 800b02e:	4618      	mov	r0, r3
 800b030:	f003 ff20 	bl	800ee74 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800b034:	78fb      	ldrb	r3, [r7, #3]
 800b036:	f003 030f 	and.w	r3, r3, #15
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d109      	bne.n	800b052 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	6818      	ldr	r0, [r3, #0]
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	7999      	ldrb	r1, [r3, #6]
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800b04c:	461a      	mov	r2, r3
 800b04e:	f004 f911 	bl	800f274 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	2200      	movs	r2, #0
 800b056:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800b05a:	2300      	movs	r3, #0
}
 800b05c:	4618      	mov	r0, r3
 800b05e:	3710      	adds	r7, #16
 800b060:	46bd      	mov	sp, r7
 800b062:	bd80      	pop	{r7, pc}

0800b064 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b064:	b580      	push	{r7, lr}
 800b066:	b084      	sub	sp, #16
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
 800b06c:	460b      	mov	r3, r1
 800b06e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800b070:	78fb      	ldrb	r3, [r7, #3]
 800b072:	f003 030f 	and.w	r3, r3, #15
 800b076:	687a      	ldr	r2, [r7, #4]
 800b078:	7912      	ldrb	r2, [r2, #4]
 800b07a:	4293      	cmp	r3, r2
 800b07c:	d901      	bls.n	800b082 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800b07e:	2301      	movs	r3, #1
 800b080:	e042      	b.n	800b108 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800b082:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b086:	2b00      	cmp	r3, #0
 800b088:	da0f      	bge.n	800b0aa <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b08a:	78fb      	ldrb	r3, [r7, #3]
 800b08c:	f003 020f 	and.w	r2, r3, #15
 800b090:	4613      	mov	r3, r2
 800b092:	00db      	lsls	r3, r3, #3
 800b094:	4413      	add	r3, r2
 800b096:	009b      	lsls	r3, r3, #2
 800b098:	3310      	adds	r3, #16
 800b09a:	687a      	ldr	r2, [r7, #4]
 800b09c:	4413      	add	r3, r2
 800b09e:	3304      	adds	r3, #4
 800b0a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	2201      	movs	r2, #1
 800b0a6:	705a      	strb	r2, [r3, #1]
 800b0a8:	e00f      	b.n	800b0ca <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b0aa:	78fb      	ldrb	r3, [r7, #3]
 800b0ac:	f003 020f 	and.w	r2, r3, #15
 800b0b0:	4613      	mov	r3, r2
 800b0b2:	00db      	lsls	r3, r3, #3
 800b0b4:	4413      	add	r3, r2
 800b0b6:	009b      	lsls	r3, r3, #2
 800b0b8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800b0bc:	687a      	ldr	r2, [r7, #4]
 800b0be:	4413      	add	r3, r2
 800b0c0:	3304      	adds	r3, #4
 800b0c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	2200      	movs	r2, #0
 800b0ce:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b0d0:	78fb      	ldrb	r3, [r7, #3]
 800b0d2:	f003 030f 	and.w	r3, r3, #15
 800b0d6:	b2da      	uxtb	r2, r3
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800b0e2:	2b01      	cmp	r3, #1
 800b0e4:	d101      	bne.n	800b0ea <HAL_PCD_EP_ClrStall+0x86>
 800b0e6:	2302      	movs	r3, #2
 800b0e8:	e00e      	b.n	800b108 <HAL_PCD_EP_ClrStall+0xa4>
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	2201      	movs	r2, #1
 800b0ee:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	68f9      	ldr	r1, [r7, #12]
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	f003 ff29 	bl	800ef50 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	2200      	movs	r2, #0
 800b102:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800b106:	2300      	movs	r3, #0
}
 800b108:	4618      	mov	r0, r3
 800b10a:	3710      	adds	r7, #16
 800b10c:	46bd      	mov	sp, r7
 800b10e:	bd80      	pop	{r7, pc}

0800b110 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b110:	b580      	push	{r7, lr}
 800b112:	b084      	sub	sp, #16
 800b114:	af00      	add	r7, sp, #0
 800b116:	6078      	str	r0, [r7, #4]
 800b118:	460b      	mov	r3, r1
 800b11a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800b11c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b120:	2b00      	cmp	r3, #0
 800b122:	da0c      	bge.n	800b13e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b124:	78fb      	ldrb	r3, [r7, #3]
 800b126:	f003 020f 	and.w	r2, r3, #15
 800b12a:	4613      	mov	r3, r2
 800b12c:	00db      	lsls	r3, r3, #3
 800b12e:	4413      	add	r3, r2
 800b130:	009b      	lsls	r3, r3, #2
 800b132:	3310      	adds	r3, #16
 800b134:	687a      	ldr	r2, [r7, #4]
 800b136:	4413      	add	r3, r2
 800b138:	3304      	adds	r3, #4
 800b13a:	60fb      	str	r3, [r7, #12]
 800b13c:	e00c      	b.n	800b158 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b13e:	78fb      	ldrb	r3, [r7, #3]
 800b140:	f003 020f 	and.w	r2, r3, #15
 800b144:	4613      	mov	r3, r2
 800b146:	00db      	lsls	r3, r3, #3
 800b148:	4413      	add	r3, r2
 800b14a:	009b      	lsls	r3, r3, #2
 800b14c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800b150:	687a      	ldr	r2, [r7, #4]
 800b152:	4413      	add	r3, r2
 800b154:	3304      	adds	r3, #4
 800b156:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	68f9      	ldr	r1, [r7, #12]
 800b15e:	4618      	mov	r0, r3
 800b160:	f003 fd48 	bl	800ebf4 <USB_EPStopXfer>
 800b164:	4603      	mov	r3, r0
 800b166:	72fb      	strb	r3, [r7, #11]

  return ret;
 800b168:	7afb      	ldrb	r3, [r7, #11]
}
 800b16a:	4618      	mov	r0, r3
 800b16c:	3710      	adds	r7, #16
 800b16e:	46bd      	mov	sp, r7
 800b170:	bd80      	pop	{r7, pc}

0800b172 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800b172:	b580      	push	{r7, lr}
 800b174:	b08a      	sub	sp, #40	@ 0x28
 800b176:	af02      	add	r7, sp, #8
 800b178:	6078      	str	r0, [r7, #4]
 800b17a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b182:	697b      	ldr	r3, [r7, #20]
 800b184:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800b186:	683a      	ldr	r2, [r7, #0]
 800b188:	4613      	mov	r3, r2
 800b18a:	00db      	lsls	r3, r3, #3
 800b18c:	4413      	add	r3, r2
 800b18e:	009b      	lsls	r3, r3, #2
 800b190:	3310      	adds	r3, #16
 800b192:	687a      	ldr	r2, [r7, #4]
 800b194:	4413      	add	r3, r2
 800b196:	3304      	adds	r3, #4
 800b198:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	695a      	ldr	r2, [r3, #20]
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	691b      	ldr	r3, [r3, #16]
 800b1a2:	429a      	cmp	r2, r3
 800b1a4:	d901      	bls.n	800b1aa <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800b1a6:	2301      	movs	r3, #1
 800b1a8:	e06b      	b.n	800b282 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	691a      	ldr	r2, [r3, #16]
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	695b      	ldr	r3, [r3, #20]
 800b1b2:	1ad3      	subs	r3, r2, r3
 800b1b4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	689b      	ldr	r3, [r3, #8]
 800b1ba:	69fa      	ldr	r2, [r7, #28]
 800b1bc:	429a      	cmp	r2, r3
 800b1be:	d902      	bls.n	800b1c6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	689b      	ldr	r3, [r3, #8]
 800b1c4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800b1c6:	69fb      	ldr	r3, [r7, #28]
 800b1c8:	3303      	adds	r3, #3
 800b1ca:	089b      	lsrs	r3, r3, #2
 800b1cc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800b1ce:	e02a      	b.n	800b226 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	691a      	ldr	r2, [r3, #16]
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	695b      	ldr	r3, [r3, #20]
 800b1d8:	1ad3      	subs	r3, r2, r3
 800b1da:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	689b      	ldr	r3, [r3, #8]
 800b1e0:	69fa      	ldr	r2, [r7, #28]
 800b1e2:	429a      	cmp	r2, r3
 800b1e4:	d902      	bls.n	800b1ec <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	689b      	ldr	r3, [r3, #8]
 800b1ea:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800b1ec:	69fb      	ldr	r3, [r7, #28]
 800b1ee:	3303      	adds	r3, #3
 800b1f0:	089b      	lsrs	r3, r3, #2
 800b1f2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	68d9      	ldr	r1, [r3, #12]
 800b1f8:	683b      	ldr	r3, [r7, #0]
 800b1fa:	b2da      	uxtb	r2, r3
 800b1fc:	69fb      	ldr	r3, [r7, #28]
 800b1fe:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800b204:	9300      	str	r3, [sp, #0]
 800b206:	4603      	mov	r3, r0
 800b208:	6978      	ldr	r0, [r7, #20]
 800b20a:	f003 fd9d 	bl	800ed48 <USB_WritePacket>

    ep->xfer_buff  += len;
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	68da      	ldr	r2, [r3, #12]
 800b212:	69fb      	ldr	r3, [r7, #28]
 800b214:	441a      	add	r2, r3
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	695a      	ldr	r2, [r3, #20]
 800b21e:	69fb      	ldr	r3, [r7, #28]
 800b220:	441a      	add	r2, r3
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800b226:	683b      	ldr	r3, [r7, #0]
 800b228:	015a      	lsls	r2, r3, #5
 800b22a:	693b      	ldr	r3, [r7, #16]
 800b22c:	4413      	add	r3, r2
 800b22e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b232:	699b      	ldr	r3, [r3, #24]
 800b234:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800b236:	69ba      	ldr	r2, [r7, #24]
 800b238:	429a      	cmp	r2, r3
 800b23a:	d809      	bhi.n	800b250 <PCD_WriteEmptyTxFifo+0xde>
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	695a      	ldr	r2, [r3, #20]
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800b244:	429a      	cmp	r2, r3
 800b246:	d203      	bcs.n	800b250 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	691b      	ldr	r3, [r3, #16]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d1bf      	bne.n	800b1d0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	691a      	ldr	r2, [r3, #16]
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	695b      	ldr	r3, [r3, #20]
 800b258:	429a      	cmp	r2, r3
 800b25a:	d811      	bhi.n	800b280 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800b25c:	683b      	ldr	r3, [r7, #0]
 800b25e:	f003 030f 	and.w	r3, r3, #15
 800b262:	2201      	movs	r2, #1
 800b264:	fa02 f303 	lsl.w	r3, r2, r3
 800b268:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800b26a:	693b      	ldr	r3, [r7, #16]
 800b26c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b270:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b272:	68bb      	ldr	r3, [r7, #8]
 800b274:	43db      	mvns	r3, r3
 800b276:	6939      	ldr	r1, [r7, #16]
 800b278:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b27c:	4013      	ands	r3, r2
 800b27e:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800b280:	2300      	movs	r3, #0
}
 800b282:	4618      	mov	r0, r3
 800b284:	3720      	adds	r7, #32
 800b286:	46bd      	mov	sp, r7
 800b288:	bd80      	pop	{r7, pc}
	...

0800b28c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800b28c:	b580      	push	{r7, lr}
 800b28e:	b088      	sub	sp, #32
 800b290:	af00      	add	r7, sp, #0
 800b292:	6078      	str	r0, [r7, #4]
 800b294:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b29c:	69fb      	ldr	r3, [r7, #28]
 800b29e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800b2a0:	69fb      	ldr	r3, [r7, #28]
 800b2a2:	333c      	adds	r3, #60	@ 0x3c
 800b2a4:	3304      	adds	r3, #4
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800b2aa:	683b      	ldr	r3, [r7, #0]
 800b2ac:	015a      	lsls	r2, r3, #5
 800b2ae:	69bb      	ldr	r3, [r7, #24]
 800b2b0:	4413      	add	r3, r2
 800b2b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b2b6:	689b      	ldr	r3, [r3, #8]
 800b2b8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	799b      	ldrb	r3, [r3, #6]
 800b2be:	2b01      	cmp	r3, #1
 800b2c0:	d17b      	bne.n	800b3ba <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800b2c2:	693b      	ldr	r3, [r7, #16]
 800b2c4:	f003 0308 	and.w	r3, r3, #8
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d015      	beq.n	800b2f8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b2cc:	697b      	ldr	r3, [r7, #20]
 800b2ce:	4a61      	ldr	r2, [pc, #388]	@ (800b454 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800b2d0:	4293      	cmp	r3, r2
 800b2d2:	f240 80b9 	bls.w	800b448 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800b2d6:	693b      	ldr	r3, [r7, #16]
 800b2d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	f000 80b3 	beq.w	800b448 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800b2e2:	683b      	ldr	r3, [r7, #0]
 800b2e4:	015a      	lsls	r2, r3, #5
 800b2e6:	69bb      	ldr	r3, [r7, #24]
 800b2e8:	4413      	add	r3, r2
 800b2ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b2ee:	461a      	mov	r2, r3
 800b2f0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b2f4:	6093      	str	r3, [r2, #8]
 800b2f6:	e0a7      	b.n	800b448 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800b2f8:	693b      	ldr	r3, [r7, #16]
 800b2fa:	f003 0320 	and.w	r3, r3, #32
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d009      	beq.n	800b316 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800b302:	683b      	ldr	r3, [r7, #0]
 800b304:	015a      	lsls	r2, r3, #5
 800b306:	69bb      	ldr	r3, [r7, #24]
 800b308:	4413      	add	r3, r2
 800b30a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b30e:	461a      	mov	r2, r3
 800b310:	2320      	movs	r3, #32
 800b312:	6093      	str	r3, [r2, #8]
 800b314:	e098      	b.n	800b448 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800b316:	693b      	ldr	r3, [r7, #16]
 800b318:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	f040 8093 	bne.w	800b448 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b322:	697b      	ldr	r3, [r7, #20]
 800b324:	4a4b      	ldr	r2, [pc, #300]	@ (800b454 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800b326:	4293      	cmp	r3, r2
 800b328:	d90f      	bls.n	800b34a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800b32a:	693b      	ldr	r3, [r7, #16]
 800b32c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b330:	2b00      	cmp	r3, #0
 800b332:	d00a      	beq.n	800b34a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800b334:	683b      	ldr	r3, [r7, #0]
 800b336:	015a      	lsls	r2, r3, #5
 800b338:	69bb      	ldr	r3, [r7, #24]
 800b33a:	4413      	add	r3, r2
 800b33c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b340:	461a      	mov	r2, r3
 800b342:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b346:	6093      	str	r3, [r2, #8]
 800b348:	e07e      	b.n	800b448 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800b34a:	683a      	ldr	r2, [r7, #0]
 800b34c:	4613      	mov	r3, r2
 800b34e:	00db      	lsls	r3, r3, #3
 800b350:	4413      	add	r3, r2
 800b352:	009b      	lsls	r3, r3, #2
 800b354:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800b358:	687a      	ldr	r2, [r7, #4]
 800b35a:	4413      	add	r3, r2
 800b35c:	3304      	adds	r3, #4
 800b35e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	6a1a      	ldr	r2, [r3, #32]
 800b364:	683b      	ldr	r3, [r7, #0]
 800b366:	0159      	lsls	r1, r3, #5
 800b368:	69bb      	ldr	r3, [r7, #24]
 800b36a:	440b      	add	r3, r1
 800b36c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b370:	691b      	ldr	r3, [r3, #16]
 800b372:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b376:	1ad2      	subs	r2, r2, r3
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800b37c:	683b      	ldr	r3, [r7, #0]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d114      	bne.n	800b3ac <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	691b      	ldr	r3, [r3, #16]
 800b386:	2b00      	cmp	r3, #0
 800b388:	d109      	bne.n	800b39e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	6818      	ldr	r0, [r3, #0]
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800b394:	461a      	mov	r2, r3
 800b396:	2101      	movs	r1, #1
 800b398:	f003 ff6c 	bl	800f274 <USB_EP0_OutStart>
 800b39c:	e006      	b.n	800b3ac <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	68da      	ldr	r2, [r3, #12]
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	695b      	ldr	r3, [r3, #20]
 800b3a6:	441a      	add	r2, r3
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800b3ac:	683b      	ldr	r3, [r7, #0]
 800b3ae:	b2db      	uxtb	r3, r3
 800b3b0:	4619      	mov	r1, r3
 800b3b2:	6878      	ldr	r0, [r7, #4]
 800b3b4:	f006 fa98 	bl	80118e8 <HAL_PCD_DataOutStageCallback>
 800b3b8:	e046      	b.n	800b448 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800b3ba:	697b      	ldr	r3, [r7, #20]
 800b3bc:	4a26      	ldr	r2, [pc, #152]	@ (800b458 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800b3be:	4293      	cmp	r3, r2
 800b3c0:	d124      	bne.n	800b40c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800b3c2:	693b      	ldr	r3, [r7, #16]
 800b3c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d00a      	beq.n	800b3e2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800b3cc:	683b      	ldr	r3, [r7, #0]
 800b3ce:	015a      	lsls	r2, r3, #5
 800b3d0:	69bb      	ldr	r3, [r7, #24]
 800b3d2:	4413      	add	r3, r2
 800b3d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b3d8:	461a      	mov	r2, r3
 800b3da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b3de:	6093      	str	r3, [r2, #8]
 800b3e0:	e032      	b.n	800b448 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800b3e2:	693b      	ldr	r3, [r7, #16]
 800b3e4:	f003 0320 	and.w	r3, r3, #32
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d008      	beq.n	800b3fe <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800b3ec:	683b      	ldr	r3, [r7, #0]
 800b3ee:	015a      	lsls	r2, r3, #5
 800b3f0:	69bb      	ldr	r3, [r7, #24]
 800b3f2:	4413      	add	r3, r2
 800b3f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b3f8:	461a      	mov	r2, r3
 800b3fa:	2320      	movs	r3, #32
 800b3fc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800b3fe:	683b      	ldr	r3, [r7, #0]
 800b400:	b2db      	uxtb	r3, r3
 800b402:	4619      	mov	r1, r3
 800b404:	6878      	ldr	r0, [r7, #4]
 800b406:	f006 fa6f 	bl	80118e8 <HAL_PCD_DataOutStageCallback>
 800b40a:	e01d      	b.n	800b448 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800b40c:	683b      	ldr	r3, [r7, #0]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d114      	bne.n	800b43c <PCD_EP_OutXfrComplete_int+0x1b0>
 800b412:	6879      	ldr	r1, [r7, #4]
 800b414:	683a      	ldr	r2, [r7, #0]
 800b416:	4613      	mov	r3, r2
 800b418:	00db      	lsls	r3, r3, #3
 800b41a:	4413      	add	r3, r2
 800b41c:	009b      	lsls	r3, r3, #2
 800b41e:	440b      	add	r3, r1
 800b420:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d108      	bne.n	800b43c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	6818      	ldr	r0, [r3, #0]
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800b434:	461a      	mov	r2, r3
 800b436:	2100      	movs	r1, #0
 800b438:	f003 ff1c 	bl	800f274 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800b43c:	683b      	ldr	r3, [r7, #0]
 800b43e:	b2db      	uxtb	r3, r3
 800b440:	4619      	mov	r1, r3
 800b442:	6878      	ldr	r0, [r7, #4]
 800b444:	f006 fa50 	bl	80118e8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800b448:	2300      	movs	r3, #0
}
 800b44a:	4618      	mov	r0, r3
 800b44c:	3720      	adds	r7, #32
 800b44e:	46bd      	mov	sp, r7
 800b450:	bd80      	pop	{r7, pc}
 800b452:	bf00      	nop
 800b454:	4f54300a 	.word	0x4f54300a
 800b458:	4f54310a 	.word	0x4f54310a

0800b45c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800b45c:	b580      	push	{r7, lr}
 800b45e:	b086      	sub	sp, #24
 800b460:	af00      	add	r7, sp, #0
 800b462:	6078      	str	r0, [r7, #4]
 800b464:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b46c:	697b      	ldr	r3, [r7, #20]
 800b46e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800b470:	697b      	ldr	r3, [r7, #20]
 800b472:	333c      	adds	r3, #60	@ 0x3c
 800b474:	3304      	adds	r3, #4
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800b47a:	683b      	ldr	r3, [r7, #0]
 800b47c:	015a      	lsls	r2, r3, #5
 800b47e:	693b      	ldr	r3, [r7, #16]
 800b480:	4413      	add	r3, r2
 800b482:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b486:	689b      	ldr	r3, [r3, #8]
 800b488:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	4a15      	ldr	r2, [pc, #84]	@ (800b4e4 <PCD_EP_OutSetupPacket_int+0x88>)
 800b48e:	4293      	cmp	r3, r2
 800b490:	d90e      	bls.n	800b4b0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800b492:	68bb      	ldr	r3, [r7, #8]
 800b494:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d009      	beq.n	800b4b0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800b49c:	683b      	ldr	r3, [r7, #0]
 800b49e:	015a      	lsls	r2, r3, #5
 800b4a0:	693b      	ldr	r3, [r7, #16]
 800b4a2:	4413      	add	r3, r2
 800b4a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b4a8:	461a      	mov	r2, r3
 800b4aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b4ae:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800b4b0:	6878      	ldr	r0, [r7, #4]
 800b4b2:	f006 fa07 	bl	80118c4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	4a0a      	ldr	r2, [pc, #40]	@ (800b4e4 <PCD_EP_OutSetupPacket_int+0x88>)
 800b4ba:	4293      	cmp	r3, r2
 800b4bc:	d90c      	bls.n	800b4d8 <PCD_EP_OutSetupPacket_int+0x7c>
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	799b      	ldrb	r3, [r3, #6]
 800b4c2:	2b01      	cmp	r3, #1
 800b4c4:	d108      	bne.n	800b4d8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	6818      	ldr	r0, [r3, #0]
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800b4d0:	461a      	mov	r2, r3
 800b4d2:	2101      	movs	r1, #1
 800b4d4:	f003 fece 	bl	800f274 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800b4d8:	2300      	movs	r3, #0
}
 800b4da:	4618      	mov	r0, r3
 800b4dc:	3718      	adds	r7, #24
 800b4de:	46bd      	mov	sp, r7
 800b4e0:	bd80      	pop	{r7, pc}
 800b4e2:	bf00      	nop
 800b4e4:	4f54300a 	.word	0x4f54300a

0800b4e8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800b4e8:	b480      	push	{r7}
 800b4ea:	b085      	sub	sp, #20
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	6078      	str	r0, [r7, #4]
 800b4f0:	460b      	mov	r3, r1
 800b4f2:	70fb      	strb	r3, [r7, #3]
 800b4f4:	4613      	mov	r3, r2
 800b4f6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4fe:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800b500:	78fb      	ldrb	r3, [r7, #3]
 800b502:	2b00      	cmp	r3, #0
 800b504:	d107      	bne.n	800b516 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800b506:	883b      	ldrh	r3, [r7, #0]
 800b508:	0419      	lsls	r1, r3, #16
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	68ba      	ldr	r2, [r7, #8]
 800b510:	430a      	orrs	r2, r1
 800b512:	629a      	str	r2, [r3, #40]	@ 0x28
 800b514:	e028      	b.n	800b568 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b51c:	0c1b      	lsrs	r3, r3, #16
 800b51e:	68ba      	ldr	r2, [r7, #8]
 800b520:	4413      	add	r3, r2
 800b522:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800b524:	2300      	movs	r3, #0
 800b526:	73fb      	strb	r3, [r7, #15]
 800b528:	e00d      	b.n	800b546 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681a      	ldr	r2, [r3, #0]
 800b52e:	7bfb      	ldrb	r3, [r7, #15]
 800b530:	3340      	adds	r3, #64	@ 0x40
 800b532:	009b      	lsls	r3, r3, #2
 800b534:	4413      	add	r3, r2
 800b536:	685b      	ldr	r3, [r3, #4]
 800b538:	0c1b      	lsrs	r3, r3, #16
 800b53a:	68ba      	ldr	r2, [r7, #8]
 800b53c:	4413      	add	r3, r2
 800b53e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800b540:	7bfb      	ldrb	r3, [r7, #15]
 800b542:	3301      	adds	r3, #1
 800b544:	73fb      	strb	r3, [r7, #15]
 800b546:	7bfa      	ldrb	r2, [r7, #15]
 800b548:	78fb      	ldrb	r3, [r7, #3]
 800b54a:	3b01      	subs	r3, #1
 800b54c:	429a      	cmp	r2, r3
 800b54e:	d3ec      	bcc.n	800b52a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800b550:	883b      	ldrh	r3, [r7, #0]
 800b552:	0418      	lsls	r0, r3, #16
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	6819      	ldr	r1, [r3, #0]
 800b558:	78fb      	ldrb	r3, [r7, #3]
 800b55a:	3b01      	subs	r3, #1
 800b55c:	68ba      	ldr	r2, [r7, #8]
 800b55e:	4302      	orrs	r2, r0
 800b560:	3340      	adds	r3, #64	@ 0x40
 800b562:	009b      	lsls	r3, r3, #2
 800b564:	440b      	add	r3, r1
 800b566:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800b568:	2300      	movs	r3, #0
}
 800b56a:	4618      	mov	r0, r3
 800b56c:	3714      	adds	r7, #20
 800b56e:	46bd      	mov	sp, r7
 800b570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b574:	4770      	bx	lr

0800b576 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800b576:	b480      	push	{r7}
 800b578:	b083      	sub	sp, #12
 800b57a:	af00      	add	r7, sp, #0
 800b57c:	6078      	str	r0, [r7, #4]
 800b57e:	460b      	mov	r3, r1
 800b580:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	887a      	ldrh	r2, [r7, #2]
 800b588:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800b58a:	2300      	movs	r3, #0
}
 800b58c:	4618      	mov	r0, r3
 800b58e:	370c      	adds	r7, #12
 800b590:	46bd      	mov	sp, r7
 800b592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b596:	4770      	bx	lr

0800b598 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800b598:	b480      	push	{r7}
 800b59a:	b083      	sub	sp, #12
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	6078      	str	r0, [r7, #4]
 800b5a0:	460b      	mov	r3, r1
 800b5a2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800b5a4:	bf00      	nop
 800b5a6:	370c      	adds	r7, #12
 800b5a8:	46bd      	mov	sp, r7
 800b5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ae:	4770      	bx	lr

0800b5b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b5b0:	b580      	push	{r7, lr}
 800b5b2:	b086      	sub	sp, #24
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d101      	bne.n	800b5c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b5be:	2301      	movs	r3, #1
 800b5c0:	e267      	b.n	800ba92 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	f003 0301 	and.w	r3, r3, #1
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d075      	beq.n	800b6ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800b5ce:	4b88      	ldr	r3, [pc, #544]	@ (800b7f0 <HAL_RCC_OscConfig+0x240>)
 800b5d0:	689b      	ldr	r3, [r3, #8]
 800b5d2:	f003 030c 	and.w	r3, r3, #12
 800b5d6:	2b04      	cmp	r3, #4
 800b5d8:	d00c      	beq.n	800b5f4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b5da:	4b85      	ldr	r3, [pc, #532]	@ (800b7f0 <HAL_RCC_OscConfig+0x240>)
 800b5dc:	689b      	ldr	r3, [r3, #8]
 800b5de:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800b5e2:	2b08      	cmp	r3, #8
 800b5e4:	d112      	bne.n	800b60c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b5e6:	4b82      	ldr	r3, [pc, #520]	@ (800b7f0 <HAL_RCC_OscConfig+0x240>)
 800b5e8:	685b      	ldr	r3, [r3, #4]
 800b5ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b5ee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b5f2:	d10b      	bne.n	800b60c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b5f4:	4b7e      	ldr	r3, [pc, #504]	@ (800b7f0 <HAL_RCC_OscConfig+0x240>)
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d05b      	beq.n	800b6b8 <HAL_RCC_OscConfig+0x108>
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	685b      	ldr	r3, [r3, #4]
 800b604:	2b00      	cmp	r3, #0
 800b606:	d157      	bne.n	800b6b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800b608:	2301      	movs	r3, #1
 800b60a:	e242      	b.n	800ba92 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	685b      	ldr	r3, [r3, #4]
 800b610:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b614:	d106      	bne.n	800b624 <HAL_RCC_OscConfig+0x74>
 800b616:	4b76      	ldr	r3, [pc, #472]	@ (800b7f0 <HAL_RCC_OscConfig+0x240>)
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	4a75      	ldr	r2, [pc, #468]	@ (800b7f0 <HAL_RCC_OscConfig+0x240>)
 800b61c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b620:	6013      	str	r3, [r2, #0]
 800b622:	e01d      	b.n	800b660 <HAL_RCC_OscConfig+0xb0>
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	685b      	ldr	r3, [r3, #4]
 800b628:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b62c:	d10c      	bne.n	800b648 <HAL_RCC_OscConfig+0x98>
 800b62e:	4b70      	ldr	r3, [pc, #448]	@ (800b7f0 <HAL_RCC_OscConfig+0x240>)
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	4a6f      	ldr	r2, [pc, #444]	@ (800b7f0 <HAL_RCC_OscConfig+0x240>)
 800b634:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b638:	6013      	str	r3, [r2, #0]
 800b63a:	4b6d      	ldr	r3, [pc, #436]	@ (800b7f0 <HAL_RCC_OscConfig+0x240>)
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	4a6c      	ldr	r2, [pc, #432]	@ (800b7f0 <HAL_RCC_OscConfig+0x240>)
 800b640:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b644:	6013      	str	r3, [r2, #0]
 800b646:	e00b      	b.n	800b660 <HAL_RCC_OscConfig+0xb0>
 800b648:	4b69      	ldr	r3, [pc, #420]	@ (800b7f0 <HAL_RCC_OscConfig+0x240>)
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	4a68      	ldr	r2, [pc, #416]	@ (800b7f0 <HAL_RCC_OscConfig+0x240>)
 800b64e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b652:	6013      	str	r3, [r2, #0]
 800b654:	4b66      	ldr	r3, [pc, #408]	@ (800b7f0 <HAL_RCC_OscConfig+0x240>)
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	4a65      	ldr	r2, [pc, #404]	@ (800b7f0 <HAL_RCC_OscConfig+0x240>)
 800b65a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b65e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	685b      	ldr	r3, [r3, #4]
 800b664:	2b00      	cmp	r3, #0
 800b666:	d013      	beq.n	800b690 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b668:	f7f9 fd14 	bl	8005094 <HAL_GetTick>
 800b66c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b66e:	e008      	b.n	800b682 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b670:	f7f9 fd10 	bl	8005094 <HAL_GetTick>
 800b674:	4602      	mov	r2, r0
 800b676:	693b      	ldr	r3, [r7, #16]
 800b678:	1ad3      	subs	r3, r2, r3
 800b67a:	2b64      	cmp	r3, #100	@ 0x64
 800b67c:	d901      	bls.n	800b682 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800b67e:	2303      	movs	r3, #3
 800b680:	e207      	b.n	800ba92 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b682:	4b5b      	ldr	r3, [pc, #364]	@ (800b7f0 <HAL_RCC_OscConfig+0x240>)
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d0f0      	beq.n	800b670 <HAL_RCC_OscConfig+0xc0>
 800b68e:	e014      	b.n	800b6ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b690:	f7f9 fd00 	bl	8005094 <HAL_GetTick>
 800b694:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b696:	e008      	b.n	800b6aa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b698:	f7f9 fcfc 	bl	8005094 <HAL_GetTick>
 800b69c:	4602      	mov	r2, r0
 800b69e:	693b      	ldr	r3, [r7, #16]
 800b6a0:	1ad3      	subs	r3, r2, r3
 800b6a2:	2b64      	cmp	r3, #100	@ 0x64
 800b6a4:	d901      	bls.n	800b6aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b6a6:	2303      	movs	r3, #3
 800b6a8:	e1f3      	b.n	800ba92 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b6aa:	4b51      	ldr	r3, [pc, #324]	@ (800b7f0 <HAL_RCC_OscConfig+0x240>)
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d1f0      	bne.n	800b698 <HAL_RCC_OscConfig+0xe8>
 800b6b6:	e000      	b.n	800b6ba <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b6b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	f003 0302 	and.w	r3, r3, #2
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d063      	beq.n	800b78e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800b6c6:	4b4a      	ldr	r3, [pc, #296]	@ (800b7f0 <HAL_RCC_OscConfig+0x240>)
 800b6c8:	689b      	ldr	r3, [r3, #8]
 800b6ca:	f003 030c 	and.w	r3, r3, #12
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d00b      	beq.n	800b6ea <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b6d2:	4b47      	ldr	r3, [pc, #284]	@ (800b7f0 <HAL_RCC_OscConfig+0x240>)
 800b6d4:	689b      	ldr	r3, [r3, #8]
 800b6d6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800b6da:	2b08      	cmp	r3, #8
 800b6dc:	d11c      	bne.n	800b718 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b6de:	4b44      	ldr	r3, [pc, #272]	@ (800b7f0 <HAL_RCC_OscConfig+0x240>)
 800b6e0:	685b      	ldr	r3, [r3, #4]
 800b6e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d116      	bne.n	800b718 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b6ea:	4b41      	ldr	r3, [pc, #260]	@ (800b7f0 <HAL_RCC_OscConfig+0x240>)
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	f003 0302 	and.w	r3, r3, #2
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d005      	beq.n	800b702 <HAL_RCC_OscConfig+0x152>
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	68db      	ldr	r3, [r3, #12]
 800b6fa:	2b01      	cmp	r3, #1
 800b6fc:	d001      	beq.n	800b702 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800b6fe:	2301      	movs	r3, #1
 800b700:	e1c7      	b.n	800ba92 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b702:	4b3b      	ldr	r3, [pc, #236]	@ (800b7f0 <HAL_RCC_OscConfig+0x240>)
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	691b      	ldr	r3, [r3, #16]
 800b70e:	00db      	lsls	r3, r3, #3
 800b710:	4937      	ldr	r1, [pc, #220]	@ (800b7f0 <HAL_RCC_OscConfig+0x240>)
 800b712:	4313      	orrs	r3, r2
 800b714:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b716:	e03a      	b.n	800b78e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	68db      	ldr	r3, [r3, #12]
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d020      	beq.n	800b762 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b720:	4b34      	ldr	r3, [pc, #208]	@ (800b7f4 <HAL_RCC_OscConfig+0x244>)
 800b722:	2201      	movs	r2, #1
 800b724:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b726:	f7f9 fcb5 	bl	8005094 <HAL_GetTick>
 800b72a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b72c:	e008      	b.n	800b740 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b72e:	f7f9 fcb1 	bl	8005094 <HAL_GetTick>
 800b732:	4602      	mov	r2, r0
 800b734:	693b      	ldr	r3, [r7, #16]
 800b736:	1ad3      	subs	r3, r2, r3
 800b738:	2b02      	cmp	r3, #2
 800b73a:	d901      	bls.n	800b740 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800b73c:	2303      	movs	r3, #3
 800b73e:	e1a8      	b.n	800ba92 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b740:	4b2b      	ldr	r3, [pc, #172]	@ (800b7f0 <HAL_RCC_OscConfig+0x240>)
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	f003 0302 	and.w	r3, r3, #2
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d0f0      	beq.n	800b72e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b74c:	4b28      	ldr	r3, [pc, #160]	@ (800b7f0 <HAL_RCC_OscConfig+0x240>)
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	691b      	ldr	r3, [r3, #16]
 800b758:	00db      	lsls	r3, r3, #3
 800b75a:	4925      	ldr	r1, [pc, #148]	@ (800b7f0 <HAL_RCC_OscConfig+0x240>)
 800b75c:	4313      	orrs	r3, r2
 800b75e:	600b      	str	r3, [r1, #0]
 800b760:	e015      	b.n	800b78e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b762:	4b24      	ldr	r3, [pc, #144]	@ (800b7f4 <HAL_RCC_OscConfig+0x244>)
 800b764:	2200      	movs	r2, #0
 800b766:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b768:	f7f9 fc94 	bl	8005094 <HAL_GetTick>
 800b76c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b76e:	e008      	b.n	800b782 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b770:	f7f9 fc90 	bl	8005094 <HAL_GetTick>
 800b774:	4602      	mov	r2, r0
 800b776:	693b      	ldr	r3, [r7, #16]
 800b778:	1ad3      	subs	r3, r2, r3
 800b77a:	2b02      	cmp	r3, #2
 800b77c:	d901      	bls.n	800b782 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800b77e:	2303      	movs	r3, #3
 800b780:	e187      	b.n	800ba92 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b782:	4b1b      	ldr	r3, [pc, #108]	@ (800b7f0 <HAL_RCC_OscConfig+0x240>)
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	f003 0302 	and.w	r3, r3, #2
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d1f0      	bne.n	800b770 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	f003 0308 	and.w	r3, r3, #8
 800b796:	2b00      	cmp	r3, #0
 800b798:	d036      	beq.n	800b808 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	695b      	ldr	r3, [r3, #20]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d016      	beq.n	800b7d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b7a2:	4b15      	ldr	r3, [pc, #84]	@ (800b7f8 <HAL_RCC_OscConfig+0x248>)
 800b7a4:	2201      	movs	r2, #1
 800b7a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b7a8:	f7f9 fc74 	bl	8005094 <HAL_GetTick>
 800b7ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b7ae:	e008      	b.n	800b7c2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b7b0:	f7f9 fc70 	bl	8005094 <HAL_GetTick>
 800b7b4:	4602      	mov	r2, r0
 800b7b6:	693b      	ldr	r3, [r7, #16]
 800b7b8:	1ad3      	subs	r3, r2, r3
 800b7ba:	2b02      	cmp	r3, #2
 800b7bc:	d901      	bls.n	800b7c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800b7be:	2303      	movs	r3, #3
 800b7c0:	e167      	b.n	800ba92 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b7c2:	4b0b      	ldr	r3, [pc, #44]	@ (800b7f0 <HAL_RCC_OscConfig+0x240>)
 800b7c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b7c6:	f003 0302 	and.w	r3, r3, #2
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d0f0      	beq.n	800b7b0 <HAL_RCC_OscConfig+0x200>
 800b7ce:	e01b      	b.n	800b808 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b7d0:	4b09      	ldr	r3, [pc, #36]	@ (800b7f8 <HAL_RCC_OscConfig+0x248>)
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b7d6:	f7f9 fc5d 	bl	8005094 <HAL_GetTick>
 800b7da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b7dc:	e00e      	b.n	800b7fc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b7de:	f7f9 fc59 	bl	8005094 <HAL_GetTick>
 800b7e2:	4602      	mov	r2, r0
 800b7e4:	693b      	ldr	r3, [r7, #16]
 800b7e6:	1ad3      	subs	r3, r2, r3
 800b7e8:	2b02      	cmp	r3, #2
 800b7ea:	d907      	bls.n	800b7fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800b7ec:	2303      	movs	r3, #3
 800b7ee:	e150      	b.n	800ba92 <HAL_RCC_OscConfig+0x4e2>
 800b7f0:	40023800 	.word	0x40023800
 800b7f4:	42470000 	.word	0x42470000
 800b7f8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b7fc:	4b88      	ldr	r3, [pc, #544]	@ (800ba20 <HAL_RCC_OscConfig+0x470>)
 800b7fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b800:	f003 0302 	and.w	r3, r3, #2
 800b804:	2b00      	cmp	r3, #0
 800b806:	d1ea      	bne.n	800b7de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	f003 0304 	and.w	r3, r3, #4
 800b810:	2b00      	cmp	r3, #0
 800b812:	f000 8097 	beq.w	800b944 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b816:	2300      	movs	r3, #0
 800b818:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b81a:	4b81      	ldr	r3, [pc, #516]	@ (800ba20 <HAL_RCC_OscConfig+0x470>)
 800b81c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b81e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b822:	2b00      	cmp	r3, #0
 800b824:	d10f      	bne.n	800b846 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b826:	2300      	movs	r3, #0
 800b828:	60bb      	str	r3, [r7, #8]
 800b82a:	4b7d      	ldr	r3, [pc, #500]	@ (800ba20 <HAL_RCC_OscConfig+0x470>)
 800b82c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b82e:	4a7c      	ldr	r2, [pc, #496]	@ (800ba20 <HAL_RCC_OscConfig+0x470>)
 800b830:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b834:	6413      	str	r3, [r2, #64]	@ 0x40
 800b836:	4b7a      	ldr	r3, [pc, #488]	@ (800ba20 <HAL_RCC_OscConfig+0x470>)
 800b838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b83a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b83e:	60bb      	str	r3, [r7, #8]
 800b840:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b842:	2301      	movs	r3, #1
 800b844:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b846:	4b77      	ldr	r3, [pc, #476]	@ (800ba24 <HAL_RCC_OscConfig+0x474>)
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d118      	bne.n	800b884 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b852:	4b74      	ldr	r3, [pc, #464]	@ (800ba24 <HAL_RCC_OscConfig+0x474>)
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	4a73      	ldr	r2, [pc, #460]	@ (800ba24 <HAL_RCC_OscConfig+0x474>)
 800b858:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b85c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b85e:	f7f9 fc19 	bl	8005094 <HAL_GetTick>
 800b862:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b864:	e008      	b.n	800b878 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b866:	f7f9 fc15 	bl	8005094 <HAL_GetTick>
 800b86a:	4602      	mov	r2, r0
 800b86c:	693b      	ldr	r3, [r7, #16]
 800b86e:	1ad3      	subs	r3, r2, r3
 800b870:	2b02      	cmp	r3, #2
 800b872:	d901      	bls.n	800b878 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800b874:	2303      	movs	r3, #3
 800b876:	e10c      	b.n	800ba92 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b878:	4b6a      	ldr	r3, [pc, #424]	@ (800ba24 <HAL_RCC_OscConfig+0x474>)
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b880:	2b00      	cmp	r3, #0
 800b882:	d0f0      	beq.n	800b866 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	689b      	ldr	r3, [r3, #8]
 800b888:	2b01      	cmp	r3, #1
 800b88a:	d106      	bne.n	800b89a <HAL_RCC_OscConfig+0x2ea>
 800b88c:	4b64      	ldr	r3, [pc, #400]	@ (800ba20 <HAL_RCC_OscConfig+0x470>)
 800b88e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b890:	4a63      	ldr	r2, [pc, #396]	@ (800ba20 <HAL_RCC_OscConfig+0x470>)
 800b892:	f043 0301 	orr.w	r3, r3, #1
 800b896:	6713      	str	r3, [r2, #112]	@ 0x70
 800b898:	e01c      	b.n	800b8d4 <HAL_RCC_OscConfig+0x324>
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	689b      	ldr	r3, [r3, #8]
 800b89e:	2b05      	cmp	r3, #5
 800b8a0:	d10c      	bne.n	800b8bc <HAL_RCC_OscConfig+0x30c>
 800b8a2:	4b5f      	ldr	r3, [pc, #380]	@ (800ba20 <HAL_RCC_OscConfig+0x470>)
 800b8a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b8a6:	4a5e      	ldr	r2, [pc, #376]	@ (800ba20 <HAL_RCC_OscConfig+0x470>)
 800b8a8:	f043 0304 	orr.w	r3, r3, #4
 800b8ac:	6713      	str	r3, [r2, #112]	@ 0x70
 800b8ae:	4b5c      	ldr	r3, [pc, #368]	@ (800ba20 <HAL_RCC_OscConfig+0x470>)
 800b8b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b8b2:	4a5b      	ldr	r2, [pc, #364]	@ (800ba20 <HAL_RCC_OscConfig+0x470>)
 800b8b4:	f043 0301 	orr.w	r3, r3, #1
 800b8b8:	6713      	str	r3, [r2, #112]	@ 0x70
 800b8ba:	e00b      	b.n	800b8d4 <HAL_RCC_OscConfig+0x324>
 800b8bc:	4b58      	ldr	r3, [pc, #352]	@ (800ba20 <HAL_RCC_OscConfig+0x470>)
 800b8be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b8c0:	4a57      	ldr	r2, [pc, #348]	@ (800ba20 <HAL_RCC_OscConfig+0x470>)
 800b8c2:	f023 0301 	bic.w	r3, r3, #1
 800b8c6:	6713      	str	r3, [r2, #112]	@ 0x70
 800b8c8:	4b55      	ldr	r3, [pc, #340]	@ (800ba20 <HAL_RCC_OscConfig+0x470>)
 800b8ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b8cc:	4a54      	ldr	r2, [pc, #336]	@ (800ba20 <HAL_RCC_OscConfig+0x470>)
 800b8ce:	f023 0304 	bic.w	r3, r3, #4
 800b8d2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	689b      	ldr	r3, [r3, #8]
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d015      	beq.n	800b908 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b8dc:	f7f9 fbda 	bl	8005094 <HAL_GetTick>
 800b8e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b8e2:	e00a      	b.n	800b8fa <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b8e4:	f7f9 fbd6 	bl	8005094 <HAL_GetTick>
 800b8e8:	4602      	mov	r2, r0
 800b8ea:	693b      	ldr	r3, [r7, #16]
 800b8ec:	1ad3      	subs	r3, r2, r3
 800b8ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b8f2:	4293      	cmp	r3, r2
 800b8f4:	d901      	bls.n	800b8fa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800b8f6:	2303      	movs	r3, #3
 800b8f8:	e0cb      	b.n	800ba92 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b8fa:	4b49      	ldr	r3, [pc, #292]	@ (800ba20 <HAL_RCC_OscConfig+0x470>)
 800b8fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b8fe:	f003 0302 	and.w	r3, r3, #2
 800b902:	2b00      	cmp	r3, #0
 800b904:	d0ee      	beq.n	800b8e4 <HAL_RCC_OscConfig+0x334>
 800b906:	e014      	b.n	800b932 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b908:	f7f9 fbc4 	bl	8005094 <HAL_GetTick>
 800b90c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b90e:	e00a      	b.n	800b926 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b910:	f7f9 fbc0 	bl	8005094 <HAL_GetTick>
 800b914:	4602      	mov	r2, r0
 800b916:	693b      	ldr	r3, [r7, #16]
 800b918:	1ad3      	subs	r3, r2, r3
 800b91a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b91e:	4293      	cmp	r3, r2
 800b920:	d901      	bls.n	800b926 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800b922:	2303      	movs	r3, #3
 800b924:	e0b5      	b.n	800ba92 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b926:	4b3e      	ldr	r3, [pc, #248]	@ (800ba20 <HAL_RCC_OscConfig+0x470>)
 800b928:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b92a:	f003 0302 	and.w	r3, r3, #2
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d1ee      	bne.n	800b910 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800b932:	7dfb      	ldrb	r3, [r7, #23]
 800b934:	2b01      	cmp	r3, #1
 800b936:	d105      	bne.n	800b944 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b938:	4b39      	ldr	r3, [pc, #228]	@ (800ba20 <HAL_RCC_OscConfig+0x470>)
 800b93a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b93c:	4a38      	ldr	r2, [pc, #224]	@ (800ba20 <HAL_RCC_OscConfig+0x470>)
 800b93e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b942:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	699b      	ldr	r3, [r3, #24]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	f000 80a1 	beq.w	800ba90 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b94e:	4b34      	ldr	r3, [pc, #208]	@ (800ba20 <HAL_RCC_OscConfig+0x470>)
 800b950:	689b      	ldr	r3, [r3, #8]
 800b952:	f003 030c 	and.w	r3, r3, #12
 800b956:	2b08      	cmp	r3, #8
 800b958:	d05c      	beq.n	800ba14 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	699b      	ldr	r3, [r3, #24]
 800b95e:	2b02      	cmp	r3, #2
 800b960:	d141      	bne.n	800b9e6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b962:	4b31      	ldr	r3, [pc, #196]	@ (800ba28 <HAL_RCC_OscConfig+0x478>)
 800b964:	2200      	movs	r2, #0
 800b966:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b968:	f7f9 fb94 	bl	8005094 <HAL_GetTick>
 800b96c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b96e:	e008      	b.n	800b982 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b970:	f7f9 fb90 	bl	8005094 <HAL_GetTick>
 800b974:	4602      	mov	r2, r0
 800b976:	693b      	ldr	r3, [r7, #16]
 800b978:	1ad3      	subs	r3, r2, r3
 800b97a:	2b02      	cmp	r3, #2
 800b97c:	d901      	bls.n	800b982 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800b97e:	2303      	movs	r3, #3
 800b980:	e087      	b.n	800ba92 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b982:	4b27      	ldr	r3, [pc, #156]	@ (800ba20 <HAL_RCC_OscConfig+0x470>)
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d1f0      	bne.n	800b970 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	69da      	ldr	r2, [r3, #28]
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	6a1b      	ldr	r3, [r3, #32]
 800b996:	431a      	orrs	r2, r3
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b99c:	019b      	lsls	r3, r3, #6
 800b99e:	431a      	orrs	r2, r3
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9a4:	085b      	lsrs	r3, r3, #1
 800b9a6:	3b01      	subs	r3, #1
 800b9a8:	041b      	lsls	r3, r3, #16
 800b9aa:	431a      	orrs	r2, r3
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9b0:	061b      	lsls	r3, r3, #24
 800b9b2:	491b      	ldr	r1, [pc, #108]	@ (800ba20 <HAL_RCC_OscConfig+0x470>)
 800b9b4:	4313      	orrs	r3, r2
 800b9b6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b9b8:	4b1b      	ldr	r3, [pc, #108]	@ (800ba28 <HAL_RCC_OscConfig+0x478>)
 800b9ba:	2201      	movs	r2, #1
 800b9bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b9be:	f7f9 fb69 	bl	8005094 <HAL_GetTick>
 800b9c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b9c4:	e008      	b.n	800b9d8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b9c6:	f7f9 fb65 	bl	8005094 <HAL_GetTick>
 800b9ca:	4602      	mov	r2, r0
 800b9cc:	693b      	ldr	r3, [r7, #16]
 800b9ce:	1ad3      	subs	r3, r2, r3
 800b9d0:	2b02      	cmp	r3, #2
 800b9d2:	d901      	bls.n	800b9d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800b9d4:	2303      	movs	r3, #3
 800b9d6:	e05c      	b.n	800ba92 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b9d8:	4b11      	ldr	r3, [pc, #68]	@ (800ba20 <HAL_RCC_OscConfig+0x470>)
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d0f0      	beq.n	800b9c6 <HAL_RCC_OscConfig+0x416>
 800b9e4:	e054      	b.n	800ba90 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b9e6:	4b10      	ldr	r3, [pc, #64]	@ (800ba28 <HAL_RCC_OscConfig+0x478>)
 800b9e8:	2200      	movs	r2, #0
 800b9ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b9ec:	f7f9 fb52 	bl	8005094 <HAL_GetTick>
 800b9f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b9f2:	e008      	b.n	800ba06 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b9f4:	f7f9 fb4e 	bl	8005094 <HAL_GetTick>
 800b9f8:	4602      	mov	r2, r0
 800b9fa:	693b      	ldr	r3, [r7, #16]
 800b9fc:	1ad3      	subs	r3, r2, r3
 800b9fe:	2b02      	cmp	r3, #2
 800ba00:	d901      	bls.n	800ba06 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800ba02:	2303      	movs	r3, #3
 800ba04:	e045      	b.n	800ba92 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ba06:	4b06      	ldr	r3, [pc, #24]	@ (800ba20 <HAL_RCC_OscConfig+0x470>)
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d1f0      	bne.n	800b9f4 <HAL_RCC_OscConfig+0x444>
 800ba12:	e03d      	b.n	800ba90 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	699b      	ldr	r3, [r3, #24]
 800ba18:	2b01      	cmp	r3, #1
 800ba1a:	d107      	bne.n	800ba2c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800ba1c:	2301      	movs	r3, #1
 800ba1e:	e038      	b.n	800ba92 <HAL_RCC_OscConfig+0x4e2>
 800ba20:	40023800 	.word	0x40023800
 800ba24:	40007000 	.word	0x40007000
 800ba28:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800ba2c:	4b1b      	ldr	r3, [pc, #108]	@ (800ba9c <HAL_RCC_OscConfig+0x4ec>)
 800ba2e:	685b      	ldr	r3, [r3, #4]
 800ba30:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	699b      	ldr	r3, [r3, #24]
 800ba36:	2b01      	cmp	r3, #1
 800ba38:	d028      	beq.n	800ba8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ba44:	429a      	cmp	r2, r3
 800ba46:	d121      	bne.n	800ba8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ba52:	429a      	cmp	r2, r3
 800ba54:	d11a      	bne.n	800ba8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800ba56:	68fa      	ldr	r2, [r7, #12]
 800ba58:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800ba5c:	4013      	ands	r3, r2
 800ba5e:	687a      	ldr	r2, [r7, #4]
 800ba60:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800ba62:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800ba64:	4293      	cmp	r3, r2
 800ba66:	d111      	bne.n	800ba8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba72:	085b      	lsrs	r3, r3, #1
 800ba74:	3b01      	subs	r3, #1
 800ba76:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800ba78:	429a      	cmp	r2, r3
 800ba7a:	d107      	bne.n	800ba8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba86:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800ba88:	429a      	cmp	r2, r3
 800ba8a:	d001      	beq.n	800ba90 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800ba8c:	2301      	movs	r3, #1
 800ba8e:	e000      	b.n	800ba92 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800ba90:	2300      	movs	r3, #0
}
 800ba92:	4618      	mov	r0, r3
 800ba94:	3718      	adds	r7, #24
 800ba96:	46bd      	mov	sp, r7
 800ba98:	bd80      	pop	{r7, pc}
 800ba9a:	bf00      	nop
 800ba9c:	40023800 	.word	0x40023800

0800baa0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800baa0:	b580      	push	{r7, lr}
 800baa2:	b084      	sub	sp, #16
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	6078      	str	r0, [r7, #4]
 800baa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	2b00      	cmp	r3, #0
 800baae:	d101      	bne.n	800bab4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800bab0:	2301      	movs	r3, #1
 800bab2:	e0cc      	b.n	800bc4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800bab4:	4b68      	ldr	r3, [pc, #416]	@ (800bc58 <HAL_RCC_ClockConfig+0x1b8>)
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	f003 0307 	and.w	r3, r3, #7
 800babc:	683a      	ldr	r2, [r7, #0]
 800babe:	429a      	cmp	r2, r3
 800bac0:	d90c      	bls.n	800badc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bac2:	4b65      	ldr	r3, [pc, #404]	@ (800bc58 <HAL_RCC_ClockConfig+0x1b8>)
 800bac4:	683a      	ldr	r2, [r7, #0]
 800bac6:	b2d2      	uxtb	r2, r2
 800bac8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800baca:	4b63      	ldr	r3, [pc, #396]	@ (800bc58 <HAL_RCC_ClockConfig+0x1b8>)
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	f003 0307 	and.w	r3, r3, #7
 800bad2:	683a      	ldr	r2, [r7, #0]
 800bad4:	429a      	cmp	r2, r3
 800bad6:	d001      	beq.n	800badc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800bad8:	2301      	movs	r3, #1
 800bada:	e0b8      	b.n	800bc4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	f003 0302 	and.w	r3, r3, #2
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d020      	beq.n	800bb2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	f003 0304 	and.w	r3, r3, #4
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d005      	beq.n	800bb00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800baf4:	4b59      	ldr	r3, [pc, #356]	@ (800bc5c <HAL_RCC_ClockConfig+0x1bc>)
 800baf6:	689b      	ldr	r3, [r3, #8]
 800baf8:	4a58      	ldr	r2, [pc, #352]	@ (800bc5c <HAL_RCC_ClockConfig+0x1bc>)
 800bafa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800bafe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	f003 0308 	and.w	r3, r3, #8
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d005      	beq.n	800bb18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800bb0c:	4b53      	ldr	r3, [pc, #332]	@ (800bc5c <HAL_RCC_ClockConfig+0x1bc>)
 800bb0e:	689b      	ldr	r3, [r3, #8]
 800bb10:	4a52      	ldr	r2, [pc, #328]	@ (800bc5c <HAL_RCC_ClockConfig+0x1bc>)
 800bb12:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800bb16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bb18:	4b50      	ldr	r3, [pc, #320]	@ (800bc5c <HAL_RCC_ClockConfig+0x1bc>)
 800bb1a:	689b      	ldr	r3, [r3, #8]
 800bb1c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	689b      	ldr	r3, [r3, #8]
 800bb24:	494d      	ldr	r1, [pc, #308]	@ (800bc5c <HAL_RCC_ClockConfig+0x1bc>)
 800bb26:	4313      	orrs	r3, r2
 800bb28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	f003 0301 	and.w	r3, r3, #1
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d044      	beq.n	800bbc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	685b      	ldr	r3, [r3, #4]
 800bb3a:	2b01      	cmp	r3, #1
 800bb3c:	d107      	bne.n	800bb4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bb3e:	4b47      	ldr	r3, [pc, #284]	@ (800bc5c <HAL_RCC_ClockConfig+0x1bc>)
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d119      	bne.n	800bb7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800bb4a:	2301      	movs	r3, #1
 800bb4c:	e07f      	b.n	800bc4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	685b      	ldr	r3, [r3, #4]
 800bb52:	2b02      	cmp	r3, #2
 800bb54:	d003      	beq.n	800bb5e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800bb5a:	2b03      	cmp	r3, #3
 800bb5c:	d107      	bne.n	800bb6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bb5e:	4b3f      	ldr	r3, [pc, #252]	@ (800bc5c <HAL_RCC_ClockConfig+0x1bc>)
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d109      	bne.n	800bb7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800bb6a:	2301      	movs	r3, #1
 800bb6c:	e06f      	b.n	800bc4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bb6e:	4b3b      	ldr	r3, [pc, #236]	@ (800bc5c <HAL_RCC_ClockConfig+0x1bc>)
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	f003 0302 	and.w	r3, r3, #2
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d101      	bne.n	800bb7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800bb7a:	2301      	movs	r3, #1
 800bb7c:	e067      	b.n	800bc4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800bb7e:	4b37      	ldr	r3, [pc, #220]	@ (800bc5c <HAL_RCC_ClockConfig+0x1bc>)
 800bb80:	689b      	ldr	r3, [r3, #8]
 800bb82:	f023 0203 	bic.w	r2, r3, #3
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	685b      	ldr	r3, [r3, #4]
 800bb8a:	4934      	ldr	r1, [pc, #208]	@ (800bc5c <HAL_RCC_ClockConfig+0x1bc>)
 800bb8c:	4313      	orrs	r3, r2
 800bb8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800bb90:	f7f9 fa80 	bl	8005094 <HAL_GetTick>
 800bb94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bb96:	e00a      	b.n	800bbae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bb98:	f7f9 fa7c 	bl	8005094 <HAL_GetTick>
 800bb9c:	4602      	mov	r2, r0
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	1ad3      	subs	r3, r2, r3
 800bba2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bba6:	4293      	cmp	r3, r2
 800bba8:	d901      	bls.n	800bbae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800bbaa:	2303      	movs	r3, #3
 800bbac:	e04f      	b.n	800bc4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bbae:	4b2b      	ldr	r3, [pc, #172]	@ (800bc5c <HAL_RCC_ClockConfig+0x1bc>)
 800bbb0:	689b      	ldr	r3, [r3, #8]
 800bbb2:	f003 020c 	and.w	r2, r3, #12
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	685b      	ldr	r3, [r3, #4]
 800bbba:	009b      	lsls	r3, r3, #2
 800bbbc:	429a      	cmp	r2, r3
 800bbbe:	d1eb      	bne.n	800bb98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800bbc0:	4b25      	ldr	r3, [pc, #148]	@ (800bc58 <HAL_RCC_ClockConfig+0x1b8>)
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	f003 0307 	and.w	r3, r3, #7
 800bbc8:	683a      	ldr	r2, [r7, #0]
 800bbca:	429a      	cmp	r2, r3
 800bbcc:	d20c      	bcs.n	800bbe8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bbce:	4b22      	ldr	r3, [pc, #136]	@ (800bc58 <HAL_RCC_ClockConfig+0x1b8>)
 800bbd0:	683a      	ldr	r2, [r7, #0]
 800bbd2:	b2d2      	uxtb	r2, r2
 800bbd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bbd6:	4b20      	ldr	r3, [pc, #128]	@ (800bc58 <HAL_RCC_ClockConfig+0x1b8>)
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	f003 0307 	and.w	r3, r3, #7
 800bbde:	683a      	ldr	r2, [r7, #0]
 800bbe0:	429a      	cmp	r2, r3
 800bbe2:	d001      	beq.n	800bbe8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800bbe4:	2301      	movs	r3, #1
 800bbe6:	e032      	b.n	800bc4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	f003 0304 	and.w	r3, r3, #4
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d008      	beq.n	800bc06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800bbf4:	4b19      	ldr	r3, [pc, #100]	@ (800bc5c <HAL_RCC_ClockConfig+0x1bc>)
 800bbf6:	689b      	ldr	r3, [r3, #8]
 800bbf8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	68db      	ldr	r3, [r3, #12]
 800bc00:	4916      	ldr	r1, [pc, #88]	@ (800bc5c <HAL_RCC_ClockConfig+0x1bc>)
 800bc02:	4313      	orrs	r3, r2
 800bc04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	f003 0308 	and.w	r3, r3, #8
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d009      	beq.n	800bc26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800bc12:	4b12      	ldr	r3, [pc, #72]	@ (800bc5c <HAL_RCC_ClockConfig+0x1bc>)
 800bc14:	689b      	ldr	r3, [r3, #8]
 800bc16:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	691b      	ldr	r3, [r3, #16]
 800bc1e:	00db      	lsls	r3, r3, #3
 800bc20:	490e      	ldr	r1, [pc, #56]	@ (800bc5c <HAL_RCC_ClockConfig+0x1bc>)
 800bc22:	4313      	orrs	r3, r2
 800bc24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800bc26:	f000 f82d 	bl	800bc84 <HAL_RCC_GetSysClockFreq>
 800bc2a:	4602      	mov	r2, r0
 800bc2c:	4b0b      	ldr	r3, [pc, #44]	@ (800bc5c <HAL_RCC_ClockConfig+0x1bc>)
 800bc2e:	689b      	ldr	r3, [r3, #8]
 800bc30:	091b      	lsrs	r3, r3, #4
 800bc32:	f003 030f 	and.w	r3, r3, #15
 800bc36:	490a      	ldr	r1, [pc, #40]	@ (800bc60 <HAL_RCC_ClockConfig+0x1c0>)
 800bc38:	5ccb      	ldrb	r3, [r1, r3]
 800bc3a:	fa22 f303 	lsr.w	r3, r2, r3
 800bc3e:	4a09      	ldr	r2, [pc, #36]	@ (800bc64 <HAL_RCC_ClockConfig+0x1c4>)
 800bc40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800bc42:	4b09      	ldr	r3, [pc, #36]	@ (800bc68 <HAL_RCC_ClockConfig+0x1c8>)
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	4618      	mov	r0, r3
 800bc48:	f7f9 f9e0 	bl	800500c <HAL_InitTick>

  return HAL_OK;
 800bc4c:	2300      	movs	r3, #0
}
 800bc4e:	4618      	mov	r0, r3
 800bc50:	3710      	adds	r7, #16
 800bc52:	46bd      	mov	sp, r7
 800bc54:	bd80      	pop	{r7, pc}
 800bc56:	bf00      	nop
 800bc58:	40023c00 	.word	0x40023c00
 800bc5c:	40023800 	.word	0x40023800
 800bc60:	08013f14 	.word	0x08013f14
 800bc64:	20000014 	.word	0x20000014
 800bc68:	20000018 	.word	0x20000018

0800bc6c <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800bc6c:	b480      	push	{r7}
 800bc6e:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 800bc70:	4b03      	ldr	r3, [pc, #12]	@ (800bc80 <HAL_RCC_EnableCSS+0x14>)
 800bc72:	2201      	movs	r2, #1
 800bc74:	601a      	str	r2, [r3, #0]
}
 800bc76:	bf00      	nop
 800bc78:	46bd      	mov	sp, r7
 800bc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7e:	4770      	bx	lr
 800bc80:	4247004c 	.word	0x4247004c

0800bc84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800bc84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bc88:	b090      	sub	sp, #64	@ 0x40
 800bc8a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800bc90:	2300      	movs	r3, #0
 800bc92:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800bc94:	2300      	movs	r3, #0
 800bc96:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800bc98:	2300      	movs	r3, #0
 800bc9a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800bc9c:	4b59      	ldr	r3, [pc, #356]	@ (800be04 <HAL_RCC_GetSysClockFreq+0x180>)
 800bc9e:	689b      	ldr	r3, [r3, #8]
 800bca0:	f003 030c 	and.w	r3, r3, #12
 800bca4:	2b08      	cmp	r3, #8
 800bca6:	d00d      	beq.n	800bcc4 <HAL_RCC_GetSysClockFreq+0x40>
 800bca8:	2b08      	cmp	r3, #8
 800bcaa:	f200 80a1 	bhi.w	800bdf0 <HAL_RCC_GetSysClockFreq+0x16c>
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d002      	beq.n	800bcb8 <HAL_RCC_GetSysClockFreq+0x34>
 800bcb2:	2b04      	cmp	r3, #4
 800bcb4:	d003      	beq.n	800bcbe <HAL_RCC_GetSysClockFreq+0x3a>
 800bcb6:	e09b      	b.n	800bdf0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800bcb8:	4b53      	ldr	r3, [pc, #332]	@ (800be08 <HAL_RCC_GetSysClockFreq+0x184>)
 800bcba:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800bcbc:	e09b      	b.n	800bdf6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800bcbe:	4b53      	ldr	r3, [pc, #332]	@ (800be0c <HAL_RCC_GetSysClockFreq+0x188>)
 800bcc0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800bcc2:	e098      	b.n	800bdf6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800bcc4:	4b4f      	ldr	r3, [pc, #316]	@ (800be04 <HAL_RCC_GetSysClockFreq+0x180>)
 800bcc6:	685b      	ldr	r3, [r3, #4]
 800bcc8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bccc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800bcce:	4b4d      	ldr	r3, [pc, #308]	@ (800be04 <HAL_RCC_GetSysClockFreq+0x180>)
 800bcd0:	685b      	ldr	r3, [r3, #4]
 800bcd2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d028      	beq.n	800bd2c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800bcda:	4b4a      	ldr	r3, [pc, #296]	@ (800be04 <HAL_RCC_GetSysClockFreq+0x180>)
 800bcdc:	685b      	ldr	r3, [r3, #4]
 800bcde:	099b      	lsrs	r3, r3, #6
 800bce0:	2200      	movs	r2, #0
 800bce2:	623b      	str	r3, [r7, #32]
 800bce4:	627a      	str	r2, [r7, #36]	@ 0x24
 800bce6:	6a3b      	ldr	r3, [r7, #32]
 800bce8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800bcec:	2100      	movs	r1, #0
 800bcee:	4b47      	ldr	r3, [pc, #284]	@ (800be0c <HAL_RCC_GetSysClockFreq+0x188>)
 800bcf0:	fb03 f201 	mul.w	r2, r3, r1
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	fb00 f303 	mul.w	r3, r0, r3
 800bcfa:	4413      	add	r3, r2
 800bcfc:	4a43      	ldr	r2, [pc, #268]	@ (800be0c <HAL_RCC_GetSysClockFreq+0x188>)
 800bcfe:	fba0 1202 	umull	r1, r2, r0, r2
 800bd02:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800bd04:	460a      	mov	r2, r1
 800bd06:	62ba      	str	r2, [r7, #40]	@ 0x28
 800bd08:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bd0a:	4413      	add	r3, r2
 800bd0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bd0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd10:	2200      	movs	r2, #0
 800bd12:	61bb      	str	r3, [r7, #24]
 800bd14:	61fa      	str	r2, [r7, #28]
 800bd16:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800bd1a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800bd1e:	f7f4 fab7 	bl	8000290 <__aeabi_uldivmod>
 800bd22:	4602      	mov	r2, r0
 800bd24:	460b      	mov	r3, r1
 800bd26:	4613      	mov	r3, r2
 800bd28:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bd2a:	e053      	b.n	800bdd4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800bd2c:	4b35      	ldr	r3, [pc, #212]	@ (800be04 <HAL_RCC_GetSysClockFreq+0x180>)
 800bd2e:	685b      	ldr	r3, [r3, #4]
 800bd30:	099b      	lsrs	r3, r3, #6
 800bd32:	2200      	movs	r2, #0
 800bd34:	613b      	str	r3, [r7, #16]
 800bd36:	617a      	str	r2, [r7, #20]
 800bd38:	693b      	ldr	r3, [r7, #16]
 800bd3a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800bd3e:	f04f 0b00 	mov.w	fp, #0
 800bd42:	4652      	mov	r2, sl
 800bd44:	465b      	mov	r3, fp
 800bd46:	f04f 0000 	mov.w	r0, #0
 800bd4a:	f04f 0100 	mov.w	r1, #0
 800bd4e:	0159      	lsls	r1, r3, #5
 800bd50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800bd54:	0150      	lsls	r0, r2, #5
 800bd56:	4602      	mov	r2, r0
 800bd58:	460b      	mov	r3, r1
 800bd5a:	ebb2 080a 	subs.w	r8, r2, sl
 800bd5e:	eb63 090b 	sbc.w	r9, r3, fp
 800bd62:	f04f 0200 	mov.w	r2, #0
 800bd66:	f04f 0300 	mov.w	r3, #0
 800bd6a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800bd6e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800bd72:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800bd76:	ebb2 0408 	subs.w	r4, r2, r8
 800bd7a:	eb63 0509 	sbc.w	r5, r3, r9
 800bd7e:	f04f 0200 	mov.w	r2, #0
 800bd82:	f04f 0300 	mov.w	r3, #0
 800bd86:	00eb      	lsls	r3, r5, #3
 800bd88:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800bd8c:	00e2      	lsls	r2, r4, #3
 800bd8e:	4614      	mov	r4, r2
 800bd90:	461d      	mov	r5, r3
 800bd92:	eb14 030a 	adds.w	r3, r4, sl
 800bd96:	603b      	str	r3, [r7, #0]
 800bd98:	eb45 030b 	adc.w	r3, r5, fp
 800bd9c:	607b      	str	r3, [r7, #4]
 800bd9e:	f04f 0200 	mov.w	r2, #0
 800bda2:	f04f 0300 	mov.w	r3, #0
 800bda6:	e9d7 4500 	ldrd	r4, r5, [r7]
 800bdaa:	4629      	mov	r1, r5
 800bdac:	028b      	lsls	r3, r1, #10
 800bdae:	4621      	mov	r1, r4
 800bdb0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800bdb4:	4621      	mov	r1, r4
 800bdb6:	028a      	lsls	r2, r1, #10
 800bdb8:	4610      	mov	r0, r2
 800bdba:	4619      	mov	r1, r3
 800bdbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bdbe:	2200      	movs	r2, #0
 800bdc0:	60bb      	str	r3, [r7, #8]
 800bdc2:	60fa      	str	r2, [r7, #12]
 800bdc4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bdc8:	f7f4 fa62 	bl	8000290 <__aeabi_uldivmod>
 800bdcc:	4602      	mov	r2, r0
 800bdce:	460b      	mov	r3, r1
 800bdd0:	4613      	mov	r3, r2
 800bdd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800bdd4:	4b0b      	ldr	r3, [pc, #44]	@ (800be04 <HAL_RCC_GetSysClockFreq+0x180>)
 800bdd6:	685b      	ldr	r3, [r3, #4]
 800bdd8:	0c1b      	lsrs	r3, r3, #16
 800bdda:	f003 0303 	and.w	r3, r3, #3
 800bdde:	3301      	adds	r3, #1
 800bde0:	005b      	lsls	r3, r3, #1
 800bde2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800bde4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800bde6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bde8:	fbb2 f3f3 	udiv	r3, r2, r3
 800bdec:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800bdee:	e002      	b.n	800bdf6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800bdf0:	4b05      	ldr	r3, [pc, #20]	@ (800be08 <HAL_RCC_GetSysClockFreq+0x184>)
 800bdf2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800bdf4:	bf00      	nop
    }
  }
  return sysclockfreq;
 800bdf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800bdf8:	4618      	mov	r0, r3
 800bdfa:	3740      	adds	r7, #64	@ 0x40
 800bdfc:	46bd      	mov	sp, r7
 800bdfe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800be02:	bf00      	nop
 800be04:	40023800 	.word	0x40023800
 800be08:	00f42400 	.word	0x00f42400
 800be0c:	017d7840 	.word	0x017d7840

0800be10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800be10:	b480      	push	{r7}
 800be12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800be14:	4b03      	ldr	r3, [pc, #12]	@ (800be24 <HAL_RCC_GetHCLKFreq+0x14>)
 800be16:	681b      	ldr	r3, [r3, #0]
}
 800be18:	4618      	mov	r0, r3
 800be1a:	46bd      	mov	sp, r7
 800be1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be20:	4770      	bx	lr
 800be22:	bf00      	nop
 800be24:	20000014 	.word	0x20000014

0800be28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800be28:	b580      	push	{r7, lr}
 800be2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800be2c:	f7ff fff0 	bl	800be10 <HAL_RCC_GetHCLKFreq>
 800be30:	4602      	mov	r2, r0
 800be32:	4b05      	ldr	r3, [pc, #20]	@ (800be48 <HAL_RCC_GetPCLK1Freq+0x20>)
 800be34:	689b      	ldr	r3, [r3, #8]
 800be36:	0a9b      	lsrs	r3, r3, #10
 800be38:	f003 0307 	and.w	r3, r3, #7
 800be3c:	4903      	ldr	r1, [pc, #12]	@ (800be4c <HAL_RCC_GetPCLK1Freq+0x24>)
 800be3e:	5ccb      	ldrb	r3, [r1, r3]
 800be40:	fa22 f303 	lsr.w	r3, r2, r3
}
 800be44:	4618      	mov	r0, r3
 800be46:	bd80      	pop	{r7, pc}
 800be48:	40023800 	.word	0x40023800
 800be4c:	08013f24 	.word	0x08013f24

0800be50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800be50:	b580      	push	{r7, lr}
 800be52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800be54:	f7ff ffdc 	bl	800be10 <HAL_RCC_GetHCLKFreq>
 800be58:	4602      	mov	r2, r0
 800be5a:	4b05      	ldr	r3, [pc, #20]	@ (800be70 <HAL_RCC_GetPCLK2Freq+0x20>)
 800be5c:	689b      	ldr	r3, [r3, #8]
 800be5e:	0b5b      	lsrs	r3, r3, #13
 800be60:	f003 0307 	and.w	r3, r3, #7
 800be64:	4903      	ldr	r1, [pc, #12]	@ (800be74 <HAL_RCC_GetPCLK2Freq+0x24>)
 800be66:	5ccb      	ldrb	r3, [r1, r3]
 800be68:	fa22 f303 	lsr.w	r3, r2, r3
}
 800be6c:	4618      	mov	r0, r3
 800be6e:	bd80      	pop	{r7, pc}
 800be70:	40023800 	.word	0x40023800
 800be74:	08013f24 	.word	0x08013f24

0800be78 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800be78:	b580      	push	{r7, lr}
 800be7a:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 800be7c:	4b06      	ldr	r3, [pc, #24]	@ (800be98 <HAL_RCC_NMI_IRQHandler+0x20>)
 800be7e:	68db      	ldr	r3, [r3, #12]
 800be80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800be84:	2b80      	cmp	r3, #128	@ 0x80
 800be86:	d104      	bne.n	800be92 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800be88:	f000 f80a 	bl	800bea0 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800be8c:	4b03      	ldr	r3, [pc, #12]	@ (800be9c <HAL_RCC_NMI_IRQHandler+0x24>)
 800be8e:	2280      	movs	r2, #128	@ 0x80
 800be90:	701a      	strb	r2, [r3, #0]
  }
}
 800be92:	bf00      	nop
 800be94:	bd80      	pop	{r7, pc}
 800be96:	bf00      	nop
 800be98:	40023800 	.word	0x40023800
 800be9c:	4002380e 	.word	0x4002380e

0800bea0 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800bea0:	b480      	push	{r7}
 800bea2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 800bea4:	bf00      	nop
 800bea6:	46bd      	mov	sp, r7
 800bea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beac:	4770      	bx	lr

0800beae <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800beae:	b580      	push	{r7, lr}
 800beb0:	b082      	sub	sp, #8
 800beb2:	af00      	add	r7, sp, #0
 800beb4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d101      	bne.n	800bec0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bebc:	2301      	movs	r3, #1
 800bebe:	e041      	b.n	800bf44 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bec6:	b2db      	uxtb	r3, r3
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d106      	bne.n	800beda <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	2200      	movs	r2, #0
 800bed0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bed4:	6878      	ldr	r0, [r7, #4]
 800bed6:	f7f8 fe87 	bl	8004be8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	2202      	movs	r2, #2
 800bede:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	681a      	ldr	r2, [r3, #0]
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	3304      	adds	r3, #4
 800beea:	4619      	mov	r1, r3
 800beec:	4610      	mov	r0, r2
 800beee:	f000 fc3b 	bl	800c768 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	2201      	movs	r2, #1
 800bef6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	2201      	movs	r2, #1
 800befe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	2201      	movs	r2, #1
 800bf06:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	2201      	movs	r2, #1
 800bf0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	2201      	movs	r2, #1
 800bf16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	2201      	movs	r2, #1
 800bf1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	2201      	movs	r2, #1
 800bf26:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	2201      	movs	r2, #1
 800bf2e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	2201      	movs	r2, #1
 800bf36:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	2201      	movs	r2, #1
 800bf3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800bf42:	2300      	movs	r3, #0
}
 800bf44:	4618      	mov	r0, r3
 800bf46:	3708      	adds	r7, #8
 800bf48:	46bd      	mov	sp, r7
 800bf4a:	bd80      	pop	{r7, pc}

0800bf4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bf4c:	b480      	push	{r7}
 800bf4e:	b085      	sub	sp, #20
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bf5a:	b2db      	uxtb	r3, r3
 800bf5c:	2b01      	cmp	r3, #1
 800bf5e:	d001      	beq.n	800bf64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800bf60:	2301      	movs	r3, #1
 800bf62:	e044      	b.n	800bfee <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	2202      	movs	r2, #2
 800bf68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	68da      	ldr	r2, [r3, #12]
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	f042 0201 	orr.w	r2, r2, #1
 800bf7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	4a1e      	ldr	r2, [pc, #120]	@ (800bffc <HAL_TIM_Base_Start_IT+0xb0>)
 800bf82:	4293      	cmp	r3, r2
 800bf84:	d018      	beq.n	800bfb8 <HAL_TIM_Base_Start_IT+0x6c>
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bf8e:	d013      	beq.n	800bfb8 <HAL_TIM_Base_Start_IT+0x6c>
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	4a1a      	ldr	r2, [pc, #104]	@ (800c000 <HAL_TIM_Base_Start_IT+0xb4>)
 800bf96:	4293      	cmp	r3, r2
 800bf98:	d00e      	beq.n	800bfb8 <HAL_TIM_Base_Start_IT+0x6c>
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	4a19      	ldr	r2, [pc, #100]	@ (800c004 <HAL_TIM_Base_Start_IT+0xb8>)
 800bfa0:	4293      	cmp	r3, r2
 800bfa2:	d009      	beq.n	800bfb8 <HAL_TIM_Base_Start_IT+0x6c>
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	4a17      	ldr	r2, [pc, #92]	@ (800c008 <HAL_TIM_Base_Start_IT+0xbc>)
 800bfaa:	4293      	cmp	r3, r2
 800bfac:	d004      	beq.n	800bfb8 <HAL_TIM_Base_Start_IT+0x6c>
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	4a16      	ldr	r2, [pc, #88]	@ (800c00c <HAL_TIM_Base_Start_IT+0xc0>)
 800bfb4:	4293      	cmp	r3, r2
 800bfb6:	d111      	bne.n	800bfdc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	689b      	ldr	r3, [r3, #8]
 800bfbe:	f003 0307 	and.w	r3, r3, #7
 800bfc2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	2b06      	cmp	r3, #6
 800bfc8:	d010      	beq.n	800bfec <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	681a      	ldr	r2, [r3, #0]
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	f042 0201 	orr.w	r2, r2, #1
 800bfd8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bfda:	e007      	b.n	800bfec <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	681a      	ldr	r2, [r3, #0]
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	f042 0201 	orr.w	r2, r2, #1
 800bfea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800bfec:	2300      	movs	r3, #0
}
 800bfee:	4618      	mov	r0, r3
 800bff0:	3714      	adds	r7, #20
 800bff2:	46bd      	mov	sp, r7
 800bff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff8:	4770      	bx	lr
 800bffa:	bf00      	nop
 800bffc:	40010000 	.word	0x40010000
 800c000:	40000400 	.word	0x40000400
 800c004:	40000800 	.word	0x40000800
 800c008:	40000c00 	.word	0x40000c00
 800c00c:	40014000 	.word	0x40014000

0800c010 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c010:	b580      	push	{r7, lr}
 800c012:	b082      	sub	sp, #8
 800c014:	af00      	add	r7, sp, #0
 800c016:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d101      	bne.n	800c022 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c01e:	2301      	movs	r3, #1
 800c020:	e041      	b.n	800c0a6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c028:	b2db      	uxtb	r3, r3
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d106      	bne.n	800c03c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	2200      	movs	r2, #0
 800c032:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c036:	6878      	ldr	r0, [r7, #4]
 800c038:	f000 f839 	bl	800c0ae <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	2202      	movs	r2, #2
 800c040:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	681a      	ldr	r2, [r3, #0]
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	3304      	adds	r3, #4
 800c04c:	4619      	mov	r1, r3
 800c04e:	4610      	mov	r0, r2
 800c050:	f000 fb8a 	bl	800c768 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	2201      	movs	r2, #1
 800c058:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	2201      	movs	r2, #1
 800c060:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	2201      	movs	r2, #1
 800c068:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	2201      	movs	r2, #1
 800c070:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	2201      	movs	r2, #1
 800c078:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	2201      	movs	r2, #1
 800c080:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	2201      	movs	r2, #1
 800c088:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	2201      	movs	r2, #1
 800c090:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	2201      	movs	r2, #1
 800c098:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	2201      	movs	r2, #1
 800c0a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c0a4:	2300      	movs	r3, #0
}
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	3708      	adds	r7, #8
 800c0aa:	46bd      	mov	sp, r7
 800c0ac:	bd80      	pop	{r7, pc}

0800c0ae <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800c0ae:	b480      	push	{r7}
 800c0b0:	b083      	sub	sp, #12
 800c0b2:	af00      	add	r7, sp, #0
 800c0b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800c0b6:	bf00      	nop
 800c0b8:	370c      	adds	r7, #12
 800c0ba:	46bd      	mov	sp, r7
 800c0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c0:	4770      	bx	lr
	...

0800c0c4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b084      	sub	sp, #16
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]
 800c0cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c0ce:	683b      	ldr	r3, [r7, #0]
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d109      	bne.n	800c0e8 <HAL_TIM_PWM_Start+0x24>
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800c0da:	b2db      	uxtb	r3, r3
 800c0dc:	2b01      	cmp	r3, #1
 800c0de:	bf14      	ite	ne
 800c0e0:	2301      	movne	r3, #1
 800c0e2:	2300      	moveq	r3, #0
 800c0e4:	b2db      	uxtb	r3, r3
 800c0e6:	e022      	b.n	800c12e <HAL_TIM_PWM_Start+0x6a>
 800c0e8:	683b      	ldr	r3, [r7, #0]
 800c0ea:	2b04      	cmp	r3, #4
 800c0ec:	d109      	bne.n	800c102 <HAL_TIM_PWM_Start+0x3e>
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800c0f4:	b2db      	uxtb	r3, r3
 800c0f6:	2b01      	cmp	r3, #1
 800c0f8:	bf14      	ite	ne
 800c0fa:	2301      	movne	r3, #1
 800c0fc:	2300      	moveq	r3, #0
 800c0fe:	b2db      	uxtb	r3, r3
 800c100:	e015      	b.n	800c12e <HAL_TIM_PWM_Start+0x6a>
 800c102:	683b      	ldr	r3, [r7, #0]
 800c104:	2b08      	cmp	r3, #8
 800c106:	d109      	bne.n	800c11c <HAL_TIM_PWM_Start+0x58>
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800c10e:	b2db      	uxtb	r3, r3
 800c110:	2b01      	cmp	r3, #1
 800c112:	bf14      	ite	ne
 800c114:	2301      	movne	r3, #1
 800c116:	2300      	moveq	r3, #0
 800c118:	b2db      	uxtb	r3, r3
 800c11a:	e008      	b.n	800c12e <HAL_TIM_PWM_Start+0x6a>
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c122:	b2db      	uxtb	r3, r3
 800c124:	2b01      	cmp	r3, #1
 800c126:	bf14      	ite	ne
 800c128:	2301      	movne	r3, #1
 800c12a:	2300      	moveq	r3, #0
 800c12c:	b2db      	uxtb	r3, r3
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d001      	beq.n	800c136 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800c132:	2301      	movs	r3, #1
 800c134:	e068      	b.n	800c208 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c136:	683b      	ldr	r3, [r7, #0]
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d104      	bne.n	800c146 <HAL_TIM_PWM_Start+0x82>
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	2202      	movs	r2, #2
 800c140:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c144:	e013      	b.n	800c16e <HAL_TIM_PWM_Start+0xaa>
 800c146:	683b      	ldr	r3, [r7, #0]
 800c148:	2b04      	cmp	r3, #4
 800c14a:	d104      	bne.n	800c156 <HAL_TIM_PWM_Start+0x92>
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	2202      	movs	r2, #2
 800c150:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c154:	e00b      	b.n	800c16e <HAL_TIM_PWM_Start+0xaa>
 800c156:	683b      	ldr	r3, [r7, #0]
 800c158:	2b08      	cmp	r3, #8
 800c15a:	d104      	bne.n	800c166 <HAL_TIM_PWM_Start+0xa2>
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	2202      	movs	r2, #2
 800c160:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c164:	e003      	b.n	800c16e <HAL_TIM_PWM_Start+0xaa>
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	2202      	movs	r2, #2
 800c16a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	2201      	movs	r2, #1
 800c174:	6839      	ldr	r1, [r7, #0]
 800c176:	4618      	mov	r0, r3
 800c178:	f000 fda8 	bl	800cccc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	4a23      	ldr	r2, [pc, #140]	@ (800c210 <HAL_TIM_PWM_Start+0x14c>)
 800c182:	4293      	cmp	r3, r2
 800c184:	d107      	bne.n	800c196 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800c194:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	4a1d      	ldr	r2, [pc, #116]	@ (800c210 <HAL_TIM_PWM_Start+0x14c>)
 800c19c:	4293      	cmp	r3, r2
 800c19e:	d018      	beq.n	800c1d2 <HAL_TIM_PWM_Start+0x10e>
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c1a8:	d013      	beq.n	800c1d2 <HAL_TIM_PWM_Start+0x10e>
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	4a19      	ldr	r2, [pc, #100]	@ (800c214 <HAL_TIM_PWM_Start+0x150>)
 800c1b0:	4293      	cmp	r3, r2
 800c1b2:	d00e      	beq.n	800c1d2 <HAL_TIM_PWM_Start+0x10e>
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	4a17      	ldr	r2, [pc, #92]	@ (800c218 <HAL_TIM_PWM_Start+0x154>)
 800c1ba:	4293      	cmp	r3, r2
 800c1bc:	d009      	beq.n	800c1d2 <HAL_TIM_PWM_Start+0x10e>
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	4a16      	ldr	r2, [pc, #88]	@ (800c21c <HAL_TIM_PWM_Start+0x158>)
 800c1c4:	4293      	cmp	r3, r2
 800c1c6:	d004      	beq.n	800c1d2 <HAL_TIM_PWM_Start+0x10e>
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	4a14      	ldr	r2, [pc, #80]	@ (800c220 <HAL_TIM_PWM_Start+0x15c>)
 800c1ce:	4293      	cmp	r3, r2
 800c1d0:	d111      	bne.n	800c1f6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	689b      	ldr	r3, [r3, #8]
 800c1d8:	f003 0307 	and.w	r3, r3, #7
 800c1dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	2b06      	cmp	r3, #6
 800c1e2:	d010      	beq.n	800c206 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	681a      	ldr	r2, [r3, #0]
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	f042 0201 	orr.w	r2, r2, #1
 800c1f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c1f4:	e007      	b.n	800c206 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	681a      	ldr	r2, [r3, #0]
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	f042 0201 	orr.w	r2, r2, #1
 800c204:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c206:	2300      	movs	r3, #0
}
 800c208:	4618      	mov	r0, r3
 800c20a:	3710      	adds	r7, #16
 800c20c:	46bd      	mov	sp, r7
 800c20e:	bd80      	pop	{r7, pc}
 800c210:	40010000 	.word	0x40010000
 800c214:	40000400 	.word	0x40000400
 800c218:	40000800 	.word	0x40000800
 800c21c:	40000c00 	.word	0x40000c00
 800c220:	40014000 	.word	0x40014000

0800c224 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c224:	b580      	push	{r7, lr}
 800c226:	b084      	sub	sp, #16
 800c228:	af00      	add	r7, sp, #0
 800c22a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	68db      	ldr	r3, [r3, #12]
 800c232:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	691b      	ldr	r3, [r3, #16]
 800c23a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800c23c:	68bb      	ldr	r3, [r7, #8]
 800c23e:	f003 0302 	and.w	r3, r3, #2
 800c242:	2b00      	cmp	r3, #0
 800c244:	d020      	beq.n	800c288 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	f003 0302 	and.w	r3, r3, #2
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d01b      	beq.n	800c288 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	f06f 0202 	mvn.w	r2, #2
 800c258:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	2201      	movs	r2, #1
 800c25e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	699b      	ldr	r3, [r3, #24]
 800c266:	f003 0303 	and.w	r3, r3, #3
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d003      	beq.n	800c276 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c26e:	6878      	ldr	r0, [r7, #4]
 800c270:	f000 fa5b 	bl	800c72a <HAL_TIM_IC_CaptureCallback>
 800c274:	e005      	b.n	800c282 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c276:	6878      	ldr	r0, [r7, #4]
 800c278:	f000 fa4d 	bl	800c716 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c27c:	6878      	ldr	r0, [r7, #4]
 800c27e:	f000 fa5e 	bl	800c73e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	2200      	movs	r2, #0
 800c286:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800c288:	68bb      	ldr	r3, [r7, #8]
 800c28a:	f003 0304 	and.w	r3, r3, #4
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d020      	beq.n	800c2d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	f003 0304 	and.w	r3, r3, #4
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d01b      	beq.n	800c2d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	f06f 0204 	mvn.w	r2, #4
 800c2a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	2202      	movs	r2, #2
 800c2aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	699b      	ldr	r3, [r3, #24]
 800c2b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d003      	beq.n	800c2c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c2ba:	6878      	ldr	r0, [r7, #4]
 800c2bc:	f000 fa35 	bl	800c72a <HAL_TIM_IC_CaptureCallback>
 800c2c0:	e005      	b.n	800c2ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c2c2:	6878      	ldr	r0, [r7, #4]
 800c2c4:	f000 fa27 	bl	800c716 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c2c8:	6878      	ldr	r0, [r7, #4]
 800c2ca:	f000 fa38 	bl	800c73e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	2200      	movs	r2, #0
 800c2d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800c2d4:	68bb      	ldr	r3, [r7, #8]
 800c2d6:	f003 0308 	and.w	r3, r3, #8
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d020      	beq.n	800c320 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	f003 0308 	and.w	r3, r3, #8
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d01b      	beq.n	800c320 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	f06f 0208 	mvn.w	r2, #8
 800c2f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	2204      	movs	r2, #4
 800c2f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	69db      	ldr	r3, [r3, #28]
 800c2fe:	f003 0303 	and.w	r3, r3, #3
 800c302:	2b00      	cmp	r3, #0
 800c304:	d003      	beq.n	800c30e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c306:	6878      	ldr	r0, [r7, #4]
 800c308:	f000 fa0f 	bl	800c72a <HAL_TIM_IC_CaptureCallback>
 800c30c:	e005      	b.n	800c31a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c30e:	6878      	ldr	r0, [r7, #4]
 800c310:	f000 fa01 	bl	800c716 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c314:	6878      	ldr	r0, [r7, #4]
 800c316:	f000 fa12 	bl	800c73e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	2200      	movs	r2, #0
 800c31e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800c320:	68bb      	ldr	r3, [r7, #8]
 800c322:	f003 0310 	and.w	r3, r3, #16
 800c326:	2b00      	cmp	r3, #0
 800c328:	d020      	beq.n	800c36c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	f003 0310 	and.w	r3, r3, #16
 800c330:	2b00      	cmp	r3, #0
 800c332:	d01b      	beq.n	800c36c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	f06f 0210 	mvn.w	r2, #16
 800c33c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	2208      	movs	r2, #8
 800c342:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	69db      	ldr	r3, [r3, #28]
 800c34a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d003      	beq.n	800c35a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c352:	6878      	ldr	r0, [r7, #4]
 800c354:	f000 f9e9 	bl	800c72a <HAL_TIM_IC_CaptureCallback>
 800c358:	e005      	b.n	800c366 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c35a:	6878      	ldr	r0, [r7, #4]
 800c35c:	f000 f9db 	bl	800c716 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c360:	6878      	ldr	r0, [r7, #4]
 800c362:	f000 f9ec 	bl	800c73e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	2200      	movs	r2, #0
 800c36a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800c36c:	68bb      	ldr	r3, [r7, #8]
 800c36e:	f003 0301 	and.w	r3, r3, #1
 800c372:	2b00      	cmp	r3, #0
 800c374:	d00c      	beq.n	800c390 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	f003 0301 	and.w	r3, r3, #1
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d007      	beq.n	800c390 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	f06f 0201 	mvn.w	r2, #1
 800c388:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c38a:	6878      	ldr	r0, [r7, #4]
 800c38c:	f7f8 f820 	bl	80043d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800c390:	68bb      	ldr	r3, [r7, #8]
 800c392:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c396:	2b00      	cmp	r3, #0
 800c398:	d00c      	beq.n	800c3b4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d007      	beq.n	800c3b4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800c3ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c3ae:	6878      	ldr	r0, [r7, #4]
 800c3b0:	f000 fd2a 	bl	800ce08 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800c3b4:	68bb      	ldr	r3, [r7, #8]
 800c3b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d00c      	beq.n	800c3d8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d007      	beq.n	800c3d8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800c3d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c3d2:	6878      	ldr	r0, [r7, #4]
 800c3d4:	f000 f9bd 	bl	800c752 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800c3d8:	68bb      	ldr	r3, [r7, #8]
 800c3da:	f003 0320 	and.w	r3, r3, #32
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d00c      	beq.n	800c3fc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	f003 0320 	and.w	r3, r3, #32
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d007      	beq.n	800c3fc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	f06f 0220 	mvn.w	r2, #32
 800c3f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c3f6:	6878      	ldr	r0, [r7, #4]
 800c3f8:	f000 fcfc 	bl	800cdf4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c3fc:	bf00      	nop
 800c3fe:	3710      	adds	r7, #16
 800c400:	46bd      	mov	sp, r7
 800c402:	bd80      	pop	{r7, pc}

0800c404 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c404:	b580      	push	{r7, lr}
 800c406:	b086      	sub	sp, #24
 800c408:	af00      	add	r7, sp, #0
 800c40a:	60f8      	str	r0, [r7, #12]
 800c40c:	60b9      	str	r1, [r7, #8]
 800c40e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c410:	2300      	movs	r3, #0
 800c412:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c41a:	2b01      	cmp	r3, #1
 800c41c:	d101      	bne.n	800c422 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c41e:	2302      	movs	r3, #2
 800c420:	e0ae      	b.n	800c580 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	2201      	movs	r2, #1
 800c426:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	2b0c      	cmp	r3, #12
 800c42e:	f200 809f 	bhi.w	800c570 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800c432:	a201      	add	r2, pc, #4	@ (adr r2, 800c438 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c438:	0800c46d 	.word	0x0800c46d
 800c43c:	0800c571 	.word	0x0800c571
 800c440:	0800c571 	.word	0x0800c571
 800c444:	0800c571 	.word	0x0800c571
 800c448:	0800c4ad 	.word	0x0800c4ad
 800c44c:	0800c571 	.word	0x0800c571
 800c450:	0800c571 	.word	0x0800c571
 800c454:	0800c571 	.word	0x0800c571
 800c458:	0800c4ef 	.word	0x0800c4ef
 800c45c:	0800c571 	.word	0x0800c571
 800c460:	0800c571 	.word	0x0800c571
 800c464:	0800c571 	.word	0x0800c571
 800c468:	0800c52f 	.word	0x0800c52f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	68b9      	ldr	r1, [r7, #8]
 800c472:	4618      	mov	r0, r3
 800c474:	f000 fa04 	bl	800c880 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	699a      	ldr	r2, [r3, #24]
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	f042 0208 	orr.w	r2, r2, #8
 800c486:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	699a      	ldr	r2, [r3, #24]
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	f022 0204 	bic.w	r2, r2, #4
 800c496:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	6999      	ldr	r1, [r3, #24]
 800c49e:	68bb      	ldr	r3, [r7, #8]
 800c4a0:	691a      	ldr	r2, [r3, #16]
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	430a      	orrs	r2, r1
 800c4a8:	619a      	str	r2, [r3, #24]
      break;
 800c4aa:	e064      	b.n	800c576 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	68b9      	ldr	r1, [r7, #8]
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	f000 fa4a 	bl	800c94c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	699a      	ldr	r2, [r3, #24]
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c4c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	699a      	ldr	r2, [r3, #24]
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c4d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	6999      	ldr	r1, [r3, #24]
 800c4de:	68bb      	ldr	r3, [r7, #8]
 800c4e0:	691b      	ldr	r3, [r3, #16]
 800c4e2:	021a      	lsls	r2, r3, #8
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	430a      	orrs	r2, r1
 800c4ea:	619a      	str	r2, [r3, #24]
      break;
 800c4ec:	e043      	b.n	800c576 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	68b9      	ldr	r1, [r7, #8]
 800c4f4:	4618      	mov	r0, r3
 800c4f6:	f000 fa95 	bl	800ca24 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	69da      	ldr	r2, [r3, #28]
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	f042 0208 	orr.w	r2, r2, #8
 800c508:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	69da      	ldr	r2, [r3, #28]
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	f022 0204 	bic.w	r2, r2, #4
 800c518:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	69d9      	ldr	r1, [r3, #28]
 800c520:	68bb      	ldr	r3, [r7, #8]
 800c522:	691a      	ldr	r2, [r3, #16]
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	430a      	orrs	r2, r1
 800c52a:	61da      	str	r2, [r3, #28]
      break;
 800c52c:	e023      	b.n	800c576 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	68b9      	ldr	r1, [r7, #8]
 800c534:	4618      	mov	r0, r3
 800c536:	f000 fadf 	bl	800caf8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	69da      	ldr	r2, [r3, #28]
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c548:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	69da      	ldr	r2, [r3, #28]
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c558:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	69d9      	ldr	r1, [r3, #28]
 800c560:	68bb      	ldr	r3, [r7, #8]
 800c562:	691b      	ldr	r3, [r3, #16]
 800c564:	021a      	lsls	r2, r3, #8
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	430a      	orrs	r2, r1
 800c56c:	61da      	str	r2, [r3, #28]
      break;
 800c56e:	e002      	b.n	800c576 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800c570:	2301      	movs	r3, #1
 800c572:	75fb      	strb	r3, [r7, #23]
      break;
 800c574:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	2200      	movs	r2, #0
 800c57a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c57e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c580:	4618      	mov	r0, r3
 800c582:	3718      	adds	r7, #24
 800c584:	46bd      	mov	sp, r7
 800c586:	bd80      	pop	{r7, pc}

0800c588 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c588:	b580      	push	{r7, lr}
 800c58a:	b084      	sub	sp, #16
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	6078      	str	r0, [r7, #4]
 800c590:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c592:	2300      	movs	r3, #0
 800c594:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c59c:	2b01      	cmp	r3, #1
 800c59e:	d101      	bne.n	800c5a4 <HAL_TIM_ConfigClockSource+0x1c>
 800c5a0:	2302      	movs	r3, #2
 800c5a2:	e0b4      	b.n	800c70e <HAL_TIM_ConfigClockSource+0x186>
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	2201      	movs	r2, #1
 800c5a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	2202      	movs	r2, #2
 800c5b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	689b      	ldr	r3, [r3, #8]
 800c5ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c5bc:	68bb      	ldr	r3, [r7, #8]
 800c5be:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800c5c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c5c4:	68bb      	ldr	r3, [r7, #8]
 800c5c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c5ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	68ba      	ldr	r2, [r7, #8]
 800c5d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c5d4:	683b      	ldr	r3, [r7, #0]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c5dc:	d03e      	beq.n	800c65c <HAL_TIM_ConfigClockSource+0xd4>
 800c5de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c5e2:	f200 8087 	bhi.w	800c6f4 <HAL_TIM_ConfigClockSource+0x16c>
 800c5e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c5ea:	f000 8086 	beq.w	800c6fa <HAL_TIM_ConfigClockSource+0x172>
 800c5ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c5f2:	d87f      	bhi.n	800c6f4 <HAL_TIM_ConfigClockSource+0x16c>
 800c5f4:	2b70      	cmp	r3, #112	@ 0x70
 800c5f6:	d01a      	beq.n	800c62e <HAL_TIM_ConfigClockSource+0xa6>
 800c5f8:	2b70      	cmp	r3, #112	@ 0x70
 800c5fa:	d87b      	bhi.n	800c6f4 <HAL_TIM_ConfigClockSource+0x16c>
 800c5fc:	2b60      	cmp	r3, #96	@ 0x60
 800c5fe:	d050      	beq.n	800c6a2 <HAL_TIM_ConfigClockSource+0x11a>
 800c600:	2b60      	cmp	r3, #96	@ 0x60
 800c602:	d877      	bhi.n	800c6f4 <HAL_TIM_ConfigClockSource+0x16c>
 800c604:	2b50      	cmp	r3, #80	@ 0x50
 800c606:	d03c      	beq.n	800c682 <HAL_TIM_ConfigClockSource+0xfa>
 800c608:	2b50      	cmp	r3, #80	@ 0x50
 800c60a:	d873      	bhi.n	800c6f4 <HAL_TIM_ConfigClockSource+0x16c>
 800c60c:	2b40      	cmp	r3, #64	@ 0x40
 800c60e:	d058      	beq.n	800c6c2 <HAL_TIM_ConfigClockSource+0x13a>
 800c610:	2b40      	cmp	r3, #64	@ 0x40
 800c612:	d86f      	bhi.n	800c6f4 <HAL_TIM_ConfigClockSource+0x16c>
 800c614:	2b30      	cmp	r3, #48	@ 0x30
 800c616:	d064      	beq.n	800c6e2 <HAL_TIM_ConfigClockSource+0x15a>
 800c618:	2b30      	cmp	r3, #48	@ 0x30
 800c61a:	d86b      	bhi.n	800c6f4 <HAL_TIM_ConfigClockSource+0x16c>
 800c61c:	2b20      	cmp	r3, #32
 800c61e:	d060      	beq.n	800c6e2 <HAL_TIM_ConfigClockSource+0x15a>
 800c620:	2b20      	cmp	r3, #32
 800c622:	d867      	bhi.n	800c6f4 <HAL_TIM_ConfigClockSource+0x16c>
 800c624:	2b00      	cmp	r3, #0
 800c626:	d05c      	beq.n	800c6e2 <HAL_TIM_ConfigClockSource+0x15a>
 800c628:	2b10      	cmp	r3, #16
 800c62a:	d05a      	beq.n	800c6e2 <HAL_TIM_ConfigClockSource+0x15a>
 800c62c:	e062      	b.n	800c6f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c632:	683b      	ldr	r3, [r7, #0]
 800c634:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c636:	683b      	ldr	r3, [r7, #0]
 800c638:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c63a:	683b      	ldr	r3, [r7, #0]
 800c63c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c63e:	f000 fb25 	bl	800cc8c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	689b      	ldr	r3, [r3, #8]
 800c648:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c64a:	68bb      	ldr	r3, [r7, #8]
 800c64c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800c650:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	68ba      	ldr	r2, [r7, #8]
 800c658:	609a      	str	r2, [r3, #8]
      break;
 800c65a:	e04f      	b.n	800c6fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c660:	683b      	ldr	r3, [r7, #0]
 800c662:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c664:	683b      	ldr	r3, [r7, #0]
 800c666:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c668:	683b      	ldr	r3, [r7, #0]
 800c66a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c66c:	f000 fb0e 	bl	800cc8c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	689a      	ldr	r2, [r3, #8]
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c67e:	609a      	str	r2, [r3, #8]
      break;
 800c680:	e03c      	b.n	800c6fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c686:	683b      	ldr	r3, [r7, #0]
 800c688:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c68a:	683b      	ldr	r3, [r7, #0]
 800c68c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c68e:	461a      	mov	r2, r3
 800c690:	f000 fa82 	bl	800cb98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	2150      	movs	r1, #80	@ 0x50
 800c69a:	4618      	mov	r0, r3
 800c69c:	f000 fadb 	bl	800cc56 <TIM_ITRx_SetConfig>
      break;
 800c6a0:	e02c      	b.n	800c6fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c6a6:	683b      	ldr	r3, [r7, #0]
 800c6a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c6aa:	683b      	ldr	r3, [r7, #0]
 800c6ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c6ae:	461a      	mov	r2, r3
 800c6b0:	f000 faa1 	bl	800cbf6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	2160      	movs	r1, #96	@ 0x60
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	f000 facb 	bl	800cc56 <TIM_ITRx_SetConfig>
      break;
 800c6c0:	e01c      	b.n	800c6fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c6c6:	683b      	ldr	r3, [r7, #0]
 800c6c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c6ca:	683b      	ldr	r3, [r7, #0]
 800c6cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c6ce:	461a      	mov	r2, r3
 800c6d0:	f000 fa62 	bl	800cb98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	2140      	movs	r1, #64	@ 0x40
 800c6da:	4618      	mov	r0, r3
 800c6dc:	f000 fabb 	bl	800cc56 <TIM_ITRx_SetConfig>
      break;
 800c6e0:	e00c      	b.n	800c6fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	681a      	ldr	r2, [r3, #0]
 800c6e6:	683b      	ldr	r3, [r7, #0]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	4619      	mov	r1, r3
 800c6ec:	4610      	mov	r0, r2
 800c6ee:	f000 fab2 	bl	800cc56 <TIM_ITRx_SetConfig>
      break;
 800c6f2:	e003      	b.n	800c6fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800c6f4:	2301      	movs	r3, #1
 800c6f6:	73fb      	strb	r3, [r7, #15]
      break;
 800c6f8:	e000      	b.n	800c6fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 800c6fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	2201      	movs	r2, #1
 800c700:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	2200      	movs	r2, #0
 800c708:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c70c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c70e:	4618      	mov	r0, r3
 800c710:	3710      	adds	r7, #16
 800c712:	46bd      	mov	sp, r7
 800c714:	bd80      	pop	{r7, pc}

0800c716 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c716:	b480      	push	{r7}
 800c718:	b083      	sub	sp, #12
 800c71a:	af00      	add	r7, sp, #0
 800c71c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c71e:	bf00      	nop
 800c720:	370c      	adds	r7, #12
 800c722:	46bd      	mov	sp, r7
 800c724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c728:	4770      	bx	lr

0800c72a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c72a:	b480      	push	{r7}
 800c72c:	b083      	sub	sp, #12
 800c72e:	af00      	add	r7, sp, #0
 800c730:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c732:	bf00      	nop
 800c734:	370c      	adds	r7, #12
 800c736:	46bd      	mov	sp, r7
 800c738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c73c:	4770      	bx	lr

0800c73e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c73e:	b480      	push	{r7}
 800c740:	b083      	sub	sp, #12
 800c742:	af00      	add	r7, sp, #0
 800c744:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c746:	bf00      	nop
 800c748:	370c      	adds	r7, #12
 800c74a:	46bd      	mov	sp, r7
 800c74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c750:	4770      	bx	lr

0800c752 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c752:	b480      	push	{r7}
 800c754:	b083      	sub	sp, #12
 800c756:	af00      	add	r7, sp, #0
 800c758:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c75a:	bf00      	nop
 800c75c:	370c      	adds	r7, #12
 800c75e:	46bd      	mov	sp, r7
 800c760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c764:	4770      	bx	lr
	...

0800c768 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c768:	b480      	push	{r7}
 800c76a:	b085      	sub	sp, #20
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	6078      	str	r0, [r7, #4]
 800c770:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	4a3a      	ldr	r2, [pc, #232]	@ (800c864 <TIM_Base_SetConfig+0xfc>)
 800c77c:	4293      	cmp	r3, r2
 800c77e:	d00f      	beq.n	800c7a0 <TIM_Base_SetConfig+0x38>
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c786:	d00b      	beq.n	800c7a0 <TIM_Base_SetConfig+0x38>
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	4a37      	ldr	r2, [pc, #220]	@ (800c868 <TIM_Base_SetConfig+0x100>)
 800c78c:	4293      	cmp	r3, r2
 800c78e:	d007      	beq.n	800c7a0 <TIM_Base_SetConfig+0x38>
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	4a36      	ldr	r2, [pc, #216]	@ (800c86c <TIM_Base_SetConfig+0x104>)
 800c794:	4293      	cmp	r3, r2
 800c796:	d003      	beq.n	800c7a0 <TIM_Base_SetConfig+0x38>
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	4a35      	ldr	r2, [pc, #212]	@ (800c870 <TIM_Base_SetConfig+0x108>)
 800c79c:	4293      	cmp	r3, r2
 800c79e:	d108      	bne.n	800c7b2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c7a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c7a8:	683b      	ldr	r3, [r7, #0]
 800c7aa:	685b      	ldr	r3, [r3, #4]
 800c7ac:	68fa      	ldr	r2, [r7, #12]
 800c7ae:	4313      	orrs	r3, r2
 800c7b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	4a2b      	ldr	r2, [pc, #172]	@ (800c864 <TIM_Base_SetConfig+0xfc>)
 800c7b6:	4293      	cmp	r3, r2
 800c7b8:	d01b      	beq.n	800c7f2 <TIM_Base_SetConfig+0x8a>
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c7c0:	d017      	beq.n	800c7f2 <TIM_Base_SetConfig+0x8a>
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	4a28      	ldr	r2, [pc, #160]	@ (800c868 <TIM_Base_SetConfig+0x100>)
 800c7c6:	4293      	cmp	r3, r2
 800c7c8:	d013      	beq.n	800c7f2 <TIM_Base_SetConfig+0x8a>
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	4a27      	ldr	r2, [pc, #156]	@ (800c86c <TIM_Base_SetConfig+0x104>)
 800c7ce:	4293      	cmp	r3, r2
 800c7d0:	d00f      	beq.n	800c7f2 <TIM_Base_SetConfig+0x8a>
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	4a26      	ldr	r2, [pc, #152]	@ (800c870 <TIM_Base_SetConfig+0x108>)
 800c7d6:	4293      	cmp	r3, r2
 800c7d8:	d00b      	beq.n	800c7f2 <TIM_Base_SetConfig+0x8a>
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	4a25      	ldr	r2, [pc, #148]	@ (800c874 <TIM_Base_SetConfig+0x10c>)
 800c7de:	4293      	cmp	r3, r2
 800c7e0:	d007      	beq.n	800c7f2 <TIM_Base_SetConfig+0x8a>
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	4a24      	ldr	r2, [pc, #144]	@ (800c878 <TIM_Base_SetConfig+0x110>)
 800c7e6:	4293      	cmp	r3, r2
 800c7e8:	d003      	beq.n	800c7f2 <TIM_Base_SetConfig+0x8a>
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	4a23      	ldr	r2, [pc, #140]	@ (800c87c <TIM_Base_SetConfig+0x114>)
 800c7ee:	4293      	cmp	r3, r2
 800c7f0:	d108      	bne.n	800c804 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c7f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c7fa:	683b      	ldr	r3, [r7, #0]
 800c7fc:	68db      	ldr	r3, [r3, #12]
 800c7fe:	68fa      	ldr	r2, [r7, #12]
 800c800:	4313      	orrs	r3, r2
 800c802:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c80a:	683b      	ldr	r3, [r7, #0]
 800c80c:	695b      	ldr	r3, [r3, #20]
 800c80e:	4313      	orrs	r3, r2
 800c810:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	68fa      	ldr	r2, [r7, #12]
 800c816:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c818:	683b      	ldr	r3, [r7, #0]
 800c81a:	689a      	ldr	r2, [r3, #8]
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c820:	683b      	ldr	r3, [r7, #0]
 800c822:	681a      	ldr	r2, [r3, #0]
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	4a0e      	ldr	r2, [pc, #56]	@ (800c864 <TIM_Base_SetConfig+0xfc>)
 800c82c:	4293      	cmp	r3, r2
 800c82e:	d103      	bne.n	800c838 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c830:	683b      	ldr	r3, [r7, #0]
 800c832:	691a      	ldr	r2, [r3, #16]
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	2201      	movs	r2, #1
 800c83c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	691b      	ldr	r3, [r3, #16]
 800c842:	f003 0301 	and.w	r3, r3, #1
 800c846:	2b01      	cmp	r3, #1
 800c848:	d105      	bne.n	800c856 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	691b      	ldr	r3, [r3, #16]
 800c84e:	f023 0201 	bic.w	r2, r3, #1
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	611a      	str	r2, [r3, #16]
  }
}
 800c856:	bf00      	nop
 800c858:	3714      	adds	r7, #20
 800c85a:	46bd      	mov	sp, r7
 800c85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c860:	4770      	bx	lr
 800c862:	bf00      	nop
 800c864:	40010000 	.word	0x40010000
 800c868:	40000400 	.word	0x40000400
 800c86c:	40000800 	.word	0x40000800
 800c870:	40000c00 	.word	0x40000c00
 800c874:	40014000 	.word	0x40014000
 800c878:	40014400 	.word	0x40014400
 800c87c:	40014800 	.word	0x40014800

0800c880 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c880:	b480      	push	{r7}
 800c882:	b087      	sub	sp, #28
 800c884:	af00      	add	r7, sp, #0
 800c886:	6078      	str	r0, [r7, #4]
 800c888:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	6a1b      	ldr	r3, [r3, #32]
 800c88e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	6a1b      	ldr	r3, [r3, #32]
 800c894:	f023 0201 	bic.w	r2, r3, #1
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	685b      	ldr	r3, [r3, #4]
 800c8a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	699b      	ldr	r3, [r3, #24]
 800c8a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c8ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	f023 0303 	bic.w	r3, r3, #3
 800c8b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c8b8:	683b      	ldr	r3, [r7, #0]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	68fa      	ldr	r2, [r7, #12]
 800c8be:	4313      	orrs	r3, r2
 800c8c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c8c2:	697b      	ldr	r3, [r7, #20]
 800c8c4:	f023 0302 	bic.w	r3, r3, #2
 800c8c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c8ca:	683b      	ldr	r3, [r7, #0]
 800c8cc:	689b      	ldr	r3, [r3, #8]
 800c8ce:	697a      	ldr	r2, [r7, #20]
 800c8d0:	4313      	orrs	r3, r2
 800c8d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	4a1c      	ldr	r2, [pc, #112]	@ (800c948 <TIM_OC1_SetConfig+0xc8>)
 800c8d8:	4293      	cmp	r3, r2
 800c8da:	d10c      	bne.n	800c8f6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c8dc:	697b      	ldr	r3, [r7, #20]
 800c8de:	f023 0308 	bic.w	r3, r3, #8
 800c8e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c8e4:	683b      	ldr	r3, [r7, #0]
 800c8e6:	68db      	ldr	r3, [r3, #12]
 800c8e8:	697a      	ldr	r2, [r7, #20]
 800c8ea:	4313      	orrs	r3, r2
 800c8ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c8ee:	697b      	ldr	r3, [r7, #20]
 800c8f0:	f023 0304 	bic.w	r3, r3, #4
 800c8f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	4a13      	ldr	r2, [pc, #76]	@ (800c948 <TIM_OC1_SetConfig+0xc8>)
 800c8fa:	4293      	cmp	r3, r2
 800c8fc:	d111      	bne.n	800c922 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c8fe:	693b      	ldr	r3, [r7, #16]
 800c900:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c904:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c906:	693b      	ldr	r3, [r7, #16]
 800c908:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c90c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c90e:	683b      	ldr	r3, [r7, #0]
 800c910:	695b      	ldr	r3, [r3, #20]
 800c912:	693a      	ldr	r2, [r7, #16]
 800c914:	4313      	orrs	r3, r2
 800c916:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c918:	683b      	ldr	r3, [r7, #0]
 800c91a:	699b      	ldr	r3, [r3, #24]
 800c91c:	693a      	ldr	r2, [r7, #16]
 800c91e:	4313      	orrs	r3, r2
 800c920:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	693a      	ldr	r2, [r7, #16]
 800c926:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	68fa      	ldr	r2, [r7, #12]
 800c92c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c92e:	683b      	ldr	r3, [r7, #0]
 800c930:	685a      	ldr	r2, [r3, #4]
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	697a      	ldr	r2, [r7, #20]
 800c93a:	621a      	str	r2, [r3, #32]
}
 800c93c:	bf00      	nop
 800c93e:	371c      	adds	r7, #28
 800c940:	46bd      	mov	sp, r7
 800c942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c946:	4770      	bx	lr
 800c948:	40010000 	.word	0x40010000

0800c94c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c94c:	b480      	push	{r7}
 800c94e:	b087      	sub	sp, #28
 800c950:	af00      	add	r7, sp, #0
 800c952:	6078      	str	r0, [r7, #4]
 800c954:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	6a1b      	ldr	r3, [r3, #32]
 800c95a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	6a1b      	ldr	r3, [r3, #32]
 800c960:	f023 0210 	bic.w	r2, r3, #16
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	685b      	ldr	r3, [r3, #4]
 800c96c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	699b      	ldr	r3, [r3, #24]
 800c972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c97a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c982:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c984:	683b      	ldr	r3, [r7, #0]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	021b      	lsls	r3, r3, #8
 800c98a:	68fa      	ldr	r2, [r7, #12]
 800c98c:	4313      	orrs	r3, r2
 800c98e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c990:	697b      	ldr	r3, [r7, #20]
 800c992:	f023 0320 	bic.w	r3, r3, #32
 800c996:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c998:	683b      	ldr	r3, [r7, #0]
 800c99a:	689b      	ldr	r3, [r3, #8]
 800c99c:	011b      	lsls	r3, r3, #4
 800c99e:	697a      	ldr	r2, [r7, #20]
 800c9a0:	4313      	orrs	r3, r2
 800c9a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	4a1e      	ldr	r2, [pc, #120]	@ (800ca20 <TIM_OC2_SetConfig+0xd4>)
 800c9a8:	4293      	cmp	r3, r2
 800c9aa:	d10d      	bne.n	800c9c8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c9ac:	697b      	ldr	r3, [r7, #20]
 800c9ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c9b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c9b4:	683b      	ldr	r3, [r7, #0]
 800c9b6:	68db      	ldr	r3, [r3, #12]
 800c9b8:	011b      	lsls	r3, r3, #4
 800c9ba:	697a      	ldr	r2, [r7, #20]
 800c9bc:	4313      	orrs	r3, r2
 800c9be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c9c0:	697b      	ldr	r3, [r7, #20]
 800c9c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c9c6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	4a15      	ldr	r2, [pc, #84]	@ (800ca20 <TIM_OC2_SetConfig+0xd4>)
 800c9cc:	4293      	cmp	r3, r2
 800c9ce:	d113      	bne.n	800c9f8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c9d0:	693b      	ldr	r3, [r7, #16]
 800c9d2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c9d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c9d8:	693b      	ldr	r3, [r7, #16]
 800c9da:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c9de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c9e0:	683b      	ldr	r3, [r7, #0]
 800c9e2:	695b      	ldr	r3, [r3, #20]
 800c9e4:	009b      	lsls	r3, r3, #2
 800c9e6:	693a      	ldr	r2, [r7, #16]
 800c9e8:	4313      	orrs	r3, r2
 800c9ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c9ec:	683b      	ldr	r3, [r7, #0]
 800c9ee:	699b      	ldr	r3, [r3, #24]
 800c9f0:	009b      	lsls	r3, r3, #2
 800c9f2:	693a      	ldr	r2, [r7, #16]
 800c9f4:	4313      	orrs	r3, r2
 800c9f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	693a      	ldr	r2, [r7, #16]
 800c9fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	68fa      	ldr	r2, [r7, #12]
 800ca02:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ca04:	683b      	ldr	r3, [r7, #0]
 800ca06:	685a      	ldr	r2, [r3, #4]
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	697a      	ldr	r2, [r7, #20]
 800ca10:	621a      	str	r2, [r3, #32]
}
 800ca12:	bf00      	nop
 800ca14:	371c      	adds	r7, #28
 800ca16:	46bd      	mov	sp, r7
 800ca18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca1c:	4770      	bx	lr
 800ca1e:	bf00      	nop
 800ca20:	40010000 	.word	0x40010000

0800ca24 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ca24:	b480      	push	{r7}
 800ca26:	b087      	sub	sp, #28
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	6078      	str	r0, [r7, #4]
 800ca2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	6a1b      	ldr	r3, [r3, #32]
 800ca32:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	6a1b      	ldr	r3, [r3, #32]
 800ca38:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	685b      	ldr	r3, [r3, #4]
 800ca44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	69db      	ldr	r3, [r3, #28]
 800ca4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ca52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	f023 0303 	bic.w	r3, r3, #3
 800ca5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ca5c:	683b      	ldr	r3, [r7, #0]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	68fa      	ldr	r2, [r7, #12]
 800ca62:	4313      	orrs	r3, r2
 800ca64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ca66:	697b      	ldr	r3, [r7, #20]
 800ca68:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ca6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ca6e:	683b      	ldr	r3, [r7, #0]
 800ca70:	689b      	ldr	r3, [r3, #8]
 800ca72:	021b      	lsls	r3, r3, #8
 800ca74:	697a      	ldr	r2, [r7, #20]
 800ca76:	4313      	orrs	r3, r2
 800ca78:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	4a1d      	ldr	r2, [pc, #116]	@ (800caf4 <TIM_OC3_SetConfig+0xd0>)
 800ca7e:	4293      	cmp	r3, r2
 800ca80:	d10d      	bne.n	800ca9e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ca82:	697b      	ldr	r3, [r7, #20]
 800ca84:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ca88:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ca8a:	683b      	ldr	r3, [r7, #0]
 800ca8c:	68db      	ldr	r3, [r3, #12]
 800ca8e:	021b      	lsls	r3, r3, #8
 800ca90:	697a      	ldr	r2, [r7, #20]
 800ca92:	4313      	orrs	r3, r2
 800ca94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ca96:	697b      	ldr	r3, [r7, #20]
 800ca98:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ca9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	4a14      	ldr	r2, [pc, #80]	@ (800caf4 <TIM_OC3_SetConfig+0xd0>)
 800caa2:	4293      	cmp	r3, r2
 800caa4:	d113      	bne.n	800cace <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800caa6:	693b      	ldr	r3, [r7, #16]
 800caa8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800caac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800caae:	693b      	ldr	r3, [r7, #16]
 800cab0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800cab4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800cab6:	683b      	ldr	r3, [r7, #0]
 800cab8:	695b      	ldr	r3, [r3, #20]
 800caba:	011b      	lsls	r3, r3, #4
 800cabc:	693a      	ldr	r2, [r7, #16]
 800cabe:	4313      	orrs	r3, r2
 800cac0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800cac2:	683b      	ldr	r3, [r7, #0]
 800cac4:	699b      	ldr	r3, [r3, #24]
 800cac6:	011b      	lsls	r3, r3, #4
 800cac8:	693a      	ldr	r2, [r7, #16]
 800caca:	4313      	orrs	r3, r2
 800cacc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	693a      	ldr	r2, [r7, #16]
 800cad2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	68fa      	ldr	r2, [r7, #12]
 800cad8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800cada:	683b      	ldr	r3, [r7, #0]
 800cadc:	685a      	ldr	r2, [r3, #4]
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	697a      	ldr	r2, [r7, #20]
 800cae6:	621a      	str	r2, [r3, #32]
}
 800cae8:	bf00      	nop
 800caea:	371c      	adds	r7, #28
 800caec:	46bd      	mov	sp, r7
 800caee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf2:	4770      	bx	lr
 800caf4:	40010000 	.word	0x40010000

0800caf8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800caf8:	b480      	push	{r7}
 800cafa:	b087      	sub	sp, #28
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	6078      	str	r0, [r7, #4]
 800cb00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	6a1b      	ldr	r3, [r3, #32]
 800cb06:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	6a1b      	ldr	r3, [r3, #32]
 800cb0c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	685b      	ldr	r3, [r3, #4]
 800cb18:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	69db      	ldr	r3, [r3, #28]
 800cb1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cb26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800cb2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cb30:	683b      	ldr	r3, [r7, #0]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	021b      	lsls	r3, r3, #8
 800cb36:	68fa      	ldr	r2, [r7, #12]
 800cb38:	4313      	orrs	r3, r2
 800cb3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800cb3c:	693b      	ldr	r3, [r7, #16]
 800cb3e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800cb42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800cb44:	683b      	ldr	r3, [r7, #0]
 800cb46:	689b      	ldr	r3, [r3, #8]
 800cb48:	031b      	lsls	r3, r3, #12
 800cb4a:	693a      	ldr	r2, [r7, #16]
 800cb4c:	4313      	orrs	r3, r2
 800cb4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	4a10      	ldr	r2, [pc, #64]	@ (800cb94 <TIM_OC4_SetConfig+0x9c>)
 800cb54:	4293      	cmp	r3, r2
 800cb56:	d109      	bne.n	800cb6c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800cb58:	697b      	ldr	r3, [r7, #20]
 800cb5a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800cb5e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800cb60:	683b      	ldr	r3, [r7, #0]
 800cb62:	695b      	ldr	r3, [r3, #20]
 800cb64:	019b      	lsls	r3, r3, #6
 800cb66:	697a      	ldr	r2, [r7, #20]
 800cb68:	4313      	orrs	r3, r2
 800cb6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	697a      	ldr	r2, [r7, #20]
 800cb70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	68fa      	ldr	r2, [r7, #12]
 800cb76:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800cb78:	683b      	ldr	r3, [r7, #0]
 800cb7a:	685a      	ldr	r2, [r3, #4]
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	693a      	ldr	r2, [r7, #16]
 800cb84:	621a      	str	r2, [r3, #32]
}
 800cb86:	bf00      	nop
 800cb88:	371c      	adds	r7, #28
 800cb8a:	46bd      	mov	sp, r7
 800cb8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb90:	4770      	bx	lr
 800cb92:	bf00      	nop
 800cb94:	40010000 	.word	0x40010000

0800cb98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cb98:	b480      	push	{r7}
 800cb9a:	b087      	sub	sp, #28
 800cb9c:	af00      	add	r7, sp, #0
 800cb9e:	60f8      	str	r0, [r7, #12]
 800cba0:	60b9      	str	r1, [r7, #8]
 800cba2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	6a1b      	ldr	r3, [r3, #32]
 800cba8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	6a1b      	ldr	r3, [r3, #32]
 800cbae:	f023 0201 	bic.w	r2, r3, #1
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	699b      	ldr	r3, [r3, #24]
 800cbba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cbbc:	693b      	ldr	r3, [r7, #16]
 800cbbe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800cbc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	011b      	lsls	r3, r3, #4
 800cbc8:	693a      	ldr	r2, [r7, #16]
 800cbca:	4313      	orrs	r3, r2
 800cbcc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cbce:	697b      	ldr	r3, [r7, #20]
 800cbd0:	f023 030a 	bic.w	r3, r3, #10
 800cbd4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800cbd6:	697a      	ldr	r2, [r7, #20]
 800cbd8:	68bb      	ldr	r3, [r7, #8]
 800cbda:	4313      	orrs	r3, r2
 800cbdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	693a      	ldr	r2, [r7, #16]
 800cbe2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	697a      	ldr	r2, [r7, #20]
 800cbe8:	621a      	str	r2, [r3, #32]
}
 800cbea:	bf00      	nop
 800cbec:	371c      	adds	r7, #28
 800cbee:	46bd      	mov	sp, r7
 800cbf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf4:	4770      	bx	lr

0800cbf6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cbf6:	b480      	push	{r7}
 800cbf8:	b087      	sub	sp, #28
 800cbfa:	af00      	add	r7, sp, #0
 800cbfc:	60f8      	str	r0, [r7, #12]
 800cbfe:	60b9      	str	r1, [r7, #8]
 800cc00:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	6a1b      	ldr	r3, [r3, #32]
 800cc06:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	6a1b      	ldr	r3, [r3, #32]
 800cc0c:	f023 0210 	bic.w	r2, r3, #16
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	699b      	ldr	r3, [r3, #24]
 800cc18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cc1a:	693b      	ldr	r3, [r7, #16]
 800cc1c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800cc20:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	031b      	lsls	r3, r3, #12
 800cc26:	693a      	ldr	r2, [r7, #16]
 800cc28:	4313      	orrs	r3, r2
 800cc2a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cc2c:	697b      	ldr	r3, [r7, #20]
 800cc2e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800cc32:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800cc34:	68bb      	ldr	r3, [r7, #8]
 800cc36:	011b      	lsls	r3, r3, #4
 800cc38:	697a      	ldr	r2, [r7, #20]
 800cc3a:	4313      	orrs	r3, r2
 800cc3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	693a      	ldr	r2, [r7, #16]
 800cc42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	697a      	ldr	r2, [r7, #20]
 800cc48:	621a      	str	r2, [r3, #32]
}
 800cc4a:	bf00      	nop
 800cc4c:	371c      	adds	r7, #28
 800cc4e:	46bd      	mov	sp, r7
 800cc50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc54:	4770      	bx	lr

0800cc56 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800cc56:	b480      	push	{r7}
 800cc58:	b085      	sub	sp, #20
 800cc5a:	af00      	add	r7, sp, #0
 800cc5c:	6078      	str	r0, [r7, #4]
 800cc5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	689b      	ldr	r3, [r3, #8]
 800cc64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cc6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cc6e:	683a      	ldr	r2, [r7, #0]
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	4313      	orrs	r3, r2
 800cc74:	f043 0307 	orr.w	r3, r3, #7
 800cc78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	68fa      	ldr	r2, [r7, #12]
 800cc7e:	609a      	str	r2, [r3, #8]
}
 800cc80:	bf00      	nop
 800cc82:	3714      	adds	r7, #20
 800cc84:	46bd      	mov	sp, r7
 800cc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc8a:	4770      	bx	lr

0800cc8c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800cc8c:	b480      	push	{r7}
 800cc8e:	b087      	sub	sp, #28
 800cc90:	af00      	add	r7, sp, #0
 800cc92:	60f8      	str	r0, [r7, #12]
 800cc94:	60b9      	str	r1, [r7, #8]
 800cc96:	607a      	str	r2, [r7, #4]
 800cc98:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	689b      	ldr	r3, [r3, #8]
 800cc9e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cca0:	697b      	ldr	r3, [r7, #20]
 800cca2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800cca6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800cca8:	683b      	ldr	r3, [r7, #0]
 800ccaa:	021a      	lsls	r2, r3, #8
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	431a      	orrs	r2, r3
 800ccb0:	68bb      	ldr	r3, [r7, #8]
 800ccb2:	4313      	orrs	r3, r2
 800ccb4:	697a      	ldr	r2, [r7, #20]
 800ccb6:	4313      	orrs	r3, r2
 800ccb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	697a      	ldr	r2, [r7, #20]
 800ccbe:	609a      	str	r2, [r3, #8]
}
 800ccc0:	bf00      	nop
 800ccc2:	371c      	adds	r7, #28
 800ccc4:	46bd      	mov	sp, r7
 800ccc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccca:	4770      	bx	lr

0800cccc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800cccc:	b480      	push	{r7}
 800ccce:	b087      	sub	sp, #28
 800ccd0:	af00      	add	r7, sp, #0
 800ccd2:	60f8      	str	r0, [r7, #12]
 800ccd4:	60b9      	str	r1, [r7, #8]
 800ccd6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ccd8:	68bb      	ldr	r3, [r7, #8]
 800ccda:	f003 031f 	and.w	r3, r3, #31
 800ccde:	2201      	movs	r2, #1
 800cce0:	fa02 f303 	lsl.w	r3, r2, r3
 800cce4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	6a1a      	ldr	r2, [r3, #32]
 800ccea:	697b      	ldr	r3, [r7, #20]
 800ccec:	43db      	mvns	r3, r3
 800ccee:	401a      	ands	r2, r3
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	6a1a      	ldr	r2, [r3, #32]
 800ccf8:	68bb      	ldr	r3, [r7, #8]
 800ccfa:	f003 031f 	and.w	r3, r3, #31
 800ccfe:	6879      	ldr	r1, [r7, #4]
 800cd00:	fa01 f303 	lsl.w	r3, r1, r3
 800cd04:	431a      	orrs	r2, r3
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	621a      	str	r2, [r3, #32]
}
 800cd0a:	bf00      	nop
 800cd0c:	371c      	adds	r7, #28
 800cd0e:	46bd      	mov	sp, r7
 800cd10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd14:	4770      	bx	lr
	...

0800cd18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cd18:	b480      	push	{r7}
 800cd1a:	b085      	sub	sp, #20
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	6078      	str	r0, [r7, #4]
 800cd20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800cd28:	2b01      	cmp	r3, #1
 800cd2a:	d101      	bne.n	800cd30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cd2c:	2302      	movs	r3, #2
 800cd2e:	e050      	b.n	800cdd2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	2201      	movs	r2, #1
 800cd34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	2202      	movs	r2, #2
 800cd3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	685b      	ldr	r3, [r3, #4]
 800cd46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	689b      	ldr	r3, [r3, #8]
 800cd4e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cd56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cd58:	683b      	ldr	r3, [r7, #0]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	68fa      	ldr	r2, [r7, #12]
 800cd5e:	4313      	orrs	r3, r2
 800cd60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	68fa      	ldr	r2, [r7, #12]
 800cd68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	4a1c      	ldr	r2, [pc, #112]	@ (800cde0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800cd70:	4293      	cmp	r3, r2
 800cd72:	d018      	beq.n	800cda6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cd7c:	d013      	beq.n	800cda6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	4a18      	ldr	r2, [pc, #96]	@ (800cde4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800cd84:	4293      	cmp	r3, r2
 800cd86:	d00e      	beq.n	800cda6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	4a16      	ldr	r2, [pc, #88]	@ (800cde8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800cd8e:	4293      	cmp	r3, r2
 800cd90:	d009      	beq.n	800cda6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	4a15      	ldr	r2, [pc, #84]	@ (800cdec <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800cd98:	4293      	cmp	r3, r2
 800cd9a:	d004      	beq.n	800cda6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	4a13      	ldr	r2, [pc, #76]	@ (800cdf0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800cda2:	4293      	cmp	r3, r2
 800cda4:	d10c      	bne.n	800cdc0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cda6:	68bb      	ldr	r3, [r7, #8]
 800cda8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cdac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cdae:	683b      	ldr	r3, [r7, #0]
 800cdb0:	685b      	ldr	r3, [r3, #4]
 800cdb2:	68ba      	ldr	r2, [r7, #8]
 800cdb4:	4313      	orrs	r3, r2
 800cdb6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	68ba      	ldr	r2, [r7, #8]
 800cdbe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	2201      	movs	r2, #1
 800cdc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	2200      	movs	r2, #0
 800cdcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800cdd0:	2300      	movs	r3, #0
}
 800cdd2:	4618      	mov	r0, r3
 800cdd4:	3714      	adds	r7, #20
 800cdd6:	46bd      	mov	sp, r7
 800cdd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cddc:	4770      	bx	lr
 800cdde:	bf00      	nop
 800cde0:	40010000 	.word	0x40010000
 800cde4:	40000400 	.word	0x40000400
 800cde8:	40000800 	.word	0x40000800
 800cdec:	40000c00 	.word	0x40000c00
 800cdf0:	40014000 	.word	0x40014000

0800cdf4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cdf4:	b480      	push	{r7}
 800cdf6:	b083      	sub	sp, #12
 800cdf8:	af00      	add	r7, sp, #0
 800cdfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cdfc:	bf00      	nop
 800cdfe:	370c      	adds	r7, #12
 800ce00:	46bd      	mov	sp, r7
 800ce02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce06:	4770      	bx	lr

0800ce08 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ce08:	b480      	push	{r7}
 800ce0a:	b083      	sub	sp, #12
 800ce0c:	af00      	add	r7, sp, #0
 800ce0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ce10:	bf00      	nop
 800ce12:	370c      	adds	r7, #12
 800ce14:	46bd      	mov	sp, r7
 800ce16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce1a:	4770      	bx	lr

0800ce1c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ce1c:	b580      	push	{r7, lr}
 800ce1e:	b082      	sub	sp, #8
 800ce20:	af00      	add	r7, sp, #0
 800ce22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d101      	bne.n	800ce2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ce2a:	2301      	movs	r3, #1
 800ce2c:	e042      	b.n	800ceb4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ce34:	b2db      	uxtb	r3, r3
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d106      	bne.n	800ce48 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	2200      	movs	r2, #0
 800ce3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ce42:	6878      	ldr	r0, [r7, #4]
 800ce44:	f7f7 ff50 	bl	8004ce8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	2224      	movs	r2, #36	@ 0x24
 800ce4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	68da      	ldr	r2, [r3, #12]
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800ce5e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ce60:	6878      	ldr	r0, [r7, #4]
 800ce62:	f000 fcdb 	bl	800d81c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	691a      	ldr	r2, [r3, #16]
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ce74:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	695a      	ldr	r2, [r3, #20]
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ce84:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	68da      	ldr	r2, [r3, #12]
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800ce94:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	2200      	movs	r2, #0
 800ce9a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	2220      	movs	r2, #32
 800cea0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	2220      	movs	r2, #32
 800cea8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	2200      	movs	r2, #0
 800ceb0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800ceb2:	2300      	movs	r3, #0
}
 800ceb4:	4618      	mov	r0, r3
 800ceb6:	3708      	adds	r7, #8
 800ceb8:	46bd      	mov	sp, r7
 800ceba:	bd80      	pop	{r7, pc}

0800cebc <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cebc:	b580      	push	{r7, lr}
 800cebe:	b084      	sub	sp, #16
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	60f8      	str	r0, [r7, #12]
 800cec4:	60b9      	str	r1, [r7, #8]
 800cec6:	4613      	mov	r3, r2
 800cec8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ced0:	b2db      	uxtb	r3, r3
 800ced2:	2b20      	cmp	r3, #32
 800ced4:	d112      	bne.n	800cefc <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800ced6:	68bb      	ldr	r3, [r7, #8]
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d002      	beq.n	800cee2 <HAL_UART_Receive_IT+0x26>
 800cedc:	88fb      	ldrh	r3, [r7, #6]
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d101      	bne.n	800cee6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800cee2:	2301      	movs	r3, #1
 800cee4:	e00b      	b.n	800cefe <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	2200      	movs	r2, #0
 800ceea:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800ceec:	88fb      	ldrh	r3, [r7, #6]
 800ceee:	461a      	mov	r2, r3
 800cef0:	68b9      	ldr	r1, [r7, #8]
 800cef2:	68f8      	ldr	r0, [r7, #12]
 800cef4:	f000 faba 	bl	800d46c <UART_Start_Receive_IT>
 800cef8:	4603      	mov	r3, r0
 800cefa:	e000      	b.n	800cefe <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800cefc:	2302      	movs	r3, #2
  }
}
 800cefe:	4618      	mov	r0, r3
 800cf00:	3710      	adds	r7, #16
 800cf02:	46bd      	mov	sp, r7
 800cf04:	bd80      	pop	{r7, pc}
	...

0800cf08 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800cf08:	b580      	push	{r7, lr}
 800cf0a:	b0ba      	sub	sp, #232	@ 0xe8
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	68db      	ldr	r3, [r3, #12]
 800cf20:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	695b      	ldr	r3, [r3, #20]
 800cf2a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800cf2e:	2300      	movs	r3, #0
 800cf30:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800cf34:	2300      	movs	r3, #0
 800cf36:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800cf3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cf3e:	f003 030f 	and.w	r3, r3, #15
 800cf42:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800cf46:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d10f      	bne.n	800cf6e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800cf4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cf52:	f003 0320 	and.w	r3, r3, #32
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d009      	beq.n	800cf6e <HAL_UART_IRQHandler+0x66>
 800cf5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cf5e:	f003 0320 	and.w	r3, r3, #32
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d003      	beq.n	800cf6e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800cf66:	6878      	ldr	r0, [r7, #4]
 800cf68:	f000 fb99 	bl	800d69e <UART_Receive_IT>
      return;
 800cf6c:	e25b      	b.n	800d426 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800cf6e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	f000 80de 	beq.w	800d134 <HAL_UART_IRQHandler+0x22c>
 800cf78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cf7c:	f003 0301 	and.w	r3, r3, #1
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d106      	bne.n	800cf92 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800cf84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cf88:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	f000 80d1 	beq.w	800d134 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800cf92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cf96:	f003 0301 	and.w	r3, r3, #1
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d00b      	beq.n	800cfb6 <HAL_UART_IRQHandler+0xae>
 800cf9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cfa2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d005      	beq.n	800cfb6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cfae:	f043 0201 	orr.w	r2, r3, #1
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800cfb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cfba:	f003 0304 	and.w	r3, r3, #4
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d00b      	beq.n	800cfda <HAL_UART_IRQHandler+0xd2>
 800cfc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cfc6:	f003 0301 	and.w	r3, r3, #1
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d005      	beq.n	800cfda <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cfd2:	f043 0202 	orr.w	r2, r3, #2
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800cfda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cfde:	f003 0302 	and.w	r3, r3, #2
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d00b      	beq.n	800cffe <HAL_UART_IRQHandler+0xf6>
 800cfe6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cfea:	f003 0301 	and.w	r3, r3, #1
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d005      	beq.n	800cffe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cff6:	f043 0204 	orr.w	r2, r3, #4
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800cffe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d002:	f003 0308 	and.w	r3, r3, #8
 800d006:	2b00      	cmp	r3, #0
 800d008:	d011      	beq.n	800d02e <HAL_UART_IRQHandler+0x126>
 800d00a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d00e:	f003 0320 	and.w	r3, r3, #32
 800d012:	2b00      	cmp	r3, #0
 800d014:	d105      	bne.n	800d022 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800d016:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d01a:	f003 0301 	and.w	r3, r3, #1
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d005      	beq.n	800d02e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d026:	f043 0208 	orr.w	r2, r3, #8
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d032:	2b00      	cmp	r3, #0
 800d034:	f000 81f2 	beq.w	800d41c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800d038:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d03c:	f003 0320 	and.w	r3, r3, #32
 800d040:	2b00      	cmp	r3, #0
 800d042:	d008      	beq.n	800d056 <HAL_UART_IRQHandler+0x14e>
 800d044:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d048:	f003 0320 	and.w	r3, r3, #32
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d002      	beq.n	800d056 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800d050:	6878      	ldr	r0, [r7, #4]
 800d052:	f000 fb24 	bl	800d69e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	695b      	ldr	r3, [r3, #20]
 800d05c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d060:	2b40      	cmp	r3, #64	@ 0x40
 800d062:	bf0c      	ite	eq
 800d064:	2301      	moveq	r3, #1
 800d066:	2300      	movne	r3, #0
 800d068:	b2db      	uxtb	r3, r3
 800d06a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d072:	f003 0308 	and.w	r3, r3, #8
 800d076:	2b00      	cmp	r3, #0
 800d078:	d103      	bne.n	800d082 <HAL_UART_IRQHandler+0x17a>
 800d07a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d04f      	beq.n	800d122 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d082:	6878      	ldr	r0, [r7, #4]
 800d084:	f000 fa2c 	bl	800d4e0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	695b      	ldr	r3, [r3, #20]
 800d08e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d092:	2b40      	cmp	r3, #64	@ 0x40
 800d094:	d141      	bne.n	800d11a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	3314      	adds	r3, #20
 800d09c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d0a4:	e853 3f00 	ldrex	r3, [r3]
 800d0a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800d0ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d0b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d0b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	3314      	adds	r3, #20
 800d0be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800d0c2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800d0c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800d0ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800d0d2:	e841 2300 	strex	r3, r2, [r1]
 800d0d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800d0da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d1d9      	bne.n	800d096 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d013      	beq.n	800d112 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d0ee:	4a7e      	ldr	r2, [pc, #504]	@ (800d2e8 <HAL_UART_IRQHandler+0x3e0>)
 800d0f0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d0f6:	4618      	mov	r0, r3
 800d0f8:	f7f8 ffa0 	bl	800603c <HAL_DMA_Abort_IT>
 800d0fc:	4603      	mov	r3, r0
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d016      	beq.n	800d130 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d106:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d108:	687a      	ldr	r2, [r7, #4]
 800d10a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800d10c:	4610      	mov	r0, r2
 800d10e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d110:	e00e      	b.n	800d130 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d112:	6878      	ldr	r0, [r7, #4]
 800d114:	f000 f994 	bl	800d440 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d118:	e00a      	b.n	800d130 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d11a:	6878      	ldr	r0, [r7, #4]
 800d11c:	f000 f990 	bl	800d440 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d120:	e006      	b.n	800d130 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d122:	6878      	ldr	r0, [r7, #4]
 800d124:	f000 f98c 	bl	800d440 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	2200      	movs	r2, #0
 800d12c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800d12e:	e175      	b.n	800d41c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d130:	bf00      	nop
    return;
 800d132:	e173      	b.n	800d41c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d138:	2b01      	cmp	r3, #1
 800d13a:	f040 814f 	bne.w	800d3dc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800d13e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d142:	f003 0310 	and.w	r3, r3, #16
 800d146:	2b00      	cmp	r3, #0
 800d148:	f000 8148 	beq.w	800d3dc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800d14c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d150:	f003 0310 	and.w	r3, r3, #16
 800d154:	2b00      	cmp	r3, #0
 800d156:	f000 8141 	beq.w	800d3dc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800d15a:	2300      	movs	r3, #0
 800d15c:	60bb      	str	r3, [r7, #8]
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	60bb      	str	r3, [r7, #8]
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	685b      	ldr	r3, [r3, #4]
 800d16c:	60bb      	str	r3, [r7, #8]
 800d16e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	695b      	ldr	r3, [r3, #20]
 800d176:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d17a:	2b40      	cmp	r3, #64	@ 0x40
 800d17c:	f040 80b6 	bne.w	800d2ec <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	685b      	ldr	r3, [r3, #4]
 800d188:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d18c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800d190:	2b00      	cmp	r3, #0
 800d192:	f000 8145 	beq.w	800d420 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800d19a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d19e:	429a      	cmp	r2, r3
 800d1a0:	f080 813e 	bcs.w	800d420 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d1aa:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d1b0:	69db      	ldr	r3, [r3, #28]
 800d1b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d1b6:	f000 8088 	beq.w	800d2ca <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	330c      	adds	r3, #12
 800d1c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d1c8:	e853 3f00 	ldrex	r3, [r3]
 800d1cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800d1d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d1d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d1d8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	330c      	adds	r3, #12
 800d1e2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800d1e6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800d1ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1ee:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800d1f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800d1f6:	e841 2300 	strex	r3, r2, [r1]
 800d1fa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800d1fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d202:	2b00      	cmp	r3, #0
 800d204:	d1d9      	bne.n	800d1ba <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	3314      	adds	r3, #20
 800d20c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d20e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d210:	e853 3f00 	ldrex	r3, [r3]
 800d214:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800d216:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d218:	f023 0301 	bic.w	r3, r3, #1
 800d21c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	3314      	adds	r3, #20
 800d226:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800d22a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800d22e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d230:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800d232:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800d236:	e841 2300 	strex	r3, r2, [r1]
 800d23a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800d23c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d1e1      	bne.n	800d206 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	3314      	adds	r3, #20
 800d248:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d24a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d24c:	e853 3f00 	ldrex	r3, [r3]
 800d250:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800d252:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d254:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d258:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	3314      	adds	r3, #20
 800d262:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800d266:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800d268:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d26a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800d26c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d26e:	e841 2300 	strex	r3, r2, [r1]
 800d272:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800d274:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d276:	2b00      	cmp	r3, #0
 800d278:	d1e3      	bne.n	800d242 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	2220      	movs	r2, #32
 800d27e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	2200      	movs	r2, #0
 800d286:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	330c      	adds	r3, #12
 800d28e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d290:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d292:	e853 3f00 	ldrex	r3, [r3]
 800d296:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d298:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d29a:	f023 0310 	bic.w	r3, r3, #16
 800d29e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	330c      	adds	r3, #12
 800d2a8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800d2ac:	65ba      	str	r2, [r7, #88]	@ 0x58
 800d2ae:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2b0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d2b2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d2b4:	e841 2300 	strex	r3, r2, [r1]
 800d2b8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d2ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d1e3      	bne.n	800d288 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d2c4:	4618      	mov	r0, r3
 800d2c6:	f7f8 fe49 	bl	8005f5c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	2202      	movs	r2, #2
 800d2ce:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d2d8:	b29b      	uxth	r3, r3
 800d2da:	1ad3      	subs	r3, r2, r3
 800d2dc:	b29b      	uxth	r3, r3
 800d2de:	4619      	mov	r1, r3
 800d2e0:	6878      	ldr	r0, [r7, #4]
 800d2e2:	f000 f8b7 	bl	800d454 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800d2e6:	e09b      	b.n	800d420 <HAL_UART_IRQHandler+0x518>
 800d2e8:	0800d5a7 	.word	0x0800d5a7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d2f4:	b29b      	uxth	r3, r3
 800d2f6:	1ad3      	subs	r3, r2, r3
 800d2f8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d300:	b29b      	uxth	r3, r3
 800d302:	2b00      	cmp	r3, #0
 800d304:	f000 808e 	beq.w	800d424 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800d308:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	f000 8089 	beq.w	800d424 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	330c      	adds	r3, #12
 800d318:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d31a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d31c:	e853 3f00 	ldrex	r3, [r3]
 800d320:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d322:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d324:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d328:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	330c      	adds	r3, #12
 800d332:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800d336:	647a      	str	r2, [r7, #68]	@ 0x44
 800d338:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d33a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d33c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d33e:	e841 2300 	strex	r3, r2, [r1]
 800d342:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d344:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d346:	2b00      	cmp	r3, #0
 800d348:	d1e3      	bne.n	800d312 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	3314      	adds	r3, #20
 800d350:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d354:	e853 3f00 	ldrex	r3, [r3]
 800d358:	623b      	str	r3, [r7, #32]
   return(result);
 800d35a:	6a3b      	ldr	r3, [r7, #32]
 800d35c:	f023 0301 	bic.w	r3, r3, #1
 800d360:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	3314      	adds	r3, #20
 800d36a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800d36e:	633a      	str	r2, [r7, #48]	@ 0x30
 800d370:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d372:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d374:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d376:	e841 2300 	strex	r3, r2, [r1]
 800d37a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d37c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d1e3      	bne.n	800d34a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	2220      	movs	r2, #32
 800d386:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	2200      	movs	r2, #0
 800d38e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	330c      	adds	r3, #12
 800d396:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d398:	693b      	ldr	r3, [r7, #16]
 800d39a:	e853 3f00 	ldrex	r3, [r3]
 800d39e:	60fb      	str	r3, [r7, #12]
   return(result);
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	f023 0310 	bic.w	r3, r3, #16
 800d3a6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	330c      	adds	r3, #12
 800d3b0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800d3b4:	61fa      	str	r2, [r7, #28]
 800d3b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3b8:	69b9      	ldr	r1, [r7, #24]
 800d3ba:	69fa      	ldr	r2, [r7, #28]
 800d3bc:	e841 2300 	strex	r3, r2, [r1]
 800d3c0:	617b      	str	r3, [r7, #20]
   return(result);
 800d3c2:	697b      	ldr	r3, [r7, #20]
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d1e3      	bne.n	800d390 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	2202      	movs	r2, #2
 800d3cc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d3ce:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d3d2:	4619      	mov	r1, r3
 800d3d4:	6878      	ldr	r0, [r7, #4]
 800d3d6:	f000 f83d 	bl	800d454 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800d3da:	e023      	b.n	800d424 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800d3dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d3e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d009      	beq.n	800d3fc <HAL_UART_IRQHandler+0x4f4>
 800d3e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d3ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d003      	beq.n	800d3fc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800d3f4:	6878      	ldr	r0, [r7, #4]
 800d3f6:	f000 f8ea 	bl	800d5ce <UART_Transmit_IT>
    return;
 800d3fa:	e014      	b.n	800d426 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800d3fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d400:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d404:	2b00      	cmp	r3, #0
 800d406:	d00e      	beq.n	800d426 <HAL_UART_IRQHandler+0x51e>
 800d408:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d40c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d410:	2b00      	cmp	r3, #0
 800d412:	d008      	beq.n	800d426 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800d414:	6878      	ldr	r0, [r7, #4]
 800d416:	f000 f92a 	bl	800d66e <UART_EndTransmit_IT>
    return;
 800d41a:	e004      	b.n	800d426 <HAL_UART_IRQHandler+0x51e>
    return;
 800d41c:	bf00      	nop
 800d41e:	e002      	b.n	800d426 <HAL_UART_IRQHandler+0x51e>
      return;
 800d420:	bf00      	nop
 800d422:	e000      	b.n	800d426 <HAL_UART_IRQHandler+0x51e>
      return;
 800d424:	bf00      	nop
  }
}
 800d426:	37e8      	adds	r7, #232	@ 0xe8
 800d428:	46bd      	mov	sp, r7
 800d42a:	bd80      	pop	{r7, pc}

0800d42c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d42c:	b480      	push	{r7}
 800d42e:	b083      	sub	sp, #12
 800d430:	af00      	add	r7, sp, #0
 800d432:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800d434:	bf00      	nop
 800d436:	370c      	adds	r7, #12
 800d438:	46bd      	mov	sp, r7
 800d43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d43e:	4770      	bx	lr

0800d440 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d440:	b480      	push	{r7}
 800d442:	b083      	sub	sp, #12
 800d444:	af00      	add	r7, sp, #0
 800d446:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800d448:	bf00      	nop
 800d44a:	370c      	adds	r7, #12
 800d44c:	46bd      	mov	sp, r7
 800d44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d452:	4770      	bx	lr

0800d454 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d454:	b480      	push	{r7}
 800d456:	b083      	sub	sp, #12
 800d458:	af00      	add	r7, sp, #0
 800d45a:	6078      	str	r0, [r7, #4]
 800d45c:	460b      	mov	r3, r1
 800d45e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d460:	bf00      	nop
 800d462:	370c      	adds	r7, #12
 800d464:	46bd      	mov	sp, r7
 800d466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d46a:	4770      	bx	lr

0800d46c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d46c:	b480      	push	{r7}
 800d46e:	b085      	sub	sp, #20
 800d470:	af00      	add	r7, sp, #0
 800d472:	60f8      	str	r0, [r7, #12]
 800d474:	60b9      	str	r1, [r7, #8]
 800d476:	4613      	mov	r3, r2
 800d478:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	68ba      	ldr	r2, [r7, #8]
 800d47e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	88fa      	ldrh	r2, [r7, #6]
 800d484:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	88fa      	ldrh	r2, [r7, #6]
 800d48a:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	2200      	movs	r2, #0
 800d490:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	2222      	movs	r2, #34	@ 0x22
 800d496:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	691b      	ldr	r3, [r3, #16]
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d007      	beq.n	800d4b2 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	68da      	ldr	r2, [r3, #12]
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800d4b0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	695a      	ldr	r2, [r3, #20]
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	f042 0201 	orr.w	r2, r2, #1
 800d4c0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	68da      	ldr	r2, [r3, #12]
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	f042 0220 	orr.w	r2, r2, #32
 800d4d0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800d4d2:	2300      	movs	r3, #0
}
 800d4d4:	4618      	mov	r0, r3
 800d4d6:	3714      	adds	r7, #20
 800d4d8:	46bd      	mov	sp, r7
 800d4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4de:	4770      	bx	lr

0800d4e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d4e0:	b480      	push	{r7}
 800d4e2:	b095      	sub	sp, #84	@ 0x54
 800d4e4:	af00      	add	r7, sp, #0
 800d4e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	330c      	adds	r3, #12
 800d4ee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d4f2:	e853 3f00 	ldrex	r3, [r3]
 800d4f6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d4f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4fa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d4fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	330c      	adds	r3, #12
 800d506:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d508:	643a      	str	r2, [r7, #64]	@ 0x40
 800d50a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d50c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d50e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d510:	e841 2300 	strex	r3, r2, [r1]
 800d514:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d516:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d1e5      	bne.n	800d4e8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	3314      	adds	r3, #20
 800d522:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d524:	6a3b      	ldr	r3, [r7, #32]
 800d526:	e853 3f00 	ldrex	r3, [r3]
 800d52a:	61fb      	str	r3, [r7, #28]
   return(result);
 800d52c:	69fb      	ldr	r3, [r7, #28]
 800d52e:	f023 0301 	bic.w	r3, r3, #1
 800d532:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	3314      	adds	r3, #20
 800d53a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d53c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d53e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d540:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d542:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d544:	e841 2300 	strex	r3, r2, [r1]
 800d548:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d54a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d1e5      	bne.n	800d51c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d554:	2b01      	cmp	r3, #1
 800d556:	d119      	bne.n	800d58c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	330c      	adds	r3, #12
 800d55e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	e853 3f00 	ldrex	r3, [r3]
 800d566:	60bb      	str	r3, [r7, #8]
   return(result);
 800d568:	68bb      	ldr	r3, [r7, #8]
 800d56a:	f023 0310 	bic.w	r3, r3, #16
 800d56e:	647b      	str	r3, [r7, #68]	@ 0x44
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	330c      	adds	r3, #12
 800d576:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d578:	61ba      	str	r2, [r7, #24]
 800d57a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d57c:	6979      	ldr	r1, [r7, #20]
 800d57e:	69ba      	ldr	r2, [r7, #24]
 800d580:	e841 2300 	strex	r3, r2, [r1]
 800d584:	613b      	str	r3, [r7, #16]
   return(result);
 800d586:	693b      	ldr	r3, [r7, #16]
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d1e5      	bne.n	800d558 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	2220      	movs	r2, #32
 800d590:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	2200      	movs	r2, #0
 800d598:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800d59a:	bf00      	nop
 800d59c:	3754      	adds	r7, #84	@ 0x54
 800d59e:	46bd      	mov	sp, r7
 800d5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a4:	4770      	bx	lr

0800d5a6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d5a6:	b580      	push	{r7, lr}
 800d5a8:	b084      	sub	sp, #16
 800d5aa:	af00      	add	r7, sp, #0
 800d5ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d5b2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	2200      	movs	r2, #0
 800d5b8:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	2200      	movs	r2, #0
 800d5be:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d5c0:	68f8      	ldr	r0, [r7, #12]
 800d5c2:	f7ff ff3d 	bl	800d440 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d5c6:	bf00      	nop
 800d5c8:	3710      	adds	r7, #16
 800d5ca:	46bd      	mov	sp, r7
 800d5cc:	bd80      	pop	{r7, pc}

0800d5ce <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800d5ce:	b480      	push	{r7}
 800d5d0:	b085      	sub	sp, #20
 800d5d2:	af00      	add	r7, sp, #0
 800d5d4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d5dc:	b2db      	uxtb	r3, r3
 800d5de:	2b21      	cmp	r3, #33	@ 0x21
 800d5e0:	d13e      	bne.n	800d660 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	689b      	ldr	r3, [r3, #8]
 800d5e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d5ea:	d114      	bne.n	800d616 <UART_Transmit_IT+0x48>
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	691b      	ldr	r3, [r3, #16]
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d110      	bne.n	800d616 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	6a1b      	ldr	r3, [r3, #32]
 800d5f8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	881b      	ldrh	r3, [r3, #0]
 800d5fe:	461a      	mov	r2, r3
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d608:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	6a1b      	ldr	r3, [r3, #32]
 800d60e:	1c9a      	adds	r2, r3, #2
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	621a      	str	r2, [r3, #32]
 800d614:	e008      	b.n	800d628 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	6a1b      	ldr	r3, [r3, #32]
 800d61a:	1c59      	adds	r1, r3, #1
 800d61c:	687a      	ldr	r2, [r7, #4]
 800d61e:	6211      	str	r1, [r2, #32]
 800d620:	781a      	ldrb	r2, [r3, #0]
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800d62c:	b29b      	uxth	r3, r3
 800d62e:	3b01      	subs	r3, #1
 800d630:	b29b      	uxth	r3, r3
 800d632:	687a      	ldr	r2, [r7, #4]
 800d634:	4619      	mov	r1, r3
 800d636:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d10f      	bne.n	800d65c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	68da      	ldr	r2, [r3, #12]
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d64a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	68da      	ldr	r2, [r3, #12]
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d65a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800d65c:	2300      	movs	r3, #0
 800d65e:	e000      	b.n	800d662 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800d660:	2302      	movs	r3, #2
  }
}
 800d662:	4618      	mov	r0, r3
 800d664:	3714      	adds	r7, #20
 800d666:	46bd      	mov	sp, r7
 800d668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d66c:	4770      	bx	lr

0800d66e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d66e:	b580      	push	{r7, lr}
 800d670:	b082      	sub	sp, #8
 800d672:	af00      	add	r7, sp, #0
 800d674:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	68da      	ldr	r2, [r3, #12]
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d684:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	2220      	movs	r2, #32
 800d68a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d68e:	6878      	ldr	r0, [r7, #4]
 800d690:	f7ff fecc 	bl	800d42c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800d694:	2300      	movs	r3, #0
}
 800d696:	4618      	mov	r0, r3
 800d698:	3708      	adds	r7, #8
 800d69a:	46bd      	mov	sp, r7
 800d69c:	bd80      	pop	{r7, pc}

0800d69e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800d69e:	b580      	push	{r7, lr}
 800d6a0:	b08c      	sub	sp, #48	@ 0x30
 800d6a2:	af00      	add	r7, sp, #0
 800d6a4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d6ac:	b2db      	uxtb	r3, r3
 800d6ae:	2b22      	cmp	r3, #34	@ 0x22
 800d6b0:	f040 80ae 	bne.w	800d810 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	689b      	ldr	r3, [r3, #8]
 800d6b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d6bc:	d117      	bne.n	800d6ee <UART_Receive_IT+0x50>
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	691b      	ldr	r3, [r3, #16]
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d113      	bne.n	800d6ee <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800d6c6:	2300      	movs	r3, #0
 800d6c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d6ce:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	685b      	ldr	r3, [r3, #4]
 800d6d6:	b29b      	uxth	r3, r3
 800d6d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d6dc:	b29a      	uxth	r2, r3
 800d6de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6e0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d6e6:	1c9a      	adds	r2, r3, #2
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	629a      	str	r2, [r3, #40]	@ 0x28
 800d6ec:	e026      	b.n	800d73c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d6f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800d6f4:	2300      	movs	r3, #0
 800d6f6:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	689b      	ldr	r3, [r3, #8]
 800d6fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d700:	d007      	beq.n	800d712 <UART_Receive_IT+0x74>
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	689b      	ldr	r3, [r3, #8]
 800d706:	2b00      	cmp	r3, #0
 800d708:	d10a      	bne.n	800d720 <UART_Receive_IT+0x82>
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	691b      	ldr	r3, [r3, #16]
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d106      	bne.n	800d720 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	685b      	ldr	r3, [r3, #4]
 800d718:	b2da      	uxtb	r2, r3
 800d71a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d71c:	701a      	strb	r2, [r3, #0]
 800d71e:	e008      	b.n	800d732 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	685b      	ldr	r3, [r3, #4]
 800d726:	b2db      	uxtb	r3, r3
 800d728:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d72c:	b2da      	uxtb	r2, r3
 800d72e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d730:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d736:	1c5a      	adds	r2, r3, #1
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d740:	b29b      	uxth	r3, r3
 800d742:	3b01      	subs	r3, #1
 800d744:	b29b      	uxth	r3, r3
 800d746:	687a      	ldr	r2, [r7, #4]
 800d748:	4619      	mov	r1, r3
 800d74a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d15d      	bne.n	800d80c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	68da      	ldr	r2, [r3, #12]
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	f022 0220 	bic.w	r2, r2, #32
 800d75e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	68da      	ldr	r2, [r3, #12]
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800d76e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	695a      	ldr	r2, [r3, #20]
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	f022 0201 	bic.w	r2, r2, #1
 800d77e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	2220      	movs	r2, #32
 800d784:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	2200      	movs	r2, #0
 800d78c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d792:	2b01      	cmp	r3, #1
 800d794:	d135      	bne.n	800d802 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	2200      	movs	r2, #0
 800d79a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	330c      	adds	r3, #12
 800d7a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7a4:	697b      	ldr	r3, [r7, #20]
 800d7a6:	e853 3f00 	ldrex	r3, [r3]
 800d7aa:	613b      	str	r3, [r7, #16]
   return(result);
 800d7ac:	693b      	ldr	r3, [r7, #16]
 800d7ae:	f023 0310 	bic.w	r3, r3, #16
 800d7b2:	627b      	str	r3, [r7, #36]	@ 0x24
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	330c      	adds	r3, #12
 800d7ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d7bc:	623a      	str	r2, [r7, #32]
 800d7be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7c0:	69f9      	ldr	r1, [r7, #28]
 800d7c2:	6a3a      	ldr	r2, [r7, #32]
 800d7c4:	e841 2300 	strex	r3, r2, [r1]
 800d7c8:	61bb      	str	r3, [r7, #24]
   return(result);
 800d7ca:	69bb      	ldr	r3, [r7, #24]
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d1e5      	bne.n	800d79c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	f003 0310 	and.w	r3, r3, #16
 800d7da:	2b10      	cmp	r3, #16
 800d7dc:	d10a      	bne.n	800d7f4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800d7de:	2300      	movs	r3, #0
 800d7e0:	60fb      	str	r3, [r7, #12]
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	60fb      	str	r3, [r7, #12]
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	685b      	ldr	r3, [r3, #4]
 800d7f0:	60fb      	str	r3, [r7, #12]
 800d7f2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800d7f8:	4619      	mov	r1, r3
 800d7fa:	6878      	ldr	r0, [r7, #4]
 800d7fc:	f7ff fe2a 	bl	800d454 <HAL_UARTEx_RxEventCallback>
 800d800:	e002      	b.n	800d808 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800d802:	6878      	ldr	r0, [r7, #4]
 800d804:	f7f6 fe88 	bl	8004518 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800d808:	2300      	movs	r3, #0
 800d80a:	e002      	b.n	800d812 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800d80c:	2300      	movs	r3, #0
 800d80e:	e000      	b.n	800d812 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800d810:	2302      	movs	r3, #2
  }
}
 800d812:	4618      	mov	r0, r3
 800d814:	3730      	adds	r7, #48	@ 0x30
 800d816:	46bd      	mov	sp, r7
 800d818:	bd80      	pop	{r7, pc}
	...

0800d81c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d81c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d820:	b0c0      	sub	sp, #256	@ 0x100
 800d822:	af00      	add	r7, sp, #0
 800d824:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	691b      	ldr	r3, [r3, #16]
 800d830:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800d834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d838:	68d9      	ldr	r1, [r3, #12]
 800d83a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d83e:	681a      	ldr	r2, [r3, #0]
 800d840:	ea40 0301 	orr.w	r3, r0, r1
 800d844:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800d846:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d84a:	689a      	ldr	r2, [r3, #8]
 800d84c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d850:	691b      	ldr	r3, [r3, #16]
 800d852:	431a      	orrs	r2, r3
 800d854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d858:	695b      	ldr	r3, [r3, #20]
 800d85a:	431a      	orrs	r2, r3
 800d85c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d860:	69db      	ldr	r3, [r3, #28]
 800d862:	4313      	orrs	r3, r2
 800d864:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800d868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	68db      	ldr	r3, [r3, #12]
 800d870:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800d874:	f021 010c 	bic.w	r1, r1, #12
 800d878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d87c:	681a      	ldr	r2, [r3, #0]
 800d87e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800d882:	430b      	orrs	r3, r1
 800d884:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800d886:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	695b      	ldr	r3, [r3, #20]
 800d88e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800d892:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d896:	6999      	ldr	r1, [r3, #24]
 800d898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d89c:	681a      	ldr	r2, [r3, #0]
 800d89e:	ea40 0301 	orr.w	r3, r0, r1
 800d8a2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800d8a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d8a8:	681a      	ldr	r2, [r3, #0]
 800d8aa:	4b8f      	ldr	r3, [pc, #572]	@ (800dae8 <UART_SetConfig+0x2cc>)
 800d8ac:	429a      	cmp	r2, r3
 800d8ae:	d005      	beq.n	800d8bc <UART_SetConfig+0xa0>
 800d8b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d8b4:	681a      	ldr	r2, [r3, #0]
 800d8b6:	4b8d      	ldr	r3, [pc, #564]	@ (800daec <UART_SetConfig+0x2d0>)
 800d8b8:	429a      	cmp	r2, r3
 800d8ba:	d104      	bne.n	800d8c6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800d8bc:	f7fe fac8 	bl	800be50 <HAL_RCC_GetPCLK2Freq>
 800d8c0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800d8c4:	e003      	b.n	800d8ce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800d8c6:	f7fe faaf 	bl	800be28 <HAL_RCC_GetPCLK1Freq>
 800d8ca:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d8ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d8d2:	69db      	ldr	r3, [r3, #28]
 800d8d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d8d8:	f040 810c 	bne.w	800daf4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800d8dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d8e0:	2200      	movs	r2, #0
 800d8e2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800d8e6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800d8ea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800d8ee:	4622      	mov	r2, r4
 800d8f0:	462b      	mov	r3, r5
 800d8f2:	1891      	adds	r1, r2, r2
 800d8f4:	65b9      	str	r1, [r7, #88]	@ 0x58
 800d8f6:	415b      	adcs	r3, r3
 800d8f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d8fa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800d8fe:	4621      	mov	r1, r4
 800d900:	eb12 0801 	adds.w	r8, r2, r1
 800d904:	4629      	mov	r1, r5
 800d906:	eb43 0901 	adc.w	r9, r3, r1
 800d90a:	f04f 0200 	mov.w	r2, #0
 800d90e:	f04f 0300 	mov.w	r3, #0
 800d912:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d916:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d91a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d91e:	4690      	mov	r8, r2
 800d920:	4699      	mov	r9, r3
 800d922:	4623      	mov	r3, r4
 800d924:	eb18 0303 	adds.w	r3, r8, r3
 800d928:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800d92c:	462b      	mov	r3, r5
 800d92e:	eb49 0303 	adc.w	r3, r9, r3
 800d932:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800d936:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d93a:	685b      	ldr	r3, [r3, #4]
 800d93c:	2200      	movs	r2, #0
 800d93e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800d942:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800d946:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800d94a:	460b      	mov	r3, r1
 800d94c:	18db      	adds	r3, r3, r3
 800d94e:	653b      	str	r3, [r7, #80]	@ 0x50
 800d950:	4613      	mov	r3, r2
 800d952:	eb42 0303 	adc.w	r3, r2, r3
 800d956:	657b      	str	r3, [r7, #84]	@ 0x54
 800d958:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800d95c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800d960:	f7f2 fc96 	bl	8000290 <__aeabi_uldivmod>
 800d964:	4602      	mov	r2, r0
 800d966:	460b      	mov	r3, r1
 800d968:	4b61      	ldr	r3, [pc, #388]	@ (800daf0 <UART_SetConfig+0x2d4>)
 800d96a:	fba3 2302 	umull	r2, r3, r3, r2
 800d96e:	095b      	lsrs	r3, r3, #5
 800d970:	011c      	lsls	r4, r3, #4
 800d972:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d976:	2200      	movs	r2, #0
 800d978:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800d97c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800d980:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800d984:	4642      	mov	r2, r8
 800d986:	464b      	mov	r3, r9
 800d988:	1891      	adds	r1, r2, r2
 800d98a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800d98c:	415b      	adcs	r3, r3
 800d98e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d990:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800d994:	4641      	mov	r1, r8
 800d996:	eb12 0a01 	adds.w	sl, r2, r1
 800d99a:	4649      	mov	r1, r9
 800d99c:	eb43 0b01 	adc.w	fp, r3, r1
 800d9a0:	f04f 0200 	mov.w	r2, #0
 800d9a4:	f04f 0300 	mov.w	r3, #0
 800d9a8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800d9ac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800d9b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d9b4:	4692      	mov	sl, r2
 800d9b6:	469b      	mov	fp, r3
 800d9b8:	4643      	mov	r3, r8
 800d9ba:	eb1a 0303 	adds.w	r3, sl, r3
 800d9be:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d9c2:	464b      	mov	r3, r9
 800d9c4:	eb4b 0303 	adc.w	r3, fp, r3
 800d9c8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800d9cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d9d0:	685b      	ldr	r3, [r3, #4]
 800d9d2:	2200      	movs	r2, #0
 800d9d4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d9d8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800d9dc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800d9e0:	460b      	mov	r3, r1
 800d9e2:	18db      	adds	r3, r3, r3
 800d9e4:	643b      	str	r3, [r7, #64]	@ 0x40
 800d9e6:	4613      	mov	r3, r2
 800d9e8:	eb42 0303 	adc.w	r3, r2, r3
 800d9ec:	647b      	str	r3, [r7, #68]	@ 0x44
 800d9ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800d9f2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800d9f6:	f7f2 fc4b 	bl	8000290 <__aeabi_uldivmod>
 800d9fa:	4602      	mov	r2, r0
 800d9fc:	460b      	mov	r3, r1
 800d9fe:	4611      	mov	r1, r2
 800da00:	4b3b      	ldr	r3, [pc, #236]	@ (800daf0 <UART_SetConfig+0x2d4>)
 800da02:	fba3 2301 	umull	r2, r3, r3, r1
 800da06:	095b      	lsrs	r3, r3, #5
 800da08:	2264      	movs	r2, #100	@ 0x64
 800da0a:	fb02 f303 	mul.w	r3, r2, r3
 800da0e:	1acb      	subs	r3, r1, r3
 800da10:	00db      	lsls	r3, r3, #3
 800da12:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800da16:	4b36      	ldr	r3, [pc, #216]	@ (800daf0 <UART_SetConfig+0x2d4>)
 800da18:	fba3 2302 	umull	r2, r3, r3, r2
 800da1c:	095b      	lsrs	r3, r3, #5
 800da1e:	005b      	lsls	r3, r3, #1
 800da20:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800da24:	441c      	add	r4, r3
 800da26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800da2a:	2200      	movs	r2, #0
 800da2c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800da30:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800da34:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800da38:	4642      	mov	r2, r8
 800da3a:	464b      	mov	r3, r9
 800da3c:	1891      	adds	r1, r2, r2
 800da3e:	63b9      	str	r1, [r7, #56]	@ 0x38
 800da40:	415b      	adcs	r3, r3
 800da42:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800da44:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800da48:	4641      	mov	r1, r8
 800da4a:	1851      	adds	r1, r2, r1
 800da4c:	6339      	str	r1, [r7, #48]	@ 0x30
 800da4e:	4649      	mov	r1, r9
 800da50:	414b      	adcs	r3, r1
 800da52:	637b      	str	r3, [r7, #52]	@ 0x34
 800da54:	f04f 0200 	mov.w	r2, #0
 800da58:	f04f 0300 	mov.w	r3, #0
 800da5c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800da60:	4659      	mov	r1, fp
 800da62:	00cb      	lsls	r3, r1, #3
 800da64:	4651      	mov	r1, sl
 800da66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800da6a:	4651      	mov	r1, sl
 800da6c:	00ca      	lsls	r2, r1, #3
 800da6e:	4610      	mov	r0, r2
 800da70:	4619      	mov	r1, r3
 800da72:	4603      	mov	r3, r0
 800da74:	4642      	mov	r2, r8
 800da76:	189b      	adds	r3, r3, r2
 800da78:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800da7c:	464b      	mov	r3, r9
 800da7e:	460a      	mov	r2, r1
 800da80:	eb42 0303 	adc.w	r3, r2, r3
 800da84:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800da88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800da8c:	685b      	ldr	r3, [r3, #4]
 800da8e:	2200      	movs	r2, #0
 800da90:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800da94:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800da98:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800da9c:	460b      	mov	r3, r1
 800da9e:	18db      	adds	r3, r3, r3
 800daa0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800daa2:	4613      	mov	r3, r2
 800daa4:	eb42 0303 	adc.w	r3, r2, r3
 800daa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800daaa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800daae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800dab2:	f7f2 fbed 	bl	8000290 <__aeabi_uldivmod>
 800dab6:	4602      	mov	r2, r0
 800dab8:	460b      	mov	r3, r1
 800daba:	4b0d      	ldr	r3, [pc, #52]	@ (800daf0 <UART_SetConfig+0x2d4>)
 800dabc:	fba3 1302 	umull	r1, r3, r3, r2
 800dac0:	095b      	lsrs	r3, r3, #5
 800dac2:	2164      	movs	r1, #100	@ 0x64
 800dac4:	fb01 f303 	mul.w	r3, r1, r3
 800dac8:	1ad3      	subs	r3, r2, r3
 800daca:	00db      	lsls	r3, r3, #3
 800dacc:	3332      	adds	r3, #50	@ 0x32
 800dace:	4a08      	ldr	r2, [pc, #32]	@ (800daf0 <UART_SetConfig+0x2d4>)
 800dad0:	fba2 2303 	umull	r2, r3, r2, r3
 800dad4:	095b      	lsrs	r3, r3, #5
 800dad6:	f003 0207 	and.w	r2, r3, #7
 800dada:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	4422      	add	r2, r4
 800dae2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800dae4:	e106      	b.n	800dcf4 <UART_SetConfig+0x4d8>
 800dae6:	bf00      	nop
 800dae8:	40011000 	.word	0x40011000
 800daec:	40011400 	.word	0x40011400
 800daf0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800daf4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800daf8:	2200      	movs	r2, #0
 800dafa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800dafe:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800db02:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800db06:	4642      	mov	r2, r8
 800db08:	464b      	mov	r3, r9
 800db0a:	1891      	adds	r1, r2, r2
 800db0c:	6239      	str	r1, [r7, #32]
 800db0e:	415b      	adcs	r3, r3
 800db10:	627b      	str	r3, [r7, #36]	@ 0x24
 800db12:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800db16:	4641      	mov	r1, r8
 800db18:	1854      	adds	r4, r2, r1
 800db1a:	4649      	mov	r1, r9
 800db1c:	eb43 0501 	adc.w	r5, r3, r1
 800db20:	f04f 0200 	mov.w	r2, #0
 800db24:	f04f 0300 	mov.w	r3, #0
 800db28:	00eb      	lsls	r3, r5, #3
 800db2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800db2e:	00e2      	lsls	r2, r4, #3
 800db30:	4614      	mov	r4, r2
 800db32:	461d      	mov	r5, r3
 800db34:	4643      	mov	r3, r8
 800db36:	18e3      	adds	r3, r4, r3
 800db38:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800db3c:	464b      	mov	r3, r9
 800db3e:	eb45 0303 	adc.w	r3, r5, r3
 800db42:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800db46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800db4a:	685b      	ldr	r3, [r3, #4]
 800db4c:	2200      	movs	r2, #0
 800db4e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800db52:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800db56:	f04f 0200 	mov.w	r2, #0
 800db5a:	f04f 0300 	mov.w	r3, #0
 800db5e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800db62:	4629      	mov	r1, r5
 800db64:	008b      	lsls	r3, r1, #2
 800db66:	4621      	mov	r1, r4
 800db68:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800db6c:	4621      	mov	r1, r4
 800db6e:	008a      	lsls	r2, r1, #2
 800db70:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800db74:	f7f2 fb8c 	bl	8000290 <__aeabi_uldivmod>
 800db78:	4602      	mov	r2, r0
 800db7a:	460b      	mov	r3, r1
 800db7c:	4b60      	ldr	r3, [pc, #384]	@ (800dd00 <UART_SetConfig+0x4e4>)
 800db7e:	fba3 2302 	umull	r2, r3, r3, r2
 800db82:	095b      	lsrs	r3, r3, #5
 800db84:	011c      	lsls	r4, r3, #4
 800db86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800db8a:	2200      	movs	r2, #0
 800db8c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800db90:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800db94:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800db98:	4642      	mov	r2, r8
 800db9a:	464b      	mov	r3, r9
 800db9c:	1891      	adds	r1, r2, r2
 800db9e:	61b9      	str	r1, [r7, #24]
 800dba0:	415b      	adcs	r3, r3
 800dba2:	61fb      	str	r3, [r7, #28]
 800dba4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800dba8:	4641      	mov	r1, r8
 800dbaa:	1851      	adds	r1, r2, r1
 800dbac:	6139      	str	r1, [r7, #16]
 800dbae:	4649      	mov	r1, r9
 800dbb0:	414b      	adcs	r3, r1
 800dbb2:	617b      	str	r3, [r7, #20]
 800dbb4:	f04f 0200 	mov.w	r2, #0
 800dbb8:	f04f 0300 	mov.w	r3, #0
 800dbbc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800dbc0:	4659      	mov	r1, fp
 800dbc2:	00cb      	lsls	r3, r1, #3
 800dbc4:	4651      	mov	r1, sl
 800dbc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800dbca:	4651      	mov	r1, sl
 800dbcc:	00ca      	lsls	r2, r1, #3
 800dbce:	4610      	mov	r0, r2
 800dbd0:	4619      	mov	r1, r3
 800dbd2:	4603      	mov	r3, r0
 800dbd4:	4642      	mov	r2, r8
 800dbd6:	189b      	adds	r3, r3, r2
 800dbd8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800dbdc:	464b      	mov	r3, r9
 800dbde:	460a      	mov	r2, r1
 800dbe0:	eb42 0303 	adc.w	r3, r2, r3
 800dbe4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800dbe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800dbec:	685b      	ldr	r3, [r3, #4]
 800dbee:	2200      	movs	r2, #0
 800dbf0:	67bb      	str	r3, [r7, #120]	@ 0x78
 800dbf2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800dbf4:	f04f 0200 	mov.w	r2, #0
 800dbf8:	f04f 0300 	mov.w	r3, #0
 800dbfc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800dc00:	4649      	mov	r1, r9
 800dc02:	008b      	lsls	r3, r1, #2
 800dc04:	4641      	mov	r1, r8
 800dc06:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800dc0a:	4641      	mov	r1, r8
 800dc0c:	008a      	lsls	r2, r1, #2
 800dc0e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800dc12:	f7f2 fb3d 	bl	8000290 <__aeabi_uldivmod>
 800dc16:	4602      	mov	r2, r0
 800dc18:	460b      	mov	r3, r1
 800dc1a:	4611      	mov	r1, r2
 800dc1c:	4b38      	ldr	r3, [pc, #224]	@ (800dd00 <UART_SetConfig+0x4e4>)
 800dc1e:	fba3 2301 	umull	r2, r3, r3, r1
 800dc22:	095b      	lsrs	r3, r3, #5
 800dc24:	2264      	movs	r2, #100	@ 0x64
 800dc26:	fb02 f303 	mul.w	r3, r2, r3
 800dc2a:	1acb      	subs	r3, r1, r3
 800dc2c:	011b      	lsls	r3, r3, #4
 800dc2e:	3332      	adds	r3, #50	@ 0x32
 800dc30:	4a33      	ldr	r2, [pc, #204]	@ (800dd00 <UART_SetConfig+0x4e4>)
 800dc32:	fba2 2303 	umull	r2, r3, r2, r3
 800dc36:	095b      	lsrs	r3, r3, #5
 800dc38:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800dc3c:	441c      	add	r4, r3
 800dc3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800dc42:	2200      	movs	r2, #0
 800dc44:	673b      	str	r3, [r7, #112]	@ 0x70
 800dc46:	677a      	str	r2, [r7, #116]	@ 0x74
 800dc48:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800dc4c:	4642      	mov	r2, r8
 800dc4e:	464b      	mov	r3, r9
 800dc50:	1891      	adds	r1, r2, r2
 800dc52:	60b9      	str	r1, [r7, #8]
 800dc54:	415b      	adcs	r3, r3
 800dc56:	60fb      	str	r3, [r7, #12]
 800dc58:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800dc5c:	4641      	mov	r1, r8
 800dc5e:	1851      	adds	r1, r2, r1
 800dc60:	6039      	str	r1, [r7, #0]
 800dc62:	4649      	mov	r1, r9
 800dc64:	414b      	adcs	r3, r1
 800dc66:	607b      	str	r3, [r7, #4]
 800dc68:	f04f 0200 	mov.w	r2, #0
 800dc6c:	f04f 0300 	mov.w	r3, #0
 800dc70:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800dc74:	4659      	mov	r1, fp
 800dc76:	00cb      	lsls	r3, r1, #3
 800dc78:	4651      	mov	r1, sl
 800dc7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800dc7e:	4651      	mov	r1, sl
 800dc80:	00ca      	lsls	r2, r1, #3
 800dc82:	4610      	mov	r0, r2
 800dc84:	4619      	mov	r1, r3
 800dc86:	4603      	mov	r3, r0
 800dc88:	4642      	mov	r2, r8
 800dc8a:	189b      	adds	r3, r3, r2
 800dc8c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800dc8e:	464b      	mov	r3, r9
 800dc90:	460a      	mov	r2, r1
 800dc92:	eb42 0303 	adc.w	r3, r2, r3
 800dc96:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800dc98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800dc9c:	685b      	ldr	r3, [r3, #4]
 800dc9e:	2200      	movs	r2, #0
 800dca0:	663b      	str	r3, [r7, #96]	@ 0x60
 800dca2:	667a      	str	r2, [r7, #100]	@ 0x64
 800dca4:	f04f 0200 	mov.w	r2, #0
 800dca8:	f04f 0300 	mov.w	r3, #0
 800dcac:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800dcb0:	4649      	mov	r1, r9
 800dcb2:	008b      	lsls	r3, r1, #2
 800dcb4:	4641      	mov	r1, r8
 800dcb6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800dcba:	4641      	mov	r1, r8
 800dcbc:	008a      	lsls	r2, r1, #2
 800dcbe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800dcc2:	f7f2 fae5 	bl	8000290 <__aeabi_uldivmod>
 800dcc6:	4602      	mov	r2, r0
 800dcc8:	460b      	mov	r3, r1
 800dcca:	4b0d      	ldr	r3, [pc, #52]	@ (800dd00 <UART_SetConfig+0x4e4>)
 800dccc:	fba3 1302 	umull	r1, r3, r3, r2
 800dcd0:	095b      	lsrs	r3, r3, #5
 800dcd2:	2164      	movs	r1, #100	@ 0x64
 800dcd4:	fb01 f303 	mul.w	r3, r1, r3
 800dcd8:	1ad3      	subs	r3, r2, r3
 800dcda:	011b      	lsls	r3, r3, #4
 800dcdc:	3332      	adds	r3, #50	@ 0x32
 800dcde:	4a08      	ldr	r2, [pc, #32]	@ (800dd00 <UART_SetConfig+0x4e4>)
 800dce0:	fba2 2303 	umull	r2, r3, r2, r3
 800dce4:	095b      	lsrs	r3, r3, #5
 800dce6:	f003 020f 	and.w	r2, r3, #15
 800dcea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	4422      	add	r2, r4
 800dcf2:	609a      	str	r2, [r3, #8]
}
 800dcf4:	bf00      	nop
 800dcf6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800dcfa:	46bd      	mov	sp, r7
 800dcfc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800dd00:	51eb851f 	.word	0x51eb851f

0800dd04 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800dd04:	b084      	sub	sp, #16
 800dd06:	b580      	push	{r7, lr}
 800dd08:	b084      	sub	sp, #16
 800dd0a:	af00      	add	r7, sp, #0
 800dd0c:	6078      	str	r0, [r7, #4]
 800dd0e:	f107 001c 	add.w	r0, r7, #28
 800dd12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800dd16:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800dd1a:	2b01      	cmp	r3, #1
 800dd1c:	d123      	bne.n	800dd66 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dd22:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	68db      	ldr	r3, [r3, #12]
 800dd2e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800dd32:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dd36:	687a      	ldr	r2, [r7, #4]
 800dd38:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	68db      	ldr	r3, [r3, #12]
 800dd3e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800dd46:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800dd4a:	2b01      	cmp	r3, #1
 800dd4c:	d105      	bne.n	800dd5a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	68db      	ldr	r3, [r3, #12]
 800dd52:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800dd5a:	6878      	ldr	r0, [r7, #4]
 800dd5c:	f001 fae8 	bl	800f330 <USB_CoreReset>
 800dd60:	4603      	mov	r3, r0
 800dd62:	73fb      	strb	r3, [r7, #15]
 800dd64:	e01b      	b.n	800dd9e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	68db      	ldr	r3, [r3, #12]
 800dd6a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800dd72:	6878      	ldr	r0, [r7, #4]
 800dd74:	f001 fadc 	bl	800f330 <USB_CoreReset>
 800dd78:	4603      	mov	r3, r0
 800dd7a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800dd7c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d106      	bne.n	800dd92 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dd88:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	639a      	str	r2, [r3, #56]	@ 0x38
 800dd90:	e005      	b.n	800dd9e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dd96:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800dd9e:	7fbb      	ldrb	r3, [r7, #30]
 800dda0:	2b01      	cmp	r3, #1
 800dda2:	d10b      	bne.n	800ddbc <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	689b      	ldr	r3, [r3, #8]
 800dda8:	f043 0206 	orr.w	r2, r3, #6
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	689b      	ldr	r3, [r3, #8]
 800ddb4:	f043 0220 	orr.w	r2, r3, #32
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800ddbc:	7bfb      	ldrb	r3, [r7, #15]
}
 800ddbe:	4618      	mov	r0, r3
 800ddc0:	3710      	adds	r7, #16
 800ddc2:	46bd      	mov	sp, r7
 800ddc4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ddc8:	b004      	add	sp, #16
 800ddca:	4770      	bx	lr

0800ddcc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800ddcc:	b480      	push	{r7}
 800ddce:	b087      	sub	sp, #28
 800ddd0:	af00      	add	r7, sp, #0
 800ddd2:	60f8      	str	r0, [r7, #12]
 800ddd4:	60b9      	str	r1, [r7, #8]
 800ddd6:	4613      	mov	r3, r2
 800ddd8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800ddda:	79fb      	ldrb	r3, [r7, #7]
 800dddc:	2b02      	cmp	r3, #2
 800ddde:	d165      	bne.n	800deac <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800dde0:	68bb      	ldr	r3, [r7, #8]
 800dde2:	4a41      	ldr	r2, [pc, #260]	@ (800dee8 <USB_SetTurnaroundTime+0x11c>)
 800dde4:	4293      	cmp	r3, r2
 800dde6:	d906      	bls.n	800ddf6 <USB_SetTurnaroundTime+0x2a>
 800dde8:	68bb      	ldr	r3, [r7, #8]
 800ddea:	4a40      	ldr	r2, [pc, #256]	@ (800deec <USB_SetTurnaroundTime+0x120>)
 800ddec:	4293      	cmp	r3, r2
 800ddee:	d202      	bcs.n	800ddf6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800ddf0:	230f      	movs	r3, #15
 800ddf2:	617b      	str	r3, [r7, #20]
 800ddf4:	e062      	b.n	800debc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800ddf6:	68bb      	ldr	r3, [r7, #8]
 800ddf8:	4a3c      	ldr	r2, [pc, #240]	@ (800deec <USB_SetTurnaroundTime+0x120>)
 800ddfa:	4293      	cmp	r3, r2
 800ddfc:	d306      	bcc.n	800de0c <USB_SetTurnaroundTime+0x40>
 800ddfe:	68bb      	ldr	r3, [r7, #8]
 800de00:	4a3b      	ldr	r2, [pc, #236]	@ (800def0 <USB_SetTurnaroundTime+0x124>)
 800de02:	4293      	cmp	r3, r2
 800de04:	d202      	bcs.n	800de0c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800de06:	230e      	movs	r3, #14
 800de08:	617b      	str	r3, [r7, #20]
 800de0a:	e057      	b.n	800debc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800de0c:	68bb      	ldr	r3, [r7, #8]
 800de0e:	4a38      	ldr	r2, [pc, #224]	@ (800def0 <USB_SetTurnaroundTime+0x124>)
 800de10:	4293      	cmp	r3, r2
 800de12:	d306      	bcc.n	800de22 <USB_SetTurnaroundTime+0x56>
 800de14:	68bb      	ldr	r3, [r7, #8]
 800de16:	4a37      	ldr	r2, [pc, #220]	@ (800def4 <USB_SetTurnaroundTime+0x128>)
 800de18:	4293      	cmp	r3, r2
 800de1a:	d202      	bcs.n	800de22 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800de1c:	230d      	movs	r3, #13
 800de1e:	617b      	str	r3, [r7, #20]
 800de20:	e04c      	b.n	800debc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800de22:	68bb      	ldr	r3, [r7, #8]
 800de24:	4a33      	ldr	r2, [pc, #204]	@ (800def4 <USB_SetTurnaroundTime+0x128>)
 800de26:	4293      	cmp	r3, r2
 800de28:	d306      	bcc.n	800de38 <USB_SetTurnaroundTime+0x6c>
 800de2a:	68bb      	ldr	r3, [r7, #8]
 800de2c:	4a32      	ldr	r2, [pc, #200]	@ (800def8 <USB_SetTurnaroundTime+0x12c>)
 800de2e:	4293      	cmp	r3, r2
 800de30:	d802      	bhi.n	800de38 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800de32:	230c      	movs	r3, #12
 800de34:	617b      	str	r3, [r7, #20]
 800de36:	e041      	b.n	800debc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800de38:	68bb      	ldr	r3, [r7, #8]
 800de3a:	4a2f      	ldr	r2, [pc, #188]	@ (800def8 <USB_SetTurnaroundTime+0x12c>)
 800de3c:	4293      	cmp	r3, r2
 800de3e:	d906      	bls.n	800de4e <USB_SetTurnaroundTime+0x82>
 800de40:	68bb      	ldr	r3, [r7, #8]
 800de42:	4a2e      	ldr	r2, [pc, #184]	@ (800defc <USB_SetTurnaroundTime+0x130>)
 800de44:	4293      	cmp	r3, r2
 800de46:	d802      	bhi.n	800de4e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800de48:	230b      	movs	r3, #11
 800de4a:	617b      	str	r3, [r7, #20]
 800de4c:	e036      	b.n	800debc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800de4e:	68bb      	ldr	r3, [r7, #8]
 800de50:	4a2a      	ldr	r2, [pc, #168]	@ (800defc <USB_SetTurnaroundTime+0x130>)
 800de52:	4293      	cmp	r3, r2
 800de54:	d906      	bls.n	800de64 <USB_SetTurnaroundTime+0x98>
 800de56:	68bb      	ldr	r3, [r7, #8]
 800de58:	4a29      	ldr	r2, [pc, #164]	@ (800df00 <USB_SetTurnaroundTime+0x134>)
 800de5a:	4293      	cmp	r3, r2
 800de5c:	d802      	bhi.n	800de64 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800de5e:	230a      	movs	r3, #10
 800de60:	617b      	str	r3, [r7, #20]
 800de62:	e02b      	b.n	800debc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800de64:	68bb      	ldr	r3, [r7, #8]
 800de66:	4a26      	ldr	r2, [pc, #152]	@ (800df00 <USB_SetTurnaroundTime+0x134>)
 800de68:	4293      	cmp	r3, r2
 800de6a:	d906      	bls.n	800de7a <USB_SetTurnaroundTime+0xae>
 800de6c:	68bb      	ldr	r3, [r7, #8]
 800de6e:	4a25      	ldr	r2, [pc, #148]	@ (800df04 <USB_SetTurnaroundTime+0x138>)
 800de70:	4293      	cmp	r3, r2
 800de72:	d202      	bcs.n	800de7a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800de74:	2309      	movs	r3, #9
 800de76:	617b      	str	r3, [r7, #20]
 800de78:	e020      	b.n	800debc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800de7a:	68bb      	ldr	r3, [r7, #8]
 800de7c:	4a21      	ldr	r2, [pc, #132]	@ (800df04 <USB_SetTurnaroundTime+0x138>)
 800de7e:	4293      	cmp	r3, r2
 800de80:	d306      	bcc.n	800de90 <USB_SetTurnaroundTime+0xc4>
 800de82:	68bb      	ldr	r3, [r7, #8]
 800de84:	4a20      	ldr	r2, [pc, #128]	@ (800df08 <USB_SetTurnaroundTime+0x13c>)
 800de86:	4293      	cmp	r3, r2
 800de88:	d802      	bhi.n	800de90 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800de8a:	2308      	movs	r3, #8
 800de8c:	617b      	str	r3, [r7, #20]
 800de8e:	e015      	b.n	800debc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800de90:	68bb      	ldr	r3, [r7, #8]
 800de92:	4a1d      	ldr	r2, [pc, #116]	@ (800df08 <USB_SetTurnaroundTime+0x13c>)
 800de94:	4293      	cmp	r3, r2
 800de96:	d906      	bls.n	800dea6 <USB_SetTurnaroundTime+0xda>
 800de98:	68bb      	ldr	r3, [r7, #8]
 800de9a:	4a1c      	ldr	r2, [pc, #112]	@ (800df0c <USB_SetTurnaroundTime+0x140>)
 800de9c:	4293      	cmp	r3, r2
 800de9e:	d202      	bcs.n	800dea6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800dea0:	2307      	movs	r3, #7
 800dea2:	617b      	str	r3, [r7, #20]
 800dea4:	e00a      	b.n	800debc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800dea6:	2306      	movs	r3, #6
 800dea8:	617b      	str	r3, [r7, #20]
 800deaa:	e007      	b.n	800debc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800deac:	79fb      	ldrb	r3, [r7, #7]
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d102      	bne.n	800deb8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800deb2:	2309      	movs	r3, #9
 800deb4:	617b      	str	r3, [r7, #20]
 800deb6:	e001      	b.n	800debc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800deb8:	2309      	movs	r3, #9
 800deba:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	68db      	ldr	r3, [r3, #12]
 800dec0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	68da      	ldr	r2, [r3, #12]
 800decc:	697b      	ldr	r3, [r7, #20]
 800dece:	029b      	lsls	r3, r3, #10
 800ded0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800ded4:	431a      	orrs	r2, r3
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800deda:	2300      	movs	r3, #0
}
 800dedc:	4618      	mov	r0, r3
 800dede:	371c      	adds	r7, #28
 800dee0:	46bd      	mov	sp, r7
 800dee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dee6:	4770      	bx	lr
 800dee8:	00d8acbf 	.word	0x00d8acbf
 800deec:	00e4e1c0 	.word	0x00e4e1c0
 800def0:	00f42400 	.word	0x00f42400
 800def4:	01067380 	.word	0x01067380
 800def8:	011a499f 	.word	0x011a499f
 800defc:	01312cff 	.word	0x01312cff
 800df00:	014ca43f 	.word	0x014ca43f
 800df04:	016e3600 	.word	0x016e3600
 800df08:	01a6ab1f 	.word	0x01a6ab1f
 800df0c:	01e84800 	.word	0x01e84800

0800df10 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800df10:	b480      	push	{r7}
 800df12:	b083      	sub	sp, #12
 800df14:	af00      	add	r7, sp, #0
 800df16:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	689b      	ldr	r3, [r3, #8]
 800df1c:	f043 0201 	orr.w	r2, r3, #1
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800df24:	2300      	movs	r3, #0
}
 800df26:	4618      	mov	r0, r3
 800df28:	370c      	adds	r7, #12
 800df2a:	46bd      	mov	sp, r7
 800df2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df30:	4770      	bx	lr

0800df32 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800df32:	b480      	push	{r7}
 800df34:	b083      	sub	sp, #12
 800df36:	af00      	add	r7, sp, #0
 800df38:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	689b      	ldr	r3, [r3, #8]
 800df3e:	f023 0201 	bic.w	r2, r3, #1
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800df46:	2300      	movs	r3, #0
}
 800df48:	4618      	mov	r0, r3
 800df4a:	370c      	adds	r7, #12
 800df4c:	46bd      	mov	sp, r7
 800df4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df52:	4770      	bx	lr

0800df54 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800df54:	b580      	push	{r7, lr}
 800df56:	b084      	sub	sp, #16
 800df58:	af00      	add	r7, sp, #0
 800df5a:	6078      	str	r0, [r7, #4]
 800df5c:	460b      	mov	r3, r1
 800df5e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800df60:	2300      	movs	r3, #0
 800df62:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	68db      	ldr	r3, [r3, #12]
 800df68:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800df70:	78fb      	ldrb	r3, [r7, #3]
 800df72:	2b01      	cmp	r3, #1
 800df74:	d115      	bne.n	800dfa2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	68db      	ldr	r3, [r3, #12]
 800df7a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800df82:	200a      	movs	r0, #10
 800df84:	f7f7 f892 	bl	80050ac <HAL_Delay>
      ms += 10U;
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	330a      	adds	r3, #10
 800df8c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800df8e:	6878      	ldr	r0, [r7, #4]
 800df90:	f001 f93f 	bl	800f212 <USB_GetMode>
 800df94:	4603      	mov	r3, r0
 800df96:	2b01      	cmp	r3, #1
 800df98:	d01e      	beq.n	800dfd8 <USB_SetCurrentMode+0x84>
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	2bc7      	cmp	r3, #199	@ 0xc7
 800df9e:	d9f0      	bls.n	800df82 <USB_SetCurrentMode+0x2e>
 800dfa0:	e01a      	b.n	800dfd8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800dfa2:	78fb      	ldrb	r3, [r7, #3]
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d115      	bne.n	800dfd4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	68db      	ldr	r3, [r3, #12]
 800dfac:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800dfb4:	200a      	movs	r0, #10
 800dfb6:	f7f7 f879 	bl	80050ac <HAL_Delay>
      ms += 10U;
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	330a      	adds	r3, #10
 800dfbe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800dfc0:	6878      	ldr	r0, [r7, #4]
 800dfc2:	f001 f926 	bl	800f212 <USB_GetMode>
 800dfc6:	4603      	mov	r3, r0
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d005      	beq.n	800dfd8 <USB_SetCurrentMode+0x84>
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	2bc7      	cmp	r3, #199	@ 0xc7
 800dfd0:	d9f0      	bls.n	800dfb4 <USB_SetCurrentMode+0x60>
 800dfd2:	e001      	b.n	800dfd8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800dfd4:	2301      	movs	r3, #1
 800dfd6:	e005      	b.n	800dfe4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	2bc8      	cmp	r3, #200	@ 0xc8
 800dfdc:	d101      	bne.n	800dfe2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800dfde:	2301      	movs	r3, #1
 800dfe0:	e000      	b.n	800dfe4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800dfe2:	2300      	movs	r3, #0
}
 800dfe4:	4618      	mov	r0, r3
 800dfe6:	3710      	adds	r7, #16
 800dfe8:	46bd      	mov	sp, r7
 800dfea:	bd80      	pop	{r7, pc}

0800dfec <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800dfec:	b084      	sub	sp, #16
 800dfee:	b580      	push	{r7, lr}
 800dff0:	b086      	sub	sp, #24
 800dff2:	af00      	add	r7, sp, #0
 800dff4:	6078      	str	r0, [r7, #4]
 800dff6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800dffa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800dffe:	2300      	movs	r3, #0
 800e000:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800e006:	2300      	movs	r3, #0
 800e008:	613b      	str	r3, [r7, #16]
 800e00a:	e009      	b.n	800e020 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800e00c:	687a      	ldr	r2, [r7, #4]
 800e00e:	693b      	ldr	r3, [r7, #16]
 800e010:	3340      	adds	r3, #64	@ 0x40
 800e012:	009b      	lsls	r3, r3, #2
 800e014:	4413      	add	r3, r2
 800e016:	2200      	movs	r2, #0
 800e018:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800e01a:	693b      	ldr	r3, [r7, #16]
 800e01c:	3301      	adds	r3, #1
 800e01e:	613b      	str	r3, [r7, #16]
 800e020:	693b      	ldr	r3, [r7, #16]
 800e022:	2b0e      	cmp	r3, #14
 800e024:	d9f2      	bls.n	800e00c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800e026:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d11c      	bne.n	800e068 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e034:	685b      	ldr	r3, [r3, #4]
 800e036:	68fa      	ldr	r2, [r7, #12]
 800e038:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e03c:	f043 0302 	orr.w	r3, r3, #2
 800e040:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e046:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e052:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e05e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	639a      	str	r2, [r3, #56]	@ 0x38
 800e066:	e00b      	b.n	800e080 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e06c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e078:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800e086:	461a      	mov	r2, r3
 800e088:	2300      	movs	r3, #0
 800e08a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e08c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800e090:	2b01      	cmp	r3, #1
 800e092:	d10d      	bne.n	800e0b0 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800e094:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d104      	bne.n	800e0a6 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800e09c:	2100      	movs	r1, #0
 800e09e:	6878      	ldr	r0, [r7, #4]
 800e0a0:	f000 f968 	bl	800e374 <USB_SetDevSpeed>
 800e0a4:	e008      	b.n	800e0b8 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800e0a6:	2101      	movs	r1, #1
 800e0a8:	6878      	ldr	r0, [r7, #4]
 800e0aa:	f000 f963 	bl	800e374 <USB_SetDevSpeed>
 800e0ae:	e003      	b.n	800e0b8 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800e0b0:	2103      	movs	r1, #3
 800e0b2:	6878      	ldr	r0, [r7, #4]
 800e0b4:	f000 f95e 	bl	800e374 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800e0b8:	2110      	movs	r1, #16
 800e0ba:	6878      	ldr	r0, [r7, #4]
 800e0bc:	f000 f8fa 	bl	800e2b4 <USB_FlushTxFifo>
 800e0c0:	4603      	mov	r3, r0
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d001      	beq.n	800e0ca <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800e0c6:	2301      	movs	r3, #1
 800e0c8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800e0ca:	6878      	ldr	r0, [r7, #4]
 800e0cc:	f000 f924 	bl	800e318 <USB_FlushRxFifo>
 800e0d0:	4603      	mov	r3, r0
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d001      	beq.n	800e0da <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800e0d6:	2301      	movs	r3, #1
 800e0d8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e0e0:	461a      	mov	r2, r3
 800e0e2:	2300      	movs	r3, #0
 800e0e4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e0ec:	461a      	mov	r2, r3
 800e0ee:	2300      	movs	r3, #0
 800e0f0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e0f8:	461a      	mov	r2, r3
 800e0fa:	2300      	movs	r3, #0
 800e0fc:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e0fe:	2300      	movs	r3, #0
 800e100:	613b      	str	r3, [r7, #16]
 800e102:	e043      	b.n	800e18c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e104:	693b      	ldr	r3, [r7, #16]
 800e106:	015a      	lsls	r2, r3, #5
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	4413      	add	r3, r2
 800e10c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e116:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e11a:	d118      	bne.n	800e14e <USB_DevInit+0x162>
    {
      if (i == 0U)
 800e11c:	693b      	ldr	r3, [r7, #16]
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d10a      	bne.n	800e138 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800e122:	693b      	ldr	r3, [r7, #16]
 800e124:	015a      	lsls	r2, r3, #5
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	4413      	add	r3, r2
 800e12a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e12e:	461a      	mov	r2, r3
 800e130:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800e134:	6013      	str	r3, [r2, #0]
 800e136:	e013      	b.n	800e160 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800e138:	693b      	ldr	r3, [r7, #16]
 800e13a:	015a      	lsls	r2, r3, #5
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	4413      	add	r3, r2
 800e140:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e144:	461a      	mov	r2, r3
 800e146:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800e14a:	6013      	str	r3, [r2, #0]
 800e14c:	e008      	b.n	800e160 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800e14e:	693b      	ldr	r3, [r7, #16]
 800e150:	015a      	lsls	r2, r3, #5
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	4413      	add	r3, r2
 800e156:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e15a:	461a      	mov	r2, r3
 800e15c:	2300      	movs	r3, #0
 800e15e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800e160:	693b      	ldr	r3, [r7, #16]
 800e162:	015a      	lsls	r2, r3, #5
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	4413      	add	r3, r2
 800e168:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e16c:	461a      	mov	r2, r3
 800e16e:	2300      	movs	r3, #0
 800e170:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800e172:	693b      	ldr	r3, [r7, #16]
 800e174:	015a      	lsls	r2, r3, #5
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	4413      	add	r3, r2
 800e17a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e17e:	461a      	mov	r2, r3
 800e180:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800e184:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e186:	693b      	ldr	r3, [r7, #16]
 800e188:	3301      	adds	r3, #1
 800e18a:	613b      	str	r3, [r7, #16]
 800e18c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800e190:	461a      	mov	r2, r3
 800e192:	693b      	ldr	r3, [r7, #16]
 800e194:	4293      	cmp	r3, r2
 800e196:	d3b5      	bcc.n	800e104 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e198:	2300      	movs	r3, #0
 800e19a:	613b      	str	r3, [r7, #16]
 800e19c:	e043      	b.n	800e226 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e19e:	693b      	ldr	r3, [r7, #16]
 800e1a0:	015a      	lsls	r2, r3, #5
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	4413      	add	r3, r2
 800e1a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e1b0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e1b4:	d118      	bne.n	800e1e8 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800e1b6:	693b      	ldr	r3, [r7, #16]
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d10a      	bne.n	800e1d2 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800e1bc:	693b      	ldr	r3, [r7, #16]
 800e1be:	015a      	lsls	r2, r3, #5
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	4413      	add	r3, r2
 800e1c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e1c8:	461a      	mov	r2, r3
 800e1ca:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800e1ce:	6013      	str	r3, [r2, #0]
 800e1d0:	e013      	b.n	800e1fa <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800e1d2:	693b      	ldr	r3, [r7, #16]
 800e1d4:	015a      	lsls	r2, r3, #5
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	4413      	add	r3, r2
 800e1da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e1de:	461a      	mov	r2, r3
 800e1e0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800e1e4:	6013      	str	r3, [r2, #0]
 800e1e6:	e008      	b.n	800e1fa <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800e1e8:	693b      	ldr	r3, [r7, #16]
 800e1ea:	015a      	lsls	r2, r3, #5
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	4413      	add	r3, r2
 800e1f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e1f4:	461a      	mov	r2, r3
 800e1f6:	2300      	movs	r3, #0
 800e1f8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800e1fa:	693b      	ldr	r3, [r7, #16]
 800e1fc:	015a      	lsls	r2, r3, #5
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	4413      	add	r3, r2
 800e202:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e206:	461a      	mov	r2, r3
 800e208:	2300      	movs	r3, #0
 800e20a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800e20c:	693b      	ldr	r3, [r7, #16]
 800e20e:	015a      	lsls	r2, r3, #5
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	4413      	add	r3, r2
 800e214:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e218:	461a      	mov	r2, r3
 800e21a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800e21e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e220:	693b      	ldr	r3, [r7, #16]
 800e222:	3301      	adds	r3, #1
 800e224:	613b      	str	r3, [r7, #16]
 800e226:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800e22a:	461a      	mov	r2, r3
 800e22c:	693b      	ldr	r3, [r7, #16]
 800e22e:	4293      	cmp	r3, r2
 800e230:	d3b5      	bcc.n	800e19e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e238:	691b      	ldr	r3, [r3, #16]
 800e23a:	68fa      	ldr	r2, [r7, #12]
 800e23c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e240:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e244:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	2200      	movs	r2, #0
 800e24a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800e252:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800e254:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d105      	bne.n	800e268 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	699b      	ldr	r3, [r3, #24]
 800e260:	f043 0210 	orr.w	r2, r3, #16
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	699a      	ldr	r2, [r3, #24]
 800e26c:	4b10      	ldr	r3, [pc, #64]	@ (800e2b0 <USB_DevInit+0x2c4>)
 800e26e:	4313      	orrs	r3, r2
 800e270:	687a      	ldr	r2, [r7, #4]
 800e272:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800e274:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d005      	beq.n	800e288 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	699b      	ldr	r3, [r3, #24]
 800e280:	f043 0208 	orr.w	r2, r3, #8
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800e288:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800e28c:	2b01      	cmp	r3, #1
 800e28e:	d107      	bne.n	800e2a0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	699b      	ldr	r3, [r3, #24]
 800e294:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e298:	f043 0304 	orr.w	r3, r3, #4
 800e29c:	687a      	ldr	r2, [r7, #4]
 800e29e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800e2a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800e2a2:	4618      	mov	r0, r3
 800e2a4:	3718      	adds	r7, #24
 800e2a6:	46bd      	mov	sp, r7
 800e2a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e2ac:	b004      	add	sp, #16
 800e2ae:	4770      	bx	lr
 800e2b0:	803c3800 	.word	0x803c3800

0800e2b4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800e2b4:	b480      	push	{r7}
 800e2b6:	b085      	sub	sp, #20
 800e2b8:	af00      	add	r7, sp, #0
 800e2ba:	6078      	str	r0, [r7, #4]
 800e2bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800e2be:	2300      	movs	r3, #0
 800e2c0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	3301      	adds	r3, #1
 800e2c6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e2ce:	d901      	bls.n	800e2d4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800e2d0:	2303      	movs	r3, #3
 800e2d2:	e01b      	b.n	800e30c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	691b      	ldr	r3, [r3, #16]
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	daf2      	bge.n	800e2c2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800e2dc:	2300      	movs	r3, #0
 800e2de:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800e2e0:	683b      	ldr	r3, [r7, #0]
 800e2e2:	019b      	lsls	r3, r3, #6
 800e2e4:	f043 0220 	orr.w	r2, r3, #32
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	3301      	adds	r3, #1
 800e2f0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e2f8:	d901      	bls.n	800e2fe <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800e2fa:	2303      	movs	r3, #3
 800e2fc:	e006      	b.n	800e30c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	691b      	ldr	r3, [r3, #16]
 800e302:	f003 0320 	and.w	r3, r3, #32
 800e306:	2b20      	cmp	r3, #32
 800e308:	d0f0      	beq.n	800e2ec <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800e30a:	2300      	movs	r3, #0
}
 800e30c:	4618      	mov	r0, r3
 800e30e:	3714      	adds	r7, #20
 800e310:	46bd      	mov	sp, r7
 800e312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e316:	4770      	bx	lr

0800e318 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800e318:	b480      	push	{r7}
 800e31a:	b085      	sub	sp, #20
 800e31c:	af00      	add	r7, sp, #0
 800e31e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e320:	2300      	movs	r3, #0
 800e322:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	3301      	adds	r3, #1
 800e328:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e330:	d901      	bls.n	800e336 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800e332:	2303      	movs	r3, #3
 800e334:	e018      	b.n	800e368 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	691b      	ldr	r3, [r3, #16]
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	daf2      	bge.n	800e324 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800e33e:	2300      	movs	r3, #0
 800e340:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	2210      	movs	r2, #16
 800e346:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	3301      	adds	r3, #1
 800e34c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e354:	d901      	bls.n	800e35a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800e356:	2303      	movs	r3, #3
 800e358:	e006      	b.n	800e368 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	691b      	ldr	r3, [r3, #16]
 800e35e:	f003 0310 	and.w	r3, r3, #16
 800e362:	2b10      	cmp	r3, #16
 800e364:	d0f0      	beq.n	800e348 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800e366:	2300      	movs	r3, #0
}
 800e368:	4618      	mov	r0, r3
 800e36a:	3714      	adds	r7, #20
 800e36c:	46bd      	mov	sp, r7
 800e36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e372:	4770      	bx	lr

0800e374 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800e374:	b480      	push	{r7}
 800e376:	b085      	sub	sp, #20
 800e378:	af00      	add	r7, sp, #0
 800e37a:	6078      	str	r0, [r7, #4]
 800e37c:	460b      	mov	r3, r1
 800e37e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e38a:	681a      	ldr	r2, [r3, #0]
 800e38c:	78fb      	ldrb	r3, [r7, #3]
 800e38e:	68f9      	ldr	r1, [r7, #12]
 800e390:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e394:	4313      	orrs	r3, r2
 800e396:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800e398:	2300      	movs	r3, #0
}
 800e39a:	4618      	mov	r0, r3
 800e39c:	3714      	adds	r7, #20
 800e39e:	46bd      	mov	sp, r7
 800e3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a4:	4770      	bx	lr

0800e3a6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800e3a6:	b480      	push	{r7}
 800e3a8:	b087      	sub	sp, #28
 800e3aa:	af00      	add	r7, sp, #0
 800e3ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800e3b2:	693b      	ldr	r3, [r7, #16]
 800e3b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e3b8:	689b      	ldr	r3, [r3, #8]
 800e3ba:	f003 0306 	and.w	r3, r3, #6
 800e3be:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d102      	bne.n	800e3cc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800e3c6:	2300      	movs	r3, #0
 800e3c8:	75fb      	strb	r3, [r7, #23]
 800e3ca:	e00a      	b.n	800e3e2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	2b02      	cmp	r3, #2
 800e3d0:	d002      	beq.n	800e3d8 <USB_GetDevSpeed+0x32>
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	2b06      	cmp	r3, #6
 800e3d6:	d102      	bne.n	800e3de <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800e3d8:	2302      	movs	r3, #2
 800e3da:	75fb      	strb	r3, [r7, #23]
 800e3dc:	e001      	b.n	800e3e2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800e3de:	230f      	movs	r3, #15
 800e3e0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800e3e2:	7dfb      	ldrb	r3, [r7, #23]
}
 800e3e4:	4618      	mov	r0, r3
 800e3e6:	371c      	adds	r7, #28
 800e3e8:	46bd      	mov	sp, r7
 800e3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ee:	4770      	bx	lr

0800e3f0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800e3f0:	b480      	push	{r7}
 800e3f2:	b085      	sub	sp, #20
 800e3f4:	af00      	add	r7, sp, #0
 800e3f6:	6078      	str	r0, [r7, #4]
 800e3f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e3fe:	683b      	ldr	r3, [r7, #0]
 800e400:	781b      	ldrb	r3, [r3, #0]
 800e402:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e404:	683b      	ldr	r3, [r7, #0]
 800e406:	785b      	ldrb	r3, [r3, #1]
 800e408:	2b01      	cmp	r3, #1
 800e40a:	d13a      	bne.n	800e482 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e412:	69da      	ldr	r2, [r3, #28]
 800e414:	683b      	ldr	r3, [r7, #0]
 800e416:	781b      	ldrb	r3, [r3, #0]
 800e418:	f003 030f 	and.w	r3, r3, #15
 800e41c:	2101      	movs	r1, #1
 800e41e:	fa01 f303 	lsl.w	r3, r1, r3
 800e422:	b29b      	uxth	r3, r3
 800e424:	68f9      	ldr	r1, [r7, #12]
 800e426:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e42a:	4313      	orrs	r3, r2
 800e42c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800e42e:	68bb      	ldr	r3, [r7, #8]
 800e430:	015a      	lsls	r2, r3, #5
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	4413      	add	r3, r2
 800e436:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e440:	2b00      	cmp	r3, #0
 800e442:	d155      	bne.n	800e4f0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e444:	68bb      	ldr	r3, [r7, #8]
 800e446:	015a      	lsls	r2, r3, #5
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	4413      	add	r3, r2
 800e44c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e450:	681a      	ldr	r2, [r3, #0]
 800e452:	683b      	ldr	r3, [r7, #0]
 800e454:	689b      	ldr	r3, [r3, #8]
 800e456:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800e45a:	683b      	ldr	r3, [r7, #0]
 800e45c:	791b      	ldrb	r3, [r3, #4]
 800e45e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e460:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800e462:	68bb      	ldr	r3, [r7, #8]
 800e464:	059b      	lsls	r3, r3, #22
 800e466:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e468:	4313      	orrs	r3, r2
 800e46a:	68ba      	ldr	r2, [r7, #8]
 800e46c:	0151      	lsls	r1, r2, #5
 800e46e:	68fa      	ldr	r2, [r7, #12]
 800e470:	440a      	add	r2, r1
 800e472:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e476:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e47a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e47e:	6013      	str	r3, [r2, #0]
 800e480:	e036      	b.n	800e4f0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e488:	69da      	ldr	r2, [r3, #28]
 800e48a:	683b      	ldr	r3, [r7, #0]
 800e48c:	781b      	ldrb	r3, [r3, #0]
 800e48e:	f003 030f 	and.w	r3, r3, #15
 800e492:	2101      	movs	r1, #1
 800e494:	fa01 f303 	lsl.w	r3, r1, r3
 800e498:	041b      	lsls	r3, r3, #16
 800e49a:	68f9      	ldr	r1, [r7, #12]
 800e49c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e4a0:	4313      	orrs	r3, r2
 800e4a2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800e4a4:	68bb      	ldr	r3, [r7, #8]
 800e4a6:	015a      	lsls	r2, r3, #5
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	4413      	add	r3, r2
 800e4ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d11a      	bne.n	800e4f0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800e4ba:	68bb      	ldr	r3, [r7, #8]
 800e4bc:	015a      	lsls	r2, r3, #5
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	4413      	add	r3, r2
 800e4c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e4c6:	681a      	ldr	r2, [r3, #0]
 800e4c8:	683b      	ldr	r3, [r7, #0]
 800e4ca:	689b      	ldr	r3, [r3, #8]
 800e4cc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800e4d0:	683b      	ldr	r3, [r7, #0]
 800e4d2:	791b      	ldrb	r3, [r3, #4]
 800e4d4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800e4d6:	430b      	orrs	r3, r1
 800e4d8:	4313      	orrs	r3, r2
 800e4da:	68ba      	ldr	r2, [r7, #8]
 800e4dc:	0151      	lsls	r1, r2, #5
 800e4de:	68fa      	ldr	r2, [r7, #12]
 800e4e0:	440a      	add	r2, r1
 800e4e2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e4e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e4ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e4ee:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800e4f0:	2300      	movs	r3, #0
}
 800e4f2:	4618      	mov	r0, r3
 800e4f4:	3714      	adds	r7, #20
 800e4f6:	46bd      	mov	sp, r7
 800e4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4fc:	4770      	bx	lr
	...

0800e500 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800e500:	b480      	push	{r7}
 800e502:	b085      	sub	sp, #20
 800e504:	af00      	add	r7, sp, #0
 800e506:	6078      	str	r0, [r7, #4]
 800e508:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e50e:	683b      	ldr	r3, [r7, #0]
 800e510:	781b      	ldrb	r3, [r3, #0]
 800e512:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800e514:	683b      	ldr	r3, [r7, #0]
 800e516:	785b      	ldrb	r3, [r3, #1]
 800e518:	2b01      	cmp	r3, #1
 800e51a:	d161      	bne.n	800e5e0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e51c:	68bb      	ldr	r3, [r7, #8]
 800e51e:	015a      	lsls	r2, r3, #5
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	4413      	add	r3, r2
 800e524:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e52e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e532:	d11f      	bne.n	800e574 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800e534:	68bb      	ldr	r3, [r7, #8]
 800e536:	015a      	lsls	r2, r3, #5
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	4413      	add	r3, r2
 800e53c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	68ba      	ldr	r2, [r7, #8]
 800e544:	0151      	lsls	r1, r2, #5
 800e546:	68fa      	ldr	r2, [r7, #12]
 800e548:	440a      	add	r2, r1
 800e54a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e54e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800e552:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800e554:	68bb      	ldr	r3, [r7, #8]
 800e556:	015a      	lsls	r2, r3, #5
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	4413      	add	r3, r2
 800e55c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	68ba      	ldr	r2, [r7, #8]
 800e564:	0151      	lsls	r1, r2, #5
 800e566:	68fa      	ldr	r2, [r7, #12]
 800e568:	440a      	add	r2, r1
 800e56a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e56e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e572:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e57a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e57c:	683b      	ldr	r3, [r7, #0]
 800e57e:	781b      	ldrb	r3, [r3, #0]
 800e580:	f003 030f 	and.w	r3, r3, #15
 800e584:	2101      	movs	r1, #1
 800e586:	fa01 f303 	lsl.w	r3, r1, r3
 800e58a:	b29b      	uxth	r3, r3
 800e58c:	43db      	mvns	r3, r3
 800e58e:	68f9      	ldr	r1, [r7, #12]
 800e590:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e594:	4013      	ands	r3, r2
 800e596:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e59e:	69da      	ldr	r2, [r3, #28]
 800e5a0:	683b      	ldr	r3, [r7, #0]
 800e5a2:	781b      	ldrb	r3, [r3, #0]
 800e5a4:	f003 030f 	and.w	r3, r3, #15
 800e5a8:	2101      	movs	r1, #1
 800e5aa:	fa01 f303 	lsl.w	r3, r1, r3
 800e5ae:	b29b      	uxth	r3, r3
 800e5b0:	43db      	mvns	r3, r3
 800e5b2:	68f9      	ldr	r1, [r7, #12]
 800e5b4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e5b8:	4013      	ands	r3, r2
 800e5ba:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800e5bc:	68bb      	ldr	r3, [r7, #8]
 800e5be:	015a      	lsls	r2, r3, #5
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	4413      	add	r3, r2
 800e5c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e5c8:	681a      	ldr	r2, [r3, #0]
 800e5ca:	68bb      	ldr	r3, [r7, #8]
 800e5cc:	0159      	lsls	r1, r3, #5
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	440b      	add	r3, r1
 800e5d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e5d6:	4619      	mov	r1, r3
 800e5d8:	4b35      	ldr	r3, [pc, #212]	@ (800e6b0 <USB_DeactivateEndpoint+0x1b0>)
 800e5da:	4013      	ands	r3, r2
 800e5dc:	600b      	str	r3, [r1, #0]
 800e5de:	e060      	b.n	800e6a2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e5e0:	68bb      	ldr	r3, [r7, #8]
 800e5e2:	015a      	lsls	r2, r3, #5
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	4413      	add	r3, r2
 800e5e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e5f2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e5f6:	d11f      	bne.n	800e638 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800e5f8:	68bb      	ldr	r3, [r7, #8]
 800e5fa:	015a      	lsls	r2, r3, #5
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	4413      	add	r3, r2
 800e600:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	68ba      	ldr	r2, [r7, #8]
 800e608:	0151      	lsls	r1, r2, #5
 800e60a:	68fa      	ldr	r2, [r7, #12]
 800e60c:	440a      	add	r2, r1
 800e60e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e612:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800e616:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800e618:	68bb      	ldr	r3, [r7, #8]
 800e61a:	015a      	lsls	r2, r3, #5
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	4413      	add	r3, r2
 800e620:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	68ba      	ldr	r2, [r7, #8]
 800e628:	0151      	lsls	r1, r2, #5
 800e62a:	68fa      	ldr	r2, [r7, #12]
 800e62c:	440a      	add	r2, r1
 800e62e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e632:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e636:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e63e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e640:	683b      	ldr	r3, [r7, #0]
 800e642:	781b      	ldrb	r3, [r3, #0]
 800e644:	f003 030f 	and.w	r3, r3, #15
 800e648:	2101      	movs	r1, #1
 800e64a:	fa01 f303 	lsl.w	r3, r1, r3
 800e64e:	041b      	lsls	r3, r3, #16
 800e650:	43db      	mvns	r3, r3
 800e652:	68f9      	ldr	r1, [r7, #12]
 800e654:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e658:	4013      	ands	r3, r2
 800e65a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e662:	69da      	ldr	r2, [r3, #28]
 800e664:	683b      	ldr	r3, [r7, #0]
 800e666:	781b      	ldrb	r3, [r3, #0]
 800e668:	f003 030f 	and.w	r3, r3, #15
 800e66c:	2101      	movs	r1, #1
 800e66e:	fa01 f303 	lsl.w	r3, r1, r3
 800e672:	041b      	lsls	r3, r3, #16
 800e674:	43db      	mvns	r3, r3
 800e676:	68f9      	ldr	r1, [r7, #12]
 800e678:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e67c:	4013      	ands	r3, r2
 800e67e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800e680:	68bb      	ldr	r3, [r7, #8]
 800e682:	015a      	lsls	r2, r3, #5
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	4413      	add	r3, r2
 800e688:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e68c:	681a      	ldr	r2, [r3, #0]
 800e68e:	68bb      	ldr	r3, [r7, #8]
 800e690:	0159      	lsls	r1, r3, #5
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	440b      	add	r3, r1
 800e696:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e69a:	4619      	mov	r1, r3
 800e69c:	4b05      	ldr	r3, [pc, #20]	@ (800e6b4 <USB_DeactivateEndpoint+0x1b4>)
 800e69e:	4013      	ands	r3, r2
 800e6a0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800e6a2:	2300      	movs	r3, #0
}
 800e6a4:	4618      	mov	r0, r3
 800e6a6:	3714      	adds	r7, #20
 800e6a8:	46bd      	mov	sp, r7
 800e6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ae:	4770      	bx	lr
 800e6b0:	ec337800 	.word	0xec337800
 800e6b4:	eff37800 	.word	0xeff37800

0800e6b8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800e6b8:	b580      	push	{r7, lr}
 800e6ba:	b08a      	sub	sp, #40	@ 0x28
 800e6bc:	af02      	add	r7, sp, #8
 800e6be:	60f8      	str	r0, [r7, #12]
 800e6c0:	60b9      	str	r1, [r7, #8]
 800e6c2:	4613      	mov	r3, r2
 800e6c4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800e6ca:	68bb      	ldr	r3, [r7, #8]
 800e6cc:	781b      	ldrb	r3, [r3, #0]
 800e6ce:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e6d0:	68bb      	ldr	r3, [r7, #8]
 800e6d2:	785b      	ldrb	r3, [r3, #1]
 800e6d4:	2b01      	cmp	r3, #1
 800e6d6:	f040 817f 	bne.w	800e9d8 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800e6da:	68bb      	ldr	r3, [r7, #8]
 800e6dc:	691b      	ldr	r3, [r3, #16]
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d132      	bne.n	800e748 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e6e2:	69bb      	ldr	r3, [r7, #24]
 800e6e4:	015a      	lsls	r2, r3, #5
 800e6e6:	69fb      	ldr	r3, [r7, #28]
 800e6e8:	4413      	add	r3, r2
 800e6ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e6ee:	691b      	ldr	r3, [r3, #16]
 800e6f0:	69ba      	ldr	r2, [r7, #24]
 800e6f2:	0151      	lsls	r1, r2, #5
 800e6f4:	69fa      	ldr	r2, [r7, #28]
 800e6f6:	440a      	add	r2, r1
 800e6f8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e6fc:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800e700:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800e704:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e706:	69bb      	ldr	r3, [r7, #24]
 800e708:	015a      	lsls	r2, r3, #5
 800e70a:	69fb      	ldr	r3, [r7, #28]
 800e70c:	4413      	add	r3, r2
 800e70e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e712:	691b      	ldr	r3, [r3, #16]
 800e714:	69ba      	ldr	r2, [r7, #24]
 800e716:	0151      	lsls	r1, r2, #5
 800e718:	69fa      	ldr	r2, [r7, #28]
 800e71a:	440a      	add	r2, r1
 800e71c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e720:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e724:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e726:	69bb      	ldr	r3, [r7, #24]
 800e728:	015a      	lsls	r2, r3, #5
 800e72a:	69fb      	ldr	r3, [r7, #28]
 800e72c:	4413      	add	r3, r2
 800e72e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e732:	691b      	ldr	r3, [r3, #16]
 800e734:	69ba      	ldr	r2, [r7, #24]
 800e736:	0151      	lsls	r1, r2, #5
 800e738:	69fa      	ldr	r2, [r7, #28]
 800e73a:	440a      	add	r2, r1
 800e73c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e740:	0cdb      	lsrs	r3, r3, #19
 800e742:	04db      	lsls	r3, r3, #19
 800e744:	6113      	str	r3, [r2, #16]
 800e746:	e097      	b.n	800e878 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e748:	69bb      	ldr	r3, [r7, #24]
 800e74a:	015a      	lsls	r2, r3, #5
 800e74c:	69fb      	ldr	r3, [r7, #28]
 800e74e:	4413      	add	r3, r2
 800e750:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e754:	691b      	ldr	r3, [r3, #16]
 800e756:	69ba      	ldr	r2, [r7, #24]
 800e758:	0151      	lsls	r1, r2, #5
 800e75a:	69fa      	ldr	r2, [r7, #28]
 800e75c:	440a      	add	r2, r1
 800e75e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e762:	0cdb      	lsrs	r3, r3, #19
 800e764:	04db      	lsls	r3, r3, #19
 800e766:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e768:	69bb      	ldr	r3, [r7, #24]
 800e76a:	015a      	lsls	r2, r3, #5
 800e76c:	69fb      	ldr	r3, [r7, #28]
 800e76e:	4413      	add	r3, r2
 800e770:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e774:	691b      	ldr	r3, [r3, #16]
 800e776:	69ba      	ldr	r2, [r7, #24]
 800e778:	0151      	lsls	r1, r2, #5
 800e77a:	69fa      	ldr	r2, [r7, #28]
 800e77c:	440a      	add	r2, r1
 800e77e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e782:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800e786:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800e78a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800e78c:	69bb      	ldr	r3, [r7, #24]
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d11a      	bne.n	800e7c8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800e792:	68bb      	ldr	r3, [r7, #8]
 800e794:	691a      	ldr	r2, [r3, #16]
 800e796:	68bb      	ldr	r3, [r7, #8]
 800e798:	689b      	ldr	r3, [r3, #8]
 800e79a:	429a      	cmp	r2, r3
 800e79c:	d903      	bls.n	800e7a6 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800e79e:	68bb      	ldr	r3, [r7, #8]
 800e7a0:	689a      	ldr	r2, [r3, #8]
 800e7a2:	68bb      	ldr	r3, [r7, #8]
 800e7a4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e7a6:	69bb      	ldr	r3, [r7, #24]
 800e7a8:	015a      	lsls	r2, r3, #5
 800e7aa:	69fb      	ldr	r3, [r7, #28]
 800e7ac:	4413      	add	r3, r2
 800e7ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e7b2:	691b      	ldr	r3, [r3, #16]
 800e7b4:	69ba      	ldr	r2, [r7, #24]
 800e7b6:	0151      	lsls	r1, r2, #5
 800e7b8:	69fa      	ldr	r2, [r7, #28]
 800e7ba:	440a      	add	r2, r1
 800e7bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e7c0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e7c4:	6113      	str	r3, [r2, #16]
 800e7c6:	e044      	b.n	800e852 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800e7c8:	68bb      	ldr	r3, [r7, #8]
 800e7ca:	691a      	ldr	r2, [r3, #16]
 800e7cc:	68bb      	ldr	r3, [r7, #8]
 800e7ce:	689b      	ldr	r3, [r3, #8]
 800e7d0:	4413      	add	r3, r2
 800e7d2:	1e5a      	subs	r2, r3, #1
 800e7d4:	68bb      	ldr	r3, [r7, #8]
 800e7d6:	689b      	ldr	r3, [r3, #8]
 800e7d8:	fbb2 f3f3 	udiv	r3, r2, r3
 800e7dc:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 800e7de:	69bb      	ldr	r3, [r7, #24]
 800e7e0:	015a      	lsls	r2, r3, #5
 800e7e2:	69fb      	ldr	r3, [r7, #28]
 800e7e4:	4413      	add	r3, r2
 800e7e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e7ea:	691a      	ldr	r2, [r3, #16]
 800e7ec:	8afb      	ldrh	r3, [r7, #22]
 800e7ee:	04d9      	lsls	r1, r3, #19
 800e7f0:	4ba4      	ldr	r3, [pc, #656]	@ (800ea84 <USB_EPStartXfer+0x3cc>)
 800e7f2:	400b      	ands	r3, r1
 800e7f4:	69b9      	ldr	r1, [r7, #24]
 800e7f6:	0148      	lsls	r0, r1, #5
 800e7f8:	69f9      	ldr	r1, [r7, #28]
 800e7fa:	4401      	add	r1, r0
 800e7fc:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800e800:	4313      	orrs	r3, r2
 800e802:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800e804:	68bb      	ldr	r3, [r7, #8]
 800e806:	791b      	ldrb	r3, [r3, #4]
 800e808:	2b01      	cmp	r3, #1
 800e80a:	d122      	bne.n	800e852 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800e80c:	69bb      	ldr	r3, [r7, #24]
 800e80e:	015a      	lsls	r2, r3, #5
 800e810:	69fb      	ldr	r3, [r7, #28]
 800e812:	4413      	add	r3, r2
 800e814:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e818:	691b      	ldr	r3, [r3, #16]
 800e81a:	69ba      	ldr	r2, [r7, #24]
 800e81c:	0151      	lsls	r1, r2, #5
 800e81e:	69fa      	ldr	r2, [r7, #28]
 800e820:	440a      	add	r2, r1
 800e822:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e826:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800e82a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 800e82c:	69bb      	ldr	r3, [r7, #24]
 800e82e:	015a      	lsls	r2, r3, #5
 800e830:	69fb      	ldr	r3, [r7, #28]
 800e832:	4413      	add	r3, r2
 800e834:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e838:	691a      	ldr	r2, [r3, #16]
 800e83a:	8afb      	ldrh	r3, [r7, #22]
 800e83c:	075b      	lsls	r3, r3, #29
 800e83e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800e842:	69b9      	ldr	r1, [r7, #24]
 800e844:	0148      	lsls	r0, r1, #5
 800e846:	69f9      	ldr	r1, [r7, #28]
 800e848:	4401      	add	r1, r0
 800e84a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800e84e:	4313      	orrs	r3, r2
 800e850:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e852:	69bb      	ldr	r3, [r7, #24]
 800e854:	015a      	lsls	r2, r3, #5
 800e856:	69fb      	ldr	r3, [r7, #28]
 800e858:	4413      	add	r3, r2
 800e85a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e85e:	691a      	ldr	r2, [r3, #16]
 800e860:	68bb      	ldr	r3, [r7, #8]
 800e862:	691b      	ldr	r3, [r3, #16]
 800e864:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e868:	69b9      	ldr	r1, [r7, #24]
 800e86a:	0148      	lsls	r0, r1, #5
 800e86c:	69f9      	ldr	r1, [r7, #28]
 800e86e:	4401      	add	r1, r0
 800e870:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800e874:	4313      	orrs	r3, r2
 800e876:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800e878:	79fb      	ldrb	r3, [r7, #7]
 800e87a:	2b01      	cmp	r3, #1
 800e87c:	d14b      	bne.n	800e916 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800e87e:	68bb      	ldr	r3, [r7, #8]
 800e880:	69db      	ldr	r3, [r3, #28]
 800e882:	2b00      	cmp	r3, #0
 800e884:	d009      	beq.n	800e89a <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800e886:	69bb      	ldr	r3, [r7, #24]
 800e888:	015a      	lsls	r2, r3, #5
 800e88a:	69fb      	ldr	r3, [r7, #28]
 800e88c:	4413      	add	r3, r2
 800e88e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e892:	461a      	mov	r2, r3
 800e894:	68bb      	ldr	r3, [r7, #8]
 800e896:	69db      	ldr	r3, [r3, #28]
 800e898:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800e89a:	68bb      	ldr	r3, [r7, #8]
 800e89c:	791b      	ldrb	r3, [r3, #4]
 800e89e:	2b01      	cmp	r3, #1
 800e8a0:	d128      	bne.n	800e8f4 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e8a2:	69fb      	ldr	r3, [r7, #28]
 800e8a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e8a8:	689b      	ldr	r3, [r3, #8]
 800e8aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d110      	bne.n	800e8d4 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e8b2:	69bb      	ldr	r3, [r7, #24]
 800e8b4:	015a      	lsls	r2, r3, #5
 800e8b6:	69fb      	ldr	r3, [r7, #28]
 800e8b8:	4413      	add	r3, r2
 800e8ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	69ba      	ldr	r2, [r7, #24]
 800e8c2:	0151      	lsls	r1, r2, #5
 800e8c4:	69fa      	ldr	r2, [r7, #28]
 800e8c6:	440a      	add	r2, r1
 800e8c8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e8cc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800e8d0:	6013      	str	r3, [r2, #0]
 800e8d2:	e00f      	b.n	800e8f4 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e8d4:	69bb      	ldr	r3, [r7, #24]
 800e8d6:	015a      	lsls	r2, r3, #5
 800e8d8:	69fb      	ldr	r3, [r7, #28]
 800e8da:	4413      	add	r3, r2
 800e8dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	69ba      	ldr	r2, [r7, #24]
 800e8e4:	0151      	lsls	r1, r2, #5
 800e8e6:	69fa      	ldr	r2, [r7, #28]
 800e8e8:	440a      	add	r2, r1
 800e8ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e8ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e8f2:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e8f4:	69bb      	ldr	r3, [r7, #24]
 800e8f6:	015a      	lsls	r2, r3, #5
 800e8f8:	69fb      	ldr	r3, [r7, #28]
 800e8fa:	4413      	add	r3, r2
 800e8fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	69ba      	ldr	r2, [r7, #24]
 800e904:	0151      	lsls	r1, r2, #5
 800e906:	69fa      	ldr	r2, [r7, #28]
 800e908:	440a      	add	r2, r1
 800e90a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e90e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800e912:	6013      	str	r3, [r2, #0]
 800e914:	e166      	b.n	800ebe4 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e916:	69bb      	ldr	r3, [r7, #24]
 800e918:	015a      	lsls	r2, r3, #5
 800e91a:	69fb      	ldr	r3, [r7, #28]
 800e91c:	4413      	add	r3, r2
 800e91e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	69ba      	ldr	r2, [r7, #24]
 800e926:	0151      	lsls	r1, r2, #5
 800e928:	69fa      	ldr	r2, [r7, #28]
 800e92a:	440a      	add	r2, r1
 800e92c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e930:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800e934:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800e936:	68bb      	ldr	r3, [r7, #8]
 800e938:	791b      	ldrb	r3, [r3, #4]
 800e93a:	2b01      	cmp	r3, #1
 800e93c:	d015      	beq.n	800e96a <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800e93e:	68bb      	ldr	r3, [r7, #8]
 800e940:	691b      	ldr	r3, [r3, #16]
 800e942:	2b00      	cmp	r3, #0
 800e944:	f000 814e 	beq.w	800ebe4 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800e948:	69fb      	ldr	r3, [r7, #28]
 800e94a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e94e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e950:	68bb      	ldr	r3, [r7, #8]
 800e952:	781b      	ldrb	r3, [r3, #0]
 800e954:	f003 030f 	and.w	r3, r3, #15
 800e958:	2101      	movs	r1, #1
 800e95a:	fa01 f303 	lsl.w	r3, r1, r3
 800e95e:	69f9      	ldr	r1, [r7, #28]
 800e960:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e964:	4313      	orrs	r3, r2
 800e966:	634b      	str	r3, [r1, #52]	@ 0x34
 800e968:	e13c      	b.n	800ebe4 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e96a:	69fb      	ldr	r3, [r7, #28]
 800e96c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e970:	689b      	ldr	r3, [r3, #8]
 800e972:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e976:	2b00      	cmp	r3, #0
 800e978:	d110      	bne.n	800e99c <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e97a:	69bb      	ldr	r3, [r7, #24]
 800e97c:	015a      	lsls	r2, r3, #5
 800e97e:	69fb      	ldr	r3, [r7, #28]
 800e980:	4413      	add	r3, r2
 800e982:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	69ba      	ldr	r2, [r7, #24]
 800e98a:	0151      	lsls	r1, r2, #5
 800e98c:	69fa      	ldr	r2, [r7, #28]
 800e98e:	440a      	add	r2, r1
 800e990:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e994:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800e998:	6013      	str	r3, [r2, #0]
 800e99a:	e00f      	b.n	800e9bc <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e99c:	69bb      	ldr	r3, [r7, #24]
 800e99e:	015a      	lsls	r2, r3, #5
 800e9a0:	69fb      	ldr	r3, [r7, #28]
 800e9a2:	4413      	add	r3, r2
 800e9a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	69ba      	ldr	r2, [r7, #24]
 800e9ac:	0151      	lsls	r1, r2, #5
 800e9ae:	69fa      	ldr	r2, [r7, #28]
 800e9b0:	440a      	add	r2, r1
 800e9b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e9b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e9ba:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800e9bc:	68bb      	ldr	r3, [r7, #8]
 800e9be:	68d9      	ldr	r1, [r3, #12]
 800e9c0:	68bb      	ldr	r3, [r7, #8]
 800e9c2:	781a      	ldrb	r2, [r3, #0]
 800e9c4:	68bb      	ldr	r3, [r7, #8]
 800e9c6:	691b      	ldr	r3, [r3, #16]
 800e9c8:	b298      	uxth	r0, r3
 800e9ca:	79fb      	ldrb	r3, [r7, #7]
 800e9cc:	9300      	str	r3, [sp, #0]
 800e9ce:	4603      	mov	r3, r0
 800e9d0:	68f8      	ldr	r0, [r7, #12]
 800e9d2:	f000 f9b9 	bl	800ed48 <USB_WritePacket>
 800e9d6:	e105      	b.n	800ebe4 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800e9d8:	69bb      	ldr	r3, [r7, #24]
 800e9da:	015a      	lsls	r2, r3, #5
 800e9dc:	69fb      	ldr	r3, [r7, #28]
 800e9de:	4413      	add	r3, r2
 800e9e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e9e4:	691b      	ldr	r3, [r3, #16]
 800e9e6:	69ba      	ldr	r2, [r7, #24]
 800e9e8:	0151      	lsls	r1, r2, #5
 800e9ea:	69fa      	ldr	r2, [r7, #28]
 800e9ec:	440a      	add	r2, r1
 800e9ee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e9f2:	0cdb      	lsrs	r3, r3, #19
 800e9f4:	04db      	lsls	r3, r3, #19
 800e9f6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800e9f8:	69bb      	ldr	r3, [r7, #24]
 800e9fa:	015a      	lsls	r2, r3, #5
 800e9fc:	69fb      	ldr	r3, [r7, #28]
 800e9fe:	4413      	add	r3, r2
 800ea00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ea04:	691b      	ldr	r3, [r3, #16]
 800ea06:	69ba      	ldr	r2, [r7, #24]
 800ea08:	0151      	lsls	r1, r2, #5
 800ea0a:	69fa      	ldr	r2, [r7, #28]
 800ea0c:	440a      	add	r2, r1
 800ea0e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ea12:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800ea16:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800ea1a:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800ea1c:	69bb      	ldr	r3, [r7, #24]
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d132      	bne.n	800ea88 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800ea22:	68bb      	ldr	r3, [r7, #8]
 800ea24:	691b      	ldr	r3, [r3, #16]
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d003      	beq.n	800ea32 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800ea2a:	68bb      	ldr	r3, [r7, #8]
 800ea2c:	689a      	ldr	r2, [r3, #8]
 800ea2e:	68bb      	ldr	r3, [r7, #8]
 800ea30:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800ea32:	68bb      	ldr	r3, [r7, #8]
 800ea34:	689a      	ldr	r2, [r3, #8]
 800ea36:	68bb      	ldr	r3, [r7, #8]
 800ea38:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800ea3a:	69bb      	ldr	r3, [r7, #24]
 800ea3c:	015a      	lsls	r2, r3, #5
 800ea3e:	69fb      	ldr	r3, [r7, #28]
 800ea40:	4413      	add	r3, r2
 800ea42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ea46:	691a      	ldr	r2, [r3, #16]
 800ea48:	68bb      	ldr	r3, [r7, #8]
 800ea4a:	6a1b      	ldr	r3, [r3, #32]
 800ea4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ea50:	69b9      	ldr	r1, [r7, #24]
 800ea52:	0148      	lsls	r0, r1, #5
 800ea54:	69f9      	ldr	r1, [r7, #28]
 800ea56:	4401      	add	r1, r0
 800ea58:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800ea5c:	4313      	orrs	r3, r2
 800ea5e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ea60:	69bb      	ldr	r3, [r7, #24]
 800ea62:	015a      	lsls	r2, r3, #5
 800ea64:	69fb      	ldr	r3, [r7, #28]
 800ea66:	4413      	add	r3, r2
 800ea68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ea6c:	691b      	ldr	r3, [r3, #16]
 800ea6e:	69ba      	ldr	r2, [r7, #24]
 800ea70:	0151      	lsls	r1, r2, #5
 800ea72:	69fa      	ldr	r2, [r7, #28]
 800ea74:	440a      	add	r2, r1
 800ea76:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ea7a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ea7e:	6113      	str	r3, [r2, #16]
 800ea80:	e062      	b.n	800eb48 <USB_EPStartXfer+0x490>
 800ea82:	bf00      	nop
 800ea84:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800ea88:	68bb      	ldr	r3, [r7, #8]
 800ea8a:	691b      	ldr	r3, [r3, #16]
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d123      	bne.n	800ead8 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800ea90:	69bb      	ldr	r3, [r7, #24]
 800ea92:	015a      	lsls	r2, r3, #5
 800ea94:	69fb      	ldr	r3, [r7, #28]
 800ea96:	4413      	add	r3, r2
 800ea98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ea9c:	691a      	ldr	r2, [r3, #16]
 800ea9e:	68bb      	ldr	r3, [r7, #8]
 800eaa0:	689b      	ldr	r3, [r3, #8]
 800eaa2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800eaa6:	69b9      	ldr	r1, [r7, #24]
 800eaa8:	0148      	lsls	r0, r1, #5
 800eaaa:	69f9      	ldr	r1, [r7, #28]
 800eaac:	4401      	add	r1, r0
 800eaae:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800eab2:	4313      	orrs	r3, r2
 800eab4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800eab6:	69bb      	ldr	r3, [r7, #24]
 800eab8:	015a      	lsls	r2, r3, #5
 800eaba:	69fb      	ldr	r3, [r7, #28]
 800eabc:	4413      	add	r3, r2
 800eabe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eac2:	691b      	ldr	r3, [r3, #16]
 800eac4:	69ba      	ldr	r2, [r7, #24]
 800eac6:	0151      	lsls	r1, r2, #5
 800eac8:	69fa      	ldr	r2, [r7, #28]
 800eaca:	440a      	add	r2, r1
 800eacc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ead0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ead4:	6113      	str	r3, [r2, #16]
 800ead6:	e037      	b.n	800eb48 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800ead8:	68bb      	ldr	r3, [r7, #8]
 800eada:	691a      	ldr	r2, [r3, #16]
 800eadc:	68bb      	ldr	r3, [r7, #8]
 800eade:	689b      	ldr	r3, [r3, #8]
 800eae0:	4413      	add	r3, r2
 800eae2:	1e5a      	subs	r2, r3, #1
 800eae4:	68bb      	ldr	r3, [r7, #8]
 800eae6:	689b      	ldr	r3, [r3, #8]
 800eae8:	fbb2 f3f3 	udiv	r3, r2, r3
 800eaec:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800eaee:	68bb      	ldr	r3, [r7, #8]
 800eaf0:	689b      	ldr	r3, [r3, #8]
 800eaf2:	8afa      	ldrh	r2, [r7, #22]
 800eaf4:	fb03 f202 	mul.w	r2, r3, r2
 800eaf8:	68bb      	ldr	r3, [r7, #8]
 800eafa:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800eafc:	69bb      	ldr	r3, [r7, #24]
 800eafe:	015a      	lsls	r2, r3, #5
 800eb00:	69fb      	ldr	r3, [r7, #28]
 800eb02:	4413      	add	r3, r2
 800eb04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eb08:	691a      	ldr	r2, [r3, #16]
 800eb0a:	8afb      	ldrh	r3, [r7, #22]
 800eb0c:	04d9      	lsls	r1, r3, #19
 800eb0e:	4b38      	ldr	r3, [pc, #224]	@ (800ebf0 <USB_EPStartXfer+0x538>)
 800eb10:	400b      	ands	r3, r1
 800eb12:	69b9      	ldr	r1, [r7, #24]
 800eb14:	0148      	lsls	r0, r1, #5
 800eb16:	69f9      	ldr	r1, [r7, #28]
 800eb18:	4401      	add	r1, r0
 800eb1a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800eb1e:	4313      	orrs	r3, r2
 800eb20:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800eb22:	69bb      	ldr	r3, [r7, #24]
 800eb24:	015a      	lsls	r2, r3, #5
 800eb26:	69fb      	ldr	r3, [r7, #28]
 800eb28:	4413      	add	r3, r2
 800eb2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eb2e:	691a      	ldr	r2, [r3, #16]
 800eb30:	68bb      	ldr	r3, [r7, #8]
 800eb32:	6a1b      	ldr	r3, [r3, #32]
 800eb34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800eb38:	69b9      	ldr	r1, [r7, #24]
 800eb3a:	0148      	lsls	r0, r1, #5
 800eb3c:	69f9      	ldr	r1, [r7, #28]
 800eb3e:	4401      	add	r1, r0
 800eb40:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800eb44:	4313      	orrs	r3, r2
 800eb46:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800eb48:	79fb      	ldrb	r3, [r7, #7]
 800eb4a:	2b01      	cmp	r3, #1
 800eb4c:	d10d      	bne.n	800eb6a <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800eb4e:	68bb      	ldr	r3, [r7, #8]
 800eb50:	68db      	ldr	r3, [r3, #12]
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d009      	beq.n	800eb6a <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800eb56:	68bb      	ldr	r3, [r7, #8]
 800eb58:	68d9      	ldr	r1, [r3, #12]
 800eb5a:	69bb      	ldr	r3, [r7, #24]
 800eb5c:	015a      	lsls	r2, r3, #5
 800eb5e:	69fb      	ldr	r3, [r7, #28]
 800eb60:	4413      	add	r3, r2
 800eb62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eb66:	460a      	mov	r2, r1
 800eb68:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800eb6a:	68bb      	ldr	r3, [r7, #8]
 800eb6c:	791b      	ldrb	r3, [r3, #4]
 800eb6e:	2b01      	cmp	r3, #1
 800eb70:	d128      	bne.n	800ebc4 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800eb72:	69fb      	ldr	r3, [r7, #28]
 800eb74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800eb78:	689b      	ldr	r3, [r3, #8]
 800eb7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d110      	bne.n	800eba4 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800eb82:	69bb      	ldr	r3, [r7, #24]
 800eb84:	015a      	lsls	r2, r3, #5
 800eb86:	69fb      	ldr	r3, [r7, #28]
 800eb88:	4413      	add	r3, r2
 800eb8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	69ba      	ldr	r2, [r7, #24]
 800eb92:	0151      	lsls	r1, r2, #5
 800eb94:	69fa      	ldr	r2, [r7, #28]
 800eb96:	440a      	add	r2, r1
 800eb98:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800eb9c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800eba0:	6013      	str	r3, [r2, #0]
 800eba2:	e00f      	b.n	800ebc4 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800eba4:	69bb      	ldr	r3, [r7, #24]
 800eba6:	015a      	lsls	r2, r3, #5
 800eba8:	69fb      	ldr	r3, [r7, #28]
 800ebaa:	4413      	add	r3, r2
 800ebac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	69ba      	ldr	r2, [r7, #24]
 800ebb4:	0151      	lsls	r1, r2, #5
 800ebb6:	69fa      	ldr	r2, [r7, #28]
 800ebb8:	440a      	add	r2, r1
 800ebba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ebbe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ebc2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ebc4:	69bb      	ldr	r3, [r7, #24]
 800ebc6:	015a      	lsls	r2, r3, #5
 800ebc8:	69fb      	ldr	r3, [r7, #28]
 800ebca:	4413      	add	r3, r2
 800ebcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	69ba      	ldr	r2, [r7, #24]
 800ebd4:	0151      	lsls	r1, r2, #5
 800ebd6:	69fa      	ldr	r2, [r7, #28]
 800ebd8:	440a      	add	r2, r1
 800ebda:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ebde:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800ebe2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ebe4:	2300      	movs	r3, #0
}
 800ebe6:	4618      	mov	r0, r3
 800ebe8:	3720      	adds	r7, #32
 800ebea:	46bd      	mov	sp, r7
 800ebec:	bd80      	pop	{r7, pc}
 800ebee:	bf00      	nop
 800ebf0:	1ff80000 	.word	0x1ff80000

0800ebf4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ebf4:	b480      	push	{r7}
 800ebf6:	b087      	sub	sp, #28
 800ebf8:	af00      	add	r7, sp, #0
 800ebfa:	6078      	str	r0, [r7, #4]
 800ebfc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ebfe:	2300      	movs	r3, #0
 800ec00:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800ec02:	2300      	movs	r3, #0
 800ec04:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ec0a:	683b      	ldr	r3, [r7, #0]
 800ec0c:	785b      	ldrb	r3, [r3, #1]
 800ec0e:	2b01      	cmp	r3, #1
 800ec10:	d14a      	bne.n	800eca8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ec12:	683b      	ldr	r3, [r7, #0]
 800ec14:	781b      	ldrb	r3, [r3, #0]
 800ec16:	015a      	lsls	r2, r3, #5
 800ec18:	693b      	ldr	r3, [r7, #16]
 800ec1a:	4413      	add	r3, r2
 800ec1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ec26:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ec2a:	f040 8086 	bne.w	800ed3a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800ec2e:	683b      	ldr	r3, [r7, #0]
 800ec30:	781b      	ldrb	r3, [r3, #0]
 800ec32:	015a      	lsls	r2, r3, #5
 800ec34:	693b      	ldr	r3, [r7, #16]
 800ec36:	4413      	add	r3, r2
 800ec38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	683a      	ldr	r2, [r7, #0]
 800ec40:	7812      	ldrb	r2, [r2, #0]
 800ec42:	0151      	lsls	r1, r2, #5
 800ec44:	693a      	ldr	r2, [r7, #16]
 800ec46:	440a      	add	r2, r1
 800ec48:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ec4c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ec50:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800ec52:	683b      	ldr	r3, [r7, #0]
 800ec54:	781b      	ldrb	r3, [r3, #0]
 800ec56:	015a      	lsls	r2, r3, #5
 800ec58:	693b      	ldr	r3, [r7, #16]
 800ec5a:	4413      	add	r3, r2
 800ec5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	683a      	ldr	r2, [r7, #0]
 800ec64:	7812      	ldrb	r2, [r2, #0]
 800ec66:	0151      	lsls	r1, r2, #5
 800ec68:	693a      	ldr	r2, [r7, #16]
 800ec6a:	440a      	add	r2, r1
 800ec6c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ec70:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ec74:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	3301      	adds	r3, #1
 800ec7a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	f242 7210 	movw	r2, #10000	@ 0x2710
 800ec82:	4293      	cmp	r3, r2
 800ec84:	d902      	bls.n	800ec8c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800ec86:	2301      	movs	r3, #1
 800ec88:	75fb      	strb	r3, [r7, #23]
          break;
 800ec8a:	e056      	b.n	800ed3a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800ec8c:	683b      	ldr	r3, [r7, #0]
 800ec8e:	781b      	ldrb	r3, [r3, #0]
 800ec90:	015a      	lsls	r2, r3, #5
 800ec92:	693b      	ldr	r3, [r7, #16]
 800ec94:	4413      	add	r3, r2
 800ec96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800eca0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800eca4:	d0e7      	beq.n	800ec76 <USB_EPStopXfer+0x82>
 800eca6:	e048      	b.n	800ed3a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800eca8:	683b      	ldr	r3, [r7, #0]
 800ecaa:	781b      	ldrb	r3, [r3, #0]
 800ecac:	015a      	lsls	r2, r3, #5
 800ecae:	693b      	ldr	r3, [r7, #16]
 800ecb0:	4413      	add	r3, r2
 800ecb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ecbc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ecc0:	d13b      	bne.n	800ed3a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800ecc2:	683b      	ldr	r3, [r7, #0]
 800ecc4:	781b      	ldrb	r3, [r3, #0]
 800ecc6:	015a      	lsls	r2, r3, #5
 800ecc8:	693b      	ldr	r3, [r7, #16]
 800ecca:	4413      	add	r3, r2
 800eccc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	683a      	ldr	r2, [r7, #0]
 800ecd4:	7812      	ldrb	r2, [r2, #0]
 800ecd6:	0151      	lsls	r1, r2, #5
 800ecd8:	693a      	ldr	r2, [r7, #16]
 800ecda:	440a      	add	r2, r1
 800ecdc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ece0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ece4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800ece6:	683b      	ldr	r3, [r7, #0]
 800ece8:	781b      	ldrb	r3, [r3, #0]
 800ecea:	015a      	lsls	r2, r3, #5
 800ecec:	693b      	ldr	r3, [r7, #16]
 800ecee:	4413      	add	r3, r2
 800ecf0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	683a      	ldr	r2, [r7, #0]
 800ecf8:	7812      	ldrb	r2, [r2, #0]
 800ecfa:	0151      	lsls	r1, r2, #5
 800ecfc:	693a      	ldr	r2, [r7, #16]
 800ecfe:	440a      	add	r2, r1
 800ed00:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ed04:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ed08:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	3301      	adds	r3, #1
 800ed0e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	f242 7210 	movw	r2, #10000	@ 0x2710
 800ed16:	4293      	cmp	r3, r2
 800ed18:	d902      	bls.n	800ed20 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800ed1a:	2301      	movs	r3, #1
 800ed1c:	75fb      	strb	r3, [r7, #23]
          break;
 800ed1e:	e00c      	b.n	800ed3a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800ed20:	683b      	ldr	r3, [r7, #0]
 800ed22:	781b      	ldrb	r3, [r3, #0]
 800ed24:	015a      	lsls	r2, r3, #5
 800ed26:	693b      	ldr	r3, [r7, #16]
 800ed28:	4413      	add	r3, r2
 800ed2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ed34:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ed38:	d0e7      	beq.n	800ed0a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800ed3a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ed3c:	4618      	mov	r0, r3
 800ed3e:	371c      	adds	r7, #28
 800ed40:	46bd      	mov	sp, r7
 800ed42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed46:	4770      	bx	lr

0800ed48 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800ed48:	b480      	push	{r7}
 800ed4a:	b089      	sub	sp, #36	@ 0x24
 800ed4c:	af00      	add	r7, sp, #0
 800ed4e:	60f8      	str	r0, [r7, #12]
 800ed50:	60b9      	str	r1, [r7, #8]
 800ed52:	4611      	mov	r1, r2
 800ed54:	461a      	mov	r2, r3
 800ed56:	460b      	mov	r3, r1
 800ed58:	71fb      	strb	r3, [r7, #7]
 800ed5a:	4613      	mov	r3, r2
 800ed5c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800ed62:	68bb      	ldr	r3, [r7, #8]
 800ed64:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800ed66:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d123      	bne.n	800edb6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800ed6e:	88bb      	ldrh	r3, [r7, #4]
 800ed70:	3303      	adds	r3, #3
 800ed72:	089b      	lsrs	r3, r3, #2
 800ed74:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800ed76:	2300      	movs	r3, #0
 800ed78:	61bb      	str	r3, [r7, #24]
 800ed7a:	e018      	b.n	800edae <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800ed7c:	79fb      	ldrb	r3, [r7, #7]
 800ed7e:	031a      	lsls	r2, r3, #12
 800ed80:	697b      	ldr	r3, [r7, #20]
 800ed82:	4413      	add	r3, r2
 800ed84:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ed88:	461a      	mov	r2, r3
 800ed8a:	69fb      	ldr	r3, [r7, #28]
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800ed90:	69fb      	ldr	r3, [r7, #28]
 800ed92:	3301      	adds	r3, #1
 800ed94:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ed96:	69fb      	ldr	r3, [r7, #28]
 800ed98:	3301      	adds	r3, #1
 800ed9a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ed9c:	69fb      	ldr	r3, [r7, #28]
 800ed9e:	3301      	adds	r3, #1
 800eda0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800eda2:	69fb      	ldr	r3, [r7, #28]
 800eda4:	3301      	adds	r3, #1
 800eda6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800eda8:	69bb      	ldr	r3, [r7, #24]
 800edaa:	3301      	adds	r3, #1
 800edac:	61bb      	str	r3, [r7, #24]
 800edae:	69ba      	ldr	r2, [r7, #24]
 800edb0:	693b      	ldr	r3, [r7, #16]
 800edb2:	429a      	cmp	r2, r3
 800edb4:	d3e2      	bcc.n	800ed7c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800edb6:	2300      	movs	r3, #0
}
 800edb8:	4618      	mov	r0, r3
 800edba:	3724      	adds	r7, #36	@ 0x24
 800edbc:	46bd      	mov	sp, r7
 800edbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edc2:	4770      	bx	lr

0800edc4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800edc4:	b480      	push	{r7}
 800edc6:	b08b      	sub	sp, #44	@ 0x2c
 800edc8:	af00      	add	r7, sp, #0
 800edca:	60f8      	str	r0, [r7, #12]
 800edcc:	60b9      	str	r1, [r7, #8]
 800edce:	4613      	mov	r3, r2
 800edd0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800edd6:	68bb      	ldr	r3, [r7, #8]
 800edd8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800edda:	88fb      	ldrh	r3, [r7, #6]
 800eddc:	089b      	lsrs	r3, r3, #2
 800edde:	b29b      	uxth	r3, r3
 800ede0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800ede2:	88fb      	ldrh	r3, [r7, #6]
 800ede4:	f003 0303 	and.w	r3, r3, #3
 800ede8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800edea:	2300      	movs	r3, #0
 800edec:	623b      	str	r3, [r7, #32]
 800edee:	e014      	b.n	800ee1a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800edf0:	69bb      	ldr	r3, [r7, #24]
 800edf2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800edf6:	681a      	ldr	r2, [r3, #0]
 800edf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800edfa:	601a      	str	r2, [r3, #0]
    pDest++;
 800edfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800edfe:	3301      	adds	r3, #1
 800ee00:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800ee02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee04:	3301      	adds	r3, #1
 800ee06:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800ee08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee0a:	3301      	adds	r3, #1
 800ee0c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800ee0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee10:	3301      	adds	r3, #1
 800ee12:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800ee14:	6a3b      	ldr	r3, [r7, #32]
 800ee16:	3301      	adds	r3, #1
 800ee18:	623b      	str	r3, [r7, #32]
 800ee1a:	6a3a      	ldr	r2, [r7, #32]
 800ee1c:	697b      	ldr	r3, [r7, #20]
 800ee1e:	429a      	cmp	r2, r3
 800ee20:	d3e6      	bcc.n	800edf0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800ee22:	8bfb      	ldrh	r3, [r7, #30]
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d01e      	beq.n	800ee66 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800ee28:	2300      	movs	r3, #0
 800ee2a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800ee2c:	69bb      	ldr	r3, [r7, #24]
 800ee2e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ee32:	461a      	mov	r2, r3
 800ee34:	f107 0310 	add.w	r3, r7, #16
 800ee38:	6812      	ldr	r2, [r2, #0]
 800ee3a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800ee3c:	693a      	ldr	r2, [r7, #16]
 800ee3e:	6a3b      	ldr	r3, [r7, #32]
 800ee40:	b2db      	uxtb	r3, r3
 800ee42:	00db      	lsls	r3, r3, #3
 800ee44:	fa22 f303 	lsr.w	r3, r2, r3
 800ee48:	b2da      	uxtb	r2, r3
 800ee4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee4c:	701a      	strb	r2, [r3, #0]
      i++;
 800ee4e:	6a3b      	ldr	r3, [r7, #32]
 800ee50:	3301      	adds	r3, #1
 800ee52:	623b      	str	r3, [r7, #32]
      pDest++;
 800ee54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee56:	3301      	adds	r3, #1
 800ee58:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800ee5a:	8bfb      	ldrh	r3, [r7, #30]
 800ee5c:	3b01      	subs	r3, #1
 800ee5e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800ee60:	8bfb      	ldrh	r3, [r7, #30]
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d1ea      	bne.n	800ee3c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800ee66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ee68:	4618      	mov	r0, r3
 800ee6a:	372c      	adds	r7, #44	@ 0x2c
 800ee6c:	46bd      	mov	sp, r7
 800ee6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee72:	4770      	bx	lr

0800ee74 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800ee74:	b480      	push	{r7}
 800ee76:	b085      	sub	sp, #20
 800ee78:	af00      	add	r7, sp, #0
 800ee7a:	6078      	str	r0, [r7, #4]
 800ee7c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ee82:	683b      	ldr	r3, [r7, #0]
 800ee84:	781b      	ldrb	r3, [r3, #0]
 800ee86:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ee88:	683b      	ldr	r3, [r7, #0]
 800ee8a:	785b      	ldrb	r3, [r3, #1]
 800ee8c:	2b01      	cmp	r3, #1
 800ee8e:	d12c      	bne.n	800eeea <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ee90:	68bb      	ldr	r3, [r7, #8]
 800ee92:	015a      	lsls	r2, r3, #5
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	4413      	add	r3, r2
 800ee98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	db12      	blt.n	800eec8 <USB_EPSetStall+0x54>
 800eea2:	68bb      	ldr	r3, [r7, #8]
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d00f      	beq.n	800eec8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800eea8:	68bb      	ldr	r3, [r7, #8]
 800eeaa:	015a      	lsls	r2, r3, #5
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	4413      	add	r3, r2
 800eeb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	68ba      	ldr	r2, [r7, #8]
 800eeb8:	0151      	lsls	r1, r2, #5
 800eeba:	68fa      	ldr	r2, [r7, #12]
 800eebc:	440a      	add	r2, r1
 800eebe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800eec2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800eec6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800eec8:	68bb      	ldr	r3, [r7, #8]
 800eeca:	015a      	lsls	r2, r3, #5
 800eecc:	68fb      	ldr	r3, [r7, #12]
 800eece:	4413      	add	r3, r2
 800eed0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	68ba      	ldr	r2, [r7, #8]
 800eed8:	0151      	lsls	r1, r2, #5
 800eeda:	68fa      	ldr	r2, [r7, #12]
 800eedc:	440a      	add	r2, r1
 800eede:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800eee2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800eee6:	6013      	str	r3, [r2, #0]
 800eee8:	e02b      	b.n	800ef42 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800eeea:	68bb      	ldr	r3, [r7, #8]
 800eeec:	015a      	lsls	r2, r3, #5
 800eeee:	68fb      	ldr	r3, [r7, #12]
 800eef0:	4413      	add	r3, r2
 800eef2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	db12      	blt.n	800ef22 <USB_EPSetStall+0xae>
 800eefc:	68bb      	ldr	r3, [r7, #8]
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d00f      	beq.n	800ef22 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800ef02:	68bb      	ldr	r3, [r7, #8]
 800ef04:	015a      	lsls	r2, r3, #5
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	4413      	add	r3, r2
 800ef0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	68ba      	ldr	r2, [r7, #8]
 800ef12:	0151      	lsls	r1, r2, #5
 800ef14:	68fa      	ldr	r2, [r7, #12]
 800ef16:	440a      	add	r2, r1
 800ef18:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ef1c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800ef20:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800ef22:	68bb      	ldr	r3, [r7, #8]
 800ef24:	015a      	lsls	r2, r3, #5
 800ef26:	68fb      	ldr	r3, [r7, #12]
 800ef28:	4413      	add	r3, r2
 800ef2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	68ba      	ldr	r2, [r7, #8]
 800ef32:	0151      	lsls	r1, r2, #5
 800ef34:	68fa      	ldr	r2, [r7, #12]
 800ef36:	440a      	add	r2, r1
 800ef38:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ef3c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800ef40:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ef42:	2300      	movs	r3, #0
}
 800ef44:	4618      	mov	r0, r3
 800ef46:	3714      	adds	r7, #20
 800ef48:	46bd      	mov	sp, r7
 800ef4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef4e:	4770      	bx	lr

0800ef50 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800ef50:	b480      	push	{r7}
 800ef52:	b085      	sub	sp, #20
 800ef54:	af00      	add	r7, sp, #0
 800ef56:	6078      	str	r0, [r7, #4]
 800ef58:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ef5e:	683b      	ldr	r3, [r7, #0]
 800ef60:	781b      	ldrb	r3, [r3, #0]
 800ef62:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ef64:	683b      	ldr	r3, [r7, #0]
 800ef66:	785b      	ldrb	r3, [r3, #1]
 800ef68:	2b01      	cmp	r3, #1
 800ef6a:	d128      	bne.n	800efbe <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800ef6c:	68bb      	ldr	r3, [r7, #8]
 800ef6e:	015a      	lsls	r2, r3, #5
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	4413      	add	r3, r2
 800ef74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	68ba      	ldr	r2, [r7, #8]
 800ef7c:	0151      	lsls	r1, r2, #5
 800ef7e:	68fa      	ldr	r2, [r7, #12]
 800ef80:	440a      	add	r2, r1
 800ef82:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ef86:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ef8a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ef8c:	683b      	ldr	r3, [r7, #0]
 800ef8e:	791b      	ldrb	r3, [r3, #4]
 800ef90:	2b03      	cmp	r3, #3
 800ef92:	d003      	beq.n	800ef9c <USB_EPClearStall+0x4c>
 800ef94:	683b      	ldr	r3, [r7, #0]
 800ef96:	791b      	ldrb	r3, [r3, #4]
 800ef98:	2b02      	cmp	r3, #2
 800ef9a:	d138      	bne.n	800f00e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ef9c:	68bb      	ldr	r3, [r7, #8]
 800ef9e:	015a      	lsls	r2, r3, #5
 800efa0:	68fb      	ldr	r3, [r7, #12]
 800efa2:	4413      	add	r3, r2
 800efa4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	68ba      	ldr	r2, [r7, #8]
 800efac:	0151      	lsls	r1, r2, #5
 800efae:	68fa      	ldr	r2, [r7, #12]
 800efb0:	440a      	add	r2, r1
 800efb2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800efb6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800efba:	6013      	str	r3, [r2, #0]
 800efbc:	e027      	b.n	800f00e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800efbe:	68bb      	ldr	r3, [r7, #8]
 800efc0:	015a      	lsls	r2, r3, #5
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	4413      	add	r3, r2
 800efc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800efca:	681b      	ldr	r3, [r3, #0]
 800efcc:	68ba      	ldr	r2, [r7, #8]
 800efce:	0151      	lsls	r1, r2, #5
 800efd0:	68fa      	ldr	r2, [r7, #12]
 800efd2:	440a      	add	r2, r1
 800efd4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800efd8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800efdc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800efde:	683b      	ldr	r3, [r7, #0]
 800efe0:	791b      	ldrb	r3, [r3, #4]
 800efe2:	2b03      	cmp	r3, #3
 800efe4:	d003      	beq.n	800efee <USB_EPClearStall+0x9e>
 800efe6:	683b      	ldr	r3, [r7, #0]
 800efe8:	791b      	ldrb	r3, [r3, #4]
 800efea:	2b02      	cmp	r3, #2
 800efec:	d10f      	bne.n	800f00e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800efee:	68bb      	ldr	r3, [r7, #8]
 800eff0:	015a      	lsls	r2, r3, #5
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	4413      	add	r3, r2
 800eff6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	68ba      	ldr	r2, [r7, #8]
 800effe:	0151      	lsls	r1, r2, #5
 800f000:	68fa      	ldr	r2, [r7, #12]
 800f002:	440a      	add	r2, r1
 800f004:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f008:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f00c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800f00e:	2300      	movs	r3, #0
}
 800f010:	4618      	mov	r0, r3
 800f012:	3714      	adds	r7, #20
 800f014:	46bd      	mov	sp, r7
 800f016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f01a:	4770      	bx	lr

0800f01c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800f01c:	b480      	push	{r7}
 800f01e:	b085      	sub	sp, #20
 800f020:	af00      	add	r7, sp, #0
 800f022:	6078      	str	r0, [r7, #4]
 800f024:	460b      	mov	r3, r1
 800f026:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	68fa      	ldr	r2, [r7, #12]
 800f036:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f03a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800f03e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800f040:	68fb      	ldr	r3, [r7, #12]
 800f042:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f046:	681a      	ldr	r2, [r3, #0]
 800f048:	78fb      	ldrb	r3, [r7, #3]
 800f04a:	011b      	lsls	r3, r3, #4
 800f04c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800f050:	68f9      	ldr	r1, [r7, #12]
 800f052:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800f056:	4313      	orrs	r3, r2
 800f058:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800f05a:	2300      	movs	r3, #0
}
 800f05c:	4618      	mov	r0, r3
 800f05e:	3714      	adds	r7, #20
 800f060:	46bd      	mov	sp, r7
 800f062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f066:	4770      	bx	lr

0800f068 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800f068:	b480      	push	{r7}
 800f06a:	b085      	sub	sp, #20
 800f06c:	af00      	add	r7, sp, #0
 800f06e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	68fa      	ldr	r2, [r7, #12]
 800f07e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800f082:	f023 0303 	bic.w	r3, r3, #3
 800f086:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f08e:	685b      	ldr	r3, [r3, #4]
 800f090:	68fa      	ldr	r2, [r7, #12]
 800f092:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f096:	f023 0302 	bic.w	r3, r3, #2
 800f09a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f09c:	2300      	movs	r3, #0
}
 800f09e:	4618      	mov	r0, r3
 800f0a0:	3714      	adds	r7, #20
 800f0a2:	46bd      	mov	sp, r7
 800f0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0a8:	4770      	bx	lr

0800f0aa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800f0aa:	b480      	push	{r7}
 800f0ac:	b085      	sub	sp, #20
 800f0ae:	af00      	add	r7, sp, #0
 800f0b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800f0bc:	681b      	ldr	r3, [r3, #0]
 800f0be:	68fa      	ldr	r2, [r7, #12]
 800f0c0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800f0c4:	f023 0303 	bic.w	r3, r3, #3
 800f0c8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f0d0:	685b      	ldr	r3, [r3, #4]
 800f0d2:	68fa      	ldr	r2, [r7, #12]
 800f0d4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f0d8:	f043 0302 	orr.w	r3, r3, #2
 800f0dc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f0de:	2300      	movs	r3, #0
}
 800f0e0:	4618      	mov	r0, r3
 800f0e2:	3714      	adds	r7, #20
 800f0e4:	46bd      	mov	sp, r7
 800f0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ea:	4770      	bx	lr

0800f0ec <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800f0ec:	b480      	push	{r7}
 800f0ee:	b085      	sub	sp, #20
 800f0f0:	af00      	add	r7, sp, #0
 800f0f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	695b      	ldr	r3, [r3, #20]
 800f0f8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	699b      	ldr	r3, [r3, #24]
 800f0fe:	68fa      	ldr	r2, [r7, #12]
 800f100:	4013      	ands	r3, r2
 800f102:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800f104:	68fb      	ldr	r3, [r7, #12]
}
 800f106:	4618      	mov	r0, r3
 800f108:	3714      	adds	r7, #20
 800f10a:	46bd      	mov	sp, r7
 800f10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f110:	4770      	bx	lr

0800f112 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800f112:	b480      	push	{r7}
 800f114:	b085      	sub	sp, #20
 800f116:	af00      	add	r7, sp, #0
 800f118:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f124:	699b      	ldr	r3, [r3, #24]
 800f126:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f12e:	69db      	ldr	r3, [r3, #28]
 800f130:	68ba      	ldr	r2, [r7, #8]
 800f132:	4013      	ands	r3, r2
 800f134:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800f136:	68bb      	ldr	r3, [r7, #8]
 800f138:	0c1b      	lsrs	r3, r3, #16
}
 800f13a:	4618      	mov	r0, r3
 800f13c:	3714      	adds	r7, #20
 800f13e:	46bd      	mov	sp, r7
 800f140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f144:	4770      	bx	lr

0800f146 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800f146:	b480      	push	{r7}
 800f148:	b085      	sub	sp, #20
 800f14a:	af00      	add	r7, sp, #0
 800f14c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f158:	699b      	ldr	r3, [r3, #24]
 800f15a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f162:	69db      	ldr	r3, [r3, #28]
 800f164:	68ba      	ldr	r2, [r7, #8]
 800f166:	4013      	ands	r3, r2
 800f168:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800f16a:	68bb      	ldr	r3, [r7, #8]
 800f16c:	b29b      	uxth	r3, r3
}
 800f16e:	4618      	mov	r0, r3
 800f170:	3714      	adds	r7, #20
 800f172:	46bd      	mov	sp, r7
 800f174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f178:	4770      	bx	lr

0800f17a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800f17a:	b480      	push	{r7}
 800f17c:	b085      	sub	sp, #20
 800f17e:	af00      	add	r7, sp, #0
 800f180:	6078      	str	r0, [r7, #4]
 800f182:	460b      	mov	r3, r1
 800f184:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800f18a:	78fb      	ldrb	r3, [r7, #3]
 800f18c:	015a      	lsls	r2, r3, #5
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	4413      	add	r3, r2
 800f192:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f196:	689b      	ldr	r3, [r3, #8]
 800f198:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f1a0:	695b      	ldr	r3, [r3, #20]
 800f1a2:	68ba      	ldr	r2, [r7, #8]
 800f1a4:	4013      	ands	r3, r2
 800f1a6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800f1a8:	68bb      	ldr	r3, [r7, #8]
}
 800f1aa:	4618      	mov	r0, r3
 800f1ac:	3714      	adds	r7, #20
 800f1ae:	46bd      	mov	sp, r7
 800f1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1b4:	4770      	bx	lr

0800f1b6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800f1b6:	b480      	push	{r7}
 800f1b8:	b087      	sub	sp, #28
 800f1ba:	af00      	add	r7, sp, #0
 800f1bc:	6078      	str	r0, [r7, #4]
 800f1be:	460b      	mov	r3, r1
 800f1c0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800f1c6:	697b      	ldr	r3, [r7, #20]
 800f1c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f1cc:	691b      	ldr	r3, [r3, #16]
 800f1ce:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800f1d0:	697b      	ldr	r3, [r7, #20]
 800f1d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f1d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f1d8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800f1da:	78fb      	ldrb	r3, [r7, #3]
 800f1dc:	f003 030f 	and.w	r3, r3, #15
 800f1e0:	68fa      	ldr	r2, [r7, #12]
 800f1e2:	fa22 f303 	lsr.w	r3, r2, r3
 800f1e6:	01db      	lsls	r3, r3, #7
 800f1e8:	b2db      	uxtb	r3, r3
 800f1ea:	693a      	ldr	r2, [r7, #16]
 800f1ec:	4313      	orrs	r3, r2
 800f1ee:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800f1f0:	78fb      	ldrb	r3, [r7, #3]
 800f1f2:	015a      	lsls	r2, r3, #5
 800f1f4:	697b      	ldr	r3, [r7, #20]
 800f1f6:	4413      	add	r3, r2
 800f1f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f1fc:	689b      	ldr	r3, [r3, #8]
 800f1fe:	693a      	ldr	r2, [r7, #16]
 800f200:	4013      	ands	r3, r2
 800f202:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800f204:	68bb      	ldr	r3, [r7, #8]
}
 800f206:	4618      	mov	r0, r3
 800f208:	371c      	adds	r7, #28
 800f20a:	46bd      	mov	sp, r7
 800f20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f210:	4770      	bx	lr

0800f212 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800f212:	b480      	push	{r7}
 800f214:	b083      	sub	sp, #12
 800f216:	af00      	add	r7, sp, #0
 800f218:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	695b      	ldr	r3, [r3, #20]
 800f21e:	f003 0301 	and.w	r3, r3, #1
}
 800f222:	4618      	mov	r0, r3
 800f224:	370c      	adds	r7, #12
 800f226:	46bd      	mov	sp, r7
 800f228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f22c:	4770      	bx	lr

0800f22e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800f22e:	b480      	push	{r7}
 800f230:	b085      	sub	sp, #20
 800f232:	af00      	add	r7, sp, #0
 800f234:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f240:	681b      	ldr	r3, [r3, #0]
 800f242:	68fa      	ldr	r2, [r7, #12]
 800f244:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f248:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800f24c:	f023 0307 	bic.w	r3, r3, #7
 800f250:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800f252:	68fb      	ldr	r3, [r7, #12]
 800f254:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f258:	685b      	ldr	r3, [r3, #4]
 800f25a:	68fa      	ldr	r2, [r7, #12]
 800f25c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f260:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f264:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f266:	2300      	movs	r3, #0
}
 800f268:	4618      	mov	r0, r3
 800f26a:	3714      	adds	r7, #20
 800f26c:	46bd      	mov	sp, r7
 800f26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f272:	4770      	bx	lr

0800f274 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800f274:	b480      	push	{r7}
 800f276:	b087      	sub	sp, #28
 800f278:	af00      	add	r7, sp, #0
 800f27a:	60f8      	str	r0, [r7, #12]
 800f27c:	460b      	mov	r3, r1
 800f27e:	607a      	str	r2, [r7, #4]
 800f280:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f282:	68fb      	ldr	r3, [r7, #12]
 800f284:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800f286:	68fb      	ldr	r3, [r7, #12]
 800f288:	333c      	adds	r3, #60	@ 0x3c
 800f28a:	3304      	adds	r3, #4
 800f28c:	681b      	ldr	r3, [r3, #0]
 800f28e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800f290:	693b      	ldr	r3, [r7, #16]
 800f292:	4a26      	ldr	r2, [pc, #152]	@ (800f32c <USB_EP0_OutStart+0xb8>)
 800f294:	4293      	cmp	r3, r2
 800f296:	d90a      	bls.n	800f2ae <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f298:	697b      	ldr	r3, [r7, #20]
 800f29a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f2a4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f2a8:	d101      	bne.n	800f2ae <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800f2aa:	2300      	movs	r3, #0
 800f2ac:	e037      	b.n	800f31e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800f2ae:	697b      	ldr	r3, [r7, #20]
 800f2b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f2b4:	461a      	mov	r2, r3
 800f2b6:	2300      	movs	r3, #0
 800f2b8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f2ba:	697b      	ldr	r3, [r7, #20]
 800f2bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f2c0:	691b      	ldr	r3, [r3, #16]
 800f2c2:	697a      	ldr	r2, [r7, #20]
 800f2c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f2c8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800f2cc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800f2ce:	697b      	ldr	r3, [r7, #20]
 800f2d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f2d4:	691b      	ldr	r3, [r3, #16]
 800f2d6:	697a      	ldr	r2, [r7, #20]
 800f2d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f2dc:	f043 0318 	orr.w	r3, r3, #24
 800f2e0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800f2e2:	697b      	ldr	r3, [r7, #20]
 800f2e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f2e8:	691b      	ldr	r3, [r3, #16]
 800f2ea:	697a      	ldr	r2, [r7, #20]
 800f2ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f2f0:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800f2f4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800f2f6:	7afb      	ldrb	r3, [r7, #11]
 800f2f8:	2b01      	cmp	r3, #1
 800f2fa:	d10f      	bne.n	800f31c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800f2fc:	697b      	ldr	r3, [r7, #20]
 800f2fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f302:	461a      	mov	r2, r3
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800f308:	697b      	ldr	r3, [r7, #20]
 800f30a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f30e:	681b      	ldr	r3, [r3, #0]
 800f310:	697a      	ldr	r2, [r7, #20]
 800f312:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f316:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800f31a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f31c:	2300      	movs	r3, #0
}
 800f31e:	4618      	mov	r0, r3
 800f320:	371c      	adds	r7, #28
 800f322:	46bd      	mov	sp, r7
 800f324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f328:	4770      	bx	lr
 800f32a:	bf00      	nop
 800f32c:	4f54300a 	.word	0x4f54300a

0800f330 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800f330:	b480      	push	{r7}
 800f332:	b085      	sub	sp, #20
 800f334:	af00      	add	r7, sp, #0
 800f336:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f338:	2300      	movs	r3, #0
 800f33a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	3301      	adds	r3, #1
 800f340:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800f342:	68fb      	ldr	r3, [r7, #12]
 800f344:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800f348:	d901      	bls.n	800f34e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800f34a:	2303      	movs	r3, #3
 800f34c:	e01b      	b.n	800f386 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	691b      	ldr	r3, [r3, #16]
 800f352:	2b00      	cmp	r3, #0
 800f354:	daf2      	bge.n	800f33c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800f356:	2300      	movs	r3, #0
 800f358:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	691b      	ldr	r3, [r3, #16]
 800f35e:	f043 0201 	orr.w	r2, r3, #1
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800f366:	68fb      	ldr	r3, [r7, #12]
 800f368:	3301      	adds	r3, #1
 800f36a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800f36c:	68fb      	ldr	r3, [r7, #12]
 800f36e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800f372:	d901      	bls.n	800f378 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800f374:	2303      	movs	r3, #3
 800f376:	e006      	b.n	800f386 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	691b      	ldr	r3, [r3, #16]
 800f37c:	f003 0301 	and.w	r3, r3, #1
 800f380:	2b01      	cmp	r3, #1
 800f382:	d0f0      	beq.n	800f366 <USB_CoreReset+0x36>

  return HAL_OK;
 800f384:	2300      	movs	r3, #0
}
 800f386:	4618      	mov	r0, r3
 800f388:	3714      	adds	r7, #20
 800f38a:	46bd      	mov	sp, r7
 800f38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f390:	4770      	bx	lr
	...

0800f394 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f394:	b580      	push	{r7, lr}
 800f396:	b084      	sub	sp, #16
 800f398:	af00      	add	r7, sp, #0
 800f39a:	6078      	str	r0, [r7, #4]
 800f39c:	460b      	mov	r3, r1
 800f39e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800f3a0:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800f3a4:	f002 fd00 	bl	8011da8 <USBD_static_malloc>
 800f3a8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800f3aa:	68fb      	ldr	r3, [r7, #12]
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d109      	bne.n	800f3c4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	32b0      	adds	r2, #176	@ 0xb0
 800f3ba:	2100      	movs	r1, #0
 800f3bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800f3c0:	2302      	movs	r3, #2
 800f3c2:	e0d4      	b.n	800f56e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800f3c4:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800f3c8:	2100      	movs	r1, #0
 800f3ca:	68f8      	ldr	r0, [r7, #12]
 800f3cc:	f002 fdae 	bl	8011f2c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	32b0      	adds	r2, #176	@ 0xb0
 800f3da:	68f9      	ldr	r1, [r7, #12]
 800f3dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	32b0      	adds	r2, #176	@ 0xb0
 800f3ea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	7c1b      	ldrb	r3, [r3, #16]
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	d138      	bne.n	800f46e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800f3fc:	4b5e      	ldr	r3, [pc, #376]	@ (800f578 <USBD_CDC_Init+0x1e4>)
 800f3fe:	7819      	ldrb	r1, [r3, #0]
 800f400:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f404:	2202      	movs	r2, #2
 800f406:	6878      	ldr	r0, [r7, #4]
 800f408:	f002 fbab 	bl	8011b62 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800f40c:	4b5a      	ldr	r3, [pc, #360]	@ (800f578 <USBD_CDC_Init+0x1e4>)
 800f40e:	781b      	ldrb	r3, [r3, #0]
 800f410:	f003 020f 	and.w	r2, r3, #15
 800f414:	6879      	ldr	r1, [r7, #4]
 800f416:	4613      	mov	r3, r2
 800f418:	009b      	lsls	r3, r3, #2
 800f41a:	4413      	add	r3, r2
 800f41c:	009b      	lsls	r3, r3, #2
 800f41e:	440b      	add	r3, r1
 800f420:	3324      	adds	r3, #36	@ 0x24
 800f422:	2201      	movs	r2, #1
 800f424:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800f426:	4b55      	ldr	r3, [pc, #340]	@ (800f57c <USBD_CDC_Init+0x1e8>)
 800f428:	7819      	ldrb	r1, [r3, #0]
 800f42a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f42e:	2202      	movs	r2, #2
 800f430:	6878      	ldr	r0, [r7, #4]
 800f432:	f002 fb96 	bl	8011b62 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800f436:	4b51      	ldr	r3, [pc, #324]	@ (800f57c <USBD_CDC_Init+0x1e8>)
 800f438:	781b      	ldrb	r3, [r3, #0]
 800f43a:	f003 020f 	and.w	r2, r3, #15
 800f43e:	6879      	ldr	r1, [r7, #4]
 800f440:	4613      	mov	r3, r2
 800f442:	009b      	lsls	r3, r3, #2
 800f444:	4413      	add	r3, r2
 800f446:	009b      	lsls	r3, r3, #2
 800f448:	440b      	add	r3, r1
 800f44a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f44e:	2201      	movs	r2, #1
 800f450:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800f452:	4b4b      	ldr	r3, [pc, #300]	@ (800f580 <USBD_CDC_Init+0x1ec>)
 800f454:	781b      	ldrb	r3, [r3, #0]
 800f456:	f003 020f 	and.w	r2, r3, #15
 800f45a:	6879      	ldr	r1, [r7, #4]
 800f45c:	4613      	mov	r3, r2
 800f45e:	009b      	lsls	r3, r3, #2
 800f460:	4413      	add	r3, r2
 800f462:	009b      	lsls	r3, r3, #2
 800f464:	440b      	add	r3, r1
 800f466:	3326      	adds	r3, #38	@ 0x26
 800f468:	2210      	movs	r2, #16
 800f46a:	801a      	strh	r2, [r3, #0]
 800f46c:	e035      	b.n	800f4da <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800f46e:	4b42      	ldr	r3, [pc, #264]	@ (800f578 <USBD_CDC_Init+0x1e4>)
 800f470:	7819      	ldrb	r1, [r3, #0]
 800f472:	2340      	movs	r3, #64	@ 0x40
 800f474:	2202      	movs	r2, #2
 800f476:	6878      	ldr	r0, [r7, #4]
 800f478:	f002 fb73 	bl	8011b62 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800f47c:	4b3e      	ldr	r3, [pc, #248]	@ (800f578 <USBD_CDC_Init+0x1e4>)
 800f47e:	781b      	ldrb	r3, [r3, #0]
 800f480:	f003 020f 	and.w	r2, r3, #15
 800f484:	6879      	ldr	r1, [r7, #4]
 800f486:	4613      	mov	r3, r2
 800f488:	009b      	lsls	r3, r3, #2
 800f48a:	4413      	add	r3, r2
 800f48c:	009b      	lsls	r3, r3, #2
 800f48e:	440b      	add	r3, r1
 800f490:	3324      	adds	r3, #36	@ 0x24
 800f492:	2201      	movs	r2, #1
 800f494:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800f496:	4b39      	ldr	r3, [pc, #228]	@ (800f57c <USBD_CDC_Init+0x1e8>)
 800f498:	7819      	ldrb	r1, [r3, #0]
 800f49a:	2340      	movs	r3, #64	@ 0x40
 800f49c:	2202      	movs	r2, #2
 800f49e:	6878      	ldr	r0, [r7, #4]
 800f4a0:	f002 fb5f 	bl	8011b62 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800f4a4:	4b35      	ldr	r3, [pc, #212]	@ (800f57c <USBD_CDC_Init+0x1e8>)
 800f4a6:	781b      	ldrb	r3, [r3, #0]
 800f4a8:	f003 020f 	and.w	r2, r3, #15
 800f4ac:	6879      	ldr	r1, [r7, #4]
 800f4ae:	4613      	mov	r3, r2
 800f4b0:	009b      	lsls	r3, r3, #2
 800f4b2:	4413      	add	r3, r2
 800f4b4:	009b      	lsls	r3, r3, #2
 800f4b6:	440b      	add	r3, r1
 800f4b8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f4bc:	2201      	movs	r2, #1
 800f4be:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800f4c0:	4b2f      	ldr	r3, [pc, #188]	@ (800f580 <USBD_CDC_Init+0x1ec>)
 800f4c2:	781b      	ldrb	r3, [r3, #0]
 800f4c4:	f003 020f 	and.w	r2, r3, #15
 800f4c8:	6879      	ldr	r1, [r7, #4]
 800f4ca:	4613      	mov	r3, r2
 800f4cc:	009b      	lsls	r3, r3, #2
 800f4ce:	4413      	add	r3, r2
 800f4d0:	009b      	lsls	r3, r3, #2
 800f4d2:	440b      	add	r3, r1
 800f4d4:	3326      	adds	r3, #38	@ 0x26
 800f4d6:	2210      	movs	r2, #16
 800f4d8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800f4da:	4b29      	ldr	r3, [pc, #164]	@ (800f580 <USBD_CDC_Init+0x1ec>)
 800f4dc:	7819      	ldrb	r1, [r3, #0]
 800f4de:	2308      	movs	r3, #8
 800f4e0:	2203      	movs	r2, #3
 800f4e2:	6878      	ldr	r0, [r7, #4]
 800f4e4:	f002 fb3d 	bl	8011b62 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800f4e8:	4b25      	ldr	r3, [pc, #148]	@ (800f580 <USBD_CDC_Init+0x1ec>)
 800f4ea:	781b      	ldrb	r3, [r3, #0]
 800f4ec:	f003 020f 	and.w	r2, r3, #15
 800f4f0:	6879      	ldr	r1, [r7, #4]
 800f4f2:	4613      	mov	r3, r2
 800f4f4:	009b      	lsls	r3, r3, #2
 800f4f6:	4413      	add	r3, r2
 800f4f8:	009b      	lsls	r3, r3, #2
 800f4fa:	440b      	add	r3, r1
 800f4fc:	3324      	adds	r3, #36	@ 0x24
 800f4fe:	2201      	movs	r2, #1
 800f500:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800f502:	68fb      	ldr	r3, [r7, #12]
 800f504:	2200      	movs	r2, #0
 800f506:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f510:	687a      	ldr	r2, [r7, #4]
 800f512:	33b0      	adds	r3, #176	@ 0xb0
 800f514:	009b      	lsls	r3, r3, #2
 800f516:	4413      	add	r3, r2
 800f518:	685b      	ldr	r3, [r3, #4]
 800f51a:	681b      	ldr	r3, [r3, #0]
 800f51c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800f51e:	68fb      	ldr	r3, [r7, #12]
 800f520:	2200      	movs	r2, #0
 800f522:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800f526:	68fb      	ldr	r3, [r7, #12]
 800f528:	2200      	movs	r2, #0
 800f52a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800f52e:	68fb      	ldr	r3, [r7, #12]
 800f530:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800f534:	2b00      	cmp	r3, #0
 800f536:	d101      	bne.n	800f53c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800f538:	2302      	movs	r3, #2
 800f53a:	e018      	b.n	800f56e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	7c1b      	ldrb	r3, [r3, #16]
 800f540:	2b00      	cmp	r3, #0
 800f542:	d10a      	bne.n	800f55a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800f544:	4b0d      	ldr	r3, [pc, #52]	@ (800f57c <USBD_CDC_Init+0x1e8>)
 800f546:	7819      	ldrb	r1, [r3, #0]
 800f548:	68fb      	ldr	r3, [r7, #12]
 800f54a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800f54e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f552:	6878      	ldr	r0, [r7, #4]
 800f554:	f002 fbf4 	bl	8011d40 <USBD_LL_PrepareReceive>
 800f558:	e008      	b.n	800f56c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800f55a:	4b08      	ldr	r3, [pc, #32]	@ (800f57c <USBD_CDC_Init+0x1e8>)
 800f55c:	7819      	ldrb	r1, [r3, #0]
 800f55e:	68fb      	ldr	r3, [r7, #12]
 800f560:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800f564:	2340      	movs	r3, #64	@ 0x40
 800f566:	6878      	ldr	r0, [r7, #4]
 800f568:	f002 fbea 	bl	8011d40 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800f56c:	2300      	movs	r3, #0
}
 800f56e:	4618      	mov	r0, r3
 800f570:	3710      	adds	r7, #16
 800f572:	46bd      	mov	sp, r7
 800f574:	bd80      	pop	{r7, pc}
 800f576:	bf00      	nop
 800f578:	200000a7 	.word	0x200000a7
 800f57c:	200000a8 	.word	0x200000a8
 800f580:	200000a9 	.word	0x200000a9

0800f584 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f584:	b580      	push	{r7, lr}
 800f586:	b082      	sub	sp, #8
 800f588:	af00      	add	r7, sp, #0
 800f58a:	6078      	str	r0, [r7, #4]
 800f58c:	460b      	mov	r3, r1
 800f58e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800f590:	4b3a      	ldr	r3, [pc, #232]	@ (800f67c <USBD_CDC_DeInit+0xf8>)
 800f592:	781b      	ldrb	r3, [r3, #0]
 800f594:	4619      	mov	r1, r3
 800f596:	6878      	ldr	r0, [r7, #4]
 800f598:	f002 fb09 	bl	8011bae <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800f59c:	4b37      	ldr	r3, [pc, #220]	@ (800f67c <USBD_CDC_DeInit+0xf8>)
 800f59e:	781b      	ldrb	r3, [r3, #0]
 800f5a0:	f003 020f 	and.w	r2, r3, #15
 800f5a4:	6879      	ldr	r1, [r7, #4]
 800f5a6:	4613      	mov	r3, r2
 800f5a8:	009b      	lsls	r3, r3, #2
 800f5aa:	4413      	add	r3, r2
 800f5ac:	009b      	lsls	r3, r3, #2
 800f5ae:	440b      	add	r3, r1
 800f5b0:	3324      	adds	r3, #36	@ 0x24
 800f5b2:	2200      	movs	r2, #0
 800f5b4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800f5b6:	4b32      	ldr	r3, [pc, #200]	@ (800f680 <USBD_CDC_DeInit+0xfc>)
 800f5b8:	781b      	ldrb	r3, [r3, #0]
 800f5ba:	4619      	mov	r1, r3
 800f5bc:	6878      	ldr	r0, [r7, #4]
 800f5be:	f002 faf6 	bl	8011bae <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800f5c2:	4b2f      	ldr	r3, [pc, #188]	@ (800f680 <USBD_CDC_DeInit+0xfc>)
 800f5c4:	781b      	ldrb	r3, [r3, #0]
 800f5c6:	f003 020f 	and.w	r2, r3, #15
 800f5ca:	6879      	ldr	r1, [r7, #4]
 800f5cc:	4613      	mov	r3, r2
 800f5ce:	009b      	lsls	r3, r3, #2
 800f5d0:	4413      	add	r3, r2
 800f5d2:	009b      	lsls	r3, r3, #2
 800f5d4:	440b      	add	r3, r1
 800f5d6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f5da:	2200      	movs	r2, #0
 800f5dc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800f5de:	4b29      	ldr	r3, [pc, #164]	@ (800f684 <USBD_CDC_DeInit+0x100>)
 800f5e0:	781b      	ldrb	r3, [r3, #0]
 800f5e2:	4619      	mov	r1, r3
 800f5e4:	6878      	ldr	r0, [r7, #4]
 800f5e6:	f002 fae2 	bl	8011bae <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800f5ea:	4b26      	ldr	r3, [pc, #152]	@ (800f684 <USBD_CDC_DeInit+0x100>)
 800f5ec:	781b      	ldrb	r3, [r3, #0]
 800f5ee:	f003 020f 	and.w	r2, r3, #15
 800f5f2:	6879      	ldr	r1, [r7, #4]
 800f5f4:	4613      	mov	r3, r2
 800f5f6:	009b      	lsls	r3, r3, #2
 800f5f8:	4413      	add	r3, r2
 800f5fa:	009b      	lsls	r3, r3, #2
 800f5fc:	440b      	add	r3, r1
 800f5fe:	3324      	adds	r3, #36	@ 0x24
 800f600:	2200      	movs	r2, #0
 800f602:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800f604:	4b1f      	ldr	r3, [pc, #124]	@ (800f684 <USBD_CDC_DeInit+0x100>)
 800f606:	781b      	ldrb	r3, [r3, #0]
 800f608:	f003 020f 	and.w	r2, r3, #15
 800f60c:	6879      	ldr	r1, [r7, #4]
 800f60e:	4613      	mov	r3, r2
 800f610:	009b      	lsls	r3, r3, #2
 800f612:	4413      	add	r3, r2
 800f614:	009b      	lsls	r3, r3, #2
 800f616:	440b      	add	r3, r1
 800f618:	3326      	adds	r3, #38	@ 0x26
 800f61a:	2200      	movs	r2, #0
 800f61c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	32b0      	adds	r2, #176	@ 0xb0
 800f628:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d01f      	beq.n	800f670 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f636:	687a      	ldr	r2, [r7, #4]
 800f638:	33b0      	adds	r3, #176	@ 0xb0
 800f63a:	009b      	lsls	r3, r3, #2
 800f63c:	4413      	add	r3, r2
 800f63e:	685b      	ldr	r3, [r3, #4]
 800f640:	685b      	ldr	r3, [r3, #4]
 800f642:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	32b0      	adds	r2, #176	@ 0xb0
 800f64e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f652:	4618      	mov	r0, r3
 800f654:	f002 fbb6 	bl	8011dc4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	32b0      	adds	r2, #176	@ 0xb0
 800f662:	2100      	movs	r1, #0
 800f664:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	2200      	movs	r2, #0
 800f66c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800f670:	2300      	movs	r3, #0
}
 800f672:	4618      	mov	r0, r3
 800f674:	3708      	adds	r7, #8
 800f676:	46bd      	mov	sp, r7
 800f678:	bd80      	pop	{r7, pc}
 800f67a:	bf00      	nop
 800f67c:	200000a7 	.word	0x200000a7
 800f680:	200000a8 	.word	0x200000a8
 800f684:	200000a9 	.word	0x200000a9

0800f688 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800f688:	b580      	push	{r7, lr}
 800f68a:	b086      	sub	sp, #24
 800f68c:	af00      	add	r7, sp, #0
 800f68e:	6078      	str	r0, [r7, #4]
 800f690:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	32b0      	adds	r2, #176	@ 0xb0
 800f69c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f6a0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800f6a2:	2300      	movs	r3, #0
 800f6a4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800f6a6:	2300      	movs	r3, #0
 800f6a8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800f6aa:	2300      	movs	r3, #0
 800f6ac:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800f6ae:	693b      	ldr	r3, [r7, #16]
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d101      	bne.n	800f6b8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800f6b4:	2303      	movs	r3, #3
 800f6b6:	e0bf      	b.n	800f838 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f6b8:	683b      	ldr	r3, [r7, #0]
 800f6ba:	781b      	ldrb	r3, [r3, #0]
 800f6bc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	d050      	beq.n	800f766 <USBD_CDC_Setup+0xde>
 800f6c4:	2b20      	cmp	r3, #32
 800f6c6:	f040 80af 	bne.w	800f828 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800f6ca:	683b      	ldr	r3, [r7, #0]
 800f6cc:	88db      	ldrh	r3, [r3, #6]
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	d03a      	beq.n	800f748 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800f6d2:	683b      	ldr	r3, [r7, #0]
 800f6d4:	781b      	ldrb	r3, [r3, #0]
 800f6d6:	b25b      	sxtb	r3, r3
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	da1b      	bge.n	800f714 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f6e2:	687a      	ldr	r2, [r7, #4]
 800f6e4:	33b0      	adds	r3, #176	@ 0xb0
 800f6e6:	009b      	lsls	r3, r3, #2
 800f6e8:	4413      	add	r3, r2
 800f6ea:	685b      	ldr	r3, [r3, #4]
 800f6ec:	689b      	ldr	r3, [r3, #8]
 800f6ee:	683a      	ldr	r2, [r7, #0]
 800f6f0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800f6f2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800f6f4:	683a      	ldr	r2, [r7, #0]
 800f6f6:	88d2      	ldrh	r2, [r2, #6]
 800f6f8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800f6fa:	683b      	ldr	r3, [r7, #0]
 800f6fc:	88db      	ldrh	r3, [r3, #6]
 800f6fe:	2b07      	cmp	r3, #7
 800f700:	bf28      	it	cs
 800f702:	2307      	movcs	r3, #7
 800f704:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800f706:	693b      	ldr	r3, [r7, #16]
 800f708:	89fa      	ldrh	r2, [r7, #14]
 800f70a:	4619      	mov	r1, r3
 800f70c:	6878      	ldr	r0, [r7, #4]
 800f70e:	f001 fd93 	bl	8011238 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800f712:	e090      	b.n	800f836 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800f714:	683b      	ldr	r3, [r7, #0]
 800f716:	785a      	ldrb	r2, [r3, #1]
 800f718:	693b      	ldr	r3, [r7, #16]
 800f71a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800f71e:	683b      	ldr	r3, [r7, #0]
 800f720:	88db      	ldrh	r3, [r3, #6]
 800f722:	2b3f      	cmp	r3, #63	@ 0x3f
 800f724:	d803      	bhi.n	800f72e <USBD_CDC_Setup+0xa6>
 800f726:	683b      	ldr	r3, [r7, #0]
 800f728:	88db      	ldrh	r3, [r3, #6]
 800f72a:	b2da      	uxtb	r2, r3
 800f72c:	e000      	b.n	800f730 <USBD_CDC_Setup+0xa8>
 800f72e:	2240      	movs	r2, #64	@ 0x40
 800f730:	693b      	ldr	r3, [r7, #16]
 800f732:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800f736:	6939      	ldr	r1, [r7, #16]
 800f738:	693b      	ldr	r3, [r7, #16]
 800f73a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800f73e:	461a      	mov	r2, r3
 800f740:	6878      	ldr	r0, [r7, #4]
 800f742:	f001 fda5 	bl	8011290 <USBD_CtlPrepareRx>
      break;
 800f746:	e076      	b.n	800f836 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f74e:	687a      	ldr	r2, [r7, #4]
 800f750:	33b0      	adds	r3, #176	@ 0xb0
 800f752:	009b      	lsls	r3, r3, #2
 800f754:	4413      	add	r3, r2
 800f756:	685b      	ldr	r3, [r3, #4]
 800f758:	689b      	ldr	r3, [r3, #8]
 800f75a:	683a      	ldr	r2, [r7, #0]
 800f75c:	7850      	ldrb	r0, [r2, #1]
 800f75e:	2200      	movs	r2, #0
 800f760:	6839      	ldr	r1, [r7, #0]
 800f762:	4798      	blx	r3
      break;
 800f764:	e067      	b.n	800f836 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f766:	683b      	ldr	r3, [r7, #0]
 800f768:	785b      	ldrb	r3, [r3, #1]
 800f76a:	2b0b      	cmp	r3, #11
 800f76c:	d851      	bhi.n	800f812 <USBD_CDC_Setup+0x18a>
 800f76e:	a201      	add	r2, pc, #4	@ (adr r2, 800f774 <USBD_CDC_Setup+0xec>)
 800f770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f774:	0800f7a5 	.word	0x0800f7a5
 800f778:	0800f821 	.word	0x0800f821
 800f77c:	0800f813 	.word	0x0800f813
 800f780:	0800f813 	.word	0x0800f813
 800f784:	0800f813 	.word	0x0800f813
 800f788:	0800f813 	.word	0x0800f813
 800f78c:	0800f813 	.word	0x0800f813
 800f790:	0800f813 	.word	0x0800f813
 800f794:	0800f813 	.word	0x0800f813
 800f798:	0800f813 	.word	0x0800f813
 800f79c:	0800f7cf 	.word	0x0800f7cf
 800f7a0:	0800f7f9 	.word	0x0800f7f9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f7aa:	b2db      	uxtb	r3, r3
 800f7ac:	2b03      	cmp	r3, #3
 800f7ae:	d107      	bne.n	800f7c0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800f7b0:	f107 030a 	add.w	r3, r7, #10
 800f7b4:	2202      	movs	r2, #2
 800f7b6:	4619      	mov	r1, r3
 800f7b8:	6878      	ldr	r0, [r7, #4]
 800f7ba:	f001 fd3d 	bl	8011238 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f7be:	e032      	b.n	800f826 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800f7c0:	6839      	ldr	r1, [r7, #0]
 800f7c2:	6878      	ldr	r0, [r7, #4]
 800f7c4:	f001 fcbb 	bl	801113e <USBD_CtlError>
            ret = USBD_FAIL;
 800f7c8:	2303      	movs	r3, #3
 800f7ca:	75fb      	strb	r3, [r7, #23]
          break;
 800f7cc:	e02b      	b.n	800f826 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f7d4:	b2db      	uxtb	r3, r3
 800f7d6:	2b03      	cmp	r3, #3
 800f7d8:	d107      	bne.n	800f7ea <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800f7da:	f107 030d 	add.w	r3, r7, #13
 800f7de:	2201      	movs	r2, #1
 800f7e0:	4619      	mov	r1, r3
 800f7e2:	6878      	ldr	r0, [r7, #4]
 800f7e4:	f001 fd28 	bl	8011238 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f7e8:	e01d      	b.n	800f826 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800f7ea:	6839      	ldr	r1, [r7, #0]
 800f7ec:	6878      	ldr	r0, [r7, #4]
 800f7ee:	f001 fca6 	bl	801113e <USBD_CtlError>
            ret = USBD_FAIL;
 800f7f2:	2303      	movs	r3, #3
 800f7f4:	75fb      	strb	r3, [r7, #23]
          break;
 800f7f6:	e016      	b.n	800f826 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f7fe:	b2db      	uxtb	r3, r3
 800f800:	2b03      	cmp	r3, #3
 800f802:	d00f      	beq.n	800f824 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800f804:	6839      	ldr	r1, [r7, #0]
 800f806:	6878      	ldr	r0, [r7, #4]
 800f808:	f001 fc99 	bl	801113e <USBD_CtlError>
            ret = USBD_FAIL;
 800f80c:	2303      	movs	r3, #3
 800f80e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800f810:	e008      	b.n	800f824 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800f812:	6839      	ldr	r1, [r7, #0]
 800f814:	6878      	ldr	r0, [r7, #4]
 800f816:	f001 fc92 	bl	801113e <USBD_CtlError>
          ret = USBD_FAIL;
 800f81a:	2303      	movs	r3, #3
 800f81c:	75fb      	strb	r3, [r7, #23]
          break;
 800f81e:	e002      	b.n	800f826 <USBD_CDC_Setup+0x19e>
          break;
 800f820:	bf00      	nop
 800f822:	e008      	b.n	800f836 <USBD_CDC_Setup+0x1ae>
          break;
 800f824:	bf00      	nop
      }
      break;
 800f826:	e006      	b.n	800f836 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800f828:	6839      	ldr	r1, [r7, #0]
 800f82a:	6878      	ldr	r0, [r7, #4]
 800f82c:	f001 fc87 	bl	801113e <USBD_CtlError>
      ret = USBD_FAIL;
 800f830:	2303      	movs	r3, #3
 800f832:	75fb      	strb	r3, [r7, #23]
      break;
 800f834:	bf00      	nop
  }

  return (uint8_t)ret;
 800f836:	7dfb      	ldrb	r3, [r7, #23]
}
 800f838:	4618      	mov	r0, r3
 800f83a:	3718      	adds	r7, #24
 800f83c:	46bd      	mov	sp, r7
 800f83e:	bd80      	pop	{r7, pc}

0800f840 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f840:	b580      	push	{r7, lr}
 800f842:	b084      	sub	sp, #16
 800f844:	af00      	add	r7, sp, #0
 800f846:	6078      	str	r0, [r7, #4]
 800f848:	460b      	mov	r3, r1
 800f84a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f852:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	32b0      	adds	r2, #176	@ 0xb0
 800f85e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f862:	2b00      	cmp	r3, #0
 800f864:	d101      	bne.n	800f86a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800f866:	2303      	movs	r3, #3
 800f868:	e065      	b.n	800f936 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	32b0      	adds	r2, #176	@ 0xb0
 800f874:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f878:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800f87a:	78fb      	ldrb	r3, [r7, #3]
 800f87c:	f003 020f 	and.w	r2, r3, #15
 800f880:	6879      	ldr	r1, [r7, #4]
 800f882:	4613      	mov	r3, r2
 800f884:	009b      	lsls	r3, r3, #2
 800f886:	4413      	add	r3, r2
 800f888:	009b      	lsls	r3, r3, #2
 800f88a:	440b      	add	r3, r1
 800f88c:	3318      	adds	r3, #24
 800f88e:	681b      	ldr	r3, [r3, #0]
 800f890:	2b00      	cmp	r3, #0
 800f892:	d02f      	beq.n	800f8f4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800f894:	78fb      	ldrb	r3, [r7, #3]
 800f896:	f003 020f 	and.w	r2, r3, #15
 800f89a:	6879      	ldr	r1, [r7, #4]
 800f89c:	4613      	mov	r3, r2
 800f89e:	009b      	lsls	r3, r3, #2
 800f8a0:	4413      	add	r3, r2
 800f8a2:	009b      	lsls	r3, r3, #2
 800f8a4:	440b      	add	r3, r1
 800f8a6:	3318      	adds	r3, #24
 800f8a8:	681a      	ldr	r2, [r3, #0]
 800f8aa:	78fb      	ldrb	r3, [r7, #3]
 800f8ac:	f003 010f 	and.w	r1, r3, #15
 800f8b0:	68f8      	ldr	r0, [r7, #12]
 800f8b2:	460b      	mov	r3, r1
 800f8b4:	00db      	lsls	r3, r3, #3
 800f8b6:	440b      	add	r3, r1
 800f8b8:	009b      	lsls	r3, r3, #2
 800f8ba:	4403      	add	r3, r0
 800f8bc:	331c      	adds	r3, #28
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	fbb2 f1f3 	udiv	r1, r2, r3
 800f8c4:	fb01 f303 	mul.w	r3, r1, r3
 800f8c8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d112      	bne.n	800f8f4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800f8ce:	78fb      	ldrb	r3, [r7, #3]
 800f8d0:	f003 020f 	and.w	r2, r3, #15
 800f8d4:	6879      	ldr	r1, [r7, #4]
 800f8d6:	4613      	mov	r3, r2
 800f8d8:	009b      	lsls	r3, r3, #2
 800f8da:	4413      	add	r3, r2
 800f8dc:	009b      	lsls	r3, r3, #2
 800f8de:	440b      	add	r3, r1
 800f8e0:	3318      	adds	r3, #24
 800f8e2:	2200      	movs	r2, #0
 800f8e4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800f8e6:	78f9      	ldrb	r1, [r7, #3]
 800f8e8:	2300      	movs	r3, #0
 800f8ea:	2200      	movs	r2, #0
 800f8ec:	6878      	ldr	r0, [r7, #4]
 800f8ee:	f002 fa06 	bl	8011cfe <USBD_LL_Transmit>
 800f8f2:	e01f      	b.n	800f934 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800f8f4:	68bb      	ldr	r3, [r7, #8]
 800f8f6:	2200      	movs	r2, #0
 800f8f8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f902:	687a      	ldr	r2, [r7, #4]
 800f904:	33b0      	adds	r3, #176	@ 0xb0
 800f906:	009b      	lsls	r3, r3, #2
 800f908:	4413      	add	r3, r2
 800f90a:	685b      	ldr	r3, [r3, #4]
 800f90c:	691b      	ldr	r3, [r3, #16]
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d010      	beq.n	800f934 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f918:	687a      	ldr	r2, [r7, #4]
 800f91a:	33b0      	adds	r3, #176	@ 0xb0
 800f91c:	009b      	lsls	r3, r3, #2
 800f91e:	4413      	add	r3, r2
 800f920:	685b      	ldr	r3, [r3, #4]
 800f922:	691b      	ldr	r3, [r3, #16]
 800f924:	68ba      	ldr	r2, [r7, #8]
 800f926:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800f92a:	68ba      	ldr	r2, [r7, #8]
 800f92c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800f930:	78fa      	ldrb	r2, [r7, #3]
 800f932:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800f934:	2300      	movs	r3, #0
}
 800f936:	4618      	mov	r0, r3
 800f938:	3710      	adds	r7, #16
 800f93a:	46bd      	mov	sp, r7
 800f93c:	bd80      	pop	{r7, pc}

0800f93e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f93e:	b580      	push	{r7, lr}
 800f940:	b084      	sub	sp, #16
 800f942:	af00      	add	r7, sp, #0
 800f944:	6078      	str	r0, [r7, #4]
 800f946:	460b      	mov	r3, r1
 800f948:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	32b0      	adds	r2, #176	@ 0xb0
 800f954:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f958:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	32b0      	adds	r2, #176	@ 0xb0
 800f964:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d101      	bne.n	800f970 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800f96c:	2303      	movs	r3, #3
 800f96e:	e01a      	b.n	800f9a6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800f970:	78fb      	ldrb	r3, [r7, #3]
 800f972:	4619      	mov	r1, r3
 800f974:	6878      	ldr	r0, [r7, #4]
 800f976:	f002 fa04 	bl	8011d82 <USBD_LL_GetRxDataSize>
 800f97a:	4602      	mov	r2, r0
 800f97c:	68fb      	ldr	r3, [r7, #12]
 800f97e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f988:	687a      	ldr	r2, [r7, #4]
 800f98a:	33b0      	adds	r3, #176	@ 0xb0
 800f98c:	009b      	lsls	r3, r3, #2
 800f98e:	4413      	add	r3, r2
 800f990:	685b      	ldr	r3, [r3, #4]
 800f992:	68db      	ldr	r3, [r3, #12]
 800f994:	68fa      	ldr	r2, [r7, #12]
 800f996:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800f99a:	68fa      	ldr	r2, [r7, #12]
 800f99c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800f9a0:	4611      	mov	r1, r2
 800f9a2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800f9a4:	2300      	movs	r3, #0
}
 800f9a6:	4618      	mov	r0, r3
 800f9a8:	3710      	adds	r7, #16
 800f9aa:	46bd      	mov	sp, r7
 800f9ac:	bd80      	pop	{r7, pc}

0800f9ae <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800f9ae:	b580      	push	{r7, lr}
 800f9b0:	b084      	sub	sp, #16
 800f9b2:	af00      	add	r7, sp, #0
 800f9b4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	32b0      	adds	r2, #176	@ 0xb0
 800f9c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f9c4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800f9c6:	68fb      	ldr	r3, [r7, #12]
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d101      	bne.n	800f9d0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800f9cc:	2303      	movs	r3, #3
 800f9ce:	e024      	b.n	800fa1a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f9d6:	687a      	ldr	r2, [r7, #4]
 800f9d8:	33b0      	adds	r3, #176	@ 0xb0
 800f9da:	009b      	lsls	r3, r3, #2
 800f9dc:	4413      	add	r3, r2
 800f9de:	685b      	ldr	r3, [r3, #4]
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	d019      	beq.n	800fa18 <USBD_CDC_EP0_RxReady+0x6a>
 800f9e4:	68fb      	ldr	r3, [r7, #12]
 800f9e6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800f9ea:	2bff      	cmp	r3, #255	@ 0xff
 800f9ec:	d014      	beq.n	800fa18 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f9f4:	687a      	ldr	r2, [r7, #4]
 800f9f6:	33b0      	adds	r3, #176	@ 0xb0
 800f9f8:	009b      	lsls	r3, r3, #2
 800f9fa:	4413      	add	r3, r2
 800f9fc:	685b      	ldr	r3, [r3, #4]
 800f9fe:	689b      	ldr	r3, [r3, #8]
 800fa00:	68fa      	ldr	r2, [r7, #12]
 800fa02:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800fa06:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800fa08:	68fa      	ldr	r2, [r7, #12]
 800fa0a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800fa0e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800fa10:	68fb      	ldr	r3, [r7, #12]
 800fa12:	22ff      	movs	r2, #255	@ 0xff
 800fa14:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800fa18:	2300      	movs	r3, #0
}
 800fa1a:	4618      	mov	r0, r3
 800fa1c:	3710      	adds	r7, #16
 800fa1e:	46bd      	mov	sp, r7
 800fa20:	bd80      	pop	{r7, pc}
	...

0800fa24 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800fa24:	b580      	push	{r7, lr}
 800fa26:	b086      	sub	sp, #24
 800fa28:	af00      	add	r7, sp, #0
 800fa2a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800fa2c:	2182      	movs	r1, #130	@ 0x82
 800fa2e:	4818      	ldr	r0, [pc, #96]	@ (800fa90 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800fa30:	f000 fd4f 	bl	80104d2 <USBD_GetEpDesc>
 800fa34:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800fa36:	2101      	movs	r1, #1
 800fa38:	4815      	ldr	r0, [pc, #84]	@ (800fa90 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800fa3a:	f000 fd4a 	bl	80104d2 <USBD_GetEpDesc>
 800fa3e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800fa40:	2181      	movs	r1, #129	@ 0x81
 800fa42:	4813      	ldr	r0, [pc, #76]	@ (800fa90 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800fa44:	f000 fd45 	bl	80104d2 <USBD_GetEpDesc>
 800fa48:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800fa4a:	697b      	ldr	r3, [r7, #20]
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d002      	beq.n	800fa56 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800fa50:	697b      	ldr	r3, [r7, #20]
 800fa52:	2210      	movs	r2, #16
 800fa54:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800fa56:	693b      	ldr	r3, [r7, #16]
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d006      	beq.n	800fa6a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800fa5c:	693b      	ldr	r3, [r7, #16]
 800fa5e:	2200      	movs	r2, #0
 800fa60:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800fa64:	711a      	strb	r2, [r3, #4]
 800fa66:	2200      	movs	r2, #0
 800fa68:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800fa6a:	68fb      	ldr	r3, [r7, #12]
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d006      	beq.n	800fa7e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800fa70:	68fb      	ldr	r3, [r7, #12]
 800fa72:	2200      	movs	r2, #0
 800fa74:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800fa78:	711a      	strb	r2, [r3, #4]
 800fa7a:	2200      	movs	r2, #0
 800fa7c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	2243      	movs	r2, #67	@ 0x43
 800fa82:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800fa84:	4b02      	ldr	r3, [pc, #8]	@ (800fa90 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800fa86:	4618      	mov	r0, r3
 800fa88:	3718      	adds	r7, #24
 800fa8a:	46bd      	mov	sp, r7
 800fa8c:	bd80      	pop	{r7, pc}
 800fa8e:	bf00      	nop
 800fa90:	20000064 	.word	0x20000064

0800fa94 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800fa94:	b580      	push	{r7, lr}
 800fa96:	b086      	sub	sp, #24
 800fa98:	af00      	add	r7, sp, #0
 800fa9a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800fa9c:	2182      	movs	r1, #130	@ 0x82
 800fa9e:	4818      	ldr	r0, [pc, #96]	@ (800fb00 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800faa0:	f000 fd17 	bl	80104d2 <USBD_GetEpDesc>
 800faa4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800faa6:	2101      	movs	r1, #1
 800faa8:	4815      	ldr	r0, [pc, #84]	@ (800fb00 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800faaa:	f000 fd12 	bl	80104d2 <USBD_GetEpDesc>
 800faae:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800fab0:	2181      	movs	r1, #129	@ 0x81
 800fab2:	4813      	ldr	r0, [pc, #76]	@ (800fb00 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800fab4:	f000 fd0d 	bl	80104d2 <USBD_GetEpDesc>
 800fab8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800faba:	697b      	ldr	r3, [r7, #20]
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d002      	beq.n	800fac6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800fac0:	697b      	ldr	r3, [r7, #20]
 800fac2:	2210      	movs	r2, #16
 800fac4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800fac6:	693b      	ldr	r3, [r7, #16]
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d006      	beq.n	800fada <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800facc:	693b      	ldr	r3, [r7, #16]
 800face:	2200      	movs	r2, #0
 800fad0:	711a      	strb	r2, [r3, #4]
 800fad2:	2200      	movs	r2, #0
 800fad4:	f042 0202 	orr.w	r2, r2, #2
 800fad8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	2b00      	cmp	r3, #0
 800fade:	d006      	beq.n	800faee <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800fae0:	68fb      	ldr	r3, [r7, #12]
 800fae2:	2200      	movs	r2, #0
 800fae4:	711a      	strb	r2, [r3, #4]
 800fae6:	2200      	movs	r2, #0
 800fae8:	f042 0202 	orr.w	r2, r2, #2
 800faec:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	2243      	movs	r2, #67	@ 0x43
 800faf2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800faf4:	4b02      	ldr	r3, [pc, #8]	@ (800fb00 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800faf6:	4618      	mov	r0, r3
 800faf8:	3718      	adds	r7, #24
 800fafa:	46bd      	mov	sp, r7
 800fafc:	bd80      	pop	{r7, pc}
 800fafe:	bf00      	nop
 800fb00:	20000064 	.word	0x20000064

0800fb04 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800fb04:	b580      	push	{r7, lr}
 800fb06:	b086      	sub	sp, #24
 800fb08:	af00      	add	r7, sp, #0
 800fb0a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800fb0c:	2182      	movs	r1, #130	@ 0x82
 800fb0e:	4818      	ldr	r0, [pc, #96]	@ (800fb70 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800fb10:	f000 fcdf 	bl	80104d2 <USBD_GetEpDesc>
 800fb14:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800fb16:	2101      	movs	r1, #1
 800fb18:	4815      	ldr	r0, [pc, #84]	@ (800fb70 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800fb1a:	f000 fcda 	bl	80104d2 <USBD_GetEpDesc>
 800fb1e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800fb20:	2181      	movs	r1, #129	@ 0x81
 800fb22:	4813      	ldr	r0, [pc, #76]	@ (800fb70 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800fb24:	f000 fcd5 	bl	80104d2 <USBD_GetEpDesc>
 800fb28:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800fb2a:	697b      	ldr	r3, [r7, #20]
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d002      	beq.n	800fb36 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800fb30:	697b      	ldr	r3, [r7, #20]
 800fb32:	2210      	movs	r2, #16
 800fb34:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800fb36:	693b      	ldr	r3, [r7, #16]
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d006      	beq.n	800fb4a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800fb3c:	693b      	ldr	r3, [r7, #16]
 800fb3e:	2200      	movs	r2, #0
 800fb40:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800fb44:	711a      	strb	r2, [r3, #4]
 800fb46:	2200      	movs	r2, #0
 800fb48:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800fb4a:	68fb      	ldr	r3, [r7, #12]
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	d006      	beq.n	800fb5e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800fb50:	68fb      	ldr	r3, [r7, #12]
 800fb52:	2200      	movs	r2, #0
 800fb54:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800fb58:	711a      	strb	r2, [r3, #4]
 800fb5a:	2200      	movs	r2, #0
 800fb5c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	2243      	movs	r2, #67	@ 0x43
 800fb62:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800fb64:	4b02      	ldr	r3, [pc, #8]	@ (800fb70 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800fb66:	4618      	mov	r0, r3
 800fb68:	3718      	adds	r7, #24
 800fb6a:	46bd      	mov	sp, r7
 800fb6c:	bd80      	pop	{r7, pc}
 800fb6e:	bf00      	nop
 800fb70:	20000064 	.word	0x20000064

0800fb74 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800fb74:	b480      	push	{r7}
 800fb76:	b083      	sub	sp, #12
 800fb78:	af00      	add	r7, sp, #0
 800fb7a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	220a      	movs	r2, #10
 800fb80:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800fb82:	4b03      	ldr	r3, [pc, #12]	@ (800fb90 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800fb84:	4618      	mov	r0, r3
 800fb86:	370c      	adds	r7, #12
 800fb88:	46bd      	mov	sp, r7
 800fb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb8e:	4770      	bx	lr
 800fb90:	20000020 	.word	0x20000020

0800fb94 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800fb94:	b480      	push	{r7}
 800fb96:	b083      	sub	sp, #12
 800fb98:	af00      	add	r7, sp, #0
 800fb9a:	6078      	str	r0, [r7, #4]
 800fb9c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800fb9e:	683b      	ldr	r3, [r7, #0]
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d101      	bne.n	800fba8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800fba4:	2303      	movs	r3, #3
 800fba6:	e009      	b.n	800fbbc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800fbae:	687a      	ldr	r2, [r7, #4]
 800fbb0:	33b0      	adds	r3, #176	@ 0xb0
 800fbb2:	009b      	lsls	r3, r3, #2
 800fbb4:	4413      	add	r3, r2
 800fbb6:	683a      	ldr	r2, [r7, #0]
 800fbb8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800fbba:	2300      	movs	r3, #0
}
 800fbbc:	4618      	mov	r0, r3
 800fbbe:	370c      	adds	r7, #12
 800fbc0:	46bd      	mov	sp, r7
 800fbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbc6:	4770      	bx	lr

0800fbc8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800fbc8:	b480      	push	{r7}
 800fbca:	b087      	sub	sp, #28
 800fbcc:	af00      	add	r7, sp, #0
 800fbce:	60f8      	str	r0, [r7, #12]
 800fbd0:	60b9      	str	r1, [r7, #8]
 800fbd2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fbd4:	68fb      	ldr	r3, [r7, #12]
 800fbd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fbda:	68fb      	ldr	r3, [r7, #12]
 800fbdc:	32b0      	adds	r2, #176	@ 0xb0
 800fbde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fbe2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800fbe4:	697b      	ldr	r3, [r7, #20]
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d101      	bne.n	800fbee <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800fbea:	2303      	movs	r3, #3
 800fbec:	e008      	b.n	800fc00 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800fbee:	697b      	ldr	r3, [r7, #20]
 800fbf0:	68ba      	ldr	r2, [r7, #8]
 800fbf2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800fbf6:	697b      	ldr	r3, [r7, #20]
 800fbf8:	687a      	ldr	r2, [r7, #4]
 800fbfa:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800fbfe:	2300      	movs	r3, #0
}
 800fc00:	4618      	mov	r0, r3
 800fc02:	371c      	adds	r7, #28
 800fc04:	46bd      	mov	sp, r7
 800fc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc0a:	4770      	bx	lr

0800fc0c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800fc0c:	b480      	push	{r7}
 800fc0e:	b085      	sub	sp, #20
 800fc10:	af00      	add	r7, sp, #0
 800fc12:	6078      	str	r0, [r7, #4]
 800fc14:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	32b0      	adds	r2, #176	@ 0xb0
 800fc20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fc24:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800fc26:	68fb      	ldr	r3, [r7, #12]
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d101      	bne.n	800fc30 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800fc2c:	2303      	movs	r3, #3
 800fc2e:	e004      	b.n	800fc3a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800fc30:	68fb      	ldr	r3, [r7, #12]
 800fc32:	683a      	ldr	r2, [r7, #0]
 800fc34:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800fc38:	2300      	movs	r3, #0
}
 800fc3a:	4618      	mov	r0, r3
 800fc3c:	3714      	adds	r7, #20
 800fc3e:	46bd      	mov	sp, r7
 800fc40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc44:	4770      	bx	lr
	...

0800fc48 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800fc48:	b580      	push	{r7, lr}
 800fc4a:	b084      	sub	sp, #16
 800fc4c:	af00      	add	r7, sp, #0
 800fc4e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	32b0      	adds	r2, #176	@ 0xb0
 800fc5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fc5e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800fc60:	2301      	movs	r3, #1
 800fc62:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800fc64:	68bb      	ldr	r3, [r7, #8]
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d101      	bne.n	800fc6e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800fc6a:	2303      	movs	r3, #3
 800fc6c:	e025      	b.n	800fcba <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800fc6e:	68bb      	ldr	r3, [r7, #8]
 800fc70:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	d11f      	bne.n	800fcb8 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800fc78:	68bb      	ldr	r3, [r7, #8]
 800fc7a:	2201      	movs	r2, #1
 800fc7c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800fc80:	4b10      	ldr	r3, [pc, #64]	@ (800fcc4 <USBD_CDC_TransmitPacket+0x7c>)
 800fc82:	781b      	ldrb	r3, [r3, #0]
 800fc84:	f003 020f 	and.w	r2, r3, #15
 800fc88:	68bb      	ldr	r3, [r7, #8]
 800fc8a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800fc8e:	6878      	ldr	r0, [r7, #4]
 800fc90:	4613      	mov	r3, r2
 800fc92:	009b      	lsls	r3, r3, #2
 800fc94:	4413      	add	r3, r2
 800fc96:	009b      	lsls	r3, r3, #2
 800fc98:	4403      	add	r3, r0
 800fc9a:	3318      	adds	r3, #24
 800fc9c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800fc9e:	4b09      	ldr	r3, [pc, #36]	@ (800fcc4 <USBD_CDC_TransmitPacket+0x7c>)
 800fca0:	7819      	ldrb	r1, [r3, #0]
 800fca2:	68bb      	ldr	r3, [r7, #8]
 800fca4:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800fca8:	68bb      	ldr	r3, [r7, #8]
 800fcaa:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800fcae:	6878      	ldr	r0, [r7, #4]
 800fcb0:	f002 f825 	bl	8011cfe <USBD_LL_Transmit>

    ret = USBD_OK;
 800fcb4:	2300      	movs	r3, #0
 800fcb6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800fcb8:	7bfb      	ldrb	r3, [r7, #15]
}
 800fcba:	4618      	mov	r0, r3
 800fcbc:	3710      	adds	r7, #16
 800fcbe:	46bd      	mov	sp, r7
 800fcc0:	bd80      	pop	{r7, pc}
 800fcc2:	bf00      	nop
 800fcc4:	200000a7 	.word	0x200000a7

0800fcc8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800fcc8:	b580      	push	{r7, lr}
 800fcca:	b084      	sub	sp, #16
 800fccc:	af00      	add	r7, sp, #0
 800fcce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	32b0      	adds	r2, #176	@ 0xb0
 800fcda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fcde:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	32b0      	adds	r2, #176	@ 0xb0
 800fcea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	d101      	bne.n	800fcf6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800fcf2:	2303      	movs	r3, #3
 800fcf4:	e018      	b.n	800fd28 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	7c1b      	ldrb	r3, [r3, #16]
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d10a      	bne.n	800fd14 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800fcfe:	4b0c      	ldr	r3, [pc, #48]	@ (800fd30 <USBD_CDC_ReceivePacket+0x68>)
 800fd00:	7819      	ldrb	r1, [r3, #0]
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800fd08:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800fd0c:	6878      	ldr	r0, [r7, #4]
 800fd0e:	f002 f817 	bl	8011d40 <USBD_LL_PrepareReceive>
 800fd12:	e008      	b.n	800fd26 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800fd14:	4b06      	ldr	r3, [pc, #24]	@ (800fd30 <USBD_CDC_ReceivePacket+0x68>)
 800fd16:	7819      	ldrb	r1, [r3, #0]
 800fd18:	68fb      	ldr	r3, [r7, #12]
 800fd1a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800fd1e:	2340      	movs	r3, #64	@ 0x40
 800fd20:	6878      	ldr	r0, [r7, #4]
 800fd22:	f002 f80d 	bl	8011d40 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800fd26:	2300      	movs	r3, #0
}
 800fd28:	4618      	mov	r0, r3
 800fd2a:	3710      	adds	r7, #16
 800fd2c:	46bd      	mov	sp, r7
 800fd2e:	bd80      	pop	{r7, pc}
 800fd30:	200000a8 	.word	0x200000a8

0800fd34 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800fd34:	b580      	push	{r7, lr}
 800fd36:	b086      	sub	sp, #24
 800fd38:	af00      	add	r7, sp, #0
 800fd3a:	60f8      	str	r0, [r7, #12]
 800fd3c:	60b9      	str	r1, [r7, #8]
 800fd3e:	4613      	mov	r3, r2
 800fd40:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800fd42:	68fb      	ldr	r3, [r7, #12]
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	d101      	bne.n	800fd4c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800fd48:	2303      	movs	r3, #3
 800fd4a:	e01f      	b.n	800fd8c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800fd4c:	68fb      	ldr	r3, [r7, #12]
 800fd4e:	2200      	movs	r2, #0
 800fd50:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800fd54:	68fb      	ldr	r3, [r7, #12]
 800fd56:	2200      	movs	r2, #0
 800fd58:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800fd5c:	68fb      	ldr	r3, [r7, #12]
 800fd5e:	2200      	movs	r2, #0
 800fd60:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800fd64:	68bb      	ldr	r3, [r7, #8]
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	d003      	beq.n	800fd72 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800fd6a:	68fb      	ldr	r3, [r7, #12]
 800fd6c:	68ba      	ldr	r2, [r7, #8]
 800fd6e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800fd72:	68fb      	ldr	r3, [r7, #12]
 800fd74:	2201      	movs	r2, #1
 800fd76:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800fd7a:	68fb      	ldr	r3, [r7, #12]
 800fd7c:	79fa      	ldrb	r2, [r7, #7]
 800fd7e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800fd80:	68f8      	ldr	r0, [r7, #12]
 800fd82:	f001 fe87 	bl	8011a94 <USBD_LL_Init>
 800fd86:	4603      	mov	r3, r0
 800fd88:	75fb      	strb	r3, [r7, #23]

  return ret;
 800fd8a:	7dfb      	ldrb	r3, [r7, #23]
}
 800fd8c:	4618      	mov	r0, r3
 800fd8e:	3718      	adds	r7, #24
 800fd90:	46bd      	mov	sp, r7
 800fd92:	bd80      	pop	{r7, pc}

0800fd94 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800fd94:	b580      	push	{r7, lr}
 800fd96:	b084      	sub	sp, #16
 800fd98:	af00      	add	r7, sp, #0
 800fd9a:	6078      	str	r0, [r7, #4]
 800fd9c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800fd9e:	2300      	movs	r3, #0
 800fda0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800fda2:	683b      	ldr	r3, [r7, #0]
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	d101      	bne.n	800fdac <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800fda8:	2303      	movs	r3, #3
 800fdaa:	e025      	b.n	800fdf8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	683a      	ldr	r2, [r7, #0]
 800fdb0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	32ae      	adds	r2, #174	@ 0xae
 800fdbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fdc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d00f      	beq.n	800fde8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	32ae      	adds	r2, #174	@ 0xae
 800fdd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fdd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fdd8:	f107 020e 	add.w	r2, r7, #14
 800fddc:	4610      	mov	r0, r2
 800fdde:	4798      	blx	r3
 800fde0:	4602      	mov	r2, r0
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800fdee:	1c5a      	adds	r2, r3, #1
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800fdf6:	2300      	movs	r3, #0
}
 800fdf8:	4618      	mov	r0, r3
 800fdfa:	3710      	adds	r7, #16
 800fdfc:	46bd      	mov	sp, r7
 800fdfe:	bd80      	pop	{r7, pc}

0800fe00 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800fe00:	b580      	push	{r7, lr}
 800fe02:	b082      	sub	sp, #8
 800fe04:	af00      	add	r7, sp, #0
 800fe06:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800fe08:	6878      	ldr	r0, [r7, #4]
 800fe0a:	f001 fe8f 	bl	8011b2c <USBD_LL_Start>
 800fe0e:	4603      	mov	r3, r0
}
 800fe10:	4618      	mov	r0, r3
 800fe12:	3708      	adds	r7, #8
 800fe14:	46bd      	mov	sp, r7
 800fe16:	bd80      	pop	{r7, pc}

0800fe18 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800fe18:	b480      	push	{r7}
 800fe1a:	b083      	sub	sp, #12
 800fe1c:	af00      	add	r7, sp, #0
 800fe1e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800fe20:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800fe22:	4618      	mov	r0, r3
 800fe24:	370c      	adds	r7, #12
 800fe26:	46bd      	mov	sp, r7
 800fe28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe2c:	4770      	bx	lr

0800fe2e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fe2e:	b580      	push	{r7, lr}
 800fe30:	b084      	sub	sp, #16
 800fe32:	af00      	add	r7, sp, #0
 800fe34:	6078      	str	r0, [r7, #4]
 800fe36:	460b      	mov	r3, r1
 800fe38:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800fe3a:	2300      	movs	r3, #0
 800fe3c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	d009      	beq.n	800fe5c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	78fa      	ldrb	r2, [r7, #3]
 800fe52:	4611      	mov	r1, r2
 800fe54:	6878      	ldr	r0, [r7, #4]
 800fe56:	4798      	blx	r3
 800fe58:	4603      	mov	r3, r0
 800fe5a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800fe5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe5e:	4618      	mov	r0, r3
 800fe60:	3710      	adds	r7, #16
 800fe62:	46bd      	mov	sp, r7
 800fe64:	bd80      	pop	{r7, pc}

0800fe66 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fe66:	b580      	push	{r7, lr}
 800fe68:	b084      	sub	sp, #16
 800fe6a:	af00      	add	r7, sp, #0
 800fe6c:	6078      	str	r0, [r7, #4]
 800fe6e:	460b      	mov	r3, r1
 800fe70:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800fe72:	2300      	movs	r3, #0
 800fe74:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fe7c:	685b      	ldr	r3, [r3, #4]
 800fe7e:	78fa      	ldrb	r2, [r7, #3]
 800fe80:	4611      	mov	r1, r2
 800fe82:	6878      	ldr	r0, [r7, #4]
 800fe84:	4798      	blx	r3
 800fe86:	4603      	mov	r3, r0
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	d001      	beq.n	800fe90 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800fe8c:	2303      	movs	r3, #3
 800fe8e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800fe90:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe92:	4618      	mov	r0, r3
 800fe94:	3710      	adds	r7, #16
 800fe96:	46bd      	mov	sp, r7
 800fe98:	bd80      	pop	{r7, pc}

0800fe9a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800fe9a:	b580      	push	{r7, lr}
 800fe9c:	b084      	sub	sp, #16
 800fe9e:	af00      	add	r7, sp, #0
 800fea0:	6078      	str	r0, [r7, #4]
 800fea2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800feaa:	6839      	ldr	r1, [r7, #0]
 800feac:	4618      	mov	r0, r3
 800feae:	f001 f90c 	bl	80110ca <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	2201      	movs	r2, #1
 800feb6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800fec0:	461a      	mov	r2, r3
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800fece:	f003 031f 	and.w	r3, r3, #31
 800fed2:	2b02      	cmp	r3, #2
 800fed4:	d01a      	beq.n	800ff0c <USBD_LL_SetupStage+0x72>
 800fed6:	2b02      	cmp	r3, #2
 800fed8:	d822      	bhi.n	800ff20 <USBD_LL_SetupStage+0x86>
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d002      	beq.n	800fee4 <USBD_LL_SetupStage+0x4a>
 800fede:	2b01      	cmp	r3, #1
 800fee0:	d00a      	beq.n	800fef8 <USBD_LL_SetupStage+0x5e>
 800fee2:	e01d      	b.n	800ff20 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800feea:	4619      	mov	r1, r3
 800feec:	6878      	ldr	r0, [r7, #4]
 800feee:	f000 fb63 	bl	80105b8 <USBD_StdDevReq>
 800fef2:	4603      	mov	r3, r0
 800fef4:	73fb      	strb	r3, [r7, #15]
      break;
 800fef6:	e020      	b.n	800ff3a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800fefe:	4619      	mov	r1, r3
 800ff00:	6878      	ldr	r0, [r7, #4]
 800ff02:	f000 fbcb 	bl	801069c <USBD_StdItfReq>
 800ff06:	4603      	mov	r3, r0
 800ff08:	73fb      	strb	r3, [r7, #15]
      break;
 800ff0a:	e016      	b.n	800ff3a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ff12:	4619      	mov	r1, r3
 800ff14:	6878      	ldr	r0, [r7, #4]
 800ff16:	f000 fc2d 	bl	8010774 <USBD_StdEPReq>
 800ff1a:	4603      	mov	r3, r0
 800ff1c:	73fb      	strb	r3, [r7, #15]
      break;
 800ff1e:	e00c      	b.n	800ff3a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ff26:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800ff2a:	b2db      	uxtb	r3, r3
 800ff2c:	4619      	mov	r1, r3
 800ff2e:	6878      	ldr	r0, [r7, #4]
 800ff30:	f001 fe5c 	bl	8011bec <USBD_LL_StallEP>
 800ff34:	4603      	mov	r3, r0
 800ff36:	73fb      	strb	r3, [r7, #15]
      break;
 800ff38:	bf00      	nop
  }

  return ret;
 800ff3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff3c:	4618      	mov	r0, r3
 800ff3e:	3710      	adds	r7, #16
 800ff40:	46bd      	mov	sp, r7
 800ff42:	bd80      	pop	{r7, pc}

0800ff44 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ff44:	b580      	push	{r7, lr}
 800ff46:	b086      	sub	sp, #24
 800ff48:	af00      	add	r7, sp, #0
 800ff4a:	60f8      	str	r0, [r7, #12]
 800ff4c:	460b      	mov	r3, r1
 800ff4e:	607a      	str	r2, [r7, #4]
 800ff50:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800ff52:	2300      	movs	r3, #0
 800ff54:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800ff56:	7afb      	ldrb	r3, [r7, #11]
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	d16e      	bne.n	801003a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800ff5c:	68fb      	ldr	r3, [r7, #12]
 800ff5e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800ff62:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ff64:	68fb      	ldr	r3, [r7, #12]
 800ff66:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ff6a:	2b03      	cmp	r3, #3
 800ff6c:	f040 8098 	bne.w	80100a0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800ff70:	693b      	ldr	r3, [r7, #16]
 800ff72:	689a      	ldr	r2, [r3, #8]
 800ff74:	693b      	ldr	r3, [r7, #16]
 800ff76:	68db      	ldr	r3, [r3, #12]
 800ff78:	429a      	cmp	r2, r3
 800ff7a:	d913      	bls.n	800ffa4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800ff7c:	693b      	ldr	r3, [r7, #16]
 800ff7e:	689a      	ldr	r2, [r3, #8]
 800ff80:	693b      	ldr	r3, [r7, #16]
 800ff82:	68db      	ldr	r3, [r3, #12]
 800ff84:	1ad2      	subs	r2, r2, r3
 800ff86:	693b      	ldr	r3, [r7, #16]
 800ff88:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ff8a:	693b      	ldr	r3, [r7, #16]
 800ff8c:	68da      	ldr	r2, [r3, #12]
 800ff8e:	693b      	ldr	r3, [r7, #16]
 800ff90:	689b      	ldr	r3, [r3, #8]
 800ff92:	4293      	cmp	r3, r2
 800ff94:	bf28      	it	cs
 800ff96:	4613      	movcs	r3, r2
 800ff98:	461a      	mov	r2, r3
 800ff9a:	6879      	ldr	r1, [r7, #4]
 800ff9c:	68f8      	ldr	r0, [r7, #12]
 800ff9e:	f001 f994 	bl	80112ca <USBD_CtlContinueRx>
 800ffa2:	e07d      	b.n	80100a0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800ffa4:	68fb      	ldr	r3, [r7, #12]
 800ffa6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ffaa:	f003 031f 	and.w	r3, r3, #31
 800ffae:	2b02      	cmp	r3, #2
 800ffb0:	d014      	beq.n	800ffdc <USBD_LL_DataOutStage+0x98>
 800ffb2:	2b02      	cmp	r3, #2
 800ffb4:	d81d      	bhi.n	800fff2 <USBD_LL_DataOutStage+0xae>
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d002      	beq.n	800ffc0 <USBD_LL_DataOutStage+0x7c>
 800ffba:	2b01      	cmp	r3, #1
 800ffbc:	d003      	beq.n	800ffc6 <USBD_LL_DataOutStage+0x82>
 800ffbe:	e018      	b.n	800fff2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800ffc0:	2300      	movs	r3, #0
 800ffc2:	75bb      	strb	r3, [r7, #22]
            break;
 800ffc4:	e018      	b.n	800fff8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800ffc6:	68fb      	ldr	r3, [r7, #12]
 800ffc8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800ffcc:	b2db      	uxtb	r3, r3
 800ffce:	4619      	mov	r1, r3
 800ffd0:	68f8      	ldr	r0, [r7, #12]
 800ffd2:	f000 fa64 	bl	801049e <USBD_CoreFindIF>
 800ffd6:	4603      	mov	r3, r0
 800ffd8:	75bb      	strb	r3, [r7, #22]
            break;
 800ffda:	e00d      	b.n	800fff8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800ffdc:	68fb      	ldr	r3, [r7, #12]
 800ffde:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800ffe2:	b2db      	uxtb	r3, r3
 800ffe4:	4619      	mov	r1, r3
 800ffe6:	68f8      	ldr	r0, [r7, #12]
 800ffe8:	f000 fa66 	bl	80104b8 <USBD_CoreFindEP>
 800ffec:	4603      	mov	r3, r0
 800ffee:	75bb      	strb	r3, [r7, #22]
            break;
 800fff0:	e002      	b.n	800fff8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800fff2:	2300      	movs	r3, #0
 800fff4:	75bb      	strb	r3, [r7, #22]
            break;
 800fff6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800fff8:	7dbb      	ldrb	r3, [r7, #22]
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	d119      	bne.n	8010032 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fffe:	68fb      	ldr	r3, [r7, #12]
 8010000:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010004:	b2db      	uxtb	r3, r3
 8010006:	2b03      	cmp	r3, #3
 8010008:	d113      	bne.n	8010032 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 801000a:	7dba      	ldrb	r2, [r7, #22]
 801000c:	68fb      	ldr	r3, [r7, #12]
 801000e:	32ae      	adds	r2, #174	@ 0xae
 8010010:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010014:	691b      	ldr	r3, [r3, #16]
 8010016:	2b00      	cmp	r3, #0
 8010018:	d00b      	beq.n	8010032 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 801001a:	7dba      	ldrb	r2, [r7, #22]
 801001c:	68fb      	ldr	r3, [r7, #12]
 801001e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8010022:	7dba      	ldrb	r2, [r7, #22]
 8010024:	68fb      	ldr	r3, [r7, #12]
 8010026:	32ae      	adds	r2, #174	@ 0xae
 8010028:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801002c:	691b      	ldr	r3, [r3, #16]
 801002e:	68f8      	ldr	r0, [r7, #12]
 8010030:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8010032:	68f8      	ldr	r0, [r7, #12]
 8010034:	f001 f95a 	bl	80112ec <USBD_CtlSendStatus>
 8010038:	e032      	b.n	80100a0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 801003a:	7afb      	ldrb	r3, [r7, #11]
 801003c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010040:	b2db      	uxtb	r3, r3
 8010042:	4619      	mov	r1, r3
 8010044:	68f8      	ldr	r0, [r7, #12]
 8010046:	f000 fa37 	bl	80104b8 <USBD_CoreFindEP>
 801004a:	4603      	mov	r3, r0
 801004c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801004e:	7dbb      	ldrb	r3, [r7, #22]
 8010050:	2bff      	cmp	r3, #255	@ 0xff
 8010052:	d025      	beq.n	80100a0 <USBD_LL_DataOutStage+0x15c>
 8010054:	7dbb      	ldrb	r3, [r7, #22]
 8010056:	2b00      	cmp	r3, #0
 8010058:	d122      	bne.n	80100a0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801005a:	68fb      	ldr	r3, [r7, #12]
 801005c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010060:	b2db      	uxtb	r3, r3
 8010062:	2b03      	cmp	r3, #3
 8010064:	d117      	bne.n	8010096 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8010066:	7dba      	ldrb	r2, [r7, #22]
 8010068:	68fb      	ldr	r3, [r7, #12]
 801006a:	32ae      	adds	r2, #174	@ 0xae
 801006c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010070:	699b      	ldr	r3, [r3, #24]
 8010072:	2b00      	cmp	r3, #0
 8010074:	d00f      	beq.n	8010096 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8010076:	7dba      	ldrb	r2, [r7, #22]
 8010078:	68fb      	ldr	r3, [r7, #12]
 801007a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 801007e:	7dba      	ldrb	r2, [r7, #22]
 8010080:	68fb      	ldr	r3, [r7, #12]
 8010082:	32ae      	adds	r2, #174	@ 0xae
 8010084:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010088:	699b      	ldr	r3, [r3, #24]
 801008a:	7afa      	ldrb	r2, [r7, #11]
 801008c:	4611      	mov	r1, r2
 801008e:	68f8      	ldr	r0, [r7, #12]
 8010090:	4798      	blx	r3
 8010092:	4603      	mov	r3, r0
 8010094:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8010096:	7dfb      	ldrb	r3, [r7, #23]
 8010098:	2b00      	cmp	r3, #0
 801009a:	d001      	beq.n	80100a0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 801009c:	7dfb      	ldrb	r3, [r7, #23]
 801009e:	e000      	b.n	80100a2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80100a0:	2300      	movs	r3, #0
}
 80100a2:	4618      	mov	r0, r3
 80100a4:	3718      	adds	r7, #24
 80100a6:	46bd      	mov	sp, r7
 80100a8:	bd80      	pop	{r7, pc}

080100aa <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80100aa:	b580      	push	{r7, lr}
 80100ac:	b086      	sub	sp, #24
 80100ae:	af00      	add	r7, sp, #0
 80100b0:	60f8      	str	r0, [r7, #12]
 80100b2:	460b      	mov	r3, r1
 80100b4:	607a      	str	r2, [r7, #4]
 80100b6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80100b8:	7afb      	ldrb	r3, [r7, #11]
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d16f      	bne.n	801019e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80100be:	68fb      	ldr	r3, [r7, #12]
 80100c0:	3314      	adds	r3, #20
 80100c2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80100c4:	68fb      	ldr	r3, [r7, #12]
 80100c6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80100ca:	2b02      	cmp	r3, #2
 80100cc:	d15a      	bne.n	8010184 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80100ce:	693b      	ldr	r3, [r7, #16]
 80100d0:	689a      	ldr	r2, [r3, #8]
 80100d2:	693b      	ldr	r3, [r7, #16]
 80100d4:	68db      	ldr	r3, [r3, #12]
 80100d6:	429a      	cmp	r2, r3
 80100d8:	d914      	bls.n	8010104 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80100da:	693b      	ldr	r3, [r7, #16]
 80100dc:	689a      	ldr	r2, [r3, #8]
 80100de:	693b      	ldr	r3, [r7, #16]
 80100e0:	68db      	ldr	r3, [r3, #12]
 80100e2:	1ad2      	subs	r2, r2, r3
 80100e4:	693b      	ldr	r3, [r7, #16]
 80100e6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80100e8:	693b      	ldr	r3, [r7, #16]
 80100ea:	689b      	ldr	r3, [r3, #8]
 80100ec:	461a      	mov	r2, r3
 80100ee:	6879      	ldr	r1, [r7, #4]
 80100f0:	68f8      	ldr	r0, [r7, #12]
 80100f2:	f001 f8bc 	bl	801126e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80100f6:	2300      	movs	r3, #0
 80100f8:	2200      	movs	r2, #0
 80100fa:	2100      	movs	r1, #0
 80100fc:	68f8      	ldr	r0, [r7, #12]
 80100fe:	f001 fe1f 	bl	8011d40 <USBD_LL_PrepareReceive>
 8010102:	e03f      	b.n	8010184 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8010104:	693b      	ldr	r3, [r7, #16]
 8010106:	68da      	ldr	r2, [r3, #12]
 8010108:	693b      	ldr	r3, [r7, #16]
 801010a:	689b      	ldr	r3, [r3, #8]
 801010c:	429a      	cmp	r2, r3
 801010e:	d11c      	bne.n	801014a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8010110:	693b      	ldr	r3, [r7, #16]
 8010112:	685a      	ldr	r2, [r3, #4]
 8010114:	693b      	ldr	r3, [r7, #16]
 8010116:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8010118:	429a      	cmp	r2, r3
 801011a:	d316      	bcc.n	801014a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 801011c:	693b      	ldr	r3, [r7, #16]
 801011e:	685a      	ldr	r2, [r3, #4]
 8010120:	68fb      	ldr	r3, [r7, #12]
 8010122:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8010126:	429a      	cmp	r2, r3
 8010128:	d20f      	bcs.n	801014a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801012a:	2200      	movs	r2, #0
 801012c:	2100      	movs	r1, #0
 801012e:	68f8      	ldr	r0, [r7, #12]
 8010130:	f001 f89d 	bl	801126e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8010134:	68fb      	ldr	r3, [r7, #12]
 8010136:	2200      	movs	r2, #0
 8010138:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801013c:	2300      	movs	r3, #0
 801013e:	2200      	movs	r2, #0
 8010140:	2100      	movs	r1, #0
 8010142:	68f8      	ldr	r0, [r7, #12]
 8010144:	f001 fdfc 	bl	8011d40 <USBD_LL_PrepareReceive>
 8010148:	e01c      	b.n	8010184 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801014a:	68fb      	ldr	r3, [r7, #12]
 801014c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010150:	b2db      	uxtb	r3, r3
 8010152:	2b03      	cmp	r3, #3
 8010154:	d10f      	bne.n	8010176 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8010156:	68fb      	ldr	r3, [r7, #12]
 8010158:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801015c:	68db      	ldr	r3, [r3, #12]
 801015e:	2b00      	cmp	r3, #0
 8010160:	d009      	beq.n	8010176 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8010162:	68fb      	ldr	r3, [r7, #12]
 8010164:	2200      	movs	r2, #0
 8010166:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 801016a:	68fb      	ldr	r3, [r7, #12]
 801016c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010170:	68db      	ldr	r3, [r3, #12]
 8010172:	68f8      	ldr	r0, [r7, #12]
 8010174:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8010176:	2180      	movs	r1, #128	@ 0x80
 8010178:	68f8      	ldr	r0, [r7, #12]
 801017a:	f001 fd37 	bl	8011bec <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 801017e:	68f8      	ldr	r0, [r7, #12]
 8010180:	f001 f8c7 	bl	8011312 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8010184:	68fb      	ldr	r3, [r7, #12]
 8010186:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 801018a:	2b00      	cmp	r3, #0
 801018c:	d03a      	beq.n	8010204 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 801018e:	68f8      	ldr	r0, [r7, #12]
 8010190:	f7ff fe42 	bl	800fe18 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8010194:	68fb      	ldr	r3, [r7, #12]
 8010196:	2200      	movs	r2, #0
 8010198:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 801019c:	e032      	b.n	8010204 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 801019e:	7afb      	ldrb	r3, [r7, #11]
 80101a0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80101a4:	b2db      	uxtb	r3, r3
 80101a6:	4619      	mov	r1, r3
 80101a8:	68f8      	ldr	r0, [r7, #12]
 80101aa:	f000 f985 	bl	80104b8 <USBD_CoreFindEP>
 80101ae:	4603      	mov	r3, r0
 80101b0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80101b2:	7dfb      	ldrb	r3, [r7, #23]
 80101b4:	2bff      	cmp	r3, #255	@ 0xff
 80101b6:	d025      	beq.n	8010204 <USBD_LL_DataInStage+0x15a>
 80101b8:	7dfb      	ldrb	r3, [r7, #23]
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	d122      	bne.n	8010204 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80101be:	68fb      	ldr	r3, [r7, #12]
 80101c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80101c4:	b2db      	uxtb	r3, r3
 80101c6:	2b03      	cmp	r3, #3
 80101c8:	d11c      	bne.n	8010204 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80101ca:	7dfa      	ldrb	r2, [r7, #23]
 80101cc:	68fb      	ldr	r3, [r7, #12]
 80101ce:	32ae      	adds	r2, #174	@ 0xae
 80101d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80101d4:	695b      	ldr	r3, [r3, #20]
 80101d6:	2b00      	cmp	r3, #0
 80101d8:	d014      	beq.n	8010204 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80101da:	7dfa      	ldrb	r2, [r7, #23]
 80101dc:	68fb      	ldr	r3, [r7, #12]
 80101de:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80101e2:	7dfa      	ldrb	r2, [r7, #23]
 80101e4:	68fb      	ldr	r3, [r7, #12]
 80101e6:	32ae      	adds	r2, #174	@ 0xae
 80101e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80101ec:	695b      	ldr	r3, [r3, #20]
 80101ee:	7afa      	ldrb	r2, [r7, #11]
 80101f0:	4611      	mov	r1, r2
 80101f2:	68f8      	ldr	r0, [r7, #12]
 80101f4:	4798      	blx	r3
 80101f6:	4603      	mov	r3, r0
 80101f8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80101fa:	7dbb      	ldrb	r3, [r7, #22]
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	d001      	beq.n	8010204 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8010200:	7dbb      	ldrb	r3, [r7, #22]
 8010202:	e000      	b.n	8010206 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8010204:	2300      	movs	r3, #0
}
 8010206:	4618      	mov	r0, r3
 8010208:	3718      	adds	r7, #24
 801020a:	46bd      	mov	sp, r7
 801020c:	bd80      	pop	{r7, pc}

0801020e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801020e:	b580      	push	{r7, lr}
 8010210:	b084      	sub	sp, #16
 8010212:	af00      	add	r7, sp, #0
 8010214:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8010216:	2300      	movs	r3, #0
 8010218:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	2201      	movs	r2, #1
 801021e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	2200      	movs	r2, #0
 8010226:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	2200      	movs	r2, #0
 801022e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	2200      	movs	r2, #0
 8010234:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	2200      	movs	r2, #0
 801023c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010246:	2b00      	cmp	r3, #0
 8010248:	d014      	beq.n	8010274 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010250:	685b      	ldr	r3, [r3, #4]
 8010252:	2b00      	cmp	r3, #0
 8010254:	d00e      	beq.n	8010274 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801025c:	685b      	ldr	r3, [r3, #4]
 801025e:	687a      	ldr	r2, [r7, #4]
 8010260:	6852      	ldr	r2, [r2, #4]
 8010262:	b2d2      	uxtb	r2, r2
 8010264:	4611      	mov	r1, r2
 8010266:	6878      	ldr	r0, [r7, #4]
 8010268:	4798      	blx	r3
 801026a:	4603      	mov	r3, r0
 801026c:	2b00      	cmp	r3, #0
 801026e:	d001      	beq.n	8010274 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8010270:	2303      	movs	r3, #3
 8010272:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010274:	2340      	movs	r3, #64	@ 0x40
 8010276:	2200      	movs	r2, #0
 8010278:	2100      	movs	r1, #0
 801027a:	6878      	ldr	r0, [r7, #4]
 801027c:	f001 fc71 	bl	8011b62 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	2201      	movs	r2, #1
 8010284:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	2240      	movs	r2, #64	@ 0x40
 801028c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010290:	2340      	movs	r3, #64	@ 0x40
 8010292:	2200      	movs	r2, #0
 8010294:	2180      	movs	r1, #128	@ 0x80
 8010296:	6878      	ldr	r0, [r7, #4]
 8010298:	f001 fc63 	bl	8011b62 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	2201      	movs	r2, #1
 80102a0:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	2240      	movs	r2, #64	@ 0x40
 80102a6:	621a      	str	r2, [r3, #32]

  return ret;
 80102a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80102aa:	4618      	mov	r0, r3
 80102ac:	3710      	adds	r7, #16
 80102ae:	46bd      	mov	sp, r7
 80102b0:	bd80      	pop	{r7, pc}

080102b2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80102b2:	b480      	push	{r7}
 80102b4:	b083      	sub	sp, #12
 80102b6:	af00      	add	r7, sp, #0
 80102b8:	6078      	str	r0, [r7, #4]
 80102ba:	460b      	mov	r3, r1
 80102bc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	78fa      	ldrb	r2, [r7, #3]
 80102c2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80102c4:	2300      	movs	r3, #0
}
 80102c6:	4618      	mov	r0, r3
 80102c8:	370c      	adds	r7, #12
 80102ca:	46bd      	mov	sp, r7
 80102cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102d0:	4770      	bx	lr

080102d2 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80102d2:	b480      	push	{r7}
 80102d4:	b083      	sub	sp, #12
 80102d6:	af00      	add	r7, sp, #0
 80102d8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80102e0:	b2db      	uxtb	r3, r3
 80102e2:	2b04      	cmp	r3, #4
 80102e4:	d006      	beq.n	80102f4 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80102ec:	b2da      	uxtb	r2, r3
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	2204      	movs	r2, #4
 80102f8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80102fc:	2300      	movs	r3, #0
}
 80102fe:	4618      	mov	r0, r3
 8010300:	370c      	adds	r7, #12
 8010302:	46bd      	mov	sp, r7
 8010304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010308:	4770      	bx	lr

0801030a <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801030a:	b480      	push	{r7}
 801030c:	b083      	sub	sp, #12
 801030e:	af00      	add	r7, sp, #0
 8010310:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010318:	b2db      	uxtb	r3, r3
 801031a:	2b04      	cmp	r3, #4
 801031c:	d106      	bne.n	801032c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8010324:	b2da      	uxtb	r2, r3
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 801032c:	2300      	movs	r3, #0
}
 801032e:	4618      	mov	r0, r3
 8010330:	370c      	adds	r7, #12
 8010332:	46bd      	mov	sp, r7
 8010334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010338:	4770      	bx	lr

0801033a <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801033a:	b580      	push	{r7, lr}
 801033c:	b082      	sub	sp, #8
 801033e:	af00      	add	r7, sp, #0
 8010340:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010348:	b2db      	uxtb	r3, r3
 801034a:	2b03      	cmp	r3, #3
 801034c:	d110      	bne.n	8010370 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010354:	2b00      	cmp	r3, #0
 8010356:	d00b      	beq.n	8010370 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801035e:	69db      	ldr	r3, [r3, #28]
 8010360:	2b00      	cmp	r3, #0
 8010362:	d005      	beq.n	8010370 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801036a:	69db      	ldr	r3, [r3, #28]
 801036c:	6878      	ldr	r0, [r7, #4]
 801036e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8010370:	2300      	movs	r3, #0
}
 8010372:	4618      	mov	r0, r3
 8010374:	3708      	adds	r7, #8
 8010376:	46bd      	mov	sp, r7
 8010378:	bd80      	pop	{r7, pc}

0801037a <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 801037a:	b580      	push	{r7, lr}
 801037c:	b082      	sub	sp, #8
 801037e:	af00      	add	r7, sp, #0
 8010380:	6078      	str	r0, [r7, #4]
 8010382:	460b      	mov	r3, r1
 8010384:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	32ae      	adds	r2, #174	@ 0xae
 8010390:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010394:	2b00      	cmp	r3, #0
 8010396:	d101      	bne.n	801039c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8010398:	2303      	movs	r3, #3
 801039a:	e01c      	b.n	80103d6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80103a2:	b2db      	uxtb	r3, r3
 80103a4:	2b03      	cmp	r3, #3
 80103a6:	d115      	bne.n	80103d4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	32ae      	adds	r2, #174	@ 0xae
 80103b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80103b6:	6a1b      	ldr	r3, [r3, #32]
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d00b      	beq.n	80103d4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	32ae      	adds	r2, #174	@ 0xae
 80103c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80103ca:	6a1b      	ldr	r3, [r3, #32]
 80103cc:	78fa      	ldrb	r2, [r7, #3]
 80103ce:	4611      	mov	r1, r2
 80103d0:	6878      	ldr	r0, [r7, #4]
 80103d2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80103d4:	2300      	movs	r3, #0
}
 80103d6:	4618      	mov	r0, r3
 80103d8:	3708      	adds	r7, #8
 80103da:	46bd      	mov	sp, r7
 80103dc:	bd80      	pop	{r7, pc}

080103de <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80103de:	b580      	push	{r7, lr}
 80103e0:	b082      	sub	sp, #8
 80103e2:	af00      	add	r7, sp, #0
 80103e4:	6078      	str	r0, [r7, #4]
 80103e6:	460b      	mov	r3, r1
 80103e8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	32ae      	adds	r2, #174	@ 0xae
 80103f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80103f8:	2b00      	cmp	r3, #0
 80103fa:	d101      	bne.n	8010400 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80103fc:	2303      	movs	r3, #3
 80103fe:	e01c      	b.n	801043a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010406:	b2db      	uxtb	r3, r3
 8010408:	2b03      	cmp	r3, #3
 801040a:	d115      	bne.n	8010438 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	32ae      	adds	r2, #174	@ 0xae
 8010416:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801041a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801041c:	2b00      	cmp	r3, #0
 801041e:	d00b      	beq.n	8010438 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	32ae      	adds	r2, #174	@ 0xae
 801042a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801042e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010430:	78fa      	ldrb	r2, [r7, #3]
 8010432:	4611      	mov	r1, r2
 8010434:	6878      	ldr	r0, [r7, #4]
 8010436:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8010438:	2300      	movs	r3, #0
}
 801043a:	4618      	mov	r0, r3
 801043c:	3708      	adds	r7, #8
 801043e:	46bd      	mov	sp, r7
 8010440:	bd80      	pop	{r7, pc}

08010442 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8010442:	b480      	push	{r7}
 8010444:	b083      	sub	sp, #12
 8010446:	af00      	add	r7, sp, #0
 8010448:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801044a:	2300      	movs	r3, #0
}
 801044c:	4618      	mov	r0, r3
 801044e:	370c      	adds	r7, #12
 8010450:	46bd      	mov	sp, r7
 8010452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010456:	4770      	bx	lr

08010458 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8010458:	b580      	push	{r7, lr}
 801045a:	b084      	sub	sp, #16
 801045c:	af00      	add	r7, sp, #0
 801045e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8010460:	2300      	movs	r3, #0
 8010462:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	2201      	movs	r2, #1
 8010468:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010472:	2b00      	cmp	r3, #0
 8010474:	d00e      	beq.n	8010494 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801047c:	685b      	ldr	r3, [r3, #4]
 801047e:	687a      	ldr	r2, [r7, #4]
 8010480:	6852      	ldr	r2, [r2, #4]
 8010482:	b2d2      	uxtb	r2, r2
 8010484:	4611      	mov	r1, r2
 8010486:	6878      	ldr	r0, [r7, #4]
 8010488:	4798      	blx	r3
 801048a:	4603      	mov	r3, r0
 801048c:	2b00      	cmp	r3, #0
 801048e:	d001      	beq.n	8010494 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8010490:	2303      	movs	r3, #3
 8010492:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8010494:	7bfb      	ldrb	r3, [r7, #15]
}
 8010496:	4618      	mov	r0, r3
 8010498:	3710      	adds	r7, #16
 801049a:	46bd      	mov	sp, r7
 801049c:	bd80      	pop	{r7, pc}

0801049e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801049e:	b480      	push	{r7}
 80104a0:	b083      	sub	sp, #12
 80104a2:	af00      	add	r7, sp, #0
 80104a4:	6078      	str	r0, [r7, #4]
 80104a6:	460b      	mov	r3, r1
 80104a8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80104aa:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80104ac:	4618      	mov	r0, r3
 80104ae:	370c      	adds	r7, #12
 80104b0:	46bd      	mov	sp, r7
 80104b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104b6:	4770      	bx	lr

080104b8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80104b8:	b480      	push	{r7}
 80104ba:	b083      	sub	sp, #12
 80104bc:	af00      	add	r7, sp, #0
 80104be:	6078      	str	r0, [r7, #4]
 80104c0:	460b      	mov	r3, r1
 80104c2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80104c4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80104c6:	4618      	mov	r0, r3
 80104c8:	370c      	adds	r7, #12
 80104ca:	46bd      	mov	sp, r7
 80104cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104d0:	4770      	bx	lr

080104d2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80104d2:	b580      	push	{r7, lr}
 80104d4:	b086      	sub	sp, #24
 80104d6:	af00      	add	r7, sp, #0
 80104d8:	6078      	str	r0, [r7, #4]
 80104da:	460b      	mov	r3, r1
 80104dc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80104e6:	2300      	movs	r3, #0
 80104e8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80104ea:	68fb      	ldr	r3, [r7, #12]
 80104ec:	885b      	ldrh	r3, [r3, #2]
 80104ee:	b29b      	uxth	r3, r3
 80104f0:	68fa      	ldr	r2, [r7, #12]
 80104f2:	7812      	ldrb	r2, [r2, #0]
 80104f4:	4293      	cmp	r3, r2
 80104f6:	d91f      	bls.n	8010538 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80104f8:	68fb      	ldr	r3, [r7, #12]
 80104fa:	781b      	ldrb	r3, [r3, #0]
 80104fc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80104fe:	e013      	b.n	8010528 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8010500:	f107 030a 	add.w	r3, r7, #10
 8010504:	4619      	mov	r1, r3
 8010506:	6978      	ldr	r0, [r7, #20]
 8010508:	f000 f81b 	bl	8010542 <USBD_GetNextDesc>
 801050c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 801050e:	697b      	ldr	r3, [r7, #20]
 8010510:	785b      	ldrb	r3, [r3, #1]
 8010512:	2b05      	cmp	r3, #5
 8010514:	d108      	bne.n	8010528 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8010516:	697b      	ldr	r3, [r7, #20]
 8010518:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 801051a:	693b      	ldr	r3, [r7, #16]
 801051c:	789b      	ldrb	r3, [r3, #2]
 801051e:	78fa      	ldrb	r2, [r7, #3]
 8010520:	429a      	cmp	r2, r3
 8010522:	d008      	beq.n	8010536 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8010524:	2300      	movs	r3, #0
 8010526:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8010528:	68fb      	ldr	r3, [r7, #12]
 801052a:	885b      	ldrh	r3, [r3, #2]
 801052c:	b29a      	uxth	r2, r3
 801052e:	897b      	ldrh	r3, [r7, #10]
 8010530:	429a      	cmp	r2, r3
 8010532:	d8e5      	bhi.n	8010500 <USBD_GetEpDesc+0x2e>
 8010534:	e000      	b.n	8010538 <USBD_GetEpDesc+0x66>
          break;
 8010536:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8010538:	693b      	ldr	r3, [r7, #16]
}
 801053a:	4618      	mov	r0, r3
 801053c:	3718      	adds	r7, #24
 801053e:	46bd      	mov	sp, r7
 8010540:	bd80      	pop	{r7, pc}

08010542 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8010542:	b480      	push	{r7}
 8010544:	b085      	sub	sp, #20
 8010546:	af00      	add	r7, sp, #0
 8010548:	6078      	str	r0, [r7, #4]
 801054a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8010550:	683b      	ldr	r3, [r7, #0]
 8010552:	881b      	ldrh	r3, [r3, #0]
 8010554:	68fa      	ldr	r2, [r7, #12]
 8010556:	7812      	ldrb	r2, [r2, #0]
 8010558:	4413      	add	r3, r2
 801055a:	b29a      	uxth	r2, r3
 801055c:	683b      	ldr	r3, [r7, #0]
 801055e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8010560:	68fb      	ldr	r3, [r7, #12]
 8010562:	781b      	ldrb	r3, [r3, #0]
 8010564:	461a      	mov	r2, r3
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	4413      	add	r3, r2
 801056a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 801056c:	68fb      	ldr	r3, [r7, #12]
}
 801056e:	4618      	mov	r0, r3
 8010570:	3714      	adds	r7, #20
 8010572:	46bd      	mov	sp, r7
 8010574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010578:	4770      	bx	lr

0801057a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 801057a:	b480      	push	{r7}
 801057c:	b087      	sub	sp, #28
 801057e:	af00      	add	r7, sp, #0
 8010580:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8010586:	697b      	ldr	r3, [r7, #20]
 8010588:	781b      	ldrb	r3, [r3, #0]
 801058a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 801058c:	697b      	ldr	r3, [r7, #20]
 801058e:	3301      	adds	r3, #1
 8010590:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8010592:	697b      	ldr	r3, [r7, #20]
 8010594:	781b      	ldrb	r3, [r3, #0]
 8010596:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8010598:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 801059c:	021b      	lsls	r3, r3, #8
 801059e:	b21a      	sxth	r2, r3
 80105a0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80105a4:	4313      	orrs	r3, r2
 80105a6:	b21b      	sxth	r3, r3
 80105a8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80105aa:	89fb      	ldrh	r3, [r7, #14]
}
 80105ac:	4618      	mov	r0, r3
 80105ae:	371c      	adds	r7, #28
 80105b0:	46bd      	mov	sp, r7
 80105b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105b6:	4770      	bx	lr

080105b8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80105b8:	b580      	push	{r7, lr}
 80105ba:	b084      	sub	sp, #16
 80105bc:	af00      	add	r7, sp, #0
 80105be:	6078      	str	r0, [r7, #4]
 80105c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80105c2:	2300      	movs	r3, #0
 80105c4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80105c6:	683b      	ldr	r3, [r7, #0]
 80105c8:	781b      	ldrb	r3, [r3, #0]
 80105ca:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80105ce:	2b40      	cmp	r3, #64	@ 0x40
 80105d0:	d005      	beq.n	80105de <USBD_StdDevReq+0x26>
 80105d2:	2b40      	cmp	r3, #64	@ 0x40
 80105d4:	d857      	bhi.n	8010686 <USBD_StdDevReq+0xce>
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d00f      	beq.n	80105fa <USBD_StdDevReq+0x42>
 80105da:	2b20      	cmp	r3, #32
 80105dc:	d153      	bne.n	8010686 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	32ae      	adds	r2, #174	@ 0xae
 80105e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80105ec:	689b      	ldr	r3, [r3, #8]
 80105ee:	6839      	ldr	r1, [r7, #0]
 80105f0:	6878      	ldr	r0, [r7, #4]
 80105f2:	4798      	blx	r3
 80105f4:	4603      	mov	r3, r0
 80105f6:	73fb      	strb	r3, [r7, #15]
      break;
 80105f8:	e04a      	b.n	8010690 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80105fa:	683b      	ldr	r3, [r7, #0]
 80105fc:	785b      	ldrb	r3, [r3, #1]
 80105fe:	2b09      	cmp	r3, #9
 8010600:	d83b      	bhi.n	801067a <USBD_StdDevReq+0xc2>
 8010602:	a201      	add	r2, pc, #4	@ (adr r2, 8010608 <USBD_StdDevReq+0x50>)
 8010604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010608:	0801065d 	.word	0x0801065d
 801060c:	08010671 	.word	0x08010671
 8010610:	0801067b 	.word	0x0801067b
 8010614:	08010667 	.word	0x08010667
 8010618:	0801067b 	.word	0x0801067b
 801061c:	0801063b 	.word	0x0801063b
 8010620:	08010631 	.word	0x08010631
 8010624:	0801067b 	.word	0x0801067b
 8010628:	08010653 	.word	0x08010653
 801062c:	08010645 	.word	0x08010645
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8010630:	6839      	ldr	r1, [r7, #0]
 8010632:	6878      	ldr	r0, [r7, #4]
 8010634:	f000 fa3c 	bl	8010ab0 <USBD_GetDescriptor>
          break;
 8010638:	e024      	b.n	8010684 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801063a:	6839      	ldr	r1, [r7, #0]
 801063c:	6878      	ldr	r0, [r7, #4]
 801063e:	f000 fba1 	bl	8010d84 <USBD_SetAddress>
          break;
 8010642:	e01f      	b.n	8010684 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8010644:	6839      	ldr	r1, [r7, #0]
 8010646:	6878      	ldr	r0, [r7, #4]
 8010648:	f000 fbe0 	bl	8010e0c <USBD_SetConfig>
 801064c:	4603      	mov	r3, r0
 801064e:	73fb      	strb	r3, [r7, #15]
          break;
 8010650:	e018      	b.n	8010684 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8010652:	6839      	ldr	r1, [r7, #0]
 8010654:	6878      	ldr	r0, [r7, #4]
 8010656:	f000 fc83 	bl	8010f60 <USBD_GetConfig>
          break;
 801065a:	e013      	b.n	8010684 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801065c:	6839      	ldr	r1, [r7, #0]
 801065e:	6878      	ldr	r0, [r7, #4]
 8010660:	f000 fcb4 	bl	8010fcc <USBD_GetStatus>
          break;
 8010664:	e00e      	b.n	8010684 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8010666:	6839      	ldr	r1, [r7, #0]
 8010668:	6878      	ldr	r0, [r7, #4]
 801066a:	f000 fce3 	bl	8011034 <USBD_SetFeature>
          break;
 801066e:	e009      	b.n	8010684 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8010670:	6839      	ldr	r1, [r7, #0]
 8010672:	6878      	ldr	r0, [r7, #4]
 8010674:	f000 fd07 	bl	8011086 <USBD_ClrFeature>
          break;
 8010678:	e004      	b.n	8010684 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 801067a:	6839      	ldr	r1, [r7, #0]
 801067c:	6878      	ldr	r0, [r7, #4]
 801067e:	f000 fd5e 	bl	801113e <USBD_CtlError>
          break;
 8010682:	bf00      	nop
      }
      break;
 8010684:	e004      	b.n	8010690 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8010686:	6839      	ldr	r1, [r7, #0]
 8010688:	6878      	ldr	r0, [r7, #4]
 801068a:	f000 fd58 	bl	801113e <USBD_CtlError>
      break;
 801068e:	bf00      	nop
  }

  return ret;
 8010690:	7bfb      	ldrb	r3, [r7, #15]
}
 8010692:	4618      	mov	r0, r3
 8010694:	3710      	adds	r7, #16
 8010696:	46bd      	mov	sp, r7
 8010698:	bd80      	pop	{r7, pc}
 801069a:	bf00      	nop

0801069c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801069c:	b580      	push	{r7, lr}
 801069e:	b084      	sub	sp, #16
 80106a0:	af00      	add	r7, sp, #0
 80106a2:	6078      	str	r0, [r7, #4]
 80106a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80106a6:	2300      	movs	r3, #0
 80106a8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80106aa:	683b      	ldr	r3, [r7, #0]
 80106ac:	781b      	ldrb	r3, [r3, #0]
 80106ae:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80106b2:	2b40      	cmp	r3, #64	@ 0x40
 80106b4:	d005      	beq.n	80106c2 <USBD_StdItfReq+0x26>
 80106b6:	2b40      	cmp	r3, #64	@ 0x40
 80106b8:	d852      	bhi.n	8010760 <USBD_StdItfReq+0xc4>
 80106ba:	2b00      	cmp	r3, #0
 80106bc:	d001      	beq.n	80106c2 <USBD_StdItfReq+0x26>
 80106be:	2b20      	cmp	r3, #32
 80106c0:	d14e      	bne.n	8010760 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80106c8:	b2db      	uxtb	r3, r3
 80106ca:	3b01      	subs	r3, #1
 80106cc:	2b02      	cmp	r3, #2
 80106ce:	d840      	bhi.n	8010752 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80106d0:	683b      	ldr	r3, [r7, #0]
 80106d2:	889b      	ldrh	r3, [r3, #4]
 80106d4:	b2db      	uxtb	r3, r3
 80106d6:	2b01      	cmp	r3, #1
 80106d8:	d836      	bhi.n	8010748 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80106da:	683b      	ldr	r3, [r7, #0]
 80106dc:	889b      	ldrh	r3, [r3, #4]
 80106de:	b2db      	uxtb	r3, r3
 80106e0:	4619      	mov	r1, r3
 80106e2:	6878      	ldr	r0, [r7, #4]
 80106e4:	f7ff fedb 	bl	801049e <USBD_CoreFindIF>
 80106e8:	4603      	mov	r3, r0
 80106ea:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80106ec:	7bbb      	ldrb	r3, [r7, #14]
 80106ee:	2bff      	cmp	r3, #255	@ 0xff
 80106f0:	d01d      	beq.n	801072e <USBD_StdItfReq+0x92>
 80106f2:	7bbb      	ldrb	r3, [r7, #14]
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	d11a      	bne.n	801072e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80106f8:	7bba      	ldrb	r2, [r7, #14]
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	32ae      	adds	r2, #174	@ 0xae
 80106fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010702:	689b      	ldr	r3, [r3, #8]
 8010704:	2b00      	cmp	r3, #0
 8010706:	d00f      	beq.n	8010728 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8010708:	7bba      	ldrb	r2, [r7, #14]
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8010710:	7bba      	ldrb	r2, [r7, #14]
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	32ae      	adds	r2, #174	@ 0xae
 8010716:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801071a:	689b      	ldr	r3, [r3, #8]
 801071c:	6839      	ldr	r1, [r7, #0]
 801071e:	6878      	ldr	r0, [r7, #4]
 8010720:	4798      	blx	r3
 8010722:	4603      	mov	r3, r0
 8010724:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8010726:	e004      	b.n	8010732 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8010728:	2303      	movs	r3, #3
 801072a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 801072c:	e001      	b.n	8010732 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 801072e:	2303      	movs	r3, #3
 8010730:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8010732:	683b      	ldr	r3, [r7, #0]
 8010734:	88db      	ldrh	r3, [r3, #6]
 8010736:	2b00      	cmp	r3, #0
 8010738:	d110      	bne.n	801075c <USBD_StdItfReq+0xc0>
 801073a:	7bfb      	ldrb	r3, [r7, #15]
 801073c:	2b00      	cmp	r3, #0
 801073e:	d10d      	bne.n	801075c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8010740:	6878      	ldr	r0, [r7, #4]
 8010742:	f000 fdd3 	bl	80112ec <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8010746:	e009      	b.n	801075c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8010748:	6839      	ldr	r1, [r7, #0]
 801074a:	6878      	ldr	r0, [r7, #4]
 801074c:	f000 fcf7 	bl	801113e <USBD_CtlError>
          break;
 8010750:	e004      	b.n	801075c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8010752:	6839      	ldr	r1, [r7, #0]
 8010754:	6878      	ldr	r0, [r7, #4]
 8010756:	f000 fcf2 	bl	801113e <USBD_CtlError>
          break;
 801075a:	e000      	b.n	801075e <USBD_StdItfReq+0xc2>
          break;
 801075c:	bf00      	nop
      }
      break;
 801075e:	e004      	b.n	801076a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8010760:	6839      	ldr	r1, [r7, #0]
 8010762:	6878      	ldr	r0, [r7, #4]
 8010764:	f000 fceb 	bl	801113e <USBD_CtlError>
      break;
 8010768:	bf00      	nop
  }

  return ret;
 801076a:	7bfb      	ldrb	r3, [r7, #15]
}
 801076c:	4618      	mov	r0, r3
 801076e:	3710      	adds	r7, #16
 8010770:	46bd      	mov	sp, r7
 8010772:	bd80      	pop	{r7, pc}

08010774 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010774:	b580      	push	{r7, lr}
 8010776:	b084      	sub	sp, #16
 8010778:	af00      	add	r7, sp, #0
 801077a:	6078      	str	r0, [r7, #4]
 801077c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 801077e:	2300      	movs	r3, #0
 8010780:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8010782:	683b      	ldr	r3, [r7, #0]
 8010784:	889b      	ldrh	r3, [r3, #4]
 8010786:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010788:	683b      	ldr	r3, [r7, #0]
 801078a:	781b      	ldrb	r3, [r3, #0]
 801078c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8010790:	2b40      	cmp	r3, #64	@ 0x40
 8010792:	d007      	beq.n	80107a4 <USBD_StdEPReq+0x30>
 8010794:	2b40      	cmp	r3, #64	@ 0x40
 8010796:	f200 817f 	bhi.w	8010a98 <USBD_StdEPReq+0x324>
 801079a:	2b00      	cmp	r3, #0
 801079c:	d02a      	beq.n	80107f4 <USBD_StdEPReq+0x80>
 801079e:	2b20      	cmp	r3, #32
 80107a0:	f040 817a 	bne.w	8010a98 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80107a4:	7bbb      	ldrb	r3, [r7, #14]
 80107a6:	4619      	mov	r1, r3
 80107a8:	6878      	ldr	r0, [r7, #4]
 80107aa:	f7ff fe85 	bl	80104b8 <USBD_CoreFindEP>
 80107ae:	4603      	mov	r3, r0
 80107b0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80107b2:	7b7b      	ldrb	r3, [r7, #13]
 80107b4:	2bff      	cmp	r3, #255	@ 0xff
 80107b6:	f000 8174 	beq.w	8010aa2 <USBD_StdEPReq+0x32e>
 80107ba:	7b7b      	ldrb	r3, [r7, #13]
 80107bc:	2b00      	cmp	r3, #0
 80107be:	f040 8170 	bne.w	8010aa2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80107c2:	7b7a      	ldrb	r2, [r7, #13]
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80107ca:	7b7a      	ldrb	r2, [r7, #13]
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	32ae      	adds	r2, #174	@ 0xae
 80107d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80107d4:	689b      	ldr	r3, [r3, #8]
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	f000 8163 	beq.w	8010aa2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80107dc:	7b7a      	ldrb	r2, [r7, #13]
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	32ae      	adds	r2, #174	@ 0xae
 80107e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80107e6:	689b      	ldr	r3, [r3, #8]
 80107e8:	6839      	ldr	r1, [r7, #0]
 80107ea:	6878      	ldr	r0, [r7, #4]
 80107ec:	4798      	blx	r3
 80107ee:	4603      	mov	r3, r0
 80107f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80107f2:	e156      	b.n	8010aa2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80107f4:	683b      	ldr	r3, [r7, #0]
 80107f6:	785b      	ldrb	r3, [r3, #1]
 80107f8:	2b03      	cmp	r3, #3
 80107fa:	d008      	beq.n	801080e <USBD_StdEPReq+0x9a>
 80107fc:	2b03      	cmp	r3, #3
 80107fe:	f300 8145 	bgt.w	8010a8c <USBD_StdEPReq+0x318>
 8010802:	2b00      	cmp	r3, #0
 8010804:	f000 809b 	beq.w	801093e <USBD_StdEPReq+0x1ca>
 8010808:	2b01      	cmp	r3, #1
 801080a:	d03c      	beq.n	8010886 <USBD_StdEPReq+0x112>
 801080c:	e13e      	b.n	8010a8c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010814:	b2db      	uxtb	r3, r3
 8010816:	2b02      	cmp	r3, #2
 8010818:	d002      	beq.n	8010820 <USBD_StdEPReq+0xac>
 801081a:	2b03      	cmp	r3, #3
 801081c:	d016      	beq.n	801084c <USBD_StdEPReq+0xd8>
 801081e:	e02c      	b.n	801087a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010820:	7bbb      	ldrb	r3, [r7, #14]
 8010822:	2b00      	cmp	r3, #0
 8010824:	d00d      	beq.n	8010842 <USBD_StdEPReq+0xce>
 8010826:	7bbb      	ldrb	r3, [r7, #14]
 8010828:	2b80      	cmp	r3, #128	@ 0x80
 801082a:	d00a      	beq.n	8010842 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801082c:	7bbb      	ldrb	r3, [r7, #14]
 801082e:	4619      	mov	r1, r3
 8010830:	6878      	ldr	r0, [r7, #4]
 8010832:	f001 f9db 	bl	8011bec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8010836:	2180      	movs	r1, #128	@ 0x80
 8010838:	6878      	ldr	r0, [r7, #4]
 801083a:	f001 f9d7 	bl	8011bec <USBD_LL_StallEP>
 801083e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8010840:	e020      	b.n	8010884 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8010842:	6839      	ldr	r1, [r7, #0]
 8010844:	6878      	ldr	r0, [r7, #4]
 8010846:	f000 fc7a 	bl	801113e <USBD_CtlError>
              break;
 801084a:	e01b      	b.n	8010884 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801084c:	683b      	ldr	r3, [r7, #0]
 801084e:	885b      	ldrh	r3, [r3, #2]
 8010850:	2b00      	cmp	r3, #0
 8010852:	d10e      	bne.n	8010872 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8010854:	7bbb      	ldrb	r3, [r7, #14]
 8010856:	2b00      	cmp	r3, #0
 8010858:	d00b      	beq.n	8010872 <USBD_StdEPReq+0xfe>
 801085a:	7bbb      	ldrb	r3, [r7, #14]
 801085c:	2b80      	cmp	r3, #128	@ 0x80
 801085e:	d008      	beq.n	8010872 <USBD_StdEPReq+0xfe>
 8010860:	683b      	ldr	r3, [r7, #0]
 8010862:	88db      	ldrh	r3, [r3, #6]
 8010864:	2b00      	cmp	r3, #0
 8010866:	d104      	bne.n	8010872 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8010868:	7bbb      	ldrb	r3, [r7, #14]
 801086a:	4619      	mov	r1, r3
 801086c:	6878      	ldr	r0, [r7, #4]
 801086e:	f001 f9bd 	bl	8011bec <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8010872:	6878      	ldr	r0, [r7, #4]
 8010874:	f000 fd3a 	bl	80112ec <USBD_CtlSendStatus>

              break;
 8010878:	e004      	b.n	8010884 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 801087a:	6839      	ldr	r1, [r7, #0]
 801087c:	6878      	ldr	r0, [r7, #4]
 801087e:	f000 fc5e 	bl	801113e <USBD_CtlError>
              break;
 8010882:	bf00      	nop
          }
          break;
 8010884:	e107      	b.n	8010a96 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801088c:	b2db      	uxtb	r3, r3
 801088e:	2b02      	cmp	r3, #2
 8010890:	d002      	beq.n	8010898 <USBD_StdEPReq+0x124>
 8010892:	2b03      	cmp	r3, #3
 8010894:	d016      	beq.n	80108c4 <USBD_StdEPReq+0x150>
 8010896:	e04b      	b.n	8010930 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010898:	7bbb      	ldrb	r3, [r7, #14]
 801089a:	2b00      	cmp	r3, #0
 801089c:	d00d      	beq.n	80108ba <USBD_StdEPReq+0x146>
 801089e:	7bbb      	ldrb	r3, [r7, #14]
 80108a0:	2b80      	cmp	r3, #128	@ 0x80
 80108a2:	d00a      	beq.n	80108ba <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80108a4:	7bbb      	ldrb	r3, [r7, #14]
 80108a6:	4619      	mov	r1, r3
 80108a8:	6878      	ldr	r0, [r7, #4]
 80108aa:	f001 f99f 	bl	8011bec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80108ae:	2180      	movs	r1, #128	@ 0x80
 80108b0:	6878      	ldr	r0, [r7, #4]
 80108b2:	f001 f99b 	bl	8011bec <USBD_LL_StallEP>
 80108b6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80108b8:	e040      	b.n	801093c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80108ba:	6839      	ldr	r1, [r7, #0]
 80108bc:	6878      	ldr	r0, [r7, #4]
 80108be:	f000 fc3e 	bl	801113e <USBD_CtlError>
              break;
 80108c2:	e03b      	b.n	801093c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80108c4:	683b      	ldr	r3, [r7, #0]
 80108c6:	885b      	ldrh	r3, [r3, #2]
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d136      	bne.n	801093a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80108cc:	7bbb      	ldrb	r3, [r7, #14]
 80108ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d004      	beq.n	80108e0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80108d6:	7bbb      	ldrb	r3, [r7, #14]
 80108d8:	4619      	mov	r1, r3
 80108da:	6878      	ldr	r0, [r7, #4]
 80108dc:	f001 f9a5 	bl	8011c2a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80108e0:	6878      	ldr	r0, [r7, #4]
 80108e2:	f000 fd03 	bl	80112ec <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80108e6:	7bbb      	ldrb	r3, [r7, #14]
 80108e8:	4619      	mov	r1, r3
 80108ea:	6878      	ldr	r0, [r7, #4]
 80108ec:	f7ff fde4 	bl	80104b8 <USBD_CoreFindEP>
 80108f0:	4603      	mov	r3, r0
 80108f2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80108f4:	7b7b      	ldrb	r3, [r7, #13]
 80108f6:	2bff      	cmp	r3, #255	@ 0xff
 80108f8:	d01f      	beq.n	801093a <USBD_StdEPReq+0x1c6>
 80108fa:	7b7b      	ldrb	r3, [r7, #13]
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d11c      	bne.n	801093a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8010900:	7b7a      	ldrb	r2, [r7, #13]
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8010908:	7b7a      	ldrb	r2, [r7, #13]
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	32ae      	adds	r2, #174	@ 0xae
 801090e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010912:	689b      	ldr	r3, [r3, #8]
 8010914:	2b00      	cmp	r3, #0
 8010916:	d010      	beq.n	801093a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8010918:	7b7a      	ldrb	r2, [r7, #13]
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	32ae      	adds	r2, #174	@ 0xae
 801091e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010922:	689b      	ldr	r3, [r3, #8]
 8010924:	6839      	ldr	r1, [r7, #0]
 8010926:	6878      	ldr	r0, [r7, #4]
 8010928:	4798      	blx	r3
 801092a:	4603      	mov	r3, r0
 801092c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 801092e:	e004      	b.n	801093a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8010930:	6839      	ldr	r1, [r7, #0]
 8010932:	6878      	ldr	r0, [r7, #4]
 8010934:	f000 fc03 	bl	801113e <USBD_CtlError>
              break;
 8010938:	e000      	b.n	801093c <USBD_StdEPReq+0x1c8>
              break;
 801093a:	bf00      	nop
          }
          break;
 801093c:	e0ab      	b.n	8010a96 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010944:	b2db      	uxtb	r3, r3
 8010946:	2b02      	cmp	r3, #2
 8010948:	d002      	beq.n	8010950 <USBD_StdEPReq+0x1dc>
 801094a:	2b03      	cmp	r3, #3
 801094c:	d032      	beq.n	80109b4 <USBD_StdEPReq+0x240>
 801094e:	e097      	b.n	8010a80 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010950:	7bbb      	ldrb	r3, [r7, #14]
 8010952:	2b00      	cmp	r3, #0
 8010954:	d007      	beq.n	8010966 <USBD_StdEPReq+0x1f2>
 8010956:	7bbb      	ldrb	r3, [r7, #14]
 8010958:	2b80      	cmp	r3, #128	@ 0x80
 801095a:	d004      	beq.n	8010966 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 801095c:	6839      	ldr	r1, [r7, #0]
 801095e:	6878      	ldr	r0, [r7, #4]
 8010960:	f000 fbed 	bl	801113e <USBD_CtlError>
                break;
 8010964:	e091      	b.n	8010a8a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010966:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801096a:	2b00      	cmp	r3, #0
 801096c:	da0b      	bge.n	8010986 <USBD_StdEPReq+0x212>
 801096e:	7bbb      	ldrb	r3, [r7, #14]
 8010970:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010974:	4613      	mov	r3, r2
 8010976:	009b      	lsls	r3, r3, #2
 8010978:	4413      	add	r3, r2
 801097a:	009b      	lsls	r3, r3, #2
 801097c:	3310      	adds	r3, #16
 801097e:	687a      	ldr	r2, [r7, #4]
 8010980:	4413      	add	r3, r2
 8010982:	3304      	adds	r3, #4
 8010984:	e00b      	b.n	801099e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8010986:	7bbb      	ldrb	r3, [r7, #14]
 8010988:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801098c:	4613      	mov	r3, r2
 801098e:	009b      	lsls	r3, r3, #2
 8010990:	4413      	add	r3, r2
 8010992:	009b      	lsls	r3, r3, #2
 8010994:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8010998:	687a      	ldr	r2, [r7, #4]
 801099a:	4413      	add	r3, r2
 801099c:	3304      	adds	r3, #4
 801099e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80109a0:	68bb      	ldr	r3, [r7, #8]
 80109a2:	2200      	movs	r2, #0
 80109a4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80109a6:	68bb      	ldr	r3, [r7, #8]
 80109a8:	2202      	movs	r2, #2
 80109aa:	4619      	mov	r1, r3
 80109ac:	6878      	ldr	r0, [r7, #4]
 80109ae:	f000 fc43 	bl	8011238 <USBD_CtlSendData>
              break;
 80109b2:	e06a      	b.n	8010a8a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80109b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	da11      	bge.n	80109e0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80109bc:	7bbb      	ldrb	r3, [r7, #14]
 80109be:	f003 020f 	and.w	r2, r3, #15
 80109c2:	6879      	ldr	r1, [r7, #4]
 80109c4:	4613      	mov	r3, r2
 80109c6:	009b      	lsls	r3, r3, #2
 80109c8:	4413      	add	r3, r2
 80109ca:	009b      	lsls	r3, r3, #2
 80109cc:	440b      	add	r3, r1
 80109ce:	3324      	adds	r3, #36	@ 0x24
 80109d0:	881b      	ldrh	r3, [r3, #0]
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d117      	bne.n	8010a06 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80109d6:	6839      	ldr	r1, [r7, #0]
 80109d8:	6878      	ldr	r0, [r7, #4]
 80109da:	f000 fbb0 	bl	801113e <USBD_CtlError>
                  break;
 80109de:	e054      	b.n	8010a8a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80109e0:	7bbb      	ldrb	r3, [r7, #14]
 80109e2:	f003 020f 	and.w	r2, r3, #15
 80109e6:	6879      	ldr	r1, [r7, #4]
 80109e8:	4613      	mov	r3, r2
 80109ea:	009b      	lsls	r3, r3, #2
 80109ec:	4413      	add	r3, r2
 80109ee:	009b      	lsls	r3, r3, #2
 80109f0:	440b      	add	r3, r1
 80109f2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80109f6:	881b      	ldrh	r3, [r3, #0]
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	d104      	bne.n	8010a06 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80109fc:	6839      	ldr	r1, [r7, #0]
 80109fe:	6878      	ldr	r0, [r7, #4]
 8010a00:	f000 fb9d 	bl	801113e <USBD_CtlError>
                  break;
 8010a04:	e041      	b.n	8010a8a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010a06:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	da0b      	bge.n	8010a26 <USBD_StdEPReq+0x2b2>
 8010a0e:	7bbb      	ldrb	r3, [r7, #14]
 8010a10:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010a14:	4613      	mov	r3, r2
 8010a16:	009b      	lsls	r3, r3, #2
 8010a18:	4413      	add	r3, r2
 8010a1a:	009b      	lsls	r3, r3, #2
 8010a1c:	3310      	adds	r3, #16
 8010a1e:	687a      	ldr	r2, [r7, #4]
 8010a20:	4413      	add	r3, r2
 8010a22:	3304      	adds	r3, #4
 8010a24:	e00b      	b.n	8010a3e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8010a26:	7bbb      	ldrb	r3, [r7, #14]
 8010a28:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010a2c:	4613      	mov	r3, r2
 8010a2e:	009b      	lsls	r3, r3, #2
 8010a30:	4413      	add	r3, r2
 8010a32:	009b      	lsls	r3, r3, #2
 8010a34:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8010a38:	687a      	ldr	r2, [r7, #4]
 8010a3a:	4413      	add	r3, r2
 8010a3c:	3304      	adds	r3, #4
 8010a3e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8010a40:	7bbb      	ldrb	r3, [r7, #14]
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d002      	beq.n	8010a4c <USBD_StdEPReq+0x2d8>
 8010a46:	7bbb      	ldrb	r3, [r7, #14]
 8010a48:	2b80      	cmp	r3, #128	@ 0x80
 8010a4a:	d103      	bne.n	8010a54 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8010a4c:	68bb      	ldr	r3, [r7, #8]
 8010a4e:	2200      	movs	r2, #0
 8010a50:	601a      	str	r2, [r3, #0]
 8010a52:	e00e      	b.n	8010a72 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8010a54:	7bbb      	ldrb	r3, [r7, #14]
 8010a56:	4619      	mov	r1, r3
 8010a58:	6878      	ldr	r0, [r7, #4]
 8010a5a:	f001 f905 	bl	8011c68 <USBD_LL_IsStallEP>
 8010a5e:	4603      	mov	r3, r0
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	d003      	beq.n	8010a6c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8010a64:	68bb      	ldr	r3, [r7, #8]
 8010a66:	2201      	movs	r2, #1
 8010a68:	601a      	str	r2, [r3, #0]
 8010a6a:	e002      	b.n	8010a72 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8010a6c:	68bb      	ldr	r3, [r7, #8]
 8010a6e:	2200      	movs	r2, #0
 8010a70:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010a72:	68bb      	ldr	r3, [r7, #8]
 8010a74:	2202      	movs	r2, #2
 8010a76:	4619      	mov	r1, r3
 8010a78:	6878      	ldr	r0, [r7, #4]
 8010a7a:	f000 fbdd 	bl	8011238 <USBD_CtlSendData>
              break;
 8010a7e:	e004      	b.n	8010a8a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8010a80:	6839      	ldr	r1, [r7, #0]
 8010a82:	6878      	ldr	r0, [r7, #4]
 8010a84:	f000 fb5b 	bl	801113e <USBD_CtlError>
              break;
 8010a88:	bf00      	nop
          }
          break;
 8010a8a:	e004      	b.n	8010a96 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8010a8c:	6839      	ldr	r1, [r7, #0]
 8010a8e:	6878      	ldr	r0, [r7, #4]
 8010a90:	f000 fb55 	bl	801113e <USBD_CtlError>
          break;
 8010a94:	bf00      	nop
      }
      break;
 8010a96:	e005      	b.n	8010aa4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8010a98:	6839      	ldr	r1, [r7, #0]
 8010a9a:	6878      	ldr	r0, [r7, #4]
 8010a9c:	f000 fb4f 	bl	801113e <USBD_CtlError>
      break;
 8010aa0:	e000      	b.n	8010aa4 <USBD_StdEPReq+0x330>
      break;
 8010aa2:	bf00      	nop
  }

  return ret;
 8010aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8010aa6:	4618      	mov	r0, r3
 8010aa8:	3710      	adds	r7, #16
 8010aaa:	46bd      	mov	sp, r7
 8010aac:	bd80      	pop	{r7, pc}
	...

08010ab0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010ab0:	b580      	push	{r7, lr}
 8010ab2:	b084      	sub	sp, #16
 8010ab4:	af00      	add	r7, sp, #0
 8010ab6:	6078      	str	r0, [r7, #4]
 8010ab8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8010aba:	2300      	movs	r3, #0
 8010abc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8010abe:	2300      	movs	r3, #0
 8010ac0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8010ac2:	2300      	movs	r3, #0
 8010ac4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8010ac6:	683b      	ldr	r3, [r7, #0]
 8010ac8:	885b      	ldrh	r3, [r3, #2]
 8010aca:	0a1b      	lsrs	r3, r3, #8
 8010acc:	b29b      	uxth	r3, r3
 8010ace:	3b01      	subs	r3, #1
 8010ad0:	2b06      	cmp	r3, #6
 8010ad2:	f200 8128 	bhi.w	8010d26 <USBD_GetDescriptor+0x276>
 8010ad6:	a201      	add	r2, pc, #4	@ (adr r2, 8010adc <USBD_GetDescriptor+0x2c>)
 8010ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010adc:	08010af9 	.word	0x08010af9
 8010ae0:	08010b11 	.word	0x08010b11
 8010ae4:	08010b51 	.word	0x08010b51
 8010ae8:	08010d27 	.word	0x08010d27
 8010aec:	08010d27 	.word	0x08010d27
 8010af0:	08010cc7 	.word	0x08010cc7
 8010af4:	08010cf3 	.word	0x08010cf3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010afe:	681b      	ldr	r3, [r3, #0]
 8010b00:	687a      	ldr	r2, [r7, #4]
 8010b02:	7c12      	ldrb	r2, [r2, #16]
 8010b04:	f107 0108 	add.w	r1, r7, #8
 8010b08:	4610      	mov	r0, r2
 8010b0a:	4798      	blx	r3
 8010b0c:	60f8      	str	r0, [r7, #12]
      break;
 8010b0e:	e112      	b.n	8010d36 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	7c1b      	ldrb	r3, [r3, #16]
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	d10d      	bne.n	8010b34 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010b1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010b20:	f107 0208 	add.w	r2, r7, #8
 8010b24:	4610      	mov	r0, r2
 8010b26:	4798      	blx	r3
 8010b28:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010b2a:	68fb      	ldr	r3, [r7, #12]
 8010b2c:	3301      	adds	r3, #1
 8010b2e:	2202      	movs	r2, #2
 8010b30:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8010b32:	e100      	b.n	8010d36 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010b3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010b3c:	f107 0208 	add.w	r2, r7, #8
 8010b40:	4610      	mov	r0, r2
 8010b42:	4798      	blx	r3
 8010b44:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010b46:	68fb      	ldr	r3, [r7, #12]
 8010b48:	3301      	adds	r3, #1
 8010b4a:	2202      	movs	r2, #2
 8010b4c:	701a      	strb	r2, [r3, #0]
      break;
 8010b4e:	e0f2      	b.n	8010d36 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8010b50:	683b      	ldr	r3, [r7, #0]
 8010b52:	885b      	ldrh	r3, [r3, #2]
 8010b54:	b2db      	uxtb	r3, r3
 8010b56:	2b05      	cmp	r3, #5
 8010b58:	f200 80ac 	bhi.w	8010cb4 <USBD_GetDescriptor+0x204>
 8010b5c:	a201      	add	r2, pc, #4	@ (adr r2, 8010b64 <USBD_GetDescriptor+0xb4>)
 8010b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b62:	bf00      	nop
 8010b64:	08010b7d 	.word	0x08010b7d
 8010b68:	08010bb1 	.word	0x08010bb1
 8010b6c:	08010be5 	.word	0x08010be5
 8010b70:	08010c19 	.word	0x08010c19
 8010b74:	08010c4d 	.word	0x08010c4d
 8010b78:	08010c81 	.word	0x08010c81
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010b82:	685b      	ldr	r3, [r3, #4]
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d00b      	beq.n	8010ba0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010b8e:	685b      	ldr	r3, [r3, #4]
 8010b90:	687a      	ldr	r2, [r7, #4]
 8010b92:	7c12      	ldrb	r2, [r2, #16]
 8010b94:	f107 0108 	add.w	r1, r7, #8
 8010b98:	4610      	mov	r0, r2
 8010b9a:	4798      	blx	r3
 8010b9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010b9e:	e091      	b.n	8010cc4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010ba0:	6839      	ldr	r1, [r7, #0]
 8010ba2:	6878      	ldr	r0, [r7, #4]
 8010ba4:	f000 facb 	bl	801113e <USBD_CtlError>
            err++;
 8010ba8:	7afb      	ldrb	r3, [r7, #11]
 8010baa:	3301      	adds	r3, #1
 8010bac:	72fb      	strb	r3, [r7, #11]
          break;
 8010bae:	e089      	b.n	8010cc4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010bb6:	689b      	ldr	r3, [r3, #8]
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	d00b      	beq.n	8010bd4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010bc2:	689b      	ldr	r3, [r3, #8]
 8010bc4:	687a      	ldr	r2, [r7, #4]
 8010bc6:	7c12      	ldrb	r2, [r2, #16]
 8010bc8:	f107 0108 	add.w	r1, r7, #8
 8010bcc:	4610      	mov	r0, r2
 8010bce:	4798      	blx	r3
 8010bd0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010bd2:	e077      	b.n	8010cc4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010bd4:	6839      	ldr	r1, [r7, #0]
 8010bd6:	6878      	ldr	r0, [r7, #4]
 8010bd8:	f000 fab1 	bl	801113e <USBD_CtlError>
            err++;
 8010bdc:	7afb      	ldrb	r3, [r7, #11]
 8010bde:	3301      	adds	r3, #1
 8010be0:	72fb      	strb	r3, [r7, #11]
          break;
 8010be2:	e06f      	b.n	8010cc4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010bea:	68db      	ldr	r3, [r3, #12]
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	d00b      	beq.n	8010c08 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010bf6:	68db      	ldr	r3, [r3, #12]
 8010bf8:	687a      	ldr	r2, [r7, #4]
 8010bfa:	7c12      	ldrb	r2, [r2, #16]
 8010bfc:	f107 0108 	add.w	r1, r7, #8
 8010c00:	4610      	mov	r0, r2
 8010c02:	4798      	blx	r3
 8010c04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010c06:	e05d      	b.n	8010cc4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010c08:	6839      	ldr	r1, [r7, #0]
 8010c0a:	6878      	ldr	r0, [r7, #4]
 8010c0c:	f000 fa97 	bl	801113e <USBD_CtlError>
            err++;
 8010c10:	7afb      	ldrb	r3, [r7, #11]
 8010c12:	3301      	adds	r3, #1
 8010c14:	72fb      	strb	r3, [r7, #11]
          break;
 8010c16:	e055      	b.n	8010cc4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010c1e:	691b      	ldr	r3, [r3, #16]
 8010c20:	2b00      	cmp	r3, #0
 8010c22:	d00b      	beq.n	8010c3c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010c2a:	691b      	ldr	r3, [r3, #16]
 8010c2c:	687a      	ldr	r2, [r7, #4]
 8010c2e:	7c12      	ldrb	r2, [r2, #16]
 8010c30:	f107 0108 	add.w	r1, r7, #8
 8010c34:	4610      	mov	r0, r2
 8010c36:	4798      	blx	r3
 8010c38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010c3a:	e043      	b.n	8010cc4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010c3c:	6839      	ldr	r1, [r7, #0]
 8010c3e:	6878      	ldr	r0, [r7, #4]
 8010c40:	f000 fa7d 	bl	801113e <USBD_CtlError>
            err++;
 8010c44:	7afb      	ldrb	r3, [r7, #11]
 8010c46:	3301      	adds	r3, #1
 8010c48:	72fb      	strb	r3, [r7, #11]
          break;
 8010c4a:	e03b      	b.n	8010cc4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010c52:	695b      	ldr	r3, [r3, #20]
 8010c54:	2b00      	cmp	r3, #0
 8010c56:	d00b      	beq.n	8010c70 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010c5e:	695b      	ldr	r3, [r3, #20]
 8010c60:	687a      	ldr	r2, [r7, #4]
 8010c62:	7c12      	ldrb	r2, [r2, #16]
 8010c64:	f107 0108 	add.w	r1, r7, #8
 8010c68:	4610      	mov	r0, r2
 8010c6a:	4798      	blx	r3
 8010c6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010c6e:	e029      	b.n	8010cc4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010c70:	6839      	ldr	r1, [r7, #0]
 8010c72:	6878      	ldr	r0, [r7, #4]
 8010c74:	f000 fa63 	bl	801113e <USBD_CtlError>
            err++;
 8010c78:	7afb      	ldrb	r3, [r7, #11]
 8010c7a:	3301      	adds	r3, #1
 8010c7c:	72fb      	strb	r3, [r7, #11]
          break;
 8010c7e:	e021      	b.n	8010cc4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010c86:	699b      	ldr	r3, [r3, #24]
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	d00b      	beq.n	8010ca4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010c92:	699b      	ldr	r3, [r3, #24]
 8010c94:	687a      	ldr	r2, [r7, #4]
 8010c96:	7c12      	ldrb	r2, [r2, #16]
 8010c98:	f107 0108 	add.w	r1, r7, #8
 8010c9c:	4610      	mov	r0, r2
 8010c9e:	4798      	blx	r3
 8010ca0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010ca2:	e00f      	b.n	8010cc4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010ca4:	6839      	ldr	r1, [r7, #0]
 8010ca6:	6878      	ldr	r0, [r7, #4]
 8010ca8:	f000 fa49 	bl	801113e <USBD_CtlError>
            err++;
 8010cac:	7afb      	ldrb	r3, [r7, #11]
 8010cae:	3301      	adds	r3, #1
 8010cb0:	72fb      	strb	r3, [r7, #11]
          break;
 8010cb2:	e007      	b.n	8010cc4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8010cb4:	6839      	ldr	r1, [r7, #0]
 8010cb6:	6878      	ldr	r0, [r7, #4]
 8010cb8:	f000 fa41 	bl	801113e <USBD_CtlError>
          err++;
 8010cbc:	7afb      	ldrb	r3, [r7, #11]
 8010cbe:	3301      	adds	r3, #1
 8010cc0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8010cc2:	bf00      	nop
      }
      break;
 8010cc4:	e037      	b.n	8010d36 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	7c1b      	ldrb	r3, [r3, #16]
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	d109      	bne.n	8010ce2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010cd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010cd6:	f107 0208 	add.w	r2, r7, #8
 8010cda:	4610      	mov	r0, r2
 8010cdc:	4798      	blx	r3
 8010cde:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010ce0:	e029      	b.n	8010d36 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8010ce2:	6839      	ldr	r1, [r7, #0]
 8010ce4:	6878      	ldr	r0, [r7, #4]
 8010ce6:	f000 fa2a 	bl	801113e <USBD_CtlError>
        err++;
 8010cea:	7afb      	ldrb	r3, [r7, #11]
 8010cec:	3301      	adds	r3, #1
 8010cee:	72fb      	strb	r3, [r7, #11]
      break;
 8010cf0:	e021      	b.n	8010d36 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	7c1b      	ldrb	r3, [r3, #16]
 8010cf6:	2b00      	cmp	r3, #0
 8010cf8:	d10d      	bne.n	8010d16 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010d02:	f107 0208 	add.w	r2, r7, #8
 8010d06:	4610      	mov	r0, r2
 8010d08:	4798      	blx	r3
 8010d0a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8010d0c:	68fb      	ldr	r3, [r7, #12]
 8010d0e:	3301      	adds	r3, #1
 8010d10:	2207      	movs	r2, #7
 8010d12:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010d14:	e00f      	b.n	8010d36 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8010d16:	6839      	ldr	r1, [r7, #0]
 8010d18:	6878      	ldr	r0, [r7, #4]
 8010d1a:	f000 fa10 	bl	801113e <USBD_CtlError>
        err++;
 8010d1e:	7afb      	ldrb	r3, [r7, #11]
 8010d20:	3301      	adds	r3, #1
 8010d22:	72fb      	strb	r3, [r7, #11]
      break;
 8010d24:	e007      	b.n	8010d36 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8010d26:	6839      	ldr	r1, [r7, #0]
 8010d28:	6878      	ldr	r0, [r7, #4]
 8010d2a:	f000 fa08 	bl	801113e <USBD_CtlError>
      err++;
 8010d2e:	7afb      	ldrb	r3, [r7, #11]
 8010d30:	3301      	adds	r3, #1
 8010d32:	72fb      	strb	r3, [r7, #11]
      break;
 8010d34:	bf00      	nop
  }

  if (err != 0U)
 8010d36:	7afb      	ldrb	r3, [r7, #11]
 8010d38:	2b00      	cmp	r3, #0
 8010d3a:	d11e      	bne.n	8010d7a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8010d3c:	683b      	ldr	r3, [r7, #0]
 8010d3e:	88db      	ldrh	r3, [r3, #6]
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	d016      	beq.n	8010d72 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8010d44:	893b      	ldrh	r3, [r7, #8]
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	d00e      	beq.n	8010d68 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8010d4a:	683b      	ldr	r3, [r7, #0]
 8010d4c:	88da      	ldrh	r2, [r3, #6]
 8010d4e:	893b      	ldrh	r3, [r7, #8]
 8010d50:	4293      	cmp	r3, r2
 8010d52:	bf28      	it	cs
 8010d54:	4613      	movcs	r3, r2
 8010d56:	b29b      	uxth	r3, r3
 8010d58:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8010d5a:	893b      	ldrh	r3, [r7, #8]
 8010d5c:	461a      	mov	r2, r3
 8010d5e:	68f9      	ldr	r1, [r7, #12]
 8010d60:	6878      	ldr	r0, [r7, #4]
 8010d62:	f000 fa69 	bl	8011238 <USBD_CtlSendData>
 8010d66:	e009      	b.n	8010d7c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8010d68:	6839      	ldr	r1, [r7, #0]
 8010d6a:	6878      	ldr	r0, [r7, #4]
 8010d6c:	f000 f9e7 	bl	801113e <USBD_CtlError>
 8010d70:	e004      	b.n	8010d7c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8010d72:	6878      	ldr	r0, [r7, #4]
 8010d74:	f000 faba 	bl	80112ec <USBD_CtlSendStatus>
 8010d78:	e000      	b.n	8010d7c <USBD_GetDescriptor+0x2cc>
    return;
 8010d7a:	bf00      	nop
  }
}
 8010d7c:	3710      	adds	r7, #16
 8010d7e:	46bd      	mov	sp, r7
 8010d80:	bd80      	pop	{r7, pc}
 8010d82:	bf00      	nop

08010d84 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010d84:	b580      	push	{r7, lr}
 8010d86:	b084      	sub	sp, #16
 8010d88:	af00      	add	r7, sp, #0
 8010d8a:	6078      	str	r0, [r7, #4]
 8010d8c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8010d8e:	683b      	ldr	r3, [r7, #0]
 8010d90:	889b      	ldrh	r3, [r3, #4]
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	d131      	bne.n	8010dfa <USBD_SetAddress+0x76>
 8010d96:	683b      	ldr	r3, [r7, #0]
 8010d98:	88db      	ldrh	r3, [r3, #6]
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	d12d      	bne.n	8010dfa <USBD_SetAddress+0x76>
 8010d9e:	683b      	ldr	r3, [r7, #0]
 8010da0:	885b      	ldrh	r3, [r3, #2]
 8010da2:	2b7f      	cmp	r3, #127	@ 0x7f
 8010da4:	d829      	bhi.n	8010dfa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8010da6:	683b      	ldr	r3, [r7, #0]
 8010da8:	885b      	ldrh	r3, [r3, #2]
 8010daa:	b2db      	uxtb	r3, r3
 8010dac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010db0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010db8:	b2db      	uxtb	r3, r3
 8010dba:	2b03      	cmp	r3, #3
 8010dbc:	d104      	bne.n	8010dc8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8010dbe:	6839      	ldr	r1, [r7, #0]
 8010dc0:	6878      	ldr	r0, [r7, #4]
 8010dc2:	f000 f9bc 	bl	801113e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010dc6:	e01d      	b.n	8010e04 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	7bfa      	ldrb	r2, [r7, #15]
 8010dcc:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8010dd0:	7bfb      	ldrb	r3, [r7, #15]
 8010dd2:	4619      	mov	r1, r3
 8010dd4:	6878      	ldr	r0, [r7, #4]
 8010dd6:	f000 ff73 	bl	8011cc0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8010dda:	6878      	ldr	r0, [r7, #4]
 8010ddc:	f000 fa86 	bl	80112ec <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8010de0:	7bfb      	ldrb	r3, [r7, #15]
 8010de2:	2b00      	cmp	r3, #0
 8010de4:	d004      	beq.n	8010df0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	2202      	movs	r2, #2
 8010dea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010dee:	e009      	b.n	8010e04 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	2201      	movs	r2, #1
 8010df4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010df8:	e004      	b.n	8010e04 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8010dfa:	6839      	ldr	r1, [r7, #0]
 8010dfc:	6878      	ldr	r0, [r7, #4]
 8010dfe:	f000 f99e 	bl	801113e <USBD_CtlError>
  }
}
 8010e02:	bf00      	nop
 8010e04:	bf00      	nop
 8010e06:	3710      	adds	r7, #16
 8010e08:	46bd      	mov	sp, r7
 8010e0a:	bd80      	pop	{r7, pc}

08010e0c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010e0c:	b580      	push	{r7, lr}
 8010e0e:	b084      	sub	sp, #16
 8010e10:	af00      	add	r7, sp, #0
 8010e12:	6078      	str	r0, [r7, #4]
 8010e14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010e16:	2300      	movs	r3, #0
 8010e18:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8010e1a:	683b      	ldr	r3, [r7, #0]
 8010e1c:	885b      	ldrh	r3, [r3, #2]
 8010e1e:	b2da      	uxtb	r2, r3
 8010e20:	4b4e      	ldr	r3, [pc, #312]	@ (8010f5c <USBD_SetConfig+0x150>)
 8010e22:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8010e24:	4b4d      	ldr	r3, [pc, #308]	@ (8010f5c <USBD_SetConfig+0x150>)
 8010e26:	781b      	ldrb	r3, [r3, #0]
 8010e28:	2b01      	cmp	r3, #1
 8010e2a:	d905      	bls.n	8010e38 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8010e2c:	6839      	ldr	r1, [r7, #0]
 8010e2e:	6878      	ldr	r0, [r7, #4]
 8010e30:	f000 f985 	bl	801113e <USBD_CtlError>
    return USBD_FAIL;
 8010e34:	2303      	movs	r3, #3
 8010e36:	e08c      	b.n	8010f52 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010e3e:	b2db      	uxtb	r3, r3
 8010e40:	2b02      	cmp	r3, #2
 8010e42:	d002      	beq.n	8010e4a <USBD_SetConfig+0x3e>
 8010e44:	2b03      	cmp	r3, #3
 8010e46:	d029      	beq.n	8010e9c <USBD_SetConfig+0x90>
 8010e48:	e075      	b.n	8010f36 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8010e4a:	4b44      	ldr	r3, [pc, #272]	@ (8010f5c <USBD_SetConfig+0x150>)
 8010e4c:	781b      	ldrb	r3, [r3, #0]
 8010e4e:	2b00      	cmp	r3, #0
 8010e50:	d020      	beq.n	8010e94 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8010e52:	4b42      	ldr	r3, [pc, #264]	@ (8010f5c <USBD_SetConfig+0x150>)
 8010e54:	781b      	ldrb	r3, [r3, #0]
 8010e56:	461a      	mov	r2, r3
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8010e5c:	4b3f      	ldr	r3, [pc, #252]	@ (8010f5c <USBD_SetConfig+0x150>)
 8010e5e:	781b      	ldrb	r3, [r3, #0]
 8010e60:	4619      	mov	r1, r3
 8010e62:	6878      	ldr	r0, [r7, #4]
 8010e64:	f7fe ffe3 	bl	800fe2e <USBD_SetClassConfig>
 8010e68:	4603      	mov	r3, r0
 8010e6a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8010e6c:	7bfb      	ldrb	r3, [r7, #15]
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	d008      	beq.n	8010e84 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8010e72:	6839      	ldr	r1, [r7, #0]
 8010e74:	6878      	ldr	r0, [r7, #4]
 8010e76:	f000 f962 	bl	801113e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	2202      	movs	r2, #2
 8010e7e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8010e82:	e065      	b.n	8010f50 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8010e84:	6878      	ldr	r0, [r7, #4]
 8010e86:	f000 fa31 	bl	80112ec <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	2203      	movs	r2, #3
 8010e8e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8010e92:	e05d      	b.n	8010f50 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8010e94:	6878      	ldr	r0, [r7, #4]
 8010e96:	f000 fa29 	bl	80112ec <USBD_CtlSendStatus>
      break;
 8010e9a:	e059      	b.n	8010f50 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8010e9c:	4b2f      	ldr	r3, [pc, #188]	@ (8010f5c <USBD_SetConfig+0x150>)
 8010e9e:	781b      	ldrb	r3, [r3, #0]
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	d112      	bne.n	8010eca <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	2202      	movs	r2, #2
 8010ea8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8010eac:	4b2b      	ldr	r3, [pc, #172]	@ (8010f5c <USBD_SetConfig+0x150>)
 8010eae:	781b      	ldrb	r3, [r3, #0]
 8010eb0:	461a      	mov	r2, r3
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8010eb6:	4b29      	ldr	r3, [pc, #164]	@ (8010f5c <USBD_SetConfig+0x150>)
 8010eb8:	781b      	ldrb	r3, [r3, #0]
 8010eba:	4619      	mov	r1, r3
 8010ebc:	6878      	ldr	r0, [r7, #4]
 8010ebe:	f7fe ffd2 	bl	800fe66 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8010ec2:	6878      	ldr	r0, [r7, #4]
 8010ec4:	f000 fa12 	bl	80112ec <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8010ec8:	e042      	b.n	8010f50 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8010eca:	4b24      	ldr	r3, [pc, #144]	@ (8010f5c <USBD_SetConfig+0x150>)
 8010ecc:	781b      	ldrb	r3, [r3, #0]
 8010ece:	461a      	mov	r2, r3
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	685b      	ldr	r3, [r3, #4]
 8010ed4:	429a      	cmp	r2, r3
 8010ed6:	d02a      	beq.n	8010f2e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	685b      	ldr	r3, [r3, #4]
 8010edc:	b2db      	uxtb	r3, r3
 8010ede:	4619      	mov	r1, r3
 8010ee0:	6878      	ldr	r0, [r7, #4]
 8010ee2:	f7fe ffc0 	bl	800fe66 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8010ee6:	4b1d      	ldr	r3, [pc, #116]	@ (8010f5c <USBD_SetConfig+0x150>)
 8010ee8:	781b      	ldrb	r3, [r3, #0]
 8010eea:	461a      	mov	r2, r3
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8010ef0:	4b1a      	ldr	r3, [pc, #104]	@ (8010f5c <USBD_SetConfig+0x150>)
 8010ef2:	781b      	ldrb	r3, [r3, #0]
 8010ef4:	4619      	mov	r1, r3
 8010ef6:	6878      	ldr	r0, [r7, #4]
 8010ef8:	f7fe ff99 	bl	800fe2e <USBD_SetClassConfig>
 8010efc:	4603      	mov	r3, r0
 8010efe:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8010f00:	7bfb      	ldrb	r3, [r7, #15]
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	d00f      	beq.n	8010f26 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8010f06:	6839      	ldr	r1, [r7, #0]
 8010f08:	6878      	ldr	r0, [r7, #4]
 8010f0a:	f000 f918 	bl	801113e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	685b      	ldr	r3, [r3, #4]
 8010f12:	b2db      	uxtb	r3, r3
 8010f14:	4619      	mov	r1, r3
 8010f16:	6878      	ldr	r0, [r7, #4]
 8010f18:	f7fe ffa5 	bl	800fe66 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	2202      	movs	r2, #2
 8010f20:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8010f24:	e014      	b.n	8010f50 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8010f26:	6878      	ldr	r0, [r7, #4]
 8010f28:	f000 f9e0 	bl	80112ec <USBD_CtlSendStatus>
      break;
 8010f2c:	e010      	b.n	8010f50 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8010f2e:	6878      	ldr	r0, [r7, #4]
 8010f30:	f000 f9dc 	bl	80112ec <USBD_CtlSendStatus>
      break;
 8010f34:	e00c      	b.n	8010f50 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8010f36:	6839      	ldr	r1, [r7, #0]
 8010f38:	6878      	ldr	r0, [r7, #4]
 8010f3a:	f000 f900 	bl	801113e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8010f3e:	4b07      	ldr	r3, [pc, #28]	@ (8010f5c <USBD_SetConfig+0x150>)
 8010f40:	781b      	ldrb	r3, [r3, #0]
 8010f42:	4619      	mov	r1, r3
 8010f44:	6878      	ldr	r0, [r7, #4]
 8010f46:	f7fe ff8e 	bl	800fe66 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8010f4a:	2303      	movs	r3, #3
 8010f4c:	73fb      	strb	r3, [r7, #15]
      break;
 8010f4e:	bf00      	nop
  }

  return ret;
 8010f50:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f52:	4618      	mov	r0, r3
 8010f54:	3710      	adds	r7, #16
 8010f56:	46bd      	mov	sp, r7
 8010f58:	bd80      	pop	{r7, pc}
 8010f5a:	bf00      	nop
 8010f5c:	200016e8 	.word	0x200016e8

08010f60 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010f60:	b580      	push	{r7, lr}
 8010f62:	b082      	sub	sp, #8
 8010f64:	af00      	add	r7, sp, #0
 8010f66:	6078      	str	r0, [r7, #4]
 8010f68:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8010f6a:	683b      	ldr	r3, [r7, #0]
 8010f6c:	88db      	ldrh	r3, [r3, #6]
 8010f6e:	2b01      	cmp	r3, #1
 8010f70:	d004      	beq.n	8010f7c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8010f72:	6839      	ldr	r1, [r7, #0]
 8010f74:	6878      	ldr	r0, [r7, #4]
 8010f76:	f000 f8e2 	bl	801113e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8010f7a:	e023      	b.n	8010fc4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010f82:	b2db      	uxtb	r3, r3
 8010f84:	2b02      	cmp	r3, #2
 8010f86:	dc02      	bgt.n	8010f8e <USBD_GetConfig+0x2e>
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	dc03      	bgt.n	8010f94 <USBD_GetConfig+0x34>
 8010f8c:	e015      	b.n	8010fba <USBD_GetConfig+0x5a>
 8010f8e:	2b03      	cmp	r3, #3
 8010f90:	d00b      	beq.n	8010faa <USBD_GetConfig+0x4a>
 8010f92:	e012      	b.n	8010fba <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	2200      	movs	r2, #0
 8010f98:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	3308      	adds	r3, #8
 8010f9e:	2201      	movs	r2, #1
 8010fa0:	4619      	mov	r1, r3
 8010fa2:	6878      	ldr	r0, [r7, #4]
 8010fa4:	f000 f948 	bl	8011238 <USBD_CtlSendData>
        break;
 8010fa8:	e00c      	b.n	8010fc4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	3304      	adds	r3, #4
 8010fae:	2201      	movs	r2, #1
 8010fb0:	4619      	mov	r1, r3
 8010fb2:	6878      	ldr	r0, [r7, #4]
 8010fb4:	f000 f940 	bl	8011238 <USBD_CtlSendData>
        break;
 8010fb8:	e004      	b.n	8010fc4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8010fba:	6839      	ldr	r1, [r7, #0]
 8010fbc:	6878      	ldr	r0, [r7, #4]
 8010fbe:	f000 f8be 	bl	801113e <USBD_CtlError>
        break;
 8010fc2:	bf00      	nop
}
 8010fc4:	bf00      	nop
 8010fc6:	3708      	adds	r7, #8
 8010fc8:	46bd      	mov	sp, r7
 8010fca:	bd80      	pop	{r7, pc}

08010fcc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010fcc:	b580      	push	{r7, lr}
 8010fce:	b082      	sub	sp, #8
 8010fd0:	af00      	add	r7, sp, #0
 8010fd2:	6078      	str	r0, [r7, #4]
 8010fd4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010fdc:	b2db      	uxtb	r3, r3
 8010fde:	3b01      	subs	r3, #1
 8010fe0:	2b02      	cmp	r3, #2
 8010fe2:	d81e      	bhi.n	8011022 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8010fe4:	683b      	ldr	r3, [r7, #0]
 8010fe6:	88db      	ldrh	r3, [r3, #6]
 8010fe8:	2b02      	cmp	r3, #2
 8010fea:	d004      	beq.n	8010ff6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8010fec:	6839      	ldr	r1, [r7, #0]
 8010fee:	6878      	ldr	r0, [r7, #4]
 8010ff0:	f000 f8a5 	bl	801113e <USBD_CtlError>
        break;
 8010ff4:	e01a      	b.n	801102c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	2201      	movs	r2, #1
 8010ffa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8011002:	2b00      	cmp	r3, #0
 8011004:	d005      	beq.n	8011012 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	68db      	ldr	r3, [r3, #12]
 801100a:	f043 0202 	orr.w	r2, r3, #2
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	330c      	adds	r3, #12
 8011016:	2202      	movs	r2, #2
 8011018:	4619      	mov	r1, r3
 801101a:	6878      	ldr	r0, [r7, #4]
 801101c:	f000 f90c 	bl	8011238 <USBD_CtlSendData>
      break;
 8011020:	e004      	b.n	801102c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8011022:	6839      	ldr	r1, [r7, #0]
 8011024:	6878      	ldr	r0, [r7, #4]
 8011026:	f000 f88a 	bl	801113e <USBD_CtlError>
      break;
 801102a:	bf00      	nop
  }
}
 801102c:	bf00      	nop
 801102e:	3708      	adds	r7, #8
 8011030:	46bd      	mov	sp, r7
 8011032:	bd80      	pop	{r7, pc}

08011034 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011034:	b580      	push	{r7, lr}
 8011036:	b082      	sub	sp, #8
 8011038:	af00      	add	r7, sp, #0
 801103a:	6078      	str	r0, [r7, #4]
 801103c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801103e:	683b      	ldr	r3, [r7, #0]
 8011040:	885b      	ldrh	r3, [r3, #2]
 8011042:	2b01      	cmp	r3, #1
 8011044:	d107      	bne.n	8011056 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	2201      	movs	r2, #1
 801104a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801104e:	6878      	ldr	r0, [r7, #4]
 8011050:	f000 f94c 	bl	80112ec <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8011054:	e013      	b.n	801107e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8011056:	683b      	ldr	r3, [r7, #0]
 8011058:	885b      	ldrh	r3, [r3, #2]
 801105a:	2b02      	cmp	r3, #2
 801105c:	d10b      	bne.n	8011076 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 801105e:	683b      	ldr	r3, [r7, #0]
 8011060:	889b      	ldrh	r3, [r3, #4]
 8011062:	0a1b      	lsrs	r3, r3, #8
 8011064:	b29b      	uxth	r3, r3
 8011066:	b2da      	uxtb	r2, r3
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 801106e:	6878      	ldr	r0, [r7, #4]
 8011070:	f000 f93c 	bl	80112ec <USBD_CtlSendStatus>
}
 8011074:	e003      	b.n	801107e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8011076:	6839      	ldr	r1, [r7, #0]
 8011078:	6878      	ldr	r0, [r7, #4]
 801107a:	f000 f860 	bl	801113e <USBD_CtlError>
}
 801107e:	bf00      	nop
 8011080:	3708      	adds	r7, #8
 8011082:	46bd      	mov	sp, r7
 8011084:	bd80      	pop	{r7, pc}

08011086 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011086:	b580      	push	{r7, lr}
 8011088:	b082      	sub	sp, #8
 801108a:	af00      	add	r7, sp, #0
 801108c:	6078      	str	r0, [r7, #4]
 801108e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011096:	b2db      	uxtb	r3, r3
 8011098:	3b01      	subs	r3, #1
 801109a:	2b02      	cmp	r3, #2
 801109c:	d80b      	bhi.n	80110b6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801109e:	683b      	ldr	r3, [r7, #0]
 80110a0:	885b      	ldrh	r3, [r3, #2]
 80110a2:	2b01      	cmp	r3, #1
 80110a4:	d10c      	bne.n	80110c0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	2200      	movs	r2, #0
 80110aa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80110ae:	6878      	ldr	r0, [r7, #4]
 80110b0:	f000 f91c 	bl	80112ec <USBD_CtlSendStatus>
      }
      break;
 80110b4:	e004      	b.n	80110c0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80110b6:	6839      	ldr	r1, [r7, #0]
 80110b8:	6878      	ldr	r0, [r7, #4]
 80110ba:	f000 f840 	bl	801113e <USBD_CtlError>
      break;
 80110be:	e000      	b.n	80110c2 <USBD_ClrFeature+0x3c>
      break;
 80110c0:	bf00      	nop
  }
}
 80110c2:	bf00      	nop
 80110c4:	3708      	adds	r7, #8
 80110c6:	46bd      	mov	sp, r7
 80110c8:	bd80      	pop	{r7, pc}

080110ca <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80110ca:	b580      	push	{r7, lr}
 80110cc:	b084      	sub	sp, #16
 80110ce:	af00      	add	r7, sp, #0
 80110d0:	6078      	str	r0, [r7, #4]
 80110d2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80110d4:	683b      	ldr	r3, [r7, #0]
 80110d6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80110d8:	68fb      	ldr	r3, [r7, #12]
 80110da:	781a      	ldrb	r2, [r3, #0]
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80110e0:	68fb      	ldr	r3, [r7, #12]
 80110e2:	3301      	adds	r3, #1
 80110e4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80110e6:	68fb      	ldr	r3, [r7, #12]
 80110e8:	781a      	ldrb	r2, [r3, #0]
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80110ee:	68fb      	ldr	r3, [r7, #12]
 80110f0:	3301      	adds	r3, #1
 80110f2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80110f4:	68f8      	ldr	r0, [r7, #12]
 80110f6:	f7ff fa40 	bl	801057a <SWAPBYTE>
 80110fa:	4603      	mov	r3, r0
 80110fc:	461a      	mov	r2, r3
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8011102:	68fb      	ldr	r3, [r7, #12]
 8011104:	3301      	adds	r3, #1
 8011106:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8011108:	68fb      	ldr	r3, [r7, #12]
 801110a:	3301      	adds	r3, #1
 801110c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801110e:	68f8      	ldr	r0, [r7, #12]
 8011110:	f7ff fa33 	bl	801057a <SWAPBYTE>
 8011114:	4603      	mov	r3, r0
 8011116:	461a      	mov	r2, r3
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 801111c:	68fb      	ldr	r3, [r7, #12]
 801111e:	3301      	adds	r3, #1
 8011120:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8011122:	68fb      	ldr	r3, [r7, #12]
 8011124:	3301      	adds	r3, #1
 8011126:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8011128:	68f8      	ldr	r0, [r7, #12]
 801112a:	f7ff fa26 	bl	801057a <SWAPBYTE>
 801112e:	4603      	mov	r3, r0
 8011130:	461a      	mov	r2, r3
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	80da      	strh	r2, [r3, #6]
}
 8011136:	bf00      	nop
 8011138:	3710      	adds	r7, #16
 801113a:	46bd      	mov	sp, r7
 801113c:	bd80      	pop	{r7, pc}

0801113e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801113e:	b580      	push	{r7, lr}
 8011140:	b082      	sub	sp, #8
 8011142:	af00      	add	r7, sp, #0
 8011144:	6078      	str	r0, [r7, #4]
 8011146:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8011148:	2180      	movs	r1, #128	@ 0x80
 801114a:	6878      	ldr	r0, [r7, #4]
 801114c:	f000 fd4e 	bl	8011bec <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8011150:	2100      	movs	r1, #0
 8011152:	6878      	ldr	r0, [r7, #4]
 8011154:	f000 fd4a 	bl	8011bec <USBD_LL_StallEP>
}
 8011158:	bf00      	nop
 801115a:	3708      	adds	r7, #8
 801115c:	46bd      	mov	sp, r7
 801115e:	bd80      	pop	{r7, pc}

08011160 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8011160:	b580      	push	{r7, lr}
 8011162:	b086      	sub	sp, #24
 8011164:	af00      	add	r7, sp, #0
 8011166:	60f8      	str	r0, [r7, #12]
 8011168:	60b9      	str	r1, [r7, #8]
 801116a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801116c:	2300      	movs	r3, #0
 801116e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8011170:	68fb      	ldr	r3, [r7, #12]
 8011172:	2b00      	cmp	r3, #0
 8011174:	d042      	beq.n	80111fc <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8011176:	68fb      	ldr	r3, [r7, #12]
 8011178:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 801117a:	6938      	ldr	r0, [r7, #16]
 801117c:	f000 f842 	bl	8011204 <USBD_GetLen>
 8011180:	4603      	mov	r3, r0
 8011182:	3301      	adds	r3, #1
 8011184:	005b      	lsls	r3, r3, #1
 8011186:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801118a:	d808      	bhi.n	801119e <USBD_GetString+0x3e>
 801118c:	6938      	ldr	r0, [r7, #16]
 801118e:	f000 f839 	bl	8011204 <USBD_GetLen>
 8011192:	4603      	mov	r3, r0
 8011194:	3301      	adds	r3, #1
 8011196:	b29b      	uxth	r3, r3
 8011198:	005b      	lsls	r3, r3, #1
 801119a:	b29a      	uxth	r2, r3
 801119c:	e001      	b.n	80111a2 <USBD_GetString+0x42>
 801119e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80111a6:	7dfb      	ldrb	r3, [r7, #23]
 80111a8:	68ba      	ldr	r2, [r7, #8]
 80111aa:	4413      	add	r3, r2
 80111ac:	687a      	ldr	r2, [r7, #4]
 80111ae:	7812      	ldrb	r2, [r2, #0]
 80111b0:	701a      	strb	r2, [r3, #0]
  idx++;
 80111b2:	7dfb      	ldrb	r3, [r7, #23]
 80111b4:	3301      	adds	r3, #1
 80111b6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80111b8:	7dfb      	ldrb	r3, [r7, #23]
 80111ba:	68ba      	ldr	r2, [r7, #8]
 80111bc:	4413      	add	r3, r2
 80111be:	2203      	movs	r2, #3
 80111c0:	701a      	strb	r2, [r3, #0]
  idx++;
 80111c2:	7dfb      	ldrb	r3, [r7, #23]
 80111c4:	3301      	adds	r3, #1
 80111c6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80111c8:	e013      	b.n	80111f2 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 80111ca:	7dfb      	ldrb	r3, [r7, #23]
 80111cc:	68ba      	ldr	r2, [r7, #8]
 80111ce:	4413      	add	r3, r2
 80111d0:	693a      	ldr	r2, [r7, #16]
 80111d2:	7812      	ldrb	r2, [r2, #0]
 80111d4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80111d6:	693b      	ldr	r3, [r7, #16]
 80111d8:	3301      	adds	r3, #1
 80111da:	613b      	str	r3, [r7, #16]
    idx++;
 80111dc:	7dfb      	ldrb	r3, [r7, #23]
 80111de:	3301      	adds	r3, #1
 80111e0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80111e2:	7dfb      	ldrb	r3, [r7, #23]
 80111e4:	68ba      	ldr	r2, [r7, #8]
 80111e6:	4413      	add	r3, r2
 80111e8:	2200      	movs	r2, #0
 80111ea:	701a      	strb	r2, [r3, #0]
    idx++;
 80111ec:	7dfb      	ldrb	r3, [r7, #23]
 80111ee:	3301      	adds	r3, #1
 80111f0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80111f2:	693b      	ldr	r3, [r7, #16]
 80111f4:	781b      	ldrb	r3, [r3, #0]
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	d1e7      	bne.n	80111ca <USBD_GetString+0x6a>
 80111fa:	e000      	b.n	80111fe <USBD_GetString+0x9e>
    return;
 80111fc:	bf00      	nop
  }
}
 80111fe:	3718      	adds	r7, #24
 8011200:	46bd      	mov	sp, r7
 8011202:	bd80      	pop	{r7, pc}

08011204 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8011204:	b480      	push	{r7}
 8011206:	b085      	sub	sp, #20
 8011208:	af00      	add	r7, sp, #0
 801120a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801120c:	2300      	movs	r3, #0
 801120e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8011214:	e005      	b.n	8011222 <USBD_GetLen+0x1e>
  {
    len++;
 8011216:	7bfb      	ldrb	r3, [r7, #15]
 8011218:	3301      	adds	r3, #1
 801121a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801121c:	68bb      	ldr	r3, [r7, #8]
 801121e:	3301      	adds	r3, #1
 8011220:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8011222:	68bb      	ldr	r3, [r7, #8]
 8011224:	781b      	ldrb	r3, [r3, #0]
 8011226:	2b00      	cmp	r3, #0
 8011228:	d1f5      	bne.n	8011216 <USBD_GetLen+0x12>
  }

  return len;
 801122a:	7bfb      	ldrb	r3, [r7, #15]
}
 801122c:	4618      	mov	r0, r3
 801122e:	3714      	adds	r7, #20
 8011230:	46bd      	mov	sp, r7
 8011232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011236:	4770      	bx	lr

08011238 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8011238:	b580      	push	{r7, lr}
 801123a:	b084      	sub	sp, #16
 801123c:	af00      	add	r7, sp, #0
 801123e:	60f8      	str	r0, [r7, #12]
 8011240:	60b9      	str	r1, [r7, #8]
 8011242:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8011244:	68fb      	ldr	r3, [r7, #12]
 8011246:	2202      	movs	r2, #2
 8011248:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 801124c:	68fb      	ldr	r3, [r7, #12]
 801124e:	687a      	ldr	r2, [r7, #4]
 8011250:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8011252:	68fb      	ldr	r3, [r7, #12]
 8011254:	687a      	ldr	r2, [r7, #4]
 8011256:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	68ba      	ldr	r2, [r7, #8]
 801125c:	2100      	movs	r1, #0
 801125e:	68f8      	ldr	r0, [r7, #12]
 8011260:	f000 fd4d 	bl	8011cfe <USBD_LL_Transmit>

  return USBD_OK;
 8011264:	2300      	movs	r3, #0
}
 8011266:	4618      	mov	r0, r3
 8011268:	3710      	adds	r7, #16
 801126a:	46bd      	mov	sp, r7
 801126c:	bd80      	pop	{r7, pc}

0801126e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801126e:	b580      	push	{r7, lr}
 8011270:	b084      	sub	sp, #16
 8011272:	af00      	add	r7, sp, #0
 8011274:	60f8      	str	r0, [r7, #12]
 8011276:	60b9      	str	r1, [r7, #8]
 8011278:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	68ba      	ldr	r2, [r7, #8]
 801127e:	2100      	movs	r1, #0
 8011280:	68f8      	ldr	r0, [r7, #12]
 8011282:	f000 fd3c 	bl	8011cfe <USBD_LL_Transmit>

  return USBD_OK;
 8011286:	2300      	movs	r3, #0
}
 8011288:	4618      	mov	r0, r3
 801128a:	3710      	adds	r7, #16
 801128c:	46bd      	mov	sp, r7
 801128e:	bd80      	pop	{r7, pc}

08011290 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8011290:	b580      	push	{r7, lr}
 8011292:	b084      	sub	sp, #16
 8011294:	af00      	add	r7, sp, #0
 8011296:	60f8      	str	r0, [r7, #12]
 8011298:	60b9      	str	r1, [r7, #8]
 801129a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801129c:	68fb      	ldr	r3, [r7, #12]
 801129e:	2203      	movs	r2, #3
 80112a0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80112a4:	68fb      	ldr	r3, [r7, #12]
 80112a6:	687a      	ldr	r2, [r7, #4]
 80112a8:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80112ac:	68fb      	ldr	r3, [r7, #12]
 80112ae:	687a      	ldr	r2, [r7, #4]
 80112b0:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	68ba      	ldr	r2, [r7, #8]
 80112b8:	2100      	movs	r1, #0
 80112ba:	68f8      	ldr	r0, [r7, #12]
 80112bc:	f000 fd40 	bl	8011d40 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80112c0:	2300      	movs	r3, #0
}
 80112c2:	4618      	mov	r0, r3
 80112c4:	3710      	adds	r7, #16
 80112c6:	46bd      	mov	sp, r7
 80112c8:	bd80      	pop	{r7, pc}

080112ca <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80112ca:	b580      	push	{r7, lr}
 80112cc:	b084      	sub	sp, #16
 80112ce:	af00      	add	r7, sp, #0
 80112d0:	60f8      	str	r0, [r7, #12]
 80112d2:	60b9      	str	r1, [r7, #8]
 80112d4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	68ba      	ldr	r2, [r7, #8]
 80112da:	2100      	movs	r1, #0
 80112dc:	68f8      	ldr	r0, [r7, #12]
 80112de:	f000 fd2f 	bl	8011d40 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80112e2:	2300      	movs	r3, #0
}
 80112e4:	4618      	mov	r0, r3
 80112e6:	3710      	adds	r7, #16
 80112e8:	46bd      	mov	sp, r7
 80112ea:	bd80      	pop	{r7, pc}

080112ec <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80112ec:	b580      	push	{r7, lr}
 80112ee:	b082      	sub	sp, #8
 80112f0:	af00      	add	r7, sp, #0
 80112f2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	2204      	movs	r2, #4
 80112f8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80112fc:	2300      	movs	r3, #0
 80112fe:	2200      	movs	r2, #0
 8011300:	2100      	movs	r1, #0
 8011302:	6878      	ldr	r0, [r7, #4]
 8011304:	f000 fcfb 	bl	8011cfe <USBD_LL_Transmit>

  return USBD_OK;
 8011308:	2300      	movs	r3, #0
}
 801130a:	4618      	mov	r0, r3
 801130c:	3708      	adds	r7, #8
 801130e:	46bd      	mov	sp, r7
 8011310:	bd80      	pop	{r7, pc}

08011312 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8011312:	b580      	push	{r7, lr}
 8011314:	b082      	sub	sp, #8
 8011316:	af00      	add	r7, sp, #0
 8011318:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	2205      	movs	r2, #5
 801131e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011322:	2300      	movs	r3, #0
 8011324:	2200      	movs	r2, #0
 8011326:	2100      	movs	r1, #0
 8011328:	6878      	ldr	r0, [r7, #4]
 801132a:	f000 fd09 	bl	8011d40 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801132e:	2300      	movs	r3, #0
}
 8011330:	4618      	mov	r0, r3
 8011332:	3708      	adds	r7, #8
 8011334:	46bd      	mov	sp, r7
 8011336:	bd80      	pop	{r7, pc}

08011338 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8011338:	b580      	push	{r7, lr}
 801133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801133c:	2200      	movs	r2, #0
 801133e:	4912      	ldr	r1, [pc, #72]	@ (8011388 <MX_USB_DEVICE_Init+0x50>)
 8011340:	4812      	ldr	r0, [pc, #72]	@ (801138c <MX_USB_DEVICE_Init+0x54>)
 8011342:	f7fe fcf7 	bl	800fd34 <USBD_Init>
 8011346:	4603      	mov	r3, r0
 8011348:	2b00      	cmp	r3, #0
 801134a:	d001      	beq.n	8011350 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801134c:	f7f3 fabe 	bl	80048cc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8011350:	490f      	ldr	r1, [pc, #60]	@ (8011390 <MX_USB_DEVICE_Init+0x58>)
 8011352:	480e      	ldr	r0, [pc, #56]	@ (801138c <MX_USB_DEVICE_Init+0x54>)
 8011354:	f7fe fd1e 	bl	800fd94 <USBD_RegisterClass>
 8011358:	4603      	mov	r3, r0
 801135a:	2b00      	cmp	r3, #0
 801135c:	d001      	beq.n	8011362 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801135e:	f7f3 fab5 	bl	80048cc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8011362:	490c      	ldr	r1, [pc, #48]	@ (8011394 <MX_USB_DEVICE_Init+0x5c>)
 8011364:	4809      	ldr	r0, [pc, #36]	@ (801138c <MX_USB_DEVICE_Init+0x54>)
 8011366:	f7fe fc15 	bl	800fb94 <USBD_CDC_RegisterInterface>
 801136a:	4603      	mov	r3, r0
 801136c:	2b00      	cmp	r3, #0
 801136e:	d001      	beq.n	8011374 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8011370:	f7f3 faac 	bl	80048cc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8011374:	4805      	ldr	r0, [pc, #20]	@ (801138c <MX_USB_DEVICE_Init+0x54>)
 8011376:	f7fe fd43 	bl	800fe00 <USBD_Start>
 801137a:	4603      	mov	r3, r0
 801137c:	2b00      	cmp	r3, #0
 801137e:	d001      	beq.n	8011384 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8011380:	f7f3 faa4 	bl	80048cc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8011384:	bf00      	nop
 8011386:	bd80      	pop	{r7, pc}
 8011388:	200000c8 	.word	0x200000c8
 801138c:	200016ec 	.word	0x200016ec
 8011390:	2000002c 	.word	0x2000002c
 8011394:	200000b4 	.word	0x200000b4

08011398 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8011398:	b580      	push	{r7, lr}
 801139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801139c:	2200      	movs	r2, #0
 801139e:	4905      	ldr	r1, [pc, #20]	@ (80113b4 <CDC_Init_FS+0x1c>)
 80113a0:	4805      	ldr	r0, [pc, #20]	@ (80113b8 <CDC_Init_FS+0x20>)
 80113a2:	f7fe fc11 	bl	800fbc8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80113a6:	4905      	ldr	r1, [pc, #20]	@ (80113bc <CDC_Init_FS+0x24>)
 80113a8:	4803      	ldr	r0, [pc, #12]	@ (80113b8 <CDC_Init_FS+0x20>)
 80113aa:	f7fe fc2f 	bl	800fc0c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80113ae:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80113b0:	4618      	mov	r0, r3
 80113b2:	bd80      	pop	{r7, pc}
 80113b4:	20001bc8 	.word	0x20001bc8
 80113b8:	200016ec 	.word	0x200016ec
 80113bc:	200019c8 	.word	0x200019c8

080113c0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80113c0:	b480      	push	{r7}
 80113c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80113c4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80113c6:	4618      	mov	r0, r3
 80113c8:	46bd      	mov	sp, r7
 80113ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113ce:	4770      	bx	lr

080113d0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80113d0:	b480      	push	{r7}
 80113d2:	b083      	sub	sp, #12
 80113d4:	af00      	add	r7, sp, #0
 80113d6:	4603      	mov	r3, r0
 80113d8:	6039      	str	r1, [r7, #0]
 80113da:	71fb      	strb	r3, [r7, #7]
 80113dc:	4613      	mov	r3, r2
 80113de:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80113e0:	79fb      	ldrb	r3, [r7, #7]
 80113e2:	2b23      	cmp	r3, #35	@ 0x23
 80113e4:	f200 8097 	bhi.w	8011516 <CDC_Control_FS+0x146>
 80113e8:	a201      	add	r2, pc, #4	@ (adr r2, 80113f0 <CDC_Control_FS+0x20>)
 80113ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113ee:	bf00      	nop
 80113f0:	08011517 	.word	0x08011517
 80113f4:	08011517 	.word	0x08011517
 80113f8:	08011517 	.word	0x08011517
 80113fc:	08011517 	.word	0x08011517
 8011400:	08011517 	.word	0x08011517
 8011404:	08011517 	.word	0x08011517
 8011408:	08011517 	.word	0x08011517
 801140c:	08011517 	.word	0x08011517
 8011410:	08011517 	.word	0x08011517
 8011414:	08011517 	.word	0x08011517
 8011418:	08011517 	.word	0x08011517
 801141c:	08011517 	.word	0x08011517
 8011420:	08011517 	.word	0x08011517
 8011424:	08011517 	.word	0x08011517
 8011428:	08011517 	.word	0x08011517
 801142c:	08011517 	.word	0x08011517
 8011430:	08011517 	.word	0x08011517
 8011434:	08011517 	.word	0x08011517
 8011438:	08011517 	.word	0x08011517
 801143c:	08011517 	.word	0x08011517
 8011440:	08011517 	.word	0x08011517
 8011444:	08011517 	.word	0x08011517
 8011448:	08011517 	.word	0x08011517
 801144c:	08011517 	.word	0x08011517
 8011450:	08011517 	.word	0x08011517
 8011454:	08011517 	.word	0x08011517
 8011458:	08011517 	.word	0x08011517
 801145c:	08011517 	.word	0x08011517
 8011460:	08011517 	.word	0x08011517
 8011464:	08011517 	.word	0x08011517
 8011468:	08011517 	.word	0x08011517
 801146c:	08011517 	.word	0x08011517
 8011470:	08011481 	.word	0x08011481
 8011474:	080114c3 	.word	0x080114c3
 8011478:	08011517 	.word	0x08011517
 801147c:	08011517 	.word	0x08011517
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	LineCoding.bitrate = (uint32_t)(pbuf[0]) | (pbuf[1] << 8) | (pbuf[2] << 16) | (pbuf[3] << 24);
 8011480:	683b      	ldr	r3, [r7, #0]
 8011482:	781b      	ldrb	r3, [r3, #0]
 8011484:	461a      	mov	r2, r3
 8011486:	683b      	ldr	r3, [r7, #0]
 8011488:	3301      	adds	r3, #1
 801148a:	781b      	ldrb	r3, [r3, #0]
 801148c:	021b      	lsls	r3, r3, #8
 801148e:	431a      	orrs	r2, r3
 8011490:	683b      	ldr	r3, [r7, #0]
 8011492:	3302      	adds	r3, #2
 8011494:	781b      	ldrb	r3, [r3, #0]
 8011496:	041b      	lsls	r3, r3, #16
 8011498:	431a      	orrs	r2, r3
 801149a:	683b      	ldr	r3, [r7, #0]
 801149c:	3303      	adds	r3, #3
 801149e:	781b      	ldrb	r3, [r3, #0]
 80114a0:	061b      	lsls	r3, r3, #24
 80114a2:	4313      	orrs	r3, r2
 80114a4:	4a20      	ldr	r2, [pc, #128]	@ (8011528 <CDC_Control_FS+0x158>)
 80114a6:	6013      	str	r3, [r2, #0]
		LineCoding.format = pbuf[4];
 80114a8:	683b      	ldr	r3, [r7, #0]
 80114aa:	791a      	ldrb	r2, [r3, #4]
 80114ac:	4b1e      	ldr	r3, [pc, #120]	@ (8011528 <CDC_Control_FS+0x158>)
 80114ae:	711a      	strb	r2, [r3, #4]
		LineCoding.paritytype = pbuf[5];
 80114b0:	683b      	ldr	r3, [r7, #0]
 80114b2:	795a      	ldrb	r2, [r3, #5]
 80114b4:	4b1c      	ldr	r3, [pc, #112]	@ (8011528 <CDC_Control_FS+0x158>)
 80114b6:	715a      	strb	r2, [r3, #5]
		LineCoding.datatype = pbuf[6];
 80114b8:	683b      	ldr	r3, [r7, #0]
 80114ba:	799a      	ldrb	r2, [r3, #6]
 80114bc:	4b1a      	ldr	r3, [pc, #104]	@ (8011528 <CDC_Control_FS+0x158>)
 80114be:	719a      	strb	r2, [r3, #6]
    break;
 80114c0:	e02a      	b.n	8011518 <CDC_Control_FS+0x148>

    case CDC_GET_LINE_CODING:
    	pbuf[0] = (uint8_t)(LineCoding.bitrate);
 80114c2:	4b19      	ldr	r3, [pc, #100]	@ (8011528 <CDC_Control_FS+0x158>)
 80114c4:	681b      	ldr	r3, [r3, #0]
 80114c6:	b2da      	uxtb	r2, r3
 80114c8:	683b      	ldr	r3, [r7, #0]
 80114ca:	701a      	strb	r2, [r3, #0]
    	pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 80114cc:	4b16      	ldr	r3, [pc, #88]	@ (8011528 <CDC_Control_FS+0x158>)
 80114ce:	681b      	ldr	r3, [r3, #0]
 80114d0:	0a1a      	lsrs	r2, r3, #8
 80114d2:	683b      	ldr	r3, [r7, #0]
 80114d4:	3301      	adds	r3, #1
 80114d6:	b2d2      	uxtb	r2, r2
 80114d8:	701a      	strb	r2, [r3, #0]
    	pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 80114da:	4b13      	ldr	r3, [pc, #76]	@ (8011528 <CDC_Control_FS+0x158>)
 80114dc:	681b      	ldr	r3, [r3, #0]
 80114de:	0c1a      	lsrs	r2, r3, #16
 80114e0:	683b      	ldr	r3, [r7, #0]
 80114e2:	3302      	adds	r3, #2
 80114e4:	b2d2      	uxtb	r2, r2
 80114e6:	701a      	strb	r2, [r3, #0]
    	pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 80114e8:	4b0f      	ldr	r3, [pc, #60]	@ (8011528 <CDC_Control_FS+0x158>)
 80114ea:	681b      	ldr	r3, [r3, #0]
 80114ec:	0e1a      	lsrs	r2, r3, #24
 80114ee:	683b      	ldr	r3, [r7, #0]
 80114f0:	3303      	adds	r3, #3
 80114f2:	b2d2      	uxtb	r2, r2
 80114f4:	701a      	strb	r2, [r3, #0]
    	pbuf[4] = LineCoding.format;
 80114f6:	683b      	ldr	r3, [r7, #0]
 80114f8:	3304      	adds	r3, #4
 80114fa:	4a0b      	ldr	r2, [pc, #44]	@ (8011528 <CDC_Control_FS+0x158>)
 80114fc:	7912      	ldrb	r2, [r2, #4]
 80114fe:	701a      	strb	r2, [r3, #0]
    	pbuf[5] = LineCoding.paritytype;
 8011500:	683b      	ldr	r3, [r7, #0]
 8011502:	3305      	adds	r3, #5
 8011504:	4a08      	ldr	r2, [pc, #32]	@ (8011528 <CDC_Control_FS+0x158>)
 8011506:	7952      	ldrb	r2, [r2, #5]
 8011508:	701a      	strb	r2, [r3, #0]
    	pbuf[6] = LineCoding.datatype;
 801150a:	683b      	ldr	r3, [r7, #0]
 801150c:	3306      	adds	r3, #6
 801150e:	4a06      	ldr	r2, [pc, #24]	@ (8011528 <CDC_Control_FS+0x158>)
 8011510:	7992      	ldrb	r2, [r2, #6]
 8011512:	701a      	strb	r2, [r3, #0]
	break;
 8011514:	e000      	b.n	8011518 <CDC_Control_FS+0x148>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8011516:	bf00      	nop
  }

  return (USBD_OK);
 8011518:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801151a:	4618      	mov	r0, r3
 801151c:	370c      	adds	r7, #12
 801151e:	46bd      	mov	sp, r7
 8011520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011524:	4770      	bx	lr
 8011526:	bf00      	nop
 8011528:	200000ac 	.word	0x200000ac

0801152c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801152c:	b580      	push	{r7, lr}
 801152e:	b082      	sub	sp, #8
 8011530:	af00      	add	r7, sp, #0
 8011532:	6078      	str	r0, [r7, #4]
 8011534:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	if(dataOnRx != NULL){
 8011536:	4b0b      	ldr	r3, [pc, #44]	@ (8011564 <CDC_Receive_FS+0x38>)
 8011538:	681b      	ldr	r3, [r3, #0]
 801153a:	2b00      	cmp	r3, #0
 801153c:	d006      	beq.n	801154c <CDC_Receive_FS+0x20>
		dataOnRx(Buf, *Len);
 801153e:	4b09      	ldr	r3, [pc, #36]	@ (8011564 <CDC_Receive_FS+0x38>)
 8011540:	681b      	ldr	r3, [r3, #0]
 8011542:	683a      	ldr	r2, [r7, #0]
 8011544:	6812      	ldr	r2, [r2, #0]
 8011546:	4611      	mov	r1, r2
 8011548:	6878      	ldr	r0, [r7, #4]
 801154a:	4798      	blx	r3
	}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801154c:	6879      	ldr	r1, [r7, #4]
 801154e:	4806      	ldr	r0, [pc, #24]	@ (8011568 <CDC_Receive_FS+0x3c>)
 8011550:	f7fe fb5c 	bl	800fc0c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8011554:	4804      	ldr	r0, [pc, #16]	@ (8011568 <CDC_Receive_FS+0x3c>)
 8011556:	f7fe fbb7 	bl	800fcc8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 801155a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801155c:	4618      	mov	r0, r3
 801155e:	3708      	adds	r7, #8
 8011560:	46bd      	mov	sp, r7
 8011562:	bd80      	pop	{r7, pc}
 8011564:	20001dc8 	.word	0x20001dc8
 8011568:	200016ec 	.word	0x200016ec

0801156c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801156c:	b580      	push	{r7, lr}
 801156e:	b084      	sub	sp, #16
 8011570:	af00      	add	r7, sp, #0
 8011572:	6078      	str	r0, [r7, #4]
 8011574:	460b      	mov	r3, r1
 8011576:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8011578:	2300      	movs	r3, #0
 801157a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 801157c:	4b0d      	ldr	r3, [pc, #52]	@ (80115b4 <CDC_Transmit_FS+0x48>)
 801157e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8011582:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8011584:	68bb      	ldr	r3, [r7, #8]
 8011586:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 801158a:	2b00      	cmp	r3, #0
 801158c:	d001      	beq.n	8011592 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 801158e:	2301      	movs	r3, #1
 8011590:	e00b      	b.n	80115aa <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8011592:	887b      	ldrh	r3, [r7, #2]
 8011594:	461a      	mov	r2, r3
 8011596:	6879      	ldr	r1, [r7, #4]
 8011598:	4806      	ldr	r0, [pc, #24]	@ (80115b4 <CDC_Transmit_FS+0x48>)
 801159a:	f7fe fb15 	bl	800fbc8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801159e:	4805      	ldr	r0, [pc, #20]	@ (80115b4 <CDC_Transmit_FS+0x48>)
 80115a0:	f7fe fb52 	bl	800fc48 <USBD_CDC_TransmitPacket>
 80115a4:	4603      	mov	r3, r0
 80115a6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80115a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80115aa:	4618      	mov	r0, r3
 80115ac:	3710      	adds	r7, #16
 80115ae:	46bd      	mov	sp, r7
 80115b0:	bd80      	pop	{r7, pc}
 80115b2:	bf00      	nop
 80115b4:	200016ec 	.word	0x200016ec

080115b8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80115b8:	b480      	push	{r7}
 80115ba:	b087      	sub	sp, #28
 80115bc:	af00      	add	r7, sp, #0
 80115be:	60f8      	str	r0, [r7, #12]
 80115c0:	60b9      	str	r1, [r7, #8]
 80115c2:	4613      	mov	r3, r2
 80115c4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80115c6:	2300      	movs	r3, #0
 80115c8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80115ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80115ce:	4618      	mov	r0, r3
 80115d0:	371c      	adds	r7, #28
 80115d2:	46bd      	mov	sp, r7
 80115d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115d8:	4770      	bx	lr
	...

080115dc <CDC_Attach_Rx>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void CDC_Attach_Rx(void (*RxData)(uint8_t* buf, uint32_t len)){
 80115dc:	b480      	push	{r7}
 80115de:	b083      	sub	sp, #12
 80115e0:	af00      	add	r7, sp, #0
 80115e2:	6078      	str	r0, [r7, #4]
	dataOnRx = RxData;
 80115e4:	4a04      	ldr	r2, [pc, #16]	@ (80115f8 <CDC_Attach_Rx+0x1c>)
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	6013      	str	r3, [r2, #0]
}
 80115ea:	bf00      	nop
 80115ec:	370c      	adds	r7, #12
 80115ee:	46bd      	mov	sp, r7
 80115f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115f4:	4770      	bx	lr
 80115f6:	bf00      	nop
 80115f8:	20001dc8 	.word	0x20001dc8

080115fc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80115fc:	b480      	push	{r7}
 80115fe:	b083      	sub	sp, #12
 8011600:	af00      	add	r7, sp, #0
 8011602:	4603      	mov	r3, r0
 8011604:	6039      	str	r1, [r7, #0]
 8011606:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8011608:	683b      	ldr	r3, [r7, #0]
 801160a:	2212      	movs	r2, #18
 801160c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801160e:	4b03      	ldr	r3, [pc, #12]	@ (801161c <USBD_FS_DeviceDescriptor+0x20>)
}
 8011610:	4618      	mov	r0, r3
 8011612:	370c      	adds	r7, #12
 8011614:	46bd      	mov	sp, r7
 8011616:	f85d 7b04 	ldr.w	r7, [sp], #4
 801161a:	4770      	bx	lr
 801161c:	200000e4 	.word	0x200000e4

08011620 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011620:	b480      	push	{r7}
 8011622:	b083      	sub	sp, #12
 8011624:	af00      	add	r7, sp, #0
 8011626:	4603      	mov	r3, r0
 8011628:	6039      	str	r1, [r7, #0]
 801162a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801162c:	683b      	ldr	r3, [r7, #0]
 801162e:	2204      	movs	r2, #4
 8011630:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8011632:	4b03      	ldr	r3, [pc, #12]	@ (8011640 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8011634:	4618      	mov	r0, r3
 8011636:	370c      	adds	r7, #12
 8011638:	46bd      	mov	sp, r7
 801163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801163e:	4770      	bx	lr
 8011640:	200000f8 	.word	0x200000f8

08011644 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011644:	b580      	push	{r7, lr}
 8011646:	b082      	sub	sp, #8
 8011648:	af00      	add	r7, sp, #0
 801164a:	4603      	mov	r3, r0
 801164c:	6039      	str	r1, [r7, #0]
 801164e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011650:	79fb      	ldrb	r3, [r7, #7]
 8011652:	2b00      	cmp	r3, #0
 8011654:	d105      	bne.n	8011662 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8011656:	683a      	ldr	r2, [r7, #0]
 8011658:	4907      	ldr	r1, [pc, #28]	@ (8011678 <USBD_FS_ProductStrDescriptor+0x34>)
 801165a:	4808      	ldr	r0, [pc, #32]	@ (801167c <USBD_FS_ProductStrDescriptor+0x38>)
 801165c:	f7ff fd80 	bl	8011160 <USBD_GetString>
 8011660:	e004      	b.n	801166c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8011662:	683a      	ldr	r2, [r7, #0]
 8011664:	4904      	ldr	r1, [pc, #16]	@ (8011678 <USBD_FS_ProductStrDescriptor+0x34>)
 8011666:	4805      	ldr	r0, [pc, #20]	@ (801167c <USBD_FS_ProductStrDescriptor+0x38>)
 8011668:	f7ff fd7a 	bl	8011160 <USBD_GetString>
  }
  return USBD_StrDesc;
 801166c:	4b02      	ldr	r3, [pc, #8]	@ (8011678 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801166e:	4618      	mov	r0, r3
 8011670:	3708      	adds	r7, #8
 8011672:	46bd      	mov	sp, r7
 8011674:	bd80      	pop	{r7, pc}
 8011676:	bf00      	nop
 8011678:	20001dcc 	.word	0x20001dcc
 801167c:	08012c28 	.word	0x08012c28

08011680 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011680:	b580      	push	{r7, lr}
 8011682:	b082      	sub	sp, #8
 8011684:	af00      	add	r7, sp, #0
 8011686:	4603      	mov	r3, r0
 8011688:	6039      	str	r1, [r7, #0]
 801168a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801168c:	683a      	ldr	r2, [r7, #0]
 801168e:	4904      	ldr	r1, [pc, #16]	@ (80116a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8011690:	4804      	ldr	r0, [pc, #16]	@ (80116a4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8011692:	f7ff fd65 	bl	8011160 <USBD_GetString>
  return USBD_StrDesc;
 8011696:	4b02      	ldr	r3, [pc, #8]	@ (80116a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8011698:	4618      	mov	r0, r3
 801169a:	3708      	adds	r7, #8
 801169c:	46bd      	mov	sp, r7
 801169e:	bd80      	pop	{r7, pc}
 80116a0:	20001dcc 	.word	0x20001dcc
 80116a4:	08012c40 	.word	0x08012c40

080116a8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80116a8:	b580      	push	{r7, lr}
 80116aa:	b082      	sub	sp, #8
 80116ac:	af00      	add	r7, sp, #0
 80116ae:	4603      	mov	r3, r0
 80116b0:	6039      	str	r1, [r7, #0]
 80116b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80116b4:	683b      	ldr	r3, [r7, #0]
 80116b6:	221a      	movs	r2, #26
 80116b8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80116ba:	f000 f843 	bl	8011744 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80116be:	4b02      	ldr	r3, [pc, #8]	@ (80116c8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80116c0:	4618      	mov	r0, r3
 80116c2:	3708      	adds	r7, #8
 80116c4:	46bd      	mov	sp, r7
 80116c6:	bd80      	pop	{r7, pc}
 80116c8:	200000fc 	.word	0x200000fc

080116cc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80116cc:	b580      	push	{r7, lr}
 80116ce:	b082      	sub	sp, #8
 80116d0:	af00      	add	r7, sp, #0
 80116d2:	4603      	mov	r3, r0
 80116d4:	6039      	str	r1, [r7, #0]
 80116d6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80116d8:	79fb      	ldrb	r3, [r7, #7]
 80116da:	2b00      	cmp	r3, #0
 80116dc:	d105      	bne.n	80116ea <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80116de:	683a      	ldr	r2, [r7, #0]
 80116e0:	4907      	ldr	r1, [pc, #28]	@ (8011700 <USBD_FS_ConfigStrDescriptor+0x34>)
 80116e2:	4808      	ldr	r0, [pc, #32]	@ (8011704 <USBD_FS_ConfigStrDescriptor+0x38>)
 80116e4:	f7ff fd3c 	bl	8011160 <USBD_GetString>
 80116e8:	e004      	b.n	80116f4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80116ea:	683a      	ldr	r2, [r7, #0]
 80116ec:	4904      	ldr	r1, [pc, #16]	@ (8011700 <USBD_FS_ConfigStrDescriptor+0x34>)
 80116ee:	4805      	ldr	r0, [pc, #20]	@ (8011704 <USBD_FS_ConfigStrDescriptor+0x38>)
 80116f0:	f7ff fd36 	bl	8011160 <USBD_GetString>
  }
  return USBD_StrDesc;
 80116f4:	4b02      	ldr	r3, [pc, #8]	@ (8011700 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80116f6:	4618      	mov	r0, r3
 80116f8:	3708      	adds	r7, #8
 80116fa:	46bd      	mov	sp, r7
 80116fc:	bd80      	pop	{r7, pc}
 80116fe:	bf00      	nop
 8011700:	20001dcc 	.word	0x20001dcc
 8011704:	08012c54 	.word	0x08012c54

08011708 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011708:	b580      	push	{r7, lr}
 801170a:	b082      	sub	sp, #8
 801170c:	af00      	add	r7, sp, #0
 801170e:	4603      	mov	r3, r0
 8011710:	6039      	str	r1, [r7, #0]
 8011712:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011714:	79fb      	ldrb	r3, [r7, #7]
 8011716:	2b00      	cmp	r3, #0
 8011718:	d105      	bne.n	8011726 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801171a:	683a      	ldr	r2, [r7, #0]
 801171c:	4907      	ldr	r1, [pc, #28]	@ (801173c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801171e:	4808      	ldr	r0, [pc, #32]	@ (8011740 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8011720:	f7ff fd1e 	bl	8011160 <USBD_GetString>
 8011724:	e004      	b.n	8011730 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8011726:	683a      	ldr	r2, [r7, #0]
 8011728:	4904      	ldr	r1, [pc, #16]	@ (801173c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801172a:	4805      	ldr	r0, [pc, #20]	@ (8011740 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801172c:	f7ff fd18 	bl	8011160 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011730:	4b02      	ldr	r3, [pc, #8]	@ (801173c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8011732:	4618      	mov	r0, r3
 8011734:	3708      	adds	r7, #8
 8011736:	46bd      	mov	sp, r7
 8011738:	bd80      	pop	{r7, pc}
 801173a:	bf00      	nop
 801173c:	20001dcc 	.word	0x20001dcc
 8011740:	08012c60 	.word	0x08012c60

08011744 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8011744:	b580      	push	{r7, lr}
 8011746:	b084      	sub	sp, #16
 8011748:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801174a:	4b0f      	ldr	r3, [pc, #60]	@ (8011788 <Get_SerialNum+0x44>)
 801174c:	681b      	ldr	r3, [r3, #0]
 801174e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8011750:	4b0e      	ldr	r3, [pc, #56]	@ (801178c <Get_SerialNum+0x48>)
 8011752:	681b      	ldr	r3, [r3, #0]
 8011754:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8011756:	4b0e      	ldr	r3, [pc, #56]	@ (8011790 <Get_SerialNum+0x4c>)
 8011758:	681b      	ldr	r3, [r3, #0]
 801175a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801175c:	68fa      	ldr	r2, [r7, #12]
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	4413      	add	r3, r2
 8011762:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8011764:	68fb      	ldr	r3, [r7, #12]
 8011766:	2b00      	cmp	r3, #0
 8011768:	d009      	beq.n	801177e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801176a:	2208      	movs	r2, #8
 801176c:	4909      	ldr	r1, [pc, #36]	@ (8011794 <Get_SerialNum+0x50>)
 801176e:	68f8      	ldr	r0, [r7, #12]
 8011770:	f000 f814 	bl	801179c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8011774:	2204      	movs	r2, #4
 8011776:	4908      	ldr	r1, [pc, #32]	@ (8011798 <Get_SerialNum+0x54>)
 8011778:	68b8      	ldr	r0, [r7, #8]
 801177a:	f000 f80f 	bl	801179c <IntToUnicode>
  }
}
 801177e:	bf00      	nop
 8011780:	3710      	adds	r7, #16
 8011782:	46bd      	mov	sp, r7
 8011784:	bd80      	pop	{r7, pc}
 8011786:	bf00      	nop
 8011788:	1fff7a10 	.word	0x1fff7a10
 801178c:	1fff7a14 	.word	0x1fff7a14
 8011790:	1fff7a18 	.word	0x1fff7a18
 8011794:	200000fe 	.word	0x200000fe
 8011798:	2000010e 	.word	0x2000010e

0801179c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801179c:	b480      	push	{r7}
 801179e:	b087      	sub	sp, #28
 80117a0:	af00      	add	r7, sp, #0
 80117a2:	60f8      	str	r0, [r7, #12]
 80117a4:	60b9      	str	r1, [r7, #8]
 80117a6:	4613      	mov	r3, r2
 80117a8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80117aa:	2300      	movs	r3, #0
 80117ac:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80117ae:	2300      	movs	r3, #0
 80117b0:	75fb      	strb	r3, [r7, #23]
 80117b2:	e027      	b.n	8011804 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80117b4:	68fb      	ldr	r3, [r7, #12]
 80117b6:	0f1b      	lsrs	r3, r3, #28
 80117b8:	2b09      	cmp	r3, #9
 80117ba:	d80b      	bhi.n	80117d4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80117bc:	68fb      	ldr	r3, [r7, #12]
 80117be:	0f1b      	lsrs	r3, r3, #28
 80117c0:	b2da      	uxtb	r2, r3
 80117c2:	7dfb      	ldrb	r3, [r7, #23]
 80117c4:	005b      	lsls	r3, r3, #1
 80117c6:	4619      	mov	r1, r3
 80117c8:	68bb      	ldr	r3, [r7, #8]
 80117ca:	440b      	add	r3, r1
 80117cc:	3230      	adds	r2, #48	@ 0x30
 80117ce:	b2d2      	uxtb	r2, r2
 80117d0:	701a      	strb	r2, [r3, #0]
 80117d2:	e00a      	b.n	80117ea <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80117d4:	68fb      	ldr	r3, [r7, #12]
 80117d6:	0f1b      	lsrs	r3, r3, #28
 80117d8:	b2da      	uxtb	r2, r3
 80117da:	7dfb      	ldrb	r3, [r7, #23]
 80117dc:	005b      	lsls	r3, r3, #1
 80117de:	4619      	mov	r1, r3
 80117e0:	68bb      	ldr	r3, [r7, #8]
 80117e2:	440b      	add	r3, r1
 80117e4:	3237      	adds	r2, #55	@ 0x37
 80117e6:	b2d2      	uxtb	r2, r2
 80117e8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80117ea:	68fb      	ldr	r3, [r7, #12]
 80117ec:	011b      	lsls	r3, r3, #4
 80117ee:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80117f0:	7dfb      	ldrb	r3, [r7, #23]
 80117f2:	005b      	lsls	r3, r3, #1
 80117f4:	3301      	adds	r3, #1
 80117f6:	68ba      	ldr	r2, [r7, #8]
 80117f8:	4413      	add	r3, r2
 80117fa:	2200      	movs	r2, #0
 80117fc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80117fe:	7dfb      	ldrb	r3, [r7, #23]
 8011800:	3301      	adds	r3, #1
 8011802:	75fb      	strb	r3, [r7, #23]
 8011804:	7dfa      	ldrb	r2, [r7, #23]
 8011806:	79fb      	ldrb	r3, [r7, #7]
 8011808:	429a      	cmp	r2, r3
 801180a:	d3d3      	bcc.n	80117b4 <IntToUnicode+0x18>
  }
}
 801180c:	bf00      	nop
 801180e:	bf00      	nop
 8011810:	371c      	adds	r7, #28
 8011812:	46bd      	mov	sp, r7
 8011814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011818:	4770      	bx	lr
	...

0801181c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801181c:	b580      	push	{r7, lr}
 801181e:	b08a      	sub	sp, #40	@ 0x28
 8011820:	af00      	add	r7, sp, #0
 8011822:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011824:	f107 0314 	add.w	r3, r7, #20
 8011828:	2200      	movs	r2, #0
 801182a:	601a      	str	r2, [r3, #0]
 801182c:	605a      	str	r2, [r3, #4]
 801182e:	609a      	str	r2, [r3, #8]
 8011830:	60da      	str	r2, [r3, #12]
 8011832:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	681b      	ldr	r3, [r3, #0]
 8011838:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801183c:	d13a      	bne.n	80118b4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801183e:	2300      	movs	r3, #0
 8011840:	613b      	str	r3, [r7, #16]
 8011842:	4b1e      	ldr	r3, [pc, #120]	@ (80118bc <HAL_PCD_MspInit+0xa0>)
 8011844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011846:	4a1d      	ldr	r2, [pc, #116]	@ (80118bc <HAL_PCD_MspInit+0xa0>)
 8011848:	f043 0301 	orr.w	r3, r3, #1
 801184c:	6313      	str	r3, [r2, #48]	@ 0x30
 801184e:	4b1b      	ldr	r3, [pc, #108]	@ (80118bc <HAL_PCD_MspInit+0xa0>)
 8011850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011852:	f003 0301 	and.w	r3, r3, #1
 8011856:	613b      	str	r3, [r7, #16]
 8011858:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801185a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 801185e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011860:	2302      	movs	r3, #2
 8011862:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011864:	2300      	movs	r3, #0
 8011866:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011868:	2303      	movs	r3, #3
 801186a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801186c:	230a      	movs	r3, #10
 801186e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011870:	f107 0314 	add.w	r3, r7, #20
 8011874:	4619      	mov	r1, r3
 8011876:	4812      	ldr	r0, [pc, #72]	@ (80118c0 <HAL_PCD_MspInit+0xa4>)
 8011878:	f7f4 fe86 	bl	8006588 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801187c:	4b0f      	ldr	r3, [pc, #60]	@ (80118bc <HAL_PCD_MspInit+0xa0>)
 801187e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011880:	4a0e      	ldr	r2, [pc, #56]	@ (80118bc <HAL_PCD_MspInit+0xa0>)
 8011882:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011886:	6353      	str	r3, [r2, #52]	@ 0x34
 8011888:	2300      	movs	r3, #0
 801188a:	60fb      	str	r3, [r7, #12]
 801188c:	4b0b      	ldr	r3, [pc, #44]	@ (80118bc <HAL_PCD_MspInit+0xa0>)
 801188e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011890:	4a0a      	ldr	r2, [pc, #40]	@ (80118bc <HAL_PCD_MspInit+0xa0>)
 8011892:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8011896:	6453      	str	r3, [r2, #68]	@ 0x44
 8011898:	4b08      	ldr	r3, [pc, #32]	@ (80118bc <HAL_PCD_MspInit+0xa0>)
 801189a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801189c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80118a0:	60fb      	str	r3, [r7, #12]
 80118a2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80118a4:	2200      	movs	r2, #0
 80118a6:	2100      	movs	r1, #0
 80118a8:	2043      	movs	r0, #67	@ 0x43
 80118aa:	f7f4 fa1a 	bl	8005ce2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80118ae:	2043      	movs	r0, #67	@ 0x43
 80118b0:	f7f4 fa33 	bl	8005d1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80118b4:	bf00      	nop
 80118b6:	3728      	adds	r7, #40	@ 0x28
 80118b8:	46bd      	mov	sp, r7
 80118ba:	bd80      	pop	{r7, pc}
 80118bc:	40023800 	.word	0x40023800
 80118c0:	40020000 	.word	0x40020000

080118c4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80118c4:	b580      	push	{r7, lr}
 80118c6:	b082      	sub	sp, #8
 80118c8:	af00      	add	r7, sp, #0
 80118ca:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80118d8:	4619      	mov	r1, r3
 80118da:	4610      	mov	r0, r2
 80118dc:	f7fe fadd 	bl	800fe9a <USBD_LL_SetupStage>
}
 80118e0:	bf00      	nop
 80118e2:	3708      	adds	r7, #8
 80118e4:	46bd      	mov	sp, r7
 80118e6:	bd80      	pop	{r7, pc}

080118e8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80118e8:	b580      	push	{r7, lr}
 80118ea:	b082      	sub	sp, #8
 80118ec:	af00      	add	r7, sp, #0
 80118ee:	6078      	str	r0, [r7, #4]
 80118f0:	460b      	mov	r3, r1
 80118f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80118fa:	78fa      	ldrb	r2, [r7, #3]
 80118fc:	6879      	ldr	r1, [r7, #4]
 80118fe:	4613      	mov	r3, r2
 8011900:	00db      	lsls	r3, r3, #3
 8011902:	4413      	add	r3, r2
 8011904:	009b      	lsls	r3, r3, #2
 8011906:	440b      	add	r3, r1
 8011908:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 801190c:	681a      	ldr	r2, [r3, #0]
 801190e:	78fb      	ldrb	r3, [r7, #3]
 8011910:	4619      	mov	r1, r3
 8011912:	f7fe fb17 	bl	800ff44 <USBD_LL_DataOutStage>
}
 8011916:	bf00      	nop
 8011918:	3708      	adds	r7, #8
 801191a:	46bd      	mov	sp, r7
 801191c:	bd80      	pop	{r7, pc}

0801191e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801191e:	b580      	push	{r7, lr}
 8011920:	b082      	sub	sp, #8
 8011922:	af00      	add	r7, sp, #0
 8011924:	6078      	str	r0, [r7, #4]
 8011926:	460b      	mov	r3, r1
 8011928:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8011930:	78fa      	ldrb	r2, [r7, #3]
 8011932:	6879      	ldr	r1, [r7, #4]
 8011934:	4613      	mov	r3, r2
 8011936:	00db      	lsls	r3, r3, #3
 8011938:	4413      	add	r3, r2
 801193a:	009b      	lsls	r3, r3, #2
 801193c:	440b      	add	r3, r1
 801193e:	3320      	adds	r3, #32
 8011940:	681a      	ldr	r2, [r3, #0]
 8011942:	78fb      	ldrb	r3, [r7, #3]
 8011944:	4619      	mov	r1, r3
 8011946:	f7fe fbb0 	bl	80100aa <USBD_LL_DataInStage>
}
 801194a:	bf00      	nop
 801194c:	3708      	adds	r7, #8
 801194e:	46bd      	mov	sp, r7
 8011950:	bd80      	pop	{r7, pc}

08011952 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011952:	b580      	push	{r7, lr}
 8011954:	b082      	sub	sp, #8
 8011956:	af00      	add	r7, sp, #0
 8011958:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011960:	4618      	mov	r0, r3
 8011962:	f7fe fcea 	bl	801033a <USBD_LL_SOF>
}
 8011966:	bf00      	nop
 8011968:	3708      	adds	r7, #8
 801196a:	46bd      	mov	sp, r7
 801196c:	bd80      	pop	{r7, pc}

0801196e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801196e:	b580      	push	{r7, lr}
 8011970:	b084      	sub	sp, #16
 8011972:	af00      	add	r7, sp, #0
 8011974:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8011976:	2301      	movs	r3, #1
 8011978:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	79db      	ldrb	r3, [r3, #7]
 801197e:	2b02      	cmp	r3, #2
 8011980:	d001      	beq.n	8011986 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8011982:	f7f2 ffa3 	bl	80048cc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801198c:	7bfa      	ldrb	r2, [r7, #15]
 801198e:	4611      	mov	r1, r2
 8011990:	4618      	mov	r0, r3
 8011992:	f7fe fc8e 	bl	80102b2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801199c:	4618      	mov	r0, r3
 801199e:	f7fe fc36 	bl	801020e <USBD_LL_Reset>
}
 80119a2:	bf00      	nop
 80119a4:	3710      	adds	r7, #16
 80119a6:	46bd      	mov	sp, r7
 80119a8:	bd80      	pop	{r7, pc}
	...

080119ac <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80119ac:	b580      	push	{r7, lr}
 80119ae:	b082      	sub	sp, #8
 80119b0:	af00      	add	r7, sp, #0
 80119b2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80119ba:	4618      	mov	r0, r3
 80119bc:	f7fe fc89 	bl	80102d2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	681b      	ldr	r3, [r3, #0]
 80119c4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80119c8:	681b      	ldr	r3, [r3, #0]
 80119ca:	687a      	ldr	r2, [r7, #4]
 80119cc:	6812      	ldr	r2, [r2, #0]
 80119ce:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80119d2:	f043 0301 	orr.w	r3, r3, #1
 80119d6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	7adb      	ldrb	r3, [r3, #11]
 80119dc:	2b00      	cmp	r3, #0
 80119de:	d005      	beq.n	80119ec <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80119e0:	4b04      	ldr	r3, [pc, #16]	@ (80119f4 <HAL_PCD_SuspendCallback+0x48>)
 80119e2:	691b      	ldr	r3, [r3, #16]
 80119e4:	4a03      	ldr	r2, [pc, #12]	@ (80119f4 <HAL_PCD_SuspendCallback+0x48>)
 80119e6:	f043 0306 	orr.w	r3, r3, #6
 80119ea:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80119ec:	bf00      	nop
 80119ee:	3708      	adds	r7, #8
 80119f0:	46bd      	mov	sp, r7
 80119f2:	bd80      	pop	{r7, pc}
 80119f4:	e000ed00 	.word	0xe000ed00

080119f8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80119f8:	b580      	push	{r7, lr}
 80119fa:	b082      	sub	sp, #8
 80119fc:	af00      	add	r7, sp, #0
 80119fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011a06:	4618      	mov	r0, r3
 8011a08:	f7fe fc7f 	bl	801030a <USBD_LL_Resume>
}
 8011a0c:	bf00      	nop
 8011a0e:	3708      	adds	r7, #8
 8011a10:	46bd      	mov	sp, r7
 8011a12:	bd80      	pop	{r7, pc}

08011a14 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011a14:	b580      	push	{r7, lr}
 8011a16:	b082      	sub	sp, #8
 8011a18:	af00      	add	r7, sp, #0
 8011a1a:	6078      	str	r0, [r7, #4]
 8011a1c:	460b      	mov	r3, r1
 8011a1e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011a26:	78fa      	ldrb	r2, [r7, #3]
 8011a28:	4611      	mov	r1, r2
 8011a2a:	4618      	mov	r0, r3
 8011a2c:	f7fe fcd7 	bl	80103de <USBD_LL_IsoOUTIncomplete>
}
 8011a30:	bf00      	nop
 8011a32:	3708      	adds	r7, #8
 8011a34:	46bd      	mov	sp, r7
 8011a36:	bd80      	pop	{r7, pc}

08011a38 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011a38:	b580      	push	{r7, lr}
 8011a3a:	b082      	sub	sp, #8
 8011a3c:	af00      	add	r7, sp, #0
 8011a3e:	6078      	str	r0, [r7, #4]
 8011a40:	460b      	mov	r3, r1
 8011a42:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011a4a:	78fa      	ldrb	r2, [r7, #3]
 8011a4c:	4611      	mov	r1, r2
 8011a4e:	4618      	mov	r0, r3
 8011a50:	f7fe fc93 	bl	801037a <USBD_LL_IsoINIncomplete>
}
 8011a54:	bf00      	nop
 8011a56:	3708      	adds	r7, #8
 8011a58:	46bd      	mov	sp, r7
 8011a5a:	bd80      	pop	{r7, pc}

08011a5c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011a5c:	b580      	push	{r7, lr}
 8011a5e:	b082      	sub	sp, #8
 8011a60:	af00      	add	r7, sp, #0
 8011a62:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011a6a:	4618      	mov	r0, r3
 8011a6c:	f7fe fce9 	bl	8010442 <USBD_LL_DevConnected>
}
 8011a70:	bf00      	nop
 8011a72:	3708      	adds	r7, #8
 8011a74:	46bd      	mov	sp, r7
 8011a76:	bd80      	pop	{r7, pc}

08011a78 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011a78:	b580      	push	{r7, lr}
 8011a7a:	b082      	sub	sp, #8
 8011a7c:	af00      	add	r7, sp, #0
 8011a7e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011a86:	4618      	mov	r0, r3
 8011a88:	f7fe fce6 	bl	8010458 <USBD_LL_DevDisconnected>
}
 8011a8c:	bf00      	nop
 8011a8e:	3708      	adds	r7, #8
 8011a90:	46bd      	mov	sp, r7
 8011a92:	bd80      	pop	{r7, pc}

08011a94 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8011a94:	b580      	push	{r7, lr}
 8011a96:	b082      	sub	sp, #8
 8011a98:	af00      	add	r7, sp, #0
 8011a9a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	781b      	ldrb	r3, [r3, #0]
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	d13c      	bne.n	8011b1e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8011aa4:	4a20      	ldr	r2, [pc, #128]	@ (8011b28 <USBD_LL_Init+0x94>)
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	4a1e      	ldr	r2, [pc, #120]	@ (8011b28 <USBD_LL_Init+0x94>)
 8011ab0:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8011ab4:	4b1c      	ldr	r3, [pc, #112]	@ (8011b28 <USBD_LL_Init+0x94>)
 8011ab6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8011aba:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8011abc:	4b1a      	ldr	r3, [pc, #104]	@ (8011b28 <USBD_LL_Init+0x94>)
 8011abe:	2204      	movs	r2, #4
 8011ac0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8011ac2:	4b19      	ldr	r3, [pc, #100]	@ (8011b28 <USBD_LL_Init+0x94>)
 8011ac4:	2202      	movs	r2, #2
 8011ac6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8011ac8:	4b17      	ldr	r3, [pc, #92]	@ (8011b28 <USBD_LL_Init+0x94>)
 8011aca:	2200      	movs	r2, #0
 8011acc:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8011ace:	4b16      	ldr	r3, [pc, #88]	@ (8011b28 <USBD_LL_Init+0x94>)
 8011ad0:	2202      	movs	r2, #2
 8011ad2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8011ad4:	4b14      	ldr	r3, [pc, #80]	@ (8011b28 <USBD_LL_Init+0x94>)
 8011ad6:	2200      	movs	r2, #0
 8011ad8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8011ada:	4b13      	ldr	r3, [pc, #76]	@ (8011b28 <USBD_LL_Init+0x94>)
 8011adc:	2200      	movs	r2, #0
 8011ade:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8011ae0:	4b11      	ldr	r3, [pc, #68]	@ (8011b28 <USBD_LL_Init+0x94>)
 8011ae2:	2200      	movs	r2, #0
 8011ae4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8011ae6:	4b10      	ldr	r3, [pc, #64]	@ (8011b28 <USBD_LL_Init+0x94>)
 8011ae8:	2200      	movs	r2, #0
 8011aea:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8011aec:	4b0e      	ldr	r3, [pc, #56]	@ (8011b28 <USBD_LL_Init+0x94>)
 8011aee:	2200      	movs	r2, #0
 8011af0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8011af2:	480d      	ldr	r0, [pc, #52]	@ (8011b28 <USBD_LL_Init+0x94>)
 8011af4:	f7f8 fb09 	bl	800a10a <HAL_PCD_Init>
 8011af8:	4603      	mov	r3, r0
 8011afa:	2b00      	cmp	r3, #0
 8011afc:	d001      	beq.n	8011b02 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8011afe:	f7f2 fee5 	bl	80048cc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8011b02:	2180      	movs	r1, #128	@ 0x80
 8011b04:	4808      	ldr	r0, [pc, #32]	@ (8011b28 <USBD_LL_Init+0x94>)
 8011b06:	f7f9 fd36 	bl	800b576 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8011b0a:	2240      	movs	r2, #64	@ 0x40
 8011b0c:	2100      	movs	r1, #0
 8011b0e:	4806      	ldr	r0, [pc, #24]	@ (8011b28 <USBD_LL_Init+0x94>)
 8011b10:	f7f9 fcea 	bl	800b4e8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8011b14:	2280      	movs	r2, #128	@ 0x80
 8011b16:	2101      	movs	r1, #1
 8011b18:	4803      	ldr	r0, [pc, #12]	@ (8011b28 <USBD_LL_Init+0x94>)
 8011b1a:	f7f9 fce5 	bl	800b4e8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8011b1e:	2300      	movs	r3, #0
}
 8011b20:	4618      	mov	r0, r3
 8011b22:	3708      	adds	r7, #8
 8011b24:	46bd      	mov	sp, r7
 8011b26:	bd80      	pop	{r7, pc}
 8011b28:	20001fcc 	.word	0x20001fcc

08011b2c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8011b2c:	b580      	push	{r7, lr}
 8011b2e:	b084      	sub	sp, #16
 8011b30:	af00      	add	r7, sp, #0
 8011b32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011b34:	2300      	movs	r3, #0
 8011b36:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011b38:	2300      	movs	r3, #0
 8011b3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011b42:	4618      	mov	r0, r3
 8011b44:	f7f8 fbf0 	bl	800a328 <HAL_PCD_Start>
 8011b48:	4603      	mov	r3, r0
 8011b4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011b4c:	7bfb      	ldrb	r3, [r7, #15]
 8011b4e:	4618      	mov	r0, r3
 8011b50:	f000 f942 	bl	8011dd8 <USBD_Get_USB_Status>
 8011b54:	4603      	mov	r3, r0
 8011b56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011b58:	7bbb      	ldrb	r3, [r7, #14]
}
 8011b5a:	4618      	mov	r0, r3
 8011b5c:	3710      	adds	r7, #16
 8011b5e:	46bd      	mov	sp, r7
 8011b60:	bd80      	pop	{r7, pc}

08011b62 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8011b62:	b580      	push	{r7, lr}
 8011b64:	b084      	sub	sp, #16
 8011b66:	af00      	add	r7, sp, #0
 8011b68:	6078      	str	r0, [r7, #4]
 8011b6a:	4608      	mov	r0, r1
 8011b6c:	4611      	mov	r1, r2
 8011b6e:	461a      	mov	r2, r3
 8011b70:	4603      	mov	r3, r0
 8011b72:	70fb      	strb	r3, [r7, #3]
 8011b74:	460b      	mov	r3, r1
 8011b76:	70bb      	strb	r3, [r7, #2]
 8011b78:	4613      	mov	r3, r2
 8011b7a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011b7c:	2300      	movs	r3, #0
 8011b7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011b80:	2300      	movs	r3, #0
 8011b82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8011b8a:	78bb      	ldrb	r3, [r7, #2]
 8011b8c:	883a      	ldrh	r2, [r7, #0]
 8011b8e:	78f9      	ldrb	r1, [r7, #3]
 8011b90:	f7f9 f8c4 	bl	800ad1c <HAL_PCD_EP_Open>
 8011b94:	4603      	mov	r3, r0
 8011b96:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011b98:	7bfb      	ldrb	r3, [r7, #15]
 8011b9a:	4618      	mov	r0, r3
 8011b9c:	f000 f91c 	bl	8011dd8 <USBD_Get_USB_Status>
 8011ba0:	4603      	mov	r3, r0
 8011ba2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011ba4:	7bbb      	ldrb	r3, [r7, #14]
}
 8011ba6:	4618      	mov	r0, r3
 8011ba8:	3710      	adds	r7, #16
 8011baa:	46bd      	mov	sp, r7
 8011bac:	bd80      	pop	{r7, pc}

08011bae <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011bae:	b580      	push	{r7, lr}
 8011bb0:	b084      	sub	sp, #16
 8011bb2:	af00      	add	r7, sp, #0
 8011bb4:	6078      	str	r0, [r7, #4]
 8011bb6:	460b      	mov	r3, r1
 8011bb8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011bba:	2300      	movs	r3, #0
 8011bbc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011bbe:	2300      	movs	r3, #0
 8011bc0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011bc8:	78fa      	ldrb	r2, [r7, #3]
 8011bca:	4611      	mov	r1, r2
 8011bcc:	4618      	mov	r0, r3
 8011bce:	f7f9 f90f 	bl	800adf0 <HAL_PCD_EP_Close>
 8011bd2:	4603      	mov	r3, r0
 8011bd4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011bd6:	7bfb      	ldrb	r3, [r7, #15]
 8011bd8:	4618      	mov	r0, r3
 8011bda:	f000 f8fd 	bl	8011dd8 <USBD_Get_USB_Status>
 8011bde:	4603      	mov	r3, r0
 8011be0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011be2:	7bbb      	ldrb	r3, [r7, #14]
}
 8011be4:	4618      	mov	r0, r3
 8011be6:	3710      	adds	r7, #16
 8011be8:	46bd      	mov	sp, r7
 8011bea:	bd80      	pop	{r7, pc}

08011bec <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011bec:	b580      	push	{r7, lr}
 8011bee:	b084      	sub	sp, #16
 8011bf0:	af00      	add	r7, sp, #0
 8011bf2:	6078      	str	r0, [r7, #4]
 8011bf4:	460b      	mov	r3, r1
 8011bf6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011bf8:	2300      	movs	r3, #0
 8011bfa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011bfc:	2300      	movs	r3, #0
 8011bfe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011c06:	78fa      	ldrb	r2, [r7, #3]
 8011c08:	4611      	mov	r1, r2
 8011c0a:	4618      	mov	r0, r3
 8011c0c:	f7f9 f9c7 	bl	800af9e <HAL_PCD_EP_SetStall>
 8011c10:	4603      	mov	r3, r0
 8011c12:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011c14:	7bfb      	ldrb	r3, [r7, #15]
 8011c16:	4618      	mov	r0, r3
 8011c18:	f000 f8de 	bl	8011dd8 <USBD_Get_USB_Status>
 8011c1c:	4603      	mov	r3, r0
 8011c1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011c20:	7bbb      	ldrb	r3, [r7, #14]
}
 8011c22:	4618      	mov	r0, r3
 8011c24:	3710      	adds	r7, #16
 8011c26:	46bd      	mov	sp, r7
 8011c28:	bd80      	pop	{r7, pc}

08011c2a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011c2a:	b580      	push	{r7, lr}
 8011c2c:	b084      	sub	sp, #16
 8011c2e:	af00      	add	r7, sp, #0
 8011c30:	6078      	str	r0, [r7, #4]
 8011c32:	460b      	mov	r3, r1
 8011c34:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011c36:	2300      	movs	r3, #0
 8011c38:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011c3a:	2300      	movs	r3, #0
 8011c3c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011c44:	78fa      	ldrb	r2, [r7, #3]
 8011c46:	4611      	mov	r1, r2
 8011c48:	4618      	mov	r0, r3
 8011c4a:	f7f9 fa0b 	bl	800b064 <HAL_PCD_EP_ClrStall>
 8011c4e:	4603      	mov	r3, r0
 8011c50:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011c52:	7bfb      	ldrb	r3, [r7, #15]
 8011c54:	4618      	mov	r0, r3
 8011c56:	f000 f8bf 	bl	8011dd8 <USBD_Get_USB_Status>
 8011c5a:	4603      	mov	r3, r0
 8011c5c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011c5e:	7bbb      	ldrb	r3, [r7, #14]
}
 8011c60:	4618      	mov	r0, r3
 8011c62:	3710      	adds	r7, #16
 8011c64:	46bd      	mov	sp, r7
 8011c66:	bd80      	pop	{r7, pc}

08011c68 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011c68:	b480      	push	{r7}
 8011c6a:	b085      	sub	sp, #20
 8011c6c:	af00      	add	r7, sp, #0
 8011c6e:	6078      	str	r0, [r7, #4]
 8011c70:	460b      	mov	r3, r1
 8011c72:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011c7a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8011c7c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	da0b      	bge.n	8011c9c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8011c84:	78fb      	ldrb	r3, [r7, #3]
 8011c86:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011c8a:	68f9      	ldr	r1, [r7, #12]
 8011c8c:	4613      	mov	r3, r2
 8011c8e:	00db      	lsls	r3, r3, #3
 8011c90:	4413      	add	r3, r2
 8011c92:	009b      	lsls	r3, r3, #2
 8011c94:	440b      	add	r3, r1
 8011c96:	3316      	adds	r3, #22
 8011c98:	781b      	ldrb	r3, [r3, #0]
 8011c9a:	e00b      	b.n	8011cb4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8011c9c:	78fb      	ldrb	r3, [r7, #3]
 8011c9e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011ca2:	68f9      	ldr	r1, [r7, #12]
 8011ca4:	4613      	mov	r3, r2
 8011ca6:	00db      	lsls	r3, r3, #3
 8011ca8:	4413      	add	r3, r2
 8011caa:	009b      	lsls	r3, r3, #2
 8011cac:	440b      	add	r3, r1
 8011cae:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8011cb2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011cb4:	4618      	mov	r0, r3
 8011cb6:	3714      	adds	r7, #20
 8011cb8:	46bd      	mov	sp, r7
 8011cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cbe:	4770      	bx	lr

08011cc0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8011cc0:	b580      	push	{r7, lr}
 8011cc2:	b084      	sub	sp, #16
 8011cc4:	af00      	add	r7, sp, #0
 8011cc6:	6078      	str	r0, [r7, #4]
 8011cc8:	460b      	mov	r3, r1
 8011cca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011ccc:	2300      	movs	r3, #0
 8011cce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011cd0:	2300      	movs	r3, #0
 8011cd2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011cda:	78fa      	ldrb	r2, [r7, #3]
 8011cdc:	4611      	mov	r1, r2
 8011cde:	4618      	mov	r0, r3
 8011ce0:	f7f8 fff8 	bl	800acd4 <HAL_PCD_SetAddress>
 8011ce4:	4603      	mov	r3, r0
 8011ce6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011ce8:	7bfb      	ldrb	r3, [r7, #15]
 8011cea:	4618      	mov	r0, r3
 8011cec:	f000 f874 	bl	8011dd8 <USBD_Get_USB_Status>
 8011cf0:	4603      	mov	r3, r0
 8011cf2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011cf4:	7bbb      	ldrb	r3, [r7, #14]
}
 8011cf6:	4618      	mov	r0, r3
 8011cf8:	3710      	adds	r7, #16
 8011cfa:	46bd      	mov	sp, r7
 8011cfc:	bd80      	pop	{r7, pc}

08011cfe <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011cfe:	b580      	push	{r7, lr}
 8011d00:	b086      	sub	sp, #24
 8011d02:	af00      	add	r7, sp, #0
 8011d04:	60f8      	str	r0, [r7, #12]
 8011d06:	607a      	str	r2, [r7, #4]
 8011d08:	603b      	str	r3, [r7, #0]
 8011d0a:	460b      	mov	r3, r1
 8011d0c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011d0e:	2300      	movs	r3, #0
 8011d10:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011d12:	2300      	movs	r3, #0
 8011d14:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8011d16:	68fb      	ldr	r3, [r7, #12]
 8011d18:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8011d1c:	7af9      	ldrb	r1, [r7, #11]
 8011d1e:	683b      	ldr	r3, [r7, #0]
 8011d20:	687a      	ldr	r2, [r7, #4]
 8011d22:	f7f9 f902 	bl	800af2a <HAL_PCD_EP_Transmit>
 8011d26:	4603      	mov	r3, r0
 8011d28:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011d2a:	7dfb      	ldrb	r3, [r7, #23]
 8011d2c:	4618      	mov	r0, r3
 8011d2e:	f000 f853 	bl	8011dd8 <USBD_Get_USB_Status>
 8011d32:	4603      	mov	r3, r0
 8011d34:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011d36:	7dbb      	ldrb	r3, [r7, #22]
}
 8011d38:	4618      	mov	r0, r3
 8011d3a:	3718      	adds	r7, #24
 8011d3c:	46bd      	mov	sp, r7
 8011d3e:	bd80      	pop	{r7, pc}

08011d40 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011d40:	b580      	push	{r7, lr}
 8011d42:	b086      	sub	sp, #24
 8011d44:	af00      	add	r7, sp, #0
 8011d46:	60f8      	str	r0, [r7, #12]
 8011d48:	607a      	str	r2, [r7, #4]
 8011d4a:	603b      	str	r3, [r7, #0]
 8011d4c:	460b      	mov	r3, r1
 8011d4e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011d50:	2300      	movs	r3, #0
 8011d52:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011d54:	2300      	movs	r3, #0
 8011d56:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8011d58:	68fb      	ldr	r3, [r7, #12]
 8011d5a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8011d5e:	7af9      	ldrb	r1, [r7, #11]
 8011d60:	683b      	ldr	r3, [r7, #0]
 8011d62:	687a      	ldr	r2, [r7, #4]
 8011d64:	f7f9 f88e 	bl	800ae84 <HAL_PCD_EP_Receive>
 8011d68:	4603      	mov	r3, r0
 8011d6a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011d6c:	7dfb      	ldrb	r3, [r7, #23]
 8011d6e:	4618      	mov	r0, r3
 8011d70:	f000 f832 	bl	8011dd8 <USBD_Get_USB_Status>
 8011d74:	4603      	mov	r3, r0
 8011d76:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011d78:	7dbb      	ldrb	r3, [r7, #22]
}
 8011d7a:	4618      	mov	r0, r3
 8011d7c:	3718      	adds	r7, #24
 8011d7e:	46bd      	mov	sp, r7
 8011d80:	bd80      	pop	{r7, pc}

08011d82 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011d82:	b580      	push	{r7, lr}
 8011d84:	b082      	sub	sp, #8
 8011d86:	af00      	add	r7, sp, #0
 8011d88:	6078      	str	r0, [r7, #4]
 8011d8a:	460b      	mov	r3, r1
 8011d8c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011d94:	78fa      	ldrb	r2, [r7, #3]
 8011d96:	4611      	mov	r1, r2
 8011d98:	4618      	mov	r0, r3
 8011d9a:	f7f9 f8ae 	bl	800aefa <HAL_PCD_EP_GetRxCount>
 8011d9e:	4603      	mov	r3, r0
}
 8011da0:	4618      	mov	r0, r3
 8011da2:	3708      	adds	r7, #8
 8011da4:	46bd      	mov	sp, r7
 8011da6:	bd80      	pop	{r7, pc}

08011da8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8011da8:	b480      	push	{r7}
 8011daa:	b083      	sub	sp, #12
 8011dac:	af00      	add	r7, sp, #0
 8011dae:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8011db0:	4b03      	ldr	r3, [pc, #12]	@ (8011dc0 <USBD_static_malloc+0x18>)
}
 8011db2:	4618      	mov	r0, r3
 8011db4:	370c      	adds	r7, #12
 8011db6:	46bd      	mov	sp, r7
 8011db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dbc:	4770      	bx	lr
 8011dbe:	bf00      	nop
 8011dc0:	200024b0 	.word	0x200024b0

08011dc4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8011dc4:	b480      	push	{r7}
 8011dc6:	b083      	sub	sp, #12
 8011dc8:	af00      	add	r7, sp, #0
 8011dca:	6078      	str	r0, [r7, #4]

}
 8011dcc:	bf00      	nop
 8011dce:	370c      	adds	r7, #12
 8011dd0:	46bd      	mov	sp, r7
 8011dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dd6:	4770      	bx	lr

08011dd8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011dd8:	b480      	push	{r7}
 8011dda:	b085      	sub	sp, #20
 8011ddc:	af00      	add	r7, sp, #0
 8011dde:	4603      	mov	r3, r0
 8011de0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011de2:	2300      	movs	r3, #0
 8011de4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8011de6:	79fb      	ldrb	r3, [r7, #7]
 8011de8:	2b03      	cmp	r3, #3
 8011dea:	d817      	bhi.n	8011e1c <USBD_Get_USB_Status+0x44>
 8011dec:	a201      	add	r2, pc, #4	@ (adr r2, 8011df4 <USBD_Get_USB_Status+0x1c>)
 8011dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011df2:	bf00      	nop
 8011df4:	08011e05 	.word	0x08011e05
 8011df8:	08011e0b 	.word	0x08011e0b
 8011dfc:	08011e11 	.word	0x08011e11
 8011e00:	08011e17 	.word	0x08011e17
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8011e04:	2300      	movs	r3, #0
 8011e06:	73fb      	strb	r3, [r7, #15]
    break;
 8011e08:	e00b      	b.n	8011e22 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011e0a:	2303      	movs	r3, #3
 8011e0c:	73fb      	strb	r3, [r7, #15]
    break;
 8011e0e:	e008      	b.n	8011e22 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011e10:	2301      	movs	r3, #1
 8011e12:	73fb      	strb	r3, [r7, #15]
    break;
 8011e14:	e005      	b.n	8011e22 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011e16:	2303      	movs	r3, #3
 8011e18:	73fb      	strb	r3, [r7, #15]
    break;
 8011e1a:	e002      	b.n	8011e22 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8011e1c:	2303      	movs	r3, #3
 8011e1e:	73fb      	strb	r3, [r7, #15]
    break;
 8011e20:	bf00      	nop
  }
  return usb_status;
 8011e22:	7bfb      	ldrb	r3, [r7, #15]
}
 8011e24:	4618      	mov	r0, r3
 8011e26:	3714      	adds	r7, #20
 8011e28:	46bd      	mov	sp, r7
 8011e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e2e:	4770      	bx	lr

08011e30 <__itoa>:
 8011e30:	1e93      	subs	r3, r2, #2
 8011e32:	2b22      	cmp	r3, #34	@ 0x22
 8011e34:	b510      	push	{r4, lr}
 8011e36:	460c      	mov	r4, r1
 8011e38:	d904      	bls.n	8011e44 <__itoa+0x14>
 8011e3a:	2300      	movs	r3, #0
 8011e3c:	700b      	strb	r3, [r1, #0]
 8011e3e:	461c      	mov	r4, r3
 8011e40:	4620      	mov	r0, r4
 8011e42:	bd10      	pop	{r4, pc}
 8011e44:	2a0a      	cmp	r2, #10
 8011e46:	d109      	bne.n	8011e5c <__itoa+0x2c>
 8011e48:	2800      	cmp	r0, #0
 8011e4a:	da07      	bge.n	8011e5c <__itoa+0x2c>
 8011e4c:	232d      	movs	r3, #45	@ 0x2d
 8011e4e:	700b      	strb	r3, [r1, #0]
 8011e50:	4240      	negs	r0, r0
 8011e52:	2101      	movs	r1, #1
 8011e54:	4421      	add	r1, r4
 8011e56:	f000 f805 	bl	8011e64 <__utoa>
 8011e5a:	e7f1      	b.n	8011e40 <__itoa+0x10>
 8011e5c:	2100      	movs	r1, #0
 8011e5e:	e7f9      	b.n	8011e54 <__itoa+0x24>

08011e60 <itoa>:
 8011e60:	f7ff bfe6 	b.w	8011e30 <__itoa>

08011e64 <__utoa>:
 8011e64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011e66:	4c1f      	ldr	r4, [pc, #124]	@ (8011ee4 <__utoa+0x80>)
 8011e68:	b08b      	sub	sp, #44	@ 0x2c
 8011e6a:	4605      	mov	r5, r0
 8011e6c:	460b      	mov	r3, r1
 8011e6e:	466e      	mov	r6, sp
 8011e70:	f104 0c20 	add.w	ip, r4, #32
 8011e74:	6820      	ldr	r0, [r4, #0]
 8011e76:	6861      	ldr	r1, [r4, #4]
 8011e78:	4637      	mov	r7, r6
 8011e7a:	c703      	stmia	r7!, {r0, r1}
 8011e7c:	3408      	adds	r4, #8
 8011e7e:	4564      	cmp	r4, ip
 8011e80:	463e      	mov	r6, r7
 8011e82:	d1f7      	bne.n	8011e74 <__utoa+0x10>
 8011e84:	7921      	ldrb	r1, [r4, #4]
 8011e86:	7139      	strb	r1, [r7, #4]
 8011e88:	1e91      	subs	r1, r2, #2
 8011e8a:	6820      	ldr	r0, [r4, #0]
 8011e8c:	6038      	str	r0, [r7, #0]
 8011e8e:	2922      	cmp	r1, #34	@ 0x22
 8011e90:	f04f 0100 	mov.w	r1, #0
 8011e94:	d904      	bls.n	8011ea0 <__utoa+0x3c>
 8011e96:	7019      	strb	r1, [r3, #0]
 8011e98:	460b      	mov	r3, r1
 8011e9a:	4618      	mov	r0, r3
 8011e9c:	b00b      	add	sp, #44	@ 0x2c
 8011e9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011ea0:	1e58      	subs	r0, r3, #1
 8011ea2:	4684      	mov	ip, r0
 8011ea4:	fbb5 f7f2 	udiv	r7, r5, r2
 8011ea8:	fb02 5617 	mls	r6, r2, r7, r5
 8011eac:	3628      	adds	r6, #40	@ 0x28
 8011eae:	446e      	add	r6, sp
 8011eb0:	460c      	mov	r4, r1
 8011eb2:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8011eb6:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8011eba:	462e      	mov	r6, r5
 8011ebc:	42b2      	cmp	r2, r6
 8011ebe:	f101 0101 	add.w	r1, r1, #1
 8011ec2:	463d      	mov	r5, r7
 8011ec4:	d9ee      	bls.n	8011ea4 <__utoa+0x40>
 8011ec6:	2200      	movs	r2, #0
 8011ec8:	545a      	strb	r2, [r3, r1]
 8011eca:	1919      	adds	r1, r3, r4
 8011ecc:	1aa5      	subs	r5, r4, r2
 8011ece:	42aa      	cmp	r2, r5
 8011ed0:	dae3      	bge.n	8011e9a <__utoa+0x36>
 8011ed2:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8011ed6:	780e      	ldrb	r6, [r1, #0]
 8011ed8:	7006      	strb	r6, [r0, #0]
 8011eda:	3201      	adds	r2, #1
 8011edc:	f801 5901 	strb.w	r5, [r1], #-1
 8011ee0:	e7f4      	b.n	8011ecc <__utoa+0x68>
 8011ee2:	bf00      	nop
 8011ee4:	08013f34 	.word	0x08013f34

08011ee8 <siprintf>:
 8011ee8:	b40e      	push	{r1, r2, r3}
 8011eea:	b510      	push	{r4, lr}
 8011eec:	b09d      	sub	sp, #116	@ 0x74
 8011eee:	ab1f      	add	r3, sp, #124	@ 0x7c
 8011ef0:	9002      	str	r0, [sp, #8]
 8011ef2:	9006      	str	r0, [sp, #24]
 8011ef4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8011ef8:	480a      	ldr	r0, [pc, #40]	@ (8011f24 <siprintf+0x3c>)
 8011efa:	9107      	str	r1, [sp, #28]
 8011efc:	9104      	str	r1, [sp, #16]
 8011efe:	490a      	ldr	r1, [pc, #40]	@ (8011f28 <siprintf+0x40>)
 8011f00:	f853 2b04 	ldr.w	r2, [r3], #4
 8011f04:	9105      	str	r1, [sp, #20]
 8011f06:	2400      	movs	r4, #0
 8011f08:	a902      	add	r1, sp, #8
 8011f0a:	6800      	ldr	r0, [r0, #0]
 8011f0c:	9301      	str	r3, [sp, #4]
 8011f0e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8011f10:	f000 f9b6 	bl	8012280 <_svfiprintf_r>
 8011f14:	9b02      	ldr	r3, [sp, #8]
 8011f16:	701c      	strb	r4, [r3, #0]
 8011f18:	b01d      	add	sp, #116	@ 0x74
 8011f1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011f1e:	b003      	add	sp, #12
 8011f20:	4770      	bx	lr
 8011f22:	bf00      	nop
 8011f24:	20000118 	.word	0x20000118
 8011f28:	ffff0208 	.word	0xffff0208

08011f2c <memset>:
 8011f2c:	4402      	add	r2, r0
 8011f2e:	4603      	mov	r3, r0
 8011f30:	4293      	cmp	r3, r2
 8011f32:	d100      	bne.n	8011f36 <memset+0xa>
 8011f34:	4770      	bx	lr
 8011f36:	f803 1b01 	strb.w	r1, [r3], #1
 8011f3a:	e7f9      	b.n	8011f30 <memset+0x4>

08011f3c <strncpy>:
 8011f3c:	b510      	push	{r4, lr}
 8011f3e:	3901      	subs	r1, #1
 8011f40:	4603      	mov	r3, r0
 8011f42:	b132      	cbz	r2, 8011f52 <strncpy+0x16>
 8011f44:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8011f48:	f803 4b01 	strb.w	r4, [r3], #1
 8011f4c:	3a01      	subs	r2, #1
 8011f4e:	2c00      	cmp	r4, #0
 8011f50:	d1f7      	bne.n	8011f42 <strncpy+0x6>
 8011f52:	441a      	add	r2, r3
 8011f54:	2100      	movs	r1, #0
 8011f56:	4293      	cmp	r3, r2
 8011f58:	d100      	bne.n	8011f5c <strncpy+0x20>
 8011f5a:	bd10      	pop	{r4, pc}
 8011f5c:	f803 1b01 	strb.w	r1, [r3], #1
 8011f60:	e7f9      	b.n	8011f56 <strncpy+0x1a>
	...

08011f64 <__errno>:
 8011f64:	4b01      	ldr	r3, [pc, #4]	@ (8011f6c <__errno+0x8>)
 8011f66:	6818      	ldr	r0, [r3, #0]
 8011f68:	4770      	bx	lr
 8011f6a:	bf00      	nop
 8011f6c:	20000118 	.word	0x20000118

08011f70 <__libc_init_array>:
 8011f70:	b570      	push	{r4, r5, r6, lr}
 8011f72:	4d0d      	ldr	r5, [pc, #52]	@ (8011fa8 <__libc_init_array+0x38>)
 8011f74:	4c0d      	ldr	r4, [pc, #52]	@ (8011fac <__libc_init_array+0x3c>)
 8011f76:	1b64      	subs	r4, r4, r5
 8011f78:	10a4      	asrs	r4, r4, #2
 8011f7a:	2600      	movs	r6, #0
 8011f7c:	42a6      	cmp	r6, r4
 8011f7e:	d109      	bne.n	8011f94 <__libc_init_array+0x24>
 8011f80:	4d0b      	ldr	r5, [pc, #44]	@ (8011fb0 <__libc_init_array+0x40>)
 8011f82:	4c0c      	ldr	r4, [pc, #48]	@ (8011fb4 <__libc_init_array+0x44>)
 8011f84:	f000 fc64 	bl	8012850 <_init>
 8011f88:	1b64      	subs	r4, r4, r5
 8011f8a:	10a4      	asrs	r4, r4, #2
 8011f8c:	2600      	movs	r6, #0
 8011f8e:	42a6      	cmp	r6, r4
 8011f90:	d105      	bne.n	8011f9e <__libc_init_array+0x2e>
 8011f92:	bd70      	pop	{r4, r5, r6, pc}
 8011f94:	f855 3b04 	ldr.w	r3, [r5], #4
 8011f98:	4798      	blx	r3
 8011f9a:	3601      	adds	r6, #1
 8011f9c:	e7ee      	b.n	8011f7c <__libc_init_array+0xc>
 8011f9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8011fa2:	4798      	blx	r3
 8011fa4:	3601      	adds	r6, #1
 8011fa6:	e7f2      	b.n	8011f8e <__libc_init_array+0x1e>
 8011fa8:	08013f94 	.word	0x08013f94
 8011fac:	08013f94 	.word	0x08013f94
 8011fb0:	08013f94 	.word	0x08013f94
 8011fb4:	08013f98 	.word	0x08013f98

08011fb8 <__retarget_lock_acquire_recursive>:
 8011fb8:	4770      	bx	lr

08011fba <__retarget_lock_release_recursive>:
 8011fba:	4770      	bx	lr

08011fbc <memcpy>:
 8011fbc:	440a      	add	r2, r1
 8011fbe:	4291      	cmp	r1, r2
 8011fc0:	f100 33ff 	add.w	r3, r0, #4294967295
 8011fc4:	d100      	bne.n	8011fc8 <memcpy+0xc>
 8011fc6:	4770      	bx	lr
 8011fc8:	b510      	push	{r4, lr}
 8011fca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011fce:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011fd2:	4291      	cmp	r1, r2
 8011fd4:	d1f9      	bne.n	8011fca <memcpy+0xe>
 8011fd6:	bd10      	pop	{r4, pc}

08011fd8 <_free_r>:
 8011fd8:	b538      	push	{r3, r4, r5, lr}
 8011fda:	4605      	mov	r5, r0
 8011fdc:	2900      	cmp	r1, #0
 8011fde:	d041      	beq.n	8012064 <_free_r+0x8c>
 8011fe0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011fe4:	1f0c      	subs	r4, r1, #4
 8011fe6:	2b00      	cmp	r3, #0
 8011fe8:	bfb8      	it	lt
 8011fea:	18e4      	addlt	r4, r4, r3
 8011fec:	f000 f8e0 	bl	80121b0 <__malloc_lock>
 8011ff0:	4a1d      	ldr	r2, [pc, #116]	@ (8012068 <_free_r+0x90>)
 8011ff2:	6813      	ldr	r3, [r2, #0]
 8011ff4:	b933      	cbnz	r3, 8012004 <_free_r+0x2c>
 8011ff6:	6063      	str	r3, [r4, #4]
 8011ff8:	6014      	str	r4, [r2, #0]
 8011ffa:	4628      	mov	r0, r5
 8011ffc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012000:	f000 b8dc 	b.w	80121bc <__malloc_unlock>
 8012004:	42a3      	cmp	r3, r4
 8012006:	d908      	bls.n	801201a <_free_r+0x42>
 8012008:	6820      	ldr	r0, [r4, #0]
 801200a:	1821      	adds	r1, r4, r0
 801200c:	428b      	cmp	r3, r1
 801200e:	bf01      	itttt	eq
 8012010:	6819      	ldreq	r1, [r3, #0]
 8012012:	685b      	ldreq	r3, [r3, #4]
 8012014:	1809      	addeq	r1, r1, r0
 8012016:	6021      	streq	r1, [r4, #0]
 8012018:	e7ed      	b.n	8011ff6 <_free_r+0x1e>
 801201a:	461a      	mov	r2, r3
 801201c:	685b      	ldr	r3, [r3, #4]
 801201e:	b10b      	cbz	r3, 8012024 <_free_r+0x4c>
 8012020:	42a3      	cmp	r3, r4
 8012022:	d9fa      	bls.n	801201a <_free_r+0x42>
 8012024:	6811      	ldr	r1, [r2, #0]
 8012026:	1850      	adds	r0, r2, r1
 8012028:	42a0      	cmp	r0, r4
 801202a:	d10b      	bne.n	8012044 <_free_r+0x6c>
 801202c:	6820      	ldr	r0, [r4, #0]
 801202e:	4401      	add	r1, r0
 8012030:	1850      	adds	r0, r2, r1
 8012032:	4283      	cmp	r3, r0
 8012034:	6011      	str	r1, [r2, #0]
 8012036:	d1e0      	bne.n	8011ffa <_free_r+0x22>
 8012038:	6818      	ldr	r0, [r3, #0]
 801203a:	685b      	ldr	r3, [r3, #4]
 801203c:	6053      	str	r3, [r2, #4]
 801203e:	4408      	add	r0, r1
 8012040:	6010      	str	r0, [r2, #0]
 8012042:	e7da      	b.n	8011ffa <_free_r+0x22>
 8012044:	d902      	bls.n	801204c <_free_r+0x74>
 8012046:	230c      	movs	r3, #12
 8012048:	602b      	str	r3, [r5, #0]
 801204a:	e7d6      	b.n	8011ffa <_free_r+0x22>
 801204c:	6820      	ldr	r0, [r4, #0]
 801204e:	1821      	adds	r1, r4, r0
 8012050:	428b      	cmp	r3, r1
 8012052:	bf04      	itt	eq
 8012054:	6819      	ldreq	r1, [r3, #0]
 8012056:	685b      	ldreq	r3, [r3, #4]
 8012058:	6063      	str	r3, [r4, #4]
 801205a:	bf04      	itt	eq
 801205c:	1809      	addeq	r1, r1, r0
 801205e:	6021      	streq	r1, [r4, #0]
 8012060:	6054      	str	r4, [r2, #4]
 8012062:	e7ca      	b.n	8011ffa <_free_r+0x22>
 8012064:	bd38      	pop	{r3, r4, r5, pc}
 8012066:	bf00      	nop
 8012068:	20002814 	.word	0x20002814

0801206c <sbrk_aligned>:
 801206c:	b570      	push	{r4, r5, r6, lr}
 801206e:	4e0f      	ldr	r6, [pc, #60]	@ (80120ac <sbrk_aligned+0x40>)
 8012070:	460c      	mov	r4, r1
 8012072:	6831      	ldr	r1, [r6, #0]
 8012074:	4605      	mov	r5, r0
 8012076:	b911      	cbnz	r1, 801207e <sbrk_aligned+0x12>
 8012078:	f000 fba4 	bl	80127c4 <_sbrk_r>
 801207c:	6030      	str	r0, [r6, #0]
 801207e:	4621      	mov	r1, r4
 8012080:	4628      	mov	r0, r5
 8012082:	f000 fb9f 	bl	80127c4 <_sbrk_r>
 8012086:	1c43      	adds	r3, r0, #1
 8012088:	d103      	bne.n	8012092 <sbrk_aligned+0x26>
 801208a:	f04f 34ff 	mov.w	r4, #4294967295
 801208e:	4620      	mov	r0, r4
 8012090:	bd70      	pop	{r4, r5, r6, pc}
 8012092:	1cc4      	adds	r4, r0, #3
 8012094:	f024 0403 	bic.w	r4, r4, #3
 8012098:	42a0      	cmp	r0, r4
 801209a:	d0f8      	beq.n	801208e <sbrk_aligned+0x22>
 801209c:	1a21      	subs	r1, r4, r0
 801209e:	4628      	mov	r0, r5
 80120a0:	f000 fb90 	bl	80127c4 <_sbrk_r>
 80120a4:	3001      	adds	r0, #1
 80120a6:	d1f2      	bne.n	801208e <sbrk_aligned+0x22>
 80120a8:	e7ef      	b.n	801208a <sbrk_aligned+0x1e>
 80120aa:	bf00      	nop
 80120ac:	20002810 	.word	0x20002810

080120b0 <_malloc_r>:
 80120b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80120b4:	1ccd      	adds	r5, r1, #3
 80120b6:	f025 0503 	bic.w	r5, r5, #3
 80120ba:	3508      	adds	r5, #8
 80120bc:	2d0c      	cmp	r5, #12
 80120be:	bf38      	it	cc
 80120c0:	250c      	movcc	r5, #12
 80120c2:	2d00      	cmp	r5, #0
 80120c4:	4606      	mov	r6, r0
 80120c6:	db01      	blt.n	80120cc <_malloc_r+0x1c>
 80120c8:	42a9      	cmp	r1, r5
 80120ca:	d904      	bls.n	80120d6 <_malloc_r+0x26>
 80120cc:	230c      	movs	r3, #12
 80120ce:	6033      	str	r3, [r6, #0]
 80120d0:	2000      	movs	r0, #0
 80120d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80120d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80121ac <_malloc_r+0xfc>
 80120da:	f000 f869 	bl	80121b0 <__malloc_lock>
 80120de:	f8d8 3000 	ldr.w	r3, [r8]
 80120e2:	461c      	mov	r4, r3
 80120e4:	bb44      	cbnz	r4, 8012138 <_malloc_r+0x88>
 80120e6:	4629      	mov	r1, r5
 80120e8:	4630      	mov	r0, r6
 80120ea:	f7ff ffbf 	bl	801206c <sbrk_aligned>
 80120ee:	1c43      	adds	r3, r0, #1
 80120f0:	4604      	mov	r4, r0
 80120f2:	d158      	bne.n	80121a6 <_malloc_r+0xf6>
 80120f4:	f8d8 4000 	ldr.w	r4, [r8]
 80120f8:	4627      	mov	r7, r4
 80120fa:	2f00      	cmp	r7, #0
 80120fc:	d143      	bne.n	8012186 <_malloc_r+0xd6>
 80120fe:	2c00      	cmp	r4, #0
 8012100:	d04b      	beq.n	801219a <_malloc_r+0xea>
 8012102:	6823      	ldr	r3, [r4, #0]
 8012104:	4639      	mov	r1, r7
 8012106:	4630      	mov	r0, r6
 8012108:	eb04 0903 	add.w	r9, r4, r3
 801210c:	f000 fb5a 	bl	80127c4 <_sbrk_r>
 8012110:	4581      	cmp	r9, r0
 8012112:	d142      	bne.n	801219a <_malloc_r+0xea>
 8012114:	6821      	ldr	r1, [r4, #0]
 8012116:	1a6d      	subs	r5, r5, r1
 8012118:	4629      	mov	r1, r5
 801211a:	4630      	mov	r0, r6
 801211c:	f7ff ffa6 	bl	801206c <sbrk_aligned>
 8012120:	3001      	adds	r0, #1
 8012122:	d03a      	beq.n	801219a <_malloc_r+0xea>
 8012124:	6823      	ldr	r3, [r4, #0]
 8012126:	442b      	add	r3, r5
 8012128:	6023      	str	r3, [r4, #0]
 801212a:	f8d8 3000 	ldr.w	r3, [r8]
 801212e:	685a      	ldr	r2, [r3, #4]
 8012130:	bb62      	cbnz	r2, 801218c <_malloc_r+0xdc>
 8012132:	f8c8 7000 	str.w	r7, [r8]
 8012136:	e00f      	b.n	8012158 <_malloc_r+0xa8>
 8012138:	6822      	ldr	r2, [r4, #0]
 801213a:	1b52      	subs	r2, r2, r5
 801213c:	d420      	bmi.n	8012180 <_malloc_r+0xd0>
 801213e:	2a0b      	cmp	r2, #11
 8012140:	d917      	bls.n	8012172 <_malloc_r+0xc2>
 8012142:	1961      	adds	r1, r4, r5
 8012144:	42a3      	cmp	r3, r4
 8012146:	6025      	str	r5, [r4, #0]
 8012148:	bf18      	it	ne
 801214a:	6059      	strne	r1, [r3, #4]
 801214c:	6863      	ldr	r3, [r4, #4]
 801214e:	bf08      	it	eq
 8012150:	f8c8 1000 	streq.w	r1, [r8]
 8012154:	5162      	str	r2, [r4, r5]
 8012156:	604b      	str	r3, [r1, #4]
 8012158:	4630      	mov	r0, r6
 801215a:	f000 f82f 	bl	80121bc <__malloc_unlock>
 801215e:	f104 000b 	add.w	r0, r4, #11
 8012162:	1d23      	adds	r3, r4, #4
 8012164:	f020 0007 	bic.w	r0, r0, #7
 8012168:	1ac2      	subs	r2, r0, r3
 801216a:	bf1c      	itt	ne
 801216c:	1a1b      	subne	r3, r3, r0
 801216e:	50a3      	strne	r3, [r4, r2]
 8012170:	e7af      	b.n	80120d2 <_malloc_r+0x22>
 8012172:	6862      	ldr	r2, [r4, #4]
 8012174:	42a3      	cmp	r3, r4
 8012176:	bf0c      	ite	eq
 8012178:	f8c8 2000 	streq.w	r2, [r8]
 801217c:	605a      	strne	r2, [r3, #4]
 801217e:	e7eb      	b.n	8012158 <_malloc_r+0xa8>
 8012180:	4623      	mov	r3, r4
 8012182:	6864      	ldr	r4, [r4, #4]
 8012184:	e7ae      	b.n	80120e4 <_malloc_r+0x34>
 8012186:	463c      	mov	r4, r7
 8012188:	687f      	ldr	r7, [r7, #4]
 801218a:	e7b6      	b.n	80120fa <_malloc_r+0x4a>
 801218c:	461a      	mov	r2, r3
 801218e:	685b      	ldr	r3, [r3, #4]
 8012190:	42a3      	cmp	r3, r4
 8012192:	d1fb      	bne.n	801218c <_malloc_r+0xdc>
 8012194:	2300      	movs	r3, #0
 8012196:	6053      	str	r3, [r2, #4]
 8012198:	e7de      	b.n	8012158 <_malloc_r+0xa8>
 801219a:	230c      	movs	r3, #12
 801219c:	6033      	str	r3, [r6, #0]
 801219e:	4630      	mov	r0, r6
 80121a0:	f000 f80c 	bl	80121bc <__malloc_unlock>
 80121a4:	e794      	b.n	80120d0 <_malloc_r+0x20>
 80121a6:	6005      	str	r5, [r0, #0]
 80121a8:	e7d6      	b.n	8012158 <_malloc_r+0xa8>
 80121aa:	bf00      	nop
 80121ac:	20002814 	.word	0x20002814

080121b0 <__malloc_lock>:
 80121b0:	4801      	ldr	r0, [pc, #4]	@ (80121b8 <__malloc_lock+0x8>)
 80121b2:	f7ff bf01 	b.w	8011fb8 <__retarget_lock_acquire_recursive>
 80121b6:	bf00      	nop
 80121b8:	2000280c 	.word	0x2000280c

080121bc <__malloc_unlock>:
 80121bc:	4801      	ldr	r0, [pc, #4]	@ (80121c4 <__malloc_unlock+0x8>)
 80121be:	f7ff befc 	b.w	8011fba <__retarget_lock_release_recursive>
 80121c2:	bf00      	nop
 80121c4:	2000280c 	.word	0x2000280c

080121c8 <__ssputs_r>:
 80121c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80121cc:	688e      	ldr	r6, [r1, #8]
 80121ce:	461f      	mov	r7, r3
 80121d0:	42be      	cmp	r6, r7
 80121d2:	680b      	ldr	r3, [r1, #0]
 80121d4:	4682      	mov	sl, r0
 80121d6:	460c      	mov	r4, r1
 80121d8:	4690      	mov	r8, r2
 80121da:	d82d      	bhi.n	8012238 <__ssputs_r+0x70>
 80121dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80121e0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80121e4:	d026      	beq.n	8012234 <__ssputs_r+0x6c>
 80121e6:	6965      	ldr	r5, [r4, #20]
 80121e8:	6909      	ldr	r1, [r1, #16]
 80121ea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80121ee:	eba3 0901 	sub.w	r9, r3, r1
 80121f2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80121f6:	1c7b      	adds	r3, r7, #1
 80121f8:	444b      	add	r3, r9
 80121fa:	106d      	asrs	r5, r5, #1
 80121fc:	429d      	cmp	r5, r3
 80121fe:	bf38      	it	cc
 8012200:	461d      	movcc	r5, r3
 8012202:	0553      	lsls	r3, r2, #21
 8012204:	d527      	bpl.n	8012256 <__ssputs_r+0x8e>
 8012206:	4629      	mov	r1, r5
 8012208:	f7ff ff52 	bl	80120b0 <_malloc_r>
 801220c:	4606      	mov	r6, r0
 801220e:	b360      	cbz	r0, 801226a <__ssputs_r+0xa2>
 8012210:	6921      	ldr	r1, [r4, #16]
 8012212:	464a      	mov	r2, r9
 8012214:	f7ff fed2 	bl	8011fbc <memcpy>
 8012218:	89a3      	ldrh	r3, [r4, #12]
 801221a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801221e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012222:	81a3      	strh	r3, [r4, #12]
 8012224:	6126      	str	r6, [r4, #16]
 8012226:	6165      	str	r5, [r4, #20]
 8012228:	444e      	add	r6, r9
 801222a:	eba5 0509 	sub.w	r5, r5, r9
 801222e:	6026      	str	r6, [r4, #0]
 8012230:	60a5      	str	r5, [r4, #8]
 8012232:	463e      	mov	r6, r7
 8012234:	42be      	cmp	r6, r7
 8012236:	d900      	bls.n	801223a <__ssputs_r+0x72>
 8012238:	463e      	mov	r6, r7
 801223a:	6820      	ldr	r0, [r4, #0]
 801223c:	4632      	mov	r2, r6
 801223e:	4641      	mov	r1, r8
 8012240:	f000 faa6 	bl	8012790 <memmove>
 8012244:	68a3      	ldr	r3, [r4, #8]
 8012246:	1b9b      	subs	r3, r3, r6
 8012248:	60a3      	str	r3, [r4, #8]
 801224a:	6823      	ldr	r3, [r4, #0]
 801224c:	4433      	add	r3, r6
 801224e:	6023      	str	r3, [r4, #0]
 8012250:	2000      	movs	r0, #0
 8012252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012256:	462a      	mov	r2, r5
 8012258:	f000 fac4 	bl	80127e4 <_realloc_r>
 801225c:	4606      	mov	r6, r0
 801225e:	2800      	cmp	r0, #0
 8012260:	d1e0      	bne.n	8012224 <__ssputs_r+0x5c>
 8012262:	6921      	ldr	r1, [r4, #16]
 8012264:	4650      	mov	r0, sl
 8012266:	f7ff feb7 	bl	8011fd8 <_free_r>
 801226a:	230c      	movs	r3, #12
 801226c:	f8ca 3000 	str.w	r3, [sl]
 8012270:	89a3      	ldrh	r3, [r4, #12]
 8012272:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012276:	81a3      	strh	r3, [r4, #12]
 8012278:	f04f 30ff 	mov.w	r0, #4294967295
 801227c:	e7e9      	b.n	8012252 <__ssputs_r+0x8a>
	...

08012280 <_svfiprintf_r>:
 8012280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012284:	4698      	mov	r8, r3
 8012286:	898b      	ldrh	r3, [r1, #12]
 8012288:	061b      	lsls	r3, r3, #24
 801228a:	b09d      	sub	sp, #116	@ 0x74
 801228c:	4607      	mov	r7, r0
 801228e:	460d      	mov	r5, r1
 8012290:	4614      	mov	r4, r2
 8012292:	d510      	bpl.n	80122b6 <_svfiprintf_r+0x36>
 8012294:	690b      	ldr	r3, [r1, #16]
 8012296:	b973      	cbnz	r3, 80122b6 <_svfiprintf_r+0x36>
 8012298:	2140      	movs	r1, #64	@ 0x40
 801229a:	f7ff ff09 	bl	80120b0 <_malloc_r>
 801229e:	6028      	str	r0, [r5, #0]
 80122a0:	6128      	str	r0, [r5, #16]
 80122a2:	b930      	cbnz	r0, 80122b2 <_svfiprintf_r+0x32>
 80122a4:	230c      	movs	r3, #12
 80122a6:	603b      	str	r3, [r7, #0]
 80122a8:	f04f 30ff 	mov.w	r0, #4294967295
 80122ac:	b01d      	add	sp, #116	@ 0x74
 80122ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122b2:	2340      	movs	r3, #64	@ 0x40
 80122b4:	616b      	str	r3, [r5, #20]
 80122b6:	2300      	movs	r3, #0
 80122b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80122ba:	2320      	movs	r3, #32
 80122bc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80122c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80122c4:	2330      	movs	r3, #48	@ 0x30
 80122c6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8012464 <_svfiprintf_r+0x1e4>
 80122ca:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80122ce:	f04f 0901 	mov.w	r9, #1
 80122d2:	4623      	mov	r3, r4
 80122d4:	469a      	mov	sl, r3
 80122d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80122da:	b10a      	cbz	r2, 80122e0 <_svfiprintf_r+0x60>
 80122dc:	2a25      	cmp	r2, #37	@ 0x25
 80122de:	d1f9      	bne.n	80122d4 <_svfiprintf_r+0x54>
 80122e0:	ebba 0b04 	subs.w	fp, sl, r4
 80122e4:	d00b      	beq.n	80122fe <_svfiprintf_r+0x7e>
 80122e6:	465b      	mov	r3, fp
 80122e8:	4622      	mov	r2, r4
 80122ea:	4629      	mov	r1, r5
 80122ec:	4638      	mov	r0, r7
 80122ee:	f7ff ff6b 	bl	80121c8 <__ssputs_r>
 80122f2:	3001      	adds	r0, #1
 80122f4:	f000 80a7 	beq.w	8012446 <_svfiprintf_r+0x1c6>
 80122f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80122fa:	445a      	add	r2, fp
 80122fc:	9209      	str	r2, [sp, #36]	@ 0x24
 80122fe:	f89a 3000 	ldrb.w	r3, [sl]
 8012302:	2b00      	cmp	r3, #0
 8012304:	f000 809f 	beq.w	8012446 <_svfiprintf_r+0x1c6>
 8012308:	2300      	movs	r3, #0
 801230a:	f04f 32ff 	mov.w	r2, #4294967295
 801230e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012312:	f10a 0a01 	add.w	sl, sl, #1
 8012316:	9304      	str	r3, [sp, #16]
 8012318:	9307      	str	r3, [sp, #28]
 801231a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801231e:	931a      	str	r3, [sp, #104]	@ 0x68
 8012320:	4654      	mov	r4, sl
 8012322:	2205      	movs	r2, #5
 8012324:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012328:	484e      	ldr	r0, [pc, #312]	@ (8012464 <_svfiprintf_r+0x1e4>)
 801232a:	f7ed ff61 	bl	80001f0 <memchr>
 801232e:	9a04      	ldr	r2, [sp, #16]
 8012330:	b9d8      	cbnz	r0, 801236a <_svfiprintf_r+0xea>
 8012332:	06d0      	lsls	r0, r2, #27
 8012334:	bf44      	itt	mi
 8012336:	2320      	movmi	r3, #32
 8012338:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801233c:	0711      	lsls	r1, r2, #28
 801233e:	bf44      	itt	mi
 8012340:	232b      	movmi	r3, #43	@ 0x2b
 8012342:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012346:	f89a 3000 	ldrb.w	r3, [sl]
 801234a:	2b2a      	cmp	r3, #42	@ 0x2a
 801234c:	d015      	beq.n	801237a <_svfiprintf_r+0xfa>
 801234e:	9a07      	ldr	r2, [sp, #28]
 8012350:	4654      	mov	r4, sl
 8012352:	2000      	movs	r0, #0
 8012354:	f04f 0c0a 	mov.w	ip, #10
 8012358:	4621      	mov	r1, r4
 801235a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801235e:	3b30      	subs	r3, #48	@ 0x30
 8012360:	2b09      	cmp	r3, #9
 8012362:	d94b      	bls.n	80123fc <_svfiprintf_r+0x17c>
 8012364:	b1b0      	cbz	r0, 8012394 <_svfiprintf_r+0x114>
 8012366:	9207      	str	r2, [sp, #28]
 8012368:	e014      	b.n	8012394 <_svfiprintf_r+0x114>
 801236a:	eba0 0308 	sub.w	r3, r0, r8
 801236e:	fa09 f303 	lsl.w	r3, r9, r3
 8012372:	4313      	orrs	r3, r2
 8012374:	9304      	str	r3, [sp, #16]
 8012376:	46a2      	mov	sl, r4
 8012378:	e7d2      	b.n	8012320 <_svfiprintf_r+0xa0>
 801237a:	9b03      	ldr	r3, [sp, #12]
 801237c:	1d19      	adds	r1, r3, #4
 801237e:	681b      	ldr	r3, [r3, #0]
 8012380:	9103      	str	r1, [sp, #12]
 8012382:	2b00      	cmp	r3, #0
 8012384:	bfbb      	ittet	lt
 8012386:	425b      	neglt	r3, r3
 8012388:	f042 0202 	orrlt.w	r2, r2, #2
 801238c:	9307      	strge	r3, [sp, #28]
 801238e:	9307      	strlt	r3, [sp, #28]
 8012390:	bfb8      	it	lt
 8012392:	9204      	strlt	r2, [sp, #16]
 8012394:	7823      	ldrb	r3, [r4, #0]
 8012396:	2b2e      	cmp	r3, #46	@ 0x2e
 8012398:	d10a      	bne.n	80123b0 <_svfiprintf_r+0x130>
 801239a:	7863      	ldrb	r3, [r4, #1]
 801239c:	2b2a      	cmp	r3, #42	@ 0x2a
 801239e:	d132      	bne.n	8012406 <_svfiprintf_r+0x186>
 80123a0:	9b03      	ldr	r3, [sp, #12]
 80123a2:	1d1a      	adds	r2, r3, #4
 80123a4:	681b      	ldr	r3, [r3, #0]
 80123a6:	9203      	str	r2, [sp, #12]
 80123a8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80123ac:	3402      	adds	r4, #2
 80123ae:	9305      	str	r3, [sp, #20]
 80123b0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8012474 <_svfiprintf_r+0x1f4>
 80123b4:	7821      	ldrb	r1, [r4, #0]
 80123b6:	2203      	movs	r2, #3
 80123b8:	4650      	mov	r0, sl
 80123ba:	f7ed ff19 	bl	80001f0 <memchr>
 80123be:	b138      	cbz	r0, 80123d0 <_svfiprintf_r+0x150>
 80123c0:	9b04      	ldr	r3, [sp, #16]
 80123c2:	eba0 000a 	sub.w	r0, r0, sl
 80123c6:	2240      	movs	r2, #64	@ 0x40
 80123c8:	4082      	lsls	r2, r0
 80123ca:	4313      	orrs	r3, r2
 80123cc:	3401      	adds	r4, #1
 80123ce:	9304      	str	r3, [sp, #16]
 80123d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80123d4:	4824      	ldr	r0, [pc, #144]	@ (8012468 <_svfiprintf_r+0x1e8>)
 80123d6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80123da:	2206      	movs	r2, #6
 80123dc:	f7ed ff08 	bl	80001f0 <memchr>
 80123e0:	2800      	cmp	r0, #0
 80123e2:	d036      	beq.n	8012452 <_svfiprintf_r+0x1d2>
 80123e4:	4b21      	ldr	r3, [pc, #132]	@ (801246c <_svfiprintf_r+0x1ec>)
 80123e6:	bb1b      	cbnz	r3, 8012430 <_svfiprintf_r+0x1b0>
 80123e8:	9b03      	ldr	r3, [sp, #12]
 80123ea:	3307      	adds	r3, #7
 80123ec:	f023 0307 	bic.w	r3, r3, #7
 80123f0:	3308      	adds	r3, #8
 80123f2:	9303      	str	r3, [sp, #12]
 80123f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80123f6:	4433      	add	r3, r6
 80123f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80123fa:	e76a      	b.n	80122d2 <_svfiprintf_r+0x52>
 80123fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8012400:	460c      	mov	r4, r1
 8012402:	2001      	movs	r0, #1
 8012404:	e7a8      	b.n	8012358 <_svfiprintf_r+0xd8>
 8012406:	2300      	movs	r3, #0
 8012408:	3401      	adds	r4, #1
 801240a:	9305      	str	r3, [sp, #20]
 801240c:	4619      	mov	r1, r3
 801240e:	f04f 0c0a 	mov.w	ip, #10
 8012412:	4620      	mov	r0, r4
 8012414:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012418:	3a30      	subs	r2, #48	@ 0x30
 801241a:	2a09      	cmp	r2, #9
 801241c:	d903      	bls.n	8012426 <_svfiprintf_r+0x1a6>
 801241e:	2b00      	cmp	r3, #0
 8012420:	d0c6      	beq.n	80123b0 <_svfiprintf_r+0x130>
 8012422:	9105      	str	r1, [sp, #20]
 8012424:	e7c4      	b.n	80123b0 <_svfiprintf_r+0x130>
 8012426:	fb0c 2101 	mla	r1, ip, r1, r2
 801242a:	4604      	mov	r4, r0
 801242c:	2301      	movs	r3, #1
 801242e:	e7f0      	b.n	8012412 <_svfiprintf_r+0x192>
 8012430:	ab03      	add	r3, sp, #12
 8012432:	9300      	str	r3, [sp, #0]
 8012434:	462a      	mov	r2, r5
 8012436:	4b0e      	ldr	r3, [pc, #56]	@ (8012470 <_svfiprintf_r+0x1f0>)
 8012438:	a904      	add	r1, sp, #16
 801243a:	4638      	mov	r0, r7
 801243c:	f3af 8000 	nop.w
 8012440:	1c42      	adds	r2, r0, #1
 8012442:	4606      	mov	r6, r0
 8012444:	d1d6      	bne.n	80123f4 <_svfiprintf_r+0x174>
 8012446:	89ab      	ldrh	r3, [r5, #12]
 8012448:	065b      	lsls	r3, r3, #25
 801244a:	f53f af2d 	bmi.w	80122a8 <_svfiprintf_r+0x28>
 801244e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012450:	e72c      	b.n	80122ac <_svfiprintf_r+0x2c>
 8012452:	ab03      	add	r3, sp, #12
 8012454:	9300      	str	r3, [sp, #0]
 8012456:	462a      	mov	r2, r5
 8012458:	4b05      	ldr	r3, [pc, #20]	@ (8012470 <_svfiprintf_r+0x1f0>)
 801245a:	a904      	add	r1, sp, #16
 801245c:	4638      	mov	r0, r7
 801245e:	f000 f879 	bl	8012554 <_printf_i>
 8012462:	e7ed      	b.n	8012440 <_svfiprintf_r+0x1c0>
 8012464:	08013f59 	.word	0x08013f59
 8012468:	08013f63 	.word	0x08013f63
 801246c:	00000000 	.word	0x00000000
 8012470:	080121c9 	.word	0x080121c9
 8012474:	08013f5f 	.word	0x08013f5f

08012478 <_printf_common>:
 8012478:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801247c:	4616      	mov	r6, r2
 801247e:	4698      	mov	r8, r3
 8012480:	688a      	ldr	r2, [r1, #8]
 8012482:	690b      	ldr	r3, [r1, #16]
 8012484:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012488:	4293      	cmp	r3, r2
 801248a:	bfb8      	it	lt
 801248c:	4613      	movlt	r3, r2
 801248e:	6033      	str	r3, [r6, #0]
 8012490:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8012494:	4607      	mov	r7, r0
 8012496:	460c      	mov	r4, r1
 8012498:	b10a      	cbz	r2, 801249e <_printf_common+0x26>
 801249a:	3301      	adds	r3, #1
 801249c:	6033      	str	r3, [r6, #0]
 801249e:	6823      	ldr	r3, [r4, #0]
 80124a0:	0699      	lsls	r1, r3, #26
 80124a2:	bf42      	ittt	mi
 80124a4:	6833      	ldrmi	r3, [r6, #0]
 80124a6:	3302      	addmi	r3, #2
 80124a8:	6033      	strmi	r3, [r6, #0]
 80124aa:	6825      	ldr	r5, [r4, #0]
 80124ac:	f015 0506 	ands.w	r5, r5, #6
 80124b0:	d106      	bne.n	80124c0 <_printf_common+0x48>
 80124b2:	f104 0a19 	add.w	sl, r4, #25
 80124b6:	68e3      	ldr	r3, [r4, #12]
 80124b8:	6832      	ldr	r2, [r6, #0]
 80124ba:	1a9b      	subs	r3, r3, r2
 80124bc:	42ab      	cmp	r3, r5
 80124be:	dc26      	bgt.n	801250e <_printf_common+0x96>
 80124c0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80124c4:	6822      	ldr	r2, [r4, #0]
 80124c6:	3b00      	subs	r3, #0
 80124c8:	bf18      	it	ne
 80124ca:	2301      	movne	r3, #1
 80124cc:	0692      	lsls	r2, r2, #26
 80124ce:	d42b      	bmi.n	8012528 <_printf_common+0xb0>
 80124d0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80124d4:	4641      	mov	r1, r8
 80124d6:	4638      	mov	r0, r7
 80124d8:	47c8      	blx	r9
 80124da:	3001      	adds	r0, #1
 80124dc:	d01e      	beq.n	801251c <_printf_common+0xa4>
 80124de:	6823      	ldr	r3, [r4, #0]
 80124e0:	6922      	ldr	r2, [r4, #16]
 80124e2:	f003 0306 	and.w	r3, r3, #6
 80124e6:	2b04      	cmp	r3, #4
 80124e8:	bf02      	ittt	eq
 80124ea:	68e5      	ldreq	r5, [r4, #12]
 80124ec:	6833      	ldreq	r3, [r6, #0]
 80124ee:	1aed      	subeq	r5, r5, r3
 80124f0:	68a3      	ldr	r3, [r4, #8]
 80124f2:	bf0c      	ite	eq
 80124f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80124f8:	2500      	movne	r5, #0
 80124fa:	4293      	cmp	r3, r2
 80124fc:	bfc4      	itt	gt
 80124fe:	1a9b      	subgt	r3, r3, r2
 8012500:	18ed      	addgt	r5, r5, r3
 8012502:	2600      	movs	r6, #0
 8012504:	341a      	adds	r4, #26
 8012506:	42b5      	cmp	r5, r6
 8012508:	d11a      	bne.n	8012540 <_printf_common+0xc8>
 801250a:	2000      	movs	r0, #0
 801250c:	e008      	b.n	8012520 <_printf_common+0xa8>
 801250e:	2301      	movs	r3, #1
 8012510:	4652      	mov	r2, sl
 8012512:	4641      	mov	r1, r8
 8012514:	4638      	mov	r0, r7
 8012516:	47c8      	blx	r9
 8012518:	3001      	adds	r0, #1
 801251a:	d103      	bne.n	8012524 <_printf_common+0xac>
 801251c:	f04f 30ff 	mov.w	r0, #4294967295
 8012520:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012524:	3501      	adds	r5, #1
 8012526:	e7c6      	b.n	80124b6 <_printf_common+0x3e>
 8012528:	18e1      	adds	r1, r4, r3
 801252a:	1c5a      	adds	r2, r3, #1
 801252c:	2030      	movs	r0, #48	@ 0x30
 801252e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8012532:	4422      	add	r2, r4
 8012534:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8012538:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801253c:	3302      	adds	r3, #2
 801253e:	e7c7      	b.n	80124d0 <_printf_common+0x58>
 8012540:	2301      	movs	r3, #1
 8012542:	4622      	mov	r2, r4
 8012544:	4641      	mov	r1, r8
 8012546:	4638      	mov	r0, r7
 8012548:	47c8      	blx	r9
 801254a:	3001      	adds	r0, #1
 801254c:	d0e6      	beq.n	801251c <_printf_common+0xa4>
 801254e:	3601      	adds	r6, #1
 8012550:	e7d9      	b.n	8012506 <_printf_common+0x8e>
	...

08012554 <_printf_i>:
 8012554:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012558:	7e0f      	ldrb	r7, [r1, #24]
 801255a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801255c:	2f78      	cmp	r7, #120	@ 0x78
 801255e:	4691      	mov	r9, r2
 8012560:	4680      	mov	r8, r0
 8012562:	460c      	mov	r4, r1
 8012564:	469a      	mov	sl, r3
 8012566:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801256a:	d807      	bhi.n	801257c <_printf_i+0x28>
 801256c:	2f62      	cmp	r7, #98	@ 0x62
 801256e:	d80a      	bhi.n	8012586 <_printf_i+0x32>
 8012570:	2f00      	cmp	r7, #0
 8012572:	f000 80d1 	beq.w	8012718 <_printf_i+0x1c4>
 8012576:	2f58      	cmp	r7, #88	@ 0x58
 8012578:	f000 80b8 	beq.w	80126ec <_printf_i+0x198>
 801257c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012580:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8012584:	e03a      	b.n	80125fc <_printf_i+0xa8>
 8012586:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801258a:	2b15      	cmp	r3, #21
 801258c:	d8f6      	bhi.n	801257c <_printf_i+0x28>
 801258e:	a101      	add	r1, pc, #4	@ (adr r1, 8012594 <_printf_i+0x40>)
 8012590:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012594:	080125ed 	.word	0x080125ed
 8012598:	08012601 	.word	0x08012601
 801259c:	0801257d 	.word	0x0801257d
 80125a0:	0801257d 	.word	0x0801257d
 80125a4:	0801257d 	.word	0x0801257d
 80125a8:	0801257d 	.word	0x0801257d
 80125ac:	08012601 	.word	0x08012601
 80125b0:	0801257d 	.word	0x0801257d
 80125b4:	0801257d 	.word	0x0801257d
 80125b8:	0801257d 	.word	0x0801257d
 80125bc:	0801257d 	.word	0x0801257d
 80125c0:	080126ff 	.word	0x080126ff
 80125c4:	0801262b 	.word	0x0801262b
 80125c8:	080126b9 	.word	0x080126b9
 80125cc:	0801257d 	.word	0x0801257d
 80125d0:	0801257d 	.word	0x0801257d
 80125d4:	08012721 	.word	0x08012721
 80125d8:	0801257d 	.word	0x0801257d
 80125dc:	0801262b 	.word	0x0801262b
 80125e0:	0801257d 	.word	0x0801257d
 80125e4:	0801257d 	.word	0x0801257d
 80125e8:	080126c1 	.word	0x080126c1
 80125ec:	6833      	ldr	r3, [r6, #0]
 80125ee:	1d1a      	adds	r2, r3, #4
 80125f0:	681b      	ldr	r3, [r3, #0]
 80125f2:	6032      	str	r2, [r6, #0]
 80125f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80125f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80125fc:	2301      	movs	r3, #1
 80125fe:	e09c      	b.n	801273a <_printf_i+0x1e6>
 8012600:	6833      	ldr	r3, [r6, #0]
 8012602:	6820      	ldr	r0, [r4, #0]
 8012604:	1d19      	adds	r1, r3, #4
 8012606:	6031      	str	r1, [r6, #0]
 8012608:	0606      	lsls	r6, r0, #24
 801260a:	d501      	bpl.n	8012610 <_printf_i+0xbc>
 801260c:	681d      	ldr	r5, [r3, #0]
 801260e:	e003      	b.n	8012618 <_printf_i+0xc4>
 8012610:	0645      	lsls	r5, r0, #25
 8012612:	d5fb      	bpl.n	801260c <_printf_i+0xb8>
 8012614:	f9b3 5000 	ldrsh.w	r5, [r3]
 8012618:	2d00      	cmp	r5, #0
 801261a:	da03      	bge.n	8012624 <_printf_i+0xd0>
 801261c:	232d      	movs	r3, #45	@ 0x2d
 801261e:	426d      	negs	r5, r5
 8012620:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012624:	4858      	ldr	r0, [pc, #352]	@ (8012788 <_printf_i+0x234>)
 8012626:	230a      	movs	r3, #10
 8012628:	e011      	b.n	801264e <_printf_i+0xfa>
 801262a:	6821      	ldr	r1, [r4, #0]
 801262c:	6833      	ldr	r3, [r6, #0]
 801262e:	0608      	lsls	r0, r1, #24
 8012630:	f853 5b04 	ldr.w	r5, [r3], #4
 8012634:	d402      	bmi.n	801263c <_printf_i+0xe8>
 8012636:	0649      	lsls	r1, r1, #25
 8012638:	bf48      	it	mi
 801263a:	b2ad      	uxthmi	r5, r5
 801263c:	2f6f      	cmp	r7, #111	@ 0x6f
 801263e:	4852      	ldr	r0, [pc, #328]	@ (8012788 <_printf_i+0x234>)
 8012640:	6033      	str	r3, [r6, #0]
 8012642:	bf14      	ite	ne
 8012644:	230a      	movne	r3, #10
 8012646:	2308      	moveq	r3, #8
 8012648:	2100      	movs	r1, #0
 801264a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801264e:	6866      	ldr	r6, [r4, #4]
 8012650:	60a6      	str	r6, [r4, #8]
 8012652:	2e00      	cmp	r6, #0
 8012654:	db05      	blt.n	8012662 <_printf_i+0x10e>
 8012656:	6821      	ldr	r1, [r4, #0]
 8012658:	432e      	orrs	r6, r5
 801265a:	f021 0104 	bic.w	r1, r1, #4
 801265e:	6021      	str	r1, [r4, #0]
 8012660:	d04b      	beq.n	80126fa <_printf_i+0x1a6>
 8012662:	4616      	mov	r6, r2
 8012664:	fbb5 f1f3 	udiv	r1, r5, r3
 8012668:	fb03 5711 	mls	r7, r3, r1, r5
 801266c:	5dc7      	ldrb	r7, [r0, r7]
 801266e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012672:	462f      	mov	r7, r5
 8012674:	42bb      	cmp	r3, r7
 8012676:	460d      	mov	r5, r1
 8012678:	d9f4      	bls.n	8012664 <_printf_i+0x110>
 801267a:	2b08      	cmp	r3, #8
 801267c:	d10b      	bne.n	8012696 <_printf_i+0x142>
 801267e:	6823      	ldr	r3, [r4, #0]
 8012680:	07df      	lsls	r7, r3, #31
 8012682:	d508      	bpl.n	8012696 <_printf_i+0x142>
 8012684:	6923      	ldr	r3, [r4, #16]
 8012686:	6861      	ldr	r1, [r4, #4]
 8012688:	4299      	cmp	r1, r3
 801268a:	bfde      	ittt	le
 801268c:	2330      	movle	r3, #48	@ 0x30
 801268e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012692:	f106 36ff 	addle.w	r6, r6, #4294967295
 8012696:	1b92      	subs	r2, r2, r6
 8012698:	6122      	str	r2, [r4, #16]
 801269a:	f8cd a000 	str.w	sl, [sp]
 801269e:	464b      	mov	r3, r9
 80126a0:	aa03      	add	r2, sp, #12
 80126a2:	4621      	mov	r1, r4
 80126a4:	4640      	mov	r0, r8
 80126a6:	f7ff fee7 	bl	8012478 <_printf_common>
 80126aa:	3001      	adds	r0, #1
 80126ac:	d14a      	bne.n	8012744 <_printf_i+0x1f0>
 80126ae:	f04f 30ff 	mov.w	r0, #4294967295
 80126b2:	b004      	add	sp, #16
 80126b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80126b8:	6823      	ldr	r3, [r4, #0]
 80126ba:	f043 0320 	orr.w	r3, r3, #32
 80126be:	6023      	str	r3, [r4, #0]
 80126c0:	4832      	ldr	r0, [pc, #200]	@ (801278c <_printf_i+0x238>)
 80126c2:	2778      	movs	r7, #120	@ 0x78
 80126c4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80126c8:	6823      	ldr	r3, [r4, #0]
 80126ca:	6831      	ldr	r1, [r6, #0]
 80126cc:	061f      	lsls	r7, r3, #24
 80126ce:	f851 5b04 	ldr.w	r5, [r1], #4
 80126d2:	d402      	bmi.n	80126da <_printf_i+0x186>
 80126d4:	065f      	lsls	r7, r3, #25
 80126d6:	bf48      	it	mi
 80126d8:	b2ad      	uxthmi	r5, r5
 80126da:	6031      	str	r1, [r6, #0]
 80126dc:	07d9      	lsls	r1, r3, #31
 80126de:	bf44      	itt	mi
 80126e0:	f043 0320 	orrmi.w	r3, r3, #32
 80126e4:	6023      	strmi	r3, [r4, #0]
 80126e6:	b11d      	cbz	r5, 80126f0 <_printf_i+0x19c>
 80126e8:	2310      	movs	r3, #16
 80126ea:	e7ad      	b.n	8012648 <_printf_i+0xf4>
 80126ec:	4826      	ldr	r0, [pc, #152]	@ (8012788 <_printf_i+0x234>)
 80126ee:	e7e9      	b.n	80126c4 <_printf_i+0x170>
 80126f0:	6823      	ldr	r3, [r4, #0]
 80126f2:	f023 0320 	bic.w	r3, r3, #32
 80126f6:	6023      	str	r3, [r4, #0]
 80126f8:	e7f6      	b.n	80126e8 <_printf_i+0x194>
 80126fa:	4616      	mov	r6, r2
 80126fc:	e7bd      	b.n	801267a <_printf_i+0x126>
 80126fe:	6833      	ldr	r3, [r6, #0]
 8012700:	6825      	ldr	r5, [r4, #0]
 8012702:	6961      	ldr	r1, [r4, #20]
 8012704:	1d18      	adds	r0, r3, #4
 8012706:	6030      	str	r0, [r6, #0]
 8012708:	062e      	lsls	r6, r5, #24
 801270a:	681b      	ldr	r3, [r3, #0]
 801270c:	d501      	bpl.n	8012712 <_printf_i+0x1be>
 801270e:	6019      	str	r1, [r3, #0]
 8012710:	e002      	b.n	8012718 <_printf_i+0x1c4>
 8012712:	0668      	lsls	r0, r5, #25
 8012714:	d5fb      	bpl.n	801270e <_printf_i+0x1ba>
 8012716:	8019      	strh	r1, [r3, #0]
 8012718:	2300      	movs	r3, #0
 801271a:	6123      	str	r3, [r4, #16]
 801271c:	4616      	mov	r6, r2
 801271e:	e7bc      	b.n	801269a <_printf_i+0x146>
 8012720:	6833      	ldr	r3, [r6, #0]
 8012722:	1d1a      	adds	r2, r3, #4
 8012724:	6032      	str	r2, [r6, #0]
 8012726:	681e      	ldr	r6, [r3, #0]
 8012728:	6862      	ldr	r2, [r4, #4]
 801272a:	2100      	movs	r1, #0
 801272c:	4630      	mov	r0, r6
 801272e:	f7ed fd5f 	bl	80001f0 <memchr>
 8012732:	b108      	cbz	r0, 8012738 <_printf_i+0x1e4>
 8012734:	1b80      	subs	r0, r0, r6
 8012736:	6060      	str	r0, [r4, #4]
 8012738:	6863      	ldr	r3, [r4, #4]
 801273a:	6123      	str	r3, [r4, #16]
 801273c:	2300      	movs	r3, #0
 801273e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012742:	e7aa      	b.n	801269a <_printf_i+0x146>
 8012744:	6923      	ldr	r3, [r4, #16]
 8012746:	4632      	mov	r2, r6
 8012748:	4649      	mov	r1, r9
 801274a:	4640      	mov	r0, r8
 801274c:	47d0      	blx	sl
 801274e:	3001      	adds	r0, #1
 8012750:	d0ad      	beq.n	80126ae <_printf_i+0x15a>
 8012752:	6823      	ldr	r3, [r4, #0]
 8012754:	079b      	lsls	r3, r3, #30
 8012756:	d413      	bmi.n	8012780 <_printf_i+0x22c>
 8012758:	68e0      	ldr	r0, [r4, #12]
 801275a:	9b03      	ldr	r3, [sp, #12]
 801275c:	4298      	cmp	r0, r3
 801275e:	bfb8      	it	lt
 8012760:	4618      	movlt	r0, r3
 8012762:	e7a6      	b.n	80126b2 <_printf_i+0x15e>
 8012764:	2301      	movs	r3, #1
 8012766:	4632      	mov	r2, r6
 8012768:	4649      	mov	r1, r9
 801276a:	4640      	mov	r0, r8
 801276c:	47d0      	blx	sl
 801276e:	3001      	adds	r0, #1
 8012770:	d09d      	beq.n	80126ae <_printf_i+0x15a>
 8012772:	3501      	adds	r5, #1
 8012774:	68e3      	ldr	r3, [r4, #12]
 8012776:	9903      	ldr	r1, [sp, #12]
 8012778:	1a5b      	subs	r3, r3, r1
 801277a:	42ab      	cmp	r3, r5
 801277c:	dcf2      	bgt.n	8012764 <_printf_i+0x210>
 801277e:	e7eb      	b.n	8012758 <_printf_i+0x204>
 8012780:	2500      	movs	r5, #0
 8012782:	f104 0619 	add.w	r6, r4, #25
 8012786:	e7f5      	b.n	8012774 <_printf_i+0x220>
 8012788:	08013f6a 	.word	0x08013f6a
 801278c:	08013f7b 	.word	0x08013f7b

08012790 <memmove>:
 8012790:	4288      	cmp	r0, r1
 8012792:	b510      	push	{r4, lr}
 8012794:	eb01 0402 	add.w	r4, r1, r2
 8012798:	d902      	bls.n	80127a0 <memmove+0x10>
 801279a:	4284      	cmp	r4, r0
 801279c:	4623      	mov	r3, r4
 801279e:	d807      	bhi.n	80127b0 <memmove+0x20>
 80127a0:	1e43      	subs	r3, r0, #1
 80127a2:	42a1      	cmp	r1, r4
 80127a4:	d008      	beq.n	80127b8 <memmove+0x28>
 80127a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80127aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80127ae:	e7f8      	b.n	80127a2 <memmove+0x12>
 80127b0:	4402      	add	r2, r0
 80127b2:	4601      	mov	r1, r0
 80127b4:	428a      	cmp	r2, r1
 80127b6:	d100      	bne.n	80127ba <memmove+0x2a>
 80127b8:	bd10      	pop	{r4, pc}
 80127ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80127be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80127c2:	e7f7      	b.n	80127b4 <memmove+0x24>

080127c4 <_sbrk_r>:
 80127c4:	b538      	push	{r3, r4, r5, lr}
 80127c6:	4d06      	ldr	r5, [pc, #24]	@ (80127e0 <_sbrk_r+0x1c>)
 80127c8:	2300      	movs	r3, #0
 80127ca:	4604      	mov	r4, r0
 80127cc:	4608      	mov	r0, r1
 80127ce:	602b      	str	r3, [r5, #0]
 80127d0:	f7f2 fb88 	bl	8004ee4 <_sbrk>
 80127d4:	1c43      	adds	r3, r0, #1
 80127d6:	d102      	bne.n	80127de <_sbrk_r+0x1a>
 80127d8:	682b      	ldr	r3, [r5, #0]
 80127da:	b103      	cbz	r3, 80127de <_sbrk_r+0x1a>
 80127dc:	6023      	str	r3, [r4, #0]
 80127de:	bd38      	pop	{r3, r4, r5, pc}
 80127e0:	20002808 	.word	0x20002808

080127e4 <_realloc_r>:
 80127e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80127e8:	4607      	mov	r7, r0
 80127ea:	4614      	mov	r4, r2
 80127ec:	460d      	mov	r5, r1
 80127ee:	b921      	cbnz	r1, 80127fa <_realloc_r+0x16>
 80127f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80127f4:	4611      	mov	r1, r2
 80127f6:	f7ff bc5b 	b.w	80120b0 <_malloc_r>
 80127fa:	b92a      	cbnz	r2, 8012808 <_realloc_r+0x24>
 80127fc:	f7ff fbec 	bl	8011fd8 <_free_r>
 8012800:	4625      	mov	r5, r4
 8012802:	4628      	mov	r0, r5
 8012804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012808:	f000 f81a 	bl	8012840 <_malloc_usable_size_r>
 801280c:	4284      	cmp	r4, r0
 801280e:	4606      	mov	r6, r0
 8012810:	d802      	bhi.n	8012818 <_realloc_r+0x34>
 8012812:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012816:	d8f4      	bhi.n	8012802 <_realloc_r+0x1e>
 8012818:	4621      	mov	r1, r4
 801281a:	4638      	mov	r0, r7
 801281c:	f7ff fc48 	bl	80120b0 <_malloc_r>
 8012820:	4680      	mov	r8, r0
 8012822:	b908      	cbnz	r0, 8012828 <_realloc_r+0x44>
 8012824:	4645      	mov	r5, r8
 8012826:	e7ec      	b.n	8012802 <_realloc_r+0x1e>
 8012828:	42b4      	cmp	r4, r6
 801282a:	4622      	mov	r2, r4
 801282c:	4629      	mov	r1, r5
 801282e:	bf28      	it	cs
 8012830:	4632      	movcs	r2, r6
 8012832:	f7ff fbc3 	bl	8011fbc <memcpy>
 8012836:	4629      	mov	r1, r5
 8012838:	4638      	mov	r0, r7
 801283a:	f7ff fbcd 	bl	8011fd8 <_free_r>
 801283e:	e7f1      	b.n	8012824 <_realloc_r+0x40>

08012840 <_malloc_usable_size_r>:
 8012840:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012844:	1f18      	subs	r0, r3, #4
 8012846:	2b00      	cmp	r3, #0
 8012848:	bfbc      	itt	lt
 801284a:	580b      	ldrlt	r3, [r1, r0]
 801284c:	18c0      	addlt	r0, r0, r3
 801284e:	4770      	bx	lr

08012850 <_init>:
 8012850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012852:	bf00      	nop
 8012854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012856:	bc08      	pop	{r3}
 8012858:	469e      	mov	lr, r3
 801285a:	4770      	bx	lr

0801285c <_fini>:
 801285c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801285e:	bf00      	nop
 8012860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012862:	bc08      	pop	{r3}
 8012864:	469e      	mov	lr, r3
 8012866:	4770      	bx	lr
