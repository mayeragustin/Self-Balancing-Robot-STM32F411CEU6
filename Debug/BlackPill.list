
BlackPill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fdcc  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000123c  0800ff6c  0800ff6c  00010f6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080111a8  080111a8  00013160  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080111a8  080111a8  000121a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080111b0  080111b0  00013160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080111b0  080111b0  000121b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080111b4  080111b4  000121b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000160  20000000  080111b8  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000215c  20000160  08011318  00013160  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200022bc  08011318  000132bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00013160  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b489  00000000  00000000  00013190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000047e9  00000000  00000000  0002e619  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018f0  00000000  00000000  00032e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001321  00000000  00000000  000346f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c244  00000000  00000000  00035a19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020dda  00000000  00000000  00051c5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a00eb  00000000  00000000  00072a37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00112b22  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006cac  00000000  00000000  00112b68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a2  00000000  00000000  00119814  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000160 	.word	0x20000160
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ff54 	.word	0x0800ff54

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000164 	.word	0x20000164
 80001dc:	0800ff54 	.word	0x0800ff54

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <ADC_Conversion_Cplt>:
	0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff,
	0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff,
	0xff, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xf8
};

void ADC_Conversion_Cplt(uint16_t *rawData, uint16_t *filtredData){
 80005ac:	b490      	push	{r4, r7}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	6039      	str	r1, [r7, #0]
	for(uint8_t channel = 0; channel < ADC_NUM_SENSORS; channel++){
 80005b6:	2300      	movs	r3, #0
 80005b8:	73fb      	strb	r3, [r7, #15]
 80005ba:	e042      	b.n	8000642 <ADC_Conversion_Cplt+0x96>
		sumData[channel] -= mediaBuffer[index][channel];
 80005bc:	7bfb      	ldrb	r3, [r7, #15]
 80005be:	4a2b      	ldr	r2, [pc, #172]	@ (800066c <ADC_Conversion_Cplt+0xc0>)
 80005c0:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80005c4:	4b2a      	ldr	r3, [pc, #168]	@ (8000670 <ADC_Conversion_Cplt+0xc4>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	461c      	mov	r4, r3
 80005ca:	7bfa      	ldrb	r2, [r7, #15]
 80005cc:	4829      	ldr	r0, [pc, #164]	@ (8000674 <ADC_Conversion_Cplt+0xc8>)
 80005ce:	4623      	mov	r3, r4
 80005d0:	00db      	lsls	r3, r3, #3
 80005d2:	4423      	add	r3, r4
 80005d4:	4413      	add	r3, r2
 80005d6:	f830 2013 	ldrh.w	r2, [r0, r3, lsl #1]
 80005da:	7bfb      	ldrb	r3, [r7, #15]
 80005dc:	1a8a      	subs	r2, r1, r2
 80005de:	b291      	uxth	r1, r2
 80005e0:	4a22      	ldr	r2, [pc, #136]	@ (800066c <ADC_Conversion_Cplt+0xc0>)
 80005e2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		sumData[channel] += rawData[channel];
 80005e6:	7bfb      	ldrb	r3, [r7, #15]
 80005e8:	4a20      	ldr	r2, [pc, #128]	@ (800066c <ADC_Conversion_Cplt+0xc0>)
 80005ea:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80005ee:	7bfb      	ldrb	r3, [r7, #15]
 80005f0:	005b      	lsls	r3, r3, #1
 80005f2:	687a      	ldr	r2, [r7, #4]
 80005f4:	4413      	add	r3, r2
 80005f6:	881a      	ldrh	r2, [r3, #0]
 80005f8:	7bfb      	ldrb	r3, [r7, #15]
 80005fa:	440a      	add	r2, r1
 80005fc:	b291      	uxth	r1, r2
 80005fe:	4a1b      	ldr	r2, [pc, #108]	@ (800066c <ADC_Conversion_Cplt+0xc0>)
 8000600:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		mediaBuffer[index][channel] = rawData[channel];
 8000604:	7bfb      	ldrb	r3, [r7, #15]
 8000606:	005b      	lsls	r3, r3, #1
 8000608:	687a      	ldr	r2, [r7, #4]
 800060a:	4413      	add	r3, r2
 800060c:	4a18      	ldr	r2, [pc, #96]	@ (8000670 <ADC_Conversion_Cplt+0xc4>)
 800060e:	7812      	ldrb	r2, [r2, #0]
 8000610:	4610      	mov	r0, r2
 8000612:	7bfa      	ldrb	r2, [r7, #15]
 8000614:	881c      	ldrh	r4, [r3, #0]
 8000616:	4917      	ldr	r1, [pc, #92]	@ (8000674 <ADC_Conversion_Cplt+0xc8>)
 8000618:	4603      	mov	r3, r0
 800061a:	00db      	lsls	r3, r3, #3
 800061c:	4403      	add	r3, r0
 800061e:	4413      	add	r3, r2
 8000620:	4622      	mov	r2, r4
 8000622:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		filtredData[channel] = (sumData[channel] >> ADC_DESPLAZAMIENTOS);
 8000626:	7bfb      	ldrb	r3, [r7, #15]
 8000628:	4a10      	ldr	r2, [pc, #64]	@ (800066c <ADC_Conversion_Cplt+0xc0>)
 800062a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800062e:	7bfb      	ldrb	r3, [r7, #15]
 8000630:	005b      	lsls	r3, r3, #1
 8000632:	6839      	ldr	r1, [r7, #0]
 8000634:	440b      	add	r3, r1
 8000636:	0952      	lsrs	r2, r2, #5
 8000638:	b292      	uxth	r2, r2
 800063a:	801a      	strh	r2, [r3, #0]
	for(uint8_t channel = 0; channel < ADC_NUM_SENSORS; channel++){
 800063c:	7bfb      	ldrb	r3, [r7, #15]
 800063e:	3301      	adds	r3, #1
 8000640:	73fb      	strb	r3, [r7, #15]
 8000642:	7bfb      	ldrb	r3, [r7, #15]
 8000644:	2b08      	cmp	r3, #8
 8000646:	d9b9      	bls.n	80005bc <ADC_Conversion_Cplt+0x10>
	}
	index++;
 8000648:	4b09      	ldr	r3, [pc, #36]	@ (8000670 <ADC_Conversion_Cplt+0xc4>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	3301      	adds	r3, #1
 800064e:	b2da      	uxtb	r2, r3
 8000650:	4b07      	ldr	r3, [pc, #28]	@ (8000670 <ADC_Conversion_Cplt+0xc4>)
 8000652:	701a      	strb	r2, [r3, #0]
	index &= (ADC_MEDIA_SIZE - 1);
 8000654:	4b06      	ldr	r3, [pc, #24]	@ (8000670 <ADC_Conversion_Cplt+0xc4>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	f003 031f 	and.w	r3, r3, #31
 800065c:	b2da      	uxtb	r2, r3
 800065e:	4b04      	ldr	r3, [pc, #16]	@ (8000670 <ADC_Conversion_Cplt+0xc4>)
 8000660:	701a      	strb	r2, [r3, #0]
}
 8000662:	bf00      	nop
 8000664:	3710      	adds	r7, #16
 8000666:	46bd      	mov	sp, r7
 8000668:	bc90      	pop	{r4, r7}
 800066a:	4770      	bx	lr
 800066c:	200003bc 	.word	0x200003bc
 8000670:	200003ce 	.word	0x200003ce
 8000674:	2000017c 	.word	0x2000017c

08000678 <inputState>:
#include "utilities.h"

s_Input debouncerBuff[MAX_INPUTS_DEBOUNCED];
uint8_t	inputIndex = 0;

void inputState(s_Input *stateInput){
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
	switch(stateInput->state){
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	785b      	ldrb	r3, [r3, #1]
 8000684:	2b03      	cmp	r3, #3
 8000686:	d849      	bhi.n	800071c <inputState+0xa4>
 8000688:	a201      	add	r2, pc, #4	@ (adr r2, 8000690 <inputState+0x18>)
 800068a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800068e:	bf00      	nop
 8000690:	080006b1 	.word	0x080006b1
 8000694:	080006a1 	.word	0x080006a1
 8000698:	080006ef 	.word	0x080006ef
 800069c:	080006c1 	.word	0x080006c1
		case UP:
			if(stateInput->value == DOWN)
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d13d      	bne.n	8000724 <inputState+0xac>
				stateInput->state = FALLING;
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	2202      	movs	r2, #2
 80006ac:	705a      	strb	r2, [r3, #1]
		break;
 80006ae:	e039      	b.n	8000724 <inputState+0xac>
		case DOWN:
			if(stateInput->value == UP)
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	2b01      	cmp	r3, #1
 80006b6:	d137      	bne.n	8000728 <inputState+0xb0>
				stateInput->state = RISING;
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	2203      	movs	r2, #3
 80006bc:	705a      	strb	r2, [r3, #1]
		break;
 80006be:	e033      	b.n	8000728 <inputState+0xb0>
		case RISING:
			if(stateInput->value == UP){
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	2b01      	cmp	r3, #1
 80006c6:	d10e      	bne.n	80006e6 <inputState+0x6e>
				stateInput->state = UP;
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	2201      	movs	r2, #1
 80006cc:	705a      	strb	r2, [r3, #1]
				/*------------------------------*/
				stateInput->val = UP;
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	2201      	movs	r2, #1
 80006d2:	709a      	strb	r2, [r3, #2]
				if(stateInput->stateChanged != NULL)
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	685b      	ldr	r3, [r3, #4]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d027      	beq.n	800072c <inputState+0xb4>
					stateInput->stateChanged(RISING);
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	685b      	ldr	r3, [r3, #4]
 80006e0:	2003      	movs	r0, #3
 80006e2:	4798      	blx	r3
				/*------------------------------*/
			}else{
				stateInput->state = DOWN;
			}
		break;
 80006e4:	e022      	b.n	800072c <inputState+0xb4>
				stateInput->state = DOWN;
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	2200      	movs	r2, #0
 80006ea:	705a      	strb	r2, [r3, #1]
		break;
 80006ec:	e01e      	b.n	800072c <inputState+0xb4>
		case FALLING:
			if(stateInput->value == DOWN){
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d10e      	bne.n	8000714 <inputState+0x9c>
				stateInput->state = DOWN;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	2200      	movs	r2, #0
 80006fa:	705a      	strb	r2, [r3, #1]
				/*------------------------------*/
				stateInput->val = DOWN;
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	2200      	movs	r2, #0
 8000700:	709a      	strb	r2, [r3, #2]
				if(stateInput->stateChanged != NULL)
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	685b      	ldr	r3, [r3, #4]
 8000706:	2b00      	cmp	r3, #0
 8000708:	d012      	beq.n	8000730 <inputState+0xb8>
					stateInput->stateChanged(FALLING);
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	685b      	ldr	r3, [r3, #4]
 800070e:	2002      	movs	r0, #2
 8000710:	4798      	blx	r3
				/*------------------------------*/
			}else{
				stateInput->state = UP;
			}
		break;
 8000712:	e00d      	b.n	8000730 <inputState+0xb8>
				stateInput->state = UP;
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	2201      	movs	r2, #1
 8000718:	705a      	strb	r2, [r3, #1]
		break;
 800071a:	e009      	b.n	8000730 <inputState+0xb8>
		default:
		stateInput->state = UP;
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	2201      	movs	r2, #1
 8000720:	705a      	strb	r2, [r3, #1]
	}
}
 8000722:	e006      	b.n	8000732 <inputState+0xba>
		break;
 8000724:	bf00      	nop
 8000726:	e004      	b.n	8000732 <inputState+0xba>
		break;
 8000728:	bf00      	nop
 800072a:	e002      	b.n	8000732 <inputState+0xba>
		break;
 800072c:	bf00      	nop
 800072e:	e000      	b.n	8000732 <inputState+0xba>
		break;
 8000730:	bf00      	nop
}
 8000732:	bf00      	nop
 8000734:	3708      	adds	r7, #8
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop

0800073c <Debounce_Init>:

void Debounce_Init(){
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
	for(inputIndex=0; inputIndex<MAX_INPUTS_DEBOUNCED; inputIndex++){
 8000740:	4b16      	ldr	r3, [pc, #88]	@ (800079c <Debounce_Init+0x60>)
 8000742:	2200      	movs	r2, #0
 8000744:	701a      	strb	r2, [r3, #0]
 8000746:	e01d      	b.n	8000784 <Debounce_Init+0x48>
		debouncerBuff[inputIndex].getInputState = NULL;
 8000748:	4b14      	ldr	r3, [pc, #80]	@ (800079c <Debounce_Init+0x60>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	4619      	mov	r1, r3
 800074e:	4a14      	ldr	r2, [pc, #80]	@ (80007a0 <Debounce_Init+0x64>)
 8000750:	460b      	mov	r3, r1
 8000752:	005b      	lsls	r3, r3, #1
 8000754:	440b      	add	r3, r1
 8000756:	009b      	lsls	r3, r3, #2
 8000758:	4413      	add	r3, r2
 800075a:	3308      	adds	r3, #8
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
		debouncerBuff[inputIndex].stateChanged = NULL;
 8000760:	4b0e      	ldr	r3, [pc, #56]	@ (800079c <Debounce_Init+0x60>)
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	4619      	mov	r1, r3
 8000766:	4a0e      	ldr	r2, [pc, #56]	@ (80007a0 <Debounce_Init+0x64>)
 8000768:	460b      	mov	r3, r1
 800076a:	005b      	lsls	r3, r3, #1
 800076c:	440b      	add	r3, r1
 800076e:	009b      	lsls	r3, r3, #2
 8000770:	4413      	add	r3, r2
 8000772:	3304      	adds	r3, #4
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
	for(inputIndex=0; inputIndex<MAX_INPUTS_DEBOUNCED; inputIndex++){
 8000778:	4b08      	ldr	r3, [pc, #32]	@ (800079c <Debounce_Init+0x60>)
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	3301      	adds	r3, #1
 800077e:	b2da      	uxtb	r2, r3
 8000780:	4b06      	ldr	r3, [pc, #24]	@ (800079c <Debounce_Init+0x60>)
 8000782:	701a      	strb	r2, [r3, #0]
 8000784:	4b05      	ldr	r3, [pc, #20]	@ (800079c <Debounce_Init+0x60>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d0dd      	beq.n	8000748 <Debounce_Init+0xc>
	}
	inputIndex = 0;
 800078c:	4b03      	ldr	r3, [pc, #12]	@ (800079c <Debounce_Init+0x60>)
 800078e:	2200      	movs	r2, #0
 8000790:	701a      	strb	r2, [r3, #0]
}
 8000792:	bf00      	nop
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr
 800079c:	200003dc 	.word	0x200003dc
 80007a0:	200003d0 	.word	0x200003d0

080007a4 <Debounce_Add>:

uint8_t Debounce_Add(uint8_t (*AbstHard)(), void (*STATECHANGED)(e_Estados estado)){
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
 80007ac:	6039      	str	r1, [r7, #0]
	if(inputIndex >= MAX_INPUTS_DEBOUNCED)
 80007ae:	4b15      	ldr	r3, [pc, #84]	@ (8000804 <Debounce_Add+0x60>)
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <Debounce_Add+0x16>
		return 0;
 80007b6:	2300      	movs	r3, #0
 80007b8:	e01d      	b.n	80007f6 <Debounce_Add+0x52>
	debouncerBuff[inputIndex].getInputState = AbstHard;
 80007ba:	4b12      	ldr	r3, [pc, #72]	@ (8000804 <Debounce_Add+0x60>)
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	4619      	mov	r1, r3
 80007c0:	4a11      	ldr	r2, [pc, #68]	@ (8000808 <Debounce_Add+0x64>)
 80007c2:	460b      	mov	r3, r1
 80007c4:	005b      	lsls	r3, r3, #1
 80007c6:	440b      	add	r3, r1
 80007c8:	009b      	lsls	r3, r3, #2
 80007ca:	4413      	add	r3, r2
 80007cc:	3308      	adds	r3, #8
 80007ce:	687a      	ldr	r2, [r7, #4]
 80007d0:	601a      	str	r2, [r3, #0]
	debouncerBuff[inputIndex].stateChanged = STATECHANGED;
 80007d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000804 <Debounce_Add+0x60>)
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	4619      	mov	r1, r3
 80007d8:	4a0b      	ldr	r2, [pc, #44]	@ (8000808 <Debounce_Add+0x64>)
 80007da:	460b      	mov	r3, r1
 80007dc:	005b      	lsls	r3, r3, #1
 80007de:	440b      	add	r3, r1
 80007e0:	009b      	lsls	r3, r3, #2
 80007e2:	4413      	add	r3, r2
 80007e4:	3304      	adds	r3, #4
 80007e6:	683a      	ldr	r2, [r7, #0]
 80007e8:	601a      	str	r2, [r3, #0]
	return inputIndex++;
 80007ea:	4b06      	ldr	r3, [pc, #24]	@ (8000804 <Debounce_Add+0x60>)
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	1c5a      	adds	r2, r3, #1
 80007f0:	b2d1      	uxtb	r1, r2
 80007f2:	4a04      	ldr	r2, [pc, #16]	@ (8000804 <Debounce_Add+0x60>)
 80007f4:	7011      	strb	r1, [r2, #0]
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	370c      	adds	r7, #12
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	200003dc 	.word	0x200003dc
 8000808:	200003d0 	.word	0x200003d0

0800080c <Debouncer_Task>:

void Debouncer_Task(){
 800080c:	b590      	push	{r4, r7, lr}
 800080e:	b083      	sub	sp, #12
 8000810:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < MAX_INPUTS_DEBOUNCED; i++){
 8000812:	2300      	movs	r3, #0
 8000814:	71fb      	strb	r3, [r7, #7]
 8000816:	e021      	b.n	800085c <Debouncer_Task+0x50>
		debouncerBuff[i].value = debouncerBuff[i].getInputState();
 8000818:	79fa      	ldrb	r2, [r7, #7]
 800081a:	4914      	ldr	r1, [pc, #80]	@ (800086c <Debouncer_Task+0x60>)
 800081c:	4613      	mov	r3, r2
 800081e:	005b      	lsls	r3, r3, #1
 8000820:	4413      	add	r3, r2
 8000822:	009b      	lsls	r3, r3, #2
 8000824:	440b      	add	r3, r1
 8000826:	3308      	adds	r3, #8
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	79fc      	ldrb	r4, [r7, #7]
 800082c:	4798      	blx	r3
 800082e:	4603      	mov	r3, r0
 8000830:	4619      	mov	r1, r3
 8000832:	4a0e      	ldr	r2, [pc, #56]	@ (800086c <Debouncer_Task+0x60>)
 8000834:	4623      	mov	r3, r4
 8000836:	005b      	lsls	r3, r3, #1
 8000838:	4423      	add	r3, r4
 800083a:	009b      	lsls	r3, r3, #2
 800083c:	4413      	add	r3, r2
 800083e:	460a      	mov	r2, r1
 8000840:	701a      	strb	r2, [r3, #0]
		inputState(&debouncerBuff[i]);
 8000842:	79fa      	ldrb	r2, [r7, #7]
 8000844:	4613      	mov	r3, r2
 8000846:	005b      	lsls	r3, r3, #1
 8000848:	4413      	add	r3, r2
 800084a:	009b      	lsls	r3, r3, #2
 800084c:	4a07      	ldr	r2, [pc, #28]	@ (800086c <Debouncer_Task+0x60>)
 800084e:	4413      	add	r3, r2
 8000850:	4618      	mov	r0, r3
 8000852:	f7ff ff11 	bl	8000678 <inputState>
	for(uint8_t i = 0; i < MAX_INPUTS_DEBOUNCED; i++){
 8000856:	79fb      	ldrb	r3, [r7, #7]
 8000858:	3301      	adds	r3, #1
 800085a:	71fb      	strb	r3, [r7, #7]
 800085c:	79fb      	ldrb	r3, [r7, #7]
 800085e:	2b00      	cmp	r3, #0
 8000860:	d0da      	beq.n	8000818 <Debouncer_Task+0xc>
	}
}
 8000862:	bf00      	nop
 8000864:	bf00      	nop
 8000866:	370c      	adds	r7, #12
 8000868:	46bd      	mov	sp, r7
 800086a:	bd90      	pop	{r4, r7, pc}
 800086c:	200003d0 	.word	0x200003d0

08000870 <MPU6050_Set_I2C_Communication>:
static e_system (*I2C_Master_Transmit_Blocking)(uint16_t Dev_Address, uint8_t Mem_Adress, uint8_t Mem_AddSize, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout);
static e_system (*I2C_Mem_Read)(uint16_t Dev_Address, uint8_t Mem_Adress, uint8_t Mem_AddSize, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout);

void MPU6050_Set_I2C_Communication(
		e_system (*Mem_Write_Blocking)(uint16_t Dev_Address, uint8_t Mem_Adress, uint8_t Mem_AddSize, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout),
		e_system (*Mem_Read_Blocking)(uint16_t Dev_Address, uint8_t Mem_Adress, uint8_t Mem_AddSize, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout)){
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
 8000878:	6039      	str	r1, [r7, #0]
	I2C_Master_Transmit_Blocking = Mem_Write_Blocking;
 800087a:	4a06      	ldr	r2, [pc, #24]	@ (8000894 <MPU6050_Set_I2C_Communication+0x24>)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	6013      	str	r3, [r2, #0]
	I2C_Mem_Read = Mem_Read_Blocking;
 8000880:	4a05      	ldr	r2, [pc, #20]	@ (8000898 <MPU6050_Set_I2C_Communication+0x28>)
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	6013      	str	r3, [r2, #0]
}
 8000886:	bf00      	nop
 8000888:	370c      	adds	r7, #12
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	200003e0 	.word	0x200003e0
 8000898:	200003e4 	.word	0x200003e4

0800089c <MPU6050_Init>:

e_system MPU6050_Init(s_MPU *mpu){
 800089c:	b590      	push	{r4, r7, lr}
 800089e:	b099      	sub	sp, #100	@ 0x64
 80008a0:	af02      	add	r7, sp, #8
 80008a2:	6078      	str	r0, [r7, #4]
	uint8_t data = 0;
 80008a4:	2300      	movs	r3, #0
 80008a6:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
	e_system status = SYS_OK;
 80008aa:	2300      	movs	r3, #0
 80008ac:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
	status += I2C_Mem_Read(MPU6050_ADDR, WHO_AM_I_MPU6050, 1, &data, 1, MPU_TIMEOUT);
 80008b0:	4b49      	ldr	r3, [pc, #292]	@ (80009d8 <MPU6050_Init+0x13c>)
 80008b2:	681c      	ldr	r4, [r3, #0]
 80008b4:	f107 0355 	add.w	r3, r7, #85	@ 0x55
 80008b8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80008bc:	9201      	str	r2, [sp, #4]
 80008be:	2201      	movs	r2, #1
 80008c0:	9200      	str	r2, [sp, #0]
 80008c2:	2201      	movs	r2, #1
 80008c4:	2175      	movs	r1, #117	@ 0x75
 80008c6:	20d0      	movs	r0, #208	@ 0xd0
 80008c8:	47a0      	blx	r4
 80008ca:	4603      	mov	r3, r0
 80008cc:	461a      	mov	r2, r3
 80008ce:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 80008d2:	4413      	add	r3, r2
 80008d4:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
	if(data == WHO_AM_I_DEFAULT_VALUE){
 80008d8:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80008dc:	2b68      	cmp	r3, #104	@ 0x68
 80008de:	d174      	bne.n	80009ca <MPU6050_Init+0x12e>
		data = 0x00;
 80008e0:	2300      	movs	r3, #0
 80008e2:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
		I2C_Master_Transmit_Blocking(MPU6050_ADDR, POWER_MANAGEMENT_REG, 1, &data, 1, MPU_TIMEOUT);
 80008e6:	4b3d      	ldr	r3, [pc, #244]	@ (80009dc <MPU6050_Init+0x140>)
 80008e8:	681c      	ldr	r4, [r3, #0]
 80008ea:	f107 0355 	add.w	r3, r7, #85	@ 0x55
 80008ee:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80008f2:	9201      	str	r2, [sp, #4]
 80008f4:	2201      	movs	r2, #1
 80008f6:	9200      	str	r2, [sp, #0]
 80008f8:	2201      	movs	r2, #1
 80008fa:	216b      	movs	r1, #107	@ 0x6b
 80008fc:	20d0      	movs	r0, #208	@ 0xd0
 80008fe:	47a0      	blx	r4

		// Set data rate of 1 KHz (default)
		data = 0x07;
 8000900:	2307      	movs	r3, #7
 8000902:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
		I2C_Master_Transmit_Blocking(MPU6050_ADDR, SMPLRT_DIV_REG, 1, &data, 1, MPU_TIMEOUT);
 8000906:	4b35      	ldr	r3, [pc, #212]	@ (80009dc <MPU6050_Init+0x140>)
 8000908:	681c      	ldr	r4, [r3, #0]
 800090a:	f107 0355 	add.w	r3, r7, #85	@ 0x55
 800090e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000912:	9201      	str	r2, [sp, #4]
 8000914:	2201      	movs	r2, #1
 8000916:	9200      	str	r2, [sp, #0]
 8000918:	2201      	movs	r2, #1
 800091a:	2119      	movs	r1, #25
 800091c:	20d0      	movs	r0, #208	@ 0xd0
 800091e:	47a0      	blx	r4

		// Set accelerometer range of +/- 2g (default)
		data = 0x00;
 8000920:	2300      	movs	r3, #0
 8000922:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
		I2C_Master_Transmit_Blocking(MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &data, 1, MPU_TIMEOUT);
 8000926:	4b2d      	ldr	r3, [pc, #180]	@ (80009dc <MPU6050_Init+0x140>)
 8000928:	681c      	ldr	r4, [r3, #0]
 800092a:	f107 0355 	add.w	r3, r7, #85	@ 0x55
 800092e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000932:	9201      	str	r2, [sp, #4]
 8000934:	2201      	movs	r2, #1
 8000936:	9200      	str	r2, [sp, #0]
 8000938:	2201      	movs	r2, #1
 800093a:	211c      	movs	r1, #28
 800093c:	20d0      	movs	r0, #208	@ 0xd0
 800093e:	47a0      	blx	r4

		// Set gyroscope range of +/- 250 degree/s (default)
		data = 0x00;
 8000940:	2300      	movs	r3, #0
 8000942:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
		I2C_Master_Transmit_Blocking(MPU6050_ADDR, GYRO_CONFIG_REG, 1, &data, 1, MPU_TIMEOUT);
 8000946:	4b25      	ldr	r3, [pc, #148]	@ (80009dc <MPU6050_Init+0x140>)
 8000948:	681c      	ldr	r4, [r3, #0]
 800094a:	f107 0355 	add.w	r3, r7, #85	@ 0x55
 800094e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000952:	9201      	str	r2, [sp, #4]
 8000954:	2201      	movs	r2, #1
 8000956:	9200      	str	r2, [sp, #0]
 8000958:	2201      	movs	r2, #1
 800095a:	211b      	movs	r1, #27
 800095c:	20d0      	movs	r0, #208	@ 0xd0
 800095e:	47a0      	blx	r4

		// Set Digital Low Pass Filter
		data = 0x03;
 8000960:	2303      	movs	r3, #3
 8000962:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
		I2C_Master_Transmit_Blocking(MPU6050_ADDR, CONFIG, 1, &data, 1, MPU_TIMEOUT);
 8000966:	4b1d      	ldr	r3, [pc, #116]	@ (80009dc <MPU6050_Init+0x140>)
 8000968:	681c      	ldr	r4, [r3, #0]
 800096a:	f107 0355 	add.w	r3, r7, #85	@ 0x55
 800096e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000972:	9201      	str	r2, [sp, #4]
 8000974:	2201      	movs	r2, #1
 8000976:	9200      	str	r2, [sp, #0]
 8000978:	2201      	movs	r2, #1
 800097a:	211a      	movs	r1, #26
 800097c:	20d0      	movs	r0, #208	@ 0xd0
 800097e:	47a0      	blx	r4
		I2C_Master_Transmit_Blocking(MPU6050_ADDR, INT_PIN_CFG, 1, &data, 1, MPU_TIMEOUT);

		data = 0x01;
		I2C_Master_Transmit_Blocking(MPU6050_ADDR, INT_ENABLE, 1, &data, 1, MPU_TIMEOUT);
		 */
		*mpu = (s_MPU){
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	4618      	mov	r0, r3
 8000984:	2348      	movs	r3, #72	@ 0x48
 8000986:	461a      	mov	r2, r3
 8000988:	2100      	movs	r1, #0
 800098a:	f00e fe65 	bl	800f658 <memset>
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	2201      	movs	r2, #1
 8000992:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			.Angle = {0, 0, 0},
			.dataReady = 0,
			.isInit = 1
		};

		for(uint8_t i=0; i<14; i++){
 8000996:	2300      	movs	r3, #0
 8000998:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 800099c:	e00b      	b.n	80009b6 <MPU6050_Init+0x11a>
			mpu->data[i] = 0;
 800099e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80009a2:	687a      	ldr	r2, [r7, #4]
 80009a4:	4413      	add	r3, r2
 80009a6:	2200      	movs	r2, #0
 80009a8:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
		for(uint8_t i=0; i<14; i++){
 80009ac:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80009b0:	3301      	adds	r3, #1
 80009b2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 80009b6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80009ba:	2b0d      	cmp	r3, #13
 80009bc:	d9ef      	bls.n	800099e <MPU6050_Init+0x102>
		}

		if(status != SYS_OK){
 80009be:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d003      	beq.n	80009ce <MPU6050_Init+0x132>
			return SYS_ERROR;
 80009c6:	2301      	movs	r3, #1
 80009c8:	e002      	b.n	80009d0 <MPU6050_Init+0x134>
		}


	}else{
		return SYS_ERROR;
 80009ca:	2301      	movs	r3, #1
 80009cc:	e000      	b.n	80009d0 <MPU6050_Init+0x134>
	}
	return SYS_OK;
 80009ce:	2300      	movs	r3, #0
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	375c      	adds	r7, #92	@ 0x5c
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd90      	pop	{r4, r7, pc}
 80009d8:	200003e4 	.word	0x200003e4
 80009dc:	200003e0 	.word	0x200003e0

080009e0 <MPU6050_Calibrate>:

void MPU6050_Calibrate(s_MPU *mpu){
 80009e0:	b590      	push	{r4, r7, lr}
 80009e2:	b087      	sub	sp, #28
 80009e4:	af02      	add	r7, sp, #8
 80009e6:	6078      	str	r0, [r7, #4]
	for (uint16_t i=0; i < NUM_SAMPLES; i++){
 80009e8:	2300      	movs	r3, #0
 80009ea:	81fb      	strh	r3, [r7, #14]
 80009ec:	e075      	b.n	8000ada <MPU6050_Calibrate+0xfa>
		I2C_Mem_Read(MPU6050_ADDR, ACCEL_XOUT_REG, 1, mpu->data, 14, MPU_TIMEOUT);
 80009ee:	4b53      	ldr	r3, [pc, #332]	@ (8000b3c <MPU6050_Calibrate+0x15c>)
 80009f0:	681c      	ldr	r4, [r3, #0]
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	3336      	adds	r3, #54	@ 0x36
 80009f6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80009fa:	9201      	str	r2, [sp, #4]
 80009fc:	220e      	movs	r2, #14
 80009fe:	9200      	str	r2, [sp, #0]
 8000a00:	2201      	movs	r2, #1
 8000a02:	213b      	movs	r1, #59	@ 0x3b
 8000a04:	20d0      	movs	r0, #208	@ 0xd0
 8000a06:	47a0      	blx	r4
		mpu->Acc.raw.x += (int16_t)((mpu->data[0] << 8) | mpu->data[1]);
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	68db      	ldr	r3, [r3, #12]
 8000a0c:	687a      	ldr	r2, [r7, #4]
 8000a0e:	f892 2036 	ldrb.w	r2, [r2, #54]	@ 0x36
 8000a12:	b212      	sxth	r2, r2
 8000a14:	0212      	lsls	r2, r2, #8
 8000a16:	b211      	sxth	r1, r2
 8000a18:	687a      	ldr	r2, [r7, #4]
 8000a1a:	f892 2037 	ldrb.w	r2, [r2, #55]	@ 0x37
 8000a1e:	b212      	sxth	r2, r2
 8000a20:	430a      	orrs	r2, r1
 8000a22:	b212      	sxth	r2, r2
 8000a24:	441a      	add	r2, r3
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	60da      	str	r2, [r3, #12]
		mpu->Acc.raw.y += (int16_t)((mpu->data[2] << 8) | mpu->data[3]);
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	691b      	ldr	r3, [r3, #16]
 8000a2e:	687a      	ldr	r2, [r7, #4]
 8000a30:	f892 2038 	ldrb.w	r2, [r2, #56]	@ 0x38
 8000a34:	b212      	sxth	r2, r2
 8000a36:	0212      	lsls	r2, r2, #8
 8000a38:	b211      	sxth	r1, r2
 8000a3a:	687a      	ldr	r2, [r7, #4]
 8000a3c:	f892 2039 	ldrb.w	r2, [r2, #57]	@ 0x39
 8000a40:	b212      	sxth	r2, r2
 8000a42:	430a      	orrs	r2, r1
 8000a44:	b212      	sxth	r2, r2
 8000a46:	441a      	add	r2, r3
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	611a      	str	r2, [r3, #16]
		mpu->Acc.raw.z += (int16_t)((mpu->data[4] << 8) | mpu->data[5]);
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	695b      	ldr	r3, [r3, #20]
 8000a50:	687a      	ldr	r2, [r7, #4]
 8000a52:	f892 203a 	ldrb.w	r2, [r2, #58]	@ 0x3a
 8000a56:	b212      	sxth	r2, r2
 8000a58:	0212      	lsls	r2, r2, #8
 8000a5a:	b211      	sxth	r1, r2
 8000a5c:	687a      	ldr	r2, [r7, #4]
 8000a5e:	f892 203b 	ldrb.w	r2, [r2, #59]	@ 0x3b
 8000a62:	b212      	sxth	r2, r2
 8000a64:	430a      	orrs	r2, r1
 8000a66:	b212      	sxth	r2, r2
 8000a68:	441a      	add	r2, r3
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	615a      	str	r2, [r3, #20]

		mpu->Gyro.raw.x += (int16_t)((mpu->data[8 ] << 8) | mpu->data[9 ]);
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a72:	687a      	ldr	r2, [r7, #4]
 8000a74:	f892 203e 	ldrb.w	r2, [r2, #62]	@ 0x3e
 8000a78:	b212      	sxth	r2, r2
 8000a7a:	0212      	lsls	r2, r2, #8
 8000a7c:	b211      	sxth	r1, r2
 8000a7e:	687a      	ldr	r2, [r7, #4]
 8000a80:	f892 203f 	ldrb.w	r2, [r2, #63]	@ 0x3f
 8000a84:	b212      	sxth	r2, r2
 8000a86:	430a      	orrs	r2, r1
 8000a88:	b212      	sxth	r2, r2
 8000a8a:	441a      	add	r2, r3
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	625a      	str	r2, [r3, #36]	@ 0x24
		mpu->Gyro.raw.y += (int16_t)((mpu->data[10] << 8) | mpu->data[11]);
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a94:	687a      	ldr	r2, [r7, #4]
 8000a96:	f892 2040 	ldrb.w	r2, [r2, #64]	@ 0x40
 8000a9a:	b212      	sxth	r2, r2
 8000a9c:	0212      	lsls	r2, r2, #8
 8000a9e:	b211      	sxth	r1, r2
 8000aa0:	687a      	ldr	r2, [r7, #4]
 8000aa2:	f892 2041 	ldrb.w	r2, [r2, #65]	@ 0x41
 8000aa6:	b212      	sxth	r2, r2
 8000aa8:	430a      	orrs	r2, r1
 8000aaa:	b212      	sxth	r2, r2
 8000aac:	441a      	add	r2, r3
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	629a      	str	r2, [r3, #40]	@ 0x28
		mpu->Gyro.raw.z += (int16_t)((mpu->data[12] << 8) | mpu->data[13]);
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ab6:	687a      	ldr	r2, [r7, #4]
 8000ab8:	f892 2042 	ldrb.w	r2, [r2, #66]	@ 0x42
 8000abc:	b212      	sxth	r2, r2
 8000abe:	0212      	lsls	r2, r2, #8
 8000ac0:	b211      	sxth	r1, r2
 8000ac2:	687a      	ldr	r2, [r7, #4]
 8000ac4:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 8000ac8:	b212      	sxth	r2, r2
 8000aca:	430a      	orrs	r2, r1
 8000acc:	b212      	sxth	r2, r2
 8000ace:	441a      	add	r2, r3
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	62da      	str	r2, [r3, #44]	@ 0x2c
	for (uint16_t i=0; i < NUM_SAMPLES; i++){
 8000ad4:	89fb      	ldrh	r3, [r7, #14]
 8000ad6:	3301      	adds	r3, #1
 8000ad8:	81fb      	strh	r3, [r7, #14]
 8000ada:	89fb      	ldrh	r3, [r7, #14]
 8000adc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000ae0:	d385      	bcc.n	80009ee <MPU6050_Calibrate+0xe>
	}
    mpu->Acc.offset.x = (int16_t)(mpu->Acc.raw.x >> NUM_SAMPLES_BITS);
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	68db      	ldr	r3, [r3, #12]
 8000ae6:	131b      	asrs	r3, r3, #12
 8000ae8:	b21a      	sxth	r2, r3
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	80da      	strh	r2, [r3, #6]
    mpu->Acc.offset.y = (int16_t)(mpu->Acc.raw.y >> NUM_SAMPLES_BITS);
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	691b      	ldr	r3, [r3, #16]
 8000af2:	131b      	asrs	r3, r3, #12
 8000af4:	b21a      	sxth	r2, r3
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	811a      	strh	r2, [r3, #8]
    mpu->Acc.offset.z = (int16_t)(mpu->Acc.raw.z >> NUM_SAMPLES_BITS) - SCALE_FACTOR;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	695b      	ldr	r3, [r3, #20]
 8000afe:	131b      	asrs	r3, r3, #12
 8000b00:	b29b      	uxth	r3, r3
 8000b02:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8000b06:	b29b      	uxth	r3, r3
 8000b08:	b21a      	sxth	r2, r3
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	815a      	strh	r2, [r3, #10]

    mpu->Gyro.offset.x = (int16_t)(mpu->Gyro.raw.x >> NUM_SAMPLES_BITS);
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b12:	131b      	asrs	r3, r3, #12
 8000b14:	b21a      	sxth	r2, r3
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	83da      	strh	r2, [r3, #30]
	mpu->Gyro.offset.y = (int16_t)(mpu->Gyro.raw.y >> NUM_SAMPLES_BITS);
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b1e:	131b      	asrs	r3, r3, #12
 8000b20:	b21a      	sxth	r2, r3
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	841a      	strh	r2, [r3, #32]
	mpu->Gyro.offset.z = (int16_t)(mpu->Gyro.raw.z >> NUM_SAMPLES_BITS);
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b2a:	131b      	asrs	r3, r3, #12
 8000b2c:	b21a      	sxth	r2, r3
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	845a      	strh	r2, [r3, #34]	@ 0x22
}
 8000b32:	bf00      	nop
 8000b34:	3714      	adds	r7, #20
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd90      	pop	{r4, r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	200003e4 	.word	0x200003e4

08000b40 <MPU6050_I2C_DMA_Cplt>:

void MPU6050_I2C_DMA_Cplt(s_MPU *mpu){
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
	// ACC: GET RAW INFORMATION
	mpu->Acc.raw.x = (((mpu->data[0] << 8) | mpu->data[1]));
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8000b4e:	021b      	lsls	r3, r3, #8
 8000b50:	687a      	ldr	r2, [r7, #4]
 8000b52:	f892 2037 	ldrb.w	r2, [r2, #55]	@ 0x37
 8000b56:	431a      	orrs	r2, r3
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	60da      	str	r2, [r3, #12]
	mpu->Acc.raw.y = (((mpu->data[2] << 8) | mpu->data[3]));
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8000b62:	021b      	lsls	r3, r3, #8
 8000b64:	687a      	ldr	r2, [r7, #4]
 8000b66:	f892 2039 	ldrb.w	r2, [r2, #57]	@ 0x39
 8000b6a:	431a      	orrs	r2, r3
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	611a      	str	r2, [r3, #16]
	mpu->Acc.raw.z = (((mpu->data[4] << 8) | mpu->data[5]));
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8000b76:	021b      	lsls	r3, r3, #8
 8000b78:	687a      	ldr	r2, [r7, #4]
 8000b7a:	f892 203b 	ldrb.w	r2, [r2, #59]	@ 0x3b
 8000b7e:	431a      	orrs	r2, r3
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	615a      	str	r2, [r3, #20]
	// ACC: CALCULATE TRUE ACCELERATION
	mpu->Acc.x = mpu->Acc.raw.x - mpu->Acc.offset.x;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	68db      	ldr	r3, [r3, #12]
 8000b88:	b29a      	uxth	r2, r3
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000b90:	b29b      	uxth	r3, r3
 8000b92:	1ad3      	subs	r3, r2, r3
 8000b94:	b29b      	uxth	r3, r3
 8000b96:	b21a      	sxth	r2, r3
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	801a      	strh	r2, [r3, #0]
	mpu->Acc.y = mpu->Acc.raw.y - mpu->Acc.offset.y;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	691b      	ldr	r3, [r3, #16]
 8000ba0:	b29a      	uxth	r2, r3
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000ba8:	b29b      	uxth	r3, r3
 8000baa:	1ad3      	subs	r3, r2, r3
 8000bac:	b29b      	uxth	r3, r3
 8000bae:	b21a      	sxth	r2, r3
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	805a      	strh	r2, [r3, #2]
	mpu->Acc.z = mpu->Acc.raw.z - mpu->Acc.offset.z;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	695b      	ldr	r3, [r3, #20]
 8000bb8:	b29a      	uxth	r2, r3
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000bc0:	b29b      	uxth	r3, r3
 8000bc2:	1ad3      	subs	r3, r2, r3
 8000bc4:	b29b      	uxth	r3, r3
 8000bc6:	b21a      	sxth	r2, r3
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	809a      	strh	r2, [r3, #4]

	// GYR: GET RAW INFORMATION
	mpu->Gyro.raw.x = (((mpu->data[8 ] << 8) | mpu->data[9 ]));
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8000bd2:	021b      	lsls	r3, r3, #8
 8000bd4:	687a      	ldr	r2, [r7, #4]
 8000bd6:	f892 203f 	ldrb.w	r2, [r2, #63]	@ 0x3f
 8000bda:	431a      	orrs	r2, r3
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	625a      	str	r2, [r3, #36]	@ 0x24
	mpu->Gyro.raw.y = (((mpu->data[10] << 8) | mpu->data[11]));
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000be6:	021b      	lsls	r3, r3, #8
 8000be8:	687a      	ldr	r2, [r7, #4]
 8000bea:	f892 2041 	ldrb.w	r2, [r2, #65]	@ 0x41
 8000bee:	431a      	orrs	r2, r3
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	629a      	str	r2, [r3, #40]	@ 0x28
	mpu->Gyro.raw.z = (((mpu->data[12] << 8) | mpu->data[13]));
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8000bfa:	021b      	lsls	r3, r3, #8
 8000bfc:	687a      	ldr	r2, [r7, #4]
 8000bfe:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 8000c02:	431a      	orrs	r2, r3
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	62da      	str	r2, [r3, #44]	@ 0x2c
	// GYR: CALCULATE TRUE ACCELERATION
	mpu->Gyro.x = mpu->Gyro.raw.x - mpu->Gyro.offset.x;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c0c:	b29a      	uxth	r2, r3
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8000c14:	b29b      	uxth	r3, r3
 8000c16:	1ad3      	subs	r3, r2, r3
 8000c18:	b29b      	uxth	r3, r3
 8000c1a:	b21a      	sxth	r2, r3
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	831a      	strh	r2, [r3, #24]
	mpu->Gyro.y = mpu->Gyro.raw.y - mpu->Gyro.offset.y;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c24:	b29a      	uxth	r2, r3
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8000c2c:	b29b      	uxth	r3, r3
 8000c2e:	1ad3      	subs	r3, r2, r3
 8000c30:	b29b      	uxth	r3, r3
 8000c32:	b21a      	sxth	r2, r3
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	835a      	strh	r2, [r3, #26]
	mpu->Gyro.z = mpu->Gyro.raw.z - mpu->Gyro.offset.z;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c3c:	b29a      	uxth	r2, r3
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 8000c44:	b29b      	uxth	r3, r3
 8000c46:	1ad3      	subs	r3, r2, r3
 8000c48:	b29b      	uxth	r3, r3
 8000c4a:	b21a      	sxth	r2, r3
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	839a      	strh	r2, [r3, #28]

}
 8000c50:	bf00      	nop
 8000c52:	370c      	adds	r7, #12
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr

08000c5c <Display_Set_I2C_Master_Transmit>:
	uint8_t PageData[6];
}Update;

void Display_Set_I2C_Master_Transmit(
		e_system (*Master_Transmit)(uint16_t DevAddress, uint8_t reg, uint8_t *pData, uint16_t Size),
		e_system (*Master_Transmit_Blocking)(uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)){
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
 8000c64:	6039      	str	r1, [r7, #0]
	I2C_Master_Transmit = Master_Transmit;
 8000c66:	4a06      	ldr	r2, [pc, #24]	@ (8000c80 <Display_Set_I2C_Master_Transmit+0x24>)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	6013      	str	r3, [r2, #0]
	I2C_Master_Transmit_Blocking = Master_Transmit_Blocking;
 8000c6c:	4a05      	ldr	r2, [pc, #20]	@ (8000c84 <Display_Set_I2C_Master_Transmit+0x28>)
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	6013      	str	r3, [r2, #0]
}
 8000c72:	bf00      	nop
 8000c74:	370c      	adds	r7, #12
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	200003f0 	.word	0x200003f0
 8000c84:	200003f4 	.word	0x200003f4

08000c88 <Display_Init>:

e_system Display_Init(){
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	71fb      	strb	r3, [r7, #7]

    status += SSD1306_WRITECOMMAND(0xAE);   // Display off
 8000c92:	22ae      	movs	r2, #174	@ 0xae
 8000c94:	2100      	movs	r1, #0
 8000c96:	2078      	movs	r0, #120	@ 0x78
 8000c98:	f000 f94a 	bl	8000f30 <ssd1306_I2C_Write>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	461a      	mov	r2, r3
 8000ca0:	79fb      	ldrb	r3, [r7, #7]
 8000ca2:	4413      	add	r3, r2
 8000ca4:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x20);   // Set Memory Addressing Mode
 8000ca6:	2220      	movs	r2, #32
 8000ca8:	2100      	movs	r1, #0
 8000caa:	2078      	movs	r0, #120	@ 0x78
 8000cac:	f000 f940 	bl	8000f30 <ssd1306_I2C_Write>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	461a      	mov	r2, r3
 8000cb4:	79fb      	ldrb	r3, [r7, #7]
 8000cb6:	4413      	add	r3, r2
 8000cb8:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x10);   // 00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000cba:	2210      	movs	r2, #16
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	2078      	movs	r0, #120	@ 0x78
 8000cc0:	f000 f936 	bl	8000f30 <ssd1306_I2C_Write>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	461a      	mov	r2, r3
 8000cc8:	79fb      	ldrb	r3, [r7, #7]
 8000cca:	4413      	add	r3, r2
 8000ccc:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xB0);   // Set Page Start Address for Page Addressing Mode,0-7
 8000cce:	22b0      	movs	r2, #176	@ 0xb0
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	2078      	movs	r0, #120	@ 0x78
 8000cd4:	f000 f92c 	bl	8000f30 <ssd1306_I2C_Write>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	461a      	mov	r2, r3
 8000cdc:	79fb      	ldrb	r3, [r7, #7]
 8000cde:	4413      	add	r3, r2
 8000ce0:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xC8);   // Set COM Output Scan Direction
 8000ce2:	22c8      	movs	r2, #200	@ 0xc8
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	2078      	movs	r0, #120	@ 0x78
 8000ce8:	f000 f922 	bl	8000f30 <ssd1306_I2C_Write>
 8000cec:	4603      	mov	r3, r0
 8000cee:	461a      	mov	r2, r3
 8000cf0:	79fb      	ldrb	r3, [r7, #7]
 8000cf2:	4413      	add	r3, r2
 8000cf4:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x00);   // Set low column address
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	2078      	movs	r0, #120	@ 0x78
 8000cfc:	f000 f918 	bl	8000f30 <ssd1306_I2C_Write>
 8000d00:	4603      	mov	r3, r0
 8000d02:	461a      	mov	r2, r3
 8000d04:	79fb      	ldrb	r3, [r7, #7]
 8000d06:	4413      	add	r3, r2
 8000d08:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x10);   // Set high column address
 8000d0a:	2210      	movs	r2, #16
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	2078      	movs	r0, #120	@ 0x78
 8000d10:	f000 f90e 	bl	8000f30 <ssd1306_I2C_Write>
 8000d14:	4603      	mov	r3, r0
 8000d16:	461a      	mov	r2, r3
 8000d18:	79fb      	ldrb	r3, [r7, #7]
 8000d1a:	4413      	add	r3, r2
 8000d1c:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x40);   // Set start line address
 8000d1e:	2240      	movs	r2, #64	@ 0x40
 8000d20:	2100      	movs	r1, #0
 8000d22:	2078      	movs	r0, #120	@ 0x78
 8000d24:	f000 f904 	bl	8000f30 <ssd1306_I2C_Write>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	79fb      	ldrb	r3, [r7, #7]
 8000d2e:	4413      	add	r3, r2
 8000d30:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x81);   // set contrast control register
 8000d32:	2281      	movs	r2, #129	@ 0x81
 8000d34:	2100      	movs	r1, #0
 8000d36:	2078      	movs	r0, #120	@ 0x78
 8000d38:	f000 f8fa 	bl	8000f30 <ssd1306_I2C_Write>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	461a      	mov	r2, r3
 8000d40:	79fb      	ldrb	r3, [r7, #7]
 8000d42:	4413      	add	r3, r2
 8000d44:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xFF);
 8000d46:	22ff      	movs	r2, #255	@ 0xff
 8000d48:	2100      	movs	r1, #0
 8000d4a:	2078      	movs	r0, #120	@ 0x78
 8000d4c:	f000 f8f0 	bl	8000f30 <ssd1306_I2C_Write>
 8000d50:	4603      	mov	r3, r0
 8000d52:	461a      	mov	r2, r3
 8000d54:	79fb      	ldrb	r3, [r7, #7]
 8000d56:	4413      	add	r3, r2
 8000d58:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xA1);   // Set segment re-map 0 to 127
 8000d5a:	22a1      	movs	r2, #161	@ 0xa1
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	2078      	movs	r0, #120	@ 0x78
 8000d60:	f000 f8e6 	bl	8000f30 <ssd1306_I2C_Write>
 8000d64:	4603      	mov	r3, r0
 8000d66:	461a      	mov	r2, r3
 8000d68:	79fb      	ldrb	r3, [r7, #7]
 8000d6a:	4413      	add	r3, r2
 8000d6c:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xA6);   // Set normal display
 8000d6e:	22a6      	movs	r2, #166	@ 0xa6
 8000d70:	2100      	movs	r1, #0
 8000d72:	2078      	movs	r0, #120	@ 0x78
 8000d74:	f000 f8dc 	bl	8000f30 <ssd1306_I2C_Write>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	79fb      	ldrb	r3, [r7, #7]
 8000d7e:	4413      	add	r3, r2
 8000d80:	71fb      	strb	r3, [r7, #7]

    status += SSD1306_WRITECOMMAND(0xA8);   // Set multiplex ratio(1 to 64)
 8000d82:	22a8      	movs	r2, #168	@ 0xa8
 8000d84:	2100      	movs	r1, #0
 8000d86:	2078      	movs	r0, #120	@ 0x78
 8000d88:	f000 f8d2 	bl	8000f30 <ssd1306_I2C_Write>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	461a      	mov	r2, r3
 8000d90:	79fb      	ldrb	r3, [r7, #7]
 8000d92:	4413      	add	r3, r2
 8000d94:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(SSD1306_HEIGHT - 1);
 8000d96:	223f      	movs	r2, #63	@ 0x3f
 8000d98:	2100      	movs	r1, #0
 8000d9a:	2078      	movs	r0, #120	@ 0x78
 8000d9c:	f000 f8c8 	bl	8000f30 <ssd1306_I2C_Write>
 8000da0:	4603      	mov	r3, r0
 8000da2:	461a      	mov	r2, r3
 8000da4:	79fb      	ldrb	r3, [r7, #7]
 8000da6:	4413      	add	r3, r2
 8000da8:	71fb      	strb	r3, [r7, #7]

    status += SSD1306_WRITECOMMAND(0xA4);   // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000daa:	22a4      	movs	r2, #164	@ 0xa4
 8000dac:	2100      	movs	r1, #0
 8000dae:	2078      	movs	r0, #120	@ 0x78
 8000db0:	f000 f8be 	bl	8000f30 <ssd1306_I2C_Write>
 8000db4:	4603      	mov	r3, r0
 8000db6:	461a      	mov	r2, r3
 8000db8:	79fb      	ldrb	r3, [r7, #7]
 8000dba:	4413      	add	r3, r2
 8000dbc:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xD3);   // Set display offset
 8000dbe:	22d3      	movs	r2, #211	@ 0xd3
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	2078      	movs	r0, #120	@ 0x78
 8000dc4:	f000 f8b4 	bl	8000f30 <ssd1306_I2C_Write>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	461a      	mov	r2, r3
 8000dcc:	79fb      	ldrb	r3, [r7, #7]
 8000dce:	4413      	add	r3, r2
 8000dd0:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x00);   // No offset
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	2078      	movs	r0, #120	@ 0x78
 8000dd8:	f000 f8aa 	bl	8000f30 <ssd1306_I2C_Write>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	461a      	mov	r2, r3
 8000de0:	79fb      	ldrb	r3, [r7, #7]
 8000de2:	4413      	add	r3, r2
 8000de4:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xD5);   // Set display clock divide ratio/oscillator frequency
 8000de6:	22d5      	movs	r2, #213	@ 0xd5
 8000de8:	2100      	movs	r1, #0
 8000dea:	2078      	movs	r0, #120	@ 0x78
 8000dec:	f000 f8a0 	bl	8000f30 <ssd1306_I2C_Write>
 8000df0:	4603      	mov	r3, r0
 8000df2:	461a      	mov	r2, r3
 8000df4:	79fb      	ldrb	r3, [r7, #7]
 8000df6:	4413      	add	r3, r2
 8000df8:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xF0);   // Set divide ratio
 8000dfa:	22f0      	movs	r2, #240	@ 0xf0
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	2078      	movs	r0, #120	@ 0x78
 8000e00:	f000 f896 	bl	8000f30 <ssd1306_I2C_Write>
 8000e04:	4603      	mov	r3, r0
 8000e06:	461a      	mov	r2, r3
 8000e08:	79fb      	ldrb	r3, [r7, #7]
 8000e0a:	4413      	add	r3, r2
 8000e0c:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xD9);   // Set pre-charge period
 8000e0e:	22d9      	movs	r2, #217	@ 0xd9
 8000e10:	2100      	movs	r1, #0
 8000e12:	2078      	movs	r0, #120	@ 0x78
 8000e14:	f000 f88c 	bl	8000f30 <ssd1306_I2C_Write>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	79fb      	ldrb	r3, [r7, #7]
 8000e1e:	4413      	add	r3, r2
 8000e20:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x22);
 8000e22:	2222      	movs	r2, #34	@ 0x22
 8000e24:	2100      	movs	r1, #0
 8000e26:	2078      	movs	r0, #120	@ 0x78
 8000e28:	f000 f882 	bl	8000f30 <ssd1306_I2C_Write>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	461a      	mov	r2, r3
 8000e30:	79fb      	ldrb	r3, [r7, #7]
 8000e32:	4413      	add	r3, r2
 8000e34:	71fb      	strb	r3, [r7, #7]

    status += SSD1306_WRITECOMMAND(0xDA);   // Set com pins hardware configuration
 8000e36:	22da      	movs	r2, #218	@ 0xda
 8000e38:	2100      	movs	r1, #0
 8000e3a:	2078      	movs	r0, #120	@ 0x78
 8000e3c:	f000 f878 	bl	8000f30 <ssd1306_I2C_Write>
 8000e40:	4603      	mov	r3, r0
 8000e42:	461a      	mov	r2, r3
 8000e44:	79fb      	ldrb	r3, [r7, #7]
 8000e46:	4413      	add	r3, r2
 8000e48:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(Display_COM_LR_REMAP << 5 | Display_COM_ALTERNATIVE_PIN_CONFIG << 4 | 0x02);
 8000e4a:	2212      	movs	r2, #18
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	2078      	movs	r0, #120	@ 0x78
 8000e50:	f000 f86e 	bl	8000f30 <ssd1306_I2C_Write>
 8000e54:	4603      	mov	r3, r0
 8000e56:	461a      	mov	r2, r3
 8000e58:	79fb      	ldrb	r3, [r7, #7]
 8000e5a:	4413      	add	r3, r2
 8000e5c:	71fb      	strb	r3, [r7, #7]

    status += SSD1306_WRITECOMMAND(0xDB);   // Set vcomh
 8000e5e:	22db      	movs	r2, #219	@ 0xdb
 8000e60:	2100      	movs	r1, #0
 8000e62:	2078      	movs	r0, #120	@ 0x78
 8000e64:	f000 f864 	bl	8000f30 <ssd1306_I2C_Write>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	461a      	mov	r2, r3
 8000e6c:	79fb      	ldrb	r3, [r7, #7]
 8000e6e:	4413      	add	r3, r2
 8000e70:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x20);   // 0x20,0.77xVcc
 8000e72:	2220      	movs	r2, #32
 8000e74:	2100      	movs	r1, #0
 8000e76:	2078      	movs	r0, #120	@ 0x78
 8000e78:	f000 f85a 	bl	8000f30 <ssd1306_I2C_Write>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	461a      	mov	r2, r3
 8000e80:	79fb      	ldrb	r3, [r7, #7]
 8000e82:	4413      	add	r3, r2
 8000e84:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x8D);   // Set DC-DC enable
 8000e86:	228d      	movs	r2, #141	@ 0x8d
 8000e88:	2100      	movs	r1, #0
 8000e8a:	2078      	movs	r0, #120	@ 0x78
 8000e8c:	f000 f850 	bl	8000f30 <ssd1306_I2C_Write>
 8000e90:	4603      	mov	r3, r0
 8000e92:	461a      	mov	r2, r3
 8000e94:	79fb      	ldrb	r3, [r7, #7]
 8000e96:	4413      	add	r3, r2
 8000e98:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x14);   //
 8000e9a:	2214      	movs	r2, #20
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	2078      	movs	r0, #120	@ 0x78
 8000ea0:	f000 f846 	bl	8000f30 <ssd1306_I2C_Write>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	79fb      	ldrb	r3, [r7, #7]
 8000eaa:	4413      	add	r3, r2
 8000eac:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xAF);   // Turn on Display panel
 8000eae:	22af      	movs	r2, #175	@ 0xaf
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	2078      	movs	r0, #120	@ 0x78
 8000eb4:	f000 f83c 	bl	8000f30 <ssd1306_I2C_Write>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	461a      	mov	r2, r3
 8000ebc:	79fb      	ldrb	r3, [r7, #7]
 8000ebe:	4413      	add	r3, r2
 8000ec0:	71fb      	strb	r3, [r7, #7]

	status += SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000ec2:	222e      	movs	r2, #46	@ 0x2e
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	2078      	movs	r0, #120	@ 0x78
 8000ec8:	f000 f832 	bl	8000f30 <ssd1306_I2C_Write>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	461a      	mov	r2, r3
 8000ed0:	79fb      	ldrb	r3, [r7, #7]
 8000ed2:	4413      	add	r3, r2
 8000ed4:	71fb      	strb	r3, [r7, #7]

	/* Clear screen */
	Display_Fill(SSD1306_COLOR_BLACK);
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	f000 f8ec 	bl	80010b4 <Display_Fill>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8000edc:	4b12      	ldr	r3, [pc, #72]	@ (8000f28 <Display_Init+0x2a0>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000ee2:	4b11      	ldr	r3, [pc, #68]	@ (8000f28 <Display_Init+0x2a0>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = TRUE;
 8000ee8:	4b0f      	ldr	r3, [pc, #60]	@ (8000f28 <Display_Init+0x2a0>)
 8000eea:	2201      	movs	r2, #1
 8000eec:	715a      	strb	r2, [r3, #5]

	Update.state = PAGE;
 8000eee:	4b0f      	ldr	r3, [pc, #60]	@ (8000f2c <Display_Init+0x2a4>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	70da      	strb	r2, [r3, #3]
	Update.Page = 0;
 8000ef4:	4b0d      	ldr	r3, [pc, #52]	@ (8000f2c <Display_Init+0x2a4>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	709a      	strb	r2, [r3, #2]
	Update.Ready_DMA = TRUE;
 8000efa:	4b0c      	ldr	r3, [pc, #48]	@ (8000f2c <Display_Init+0x2a4>)
 8000efc:	2201      	movs	r2, #1
 8000efe:	705a      	strb	r2, [r3, #1]
	Update.Ready_To_Refresh = FALSE;
 8000f00:	4b0a      	ldr	r3, [pc, #40]	@ (8000f2c <Display_Init+0x2a4>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	701a      	strb	r2, [r3, #0]

	Update.PageData[0] = 0xB0 + Update.Page;
 8000f06:	4b09      	ldr	r3, [pc, #36]	@ (8000f2c <Display_Init+0x2a4>)
 8000f08:	789b      	ldrb	r3, [r3, #2]
 8000f0a:	3b50      	subs	r3, #80	@ 0x50
 8000f0c:	b2da      	uxtb	r2, r3
 8000f0e:	4b07      	ldr	r3, [pc, #28]	@ (8000f2c <Display_Init+0x2a4>)
 8000f10:	711a      	strb	r2, [r3, #4]
	Update.PageData[1] = 0x00; //< acá seleccionamos Lower start
 8000f12:	4b06      	ldr	r3, [pc, #24]	@ (8000f2c <Display_Init+0x2a4>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	715a      	strb	r2, [r3, #5]
	Update.PageData[2] = 0x10; //< y acá upper start
 8000f18:	4b04      	ldr	r3, [pc, #16]	@ (8000f2c <Display_Init+0x2a4>)
 8000f1a:	2210      	movs	r2, #16
 8000f1c:	719a      	strb	r2, [r3, #6]

	/* Return OK */
	return status;
 8000f1e:	79fb      	ldrb	r3, [r7, #7]
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3708      	adds	r7, #8
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	200003e8 	.word	0x200003e8
 8000f2c:	200007f8 	.word	0x200007f8

08000f30 <ssd1306_I2C_Write>:

e_system ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data){
 8000f30:	b590      	push	{r4, r7, lr}
 8000f32:	b085      	sub	sp, #20
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	71fb      	strb	r3, [r7, #7]
 8000f3a:	460b      	mov	r3, r1
 8000f3c:	71bb      	strb	r3, [r7, #6]
 8000f3e:	4613      	mov	r3, r2
 8000f40:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8000f42:	79bb      	ldrb	r3, [r7, #6]
 8000f44:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000f46:	797b      	ldrb	r3, [r7, #5]
 8000f48:	737b      	strb	r3, [r7, #13]
	return I2C_Master_Transmit_Blocking(address, dt, 2, 10);
 8000f4a:	4b07      	ldr	r3, [pc, #28]	@ (8000f68 <ssd1306_I2C_Write+0x38>)
 8000f4c:	681c      	ldr	r4, [r3, #0]
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	b298      	uxth	r0, r3
 8000f52:	f107 010c 	add.w	r1, r7, #12
 8000f56:	230a      	movs	r3, #10
 8000f58:	2202      	movs	r2, #2
 8000f5a:	47a0      	blx	r4
 8000f5c:	4603      	mov	r3, r0
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3714      	adds	r7, #20
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd90      	pop	{r4, r7, pc}
 8000f66:	bf00      	nop
 8000f68:	200003f4 	.word	0x200003f4

08000f6c <Display_UpdateScreen_Task>:

e_system Display_UpdateScreen_Task() {
 8000f6c:	b598      	push	{r3, r4, r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
	if(Update.Ready_To_Refresh && Update.Ready_DMA && SSD1306.Initialized){
 8000f70:	4b2f      	ldr	r3, [pc, #188]	@ (8001030 <Display_UpdateScreen_Task+0xc4>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d057      	beq.n	8001028 <Display_UpdateScreen_Task+0xbc>
 8000f78:	4b2d      	ldr	r3, [pc, #180]	@ (8001030 <Display_UpdateScreen_Task+0xc4>)
 8000f7a:	785b      	ldrb	r3, [r3, #1]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d053      	beq.n	8001028 <Display_UpdateScreen_Task+0xbc>
 8000f80:	4b2c      	ldr	r3, [pc, #176]	@ (8001034 <Display_UpdateScreen_Task+0xc8>)
 8000f82:	795b      	ldrb	r3, [r3, #5]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d04f      	beq.n	8001028 <Display_UpdateScreen_Task+0xbc>

		switch(Update.state){
 8000f88:	4b29      	ldr	r3, [pc, #164]	@ (8001030 <Display_UpdateScreen_Task+0xc4>)
 8000f8a:	78db      	ldrb	r3, [r3, #3]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d002      	beq.n	8000f96 <Display_UpdateScreen_Task+0x2a>
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d01f      	beq.n	8000fd4 <Display_UpdateScreen_Task+0x68>
 8000f94:	e03b      	b.n	800100e <Display_UpdateScreen_Task+0xa2>
		case PAGE:
			Update.PageData[0] = 0xB0 + Update.Page;     // Set Page
 8000f96:	4b26      	ldr	r3, [pc, #152]	@ (8001030 <Display_UpdateScreen_Task+0xc4>)
 8000f98:	789b      	ldrb	r3, [r3, #2]
 8000f9a:	3b50      	subs	r3, #80	@ 0x50
 8000f9c:	b2da      	uxtb	r2, r3
 8000f9e:	4b24      	ldr	r3, [pc, #144]	@ (8001030 <Display_UpdateScreen_Task+0xc4>)
 8000fa0:	711a      	strb	r2, [r3, #4]
			Update.PageData[1] = 0x00;                   // Lower Column
 8000fa2:	4b23      	ldr	r3, [pc, #140]	@ (8001030 <Display_UpdateScreen_Task+0xc4>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	715a      	strb	r2, [r3, #5]
			Update.PageData[2] = 0x10;                   // Upper Column
 8000fa8:	4b21      	ldr	r3, [pc, #132]	@ (8001030 <Display_UpdateScreen_Task+0xc4>)
 8000faa:	2210      	movs	r2, #16
 8000fac:	719a      	strb	r2, [r3, #6]
			if(I2C_Master_Transmit(SSD1306_I2C_ADDR, 0x00, Update.PageData, 3)		== SYS_OK){
 8000fae:	4b22      	ldr	r3, [pc, #136]	@ (8001038 <Display_UpdateScreen_Task+0xcc>)
 8000fb0:	681c      	ldr	r4, [r3, #0]
 8000fb2:	2303      	movs	r3, #3
 8000fb4:	4a21      	ldr	r2, [pc, #132]	@ (800103c <Display_UpdateScreen_Task+0xd0>)
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	2078      	movs	r0, #120	@ 0x78
 8000fba:	47a0      	blx	r4
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d106      	bne.n	8000fd0 <Display_UpdateScreen_Task+0x64>
				Update.state = DATA;
 8000fc2:	4b1b      	ldr	r3, [pc, #108]	@ (8001030 <Display_UpdateScreen_Task+0xc4>)
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	70da      	strb	r2, [r3, #3]
				Update.Ready_DMA = FALSE;
 8000fc8:	4b19      	ldr	r3, [pc, #100]	@ (8001030 <Display_UpdateScreen_Task+0xc4>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	705a      	strb	r2, [r3, #1]
			}else{
				return SYS_ERROR;
			}
			break;
 8000fce:	e021      	b.n	8001014 <Display_UpdateScreen_Task+0xa8>
				return SYS_ERROR;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	e02a      	b.n	800102a <Display_UpdateScreen_Task+0xbe>
		case DATA:
			if(I2C_Master_Transmit(	SSD1306_I2C_ADDR, 0x40,
 8000fd4:	4b18      	ldr	r3, [pc, #96]	@ (8001038 <Display_UpdateScreen_Task+0xcc>)
 8000fd6:	681c      	ldr	r4, [r3, #0]
									&OLED_DMA_BUFFER[SSD1306_WIDTH * Update.Page],
 8000fd8:	4b15      	ldr	r3, [pc, #84]	@ (8001030 <Display_UpdateScreen_Task+0xc4>)
 8000fda:	789b      	ldrb	r3, [r3, #2]
 8000fdc:	01db      	lsls	r3, r3, #7
			if(I2C_Master_Transmit(	SSD1306_I2C_ADDR, 0x40,
 8000fde:	4a18      	ldr	r2, [pc, #96]	@ (8001040 <Display_UpdateScreen_Task+0xd4>)
 8000fe0:	441a      	add	r2, r3
 8000fe2:	2380      	movs	r3, #128	@ 0x80
 8000fe4:	2140      	movs	r1, #64	@ 0x40
 8000fe6:	2078      	movs	r0, #120	@ 0x78
 8000fe8:	47a0      	blx	r4
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d10c      	bne.n	800100a <Display_UpdateScreen_Task+0x9e>
									SSD1306_WIDTH) 									== SYS_OK){
				Update.Page++;
 8000ff0:	4b0f      	ldr	r3, [pc, #60]	@ (8001030 <Display_UpdateScreen_Task+0xc4>)
 8000ff2:	789b      	ldrb	r3, [r3, #2]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	b2da      	uxtb	r2, r3
 8000ff8:	4b0d      	ldr	r3, [pc, #52]	@ (8001030 <Display_UpdateScreen_Task+0xc4>)
 8000ffa:	709a      	strb	r2, [r3, #2]
				Update.state = PAGE;
 8000ffc:	4b0c      	ldr	r3, [pc, #48]	@ (8001030 <Display_UpdateScreen_Task+0xc4>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	70da      	strb	r2, [r3, #3]
				Update.Ready_DMA = FALSE;
 8001002:	4b0b      	ldr	r3, [pc, #44]	@ (8001030 <Display_UpdateScreen_Task+0xc4>)
 8001004:	2200      	movs	r2, #0
 8001006:	705a      	strb	r2, [r3, #1]
			}else{
				return SYS_ERROR;
			}
			break;
 8001008:	e004      	b.n	8001014 <Display_UpdateScreen_Task+0xa8>
				return SYS_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e00d      	b.n	800102a <Display_UpdateScreen_Task+0xbe>
		default:
			Update.Page = 8; //!< fuerzo el if de abajo para reiniciar el sistema
 800100e:	4b08      	ldr	r3, [pc, #32]	@ (8001030 <Display_UpdateScreen_Task+0xc4>)
 8001010:	2208      	movs	r2, #8
 8001012:	709a      	strb	r2, [r3, #2]
		}
		if(Update.Page > 7){
 8001014:	4b06      	ldr	r3, [pc, #24]	@ (8001030 <Display_UpdateScreen_Task+0xc4>)
 8001016:	789b      	ldrb	r3, [r3, #2]
 8001018:	2b07      	cmp	r3, #7
 800101a:	d905      	bls.n	8001028 <Display_UpdateScreen_Task+0xbc>
			Update.Page = 0;
 800101c:	4b04      	ldr	r3, [pc, #16]	@ (8001030 <Display_UpdateScreen_Task+0xc4>)
 800101e:	2200      	movs	r2, #0
 8001020:	709a      	strb	r2, [r3, #2]
			Update.Ready_To_Refresh = FALSE;
 8001022:	4b03      	ldr	r3, [pc, #12]	@ (8001030 <Display_UpdateScreen_Task+0xc4>)
 8001024:	2200      	movs	r2, #0
 8001026:	701a      	strb	r2, [r3, #0]
		}
	}

	return SYS_OK;
 8001028:	2300      	movs	r3, #0
}
 800102a:	4618      	mov	r0, r3
 800102c:	bd98      	pop	{r3, r4, r7, pc}
 800102e:	bf00      	nop
 8001030:	200007f8 	.word	0x200007f8
 8001034:	200003e8 	.word	0x200003e8
 8001038:	200003f0 	.word	0x200003f0
 800103c:	200007fc 	.word	0x200007fc
 8001040:	200003f8 	.word	0x200003f8

08001044 <Display_I2C_DMA_Ready>:

void Display_I2C_DMA_Ready(uint8_t val){
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	71fb      	strb	r3, [r7, #7]
	Update.Ready_DMA = val;
 800104e:	4a04      	ldr	r2, [pc, #16]	@ (8001060 <Display_I2C_DMA_Ready+0x1c>)
 8001050:	79fb      	ldrb	r3, [r7, #7]
 8001052:	7053      	strb	r3, [r2, #1]
}
 8001054:	bf00      	nop
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr
 8001060:	200007f8 	.word	0x200007f8

08001064 <Display_I2C_Refresh_Ready>:

void Display_I2C_Refresh_Ready(uint8_t val){
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	71fb      	strb	r3, [r7, #7]
	Update.Ready_To_Refresh = val;
 800106e:	4a04      	ldr	r2, [pc, #16]	@ (8001080 <Display_I2C_Refresh_Ready+0x1c>)
 8001070:	79fb      	ldrb	r3, [r7, #7]
 8001072:	7013      	strb	r3, [r2, #0]
}
 8001074:	bf00      	nop
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	200007f8 	.word	0x200007f8

08001084 <Display_SetCursor>:

/**
 * SET CURSOR POSITION
 */
void Display_SetCursor(uint8_t x, uint8_t y)
{
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	4603      	mov	r3, r0
 800108c:	460a      	mov	r2, r1
 800108e:	71fb      	strb	r3, [r7, #7]
 8001090:	4613      	mov	r3, r2
 8001092:	71bb      	strb	r3, [r7, #6]
	SSD1306.CurrentX = x;
 8001094:	79fb      	ldrb	r3, [r7, #7]
 8001096:	b29a      	uxth	r2, r3
 8001098:	4b05      	ldr	r3, [pc, #20]	@ (80010b0 <Display_SetCursor+0x2c>)
 800109a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 800109c:	79bb      	ldrb	r3, [r7, #6]
 800109e:	b29a      	uxth	r2, r3
 80010a0:	4b03      	ldr	r3, [pc, #12]	@ (80010b0 <Display_SetCursor+0x2c>)
 80010a2:	805a      	strh	r2, [r3, #2]
}
 80010a4:	bf00      	nop
 80010a6:	370c      	adds	r7, #12
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr
 80010b0:	200003e8 	.word	0x200003e8

080010b4 <Display_Fill>:

void Display_Fill(SSD1306_COLOR_t color) {
 80010b4:	b480      	push	{r7}
 80010b6:	b085      	sub	sp, #20
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	//memset(OLED_DMA_BUFFER, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, 1024);
	uint32_t i;

	for(i = 0; i < sizeof(OLED_DMA_BUFFER); i++)	// Fill screenbuffer with a constant value (color)
 80010be:	2300      	movs	r3, #0
 80010c0:	60fb      	str	r3, [r7, #12]
 80010c2:	e00d      	b.n	80010e0 <Display_Fill+0x2c>
	{
		OLED_DMA_BUFFER[i] = (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF;
 80010c4:	79fb      	ldrb	r3, [r7, #7]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d101      	bne.n	80010ce <Display_Fill+0x1a>
 80010ca:	2100      	movs	r1, #0
 80010cc:	e000      	b.n	80010d0 <Display_Fill+0x1c>
 80010ce:	21ff      	movs	r1, #255	@ 0xff
 80010d0:	4a09      	ldr	r2, [pc, #36]	@ (80010f8 <Display_Fill+0x44>)
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	4413      	add	r3, r2
 80010d6:	460a      	mov	r2, r1
 80010d8:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < sizeof(OLED_DMA_BUFFER); i++)	// Fill screenbuffer with a constant value (color)
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	3301      	adds	r3, #1
 80010de:	60fb      	str	r3, [r7, #12]
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80010e6:	d3ed      	bcc.n	80010c4 <Display_Fill+0x10>
	}
}
 80010e8:	bf00      	nop
 80010ea:	bf00      	nop
 80010ec:	3714      	adds	r7, #20
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	200003f8 	.word	0x200003f8

080010fc <Display_DrawPixel>:

void Display_Clear (void){
	Display_Fill (0);
}

void Display_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	4603      	mov	r3, r0
 8001104:	80fb      	strh	r3, [r7, #6]
 8001106:	460b      	mov	r3, r1
 8001108:	80bb      	strh	r3, [r7, #4]
 800110a:	4613      	mov	r3, r2
 800110c:	70fb      	strb	r3, [r7, #3]
	if (
 800110e:	88fb      	ldrh	r3, [r7, #6]
 8001110:	2b7f      	cmp	r3, #127	@ 0x7f
 8001112:	d848      	bhi.n	80011a6 <Display_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001114:	88bb      	ldrh	r3, [r7, #4]
 8001116:	2b3f      	cmp	r3, #63	@ 0x3f
 8001118:	d845      	bhi.n	80011a6 <Display_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800111a:	4b26      	ldr	r3, [pc, #152]	@ (80011b4 <Display_DrawPixel+0xb8>)
 800111c:	791b      	ldrb	r3, [r3, #4]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d006      	beq.n	8001130 <Display_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001122:	78fb      	ldrb	r3, [r7, #3]
 8001124:	2b00      	cmp	r3, #0
 8001126:	bf0c      	ite	eq
 8001128:	2301      	moveq	r3, #1
 800112a:	2300      	movne	r3, #0
 800112c:	b2db      	uxtb	r3, r3
 800112e:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001130:	78fb      	ldrb	r3, [r7, #3]
 8001132:	2b01      	cmp	r3, #1
 8001134:	d11a      	bne.n	800116c <Display_DrawPixel+0x70>
		OLED_DMA_BUFFER[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001136:	88fa      	ldrh	r2, [r7, #6]
 8001138:	88bb      	ldrh	r3, [r7, #4]
 800113a:	08db      	lsrs	r3, r3, #3
 800113c:	b298      	uxth	r0, r3
 800113e:	4603      	mov	r3, r0
 8001140:	01db      	lsls	r3, r3, #7
 8001142:	4413      	add	r3, r2
 8001144:	4a1c      	ldr	r2, [pc, #112]	@ (80011b8 <Display_DrawPixel+0xbc>)
 8001146:	5cd3      	ldrb	r3, [r2, r3]
 8001148:	b25a      	sxtb	r2, r3
 800114a:	88bb      	ldrh	r3, [r7, #4]
 800114c:	f003 0307 	and.w	r3, r3, #7
 8001150:	2101      	movs	r1, #1
 8001152:	fa01 f303 	lsl.w	r3, r1, r3
 8001156:	b25b      	sxtb	r3, r3
 8001158:	4313      	orrs	r3, r2
 800115a:	b259      	sxtb	r1, r3
 800115c:	88fa      	ldrh	r2, [r7, #6]
 800115e:	4603      	mov	r3, r0
 8001160:	01db      	lsls	r3, r3, #7
 8001162:	4413      	add	r3, r2
 8001164:	b2c9      	uxtb	r1, r1
 8001166:	4a14      	ldr	r2, [pc, #80]	@ (80011b8 <Display_DrawPixel+0xbc>)
 8001168:	54d1      	strb	r1, [r2, r3]
 800116a:	e01d      	b.n	80011a8 <Display_DrawPixel+0xac>
	} else {
		OLED_DMA_BUFFER[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800116c:	88fa      	ldrh	r2, [r7, #6]
 800116e:	88bb      	ldrh	r3, [r7, #4]
 8001170:	08db      	lsrs	r3, r3, #3
 8001172:	b298      	uxth	r0, r3
 8001174:	4603      	mov	r3, r0
 8001176:	01db      	lsls	r3, r3, #7
 8001178:	4413      	add	r3, r2
 800117a:	4a0f      	ldr	r2, [pc, #60]	@ (80011b8 <Display_DrawPixel+0xbc>)
 800117c:	5cd3      	ldrb	r3, [r2, r3]
 800117e:	b25a      	sxtb	r2, r3
 8001180:	88bb      	ldrh	r3, [r7, #4]
 8001182:	f003 0307 	and.w	r3, r3, #7
 8001186:	2101      	movs	r1, #1
 8001188:	fa01 f303 	lsl.w	r3, r1, r3
 800118c:	b25b      	sxtb	r3, r3
 800118e:	43db      	mvns	r3, r3
 8001190:	b25b      	sxtb	r3, r3
 8001192:	4013      	ands	r3, r2
 8001194:	b259      	sxtb	r1, r3
 8001196:	88fa      	ldrh	r2, [r7, #6]
 8001198:	4603      	mov	r3, r0
 800119a:	01db      	lsls	r3, r3, #7
 800119c:	4413      	add	r3, r2
 800119e:	b2c9      	uxtb	r1, r1
 80011a0:	4a05      	ldr	r2, [pc, #20]	@ (80011b8 <Display_DrawPixel+0xbc>)
 80011a2:	54d1      	strb	r1, [r2, r3]
 80011a4:	e000      	b.n	80011a8 <Display_DrawPixel+0xac>
		return;
 80011a6:	bf00      	nop
	}
}
 80011a8:	370c      	adds	r7, #12
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	200003e8 	.word	0x200003e8
 80011b8:	200003f8 	.word	0x200003f8

080011bc <Display_DrawBitmap>:

void Display_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b086      	sub	sp, #24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	60ba      	str	r2, [r7, #8]
 80011c4:	461a      	mov	r2, r3
 80011c6:	4603      	mov	r3, r0
 80011c8:	81fb      	strh	r3, [r7, #14]
 80011ca:	460b      	mov	r3, r1
 80011cc:	81bb      	strh	r3, [r7, #12]
 80011ce:	4613      	mov	r3, r2
 80011d0:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 80011d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011d6:	3307      	adds	r3, #7
 80011d8:	2b00      	cmp	r3, #0
 80011da:	da00      	bge.n	80011de <Display_DrawBitmap+0x22>
 80011dc:	3307      	adds	r3, #7
 80011de:	10db      	asrs	r3, r3, #3
 80011e0:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 80011e2:	2300      	movs	r3, #0
 80011e4:	75fb      	strb	r3, [r7, #23]

    //memcpy(&OLED_DMA_BUFFER[OFFSET_DATA], bitmap, 1024);
	/*for(uint16_t i = 0; i<1024; i++){
		OLED_DMA_BUFFER[i] = bitmap[i];
	}*/
    for(int16_t j=0; j<h; j++, y++)
 80011e6:	2300      	movs	r3, #0
 80011e8:	82bb      	strh	r3, [r7, #20]
 80011ea:	e044      	b.n	8001276 <Display_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 80011ec:	2300      	movs	r3, #0
 80011ee:	827b      	strh	r3, [r7, #18]
 80011f0:	e02f      	b.n	8001252 <Display_DrawBitmap+0x96>
        {
            if(i & 7)
 80011f2:	8a7b      	ldrh	r3, [r7, #18]
 80011f4:	f003 0307 	and.w	r3, r3, #7
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d003      	beq.n	8001204 <Display_DrawBitmap+0x48>
            {
               byte <<= 1;
 80011fc:	7dfb      	ldrb	r3, [r7, #23]
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	75fb      	strb	r3, [r7, #23]
 8001202:	e012      	b.n	800122a <Display_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8001204:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001208:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800120c:	fb03 f202 	mul.w	r2, r3, r2
 8001210:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001214:	2b00      	cmp	r3, #0
 8001216:	da00      	bge.n	800121a <Display_DrawBitmap+0x5e>
 8001218:	3307      	adds	r3, #7
 800121a:	10db      	asrs	r3, r3, #3
 800121c:	b21b      	sxth	r3, r3
 800121e:	4413      	add	r3, r2
 8001220:	461a      	mov	r2, r3
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	4413      	add	r3, r2
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) Display_DrawPixel(x+i, y, color);
 800122a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800122e:	2b00      	cmp	r3, #0
 8001230:	da09      	bge.n	8001246 <Display_DrawBitmap+0x8a>
 8001232:	89fa      	ldrh	r2, [r7, #14]
 8001234:	8a7b      	ldrh	r3, [r7, #18]
 8001236:	4413      	add	r3, r2
 8001238:	b29b      	uxth	r3, r3
 800123a:	89b9      	ldrh	r1, [r7, #12]
 800123c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800123e:	b2d2      	uxtb	r2, r2
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff ff5b 	bl	80010fc <Display_DrawPixel>
        for(int16_t i=0; i<w; i++)
 8001246:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800124a:	b29b      	uxth	r3, r3
 800124c:	3301      	adds	r3, #1
 800124e:	b29b      	uxth	r3, r3
 8001250:	827b      	strh	r3, [r7, #18]
 8001252:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001256:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800125a:	429a      	cmp	r2, r3
 800125c:	dbc9      	blt.n	80011f2 <Display_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 800125e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001262:	b29b      	uxth	r3, r3
 8001264:	3301      	adds	r3, #1
 8001266:	b29b      	uxth	r3, r3
 8001268:	82bb      	strh	r3, [r7, #20]
 800126a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800126e:	b29b      	uxth	r3, r3
 8001270:	3301      	adds	r3, #1
 8001272:	b29b      	uxth	r3, r3
 8001274:	81bb      	strh	r3, [r7, #12]
 8001276:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800127a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800127e:	429a      	cmp	r2, r3
 8001280:	dbb4      	blt.n	80011ec <Display_DrawBitmap+0x30>
        }
    }
}
 8001282:	bf00      	nop
 8001284:	bf00      	nop
 8001286:	3718      	adds	r7, #24
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}

0800128c <Display_WriteChar>:

/**
 * WRITE A CHAR INTO THE DISPLAY BUFFER
 */
char Display_WriteChar(char ch, FontDef_t Font, SSD1306_COLOR_t color)
{
 800128c:	b590      	push	{r4, r7, lr}
 800128e:	b089      	sub	sp, #36	@ 0x24
 8001290:	af00      	add	r7, sp, #0
 8001292:	4604      	mov	r4, r0
 8001294:	1d38      	adds	r0, r7, #4
 8001296:	e880 0006 	stmia.w	r0, {r1, r2}
 800129a:	461a      	mov	r2, r3
 800129c:	4623      	mov	r3, r4
 800129e:	73fb      	strb	r3, [r7, #15]
 80012a0:	4613      	mov	r3, r2
 80012a2:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80012a4:	4b36      	ldr	r3, [pc, #216]	@ (8001380 <Display_WriteChar+0xf4>)
 80012a6:	881b      	ldrh	r3, [r3, #0]
 80012a8:	461a      	mov	r2, r3
 80012aa:	793b      	ldrb	r3, [r7, #4]
 80012ac:	4413      	add	r3, r2
 80012ae:	2b7f      	cmp	r3, #127	@ 0x7f
 80012b0:	dc06      	bgt.n	80012c0 <Display_WriteChar+0x34>
    		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 80012b2:	4b33      	ldr	r3, [pc, #204]	@ (8001380 <Display_WriteChar+0xf4>)
 80012b4:	885b      	ldrh	r3, [r3, #2]
 80012b6:	461a      	mov	r2, r3
 80012b8:	797b      	ldrb	r3, [r7, #5]
 80012ba:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80012bc:	2b3f      	cmp	r3, #63	@ 0x3f
 80012be:	dd01      	ble.n	80012c4 <Display_WriteChar+0x38>
    {

        return 0;	// Not enough space on current line
 80012c0:	2300      	movs	r3, #0
 80012c2:	e058      	b.n	8001376 <Display_WriteChar+0xea>
    }

    for (i = 0; i < Font.FontHeight; i++)	// Translate font to screenbuffer
 80012c4:	2300      	movs	r3, #0
 80012c6:	61fb      	str	r3, [r7, #28]
 80012c8:	e048      	b.n	800135c <Display_WriteChar+0xd0>
    {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80012ca:	68ba      	ldr	r2, [r7, #8]
 80012cc:	7bfb      	ldrb	r3, [r7, #15]
 80012ce:	3b20      	subs	r3, #32
 80012d0:	7979      	ldrb	r1, [r7, #5]
 80012d2:	fb01 f303 	mul.w	r3, r1, r3
 80012d6:	4619      	mov	r1, r3
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	440b      	add	r3, r1
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	4413      	add	r3, r2
 80012e0:	881b      	ldrh	r3, [r3, #0]
 80012e2:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++)
 80012e4:	2300      	movs	r3, #0
 80012e6:	61bb      	str	r3, [r7, #24]
 80012e8:	e030      	b.n	800134c <Display_WriteChar+0xc0>
        {
            if ((b << j) & 0x8000)
 80012ea:	697a      	ldr	r2, [r7, #20]
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	fa02 f303 	lsl.w	r3, r2, r3
 80012f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d010      	beq.n	800131c <Display_WriteChar+0x90>
                Display_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80012fa:	4b21      	ldr	r3, [pc, #132]	@ (8001380 <Display_WriteChar+0xf4>)
 80012fc:	881a      	ldrh	r2, [r3, #0]
 80012fe:	69bb      	ldr	r3, [r7, #24]
 8001300:	b29b      	uxth	r3, r3
 8001302:	4413      	add	r3, r2
 8001304:	b298      	uxth	r0, r3
 8001306:	4b1e      	ldr	r3, [pc, #120]	@ (8001380 <Display_WriteChar+0xf4>)
 8001308:	885a      	ldrh	r2, [r3, #2]
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	b29b      	uxth	r3, r3
 800130e:	4413      	add	r3, r2
 8001310:	b29b      	uxth	r3, r3
 8001312:	7bba      	ldrb	r2, [r7, #14]
 8001314:	4619      	mov	r1, r3
 8001316:	f7ff fef1 	bl	80010fc <Display_DrawPixel>
 800131a:	e014      	b.n	8001346 <Display_WriteChar+0xba>
            else
                Display_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 800131c:	4b18      	ldr	r3, [pc, #96]	@ (8001380 <Display_WriteChar+0xf4>)
 800131e:	881a      	ldrh	r2, [r3, #0]
 8001320:	69bb      	ldr	r3, [r7, #24]
 8001322:	b29b      	uxth	r3, r3
 8001324:	4413      	add	r3, r2
 8001326:	b298      	uxth	r0, r3
 8001328:	4b15      	ldr	r3, [pc, #84]	@ (8001380 <Display_WriteChar+0xf4>)
 800132a:	885a      	ldrh	r2, [r3, #2]
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	b29b      	uxth	r3, r3
 8001330:	4413      	add	r3, r2
 8001332:	b299      	uxth	r1, r3
 8001334:	7bbb      	ldrb	r3, [r7, #14]
 8001336:	2b00      	cmp	r3, #0
 8001338:	bf0c      	ite	eq
 800133a:	2301      	moveq	r3, #1
 800133c:	2300      	movne	r3, #0
 800133e:	b2db      	uxtb	r3, r3
 8001340:	461a      	mov	r2, r3
 8001342:	f7ff fedb 	bl	80010fc <Display_DrawPixel>
        for (j = 0; j < Font.FontWidth; j++)
 8001346:	69bb      	ldr	r3, [r7, #24]
 8001348:	3301      	adds	r3, #1
 800134a:	61bb      	str	r3, [r7, #24]
 800134c:	793b      	ldrb	r3, [r7, #4]
 800134e:	461a      	mov	r2, r3
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	4293      	cmp	r3, r2
 8001354:	d3c9      	bcc.n	80012ea <Display_WriteChar+0x5e>
    for (i = 0; i < Font.FontHeight; i++)	// Translate font to screenbuffer
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	3301      	adds	r3, #1
 800135a:	61fb      	str	r3, [r7, #28]
 800135c:	797b      	ldrb	r3, [r7, #5]
 800135e:	461a      	mov	r2, r3
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	4293      	cmp	r3, r2
 8001364:	d3b1      	bcc.n	80012ca <Display_WriteChar+0x3e>
        }
    }
    SSD1306.CurrentX += Font.FontWidth;	// The current space is now taken
 8001366:	4b06      	ldr	r3, [pc, #24]	@ (8001380 <Display_WriteChar+0xf4>)
 8001368:	881b      	ldrh	r3, [r3, #0]
 800136a:	793a      	ldrb	r2, [r7, #4]
 800136c:	4413      	add	r3, r2
 800136e:	b29a      	uxth	r2, r3
 8001370:	4b03      	ldr	r3, [pc, #12]	@ (8001380 <Display_WriteChar+0xf4>)
 8001372:	801a      	strh	r2, [r3, #0]

    return ch;	// Return written char for validation
 8001374:	7bfb      	ldrb	r3, [r7, #15]
}
 8001376:	4618      	mov	r0, r3
 8001378:	3724      	adds	r7, #36	@ 0x24
 800137a:	46bd      	mov	sp, r7
 800137c:	bd90      	pop	{r4, r7, pc}
 800137e:	bf00      	nop
 8001380:	200003e8 	.word	0x200003e8

08001384 <Display_WriteString>:

/**
 * WRITE STRING INTO THE DISPLAY BUFFER
 */
char Display_WriteString(const char* str, FontDef_t Font, SSD1306_COLOR_t color)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	60f8      	str	r0, [r7, #12]
 800138c:	1d38      	adds	r0, r7, #4
 800138e:	e880 0006 	stmia.w	r0, {r1, r2}
 8001392:	70fb      	strb	r3, [r7, #3]
    while (*str){
 8001394:	e012      	b.n	80013bc <Display_WriteString+0x38>
        if (Display_WriteChar(*str, Font, color) != *str)	// Write until null-byte
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	7818      	ldrb	r0, [r3, #0]
 800139a:	78fb      	ldrb	r3, [r7, #3]
 800139c:	1d3a      	adds	r2, r7, #4
 800139e:	ca06      	ldmia	r2, {r1, r2}
 80013a0:	f7ff ff74 	bl	800128c <Display_WriteChar>
 80013a4:	4603      	mov	r3, r0
 80013a6:	461a      	mov	r2, r3
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	429a      	cmp	r2, r3
 80013ae:	d002      	beq.n	80013b6 <Display_WriteString+0x32>
        	return *str;	// Char could not be written
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	e008      	b.n	80013c8 <Display_WriteString+0x44>

        str++;	// Next char
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	3301      	adds	r3, #1
 80013ba:	60fb      	str	r3, [r7, #12]
    while (*str){
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d1e8      	bne.n	8001396 <Display_WriteString+0x12>
    }
    return *str;	// Everything ok
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	781b      	ldrb	r3, [r3, #0]
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3710      	adds	r7, #16
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}

080013d0 <Display_DrawLine>:

void Display_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 80013d0:	b590      	push	{r4, r7, lr}
 80013d2:	b085      	sub	sp, #20
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	4604      	mov	r4, r0
 80013d8:	4608      	mov	r0, r1
 80013da:	4611      	mov	r1, r2
 80013dc:	461a      	mov	r2, r3
 80013de:	4623      	mov	r3, r4
 80013e0:	80fb      	strh	r3, [r7, #6]
 80013e2:	4603      	mov	r3, r0
 80013e4:	80bb      	strh	r3, [r7, #4]
 80013e6:	460b      	mov	r3, r1
 80013e8:	807b      	strh	r3, [r7, #2]
 80013ea:	4613      	mov	r3, r2
 80013ec:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, i, tmp;

	if(x0 != x1 && y0 != y1)
 80013ee:	88fa      	ldrh	r2, [r7, #6]
 80013f0:	887b      	ldrh	r3, [r7, #2]
 80013f2:	429a      	cmp	r2, r3
 80013f4:	d004      	beq.n	8001400 <Display_DrawLine+0x30>
 80013f6:	88ba      	ldrh	r2, [r7, #4]
 80013f8:	883b      	ldrh	r3, [r7, #0]
 80013fa:	429a      	cmp	r2, r3
 80013fc:	f040 8090 	bne.w	8001520 <Display_DrawLine+0x150>
		return;

	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 8001400:	88fb      	ldrh	r3, [r7, #6]
 8001402:	2b7f      	cmp	r3, #127	@ 0x7f
 8001404:	d901      	bls.n	800140a <Display_DrawLine+0x3a>
		x0 = SSD1306_WIDTH - 1;
 8001406:	237f      	movs	r3, #127	@ 0x7f
 8001408:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= SSD1306_WIDTH) {
 800140a:	887b      	ldrh	r3, [r7, #2]
 800140c:	2b7f      	cmp	r3, #127	@ 0x7f
 800140e:	d901      	bls.n	8001414 <Display_DrawLine+0x44>
		x1 = SSD1306_WIDTH - 1;
 8001410:	237f      	movs	r3, #127	@ 0x7f
 8001412:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= SSD1306_HEIGHT) {
 8001414:	88bb      	ldrh	r3, [r7, #4]
 8001416:	2b3f      	cmp	r3, #63	@ 0x3f
 8001418:	d901      	bls.n	800141e <Display_DrawLine+0x4e>
		y0 = SSD1306_HEIGHT - 1;
 800141a:	233f      	movs	r3, #63	@ 0x3f
 800141c:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= SSD1306_HEIGHT) {
 800141e:	883b      	ldrh	r3, [r7, #0]
 8001420:	2b3f      	cmp	r3, #63	@ 0x3f
 8001422:	d901      	bls.n	8001428 <Display_DrawLine+0x58>
		y1 = SSD1306_HEIGHT - 1;
 8001424:	233f      	movs	r3, #63	@ 0x3f
 8001426:	803b      	strh	r3, [r7, #0]
	}

	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1);
 8001428:	88fa      	ldrh	r2, [r7, #6]
 800142a:	887b      	ldrh	r3, [r7, #2]
 800142c:	429a      	cmp	r2, r3
 800142e:	d205      	bcs.n	800143c <Display_DrawLine+0x6c>
 8001430:	887a      	ldrh	r2, [r7, #2]
 8001432:	88fb      	ldrh	r3, [r7, #6]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	b29b      	uxth	r3, r3
 8001438:	b21b      	sxth	r3, r3
 800143a:	e004      	b.n	8001446 <Display_DrawLine+0x76>
 800143c:	88fa      	ldrh	r2, [r7, #6]
 800143e:	887b      	ldrh	r3, [r7, #2]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	b29b      	uxth	r3, r3
 8001444:	b21b      	sxth	r3, r3
 8001446:	81bb      	strh	r3, [r7, #12]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1);
 8001448:	88ba      	ldrh	r2, [r7, #4]
 800144a:	883b      	ldrh	r3, [r7, #0]
 800144c:	429a      	cmp	r2, r3
 800144e:	d205      	bcs.n	800145c <Display_DrawLine+0x8c>
 8001450:	883a      	ldrh	r2, [r7, #0]
 8001452:	88bb      	ldrh	r3, [r7, #4]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	b29b      	uxth	r3, r3
 8001458:	b21b      	sxth	r3, r3
 800145a:	e004      	b.n	8001466 <Display_DrawLine+0x96>
 800145c:	88ba      	ldrh	r2, [r7, #4]
 800145e:	883b      	ldrh	r3, [r7, #0]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	b29b      	uxth	r3, r3
 8001464:	b21b      	sxth	r3, r3
 8001466:	817b      	strh	r3, [r7, #10]

	if (dx == 0) {
 8001468:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d129      	bne.n	80014c4 <Display_DrawLine+0xf4>
		if (y1 < y0) {
 8001470:	883a      	ldrh	r2, [r7, #0]
 8001472:	88bb      	ldrh	r3, [r7, #4]
 8001474:	429a      	cmp	r2, r3
 8001476:	d205      	bcs.n	8001484 <Display_DrawLine+0xb4>
			tmp = y1;
 8001478:	883b      	ldrh	r3, [r7, #0]
 800147a:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 800147c:	88bb      	ldrh	r3, [r7, #4]
 800147e:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8001480:	893b      	ldrh	r3, [r7, #8]
 8001482:	80bb      	strh	r3, [r7, #4]
		}

		if (x1 < x0) {
 8001484:	887a      	ldrh	r2, [r7, #2]
 8001486:	88fb      	ldrh	r3, [r7, #6]
 8001488:	429a      	cmp	r2, r3
 800148a:	d205      	bcs.n	8001498 <Display_DrawLine+0xc8>
			tmp = x1;
 800148c:	887b      	ldrh	r3, [r7, #2]
 800148e:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8001490:	88fb      	ldrh	r3, [r7, #6]
 8001492:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8001494:	893b      	ldrh	r3, [r7, #8]
 8001496:	80fb      	strh	r3, [r7, #6]
		}

		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 8001498:	88bb      	ldrh	r3, [r7, #4]
 800149a:	81fb      	strh	r3, [r7, #14]
 800149c:	e00c      	b.n	80014b8 <Display_DrawLine+0xe8>
			Display_DrawPixel(x0, i, c);
 800149e:	89f9      	ldrh	r1, [r7, #14]
 80014a0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80014a4:	88fb      	ldrh	r3, [r7, #6]
 80014a6:	4618      	mov	r0, r3
 80014a8:	f7ff fe28 	bl	80010fc <Display_DrawPixel>
		for (i = y0; i <= y1; i++) {
 80014ac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014b0:	b29b      	uxth	r3, r3
 80014b2:	3301      	adds	r3, #1
 80014b4:	b29b      	uxth	r3, r3
 80014b6:	81fb      	strh	r3, [r7, #14]
 80014b8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80014bc:	883b      	ldrh	r3, [r7, #0]
 80014be:	429a      	cmp	r2, r3
 80014c0:	dded      	ble.n	800149e <Display_DrawLine+0xce>
		}

		/* Return from function */
		return;
 80014c2:	e030      	b.n	8001526 <Display_DrawLine+0x156>
	}

	if (dy == 0) {
 80014c4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d12b      	bne.n	8001524 <Display_DrawLine+0x154>
		if (y1 < y0) {
 80014cc:	883a      	ldrh	r2, [r7, #0]
 80014ce:	88bb      	ldrh	r3, [r7, #4]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d205      	bcs.n	80014e0 <Display_DrawLine+0x110>
			tmp = y1;
 80014d4:	883b      	ldrh	r3, [r7, #0]
 80014d6:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 80014d8:	88bb      	ldrh	r3, [r7, #4]
 80014da:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 80014dc:	893b      	ldrh	r3, [r7, #8]
 80014de:	80bb      	strh	r3, [r7, #4]
		}

		if (x1 < x0) {
 80014e0:	887a      	ldrh	r2, [r7, #2]
 80014e2:	88fb      	ldrh	r3, [r7, #6]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d205      	bcs.n	80014f4 <Display_DrawLine+0x124>
			tmp = x1;
 80014e8:	887b      	ldrh	r3, [r7, #2]
 80014ea:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 80014ec:	88fb      	ldrh	r3, [r7, #6]
 80014ee:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 80014f0:	893b      	ldrh	r3, [r7, #8]
 80014f2:	80fb      	strh	r3, [r7, #6]
		}

		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 80014f4:	88fb      	ldrh	r3, [r7, #6]
 80014f6:	81fb      	strh	r3, [r7, #14]
 80014f8:	e00c      	b.n	8001514 <Display_DrawLine+0x144>
			Display_DrawPixel(i, y0, c);
 80014fa:	89fb      	ldrh	r3, [r7, #14]
 80014fc:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001500:	88b9      	ldrh	r1, [r7, #4]
 8001502:	4618      	mov	r0, r3
 8001504:	f7ff fdfa 	bl	80010fc <Display_DrawPixel>
		for (i = x0; i <= x1; i++) {
 8001508:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800150c:	b29b      	uxth	r3, r3
 800150e:	3301      	adds	r3, #1
 8001510:	b29b      	uxth	r3, r3
 8001512:	81fb      	strh	r3, [r7, #14]
 8001514:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001518:	887b      	ldrh	r3, [r7, #2]
 800151a:	429a      	cmp	r2, r3
 800151c:	dded      	ble.n	80014fa <Display_DrawLine+0x12a>
		}
	}
	return;
 800151e:	e001      	b.n	8001524 <Display_DrawLine+0x154>
		return;
 8001520:	bf00      	nop
 8001522:	e000      	b.n	8001526 <Display_DrawLine+0x156>
	return;
 8001524:	bf00      	nop
}
 8001526:	3714      	adds	r7, #20
 8001528:	46bd      	mov	sp, r7
 800152a:	bd90      	pop	{r4, r7, pc}

0800152c <Encoder_Init>:
 *      Author: Agustín Alejandro Mayer
 */

#include "Motors/encoder.h"

void Encoder_Init(s_encoder *enc, uint8_t reset){
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	460b      	mov	r3, r1
 8001536:	70fb      	strb	r3, [r7, #3]
	enc->pulses = 0;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2200      	movs	r2, #0
 800153c:	809a      	strh	r2, [r3, #4]
	enc->resetBase = reset;
 800153e:	78fb      	ldrb	r3, [r7, #3]
 8001540:	b29a      	uxth	r2, r3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	801a      	strh	r2, [r3, #0]
	enc->timeReset = reset;
 8001546:	78fb      	ldrb	r3, [r7, #3]
 8001548:	b29a      	uxth	r2, r3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	805a      	strh	r2, [r3, #2]
	enc->counter1s = 1000 / reset;
 800154e:	78fb      	ldrb	r3, [r7, #3]
 8001550:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001554:	fb92 f3f3 	sdiv	r3, r2, r3
 8001558:	b2da      	uxtb	r2, r3
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	729a      	strb	r2, [r3, #10]
}
 800155e:	bf00      	nop
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr

0800156a <Encoder_Task>:

void Encoder_Task(s_encoder *enc){
 800156a:	b480      	push	{r7}
 800156c:	b083      	sub	sp, #12
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]
	enc->timeReset--;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	885b      	ldrh	r3, [r3, #2]
 8001576:	3b01      	subs	r3, #1
 8001578:	b29a      	uxth	r2, r3
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	805a      	strh	r2, [r3, #2]
	if(!enc->timeReset){
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	885b      	ldrh	r3, [r3, #2]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d10e      	bne.n	80015a4 <Encoder_Task+0x3a>

		enc->pps100 += enc->pulses;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	88da      	ldrh	r2, [r3, #6]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	889b      	ldrh	r3, [r3, #4]
 800158e:	4413      	add	r3, r2
 8001590:	b29a      	uxth	r2, r3
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	80da      	strh	r2, [r3, #6]

		enc->timeReset = enc->resetBase;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	881a      	ldrh	r2, [r3, #0]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	805a      	strh	r2, [r3, #2]
		enc->pulses = 0;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2200      	movs	r2, #0
 80015a2:	809a      	strh	r2, [r3, #4]
	}
	enc->counter1s--;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	7a9b      	ldrb	r3, [r3, #10]
 80015a8:	3b01      	subs	r3, #1
 80015aa:	b2da      	uxtb	r2, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	729a      	strb	r2, [r3, #10]
	if(!enc->counter1s){
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	7a9b      	ldrb	r3, [r3, #10]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d102      	bne.n	80015be <Encoder_Task+0x54>
		enc->pps = 0;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2200      	movs	r2, #0
 80015bc:	811a      	strh	r2, [r3, #8]
	}
}
 80015be:	bf00      	nop
 80015c0:	370c      	adds	r7, #12
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr

080015ca <Encoder_Add_Pulse>:

void Encoder_Add_Pulse(s_encoder *enc){
 80015ca:	b480      	push	{r7}
 80015cc:	b083      	sub	sp, #12
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
	enc->pulses++;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	889b      	ldrh	r3, [r3, #4]
 80015d6:	3301      	adds	r3, #1
 80015d8:	b29a      	uxth	r2, r3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	809a      	strh	r2, [r3, #4]
}
 80015de:	bf00      	nop
 80015e0:	370c      	adds	r7, #12
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr

080015ea <Encoder_1s_Elapsed>:

void Encoder_1s_Elapsed(s_encoder *enc){
 80015ea:	b480      	push	{r7}
 80015ec:	b083      	sub	sp, #12
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
	enc->pps = enc->pps100;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	88da      	ldrh	r2, [r3, #6]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	811a      	strh	r2, [r3, #8]
	enc->pps100=0;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2200      	movs	r2, #0
 80015fe:	80da      	strh	r2, [r3, #6]
}
 8001600:	bf00      	nop
 8001602:	370c      	adds	r7, #12
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr

0800160c <Motor_Init>:
 */
#include "Motors/motors.h"
#include <stddef.h>

void Motor_Init(s_motor *motor, void (*PWM_set)(uint16_t dCycle),
		void (*PIN_set)(e_direction dir), uint16_t max_value){
 800160c:	b480      	push	{r7}
 800160e:	b085      	sub	sp, #20
 8001610:	af00      	add	r7, sp, #0
 8001612:	60f8      	str	r0, [r7, #12]
 8001614:	60b9      	str	r1, [r7, #8]
 8001616:	607a      	str	r2, [r7, #4]
 8001618:	807b      	strh	r3, [r7, #2]

	motor->direction = NO_INIT;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	2200      	movs	r2, #0
 800161e:	701a      	strb	r2, [r3, #0]
	motor->setPins = PIN_set;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	611a      	str	r2, [r3, #16]
	motor->setPWM = PWM_set;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	68ba      	ldr	r2, [r7, #8]
 800162a:	615a      	str	r2, [r3, #20]
	motor->maxValue = max_value;
 800162c:	887a      	ldrh	r2, [r7, #2]
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	605a      	str	r2, [r3, #4]
	motor->vel = 0;
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	2200      	movs	r2, #0
 8001636:	609a      	str	r2, [r3, #8]
	motor->brakeTimeout = 0;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	2200      	movs	r2, #0
 800163c:	819a      	strh	r2, [r3, #12]
}
 800163e:	bf00      	nop
 8001640:	3714      	adds	r7, #20
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr

0800164a <Motor_Set_PER_Speed>:
		motor->setPins(FREE_WHEEL);
		motor->setPWM(0);
	}
}

void Motor_Set_PER_Speed(s_motor *motor, int8_t speed){
 800164a:	b580      	push	{r7, lr}
 800164c:	b082      	sub	sp, #8
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]
 8001652:	460b      	mov	r3, r1
 8001654:	70fb      	strb	r3, [r7, #3]
	if(motor->setPins == NULL || motor->setPWM == NULL)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	691b      	ldr	r3, [r3, #16]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d054      	beq.n	8001708 <Motor_Set_PER_Speed+0xbe>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	695b      	ldr	r3, [r3, #20]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d050      	beq.n	8001708 <Motor_Set_PER_Speed+0xbe>
		return;
	if(speed > 100)
 8001666:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800166a:	2b64      	cmp	r3, #100	@ 0x64
 800166c:	dd01      	ble.n	8001672 <Motor_Set_PER_Speed+0x28>
		speed = 100;
 800166e:	2364      	movs	r3, #100	@ 0x64
 8001670:	70fb      	strb	r3, [r7, #3]
	if(speed < -100)
 8001672:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001676:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 800167a:	da01      	bge.n	8001680 <Motor_Set_PER_Speed+0x36>
		speed = -100;
 800167c:	239c      	movs	r3, #156	@ 0x9c
 800167e:	70fb      	strb	r3, [r7, #3]
	if(speed == motor->vel)
 8001680:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	429a      	cmp	r2, r3
 800168a:	d03f      	beq.n	800170c <Motor_Set_PER_Speed+0xc2>
		return;

	motor->vel = speed * 600;
 800168c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001690:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8001694:	fb03 f202 	mul.w	r2, r3, r2
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	609a      	str	r2, [r3, #8]

	if(speed > 0){
 800169c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	dd10      	ble.n	80016c6 <Motor_Set_PER_Speed+0x7c>
		motor->direction = FORWARD;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2202      	movs	r2, #2
 80016a8:	701a      	strb	r2, [r3, #0]
		motor->setPins(FORWARD);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	691b      	ldr	r3, [r3, #16]
 80016ae:	2002      	movs	r0, #2
 80016b0:	4798      	blx	r3
		motor->setPWM((uint16_t)motor->vel-1);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	695b      	ldr	r3, [r3, #20]
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	6892      	ldr	r2, [r2, #8]
 80016ba:	b292      	uxth	r2, r2
 80016bc:	3a01      	subs	r2, #1
 80016be:	b292      	uxth	r2, r2
 80016c0:	4610      	mov	r0, r2
 80016c2:	4798      	blx	r3
 80016c4:	e023      	b.n	800170e <Motor_Set_PER_Speed+0xc4>
	}else if(speed < 0){
 80016c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	da10      	bge.n	80016f0 <Motor_Set_PER_Speed+0xa6>
		motor->direction = BACKWARD;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2203      	movs	r2, #3
 80016d2:	701a      	strb	r2, [r3, #0]
		motor->setPins(BACKWARD);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	691b      	ldr	r3, [r3, #16]
 80016d8:	2003      	movs	r0, #3
 80016da:	4798      	blx	r3
		motor->setPWM((uint16_t)(motor->vel * -1)-1);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	695b      	ldr	r3, [r3, #20]
 80016e0:	687a      	ldr	r2, [r7, #4]
 80016e2:	6892      	ldr	r2, [r2, #8]
 80016e4:	b292      	uxth	r2, r2
 80016e6:	43d2      	mvns	r2, r2
 80016e8:	b292      	uxth	r2, r2
 80016ea:	4610      	mov	r0, r2
 80016ec:	4798      	blx	r3
 80016ee:	e00e      	b.n	800170e <Motor_Set_PER_Speed+0xc4>
	}else{
		motor->direction = FREE_WHEEL;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2201      	movs	r2, #1
 80016f4:	701a      	strb	r2, [r3, #0]
		motor->setPins(FREE_WHEEL);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	691b      	ldr	r3, [r3, #16]
 80016fa:	2001      	movs	r0, #1
 80016fc:	4798      	blx	r3
		motor->setPWM(0);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	695b      	ldr	r3, [r3, #20]
 8001702:	2000      	movs	r0, #0
 8001704:	4798      	blx	r3
 8001706:	e002      	b.n	800170e <Motor_Set_PER_Speed+0xc4>
		return;
 8001708:	bf00      	nop
 800170a:	e000      	b.n	800170e <Motor_Set_PER_Speed+0xc4>
		return;
 800170c:	bf00      	nop
	}
}
 800170e:	3708      	adds	r7, #8
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}

08001714 <Motor_Break_Timeout>:
	motor->direction = BRAKE;
	motor->setPins(BRAKE);

}

void Motor_Break_Timeout(s_motor *motor){
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
	if(motor->direction == BRAKE){
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	2b04      	cmp	r3, #4
 8001722:	d10c      	bne.n	800173e <Motor_Break_Timeout+0x2a>
		motor->brakeTimeout--;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	899b      	ldrh	r3, [r3, #12]
 8001728:	3b01      	subs	r3, #1
 800172a:	b29a      	uxth	r2, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	819a      	strh	r2, [r3, #12]
		if(!motor->brakeTimeout)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	899b      	ldrh	r3, [r3, #12]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d102      	bne.n	800173e <Motor_Break_Timeout+0x2a>
			motor->direction = FREE_WHEEL;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2201      	movs	r2, #1
 800173c:	701a      	strb	r2, [r3, #0]
	}
}
 800173e:	bf00      	nop
 8001740:	370c      	adds	r7, #12
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr

0800174a <Comm_Init>:
static uint8_t TxAuxBuffer[30];
static uint8_t indexStart;
static uint8_t indexStartValue;
static uint8_t checksum;

void Comm_Init(s_commData* comm, void (*dataD)(s_commData *comm), void (*dataW)(s_commData *comm)){
 800174a:	b480      	push	{r7}
 800174c:	b085      	sub	sp, #20
 800174e:	af00      	add	r7, sp, #0
 8001750:	60f8      	str	r0, [r7, #12]
 8001752:	60b9      	str	r1, [r7, #8]
 8001754:	607a      	str	r2, [r7, #4]
	comm->dataDecoder = dataD;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	68ba      	ldr	r2, [r7, #8]
 800175a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
	comm->dataWriter = dataW;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	687a      	ldr	r2, [r7, #4]
 8001762:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
	comm->timeOut = 0;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	2200      	movs	r2, #0
 800176a:	701a      	strb	r2, [r3, #0]
	comm->indexStart = 0;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	2200      	movs	r2, #0
 8001770:	705a      	strb	r2, [r3, #1]
	comm->checksumRx = 0;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	2200      	movs	r2, #0
 8001776:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
	comm->Tx.write=0;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	2200      	movs	r2, #0
 800177e:	70da      	strb	r2, [r3, #3]
	comm->Tx.read=0;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	2200      	movs	r2, #0
 8001784:	709a      	strb	r2, [r3, #2]
	comm->Rx.write=0;
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	2200      	movs	r2, #0
 800178a:	f883 2105 	strb.w	r2, [r3, #261]	@ 0x105
	comm->Rx.read=0;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	2200      	movs	r2, #0
 8001792:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
	comm->isESP01 = 0;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	2200      	movs	r2, #0
 800179a:	f883 222f 	strb.w	r2, [r3, #559]	@ 0x22f
	comm->protocolState = START;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	2200      	movs	r2, #0
 80017a2:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
}
 80017a6:	bf00      	nop
 80017a8:	3714      	adds	r7, #20
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr

080017b2 <Comm_Task>:

void Comm_Task(s_commData* comm){
 80017b2:	b580      	push	{r7, lr}
 80017b4:	b082      	sub	sp, #8
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	6078      	str	r0, [r7, #4]
	if(comm->Rx.read != comm->Rx.write){
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	f893 2104 	ldrb.w	r2, [r3, #260]	@ 0x104
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 80017c6:	429a      	cmp	r2, r3
 80017c8:	d002      	beq.n	80017d0 <Comm_Task+0x1e>
		decodeProtocol(comm);
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f000 f81a 	bl	8001804 <decodeProtocol>
	}
	if (comm->Tx.read != comm->Tx.write) {
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	789a      	ldrb	r2, [r3, #2]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	78db      	ldrb	r3, [r3, #3]
 80017d8:	429a      	cmp	r2, r3
 80017da:	d00e      	beq.n	80017fa <Comm_Task+0x48>
		if(!comm->isESP01){
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f893 322f 	ldrb.w	r3, [r3, #559]	@ 0x22f
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d109      	bne.n	80017fa <Comm_Task+0x48>
			if(comm->dataWriter != NULL)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d004      	beq.n	80017fa <Comm_Task+0x48>
				comm->dataWriter(comm);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	4798      	blx	r3
		}else{
			//ESP01_Send((unsigned char*)&comm->Tx.buffer,  comm->Tx.read,  1,  RINGBUFFLENGTH);
		}
	}
}
 80017fa:	bf00      	nop
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
	...

08001804 <decodeProtocol>:

void decodeProtocol(s_commData *datosCom){
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
	static uint8_t nBytes=0;
	uint8_t indexWriteRxCopy = datosCom->Rx.write;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 8001812:	73fb      	strb	r3, [r7, #15]

	while (datosCom->Rx.read != indexWriteRxCopy){
 8001814:	e11b      	b.n	8001a4e <decodeProtocol+0x24a>
		switch(datosCom->protocolState){
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	f893 322e 	ldrb.w	r3, [r3, #558]	@ 0x22e
 800181c:	2b06      	cmp	r3, #6
 800181e:	f200 810e 	bhi.w	8001a3e <decodeProtocol+0x23a>
 8001822:	a201      	add	r2, pc, #4	@ (adr r2, 8001828 <decodeProtocol+0x24>)
 8001824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001828:	08001845 	.word	0x08001845
 800182c:	08001877 	.word	0x08001877
 8001830:	080018b9 	.word	0x080018b9
 8001834:	080018fb 	.word	0x080018fb
 8001838:	0800193d 	.word	0x0800193d
 800183c:	0800196f 	.word	0x0800196f
 8001840:	080019c1 	.word	0x080019c1
		case START:
			if (datosCom->Rx.buffer[datosCom->Rx.read++] == 'U'){
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800184a:	1c5a      	adds	r2, r3, #1
 800184c:	b2d1      	uxtb	r1, r2
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	f882 1104 	strb.w	r1, [r2, #260]	@ 0x104
 8001854:	461a      	mov	r2, r3
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4413      	add	r3, r2
 800185a:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 800185e:	2b55      	cmp	r3, #85	@ 0x55
 8001860:	f040 80f2 	bne.w	8001a48 <decodeProtocol+0x244>
				datosCom->protocolState = HEADER_1;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2201      	movs	r2, #1
 8001868:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
				datosCom->checksumRx = 0;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2200      	movs	r2, #0
 8001870:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
			}
			break;
 8001874:	e0e8      	b.n	8001a48 <decodeProtocol+0x244>
		case HEADER_1:
			if (datosCom->Rx.buffer[datosCom->Rx.read++] == 'N')
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800187c:	1c5a      	adds	r2, r3, #1
 800187e:	b2d1      	uxtb	r1, r2
 8001880:	687a      	ldr	r2, [r7, #4]
 8001882:	f882 1104 	strb.w	r1, [r2, #260]	@ 0x104
 8001886:	461a      	mov	r2, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	4413      	add	r3, r2
 800188c:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8001890:	2b4e      	cmp	r3, #78	@ 0x4e
 8001892:	d104      	bne.n	800189e <decodeProtocol+0x9a>
				datosCom->protocolState = HEADER_2;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2202      	movs	r2, #2
 8001898:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			else{
				datosCom->Rx.read--;
				datosCom->protocolState = START;
			}
			break;
 800189c:	e0d7      	b.n	8001a4e <decodeProtocol+0x24a>
				datosCom->Rx.read--;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 80018a4:	3b01      	subs	r3, #1
 80018a6:	b2da      	uxtb	r2, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
				datosCom->protocolState = START;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2200      	movs	r2, #0
 80018b2:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			break;
 80018b6:	e0ca      	b.n	8001a4e <decodeProtocol+0x24a>
		case HEADER_2:
			if (datosCom->Rx.buffer[datosCom->Rx.read++] == 'E')
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 80018be:	1c5a      	adds	r2, r3, #1
 80018c0:	b2d1      	uxtb	r1, r2
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	f882 1104 	strb.w	r1, [r2, #260]	@ 0x104
 80018c8:	461a      	mov	r2, r3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4413      	add	r3, r2
 80018ce:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 80018d2:	2b45      	cmp	r3, #69	@ 0x45
 80018d4:	d104      	bne.n	80018e0 <decodeProtocol+0xdc>
				datosCom->protocolState = HEADER_3;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2203      	movs	r2, #3
 80018da:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			else{
				datosCom->Rx.read--;
				datosCom->protocolState = START;
			}
			break;
 80018de:	e0b6      	b.n	8001a4e <decodeProtocol+0x24a>
				datosCom->Rx.read--;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 80018e6:	3b01      	subs	r3, #1
 80018e8:	b2da      	uxtb	r2, r3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
				datosCom->protocolState = START;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2200      	movs	r2, #0
 80018f4:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			break;
 80018f8:	e0a9      	b.n	8001a4e <decodeProtocol+0x24a>
		case HEADER_3:
			if (datosCom->Rx.buffer[datosCom->Rx.read++] == 'R')
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8001900:	1c5a      	adds	r2, r3, #1
 8001902:	b2d1      	uxtb	r1, r2
 8001904:	687a      	ldr	r2, [r7, #4]
 8001906:	f882 1104 	strb.w	r1, [r2, #260]	@ 0x104
 800190a:	461a      	mov	r2, r3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	4413      	add	r3, r2
 8001910:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8001914:	2b52      	cmp	r3, #82	@ 0x52
 8001916:	d104      	bne.n	8001922 <decodeProtocol+0x11e>
				datosCom->protocolState = NBYTES;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2204      	movs	r2, #4
 800191c:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			else{
				datosCom->Rx.read--;
				datosCom->protocolState = START;
			}
			break;
 8001920:	e095      	b.n	8001a4e <decodeProtocol+0x24a>
				datosCom->Rx.read--;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8001928:	3b01      	subs	r3, #1
 800192a:	b2da      	uxtb	r2, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
				datosCom->protocolState = START;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2200      	movs	r2, #0
 8001936:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			break;
 800193a:	e088      	b.n	8001a4e <decodeProtocol+0x24a>
		case NBYTES:
			datosCom->indexStart = datosCom->Rx.read;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f893 2104 	ldrb.w	r2, [r3, #260]	@ 0x104
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	705a      	strb	r2, [r3, #1]
			nBytes = datosCom->Rx.buffer[datosCom->Rx.read++];
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800194c:	1c5a      	adds	r2, r3, #1
 800194e:	b2d1      	uxtb	r1, r2
 8001950:	687a      	ldr	r2, [r7, #4]
 8001952:	f882 1104 	strb.w	r1, [r2, #260]	@ 0x104
 8001956:	461a      	mov	r2, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	4413      	add	r3, r2
 800195c:	f893 2106 	ldrb.w	r2, [r3, #262]	@ 0x106
 8001960:	4b41      	ldr	r3, [pc, #260]	@ (8001a68 <decodeProtocol+0x264>)
 8001962:	701a      	strb	r2, [r3, #0]
			datosCom->protocolState = TOKEN;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2205      	movs	r2, #5
 8001968:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			break;
 800196c:	e06f      	b.n	8001a4e <decodeProtocol+0x24a>
		case TOKEN:
			if (datosCom->Rx.buffer[datosCom->Rx.read++] == ':'){
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8001974:	1c5a      	adds	r2, r3, #1
 8001976:	b2d1      	uxtb	r1, r2
 8001978:	687a      	ldr	r2, [r7, #4]
 800197a:	f882 1104 	strb.w	r1, [r2, #260]	@ 0x104
 800197e:	461a      	mov	r2, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	4413      	add	r3, r2
 8001984:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8001988:	2b3a      	cmp	r3, #58	@ 0x3a
 800198a:	d10c      	bne.n	80019a6 <decodeProtocol+0x1a2>
				datosCom->protocolState = PAYLOAD;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2206      	movs	r2, #6
 8001990:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
				datosCom->checksumRx ='U' ^ 'N' ^ 'E' ^ 'R' ^ nBytes ^ ':';
 8001994:	4b34      	ldr	r3, [pc, #208]	@ (8001a68 <decodeProtocol+0x264>)
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	f083 0336 	eor.w	r3, r3, #54	@ 0x36
 800199c:	b2da      	uxtb	r2, r3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
			}
			else{
				datosCom->Rx.read--;
				datosCom->protocolState = START;
			}
			break;
 80019a4:	e053      	b.n	8001a4e <decodeProtocol+0x24a>
				datosCom->Rx.read--;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 80019ac:	3b01      	subs	r3, #1
 80019ae:	b2da      	uxtb	r2, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
				datosCom->protocolState = START;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2200      	movs	r2, #0
 80019ba:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			break;
 80019be:	e046      	b.n	8001a4e <decodeProtocol+0x24a>
		case PAYLOAD:
			if (nBytes > 1){
 80019c0:	4b29      	ldr	r3, [pc, #164]	@ (8001a68 <decodeProtocol+0x264>)
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d914      	bls.n	80019f2 <decodeProtocol+0x1ee>
				datosCom->checksumRx ^= datosCom->Rx.buffer[datosCom->Rx.read++];
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 80019ce:	1c5a      	adds	r2, r3, #1
 80019d0:	b2d1      	uxtb	r1, r2
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	f882 1104 	strb.w	r1, [r2, #260]	@ 0x104
 80019d8:	461a      	mov	r2, r3
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4413      	add	r3, r2
 80019de:	f893 2106 	ldrb.w	r2, [r3, #262]	@ 0x106
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 80019e8:	4053      	eors	r3, r2
 80019ea:	b2da      	uxtb	r2, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
			}
			nBytes--;
 80019f2:	4b1d      	ldr	r3, [pc, #116]	@ (8001a68 <decodeProtocol+0x264>)
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	3b01      	subs	r3, #1
 80019f8:	b2da      	uxtb	r2, r3
 80019fa:	4b1b      	ldr	r3, [pc, #108]	@ (8001a68 <decodeProtocol+0x264>)
 80019fc:	701a      	strb	r2, [r3, #0]
			if(nBytes<=0){
 80019fe:	4b1a      	ldr	r3, [pc, #104]	@ (8001a68 <decodeProtocol+0x264>)
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d122      	bne.n	8001a4c <decodeProtocol+0x248>
				datosCom->protocolState = START;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
				if(datosCom->checksumRx == datosCom->Rx.buffer[datosCom->Rx.read]){
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	f893 2206 	ldrb.w	r2, [r3, #518]	@ 0x206
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	440b      	add	r3, r1
 8001a20:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d111      	bne.n	8001a4c <decodeProtocol+0x248>
					if(datosCom->dataDecoder != NULL)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d00c      	beq.n	8001a4c <decodeProtocol+0x248>
						datosCom->dataDecoder(datosCom);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	4798      	blx	r3
				}
			}
			break;
 8001a3c:	e006      	b.n	8001a4c <decodeProtocol+0x248>
		default:
			datosCom->protocolState = START;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2200      	movs	r2, #0
 8001a42:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			break;
 8001a46:	e002      	b.n	8001a4e <decodeProtocol+0x24a>
			break;
 8001a48:	bf00      	nop
 8001a4a:	e000      	b.n	8001a4e <decodeProtocol+0x24a>
			break;
 8001a4c:	bf00      	nop
	while (datosCom->Rx.read != indexWriteRxCopy){
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8001a54:	7bfa      	ldrb	r2, [r7, #15]
 8001a56:	429a      	cmp	r2, r3
 8001a58:	f47f aedd 	bne.w	8001816 <decodeProtocol+0x12>
		}
	}
}
 8001a5c:	bf00      	nop
 8001a5e:	bf00      	nop
 8001a60:	3710      	adds	r7, #16
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	20000825 	.word	0x20000825

08001a6c <comm_sendCMD>:

void comm_sendCMD(s_commData *datosCom, _eID cmd, uint8_t *str, uint8_t len){
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	60f8      	str	r0, [r7, #12]
 8001a74:	607a      	str	r2, [r7, #4]
 8001a76:	461a      	mov	r2, r3
 8001a78:	460b      	mov	r3, r1
 8001a7a:	72fb      	strb	r3, [r7, #11]
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	72bb      	strb	r3, [r7, #10]
    i = 0;
 8001a80:	4b62      	ldr	r3, [pc, #392]	@ (8001c0c <comm_sendCMD+0x1a0>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	701a      	strb	r2, [r3, #0]
    auxIndex = 0;
 8001a86:	4b62      	ldr	r3, [pc, #392]	@ (8001c10 <comm_sendCMD+0x1a4>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	701a      	strb	r2, [r3, #0]

    // Cabecera
    TxAuxBuffer[auxIndex++] = 'U'; // Start
 8001a8c:	4b60      	ldr	r3, [pc, #384]	@ (8001c10 <comm_sendCMD+0x1a4>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	1c5a      	adds	r2, r3, #1
 8001a92:	b2d1      	uxtb	r1, r2
 8001a94:	4a5e      	ldr	r2, [pc, #376]	@ (8001c10 <comm_sendCMD+0x1a4>)
 8001a96:	7011      	strb	r1, [r2, #0]
 8001a98:	461a      	mov	r2, r3
 8001a9a:	4b5e      	ldr	r3, [pc, #376]	@ (8001c14 <comm_sendCMD+0x1a8>)
 8001a9c:	2155      	movs	r1, #85	@ 0x55
 8001a9e:	5499      	strb	r1, [r3, r2]
    TxAuxBuffer[auxIndex++] = 'N'; // Header 1
 8001aa0:	4b5b      	ldr	r3, [pc, #364]	@ (8001c10 <comm_sendCMD+0x1a4>)
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	1c5a      	adds	r2, r3, #1
 8001aa6:	b2d1      	uxtb	r1, r2
 8001aa8:	4a59      	ldr	r2, [pc, #356]	@ (8001c10 <comm_sendCMD+0x1a4>)
 8001aaa:	7011      	strb	r1, [r2, #0]
 8001aac:	461a      	mov	r2, r3
 8001aae:	4b59      	ldr	r3, [pc, #356]	@ (8001c14 <comm_sendCMD+0x1a8>)
 8001ab0:	214e      	movs	r1, #78	@ 0x4e
 8001ab2:	5499      	strb	r1, [r3, r2]
    TxAuxBuffer[auxIndex++] = 'E'; // Header 2
 8001ab4:	4b56      	ldr	r3, [pc, #344]	@ (8001c10 <comm_sendCMD+0x1a4>)
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	1c5a      	adds	r2, r3, #1
 8001aba:	b2d1      	uxtb	r1, r2
 8001abc:	4a54      	ldr	r2, [pc, #336]	@ (8001c10 <comm_sendCMD+0x1a4>)
 8001abe:	7011      	strb	r1, [r2, #0]
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	4b54      	ldr	r3, [pc, #336]	@ (8001c14 <comm_sendCMD+0x1a8>)
 8001ac4:	2145      	movs	r1, #69	@ 0x45
 8001ac6:	5499      	strb	r1, [r3, r2]
    TxAuxBuffer[auxIndex++] = 'R'; // Header 3
 8001ac8:	4b51      	ldr	r3, [pc, #324]	@ (8001c10 <comm_sendCMD+0x1a4>)
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	1c5a      	adds	r2, r3, #1
 8001ace:	b2d1      	uxtb	r1, r2
 8001ad0:	4a4f      	ldr	r2, [pc, #316]	@ (8001c10 <comm_sendCMD+0x1a4>)
 8001ad2:	7011      	strb	r1, [r2, #0]
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	4b4f      	ldr	r3, [pc, #316]	@ (8001c14 <comm_sendCMD+0x1a8>)
 8001ad8:	2152      	movs	r1, #82	@ 0x52
 8001ada:	5499      	strb	r1, [r3, r2]

    indexStart = auxIndex; // Se guarda la posición del primer dato del mensaje (cmd)
 8001adc:	4b4c      	ldr	r3, [pc, #304]	@ (8001c10 <comm_sendCMD+0x1a4>)
 8001ade:	781a      	ldrb	r2, [r3, #0]
 8001ae0:	4b4d      	ldr	r3, [pc, #308]	@ (8001c18 <comm_sendCMD+0x1ac>)
 8001ae2:	701a      	strb	r2, [r3, #0]
    TxAuxBuffer[auxIndex++] = 0;   // Placeholder del indexStart, se sobrescribirá después
 8001ae4:	4b4a      	ldr	r3, [pc, #296]	@ (8001c10 <comm_sendCMD+0x1a4>)
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	1c5a      	adds	r2, r3, #1
 8001aea:	b2d1      	uxtb	r1, r2
 8001aec:	4a48      	ldr	r2, [pc, #288]	@ (8001c10 <comm_sendCMD+0x1a4>)
 8001aee:	7011      	strb	r1, [r2, #0]
 8001af0:	461a      	mov	r2, r3
 8001af2:	4b48      	ldr	r3, [pc, #288]	@ (8001c14 <comm_sendCMD+0x1a8>)
 8001af4:	2100      	movs	r1, #0
 8001af6:	5499      	strb	r1, [r3, r2]

    TxAuxBuffer[auxIndex++] = ':'; // Token
 8001af8:	4b45      	ldr	r3, [pc, #276]	@ (8001c10 <comm_sendCMD+0x1a4>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	1c5a      	adds	r2, r3, #1
 8001afe:	b2d1      	uxtb	r1, r2
 8001b00:	4a43      	ldr	r2, [pc, #268]	@ (8001c10 <comm_sendCMD+0x1a4>)
 8001b02:	7011      	strb	r1, [r2, #0]
 8001b04:	461a      	mov	r2, r3
 8001b06:	4b43      	ldr	r3, [pc, #268]	@ (8001c14 <comm_sendCMD+0x1a8>)
 8001b08:	213a      	movs	r1, #58	@ 0x3a
 8001b0a:	5499      	strb	r1, [r3, r2]
    TxAuxBuffer[auxIndex++] = cmd; // Comando
 8001b0c:	4b40      	ldr	r3, [pc, #256]	@ (8001c10 <comm_sendCMD+0x1a4>)
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	1c5a      	adds	r2, r3, #1
 8001b12:	b2d1      	uxtb	r1, r2
 8001b14:	4a3e      	ldr	r2, [pc, #248]	@ (8001c10 <comm_sendCMD+0x1a4>)
 8001b16:	7011      	strb	r1, [r2, #0]
 8001b18:	4619      	mov	r1, r3
 8001b1a:	4a3e      	ldr	r2, [pc, #248]	@ (8001c14 <comm_sendCMD+0x1a8>)
 8001b1c:	7afb      	ldrb	r3, [r7, #11]
 8001b1e:	5453      	strb	r3, [r2, r1]

    if(cmd == USERTEXT || cmd == SYSERROR)
 8001b20:	7afb      	ldrb	r3, [r7, #11]
 8001b22:	2bb1      	cmp	r3, #177	@ 0xb1
 8001b24:	d002      	beq.n	8001b2c <comm_sendCMD+0xc0>
 8001b26:	7afb      	ldrb	r3, [r7, #11]
 8001b28:	2bee      	cmp	r3, #238	@ 0xee
 8001b2a:	d109      	bne.n	8001b40 <comm_sendCMD+0xd4>
    	TxAuxBuffer[auxIndex++] = len;
 8001b2c:	4b38      	ldr	r3, [pc, #224]	@ (8001c10 <comm_sendCMD+0x1a4>)
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	1c5a      	adds	r2, r3, #1
 8001b32:	b2d1      	uxtb	r1, r2
 8001b34:	4a36      	ldr	r2, [pc, #216]	@ (8001c10 <comm_sendCMD+0x1a4>)
 8001b36:	7011      	strb	r1, [r2, #0]
 8001b38:	4619      	mov	r1, r3
 8001b3a:	4a36      	ldr	r2, [pc, #216]	@ (8001c14 <comm_sendCMD+0x1a8>)
 8001b3c:	7abb      	ldrb	r3, [r7, #10]
 8001b3e:	5453      	strb	r3, [r2, r1]

    // Copia de datos si hay
    if (str != NULL && len > 0) {
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d013      	beq.n	8001b6e <comm_sendCMD+0x102>
 8001b46:	7abb      	ldrb	r3, [r7, #10]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d010      	beq.n	8001b6e <comm_sendCMD+0x102>
        memcpy(&TxAuxBuffer[auxIndex], str, len);
 8001b4c:	4b30      	ldr	r3, [pc, #192]	@ (8001c10 <comm_sendCMD+0x1a4>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	461a      	mov	r2, r3
 8001b52:	4b30      	ldr	r3, [pc, #192]	@ (8001c14 <comm_sendCMD+0x1a8>)
 8001b54:	4413      	add	r3, r2
 8001b56:	7aba      	ldrb	r2, [r7, #10]
 8001b58:	6879      	ldr	r1, [r7, #4]
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f00d fdb0 	bl	800f6c0 <memcpy>
        auxIndex += len;
 8001b60:	4b2b      	ldr	r3, [pc, #172]	@ (8001c10 <comm_sendCMD+0x1a4>)
 8001b62:	781a      	ldrb	r2, [r3, #0]
 8001b64:	7abb      	ldrb	r3, [r7, #10]
 8001b66:	4413      	add	r3, r2
 8001b68:	b2da      	uxtb	r2, r3
 8001b6a:	4b29      	ldr	r3, [pc, #164]	@ (8001c10 <comm_sendCMD+0x1a4>)
 8001b6c:	701a      	strb	r2, [r3, #0]
    }

    indexStartValue = auxIndex - indexStart - 1; // Cantidad de datos desde cmd hasta checksum
 8001b6e:	4b28      	ldr	r3, [pc, #160]	@ (8001c10 <comm_sendCMD+0x1a4>)
 8001b70:	781a      	ldrb	r2, [r3, #0]
 8001b72:	4b29      	ldr	r3, [pc, #164]	@ (8001c18 <comm_sendCMD+0x1ac>)
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	3b01      	subs	r3, #1
 8001b7c:	b2da      	uxtb	r2, r3
 8001b7e:	4b27      	ldr	r3, [pc, #156]	@ (8001c1c <comm_sendCMD+0x1b0>)
 8001b80:	701a      	strb	r2, [r3, #0]
    TxAuxBuffer[indexStart] = indexStartValue;
 8001b82:	4b25      	ldr	r3, [pc, #148]	@ (8001c18 <comm_sendCMD+0x1ac>)
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	461a      	mov	r2, r3
 8001b88:	4b24      	ldr	r3, [pc, #144]	@ (8001c1c <comm_sendCMD+0x1b0>)
 8001b8a:	7819      	ldrb	r1, [r3, #0]
 8001b8c:	4b21      	ldr	r3, [pc, #132]	@ (8001c14 <comm_sendCMD+0x1a8>)
 8001b8e:	5499      	strb	r1, [r3, r2]

    // Checksum
    checksum = 0;
 8001b90:	4b23      	ldr	r3, [pc, #140]	@ (8001c20 <comm_sendCMD+0x1b4>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < auxIndex; i++) {
 8001b96:	4b1d      	ldr	r3, [pc, #116]	@ (8001c0c <comm_sendCMD+0x1a0>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	701a      	strb	r2, [r3, #0]
 8001b9c:	e01f      	b.n	8001bde <comm_sendCMD+0x172>
        checksum ^= TxAuxBuffer[i];
 8001b9e:	4b1b      	ldr	r3, [pc, #108]	@ (8001c0c <comm_sendCMD+0x1a0>)
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	4b1b      	ldr	r3, [pc, #108]	@ (8001c14 <comm_sendCMD+0x1a8>)
 8001ba6:	5c9a      	ldrb	r2, [r3, r2]
 8001ba8:	4b1d      	ldr	r3, [pc, #116]	@ (8001c20 <comm_sendCMD+0x1b4>)
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	4053      	eors	r3, r2
 8001bae:	b2da      	uxtb	r2, r3
 8001bb0:	4b1b      	ldr	r3, [pc, #108]	@ (8001c20 <comm_sendCMD+0x1b4>)
 8001bb2:	701a      	strb	r2, [r3, #0]
        datosCom->Tx.buffer[datosCom->Tx.write++] = TxAuxBuffer[i];
 8001bb4:	4b15      	ldr	r3, [pc, #84]	@ (8001c0c <comm_sendCMD+0x1a0>)
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	78db      	ldrb	r3, [r3, #3]
 8001bbe:	1c5a      	adds	r2, r3, #1
 8001bc0:	b2d1      	uxtb	r1, r2
 8001bc2:	68fa      	ldr	r2, [r7, #12]
 8001bc4:	70d1      	strb	r1, [r2, #3]
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	4b12      	ldr	r3, [pc, #72]	@ (8001c14 <comm_sendCMD+0x1a8>)
 8001bca:	5c1a      	ldrb	r2, [r3, r0]
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	440b      	add	r3, r1
 8001bd0:	711a      	strb	r2, [r3, #4]
    for (i = 0; i < auxIndex; i++) {
 8001bd2:	4b0e      	ldr	r3, [pc, #56]	@ (8001c0c <comm_sendCMD+0x1a0>)
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	b2da      	uxtb	r2, r3
 8001bda:	4b0c      	ldr	r3, [pc, #48]	@ (8001c0c <comm_sendCMD+0x1a0>)
 8001bdc:	701a      	strb	r2, [r3, #0]
 8001bde:	4b0b      	ldr	r3, [pc, #44]	@ (8001c0c <comm_sendCMD+0x1a0>)
 8001be0:	781a      	ldrb	r2, [r3, #0]
 8001be2:	4b0b      	ldr	r3, [pc, #44]	@ (8001c10 <comm_sendCMD+0x1a4>)
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d3d9      	bcc.n	8001b9e <comm_sendCMD+0x132>
    }

    datosCom->Tx.buffer[datosCom->Tx.write++] = checksum;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	78db      	ldrb	r3, [r3, #3]
 8001bee:	1c5a      	adds	r2, r3, #1
 8001bf0:	b2d1      	uxtb	r1, r2
 8001bf2:	68fa      	ldr	r2, [r7, #12]
 8001bf4:	70d1      	strb	r1, [r2, #3]
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	4b09      	ldr	r3, [pc, #36]	@ (8001c20 <comm_sendCMD+0x1b4>)
 8001bfa:	781a      	ldrb	r2, [r3, #0]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	440b      	add	r3, r1
 8001c00:	711a      	strb	r2, [r3, #4]
}
 8001c02:	bf00      	nop
 8001c04:	3710      	adds	r7, #16
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	20000802 	.word	0x20000802
 8001c10:	20000803 	.word	0x20000803
 8001c14:	20000804 	.word	0x20000804
 8001c18:	20000822 	.word	0x20000822
 8001c1c:	20000823 	.word	0x20000823
 8001c20:	20000824 	.word	0x20000824

08001c24 <OLED_Task>:
/************************************ FIN FUNCIONES PARA ABSTRACCIÓN DE HARDWARE ************************************/
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void OLED_Task(){
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af02      	add	r7, sp, #8
	if(Display.isInit){
 8001c2a:	4b9e      	ldr	r3, [pc, #632]	@ (8001ea4 <OLED_Task+0x280>)
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	f000 8130 	beq.w	8001e94 <OLED_Task+0x270>
		switch(Display.state){
 8001c34:	4b9b      	ldr	r3, [pc, #620]	@ (8001ea4 <OLED_Task+0x280>)
 8001c36:	f893 3401 	ldrb.w	r3, [r3, #1025]	@ 0x401
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d023      	beq.n	8001c86 <OLED_Task+0x62>
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	f300 8128 	bgt.w	8001e94 <OLED_Task+0x270>
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <OLED_Task+0x28>
 8001c48:	2b01      	cmp	r3, #1
				Display.state = INPUTS;
			}
			break;
		case MENU:

			break;
 8001c4a:	e123      	b.n	8001e94 <OLED_Task+0x270>
			if(HAL_GetTick() - Display.timer > 2000){
 8001c4c:	f001 fe0c 	bl	8003868 <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	4b94      	ldr	r3, [pc, #592]	@ (8001ea4 <OLED_Task+0x280>)
 8001c54:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001c5e:	f240 8116 	bls.w	8001e8e <OLED_Task+0x26a>
				Display_Fill(SSD1306_COLOR_BLACK);
 8001c62:	2000      	movs	r0, #0
 8001c64:	f7ff fa26 	bl	80010b4 <Display_Fill>
				Display_DrawBitmap(0, 0, status_screen, 128, 64, SSD1306_COLOR_WHITE);
 8001c68:	2301      	movs	r3, #1
 8001c6a:	9301      	str	r3, [sp, #4]
 8001c6c:	2340      	movs	r3, #64	@ 0x40
 8001c6e:	9300      	str	r3, [sp, #0]
 8001c70:	2380      	movs	r3, #128	@ 0x80
 8001c72:	4a8d      	ldr	r2, [pc, #564]	@ (8001ea8 <OLED_Task+0x284>)
 8001c74:	2100      	movs	r1, #0
 8001c76:	2000      	movs	r0, #0
 8001c78:	f7ff faa0 	bl	80011bc <Display_DrawBitmap>
				Display.state = INPUTS;
 8001c7c:	4b89      	ldr	r3, [pc, #548]	@ (8001ea4 <OLED_Task+0x280>)
 8001c7e:	2202      	movs	r2, #2
 8001c80:	f883 2401 	strb.w	r2, [r3, #1025]	@ 0x401
			break;
 8001c84:	e103      	b.n	8001e8e <OLED_Task+0x26a>
		case INPUTS:
			Display_DrawBitmap(2, 17, ADC_Blackout, 37, 44, SSD1306_COLOR_BLACK);
 8001c86:	2300      	movs	r3, #0
 8001c88:	9301      	str	r3, [sp, #4]
 8001c8a:	232c      	movs	r3, #44	@ 0x2c
 8001c8c:	9300      	str	r3, [sp, #0]
 8001c8e:	2325      	movs	r3, #37	@ 0x25
 8001c90:	4a86      	ldr	r2, [pc, #536]	@ (8001eac <OLED_Task+0x288>)
 8001c92:	2111      	movs	r1, #17
 8001c94:	2002      	movs	r0, #2
 8001c96:	f7ff fa91 	bl	80011bc <Display_DrawBitmap>
			for(uint8_t i = 0; i < 8; i++){
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	71fb      	strb	r3, [r7, #7]
 8001c9e:	e044      	b.n	8001d2a <OLED_Task+0x106>
				for(uint8_t j = 0; j < 45; j++){
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	71bb      	strb	r3, [r7, #6]
 8001ca4:	e03b      	b.n	8001d1e <OLED_Task+0xfa>
					if(Analog.value[i] <= ADC_to_Index[j]){
 8001ca6:	79fb      	ldrb	r3, [r7, #7]
 8001ca8:	4a81      	ldr	r2, [pc, #516]	@ (8001eb0 <OLED_Task+0x28c>)
 8001caa:	3308      	adds	r3, #8
 8001cac:	005b      	lsls	r3, r3, #1
 8001cae:	4413      	add	r3, r2
 8001cb0:	885a      	ldrh	r2, [r3, #2]
 8001cb2:	79bb      	ldrb	r3, [r7, #6]
 8001cb4:	497f      	ldr	r1, [pc, #508]	@ (8001eb4 <OLED_Task+0x290>)
 8001cb6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d82c      	bhi.n	8001d18 <OLED_Task+0xf4>
						pepe = 2 + i * 3;
 8001cbe:	79fa      	ldrb	r2, [r7, #7]
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	005b      	lsls	r3, r3, #1
 8001cc4:	4413      	add	r3, r2
 8001cc6:	3302      	adds	r3, #2
 8001cc8:	461a      	mov	r2, r3
 8001cca:	4b7b      	ldr	r3, [pc, #492]	@ (8001eb8 <OLED_Task+0x294>)
 8001ccc:	601a      	str	r2, [r3, #0]
						Display_DrawLine(pepe, 61,  pepe, Index_to_Bar[j], SSD1306_COLOR_WHITE);
 8001cce:	4b7a      	ldr	r3, [pc, #488]	@ (8001eb8 <OLED_Task+0x294>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	b298      	uxth	r0, r3
 8001cd4:	4b78      	ldr	r3, [pc, #480]	@ (8001eb8 <OLED_Task+0x294>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	b29a      	uxth	r2, r3
 8001cda:	79bb      	ldrb	r3, [r7, #6]
 8001cdc:	4977      	ldr	r1, [pc, #476]	@ (8001ebc <OLED_Task+0x298>)
 8001cde:	5ccb      	ldrb	r3, [r1, r3]
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	9300      	str	r3, [sp, #0]
 8001ce6:	460b      	mov	r3, r1
 8001ce8:	213d      	movs	r1, #61	@ 0x3d
 8001cea:	f7ff fb71 	bl	80013d0 <Display_DrawLine>
						Display_DrawLine(pepe+1, 61,  pepe+1, Index_to_Bar[j], SSD1306_COLOR_WHITE);
 8001cee:	4b72      	ldr	r3, [pc, #456]	@ (8001eb8 <OLED_Task+0x294>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	b298      	uxth	r0, r3
 8001cf8:	4b6f      	ldr	r3, [pc, #444]	@ (8001eb8 <OLED_Task+0x294>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	3301      	adds	r3, #1
 8001d00:	b29a      	uxth	r2, r3
 8001d02:	79bb      	ldrb	r3, [r7, #6]
 8001d04:	496d      	ldr	r1, [pc, #436]	@ (8001ebc <OLED_Task+0x298>)
 8001d06:	5ccb      	ldrb	r3, [r1, r3]
 8001d08:	4619      	mov	r1, r3
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	9300      	str	r3, [sp, #0]
 8001d0e:	460b      	mov	r3, r1
 8001d10:	213d      	movs	r1, #61	@ 0x3d
 8001d12:	f7ff fb5d 	bl	80013d0 <Display_DrawLine>
						break;
 8001d16:	e005      	b.n	8001d24 <OLED_Task+0x100>
				for(uint8_t j = 0; j < 45; j++){
 8001d18:	79bb      	ldrb	r3, [r7, #6]
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	71bb      	strb	r3, [r7, #6]
 8001d1e:	79bb      	ldrb	r3, [r7, #6]
 8001d20:	2b2c      	cmp	r3, #44	@ 0x2c
 8001d22:	d9c0      	bls.n	8001ca6 <OLED_Task+0x82>
			for(uint8_t i = 0; i < 8; i++){
 8001d24:	79fb      	ldrb	r3, [r7, #7]
 8001d26:	3301      	adds	r3, #1
 8001d28:	71fb      	strb	r3, [r7, #7]
 8001d2a:	79fb      	ldrb	r3, [r7, #7]
 8001d2c:	2b07      	cmp	r3, #7
 8001d2e:	d9b7      	bls.n	8001ca0 <OLED_Task+0x7c>
					}
				}
			}

			if(MPU6050.isInit){
 8001d30:	4b63      	ldr	r3, [pc, #396]	@ (8001ec0 <OLED_Task+0x29c>)
 8001d32:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	f000 80ab 	beq.w	8001e92 <OLED_Task+0x26e>
				MPU6050.Acc.x = (MPU6050.Acc.x >> 14) * 9.8f;
 8001d3c:	4b60      	ldr	r3, [pc, #384]	@ (8001ec0 <OLED_Task+0x29c>)
 8001d3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d42:	139b      	asrs	r3, r3, #14
 8001d44:	b21b      	sxth	r3, r3
 8001d46:	ee07 3a90 	vmov	s15, r3
 8001d4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d4e:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 8001ec4 <OLED_Task+0x2a0>
 8001d52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d56:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d5a:	ee17 3a90 	vmov	r3, s15
 8001d5e:	b21a      	sxth	r2, r3
 8001d60:	4b57      	ldr	r3, [pc, #348]	@ (8001ec0 <OLED_Task+0x29c>)
 8001d62:	801a      	strh	r2, [r3, #0]
				MPU6050.Acc.y = (MPU6050.Acc.y >> 14) * 9.8f;
 8001d64:	4b56      	ldr	r3, [pc, #344]	@ (8001ec0 <OLED_Task+0x29c>)
 8001d66:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001d6a:	139b      	asrs	r3, r3, #14
 8001d6c:	b21b      	sxth	r3, r3
 8001d6e:	ee07 3a90 	vmov	s15, r3
 8001d72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d76:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 8001ec4 <OLED_Task+0x2a0>
 8001d7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d82:	ee17 3a90 	vmov	r3, s15
 8001d86:	b21a      	sxth	r2, r3
 8001d88:	4b4d      	ldr	r3, [pc, #308]	@ (8001ec0 <OLED_Task+0x29c>)
 8001d8a:	805a      	strh	r2, [r3, #2]
				MPU6050.Acc.z = (MPU6050.Acc.z >> 14) * 9.8f;
 8001d8c:	4b4c      	ldr	r3, [pc, #304]	@ (8001ec0 <OLED_Task+0x29c>)
 8001d8e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001d92:	139b      	asrs	r3, r3, #14
 8001d94:	b21b      	sxth	r3, r3
 8001d96:	ee07 3a90 	vmov	s15, r3
 8001d9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d9e:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8001ec4 <OLED_Task+0x2a0>
 8001da2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001da6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001daa:	ee17 3a90 	vmov	r3, s15
 8001dae:	b21a      	sxth	r2, r3
 8001db0:	4b43      	ldr	r3, [pc, #268]	@ (8001ec0 <OLED_Task+0x29c>)
 8001db2:	809a      	strh	r2, [r3, #4]
				sprintf(Display.auxString, "Ax:%d", MPU6050.Acc.x);
 8001db4:	4b42      	ldr	r3, [pc, #264]	@ (8001ec0 <OLED_Task+0x29c>)
 8001db6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dba:	461a      	mov	r2, r3
 8001dbc:	4942      	ldr	r1, [pc, #264]	@ (8001ec8 <OLED_Task+0x2a4>)
 8001dbe:	4843      	ldr	r0, [pc, #268]	@ (8001ecc <OLED_Task+0x2a8>)
 8001dc0:	f00d fc28 	bl	800f614 <siprintf>
				Display_SetCursor(25, 17);
 8001dc4:	2111      	movs	r1, #17
 8001dc6:	2019      	movs	r0, #25
 8001dc8:	f7ff f95c 	bl	8001084 <Display_SetCursor>
				Display_WriteString(Display.auxString, Font_7x10, SSD1306_COLOR_WHITE);
 8001dcc:	4a40      	ldr	r2, [pc, #256]	@ (8001ed0 <OLED_Task+0x2ac>)
 8001dce:	2301      	movs	r3, #1
 8001dd0:	ca06      	ldmia	r2, {r1, r2}
 8001dd2:	483e      	ldr	r0, [pc, #248]	@ (8001ecc <OLED_Task+0x2a8>)
 8001dd4:	f7ff fad6 	bl	8001384 <Display_WriteString>
				sprintf(Display.auxString, "Ay:%d", MPU6050.Acc.y);
 8001dd8:	4b39      	ldr	r3, [pc, #228]	@ (8001ec0 <OLED_Task+0x29c>)
 8001dda:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001dde:	461a      	mov	r2, r3
 8001de0:	493c      	ldr	r1, [pc, #240]	@ (8001ed4 <OLED_Task+0x2b0>)
 8001de2:	483a      	ldr	r0, [pc, #232]	@ (8001ecc <OLED_Task+0x2a8>)
 8001de4:	f00d fc16 	bl	800f614 <siprintf>
				Display_SetCursor(25, 34);
 8001de8:	2122      	movs	r1, #34	@ 0x22
 8001dea:	2019      	movs	r0, #25
 8001dec:	f7ff f94a 	bl	8001084 <Display_SetCursor>
				Display_WriteString(Display.auxString, Font_7x10, SSD1306_COLOR_WHITE);
 8001df0:	4a37      	ldr	r2, [pc, #220]	@ (8001ed0 <OLED_Task+0x2ac>)
 8001df2:	2301      	movs	r3, #1
 8001df4:	ca06      	ldmia	r2, {r1, r2}
 8001df6:	4835      	ldr	r0, [pc, #212]	@ (8001ecc <OLED_Task+0x2a8>)
 8001df8:	f7ff fac4 	bl	8001384 <Display_WriteString>
				sprintf(Display.auxString, "Az:%d", MPU6050.Acc.z);
 8001dfc:	4b30      	ldr	r3, [pc, #192]	@ (8001ec0 <OLED_Task+0x29c>)
 8001dfe:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001e02:	461a      	mov	r2, r3
 8001e04:	4934      	ldr	r1, [pc, #208]	@ (8001ed8 <OLED_Task+0x2b4>)
 8001e06:	4831      	ldr	r0, [pc, #196]	@ (8001ecc <OLED_Task+0x2a8>)
 8001e08:	f00d fc04 	bl	800f614 <siprintf>
				Display_SetCursor(25, 51);
 8001e0c:	2133      	movs	r1, #51	@ 0x33
 8001e0e:	2019      	movs	r0, #25
 8001e10:	f7ff f938 	bl	8001084 <Display_SetCursor>
				Display_WriteString(Display.auxString, Font_7x10, SSD1306_COLOR_WHITE);
 8001e14:	4a2e      	ldr	r2, [pc, #184]	@ (8001ed0 <OLED_Task+0x2ac>)
 8001e16:	2301      	movs	r3, #1
 8001e18:	ca06      	ldmia	r2, {r1, r2}
 8001e1a:	482c      	ldr	r0, [pc, #176]	@ (8001ecc <OLED_Task+0x2a8>)
 8001e1c:	f7ff fab2 	bl	8001384 <Display_WriteString>
				sprintf(Display.auxString, "Gx:%d", MPU6050.Gyro.x);
 8001e20:	4b27      	ldr	r3, [pc, #156]	@ (8001ec0 <OLED_Task+0x29c>)
 8001e22:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001e26:	461a      	mov	r2, r3
 8001e28:	492c      	ldr	r1, [pc, #176]	@ (8001edc <OLED_Task+0x2b8>)
 8001e2a:	4828      	ldr	r0, [pc, #160]	@ (8001ecc <OLED_Task+0x2a8>)
 8001e2c:	f00d fbf2 	bl	800f614 <siprintf>
				Display_SetCursor(73, 17);
 8001e30:	2111      	movs	r1, #17
 8001e32:	2049      	movs	r0, #73	@ 0x49
 8001e34:	f7ff f926 	bl	8001084 <Display_SetCursor>
				Display_WriteString(Display.auxString, Font_7x10, SSD1306_COLOR_WHITE);
 8001e38:	4a25      	ldr	r2, [pc, #148]	@ (8001ed0 <OLED_Task+0x2ac>)
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	ca06      	ldmia	r2, {r1, r2}
 8001e3e:	4823      	ldr	r0, [pc, #140]	@ (8001ecc <OLED_Task+0x2a8>)
 8001e40:	f7ff faa0 	bl	8001384 <Display_WriteString>
				sprintf(Display.auxString, "Gy:%d", MPU6050.Gyro.y);
 8001e44:	4b1e      	ldr	r3, [pc, #120]	@ (8001ec0 <OLED_Task+0x29c>)
 8001e46:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	4924      	ldr	r1, [pc, #144]	@ (8001ee0 <OLED_Task+0x2bc>)
 8001e4e:	481f      	ldr	r0, [pc, #124]	@ (8001ecc <OLED_Task+0x2a8>)
 8001e50:	f00d fbe0 	bl	800f614 <siprintf>
				Display_SetCursor(73, 34);
 8001e54:	2122      	movs	r1, #34	@ 0x22
 8001e56:	2049      	movs	r0, #73	@ 0x49
 8001e58:	f7ff f914 	bl	8001084 <Display_SetCursor>
				Display_WriteString(Display.auxString, Font_7x10, SSD1306_COLOR_WHITE);
 8001e5c:	4a1c      	ldr	r2, [pc, #112]	@ (8001ed0 <OLED_Task+0x2ac>)
 8001e5e:	2301      	movs	r3, #1
 8001e60:	ca06      	ldmia	r2, {r1, r2}
 8001e62:	481a      	ldr	r0, [pc, #104]	@ (8001ecc <OLED_Task+0x2a8>)
 8001e64:	f7ff fa8e 	bl	8001384 <Display_WriteString>
				sprintf(Display.auxString, "Gz:%d", MPU6050.Gyro.z);
 8001e68:	4b15      	ldr	r3, [pc, #84]	@ (8001ec0 <OLED_Task+0x29c>)
 8001e6a:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8001e6e:	461a      	mov	r2, r3
 8001e70:	491c      	ldr	r1, [pc, #112]	@ (8001ee4 <OLED_Task+0x2c0>)
 8001e72:	4816      	ldr	r0, [pc, #88]	@ (8001ecc <OLED_Task+0x2a8>)
 8001e74:	f00d fbce 	bl	800f614 <siprintf>
				Display_SetCursor(73, 51);
 8001e78:	2133      	movs	r1, #51	@ 0x33
 8001e7a:	2049      	movs	r0, #73	@ 0x49
 8001e7c:	f7ff f902 	bl	8001084 <Display_SetCursor>
				Display_WriteString(Display.auxString, Font_7x10, SSD1306_COLOR_WHITE);
 8001e80:	4a13      	ldr	r2, [pc, #76]	@ (8001ed0 <OLED_Task+0x2ac>)
 8001e82:	2301      	movs	r3, #1
 8001e84:	ca06      	ldmia	r2, {r1, r2}
 8001e86:	4811      	ldr	r0, [pc, #68]	@ (8001ecc <OLED_Task+0x2a8>)
 8001e88:	f7ff fa7c 	bl	8001384 <Display_WriteString>
			}
			break;
 8001e8c:	e001      	b.n	8001e92 <OLED_Task+0x26e>
			break;
 8001e8e:	bf00      	nop
 8001e90:	e000      	b.n	8001e94 <OLED_Task+0x270>
			break;
 8001e92:	bf00      	nop
		}
	}

	Display_I2C_Refresh_Ready(TRUE);
 8001e94:	2001      	movs	r0, #1
 8001e96:	f7ff f8e5 	bl	8001064 <Display_I2C_Refresh_Ready>
}
 8001e9a:	bf00      	nop
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	20000b14 	.word	0x20000b14
 8001ea8:	080105e8 	.word	0x080105e8
 8001eac:	0801010c 	.word	0x0801010c
 8001eb0:	20000f28 	.word	0x20000f28
 8001eb4:	080100b0 	.word	0x080100b0
 8001eb8:	20000a74 	.word	0x20000a74
 8001ebc:	08010080 	.word	0x08010080
 8001ec0:	20000acc 	.word	0x20000acc
 8001ec4:	411ccccd 	.word	0x411ccccd
 8001ec8:	0800ff6c 	.word	0x0800ff6c
 8001ecc:	20000f1c 	.word	0x20000f1c
 8001ed0:	20000000 	.word	0x20000000
 8001ed4:	0800ff74 	.word	0x0800ff74
 8001ed8:	0800ff7c 	.word	0x0800ff7c
 8001edc:	0800ff84 	.word	0x0800ff84
 8001ee0:	0800ff8c 	.word	0x0800ff8c
 8001ee4:	0800ff94 	.word	0x0800ff94

08001ee8 <decodeOn_USB>:
	}else if(Analog.value[8] >= 1023){
		Display_DrawFilledRectangle(3, 11, 6, 2, SSD1306_COLOR_WHITE);
	}
}

void decodeOn_USB(s_commData *data){
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b084      	sub	sp, #16
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
	switch(RXBUF[RXCMD]){
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	785b      	ldrb	r3, [r3, #1]
 8001ef4:	3302      	adds	r3, #2
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	4413      	add	r3, r2
 8001efa:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8001efe:	2bf1      	cmp	r3, #241	@ 0xf1
 8001f00:	f000 81c9 	beq.w	8002296 <decodeOn_USB+0x3ae>
 8001f04:	2bf1      	cmp	r3, #241	@ 0xf1
 8001f06:	f300 81bf 	bgt.w	8002288 <decodeOn_USB+0x3a0>
 8001f0a:	2bf0      	cmp	r3, #240	@ 0xf0
 8001f0c:	d036      	beq.n	8001f7c <decodeOn_USB+0x94>
 8001f0e:	2bf0      	cmp	r3, #240	@ 0xf0
 8001f10:	f300 81ba 	bgt.w	8002288 <decodeOn_USB+0x3a0>
 8001f14:	2bb1      	cmp	r3, #177	@ 0xb1
 8001f16:	dc2d      	bgt.n	8001f74 <decodeOn_USB+0x8c>
 8001f18:	2ba0      	cmp	r3, #160	@ 0xa0
 8001f1a:	f2c0 81b5 	blt.w	8002288 <decodeOn_USB+0x3a0>
 8001f1e:	3ba0      	subs	r3, #160	@ 0xa0
 8001f20:	2b11      	cmp	r3, #17
 8001f22:	f200 81b1 	bhi.w	8002288 <decodeOn_USB+0x3a0>
 8001f26:	a201      	add	r2, pc, #4	@ (adr r2, 8001f2c <decodeOn_USB+0x44>)
 8001f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f2c:	08001f97 	.word	0x08001f97
 8001f30:	0800200d 	.word	0x0800200d
 8001f34:	08002067 	.word	0x08002067
 8001f38:	080020f3 	.word	0x080020f3
 8001f3c:	08002191 	.word	0x08002191
 8001f40:	08002289 	.word	0x08002289
 8001f44:	08002289 	.word	0x08002289
 8001f48:	08002289 	.word	0x08002289
 8001f4c:	08002289 	.word	0x08002289
 8001f50:	08002289 	.word	0x08002289
 8001f54:	08002289 	.word	0x08002289
 8001f58:	08002289 	.word	0x08002289
 8001f5c:	08002289 	.word	0x08002289
 8001f60:	08002289 	.word	0x08002289
 8001f64:	08002289 	.word	0x08002289
 8001f68:	08002289 	.word	0x08002289
 8001f6c:	08002289 	.word	0x08002289
 8001f70:	0800229b 	.word	0x0800229b
 8001f74:	2bde      	cmp	r3, #222	@ 0xde
 8001f76:	f000 8192 	beq.w	800229e <decodeOn_USB+0x3b6>
 8001f7a:	e185      	b.n	8002288 <decodeOn_USB+0x3a0>
	case GETALIVE:
		data->auxBuffer[0] = ACK;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	220d      	movs	r2, #13
 8001f80:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
		comm_sendCMD(data, GETALIVE, &data->auxBuffer[0], 1);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	21f0      	movs	r1, #240	@ 0xf0
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f7ff fd6c 	bl	8001a6c <comm_sendCMD>
		break;
 8001f94:	e184      	b.n	80022a0 <decodeOn_USB+0x3b8>
	case FIRMWARE:
		break;
	case USERTEXT:
		break;
	case ADCSINGLE:
		if(RXBUF[RXCMD + 1] <= 8 && RXBUF[RXCMD + 1] >= 0){
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	785b      	ldrb	r3, [r3, #1]
 8001f9a:	3303      	adds	r3, #3
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	4413      	add	r3, r2
 8001fa0:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8001fa4:	2b08      	cmp	r3, #8
 8001fa6:	d82a      	bhi.n	8001ffe <decodeOn_USB+0x116>
			decom.ui16[0] = Analog.value[RXBUF[RXCMD + 1]];
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	785b      	ldrb	r3, [r3, #1]
 8001fac:	3303      	adds	r3, #3
 8001fae:	687a      	ldr	r2, [r7, #4]
 8001fb0:	4413      	add	r3, r2
 8001fb2:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8001fb6:	4aa8      	ldr	r2, [pc, #672]	@ (8002258 <decodeOn_USB+0x370>)
 8001fb8:	3308      	adds	r3, #8
 8001fba:	005b      	lsls	r3, r3, #1
 8001fbc:	4413      	add	r3, r2
 8001fbe:	885a      	ldrh	r2, [r3, #2]
 8001fc0:	4ba6      	ldr	r3, [pc, #664]	@ (800225c <decodeOn_USB+0x374>)
 8001fc2:	801a      	strh	r2, [r3, #0]
			data->auxBuffer[0] = RXBUF[RXCMD + 1];
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	785b      	ldrb	r3, [r3, #1]
 8001fc8:	3303      	adds	r3, #3
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	4413      	add	r3, r2
 8001fce:	f893 2106 	ldrb.w	r2, [r3, #262]	@ 0x106
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
			data->auxBuffer[1] = decom.ui8[0];
 8001fd8:	4ba0      	ldr	r3, [pc, #640]	@ (800225c <decodeOn_USB+0x374>)
 8001fda:	781a      	ldrb	r2, [r3, #0]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f883 2211 	strb.w	r2, [r3, #529]	@ 0x211
			data->auxBuffer[2] = decom.ui8[1];
 8001fe2:	4b9e      	ldr	r3, [pc, #632]	@ (800225c <decodeOn_USB+0x374>)
 8001fe4:	785a      	ldrb	r2, [r3, #1]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	f883 2212 	strb.w	r2, [r3, #530]	@ 0x212
			comm_sendCMD(data, ADCSINGLE, &data->auxBuffer[0], 3);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	21a0      	movs	r1, #160	@ 0xa0
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f7ff fd38 	bl	8001a6c <comm_sendCMD>
		}else{
			comm_sendCMD(data, SYSERROR, (uint8_t*)"NO ADC", 6);
		}
		break;
 8001ffc:	e150      	b.n	80022a0 <decodeOn_USB+0x3b8>
			comm_sendCMD(data, SYSERROR, (uint8_t*)"NO ADC", 6);
 8001ffe:	2306      	movs	r3, #6
 8002000:	4a97      	ldr	r2, [pc, #604]	@ (8002260 <decodeOn_USB+0x378>)
 8002002:	21ee      	movs	r1, #238	@ 0xee
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f7ff fd31 	bl	8001a6c <comm_sendCMD>
		break;
 800200a:	e149      	b.n	80022a0 <decodeOn_USB+0x3b8>
	case ADCBLOCK:
		for(uint8_t i = 0; i < ADC_NUM_SENSORS; i++){
 800200c:	2300      	movs	r3, #0
 800200e:	73fb      	strb	r3, [r7, #15]
 8002010:	e01d      	b.n	800204e <decodeOn_USB+0x166>
			decom.ui16[0] = Analog.value[i];
 8002012:	7bfb      	ldrb	r3, [r7, #15]
 8002014:	4a90      	ldr	r2, [pc, #576]	@ (8002258 <decodeOn_USB+0x370>)
 8002016:	3308      	adds	r3, #8
 8002018:	005b      	lsls	r3, r3, #1
 800201a:	4413      	add	r3, r2
 800201c:	885a      	ldrh	r2, [r3, #2]
 800201e:	4b8f      	ldr	r3, [pc, #572]	@ (800225c <decodeOn_USB+0x374>)
 8002020:	801a      	strh	r2, [r3, #0]
			data->auxBuffer[i*2] = decom.ui8[0];
 8002022:	7bfb      	ldrb	r3, [r7, #15]
 8002024:	005b      	lsls	r3, r3, #1
 8002026:	4a8d      	ldr	r2, [pc, #564]	@ (800225c <decodeOn_USB+0x374>)
 8002028:	7811      	ldrb	r1, [r2, #0]
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	4413      	add	r3, r2
 800202e:	460a      	mov	r2, r1
 8002030:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
			data->auxBuffer[i*2+1] = decom.ui8[1];
 8002034:	7bfb      	ldrb	r3, [r7, #15]
 8002036:	005b      	lsls	r3, r3, #1
 8002038:	3301      	adds	r3, #1
 800203a:	4a88      	ldr	r2, [pc, #544]	@ (800225c <decodeOn_USB+0x374>)
 800203c:	7851      	ldrb	r1, [r2, #1]
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	4413      	add	r3, r2
 8002042:	460a      	mov	r2, r1
 8002044:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
		for(uint8_t i = 0; i < ADC_NUM_SENSORS; i++){
 8002048:	7bfb      	ldrb	r3, [r7, #15]
 800204a:	3301      	adds	r3, #1
 800204c:	73fb      	strb	r3, [r7, #15]
 800204e:	7bfb      	ldrb	r3, [r7, #15]
 8002050:	2b08      	cmp	r3, #8
 8002052:	d9de      	bls.n	8002012 <decodeOn_USB+0x12a>
		}
		comm_sendCMD(data, ADCBLOCK, &data->auxBuffer[0], 17);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 800205a:	2311      	movs	r3, #17
 800205c:	21a1      	movs	r1, #161	@ 0xa1
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f7ff fd04 	bl	8001a6c <comm_sendCMD>
		break;
 8002064:	e11c      	b.n	80022a0 <decodeOn_USB+0x3b8>
	case DEBUGER:

		break;
	case SETMOTOR:
		if(RXBUF[RXCMD + 1] == MOTOR_L){
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	785b      	ldrb	r3, [r3, #1]
 800206a:	3303      	adds	r3, #3
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	4413      	add	r3, r2
 8002070:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8002074:	2b00      	cmp	r3, #0
 8002076:	d115      	bne.n	80020a4 <decodeOn_USB+0x1bc>
			Motor_Set_PER_Speed(&MotorL, RXBUF[RXCMD + 2]);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	785b      	ldrb	r3, [r3, #1]
 800207c:	3304      	adds	r3, #4
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	4413      	add	r3, r2
 8002082:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8002086:	b25b      	sxtb	r3, r3
 8002088:	4619      	mov	r1, r3
 800208a:	4876      	ldr	r0, [pc, #472]	@ (8002264 <decodeOn_USB+0x37c>)
 800208c:	f7ff fadd 	bl	800164a <Motor_Set_PER_Speed>
			USB.data.auxBuffer[0] = ACK;
 8002090:	4b75      	ldr	r3, [pc, #468]	@ (8002268 <decodeOn_USB+0x380>)
 8002092:	220d      	movs	r2, #13
 8002094:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
			comm_sendCMD(&USB.data, SETMOTOR, &USB.data.auxBuffer[0], 1);
 8002098:	2301      	movs	r3, #1
 800209a:	4a74      	ldr	r2, [pc, #464]	@ (800226c <decodeOn_USB+0x384>)
 800209c:	21a2      	movs	r1, #162	@ 0xa2
 800209e:	4872      	ldr	r0, [pc, #456]	@ (8002268 <decodeOn_USB+0x380>)
 80020a0:	f7ff fce4 	bl	8001a6c <comm_sendCMD>
		}
		if(RXBUF[RXCMD + 1] == MOTOR_R){
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	785b      	ldrb	r3, [r3, #1]
 80020a8:	3303      	adds	r3, #3
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	4413      	add	r3, r2
 80020ae:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d116      	bne.n	80020e4 <decodeOn_USB+0x1fc>
			Motor_Set_PER_Speed(&MotorR, RXBUF[RXCMD + 2]);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	785b      	ldrb	r3, [r3, #1]
 80020ba:	3304      	adds	r3, #4
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	4413      	add	r3, r2
 80020c0:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 80020c4:	b25b      	sxtb	r3, r3
 80020c6:	4619      	mov	r1, r3
 80020c8:	4869      	ldr	r0, [pc, #420]	@ (8002270 <decodeOn_USB+0x388>)
 80020ca:	f7ff fabe 	bl	800164a <Motor_Set_PER_Speed>
			USB.data.auxBuffer[0] = ACK;
 80020ce:	4b66      	ldr	r3, [pc, #408]	@ (8002268 <decodeOn_USB+0x380>)
 80020d0:	220d      	movs	r2, #13
 80020d2:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
			comm_sendCMD(&USB.data, SETMOTOR, &USB.data.auxBuffer[0], 1);
 80020d6:	2301      	movs	r3, #1
 80020d8:	4a64      	ldr	r2, [pc, #400]	@ (800226c <decodeOn_USB+0x384>)
 80020da:	21a2      	movs	r1, #162	@ 0xa2
 80020dc:	4862      	ldr	r0, [pc, #392]	@ (8002268 <decodeOn_USB+0x380>)
 80020de:	f7ff fcc5 	bl	8001a6c <comm_sendCMD>
		}else{
			comm_sendCMD(data, SYSERROR, (uint8_t*)"NO MOTOR", 8);
		}
		break;
 80020e2:	e0dd      	b.n	80022a0 <decodeOn_USB+0x3b8>
			comm_sendCMD(data, SYSERROR, (uint8_t*)"NO MOTOR", 8);
 80020e4:	2308      	movs	r3, #8
 80020e6:	4a63      	ldr	r2, [pc, #396]	@ (8002274 <decodeOn_USB+0x38c>)
 80020e8:	21ee      	movs	r1, #238	@ 0xee
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f7ff fcbe 	bl	8001a6c <comm_sendCMD>
		break;
 80020f0:	e0d6      	b.n	80022a0 <decodeOn_USB+0x3b8>
	case GET_ENCODER:
		if(RXBUF[RXCMD + 1] == ENCODER_L){
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	785b      	ldrb	r3, [r3, #1]
 80020f6:	3303      	adds	r3, #3
 80020f8:	687a      	ldr	r2, [r7, #4]
 80020fa:	4413      	add	r3, r2
 80020fc:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8002100:	2b00      	cmp	r3, #0
 8002102:	d11a      	bne.n	800213a <decodeOn_USB+0x252>
			decom.ui16[0] = EncoderL.pps;
 8002104:	4b5c      	ldr	r3, [pc, #368]	@ (8002278 <decodeOn_USB+0x390>)
 8002106:	891a      	ldrh	r2, [r3, #8]
 8002108:	4b54      	ldr	r3, [pc, #336]	@ (800225c <decodeOn_USB+0x374>)
 800210a:	801a      	strh	r2, [r3, #0]
			data->auxBuffer[0] = ENCODER_L;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2200      	movs	r2, #0
 8002110:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
			data->auxBuffer[1] = decom.ui8[0];
 8002114:	4b51      	ldr	r3, [pc, #324]	@ (800225c <decodeOn_USB+0x374>)
 8002116:	781a      	ldrb	r2, [r3, #0]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f883 2211 	strb.w	r2, [r3, #529]	@ 0x211
			data->auxBuffer[2] = decom.ui8[1];
 800211e:	4b4f      	ldr	r3, [pc, #316]	@ (800225c <decodeOn_USB+0x374>)
 8002120:	785a      	ldrb	r2, [r3, #1]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	f883 2212 	strb.w	r2, [r3, #530]	@ 0x212
			comm_sendCMD(data, GET_ENCODER, &data->auxBuffer[0], 3);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 800212e:	2303      	movs	r3, #3
 8002130:	21a3      	movs	r1, #163	@ 0xa3
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f7ff fc9a 	bl	8001a6c <comm_sendCMD>
			data->auxBuffer[2] = decom.ui8[1];
			comm_sendCMD(data, GET_ENCODER, &data->auxBuffer[0], 3);
		}else{
			comm_sendCMD(data, SYSERROR, (uint8_t*)"NO ENCODER", 10);
		}
		break;
 8002138:	e0b2      	b.n	80022a0 <decodeOn_USB+0x3b8>
		}else if(RXBUF[RXCMD + 1] == ENCODER_R){
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	785b      	ldrb	r3, [r3, #1]
 800213e:	3303      	adds	r3, #3
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	4413      	add	r3, r2
 8002144:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8002148:	2b01      	cmp	r3, #1
 800214a:	d11a      	bne.n	8002182 <decodeOn_USB+0x29a>
			decom.ui16[0] = EncoderR.pps;
 800214c:	4b4b      	ldr	r3, [pc, #300]	@ (800227c <decodeOn_USB+0x394>)
 800214e:	891a      	ldrh	r2, [r3, #8]
 8002150:	4b42      	ldr	r3, [pc, #264]	@ (800225c <decodeOn_USB+0x374>)
 8002152:	801a      	strh	r2, [r3, #0]
			data->auxBuffer[0] = ENCODER_R;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2201      	movs	r2, #1
 8002158:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
			data->auxBuffer[1] = decom.ui8[0];
 800215c:	4b3f      	ldr	r3, [pc, #252]	@ (800225c <decodeOn_USB+0x374>)
 800215e:	781a      	ldrb	r2, [r3, #0]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f883 2211 	strb.w	r2, [r3, #529]	@ 0x211
			data->auxBuffer[2] = decom.ui8[1];
 8002166:	4b3d      	ldr	r3, [pc, #244]	@ (800225c <decodeOn_USB+0x374>)
 8002168:	785a      	ldrb	r2, [r3, #1]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f883 2212 	strb.w	r2, [r3, #530]	@ 0x212
			comm_sendCMD(data, GET_ENCODER, &data->auxBuffer[0], 3);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 8002176:	2303      	movs	r3, #3
 8002178:	21a3      	movs	r1, #163	@ 0xa3
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f7ff fc76 	bl	8001a6c <comm_sendCMD>
		break;
 8002180:	e08e      	b.n	80022a0 <decodeOn_USB+0x3b8>
			comm_sendCMD(data, SYSERROR, (uint8_t*)"NO ENCODER", 10);
 8002182:	230a      	movs	r3, #10
 8002184:	4a3e      	ldr	r2, [pc, #248]	@ (8002280 <decodeOn_USB+0x398>)
 8002186:	21ee      	movs	r1, #238	@ 0xee
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	f7ff fc6f 	bl	8001a6c <comm_sendCMD>
		break;
 800218e:	e087      	b.n	80022a0 <decodeOn_USB+0x3b8>
	case MPUBLOCK:
		decom.i16[0] = MPU6050.Acc.x;
 8002190:	4b3c      	ldr	r3, [pc, #240]	@ (8002284 <decodeOn_USB+0x39c>)
 8002192:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002196:	4b31      	ldr	r3, [pc, #196]	@ (800225c <decodeOn_USB+0x374>)
 8002198:	801a      	strh	r2, [r3, #0]
		data->auxBuffer[0] = decom.ui8[0];
 800219a:	4b30      	ldr	r3, [pc, #192]	@ (800225c <decodeOn_USB+0x374>)
 800219c:	781a      	ldrb	r2, [r3, #0]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
		data->auxBuffer[1] = decom.ui8[1];
 80021a4:	4b2d      	ldr	r3, [pc, #180]	@ (800225c <decodeOn_USB+0x374>)
 80021a6:	785a      	ldrb	r2, [r3, #1]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	f883 2211 	strb.w	r2, [r3, #529]	@ 0x211
		decom.i16[0] = MPU6050.Acc.y;
 80021ae:	4b35      	ldr	r3, [pc, #212]	@ (8002284 <decodeOn_USB+0x39c>)
 80021b0:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80021b4:	4b29      	ldr	r3, [pc, #164]	@ (800225c <decodeOn_USB+0x374>)
 80021b6:	801a      	strh	r2, [r3, #0]
		data->auxBuffer[2] = decom.ui8[0];
 80021b8:	4b28      	ldr	r3, [pc, #160]	@ (800225c <decodeOn_USB+0x374>)
 80021ba:	781a      	ldrb	r2, [r3, #0]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	f883 2212 	strb.w	r2, [r3, #530]	@ 0x212
		data->auxBuffer[3] = decom.ui8[1];
 80021c2:	4b26      	ldr	r3, [pc, #152]	@ (800225c <decodeOn_USB+0x374>)
 80021c4:	785a      	ldrb	r2, [r3, #1]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f883 2213 	strb.w	r2, [r3, #531]	@ 0x213
		decom.i16[0] = MPU6050.Acc.z;
 80021cc:	4b2d      	ldr	r3, [pc, #180]	@ (8002284 <decodeOn_USB+0x39c>)
 80021ce:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80021d2:	4b22      	ldr	r3, [pc, #136]	@ (800225c <decodeOn_USB+0x374>)
 80021d4:	801a      	strh	r2, [r3, #0]
		data->auxBuffer[4] = decom.ui8[0];
 80021d6:	4b21      	ldr	r3, [pc, #132]	@ (800225c <decodeOn_USB+0x374>)
 80021d8:	781a      	ldrb	r2, [r3, #0]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f883 2214 	strb.w	r2, [r3, #532]	@ 0x214
		data->auxBuffer[5] = decom.ui8[1];
 80021e0:	4b1e      	ldr	r3, [pc, #120]	@ (800225c <decodeOn_USB+0x374>)
 80021e2:	785a      	ldrb	r2, [r3, #1]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	f883 2215 	strb.w	r2, [r3, #533]	@ 0x215
		decom.i16[0] = MPU6050.Gyro.x;
 80021ea:	4b26      	ldr	r3, [pc, #152]	@ (8002284 <decodeOn_USB+0x39c>)
 80021ec:	f9b3 2018 	ldrsh.w	r2, [r3, #24]
 80021f0:	4b1a      	ldr	r3, [pc, #104]	@ (800225c <decodeOn_USB+0x374>)
 80021f2:	801a      	strh	r2, [r3, #0]
		data->auxBuffer[6] = decom.ui8[0];
 80021f4:	4b19      	ldr	r3, [pc, #100]	@ (800225c <decodeOn_USB+0x374>)
 80021f6:	781a      	ldrb	r2, [r3, #0]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	f883 2216 	strb.w	r2, [r3, #534]	@ 0x216
		data->auxBuffer[7] = decom.ui8[1];
 80021fe:	4b17      	ldr	r3, [pc, #92]	@ (800225c <decodeOn_USB+0x374>)
 8002200:	785a      	ldrb	r2, [r3, #1]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f883 2217 	strb.w	r2, [r3, #535]	@ 0x217
		decom.i16[0] = MPU6050.Gyro.y;
 8002208:	4b1e      	ldr	r3, [pc, #120]	@ (8002284 <decodeOn_USB+0x39c>)
 800220a:	f9b3 201a 	ldrsh.w	r2, [r3, #26]
 800220e:	4b13      	ldr	r3, [pc, #76]	@ (800225c <decodeOn_USB+0x374>)
 8002210:	801a      	strh	r2, [r3, #0]
		data->auxBuffer[8] = decom.ui8[0];
 8002212:	4b12      	ldr	r3, [pc, #72]	@ (800225c <decodeOn_USB+0x374>)
 8002214:	781a      	ldrb	r2, [r3, #0]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	f883 2218 	strb.w	r2, [r3, #536]	@ 0x218
		data->auxBuffer[9] = decom.ui8[1];
 800221c:	4b0f      	ldr	r3, [pc, #60]	@ (800225c <decodeOn_USB+0x374>)
 800221e:	785a      	ldrb	r2, [r3, #1]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	f883 2219 	strb.w	r2, [r3, #537]	@ 0x219
		decom.i16[0] = MPU6050.Gyro.z;
 8002226:	4b17      	ldr	r3, [pc, #92]	@ (8002284 <decodeOn_USB+0x39c>)
 8002228:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
 800222c:	4b0b      	ldr	r3, [pc, #44]	@ (800225c <decodeOn_USB+0x374>)
 800222e:	801a      	strh	r2, [r3, #0]
		data->auxBuffer[10] = decom.ui8[0];
 8002230:	4b0a      	ldr	r3, [pc, #40]	@ (800225c <decodeOn_USB+0x374>)
 8002232:	781a      	ldrb	r2, [r3, #0]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f883 221a 	strb.w	r2, [r3, #538]	@ 0x21a
		data->auxBuffer[11] = decom.ui8[1];
 800223a:	4b08      	ldr	r3, [pc, #32]	@ (800225c <decodeOn_USB+0x374>)
 800223c:	785a      	ldrb	r2, [r3, #1]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	f883 221b 	strb.w	r2, [r3, #539]	@ 0x21b
		comm_sendCMD(data, MPUBLOCK, data->auxBuffer, 12);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 800224a:	230c      	movs	r3, #12
 800224c:	21a4      	movs	r1, #164	@ 0xa4
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f7ff fc0c 	bl	8001a6c <comm_sendCMD>
		break;
 8002254:	e024      	b.n	80022a0 <decodeOn_USB+0x3b8>
 8002256:	bf00      	nop
 8002258:	20000f28 	.word	0x20000f28
 800225c:	20000a7c 	.word	0x20000a7c
 8002260:	0800ff9c 	.word	0x0800ff9c
 8002264:	20000a84 	.word	0x20000a84
 8002268:	20000f4c 	.word	0x20000f4c
 800226c:	2000115c 	.word	0x2000115c
 8002270:	20000a9c 	.word	0x20000a9c
 8002274:	0800ffa4 	.word	0x0800ffa4
 8002278:	20000ab4 	.word	0x20000ab4
 800227c:	20000ac0 	.word	0x20000ac0
 8002280:	0800ffb0 	.word	0x0800ffb0
 8002284:	20000acc 	.word	0x20000acc
	default:
		comm_sendCMD(data, SYSERROR, (uint8_t*)"NO CMD", 17);
 8002288:	2311      	movs	r3, #17
 800228a:	4a07      	ldr	r2, [pc, #28]	@ (80022a8 <decodeOn_USB+0x3c0>)
 800228c:	21ee      	movs	r1, #238	@ 0xee
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f7ff fbec 	bl	8001a6c <comm_sendCMD>
		break;
 8002294:	e004      	b.n	80022a0 <decodeOn_USB+0x3b8>
		break;
 8002296:	bf00      	nop
 8002298:	e002      	b.n	80022a0 <decodeOn_USB+0x3b8>
		break;
 800229a:	bf00      	nop
 800229c:	e000      	b.n	80022a0 <decodeOn_USB+0x3b8>
		break;
 800229e:	bf00      	nop
	}
}
 80022a0:	bf00      	nop
 80022a2:	3710      	adds	r7, #16
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	0800ffbc 	.word	0x0800ffbc

080022ac <onKeyChangeState>:

void onKeyChangeState(e_Estados value){
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	4603      	mov	r3, r0
 80022b4:	71fb      	strb	r3, [r7, #7]

}
 80022b6:	bf00      	nop
 80022b8:	370c      	adds	r7, #12
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
	...

080022c4 <task_10ms>:

void task_10ms(){
 80022c4:	b580      	push	{r7, lr}
 80022c6:	af00      	add	r7, sp, #0
	is100ms1--;
 80022c8:	4b24      	ldr	r3, [pc, #144]	@ (800235c <task_10ms+0x98>)
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	3b01      	subs	r3, #1
 80022ce:	b2da      	uxtb	r2, r3
 80022d0:	4b22      	ldr	r3, [pc, #136]	@ (800235c <task_10ms+0x98>)
 80022d2:	701a      	strb	r2, [r3, #0]
	if(!is100ms1){
 80022d4:	4b21      	ldr	r3, [pc, #132]	@ (800235c <task_10ms+0x98>)
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d129      	bne.n	8002330 <task_10ms+0x6c>
		is100ms1 = 10;
 80022dc:	4b1f      	ldr	r3, [pc, #124]	@ (800235c <task_10ms+0x98>)
 80022de:	220a      	movs	r2, #10
 80022e0:	701a      	strb	r2, [r3, #0]

		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 80022e2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80022e6:	481e      	ldr	r0, [pc, #120]	@ (8002360 <task_10ms+0x9c>)
 80022e8:	f002 fe7d 	bl	8004fe6 <HAL_GPIO_TogglePin>

		OLED_Task();
 80022ec:	f7ff fc9a 	bl	8001c24 <OLED_Task>

		is1s--;
 80022f0:	4b1c      	ldr	r3, [pc, #112]	@ (8002364 <task_10ms+0xa0>)
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	3b01      	subs	r3, #1
 80022f6:	b2da      	uxtb	r2, r3
 80022f8:	4b1a      	ldr	r3, [pc, #104]	@ (8002364 <task_10ms+0xa0>)
 80022fa:	701a      	strb	r2, [r3, #0]
		if(!is1s){
 80022fc:	4b19      	ldr	r3, [pc, #100]	@ (8002364 <task_10ms+0xa0>)
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d115      	bne.n	8002330 <task_10ms+0x6c>
			is1s = 10;
 8002304:	4b17      	ldr	r3, [pc, #92]	@ (8002364 <task_10ms+0xa0>)
 8002306:	220a      	movs	r2, #10
 8002308:	701a      	strb	r2, [r3, #0]
			Encoder_1s_Elapsed(&EncoderL);
 800230a:	4817      	ldr	r0, [pc, #92]	@ (8002368 <task_10ms+0xa4>)
 800230c:	f7ff f96d 	bl	80015ea <Encoder_1s_Elapsed>
			Encoder_1s_Elapsed(&EncoderR);
 8002310:	4816      	ldr	r0, [pc, #88]	@ (800236c <task_10ms+0xa8>)
 8002312:	f7ff f96a 	bl	80015ea <Encoder_1s_Elapsed>

			is30s--;
 8002316:	4b16      	ldr	r3, [pc, #88]	@ (8002370 <task_10ms+0xac>)
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	3b01      	subs	r3, #1
 800231c:	b2da      	uxtb	r2, r3
 800231e:	4b14      	ldr	r3, [pc, #80]	@ (8002370 <task_10ms+0xac>)
 8002320:	701a      	strb	r2, [r3, #0]
			if(!is30s){
 8002322:	4b13      	ldr	r3, [pc, #76]	@ (8002370 <task_10ms+0xac>)
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d102      	bne.n	8002330 <task_10ms+0x6c>
				is30s = 30;
 800232a:	4b11      	ldr	r3, [pc, #68]	@ (8002370 <task_10ms+0xac>)
 800232c:	221e      	movs	r2, #30
 800232e:	701a      	strb	r2, [r3, #0]
				//BateryLevel_Task();
			}
		}
	}

	Debouncer_Task();
 8002330:	f7fe fa6c 	bl	800080c <Debouncer_Task>
	Motor_Break_Timeout(&MotorL);
 8002334:	480f      	ldr	r0, [pc, #60]	@ (8002374 <task_10ms+0xb0>)
 8002336:	f7ff f9ed 	bl	8001714 <Motor_Break_Timeout>
	Motor_Break_Timeout(&MotorR);
 800233a:	480f      	ldr	r0, [pc, #60]	@ (8002378 <task_10ms+0xb4>)
 800233c:	f7ff f9ea 	bl	8001714 <Motor_Break_Timeout>
	Encoder_Task(&EncoderL);
 8002340:	4809      	ldr	r0, [pc, #36]	@ (8002368 <task_10ms+0xa4>)
 8002342:	f7ff f912 	bl	800156a <Encoder_Task>
	Encoder_Task(&EncoderR);
 8002346:	4809      	ldr	r0, [pc, #36]	@ (800236c <task_10ms+0xa8>)
 8002348:	f7ff f90f 	bl	800156a <Encoder_Task>
	IS10MS = FALSE;
 800234c:	4a0b      	ldr	r2, [pc, #44]	@ (800237c <task_10ms+0xb8>)
 800234e:	7813      	ldrb	r3, [r2, #0]
 8002350:	f023 0301 	bic.w	r3, r3, #1
 8002354:	7013      	strb	r3, [r2, #0]
}
 8002356:	bf00      	nop
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	20000008 	.word	0x20000008
 8002360:	40020800 	.word	0x40020800
 8002364:	20000009 	.word	0x20000009
 8002368:	20000ab4 	.word	0x20000ab4
 800236c:	20000ac0 	.word	0x20000ac0
 8002370:	2000000b 	.word	0x2000000b
 8002374:	20000a84 	.word	0x20000a84
 8002378:	20000a9c 	.word	0x20000a9c
 800237c:	20000a78 	.word	0x20000a78

08002380 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002386:	f001 fa09 	bl	800379c <HAL_Init>

  /* USER CODE BEGIN Init */
  MPU6050.isInit = FALSE;
 800238a:	4b7a      	ldr	r3, [pc, #488]	@ (8002574 <main+0x1f4>)
 800238c:	2200      	movs	r2, #0
 800238e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  Display.isInit = FALSE;
 8002392:	4b79      	ldr	r3, [pc, #484]	@ (8002578 <main+0x1f8>)
 8002394:	2200      	movs	r2, #0
 8002396:	701a      	strb	r2, [r3, #0]
  Display.state = INIT;
 8002398:	4b77      	ldr	r3, [pc, #476]	@ (8002578 <main+0x1f8>)
 800239a:	2200      	movs	r2, #0
 800239c:	f883 2401 	strb.w	r2, [r3, #1025]	@ 0x401
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80023a0:	f000 f92e 	bl	8002600 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80023a4:	f000 fb96 	bl	8002ad4 <MX_GPIO_Init>
  MX_DMA_Init();
 80023a8:	f000 fb56 	bl	8002a58 <MX_DMA_Init>
  MX_ADC1_Init();
 80023ac:	f000 f992 	bl	80026d4 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 80023b0:	f00c fbb4 	bl	800eb1c <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 80023b4:	f000 fa7e 	bl	80028b4 <MX_TIM1_Init>
  MX_I2C1_Init();
 80023b8:	f000 fa4e 	bl	8002858 <MX_I2C1_Init>
  MX_TIM3_Init();
 80023bc:	f000 faca 	bl	8002954 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  /* INICIALIZACIÓN DE PROTOCOLO MEDIANTE USB */
  Comm_Init(&USB.data, &decodeOn_USB, &writeOn_USB);
 80023c0:	4a6e      	ldr	r2, [pc, #440]	@ (800257c <main+0x1fc>)
 80023c2:	496f      	ldr	r1, [pc, #444]	@ (8002580 <main+0x200>)
 80023c4:	486f      	ldr	r0, [pc, #444]	@ (8002584 <main+0x204>)
 80023c6:	f7ff f9c0 	bl	800174a <Comm_Init>
  CDC_Attach_Rx(&dataRxOn_USB);
 80023ca:	486f      	ldr	r0, [pc, #444]	@ (8002588 <main+0x208>)
 80023cc:	f00c fcf8 	bl	800edc0 <CDC_Attach_Rx>
  /* FIN INICIALIZACIÓN DE PROTOCOLO MEDIANTE USB */

  /* INICIALIZACIÓN DE USER KEY Y DEBOUNCE */
  Debounce_Init();
 80023d0:	f7fe f9b4 	bl	800073c <Debounce_Init>
  key = Debounce_Add(&KEY_Read_Value, &onKeyChangeState);
 80023d4:	496d      	ldr	r1, [pc, #436]	@ (800258c <main+0x20c>)
 80023d6:	486e      	ldr	r0, [pc, #440]	@ (8002590 <main+0x210>)
 80023d8:	f7fe f9e4 	bl	80007a4 <Debounce_Add>
 80023dc:	4603      	mov	r3, r0
 80023de:	461a      	mov	r2, r3
 80023e0:	4b6c      	ldr	r3, [pc, #432]	@ (8002594 <main+0x214>)
 80023e2:	701a      	strb	r2, [r3, #0]
  /* FIN INICIALIZACIÓN DE USER KEY Y DEBOUNCE */

  /* INICIALIZACIÓN DE TIMERS Y PWM*/
  if(HAL_TIM_Base_Start_IT(&htim1) != HAL_OK){
 80023e4:	486c      	ldr	r0, [pc, #432]	@ (8002598 <main+0x218>)
 80023e6:	f008 f917 	bl	800a618 <HAL_TIM_Base_Start_IT>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d005      	beq.n	80023fc <main+0x7c>
	  comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"TIM1 INIT", 9);
 80023f0:	2309      	movs	r3, #9
 80023f2:	4a6a      	ldr	r2, [pc, #424]	@ (800259c <main+0x21c>)
 80023f4:	21ee      	movs	r1, #238	@ 0xee
 80023f6:	4863      	ldr	r0, [pc, #396]	@ (8002584 <main+0x204>)
 80023f8:	f7ff fb38 	bl	8001a6c <comm_sendCMD>
  }
  if(HAL_TIM_Base_Start_IT(&htim3) != HAL_OK){
 80023fc:	4868      	ldr	r0, [pc, #416]	@ (80025a0 <main+0x220>)
 80023fe:	f008 f90b 	bl	800a618 <HAL_TIM_Base_Start_IT>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d005      	beq.n	8002414 <main+0x94>
  	  comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"TIM3 INIT BASE", 14);
 8002408:	230e      	movs	r3, #14
 800240a:	4a66      	ldr	r2, [pc, #408]	@ (80025a4 <main+0x224>)
 800240c:	21ee      	movs	r1, #238	@ 0xee
 800240e:	485d      	ldr	r0, [pc, #372]	@ (8002584 <main+0x204>)
 8002410:	f7ff fb2c 	bl	8001a6c <comm_sendCMD>
  }
  if(HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1) != HAL_OK){
 8002414:	2100      	movs	r1, #0
 8002416:	4862      	ldr	r0, [pc, #392]	@ (80025a0 <main+0x220>)
 8002418:	f008 f9ba 	bl	800a790 <HAL_TIM_PWM_Start>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d005      	beq.n	800242e <main+0xae>
	  comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"TIM3 INIT PWM1", 14);
 8002422:	230e      	movs	r3, #14
 8002424:	4a60      	ldr	r2, [pc, #384]	@ (80025a8 <main+0x228>)
 8002426:	21ee      	movs	r1, #238	@ 0xee
 8002428:	4856      	ldr	r0, [pc, #344]	@ (8002584 <main+0x204>)
 800242a:	f7ff fb1f 	bl	8001a6c <comm_sendCMD>
  }
  if(HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2) != HAL_OK){
 800242e:	2104      	movs	r1, #4
 8002430:	485b      	ldr	r0, [pc, #364]	@ (80025a0 <main+0x220>)
 8002432:	f008 f9ad 	bl	800a790 <HAL_TIM_PWM_Start>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d005      	beq.n	8002448 <main+0xc8>
	  comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"TIM3 INIT PWM2", 14);
 800243c:	230e      	movs	r3, #14
 800243e:	4a5b      	ldr	r2, [pc, #364]	@ (80025ac <main+0x22c>)
 8002440:	21ee      	movs	r1, #238	@ 0xee
 8002442:	4850      	ldr	r0, [pc, #320]	@ (8002584 <main+0x204>)
 8002444:	f7ff fb12 	bl	8001a6c <comm_sendCMD>
  }
  /* FIN INICIALIZACIÓN DE TIMERS Y PWM*/

  /* INICIALIZACIÓN DE MPU6050 */
  if(HAL_I2C_IsDeviceReady(&hi2c1, MPU6050_ADDR, 1, 10000) != HAL_OK){
 8002448:	f242 7310 	movw	r3, #10000	@ 0x2710
 800244c:	2201      	movs	r2, #1
 800244e:	21d0      	movs	r1, #208	@ 0xd0
 8002450:	4857      	ldr	r0, [pc, #348]	@ (80025b0 <main+0x230>)
 8002452:	f003 fe6d 	bl	8006130 <HAL_I2C_IsDeviceReady>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d006      	beq.n	800246a <main+0xea>
	  comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"MPU6050 READY", 13);
 800245c:	230d      	movs	r3, #13
 800245e:	4a55      	ldr	r2, [pc, #340]	@ (80025b4 <main+0x234>)
 8002460:	21ee      	movs	r1, #238	@ 0xee
 8002462:	4848      	ldr	r0, [pc, #288]	@ (8002584 <main+0x204>)
 8002464:	f7ff fb02 	bl	8001a6c <comm_sendCMD>
 8002468:	e017      	b.n	800249a <main+0x11a>
  }else{
	  MPU6050_Set_I2C_Communication(&I2C_1_Abstract_Mem_Write_Blocking, &I2C_1_Abstract_Mem_Read_Blocking);
 800246a:	4953      	ldr	r1, [pc, #332]	@ (80025b8 <main+0x238>)
 800246c:	4853      	ldr	r0, [pc, #332]	@ (80025bc <main+0x23c>)
 800246e:	f7fe f9ff 	bl	8000870 <MPU6050_Set_I2C_Communication>
	  if(MPU6050_Init(&MPU6050) != SYS_OK){
 8002472:	4840      	ldr	r0, [pc, #256]	@ (8002574 <main+0x1f4>)
 8002474:	f7fe fa12 	bl	800089c <MPU6050_Init>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d006      	beq.n	800248c <main+0x10c>
		  comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"MPU6050 INIT", 12);
 800247e:	230c      	movs	r3, #12
 8002480:	4a4f      	ldr	r2, [pc, #316]	@ (80025c0 <main+0x240>)
 8002482:	21ee      	movs	r1, #238	@ 0xee
 8002484:	483f      	ldr	r0, [pc, #252]	@ (8002584 <main+0x204>)
 8002486:	f7ff faf1 	bl	8001a6c <comm_sendCMD>
 800248a:	e006      	b.n	800249a <main+0x11a>
	  }else{
		  MPU6050_Calibrate(&MPU6050);
 800248c:	4839      	ldr	r0, [pc, #228]	@ (8002574 <main+0x1f4>)
 800248e:	f7fe faa7 	bl	80009e0 <MPU6050_Calibrate>
		  MPU6050.isInit = TRUE;
 8002492:	4b38      	ldr	r3, [pc, #224]	@ (8002574 <main+0x1f4>)
 8002494:	2201      	movs	r2, #1
 8002496:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	  }
  }
  /* FIN INICIALIZACIÓN DE MPU6050 */

  /* INICIALIZACIÓN DISPLAY*/
  if(HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 10000) != HAL_OK){
 800249a:	f242 7310 	movw	r3, #10000	@ 0x2710
 800249e:	2201      	movs	r2, #1
 80024a0:	2178      	movs	r1, #120	@ 0x78
 80024a2:	4843      	ldr	r0, [pc, #268]	@ (80025b0 <main+0x230>)
 80024a4:	f003 fe44 	bl	8006130 <HAL_I2C_IsDeviceReady>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d006      	beq.n	80024bc <main+0x13c>
	  comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"I2C READY", 9);
 80024ae:	2309      	movs	r3, #9
 80024b0:	4a44      	ldr	r2, [pc, #272]	@ (80025c4 <main+0x244>)
 80024b2:	21ee      	movs	r1, #238	@ 0xee
 80024b4:	4833      	ldr	r0, [pc, #204]	@ (8002584 <main+0x204>)
 80024b6:	f7ff fad9 	bl	8001a6c <comm_sendCMD>
 80024ba:	e022      	b.n	8002502 <main+0x182>
  }else{
	  Display_Set_I2C_Master_Transmit(&I2C_1_Abstract_Mem_DMA_Transmit, &I2C_1_Abstract_Master_Transmit_Blocking);
 80024bc:	4942      	ldr	r1, [pc, #264]	@ (80025c8 <main+0x248>)
 80024be:	4843      	ldr	r0, [pc, #268]	@ (80025cc <main+0x24c>)
 80024c0:	f7fe fbcc 	bl	8000c5c <Display_Set_I2C_Master_Transmit>
	  if(Display_Init() != SYS_OK){
 80024c4:	f7fe fbe0 	bl	8000c88 <Display_Init>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d006      	beq.n	80024dc <main+0x15c>
		  comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"OLED INIT", 9);
 80024ce:	2309      	movs	r3, #9
 80024d0:	4a3f      	ldr	r2, [pc, #252]	@ (80025d0 <main+0x250>)
 80024d2:	21ee      	movs	r1, #238	@ 0xee
 80024d4:	482b      	ldr	r0, [pc, #172]	@ (8002584 <main+0x204>)
 80024d6:	f7ff fac9 	bl	8001a6c <comm_sendCMD>
 80024da:	e012      	b.n	8002502 <main+0x182>
	  }else{
		  Display_DrawBitmap(0,0, uner_logo, 128, 64, 1);
 80024dc:	2301      	movs	r3, #1
 80024de:	9301      	str	r3, [sp, #4]
 80024e0:	2340      	movs	r3, #64	@ 0x40
 80024e2:	9300      	str	r3, [sp, #0]
 80024e4:	2380      	movs	r3, #128	@ 0x80
 80024e6:	4a3b      	ldr	r2, [pc, #236]	@ (80025d4 <main+0x254>)
 80024e8:	2100      	movs	r1, #0
 80024ea:	2000      	movs	r0, #0
 80024ec:	f7fe fe66 	bl	80011bc <Display_DrawBitmap>
		  Display.isInit = TRUE;
 80024f0:	4b21      	ldr	r3, [pc, #132]	@ (8002578 <main+0x1f8>)
 80024f2:	2201      	movs	r2, #1
 80024f4:	701a      	strb	r2, [r3, #0]
		  Display.timer = HAL_GetTick();
 80024f6:	f001 f9b7 	bl	8003868 <HAL_GetTick>
 80024fa:	4603      	mov	r3, r0
 80024fc:	4a1e      	ldr	r2, [pc, #120]	@ (8002578 <main+0x1f8>)
 80024fe:	f8c2 3404 	str.w	r3, [r2, #1028]	@ 0x404
  }
  /* FIN INICIALIZACIÓN DISPLAY */


  /* INICIALIZACIÓN DE MOTORES Y ENCODERS */
  Motor_Init(&MotorL, &Motor_Left_SetPWM , &Motor_Left_SetPins , htim3.Instance->ARR);
 8002502:	4b27      	ldr	r3, [pc, #156]	@ (80025a0 <main+0x220>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002508:	b29b      	uxth	r3, r3
 800250a:	4a33      	ldr	r2, [pc, #204]	@ (80025d8 <main+0x258>)
 800250c:	4933      	ldr	r1, [pc, #204]	@ (80025dc <main+0x25c>)
 800250e:	4834      	ldr	r0, [pc, #208]	@ (80025e0 <main+0x260>)
 8002510:	f7ff f87c 	bl	800160c <Motor_Init>
  Motor_Init(&MotorR, &Motor_Right_SetPWM, &Motor_Right_SetPins, htim3.Instance->ARR);
 8002514:	4b22      	ldr	r3, [pc, #136]	@ (80025a0 <main+0x220>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800251a:	b29b      	uxth	r3, r3
 800251c:	4a31      	ldr	r2, [pc, #196]	@ (80025e4 <main+0x264>)
 800251e:	4932      	ldr	r1, [pc, #200]	@ (80025e8 <main+0x268>)
 8002520:	4832      	ldr	r0, [pc, #200]	@ (80025ec <main+0x26c>)
 8002522:	f7ff f873 	bl	800160c <Motor_Init>

  Encoder_Init(&EncoderL, 10);
 8002526:	210a      	movs	r1, #10
 8002528:	4831      	ldr	r0, [pc, #196]	@ (80025f0 <main+0x270>)
 800252a:	f7fe ffff 	bl	800152c <Encoder_Init>
  Encoder_Init(&EncoderR, 10);
 800252e:	210a      	movs	r1, #10
 8002530:	4830      	ldr	r0, [pc, #192]	@ (80025f4 <main+0x274>)
 8002532:	f7fe fffb 	bl	800152c <Encoder_Init>
  /* FIN INICIALIZACIÓN DE MOTORES Y ENCODERS */

  Car.state = IDLE;
 8002536:	4b30      	ldr	r3, [pc, #192]	@ (80025f8 <main+0x278>)
 8002538:	2200      	movs	r2, #0
 800253a:	701a      	strb	r2, [r3, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  /* USER TASK */
	Comm_Task(&USB.data);
 800253c:	4811      	ldr	r0, [pc, #68]	@ (8002584 <main+0x204>)
 800253e:	f7ff f938 	bl	80017b2 <Comm_Task>
	Display_UpdateScreen_Task();
 8002542:	f7fe fd13 	bl	8000f6c <Display_UpdateScreen_Task>
	  /* END USER TASK */

	if(IS10MS)
 8002546:	4b2d      	ldr	r3, [pc, #180]	@ (80025fc <main+0x27c>)
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	f003 0301 	and.w	r3, r3, #1
 800254e:	b2db      	uxtb	r3, r3
 8002550:	2b00      	cmp	r3, #0
 8002552:	d001      	beq.n	8002558 <main+0x1d8>
		task_10ms();
 8002554:	f7ff feb6 	bl	80022c4 <task_10ms>

	switch(Car.state){
 8002558:	4b27      	ldr	r3, [pc, #156]	@ (80025f8 <main+0x278>)
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	2b02      	cmp	r3, #2
 800255e:	d005      	beq.n	800256c <main+0x1ec>
 8002560:	2b02      	cmp	r3, #2
 8002562:	dceb      	bgt.n	800253c <main+0x1bc>
 8002564:	2b00      	cmp	r3, #0
 8002566:	d003      	beq.n	8002570 <main+0x1f0>
 8002568:	2b01      	cmp	r3, #1
	case IDLE:

		break;
	case FOLLOW_LINE:

		break;
 800256a:	e002      	b.n	8002572 <main+0x1f2>
	case GO_FROM_TO:

		break;
 800256c:	bf00      	nop
 800256e:	e7e5      	b.n	800253c <main+0x1bc>
		break;
 8002570:	bf00      	nop
	Comm_Task(&USB.data);
 8002572:	e7e3      	b.n	800253c <main+0x1bc>
 8002574:	20000acc 	.word	0x20000acc
 8002578:	20000b14 	.word	0x20000b14
 800257c:	08002efd 	.word	0x08002efd
 8002580:	08001ee9 	.word	0x08001ee9
 8002584:	20000f4c 	.word	0x20000f4c
 8002588:	08002f71 	.word	0x08002f71
 800258c:	080022ad 	.word	0x080022ad
 8002590:	08002ee5 	.word	0x08002ee5
 8002594:	20000a80 	.word	0x20000a80
 8002598:	200009e4 	.word	0x200009e4
 800259c:	0800ffc4 	.word	0x0800ffc4
 80025a0:	20000a2c 	.word	0x20000a2c
 80025a4:	0800ffd0 	.word	0x0800ffd0
 80025a8:	0800ffe0 	.word	0x0800ffe0
 80025ac:	0800fff0 	.word	0x0800fff0
 80025b0:	200008d0 	.word	0x200008d0
 80025b4:	08010000 	.word	0x08010000
 80025b8:	08002ea5 	.word	0x08002ea5
 80025bc:	08002e65 	.word	0x08002e65
 80025c0:	08010010 	.word	0x08010010
 80025c4:	08010020 	.word	0x08010020
 80025c8:	08002e31 	.word	0x08002e31
 80025cc:	08002df5 	.word	0x08002df5
 80025d0:	0801002c 	.word	0x0801002c
 80025d4:	080101e8 	.word	0x080101e8
 80025d8:	08002fc9 	.word	0x08002fc9
 80025dc:	0800310d 	.word	0x0800310d
 80025e0:	20000a84 	.word	0x20000a84
 80025e4:	0800306d 	.word	0x0800306d
 80025e8:	08003131 	.word	0x08003131
 80025ec:	20000a9c 	.word	0x20000a9c
 80025f0:	20000ab4 	.word	0x20000ab4
 80025f4:	20000ac0 	.word	0x20000ac0
 80025f8:	20001180 	.word	0x20001180
 80025fc:	20000a78 	.word	0x20000a78

08002600 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b094      	sub	sp, #80	@ 0x50
 8002604:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002606:	f107 0320 	add.w	r3, r7, #32
 800260a:	2230      	movs	r2, #48	@ 0x30
 800260c:	2100      	movs	r1, #0
 800260e:	4618      	mov	r0, r3
 8002610:	f00d f822 	bl	800f658 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002614:	f107 030c 	add.w	r3, r7, #12
 8002618:	2200      	movs	r2, #0
 800261a:	601a      	str	r2, [r3, #0]
 800261c:	605a      	str	r2, [r3, #4]
 800261e:	609a      	str	r2, [r3, #8]
 8002620:	60da      	str	r2, [r3, #12]
 8002622:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002624:	2300      	movs	r3, #0
 8002626:	60bb      	str	r3, [r7, #8]
 8002628:	4b28      	ldr	r3, [pc, #160]	@ (80026cc <SystemClock_Config+0xcc>)
 800262a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800262c:	4a27      	ldr	r2, [pc, #156]	@ (80026cc <SystemClock_Config+0xcc>)
 800262e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002632:	6413      	str	r3, [r2, #64]	@ 0x40
 8002634:	4b25      	ldr	r3, [pc, #148]	@ (80026cc <SystemClock_Config+0xcc>)
 8002636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002638:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800263c:	60bb      	str	r3, [r7, #8]
 800263e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002640:	2300      	movs	r3, #0
 8002642:	607b      	str	r3, [r7, #4]
 8002644:	4b22      	ldr	r3, [pc, #136]	@ (80026d0 <SystemClock_Config+0xd0>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a21      	ldr	r2, [pc, #132]	@ (80026d0 <SystemClock_Config+0xd0>)
 800264a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800264e:	6013      	str	r3, [r2, #0]
 8002650:	4b1f      	ldr	r3, [pc, #124]	@ (80026d0 <SystemClock_Config+0xd0>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002658:	607b      	str	r3, [r7, #4]
 800265a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800265c:	2301      	movs	r3, #1
 800265e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002660:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002664:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002666:	2302      	movs	r3, #2
 8002668:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800266a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800266e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002670:	2319      	movs	r3, #25
 8002672:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8002674:	23c0      	movs	r3, #192	@ 0xc0
 8002676:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002678:	2302      	movs	r3, #2
 800267a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800267c:	2304      	movs	r3, #4
 800267e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002680:	f107 0320 	add.w	r3, r7, #32
 8002684:	4618      	mov	r0, r3
 8002686:	f007 fb0d 	bl	8009ca4 <HAL_RCC_OscConfig>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d001      	beq.n	8002694 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002690:	f000 fd60 	bl	8003154 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002694:	230f      	movs	r3, #15
 8002696:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002698:	2302      	movs	r3, #2
 800269a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800269c:	2300      	movs	r3, #0
 800269e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80026a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80026a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80026a6:	2300      	movs	r3, #0
 80026a8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80026aa:	f107 030c 	add.w	r3, r7, #12
 80026ae:	2103      	movs	r1, #3
 80026b0:	4618      	mov	r0, r3
 80026b2:	f007 fd6f 	bl	800a194 <HAL_RCC_ClockConfig>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d001      	beq.n	80026c0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80026bc:	f000 fd4a 	bl	8003154 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80026c0:	f007 fe4e 	bl	800a360 <HAL_RCC_EnableCSS>
}
 80026c4:	bf00      	nop
 80026c6:	3750      	adds	r7, #80	@ 0x50
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	40023800 	.word	0x40023800
 80026d0:	40007000 	.word	0x40007000

080026d4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80026da:	463b      	mov	r3, r7
 80026dc:	2200      	movs	r2, #0
 80026de:	601a      	str	r2, [r3, #0]
 80026e0:	605a      	str	r2, [r3, #4]
 80026e2:	609a      	str	r2, [r3, #8]
 80026e4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80026e6:	4b59      	ldr	r3, [pc, #356]	@ (800284c <MX_ADC1_Init+0x178>)
 80026e8:	4a59      	ldr	r2, [pc, #356]	@ (8002850 <MX_ADC1_Init+0x17c>)
 80026ea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80026ec:	4b57      	ldr	r3, [pc, #348]	@ (800284c <MX_ADC1_Init+0x178>)
 80026ee:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80026f2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80026f4:	4b55      	ldr	r3, [pc, #340]	@ (800284c <MX_ADC1_Init+0x178>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80026fa:	4b54      	ldr	r3, [pc, #336]	@ (800284c <MX_ADC1_Init+0x178>)
 80026fc:	2201      	movs	r2, #1
 80026fe:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002700:	4b52      	ldr	r3, [pc, #328]	@ (800284c <MX_ADC1_Init+0x178>)
 8002702:	2200      	movs	r2, #0
 8002704:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002706:	4b51      	ldr	r3, [pc, #324]	@ (800284c <MX_ADC1_Init+0x178>)
 8002708:	2200      	movs	r2, #0
 800270a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800270e:	4b4f      	ldr	r3, [pc, #316]	@ (800284c <MX_ADC1_Init+0x178>)
 8002710:	2200      	movs	r2, #0
 8002712:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002714:	4b4d      	ldr	r3, [pc, #308]	@ (800284c <MX_ADC1_Init+0x178>)
 8002716:	4a4f      	ldr	r2, [pc, #316]	@ (8002854 <MX_ADC1_Init+0x180>)
 8002718:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800271a:	4b4c      	ldr	r3, [pc, #304]	@ (800284c <MX_ADC1_Init+0x178>)
 800271c:	2200      	movs	r2, #0
 800271e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 9;
 8002720:	4b4a      	ldr	r3, [pc, #296]	@ (800284c <MX_ADC1_Init+0x178>)
 8002722:	2209      	movs	r2, #9
 8002724:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002726:	4b49      	ldr	r3, [pc, #292]	@ (800284c <MX_ADC1_Init+0x178>)
 8002728:	2200      	movs	r2, #0
 800272a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800272e:	4b47      	ldr	r3, [pc, #284]	@ (800284c <MX_ADC1_Init+0x178>)
 8002730:	2201      	movs	r2, #1
 8002732:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002734:	4845      	ldr	r0, [pc, #276]	@ (800284c <MX_ADC1_Init+0x178>)
 8002736:	f001 f8c7 	bl	80038c8 <HAL_ADC_Init>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d001      	beq.n	8002744 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002740:	f000 fd08 	bl	8003154 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002744:	2301      	movs	r3, #1
 8002746:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002748:	2301      	movs	r3, #1
 800274a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800274c:	2303      	movs	r3, #3
 800274e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002750:	463b      	mov	r3, r7
 8002752:	4619      	mov	r1, r3
 8002754:	483d      	ldr	r0, [pc, #244]	@ (800284c <MX_ADC1_Init+0x178>)
 8002756:	f001 fb19 	bl	8003d8c <HAL_ADC_ConfigChannel>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d001      	beq.n	8002764 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002760:	f000 fcf8 	bl	8003154 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002764:	2302      	movs	r3, #2
 8002766:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8002768:	2302      	movs	r3, #2
 800276a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800276c:	463b      	mov	r3, r7
 800276e:	4619      	mov	r1, r3
 8002770:	4836      	ldr	r0, [pc, #216]	@ (800284c <MX_ADC1_Init+0x178>)
 8002772:	f001 fb0b 	bl	8003d8c <HAL_ADC_ConfigChannel>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d001      	beq.n	8002780 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800277c:	f000 fcea 	bl	8003154 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002780:	2303      	movs	r3, #3
 8002782:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8002784:	2303      	movs	r3, #3
 8002786:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002788:	463b      	mov	r3, r7
 800278a:	4619      	mov	r1, r3
 800278c:	482f      	ldr	r0, [pc, #188]	@ (800284c <MX_ADC1_Init+0x178>)
 800278e:	f001 fafd 	bl	8003d8c <HAL_ADC_ConfigChannel>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d001      	beq.n	800279c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8002798:	f000 fcdc 	bl	8003154 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800279c:	2304      	movs	r3, #4
 800279e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80027a0:	2304      	movs	r3, #4
 80027a2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80027a4:	463b      	mov	r3, r7
 80027a6:	4619      	mov	r1, r3
 80027a8:	4828      	ldr	r0, [pc, #160]	@ (800284c <MX_ADC1_Init+0x178>)
 80027aa:	f001 faef 	bl	8003d8c <HAL_ADC_ConfigChannel>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d001      	beq.n	80027b8 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80027b4:	f000 fcce 	bl	8003154 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80027b8:	2305      	movs	r3, #5
 80027ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80027bc:	2305      	movs	r3, #5
 80027be:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80027c0:	463b      	mov	r3, r7
 80027c2:	4619      	mov	r1, r3
 80027c4:	4821      	ldr	r0, [pc, #132]	@ (800284c <MX_ADC1_Init+0x178>)
 80027c6:	f001 fae1 	bl	8003d8c <HAL_ADC_ConfigChannel>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d001      	beq.n	80027d4 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 80027d0:	f000 fcc0 	bl	8003154 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80027d4:	2306      	movs	r3, #6
 80027d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80027d8:	2306      	movs	r3, #6
 80027da:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80027dc:	463b      	mov	r3, r7
 80027de:	4619      	mov	r1, r3
 80027e0:	481a      	ldr	r0, [pc, #104]	@ (800284c <MX_ADC1_Init+0x178>)
 80027e2:	f001 fad3 	bl	8003d8c <HAL_ADC_ConfigChannel>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d001      	beq.n	80027f0 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 80027ec:	f000 fcb2 	bl	8003154 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80027f0:	2307      	movs	r3, #7
 80027f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 80027f4:	2307      	movs	r3, #7
 80027f6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80027f8:	463b      	mov	r3, r7
 80027fa:	4619      	mov	r1, r3
 80027fc:	4813      	ldr	r0, [pc, #76]	@ (800284c <MX_ADC1_Init+0x178>)
 80027fe:	f001 fac5 	bl	8003d8c <HAL_ADC_ConfigChannel>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d001      	beq.n	800280c <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8002808:	f000 fca4 	bl	8003154 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800280c:	2308      	movs	r3, #8
 800280e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8002810:	2308      	movs	r3, #8
 8002812:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002814:	463b      	mov	r3, r7
 8002816:	4619      	mov	r1, r3
 8002818:	480c      	ldr	r0, [pc, #48]	@ (800284c <MX_ADC1_Init+0x178>)
 800281a:	f001 fab7 	bl	8003d8c <HAL_ADC_ConfigChannel>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8002824:	f000 fc96 	bl	8003154 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8002828:	2309      	movs	r3, #9
 800282a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 800282c:	2309      	movs	r3, #9
 800282e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002830:	463b      	mov	r3, r7
 8002832:	4619      	mov	r1, r3
 8002834:	4805      	ldr	r0, [pc, #20]	@ (800284c <MX_ADC1_Init+0x178>)
 8002836:	f001 faa9 	bl	8003d8c <HAL_ADC_ConfigChannel>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d001      	beq.n	8002844 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8002840:	f000 fc88 	bl	8003154 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002844:	bf00      	nop
 8002846:	3710      	adds	r7, #16
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}
 800284c:	20000828 	.word	0x20000828
 8002850:	40012000 	.word	0x40012000
 8002854:	0f000001 	.word	0x0f000001

08002858 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800285c:	4b12      	ldr	r3, [pc, #72]	@ (80028a8 <MX_I2C1_Init+0x50>)
 800285e:	4a13      	ldr	r2, [pc, #76]	@ (80028ac <MX_I2C1_Init+0x54>)
 8002860:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002862:	4b11      	ldr	r3, [pc, #68]	@ (80028a8 <MX_I2C1_Init+0x50>)
 8002864:	4a12      	ldr	r2, [pc, #72]	@ (80028b0 <MX_I2C1_Init+0x58>)
 8002866:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002868:	4b0f      	ldr	r3, [pc, #60]	@ (80028a8 <MX_I2C1_Init+0x50>)
 800286a:	2200      	movs	r2, #0
 800286c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800286e:	4b0e      	ldr	r3, [pc, #56]	@ (80028a8 <MX_I2C1_Init+0x50>)
 8002870:	2200      	movs	r2, #0
 8002872:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002874:	4b0c      	ldr	r3, [pc, #48]	@ (80028a8 <MX_I2C1_Init+0x50>)
 8002876:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800287a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800287c:	4b0a      	ldr	r3, [pc, #40]	@ (80028a8 <MX_I2C1_Init+0x50>)
 800287e:	2200      	movs	r2, #0
 8002880:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002882:	4b09      	ldr	r3, [pc, #36]	@ (80028a8 <MX_I2C1_Init+0x50>)
 8002884:	2200      	movs	r2, #0
 8002886:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002888:	4b07      	ldr	r3, [pc, #28]	@ (80028a8 <MX_I2C1_Init+0x50>)
 800288a:	2200      	movs	r2, #0
 800288c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800288e:	4b06      	ldr	r3, [pc, #24]	@ (80028a8 <MX_I2C1_Init+0x50>)
 8002890:	2200      	movs	r2, #0
 8002892:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002894:	4804      	ldr	r0, [pc, #16]	@ (80028a8 <MX_I2C1_Init+0x50>)
 8002896:	f002 fbd9 	bl	800504c <HAL_I2C_Init>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d001      	beq.n	80028a4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80028a0:	f000 fc58 	bl	8003154 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80028a4:	bf00      	nop
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	200008d0 	.word	0x200008d0
 80028ac:	40005400 	.word	0x40005400
 80028b0:	00061a80 	.word	0x00061a80

080028b4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b086      	sub	sp, #24
 80028b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028ba:	f107 0308 	add.w	r3, r7, #8
 80028be:	2200      	movs	r2, #0
 80028c0:	601a      	str	r2, [r3, #0]
 80028c2:	605a      	str	r2, [r3, #4]
 80028c4:	609a      	str	r2, [r3, #8]
 80028c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028c8:	463b      	mov	r3, r7
 80028ca:	2200      	movs	r2, #0
 80028cc:	601a      	str	r2, [r3, #0]
 80028ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80028d0:	4b1e      	ldr	r3, [pc, #120]	@ (800294c <MX_TIM1_Init+0x98>)
 80028d2:	4a1f      	ldr	r2, [pc, #124]	@ (8002950 <MX_TIM1_Init+0x9c>)
 80028d4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80028d6:	4b1d      	ldr	r3, [pc, #116]	@ (800294c <MX_TIM1_Init+0x98>)
 80028d8:	2200      	movs	r2, #0
 80028da:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028dc:	4b1b      	ldr	r3, [pc, #108]	@ (800294c <MX_TIM1_Init+0x98>)
 80028de:	2200      	movs	r2, #0
 80028e0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 23999;
 80028e2:	4b1a      	ldr	r3, [pc, #104]	@ (800294c <MX_TIM1_Init+0x98>)
 80028e4:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 80028e8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028ea:	4b18      	ldr	r3, [pc, #96]	@ (800294c <MX_TIM1_Init+0x98>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80028f0:	4b16      	ldr	r3, [pc, #88]	@ (800294c <MX_TIM1_Init+0x98>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028f6:	4b15      	ldr	r3, [pc, #84]	@ (800294c <MX_TIM1_Init+0x98>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80028fc:	4813      	ldr	r0, [pc, #76]	@ (800294c <MX_TIM1_Init+0x98>)
 80028fe:	f007 fe3c 	bl	800a57a <HAL_TIM_Base_Init>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d001      	beq.n	800290c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002908:	f000 fc24 	bl	8003154 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800290c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002910:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002912:	f107 0308 	add.w	r3, r7, #8
 8002916:	4619      	mov	r1, r3
 8002918:	480c      	ldr	r0, [pc, #48]	@ (800294c <MX_TIM1_Init+0x98>)
 800291a:	f008 f99b 	bl	800ac54 <HAL_TIM_ConfigClockSource>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d001      	beq.n	8002928 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002924:	f000 fc16 	bl	8003154 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002928:	2300      	movs	r3, #0
 800292a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800292c:	2300      	movs	r3, #0
 800292e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002930:	463b      	mov	r3, r7
 8002932:	4619      	mov	r1, r3
 8002934:	4805      	ldr	r0, [pc, #20]	@ (800294c <MX_TIM1_Init+0x98>)
 8002936:	f008 fd55 	bl	800b3e4 <HAL_TIMEx_MasterConfigSynchronization>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d001      	beq.n	8002944 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002940:	f000 fc08 	bl	8003154 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002944:	bf00      	nop
 8002946:	3718      	adds	r7, #24
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	200009e4 	.word	0x200009e4
 8002950:	40010000 	.word	0x40010000

08002954 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b08e      	sub	sp, #56	@ 0x38
 8002958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800295a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800295e:	2200      	movs	r2, #0
 8002960:	601a      	str	r2, [r3, #0]
 8002962:	605a      	str	r2, [r3, #4]
 8002964:	609a      	str	r2, [r3, #8]
 8002966:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002968:	f107 0320 	add.w	r3, r7, #32
 800296c:	2200      	movs	r2, #0
 800296e:	601a      	str	r2, [r3, #0]
 8002970:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002972:	1d3b      	adds	r3, r7, #4
 8002974:	2200      	movs	r2, #0
 8002976:	601a      	str	r2, [r3, #0]
 8002978:	605a      	str	r2, [r3, #4]
 800297a:	609a      	str	r2, [r3, #8]
 800297c:	60da      	str	r2, [r3, #12]
 800297e:	611a      	str	r2, [r3, #16]
 8002980:	615a      	str	r2, [r3, #20]
 8002982:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002984:	4b32      	ldr	r3, [pc, #200]	@ (8002a50 <MX_TIM3_Init+0xfc>)
 8002986:	4a33      	ldr	r2, [pc, #204]	@ (8002a54 <MX_TIM3_Init+0x100>)
 8002988:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15;
 800298a:	4b31      	ldr	r3, [pc, #196]	@ (8002a50 <MX_TIM3_Init+0xfc>)
 800298c:	220f      	movs	r2, #15
 800298e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002990:	4b2f      	ldr	r3, [pc, #188]	@ (8002a50 <MX_TIM3_Init+0xfc>)
 8002992:	2200      	movs	r2, #0
 8002994:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 59999;
 8002996:	4b2e      	ldr	r3, [pc, #184]	@ (8002a50 <MX_TIM3_Init+0xfc>)
 8002998:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 800299c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800299e:	4b2c      	ldr	r3, [pc, #176]	@ (8002a50 <MX_TIM3_Init+0xfc>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029a4:	4b2a      	ldr	r3, [pc, #168]	@ (8002a50 <MX_TIM3_Init+0xfc>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80029aa:	4829      	ldr	r0, [pc, #164]	@ (8002a50 <MX_TIM3_Init+0xfc>)
 80029ac:	f007 fde5 	bl	800a57a <HAL_TIM_Base_Init>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d001      	beq.n	80029ba <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80029b6:	f000 fbcd 	bl	8003154 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80029ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80029be:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80029c0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80029c4:	4619      	mov	r1, r3
 80029c6:	4822      	ldr	r0, [pc, #136]	@ (8002a50 <MX_TIM3_Init+0xfc>)
 80029c8:	f008 f944 	bl	800ac54 <HAL_TIM_ConfigClockSource>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d001      	beq.n	80029d6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80029d2:	f000 fbbf 	bl	8003154 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80029d6:	481e      	ldr	r0, [pc, #120]	@ (8002a50 <MX_TIM3_Init+0xfc>)
 80029d8:	f007 fe80 	bl	800a6dc <HAL_TIM_PWM_Init>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d001      	beq.n	80029e6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80029e2:	f000 fbb7 	bl	8003154 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029e6:	2300      	movs	r3, #0
 80029e8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029ea:	2300      	movs	r3, #0
 80029ec:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80029ee:	f107 0320 	add.w	r3, r7, #32
 80029f2:	4619      	mov	r1, r3
 80029f4:	4816      	ldr	r0, [pc, #88]	@ (8002a50 <MX_TIM3_Init+0xfc>)
 80029f6:	f008 fcf5 	bl	800b3e4 <HAL_TIMEx_MasterConfigSynchronization>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d001      	beq.n	8002a04 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002a00:	f000 fba8 	bl	8003154 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a04:	2360      	movs	r3, #96	@ 0x60
 8002a06:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a10:	2300      	movs	r3, #0
 8002a12:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a14:	1d3b      	adds	r3, r7, #4
 8002a16:	2200      	movs	r2, #0
 8002a18:	4619      	mov	r1, r3
 8002a1a:	480d      	ldr	r0, [pc, #52]	@ (8002a50 <MX_TIM3_Init+0xfc>)
 8002a1c:	f008 f858 	bl	800aad0 <HAL_TIM_PWM_ConfigChannel>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d001      	beq.n	8002a2a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8002a26:	f000 fb95 	bl	8003154 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002a2a:	1d3b      	adds	r3, r7, #4
 8002a2c:	2204      	movs	r2, #4
 8002a2e:	4619      	mov	r1, r3
 8002a30:	4807      	ldr	r0, [pc, #28]	@ (8002a50 <MX_TIM3_Init+0xfc>)
 8002a32:	f008 f84d 	bl	800aad0 <HAL_TIM_PWM_ConfigChannel>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d001      	beq.n	8002a40 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8002a3c:	f000 fb8a 	bl	8003154 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002a40:	4803      	ldr	r0, [pc, #12]	@ (8002a50 <MX_TIM3_Init+0xfc>)
 8002a42:	f000 fd5b 	bl	80034fc <HAL_TIM_MspPostInit>

}
 8002a46:	bf00      	nop
 8002a48:	3738      	adds	r7, #56	@ 0x38
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	20000a2c 	.word	0x20000a2c
 8002a54:	40000400 	.word	0x40000400

08002a58 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002a5e:	2300      	movs	r3, #0
 8002a60:	607b      	str	r3, [r7, #4]
 8002a62:	4b1b      	ldr	r3, [pc, #108]	@ (8002ad0 <MX_DMA_Init+0x78>)
 8002a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a66:	4a1a      	ldr	r2, [pc, #104]	@ (8002ad0 <MX_DMA_Init+0x78>)
 8002a68:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002a6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a6e:	4b18      	ldr	r3, [pc, #96]	@ (8002ad0 <MX_DMA_Init+0x78>)
 8002a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a76:	607b      	str	r3, [r7, #4]
 8002a78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	603b      	str	r3, [r7, #0]
 8002a7e:	4b14      	ldr	r3, [pc, #80]	@ (8002ad0 <MX_DMA_Init+0x78>)
 8002a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a82:	4a13      	ldr	r2, [pc, #76]	@ (8002ad0 <MX_DMA_Init+0x78>)
 8002a84:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002a88:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a8a:	4b11      	ldr	r3, [pc, #68]	@ (8002ad0 <MX_DMA_Init+0x78>)
 8002a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a8e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a92:	603b      	str	r3, [r7, #0]
 8002a94:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002a96:	2200      	movs	r2, #0
 8002a98:	2100      	movs	r1, #0
 8002a9a:	200b      	movs	r0, #11
 8002a9c:	f001 fd0b 	bl	80044b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002aa0:	200b      	movs	r0, #11
 8002aa2:	f001 fd24 	bl	80044ee <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	2100      	movs	r1, #0
 8002aaa:	200c      	movs	r0, #12
 8002aac:	f001 fd03 	bl	80044b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002ab0:	200c      	movs	r0, #12
 8002ab2:	f001 fd1c 	bl	80044ee <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	2100      	movs	r1, #0
 8002aba:	2038      	movs	r0, #56	@ 0x38
 8002abc:	f001 fcfb 	bl	80044b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002ac0:	2038      	movs	r0, #56	@ 0x38
 8002ac2:	f001 fd14 	bl	80044ee <HAL_NVIC_EnableIRQ>

}
 8002ac6:	bf00      	nop
 8002ac8:	3708      	adds	r7, #8
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	40023800 	.word	0x40023800

08002ad4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b08a      	sub	sp, #40	@ 0x28
 8002ad8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ada:	f107 0314 	add.w	r3, r7, #20
 8002ade:	2200      	movs	r2, #0
 8002ae0:	601a      	str	r2, [r3, #0]
 8002ae2:	605a      	str	r2, [r3, #4]
 8002ae4:	609a      	str	r2, [r3, #8]
 8002ae6:	60da      	str	r2, [r3, #12]
 8002ae8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002aea:	2300      	movs	r3, #0
 8002aec:	613b      	str	r3, [r7, #16]
 8002aee:	4b6e      	ldr	r3, [pc, #440]	@ (8002ca8 <MX_GPIO_Init+0x1d4>)
 8002af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002af2:	4a6d      	ldr	r2, [pc, #436]	@ (8002ca8 <MX_GPIO_Init+0x1d4>)
 8002af4:	f043 0304 	orr.w	r3, r3, #4
 8002af8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002afa:	4b6b      	ldr	r3, [pc, #428]	@ (8002ca8 <MX_GPIO_Init+0x1d4>)
 8002afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002afe:	f003 0304 	and.w	r3, r3, #4
 8002b02:	613b      	str	r3, [r7, #16]
 8002b04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002b06:	2300      	movs	r3, #0
 8002b08:	60fb      	str	r3, [r7, #12]
 8002b0a:	4b67      	ldr	r3, [pc, #412]	@ (8002ca8 <MX_GPIO_Init+0x1d4>)
 8002b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b0e:	4a66      	ldr	r2, [pc, #408]	@ (8002ca8 <MX_GPIO_Init+0x1d4>)
 8002b10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b14:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b16:	4b64      	ldr	r3, [pc, #400]	@ (8002ca8 <MX_GPIO_Init+0x1d4>)
 8002b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b1e:	60fb      	str	r3, [r7, #12]
 8002b20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b22:	2300      	movs	r3, #0
 8002b24:	60bb      	str	r3, [r7, #8]
 8002b26:	4b60      	ldr	r3, [pc, #384]	@ (8002ca8 <MX_GPIO_Init+0x1d4>)
 8002b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b2a:	4a5f      	ldr	r2, [pc, #380]	@ (8002ca8 <MX_GPIO_Init+0x1d4>)
 8002b2c:	f043 0301 	orr.w	r3, r3, #1
 8002b30:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b32:	4b5d      	ldr	r3, [pc, #372]	@ (8002ca8 <MX_GPIO_Init+0x1d4>)
 8002b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b36:	f003 0301 	and.w	r3, r3, #1
 8002b3a:	60bb      	str	r3, [r7, #8]
 8002b3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b3e:	2300      	movs	r3, #0
 8002b40:	607b      	str	r3, [r7, #4]
 8002b42:	4b59      	ldr	r3, [pc, #356]	@ (8002ca8 <MX_GPIO_Init+0x1d4>)
 8002b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b46:	4a58      	ldr	r2, [pc, #352]	@ (8002ca8 <MX_GPIO_Init+0x1d4>)
 8002b48:	f043 0302 	orr.w	r3, r3, #2
 8002b4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b4e:	4b56      	ldr	r3, [pc, #344]	@ (8002ca8 <MX_GPIO_Init+0x1d4>)
 8002b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b52:	f003 0302 	and.w	r3, r3, #2
 8002b56:	607b      	str	r3, [r7, #4]
 8002b58:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002b60:	4852      	ldr	r0, [pc, #328]	@ (8002cac <MX_GPIO_Init+0x1d8>)
 8002b62:	f002 fa27 	bl	8004fb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, M1_IN1_Pin|M1_IN2_Pin|M2_IN1_Pin, GPIO_PIN_RESET);
 8002b66:	2200      	movs	r2, #0
 8002b68:	f44f 4106 	mov.w	r1, #34304	@ 0x8600
 8002b6c:	4850      	ldr	r0, [pc, #320]	@ (8002cb0 <MX_GPIO_Init+0x1dc>)
 8002b6e:	f002 fa21 	bl	8004fb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(M2_IN2_GPIO_Port, M2_IN2_Pin, GPIO_PIN_RESET);
 8002b72:	2200      	movs	r2, #0
 8002b74:	2108      	movs	r1, #8
 8002b76:	484f      	ldr	r0, [pc, #316]	@ (8002cb4 <MX_GPIO_Init+0x1e0>)
 8002b78:	f002 fa1c 	bl	8004fb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8002b7c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002b80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b82:	2301      	movs	r3, #1
 8002b84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b86:	2300      	movs	r3, #0
 8002b88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8002b8e:	f107 0314 	add.w	r3, r7, #20
 8002b92:	4619      	mov	r1, r3
 8002b94:	4845      	ldr	r0, [pc, #276]	@ (8002cac <MX_GPIO_Init+0x1d8>)
 8002b96:	f002 f871 	bl	8004c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY_Pin */
  GPIO_InitStruct.Pin = KEY_Pin;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 8002ba6:	f107 0314 	add.w	r3, r7, #20
 8002baa:	4619      	mov	r1, r3
 8002bac:	4840      	ldr	r0, [pc, #256]	@ (8002cb0 <MX_GPIO_Init+0x1dc>)
 8002bae:	f002 f865 	bl	8004c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : ESP_RST_Pin */
  GPIO_InitStruct.Pin = ESP_RST_Pin;
 8002bb2:	2304      	movs	r3, #4
 8002bb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ESP_RST_GPIO_Port, &GPIO_InitStruct);
 8002bbe:	f107 0314 	add.w	r3, r7, #20
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	483b      	ldr	r0, [pc, #236]	@ (8002cb4 <MX_GPIO_Init+0x1e0>)
 8002bc6:	f002 f859 	bl	8004c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : M1_ENC_A_Pin */
  GPIO_InitStruct.Pin = M1_ENC_A_Pin;
 8002bca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002bce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002bd0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002bd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(M1_ENC_A_GPIO_Port, &GPIO_InitStruct);
 8002bda:	f107 0314 	add.w	r3, r7, #20
 8002bde:	4619      	mov	r1, r3
 8002be0:	4834      	ldr	r0, [pc, #208]	@ (8002cb4 <MX_GPIO_Init+0x1e0>)
 8002be2:	f002 f84b 	bl	8004c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002be6:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8002bea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bec:	2302      	movs	r3, #2
 8002bee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002bf8:	2305      	movs	r3, #5
 8002bfa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bfc:	f107 0314 	add.w	r3, r7, #20
 8002c00:	4619      	mov	r1, r3
 8002c02:	482c      	ldr	r0, [pc, #176]	@ (8002cb4 <MX_GPIO_Init+0x1e0>)
 8002c04:	f002 f83a 	bl	8004c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : M2_ENC_A_Pin */
  GPIO_InitStruct.Pin = M2_ENC_A_Pin;
 8002c08:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002c0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002c0e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002c12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c14:	2300      	movs	r3, #0
 8002c16:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(M2_ENC_A_GPIO_Port, &GPIO_InitStruct);
 8002c18:	f107 0314 	add.w	r3, r7, #20
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	4824      	ldr	r0, [pc, #144]	@ (8002cb0 <MX_GPIO_Init+0x1dc>)
 8002c20:	f002 f82c 	bl	8004c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : M1_IN1_Pin M1_IN2_Pin M2_IN1_Pin */
  GPIO_InitStruct.Pin = M1_IN1_Pin|M1_IN2_Pin|M2_IN1_Pin;
 8002c24:	f44f 4306 	mov.w	r3, #34304	@ 0x8600
 8002c28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c32:	2300      	movs	r3, #0
 8002c34:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c36:	f107 0314 	add.w	r3, r7, #20
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	481c      	ldr	r0, [pc, #112]	@ (8002cb0 <MX_GPIO_Init+0x1dc>)
 8002c3e:	f002 f81d 	bl	8004c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : M2_IN2_Pin */
  GPIO_InitStruct.Pin = M2_IN2_Pin;
 8002c42:	2308      	movs	r3, #8
 8002c44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c46:	2301      	movs	r3, #1
 8002c48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(M2_IN2_GPIO_Port, &GPIO_InitStruct);
 8002c52:	f107 0314 	add.w	r3, r7, #20
 8002c56:	4619      	mov	r1, r3
 8002c58:	4816      	ldr	r0, [pc, #88]	@ (8002cb4 <MX_GPIO_Init+0x1e0>)
 8002c5a:	f002 f80f 	bl	8004c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : ESP_RX_Pin ESP_TX_Pin */
  GPIO_InitStruct.Pin = ESP_RX_Pin|ESP_TX_Pin;
 8002c5e:	23c0      	movs	r3, #192	@ 0xc0
 8002c60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c62:	2302      	movs	r3, #2
 8002c64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c66:	2300      	movs	r3, #0
 8002c68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c6e:	2307      	movs	r3, #7
 8002c70:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c72:	f107 0314 	add.w	r3, r7, #20
 8002c76:	4619      	mov	r1, r3
 8002c78:	480e      	ldr	r0, [pc, #56]	@ (8002cb4 <MX_GPIO_Init+0x1e0>)
 8002c7a:	f001 ffff 	bl	8004c7c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002c7e:	2200      	movs	r2, #0
 8002c80:	2100      	movs	r1, #0
 8002c82:	2017      	movs	r0, #23
 8002c84:	f001 fc17 	bl	80044b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002c88:	2017      	movs	r0, #23
 8002c8a:	f001 fc30 	bl	80044ee <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002c8e:	2200      	movs	r2, #0
 8002c90:	2100      	movs	r1, #0
 8002c92:	2028      	movs	r0, #40	@ 0x28
 8002c94:	f001 fc0f 	bl	80044b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002c98:	2028      	movs	r0, #40	@ 0x28
 8002c9a:	f001 fc28 	bl	80044ee <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002c9e:	bf00      	nop
 8002ca0:	3728      	adds	r7, #40	@ 0x28
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	40023800 	.word	0x40023800
 8002cac:	40020800 	.word	0x40020800
 8002cb0:	40020000 	.word	0x40020000
 8002cb4:	40020400 	.word	0x40020400

08002cb8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
/* HAL CALLBACKS */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){ //			1/4000s
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b084      	sub	sp, #16
 8002cbc:	af02      	add	r7, sp, #8
 8002cbe:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1){
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a1a      	ldr	r2, [pc, #104]	@ (8002d30 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d123      	bne.n	8002d12 <HAL_TIM_PeriodElapsedCallback+0x5a>

		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&Analog.raw, 9);
 8002cca:	2209      	movs	r2, #9
 8002ccc:	4919      	ldr	r1, [pc, #100]	@ (8002d34 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002cce:	481a      	ldr	r0, [pc, #104]	@ (8002d38 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002cd0:	f000 ff4e 	bl	8003b70 <HAL_ADC_Start_DMA>
		is5ms--;
 8002cd4:	4b19      	ldr	r3, [pc, #100]	@ (8002d3c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	3b01      	subs	r3, #1
 8002cda:	b2da      	uxtb	r2, r3
 8002cdc:	4b17      	ldr	r3, [pc, #92]	@ (8002d3c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002cde:	701a      	strb	r2, [r3, #0]
		if(!is5ms){
 8002ce0:	4b16      	ldr	r3, [pc, #88]	@ (8002d3c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d114      	bne.n	8002d12 <HAL_TIM_PeriodElapsedCallback+0x5a>
			is5ms = 20;
 8002ce8:	4b14      	ldr	r3, [pc, #80]	@ (8002d3c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002cea:	2214      	movs	r2, #20
 8002cec:	701a      	strb	r2, [r3, #0]
			if(MPU6050.isInit){
 8002cee:	4b14      	ldr	r3, [pc, #80]	@ (8002d40 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002cf0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d00c      	beq.n	8002d12 <HAL_TIM_PeriodElapsedCallback+0x5a>
				HAL_I2C_Mem_Read_DMA(&hi2c1, MPU6050_ADDR, ACCEL_XOUT_REG, 1, MPU6050.data, 14);
 8002cf8:	230e      	movs	r3, #14
 8002cfa:	9301      	str	r3, [sp, #4]
 8002cfc:	4b11      	ldr	r3, [pc, #68]	@ (8002d44 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002cfe:	9300      	str	r3, [sp, #0]
 8002d00:	2301      	movs	r3, #1
 8002d02:	223b      	movs	r2, #59	@ 0x3b
 8002d04:	21d0      	movs	r1, #208	@ 0xd0
 8002d06:	4810      	ldr	r0, [pc, #64]	@ (8002d48 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002d08:	f003 f882 	bl	8005e10 <HAL_I2C_Mem_Read_DMA>
				Display_I2C_DMA_Ready(FALSE);
 8002d0c:	2000      	movs	r0, #0
 8002d0e:	f7fe f999 	bl	8001044 <Display_I2C_DMA_Ready>
			}
		}
	}
	if(htim->Instance == TIM3){
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a0d      	ldr	r2, [pc, #52]	@ (8002d4c <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d104      	bne.n	8002d26 <HAL_TIM_PeriodElapsedCallback+0x6e>
		IS10MS = TRUE;
 8002d1c:	4a0c      	ldr	r2, [pc, #48]	@ (8002d50 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002d1e:	7813      	ldrb	r3, [r2, #0]
 8002d20:	f043 0301 	orr.w	r3, r3, #1
 8002d24:	7013      	strb	r3, [r2, #0]

	}
}
 8002d26:	bf00      	nop
 8002d28:	3708      	adds	r7, #8
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	40010000 	.word	0x40010000
 8002d34:	20000f28 	.word	0x20000f28
 8002d38:	20000828 	.word	0x20000828
 8002d3c:	2000000a 	.word	0x2000000a
 8002d40:	20000acc 	.word	0x20000acc
 8002d44:	20000b02 	.word	0x20000b02
 8002d48:	200008d0 	.word	0x200008d0
 8002d4c:	40000400 	.word	0x40000400
 8002d50:	20000a78 	.word	0x20000a78

08002d54 <HAL_I2C_MemTxCpltCallback>:

void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c){
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
	if(hi2c->Devaddress == SSD1306_I2C_ADDR){
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d60:	2b78      	cmp	r3, #120	@ 0x78
 8002d62:	d102      	bne.n	8002d6a <HAL_I2C_MemTxCpltCallback+0x16>
		Display_I2C_DMA_Ready(TRUE);
 8002d64:	2001      	movs	r0, #1
 8002d66:	f7fe f96d 	bl	8001044 <Display_I2C_DMA_Ready>
	}
}
 8002d6a:	bf00      	nop
 8002d6c:	3708      	adds	r7, #8
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
	...

08002d74 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
	if(hi2c->Devaddress == MPU6050_ADDR){
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d80:	2bd0      	cmp	r3, #208	@ 0xd0
 8002d82:	d105      	bne.n	8002d90 <HAL_I2C_MemRxCpltCallback+0x1c>
		MPU6050_I2C_DMA_Cplt(&MPU6050);
 8002d84:	4804      	ldr	r0, [pc, #16]	@ (8002d98 <HAL_I2C_MemRxCpltCallback+0x24>)
 8002d86:	f7fd fedb 	bl	8000b40 <MPU6050_I2C_DMA_Cplt>
		Display_I2C_DMA_Ready(TRUE);
 8002d8a:	2001      	movs	r0, #1
 8002d8c:	f7fe f95a 	bl	8001044 <Display_I2C_DMA_Ready>
	}
}
 8002d90:	bf00      	nop
 8002d92:	3708      	adds	r7, #8
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	20000acc 	.word	0x20000acc

08002d9c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
	ADC_Conversion_Cplt(Analog.raw, Analog.value);
 8002da4:	4903      	ldr	r1, [pc, #12]	@ (8002db4 <HAL_ADC_ConvCpltCallback+0x18>)
 8002da6:	4804      	ldr	r0, [pc, #16]	@ (8002db8 <HAL_ADC_ConvCpltCallback+0x1c>)
 8002da8:	f7fd fc00 	bl	80005ac <ADC_Conversion_Cplt>
}
 8002dac:	bf00      	nop
 8002dae:	3708      	adds	r7, #8
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	20000f3a 	.word	0x20000f3a
 8002db8:	20000f28 	.word	0x20000f28

08002dbc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b082      	sub	sp, #8
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == M1_ENC_A_Pin){
 8002dc6:	88fb      	ldrh	r3, [r7, #6]
 8002dc8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002dcc:	d102      	bne.n	8002dd4 <HAL_GPIO_EXTI_Callback+0x18>
    	Encoder_Add_Pulse(&EncoderL);
 8002dce:	4807      	ldr	r0, [pc, #28]	@ (8002dec <HAL_GPIO_EXTI_Callback+0x30>)
 8002dd0:	f7fe fbfb 	bl	80015ca <Encoder_Add_Pulse>
    }
    if (GPIO_Pin == M2_ENC_A_Pin){
 8002dd4:	88fb      	ldrh	r3, [r7, #6]
 8002dd6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002dda:	d102      	bne.n	8002de2 <HAL_GPIO_EXTI_Callback+0x26>
    	Encoder_Add_Pulse(&EncoderR);
 8002ddc:	4804      	ldr	r0, [pc, #16]	@ (8002df0 <HAL_GPIO_EXTI_Callback+0x34>)
 8002dde:	f7fe fbf4 	bl	80015ca <Encoder_Add_Pulse>
	}
}
 8002de2:	bf00      	nop
 8002de4:	3708      	adds	r7, #8
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	20000ab4 	.word	0x20000ab4
 8002df0:	20000ac0 	.word	0x20000ac0

08002df4 <I2C_1_Abstract_Mem_DMA_Transmit>:
/* FIN HAL CALLBACKS */

e_system I2C_1_Abstract_Mem_DMA_Transmit(uint16_t Dev_Address, uint8_t reg, uint8_t *p_Data, uint16_t _Size){
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b086      	sub	sp, #24
 8002df8:	af02      	add	r7, sp, #8
 8002dfa:	60ba      	str	r2, [r7, #8]
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	4603      	mov	r3, r0
 8002e00:	81fb      	strh	r3, [r7, #14]
 8002e02:	460b      	mov	r3, r1
 8002e04:	737b      	strb	r3, [r7, #13]
 8002e06:	4613      	mov	r3, r2
 8002e08:	80fb      	strh	r3, [r7, #6]
	return (e_system)HAL_I2C_Mem_Write_DMA(&hi2c1, Dev_Address, reg, 1, p_Data, _Size);
 8002e0a:	7b7b      	ldrb	r3, [r7, #13]
 8002e0c:	b29a      	uxth	r2, r3
 8002e0e:	89f9      	ldrh	r1, [r7, #14]
 8002e10:	88fb      	ldrh	r3, [r7, #6]
 8002e12:	9301      	str	r3, [sp, #4]
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	9300      	str	r3, [sp, #0]
 8002e18:	2301      	movs	r3, #1
 8002e1a:	4804      	ldr	r0, [pc, #16]	@ (8002e2c <I2C_1_Abstract_Mem_DMA_Transmit+0x38>)
 8002e1c:	f002 fe9a 	bl	8005b54 <HAL_I2C_Mem_Write_DMA>
 8002e20:	4603      	mov	r3, r0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3710      	adds	r7, #16
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	200008d0 	.word	0x200008d0

08002e30 <I2C_1_Abstract_Master_Transmit_Blocking>:

e_system I2C_1_Abstract_Master_Transmit_Blocking(uint16_t Dev_Address, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout){
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b086      	sub	sp, #24
 8002e34:	af02      	add	r7, sp, #8
 8002e36:	60b9      	str	r1, [r7, #8]
 8002e38:	607b      	str	r3, [r7, #4]
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	81fb      	strh	r3, [r7, #14]
 8002e3e:	4613      	mov	r3, r2
 8002e40:	81bb      	strh	r3, [r7, #12]
	return (e_system)HAL_I2C_Master_Transmit(&hi2c1, Dev_Address, p_Data, _Size, _Timeout);
 8002e42:	89ba      	ldrh	r2, [r7, #12]
 8002e44:	89f9      	ldrh	r1, [r7, #14]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	9300      	str	r3, [sp, #0]
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	68ba      	ldr	r2, [r7, #8]
 8002e4e:	4804      	ldr	r0, [pc, #16]	@ (8002e60 <I2C_1_Abstract_Master_Transmit_Blocking+0x30>)
 8002e50:	f002 fa56 	bl	8005300 <HAL_I2C_Master_Transmit>
 8002e54:	4603      	mov	r3, r0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3710      	adds	r7, #16
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	200008d0 	.word	0x200008d0

08002e64 <I2C_1_Abstract_Mem_Write_Blocking>:

e_system I2C_1_Abstract_Mem_Write_Blocking(uint16_t Dev_Address, uint8_t Mem_Adress, uint8_t Mem_AddSize, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout){
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b086      	sub	sp, #24
 8002e68:	af04      	add	r7, sp, #16
 8002e6a:	603b      	str	r3, [r7, #0]
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	80fb      	strh	r3, [r7, #6]
 8002e70:	460b      	mov	r3, r1
 8002e72:	717b      	strb	r3, [r7, #5]
 8002e74:	4613      	mov	r3, r2
 8002e76:	713b      	strb	r3, [r7, #4]
	return HAL_I2C_Mem_Write(&hi2c1, Dev_Address, Mem_Adress, Mem_AddSize, p_Data, _Size, _Timeout);
 8002e78:	797b      	ldrb	r3, [r7, #5]
 8002e7a:	b29a      	uxth	r2, r3
 8002e7c:	793b      	ldrb	r3, [r7, #4]
 8002e7e:	b298      	uxth	r0, r3
 8002e80:	88f9      	ldrh	r1, [r7, #6]
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	9302      	str	r3, [sp, #8]
 8002e86:	8a3b      	ldrh	r3, [r7, #16]
 8002e88:	9301      	str	r3, [sp, #4]
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	9300      	str	r3, [sp, #0]
 8002e8e:	4603      	mov	r3, r0
 8002e90:	4803      	ldr	r0, [pc, #12]	@ (8002ea0 <I2C_1_Abstract_Mem_Write_Blocking+0x3c>)
 8002e92:	f002 fb33 	bl	80054fc <HAL_I2C_Mem_Write>
 8002e96:	4603      	mov	r3, r0
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3708      	adds	r7, #8
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	200008d0 	.word	0x200008d0

08002ea4 <I2C_1_Abstract_Mem_Read_Blocking>:

e_system I2C_1_Abstract_Mem_Read_Blocking(uint16_t Dev_Address, uint8_t Mem_Adress, uint8_t Mem_AddSize, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout){
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b086      	sub	sp, #24
 8002ea8:	af04      	add	r7, sp, #16
 8002eaa:	603b      	str	r3, [r7, #0]
 8002eac:	4603      	mov	r3, r0
 8002eae:	80fb      	strh	r3, [r7, #6]
 8002eb0:	460b      	mov	r3, r1
 8002eb2:	717b      	strb	r3, [r7, #5]
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	713b      	strb	r3, [r7, #4]
	return HAL_I2C_Mem_Read(&hi2c1, Dev_Address, Mem_Adress, Mem_AddSize, p_Data, _Size, _Timeout);
 8002eb8:	797b      	ldrb	r3, [r7, #5]
 8002eba:	b29a      	uxth	r2, r3
 8002ebc:	793b      	ldrb	r3, [r7, #4]
 8002ebe:	b298      	uxth	r0, r3
 8002ec0:	88f9      	ldrh	r1, [r7, #6]
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	9302      	str	r3, [sp, #8]
 8002ec6:	8a3b      	ldrh	r3, [r7, #16]
 8002ec8:	9301      	str	r3, [sp, #4]
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	9300      	str	r3, [sp, #0]
 8002ece:	4603      	mov	r3, r0
 8002ed0:	4803      	ldr	r0, [pc, #12]	@ (8002ee0 <I2C_1_Abstract_Mem_Read_Blocking+0x3c>)
 8002ed2:	f002 fc0d 	bl	80056f0 <HAL_I2C_Mem_Read>
 8002ed6:	4603      	mov	r3, r0
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3708      	adds	r7, #8
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	200008d0 	.word	0x200008d0

08002ee4 <KEY_Read_Value>:

uint8_t KEY_Read_Value(){
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin);
 8002ee8:	2101      	movs	r1, #1
 8002eea:	4803      	ldr	r0, [pc, #12]	@ (8002ef8 <KEY_Read_Value+0x14>)
 8002eec:	f002 f84a 	bl	8004f84 <HAL_GPIO_ReadPin>
 8002ef0:	4603      	mov	r3, r0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	40020000 	.word	0x40020000

08002efc <writeOn_USB>:

void writeOn_USB(s_commData *data){
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b082      	sub	sp, #8
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
	if(USB.data.Tx.write > USB.data.Tx.read){
 8002f04:	4b19      	ldr	r3, [pc, #100]	@ (8002f6c <writeOn_USB+0x70>)
 8002f06:	78da      	ldrb	r2, [r3, #3]
 8002f08:	4b18      	ldr	r3, [pc, #96]	@ (8002f6c <writeOn_USB+0x70>)
 8002f0a:	789b      	ldrb	r3, [r3, #2]
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d909      	bls.n	8002f24 <writeOn_USB+0x28>
		USB.bytesToTx = USB.data.Tx.write - USB.data.Tx.read;
 8002f10:	4b16      	ldr	r3, [pc, #88]	@ (8002f6c <writeOn_USB+0x70>)
 8002f12:	78da      	ldrb	r2, [r3, #3]
 8002f14:	4b15      	ldr	r3, [pc, #84]	@ (8002f6c <writeOn_USB+0x70>)
 8002f16:	789b      	ldrb	r3, [r3, #2]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	b2da      	uxtb	r2, r3
 8002f1c:	4b13      	ldr	r3, [pc, #76]	@ (8002f6c <writeOn_USB+0x70>)
 8002f1e:	f883 2230 	strb.w	r2, [r3, #560]	@ 0x230
 8002f22:	e006      	b.n	8002f32 <writeOn_USB+0x36>
	}else{
		USB.bytesToTx = RINGBUFFLENGTH - USB.data.Tx.read;
 8002f24:	4b11      	ldr	r3, [pc, #68]	@ (8002f6c <writeOn_USB+0x70>)
 8002f26:	789b      	ldrb	r3, [r3, #2]
 8002f28:	425b      	negs	r3, r3
 8002f2a:	b2da      	uxtb	r2, r3
 8002f2c:	4b0f      	ldr	r3, [pc, #60]	@ (8002f6c <writeOn_USB+0x70>)
 8002f2e:	f883 2230 	strb.w	r2, [r3, #560]	@ 0x230
	}
	if(CDC_Transmit_FS(&USB.data.Tx.buffer[USB.data.Tx.read], USB.bytesToTx) == USBD_OK){
 8002f32:	4b0e      	ldr	r3, [pc, #56]	@ (8002f6c <writeOn_USB+0x70>)
 8002f34:	789b      	ldrb	r3, [r3, #2]
 8002f36:	461a      	mov	r2, r3
 8002f38:	4b0c      	ldr	r3, [pc, #48]	@ (8002f6c <writeOn_USB+0x70>)
 8002f3a:	4413      	add	r3, r2
 8002f3c:	3304      	adds	r3, #4
 8002f3e:	4a0b      	ldr	r2, [pc, #44]	@ (8002f6c <writeOn_USB+0x70>)
 8002f40:	f892 2230 	ldrb.w	r2, [r2, #560]	@ 0x230
 8002f44:	4611      	mov	r1, r2
 8002f46:	4618      	mov	r0, r3
 8002f48:	f00b ff02 	bl	800ed50 <CDC_Transmit_FS>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d108      	bne.n	8002f64 <writeOn_USB+0x68>
		USB.data.Tx.read += USB.bytesToTx;
 8002f52:	4b06      	ldr	r3, [pc, #24]	@ (8002f6c <writeOn_USB+0x70>)
 8002f54:	789a      	ldrb	r2, [r3, #2]
 8002f56:	4b05      	ldr	r3, [pc, #20]	@ (8002f6c <writeOn_USB+0x70>)
 8002f58:	f893 3230 	ldrb.w	r3, [r3, #560]	@ 0x230
 8002f5c:	4413      	add	r3, r2
 8002f5e:	b2da      	uxtb	r2, r3
 8002f60:	4b02      	ldr	r3, [pc, #8]	@ (8002f6c <writeOn_USB+0x70>)
 8002f62:	709a      	strb	r2, [r3, #2]
	}
}
 8002f64:	bf00      	nop
 8002f66:	3708      	adds	r7, #8
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	20000f4c 	.word	0x20000f4c

08002f70 <dataRxOn_USB>:

void dataRxOn_USB(uint8_t *buff, uint32_t len){
 8002f70:	b480      	push	{r7}
 8002f72:	b085      	sub	sp, #20
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	6039      	str	r1, [r7, #0]
	if(buff != NULL){
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d01a      	beq.n	8002fb6 <dataRxOn_USB+0x46>
		for(uint16_t i = 0; i < len; i++){
 8002f80:	2300      	movs	r3, #0
 8002f82:	81fb      	strh	r3, [r7, #14]
 8002f84:	e013      	b.n	8002fae <dataRxOn_USB+0x3e>
			USB.data.Rx.buffer[USB.data.Rx.write++] = buff[i];
 8002f86:	89fb      	ldrh	r3, [r7, #14]
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	441a      	add	r2, r3
 8002f8c:	4b0d      	ldr	r3, [pc, #52]	@ (8002fc4 <dataRxOn_USB+0x54>)
 8002f8e:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 8002f92:	1c59      	adds	r1, r3, #1
 8002f94:	b2c8      	uxtb	r0, r1
 8002f96:	490b      	ldr	r1, [pc, #44]	@ (8002fc4 <dataRxOn_USB+0x54>)
 8002f98:	f881 0105 	strb.w	r0, [r1, #261]	@ 0x105
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	7812      	ldrb	r2, [r2, #0]
 8002fa0:	4b08      	ldr	r3, [pc, #32]	@ (8002fc4 <dataRxOn_USB+0x54>)
 8002fa2:	440b      	add	r3, r1
 8002fa4:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
		for(uint16_t i = 0; i < len; i++){
 8002fa8:	89fb      	ldrh	r3, [r7, #14]
 8002faa:	3301      	adds	r3, #1
 8002fac:	81fb      	strh	r3, [r7, #14]
 8002fae:	89fb      	ldrh	r3, [r7, #14]
 8002fb0:	683a      	ldr	r2, [r7, #0]
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d8e7      	bhi.n	8002f86 <dataRxOn_USB+0x16>
		}
	}
}
 8002fb6:	bf00      	nop
 8002fb8:	3714      	adds	r7, #20
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop
 8002fc4:	20000f4c 	.word	0x20000f4c

08002fc8 <Motor_Left_SetPins>:

void Motor_Left_SetPins(e_direction direction){
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	4603      	mov	r3, r0
 8002fd0:	71fb      	strb	r3, [r7, #7]
	switch(direction){
 8002fd2:	79fb      	ldrb	r3, [r7, #7]
 8002fd4:	2b04      	cmp	r3, #4
 8002fd6:	d842      	bhi.n	800305e <Motor_Left_SetPins+0x96>
 8002fd8:	a201      	add	r2, pc, #4	@ (adr r2, 8002fe0 <Motor_Left_SetPins+0x18>)
 8002fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fde:	bf00      	nop
 8002fe0:	0800305d 	.word	0x0800305d
 8002fe4:	08002ff5 	.word	0x08002ff5
 8002fe8:	0800300f 	.word	0x0800300f
 8002fec:	08003029 	.word	0x08003029
 8002ff0:	08003043 	.word	0x08003043
	case NO_INIT:
		break;
	case FREE_WHEEL:
		HAL_GPIO_WritePin(M1_IN1_GPIO_Port, M1_IN1_Pin, 0);
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002ffa:	481b      	ldr	r0, [pc, #108]	@ (8003068 <Motor_Left_SetPins+0xa0>)
 8002ffc:	f001 ffda 	bl	8004fb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M1_IN2_GPIO_Port, M1_IN2_Pin, 0);
 8003000:	2200      	movs	r2, #0
 8003002:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003006:	4818      	ldr	r0, [pc, #96]	@ (8003068 <Motor_Left_SetPins+0xa0>)
 8003008:	f001 ffd4 	bl	8004fb4 <HAL_GPIO_WritePin>
		break;
 800300c:	e027      	b.n	800305e <Motor_Left_SetPins+0x96>
	case FORWARD:
		HAL_GPIO_WritePin(M1_IN1_GPIO_Port, M1_IN1_Pin, 1);
 800300e:	2201      	movs	r2, #1
 8003010:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003014:	4814      	ldr	r0, [pc, #80]	@ (8003068 <Motor_Left_SetPins+0xa0>)
 8003016:	f001 ffcd 	bl	8004fb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M1_IN2_GPIO_Port, M1_IN2_Pin, 0);
 800301a:	2200      	movs	r2, #0
 800301c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003020:	4811      	ldr	r0, [pc, #68]	@ (8003068 <Motor_Left_SetPins+0xa0>)
 8003022:	f001 ffc7 	bl	8004fb4 <HAL_GPIO_WritePin>
		break;
 8003026:	e01a      	b.n	800305e <Motor_Left_SetPins+0x96>
	case BACKWARD:
		HAL_GPIO_WritePin(M1_IN1_GPIO_Port, M1_IN1_Pin, 0);
 8003028:	2200      	movs	r2, #0
 800302a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800302e:	480e      	ldr	r0, [pc, #56]	@ (8003068 <Motor_Left_SetPins+0xa0>)
 8003030:	f001 ffc0 	bl	8004fb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M1_IN2_GPIO_Port, M1_IN2_Pin, 1);
 8003034:	2201      	movs	r2, #1
 8003036:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800303a:	480b      	ldr	r0, [pc, #44]	@ (8003068 <Motor_Left_SetPins+0xa0>)
 800303c:	f001 ffba 	bl	8004fb4 <HAL_GPIO_WritePin>
		break;
 8003040:	e00d      	b.n	800305e <Motor_Left_SetPins+0x96>
	case BRAKE:
		HAL_GPIO_WritePin(M1_IN1_GPIO_Port, M1_IN1_Pin, 1);
 8003042:	2201      	movs	r2, #1
 8003044:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003048:	4807      	ldr	r0, [pc, #28]	@ (8003068 <Motor_Left_SetPins+0xa0>)
 800304a:	f001 ffb3 	bl	8004fb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M1_IN2_GPIO_Port, M1_IN2_Pin, 1);
 800304e:	2201      	movs	r2, #1
 8003050:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003054:	4804      	ldr	r0, [pc, #16]	@ (8003068 <Motor_Left_SetPins+0xa0>)
 8003056:	f001 ffad 	bl	8004fb4 <HAL_GPIO_WritePin>
		break;
 800305a:	e000      	b.n	800305e <Motor_Left_SetPins+0x96>
		break;
 800305c:	bf00      	nop
	}
}
 800305e:	bf00      	nop
 8003060:	3708      	adds	r7, #8
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	40020000 	.word	0x40020000

0800306c <Motor_Right_SetPins>:

void Motor_Right_SetPins(e_direction direction){
 800306c:	b580      	push	{r7, lr}
 800306e:	b082      	sub	sp, #8
 8003070:	af00      	add	r7, sp, #0
 8003072:	4603      	mov	r3, r0
 8003074:	71fb      	strb	r3, [r7, #7]
	switch(direction){
 8003076:	79fb      	ldrb	r3, [r7, #7]
 8003078:	2b04      	cmp	r3, #4
 800307a:	d83f      	bhi.n	80030fc <Motor_Right_SetPins+0x90>
 800307c:	a201      	add	r2, pc, #4	@ (adr r2, 8003084 <Motor_Right_SetPins+0x18>)
 800307e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003082:	bf00      	nop
 8003084:	080030fb 	.word	0x080030fb
 8003088:	08003099 	.word	0x08003099
 800308c:	080030b1 	.word	0x080030b1
 8003090:	080030c9 	.word	0x080030c9
 8003094:	080030e3 	.word	0x080030e3
	case NO_INIT:
		break;
	case FREE_WHEEL:
		HAL_GPIO_WritePin(M2_IN1_GPIO_Port, M2_IN1_Pin, 0);
 8003098:	2200      	movs	r2, #0
 800309a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800309e:	4819      	ldr	r0, [pc, #100]	@ (8003104 <Motor_Right_SetPins+0x98>)
 80030a0:	f001 ff88 	bl	8004fb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M2_IN2_GPIO_Port, M2_IN2_Pin, 0);
 80030a4:	2200      	movs	r2, #0
 80030a6:	2108      	movs	r1, #8
 80030a8:	4817      	ldr	r0, [pc, #92]	@ (8003108 <Motor_Right_SetPins+0x9c>)
 80030aa:	f001 ff83 	bl	8004fb4 <HAL_GPIO_WritePin>
		break;
 80030ae:	e025      	b.n	80030fc <Motor_Right_SetPins+0x90>
	case FORWARD:
		HAL_GPIO_WritePin(M2_IN1_GPIO_Port, M2_IN1_Pin, 1);
 80030b0:	2201      	movs	r2, #1
 80030b2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80030b6:	4813      	ldr	r0, [pc, #76]	@ (8003104 <Motor_Right_SetPins+0x98>)
 80030b8:	f001 ff7c 	bl	8004fb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M2_IN2_GPIO_Port, M2_IN2_Pin, 0);
 80030bc:	2200      	movs	r2, #0
 80030be:	2108      	movs	r1, #8
 80030c0:	4811      	ldr	r0, [pc, #68]	@ (8003108 <Motor_Right_SetPins+0x9c>)
 80030c2:	f001 ff77 	bl	8004fb4 <HAL_GPIO_WritePin>
		break;
 80030c6:	e019      	b.n	80030fc <Motor_Right_SetPins+0x90>
	case BACKWARD:
		HAL_GPIO_WritePin(M2_IN1_GPIO_Port, M2_IN1_Pin, 0);
 80030c8:	2200      	movs	r2, #0
 80030ca:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80030ce:	480d      	ldr	r0, [pc, #52]	@ (8003104 <Motor_Right_SetPins+0x98>)
 80030d0:	f001 ff70 	bl	8004fb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M2_IN2_GPIO_Port, M1_IN2_Pin, 1);
 80030d4:	2201      	movs	r2, #1
 80030d6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80030da:	480b      	ldr	r0, [pc, #44]	@ (8003108 <Motor_Right_SetPins+0x9c>)
 80030dc:	f001 ff6a 	bl	8004fb4 <HAL_GPIO_WritePin>
		break;
 80030e0:	e00c      	b.n	80030fc <Motor_Right_SetPins+0x90>
	case BRAKE:
		HAL_GPIO_WritePin(M2_IN1_GPIO_Port, M2_IN1_Pin, 1);
 80030e2:	2201      	movs	r2, #1
 80030e4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80030e8:	4806      	ldr	r0, [pc, #24]	@ (8003104 <Motor_Right_SetPins+0x98>)
 80030ea:	f001 ff63 	bl	8004fb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M2_IN2_GPIO_Port, M2_IN2_Pin, 1);
 80030ee:	2201      	movs	r2, #1
 80030f0:	2108      	movs	r1, #8
 80030f2:	4805      	ldr	r0, [pc, #20]	@ (8003108 <Motor_Right_SetPins+0x9c>)
 80030f4:	f001 ff5e 	bl	8004fb4 <HAL_GPIO_WritePin>
		break;
 80030f8:	e000      	b.n	80030fc <Motor_Right_SetPins+0x90>
		break;
 80030fa:	bf00      	nop
	}
}
 80030fc:	bf00      	nop
 80030fe:	3708      	adds	r7, #8
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}
 8003104:	40020000 	.word	0x40020000
 8003108:	40020400 	.word	0x40020400

0800310c <Motor_Left_SetPWM>:

void Motor_Left_SetPWM(uint16_t dCycle){
 800310c:	b480      	push	{r7}
 800310e:	b083      	sub	sp, #12
 8003110:	af00      	add	r7, sp, #0
 8003112:	4603      	mov	r3, r0
 8003114:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, dCycle);
 8003116:	4b05      	ldr	r3, [pc, #20]	@ (800312c <Motor_Left_SetPWM+0x20>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	88fa      	ldrh	r2, [r7, #6]
 800311c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800311e:	bf00      	nop
 8003120:	370c      	adds	r7, #12
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr
 800312a:	bf00      	nop
 800312c:	20000a2c 	.word	0x20000a2c

08003130 <Motor_Right_SetPWM>:

void Motor_Right_SetPWM(uint16_t dCycle){
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	4603      	mov	r3, r0
 8003138:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, dCycle);
 800313a:	4b05      	ldr	r3, [pc, #20]	@ (8003150 <Motor_Right_SetPWM+0x20>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	88fa      	ldrh	r2, [r7, #6]
 8003140:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8003142:	bf00      	nop
 8003144:	370c      	adds	r7, #12
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop
 8003150:	20000a2c 	.word	0x20000a2c

08003154 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003154:	b480      	push	{r7}
 8003156:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003158:	b672      	cpsid	i
}
 800315a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800315c:	bf00      	nop
 800315e:	e7fd      	b.n	800315c <Error_Handler+0x8>

08003160 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b082      	sub	sp, #8
 8003164:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003166:	2300      	movs	r3, #0
 8003168:	607b      	str	r3, [r7, #4]
 800316a:	4b13      	ldr	r3, [pc, #76]	@ (80031b8 <HAL_MspInit+0x58>)
 800316c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800316e:	4a12      	ldr	r2, [pc, #72]	@ (80031b8 <HAL_MspInit+0x58>)
 8003170:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003174:	6453      	str	r3, [r2, #68]	@ 0x44
 8003176:	4b10      	ldr	r3, [pc, #64]	@ (80031b8 <HAL_MspInit+0x58>)
 8003178:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800317a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800317e:	607b      	str	r3, [r7, #4]
 8003180:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003182:	2300      	movs	r3, #0
 8003184:	603b      	str	r3, [r7, #0]
 8003186:	4b0c      	ldr	r3, [pc, #48]	@ (80031b8 <HAL_MspInit+0x58>)
 8003188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800318a:	4a0b      	ldr	r2, [pc, #44]	@ (80031b8 <HAL_MspInit+0x58>)
 800318c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003190:	6413      	str	r3, [r2, #64]	@ 0x40
 8003192:	4b09      	ldr	r3, [pc, #36]	@ (80031b8 <HAL_MspInit+0x58>)
 8003194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003196:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800319a:	603b      	str	r3, [r7, #0]
 800319c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 0, 0);
 800319e:	2200      	movs	r2, #0
 80031a0:	2100      	movs	r1, #0
 80031a2:	2051      	movs	r0, #81	@ 0x51
 80031a4:	f001 f987 	bl	80044b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 80031a8:	2051      	movs	r0, #81	@ 0x51
 80031aa:	f001 f9a0 	bl	80044ee <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80031ae:	bf00      	nop
 80031b0:	3708      	adds	r7, #8
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	40023800 	.word	0x40023800

080031bc <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b08a      	sub	sp, #40	@ 0x28
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031c4:	f107 0314 	add.w	r3, r7, #20
 80031c8:	2200      	movs	r2, #0
 80031ca:	601a      	str	r2, [r3, #0]
 80031cc:	605a      	str	r2, [r3, #4]
 80031ce:	609a      	str	r2, [r3, #8]
 80031d0:	60da      	str	r2, [r3, #12]
 80031d2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a40      	ldr	r2, [pc, #256]	@ (80032dc <HAL_ADC_MspInit+0x120>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d179      	bne.n	80032d2 <HAL_ADC_MspInit+0x116>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80031de:	2300      	movs	r3, #0
 80031e0:	613b      	str	r3, [r7, #16]
 80031e2:	4b3f      	ldr	r3, [pc, #252]	@ (80032e0 <HAL_ADC_MspInit+0x124>)
 80031e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031e6:	4a3e      	ldr	r2, [pc, #248]	@ (80032e0 <HAL_ADC_MspInit+0x124>)
 80031e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80031ee:	4b3c      	ldr	r3, [pc, #240]	@ (80032e0 <HAL_ADC_MspInit+0x124>)
 80031f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031f6:	613b      	str	r3, [r7, #16]
 80031f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031fa:	2300      	movs	r3, #0
 80031fc:	60fb      	str	r3, [r7, #12]
 80031fe:	4b38      	ldr	r3, [pc, #224]	@ (80032e0 <HAL_ADC_MspInit+0x124>)
 8003200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003202:	4a37      	ldr	r2, [pc, #220]	@ (80032e0 <HAL_ADC_MspInit+0x124>)
 8003204:	f043 0301 	orr.w	r3, r3, #1
 8003208:	6313      	str	r3, [r2, #48]	@ 0x30
 800320a:	4b35      	ldr	r3, [pc, #212]	@ (80032e0 <HAL_ADC_MspInit+0x124>)
 800320c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800320e:	f003 0301 	and.w	r3, r3, #1
 8003212:	60fb      	str	r3, [r7, #12]
 8003214:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003216:	2300      	movs	r3, #0
 8003218:	60bb      	str	r3, [r7, #8]
 800321a:	4b31      	ldr	r3, [pc, #196]	@ (80032e0 <HAL_ADC_MspInit+0x124>)
 800321c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800321e:	4a30      	ldr	r2, [pc, #192]	@ (80032e0 <HAL_ADC_MspInit+0x124>)
 8003220:	f043 0302 	orr.w	r3, r3, #2
 8003224:	6313      	str	r3, [r2, #48]	@ 0x30
 8003226:	4b2e      	ldr	r3, [pc, #184]	@ (80032e0 <HAL_ADC_MspInit+0x124>)
 8003228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800322a:	f003 0302 	and.w	r3, r3, #2
 800322e:	60bb      	str	r3, [r7, #8]
 8003230:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = LF1_Pin|LF2_Pin|LF3_Pin|LF4_Pin
 8003232:	23fe      	movs	r3, #254	@ 0xfe
 8003234:	617b      	str	r3, [r7, #20]
                          |WD1_Pin|WD2_Pin|WD3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003236:	2303      	movs	r3, #3
 8003238:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800323a:	2300      	movs	r3, #0
 800323c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800323e:	f107 0314 	add.w	r3, r7, #20
 8003242:	4619      	mov	r1, r3
 8003244:	4827      	ldr	r0, [pc, #156]	@ (80032e4 <HAL_ADC_MspInit+0x128>)
 8003246:	f001 fd19 	bl	8004c7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = WD4_Pin|BAT_LVL_Pin;
 800324a:	2303      	movs	r3, #3
 800324c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800324e:	2303      	movs	r3, #3
 8003250:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003252:	2300      	movs	r3, #0
 8003254:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003256:	f107 0314 	add.w	r3, r7, #20
 800325a:	4619      	mov	r1, r3
 800325c:	4822      	ldr	r0, [pc, #136]	@ (80032e8 <HAL_ADC_MspInit+0x12c>)
 800325e:	f001 fd0d 	bl	8004c7c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8003262:	4b22      	ldr	r3, [pc, #136]	@ (80032ec <HAL_ADC_MspInit+0x130>)
 8003264:	4a22      	ldr	r2, [pc, #136]	@ (80032f0 <HAL_ADC_MspInit+0x134>)
 8003266:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003268:	4b20      	ldr	r3, [pc, #128]	@ (80032ec <HAL_ADC_MspInit+0x130>)
 800326a:	2200      	movs	r2, #0
 800326c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800326e:	4b1f      	ldr	r3, [pc, #124]	@ (80032ec <HAL_ADC_MspInit+0x130>)
 8003270:	2200      	movs	r2, #0
 8003272:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003274:	4b1d      	ldr	r3, [pc, #116]	@ (80032ec <HAL_ADC_MspInit+0x130>)
 8003276:	2200      	movs	r2, #0
 8003278:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800327a:	4b1c      	ldr	r3, [pc, #112]	@ (80032ec <HAL_ADC_MspInit+0x130>)
 800327c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003280:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003282:	4b1a      	ldr	r3, [pc, #104]	@ (80032ec <HAL_ADC_MspInit+0x130>)
 8003284:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003288:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800328a:	4b18      	ldr	r3, [pc, #96]	@ (80032ec <HAL_ADC_MspInit+0x130>)
 800328c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003290:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8003292:	4b16      	ldr	r3, [pc, #88]	@ (80032ec <HAL_ADC_MspInit+0x130>)
 8003294:	2200      	movs	r2, #0
 8003296:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003298:	4b14      	ldr	r3, [pc, #80]	@ (80032ec <HAL_ADC_MspInit+0x130>)
 800329a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800329e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80032a0:	4b12      	ldr	r3, [pc, #72]	@ (80032ec <HAL_ADC_MspInit+0x130>)
 80032a2:	2200      	movs	r2, #0
 80032a4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80032a6:	4811      	ldr	r0, [pc, #68]	@ (80032ec <HAL_ADC_MspInit+0x130>)
 80032a8:	f001 f93c 	bl	8004524 <HAL_DMA_Init>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d001      	beq.n	80032b6 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 80032b2:	f7ff ff4f 	bl	8003154 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a0c      	ldr	r2, [pc, #48]	@ (80032ec <HAL_ADC_MspInit+0x130>)
 80032ba:	639a      	str	r2, [r3, #56]	@ 0x38
 80032bc:	4a0b      	ldr	r2, [pc, #44]	@ (80032ec <HAL_ADC_MspInit+0x130>)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80032c2:	2200      	movs	r2, #0
 80032c4:	2100      	movs	r1, #0
 80032c6:	2012      	movs	r0, #18
 80032c8:	f001 f8f5 	bl	80044b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80032cc:	2012      	movs	r0, #18
 80032ce:	f001 f90e 	bl	80044ee <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80032d2:	bf00      	nop
 80032d4:	3728      	adds	r7, #40	@ 0x28
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	40012000 	.word	0x40012000
 80032e0:	40023800 	.word	0x40023800
 80032e4:	40020000 	.word	0x40020000
 80032e8:	40020400 	.word	0x40020400
 80032ec:	20000870 	.word	0x20000870
 80032f0:	40026410 	.word	0x40026410

080032f4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b08a      	sub	sp, #40	@ 0x28
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032fc:	f107 0314 	add.w	r3, r7, #20
 8003300:	2200      	movs	r2, #0
 8003302:	601a      	str	r2, [r3, #0]
 8003304:	605a      	str	r2, [r3, #4]
 8003306:	609a      	str	r2, [r3, #8]
 8003308:	60da      	str	r2, [r3, #12]
 800330a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a50      	ldr	r2, [pc, #320]	@ (8003454 <HAL_I2C_MspInit+0x160>)
 8003312:	4293      	cmp	r3, r2
 8003314:	f040 8099 	bne.w	800344a <HAL_I2C_MspInit+0x156>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003318:	2300      	movs	r3, #0
 800331a:	613b      	str	r3, [r7, #16]
 800331c:	4b4e      	ldr	r3, [pc, #312]	@ (8003458 <HAL_I2C_MspInit+0x164>)
 800331e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003320:	4a4d      	ldr	r2, [pc, #308]	@ (8003458 <HAL_I2C_MspInit+0x164>)
 8003322:	f043 0302 	orr.w	r3, r3, #2
 8003326:	6313      	str	r3, [r2, #48]	@ 0x30
 8003328:	4b4b      	ldr	r3, [pc, #300]	@ (8003458 <HAL_I2C_MspInit+0x164>)
 800332a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800332c:	f003 0302 	and.w	r3, r3, #2
 8003330:	613b      	str	r3, [r7, #16]
 8003332:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 8003334:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003338:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800333a:	2312      	movs	r3, #18
 800333c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800333e:	2300      	movs	r3, #0
 8003340:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003342:	2303      	movs	r3, #3
 8003344:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003346:	2304      	movs	r3, #4
 8003348:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800334a:	f107 0314 	add.w	r3, r7, #20
 800334e:	4619      	mov	r1, r3
 8003350:	4842      	ldr	r0, [pc, #264]	@ (800345c <HAL_I2C_MspInit+0x168>)
 8003352:	f001 fc93 	bl	8004c7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003356:	2300      	movs	r3, #0
 8003358:	60fb      	str	r3, [r7, #12]
 800335a:	4b3f      	ldr	r3, [pc, #252]	@ (8003458 <HAL_I2C_MspInit+0x164>)
 800335c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800335e:	4a3e      	ldr	r2, [pc, #248]	@ (8003458 <HAL_I2C_MspInit+0x164>)
 8003360:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003364:	6413      	str	r3, [r2, #64]	@ 0x40
 8003366:	4b3c      	ldr	r3, [pc, #240]	@ (8003458 <HAL_I2C_MspInit+0x164>)
 8003368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800336a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800336e:	60fb      	str	r3, [r7, #12]
 8003370:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 8003372:	4b3b      	ldr	r3, [pc, #236]	@ (8003460 <HAL_I2C_MspInit+0x16c>)
 8003374:	4a3b      	ldr	r2, [pc, #236]	@ (8003464 <HAL_I2C_MspInit+0x170>)
 8003376:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 8003378:	4b39      	ldr	r3, [pc, #228]	@ (8003460 <HAL_I2C_MspInit+0x16c>)
 800337a:	2200      	movs	r2, #0
 800337c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800337e:	4b38      	ldr	r3, [pc, #224]	@ (8003460 <HAL_I2C_MspInit+0x16c>)
 8003380:	2240      	movs	r2, #64	@ 0x40
 8003382:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003384:	4b36      	ldr	r3, [pc, #216]	@ (8003460 <HAL_I2C_MspInit+0x16c>)
 8003386:	2200      	movs	r2, #0
 8003388:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800338a:	4b35      	ldr	r3, [pc, #212]	@ (8003460 <HAL_I2C_MspInit+0x16c>)
 800338c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003390:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003392:	4b33      	ldr	r3, [pc, #204]	@ (8003460 <HAL_I2C_MspInit+0x16c>)
 8003394:	2200      	movs	r2, #0
 8003396:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003398:	4b31      	ldr	r3, [pc, #196]	@ (8003460 <HAL_I2C_MspInit+0x16c>)
 800339a:	2200      	movs	r2, #0
 800339c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800339e:	4b30      	ldr	r3, [pc, #192]	@ (8003460 <HAL_I2C_MspInit+0x16c>)
 80033a0:	2200      	movs	r2, #0
 80033a2:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80033a4:	4b2e      	ldr	r3, [pc, #184]	@ (8003460 <HAL_I2C_MspInit+0x16c>)
 80033a6:	2200      	movs	r2, #0
 80033a8:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80033aa:	4b2d      	ldr	r3, [pc, #180]	@ (8003460 <HAL_I2C_MspInit+0x16c>)
 80033ac:	2200      	movs	r2, #0
 80033ae:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80033b0:	482b      	ldr	r0, [pc, #172]	@ (8003460 <HAL_I2C_MspInit+0x16c>)
 80033b2:	f001 f8b7 	bl	8004524 <HAL_DMA_Init>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d001      	beq.n	80033c0 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 80033bc:	f7ff feca 	bl	8003154 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	4a27      	ldr	r2, [pc, #156]	@ (8003460 <HAL_I2C_MspInit+0x16c>)
 80033c4:	635a      	str	r2, [r3, #52]	@ 0x34
 80033c6:	4a26      	ldr	r2, [pc, #152]	@ (8003460 <HAL_I2C_MspInit+0x16c>)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80033cc:	4b26      	ldr	r3, [pc, #152]	@ (8003468 <HAL_I2C_MspInit+0x174>)
 80033ce:	4a27      	ldr	r2, [pc, #156]	@ (800346c <HAL_I2C_MspInit+0x178>)
 80033d0:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80033d2:	4b25      	ldr	r3, [pc, #148]	@ (8003468 <HAL_I2C_MspInit+0x174>)
 80033d4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80033d8:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80033da:	4b23      	ldr	r3, [pc, #140]	@ (8003468 <HAL_I2C_MspInit+0x174>)
 80033dc:	2200      	movs	r2, #0
 80033de:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80033e0:	4b21      	ldr	r3, [pc, #132]	@ (8003468 <HAL_I2C_MspInit+0x174>)
 80033e2:	2200      	movs	r2, #0
 80033e4:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80033e6:	4b20      	ldr	r3, [pc, #128]	@ (8003468 <HAL_I2C_MspInit+0x174>)
 80033e8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80033ec:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80033ee:	4b1e      	ldr	r3, [pc, #120]	@ (8003468 <HAL_I2C_MspInit+0x174>)
 80033f0:	2200      	movs	r2, #0
 80033f2:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80033f4:	4b1c      	ldr	r3, [pc, #112]	@ (8003468 <HAL_I2C_MspInit+0x174>)
 80033f6:	2200      	movs	r2, #0
 80033f8:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80033fa:	4b1b      	ldr	r3, [pc, #108]	@ (8003468 <HAL_I2C_MspInit+0x174>)
 80033fc:	2200      	movs	r2, #0
 80033fe:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003400:	4b19      	ldr	r3, [pc, #100]	@ (8003468 <HAL_I2C_MspInit+0x174>)
 8003402:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003406:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003408:	4b17      	ldr	r3, [pc, #92]	@ (8003468 <HAL_I2C_MspInit+0x174>)
 800340a:	2200      	movs	r2, #0
 800340c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800340e:	4816      	ldr	r0, [pc, #88]	@ (8003468 <HAL_I2C_MspInit+0x174>)
 8003410:	f001 f888 	bl	8004524 <HAL_DMA_Init>
 8003414:	4603      	mov	r3, r0
 8003416:	2b00      	cmp	r3, #0
 8003418:	d001      	beq.n	800341e <HAL_I2C_MspInit+0x12a>
    {
      Error_Handler();
 800341a:	f7ff fe9b 	bl	8003154 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4a11      	ldr	r2, [pc, #68]	@ (8003468 <HAL_I2C_MspInit+0x174>)
 8003422:	639a      	str	r2, [r3, #56]	@ 0x38
 8003424:	4a10      	ldr	r2, [pc, #64]	@ (8003468 <HAL_I2C_MspInit+0x174>)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800342a:	2200      	movs	r2, #0
 800342c:	2100      	movs	r1, #0
 800342e:	201f      	movs	r0, #31
 8003430:	f001 f841 	bl	80044b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003434:	201f      	movs	r0, #31
 8003436:	f001 f85a 	bl	80044ee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800343a:	2200      	movs	r2, #0
 800343c:	2100      	movs	r1, #0
 800343e:	2020      	movs	r0, #32
 8003440:	f001 f839 	bl	80044b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8003444:	2020      	movs	r0, #32
 8003446:	f001 f852 	bl	80044ee <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800344a:	bf00      	nop
 800344c:	3728      	adds	r7, #40	@ 0x28
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	40005400 	.word	0x40005400
 8003458:	40023800 	.word	0x40023800
 800345c:	40020400 	.word	0x40020400
 8003460:	20000924 	.word	0x20000924
 8003464:	40026028 	.word	0x40026028
 8003468:	20000984 	.word	0x20000984
 800346c:	40026010 	.word	0x40026010

08003470 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b084      	sub	sp, #16
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a1c      	ldr	r2, [pc, #112]	@ (80034f0 <HAL_TIM_Base_MspInit+0x80>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d116      	bne.n	80034b0 <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003482:	2300      	movs	r3, #0
 8003484:	60fb      	str	r3, [r7, #12]
 8003486:	4b1b      	ldr	r3, [pc, #108]	@ (80034f4 <HAL_TIM_Base_MspInit+0x84>)
 8003488:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800348a:	4a1a      	ldr	r2, [pc, #104]	@ (80034f4 <HAL_TIM_Base_MspInit+0x84>)
 800348c:	f043 0301 	orr.w	r3, r3, #1
 8003490:	6453      	str	r3, [r2, #68]	@ 0x44
 8003492:	4b18      	ldr	r3, [pc, #96]	@ (80034f4 <HAL_TIM_Base_MspInit+0x84>)
 8003494:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003496:	f003 0301 	and.w	r3, r3, #1
 800349a:	60fb      	str	r3, [r7, #12]
 800349c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800349e:	2200      	movs	r2, #0
 80034a0:	2100      	movs	r1, #0
 80034a2:	2019      	movs	r0, #25
 80034a4:	f001 f807 	bl	80044b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80034a8:	2019      	movs	r0, #25
 80034aa:	f001 f820 	bl	80044ee <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 80034ae:	e01a      	b.n	80034e6 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a10      	ldr	r2, [pc, #64]	@ (80034f8 <HAL_TIM_Base_MspInit+0x88>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d115      	bne.n	80034e6 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80034ba:	2300      	movs	r3, #0
 80034bc:	60bb      	str	r3, [r7, #8]
 80034be:	4b0d      	ldr	r3, [pc, #52]	@ (80034f4 <HAL_TIM_Base_MspInit+0x84>)
 80034c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034c2:	4a0c      	ldr	r2, [pc, #48]	@ (80034f4 <HAL_TIM_Base_MspInit+0x84>)
 80034c4:	f043 0302 	orr.w	r3, r3, #2
 80034c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80034ca:	4b0a      	ldr	r3, [pc, #40]	@ (80034f4 <HAL_TIM_Base_MspInit+0x84>)
 80034cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ce:	f003 0302 	and.w	r3, r3, #2
 80034d2:	60bb      	str	r3, [r7, #8]
 80034d4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80034d6:	2200      	movs	r2, #0
 80034d8:	2100      	movs	r1, #0
 80034da:	201d      	movs	r0, #29
 80034dc:	f000 ffeb 	bl	80044b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80034e0:	201d      	movs	r0, #29
 80034e2:	f001 f804 	bl	80044ee <HAL_NVIC_EnableIRQ>
}
 80034e6:	bf00      	nop
 80034e8:	3710      	adds	r7, #16
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	40010000 	.word	0x40010000
 80034f4:	40023800 	.word	0x40023800
 80034f8:	40000400 	.word	0x40000400

080034fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b088      	sub	sp, #32
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003504:	f107 030c 	add.w	r3, r7, #12
 8003508:	2200      	movs	r2, #0
 800350a:	601a      	str	r2, [r3, #0]
 800350c:	605a      	str	r2, [r3, #4]
 800350e:	609a      	str	r2, [r3, #8]
 8003510:	60da      	str	r2, [r3, #12]
 8003512:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a12      	ldr	r2, [pc, #72]	@ (8003564 <HAL_TIM_MspPostInit+0x68>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d11d      	bne.n	800355a <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800351e:	2300      	movs	r3, #0
 8003520:	60bb      	str	r3, [r7, #8]
 8003522:	4b11      	ldr	r3, [pc, #68]	@ (8003568 <HAL_TIM_MspPostInit+0x6c>)
 8003524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003526:	4a10      	ldr	r2, [pc, #64]	@ (8003568 <HAL_TIM_MspPostInit+0x6c>)
 8003528:	f043 0302 	orr.w	r3, r3, #2
 800352c:	6313      	str	r3, [r2, #48]	@ 0x30
 800352e:	4b0e      	ldr	r3, [pc, #56]	@ (8003568 <HAL_TIM_MspPostInit+0x6c>)
 8003530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003532:	f003 0302 	and.w	r3, r3, #2
 8003536:	60bb      	str	r3, [r7, #8]
 8003538:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = M1_PWM_Pin|M2_PWM_Pin;
 800353a:	2330      	movs	r3, #48	@ 0x30
 800353c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800353e:	2302      	movs	r3, #2
 8003540:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003542:	2300      	movs	r3, #0
 8003544:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003546:	2300      	movs	r3, #0
 8003548:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800354a:	2302      	movs	r3, #2
 800354c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800354e:	f107 030c 	add.w	r3, r7, #12
 8003552:	4619      	mov	r1, r3
 8003554:	4805      	ldr	r0, [pc, #20]	@ (800356c <HAL_TIM_MspPostInit+0x70>)
 8003556:	f001 fb91 	bl	8004c7c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800355a:	bf00      	nop
 800355c:	3720      	adds	r7, #32
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	40000400 	.word	0x40000400
 8003568:	40023800 	.word	0x40023800
 800356c:	40020400 	.word	0x40020400

08003570 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8003574:	f006 ffe6 	bl	800a544 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003578:	bf00      	nop
 800357a:	e7fd      	b.n	8003578 <NMI_Handler+0x8>

0800357c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800357c:	b480      	push	{r7}
 800357e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003580:	bf00      	nop
 8003582:	e7fd      	b.n	8003580 <HardFault_Handler+0x4>

08003584 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003584:	b480      	push	{r7}
 8003586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003588:	bf00      	nop
 800358a:	e7fd      	b.n	8003588 <MemManage_Handler+0x4>

0800358c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800358c:	b480      	push	{r7}
 800358e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003590:	bf00      	nop
 8003592:	e7fd      	b.n	8003590 <BusFault_Handler+0x4>

08003594 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003594:	b480      	push	{r7}
 8003596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003598:	bf00      	nop
 800359a:	e7fd      	b.n	8003598 <UsageFault_Handler+0x4>

0800359c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800359c:	b480      	push	{r7}
 800359e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80035a0:	bf00      	nop
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr

080035aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80035aa:	b480      	push	{r7}
 80035ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80035ae:	bf00      	nop
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr

080035b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80035b8:	b480      	push	{r7}
 80035ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80035bc:	bf00      	nop
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr

080035c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80035c6:	b580      	push	{r7, lr}
 80035c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80035ca:	f000 f939 	bl	8003840 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80035ce:	bf00      	nop
 80035d0:	bd80      	pop	{r7, pc}
	...

080035d4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80035d8:	4802      	ldr	r0, [pc, #8]	@ (80035e4 <DMA1_Stream0_IRQHandler+0x10>)
 80035da:	f001 f8cb 	bl	8004774 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80035de:	bf00      	nop
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	bf00      	nop
 80035e4:	20000984 	.word	0x20000984

080035e8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80035ec:	4802      	ldr	r0, [pc, #8]	@ (80035f8 <DMA1_Stream1_IRQHandler+0x10>)
 80035ee:	f001 f8c1 	bl	8004774 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80035f2:	bf00      	nop
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	20000924 	.word	0x20000924

080035fc <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003600:	4802      	ldr	r0, [pc, #8]	@ (800360c <ADC_IRQHandler+0x10>)
 8003602:	f000 f9a4 	bl	800394e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8003606:	bf00      	nop
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	20000828 	.word	0x20000828

08003610 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(M2_ENC_A_Pin);
 8003614:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8003618:	f001 fd00 	bl	800501c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800361c:	bf00      	nop
 800361e:	bd80      	pop	{r7, pc}

08003620 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003624:	4802      	ldr	r0, [pc, #8]	@ (8003630 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003626:	f007 f963 	bl	800a8f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800362a:	bf00      	nop
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	200009e4 	.word	0x200009e4

08003634 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003638:	4802      	ldr	r0, [pc, #8]	@ (8003644 <TIM3_IRQHandler+0x10>)
 800363a:	f007 f959 	bl	800a8f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800363e:	bf00      	nop
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	20000a2c 	.word	0x20000a2c

08003648 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800364c:	4802      	ldr	r0, [pc, #8]	@ (8003658 <I2C1_EV_IRQHandler+0x10>)
 800364e:	f002 fe9d 	bl	800638c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8003652:	bf00      	nop
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	200008d0 	.word	0x200008d0

0800365c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8003660:	4802      	ldr	r0, [pc, #8]	@ (800366c <I2C1_ER_IRQHandler+0x10>)
 8003662:	f003 f804 	bl	800666e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8003666:	bf00      	nop
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	200008d0 	.word	0x200008d0

08003670 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(M1_ENC_A_Pin);
 8003674:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8003678:	f001 fcd0 	bl	800501c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800367c:	bf00      	nop
 800367e:	bd80      	pop	{r7, pc}

08003680 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003684:	4802      	ldr	r0, [pc, #8]	@ (8003690 <DMA2_Stream0_IRQHandler+0x10>)
 8003686:	f001 f875 	bl	8004774 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800368a:	bf00      	nop
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	20000870 	.word	0x20000870

08003694 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003698:	4802      	ldr	r0, [pc, #8]	@ (80036a4 <OTG_FS_IRQHandler+0x10>)
 800369a:	f005 f9f4 	bl	8008a86 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800369e:	bf00      	nop
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	20001a70 	.word	0x20001a70

080036a8 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 80036a8:	b480      	push	{r7}
 80036aa:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 80036ac:	bf00      	nop
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr
	...

080036b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b086      	sub	sp, #24
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80036c0:	4a14      	ldr	r2, [pc, #80]	@ (8003714 <_sbrk+0x5c>)
 80036c2:	4b15      	ldr	r3, [pc, #84]	@ (8003718 <_sbrk+0x60>)
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80036cc:	4b13      	ldr	r3, [pc, #76]	@ (800371c <_sbrk+0x64>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d102      	bne.n	80036da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80036d4:	4b11      	ldr	r3, [pc, #68]	@ (800371c <_sbrk+0x64>)
 80036d6:	4a12      	ldr	r2, [pc, #72]	@ (8003720 <_sbrk+0x68>)
 80036d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80036da:	4b10      	ldr	r3, [pc, #64]	@ (800371c <_sbrk+0x64>)
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4413      	add	r3, r2
 80036e2:	693a      	ldr	r2, [r7, #16]
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d207      	bcs.n	80036f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80036e8:	f00b ffbe 	bl	800f668 <__errno>
 80036ec:	4603      	mov	r3, r0
 80036ee:	220c      	movs	r2, #12
 80036f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80036f2:	f04f 33ff 	mov.w	r3, #4294967295
 80036f6:	e009      	b.n	800370c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80036f8:	4b08      	ldr	r3, [pc, #32]	@ (800371c <_sbrk+0x64>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80036fe:	4b07      	ldr	r3, [pc, #28]	@ (800371c <_sbrk+0x64>)
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4413      	add	r3, r2
 8003706:	4a05      	ldr	r2, [pc, #20]	@ (800371c <_sbrk+0x64>)
 8003708:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800370a:	68fb      	ldr	r3, [r7, #12]
}
 800370c:	4618      	mov	r0, r3
 800370e:	3718      	adds	r7, #24
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}
 8003714:	20020000 	.word	0x20020000
 8003718:	00000400 	.word	0x00000400
 800371c:	20001184 	.word	0x20001184
 8003720:	200022c0 	.word	0x200022c0

08003724 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003724:	b480      	push	{r7}
 8003726:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003728:	4b06      	ldr	r3, [pc, #24]	@ (8003744 <SystemInit+0x20>)
 800372a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800372e:	4a05      	ldr	r2, [pc, #20]	@ (8003744 <SystemInit+0x20>)
 8003730:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003734:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003738:	bf00      	nop
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr
 8003742:	bf00      	nop
 8003744:	e000ed00 	.word	0xe000ed00

08003748 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003748:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003780 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800374c:	f7ff ffea 	bl	8003724 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003750:	480c      	ldr	r0, [pc, #48]	@ (8003784 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003752:	490d      	ldr	r1, [pc, #52]	@ (8003788 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003754:	4a0d      	ldr	r2, [pc, #52]	@ (800378c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003756:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003758:	e002      	b.n	8003760 <LoopCopyDataInit>

0800375a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800375a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800375c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800375e:	3304      	adds	r3, #4

08003760 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003760:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003762:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003764:	d3f9      	bcc.n	800375a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003766:	4a0a      	ldr	r2, [pc, #40]	@ (8003790 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003768:	4c0a      	ldr	r4, [pc, #40]	@ (8003794 <LoopFillZerobss+0x22>)
  movs r3, #0
 800376a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800376c:	e001      	b.n	8003772 <LoopFillZerobss>

0800376e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800376e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003770:	3204      	adds	r2, #4

08003772 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003772:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003774:	d3fb      	bcc.n	800376e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003776:	f00b ff7d 	bl	800f674 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800377a:	f7fe fe01 	bl	8002380 <main>
  bx  lr    
 800377e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003780:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003784:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003788:	20000160 	.word	0x20000160
  ldr r2, =_sidata
 800378c:	080111b8 	.word	0x080111b8
  ldr r2, =_sbss
 8003790:	20000160 	.word	0x20000160
  ldr r4, =_ebss
 8003794:	200022bc 	.word	0x200022bc

08003798 <DMA1_Stream2_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003798:	e7fe      	b.n	8003798 <DMA1_Stream2_IRQHandler>
	...

0800379c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80037a0:	4b0e      	ldr	r3, [pc, #56]	@ (80037dc <HAL_Init+0x40>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a0d      	ldr	r2, [pc, #52]	@ (80037dc <HAL_Init+0x40>)
 80037a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80037aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80037ac:	4b0b      	ldr	r3, [pc, #44]	@ (80037dc <HAL_Init+0x40>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a0a      	ldr	r2, [pc, #40]	@ (80037dc <HAL_Init+0x40>)
 80037b2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80037b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80037b8:	4b08      	ldr	r3, [pc, #32]	@ (80037dc <HAL_Init+0x40>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a07      	ldr	r2, [pc, #28]	@ (80037dc <HAL_Init+0x40>)
 80037be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037c4:	2003      	movs	r0, #3
 80037c6:	f000 fe6b 	bl	80044a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80037ca:	200f      	movs	r0, #15
 80037cc:	f000 f808 	bl	80037e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80037d0:	f7ff fcc6 	bl	8003160 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	bf00      	nop
 80037dc:	40023c00 	.word	0x40023c00

080037e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b082      	sub	sp, #8
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80037e8:	4b12      	ldr	r3, [pc, #72]	@ (8003834 <HAL_InitTick+0x54>)
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	4b12      	ldr	r3, [pc, #72]	@ (8003838 <HAL_InitTick+0x58>)
 80037ee:	781b      	ldrb	r3, [r3, #0]
 80037f0:	4619      	mov	r1, r3
 80037f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80037f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80037fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80037fe:	4618      	mov	r0, r3
 8003800:	f000 fe83 	bl	800450a <HAL_SYSTICK_Config>
 8003804:	4603      	mov	r3, r0
 8003806:	2b00      	cmp	r3, #0
 8003808:	d001      	beq.n	800380e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e00e      	b.n	800382c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2b0f      	cmp	r3, #15
 8003812:	d80a      	bhi.n	800382a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003814:	2200      	movs	r2, #0
 8003816:	6879      	ldr	r1, [r7, #4]
 8003818:	f04f 30ff 	mov.w	r0, #4294967295
 800381c:	f000 fe4b 	bl	80044b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003820:	4a06      	ldr	r2, [pc, #24]	@ (800383c <HAL_InitTick+0x5c>)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003826:	2300      	movs	r3, #0
 8003828:	e000      	b.n	800382c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
}
 800382c:	4618      	mov	r0, r3
 800382e:	3708      	adds	r7, #8
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}
 8003834:	2000000c 	.word	0x2000000c
 8003838:	20000014 	.word	0x20000014
 800383c:	20000010 	.word	0x20000010

08003840 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003840:	b480      	push	{r7}
 8003842:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003844:	4b06      	ldr	r3, [pc, #24]	@ (8003860 <HAL_IncTick+0x20>)
 8003846:	781b      	ldrb	r3, [r3, #0]
 8003848:	461a      	mov	r2, r3
 800384a:	4b06      	ldr	r3, [pc, #24]	@ (8003864 <HAL_IncTick+0x24>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4413      	add	r3, r2
 8003850:	4a04      	ldr	r2, [pc, #16]	@ (8003864 <HAL_IncTick+0x24>)
 8003852:	6013      	str	r3, [r2, #0]
}
 8003854:	bf00      	nop
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr
 800385e:	bf00      	nop
 8003860:	20000014 	.word	0x20000014
 8003864:	20001188 	.word	0x20001188

08003868 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003868:	b480      	push	{r7}
 800386a:	af00      	add	r7, sp, #0
  return uwTick;
 800386c:	4b03      	ldr	r3, [pc, #12]	@ (800387c <HAL_GetTick+0x14>)
 800386e:	681b      	ldr	r3, [r3, #0]
}
 8003870:	4618      	mov	r0, r3
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr
 800387a:	bf00      	nop
 800387c:	20001188 	.word	0x20001188

08003880 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b084      	sub	sp, #16
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003888:	f7ff ffee 	bl	8003868 <HAL_GetTick>
 800388c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003898:	d005      	beq.n	80038a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800389a:	4b0a      	ldr	r3, [pc, #40]	@ (80038c4 <HAL_Delay+0x44>)
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	461a      	mov	r2, r3
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	4413      	add	r3, r2
 80038a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80038a6:	bf00      	nop
 80038a8:	f7ff ffde 	bl	8003868 <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	68fa      	ldr	r2, [r7, #12]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d8f7      	bhi.n	80038a8 <HAL_Delay+0x28>
  {
  }
}
 80038b8:	bf00      	nop
 80038ba:	bf00      	nop
 80038bc:	3710      	adds	r7, #16
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	20000014 	.word	0x20000014

080038c8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038d0:	2300      	movs	r3, #0
 80038d2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d101      	bne.n	80038de <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e033      	b.n	8003946 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d109      	bne.n	80038fa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f7ff fc68 	bl	80031bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038fe:	f003 0310 	and.w	r3, r3, #16
 8003902:	2b00      	cmp	r3, #0
 8003904:	d118      	bne.n	8003938 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800390a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800390e:	f023 0302 	bic.w	r3, r3, #2
 8003912:	f043 0202 	orr.w	r2, r3, #2
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f000 fb68 	bl	8003ff0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800392a:	f023 0303 	bic.w	r3, r3, #3
 800392e:	f043 0201 	orr.w	r2, r3, #1
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	641a      	str	r2, [r3, #64]	@ 0x40
 8003936:	e001      	b.n	800393c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003944:	7bfb      	ldrb	r3, [r7, #15]
}
 8003946:	4618      	mov	r0, r3
 8003948:	3710      	adds	r7, #16
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}

0800394e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800394e:	b580      	push	{r7, lr}
 8003950:	b086      	sub	sp, #24
 8003952:	af00      	add	r7, sp, #0
 8003954:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003956:	2300      	movs	r3, #0
 8003958:	617b      	str	r3, [r7, #20]
 800395a:	2300      	movs	r3, #0
 800395c:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	f003 0302 	and.w	r3, r3, #2
 8003974:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	f003 0320 	and.w	r3, r3, #32
 800397c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d049      	beq.n	8003a18 <HAL_ADC_IRQHandler+0xca>
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d046      	beq.n	8003a18 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800398e:	f003 0310 	and.w	r3, r3, #16
 8003992:	2b00      	cmp	r3, #0
 8003994:	d105      	bne.n	80039a2 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800399a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d12b      	bne.n	8003a08 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d127      	bne.n	8003a08 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039be:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d006      	beq.n	80039d4 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d119      	bne.n	8003a08 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	685a      	ldr	r2, [r3, #4]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f022 0220 	bic.w	r2, r2, #32
 80039e2:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d105      	bne.n	8003a08 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a00:	f043 0201 	orr.w	r2, r3, #1
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	f7ff f9c7 	bl	8002d9c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f06f 0212 	mvn.w	r2, #18
 8003a16:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f003 0304 	and.w	r3, r3, #4
 8003a1e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a26:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d057      	beq.n	8003ade <HAL_ADC_IRQHandler+0x190>
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d054      	beq.n	8003ade <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a38:	f003 0310 	and.w	r3, r3, #16
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d105      	bne.n	8003a4c <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a44:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d139      	bne.n	8003ace <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a60:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d006      	beq.n	8003a76 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d12b      	bne.n	8003ace <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d124      	bne.n	8003ace <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d11d      	bne.n	8003ace <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d119      	bne.n	8003ace <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	685a      	ldr	r2, [r3, #4]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003aa8:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aae:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d105      	bne.n	8003ace <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ac6:	f043 0201 	orr.w	r2, r3, #1
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 fc0c 	bl	80042ec <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f06f 020c 	mvn.w	r2, #12
 8003adc:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	f003 0301 	and.w	r3, r3, #1
 8003ae4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003aec:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d017      	beq.n	8003b24 <HAL_ADC_IRQHandler+0x1d6>
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d014      	beq.n	8003b24 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 0301 	and.w	r3, r3, #1
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d10d      	bne.n	8003b24 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b0c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f000 f925 	bl	8003d64 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f06f 0201 	mvn.w	r2, #1
 8003b22:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f003 0320 	and.w	r3, r3, #32
 8003b2a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003b32:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d015      	beq.n	8003b66 <HAL_ADC_IRQHandler+0x218>
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d012      	beq.n	8003b66 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b44:	f043 0202 	orr.w	r2, r3, #2
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f06f 0220 	mvn.w	r2, #32
 8003b54:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f000 f90e 	bl	8003d78 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f06f 0220 	mvn.w	r2, #32
 8003b64:	601a      	str	r2, [r3, #0]
  }
}
 8003b66:	bf00      	nop
 8003b68:	3718      	adds	r7, #24
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
	...

08003b70 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b086      	sub	sp, #24
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	60b9      	str	r1, [r7, #8]
 8003b7a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d101      	bne.n	8003b8e <HAL_ADC_Start_DMA+0x1e>
 8003b8a:	2302      	movs	r3, #2
 8003b8c:	e0ce      	b.n	8003d2c <HAL_ADC_Start_DMA+0x1bc>
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2201      	movs	r2, #1
 8003b92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	f003 0301 	and.w	r3, r3, #1
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d018      	beq.n	8003bd6 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	689a      	ldr	r2, [r3, #8]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f042 0201 	orr.w	r2, r2, #1
 8003bb2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003bb4:	4b5f      	ldr	r3, [pc, #380]	@ (8003d34 <HAL_ADC_Start_DMA+0x1c4>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a5f      	ldr	r2, [pc, #380]	@ (8003d38 <HAL_ADC_Start_DMA+0x1c8>)
 8003bba:	fba2 2303 	umull	r2, r3, r2, r3
 8003bbe:	0c9a      	lsrs	r2, r3, #18
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	005b      	lsls	r3, r3, #1
 8003bc4:	4413      	add	r3, r2
 8003bc6:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8003bc8:	e002      	b.n	8003bd0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	3b01      	subs	r3, #1
 8003bce:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d1f9      	bne.n	8003bca <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003be0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003be4:	d107      	bne.n	8003bf6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	689a      	ldr	r2, [r3, #8]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003bf4:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	f003 0301 	and.w	r3, r3, #1
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	f040 8086 	bne.w	8003d12 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c0a:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003c0e:	f023 0301 	bic.w	r3, r3, #1
 8003c12:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d007      	beq.n	8003c38 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c2c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003c30:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c3c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c44:	d106      	bne.n	8003c54 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c4a:	f023 0206 	bic.w	r2, r3, #6
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	645a      	str	r2, [r3, #68]	@ 0x44
 8003c52:	e002      	b.n	8003c5a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2200      	movs	r2, #0
 8003c58:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003c62:	4b36      	ldr	r3, [pc, #216]	@ (8003d3c <HAL_ADC_Start_DMA+0x1cc>)
 8003c64:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c6a:	4a35      	ldr	r2, [pc, #212]	@ (8003d40 <HAL_ADC_Start_DMA+0x1d0>)
 8003c6c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c72:	4a34      	ldr	r2, [pc, #208]	@ (8003d44 <HAL_ADC_Start_DMA+0x1d4>)
 8003c74:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c7a:	4a33      	ldr	r2, [pc, #204]	@ (8003d48 <HAL_ADC_Start_DMA+0x1d8>)
 8003c7c:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003c86:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	685a      	ldr	r2, [r3, #4]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8003c96:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	689a      	ldr	r2, [r3, #8]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ca6:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	334c      	adds	r3, #76	@ 0x4c
 8003cb2:	4619      	mov	r1, r3
 8003cb4:	68ba      	ldr	r2, [r7, #8]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f000 fce2 	bl	8004680 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	f003 031f 	and.w	r3, r3, #31
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d10f      	bne.n	8003ce8 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d129      	bne.n	8003d2a <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	689a      	ldr	r2, [r3, #8]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003ce4:	609a      	str	r2, [r3, #8]
 8003ce6:	e020      	b.n	8003d2a <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a17      	ldr	r2, [pc, #92]	@ (8003d4c <HAL_ADC_Start_DMA+0x1dc>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d11b      	bne.n	8003d2a <HAL_ADC_Start_DMA+0x1ba>
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d114      	bne.n	8003d2a <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	689a      	ldr	r2, [r3, #8]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003d0e:	609a      	str	r2, [r3, #8]
 8003d10:	e00b      	b.n	8003d2a <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d16:	f043 0210 	orr.w	r2, r3, #16
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d22:	f043 0201 	orr.w	r2, r3, #1
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8003d2a:	2300      	movs	r3, #0
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3718      	adds	r7, #24
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	2000000c 	.word	0x2000000c
 8003d38:	431bde83 	.word	0x431bde83
 8003d3c:	40012300 	.word	0x40012300
 8003d40:	080041e9 	.word	0x080041e9
 8003d44:	080042a3 	.word	0x080042a3
 8003d48:	080042bf 	.word	0x080042bf
 8003d4c:	40012000 	.word	0x40012000

08003d50 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b083      	sub	sp, #12
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003d58:	bf00      	nop
 8003d5a:	370c      	adds	r7, #12
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr

08003d64 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b083      	sub	sp, #12
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003d6c:	bf00      	nop
 8003d6e:	370c      	adds	r7, #12
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr

08003d78 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b083      	sub	sp, #12
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003d80:	bf00      	nop
 8003d82:	370c      	adds	r7, #12
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr

08003d8c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b085      	sub	sp, #20
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003d96:	2300      	movs	r3, #0
 8003d98:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d101      	bne.n	8003da8 <HAL_ADC_ConfigChannel+0x1c>
 8003da4:	2302      	movs	r3, #2
 8003da6:	e113      	b.n	8003fd0 <HAL_ADC_ConfigChannel+0x244>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	2b09      	cmp	r3, #9
 8003db6:	d925      	bls.n	8003e04 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	68d9      	ldr	r1, [r3, #12]
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	4613      	mov	r3, r2
 8003dc8:	005b      	lsls	r3, r3, #1
 8003dca:	4413      	add	r3, r2
 8003dcc:	3b1e      	subs	r3, #30
 8003dce:	2207      	movs	r2, #7
 8003dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd4:	43da      	mvns	r2, r3
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	400a      	ands	r2, r1
 8003ddc:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	68d9      	ldr	r1, [r3, #12]
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	689a      	ldr	r2, [r3, #8]
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	b29b      	uxth	r3, r3
 8003dee:	4618      	mov	r0, r3
 8003df0:	4603      	mov	r3, r0
 8003df2:	005b      	lsls	r3, r3, #1
 8003df4:	4403      	add	r3, r0
 8003df6:	3b1e      	subs	r3, #30
 8003df8:	409a      	lsls	r2, r3
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	430a      	orrs	r2, r1
 8003e00:	60da      	str	r2, [r3, #12]
 8003e02:	e022      	b.n	8003e4a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	6919      	ldr	r1, [r3, #16]
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	461a      	mov	r2, r3
 8003e12:	4613      	mov	r3, r2
 8003e14:	005b      	lsls	r3, r3, #1
 8003e16:	4413      	add	r3, r2
 8003e18:	2207      	movs	r2, #7
 8003e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1e:	43da      	mvns	r2, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	400a      	ands	r2, r1
 8003e26:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	6919      	ldr	r1, [r3, #16]
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	689a      	ldr	r2, [r3, #8]
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	b29b      	uxth	r3, r3
 8003e38:	4618      	mov	r0, r3
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	005b      	lsls	r3, r3, #1
 8003e3e:	4403      	add	r3, r0
 8003e40:	409a      	lsls	r2, r3
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	430a      	orrs	r2, r1
 8003e48:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	2b06      	cmp	r3, #6
 8003e50:	d824      	bhi.n	8003e9c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	685a      	ldr	r2, [r3, #4]
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	4413      	add	r3, r2
 8003e62:	3b05      	subs	r3, #5
 8003e64:	221f      	movs	r2, #31
 8003e66:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6a:	43da      	mvns	r2, r3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	400a      	ands	r2, r1
 8003e72:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	4618      	mov	r0, r3
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	685a      	ldr	r2, [r3, #4]
 8003e86:	4613      	mov	r3, r2
 8003e88:	009b      	lsls	r3, r3, #2
 8003e8a:	4413      	add	r3, r2
 8003e8c:	3b05      	subs	r3, #5
 8003e8e:	fa00 f203 	lsl.w	r2, r0, r3
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	430a      	orrs	r2, r1
 8003e98:	635a      	str	r2, [r3, #52]	@ 0x34
 8003e9a:	e04c      	b.n	8003f36 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	2b0c      	cmp	r3, #12
 8003ea2:	d824      	bhi.n	8003eee <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	685a      	ldr	r2, [r3, #4]
 8003eae:	4613      	mov	r3, r2
 8003eb0:	009b      	lsls	r3, r3, #2
 8003eb2:	4413      	add	r3, r2
 8003eb4:	3b23      	subs	r3, #35	@ 0x23
 8003eb6:	221f      	movs	r2, #31
 8003eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ebc:	43da      	mvns	r2, r3
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	400a      	ands	r2, r1
 8003ec4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	685a      	ldr	r2, [r3, #4]
 8003ed8:	4613      	mov	r3, r2
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	4413      	add	r3, r2
 8003ede:	3b23      	subs	r3, #35	@ 0x23
 8003ee0:	fa00 f203 	lsl.w	r2, r0, r3
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	430a      	orrs	r2, r1
 8003eea:	631a      	str	r2, [r3, #48]	@ 0x30
 8003eec:	e023      	b.n	8003f36 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	685a      	ldr	r2, [r3, #4]
 8003ef8:	4613      	mov	r3, r2
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	4413      	add	r3, r2
 8003efe:	3b41      	subs	r3, #65	@ 0x41
 8003f00:	221f      	movs	r2, #31
 8003f02:	fa02 f303 	lsl.w	r3, r2, r3
 8003f06:	43da      	mvns	r2, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	400a      	ands	r2, r1
 8003f0e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	685a      	ldr	r2, [r3, #4]
 8003f22:	4613      	mov	r3, r2
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	4413      	add	r3, r2
 8003f28:	3b41      	subs	r3, #65	@ 0x41
 8003f2a:	fa00 f203 	lsl.w	r2, r0, r3
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	430a      	orrs	r2, r1
 8003f34:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003f36:	4b29      	ldr	r3, [pc, #164]	@ (8003fdc <HAL_ADC_ConfigChannel+0x250>)
 8003f38:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a28      	ldr	r2, [pc, #160]	@ (8003fe0 <HAL_ADC_ConfigChannel+0x254>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d10f      	bne.n	8003f64 <HAL_ADC_ConfigChannel+0x1d8>
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	2b12      	cmp	r3, #18
 8003f4a:	d10b      	bne.n	8003f64 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a1d      	ldr	r2, [pc, #116]	@ (8003fe0 <HAL_ADC_ConfigChannel+0x254>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d12b      	bne.n	8003fc6 <HAL_ADC_ConfigChannel+0x23a>
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a1c      	ldr	r2, [pc, #112]	@ (8003fe4 <HAL_ADC_ConfigChannel+0x258>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d003      	beq.n	8003f80 <HAL_ADC_ConfigChannel+0x1f4>
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	2b11      	cmp	r3, #17
 8003f7e:	d122      	bne.n	8003fc6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a11      	ldr	r2, [pc, #68]	@ (8003fe4 <HAL_ADC_ConfigChannel+0x258>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d111      	bne.n	8003fc6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003fa2:	4b11      	ldr	r3, [pc, #68]	@ (8003fe8 <HAL_ADC_ConfigChannel+0x25c>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a11      	ldr	r2, [pc, #68]	@ (8003fec <HAL_ADC_ConfigChannel+0x260>)
 8003fa8:	fba2 2303 	umull	r2, r3, r2, r3
 8003fac:	0c9a      	lsrs	r2, r3, #18
 8003fae:	4613      	mov	r3, r2
 8003fb0:	009b      	lsls	r3, r3, #2
 8003fb2:	4413      	add	r3, r2
 8003fb4:	005b      	lsls	r3, r3, #1
 8003fb6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003fb8:	e002      	b.n	8003fc0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	3b01      	subs	r3, #1
 8003fbe:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d1f9      	bne.n	8003fba <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003fce:	2300      	movs	r3, #0
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3714      	adds	r7, #20
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr
 8003fdc:	40012300 	.word	0x40012300
 8003fe0:	40012000 	.word	0x40012000
 8003fe4:	10000012 	.word	0x10000012
 8003fe8:	2000000c 	.word	0x2000000c
 8003fec:	431bde83 	.word	0x431bde83

08003ff0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b085      	sub	sp, #20
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003ff8:	4b79      	ldr	r3, [pc, #484]	@ (80041e0 <ADC_Init+0x1f0>)
 8003ffa:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	685a      	ldr	r2, [r3, #4]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	431a      	orrs	r2, r3
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	685a      	ldr	r2, [r3, #4]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004024:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	6859      	ldr	r1, [r3, #4]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	691b      	ldr	r3, [r3, #16]
 8004030:	021a      	lsls	r2, r3, #8
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	430a      	orrs	r2, r1
 8004038:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	685a      	ldr	r2, [r3, #4]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004048:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	6859      	ldr	r1, [r3, #4]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	689a      	ldr	r2, [r3, #8]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	430a      	orrs	r2, r1
 800405a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	689a      	ldr	r2, [r3, #8]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800406a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	6899      	ldr	r1, [r3, #8]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	68da      	ldr	r2, [r3, #12]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	430a      	orrs	r2, r1
 800407c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004082:	4a58      	ldr	r2, [pc, #352]	@ (80041e4 <ADC_Init+0x1f4>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d022      	beq.n	80040ce <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	689a      	ldr	r2, [r3, #8]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004096:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	6899      	ldr	r1, [r3, #8]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	430a      	orrs	r2, r1
 80040a8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	689a      	ldr	r2, [r3, #8]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80040b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	6899      	ldr	r1, [r3, #8]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	430a      	orrs	r2, r1
 80040ca:	609a      	str	r2, [r3, #8]
 80040cc:	e00f      	b.n	80040ee <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	689a      	ldr	r2, [r3, #8]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80040dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	689a      	ldr	r2, [r3, #8]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80040ec:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	689a      	ldr	r2, [r3, #8]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f022 0202 	bic.w	r2, r2, #2
 80040fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	6899      	ldr	r1, [r3, #8]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	7e1b      	ldrb	r3, [r3, #24]
 8004108:	005a      	lsls	r2, r3, #1
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	430a      	orrs	r2, r1
 8004110:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d01b      	beq.n	8004154 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	685a      	ldr	r2, [r3, #4]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800412a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	685a      	ldr	r2, [r3, #4]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800413a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	6859      	ldr	r1, [r3, #4]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004146:	3b01      	subs	r3, #1
 8004148:	035a      	lsls	r2, r3, #13
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	430a      	orrs	r2, r1
 8004150:	605a      	str	r2, [r3, #4]
 8004152:	e007      	b.n	8004164 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	685a      	ldr	r2, [r3, #4]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004162:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8004172:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	69db      	ldr	r3, [r3, #28]
 800417e:	3b01      	subs	r3, #1
 8004180:	051a      	lsls	r2, r3, #20
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	430a      	orrs	r2, r1
 8004188:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	689a      	ldr	r2, [r3, #8]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004198:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	6899      	ldr	r1, [r3, #8]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80041a6:	025a      	lsls	r2, r3, #9
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	430a      	orrs	r2, r1
 80041ae:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	689a      	ldr	r2, [r3, #8]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	6899      	ldr	r1, [r3, #8]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	695b      	ldr	r3, [r3, #20]
 80041ca:	029a      	lsls	r2, r3, #10
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	430a      	orrs	r2, r1
 80041d2:	609a      	str	r2, [r3, #8]
}
 80041d4:	bf00      	nop
 80041d6:	3714      	adds	r7, #20
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr
 80041e0:	40012300 	.word	0x40012300
 80041e4:	0f000001 	.word	0x0f000001

080041e8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b084      	sub	sp, #16
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041f4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041fa:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d13c      	bne.n	800427c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004206:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004218:	2b00      	cmp	r3, #0
 800421a:	d12b      	bne.n	8004274 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004220:	2b00      	cmp	r3, #0
 8004222:	d127      	bne.n	8004274 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800422a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800422e:	2b00      	cmp	r3, #0
 8004230:	d006      	beq.n	8004240 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800423c:	2b00      	cmp	r3, #0
 800423e:	d119      	bne.n	8004274 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	685a      	ldr	r2, [r3, #4]
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f022 0220 	bic.w	r2, r2, #32
 800424e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004254:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004260:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004264:	2b00      	cmp	r3, #0
 8004266:	d105      	bne.n	8004274 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800426c:	f043 0201 	orr.w	r2, r3, #1
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004274:	68f8      	ldr	r0, [r7, #12]
 8004276:	f7fe fd91 	bl	8002d9c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800427a:	e00e      	b.n	800429a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004280:	f003 0310 	and.w	r3, r3, #16
 8004284:	2b00      	cmp	r3, #0
 8004286:	d003      	beq.n	8004290 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004288:	68f8      	ldr	r0, [r7, #12]
 800428a:	f7ff fd75 	bl	8003d78 <HAL_ADC_ErrorCallback>
}
 800428e:	e004      	b.n	800429a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004294:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	4798      	blx	r3
}
 800429a:	bf00      	nop
 800429c:	3710      	adds	r7, #16
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}

080042a2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80042a2:	b580      	push	{r7, lr}
 80042a4:	b084      	sub	sp, #16
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042ae:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80042b0:	68f8      	ldr	r0, [r7, #12]
 80042b2:	f7ff fd4d 	bl	8003d50 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80042b6:	bf00      	nop
 80042b8:	3710      	adds	r7, #16
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}

080042be <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80042be:	b580      	push	{r7, lr}
 80042c0:	b084      	sub	sp, #16
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042ca:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2240      	movs	r2, #64	@ 0x40
 80042d0:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042d6:	f043 0204 	orr.w	r2, r3, #4
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80042de:	68f8      	ldr	r0, [r7, #12]
 80042e0:	f7ff fd4a 	bl	8003d78 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80042e4:	bf00      	nop
 80042e6:	3710      	adds	r7, #16
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}

080042ec <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b083      	sub	sp, #12
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80042f4:	bf00      	nop
 80042f6:	370c      	adds	r7, #12
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr

08004300 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004300:	b480      	push	{r7}
 8004302:	b085      	sub	sp, #20
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f003 0307 	and.w	r3, r3, #7
 800430e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004310:	4b0c      	ldr	r3, [pc, #48]	@ (8004344 <__NVIC_SetPriorityGrouping+0x44>)
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004316:	68ba      	ldr	r2, [r7, #8]
 8004318:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800431c:	4013      	ands	r3, r2
 800431e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004328:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800432c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004330:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004332:	4a04      	ldr	r2, [pc, #16]	@ (8004344 <__NVIC_SetPriorityGrouping+0x44>)
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	60d3      	str	r3, [r2, #12]
}
 8004338:	bf00      	nop
 800433a:	3714      	adds	r7, #20
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr
 8004344:	e000ed00 	.word	0xe000ed00

08004348 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004348:	b480      	push	{r7}
 800434a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800434c:	4b04      	ldr	r3, [pc, #16]	@ (8004360 <__NVIC_GetPriorityGrouping+0x18>)
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	0a1b      	lsrs	r3, r3, #8
 8004352:	f003 0307 	and.w	r3, r3, #7
}
 8004356:	4618      	mov	r0, r3
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr
 8004360:	e000ed00 	.word	0xe000ed00

08004364 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004364:	b480      	push	{r7}
 8004366:	b083      	sub	sp, #12
 8004368:	af00      	add	r7, sp, #0
 800436a:	4603      	mov	r3, r0
 800436c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800436e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004372:	2b00      	cmp	r3, #0
 8004374:	db0b      	blt.n	800438e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004376:	79fb      	ldrb	r3, [r7, #7]
 8004378:	f003 021f 	and.w	r2, r3, #31
 800437c:	4907      	ldr	r1, [pc, #28]	@ (800439c <__NVIC_EnableIRQ+0x38>)
 800437e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004382:	095b      	lsrs	r3, r3, #5
 8004384:	2001      	movs	r0, #1
 8004386:	fa00 f202 	lsl.w	r2, r0, r2
 800438a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800438e:	bf00      	nop
 8004390:	370c      	adds	r7, #12
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr
 800439a:	bf00      	nop
 800439c:	e000e100 	.word	0xe000e100

080043a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b083      	sub	sp, #12
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	4603      	mov	r3, r0
 80043a8:	6039      	str	r1, [r7, #0]
 80043aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	db0a      	blt.n	80043ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	b2da      	uxtb	r2, r3
 80043b8:	490c      	ldr	r1, [pc, #48]	@ (80043ec <__NVIC_SetPriority+0x4c>)
 80043ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043be:	0112      	lsls	r2, r2, #4
 80043c0:	b2d2      	uxtb	r2, r2
 80043c2:	440b      	add	r3, r1
 80043c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80043c8:	e00a      	b.n	80043e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	b2da      	uxtb	r2, r3
 80043ce:	4908      	ldr	r1, [pc, #32]	@ (80043f0 <__NVIC_SetPriority+0x50>)
 80043d0:	79fb      	ldrb	r3, [r7, #7]
 80043d2:	f003 030f 	and.w	r3, r3, #15
 80043d6:	3b04      	subs	r3, #4
 80043d8:	0112      	lsls	r2, r2, #4
 80043da:	b2d2      	uxtb	r2, r2
 80043dc:	440b      	add	r3, r1
 80043de:	761a      	strb	r2, [r3, #24]
}
 80043e0:	bf00      	nop
 80043e2:	370c      	adds	r7, #12
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr
 80043ec:	e000e100 	.word	0xe000e100
 80043f0:	e000ed00 	.word	0xe000ed00

080043f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b089      	sub	sp, #36	@ 0x24
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	60f8      	str	r0, [r7, #12]
 80043fc:	60b9      	str	r1, [r7, #8]
 80043fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f003 0307 	and.w	r3, r3, #7
 8004406:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004408:	69fb      	ldr	r3, [r7, #28]
 800440a:	f1c3 0307 	rsb	r3, r3, #7
 800440e:	2b04      	cmp	r3, #4
 8004410:	bf28      	it	cs
 8004412:	2304      	movcs	r3, #4
 8004414:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	3304      	adds	r3, #4
 800441a:	2b06      	cmp	r3, #6
 800441c:	d902      	bls.n	8004424 <NVIC_EncodePriority+0x30>
 800441e:	69fb      	ldr	r3, [r7, #28]
 8004420:	3b03      	subs	r3, #3
 8004422:	e000      	b.n	8004426 <NVIC_EncodePriority+0x32>
 8004424:	2300      	movs	r3, #0
 8004426:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004428:	f04f 32ff 	mov.w	r2, #4294967295
 800442c:	69bb      	ldr	r3, [r7, #24]
 800442e:	fa02 f303 	lsl.w	r3, r2, r3
 8004432:	43da      	mvns	r2, r3
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	401a      	ands	r2, r3
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800443c:	f04f 31ff 	mov.w	r1, #4294967295
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	fa01 f303 	lsl.w	r3, r1, r3
 8004446:	43d9      	mvns	r1, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800444c:	4313      	orrs	r3, r2
         );
}
 800444e:	4618      	mov	r0, r3
 8004450:	3724      	adds	r7, #36	@ 0x24
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr
	...

0800445c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b082      	sub	sp, #8
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	3b01      	subs	r3, #1
 8004468:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800446c:	d301      	bcc.n	8004472 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800446e:	2301      	movs	r3, #1
 8004470:	e00f      	b.n	8004492 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004472:	4a0a      	ldr	r2, [pc, #40]	@ (800449c <SysTick_Config+0x40>)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	3b01      	subs	r3, #1
 8004478:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800447a:	210f      	movs	r1, #15
 800447c:	f04f 30ff 	mov.w	r0, #4294967295
 8004480:	f7ff ff8e 	bl	80043a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004484:	4b05      	ldr	r3, [pc, #20]	@ (800449c <SysTick_Config+0x40>)
 8004486:	2200      	movs	r2, #0
 8004488:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800448a:	4b04      	ldr	r3, [pc, #16]	@ (800449c <SysTick_Config+0x40>)
 800448c:	2207      	movs	r2, #7
 800448e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004490:	2300      	movs	r3, #0
}
 8004492:	4618      	mov	r0, r3
 8004494:	3708      	adds	r7, #8
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
 800449a:	bf00      	nop
 800449c:	e000e010 	.word	0xe000e010

080044a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b082      	sub	sp, #8
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f7ff ff29 	bl	8004300 <__NVIC_SetPriorityGrouping>
}
 80044ae:	bf00      	nop
 80044b0:	3708      	adds	r7, #8
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}

080044b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80044b6:	b580      	push	{r7, lr}
 80044b8:	b086      	sub	sp, #24
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	4603      	mov	r3, r0
 80044be:	60b9      	str	r1, [r7, #8]
 80044c0:	607a      	str	r2, [r7, #4]
 80044c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80044c4:	2300      	movs	r3, #0
 80044c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80044c8:	f7ff ff3e 	bl	8004348 <__NVIC_GetPriorityGrouping>
 80044cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	68b9      	ldr	r1, [r7, #8]
 80044d2:	6978      	ldr	r0, [r7, #20]
 80044d4:	f7ff ff8e 	bl	80043f4 <NVIC_EncodePriority>
 80044d8:	4602      	mov	r2, r0
 80044da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044de:	4611      	mov	r1, r2
 80044e0:	4618      	mov	r0, r3
 80044e2:	f7ff ff5d 	bl	80043a0 <__NVIC_SetPriority>
}
 80044e6:	bf00      	nop
 80044e8:	3718      	adds	r7, #24
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}

080044ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044ee:	b580      	push	{r7, lr}
 80044f0:	b082      	sub	sp, #8
 80044f2:	af00      	add	r7, sp, #0
 80044f4:	4603      	mov	r3, r0
 80044f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80044f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044fc:	4618      	mov	r0, r3
 80044fe:	f7ff ff31 	bl	8004364 <__NVIC_EnableIRQ>
}
 8004502:	bf00      	nop
 8004504:	3708      	adds	r7, #8
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}

0800450a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800450a:	b580      	push	{r7, lr}
 800450c:	b082      	sub	sp, #8
 800450e:	af00      	add	r7, sp, #0
 8004510:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f7ff ffa2 	bl	800445c <SysTick_Config>
 8004518:	4603      	mov	r3, r0
}
 800451a:	4618      	mov	r0, r3
 800451c:	3708      	adds	r7, #8
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}
	...

08004524 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b086      	sub	sp, #24
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800452c:	2300      	movs	r3, #0
 800452e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004530:	f7ff f99a 	bl	8003868 <HAL_GetTick>
 8004534:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d101      	bne.n	8004540 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e099      	b.n	8004674 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2202      	movs	r2, #2
 8004544:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2200      	movs	r2, #0
 800454c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f022 0201 	bic.w	r2, r2, #1
 800455e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004560:	e00f      	b.n	8004582 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004562:	f7ff f981 	bl	8003868 <HAL_GetTick>
 8004566:	4602      	mov	r2, r0
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	1ad3      	subs	r3, r2, r3
 800456c:	2b05      	cmp	r3, #5
 800456e:	d908      	bls.n	8004582 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2220      	movs	r2, #32
 8004574:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2203      	movs	r2, #3
 800457a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	e078      	b.n	8004674 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0301 	and.w	r3, r3, #1
 800458c:	2b00      	cmp	r3, #0
 800458e:	d1e8      	bne.n	8004562 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004598:	697a      	ldr	r2, [r7, #20]
 800459a:	4b38      	ldr	r3, [pc, #224]	@ (800467c <HAL_DMA_Init+0x158>)
 800459c:	4013      	ands	r3, r2
 800459e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	685a      	ldr	r2, [r3, #4]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80045ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	691b      	ldr	r3, [r3, #16]
 80045b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	699b      	ldr	r3, [r3, #24]
 80045c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6a1b      	ldr	r3, [r3, #32]
 80045cc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80045ce:	697a      	ldr	r2, [r7, #20]
 80045d0:	4313      	orrs	r3, r2
 80045d2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045d8:	2b04      	cmp	r3, #4
 80045da:	d107      	bne.n	80045ec <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045e4:	4313      	orrs	r3, r2
 80045e6:	697a      	ldr	r2, [r7, #20]
 80045e8:	4313      	orrs	r3, r2
 80045ea:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	697a      	ldr	r2, [r7, #20]
 80045f2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	695b      	ldr	r3, [r3, #20]
 80045fa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	f023 0307 	bic.w	r3, r3, #7
 8004602:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004608:	697a      	ldr	r2, [r7, #20]
 800460a:	4313      	orrs	r3, r2
 800460c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004612:	2b04      	cmp	r3, #4
 8004614:	d117      	bne.n	8004646 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800461a:	697a      	ldr	r2, [r7, #20]
 800461c:	4313      	orrs	r3, r2
 800461e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004624:	2b00      	cmp	r3, #0
 8004626:	d00e      	beq.n	8004646 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f000 faab 	bl	8004b84 <DMA_CheckFifoParam>
 800462e:	4603      	mov	r3, r0
 8004630:	2b00      	cmp	r3, #0
 8004632:	d008      	beq.n	8004646 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2240      	movs	r2, #64	@ 0x40
 8004638:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2201      	movs	r2, #1
 800463e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004642:	2301      	movs	r3, #1
 8004644:	e016      	b.n	8004674 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	697a      	ldr	r2, [r7, #20]
 800464c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f000 fa62 	bl	8004b18 <DMA_CalcBaseAndBitshift>
 8004654:	4603      	mov	r3, r0
 8004656:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800465c:	223f      	movs	r2, #63	@ 0x3f
 800465e:	409a      	lsls	r2, r3
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2200      	movs	r2, #0
 8004668:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2201      	movs	r2, #1
 800466e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004672:	2300      	movs	r3, #0
}
 8004674:	4618      	mov	r0, r3
 8004676:	3718      	adds	r7, #24
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}
 800467c:	f010803f 	.word	0xf010803f

08004680 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b086      	sub	sp, #24
 8004684:	af00      	add	r7, sp, #0
 8004686:	60f8      	str	r0, [r7, #12]
 8004688:	60b9      	str	r1, [r7, #8]
 800468a:	607a      	str	r2, [r7, #4]
 800468c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800468e:	2300      	movs	r3, #0
 8004690:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004696:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d101      	bne.n	80046a6 <HAL_DMA_Start_IT+0x26>
 80046a2:	2302      	movs	r3, #2
 80046a4:	e040      	b.n	8004728 <HAL_DMA_Start_IT+0xa8>
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2201      	movs	r2, #1
 80046aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d12f      	bne.n	800471a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2202      	movs	r2, #2
 80046be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2200      	movs	r2, #0
 80046c6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	68b9      	ldr	r1, [r7, #8]
 80046ce:	68f8      	ldr	r0, [r7, #12]
 80046d0:	f000 f9f4 	bl	8004abc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046d8:	223f      	movs	r2, #63	@ 0x3f
 80046da:	409a      	lsls	r2, r3
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f042 0216 	orr.w	r2, r2, #22
 80046ee:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d007      	beq.n	8004708 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f042 0208 	orr.w	r2, r2, #8
 8004706:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f042 0201 	orr.w	r2, r2, #1
 8004716:	601a      	str	r2, [r3, #0]
 8004718:	e005      	b.n	8004726 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2200      	movs	r2, #0
 800471e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004722:	2302      	movs	r3, #2
 8004724:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004726:	7dfb      	ldrb	r3, [r7, #23]
}
 8004728:	4618      	mov	r0, r3
 800472a:	3718      	adds	r7, #24
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}

08004730 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004730:	b480      	push	{r7}
 8004732:	b083      	sub	sp, #12
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800473e:	b2db      	uxtb	r3, r3
 8004740:	2b02      	cmp	r3, #2
 8004742:	d004      	beq.n	800474e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2280      	movs	r2, #128	@ 0x80
 8004748:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	e00c      	b.n	8004768 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2205      	movs	r2, #5
 8004752:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f022 0201 	bic.w	r2, r2, #1
 8004764:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004766:	2300      	movs	r3, #0
}
 8004768:	4618      	mov	r0, r3
 800476a:	370c      	adds	r7, #12
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr

08004774 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b086      	sub	sp, #24
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800477c:	2300      	movs	r3, #0
 800477e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004780:	4b8e      	ldr	r3, [pc, #568]	@ (80049bc <HAL_DMA_IRQHandler+0x248>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a8e      	ldr	r2, [pc, #568]	@ (80049c0 <HAL_DMA_IRQHandler+0x24c>)
 8004786:	fba2 2303 	umull	r2, r3, r2, r3
 800478a:	0a9b      	lsrs	r3, r3, #10
 800478c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004792:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800479e:	2208      	movs	r2, #8
 80047a0:	409a      	lsls	r2, r3
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	4013      	ands	r3, r2
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d01a      	beq.n	80047e0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 0304 	and.w	r3, r3, #4
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d013      	beq.n	80047e0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f022 0204 	bic.w	r2, r2, #4
 80047c6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047cc:	2208      	movs	r2, #8
 80047ce:	409a      	lsls	r2, r3
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047d8:	f043 0201 	orr.w	r2, r3, #1
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047e4:	2201      	movs	r2, #1
 80047e6:	409a      	lsls	r2, r3
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	4013      	ands	r3, r2
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d012      	beq.n	8004816 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	695b      	ldr	r3, [r3, #20]
 80047f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d00b      	beq.n	8004816 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004802:	2201      	movs	r2, #1
 8004804:	409a      	lsls	r2, r3
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800480e:	f043 0202 	orr.w	r2, r3, #2
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800481a:	2204      	movs	r2, #4
 800481c:	409a      	lsls	r2, r3
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	4013      	ands	r3, r2
 8004822:	2b00      	cmp	r3, #0
 8004824:	d012      	beq.n	800484c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 0302 	and.w	r3, r3, #2
 8004830:	2b00      	cmp	r3, #0
 8004832:	d00b      	beq.n	800484c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004838:	2204      	movs	r2, #4
 800483a:	409a      	lsls	r2, r3
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004844:	f043 0204 	orr.w	r2, r3, #4
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004850:	2210      	movs	r2, #16
 8004852:	409a      	lsls	r2, r3
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	4013      	ands	r3, r2
 8004858:	2b00      	cmp	r3, #0
 800485a:	d043      	beq.n	80048e4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 0308 	and.w	r3, r3, #8
 8004866:	2b00      	cmp	r3, #0
 8004868:	d03c      	beq.n	80048e4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800486e:	2210      	movs	r2, #16
 8004870:	409a      	lsls	r2, r3
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004880:	2b00      	cmp	r3, #0
 8004882:	d018      	beq.n	80048b6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800488e:	2b00      	cmp	r3, #0
 8004890:	d108      	bne.n	80048a4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004896:	2b00      	cmp	r3, #0
 8004898:	d024      	beq.n	80048e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	4798      	blx	r3
 80048a2:	e01f      	b.n	80048e4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d01b      	beq.n	80048e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	4798      	blx	r3
 80048b4:	e016      	b.n	80048e4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d107      	bne.n	80048d4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f022 0208 	bic.w	r2, r2, #8
 80048d2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d003      	beq.n	80048e4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048e8:	2220      	movs	r2, #32
 80048ea:	409a      	lsls	r2, r3
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	4013      	ands	r3, r2
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	f000 808f 	beq.w	8004a14 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 0310 	and.w	r3, r3, #16
 8004900:	2b00      	cmp	r3, #0
 8004902:	f000 8087 	beq.w	8004a14 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800490a:	2220      	movs	r2, #32
 800490c:	409a      	lsls	r2, r3
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004918:	b2db      	uxtb	r3, r3
 800491a:	2b05      	cmp	r3, #5
 800491c:	d136      	bne.n	800498c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f022 0216 	bic.w	r2, r2, #22
 800492c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	695a      	ldr	r2, [r3, #20]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800493c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004942:	2b00      	cmp	r3, #0
 8004944:	d103      	bne.n	800494e <HAL_DMA_IRQHandler+0x1da>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800494a:	2b00      	cmp	r3, #0
 800494c:	d007      	beq.n	800495e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f022 0208 	bic.w	r2, r2, #8
 800495c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004962:	223f      	movs	r2, #63	@ 0x3f
 8004964:	409a      	lsls	r2, r3
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2201      	movs	r2, #1
 800496e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2200      	movs	r2, #0
 8004976:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800497e:	2b00      	cmp	r3, #0
 8004980:	d07e      	beq.n	8004a80 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	4798      	blx	r3
        }
        return;
 800498a:	e079      	b.n	8004a80 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004996:	2b00      	cmp	r3, #0
 8004998:	d01d      	beq.n	80049d6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d10d      	bne.n	80049c4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d031      	beq.n	8004a14 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	4798      	blx	r3
 80049b8:	e02c      	b.n	8004a14 <HAL_DMA_IRQHandler+0x2a0>
 80049ba:	bf00      	nop
 80049bc:	2000000c 	.word	0x2000000c
 80049c0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d023      	beq.n	8004a14 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	4798      	blx	r3
 80049d4:	e01e      	b.n	8004a14 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d10f      	bne.n	8004a04 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f022 0210 	bic.w	r2, r2, #16
 80049f2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2200      	movs	r2, #0
 8004a00:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d003      	beq.n	8004a14 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d032      	beq.n	8004a82 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a20:	f003 0301 	and.w	r3, r3, #1
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d022      	beq.n	8004a6e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2205      	movs	r2, #5
 8004a2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f022 0201 	bic.w	r2, r2, #1
 8004a3e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	3301      	adds	r3, #1
 8004a44:	60bb      	str	r3, [r7, #8]
 8004a46:	697a      	ldr	r2, [r7, #20]
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d307      	bcc.n	8004a5c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 0301 	and.w	r3, r3, #1
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d1f2      	bne.n	8004a40 <HAL_DMA_IRQHandler+0x2cc>
 8004a5a:	e000      	b.n	8004a5e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004a5c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2201      	movs	r2, #1
 8004a62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d005      	beq.n	8004a82 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	4798      	blx	r3
 8004a7e:	e000      	b.n	8004a82 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004a80:	bf00      	nop
    }
  }
}
 8004a82:	3718      	adds	r7, #24
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}

08004a88 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b083      	sub	sp, #12
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004a96:	b2db      	uxtb	r3, r3
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	370c      	adds	r7, #12
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr

08004aa4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b083      	sub	sp, #12
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	370c      	adds	r7, #12
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr

08004abc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b085      	sub	sp, #20
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	60f8      	str	r0, [r7, #12]
 8004ac4:	60b9      	str	r1, [r7, #8]
 8004ac6:	607a      	str	r2, [r7, #4]
 8004ac8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004ad8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	683a      	ldr	r2, [r7, #0]
 8004ae0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	2b40      	cmp	r3, #64	@ 0x40
 8004ae8:	d108      	bne.n	8004afc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	68ba      	ldr	r2, [r7, #8]
 8004af8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004afa:	e007      	b.n	8004b0c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	68ba      	ldr	r2, [r7, #8]
 8004b02:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	60da      	str	r2, [r3, #12]
}
 8004b0c:	bf00      	nop
 8004b0e:	3714      	adds	r7, #20
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr

08004b18 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b085      	sub	sp, #20
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	3b10      	subs	r3, #16
 8004b28:	4a14      	ldr	r2, [pc, #80]	@ (8004b7c <DMA_CalcBaseAndBitshift+0x64>)
 8004b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b2e:	091b      	lsrs	r3, r3, #4
 8004b30:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004b32:	4a13      	ldr	r2, [pc, #76]	@ (8004b80 <DMA_CalcBaseAndBitshift+0x68>)
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	4413      	add	r3, r2
 8004b38:	781b      	ldrb	r3, [r3, #0]
 8004b3a:	461a      	mov	r2, r3
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2b03      	cmp	r3, #3
 8004b44:	d909      	bls.n	8004b5a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004b4e:	f023 0303 	bic.w	r3, r3, #3
 8004b52:	1d1a      	adds	r2, r3, #4
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	659a      	str	r2, [r3, #88]	@ 0x58
 8004b58:	e007      	b.n	8004b6a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004b62:	f023 0303 	bic.w	r3, r3, #3
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3714      	adds	r7, #20
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr
 8004b7a:	bf00      	nop
 8004b7c:	aaaaaaab 	.word	0xaaaaaaab
 8004b80:	0801116c 	.word	0x0801116c

08004b84 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b085      	sub	sp, #20
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b94:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	699b      	ldr	r3, [r3, #24]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d11f      	bne.n	8004bde <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	2b03      	cmp	r3, #3
 8004ba2:	d856      	bhi.n	8004c52 <DMA_CheckFifoParam+0xce>
 8004ba4:	a201      	add	r2, pc, #4	@ (adr r2, 8004bac <DMA_CheckFifoParam+0x28>)
 8004ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004baa:	bf00      	nop
 8004bac:	08004bbd 	.word	0x08004bbd
 8004bb0:	08004bcf 	.word	0x08004bcf
 8004bb4:	08004bbd 	.word	0x08004bbd
 8004bb8:	08004c53 	.word	0x08004c53
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bc0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d046      	beq.n	8004c56 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004bcc:	e043      	b.n	8004c56 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bd2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004bd6:	d140      	bne.n	8004c5a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004bdc:	e03d      	b.n	8004c5a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	699b      	ldr	r3, [r3, #24]
 8004be2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004be6:	d121      	bne.n	8004c2c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	2b03      	cmp	r3, #3
 8004bec:	d837      	bhi.n	8004c5e <DMA_CheckFifoParam+0xda>
 8004bee:	a201      	add	r2, pc, #4	@ (adr r2, 8004bf4 <DMA_CheckFifoParam+0x70>)
 8004bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bf4:	08004c05 	.word	0x08004c05
 8004bf8:	08004c0b 	.word	0x08004c0b
 8004bfc:	08004c05 	.word	0x08004c05
 8004c00:	08004c1d 	.word	0x08004c1d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	73fb      	strb	r3, [r7, #15]
      break;
 8004c08:	e030      	b.n	8004c6c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c0e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d025      	beq.n	8004c62 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c1a:	e022      	b.n	8004c62 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c20:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004c24:	d11f      	bne.n	8004c66 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004c2a:	e01c      	b.n	8004c66 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	2b02      	cmp	r3, #2
 8004c30:	d903      	bls.n	8004c3a <DMA_CheckFifoParam+0xb6>
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	2b03      	cmp	r3, #3
 8004c36:	d003      	beq.n	8004c40 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004c38:	e018      	b.n	8004c6c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	73fb      	strb	r3, [r7, #15]
      break;
 8004c3e:	e015      	b.n	8004c6c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c44:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d00e      	beq.n	8004c6a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	73fb      	strb	r3, [r7, #15]
      break;
 8004c50:	e00b      	b.n	8004c6a <DMA_CheckFifoParam+0xe6>
      break;
 8004c52:	bf00      	nop
 8004c54:	e00a      	b.n	8004c6c <DMA_CheckFifoParam+0xe8>
      break;
 8004c56:	bf00      	nop
 8004c58:	e008      	b.n	8004c6c <DMA_CheckFifoParam+0xe8>
      break;
 8004c5a:	bf00      	nop
 8004c5c:	e006      	b.n	8004c6c <DMA_CheckFifoParam+0xe8>
      break;
 8004c5e:	bf00      	nop
 8004c60:	e004      	b.n	8004c6c <DMA_CheckFifoParam+0xe8>
      break;
 8004c62:	bf00      	nop
 8004c64:	e002      	b.n	8004c6c <DMA_CheckFifoParam+0xe8>
      break;   
 8004c66:	bf00      	nop
 8004c68:	e000      	b.n	8004c6c <DMA_CheckFifoParam+0xe8>
      break;
 8004c6a:	bf00      	nop
    }
  } 
  
  return status; 
 8004c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3714      	adds	r7, #20
 8004c72:	46bd      	mov	sp, r7
 8004c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c78:	4770      	bx	lr
 8004c7a:	bf00      	nop

08004c7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b089      	sub	sp, #36	@ 0x24
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004c86:	2300      	movs	r3, #0
 8004c88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c92:	2300      	movs	r3, #0
 8004c94:	61fb      	str	r3, [r7, #28]
 8004c96:	e159      	b.n	8004f4c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004c98:	2201      	movs	r2, #1
 8004c9a:	69fb      	ldr	r3, [r7, #28]
 8004c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	697a      	ldr	r2, [r7, #20]
 8004ca8:	4013      	ands	r3, r2
 8004caa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004cac:	693a      	ldr	r2, [r7, #16]
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	f040 8148 	bne.w	8004f46 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	f003 0303 	and.w	r3, r3, #3
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d005      	beq.n	8004cce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004cca:	2b02      	cmp	r3, #2
 8004ccc:	d130      	bne.n	8004d30 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004cd4:	69fb      	ldr	r3, [r7, #28]
 8004cd6:	005b      	lsls	r3, r3, #1
 8004cd8:	2203      	movs	r2, #3
 8004cda:	fa02 f303 	lsl.w	r3, r2, r3
 8004cde:	43db      	mvns	r3, r3
 8004ce0:	69ba      	ldr	r2, [r7, #24]
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	68da      	ldr	r2, [r3, #12]
 8004cea:	69fb      	ldr	r3, [r7, #28]
 8004cec:	005b      	lsls	r3, r3, #1
 8004cee:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf2:	69ba      	ldr	r2, [r7, #24]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	69ba      	ldr	r2, [r7, #24]
 8004cfc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004d04:	2201      	movs	r2, #1
 8004d06:	69fb      	ldr	r3, [r7, #28]
 8004d08:	fa02 f303 	lsl.w	r3, r2, r3
 8004d0c:	43db      	mvns	r3, r3
 8004d0e:	69ba      	ldr	r2, [r7, #24]
 8004d10:	4013      	ands	r3, r2
 8004d12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	091b      	lsrs	r3, r3, #4
 8004d1a:	f003 0201 	and.w	r2, r3, #1
 8004d1e:	69fb      	ldr	r3, [r7, #28]
 8004d20:	fa02 f303 	lsl.w	r3, r2, r3
 8004d24:	69ba      	ldr	r2, [r7, #24]
 8004d26:	4313      	orrs	r3, r2
 8004d28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	69ba      	ldr	r2, [r7, #24]
 8004d2e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	f003 0303 	and.w	r3, r3, #3
 8004d38:	2b03      	cmp	r3, #3
 8004d3a:	d017      	beq.n	8004d6c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	68db      	ldr	r3, [r3, #12]
 8004d40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004d42:	69fb      	ldr	r3, [r7, #28]
 8004d44:	005b      	lsls	r3, r3, #1
 8004d46:	2203      	movs	r2, #3
 8004d48:	fa02 f303 	lsl.w	r3, r2, r3
 8004d4c:	43db      	mvns	r3, r3
 8004d4e:	69ba      	ldr	r2, [r7, #24]
 8004d50:	4013      	ands	r3, r2
 8004d52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	689a      	ldr	r2, [r3, #8]
 8004d58:	69fb      	ldr	r3, [r7, #28]
 8004d5a:	005b      	lsls	r3, r3, #1
 8004d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d60:	69ba      	ldr	r2, [r7, #24]
 8004d62:	4313      	orrs	r3, r2
 8004d64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	69ba      	ldr	r2, [r7, #24]
 8004d6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	f003 0303 	and.w	r3, r3, #3
 8004d74:	2b02      	cmp	r3, #2
 8004d76:	d123      	bne.n	8004dc0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004d78:	69fb      	ldr	r3, [r7, #28]
 8004d7a:	08da      	lsrs	r2, r3, #3
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	3208      	adds	r2, #8
 8004d80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004d86:	69fb      	ldr	r3, [r7, #28]
 8004d88:	f003 0307 	and.w	r3, r3, #7
 8004d8c:	009b      	lsls	r3, r3, #2
 8004d8e:	220f      	movs	r2, #15
 8004d90:	fa02 f303 	lsl.w	r3, r2, r3
 8004d94:	43db      	mvns	r3, r3
 8004d96:	69ba      	ldr	r2, [r7, #24]
 8004d98:	4013      	ands	r3, r2
 8004d9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	691a      	ldr	r2, [r3, #16]
 8004da0:	69fb      	ldr	r3, [r7, #28]
 8004da2:	f003 0307 	and.w	r3, r3, #7
 8004da6:	009b      	lsls	r3, r3, #2
 8004da8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dac:	69ba      	ldr	r2, [r7, #24]
 8004dae:	4313      	orrs	r3, r2
 8004db0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004db2:	69fb      	ldr	r3, [r7, #28]
 8004db4:	08da      	lsrs	r2, r3, #3
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	3208      	adds	r2, #8
 8004dba:	69b9      	ldr	r1, [r7, #24]
 8004dbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004dc6:	69fb      	ldr	r3, [r7, #28]
 8004dc8:	005b      	lsls	r3, r3, #1
 8004dca:	2203      	movs	r2, #3
 8004dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd0:	43db      	mvns	r3, r3
 8004dd2:	69ba      	ldr	r2, [r7, #24]
 8004dd4:	4013      	ands	r3, r2
 8004dd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	f003 0203 	and.w	r2, r3, #3
 8004de0:	69fb      	ldr	r3, [r7, #28]
 8004de2:	005b      	lsls	r3, r3, #1
 8004de4:	fa02 f303 	lsl.w	r3, r2, r3
 8004de8:	69ba      	ldr	r2, [r7, #24]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	69ba      	ldr	r2, [r7, #24]
 8004df2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	f000 80a2 	beq.w	8004f46 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e02:	2300      	movs	r3, #0
 8004e04:	60fb      	str	r3, [r7, #12]
 8004e06:	4b57      	ldr	r3, [pc, #348]	@ (8004f64 <HAL_GPIO_Init+0x2e8>)
 8004e08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e0a:	4a56      	ldr	r2, [pc, #344]	@ (8004f64 <HAL_GPIO_Init+0x2e8>)
 8004e0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004e10:	6453      	str	r3, [r2, #68]	@ 0x44
 8004e12:	4b54      	ldr	r3, [pc, #336]	@ (8004f64 <HAL_GPIO_Init+0x2e8>)
 8004e14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e1a:	60fb      	str	r3, [r7, #12]
 8004e1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004e1e:	4a52      	ldr	r2, [pc, #328]	@ (8004f68 <HAL_GPIO_Init+0x2ec>)
 8004e20:	69fb      	ldr	r3, [r7, #28]
 8004e22:	089b      	lsrs	r3, r3, #2
 8004e24:	3302      	adds	r3, #2
 8004e26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004e2c:	69fb      	ldr	r3, [r7, #28]
 8004e2e:	f003 0303 	and.w	r3, r3, #3
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	220f      	movs	r2, #15
 8004e36:	fa02 f303 	lsl.w	r3, r2, r3
 8004e3a:	43db      	mvns	r3, r3
 8004e3c:	69ba      	ldr	r2, [r7, #24]
 8004e3e:	4013      	ands	r3, r2
 8004e40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4a49      	ldr	r2, [pc, #292]	@ (8004f6c <HAL_GPIO_Init+0x2f0>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d019      	beq.n	8004e7e <HAL_GPIO_Init+0x202>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4a48      	ldr	r2, [pc, #288]	@ (8004f70 <HAL_GPIO_Init+0x2f4>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d013      	beq.n	8004e7a <HAL_GPIO_Init+0x1fe>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	4a47      	ldr	r2, [pc, #284]	@ (8004f74 <HAL_GPIO_Init+0x2f8>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d00d      	beq.n	8004e76 <HAL_GPIO_Init+0x1fa>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4a46      	ldr	r2, [pc, #280]	@ (8004f78 <HAL_GPIO_Init+0x2fc>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d007      	beq.n	8004e72 <HAL_GPIO_Init+0x1f6>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4a45      	ldr	r2, [pc, #276]	@ (8004f7c <HAL_GPIO_Init+0x300>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d101      	bne.n	8004e6e <HAL_GPIO_Init+0x1f2>
 8004e6a:	2304      	movs	r3, #4
 8004e6c:	e008      	b.n	8004e80 <HAL_GPIO_Init+0x204>
 8004e6e:	2307      	movs	r3, #7
 8004e70:	e006      	b.n	8004e80 <HAL_GPIO_Init+0x204>
 8004e72:	2303      	movs	r3, #3
 8004e74:	e004      	b.n	8004e80 <HAL_GPIO_Init+0x204>
 8004e76:	2302      	movs	r3, #2
 8004e78:	e002      	b.n	8004e80 <HAL_GPIO_Init+0x204>
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e000      	b.n	8004e80 <HAL_GPIO_Init+0x204>
 8004e7e:	2300      	movs	r3, #0
 8004e80:	69fa      	ldr	r2, [r7, #28]
 8004e82:	f002 0203 	and.w	r2, r2, #3
 8004e86:	0092      	lsls	r2, r2, #2
 8004e88:	4093      	lsls	r3, r2
 8004e8a:	69ba      	ldr	r2, [r7, #24]
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004e90:	4935      	ldr	r1, [pc, #212]	@ (8004f68 <HAL_GPIO_Init+0x2ec>)
 8004e92:	69fb      	ldr	r3, [r7, #28]
 8004e94:	089b      	lsrs	r3, r3, #2
 8004e96:	3302      	adds	r3, #2
 8004e98:	69ba      	ldr	r2, [r7, #24]
 8004e9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004e9e:	4b38      	ldr	r3, [pc, #224]	@ (8004f80 <HAL_GPIO_Init+0x304>)
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	43db      	mvns	r3, r3
 8004ea8:	69ba      	ldr	r2, [r7, #24]
 8004eaa:	4013      	ands	r3, r2
 8004eac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d003      	beq.n	8004ec2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004eba:	69ba      	ldr	r2, [r7, #24]
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004ec2:	4a2f      	ldr	r2, [pc, #188]	@ (8004f80 <HAL_GPIO_Init+0x304>)
 8004ec4:	69bb      	ldr	r3, [r7, #24]
 8004ec6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004ec8:	4b2d      	ldr	r3, [pc, #180]	@ (8004f80 <HAL_GPIO_Init+0x304>)
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	43db      	mvns	r3, r3
 8004ed2:	69ba      	ldr	r2, [r7, #24]
 8004ed4:	4013      	ands	r3, r2
 8004ed6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d003      	beq.n	8004eec <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004ee4:	69ba      	ldr	r2, [r7, #24]
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004eec:	4a24      	ldr	r2, [pc, #144]	@ (8004f80 <HAL_GPIO_Init+0x304>)
 8004eee:	69bb      	ldr	r3, [r7, #24]
 8004ef0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004ef2:	4b23      	ldr	r3, [pc, #140]	@ (8004f80 <HAL_GPIO_Init+0x304>)
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	43db      	mvns	r3, r3
 8004efc:	69ba      	ldr	r2, [r7, #24]
 8004efe:	4013      	ands	r3, r2
 8004f00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d003      	beq.n	8004f16 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004f0e:	69ba      	ldr	r2, [r7, #24]
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004f16:	4a1a      	ldr	r2, [pc, #104]	@ (8004f80 <HAL_GPIO_Init+0x304>)
 8004f18:	69bb      	ldr	r3, [r7, #24]
 8004f1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004f1c:	4b18      	ldr	r3, [pc, #96]	@ (8004f80 <HAL_GPIO_Init+0x304>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	43db      	mvns	r3, r3
 8004f26:	69ba      	ldr	r2, [r7, #24]
 8004f28:	4013      	ands	r3, r2
 8004f2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d003      	beq.n	8004f40 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004f38:	69ba      	ldr	r2, [r7, #24]
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004f40:	4a0f      	ldr	r2, [pc, #60]	@ (8004f80 <HAL_GPIO_Init+0x304>)
 8004f42:	69bb      	ldr	r3, [r7, #24]
 8004f44:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004f46:	69fb      	ldr	r3, [r7, #28]
 8004f48:	3301      	adds	r3, #1
 8004f4a:	61fb      	str	r3, [r7, #28]
 8004f4c:	69fb      	ldr	r3, [r7, #28]
 8004f4e:	2b0f      	cmp	r3, #15
 8004f50:	f67f aea2 	bls.w	8004c98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004f54:	bf00      	nop
 8004f56:	bf00      	nop
 8004f58:	3724      	adds	r7, #36	@ 0x24
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr
 8004f62:	bf00      	nop
 8004f64:	40023800 	.word	0x40023800
 8004f68:	40013800 	.word	0x40013800
 8004f6c:	40020000 	.word	0x40020000
 8004f70:	40020400 	.word	0x40020400
 8004f74:	40020800 	.word	0x40020800
 8004f78:	40020c00 	.word	0x40020c00
 8004f7c:	40021000 	.word	0x40021000
 8004f80:	40013c00 	.word	0x40013c00

08004f84 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b085      	sub	sp, #20
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	460b      	mov	r3, r1
 8004f8e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	691a      	ldr	r2, [r3, #16]
 8004f94:	887b      	ldrh	r3, [r7, #2]
 8004f96:	4013      	ands	r3, r2
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d002      	beq.n	8004fa2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	73fb      	strb	r3, [r7, #15]
 8004fa0:	e001      	b.n	8004fa6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004fa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3714      	adds	r7, #20
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr

08004fb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b083      	sub	sp, #12
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
 8004fbc:	460b      	mov	r3, r1
 8004fbe:	807b      	strh	r3, [r7, #2]
 8004fc0:	4613      	mov	r3, r2
 8004fc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004fc4:	787b      	ldrb	r3, [r7, #1]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d003      	beq.n	8004fd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004fca:	887a      	ldrh	r2, [r7, #2]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004fd0:	e003      	b.n	8004fda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004fd2:	887b      	ldrh	r3, [r7, #2]
 8004fd4:	041a      	lsls	r2, r3, #16
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	619a      	str	r2, [r3, #24]
}
 8004fda:	bf00      	nop
 8004fdc:	370c      	adds	r7, #12
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr

08004fe6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004fe6:	b480      	push	{r7}
 8004fe8:	b085      	sub	sp, #20
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	6078      	str	r0, [r7, #4]
 8004fee:	460b      	mov	r3, r1
 8004ff0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	695b      	ldr	r3, [r3, #20]
 8004ff6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004ff8:	887a      	ldrh	r2, [r7, #2]
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	041a      	lsls	r2, r3, #16
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	43d9      	mvns	r1, r3
 8005004:	887b      	ldrh	r3, [r7, #2]
 8005006:	400b      	ands	r3, r1
 8005008:	431a      	orrs	r2, r3
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	619a      	str	r2, [r3, #24]
}
 800500e:	bf00      	nop
 8005010:	3714      	adds	r7, #20
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr
	...

0800501c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b082      	sub	sp, #8
 8005020:	af00      	add	r7, sp, #0
 8005022:	4603      	mov	r3, r0
 8005024:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005026:	4b08      	ldr	r3, [pc, #32]	@ (8005048 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005028:	695a      	ldr	r2, [r3, #20]
 800502a:	88fb      	ldrh	r3, [r7, #6]
 800502c:	4013      	ands	r3, r2
 800502e:	2b00      	cmp	r3, #0
 8005030:	d006      	beq.n	8005040 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005032:	4a05      	ldr	r2, [pc, #20]	@ (8005048 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005034:	88fb      	ldrh	r3, [r7, #6]
 8005036:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005038:	88fb      	ldrh	r3, [r7, #6]
 800503a:	4618      	mov	r0, r3
 800503c:	f7fd febe 	bl	8002dbc <HAL_GPIO_EXTI_Callback>
  }
}
 8005040:	bf00      	nop
 8005042:	3708      	adds	r7, #8
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}
 8005048:	40013c00 	.word	0x40013c00

0800504c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b084      	sub	sp, #16
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d101      	bne.n	800505e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800505a:	2301      	movs	r3, #1
 800505c:	e12b      	b.n	80052b6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005064:	b2db      	uxtb	r3, r3
 8005066:	2b00      	cmp	r3, #0
 8005068:	d106      	bne.n	8005078 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2200      	movs	r2, #0
 800506e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f7fe f93e 	bl	80032f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2224      	movs	r2, #36	@ 0x24
 800507c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f022 0201 	bic.w	r2, r2, #1
 800508e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800509e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80050ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80050b0:	f005 fa34 	bl	800a51c <HAL_RCC_GetPCLK1Freq>
 80050b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	4a81      	ldr	r2, [pc, #516]	@ (80052c0 <HAL_I2C_Init+0x274>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d807      	bhi.n	80050d0 <HAL_I2C_Init+0x84>
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	4a80      	ldr	r2, [pc, #512]	@ (80052c4 <HAL_I2C_Init+0x278>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	bf94      	ite	ls
 80050c8:	2301      	movls	r3, #1
 80050ca:	2300      	movhi	r3, #0
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	e006      	b.n	80050de <HAL_I2C_Init+0x92>
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	4a7d      	ldr	r2, [pc, #500]	@ (80052c8 <HAL_I2C_Init+0x27c>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	bf94      	ite	ls
 80050d8:	2301      	movls	r3, #1
 80050da:	2300      	movhi	r3, #0
 80050dc:	b2db      	uxtb	r3, r3
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d001      	beq.n	80050e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	e0e7      	b.n	80052b6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	4a78      	ldr	r2, [pc, #480]	@ (80052cc <HAL_I2C_Init+0x280>)
 80050ea:	fba2 2303 	umull	r2, r3, r2, r3
 80050ee:	0c9b      	lsrs	r3, r3, #18
 80050f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	68ba      	ldr	r2, [r7, #8]
 8005102:	430a      	orrs	r2, r1
 8005104:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	6a1b      	ldr	r3, [r3, #32]
 800510c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	4a6a      	ldr	r2, [pc, #424]	@ (80052c0 <HAL_I2C_Init+0x274>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d802      	bhi.n	8005120 <HAL_I2C_Init+0xd4>
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	3301      	adds	r3, #1
 800511e:	e009      	b.n	8005134 <HAL_I2C_Init+0xe8>
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005126:	fb02 f303 	mul.w	r3, r2, r3
 800512a:	4a69      	ldr	r2, [pc, #420]	@ (80052d0 <HAL_I2C_Init+0x284>)
 800512c:	fba2 2303 	umull	r2, r3, r2, r3
 8005130:	099b      	lsrs	r3, r3, #6
 8005132:	3301      	adds	r3, #1
 8005134:	687a      	ldr	r2, [r7, #4]
 8005136:	6812      	ldr	r2, [r2, #0]
 8005138:	430b      	orrs	r3, r1
 800513a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	69db      	ldr	r3, [r3, #28]
 8005142:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005146:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	495c      	ldr	r1, [pc, #368]	@ (80052c0 <HAL_I2C_Init+0x274>)
 8005150:	428b      	cmp	r3, r1
 8005152:	d819      	bhi.n	8005188 <HAL_I2C_Init+0x13c>
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	1e59      	subs	r1, r3, #1
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	005b      	lsls	r3, r3, #1
 800515e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005162:	1c59      	adds	r1, r3, #1
 8005164:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005168:	400b      	ands	r3, r1
 800516a:	2b00      	cmp	r3, #0
 800516c:	d00a      	beq.n	8005184 <HAL_I2C_Init+0x138>
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	1e59      	subs	r1, r3, #1
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	005b      	lsls	r3, r3, #1
 8005178:	fbb1 f3f3 	udiv	r3, r1, r3
 800517c:	3301      	adds	r3, #1
 800517e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005182:	e051      	b.n	8005228 <HAL_I2C_Init+0x1dc>
 8005184:	2304      	movs	r3, #4
 8005186:	e04f      	b.n	8005228 <HAL_I2C_Init+0x1dc>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d111      	bne.n	80051b4 <HAL_I2C_Init+0x168>
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	1e58      	subs	r0, r3, #1
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6859      	ldr	r1, [r3, #4]
 8005198:	460b      	mov	r3, r1
 800519a:	005b      	lsls	r3, r3, #1
 800519c:	440b      	add	r3, r1
 800519e:	fbb0 f3f3 	udiv	r3, r0, r3
 80051a2:	3301      	adds	r3, #1
 80051a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	bf0c      	ite	eq
 80051ac:	2301      	moveq	r3, #1
 80051ae:	2300      	movne	r3, #0
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	e012      	b.n	80051da <HAL_I2C_Init+0x18e>
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	1e58      	subs	r0, r3, #1
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6859      	ldr	r1, [r3, #4]
 80051bc:	460b      	mov	r3, r1
 80051be:	009b      	lsls	r3, r3, #2
 80051c0:	440b      	add	r3, r1
 80051c2:	0099      	lsls	r1, r3, #2
 80051c4:	440b      	add	r3, r1
 80051c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80051ca:	3301      	adds	r3, #1
 80051cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	bf0c      	ite	eq
 80051d4:	2301      	moveq	r3, #1
 80051d6:	2300      	movne	r3, #0
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d001      	beq.n	80051e2 <HAL_I2C_Init+0x196>
 80051de:	2301      	movs	r3, #1
 80051e0:	e022      	b.n	8005228 <HAL_I2C_Init+0x1dc>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d10e      	bne.n	8005208 <HAL_I2C_Init+0x1bc>
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	1e58      	subs	r0, r3, #1
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6859      	ldr	r1, [r3, #4]
 80051f2:	460b      	mov	r3, r1
 80051f4:	005b      	lsls	r3, r3, #1
 80051f6:	440b      	add	r3, r1
 80051f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80051fc:	3301      	adds	r3, #1
 80051fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005202:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005206:	e00f      	b.n	8005228 <HAL_I2C_Init+0x1dc>
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	1e58      	subs	r0, r3, #1
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6859      	ldr	r1, [r3, #4]
 8005210:	460b      	mov	r3, r1
 8005212:	009b      	lsls	r3, r3, #2
 8005214:	440b      	add	r3, r1
 8005216:	0099      	lsls	r1, r3, #2
 8005218:	440b      	add	r3, r1
 800521a:	fbb0 f3f3 	udiv	r3, r0, r3
 800521e:	3301      	adds	r3, #1
 8005220:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005224:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005228:	6879      	ldr	r1, [r7, #4]
 800522a:	6809      	ldr	r1, [r1, #0]
 800522c:	4313      	orrs	r3, r2
 800522e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	69da      	ldr	r2, [r3, #28]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6a1b      	ldr	r3, [r3, #32]
 8005242:	431a      	orrs	r2, r3
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	430a      	orrs	r2, r1
 800524a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005256:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800525a:	687a      	ldr	r2, [r7, #4]
 800525c:	6911      	ldr	r1, [r2, #16]
 800525e:	687a      	ldr	r2, [r7, #4]
 8005260:	68d2      	ldr	r2, [r2, #12]
 8005262:	4311      	orrs	r1, r2
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	6812      	ldr	r2, [r2, #0]
 8005268:	430b      	orrs	r3, r1
 800526a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	68db      	ldr	r3, [r3, #12]
 8005272:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	695a      	ldr	r2, [r3, #20]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	699b      	ldr	r3, [r3, #24]
 800527e:	431a      	orrs	r2, r3
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	430a      	orrs	r2, r1
 8005286:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f042 0201 	orr.w	r2, r2, #1
 8005296:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2200      	movs	r2, #0
 800529c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2220      	movs	r2, #32
 80052a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2200      	movs	r2, #0
 80052aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2200      	movs	r2, #0
 80052b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80052b4:	2300      	movs	r3, #0
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3710      	adds	r7, #16
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}
 80052be:	bf00      	nop
 80052c0:	000186a0 	.word	0x000186a0
 80052c4:	001e847f 	.word	0x001e847f
 80052c8:	003d08ff 	.word	0x003d08ff
 80052cc:	431bde83 	.word	0x431bde83
 80052d0:	10624dd3 	.word	0x10624dd3

080052d4 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b083      	sub	sp, #12
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	695b      	ldr	r3, [r3, #20]
 80052e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052e6:	2b80      	cmp	r3, #128	@ 0x80
 80052e8:	d103      	bne.n	80052f2 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	2200      	movs	r2, #0
 80052f0:	611a      	str	r2, [r3, #16]
  }
}
 80052f2:	bf00      	nop
 80052f4:	370c      	adds	r7, #12
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr
	...

08005300 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b088      	sub	sp, #32
 8005304:	af02      	add	r7, sp, #8
 8005306:	60f8      	str	r0, [r7, #12]
 8005308:	607a      	str	r2, [r7, #4]
 800530a:	461a      	mov	r2, r3
 800530c:	460b      	mov	r3, r1
 800530e:	817b      	strh	r3, [r7, #10]
 8005310:	4613      	mov	r3, r2
 8005312:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005314:	f7fe faa8 	bl	8003868 <HAL_GetTick>
 8005318:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005320:	b2db      	uxtb	r3, r3
 8005322:	2b20      	cmp	r3, #32
 8005324:	f040 80e0 	bne.w	80054e8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	9300      	str	r3, [sp, #0]
 800532c:	2319      	movs	r3, #25
 800532e:	2201      	movs	r2, #1
 8005330:	4970      	ldr	r1, [pc, #448]	@ (80054f4 <HAL_I2C_Master_Transmit+0x1f4>)
 8005332:	68f8      	ldr	r0, [r7, #12]
 8005334:	f002 ffe0 	bl	80082f8 <I2C_WaitOnFlagUntilTimeout>
 8005338:	4603      	mov	r3, r0
 800533a:	2b00      	cmp	r3, #0
 800533c:	d001      	beq.n	8005342 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800533e:	2302      	movs	r3, #2
 8005340:	e0d3      	b.n	80054ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005348:	2b01      	cmp	r3, #1
 800534a:	d101      	bne.n	8005350 <HAL_I2C_Master_Transmit+0x50>
 800534c:	2302      	movs	r3, #2
 800534e:	e0cc      	b.n	80054ea <HAL_I2C_Master_Transmit+0x1ea>
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2201      	movs	r2, #1
 8005354:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f003 0301 	and.w	r3, r3, #1
 8005362:	2b01      	cmp	r3, #1
 8005364:	d007      	beq.n	8005376 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f042 0201 	orr.w	r2, r2, #1
 8005374:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005384:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2221      	movs	r2, #33	@ 0x21
 800538a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2210      	movs	r2, #16
 8005392:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2200      	movs	r2, #0
 800539a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	687a      	ldr	r2, [r7, #4]
 80053a0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	893a      	ldrh	r2, [r7, #8]
 80053a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053ac:	b29a      	uxth	r2, r3
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	4a50      	ldr	r2, [pc, #320]	@ (80054f8 <HAL_I2C_Master_Transmit+0x1f8>)
 80053b6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80053b8:	8979      	ldrh	r1, [r7, #10]
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	6a3a      	ldr	r2, [r7, #32]
 80053be:	68f8      	ldr	r0, [r7, #12]
 80053c0:	f002 fbd6 	bl	8007b70 <I2C_MasterRequestWrite>
 80053c4:	4603      	mov	r3, r0
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d001      	beq.n	80053ce <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80053ca:	2301      	movs	r3, #1
 80053cc:	e08d      	b.n	80054ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053ce:	2300      	movs	r3, #0
 80053d0:	613b      	str	r3, [r7, #16]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	695b      	ldr	r3, [r3, #20]
 80053d8:	613b      	str	r3, [r7, #16]
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	699b      	ldr	r3, [r3, #24]
 80053e0:	613b      	str	r3, [r7, #16]
 80053e2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80053e4:	e066      	b.n	80054b4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053e6:	697a      	ldr	r2, [r7, #20]
 80053e8:	6a39      	ldr	r1, [r7, #32]
 80053ea:	68f8      	ldr	r0, [r7, #12]
 80053ec:	f003 f89e 	bl	800852c <I2C_WaitOnTXEFlagUntilTimeout>
 80053f0:	4603      	mov	r3, r0
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d00d      	beq.n	8005412 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053fa:	2b04      	cmp	r3, #4
 80053fc:	d107      	bne.n	800540e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	681a      	ldr	r2, [r3, #0]
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800540c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	e06b      	b.n	80054ea <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005416:	781a      	ldrb	r2, [r3, #0]
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005422:	1c5a      	adds	r2, r3, #1
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800542c:	b29b      	uxth	r3, r3
 800542e:	3b01      	subs	r3, #1
 8005430:	b29a      	uxth	r2, r3
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800543a:	3b01      	subs	r3, #1
 800543c:	b29a      	uxth	r2, r3
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	695b      	ldr	r3, [r3, #20]
 8005448:	f003 0304 	and.w	r3, r3, #4
 800544c:	2b04      	cmp	r3, #4
 800544e:	d11b      	bne.n	8005488 <HAL_I2C_Master_Transmit+0x188>
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005454:	2b00      	cmp	r3, #0
 8005456:	d017      	beq.n	8005488 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800545c:	781a      	ldrb	r2, [r3, #0]
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005468:	1c5a      	adds	r2, r3, #1
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005472:	b29b      	uxth	r3, r3
 8005474:	3b01      	subs	r3, #1
 8005476:	b29a      	uxth	r2, r3
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005480:	3b01      	subs	r3, #1
 8005482:	b29a      	uxth	r2, r3
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005488:	697a      	ldr	r2, [r7, #20]
 800548a:	6a39      	ldr	r1, [r7, #32]
 800548c:	68f8      	ldr	r0, [r7, #12]
 800548e:	f003 f895 	bl	80085bc <I2C_WaitOnBTFFlagUntilTimeout>
 8005492:	4603      	mov	r3, r0
 8005494:	2b00      	cmp	r3, #0
 8005496:	d00d      	beq.n	80054b4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800549c:	2b04      	cmp	r3, #4
 800549e:	d107      	bne.n	80054b0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80054ae:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	e01a      	b.n	80054ea <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d194      	bne.n	80053e6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	681a      	ldr	r2, [r3, #0]
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80054ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2220      	movs	r2, #32
 80054d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2200      	movs	r2, #0
 80054d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2200      	movs	r2, #0
 80054e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80054e4:	2300      	movs	r3, #0
 80054e6:	e000      	b.n	80054ea <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80054e8:	2302      	movs	r3, #2
  }
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3718      	adds	r7, #24
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}
 80054f2:	bf00      	nop
 80054f4:	00100002 	.word	0x00100002
 80054f8:	ffff0000 	.word	0xffff0000

080054fc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b088      	sub	sp, #32
 8005500:	af02      	add	r7, sp, #8
 8005502:	60f8      	str	r0, [r7, #12]
 8005504:	4608      	mov	r0, r1
 8005506:	4611      	mov	r1, r2
 8005508:	461a      	mov	r2, r3
 800550a:	4603      	mov	r3, r0
 800550c:	817b      	strh	r3, [r7, #10]
 800550e:	460b      	mov	r3, r1
 8005510:	813b      	strh	r3, [r7, #8]
 8005512:	4613      	mov	r3, r2
 8005514:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005516:	f7fe f9a7 	bl	8003868 <HAL_GetTick>
 800551a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005522:	b2db      	uxtb	r3, r3
 8005524:	2b20      	cmp	r3, #32
 8005526:	f040 80d9 	bne.w	80056dc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	9300      	str	r3, [sp, #0]
 800552e:	2319      	movs	r3, #25
 8005530:	2201      	movs	r2, #1
 8005532:	496d      	ldr	r1, [pc, #436]	@ (80056e8 <HAL_I2C_Mem_Write+0x1ec>)
 8005534:	68f8      	ldr	r0, [r7, #12]
 8005536:	f002 fedf 	bl	80082f8 <I2C_WaitOnFlagUntilTimeout>
 800553a:	4603      	mov	r3, r0
 800553c:	2b00      	cmp	r3, #0
 800553e:	d001      	beq.n	8005544 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005540:	2302      	movs	r3, #2
 8005542:	e0cc      	b.n	80056de <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800554a:	2b01      	cmp	r3, #1
 800554c:	d101      	bne.n	8005552 <HAL_I2C_Mem_Write+0x56>
 800554e:	2302      	movs	r3, #2
 8005550:	e0c5      	b.n	80056de <HAL_I2C_Mem_Write+0x1e2>
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2201      	movs	r2, #1
 8005556:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f003 0301 	and.w	r3, r3, #1
 8005564:	2b01      	cmp	r3, #1
 8005566:	d007      	beq.n	8005578 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	681a      	ldr	r2, [r3, #0]
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f042 0201 	orr.w	r2, r2, #1
 8005576:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005586:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2221      	movs	r2, #33	@ 0x21
 800558c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2240      	movs	r2, #64	@ 0x40
 8005594:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2200      	movs	r2, #0
 800559c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	6a3a      	ldr	r2, [r7, #32]
 80055a2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80055a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055ae:	b29a      	uxth	r2, r3
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	4a4d      	ldr	r2, [pc, #308]	@ (80056ec <HAL_I2C_Mem_Write+0x1f0>)
 80055b8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80055ba:	88f8      	ldrh	r0, [r7, #6]
 80055bc:	893a      	ldrh	r2, [r7, #8]
 80055be:	8979      	ldrh	r1, [r7, #10]
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	9301      	str	r3, [sp, #4]
 80055c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055c6:	9300      	str	r3, [sp, #0]
 80055c8:	4603      	mov	r3, r0
 80055ca:	68f8      	ldr	r0, [r7, #12]
 80055cc:	f002 fb52 	bl	8007c74 <I2C_RequestMemoryWrite>
 80055d0:	4603      	mov	r3, r0
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d052      	beq.n	800567c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	e081      	b.n	80056de <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055da:	697a      	ldr	r2, [r7, #20]
 80055dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80055de:	68f8      	ldr	r0, [r7, #12]
 80055e0:	f002 ffa4 	bl	800852c <I2C_WaitOnTXEFlagUntilTimeout>
 80055e4:	4603      	mov	r3, r0
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d00d      	beq.n	8005606 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055ee:	2b04      	cmp	r3, #4
 80055f0:	d107      	bne.n	8005602 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005600:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	e06b      	b.n	80056de <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800560a:	781a      	ldrb	r2, [r3, #0]
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005616:	1c5a      	adds	r2, r3, #1
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005620:	3b01      	subs	r3, #1
 8005622:	b29a      	uxth	r2, r3
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800562c:	b29b      	uxth	r3, r3
 800562e:	3b01      	subs	r3, #1
 8005630:	b29a      	uxth	r2, r3
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	695b      	ldr	r3, [r3, #20]
 800563c:	f003 0304 	and.w	r3, r3, #4
 8005640:	2b04      	cmp	r3, #4
 8005642:	d11b      	bne.n	800567c <HAL_I2C_Mem_Write+0x180>
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005648:	2b00      	cmp	r3, #0
 800564a:	d017      	beq.n	800567c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005650:	781a      	ldrb	r2, [r3, #0]
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800565c:	1c5a      	adds	r2, r3, #1
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005666:	3b01      	subs	r3, #1
 8005668:	b29a      	uxth	r2, r3
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005672:	b29b      	uxth	r3, r3
 8005674:	3b01      	subs	r3, #1
 8005676:	b29a      	uxth	r2, r3
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005680:	2b00      	cmp	r3, #0
 8005682:	d1aa      	bne.n	80055da <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005684:	697a      	ldr	r2, [r7, #20]
 8005686:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005688:	68f8      	ldr	r0, [r7, #12]
 800568a:	f002 ff97 	bl	80085bc <I2C_WaitOnBTFFlagUntilTimeout>
 800568e:	4603      	mov	r3, r0
 8005690:	2b00      	cmp	r3, #0
 8005692:	d00d      	beq.n	80056b0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005698:	2b04      	cmp	r3, #4
 800569a:	d107      	bne.n	80056ac <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80056aa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80056ac:	2301      	movs	r3, #1
 80056ae:	e016      	b.n	80056de <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80056be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2220      	movs	r2, #32
 80056c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2200      	movs	r2, #0
 80056cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2200      	movs	r2, #0
 80056d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80056d8:	2300      	movs	r3, #0
 80056da:	e000      	b.n	80056de <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80056dc:	2302      	movs	r3, #2
  }
}
 80056de:	4618      	mov	r0, r3
 80056e0:	3718      	adds	r7, #24
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}
 80056e6:	bf00      	nop
 80056e8:	00100002 	.word	0x00100002
 80056ec:	ffff0000 	.word	0xffff0000

080056f0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b08c      	sub	sp, #48	@ 0x30
 80056f4:	af02      	add	r7, sp, #8
 80056f6:	60f8      	str	r0, [r7, #12]
 80056f8:	4608      	mov	r0, r1
 80056fa:	4611      	mov	r1, r2
 80056fc:	461a      	mov	r2, r3
 80056fe:	4603      	mov	r3, r0
 8005700:	817b      	strh	r3, [r7, #10]
 8005702:	460b      	mov	r3, r1
 8005704:	813b      	strh	r3, [r7, #8]
 8005706:	4613      	mov	r3, r2
 8005708:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800570a:	f7fe f8ad 	bl	8003868 <HAL_GetTick>
 800570e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005716:	b2db      	uxtb	r3, r3
 8005718:	2b20      	cmp	r3, #32
 800571a:	f040 8214 	bne.w	8005b46 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800571e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005720:	9300      	str	r3, [sp, #0]
 8005722:	2319      	movs	r3, #25
 8005724:	2201      	movs	r2, #1
 8005726:	497b      	ldr	r1, [pc, #492]	@ (8005914 <HAL_I2C_Mem_Read+0x224>)
 8005728:	68f8      	ldr	r0, [r7, #12]
 800572a:	f002 fde5 	bl	80082f8 <I2C_WaitOnFlagUntilTimeout>
 800572e:	4603      	mov	r3, r0
 8005730:	2b00      	cmp	r3, #0
 8005732:	d001      	beq.n	8005738 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005734:	2302      	movs	r3, #2
 8005736:	e207      	b.n	8005b48 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800573e:	2b01      	cmp	r3, #1
 8005740:	d101      	bne.n	8005746 <HAL_I2C_Mem_Read+0x56>
 8005742:	2302      	movs	r3, #2
 8005744:	e200      	b.n	8005b48 <HAL_I2C_Mem_Read+0x458>
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2201      	movs	r2, #1
 800574a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f003 0301 	and.w	r3, r3, #1
 8005758:	2b01      	cmp	r3, #1
 800575a:	d007      	beq.n	800576c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f042 0201 	orr.w	r2, r2, #1
 800576a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	681a      	ldr	r2, [r3, #0]
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800577a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2222      	movs	r2, #34	@ 0x22
 8005780:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2240      	movs	r2, #64	@ 0x40
 8005788:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2200      	movs	r2, #0
 8005790:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005796:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800579c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057a2:	b29a      	uxth	r2, r3
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	4a5b      	ldr	r2, [pc, #364]	@ (8005918 <HAL_I2C_Mem_Read+0x228>)
 80057ac:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80057ae:	88f8      	ldrh	r0, [r7, #6]
 80057b0:	893a      	ldrh	r2, [r7, #8]
 80057b2:	8979      	ldrh	r1, [r7, #10]
 80057b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057b6:	9301      	str	r3, [sp, #4]
 80057b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057ba:	9300      	str	r3, [sp, #0]
 80057bc:	4603      	mov	r3, r0
 80057be:	68f8      	ldr	r0, [r7, #12]
 80057c0:	f002 faee 	bl	8007da0 <I2C_RequestMemoryRead>
 80057c4:	4603      	mov	r3, r0
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d001      	beq.n	80057ce <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	e1bc      	b.n	8005b48 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d113      	bne.n	80057fe <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057d6:	2300      	movs	r3, #0
 80057d8:	623b      	str	r3, [r7, #32]
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	695b      	ldr	r3, [r3, #20]
 80057e0:	623b      	str	r3, [r7, #32]
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	699b      	ldr	r3, [r3, #24]
 80057e8:	623b      	str	r3, [r7, #32]
 80057ea:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80057fa:	601a      	str	r2, [r3, #0]
 80057fc:	e190      	b.n	8005b20 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005802:	2b01      	cmp	r3, #1
 8005804:	d11b      	bne.n	800583e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005814:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005816:	2300      	movs	r3, #0
 8005818:	61fb      	str	r3, [r7, #28]
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	695b      	ldr	r3, [r3, #20]
 8005820:	61fb      	str	r3, [r7, #28]
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	699b      	ldr	r3, [r3, #24]
 8005828:	61fb      	str	r3, [r7, #28]
 800582a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800583a:	601a      	str	r2, [r3, #0]
 800583c:	e170      	b.n	8005b20 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005842:	2b02      	cmp	r3, #2
 8005844:	d11b      	bne.n	800587e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	681a      	ldr	r2, [r3, #0]
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005854:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005864:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005866:	2300      	movs	r3, #0
 8005868:	61bb      	str	r3, [r7, #24]
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	695b      	ldr	r3, [r3, #20]
 8005870:	61bb      	str	r3, [r7, #24]
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	699b      	ldr	r3, [r3, #24]
 8005878:	61bb      	str	r3, [r7, #24]
 800587a:	69bb      	ldr	r3, [r7, #24]
 800587c:	e150      	b.n	8005b20 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800587e:	2300      	movs	r3, #0
 8005880:	617b      	str	r3, [r7, #20]
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	695b      	ldr	r3, [r3, #20]
 8005888:	617b      	str	r3, [r7, #20]
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	699b      	ldr	r3, [r3, #24]
 8005890:	617b      	str	r3, [r7, #20]
 8005892:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005894:	e144      	b.n	8005b20 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800589a:	2b03      	cmp	r3, #3
 800589c:	f200 80f1 	bhi.w	8005a82 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d123      	bne.n	80058f0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058aa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80058ac:	68f8      	ldr	r0, [r7, #12]
 80058ae:	f002 feff 	bl	80086b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80058b2:	4603      	mov	r3, r0
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d001      	beq.n	80058bc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	e145      	b.n	8005b48 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	691a      	ldr	r2, [r3, #16]
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058c6:	b2d2      	uxtb	r2, r2
 80058c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058ce:	1c5a      	adds	r2, r3, #1
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058d8:	3b01      	subs	r3, #1
 80058da:	b29a      	uxth	r2, r3
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	3b01      	subs	r3, #1
 80058e8:	b29a      	uxth	r2, r3
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80058ee:	e117      	b.n	8005b20 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058f4:	2b02      	cmp	r3, #2
 80058f6:	d14e      	bne.n	8005996 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80058f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058fa:	9300      	str	r3, [sp, #0]
 80058fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058fe:	2200      	movs	r2, #0
 8005900:	4906      	ldr	r1, [pc, #24]	@ (800591c <HAL_I2C_Mem_Read+0x22c>)
 8005902:	68f8      	ldr	r0, [r7, #12]
 8005904:	f002 fcf8 	bl	80082f8 <I2C_WaitOnFlagUntilTimeout>
 8005908:	4603      	mov	r3, r0
 800590a:	2b00      	cmp	r3, #0
 800590c:	d008      	beq.n	8005920 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800590e:	2301      	movs	r3, #1
 8005910:	e11a      	b.n	8005b48 <HAL_I2C_Mem_Read+0x458>
 8005912:	bf00      	nop
 8005914:	00100002 	.word	0x00100002
 8005918:	ffff0000 	.word	0xffff0000
 800591c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800592e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	691a      	ldr	r2, [r3, #16]
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800593a:	b2d2      	uxtb	r2, r2
 800593c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005942:	1c5a      	adds	r2, r3, #1
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800594c:	3b01      	subs	r3, #1
 800594e:	b29a      	uxth	r2, r3
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005958:	b29b      	uxth	r3, r3
 800595a:	3b01      	subs	r3, #1
 800595c:	b29a      	uxth	r2, r3
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	691a      	ldr	r2, [r3, #16]
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800596c:	b2d2      	uxtb	r2, r2
 800596e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005974:	1c5a      	adds	r2, r3, #1
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800597e:	3b01      	subs	r3, #1
 8005980:	b29a      	uxth	r2, r3
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800598a:	b29b      	uxth	r3, r3
 800598c:	3b01      	subs	r3, #1
 800598e:	b29a      	uxth	r2, r3
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005994:	e0c4      	b.n	8005b20 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005998:	9300      	str	r3, [sp, #0]
 800599a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800599c:	2200      	movs	r2, #0
 800599e:	496c      	ldr	r1, [pc, #432]	@ (8005b50 <HAL_I2C_Mem_Read+0x460>)
 80059a0:	68f8      	ldr	r0, [r7, #12]
 80059a2:	f002 fca9 	bl	80082f8 <I2C_WaitOnFlagUntilTimeout>
 80059a6:	4603      	mov	r3, r0
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d001      	beq.n	80059b0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80059ac:	2301      	movs	r3, #1
 80059ae:	e0cb      	b.n	8005b48 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	681a      	ldr	r2, [r3, #0]
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80059be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	691a      	ldr	r2, [r3, #16]
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059ca:	b2d2      	uxtb	r2, r2
 80059cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059d2:	1c5a      	adds	r2, r3, #1
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059dc:	3b01      	subs	r3, #1
 80059de:	b29a      	uxth	r2, r3
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059e8:	b29b      	uxth	r3, r3
 80059ea:	3b01      	subs	r3, #1
 80059ec:	b29a      	uxth	r2, r3
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80059f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059f4:	9300      	str	r3, [sp, #0]
 80059f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059f8:	2200      	movs	r2, #0
 80059fa:	4955      	ldr	r1, [pc, #340]	@ (8005b50 <HAL_I2C_Mem_Read+0x460>)
 80059fc:	68f8      	ldr	r0, [r7, #12]
 80059fe:	f002 fc7b 	bl	80082f8 <I2C_WaitOnFlagUntilTimeout>
 8005a02:	4603      	mov	r3, r0
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d001      	beq.n	8005a0c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	e09d      	b.n	8005b48 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	681a      	ldr	r2, [r3, #0]
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a1a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	691a      	ldr	r2, [r3, #16]
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a26:	b2d2      	uxtb	r2, r2
 8005a28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a2e:	1c5a      	adds	r2, r3, #1
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a38:	3b01      	subs	r3, #1
 8005a3a:	b29a      	uxth	r2, r3
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	3b01      	subs	r3, #1
 8005a48:	b29a      	uxth	r2, r3
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	691a      	ldr	r2, [r3, #16]
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a58:	b2d2      	uxtb	r2, r2
 8005a5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a60:	1c5a      	adds	r2, r3, #1
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a6a:	3b01      	subs	r3, #1
 8005a6c:	b29a      	uxth	r2, r3
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	3b01      	subs	r3, #1
 8005a7a:	b29a      	uxth	r2, r3
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005a80:	e04e      	b.n	8005b20 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a84:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005a86:	68f8      	ldr	r0, [r7, #12]
 8005a88:	f002 fe12 	bl	80086b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d001      	beq.n	8005a96 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	e058      	b.n	8005b48 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	691a      	ldr	r2, [r3, #16]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aa0:	b2d2      	uxtb	r2, r2
 8005aa2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aa8:	1c5a      	adds	r2, r3, #1
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ab2:	3b01      	subs	r3, #1
 8005ab4:	b29a      	uxth	r2, r3
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	3b01      	subs	r3, #1
 8005ac2:	b29a      	uxth	r2, r3
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	695b      	ldr	r3, [r3, #20]
 8005ace:	f003 0304 	and.w	r3, r3, #4
 8005ad2:	2b04      	cmp	r3, #4
 8005ad4:	d124      	bne.n	8005b20 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ada:	2b03      	cmp	r3, #3
 8005adc:	d107      	bne.n	8005aee <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005aec:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	691a      	ldr	r2, [r3, #16]
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005af8:	b2d2      	uxtb	r2, r2
 8005afa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b00:	1c5a      	adds	r2, r3, #1
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b0a:	3b01      	subs	r3, #1
 8005b0c:	b29a      	uxth	r2, r3
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b16:	b29b      	uxth	r3, r3
 8005b18:	3b01      	subs	r3, #1
 8005b1a:	b29a      	uxth	r2, r3
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	f47f aeb6 	bne.w	8005896 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2220      	movs	r2, #32
 8005b2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2200      	movs	r2, #0
 8005b36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005b42:	2300      	movs	r3, #0
 8005b44:	e000      	b.n	8005b48 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8005b46:	2302      	movs	r3, #2
  }
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	3728      	adds	r7, #40	@ 0x28
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}
 8005b50:	00010004 	.word	0x00010004

08005b54 <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b08a      	sub	sp, #40	@ 0x28
 8005b58:	af02      	add	r7, sp, #8
 8005b5a:	60f8      	str	r0, [r7, #12]
 8005b5c:	4608      	mov	r0, r1
 8005b5e:	4611      	mov	r1, r2
 8005b60:	461a      	mov	r2, r3
 8005b62:	4603      	mov	r3, r0
 8005b64:	817b      	strh	r3, [r7, #10]
 8005b66:	460b      	mov	r3, r1
 8005b68:	813b      	strh	r3, [r7, #8]
 8005b6a:	4613      	mov	r3, r2
 8005b6c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005b72:	f7fd fe79 	bl	8003868 <HAL_GetTick>
 8005b76:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b7e:	b2db      	uxtb	r3, r3
 8005b80:	2b20      	cmp	r3, #32
 8005b82:	f040 8136 	bne.w	8005df2 <HAL_I2C_Mem_Write_DMA+0x29e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8005b86:	4b9d      	ldr	r3, [pc, #628]	@ (8005dfc <HAL_I2C_Mem_Write_DMA+0x2a8>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	08db      	lsrs	r3, r3, #3
 8005b8c:	4a9c      	ldr	r2, [pc, #624]	@ (8005e00 <HAL_I2C_Mem_Write_DMA+0x2ac>)
 8005b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b92:	0a1a      	lsrs	r2, r3, #8
 8005b94:	4613      	mov	r3, r2
 8005b96:	009b      	lsls	r3, r3, #2
 8005b98:	4413      	add	r3, r2
 8005b9a:	009a      	lsls	r2, r3, #2
 8005b9c:	4413      	add	r3, r2
 8005b9e:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	3b01      	subs	r3, #1
 8005ba4:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d112      	bne.n	8005bd2 <HAL_I2C_Mem_Write_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2220      	movs	r2, #32
 8005bb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bc6:	f043 0220 	orr.w	r2, r3, #32
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8005bce:	2302      	movs	r3, #2
 8005bd0:	e110      	b.n	8005df4 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	699b      	ldr	r3, [r3, #24]
 8005bd8:	f003 0302 	and.w	r3, r3, #2
 8005bdc:	2b02      	cmp	r3, #2
 8005bde:	d0df      	beq.n	8005ba0 <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005be6:	2b01      	cmp	r3, #1
 8005be8:	d101      	bne.n	8005bee <HAL_I2C_Mem_Write_DMA+0x9a>
 8005bea:	2302      	movs	r3, #2
 8005bec:	e102      	b.n	8005df4 <HAL_I2C_Mem_Write_DMA+0x2a0>
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2201      	movs	r2, #1
 8005bf2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f003 0301 	and.w	r3, r3, #1
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d007      	beq.n	8005c14 <HAL_I2C_Mem_Write_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	681a      	ldr	r2, [r3, #0]
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f042 0201 	orr.w	r2, r2, #1
 8005c12:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	681a      	ldr	r2, [r3, #0]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005c22:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2221      	movs	r2, #33	@ 0x21
 8005c28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2240      	movs	r2, #64	@ 0x40
 8005c30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2200      	movs	r2, #0
 8005c38:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005c3e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8005c44:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c4a:	b29a      	uxth	r2, r3
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	4a6c      	ldr	r2, [pc, #432]	@ (8005e04 <HAL_I2C_Mem_Write_DMA+0x2b0>)
 8005c54:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8005c56:	897a      	ldrh	r2, [r7, #10]
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8005c5c:	893a      	ldrh	r2, [r7, #8]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 8005c62:	88fa      	ldrh	r2, [r7, #6]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	f000 80a9 	beq.w	8005dca <HAL_I2C_Mem_Write_DMA+0x276>
    {
      if (hi2c->hdmatx != NULL)
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d02a      	beq.n	8005cd6 <HAL_I2C_Mem_Write_DMA+0x182>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c84:	4a60      	ldr	r2, [pc, #384]	@ (8005e08 <HAL_I2C_Mem_Write_DMA+0x2b4>)
 8005c86:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c8c:	4a5f      	ldr	r2, [pc, #380]	@ (8005e0c <HAL_I2C_Mem_Write_DMA+0x2b8>)
 8005c8e:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c94:	2200      	movs	r2, #0
 8005c96:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cac:	2200      	movs	r2, #0
 8005cae:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cb8:	4619      	mov	r1, r3
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	3310      	adds	r3, #16
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cc6:	f7fe fcdb 	bl	8004680 <HAL_DMA_Start_IT>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8005cce:	7efb      	ldrb	r3, [r7, #27]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d166      	bne.n	8005da2 <HAL_I2C_Mem_Write_DMA+0x24e>
 8005cd4:	e013      	b.n	8005cfe <HAL_I2C_Mem_Write_DMA+0x1aa>
        hi2c->State     = HAL_I2C_STATE_READY;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2220      	movs	r2, #32
 8005cda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cea:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	e07a      	b.n	8005df4 <HAL_I2C_Mem_Write_DMA+0x2a0>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8005cfe:	88f8      	ldrh	r0, [r7, #6]
 8005d00:	893a      	ldrh	r2, [r7, #8]
 8005d02:	8979      	ldrh	r1, [r7, #10]
 8005d04:	69fb      	ldr	r3, [r7, #28]
 8005d06:	9301      	str	r3, [sp, #4]
 8005d08:	2323      	movs	r3, #35	@ 0x23
 8005d0a:	9300      	str	r3, [sp, #0]
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	68f8      	ldr	r0, [r7, #12]
 8005d10:	f001 ffb0 	bl	8007c74 <I2C_RequestMemoryWrite>
 8005d14:	4603      	mov	r3, r0
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d022      	beq.n	8005d60 <HAL_I2C_Mem_Write_DMA+0x20c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f7fe fd06 	bl	8004730 <HAL_DMA_Abort_IT>
 8005d24:	4603      	mov	r3, r0
 8005d26:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	681a      	ldr	r2, [r3, #0]
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d3e:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	2200      	movs	r2, #0
 8005d44:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	681a      	ldr	r2, [r3, #0]
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f022 0201 	bic.w	r2, r2, #1
 8005d5a:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	e049      	b.n	8005df4 <HAL_I2C_Mem_Write_DMA+0x2a0>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d60:	2300      	movs	r3, #0
 8005d62:	613b      	str	r3, [r7, #16]
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	695b      	ldr	r3, [r3, #20]
 8005d6a:	613b      	str	r3, [r7, #16]
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	699b      	ldr	r3, [r3, #24]
 8005d72:	613b      	str	r3, [r7, #16]
 8005d74:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	685a      	ldr	r2, [r3, #4]
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005d8c:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	685a      	ldr	r2, [r3, #4]
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005d9c:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	e028      	b.n	8005df4 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2220      	movs	r2, #32
 8005da6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2200      	movs	r2, #0
 8005dae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005db6:	f043 0210 	orr.w	r2, r3, #16
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	e014      	b.n	8005df4 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2220      	movs	r2, #32
 8005dce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dde:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2200      	movs	r2, #0
 8005dea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005dee:	2301      	movs	r3, #1
 8005df0:	e000      	b.n	8005df4 <HAL_I2C_Mem_Write_DMA+0x2a0>
    }
  }
  else
  {
    return HAL_BUSY;
 8005df2:	2302      	movs	r3, #2
  }
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3720      	adds	r7, #32
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}
 8005dfc:	2000000c 	.word	0x2000000c
 8005e00:	14f8b589 	.word	0x14f8b589
 8005e04:	ffff0000 	.word	0xffff0000
 8005e08:	08007f71 	.word	0x08007f71
 8005e0c:	0800812f 	.word	0x0800812f

08005e10 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b08c      	sub	sp, #48	@ 0x30
 8005e14:	af02      	add	r7, sp, #8
 8005e16:	60f8      	str	r0, [r7, #12]
 8005e18:	4608      	mov	r0, r1
 8005e1a:	4611      	mov	r1, r2
 8005e1c:	461a      	mov	r2, r3
 8005e1e:	4603      	mov	r3, r0
 8005e20:	817b      	strh	r3, [r7, #10]
 8005e22:	460b      	mov	r3, r1
 8005e24:	813b      	strh	r3, [r7, #8]
 8005e26:	4613      	mov	r3, r2
 8005e28:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005e2a:	f7fd fd1d 	bl	8003868 <HAL_GetTick>
 8005e2e:	6278      	str	r0, [r7, #36]	@ 0x24
  __IO uint32_t count = 0U;
 8005e30:	2300      	movs	r3, #0
 8005e32:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e3a:	b2db      	uxtb	r3, r3
 8005e3c:	2b20      	cmp	r3, #32
 8005e3e:	f040 8172 	bne.w	8006126 <HAL_I2C_Mem_Read_DMA+0x316>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8005e42:	4b93      	ldr	r3, [pc, #588]	@ (8006090 <HAL_I2C_Mem_Read_DMA+0x280>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	08db      	lsrs	r3, r3, #3
 8005e48:	4a92      	ldr	r2, [pc, #584]	@ (8006094 <HAL_I2C_Mem_Read_DMA+0x284>)
 8005e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e4e:	0a1a      	lsrs	r2, r3, #8
 8005e50:	4613      	mov	r3, r2
 8005e52:	009b      	lsls	r3, r3, #2
 8005e54:	4413      	add	r3, r2
 8005e56:	009a      	lsls	r2, r3, #2
 8005e58:	4413      	add	r3, r2
 8005e5a:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8005e5c:	69fb      	ldr	r3, [r7, #28]
 8005e5e:	3b01      	subs	r3, #1
 8005e60:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 8005e62:	69fb      	ldr	r3, [r7, #28]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d112      	bne.n	8005e8e <HAL_I2C_Mem_Read_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	2220      	movs	r2, #32
 8005e72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e82:	f043 0220 	orr.w	r2, r3, #32
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8005e8a:	2302      	movs	r3, #2
 8005e8c:	e14c      	b.n	8006128 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	699b      	ldr	r3, [r3, #24]
 8005e94:	f003 0302 	and.w	r3, r3, #2
 8005e98:	2b02      	cmp	r3, #2
 8005e9a:	d0df      	beq.n	8005e5c <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d101      	bne.n	8005eaa <HAL_I2C_Mem_Read_DMA+0x9a>
 8005ea6:	2302      	movs	r3, #2
 8005ea8:	e13e      	b.n	8006128 <HAL_I2C_Mem_Read_DMA+0x318>
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2201      	movs	r2, #1
 8005eae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f003 0301 	and.w	r3, r3, #1
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	d007      	beq.n	8005ed0 <HAL_I2C_Mem_Read_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f042 0201 	orr.w	r2, r2, #1
 8005ece:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005ede:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2222      	movs	r2, #34	@ 0x22
 8005ee4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2240      	movs	r2, #64	@ 0x40
 8005eec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005efa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005f00:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f06:	b29a      	uxth	r2, r3
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	4a62      	ldr	r2, [pc, #392]	@ (8006098 <HAL_I2C_Mem_Read_DMA+0x288>)
 8005f10:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8005f12:	897a      	ldrh	r2, [r7, #10]
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8005f18:	893a      	ldrh	r2, [r7, #8]
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 8005f1e:	88fa      	ldrh	r2, [r7, #6]
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2200      	movs	r2, #0
 8005f28:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	f000 80cc 	beq.w	80060cc <HAL_I2C_Mem_Read_DMA+0x2bc>
    {
      if (hi2c->hdmarx != NULL)
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d02d      	beq.n	8005f98 <HAL_I2C_Mem_Read_DMA+0x188>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f40:	4a56      	ldr	r2, [pc, #344]	@ (800609c <HAL_I2C_Mem_Read_DMA+0x28c>)
 8005f42:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f48:	4a55      	ldr	r2, [pc, #340]	@ (80060a0 <HAL_I2C_Mem_Read_DMA+0x290>)
 8005f4a:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f50:	2200      	movs	r2, #0
 8005f52:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f58:	2200      	movs	r2, #0
 8005f5a:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f60:	2200      	movs	r2, #0
 8005f62:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f68:	2200      	movs	r2, #0
 8005f6a:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	3310      	adds	r3, #16
 8005f76:	4619      	mov	r1, r3
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f7c:	461a      	mov	r2, r3
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f82:	f7fe fb7d 	bl	8004680 <HAL_DMA_Start_IT>
 8005f86:	4603      	mov	r3, r0
 8005f88:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8005f8c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	f040 8087 	bne.w	80060a4 <HAL_I2C_Mem_Read_DMA+0x294>
 8005f96:	e013      	b.n	8005fc0 <HAL_I2C_Mem_Read_DMA+0x1b0>
        hi2c->State     = HAL_I2C_STATE_READY;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2220      	movs	r2, #32
 8005f9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fac:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	e0b3      	b.n	8006128 <HAL_I2C_Mem_Read_DMA+0x318>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8005fc0:	88f8      	ldrh	r0, [r7, #6]
 8005fc2:	893a      	ldrh	r2, [r7, #8]
 8005fc4:	8979      	ldrh	r1, [r7, #10]
 8005fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fc8:	9301      	str	r3, [sp, #4]
 8005fca:	2323      	movs	r3, #35	@ 0x23
 8005fcc:	9300      	str	r3, [sp, #0]
 8005fce:	4603      	mov	r3, r0
 8005fd0:	68f8      	ldr	r0, [r7, #12]
 8005fd2:	f001 fee5 	bl	8007da0 <I2C_RequestMemoryRead>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d023      	beq.n	8006024 <HAL_I2C_Mem_Read_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f7fe fba5 	bl	8004730 <HAL_DMA_Abort_IT>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	681a      	ldr	r2, [r3, #0]
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006002:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2200      	movs	r2, #0
 8006008:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2200      	movs	r2, #0
 800600e:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	681a      	ldr	r2, [r3, #0]
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f022 0201 	bic.w	r2, r2, #1
 800601e:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8006020:	2301      	movs	r3, #1
 8006022:	e081      	b.n	8006128 <HAL_I2C_Mem_Read_DMA+0x318>
        }

        if (hi2c->XferSize == 1U)
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006028:	2b01      	cmp	r3, #1
 800602a:	d108      	bne.n	800603e <HAL_I2C_Mem_Read_DMA+0x22e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800603a:	601a      	str	r2, [r3, #0]
 800603c:	e007      	b.n	800604e <HAL_I2C_Mem_Read_DMA+0x23e>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	685a      	ldr	r2, [r3, #4]
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800604c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800604e:	2300      	movs	r3, #0
 8006050:	61bb      	str	r3, [r7, #24]
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	695b      	ldr	r3, [r3, #20]
 8006058:	61bb      	str	r3, [r7, #24]
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	699b      	ldr	r3, [r3, #24]
 8006060:	61bb      	str	r3, [r7, #24]
 8006062:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2200      	movs	r2, #0
 8006068:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	685a      	ldr	r2, [r3, #4]
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800607a:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	685a      	ldr	r2, [r3, #4]
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800608a:	605a      	str	r2, [r3, #4]
 800608c:	e049      	b.n	8006122 <HAL_I2C_Mem_Read_DMA+0x312>
 800608e:	bf00      	nop
 8006090:	2000000c 	.word	0x2000000c
 8006094:	14f8b589 	.word	0x14f8b589
 8006098:	ffff0000 	.word	0xffff0000
 800609c:	08007f71 	.word	0x08007f71
 80060a0:	0800812f 	.word	0x0800812f
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2220      	movs	r2, #32
 80060a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2200      	movs	r2, #0
 80060b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060b8:	f043 0210 	orr.w	r2, r3, #16
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2200      	movs	r2, #0
 80060c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80060c8:	2301      	movs	r3, #1
 80060ca:	e02d      	b.n	8006128 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80060cc:	88f8      	ldrh	r0, [r7, #6]
 80060ce:	893a      	ldrh	r2, [r7, #8]
 80060d0:	8979      	ldrh	r1, [r7, #10]
 80060d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060d4:	9301      	str	r3, [sp, #4]
 80060d6:	2323      	movs	r3, #35	@ 0x23
 80060d8:	9300      	str	r3, [sp, #0]
 80060da:	4603      	mov	r3, r0
 80060dc:	68f8      	ldr	r0, [r7, #12]
 80060de:	f001 fe5f 	bl	8007da0 <I2C_RequestMemoryRead>
 80060e2:	4603      	mov	r3, r0
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d001      	beq.n	80060ec <HAL_I2C_Mem_Read_DMA+0x2dc>
      {
        return HAL_ERROR;
 80060e8:	2301      	movs	r3, #1
 80060ea:	e01d      	b.n	8006128 <HAL_I2C_Mem_Read_DMA+0x318>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060ec:	2300      	movs	r3, #0
 80060ee:	617b      	str	r3, [r7, #20]
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	695b      	ldr	r3, [r3, #20]
 80060f6:	617b      	str	r3, [r7, #20]
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	699b      	ldr	r3, [r3, #24]
 80060fe:	617b      	str	r3, [r7, #20]
 8006100:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	681a      	ldr	r2, [r3, #0]
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006110:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2220      	movs	r2, #32
 8006116:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2200      	movs	r2, #0
 800611e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }

    return HAL_OK;
 8006122:	2300      	movs	r3, #0
 8006124:	e000      	b.n	8006128 <HAL_I2C_Mem_Read_DMA+0x318>
  }
  else
  {
    return HAL_BUSY;
 8006126:	2302      	movs	r3, #2
  }
}
 8006128:	4618      	mov	r0, r3
 800612a:	3728      	adds	r7, #40	@ 0x28
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}

08006130 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b08a      	sub	sp, #40	@ 0x28
 8006134:	af02      	add	r7, sp, #8
 8006136:	60f8      	str	r0, [r7, #12]
 8006138:	607a      	str	r2, [r7, #4]
 800613a:	603b      	str	r3, [r7, #0]
 800613c:	460b      	mov	r3, r1
 800613e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8006140:	f7fd fb92 	bl	8003868 <HAL_GetTick>
 8006144:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8006146:	2300      	movs	r3, #0
 8006148:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006150:	b2db      	uxtb	r3, r3
 8006152:	2b20      	cmp	r3, #32
 8006154:	f040 8111 	bne.w	800637a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006158:	69fb      	ldr	r3, [r7, #28]
 800615a:	9300      	str	r3, [sp, #0]
 800615c:	2319      	movs	r3, #25
 800615e:	2201      	movs	r2, #1
 8006160:	4988      	ldr	r1, [pc, #544]	@ (8006384 <HAL_I2C_IsDeviceReady+0x254>)
 8006162:	68f8      	ldr	r0, [r7, #12]
 8006164:	f002 f8c8 	bl	80082f8 <I2C_WaitOnFlagUntilTimeout>
 8006168:	4603      	mov	r3, r0
 800616a:	2b00      	cmp	r3, #0
 800616c:	d001      	beq.n	8006172 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800616e:	2302      	movs	r3, #2
 8006170:	e104      	b.n	800637c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006178:	2b01      	cmp	r3, #1
 800617a:	d101      	bne.n	8006180 <HAL_I2C_IsDeviceReady+0x50>
 800617c:	2302      	movs	r3, #2
 800617e:	e0fd      	b.n	800637c <HAL_I2C_IsDeviceReady+0x24c>
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2201      	movs	r2, #1
 8006184:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f003 0301 	and.w	r3, r3, #1
 8006192:	2b01      	cmp	r3, #1
 8006194:	d007      	beq.n	80061a6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f042 0201 	orr.w	r2, r2, #1
 80061a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80061b4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2224      	movs	r2, #36	@ 0x24
 80061ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2200      	movs	r2, #0
 80061c2:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	4a70      	ldr	r2, [pc, #448]	@ (8006388 <HAL_I2C_IsDeviceReady+0x258>)
 80061c8:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	681a      	ldr	r2, [r3, #0]
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80061d8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80061da:	69fb      	ldr	r3, [r7, #28]
 80061dc:	9300      	str	r3, [sp, #0]
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	2200      	movs	r2, #0
 80061e2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80061e6:	68f8      	ldr	r0, [r7, #12]
 80061e8:	f002 f886 	bl	80082f8 <I2C_WaitOnFlagUntilTimeout>
 80061ec:	4603      	mov	r3, r0
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d00d      	beq.n	800620e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006200:	d103      	bne.n	800620a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006208:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800620a:	2303      	movs	r3, #3
 800620c:	e0b6      	b.n	800637c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800620e:	897b      	ldrh	r3, [r7, #10]
 8006210:	b2db      	uxtb	r3, r3
 8006212:	461a      	mov	r2, r3
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800621c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800621e:	f7fd fb23 	bl	8003868 <HAL_GetTick>
 8006222:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	695b      	ldr	r3, [r3, #20]
 800622a:	f003 0302 	and.w	r3, r3, #2
 800622e:	2b02      	cmp	r3, #2
 8006230:	bf0c      	ite	eq
 8006232:	2301      	moveq	r3, #1
 8006234:	2300      	movne	r3, #0
 8006236:	b2db      	uxtb	r3, r3
 8006238:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	695b      	ldr	r3, [r3, #20]
 8006240:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006244:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006248:	bf0c      	ite	eq
 800624a:	2301      	moveq	r3, #1
 800624c:	2300      	movne	r3, #0
 800624e:	b2db      	uxtb	r3, r3
 8006250:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006252:	e025      	b.n	80062a0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006254:	f7fd fb08 	bl	8003868 <HAL_GetTick>
 8006258:	4602      	mov	r2, r0
 800625a:	69fb      	ldr	r3, [r7, #28]
 800625c:	1ad3      	subs	r3, r2, r3
 800625e:	683a      	ldr	r2, [r7, #0]
 8006260:	429a      	cmp	r2, r3
 8006262:	d302      	bcc.n	800626a <HAL_I2C_IsDeviceReady+0x13a>
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d103      	bne.n	8006272 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	22a0      	movs	r2, #160	@ 0xa0
 800626e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	695b      	ldr	r3, [r3, #20]
 8006278:	f003 0302 	and.w	r3, r3, #2
 800627c:	2b02      	cmp	r3, #2
 800627e:	bf0c      	ite	eq
 8006280:	2301      	moveq	r3, #1
 8006282:	2300      	movne	r3, #0
 8006284:	b2db      	uxtb	r3, r3
 8006286:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	695b      	ldr	r3, [r3, #20]
 800628e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006292:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006296:	bf0c      	ite	eq
 8006298:	2301      	moveq	r3, #1
 800629a:	2300      	movne	r3, #0
 800629c:	b2db      	uxtb	r3, r3
 800629e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80062a6:	b2db      	uxtb	r3, r3
 80062a8:	2ba0      	cmp	r3, #160	@ 0xa0
 80062aa:	d005      	beq.n	80062b8 <HAL_I2C_IsDeviceReady+0x188>
 80062ac:	7dfb      	ldrb	r3, [r7, #23]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d102      	bne.n	80062b8 <HAL_I2C_IsDeviceReady+0x188>
 80062b2:	7dbb      	ldrb	r3, [r7, #22]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d0cd      	beq.n	8006254 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	2220      	movs	r2, #32
 80062bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	695b      	ldr	r3, [r3, #20]
 80062c6:	f003 0302 	and.w	r3, r3, #2
 80062ca:	2b02      	cmp	r3, #2
 80062cc:	d129      	bne.n	8006322 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	681a      	ldr	r2, [r3, #0]
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80062dc:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062de:	2300      	movs	r3, #0
 80062e0:	613b      	str	r3, [r7, #16]
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	695b      	ldr	r3, [r3, #20]
 80062e8:	613b      	str	r3, [r7, #16]
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	699b      	ldr	r3, [r3, #24]
 80062f0:	613b      	str	r3, [r7, #16]
 80062f2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80062f4:	69fb      	ldr	r3, [r7, #28]
 80062f6:	9300      	str	r3, [sp, #0]
 80062f8:	2319      	movs	r3, #25
 80062fa:	2201      	movs	r2, #1
 80062fc:	4921      	ldr	r1, [pc, #132]	@ (8006384 <HAL_I2C_IsDeviceReady+0x254>)
 80062fe:	68f8      	ldr	r0, [r7, #12]
 8006300:	f001 fffa 	bl	80082f8 <I2C_WaitOnFlagUntilTimeout>
 8006304:	4603      	mov	r3, r0
 8006306:	2b00      	cmp	r3, #0
 8006308:	d001      	beq.n	800630e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800630a:	2301      	movs	r3, #1
 800630c:	e036      	b.n	800637c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2220      	movs	r2, #32
 8006312:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2200      	movs	r2, #0
 800631a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800631e:	2300      	movs	r3, #0
 8006320:	e02c      	b.n	800637c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006330:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800633a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800633c:	69fb      	ldr	r3, [r7, #28]
 800633e:	9300      	str	r3, [sp, #0]
 8006340:	2319      	movs	r3, #25
 8006342:	2201      	movs	r2, #1
 8006344:	490f      	ldr	r1, [pc, #60]	@ (8006384 <HAL_I2C_IsDeviceReady+0x254>)
 8006346:	68f8      	ldr	r0, [r7, #12]
 8006348:	f001 ffd6 	bl	80082f8 <I2C_WaitOnFlagUntilTimeout>
 800634c:	4603      	mov	r3, r0
 800634e:	2b00      	cmp	r3, #0
 8006350:	d001      	beq.n	8006356 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8006352:	2301      	movs	r3, #1
 8006354:	e012      	b.n	800637c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8006356:	69bb      	ldr	r3, [r7, #24]
 8006358:	3301      	adds	r3, #1
 800635a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800635c:	69ba      	ldr	r2, [r7, #24]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	429a      	cmp	r2, r3
 8006362:	f4ff af32 	bcc.w	80061ca <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2220      	movs	r2, #32
 800636a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2200      	movs	r2, #0
 8006372:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006376:	2301      	movs	r3, #1
 8006378:	e000      	b.n	800637c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800637a:	2302      	movs	r3, #2
  }
}
 800637c:	4618      	mov	r0, r3
 800637e:	3720      	adds	r7, #32
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}
 8006384:	00100002 	.word	0x00100002
 8006388:	ffff0000 	.word	0xffff0000

0800638c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b088      	sub	sp, #32
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8006394:	2300      	movs	r3, #0
 8006396:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063a4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80063ac:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80063b4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80063b6:	7bfb      	ldrb	r3, [r7, #15]
 80063b8:	2b10      	cmp	r3, #16
 80063ba:	d003      	beq.n	80063c4 <HAL_I2C_EV_IRQHandler+0x38>
 80063bc:	7bfb      	ldrb	r3, [r7, #15]
 80063be:	2b40      	cmp	r3, #64	@ 0x40
 80063c0:	f040 80c1 	bne.w	8006546 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	699b      	ldr	r3, [r3, #24]
 80063ca:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	695b      	ldr	r3, [r3, #20]
 80063d2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80063d4:	69fb      	ldr	r3, [r7, #28]
 80063d6:	f003 0301 	and.w	r3, r3, #1
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d10d      	bne.n	80063fa <HAL_I2C_EV_IRQHandler+0x6e>
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80063e4:	d003      	beq.n	80063ee <HAL_I2C_EV_IRQHandler+0x62>
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80063ec:	d101      	bne.n	80063f2 <HAL_I2C_EV_IRQHandler+0x66>
 80063ee:	2301      	movs	r3, #1
 80063f0:	e000      	b.n	80063f4 <HAL_I2C_EV_IRQHandler+0x68>
 80063f2:	2300      	movs	r3, #0
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	f000 8132 	beq.w	800665e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80063fa:	69fb      	ldr	r3, [r7, #28]
 80063fc:	f003 0301 	and.w	r3, r3, #1
 8006400:	2b00      	cmp	r3, #0
 8006402:	d00c      	beq.n	800641e <HAL_I2C_EV_IRQHandler+0x92>
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	0a5b      	lsrs	r3, r3, #9
 8006408:	f003 0301 	and.w	r3, r3, #1
 800640c:	2b00      	cmp	r3, #0
 800640e:	d006      	beq.n	800641e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	f002 f9d9 	bl	80087c8 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f000 fd8b 	bl	8006f32 <I2C_Master_SB>
 800641c:	e092      	b.n	8006544 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800641e:	69fb      	ldr	r3, [r7, #28]
 8006420:	08db      	lsrs	r3, r3, #3
 8006422:	f003 0301 	and.w	r3, r3, #1
 8006426:	2b00      	cmp	r3, #0
 8006428:	d009      	beq.n	800643e <HAL_I2C_EV_IRQHandler+0xb2>
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	0a5b      	lsrs	r3, r3, #9
 800642e:	f003 0301 	and.w	r3, r3, #1
 8006432:	2b00      	cmp	r3, #0
 8006434:	d003      	beq.n	800643e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f000 fe01 	bl	800703e <I2C_Master_ADD10>
 800643c:	e082      	b.n	8006544 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800643e:	69fb      	ldr	r3, [r7, #28]
 8006440:	085b      	lsrs	r3, r3, #1
 8006442:	f003 0301 	and.w	r3, r3, #1
 8006446:	2b00      	cmp	r3, #0
 8006448:	d009      	beq.n	800645e <HAL_I2C_EV_IRQHandler+0xd2>
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	0a5b      	lsrs	r3, r3, #9
 800644e:	f003 0301 	and.w	r3, r3, #1
 8006452:	2b00      	cmp	r3, #0
 8006454:	d003      	beq.n	800645e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f000 fe1b 	bl	8007092 <I2C_Master_ADDR>
 800645c:	e072      	b.n	8006544 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800645e:	69bb      	ldr	r3, [r7, #24]
 8006460:	089b      	lsrs	r3, r3, #2
 8006462:	f003 0301 	and.w	r3, r3, #1
 8006466:	2b00      	cmp	r3, #0
 8006468:	d03b      	beq.n	80064e2 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006474:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006478:	f000 80f3 	beq.w	8006662 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800647c:	69fb      	ldr	r3, [r7, #28]
 800647e:	09db      	lsrs	r3, r3, #7
 8006480:	f003 0301 	and.w	r3, r3, #1
 8006484:	2b00      	cmp	r3, #0
 8006486:	d00f      	beq.n	80064a8 <HAL_I2C_EV_IRQHandler+0x11c>
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	0a9b      	lsrs	r3, r3, #10
 800648c:	f003 0301 	and.w	r3, r3, #1
 8006490:	2b00      	cmp	r3, #0
 8006492:	d009      	beq.n	80064a8 <HAL_I2C_EV_IRQHandler+0x11c>
 8006494:	69fb      	ldr	r3, [r7, #28]
 8006496:	089b      	lsrs	r3, r3, #2
 8006498:	f003 0301 	and.w	r3, r3, #1
 800649c:	2b00      	cmp	r3, #0
 800649e:	d103      	bne.n	80064a8 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f000 f9df 	bl	8006864 <I2C_MasterTransmit_TXE>
 80064a6:	e04d      	b.n	8006544 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80064a8:	69fb      	ldr	r3, [r7, #28]
 80064aa:	089b      	lsrs	r3, r3, #2
 80064ac:	f003 0301 	and.w	r3, r3, #1
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	f000 80d6 	beq.w	8006662 <HAL_I2C_EV_IRQHandler+0x2d6>
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	0a5b      	lsrs	r3, r3, #9
 80064ba:	f003 0301 	and.w	r3, r3, #1
 80064be:	2b00      	cmp	r3, #0
 80064c0:	f000 80cf 	beq.w	8006662 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80064c4:	7bbb      	ldrb	r3, [r7, #14]
 80064c6:	2b21      	cmp	r3, #33	@ 0x21
 80064c8:	d103      	bne.n	80064d2 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f000 fa66 	bl	800699c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80064d0:	e0c7      	b.n	8006662 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80064d2:	7bfb      	ldrb	r3, [r7, #15]
 80064d4:	2b40      	cmp	r3, #64	@ 0x40
 80064d6:	f040 80c4 	bne.w	8006662 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f000 fad4 	bl	8006a88 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80064e0:	e0bf      	b.n	8006662 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80064ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80064f0:	f000 80b7 	beq.w	8006662 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80064f4:	69fb      	ldr	r3, [r7, #28]
 80064f6:	099b      	lsrs	r3, r3, #6
 80064f8:	f003 0301 	and.w	r3, r3, #1
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d00f      	beq.n	8006520 <HAL_I2C_EV_IRQHandler+0x194>
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	0a9b      	lsrs	r3, r3, #10
 8006504:	f003 0301 	and.w	r3, r3, #1
 8006508:	2b00      	cmp	r3, #0
 800650a:	d009      	beq.n	8006520 <HAL_I2C_EV_IRQHandler+0x194>
 800650c:	69fb      	ldr	r3, [r7, #28]
 800650e:	089b      	lsrs	r3, r3, #2
 8006510:	f003 0301 	and.w	r3, r3, #1
 8006514:	2b00      	cmp	r3, #0
 8006516:	d103      	bne.n	8006520 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	f000 fb4d 	bl	8006bb8 <I2C_MasterReceive_RXNE>
 800651e:	e011      	b.n	8006544 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006520:	69fb      	ldr	r3, [r7, #28]
 8006522:	089b      	lsrs	r3, r3, #2
 8006524:	f003 0301 	and.w	r3, r3, #1
 8006528:	2b00      	cmp	r3, #0
 800652a:	f000 809a 	beq.w	8006662 <HAL_I2C_EV_IRQHandler+0x2d6>
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	0a5b      	lsrs	r3, r3, #9
 8006532:	f003 0301 	and.w	r3, r3, #1
 8006536:	2b00      	cmp	r3, #0
 8006538:	f000 8093 	beq.w	8006662 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f000 fc03 	bl	8006d48 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006542:	e08e      	b.n	8006662 <HAL_I2C_EV_IRQHandler+0x2d6>
 8006544:	e08d      	b.n	8006662 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800654a:	2b00      	cmp	r3, #0
 800654c:	d004      	beq.n	8006558 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	695b      	ldr	r3, [r3, #20]
 8006554:	61fb      	str	r3, [r7, #28]
 8006556:	e007      	b.n	8006568 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	699b      	ldr	r3, [r3, #24]
 800655e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	695b      	ldr	r3, [r3, #20]
 8006566:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006568:	69fb      	ldr	r3, [r7, #28]
 800656a:	085b      	lsrs	r3, r3, #1
 800656c:	f003 0301 	and.w	r3, r3, #1
 8006570:	2b00      	cmp	r3, #0
 8006572:	d012      	beq.n	800659a <HAL_I2C_EV_IRQHandler+0x20e>
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	0a5b      	lsrs	r3, r3, #9
 8006578:	f003 0301 	and.w	r3, r3, #1
 800657c:	2b00      	cmp	r3, #0
 800657e:	d00c      	beq.n	800659a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006584:	2b00      	cmp	r3, #0
 8006586:	d003      	beq.n	8006590 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	699b      	ldr	r3, [r3, #24]
 800658e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8006590:	69b9      	ldr	r1, [r7, #24]
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f000 ffcc 	bl	8007530 <I2C_Slave_ADDR>
 8006598:	e066      	b.n	8006668 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800659a:	69fb      	ldr	r3, [r7, #28]
 800659c:	091b      	lsrs	r3, r3, #4
 800659e:	f003 0301 	and.w	r3, r3, #1
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d009      	beq.n	80065ba <HAL_I2C_EV_IRQHandler+0x22e>
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	0a5b      	lsrs	r3, r3, #9
 80065aa:	f003 0301 	and.w	r3, r3, #1
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d003      	beq.n	80065ba <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f001 f806 	bl	80075c4 <I2C_Slave_STOPF>
 80065b8:	e056      	b.n	8006668 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80065ba:	7bbb      	ldrb	r3, [r7, #14]
 80065bc:	2b21      	cmp	r3, #33	@ 0x21
 80065be:	d002      	beq.n	80065c6 <HAL_I2C_EV_IRQHandler+0x23a>
 80065c0:	7bbb      	ldrb	r3, [r7, #14]
 80065c2:	2b29      	cmp	r3, #41	@ 0x29
 80065c4:	d125      	bne.n	8006612 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80065c6:	69fb      	ldr	r3, [r7, #28]
 80065c8:	09db      	lsrs	r3, r3, #7
 80065ca:	f003 0301 	and.w	r3, r3, #1
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d00f      	beq.n	80065f2 <HAL_I2C_EV_IRQHandler+0x266>
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	0a9b      	lsrs	r3, r3, #10
 80065d6:	f003 0301 	and.w	r3, r3, #1
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d009      	beq.n	80065f2 <HAL_I2C_EV_IRQHandler+0x266>
 80065de:	69fb      	ldr	r3, [r7, #28]
 80065e0:	089b      	lsrs	r3, r3, #2
 80065e2:	f003 0301 	and.w	r3, r3, #1
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d103      	bne.n	80065f2 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f000 fee2 	bl	80073b4 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80065f0:	e039      	b.n	8006666 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80065f2:	69fb      	ldr	r3, [r7, #28]
 80065f4:	089b      	lsrs	r3, r3, #2
 80065f6:	f003 0301 	and.w	r3, r3, #1
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d033      	beq.n	8006666 <HAL_I2C_EV_IRQHandler+0x2da>
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	0a5b      	lsrs	r3, r3, #9
 8006602:	f003 0301 	and.w	r3, r3, #1
 8006606:	2b00      	cmp	r3, #0
 8006608:	d02d      	beq.n	8006666 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f000 ff0f 	bl	800742e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006610:	e029      	b.n	8006666 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006612:	69fb      	ldr	r3, [r7, #28]
 8006614:	099b      	lsrs	r3, r3, #6
 8006616:	f003 0301 	and.w	r3, r3, #1
 800661a:	2b00      	cmp	r3, #0
 800661c:	d00f      	beq.n	800663e <HAL_I2C_EV_IRQHandler+0x2b2>
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	0a9b      	lsrs	r3, r3, #10
 8006622:	f003 0301 	and.w	r3, r3, #1
 8006626:	2b00      	cmp	r3, #0
 8006628:	d009      	beq.n	800663e <HAL_I2C_EV_IRQHandler+0x2b2>
 800662a:	69fb      	ldr	r3, [r7, #28]
 800662c:	089b      	lsrs	r3, r3, #2
 800662e:	f003 0301 	and.w	r3, r3, #1
 8006632:	2b00      	cmp	r3, #0
 8006634:	d103      	bne.n	800663e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f000 ff1a 	bl	8007470 <I2C_SlaveReceive_RXNE>
 800663c:	e014      	b.n	8006668 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800663e:	69fb      	ldr	r3, [r7, #28]
 8006640:	089b      	lsrs	r3, r3, #2
 8006642:	f003 0301 	and.w	r3, r3, #1
 8006646:	2b00      	cmp	r3, #0
 8006648:	d00e      	beq.n	8006668 <HAL_I2C_EV_IRQHandler+0x2dc>
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	0a5b      	lsrs	r3, r3, #9
 800664e:	f003 0301 	and.w	r3, r3, #1
 8006652:	2b00      	cmp	r3, #0
 8006654:	d008      	beq.n	8006668 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f000 ff48 	bl	80074ec <I2C_SlaveReceive_BTF>
 800665c:	e004      	b.n	8006668 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800665e:	bf00      	nop
 8006660:	e002      	b.n	8006668 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006662:	bf00      	nop
 8006664:	e000      	b.n	8006668 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006666:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8006668:	3720      	adds	r7, #32
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}

0800666e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800666e:	b580      	push	{r7, lr}
 8006670:	b08a      	sub	sp, #40	@ 0x28
 8006672:	af00      	add	r7, sp, #0
 8006674:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	695b      	ldr	r3, [r3, #20]
 800667c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8006686:	2300      	movs	r3, #0
 8006688:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006690:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006692:	6a3b      	ldr	r3, [r7, #32]
 8006694:	0a1b      	lsrs	r3, r3, #8
 8006696:	f003 0301 	and.w	r3, r3, #1
 800669a:	2b00      	cmp	r3, #0
 800669c:	d00e      	beq.n	80066bc <HAL_I2C_ER_IRQHandler+0x4e>
 800669e:	69fb      	ldr	r3, [r7, #28]
 80066a0:	0a1b      	lsrs	r3, r3, #8
 80066a2:	f003 0301 	and.w	r3, r3, #1
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d008      	beq.n	80066bc <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80066aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ac:	f043 0301 	orr.w	r3, r3, #1
 80066b0:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80066ba:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80066bc:	6a3b      	ldr	r3, [r7, #32]
 80066be:	0a5b      	lsrs	r3, r3, #9
 80066c0:	f003 0301 	and.w	r3, r3, #1
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d00e      	beq.n	80066e6 <HAL_I2C_ER_IRQHandler+0x78>
 80066c8:	69fb      	ldr	r3, [r7, #28]
 80066ca:	0a1b      	lsrs	r3, r3, #8
 80066cc:	f003 0301 	and.w	r3, r3, #1
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d008      	beq.n	80066e6 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80066d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066d6:	f043 0302 	orr.w	r3, r3, #2
 80066da:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 80066e4:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80066e6:	6a3b      	ldr	r3, [r7, #32]
 80066e8:	0a9b      	lsrs	r3, r3, #10
 80066ea:	f003 0301 	and.w	r3, r3, #1
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d03f      	beq.n	8006772 <HAL_I2C_ER_IRQHandler+0x104>
 80066f2:	69fb      	ldr	r3, [r7, #28]
 80066f4:	0a1b      	lsrs	r3, r3, #8
 80066f6:	f003 0301 	and.w	r3, r3, #1
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d039      	beq.n	8006772 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80066fe:	7efb      	ldrb	r3, [r7, #27]
 8006700:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006706:	b29b      	uxth	r3, r3
 8006708:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006710:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006716:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8006718:	7ebb      	ldrb	r3, [r7, #26]
 800671a:	2b20      	cmp	r3, #32
 800671c:	d112      	bne.n	8006744 <HAL_I2C_ER_IRQHandler+0xd6>
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d10f      	bne.n	8006744 <HAL_I2C_ER_IRQHandler+0xd6>
 8006724:	7cfb      	ldrb	r3, [r7, #19]
 8006726:	2b21      	cmp	r3, #33	@ 0x21
 8006728:	d008      	beq.n	800673c <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800672a:	7cfb      	ldrb	r3, [r7, #19]
 800672c:	2b29      	cmp	r3, #41	@ 0x29
 800672e:	d005      	beq.n	800673c <HAL_I2C_ER_IRQHandler+0xce>
 8006730:	7cfb      	ldrb	r3, [r7, #19]
 8006732:	2b28      	cmp	r3, #40	@ 0x28
 8006734:	d106      	bne.n	8006744 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2b21      	cmp	r3, #33	@ 0x21
 800673a:	d103      	bne.n	8006744 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f001 f871 	bl	8007824 <I2C_Slave_AF>
 8006742:	e016      	b.n	8006772 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800674c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800674e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006750:	f043 0304 	orr.w	r3, r3, #4
 8006754:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006756:	7efb      	ldrb	r3, [r7, #27]
 8006758:	2b10      	cmp	r3, #16
 800675a:	d002      	beq.n	8006762 <HAL_I2C_ER_IRQHandler+0xf4>
 800675c:	7efb      	ldrb	r3, [r7, #27]
 800675e:	2b40      	cmp	r3, #64	@ 0x40
 8006760:	d107      	bne.n	8006772 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	681a      	ldr	r2, [r3, #0]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006770:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006772:	6a3b      	ldr	r3, [r7, #32]
 8006774:	0adb      	lsrs	r3, r3, #11
 8006776:	f003 0301 	and.w	r3, r3, #1
 800677a:	2b00      	cmp	r3, #0
 800677c:	d00e      	beq.n	800679c <HAL_I2C_ER_IRQHandler+0x12e>
 800677e:	69fb      	ldr	r3, [r7, #28]
 8006780:	0a1b      	lsrs	r3, r3, #8
 8006782:	f003 0301 	and.w	r3, r3, #1
 8006786:	2b00      	cmp	r3, #0
 8006788:	d008      	beq.n	800679c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800678a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800678c:	f043 0308 	orr.w	r3, r3, #8
 8006790:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 800679a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800679c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d008      	beq.n	80067b4 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80067a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067a8:	431a      	orrs	r2, r3
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f001 f8ac 	bl	800790c <I2C_ITError>
  }
}
 80067b4:	bf00      	nop
 80067b6:	3728      	adds	r7, #40	@ 0x28
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bd80      	pop	{r7, pc}

080067bc <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80067bc:	b480      	push	{r7}
 80067be:	b083      	sub	sp, #12
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80067c4:	bf00      	nop
 80067c6:	370c      	adds	r7, #12
 80067c8:	46bd      	mov	sp, r7
 80067ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ce:	4770      	bx	lr

080067d0 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b083      	sub	sp, #12
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80067d8:	bf00      	nop
 80067da:	370c      	adds	r7, #12
 80067dc:	46bd      	mov	sp, r7
 80067de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e2:	4770      	bx	lr

080067e4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80067e4:	b480      	push	{r7}
 80067e6:	b083      	sub	sp, #12
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80067ec:	bf00      	nop
 80067ee:	370c      	adds	r7, #12
 80067f0:	46bd      	mov	sp, r7
 80067f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f6:	4770      	bx	lr

080067f8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b083      	sub	sp, #12
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006800:	bf00      	nop
 8006802:	370c      	adds	r7, #12
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr

0800680c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800680c:	b480      	push	{r7}
 800680e:	b083      	sub	sp, #12
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
 8006814:	460b      	mov	r3, r1
 8006816:	70fb      	strb	r3, [r7, #3]
 8006818:	4613      	mov	r3, r2
 800681a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800681c:	bf00      	nop
 800681e:	370c      	adds	r7, #12
 8006820:	46bd      	mov	sp, r7
 8006822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006826:	4770      	bx	lr

08006828 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006828:	b480      	push	{r7}
 800682a:	b083      	sub	sp, #12
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8006830:	bf00      	nop
 8006832:	370c      	adds	r7, #12
 8006834:	46bd      	mov	sp, r7
 8006836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683a:	4770      	bx	lr

0800683c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800683c:	b480      	push	{r7}
 800683e:	b083      	sub	sp, #12
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006844:	bf00      	nop
 8006846:	370c      	adds	r7, #12
 8006848:	46bd      	mov	sp, r7
 800684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684e:	4770      	bx	lr

08006850 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006850:	b480      	push	{r7}
 8006852:	b083      	sub	sp, #12
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006858:	bf00      	nop
 800685a:	370c      	adds	r7, #12
 800685c:	46bd      	mov	sp, r7
 800685e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006862:	4770      	bx	lr

08006864 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b084      	sub	sp, #16
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006872:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800687a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006880:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006886:	2b00      	cmp	r3, #0
 8006888:	d150      	bne.n	800692c <I2C_MasterTransmit_TXE+0xc8>
 800688a:	7bfb      	ldrb	r3, [r7, #15]
 800688c:	2b21      	cmp	r3, #33	@ 0x21
 800688e:	d14d      	bne.n	800692c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	2b08      	cmp	r3, #8
 8006894:	d01d      	beq.n	80068d2 <I2C_MasterTransmit_TXE+0x6e>
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	2b20      	cmp	r3, #32
 800689a:	d01a      	beq.n	80068d2 <I2C_MasterTransmit_TXE+0x6e>
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80068a2:	d016      	beq.n	80068d2 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	685a      	ldr	r2, [r3, #4]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80068b2:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2211      	movs	r2, #17
 80068b8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2200      	movs	r2, #0
 80068be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2220      	movs	r2, #32
 80068c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f7ff ff76 	bl	80067bc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80068d0:	e060      	b.n	8006994 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	685a      	ldr	r2, [r3, #4]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80068e0:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	681a      	ldr	r2, [r3, #0]
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80068f0:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2200      	movs	r2, #0
 80068f6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2220      	movs	r2, #32
 80068fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006906:	b2db      	uxtb	r3, r3
 8006908:	2b40      	cmp	r3, #64	@ 0x40
 800690a:	d107      	bne.n	800691c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2200      	movs	r2, #0
 8006910:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f7fc fa1d 	bl	8002d54 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800691a:	e03b      	b.n	8006994 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2200      	movs	r2, #0
 8006920:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f7ff ff49 	bl	80067bc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800692a:	e033      	b.n	8006994 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800692c:	7bfb      	ldrb	r3, [r7, #15]
 800692e:	2b21      	cmp	r3, #33	@ 0x21
 8006930:	d005      	beq.n	800693e <I2C_MasterTransmit_TXE+0xda>
 8006932:	7bbb      	ldrb	r3, [r7, #14]
 8006934:	2b40      	cmp	r3, #64	@ 0x40
 8006936:	d12d      	bne.n	8006994 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8006938:	7bfb      	ldrb	r3, [r7, #15]
 800693a:	2b22      	cmp	r3, #34	@ 0x22
 800693c:	d12a      	bne.n	8006994 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006942:	b29b      	uxth	r3, r3
 8006944:	2b00      	cmp	r3, #0
 8006946:	d108      	bne.n	800695a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	685a      	ldr	r2, [r3, #4]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006956:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8006958:	e01c      	b.n	8006994 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006960:	b2db      	uxtb	r3, r3
 8006962:	2b40      	cmp	r3, #64	@ 0x40
 8006964:	d103      	bne.n	800696e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f000 f88e 	bl	8006a88 <I2C_MemoryTransmit_TXE_BTF>
}
 800696c:	e012      	b.n	8006994 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006972:	781a      	ldrb	r2, [r3, #0]
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800697e:	1c5a      	adds	r2, r3, #1
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006988:	b29b      	uxth	r3, r3
 800698a:	3b01      	subs	r3, #1
 800698c:	b29a      	uxth	r2, r3
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8006992:	e7ff      	b.n	8006994 <I2C_MasterTransmit_TXE+0x130>
 8006994:	bf00      	nop
 8006996:	3710      	adds	r7, #16
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}

0800699c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b084      	sub	sp, #16
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069a8:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80069b0:	b2db      	uxtb	r3, r3
 80069b2:	2b21      	cmp	r3, #33	@ 0x21
 80069b4:	d164      	bne.n	8006a80 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069ba:	b29b      	uxth	r3, r3
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d012      	beq.n	80069e6 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069c4:	781a      	ldrb	r2, [r3, #0]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069d0:	1c5a      	adds	r2, r3, #1
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069da:	b29b      	uxth	r3, r3
 80069dc:	3b01      	subs	r3, #1
 80069de:	b29a      	uxth	r2, r3
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80069e4:	e04c      	b.n	8006a80 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	2b08      	cmp	r3, #8
 80069ea:	d01d      	beq.n	8006a28 <I2C_MasterTransmit_BTF+0x8c>
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	2b20      	cmp	r3, #32
 80069f0:	d01a      	beq.n	8006a28 <I2C_MasterTransmit_BTF+0x8c>
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80069f8:	d016      	beq.n	8006a28 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	685a      	ldr	r2, [r3, #4]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006a08:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2211      	movs	r2, #17
 8006a0e:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2200      	movs	r2, #0
 8006a14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2220      	movs	r2, #32
 8006a1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f7ff fecb 	bl	80067bc <HAL_I2C_MasterTxCpltCallback>
}
 8006a26:	e02b      	b.n	8006a80 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	685a      	ldr	r2, [r3, #4]
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006a36:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	681a      	ldr	r2, [r3, #0]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006a46:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2220      	movs	r2, #32
 8006a52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006a5c:	b2db      	uxtb	r3, r3
 8006a5e:	2b40      	cmp	r3, #64	@ 0x40
 8006a60:	d107      	bne.n	8006a72 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2200      	movs	r2, #0
 8006a66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f7fc f972 	bl	8002d54 <HAL_I2C_MemTxCpltCallback>
}
 8006a70:	e006      	b.n	8006a80 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2200      	movs	r2, #0
 8006a76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f7ff fe9e 	bl	80067bc <HAL_I2C_MasterTxCpltCallback>
}
 8006a80:	bf00      	nop
 8006a82:	3710      	adds	r7, #16
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}

08006a88 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b084      	sub	sp, #16
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a96:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d11d      	bne.n	8006adc <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006aa4:	2b01      	cmp	r3, #1
 8006aa6:	d10b      	bne.n	8006ac0 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006aac:	b2da      	uxtb	r2, r3
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ab8:	1c9a      	adds	r2, r3, #2
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8006abe:	e077      	b.n	8006bb0 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ac4:	b29b      	uxth	r3, r3
 8006ac6:	121b      	asrs	r3, r3, #8
 8006ac8:	b2da      	uxtb	r2, r3
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ad4:	1c5a      	adds	r2, r3, #1
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8006ada:	e069      	b.n	8006bb0 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ae0:	2b01      	cmp	r3, #1
 8006ae2:	d10b      	bne.n	8006afc <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ae8:	b2da      	uxtb	r2, r3
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006af4:	1c5a      	adds	r2, r3, #1
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8006afa:	e059      	b.n	8006bb0 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b00:	2b02      	cmp	r3, #2
 8006b02:	d152      	bne.n	8006baa <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8006b04:	7bfb      	ldrb	r3, [r7, #15]
 8006b06:	2b22      	cmp	r3, #34	@ 0x22
 8006b08:	d10d      	bne.n	8006b26 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	681a      	ldr	r2, [r3, #0]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006b18:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b1e:	1c5a      	adds	r2, r3, #1
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8006b24:	e044      	b.n	8006bb0 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b2a:	b29b      	uxth	r3, r3
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d015      	beq.n	8006b5c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8006b30:	7bfb      	ldrb	r3, [r7, #15]
 8006b32:	2b21      	cmp	r3, #33	@ 0x21
 8006b34:	d112      	bne.n	8006b5c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b3a:	781a      	ldrb	r2, [r3, #0]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b46:	1c5a      	adds	r2, r3, #1
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b50:	b29b      	uxth	r3, r3
 8006b52:	3b01      	subs	r3, #1
 8006b54:	b29a      	uxth	r2, r3
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8006b5a:	e029      	b.n	8006bb0 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b60:	b29b      	uxth	r3, r3
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d124      	bne.n	8006bb0 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8006b66:	7bfb      	ldrb	r3, [r7, #15]
 8006b68:	2b21      	cmp	r3, #33	@ 0x21
 8006b6a:	d121      	bne.n	8006bb0 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	685a      	ldr	r2, [r3, #4]
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006b7a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	681a      	ldr	r2, [r3, #0]
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006b8a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2220      	movs	r2, #32
 8006b96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f7fc f8d6 	bl	8002d54 <HAL_I2C_MemTxCpltCallback>
}
 8006ba8:	e002      	b.n	8006bb0 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f7fe fb92 	bl	80052d4 <I2C_Flush_DR>
}
 8006bb0:	bf00      	nop
 8006bb2:	3710      	adds	r7, #16
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}

08006bb8 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b084      	sub	sp, #16
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006bc6:	b2db      	uxtb	r3, r3
 8006bc8:	2b22      	cmp	r3, #34	@ 0x22
 8006bca:	f040 80b9 	bne.w	8006d40 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bd2:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	2b03      	cmp	r3, #3
 8006be0:	d921      	bls.n	8006c26 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	691a      	ldr	r2, [r3, #16]
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bec:	b2d2      	uxtb	r2, r2
 8006bee:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bf4:	1c5a      	adds	r2, r3, #1
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bfe:	b29b      	uxth	r3, r3
 8006c00:	3b01      	subs	r3, #1
 8006c02:	b29a      	uxth	r2, r3
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c0c:	b29b      	uxth	r3, r3
 8006c0e:	2b03      	cmp	r3, #3
 8006c10:	f040 8096 	bne.w	8006d40 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	685a      	ldr	r2, [r3, #4]
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006c22:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8006c24:	e08c      	b.n	8006d40 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c2a:	2b02      	cmp	r3, #2
 8006c2c:	d07f      	beq.n	8006d2e <I2C_MasterReceive_RXNE+0x176>
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	2b01      	cmp	r3, #1
 8006c32:	d002      	beq.n	8006c3a <I2C_MasterReceive_RXNE+0x82>
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d179      	bne.n	8006d2e <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f001 fd06 	bl	800864c <I2C_WaitOnSTOPRequestThroughIT>
 8006c40:	4603      	mov	r3, r0
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d14c      	bne.n	8006ce0 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	681a      	ldr	r2, [r3, #0]
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006c54:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	685a      	ldr	r2, [r3, #4]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006c64:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	691a      	ldr	r2, [r3, #16]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c70:	b2d2      	uxtb	r2, r2
 8006c72:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c78:	1c5a      	adds	r2, r3, #1
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	3b01      	subs	r3, #1
 8006c86:	b29a      	uxth	r2, r3
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2220      	movs	r2, #32
 8006c90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006c9a:	b2db      	uxtb	r3, r3
 8006c9c:	2b40      	cmp	r3, #64	@ 0x40
 8006c9e:	d10a      	bne.n	8006cb6 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2200      	movs	r2, #0
 8006cac:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f7fc f860 	bl	8002d74 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006cb4:	e044      	b.n	8006d40 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	2b08      	cmp	r3, #8
 8006cc2:	d002      	beq.n	8006cca <I2C_MasterReceive_RXNE+0x112>
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	2b20      	cmp	r3, #32
 8006cc8:	d103      	bne.n	8006cd2 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	631a      	str	r2, [r3, #48]	@ 0x30
 8006cd0:	e002      	b.n	8006cd8 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2212      	movs	r2, #18
 8006cd6:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f7ff fd79 	bl	80067d0 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006cde:	e02f      	b.n	8006d40 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	685a      	ldr	r2, [r3, #4]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006cee:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	691a      	ldr	r2, [r3, #16]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cfa:	b2d2      	uxtb	r2, r2
 8006cfc:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d02:	1c5a      	adds	r2, r3, #1
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d0c:	b29b      	uxth	r3, r3
 8006d0e:	3b01      	subs	r3, #1
 8006d10:	b29a      	uxth	r2, r3
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2220      	movs	r2, #32
 8006d1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2200      	movs	r2, #0
 8006d22:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f7ff fd88 	bl	800683c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006d2c:	e008      	b.n	8006d40 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	685a      	ldr	r2, [r3, #4]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006d3c:	605a      	str	r2, [r3, #4]
}
 8006d3e:	e7ff      	b.n	8006d40 <I2C_MasterReceive_RXNE+0x188>
 8006d40:	bf00      	nop
 8006d42:	3710      	adds	r7, #16
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}

08006d48 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b084      	sub	sp, #16
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d54:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d5a:	b29b      	uxth	r3, r3
 8006d5c:	2b04      	cmp	r3, #4
 8006d5e:	d11b      	bne.n	8006d98 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	685a      	ldr	r2, [r3, #4]
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006d6e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	691a      	ldr	r2, [r3, #16]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d7a:	b2d2      	uxtb	r2, r2
 8006d7c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d82:	1c5a      	adds	r2, r3, #1
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d8c:	b29b      	uxth	r3, r3
 8006d8e:	3b01      	subs	r3, #1
 8006d90:	b29a      	uxth	r2, r3
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8006d96:	e0c8      	b.n	8006f2a <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d9c:	b29b      	uxth	r3, r3
 8006d9e:	2b03      	cmp	r3, #3
 8006da0:	d129      	bne.n	8006df6 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	685a      	ldr	r2, [r3, #4]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006db0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2b04      	cmp	r3, #4
 8006db6:	d00a      	beq.n	8006dce <I2C_MasterReceive_BTF+0x86>
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	2b02      	cmp	r3, #2
 8006dbc:	d007      	beq.n	8006dce <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	681a      	ldr	r2, [r3, #0]
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006dcc:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	691a      	ldr	r2, [r3, #16]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dd8:	b2d2      	uxtb	r2, r2
 8006dda:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006de0:	1c5a      	adds	r2, r3, #1
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006dea:	b29b      	uxth	r3, r3
 8006dec:	3b01      	subs	r3, #1
 8006dee:	b29a      	uxth	r2, r3
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8006df4:	e099      	b.n	8006f2a <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006dfa:	b29b      	uxth	r3, r3
 8006dfc:	2b02      	cmp	r3, #2
 8006dfe:	f040 8081 	bne.w	8006f04 <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2b01      	cmp	r3, #1
 8006e06:	d002      	beq.n	8006e0e <I2C_MasterReceive_BTF+0xc6>
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	2b10      	cmp	r3, #16
 8006e0c:	d108      	bne.n	8006e20 <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	681a      	ldr	r2, [r3, #0]
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006e1c:	601a      	str	r2, [r3, #0]
 8006e1e:	e019      	b.n	8006e54 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2b04      	cmp	r3, #4
 8006e24:	d002      	beq.n	8006e2c <I2C_MasterReceive_BTF+0xe4>
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2b02      	cmp	r3, #2
 8006e2a:	d108      	bne.n	8006e3e <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	681a      	ldr	r2, [r3, #0]
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006e3a:	601a      	str	r2, [r3, #0]
 8006e3c:	e00a      	b.n	8006e54 <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	2b10      	cmp	r3, #16
 8006e42:	d007      	beq.n	8006e54 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	681a      	ldr	r2, [r3, #0]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006e52:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	691a      	ldr	r2, [r3, #16]
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e5e:	b2d2      	uxtb	r2, r2
 8006e60:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e66:	1c5a      	adds	r2, r3, #1
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e70:	b29b      	uxth	r3, r3
 8006e72:	3b01      	subs	r3, #1
 8006e74:	b29a      	uxth	r2, r3
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	691a      	ldr	r2, [r3, #16]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e84:	b2d2      	uxtb	r2, r2
 8006e86:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e8c:	1c5a      	adds	r2, r3, #1
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e96:	b29b      	uxth	r3, r3
 8006e98:	3b01      	subs	r3, #1
 8006e9a:	b29a      	uxth	r2, r3
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	685a      	ldr	r2, [r3, #4]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8006eae:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2220      	movs	r2, #32
 8006eb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006ebe:	b2db      	uxtb	r3, r3
 8006ec0:	2b40      	cmp	r3, #64	@ 0x40
 8006ec2:	d10a      	bne.n	8006eda <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f7fb ff4e 	bl	8002d74 <HAL_I2C_MemRxCpltCallback>
}
 8006ed8:	e027      	b.n	8006f2a <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2200      	movs	r2, #0
 8006ede:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	2b08      	cmp	r3, #8
 8006ee6:	d002      	beq.n	8006eee <I2C_MasterReceive_BTF+0x1a6>
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	2b20      	cmp	r3, #32
 8006eec:	d103      	bne.n	8006ef6 <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	631a      	str	r2, [r3, #48]	@ 0x30
 8006ef4:	e002      	b.n	8006efc <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2212      	movs	r2, #18
 8006efa:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f7ff fc67 	bl	80067d0 <HAL_I2C_MasterRxCpltCallback>
}
 8006f02:	e012      	b.n	8006f2a <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	691a      	ldr	r2, [r3, #16]
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f0e:	b2d2      	uxtb	r2, r2
 8006f10:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f16:	1c5a      	adds	r2, r3, #1
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f20:	b29b      	uxth	r3, r3
 8006f22:	3b01      	subs	r3, #1
 8006f24:	b29a      	uxth	r2, r3
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8006f2a:	bf00      	nop
 8006f2c:	3710      	adds	r7, #16
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}

08006f32 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8006f32:	b480      	push	{r7}
 8006f34:	b083      	sub	sp, #12
 8006f36:	af00      	add	r7, sp, #0
 8006f38:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006f40:	b2db      	uxtb	r3, r3
 8006f42:	2b40      	cmp	r3, #64	@ 0x40
 8006f44:	d117      	bne.n	8006f76 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d109      	bne.n	8006f62 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f52:	b2db      	uxtb	r3, r3
 8006f54:	461a      	mov	r2, r3
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006f5e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8006f60:	e067      	b.n	8007032 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f66:	b2db      	uxtb	r3, r3
 8006f68:	f043 0301 	orr.w	r3, r3, #1
 8006f6c:	b2da      	uxtb	r2, r3
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	611a      	str	r2, [r3, #16]
}
 8006f74:	e05d      	b.n	8007032 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	691b      	ldr	r3, [r3, #16]
 8006f7a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006f7e:	d133      	bne.n	8006fe8 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f86:	b2db      	uxtb	r3, r3
 8006f88:	2b21      	cmp	r3, #33	@ 0x21
 8006f8a:	d109      	bne.n	8006fa0 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f90:	b2db      	uxtb	r3, r3
 8006f92:	461a      	mov	r2, r3
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006f9c:	611a      	str	r2, [r3, #16]
 8006f9e:	e008      	b.n	8006fb2 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fa4:	b2db      	uxtb	r3, r3
 8006fa6:	f043 0301 	orr.w	r3, r3, #1
 8006faa:	b2da      	uxtb	r2, r3
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d004      	beq.n	8006fc4 <I2C_Master_SB+0x92>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006fbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d108      	bne.n	8006fd6 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d032      	beq.n	8007032 <I2C_Master_SB+0x100>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d02d      	beq.n	8007032 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	685a      	ldr	r2, [r3, #4]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006fe4:	605a      	str	r2, [r3, #4]
}
 8006fe6:	e024      	b.n	8007032 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d10e      	bne.n	800700e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ff4:	b29b      	uxth	r3, r3
 8006ff6:	11db      	asrs	r3, r3, #7
 8006ff8:	b2db      	uxtb	r3, r3
 8006ffa:	f003 0306 	and.w	r3, r3, #6
 8006ffe:	b2db      	uxtb	r3, r3
 8007000:	f063 030f 	orn	r3, r3, #15
 8007004:	b2da      	uxtb	r2, r3
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	611a      	str	r2, [r3, #16]
}
 800700c:	e011      	b.n	8007032 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007012:	2b01      	cmp	r3, #1
 8007014:	d10d      	bne.n	8007032 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800701a:	b29b      	uxth	r3, r3
 800701c:	11db      	asrs	r3, r3, #7
 800701e:	b2db      	uxtb	r3, r3
 8007020:	f003 0306 	and.w	r3, r3, #6
 8007024:	b2db      	uxtb	r3, r3
 8007026:	f063 030e 	orn	r3, r3, #14
 800702a:	b2da      	uxtb	r2, r3
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	611a      	str	r2, [r3, #16]
}
 8007032:	bf00      	nop
 8007034:	370c      	adds	r7, #12
 8007036:	46bd      	mov	sp, r7
 8007038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703c:	4770      	bx	lr

0800703e <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800703e:	b480      	push	{r7}
 8007040:	b083      	sub	sp, #12
 8007042:	af00      	add	r7, sp, #0
 8007044:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800704a:	b2da      	uxtb	r2, r3
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007056:	2b00      	cmp	r3, #0
 8007058:	d004      	beq.n	8007064 <I2C_Master_ADD10+0x26>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800705e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007060:	2b00      	cmp	r3, #0
 8007062:	d108      	bne.n	8007076 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007068:	2b00      	cmp	r3, #0
 800706a:	d00c      	beq.n	8007086 <I2C_Master_ADD10+0x48>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007070:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007072:	2b00      	cmp	r3, #0
 8007074:	d007      	beq.n	8007086 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	685a      	ldr	r2, [r3, #4]
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007084:	605a      	str	r2, [r3, #4]
  }
}
 8007086:	bf00      	nop
 8007088:	370c      	adds	r7, #12
 800708a:	46bd      	mov	sp, r7
 800708c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007090:	4770      	bx	lr

08007092 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8007092:	b480      	push	{r7}
 8007094:	b091      	sub	sp, #68	@ 0x44
 8007096:	af00      	add	r7, sp, #0
 8007098:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80070a0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070ae:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80070b6:	b2db      	uxtb	r3, r3
 80070b8:	2b22      	cmp	r3, #34	@ 0x22
 80070ba:	f040 8169 	bne.w	8007390 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d10f      	bne.n	80070e6 <I2C_Master_ADDR+0x54>
 80070c6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80070ca:	2b40      	cmp	r3, #64	@ 0x40
 80070cc:	d10b      	bne.n	80070e6 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80070ce:	2300      	movs	r3, #0
 80070d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	695b      	ldr	r3, [r3, #20]
 80070d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	699b      	ldr	r3, [r3, #24]
 80070e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80070e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070e4:	e160      	b.n	80073a8 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d11d      	bne.n	800712a <I2C_Master_ADDR+0x98>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	691b      	ldr	r3, [r3, #16]
 80070f2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80070f6:	d118      	bne.n	800712a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80070f8:	2300      	movs	r3, #0
 80070fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	695b      	ldr	r3, [r3, #20]
 8007102:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	699b      	ldr	r3, [r3, #24]
 800710a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800710c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	681a      	ldr	r2, [r3, #0]
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800711c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007122:	1c5a      	adds	r2, r3, #1
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	651a      	str	r2, [r3, #80]	@ 0x50
 8007128:	e13e      	b.n	80073a8 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800712e:	b29b      	uxth	r3, r3
 8007130:	2b00      	cmp	r3, #0
 8007132:	d113      	bne.n	800715c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007134:	2300      	movs	r3, #0
 8007136:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	695b      	ldr	r3, [r3, #20]
 800713e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	699b      	ldr	r3, [r3, #24]
 8007146:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007148:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	681a      	ldr	r2, [r3, #0]
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007158:	601a      	str	r2, [r3, #0]
 800715a:	e115      	b.n	8007388 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007160:	b29b      	uxth	r3, r3
 8007162:	2b01      	cmp	r3, #1
 8007164:	f040 808a 	bne.w	800727c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8007168:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800716a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800716e:	d137      	bne.n	80071e0 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	681a      	ldr	r2, [r3, #0]
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800717e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	685b      	ldr	r3, [r3, #4]
 8007186:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800718a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800718e:	d113      	bne.n	80071b8 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	681a      	ldr	r2, [r3, #0]
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800719e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80071a0:	2300      	movs	r3, #0
 80071a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	695b      	ldr	r3, [r3, #20]
 80071aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	699b      	ldr	r3, [r3, #24]
 80071b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80071b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071b6:	e0e7      	b.n	8007388 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80071b8:	2300      	movs	r3, #0
 80071ba:	623b      	str	r3, [r7, #32]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	695b      	ldr	r3, [r3, #20]
 80071c2:	623b      	str	r3, [r7, #32]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	699b      	ldr	r3, [r3, #24]
 80071ca:	623b      	str	r3, [r7, #32]
 80071cc:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	681a      	ldr	r2, [r3, #0]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80071dc:	601a      	str	r2, [r3, #0]
 80071de:	e0d3      	b.n	8007388 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80071e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071e2:	2b08      	cmp	r3, #8
 80071e4:	d02e      	beq.n	8007244 <I2C_Master_ADDR+0x1b2>
 80071e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071e8:	2b20      	cmp	r3, #32
 80071ea:	d02b      	beq.n	8007244 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80071ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071ee:	2b12      	cmp	r3, #18
 80071f0:	d102      	bne.n	80071f8 <I2C_Master_ADDR+0x166>
 80071f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071f4:	2b01      	cmp	r3, #1
 80071f6:	d125      	bne.n	8007244 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80071f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071fa:	2b04      	cmp	r3, #4
 80071fc:	d00e      	beq.n	800721c <I2C_Master_ADDR+0x18a>
 80071fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007200:	2b02      	cmp	r3, #2
 8007202:	d00b      	beq.n	800721c <I2C_Master_ADDR+0x18a>
 8007204:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007206:	2b10      	cmp	r3, #16
 8007208:	d008      	beq.n	800721c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	681a      	ldr	r2, [r3, #0]
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007218:	601a      	str	r2, [r3, #0]
 800721a:	e007      	b.n	800722c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	681a      	ldr	r2, [r3, #0]
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800722a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800722c:	2300      	movs	r3, #0
 800722e:	61fb      	str	r3, [r7, #28]
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	695b      	ldr	r3, [r3, #20]
 8007236:	61fb      	str	r3, [r7, #28]
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	699b      	ldr	r3, [r3, #24]
 800723e:	61fb      	str	r3, [r7, #28]
 8007240:	69fb      	ldr	r3, [r7, #28]
 8007242:	e0a1      	b.n	8007388 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	681a      	ldr	r2, [r3, #0]
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007252:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007254:	2300      	movs	r3, #0
 8007256:	61bb      	str	r3, [r7, #24]
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	695b      	ldr	r3, [r3, #20]
 800725e:	61bb      	str	r3, [r7, #24]
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	699b      	ldr	r3, [r3, #24]
 8007266:	61bb      	str	r3, [r7, #24]
 8007268:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	681a      	ldr	r2, [r3, #0]
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007278:	601a      	str	r2, [r3, #0]
 800727a:	e085      	b.n	8007388 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007280:	b29b      	uxth	r3, r3
 8007282:	2b02      	cmp	r3, #2
 8007284:	d14d      	bne.n	8007322 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007286:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007288:	2b04      	cmp	r3, #4
 800728a:	d016      	beq.n	80072ba <I2C_Master_ADDR+0x228>
 800728c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800728e:	2b02      	cmp	r3, #2
 8007290:	d013      	beq.n	80072ba <I2C_Master_ADDR+0x228>
 8007292:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007294:	2b10      	cmp	r3, #16
 8007296:	d010      	beq.n	80072ba <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	681a      	ldr	r2, [r3, #0]
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80072a6:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	681a      	ldr	r2, [r3, #0]
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80072b6:	601a      	str	r2, [r3, #0]
 80072b8:	e007      	b.n	80072ca <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	681a      	ldr	r2, [r3, #0]
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80072c8:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	685b      	ldr	r3, [r3, #4]
 80072d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80072d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80072d8:	d117      	bne.n	800730a <I2C_Master_ADDR+0x278>
 80072da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072dc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80072e0:	d00b      	beq.n	80072fa <I2C_Master_ADDR+0x268>
 80072e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072e4:	2b01      	cmp	r3, #1
 80072e6:	d008      	beq.n	80072fa <I2C_Master_ADDR+0x268>
 80072e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072ea:	2b08      	cmp	r3, #8
 80072ec:	d005      	beq.n	80072fa <I2C_Master_ADDR+0x268>
 80072ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072f0:	2b10      	cmp	r3, #16
 80072f2:	d002      	beq.n	80072fa <I2C_Master_ADDR+0x268>
 80072f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072f6:	2b20      	cmp	r3, #32
 80072f8:	d107      	bne.n	800730a <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	685a      	ldr	r2, [r3, #4]
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007308:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800730a:	2300      	movs	r3, #0
 800730c:	617b      	str	r3, [r7, #20]
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	695b      	ldr	r3, [r3, #20]
 8007314:	617b      	str	r3, [r7, #20]
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	699b      	ldr	r3, [r3, #24]
 800731c:	617b      	str	r3, [r7, #20]
 800731e:	697b      	ldr	r3, [r7, #20]
 8007320:	e032      	b.n	8007388 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	681a      	ldr	r2, [r3, #0]
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007330:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800733c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007340:	d117      	bne.n	8007372 <I2C_Master_ADDR+0x2e0>
 8007342:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007344:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007348:	d00b      	beq.n	8007362 <I2C_Master_ADDR+0x2d0>
 800734a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800734c:	2b01      	cmp	r3, #1
 800734e:	d008      	beq.n	8007362 <I2C_Master_ADDR+0x2d0>
 8007350:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007352:	2b08      	cmp	r3, #8
 8007354:	d005      	beq.n	8007362 <I2C_Master_ADDR+0x2d0>
 8007356:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007358:	2b10      	cmp	r3, #16
 800735a:	d002      	beq.n	8007362 <I2C_Master_ADDR+0x2d0>
 800735c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800735e:	2b20      	cmp	r3, #32
 8007360:	d107      	bne.n	8007372 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	685a      	ldr	r2, [r3, #4]
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007370:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007372:	2300      	movs	r3, #0
 8007374:	613b      	str	r3, [r7, #16]
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	695b      	ldr	r3, [r3, #20]
 800737c:	613b      	str	r3, [r7, #16]
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	699b      	ldr	r3, [r3, #24]
 8007384:	613b      	str	r3, [r7, #16]
 8007386:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2200      	movs	r2, #0
 800738c:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800738e:	e00b      	b.n	80073a8 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007390:	2300      	movs	r3, #0
 8007392:	60fb      	str	r3, [r7, #12]
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	695b      	ldr	r3, [r3, #20]
 800739a:	60fb      	str	r3, [r7, #12]
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	699b      	ldr	r3, [r3, #24]
 80073a2:	60fb      	str	r3, [r7, #12]
 80073a4:	68fb      	ldr	r3, [r7, #12]
}
 80073a6:	e7ff      	b.n	80073a8 <I2C_Master_ADDR+0x316>
 80073a8:	bf00      	nop
 80073aa:	3744      	adds	r7, #68	@ 0x44
 80073ac:	46bd      	mov	sp, r7
 80073ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b2:	4770      	bx	lr

080073b4 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b084      	sub	sp, #16
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80073c2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073c8:	b29b      	uxth	r3, r3
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d02b      	beq.n	8007426 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073d2:	781a      	ldrb	r2, [r3, #0]
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073de:	1c5a      	adds	r2, r3, #1
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073e8:	b29b      	uxth	r3, r3
 80073ea:	3b01      	subs	r3, #1
 80073ec:	b29a      	uxth	r2, r3
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073f6:	b29b      	uxth	r3, r3
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d114      	bne.n	8007426 <I2C_SlaveTransmit_TXE+0x72>
 80073fc:	7bfb      	ldrb	r3, [r7, #15]
 80073fe:	2b29      	cmp	r3, #41	@ 0x29
 8007400:	d111      	bne.n	8007426 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	685a      	ldr	r2, [r3, #4]
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007410:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2221      	movs	r2, #33	@ 0x21
 8007416:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2228      	movs	r2, #40	@ 0x28
 800741c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f7ff f9df 	bl	80067e4 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007426:	bf00      	nop
 8007428:	3710      	adds	r7, #16
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}

0800742e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800742e:	b480      	push	{r7}
 8007430:	b083      	sub	sp, #12
 8007432:	af00      	add	r7, sp, #0
 8007434:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800743a:	b29b      	uxth	r3, r3
 800743c:	2b00      	cmp	r3, #0
 800743e:	d011      	beq.n	8007464 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007444:	781a      	ldrb	r2, [r3, #0]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007450:	1c5a      	adds	r2, r3, #1
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800745a:	b29b      	uxth	r3, r3
 800745c:	3b01      	subs	r3, #1
 800745e:	b29a      	uxth	r2, r3
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8007464:	bf00      	nop
 8007466:	370c      	adds	r7, #12
 8007468:	46bd      	mov	sp, r7
 800746a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746e:	4770      	bx	lr

08007470 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b084      	sub	sp, #16
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800747e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007484:	b29b      	uxth	r3, r3
 8007486:	2b00      	cmp	r3, #0
 8007488:	d02c      	beq.n	80074e4 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	691a      	ldr	r2, [r3, #16]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007494:	b2d2      	uxtb	r2, r2
 8007496:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800749c:	1c5a      	adds	r2, r3, #1
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80074a6:	b29b      	uxth	r3, r3
 80074a8:	3b01      	subs	r3, #1
 80074aa:	b29a      	uxth	r2, r3
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80074b4:	b29b      	uxth	r3, r3
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d114      	bne.n	80074e4 <I2C_SlaveReceive_RXNE+0x74>
 80074ba:	7bfb      	ldrb	r3, [r7, #15]
 80074bc:	2b2a      	cmp	r3, #42	@ 0x2a
 80074be:	d111      	bne.n	80074e4 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	685a      	ldr	r2, [r3, #4]
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80074ce:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2222      	movs	r2, #34	@ 0x22
 80074d4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2228      	movs	r2, #40	@ 0x28
 80074da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f7ff f98a 	bl	80067f8 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80074e4:	bf00      	nop
 80074e6:	3710      	adds	r7, #16
 80074e8:	46bd      	mov	sp, r7
 80074ea:	bd80      	pop	{r7, pc}

080074ec <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80074ec:	b480      	push	{r7}
 80074ee:	b083      	sub	sp, #12
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80074f8:	b29b      	uxth	r3, r3
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d012      	beq.n	8007524 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	691a      	ldr	r2, [r3, #16]
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007508:	b2d2      	uxtb	r2, r2
 800750a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007510:	1c5a      	adds	r2, r3, #1
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800751a:	b29b      	uxth	r3, r3
 800751c:	3b01      	subs	r3, #1
 800751e:	b29a      	uxth	r2, r3
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8007524:	bf00      	nop
 8007526:	370c      	adds	r7, #12
 8007528:	46bd      	mov	sp, r7
 800752a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752e:	4770      	bx	lr

08007530 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b084      	sub	sp, #16
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
 8007538:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800753a:	2300      	movs	r3, #0
 800753c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007544:	b2db      	uxtb	r3, r3
 8007546:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800754a:	2b28      	cmp	r3, #40	@ 0x28
 800754c:	d127      	bne.n	800759e <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	685a      	ldr	r2, [r3, #4]
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800755c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	089b      	lsrs	r3, r3, #2
 8007562:	f003 0301 	and.w	r3, r3, #1
 8007566:	2b00      	cmp	r3, #0
 8007568:	d101      	bne.n	800756e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800756a:	2301      	movs	r3, #1
 800756c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	09db      	lsrs	r3, r3, #7
 8007572:	f003 0301 	and.w	r3, r3, #1
 8007576:	2b00      	cmp	r3, #0
 8007578:	d103      	bne.n	8007582 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	68db      	ldr	r3, [r3, #12]
 800757e:	81bb      	strh	r3, [r7, #12]
 8007580:	e002      	b.n	8007588 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	699b      	ldr	r3, [r3, #24]
 8007586:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2200      	movs	r2, #0
 800758c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8007590:	89ba      	ldrh	r2, [r7, #12]
 8007592:	7bfb      	ldrb	r3, [r7, #15]
 8007594:	4619      	mov	r1, r3
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f7ff f938 	bl	800680c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800759c:	e00e      	b.n	80075bc <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800759e:	2300      	movs	r3, #0
 80075a0:	60bb      	str	r3, [r7, #8]
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	695b      	ldr	r3, [r3, #20]
 80075a8:	60bb      	str	r3, [r7, #8]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	699b      	ldr	r3, [r3, #24]
 80075b0:	60bb      	str	r3, [r7, #8]
 80075b2:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2200      	movs	r2, #0
 80075b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80075bc:	bf00      	nop
 80075be:	3710      	adds	r7, #16
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}

080075c4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b084      	sub	sp, #16
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80075d2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	685a      	ldr	r2, [r3, #4]
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80075e2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80075e4:	2300      	movs	r3, #0
 80075e6:	60bb      	str	r3, [r7, #8]
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	695b      	ldr	r3, [r3, #20]
 80075ee:	60bb      	str	r3, [r7, #8]
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	681a      	ldr	r2, [r3, #0]
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f042 0201 	orr.w	r2, r2, #1
 80075fe:	601a      	str	r2, [r3, #0]
 8007600:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	681a      	ldr	r2, [r3, #0]
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007610:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	685b      	ldr	r3, [r3, #4]
 8007618:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800761c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007620:	d172      	bne.n	8007708 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007622:	7bfb      	ldrb	r3, [r7, #15]
 8007624:	2b22      	cmp	r3, #34	@ 0x22
 8007626:	d002      	beq.n	800762e <I2C_Slave_STOPF+0x6a>
 8007628:	7bfb      	ldrb	r3, [r7, #15]
 800762a:	2b2a      	cmp	r3, #42	@ 0x2a
 800762c:	d135      	bne.n	800769a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	685b      	ldr	r3, [r3, #4]
 8007636:	b29a      	uxth	r2, r3
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007640:	b29b      	uxth	r3, r3
 8007642:	2b00      	cmp	r3, #0
 8007644:	d005      	beq.n	8007652 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800764a:	f043 0204 	orr.w	r2, r3, #4
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	685a      	ldr	r2, [r3, #4]
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007660:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007666:	4618      	mov	r0, r3
 8007668:	f7fd fa0e 	bl	8004a88 <HAL_DMA_GetState>
 800766c:	4603      	mov	r3, r0
 800766e:	2b01      	cmp	r3, #1
 8007670:	d049      	beq.n	8007706 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007676:	4a69      	ldr	r2, [pc, #420]	@ (800781c <I2C_Slave_STOPF+0x258>)
 8007678:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800767e:	4618      	mov	r0, r3
 8007680:	f7fd f856 	bl	8004730 <HAL_DMA_Abort_IT>
 8007684:	4603      	mov	r3, r0
 8007686:	2b00      	cmp	r3, #0
 8007688:	d03d      	beq.n	8007706 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800768e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007690:	687a      	ldr	r2, [r7, #4]
 8007692:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007694:	4610      	mov	r0, r2
 8007696:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007698:	e035      	b.n	8007706 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	685b      	ldr	r3, [r3, #4]
 80076a2:	b29a      	uxth	r2, r3
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076ac:	b29b      	uxth	r3, r3
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d005      	beq.n	80076be <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076b6:	f043 0204 	orr.w	r2, r3, #4
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	685a      	ldr	r2, [r3, #4]
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80076cc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076d2:	4618      	mov	r0, r3
 80076d4:	f7fd f9d8 	bl	8004a88 <HAL_DMA_GetState>
 80076d8:	4603      	mov	r3, r0
 80076da:	2b01      	cmp	r3, #1
 80076dc:	d014      	beq.n	8007708 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076e2:	4a4e      	ldr	r2, [pc, #312]	@ (800781c <I2C_Slave_STOPF+0x258>)
 80076e4:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076ea:	4618      	mov	r0, r3
 80076ec:	f7fd f820 	bl	8004730 <HAL_DMA_Abort_IT>
 80076f0:	4603      	mov	r3, r0
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d008      	beq.n	8007708 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80076fc:	687a      	ldr	r2, [r7, #4]
 80076fe:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007700:	4610      	mov	r0, r2
 8007702:	4798      	blx	r3
 8007704:	e000      	b.n	8007708 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007706:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800770c:	b29b      	uxth	r3, r3
 800770e:	2b00      	cmp	r3, #0
 8007710:	d03e      	beq.n	8007790 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	695b      	ldr	r3, [r3, #20]
 8007718:	f003 0304 	and.w	r3, r3, #4
 800771c:	2b04      	cmp	r3, #4
 800771e:	d112      	bne.n	8007746 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	691a      	ldr	r2, [r3, #16]
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800772a:	b2d2      	uxtb	r2, r2
 800772c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007732:	1c5a      	adds	r2, r3, #1
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800773c:	b29b      	uxth	r3, r3
 800773e:	3b01      	subs	r3, #1
 8007740:	b29a      	uxth	r2, r3
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	695b      	ldr	r3, [r3, #20]
 800774c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007750:	2b40      	cmp	r3, #64	@ 0x40
 8007752:	d112      	bne.n	800777a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	691a      	ldr	r2, [r3, #16]
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800775e:	b2d2      	uxtb	r2, r2
 8007760:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007766:	1c5a      	adds	r2, r3, #1
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007770:	b29b      	uxth	r3, r3
 8007772:	3b01      	subs	r3, #1
 8007774:	b29a      	uxth	r2, r3
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800777e:	b29b      	uxth	r3, r3
 8007780:	2b00      	cmp	r3, #0
 8007782:	d005      	beq.n	8007790 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007788:	f043 0204 	orr.w	r2, r3, #4
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007794:	2b00      	cmp	r3, #0
 8007796:	d003      	beq.n	80077a0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f000 f8b7 	bl	800790c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800779e:	e039      	b.n	8007814 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80077a0:	7bfb      	ldrb	r3, [r7, #15]
 80077a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80077a4:	d109      	bne.n	80077ba <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2200      	movs	r2, #0
 80077aa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2228      	movs	r2, #40	@ 0x28
 80077b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f7ff f81f 	bl	80067f8 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80077c0:	b2db      	uxtb	r3, r3
 80077c2:	2b28      	cmp	r3, #40	@ 0x28
 80077c4:	d111      	bne.n	80077ea <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	4a15      	ldr	r2, [pc, #84]	@ (8007820 <I2C_Slave_STOPF+0x25c>)
 80077ca:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2200      	movs	r2, #0
 80077d0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2220      	movs	r2, #32
 80077d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2200      	movs	r2, #0
 80077de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f7ff f820 	bl	8006828 <HAL_I2C_ListenCpltCallback>
}
 80077e8:	e014      	b.n	8007814 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077ee:	2b22      	cmp	r3, #34	@ 0x22
 80077f0:	d002      	beq.n	80077f8 <I2C_Slave_STOPF+0x234>
 80077f2:	7bfb      	ldrb	r3, [r7, #15]
 80077f4:	2b22      	cmp	r3, #34	@ 0x22
 80077f6:	d10d      	bne.n	8007814 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2200      	movs	r2, #0
 80077fc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2220      	movs	r2, #32
 8007802:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2200      	movs	r2, #0
 800780a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f7fe fff2 	bl	80067f8 <HAL_I2C_SlaveRxCpltCallback>
}
 8007814:	bf00      	nop
 8007816:	3710      	adds	r7, #16
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}
 800781c:	080081a9 	.word	0x080081a9
 8007820:	ffff0000 	.word	0xffff0000

08007824 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b084      	sub	sp, #16
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007832:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007838:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	2b08      	cmp	r3, #8
 800783e:	d002      	beq.n	8007846 <I2C_Slave_AF+0x22>
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	2b20      	cmp	r3, #32
 8007844:	d129      	bne.n	800789a <I2C_Slave_AF+0x76>
 8007846:	7bfb      	ldrb	r3, [r7, #15]
 8007848:	2b28      	cmp	r3, #40	@ 0x28
 800784a:	d126      	bne.n	800789a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	4a2e      	ldr	r2, [pc, #184]	@ (8007908 <I2C_Slave_AF+0xe4>)
 8007850:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	685a      	ldr	r2, [r3, #4]
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007860:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800786a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	681a      	ldr	r2, [r3, #0]
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800787a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2200      	movs	r2, #0
 8007880:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2220      	movs	r2, #32
 8007886:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2200      	movs	r2, #0
 800788e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f7fe ffc8 	bl	8006828 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8007898:	e031      	b.n	80078fe <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800789a:	7bfb      	ldrb	r3, [r7, #15]
 800789c:	2b21      	cmp	r3, #33	@ 0x21
 800789e:	d129      	bne.n	80078f4 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	4a19      	ldr	r2, [pc, #100]	@ (8007908 <I2C_Slave_AF+0xe4>)
 80078a4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2221      	movs	r2, #33	@ 0x21
 80078aa:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2220      	movs	r2, #32
 80078b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2200      	movs	r2, #0
 80078b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	685a      	ldr	r2, [r3, #4]
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80078ca:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80078d4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	681a      	ldr	r2, [r3, #0]
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80078e4:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f7fd fcf4 	bl	80052d4 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f7fe ff79 	bl	80067e4 <HAL_I2C_SlaveTxCpltCallback>
}
 80078f2:	e004      	b.n	80078fe <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80078fc:	615a      	str	r2, [r3, #20]
}
 80078fe:	bf00      	nop
 8007900:	3710      	adds	r7, #16
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}
 8007906:	bf00      	nop
 8007908:	ffff0000 	.word	0xffff0000

0800790c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b084      	sub	sp, #16
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800791a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007922:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007924:	7bbb      	ldrb	r3, [r7, #14]
 8007926:	2b10      	cmp	r3, #16
 8007928:	d002      	beq.n	8007930 <I2C_ITError+0x24>
 800792a:	7bbb      	ldrb	r3, [r7, #14]
 800792c:	2b40      	cmp	r3, #64	@ 0x40
 800792e:	d10a      	bne.n	8007946 <I2C_ITError+0x3a>
 8007930:	7bfb      	ldrb	r3, [r7, #15]
 8007932:	2b22      	cmp	r3, #34	@ 0x22
 8007934:	d107      	bne.n	8007946 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	681a      	ldr	r2, [r3, #0]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007944:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007946:	7bfb      	ldrb	r3, [r7, #15]
 8007948:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800794c:	2b28      	cmp	r3, #40	@ 0x28
 800794e:	d107      	bne.n	8007960 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2200      	movs	r2, #0
 8007954:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2228      	movs	r2, #40	@ 0x28
 800795a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800795e:	e015      	b.n	800798c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	685b      	ldr	r3, [r3, #4]
 8007966:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800796a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800796e:	d00a      	beq.n	8007986 <I2C_ITError+0x7a>
 8007970:	7bfb      	ldrb	r3, [r7, #15]
 8007972:	2b60      	cmp	r3, #96	@ 0x60
 8007974:	d007      	beq.n	8007986 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2220      	movs	r2, #32
 800797a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2200      	movs	r2, #0
 8007982:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2200      	movs	r2, #0
 800798a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	685b      	ldr	r3, [r3, #4]
 8007992:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007996:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800799a:	d162      	bne.n	8007a62 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	685a      	ldr	r2, [r3, #4]
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80079aa:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079b0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80079b4:	b2db      	uxtb	r3, r3
 80079b6:	2b01      	cmp	r3, #1
 80079b8:	d020      	beq.n	80079fc <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079be:	4a6a      	ldr	r2, [pc, #424]	@ (8007b68 <I2C_ITError+0x25c>)
 80079c0:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079c6:	4618      	mov	r0, r3
 80079c8:	f7fc feb2 	bl	8004730 <HAL_DMA_Abort_IT>
 80079cc:	4603      	mov	r3, r0
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	f000 8089 	beq.w	8007ae6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	681a      	ldr	r2, [r3, #0]
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f022 0201 	bic.w	r2, r2, #1
 80079e2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2220      	movs	r2, #32
 80079e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079f2:	687a      	ldr	r2, [r7, #4]
 80079f4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80079f6:	4610      	mov	r0, r2
 80079f8:	4798      	blx	r3
 80079fa:	e074      	b.n	8007ae6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a00:	4a59      	ldr	r2, [pc, #356]	@ (8007b68 <I2C_ITError+0x25c>)
 8007a02:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a08:	4618      	mov	r0, r3
 8007a0a:	f7fc fe91 	bl	8004730 <HAL_DMA_Abort_IT>
 8007a0e:	4603      	mov	r3, r0
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d068      	beq.n	8007ae6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	695b      	ldr	r3, [r3, #20]
 8007a1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a1e:	2b40      	cmp	r3, #64	@ 0x40
 8007a20:	d10b      	bne.n	8007a3a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	691a      	ldr	r2, [r3, #16]
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a2c:	b2d2      	uxtb	r2, r2
 8007a2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a34:	1c5a      	adds	r2, r3, #1
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	681a      	ldr	r2, [r3, #0]
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f022 0201 	bic.w	r2, r2, #1
 8007a48:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2220      	movs	r2, #32
 8007a4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a58:	687a      	ldr	r2, [r7, #4]
 8007a5a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007a5c:	4610      	mov	r0, r2
 8007a5e:	4798      	blx	r3
 8007a60:	e041      	b.n	8007ae6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007a68:	b2db      	uxtb	r3, r3
 8007a6a:	2b60      	cmp	r3, #96	@ 0x60
 8007a6c:	d125      	bne.n	8007aba <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2220      	movs	r2, #32
 8007a72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2200      	movs	r2, #0
 8007a7a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	695b      	ldr	r3, [r3, #20]
 8007a82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a86:	2b40      	cmp	r3, #64	@ 0x40
 8007a88:	d10b      	bne.n	8007aa2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	691a      	ldr	r2, [r3, #16]
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a94:	b2d2      	uxtb	r2, r2
 8007a96:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a9c:	1c5a      	adds	r2, r3, #1
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	681a      	ldr	r2, [r3, #0]
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f022 0201 	bic.w	r2, r2, #1
 8007ab0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f7fe fecc 	bl	8006850 <HAL_I2C_AbortCpltCallback>
 8007ab8:	e015      	b.n	8007ae6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	695b      	ldr	r3, [r3, #20]
 8007ac0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ac4:	2b40      	cmp	r3, #64	@ 0x40
 8007ac6:	d10b      	bne.n	8007ae0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	691a      	ldr	r2, [r3, #16]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ad2:	b2d2      	uxtb	r2, r2
 8007ad4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ada:	1c5a      	adds	r2, r3, #1
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f7fe feab 	bl	800683c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007aea:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	f003 0301 	and.w	r3, r3, #1
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d10e      	bne.n	8007b14 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d109      	bne.n	8007b14 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d104      	bne.n	8007b14 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8007b0a:	68bb      	ldr	r3, [r7, #8]
 8007b0c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d007      	beq.n	8007b24 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	685a      	ldr	r2, [r3, #4]
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007b22:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b2a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b30:	f003 0304 	and.w	r3, r3, #4
 8007b34:	2b04      	cmp	r3, #4
 8007b36:	d113      	bne.n	8007b60 <I2C_ITError+0x254>
 8007b38:	7bfb      	ldrb	r3, [r7, #15]
 8007b3a:	2b28      	cmp	r3, #40	@ 0x28
 8007b3c:	d110      	bne.n	8007b60 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	4a0a      	ldr	r2, [pc, #40]	@ (8007b6c <I2C_ITError+0x260>)
 8007b42:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2200      	movs	r2, #0
 8007b48:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2220      	movs	r2, #32
 8007b4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2200      	movs	r2, #0
 8007b56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f7fe fe64 	bl	8006828 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007b60:	bf00      	nop
 8007b62:	3710      	adds	r7, #16
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bd80      	pop	{r7, pc}
 8007b68:	080081a9 	.word	0x080081a9
 8007b6c:	ffff0000 	.word	0xffff0000

08007b70 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b088      	sub	sp, #32
 8007b74:	af02      	add	r7, sp, #8
 8007b76:	60f8      	str	r0, [r7, #12]
 8007b78:	607a      	str	r2, [r7, #4]
 8007b7a:	603b      	str	r3, [r7, #0]
 8007b7c:	460b      	mov	r3, r1
 8007b7e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b84:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007b86:	697b      	ldr	r3, [r7, #20]
 8007b88:	2b08      	cmp	r3, #8
 8007b8a:	d006      	beq.n	8007b9a <I2C_MasterRequestWrite+0x2a>
 8007b8c:	697b      	ldr	r3, [r7, #20]
 8007b8e:	2b01      	cmp	r3, #1
 8007b90:	d003      	beq.n	8007b9a <I2C_MasterRequestWrite+0x2a>
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007b98:	d108      	bne.n	8007bac <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	681a      	ldr	r2, [r3, #0]
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007ba8:	601a      	str	r2, [r3, #0]
 8007baa:	e00b      	b.n	8007bc4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bb0:	2b12      	cmp	r3, #18
 8007bb2:	d107      	bne.n	8007bc4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	681a      	ldr	r2, [r3, #0]
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007bc2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	9300      	str	r3, [sp, #0]
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007bd0:	68f8      	ldr	r0, [r7, #12]
 8007bd2:	f000 fb91 	bl	80082f8 <I2C_WaitOnFlagUntilTimeout>
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d00d      	beq.n	8007bf8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007be6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007bea:	d103      	bne.n	8007bf4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007bf2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007bf4:	2303      	movs	r3, #3
 8007bf6:	e035      	b.n	8007c64 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	691b      	ldr	r3, [r3, #16]
 8007bfc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007c00:	d108      	bne.n	8007c14 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007c02:	897b      	ldrh	r3, [r7, #10]
 8007c04:	b2db      	uxtb	r3, r3
 8007c06:	461a      	mov	r2, r3
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007c10:	611a      	str	r2, [r3, #16]
 8007c12:	e01b      	b.n	8007c4c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007c14:	897b      	ldrh	r3, [r7, #10]
 8007c16:	11db      	asrs	r3, r3, #7
 8007c18:	b2db      	uxtb	r3, r3
 8007c1a:	f003 0306 	and.w	r3, r3, #6
 8007c1e:	b2db      	uxtb	r3, r3
 8007c20:	f063 030f 	orn	r3, r3, #15
 8007c24:	b2da      	uxtb	r2, r3
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	687a      	ldr	r2, [r7, #4]
 8007c30:	490e      	ldr	r1, [pc, #56]	@ (8007c6c <I2C_MasterRequestWrite+0xfc>)
 8007c32:	68f8      	ldr	r0, [r7, #12]
 8007c34:	f000 fbda 	bl	80083ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d001      	beq.n	8007c42 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8007c3e:	2301      	movs	r3, #1
 8007c40:	e010      	b.n	8007c64 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007c42:	897b      	ldrh	r3, [r7, #10]
 8007c44:	b2da      	uxtb	r2, r3
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	687a      	ldr	r2, [r7, #4]
 8007c50:	4907      	ldr	r1, [pc, #28]	@ (8007c70 <I2C_MasterRequestWrite+0x100>)
 8007c52:	68f8      	ldr	r0, [r7, #12]
 8007c54:	f000 fbca 	bl	80083ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d001      	beq.n	8007c62 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8007c5e:	2301      	movs	r3, #1
 8007c60:	e000      	b.n	8007c64 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8007c62:	2300      	movs	r3, #0
}
 8007c64:	4618      	mov	r0, r3
 8007c66:	3718      	adds	r7, #24
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}
 8007c6c:	00010008 	.word	0x00010008
 8007c70:	00010002 	.word	0x00010002

08007c74 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b088      	sub	sp, #32
 8007c78:	af02      	add	r7, sp, #8
 8007c7a:	60f8      	str	r0, [r7, #12]
 8007c7c:	4608      	mov	r0, r1
 8007c7e:	4611      	mov	r1, r2
 8007c80:	461a      	mov	r2, r3
 8007c82:	4603      	mov	r3, r0
 8007c84:	817b      	strh	r3, [r7, #10]
 8007c86:	460b      	mov	r3, r1
 8007c88:	813b      	strh	r3, [r7, #8]
 8007c8a:	4613      	mov	r3, r2
 8007c8c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	681a      	ldr	r2, [r3, #0]
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007c9c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ca0:	9300      	str	r3, [sp, #0]
 8007ca2:	6a3b      	ldr	r3, [r7, #32]
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007caa:	68f8      	ldr	r0, [r7, #12]
 8007cac:	f000 fb24 	bl	80082f8 <I2C_WaitOnFlagUntilTimeout>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d00d      	beq.n	8007cd2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007cc0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007cc4:	d103      	bne.n	8007cce <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007ccc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007cce:	2303      	movs	r3, #3
 8007cd0:	e05f      	b.n	8007d92 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007cd2:	897b      	ldrh	r3, [r7, #10]
 8007cd4:	b2db      	uxtb	r3, r3
 8007cd6:	461a      	mov	r2, r3
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007ce0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ce4:	6a3a      	ldr	r2, [r7, #32]
 8007ce6:	492d      	ldr	r1, [pc, #180]	@ (8007d9c <I2C_RequestMemoryWrite+0x128>)
 8007ce8:	68f8      	ldr	r0, [r7, #12]
 8007cea:	f000 fb7f 	bl	80083ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007cee:	4603      	mov	r3, r0
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d001      	beq.n	8007cf8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007cf4:	2301      	movs	r3, #1
 8007cf6:	e04c      	b.n	8007d92 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	617b      	str	r3, [r7, #20]
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	695b      	ldr	r3, [r3, #20]
 8007d02:	617b      	str	r3, [r7, #20]
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	699b      	ldr	r3, [r3, #24]
 8007d0a:	617b      	str	r3, [r7, #20]
 8007d0c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d10:	6a39      	ldr	r1, [r7, #32]
 8007d12:	68f8      	ldr	r0, [r7, #12]
 8007d14:	f000 fc0a 	bl	800852c <I2C_WaitOnTXEFlagUntilTimeout>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d00d      	beq.n	8007d3a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d22:	2b04      	cmp	r3, #4
 8007d24:	d107      	bne.n	8007d36 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	681a      	ldr	r2, [r3, #0]
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007d34:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007d36:	2301      	movs	r3, #1
 8007d38:	e02b      	b.n	8007d92 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007d3a:	88fb      	ldrh	r3, [r7, #6]
 8007d3c:	2b01      	cmp	r3, #1
 8007d3e:	d105      	bne.n	8007d4c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007d40:	893b      	ldrh	r3, [r7, #8]
 8007d42:	b2da      	uxtb	r2, r3
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	611a      	str	r2, [r3, #16]
 8007d4a:	e021      	b.n	8007d90 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007d4c:	893b      	ldrh	r3, [r7, #8]
 8007d4e:	0a1b      	lsrs	r3, r3, #8
 8007d50:	b29b      	uxth	r3, r3
 8007d52:	b2da      	uxtb	r2, r3
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d5c:	6a39      	ldr	r1, [r7, #32]
 8007d5e:	68f8      	ldr	r0, [r7, #12]
 8007d60:	f000 fbe4 	bl	800852c <I2C_WaitOnTXEFlagUntilTimeout>
 8007d64:	4603      	mov	r3, r0
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d00d      	beq.n	8007d86 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d6e:	2b04      	cmp	r3, #4
 8007d70:	d107      	bne.n	8007d82 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	681a      	ldr	r2, [r3, #0]
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007d80:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007d82:	2301      	movs	r3, #1
 8007d84:	e005      	b.n	8007d92 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007d86:	893b      	ldrh	r3, [r7, #8]
 8007d88:	b2da      	uxtb	r2, r3
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007d90:	2300      	movs	r3, #0
}
 8007d92:	4618      	mov	r0, r3
 8007d94:	3718      	adds	r7, #24
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}
 8007d9a:	bf00      	nop
 8007d9c:	00010002 	.word	0x00010002

08007da0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b088      	sub	sp, #32
 8007da4:	af02      	add	r7, sp, #8
 8007da6:	60f8      	str	r0, [r7, #12]
 8007da8:	4608      	mov	r0, r1
 8007daa:	4611      	mov	r1, r2
 8007dac:	461a      	mov	r2, r3
 8007dae:	4603      	mov	r3, r0
 8007db0:	817b      	strh	r3, [r7, #10]
 8007db2:	460b      	mov	r3, r1
 8007db4:	813b      	strh	r3, [r7, #8]
 8007db6:	4613      	mov	r3, r2
 8007db8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	681a      	ldr	r2, [r3, #0]
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007dc8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	681a      	ldr	r2, [r3, #0]
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007dd8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ddc:	9300      	str	r3, [sp, #0]
 8007dde:	6a3b      	ldr	r3, [r7, #32]
 8007de0:	2200      	movs	r2, #0
 8007de2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007de6:	68f8      	ldr	r0, [r7, #12]
 8007de8:	f000 fa86 	bl	80082f8 <I2C_WaitOnFlagUntilTimeout>
 8007dec:	4603      	mov	r3, r0
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d00d      	beq.n	8007e0e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007dfc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e00:	d103      	bne.n	8007e0a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007e08:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007e0a:	2303      	movs	r3, #3
 8007e0c:	e0aa      	b.n	8007f64 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007e0e:	897b      	ldrh	r3, [r7, #10]
 8007e10:	b2db      	uxtb	r3, r3
 8007e12:	461a      	mov	r2, r3
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007e1c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e20:	6a3a      	ldr	r2, [r7, #32]
 8007e22:	4952      	ldr	r1, [pc, #328]	@ (8007f6c <I2C_RequestMemoryRead+0x1cc>)
 8007e24:	68f8      	ldr	r0, [r7, #12]
 8007e26:	f000 fae1 	bl	80083ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d001      	beq.n	8007e34 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007e30:	2301      	movs	r3, #1
 8007e32:	e097      	b.n	8007f64 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e34:	2300      	movs	r3, #0
 8007e36:	617b      	str	r3, [r7, #20]
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	695b      	ldr	r3, [r3, #20]
 8007e3e:	617b      	str	r3, [r7, #20]
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	699b      	ldr	r3, [r3, #24]
 8007e46:	617b      	str	r3, [r7, #20]
 8007e48:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007e4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e4c:	6a39      	ldr	r1, [r7, #32]
 8007e4e:	68f8      	ldr	r0, [r7, #12]
 8007e50:	f000 fb6c 	bl	800852c <I2C_WaitOnTXEFlagUntilTimeout>
 8007e54:	4603      	mov	r3, r0
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d00d      	beq.n	8007e76 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e5e:	2b04      	cmp	r3, #4
 8007e60:	d107      	bne.n	8007e72 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	681a      	ldr	r2, [r3, #0]
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007e70:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007e72:	2301      	movs	r3, #1
 8007e74:	e076      	b.n	8007f64 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007e76:	88fb      	ldrh	r3, [r7, #6]
 8007e78:	2b01      	cmp	r3, #1
 8007e7a:	d105      	bne.n	8007e88 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007e7c:	893b      	ldrh	r3, [r7, #8]
 8007e7e:	b2da      	uxtb	r2, r3
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	611a      	str	r2, [r3, #16]
 8007e86:	e021      	b.n	8007ecc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007e88:	893b      	ldrh	r3, [r7, #8]
 8007e8a:	0a1b      	lsrs	r3, r3, #8
 8007e8c:	b29b      	uxth	r3, r3
 8007e8e:	b2da      	uxtb	r2, r3
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007e96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e98:	6a39      	ldr	r1, [r7, #32]
 8007e9a:	68f8      	ldr	r0, [r7, #12]
 8007e9c:	f000 fb46 	bl	800852c <I2C_WaitOnTXEFlagUntilTimeout>
 8007ea0:	4603      	mov	r3, r0
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d00d      	beq.n	8007ec2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007eaa:	2b04      	cmp	r3, #4
 8007eac:	d107      	bne.n	8007ebe <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	681a      	ldr	r2, [r3, #0]
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007ebc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	e050      	b.n	8007f64 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007ec2:	893b      	ldrh	r3, [r7, #8]
 8007ec4:	b2da      	uxtb	r2, r3
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007ecc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ece:	6a39      	ldr	r1, [r7, #32]
 8007ed0:	68f8      	ldr	r0, [r7, #12]
 8007ed2:	f000 fb2b 	bl	800852c <I2C_WaitOnTXEFlagUntilTimeout>
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d00d      	beq.n	8007ef8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ee0:	2b04      	cmp	r3, #4
 8007ee2:	d107      	bne.n	8007ef4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	681a      	ldr	r2, [r3, #0]
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007ef2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007ef4:	2301      	movs	r3, #1
 8007ef6:	e035      	b.n	8007f64 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	681a      	ldr	r2, [r3, #0]
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007f06:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f0a:	9300      	str	r3, [sp, #0]
 8007f0c:	6a3b      	ldr	r3, [r7, #32]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007f14:	68f8      	ldr	r0, [r7, #12]
 8007f16:	f000 f9ef 	bl	80082f8 <I2C_WaitOnFlagUntilTimeout>
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d00d      	beq.n	8007f3c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f2e:	d103      	bne.n	8007f38 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007f36:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007f38:	2303      	movs	r3, #3
 8007f3a:	e013      	b.n	8007f64 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007f3c:	897b      	ldrh	r3, [r7, #10]
 8007f3e:	b2db      	uxtb	r3, r3
 8007f40:	f043 0301 	orr.w	r3, r3, #1
 8007f44:	b2da      	uxtb	r2, r3
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f4e:	6a3a      	ldr	r2, [r7, #32]
 8007f50:	4906      	ldr	r1, [pc, #24]	@ (8007f6c <I2C_RequestMemoryRead+0x1cc>)
 8007f52:	68f8      	ldr	r0, [r7, #12]
 8007f54:	f000 fa4a 	bl	80083ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d001      	beq.n	8007f62 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007f5e:	2301      	movs	r3, #1
 8007f60:	e000      	b.n	8007f64 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007f62:	2300      	movs	r3, #0
}
 8007f64:	4618      	mov	r0, r3
 8007f66:	3718      	adds	r7, #24
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bd80      	pop	{r7, pc}
 8007f6c:	00010002 	.word	0x00010002

08007f70 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b086      	sub	sp, #24
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f7c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007f7e:	697b      	ldr	r3, [r7, #20]
 8007f80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007f84:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007f86:	697b      	ldr	r3, [r7, #20]
 8007f88:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007f8c:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007f8e:	697b      	ldr	r3, [r7, #20]
 8007f90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f92:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007f94:	697b      	ldr	r3, [r7, #20]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	685a      	ldr	r2, [r3, #4]
 8007f9a:	697b      	ldr	r3, [r7, #20]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8007fa2:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8007fa4:	697b      	ldr	r3, [r7, #20]
 8007fa6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d003      	beq.n	8007fb4 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007fac:	697b      	ldr	r3, [r7, #20]
 8007fae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8007fb4:	697b      	ldr	r3, [r7, #20]
 8007fb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d003      	beq.n	8007fc4 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007fbc:	697b      	ldr	r3, [r7, #20]
 8007fbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8007fc4:	7cfb      	ldrb	r3, [r7, #19]
 8007fc6:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8007fca:	2b21      	cmp	r3, #33	@ 0x21
 8007fcc:	d007      	beq.n	8007fde <I2C_DMAXferCplt+0x6e>
 8007fce:	7cfb      	ldrb	r3, [r7, #19]
 8007fd0:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 8007fd4:	2b22      	cmp	r3, #34	@ 0x22
 8007fd6:	d131      	bne.n	800803c <I2C_DMAXferCplt+0xcc>
 8007fd8:	7cbb      	ldrb	r3, [r7, #18]
 8007fda:	2b20      	cmp	r3, #32
 8007fdc:	d12e      	bne.n	800803c <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007fde:	697b      	ldr	r3, [r7, #20]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	685a      	ldr	r2, [r3, #4]
 8007fe4:	697b      	ldr	r3, [r7, #20]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007fec:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8007fee:	697b      	ldr	r3, [r7, #20]
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8007ff4:	7cfb      	ldrb	r3, [r7, #19]
 8007ff6:	2b29      	cmp	r3, #41	@ 0x29
 8007ff8:	d10a      	bne.n	8008010 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007ffa:	697b      	ldr	r3, [r7, #20]
 8007ffc:	2221      	movs	r2, #33	@ 0x21
 8007ffe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008000:	697b      	ldr	r3, [r7, #20]
 8008002:	2228      	movs	r2, #40	@ 0x28
 8008004:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008008:	6978      	ldr	r0, [r7, #20]
 800800a:	f7fe fbeb 	bl	80067e4 <HAL_I2C_SlaveTxCpltCallback>
 800800e:	e00c      	b.n	800802a <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008010:	7cfb      	ldrb	r3, [r7, #19]
 8008012:	2b2a      	cmp	r3, #42	@ 0x2a
 8008014:	d109      	bne.n	800802a <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008016:	697b      	ldr	r3, [r7, #20]
 8008018:	2222      	movs	r2, #34	@ 0x22
 800801a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800801c:	697b      	ldr	r3, [r7, #20]
 800801e:	2228      	movs	r2, #40	@ 0x28
 8008020:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008024:	6978      	ldr	r0, [r7, #20]
 8008026:	f7fe fbe7 	bl	80067f8 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800802a:	697b      	ldr	r3, [r7, #20]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	685a      	ldr	r2, [r3, #4]
 8008030:	697b      	ldr	r3, [r7, #20]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8008038:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800803a:	e074      	b.n	8008126 <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 800803c:	697b      	ldr	r3, [r7, #20]
 800803e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008042:	b2db      	uxtb	r3, r3
 8008044:	2b00      	cmp	r3, #0
 8008046:	d06e      	beq.n	8008126 <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 8008048:	697b      	ldr	r3, [r7, #20]
 800804a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800804c:	b29b      	uxth	r3, r3
 800804e:	2b01      	cmp	r3, #1
 8008050:	d107      	bne.n	8008062 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008052:	697b      	ldr	r3, [r7, #20]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	681a      	ldr	r2, [r3, #0]
 8008058:	697b      	ldr	r3, [r7, #20]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008060:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8008062:	697b      	ldr	r3, [r7, #20]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	685a      	ldr	r2, [r3, #4]
 8008068:	697b      	ldr	r3, [r7, #20]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8008070:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008078:	d009      	beq.n	800808e <I2C_DMAXferCplt+0x11e>
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	2b08      	cmp	r3, #8
 800807e:	d006      	beq.n	800808e <I2C_DMAXferCplt+0x11e>
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8008086:	d002      	beq.n	800808e <I2C_DMAXferCplt+0x11e>
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	2b20      	cmp	r3, #32
 800808c:	d107      	bne.n	800809e <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800808e:	697b      	ldr	r3, [r7, #20]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	681a      	ldr	r2, [r3, #0]
 8008094:	697b      	ldr	r3, [r7, #20]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800809c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800809e:	697b      	ldr	r3, [r7, #20]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	685a      	ldr	r2, [r3, #4]
 80080a4:	697b      	ldr	r3, [r7, #20]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80080ac:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80080ae:	697b      	ldr	r3, [r7, #20]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	685a      	ldr	r2, [r3, #4]
 80080b4:	697b      	ldr	r3, [r7, #20]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80080bc:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 80080be:	697b      	ldr	r3, [r7, #20]
 80080c0:	2200      	movs	r2, #0
 80080c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80080c4:	697b      	ldr	r3, [r7, #20]
 80080c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d003      	beq.n	80080d4 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 80080cc:	6978      	ldr	r0, [r7, #20]
 80080ce:	f7fe fbb5 	bl	800683c <HAL_I2C_ErrorCallback>
}
 80080d2:	e028      	b.n	8008126 <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 80080d4:	697b      	ldr	r3, [r7, #20]
 80080d6:	2220      	movs	r2, #32
 80080d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80080dc:	697b      	ldr	r3, [r7, #20]
 80080de:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80080e2:	b2db      	uxtb	r3, r3
 80080e4:	2b40      	cmp	r3, #64	@ 0x40
 80080e6:	d10a      	bne.n	80080fe <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80080e8:	697b      	ldr	r3, [r7, #20]
 80080ea:	2200      	movs	r2, #0
 80080ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80080f0:	697b      	ldr	r3, [r7, #20]
 80080f2:	2200      	movs	r2, #0
 80080f4:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80080f6:	6978      	ldr	r0, [r7, #20]
 80080f8:	f7fa fe3c 	bl	8002d74 <HAL_I2C_MemRxCpltCallback>
}
 80080fc:	e013      	b.n	8008126 <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80080fe:	697b      	ldr	r3, [r7, #20]
 8008100:	2200      	movs	r2, #0
 8008102:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	2b08      	cmp	r3, #8
 800810a:	d002      	beq.n	8008112 <I2C_DMAXferCplt+0x1a2>
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	2b20      	cmp	r3, #32
 8008110:	d103      	bne.n	800811a <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 8008112:	697b      	ldr	r3, [r7, #20]
 8008114:	2200      	movs	r2, #0
 8008116:	631a      	str	r2, [r3, #48]	@ 0x30
 8008118:	e002      	b.n	8008120 <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800811a:	697b      	ldr	r3, [r7, #20]
 800811c:	2212      	movs	r2, #18
 800811e:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8008120:	6978      	ldr	r0, [r7, #20]
 8008122:	f7fe fb55 	bl	80067d0 <HAL_I2C_MasterRxCpltCallback>
}
 8008126:	bf00      	nop
 8008128:	3718      	adds	r7, #24
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}

0800812e <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800812e:	b580      	push	{r7, lr}
 8008130:	b084      	sub	sp, #16
 8008132:	af00      	add	r7, sp, #0
 8008134:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800813a:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008140:	2b00      	cmp	r3, #0
 8008142:	d003      	beq.n	800814c <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008148:	2200      	movs	r2, #0
 800814a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008150:	2b00      	cmp	r3, #0
 8008152:	d003      	beq.n	800815c <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008158:	2200      	movs	r2, #0
 800815a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	f7fc fca1 	bl	8004aa4 <HAL_DMA_GetError>
 8008162:	4603      	mov	r3, r0
 8008164:	2b02      	cmp	r3, #2
 8008166:	d01b      	beq.n	80081a0 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	681a      	ldr	r2, [r3, #0]
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008176:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	2200      	movs	r2, #0
 800817c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	2220      	movs	r2, #32
 8008182:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	2200      	movs	r2, #0
 800818a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008192:	f043 0210 	orr.w	r2, r3, #16
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800819a:	68f8      	ldr	r0, [r7, #12]
 800819c:	f7fe fb4e 	bl	800683c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80081a0:	bf00      	nop
 80081a2:	3710      	adds	r7, #16
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}

080081a8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b086      	sub	sp, #24
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80081b0:	2300      	movs	r3, #0
 80081b2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081b8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80081c0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80081c2:	4b4b      	ldr	r3, [pc, #300]	@ (80082f0 <I2C_DMAAbort+0x148>)
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	08db      	lsrs	r3, r3, #3
 80081c8:	4a4a      	ldr	r2, [pc, #296]	@ (80082f4 <I2C_DMAAbort+0x14c>)
 80081ca:	fba2 2303 	umull	r2, r3, r2, r3
 80081ce:	0a1a      	lsrs	r2, r3, #8
 80081d0:	4613      	mov	r3, r2
 80081d2:	009b      	lsls	r3, r3, #2
 80081d4:	4413      	add	r3, r2
 80081d6:	00da      	lsls	r2, r3, #3
 80081d8:	1ad3      	subs	r3, r2, r3
 80081da:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d106      	bne.n	80081f0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80081e2:	697b      	ldr	r3, [r7, #20]
 80081e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081e6:	f043 0220 	orr.w	r2, r3, #32
 80081ea:	697b      	ldr	r3, [r7, #20]
 80081ec:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 80081ee:	e00a      	b.n	8008206 <I2C_DMAAbort+0x5e>
    }
    count--;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	3b01      	subs	r3, #1
 80081f4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80081f6:	697b      	ldr	r3, [r7, #20]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008200:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008204:	d0ea      	beq.n	80081dc <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8008206:	697b      	ldr	r3, [r7, #20]
 8008208:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800820a:	2b00      	cmp	r3, #0
 800820c:	d003      	beq.n	8008216 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800820e:	697b      	ldr	r3, [r7, #20]
 8008210:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008212:	2200      	movs	r2, #0
 8008214:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8008216:	697b      	ldr	r3, [r7, #20]
 8008218:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800821a:	2b00      	cmp	r3, #0
 800821c:	d003      	beq.n	8008226 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800821e:	697b      	ldr	r3, [r7, #20]
 8008220:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008222:	2200      	movs	r2, #0
 8008224:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008226:	697b      	ldr	r3, [r7, #20]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	681a      	ldr	r2, [r3, #0]
 800822c:	697b      	ldr	r3, [r7, #20]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008234:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8008236:	697b      	ldr	r3, [r7, #20]
 8008238:	2200      	movs	r2, #0
 800823a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800823c:	697b      	ldr	r3, [r7, #20]
 800823e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008240:	2b00      	cmp	r3, #0
 8008242:	d003      	beq.n	800824c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8008244:	697b      	ldr	r3, [r7, #20]
 8008246:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008248:	2200      	movs	r2, #0
 800824a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 800824c:	697b      	ldr	r3, [r7, #20]
 800824e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008250:	2b00      	cmp	r3, #0
 8008252:	d003      	beq.n	800825c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8008254:	697b      	ldr	r3, [r7, #20]
 8008256:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008258:	2200      	movs	r2, #0
 800825a:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800825c:	697b      	ldr	r3, [r7, #20]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	681a      	ldr	r2, [r3, #0]
 8008262:	697b      	ldr	r3, [r7, #20]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f022 0201 	bic.w	r2, r2, #1
 800826a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800826c:	697b      	ldr	r3, [r7, #20]
 800826e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008272:	b2db      	uxtb	r3, r3
 8008274:	2b60      	cmp	r3, #96	@ 0x60
 8008276:	d10e      	bne.n	8008296 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8008278:	697b      	ldr	r3, [r7, #20]
 800827a:	2220      	movs	r2, #32
 800827c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008280:	697b      	ldr	r3, [r7, #20]
 8008282:	2200      	movs	r2, #0
 8008284:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8008288:	697b      	ldr	r3, [r7, #20]
 800828a:	2200      	movs	r2, #0
 800828c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800828e:	6978      	ldr	r0, [r7, #20]
 8008290:	f7fe fade 	bl	8006850 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008294:	e027      	b.n	80082e6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008296:	7cfb      	ldrb	r3, [r7, #19]
 8008298:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800829c:	2b28      	cmp	r3, #40	@ 0x28
 800829e:	d117      	bne.n	80082d0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80082a0:	697b      	ldr	r3, [r7, #20]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	681a      	ldr	r2, [r3, #0]
 80082a6:	697b      	ldr	r3, [r7, #20]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f042 0201 	orr.w	r2, r2, #1
 80082ae:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80082b0:	697b      	ldr	r3, [r7, #20]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	681a      	ldr	r2, [r3, #0]
 80082b6:	697b      	ldr	r3, [r7, #20]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80082be:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80082c0:	697b      	ldr	r3, [r7, #20]
 80082c2:	2200      	movs	r2, #0
 80082c4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80082c6:	697b      	ldr	r3, [r7, #20]
 80082c8:	2228      	movs	r2, #40	@ 0x28
 80082ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80082ce:	e007      	b.n	80082e0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80082d0:	697b      	ldr	r3, [r7, #20]
 80082d2:	2220      	movs	r2, #32
 80082d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80082d8:	697b      	ldr	r3, [r7, #20]
 80082da:	2200      	movs	r2, #0
 80082dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80082e0:	6978      	ldr	r0, [r7, #20]
 80082e2:	f7fe faab 	bl	800683c <HAL_I2C_ErrorCallback>
}
 80082e6:	bf00      	nop
 80082e8:	3718      	adds	r7, #24
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bd80      	pop	{r7, pc}
 80082ee:	bf00      	nop
 80082f0:	2000000c 	.word	0x2000000c
 80082f4:	14f8b589 	.word	0x14f8b589

080082f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b084      	sub	sp, #16
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	60f8      	str	r0, [r7, #12]
 8008300:	60b9      	str	r1, [r7, #8]
 8008302:	603b      	str	r3, [r7, #0]
 8008304:	4613      	mov	r3, r2
 8008306:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008308:	e048      	b.n	800839c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008310:	d044      	beq.n	800839c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008312:	f7fb faa9 	bl	8003868 <HAL_GetTick>
 8008316:	4602      	mov	r2, r0
 8008318:	69bb      	ldr	r3, [r7, #24]
 800831a:	1ad3      	subs	r3, r2, r3
 800831c:	683a      	ldr	r2, [r7, #0]
 800831e:	429a      	cmp	r2, r3
 8008320:	d302      	bcc.n	8008328 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d139      	bne.n	800839c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	0c1b      	lsrs	r3, r3, #16
 800832c:	b2db      	uxtb	r3, r3
 800832e:	2b01      	cmp	r3, #1
 8008330:	d10d      	bne.n	800834e <I2C_WaitOnFlagUntilTimeout+0x56>
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	695b      	ldr	r3, [r3, #20]
 8008338:	43da      	mvns	r2, r3
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	4013      	ands	r3, r2
 800833e:	b29b      	uxth	r3, r3
 8008340:	2b00      	cmp	r3, #0
 8008342:	bf0c      	ite	eq
 8008344:	2301      	moveq	r3, #1
 8008346:	2300      	movne	r3, #0
 8008348:	b2db      	uxtb	r3, r3
 800834a:	461a      	mov	r2, r3
 800834c:	e00c      	b.n	8008368 <I2C_WaitOnFlagUntilTimeout+0x70>
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	699b      	ldr	r3, [r3, #24]
 8008354:	43da      	mvns	r2, r3
 8008356:	68bb      	ldr	r3, [r7, #8]
 8008358:	4013      	ands	r3, r2
 800835a:	b29b      	uxth	r3, r3
 800835c:	2b00      	cmp	r3, #0
 800835e:	bf0c      	ite	eq
 8008360:	2301      	moveq	r3, #1
 8008362:	2300      	movne	r3, #0
 8008364:	b2db      	uxtb	r3, r3
 8008366:	461a      	mov	r2, r3
 8008368:	79fb      	ldrb	r3, [r7, #7]
 800836a:	429a      	cmp	r2, r3
 800836c:	d116      	bne.n	800839c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	2200      	movs	r2, #0
 8008372:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	2220      	movs	r2, #32
 8008378:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	2200      	movs	r2, #0
 8008380:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008388:	f043 0220 	orr.w	r2, r3, #32
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	2200      	movs	r2, #0
 8008394:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008398:	2301      	movs	r3, #1
 800839a:	e023      	b.n	80083e4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	0c1b      	lsrs	r3, r3, #16
 80083a0:	b2db      	uxtb	r3, r3
 80083a2:	2b01      	cmp	r3, #1
 80083a4:	d10d      	bne.n	80083c2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	695b      	ldr	r3, [r3, #20]
 80083ac:	43da      	mvns	r2, r3
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	4013      	ands	r3, r2
 80083b2:	b29b      	uxth	r3, r3
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	bf0c      	ite	eq
 80083b8:	2301      	moveq	r3, #1
 80083ba:	2300      	movne	r3, #0
 80083bc:	b2db      	uxtb	r3, r3
 80083be:	461a      	mov	r2, r3
 80083c0:	e00c      	b.n	80083dc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	699b      	ldr	r3, [r3, #24]
 80083c8:	43da      	mvns	r2, r3
 80083ca:	68bb      	ldr	r3, [r7, #8]
 80083cc:	4013      	ands	r3, r2
 80083ce:	b29b      	uxth	r3, r3
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	bf0c      	ite	eq
 80083d4:	2301      	moveq	r3, #1
 80083d6:	2300      	movne	r3, #0
 80083d8:	b2db      	uxtb	r3, r3
 80083da:	461a      	mov	r2, r3
 80083dc:	79fb      	ldrb	r3, [r7, #7]
 80083de:	429a      	cmp	r2, r3
 80083e0:	d093      	beq.n	800830a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80083e2:	2300      	movs	r3, #0
}
 80083e4:	4618      	mov	r0, r3
 80083e6:	3710      	adds	r7, #16
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bd80      	pop	{r7, pc}

080083ec <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b084      	sub	sp, #16
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	60f8      	str	r0, [r7, #12]
 80083f4:	60b9      	str	r1, [r7, #8]
 80083f6:	607a      	str	r2, [r7, #4]
 80083f8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80083fa:	e071      	b.n	80084e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	695b      	ldr	r3, [r3, #20]
 8008402:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008406:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800840a:	d123      	bne.n	8008454 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	681a      	ldr	r2, [r3, #0]
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800841a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008424:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	2200      	movs	r2, #0
 800842a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	2220      	movs	r2, #32
 8008430:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	2200      	movs	r2, #0
 8008438:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008440:	f043 0204 	orr.w	r2, r3, #4
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	2200      	movs	r2, #0
 800844c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8008450:	2301      	movs	r3, #1
 8008452:	e067      	b.n	8008524 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800845a:	d041      	beq.n	80084e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800845c:	f7fb fa04 	bl	8003868 <HAL_GetTick>
 8008460:	4602      	mov	r2, r0
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	1ad3      	subs	r3, r2, r3
 8008466:	687a      	ldr	r2, [r7, #4]
 8008468:	429a      	cmp	r2, r3
 800846a:	d302      	bcc.n	8008472 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d136      	bne.n	80084e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8008472:	68bb      	ldr	r3, [r7, #8]
 8008474:	0c1b      	lsrs	r3, r3, #16
 8008476:	b2db      	uxtb	r3, r3
 8008478:	2b01      	cmp	r3, #1
 800847a:	d10c      	bne.n	8008496 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	695b      	ldr	r3, [r3, #20]
 8008482:	43da      	mvns	r2, r3
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	4013      	ands	r3, r2
 8008488:	b29b      	uxth	r3, r3
 800848a:	2b00      	cmp	r3, #0
 800848c:	bf14      	ite	ne
 800848e:	2301      	movne	r3, #1
 8008490:	2300      	moveq	r3, #0
 8008492:	b2db      	uxtb	r3, r3
 8008494:	e00b      	b.n	80084ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	699b      	ldr	r3, [r3, #24]
 800849c:	43da      	mvns	r2, r3
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	4013      	ands	r3, r2
 80084a2:	b29b      	uxth	r3, r3
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	bf14      	ite	ne
 80084a8:	2301      	movne	r3, #1
 80084aa:	2300      	moveq	r3, #0
 80084ac:	b2db      	uxtb	r3, r3
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d016      	beq.n	80084e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	2200      	movs	r2, #0
 80084b6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	2220      	movs	r2, #32
 80084bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	2200      	movs	r2, #0
 80084c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084cc:	f043 0220 	orr.w	r2, r3, #32
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	2200      	movs	r2, #0
 80084d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80084dc:	2301      	movs	r3, #1
 80084de:	e021      	b.n	8008524 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	0c1b      	lsrs	r3, r3, #16
 80084e4:	b2db      	uxtb	r3, r3
 80084e6:	2b01      	cmp	r3, #1
 80084e8:	d10c      	bne.n	8008504 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	695b      	ldr	r3, [r3, #20]
 80084f0:	43da      	mvns	r2, r3
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	4013      	ands	r3, r2
 80084f6:	b29b      	uxth	r3, r3
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	bf14      	ite	ne
 80084fc:	2301      	movne	r3, #1
 80084fe:	2300      	moveq	r3, #0
 8008500:	b2db      	uxtb	r3, r3
 8008502:	e00b      	b.n	800851c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	699b      	ldr	r3, [r3, #24]
 800850a:	43da      	mvns	r2, r3
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	4013      	ands	r3, r2
 8008510:	b29b      	uxth	r3, r3
 8008512:	2b00      	cmp	r3, #0
 8008514:	bf14      	ite	ne
 8008516:	2301      	movne	r3, #1
 8008518:	2300      	moveq	r3, #0
 800851a:	b2db      	uxtb	r3, r3
 800851c:	2b00      	cmp	r3, #0
 800851e:	f47f af6d 	bne.w	80083fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8008522:	2300      	movs	r3, #0
}
 8008524:	4618      	mov	r0, r3
 8008526:	3710      	adds	r7, #16
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}

0800852c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b084      	sub	sp, #16
 8008530:	af00      	add	r7, sp, #0
 8008532:	60f8      	str	r0, [r7, #12]
 8008534:	60b9      	str	r1, [r7, #8]
 8008536:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008538:	e034      	b.n	80085a4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800853a:	68f8      	ldr	r0, [r7, #12]
 800853c:	f000 f915 	bl	800876a <I2C_IsAcknowledgeFailed>
 8008540:	4603      	mov	r3, r0
 8008542:	2b00      	cmp	r3, #0
 8008544:	d001      	beq.n	800854a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008546:	2301      	movs	r3, #1
 8008548:	e034      	b.n	80085b4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008550:	d028      	beq.n	80085a4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008552:	f7fb f989 	bl	8003868 <HAL_GetTick>
 8008556:	4602      	mov	r2, r0
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	1ad3      	subs	r3, r2, r3
 800855c:	68ba      	ldr	r2, [r7, #8]
 800855e:	429a      	cmp	r2, r3
 8008560:	d302      	bcc.n	8008568 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008562:	68bb      	ldr	r3, [r7, #8]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d11d      	bne.n	80085a4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	695b      	ldr	r3, [r3, #20]
 800856e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008572:	2b80      	cmp	r3, #128	@ 0x80
 8008574:	d016      	beq.n	80085a4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	2200      	movs	r2, #0
 800857a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	2220      	movs	r2, #32
 8008580:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	2200      	movs	r2, #0
 8008588:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008590:	f043 0220 	orr.w	r2, r3, #32
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	2200      	movs	r2, #0
 800859c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80085a0:	2301      	movs	r3, #1
 80085a2:	e007      	b.n	80085b4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	695b      	ldr	r3, [r3, #20]
 80085aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80085ae:	2b80      	cmp	r3, #128	@ 0x80
 80085b0:	d1c3      	bne.n	800853a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80085b2:	2300      	movs	r3, #0
}
 80085b4:	4618      	mov	r0, r3
 80085b6:	3710      	adds	r7, #16
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bd80      	pop	{r7, pc}

080085bc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b084      	sub	sp, #16
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	60f8      	str	r0, [r7, #12]
 80085c4:	60b9      	str	r1, [r7, #8]
 80085c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80085c8:	e034      	b.n	8008634 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80085ca:	68f8      	ldr	r0, [r7, #12]
 80085cc:	f000 f8cd 	bl	800876a <I2C_IsAcknowledgeFailed>
 80085d0:	4603      	mov	r3, r0
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d001      	beq.n	80085da <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80085d6:	2301      	movs	r3, #1
 80085d8:	e034      	b.n	8008644 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085e0:	d028      	beq.n	8008634 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80085e2:	f7fb f941 	bl	8003868 <HAL_GetTick>
 80085e6:	4602      	mov	r2, r0
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	1ad3      	subs	r3, r2, r3
 80085ec:	68ba      	ldr	r2, [r7, #8]
 80085ee:	429a      	cmp	r2, r3
 80085f0:	d302      	bcc.n	80085f8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80085f2:	68bb      	ldr	r3, [r7, #8]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d11d      	bne.n	8008634 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	695b      	ldr	r3, [r3, #20]
 80085fe:	f003 0304 	and.w	r3, r3, #4
 8008602:	2b04      	cmp	r3, #4
 8008604:	d016      	beq.n	8008634 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	2200      	movs	r2, #0
 800860a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	2220      	movs	r2, #32
 8008610:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	2200      	movs	r2, #0
 8008618:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008620:	f043 0220 	orr.w	r2, r3, #32
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	2200      	movs	r2, #0
 800862c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008630:	2301      	movs	r3, #1
 8008632:	e007      	b.n	8008644 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	695b      	ldr	r3, [r3, #20]
 800863a:	f003 0304 	and.w	r3, r3, #4
 800863e:	2b04      	cmp	r3, #4
 8008640:	d1c3      	bne.n	80085ca <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008642:	2300      	movs	r3, #0
}
 8008644:	4618      	mov	r0, r3
 8008646:	3710      	adds	r7, #16
 8008648:	46bd      	mov	sp, r7
 800864a:	bd80      	pop	{r7, pc}

0800864c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800864c:	b480      	push	{r7}
 800864e:	b085      	sub	sp, #20
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008654:	2300      	movs	r3, #0
 8008656:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8008658:	4b13      	ldr	r3, [pc, #76]	@ (80086a8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	08db      	lsrs	r3, r3, #3
 800865e:	4a13      	ldr	r2, [pc, #76]	@ (80086ac <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8008660:	fba2 2303 	umull	r2, r3, r2, r3
 8008664:	0a1a      	lsrs	r2, r3, #8
 8008666:	4613      	mov	r3, r2
 8008668:	009b      	lsls	r3, r3, #2
 800866a:	4413      	add	r3, r2
 800866c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	3b01      	subs	r3, #1
 8008672:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d107      	bne.n	800868a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800867e:	f043 0220 	orr.w	r2, r3, #32
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8008686:	2301      	movs	r3, #1
 8008688:	e008      	b.n	800869c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008694:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008698:	d0e9      	beq.n	800866e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800869a:	2300      	movs	r3, #0
}
 800869c:	4618      	mov	r0, r3
 800869e:	3714      	adds	r7, #20
 80086a0:	46bd      	mov	sp, r7
 80086a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a6:	4770      	bx	lr
 80086a8:	2000000c 	.word	0x2000000c
 80086ac:	14f8b589 	.word	0x14f8b589

080086b0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b084      	sub	sp, #16
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	60f8      	str	r0, [r7, #12]
 80086b8:	60b9      	str	r1, [r7, #8]
 80086ba:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80086bc:	e049      	b.n	8008752 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	695b      	ldr	r3, [r3, #20]
 80086c4:	f003 0310 	and.w	r3, r3, #16
 80086c8:	2b10      	cmp	r3, #16
 80086ca:	d119      	bne.n	8008700 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f06f 0210 	mvn.w	r2, #16
 80086d4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	2200      	movs	r2, #0
 80086da:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	2220      	movs	r2, #32
 80086e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	2200      	movs	r2, #0
 80086e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	2200      	movs	r2, #0
 80086f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80086fc:	2301      	movs	r3, #1
 80086fe:	e030      	b.n	8008762 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008700:	f7fb f8b2 	bl	8003868 <HAL_GetTick>
 8008704:	4602      	mov	r2, r0
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	1ad3      	subs	r3, r2, r3
 800870a:	68ba      	ldr	r2, [r7, #8]
 800870c:	429a      	cmp	r2, r3
 800870e:	d302      	bcc.n	8008716 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d11d      	bne.n	8008752 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	695b      	ldr	r3, [r3, #20]
 800871c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008720:	2b40      	cmp	r3, #64	@ 0x40
 8008722:	d016      	beq.n	8008752 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	2200      	movs	r2, #0
 8008728:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	2220      	movs	r2, #32
 800872e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	2200      	movs	r2, #0
 8008736:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800873e:	f043 0220 	orr.w	r2, r3, #32
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	2200      	movs	r2, #0
 800874a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800874e:	2301      	movs	r3, #1
 8008750:	e007      	b.n	8008762 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	695b      	ldr	r3, [r3, #20]
 8008758:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800875c:	2b40      	cmp	r3, #64	@ 0x40
 800875e:	d1ae      	bne.n	80086be <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008760:	2300      	movs	r3, #0
}
 8008762:	4618      	mov	r0, r3
 8008764:	3710      	adds	r7, #16
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}

0800876a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800876a:	b480      	push	{r7}
 800876c:	b083      	sub	sp, #12
 800876e:	af00      	add	r7, sp, #0
 8008770:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	695b      	ldr	r3, [r3, #20]
 8008778:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800877c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008780:	d11b      	bne.n	80087ba <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800878a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2200      	movs	r2, #0
 8008790:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2220      	movs	r2, #32
 8008796:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	2200      	movs	r2, #0
 800879e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087a6:	f043 0204 	orr.w	r2, r3, #4
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2200      	movs	r2, #0
 80087b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80087b6:	2301      	movs	r3, #1
 80087b8:	e000      	b.n	80087bc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80087ba:	2300      	movs	r3, #0
}
 80087bc:	4618      	mov	r0, r3
 80087be:	370c      	adds	r7, #12
 80087c0:	46bd      	mov	sp, r7
 80087c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c6:	4770      	bx	lr

080087c8 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80087c8:	b480      	push	{r7}
 80087ca:	b083      	sub	sp, #12
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087d4:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80087d8:	d103      	bne.n	80087e2 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2201      	movs	r2, #1
 80087de:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80087e0:	e007      	b.n	80087f2 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087e6:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80087ea:	d102      	bne.n	80087f2 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2208      	movs	r2, #8
 80087f0:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80087f2:	bf00      	nop
 80087f4:	370c      	adds	r7, #12
 80087f6:	46bd      	mov	sp, r7
 80087f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fc:	4770      	bx	lr

080087fe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80087fe:	b580      	push	{r7, lr}
 8008800:	b086      	sub	sp, #24
 8008802:	af02      	add	r7, sp, #8
 8008804:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d101      	bne.n	8008810 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800880c:	2301      	movs	r3, #1
 800880e:	e101      	b.n	8008a14 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800881c:	b2db      	uxtb	r3, r3
 800881e:	2b00      	cmp	r3, #0
 8008820:	d106      	bne.n	8008830 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2200      	movs	r2, #0
 8008826:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f006 fbe8 	bl	800f000 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2203      	movs	r2, #3
 8008834:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800883e:	d102      	bne.n	8008846 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2200      	movs	r2, #0
 8008844:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	4618      	mov	r0, r3
 800884c:	f002 ff63 	bl	800b716 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	6818      	ldr	r0, [r3, #0]
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	7c1a      	ldrb	r2, [r3, #16]
 8008858:	f88d 2000 	strb.w	r2, [sp]
 800885c:	3304      	adds	r3, #4
 800885e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008860:	f002 fe42 	bl	800b4e8 <USB_CoreInit>
 8008864:	4603      	mov	r3, r0
 8008866:	2b00      	cmp	r3, #0
 8008868:	d005      	beq.n	8008876 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2202      	movs	r2, #2
 800886e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8008872:	2301      	movs	r3, #1
 8008874:	e0ce      	b.n	8008a14 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	2100      	movs	r1, #0
 800887c:	4618      	mov	r0, r3
 800887e:	f002 ff5b 	bl	800b738 <USB_SetCurrentMode>
 8008882:	4603      	mov	r3, r0
 8008884:	2b00      	cmp	r3, #0
 8008886:	d005      	beq.n	8008894 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2202      	movs	r2, #2
 800888c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8008890:	2301      	movs	r3, #1
 8008892:	e0bf      	b.n	8008a14 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008894:	2300      	movs	r3, #0
 8008896:	73fb      	strb	r3, [r7, #15]
 8008898:	e04a      	b.n	8008930 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800889a:	7bfa      	ldrb	r2, [r7, #15]
 800889c:	6879      	ldr	r1, [r7, #4]
 800889e:	4613      	mov	r3, r2
 80088a0:	00db      	lsls	r3, r3, #3
 80088a2:	4413      	add	r3, r2
 80088a4:	009b      	lsls	r3, r3, #2
 80088a6:	440b      	add	r3, r1
 80088a8:	3315      	adds	r3, #21
 80088aa:	2201      	movs	r2, #1
 80088ac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80088ae:	7bfa      	ldrb	r2, [r7, #15]
 80088b0:	6879      	ldr	r1, [r7, #4]
 80088b2:	4613      	mov	r3, r2
 80088b4:	00db      	lsls	r3, r3, #3
 80088b6:	4413      	add	r3, r2
 80088b8:	009b      	lsls	r3, r3, #2
 80088ba:	440b      	add	r3, r1
 80088bc:	3314      	adds	r3, #20
 80088be:	7bfa      	ldrb	r2, [r7, #15]
 80088c0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80088c2:	7bfa      	ldrb	r2, [r7, #15]
 80088c4:	7bfb      	ldrb	r3, [r7, #15]
 80088c6:	b298      	uxth	r0, r3
 80088c8:	6879      	ldr	r1, [r7, #4]
 80088ca:	4613      	mov	r3, r2
 80088cc:	00db      	lsls	r3, r3, #3
 80088ce:	4413      	add	r3, r2
 80088d0:	009b      	lsls	r3, r3, #2
 80088d2:	440b      	add	r3, r1
 80088d4:	332e      	adds	r3, #46	@ 0x2e
 80088d6:	4602      	mov	r2, r0
 80088d8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80088da:	7bfa      	ldrb	r2, [r7, #15]
 80088dc:	6879      	ldr	r1, [r7, #4]
 80088de:	4613      	mov	r3, r2
 80088e0:	00db      	lsls	r3, r3, #3
 80088e2:	4413      	add	r3, r2
 80088e4:	009b      	lsls	r3, r3, #2
 80088e6:	440b      	add	r3, r1
 80088e8:	3318      	adds	r3, #24
 80088ea:	2200      	movs	r2, #0
 80088ec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80088ee:	7bfa      	ldrb	r2, [r7, #15]
 80088f0:	6879      	ldr	r1, [r7, #4]
 80088f2:	4613      	mov	r3, r2
 80088f4:	00db      	lsls	r3, r3, #3
 80088f6:	4413      	add	r3, r2
 80088f8:	009b      	lsls	r3, r3, #2
 80088fa:	440b      	add	r3, r1
 80088fc:	331c      	adds	r3, #28
 80088fe:	2200      	movs	r2, #0
 8008900:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008902:	7bfa      	ldrb	r2, [r7, #15]
 8008904:	6879      	ldr	r1, [r7, #4]
 8008906:	4613      	mov	r3, r2
 8008908:	00db      	lsls	r3, r3, #3
 800890a:	4413      	add	r3, r2
 800890c:	009b      	lsls	r3, r3, #2
 800890e:	440b      	add	r3, r1
 8008910:	3320      	adds	r3, #32
 8008912:	2200      	movs	r2, #0
 8008914:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008916:	7bfa      	ldrb	r2, [r7, #15]
 8008918:	6879      	ldr	r1, [r7, #4]
 800891a:	4613      	mov	r3, r2
 800891c:	00db      	lsls	r3, r3, #3
 800891e:	4413      	add	r3, r2
 8008920:	009b      	lsls	r3, r3, #2
 8008922:	440b      	add	r3, r1
 8008924:	3324      	adds	r3, #36	@ 0x24
 8008926:	2200      	movs	r2, #0
 8008928:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800892a:	7bfb      	ldrb	r3, [r7, #15]
 800892c:	3301      	adds	r3, #1
 800892e:	73fb      	strb	r3, [r7, #15]
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	791b      	ldrb	r3, [r3, #4]
 8008934:	7bfa      	ldrb	r2, [r7, #15]
 8008936:	429a      	cmp	r2, r3
 8008938:	d3af      	bcc.n	800889a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800893a:	2300      	movs	r3, #0
 800893c:	73fb      	strb	r3, [r7, #15]
 800893e:	e044      	b.n	80089ca <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008940:	7bfa      	ldrb	r2, [r7, #15]
 8008942:	6879      	ldr	r1, [r7, #4]
 8008944:	4613      	mov	r3, r2
 8008946:	00db      	lsls	r3, r3, #3
 8008948:	4413      	add	r3, r2
 800894a:	009b      	lsls	r3, r3, #2
 800894c:	440b      	add	r3, r1
 800894e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8008952:	2200      	movs	r2, #0
 8008954:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008956:	7bfa      	ldrb	r2, [r7, #15]
 8008958:	6879      	ldr	r1, [r7, #4]
 800895a:	4613      	mov	r3, r2
 800895c:	00db      	lsls	r3, r3, #3
 800895e:	4413      	add	r3, r2
 8008960:	009b      	lsls	r3, r3, #2
 8008962:	440b      	add	r3, r1
 8008964:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8008968:	7bfa      	ldrb	r2, [r7, #15]
 800896a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800896c:	7bfa      	ldrb	r2, [r7, #15]
 800896e:	6879      	ldr	r1, [r7, #4]
 8008970:	4613      	mov	r3, r2
 8008972:	00db      	lsls	r3, r3, #3
 8008974:	4413      	add	r3, r2
 8008976:	009b      	lsls	r3, r3, #2
 8008978:	440b      	add	r3, r1
 800897a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800897e:	2200      	movs	r2, #0
 8008980:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008982:	7bfa      	ldrb	r2, [r7, #15]
 8008984:	6879      	ldr	r1, [r7, #4]
 8008986:	4613      	mov	r3, r2
 8008988:	00db      	lsls	r3, r3, #3
 800898a:	4413      	add	r3, r2
 800898c:	009b      	lsls	r3, r3, #2
 800898e:	440b      	add	r3, r1
 8008990:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8008994:	2200      	movs	r2, #0
 8008996:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008998:	7bfa      	ldrb	r2, [r7, #15]
 800899a:	6879      	ldr	r1, [r7, #4]
 800899c:	4613      	mov	r3, r2
 800899e:	00db      	lsls	r3, r3, #3
 80089a0:	4413      	add	r3, r2
 80089a2:	009b      	lsls	r3, r3, #2
 80089a4:	440b      	add	r3, r1
 80089a6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80089aa:	2200      	movs	r2, #0
 80089ac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80089ae:	7bfa      	ldrb	r2, [r7, #15]
 80089b0:	6879      	ldr	r1, [r7, #4]
 80089b2:	4613      	mov	r3, r2
 80089b4:	00db      	lsls	r3, r3, #3
 80089b6:	4413      	add	r3, r2
 80089b8:	009b      	lsls	r3, r3, #2
 80089ba:	440b      	add	r3, r1
 80089bc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80089c0:	2200      	movs	r2, #0
 80089c2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80089c4:	7bfb      	ldrb	r3, [r7, #15]
 80089c6:	3301      	adds	r3, #1
 80089c8:	73fb      	strb	r3, [r7, #15]
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	791b      	ldrb	r3, [r3, #4]
 80089ce:	7bfa      	ldrb	r2, [r7, #15]
 80089d0:	429a      	cmp	r2, r3
 80089d2:	d3b5      	bcc.n	8008940 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	6818      	ldr	r0, [r3, #0]
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	7c1a      	ldrb	r2, [r3, #16]
 80089dc:	f88d 2000 	strb.w	r2, [sp]
 80089e0:	3304      	adds	r3, #4
 80089e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80089e4:	f002 fef4 	bl	800b7d0 <USB_DevInit>
 80089e8:	4603      	mov	r3, r0
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d005      	beq.n	80089fa <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2202      	movs	r2, #2
 80089f2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80089f6:	2301      	movs	r3, #1
 80089f8:	e00c      	b.n	8008a14 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2200      	movs	r2, #0
 80089fe:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2201      	movs	r2, #1
 8008a04:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	f003 ff3e 	bl	800c88e <USB_DevDisconnect>

  return HAL_OK;
 8008a12:	2300      	movs	r3, #0
}
 8008a14:	4618      	mov	r0, r3
 8008a16:	3710      	adds	r7, #16
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	bd80      	pop	{r7, pc}

08008a1c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b084      	sub	sp, #16
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008a30:	2b01      	cmp	r3, #1
 8008a32:	d101      	bne.n	8008a38 <HAL_PCD_Start+0x1c>
 8008a34:	2302      	movs	r3, #2
 8008a36:	e022      	b.n	8008a7e <HAL_PCD_Start+0x62>
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2201      	movs	r2, #1
 8008a3c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	68db      	ldr	r3, [r3, #12]
 8008a44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d009      	beq.n	8008a60 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8008a50:	2b01      	cmp	r3, #1
 8008a52:	d105      	bne.n	8008a60 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a58:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	4618      	mov	r0, r3
 8008a66:	f002 fe45 	bl	800b6f4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	4618      	mov	r0, r3
 8008a70:	f003 feec 	bl	800c84c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2200      	movs	r2, #0
 8008a78:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8008a7c:	2300      	movs	r3, #0
}
 8008a7e:	4618      	mov	r0, r3
 8008a80:	3710      	adds	r7, #16
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bd80      	pop	{r7, pc}

08008a86 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8008a86:	b590      	push	{r4, r7, lr}
 8008a88:	b08d      	sub	sp, #52	@ 0x34
 8008a8a:	af00      	add	r7, sp, #0
 8008a8c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a94:	6a3b      	ldr	r3, [r7, #32]
 8008a96:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	f003 ffaa 	bl	800c9f6 <USB_GetMode>
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	f040 848c 	bne.w	80093c2 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	4618      	mov	r0, r3
 8008ab0:	f003 ff0e 	bl	800c8d0 <USB_ReadInterrupts>
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	f000 8482 	beq.w	80093c0 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8008abc:	69fb      	ldr	r3, [r7, #28]
 8008abe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ac2:	689b      	ldr	r3, [r3, #8]
 8008ac4:	0a1b      	lsrs	r3, r3, #8
 8008ac6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	f003 fefb 	bl	800c8d0 <USB_ReadInterrupts>
 8008ada:	4603      	mov	r3, r0
 8008adc:	f003 0302 	and.w	r3, r3, #2
 8008ae0:	2b02      	cmp	r3, #2
 8008ae2:	d107      	bne.n	8008af4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	695a      	ldr	r2, [r3, #20]
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	f002 0202 	and.w	r2, r2, #2
 8008af2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	4618      	mov	r0, r3
 8008afa:	f003 fee9 	bl	800c8d0 <USB_ReadInterrupts>
 8008afe:	4603      	mov	r3, r0
 8008b00:	f003 0310 	and.w	r3, r3, #16
 8008b04:	2b10      	cmp	r3, #16
 8008b06:	d161      	bne.n	8008bcc <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	699a      	ldr	r2, [r3, #24]
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	f022 0210 	bic.w	r2, r2, #16
 8008b16:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8008b18:	6a3b      	ldr	r3, [r7, #32]
 8008b1a:	6a1b      	ldr	r3, [r3, #32]
 8008b1c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8008b1e:	69bb      	ldr	r3, [r7, #24]
 8008b20:	f003 020f 	and.w	r2, r3, #15
 8008b24:	4613      	mov	r3, r2
 8008b26:	00db      	lsls	r3, r3, #3
 8008b28:	4413      	add	r3, r2
 8008b2a:	009b      	lsls	r3, r3, #2
 8008b2c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008b30:	687a      	ldr	r2, [r7, #4]
 8008b32:	4413      	add	r3, r2
 8008b34:	3304      	adds	r3, #4
 8008b36:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8008b38:	69bb      	ldr	r3, [r7, #24]
 8008b3a:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8008b3e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008b42:	d124      	bne.n	8008b8e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8008b44:	69ba      	ldr	r2, [r7, #24]
 8008b46:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8008b4a:	4013      	ands	r3, r2
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d035      	beq.n	8008bbc <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008b50:	697b      	ldr	r3, [r7, #20]
 8008b52:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8008b54:	69bb      	ldr	r3, [r7, #24]
 8008b56:	091b      	lsrs	r3, r3, #4
 8008b58:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008b5a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008b5e:	b29b      	uxth	r3, r3
 8008b60:	461a      	mov	r2, r3
 8008b62:	6a38      	ldr	r0, [r7, #32]
 8008b64:	f003 fd20 	bl	800c5a8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008b68:	697b      	ldr	r3, [r7, #20]
 8008b6a:	68da      	ldr	r2, [r3, #12]
 8008b6c:	69bb      	ldr	r3, [r7, #24]
 8008b6e:	091b      	lsrs	r3, r3, #4
 8008b70:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008b74:	441a      	add	r2, r3
 8008b76:	697b      	ldr	r3, [r7, #20]
 8008b78:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008b7a:	697b      	ldr	r3, [r7, #20]
 8008b7c:	695a      	ldr	r2, [r3, #20]
 8008b7e:	69bb      	ldr	r3, [r7, #24]
 8008b80:	091b      	lsrs	r3, r3, #4
 8008b82:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008b86:	441a      	add	r2, r3
 8008b88:	697b      	ldr	r3, [r7, #20]
 8008b8a:	615a      	str	r2, [r3, #20]
 8008b8c:	e016      	b.n	8008bbc <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8008b8e:	69bb      	ldr	r3, [r7, #24]
 8008b90:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8008b94:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8008b98:	d110      	bne.n	8008bbc <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008ba0:	2208      	movs	r2, #8
 8008ba2:	4619      	mov	r1, r3
 8008ba4:	6a38      	ldr	r0, [r7, #32]
 8008ba6:	f003 fcff 	bl	800c5a8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008baa:	697b      	ldr	r3, [r7, #20]
 8008bac:	695a      	ldr	r2, [r3, #20]
 8008bae:	69bb      	ldr	r3, [r7, #24]
 8008bb0:	091b      	lsrs	r3, r3, #4
 8008bb2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008bb6:	441a      	add	r2, r3
 8008bb8:	697b      	ldr	r3, [r7, #20]
 8008bba:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	699a      	ldr	r2, [r3, #24]
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f042 0210 	orr.w	r2, r2, #16
 8008bca:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	f003 fe7d 	bl	800c8d0 <USB_ReadInterrupts>
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008bdc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8008be0:	f040 80a7 	bne.w	8008d32 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8008be4:	2300      	movs	r3, #0
 8008be6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	4618      	mov	r0, r3
 8008bee:	f003 fe82 	bl	800c8f6 <USB_ReadDevAllOutEpInterrupt>
 8008bf2:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8008bf4:	e099      	b.n	8008d2a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8008bf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bf8:	f003 0301 	and.w	r3, r3, #1
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	f000 808e 	beq.w	8008d1e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008c08:	b2d2      	uxtb	r2, r2
 8008c0a:	4611      	mov	r1, r2
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	f003 fea6 	bl	800c95e <USB_ReadDevOutEPInterrupt>
 8008c12:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8008c14:	693b      	ldr	r3, [r7, #16]
 8008c16:	f003 0301 	and.w	r3, r3, #1
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d00c      	beq.n	8008c38 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8008c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c20:	015a      	lsls	r2, r3, #5
 8008c22:	69fb      	ldr	r3, [r7, #28]
 8008c24:	4413      	add	r3, r2
 8008c26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c2a:	461a      	mov	r2, r3
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8008c30:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	f000 fea4 	bl	8009980 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8008c38:	693b      	ldr	r3, [r7, #16]
 8008c3a:	f003 0308 	and.w	r3, r3, #8
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d00c      	beq.n	8008c5c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8008c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c44:	015a      	lsls	r2, r3, #5
 8008c46:	69fb      	ldr	r3, [r7, #28]
 8008c48:	4413      	add	r3, r2
 8008c4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c4e:	461a      	mov	r2, r3
 8008c50:	2308      	movs	r3, #8
 8008c52:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8008c54:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008c56:	6878      	ldr	r0, [r7, #4]
 8008c58:	f000 ff7a 	bl	8009b50 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8008c5c:	693b      	ldr	r3, [r7, #16]
 8008c5e:	f003 0310 	and.w	r3, r3, #16
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d008      	beq.n	8008c78 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8008c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c68:	015a      	lsls	r2, r3, #5
 8008c6a:	69fb      	ldr	r3, [r7, #28]
 8008c6c:	4413      	add	r3, r2
 8008c6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c72:	461a      	mov	r2, r3
 8008c74:	2310      	movs	r3, #16
 8008c76:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8008c78:	693b      	ldr	r3, [r7, #16]
 8008c7a:	f003 0302 	and.w	r3, r3, #2
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d030      	beq.n	8008ce4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8008c82:	6a3b      	ldr	r3, [r7, #32]
 8008c84:	695b      	ldr	r3, [r3, #20]
 8008c86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c8a:	2b80      	cmp	r3, #128	@ 0x80
 8008c8c:	d109      	bne.n	8008ca2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8008c8e:	69fb      	ldr	r3, [r7, #28]
 8008c90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c94:	685b      	ldr	r3, [r3, #4]
 8008c96:	69fa      	ldr	r2, [r7, #28]
 8008c98:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008c9c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008ca0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8008ca2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008ca4:	4613      	mov	r3, r2
 8008ca6:	00db      	lsls	r3, r3, #3
 8008ca8:	4413      	add	r3, r2
 8008caa:	009b      	lsls	r3, r3, #2
 8008cac:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008cb0:	687a      	ldr	r2, [r7, #4]
 8008cb2:	4413      	add	r3, r2
 8008cb4:	3304      	adds	r3, #4
 8008cb6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8008cb8:	697b      	ldr	r3, [r7, #20]
 8008cba:	78db      	ldrb	r3, [r3, #3]
 8008cbc:	2b01      	cmp	r3, #1
 8008cbe:	d108      	bne.n	8008cd2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8008cc0:	697b      	ldr	r3, [r7, #20]
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8008cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cc8:	b2db      	uxtb	r3, r3
 8008cca:	4619      	mov	r1, r3
 8008ccc:	6878      	ldr	r0, [r7, #4]
 8008cce:	f006 fa93 	bl	800f1f8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8008cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cd4:	015a      	lsls	r2, r3, #5
 8008cd6:	69fb      	ldr	r3, [r7, #28]
 8008cd8:	4413      	add	r3, r2
 8008cda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008cde:	461a      	mov	r2, r3
 8008ce0:	2302      	movs	r3, #2
 8008ce2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008ce4:	693b      	ldr	r3, [r7, #16]
 8008ce6:	f003 0320 	and.w	r3, r3, #32
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d008      	beq.n	8008d00 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cf0:	015a      	lsls	r2, r3, #5
 8008cf2:	69fb      	ldr	r3, [r7, #28]
 8008cf4:	4413      	add	r3, r2
 8008cf6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008cfa:	461a      	mov	r2, r3
 8008cfc:	2320      	movs	r3, #32
 8008cfe:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8008d00:	693b      	ldr	r3, [r7, #16]
 8008d02:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d009      	beq.n	8008d1e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8008d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d0c:	015a      	lsls	r2, r3, #5
 8008d0e:	69fb      	ldr	r3, [r7, #28]
 8008d10:	4413      	add	r3, r2
 8008d12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d16:	461a      	mov	r2, r3
 8008d18:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008d1c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8008d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d20:	3301      	adds	r3, #1
 8008d22:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8008d24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d26:	085b      	lsrs	r3, r3, #1
 8008d28:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8008d2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	f47f af62 	bne.w	8008bf6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	4618      	mov	r0, r3
 8008d38:	f003 fdca 	bl	800c8d0 <USB_ReadInterrupts>
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008d42:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008d46:	f040 80db 	bne.w	8008f00 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	4618      	mov	r0, r3
 8008d50:	f003 fdeb 	bl	800c92a <USB_ReadDevAllInEpInterrupt>
 8008d54:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8008d56:	2300      	movs	r3, #0
 8008d58:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8008d5a:	e0cd      	b.n	8008ef8 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8008d5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d5e:	f003 0301 	and.w	r3, r3, #1
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	f000 80c2 	beq.w	8008eec <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008d6e:	b2d2      	uxtb	r2, r2
 8008d70:	4611      	mov	r1, r2
 8008d72:	4618      	mov	r0, r3
 8008d74:	f003 fe11 	bl	800c99a <USB_ReadDevInEPInterrupt>
 8008d78:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8008d7a:	693b      	ldr	r3, [r7, #16]
 8008d7c:	f003 0301 	and.w	r3, r3, #1
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d057      	beq.n	8008e34 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d86:	f003 030f 	and.w	r3, r3, #15
 8008d8a:	2201      	movs	r2, #1
 8008d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8008d90:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008d92:	69fb      	ldr	r3, [r7, #28]
 8008d94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008d98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	43db      	mvns	r3, r3
 8008d9e:	69f9      	ldr	r1, [r7, #28]
 8008da0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008da4:	4013      	ands	r3, r2
 8008da6:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8008da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008daa:	015a      	lsls	r2, r3, #5
 8008dac:	69fb      	ldr	r3, [r7, #28]
 8008dae:	4413      	add	r3, r2
 8008db0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008db4:	461a      	mov	r2, r3
 8008db6:	2301      	movs	r3, #1
 8008db8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	799b      	ldrb	r3, [r3, #6]
 8008dbe:	2b01      	cmp	r3, #1
 8008dc0:	d132      	bne.n	8008e28 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8008dc2:	6879      	ldr	r1, [r7, #4]
 8008dc4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008dc6:	4613      	mov	r3, r2
 8008dc8:	00db      	lsls	r3, r3, #3
 8008dca:	4413      	add	r3, r2
 8008dcc:	009b      	lsls	r3, r3, #2
 8008dce:	440b      	add	r3, r1
 8008dd0:	3320      	adds	r3, #32
 8008dd2:	6819      	ldr	r1, [r3, #0]
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008dd8:	4613      	mov	r3, r2
 8008dda:	00db      	lsls	r3, r3, #3
 8008ddc:	4413      	add	r3, r2
 8008dde:	009b      	lsls	r3, r3, #2
 8008de0:	4403      	add	r3, r0
 8008de2:	331c      	adds	r3, #28
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	4419      	add	r1, r3
 8008de8:	6878      	ldr	r0, [r7, #4]
 8008dea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008dec:	4613      	mov	r3, r2
 8008dee:	00db      	lsls	r3, r3, #3
 8008df0:	4413      	add	r3, r2
 8008df2:	009b      	lsls	r3, r3, #2
 8008df4:	4403      	add	r3, r0
 8008df6:	3320      	adds	r3, #32
 8008df8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8008dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d113      	bne.n	8008e28 <HAL_PCD_IRQHandler+0x3a2>
 8008e00:	6879      	ldr	r1, [r7, #4]
 8008e02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e04:	4613      	mov	r3, r2
 8008e06:	00db      	lsls	r3, r3, #3
 8008e08:	4413      	add	r3, r2
 8008e0a:	009b      	lsls	r3, r3, #2
 8008e0c:	440b      	add	r3, r1
 8008e0e:	3324      	adds	r3, #36	@ 0x24
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d108      	bne.n	8008e28 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6818      	ldr	r0, [r3, #0]
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008e20:	461a      	mov	r2, r3
 8008e22:	2101      	movs	r1, #1
 8008e24:	f003 fe18 	bl	800ca58 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8008e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e2a:	b2db      	uxtb	r3, r3
 8008e2c:	4619      	mov	r1, r3
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f006 f967 	bl	800f102 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8008e34:	693b      	ldr	r3, [r7, #16]
 8008e36:	f003 0308 	and.w	r3, r3, #8
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d008      	beq.n	8008e50 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8008e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e40:	015a      	lsls	r2, r3, #5
 8008e42:	69fb      	ldr	r3, [r7, #28]
 8008e44:	4413      	add	r3, r2
 8008e46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e4a:	461a      	mov	r2, r3
 8008e4c:	2308      	movs	r3, #8
 8008e4e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8008e50:	693b      	ldr	r3, [r7, #16]
 8008e52:	f003 0310 	and.w	r3, r3, #16
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d008      	beq.n	8008e6c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8008e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e5c:	015a      	lsls	r2, r3, #5
 8008e5e:	69fb      	ldr	r3, [r7, #28]
 8008e60:	4413      	add	r3, r2
 8008e62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e66:	461a      	mov	r2, r3
 8008e68:	2310      	movs	r3, #16
 8008e6a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8008e6c:	693b      	ldr	r3, [r7, #16]
 8008e6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d008      	beq.n	8008e88 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8008e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e78:	015a      	lsls	r2, r3, #5
 8008e7a:	69fb      	ldr	r3, [r7, #28]
 8008e7c:	4413      	add	r3, r2
 8008e7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e82:	461a      	mov	r2, r3
 8008e84:	2340      	movs	r3, #64	@ 0x40
 8008e86:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8008e88:	693b      	ldr	r3, [r7, #16]
 8008e8a:	f003 0302 	and.w	r3, r3, #2
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d023      	beq.n	8008eda <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8008e92:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008e94:	6a38      	ldr	r0, [r7, #32]
 8008e96:	f002 fdff 	bl	800ba98 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8008e9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e9c:	4613      	mov	r3, r2
 8008e9e:	00db      	lsls	r3, r3, #3
 8008ea0:	4413      	add	r3, r2
 8008ea2:	009b      	lsls	r3, r3, #2
 8008ea4:	3310      	adds	r3, #16
 8008ea6:	687a      	ldr	r2, [r7, #4]
 8008ea8:	4413      	add	r3, r2
 8008eaa:	3304      	adds	r3, #4
 8008eac:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8008eae:	697b      	ldr	r3, [r7, #20]
 8008eb0:	78db      	ldrb	r3, [r3, #3]
 8008eb2:	2b01      	cmp	r3, #1
 8008eb4:	d108      	bne.n	8008ec8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8008eb6:	697b      	ldr	r3, [r7, #20]
 8008eb8:	2200      	movs	r2, #0
 8008eba:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8008ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ebe:	b2db      	uxtb	r3, r3
 8008ec0:	4619      	mov	r1, r3
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f006 f9aa 	bl	800f21c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8008ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eca:	015a      	lsls	r2, r3, #5
 8008ecc:	69fb      	ldr	r3, [r7, #28]
 8008ece:	4413      	add	r3, r2
 8008ed0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ed4:	461a      	mov	r2, r3
 8008ed6:	2302      	movs	r3, #2
 8008ed8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8008eda:	693b      	ldr	r3, [r7, #16]
 8008edc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d003      	beq.n	8008eec <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8008ee4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008ee6:	6878      	ldr	r0, [r7, #4]
 8008ee8:	f000 fcbd 	bl	8009866 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8008eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eee:	3301      	adds	r3, #1
 8008ef0:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8008ef2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ef4:	085b      	lsrs	r3, r3, #1
 8008ef6:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8008ef8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	f47f af2e 	bne.w	8008d5c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	4618      	mov	r0, r3
 8008f06:	f003 fce3 	bl	800c8d0 <USB_ReadInterrupts>
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008f10:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008f14:	d122      	bne.n	8008f5c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008f16:	69fb      	ldr	r3, [r7, #28]
 8008f18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008f1c:	685b      	ldr	r3, [r3, #4]
 8008f1e:	69fa      	ldr	r2, [r7, #28]
 8008f20:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008f24:	f023 0301 	bic.w	r3, r3, #1
 8008f28:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8008f30:	2b01      	cmp	r3, #1
 8008f32:	d108      	bne.n	8008f46 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2200      	movs	r2, #0
 8008f38:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008f3c:	2100      	movs	r1, #0
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	f000 fea4 	bl	8009c8c <HAL_PCDEx_LPM_Callback>
 8008f44:	e002      	b.n	8008f4c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f006 f948 	bl	800f1dc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	695a      	ldr	r2, [r3, #20]
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8008f5a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	4618      	mov	r0, r3
 8008f62:	f003 fcb5 	bl	800c8d0 <USB_ReadInterrupts>
 8008f66:	4603      	mov	r3, r0
 8008f68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008f6c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008f70:	d112      	bne.n	8008f98 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8008f72:	69fb      	ldr	r3, [r7, #28]
 8008f74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008f78:	689b      	ldr	r3, [r3, #8]
 8008f7a:	f003 0301 	and.w	r3, r3, #1
 8008f7e:	2b01      	cmp	r3, #1
 8008f80:	d102      	bne.n	8008f88 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	f006 f904 	bl	800f190 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	695a      	ldr	r2, [r3, #20]
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8008f96:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	f003 fc97 	bl	800c8d0 <USB_ReadInterrupts>
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008fa8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008fac:	f040 80b7 	bne.w	800911e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008fb0:	69fb      	ldr	r3, [r7, #28]
 8008fb2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008fb6:	685b      	ldr	r3, [r3, #4]
 8008fb8:	69fa      	ldr	r2, [r7, #28]
 8008fba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008fbe:	f023 0301 	bic.w	r3, r3, #1
 8008fc2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	2110      	movs	r1, #16
 8008fca:	4618      	mov	r0, r3
 8008fcc:	f002 fd64 	bl	800ba98 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008fd4:	e046      	b.n	8009064 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8008fd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fd8:	015a      	lsls	r2, r3, #5
 8008fda:	69fb      	ldr	r3, [r7, #28]
 8008fdc:	4413      	add	r3, r2
 8008fde:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008fe2:	461a      	mov	r2, r3
 8008fe4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008fe8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008fea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fec:	015a      	lsls	r2, r3, #5
 8008fee:	69fb      	ldr	r3, [r7, #28]
 8008ff0:	4413      	add	r3, r2
 8008ff2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008ffa:	0151      	lsls	r1, r2, #5
 8008ffc:	69fa      	ldr	r2, [r7, #28]
 8008ffe:	440a      	add	r2, r1
 8009000:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009004:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009008:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800900a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800900c:	015a      	lsls	r2, r3, #5
 800900e:	69fb      	ldr	r3, [r7, #28]
 8009010:	4413      	add	r3, r2
 8009012:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009016:	461a      	mov	r2, r3
 8009018:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800901c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800901e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009020:	015a      	lsls	r2, r3, #5
 8009022:	69fb      	ldr	r3, [r7, #28]
 8009024:	4413      	add	r3, r2
 8009026:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800902e:	0151      	lsls	r1, r2, #5
 8009030:	69fa      	ldr	r2, [r7, #28]
 8009032:	440a      	add	r2, r1
 8009034:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009038:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800903c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800903e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009040:	015a      	lsls	r2, r3, #5
 8009042:	69fb      	ldr	r3, [r7, #28]
 8009044:	4413      	add	r3, r2
 8009046:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800904e:	0151      	lsls	r1, r2, #5
 8009050:	69fa      	ldr	r2, [r7, #28]
 8009052:	440a      	add	r2, r1
 8009054:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009058:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800905c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800905e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009060:	3301      	adds	r3, #1
 8009062:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	791b      	ldrb	r3, [r3, #4]
 8009068:	461a      	mov	r2, r3
 800906a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800906c:	4293      	cmp	r3, r2
 800906e:	d3b2      	bcc.n	8008fd6 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8009070:	69fb      	ldr	r3, [r7, #28]
 8009072:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009076:	69db      	ldr	r3, [r3, #28]
 8009078:	69fa      	ldr	r2, [r7, #28]
 800907a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800907e:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8009082:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	7bdb      	ldrb	r3, [r3, #15]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d016      	beq.n	80090ba <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800908c:	69fb      	ldr	r3, [r7, #28]
 800908e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009092:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009096:	69fa      	ldr	r2, [r7, #28]
 8009098:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800909c:	f043 030b 	orr.w	r3, r3, #11
 80090a0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80090a4:	69fb      	ldr	r3, [r7, #28]
 80090a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80090aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80090ac:	69fa      	ldr	r2, [r7, #28]
 80090ae:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80090b2:	f043 030b 	orr.w	r3, r3, #11
 80090b6:	6453      	str	r3, [r2, #68]	@ 0x44
 80090b8:	e015      	b.n	80090e6 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80090ba:	69fb      	ldr	r3, [r7, #28]
 80090bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80090c0:	695b      	ldr	r3, [r3, #20]
 80090c2:	69fa      	ldr	r2, [r7, #28]
 80090c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80090c8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80090cc:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80090d0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80090d2:	69fb      	ldr	r3, [r7, #28]
 80090d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80090d8:	691b      	ldr	r3, [r3, #16]
 80090da:	69fa      	ldr	r2, [r7, #28]
 80090dc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80090e0:	f043 030b 	orr.w	r3, r3, #11
 80090e4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80090e6:	69fb      	ldr	r3, [r7, #28]
 80090e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	69fa      	ldr	r2, [r7, #28]
 80090f0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80090f4:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80090f8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	6818      	ldr	r0, [r3, #0]
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009108:	461a      	mov	r2, r3
 800910a:	f003 fca5 	bl	800ca58 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	695a      	ldr	r2, [r3, #20]
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800911c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	4618      	mov	r0, r3
 8009124:	f003 fbd4 	bl	800c8d0 <USB_ReadInterrupts>
 8009128:	4603      	mov	r3, r0
 800912a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800912e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009132:	d123      	bne.n	800917c <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	4618      	mov	r0, r3
 800913a:	f003 fc6a 	bl	800ca12 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	4618      	mov	r0, r3
 8009144:	f002 fd21 	bl	800bb8a <USB_GetDevSpeed>
 8009148:	4603      	mov	r3, r0
 800914a:	461a      	mov	r2, r3
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681c      	ldr	r4, [r3, #0]
 8009154:	f001 f9d6 	bl	800a504 <HAL_RCC_GetHCLKFreq>
 8009158:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800915e:	461a      	mov	r2, r3
 8009160:	4620      	mov	r0, r4
 8009162:	f002 fa25 	bl	800b5b0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8009166:	6878      	ldr	r0, [r7, #4]
 8009168:	f005 fff3 	bl	800f152 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	695a      	ldr	r2, [r3, #20]
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800917a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	4618      	mov	r0, r3
 8009182:	f003 fba5 	bl	800c8d0 <USB_ReadInterrupts>
 8009186:	4603      	mov	r3, r0
 8009188:	f003 0308 	and.w	r3, r3, #8
 800918c:	2b08      	cmp	r3, #8
 800918e:	d10a      	bne.n	80091a6 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8009190:	6878      	ldr	r0, [r7, #4]
 8009192:	f005 ffd0 	bl	800f136 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	695a      	ldr	r2, [r3, #20]
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	f002 0208 	and.w	r2, r2, #8
 80091a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	4618      	mov	r0, r3
 80091ac:	f003 fb90 	bl	800c8d0 <USB_ReadInterrupts>
 80091b0:	4603      	mov	r3, r0
 80091b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80091b6:	2b80      	cmp	r3, #128	@ 0x80
 80091b8:	d123      	bne.n	8009202 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80091ba:	6a3b      	ldr	r3, [r7, #32]
 80091bc:	699b      	ldr	r3, [r3, #24]
 80091be:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80091c2:	6a3b      	ldr	r3, [r7, #32]
 80091c4:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80091c6:	2301      	movs	r3, #1
 80091c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80091ca:	e014      	b.n	80091f6 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80091cc:	6879      	ldr	r1, [r7, #4]
 80091ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80091d0:	4613      	mov	r3, r2
 80091d2:	00db      	lsls	r3, r3, #3
 80091d4:	4413      	add	r3, r2
 80091d6:	009b      	lsls	r3, r3, #2
 80091d8:	440b      	add	r3, r1
 80091da:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80091de:	781b      	ldrb	r3, [r3, #0]
 80091e0:	2b01      	cmp	r3, #1
 80091e2:	d105      	bne.n	80091f0 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80091e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091e6:	b2db      	uxtb	r3, r3
 80091e8:	4619      	mov	r1, r3
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f000 fb0a 	bl	8009804 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80091f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091f2:	3301      	adds	r3, #1
 80091f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	791b      	ldrb	r3, [r3, #4]
 80091fa:	461a      	mov	r2, r3
 80091fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091fe:	4293      	cmp	r3, r2
 8009200:	d3e4      	bcc.n	80091cc <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	4618      	mov	r0, r3
 8009208:	f003 fb62 	bl	800c8d0 <USB_ReadInterrupts>
 800920c:	4603      	mov	r3, r0
 800920e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009212:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009216:	d13c      	bne.n	8009292 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009218:	2301      	movs	r3, #1
 800921a:	627b      	str	r3, [r7, #36]	@ 0x24
 800921c:	e02b      	b.n	8009276 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800921e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009220:	015a      	lsls	r2, r3, #5
 8009222:	69fb      	ldr	r3, [r7, #28]
 8009224:	4413      	add	r3, r2
 8009226:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800922e:	6879      	ldr	r1, [r7, #4]
 8009230:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009232:	4613      	mov	r3, r2
 8009234:	00db      	lsls	r3, r3, #3
 8009236:	4413      	add	r3, r2
 8009238:	009b      	lsls	r3, r3, #2
 800923a:	440b      	add	r3, r1
 800923c:	3318      	adds	r3, #24
 800923e:	781b      	ldrb	r3, [r3, #0]
 8009240:	2b01      	cmp	r3, #1
 8009242:	d115      	bne.n	8009270 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8009244:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8009246:	2b00      	cmp	r3, #0
 8009248:	da12      	bge.n	8009270 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800924a:	6879      	ldr	r1, [r7, #4]
 800924c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800924e:	4613      	mov	r3, r2
 8009250:	00db      	lsls	r3, r3, #3
 8009252:	4413      	add	r3, r2
 8009254:	009b      	lsls	r3, r3, #2
 8009256:	440b      	add	r3, r1
 8009258:	3317      	adds	r3, #23
 800925a:	2201      	movs	r2, #1
 800925c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800925e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009260:	b2db      	uxtb	r3, r3
 8009262:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009266:	b2db      	uxtb	r3, r3
 8009268:	4619      	mov	r1, r3
 800926a:	6878      	ldr	r0, [r7, #4]
 800926c:	f000 faca 	bl	8009804 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009272:	3301      	adds	r3, #1
 8009274:	627b      	str	r3, [r7, #36]	@ 0x24
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	791b      	ldrb	r3, [r3, #4]
 800927a:	461a      	mov	r2, r3
 800927c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800927e:	4293      	cmp	r3, r2
 8009280:	d3cd      	bcc.n	800921e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	695a      	ldr	r2, [r3, #20]
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8009290:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	4618      	mov	r0, r3
 8009298:	f003 fb1a 	bl	800c8d0 <USB_ReadInterrupts>
 800929c:	4603      	mov	r3, r0
 800929e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80092a2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80092a6:	d156      	bne.n	8009356 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80092a8:	2301      	movs	r3, #1
 80092aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80092ac:	e045      	b.n	800933a <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80092ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092b0:	015a      	lsls	r2, r3, #5
 80092b2:	69fb      	ldr	r3, [r7, #28]
 80092b4:	4413      	add	r3, r2
 80092b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80092be:	6879      	ldr	r1, [r7, #4]
 80092c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80092c2:	4613      	mov	r3, r2
 80092c4:	00db      	lsls	r3, r3, #3
 80092c6:	4413      	add	r3, r2
 80092c8:	009b      	lsls	r3, r3, #2
 80092ca:	440b      	add	r3, r1
 80092cc:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80092d0:	781b      	ldrb	r3, [r3, #0]
 80092d2:	2b01      	cmp	r3, #1
 80092d4:	d12e      	bne.n	8009334 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80092d6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80092d8:	2b00      	cmp	r3, #0
 80092da:	da2b      	bge.n	8009334 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80092dc:	69bb      	ldr	r3, [r7, #24]
 80092de:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80092e8:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80092ec:	429a      	cmp	r2, r3
 80092ee:	d121      	bne.n	8009334 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80092f0:	6879      	ldr	r1, [r7, #4]
 80092f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80092f4:	4613      	mov	r3, r2
 80092f6:	00db      	lsls	r3, r3, #3
 80092f8:	4413      	add	r3, r2
 80092fa:	009b      	lsls	r3, r3, #2
 80092fc:	440b      	add	r3, r1
 80092fe:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8009302:	2201      	movs	r2, #1
 8009304:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8009306:	6a3b      	ldr	r3, [r7, #32]
 8009308:	699b      	ldr	r3, [r3, #24]
 800930a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800930e:	6a3b      	ldr	r3, [r7, #32]
 8009310:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8009312:	6a3b      	ldr	r3, [r7, #32]
 8009314:	695b      	ldr	r3, [r3, #20]
 8009316:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800931a:	2b00      	cmp	r3, #0
 800931c:	d10a      	bne.n	8009334 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800931e:	69fb      	ldr	r3, [r7, #28]
 8009320:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009324:	685b      	ldr	r3, [r3, #4]
 8009326:	69fa      	ldr	r2, [r7, #28]
 8009328:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800932c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8009330:	6053      	str	r3, [r2, #4]
            break;
 8009332:	e008      	b.n	8009346 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009336:	3301      	adds	r3, #1
 8009338:	627b      	str	r3, [r7, #36]	@ 0x24
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	791b      	ldrb	r3, [r3, #4]
 800933e:	461a      	mov	r2, r3
 8009340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009342:	4293      	cmp	r3, r2
 8009344:	d3b3      	bcc.n	80092ae <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	695a      	ldr	r2, [r3, #20]
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8009354:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	4618      	mov	r0, r3
 800935c:	f003 fab8 	bl	800c8d0 <USB_ReadInterrupts>
 8009360:	4603      	mov	r3, r0
 8009362:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009366:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800936a:	d10a      	bne.n	8009382 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800936c:	6878      	ldr	r0, [r7, #4]
 800936e:	f005 ff67 	bl	800f240 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	695a      	ldr	r2, [r3, #20]
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8009380:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	4618      	mov	r0, r3
 8009388:	f003 faa2 	bl	800c8d0 <USB_ReadInterrupts>
 800938c:	4603      	mov	r3, r0
 800938e:	f003 0304 	and.w	r3, r3, #4
 8009392:	2b04      	cmp	r3, #4
 8009394:	d115      	bne.n	80093c2 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	685b      	ldr	r3, [r3, #4]
 800939c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800939e:	69bb      	ldr	r3, [r7, #24]
 80093a0:	f003 0304 	and.w	r3, r3, #4
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d002      	beq.n	80093ae <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80093a8:	6878      	ldr	r0, [r7, #4]
 80093aa:	f005 ff57 	bl	800f25c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	6859      	ldr	r1, [r3, #4]
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	69ba      	ldr	r2, [r7, #24]
 80093ba:	430a      	orrs	r2, r1
 80093bc:	605a      	str	r2, [r3, #4]
 80093be:	e000      	b.n	80093c2 <HAL_PCD_IRQHandler+0x93c>
      return;
 80093c0:	bf00      	nop
    }
  }
}
 80093c2:	3734      	adds	r7, #52	@ 0x34
 80093c4:	46bd      	mov	sp, r7
 80093c6:	bd90      	pop	{r4, r7, pc}

080093c8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b082      	sub	sp, #8
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
 80093d0:	460b      	mov	r3, r1
 80093d2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80093da:	2b01      	cmp	r3, #1
 80093dc:	d101      	bne.n	80093e2 <HAL_PCD_SetAddress+0x1a>
 80093de:	2302      	movs	r3, #2
 80093e0:	e012      	b.n	8009408 <HAL_PCD_SetAddress+0x40>
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	2201      	movs	r2, #1
 80093e6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	78fa      	ldrb	r2, [r7, #3]
 80093ee:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	78fa      	ldrb	r2, [r7, #3]
 80093f6:	4611      	mov	r1, r2
 80093f8:	4618      	mov	r0, r3
 80093fa:	f003 fa01 	bl	800c800 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	2200      	movs	r2, #0
 8009402:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8009406:	2300      	movs	r3, #0
}
 8009408:	4618      	mov	r0, r3
 800940a:	3708      	adds	r7, #8
 800940c:	46bd      	mov	sp, r7
 800940e:	bd80      	pop	{r7, pc}

08009410 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b084      	sub	sp, #16
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
 8009418:	4608      	mov	r0, r1
 800941a:	4611      	mov	r1, r2
 800941c:	461a      	mov	r2, r3
 800941e:	4603      	mov	r3, r0
 8009420:	70fb      	strb	r3, [r7, #3]
 8009422:	460b      	mov	r3, r1
 8009424:	803b      	strh	r3, [r7, #0]
 8009426:	4613      	mov	r3, r2
 8009428:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800942a:	2300      	movs	r3, #0
 800942c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800942e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009432:	2b00      	cmp	r3, #0
 8009434:	da0f      	bge.n	8009456 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009436:	78fb      	ldrb	r3, [r7, #3]
 8009438:	f003 020f 	and.w	r2, r3, #15
 800943c:	4613      	mov	r3, r2
 800943e:	00db      	lsls	r3, r3, #3
 8009440:	4413      	add	r3, r2
 8009442:	009b      	lsls	r3, r3, #2
 8009444:	3310      	adds	r3, #16
 8009446:	687a      	ldr	r2, [r7, #4]
 8009448:	4413      	add	r3, r2
 800944a:	3304      	adds	r3, #4
 800944c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	2201      	movs	r2, #1
 8009452:	705a      	strb	r2, [r3, #1]
 8009454:	e00f      	b.n	8009476 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009456:	78fb      	ldrb	r3, [r7, #3]
 8009458:	f003 020f 	and.w	r2, r3, #15
 800945c:	4613      	mov	r3, r2
 800945e:	00db      	lsls	r3, r3, #3
 8009460:	4413      	add	r3, r2
 8009462:	009b      	lsls	r3, r3, #2
 8009464:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009468:	687a      	ldr	r2, [r7, #4]
 800946a:	4413      	add	r3, r2
 800946c:	3304      	adds	r3, #4
 800946e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	2200      	movs	r2, #0
 8009474:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8009476:	78fb      	ldrb	r3, [r7, #3]
 8009478:	f003 030f 	and.w	r3, r3, #15
 800947c:	b2da      	uxtb	r2, r3
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8009482:	883b      	ldrh	r3, [r7, #0]
 8009484:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	78ba      	ldrb	r2, [r7, #2]
 8009490:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	785b      	ldrb	r3, [r3, #1]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d004      	beq.n	80094a4 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	781b      	ldrb	r3, [r3, #0]
 800949e:	461a      	mov	r2, r3
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80094a4:	78bb      	ldrb	r3, [r7, #2]
 80094a6:	2b02      	cmp	r3, #2
 80094a8:	d102      	bne.n	80094b0 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	2200      	movs	r2, #0
 80094ae:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80094b6:	2b01      	cmp	r3, #1
 80094b8:	d101      	bne.n	80094be <HAL_PCD_EP_Open+0xae>
 80094ba:	2302      	movs	r3, #2
 80094bc:	e00e      	b.n	80094dc <HAL_PCD_EP_Open+0xcc>
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	2201      	movs	r2, #1
 80094c2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	68f9      	ldr	r1, [r7, #12]
 80094cc:	4618      	mov	r0, r3
 80094ce:	f002 fb81 	bl	800bbd4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	2200      	movs	r2, #0
 80094d6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80094da:	7afb      	ldrb	r3, [r7, #11]
}
 80094dc:	4618      	mov	r0, r3
 80094de:	3710      	adds	r7, #16
 80094e0:	46bd      	mov	sp, r7
 80094e2:	bd80      	pop	{r7, pc}

080094e4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b084      	sub	sp, #16
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
 80094ec:	460b      	mov	r3, r1
 80094ee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80094f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	da0f      	bge.n	8009518 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80094f8:	78fb      	ldrb	r3, [r7, #3]
 80094fa:	f003 020f 	and.w	r2, r3, #15
 80094fe:	4613      	mov	r3, r2
 8009500:	00db      	lsls	r3, r3, #3
 8009502:	4413      	add	r3, r2
 8009504:	009b      	lsls	r3, r3, #2
 8009506:	3310      	adds	r3, #16
 8009508:	687a      	ldr	r2, [r7, #4]
 800950a:	4413      	add	r3, r2
 800950c:	3304      	adds	r3, #4
 800950e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	2201      	movs	r2, #1
 8009514:	705a      	strb	r2, [r3, #1]
 8009516:	e00f      	b.n	8009538 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009518:	78fb      	ldrb	r3, [r7, #3]
 800951a:	f003 020f 	and.w	r2, r3, #15
 800951e:	4613      	mov	r3, r2
 8009520:	00db      	lsls	r3, r3, #3
 8009522:	4413      	add	r3, r2
 8009524:	009b      	lsls	r3, r3, #2
 8009526:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800952a:	687a      	ldr	r2, [r7, #4]
 800952c:	4413      	add	r3, r2
 800952e:	3304      	adds	r3, #4
 8009530:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	2200      	movs	r2, #0
 8009536:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8009538:	78fb      	ldrb	r3, [r7, #3]
 800953a:	f003 030f 	and.w	r3, r3, #15
 800953e:	b2da      	uxtb	r2, r3
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800954a:	2b01      	cmp	r3, #1
 800954c:	d101      	bne.n	8009552 <HAL_PCD_EP_Close+0x6e>
 800954e:	2302      	movs	r3, #2
 8009550:	e00e      	b.n	8009570 <HAL_PCD_EP_Close+0x8c>
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	2201      	movs	r2, #1
 8009556:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	68f9      	ldr	r1, [r7, #12]
 8009560:	4618      	mov	r0, r3
 8009562:	f002 fbbf 	bl	800bce4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	2200      	movs	r2, #0
 800956a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800956e:	2300      	movs	r3, #0
}
 8009570:	4618      	mov	r0, r3
 8009572:	3710      	adds	r7, #16
 8009574:	46bd      	mov	sp, r7
 8009576:	bd80      	pop	{r7, pc}

08009578 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b086      	sub	sp, #24
 800957c:	af00      	add	r7, sp, #0
 800957e:	60f8      	str	r0, [r7, #12]
 8009580:	607a      	str	r2, [r7, #4]
 8009582:	603b      	str	r3, [r7, #0]
 8009584:	460b      	mov	r3, r1
 8009586:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009588:	7afb      	ldrb	r3, [r7, #11]
 800958a:	f003 020f 	and.w	r2, r3, #15
 800958e:	4613      	mov	r3, r2
 8009590:	00db      	lsls	r3, r3, #3
 8009592:	4413      	add	r3, r2
 8009594:	009b      	lsls	r3, r3, #2
 8009596:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800959a:	68fa      	ldr	r2, [r7, #12]
 800959c:	4413      	add	r3, r2
 800959e:	3304      	adds	r3, #4
 80095a0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80095a2:	697b      	ldr	r3, [r7, #20]
 80095a4:	687a      	ldr	r2, [r7, #4]
 80095a6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80095a8:	697b      	ldr	r3, [r7, #20]
 80095aa:	683a      	ldr	r2, [r7, #0]
 80095ac:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80095ae:	697b      	ldr	r3, [r7, #20]
 80095b0:	2200      	movs	r2, #0
 80095b2:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80095b4:	697b      	ldr	r3, [r7, #20]
 80095b6:	2200      	movs	r2, #0
 80095b8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80095ba:	7afb      	ldrb	r3, [r7, #11]
 80095bc:	f003 030f 	and.w	r3, r3, #15
 80095c0:	b2da      	uxtb	r2, r3
 80095c2:	697b      	ldr	r3, [r7, #20]
 80095c4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	799b      	ldrb	r3, [r3, #6]
 80095ca:	2b01      	cmp	r3, #1
 80095cc:	d102      	bne.n	80095d4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80095ce:	687a      	ldr	r2, [r7, #4]
 80095d0:	697b      	ldr	r3, [r7, #20]
 80095d2:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	6818      	ldr	r0, [r3, #0]
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	799b      	ldrb	r3, [r3, #6]
 80095dc:	461a      	mov	r2, r3
 80095de:	6979      	ldr	r1, [r7, #20]
 80095e0:	f002 fc5c 	bl	800be9c <USB_EPStartXfer>

  return HAL_OK;
 80095e4:	2300      	movs	r3, #0
}
 80095e6:	4618      	mov	r0, r3
 80095e8:	3718      	adds	r7, #24
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}

080095ee <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80095ee:	b480      	push	{r7}
 80095f0:	b083      	sub	sp, #12
 80095f2:	af00      	add	r7, sp, #0
 80095f4:	6078      	str	r0, [r7, #4]
 80095f6:	460b      	mov	r3, r1
 80095f8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80095fa:	78fb      	ldrb	r3, [r7, #3]
 80095fc:	f003 020f 	and.w	r2, r3, #15
 8009600:	6879      	ldr	r1, [r7, #4]
 8009602:	4613      	mov	r3, r2
 8009604:	00db      	lsls	r3, r3, #3
 8009606:	4413      	add	r3, r2
 8009608:	009b      	lsls	r3, r3, #2
 800960a:	440b      	add	r3, r1
 800960c:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8009610:	681b      	ldr	r3, [r3, #0]
}
 8009612:	4618      	mov	r0, r3
 8009614:	370c      	adds	r7, #12
 8009616:	46bd      	mov	sp, r7
 8009618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961c:	4770      	bx	lr

0800961e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800961e:	b580      	push	{r7, lr}
 8009620:	b086      	sub	sp, #24
 8009622:	af00      	add	r7, sp, #0
 8009624:	60f8      	str	r0, [r7, #12]
 8009626:	607a      	str	r2, [r7, #4]
 8009628:	603b      	str	r3, [r7, #0]
 800962a:	460b      	mov	r3, r1
 800962c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800962e:	7afb      	ldrb	r3, [r7, #11]
 8009630:	f003 020f 	and.w	r2, r3, #15
 8009634:	4613      	mov	r3, r2
 8009636:	00db      	lsls	r3, r3, #3
 8009638:	4413      	add	r3, r2
 800963a:	009b      	lsls	r3, r3, #2
 800963c:	3310      	adds	r3, #16
 800963e:	68fa      	ldr	r2, [r7, #12]
 8009640:	4413      	add	r3, r2
 8009642:	3304      	adds	r3, #4
 8009644:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009646:	697b      	ldr	r3, [r7, #20]
 8009648:	687a      	ldr	r2, [r7, #4]
 800964a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800964c:	697b      	ldr	r3, [r7, #20]
 800964e:	683a      	ldr	r2, [r7, #0]
 8009650:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8009652:	697b      	ldr	r3, [r7, #20]
 8009654:	2200      	movs	r2, #0
 8009656:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8009658:	697b      	ldr	r3, [r7, #20]
 800965a:	2201      	movs	r2, #1
 800965c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800965e:	7afb      	ldrb	r3, [r7, #11]
 8009660:	f003 030f 	and.w	r3, r3, #15
 8009664:	b2da      	uxtb	r2, r3
 8009666:	697b      	ldr	r3, [r7, #20]
 8009668:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	799b      	ldrb	r3, [r3, #6]
 800966e:	2b01      	cmp	r3, #1
 8009670:	d102      	bne.n	8009678 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8009672:	687a      	ldr	r2, [r7, #4]
 8009674:	697b      	ldr	r3, [r7, #20]
 8009676:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	6818      	ldr	r0, [r3, #0]
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	799b      	ldrb	r3, [r3, #6]
 8009680:	461a      	mov	r2, r3
 8009682:	6979      	ldr	r1, [r7, #20]
 8009684:	f002 fc0a 	bl	800be9c <USB_EPStartXfer>

  return HAL_OK;
 8009688:	2300      	movs	r3, #0
}
 800968a:	4618      	mov	r0, r3
 800968c:	3718      	adds	r7, #24
 800968e:	46bd      	mov	sp, r7
 8009690:	bd80      	pop	{r7, pc}

08009692 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009692:	b580      	push	{r7, lr}
 8009694:	b084      	sub	sp, #16
 8009696:	af00      	add	r7, sp, #0
 8009698:	6078      	str	r0, [r7, #4]
 800969a:	460b      	mov	r3, r1
 800969c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800969e:	78fb      	ldrb	r3, [r7, #3]
 80096a0:	f003 030f 	and.w	r3, r3, #15
 80096a4:	687a      	ldr	r2, [r7, #4]
 80096a6:	7912      	ldrb	r2, [r2, #4]
 80096a8:	4293      	cmp	r3, r2
 80096aa:	d901      	bls.n	80096b0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80096ac:	2301      	movs	r3, #1
 80096ae:	e04f      	b.n	8009750 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80096b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	da0f      	bge.n	80096d8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80096b8:	78fb      	ldrb	r3, [r7, #3]
 80096ba:	f003 020f 	and.w	r2, r3, #15
 80096be:	4613      	mov	r3, r2
 80096c0:	00db      	lsls	r3, r3, #3
 80096c2:	4413      	add	r3, r2
 80096c4:	009b      	lsls	r3, r3, #2
 80096c6:	3310      	adds	r3, #16
 80096c8:	687a      	ldr	r2, [r7, #4]
 80096ca:	4413      	add	r3, r2
 80096cc:	3304      	adds	r3, #4
 80096ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	2201      	movs	r2, #1
 80096d4:	705a      	strb	r2, [r3, #1]
 80096d6:	e00d      	b.n	80096f4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80096d8:	78fa      	ldrb	r2, [r7, #3]
 80096da:	4613      	mov	r3, r2
 80096dc:	00db      	lsls	r3, r3, #3
 80096de:	4413      	add	r3, r2
 80096e0:	009b      	lsls	r3, r3, #2
 80096e2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80096e6:	687a      	ldr	r2, [r7, #4]
 80096e8:	4413      	add	r3, r2
 80096ea:	3304      	adds	r3, #4
 80096ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	2200      	movs	r2, #0
 80096f2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	2201      	movs	r2, #1
 80096f8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80096fa:	78fb      	ldrb	r3, [r7, #3]
 80096fc:	f003 030f 	and.w	r3, r3, #15
 8009700:	b2da      	uxtb	r2, r3
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800970c:	2b01      	cmp	r3, #1
 800970e:	d101      	bne.n	8009714 <HAL_PCD_EP_SetStall+0x82>
 8009710:	2302      	movs	r3, #2
 8009712:	e01d      	b.n	8009750 <HAL_PCD_EP_SetStall+0xbe>
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2201      	movs	r2, #1
 8009718:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	68f9      	ldr	r1, [r7, #12]
 8009722:	4618      	mov	r0, r3
 8009724:	f002 ff98 	bl	800c658 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009728:	78fb      	ldrb	r3, [r7, #3]
 800972a:	f003 030f 	and.w	r3, r3, #15
 800972e:	2b00      	cmp	r3, #0
 8009730:	d109      	bne.n	8009746 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	6818      	ldr	r0, [r3, #0]
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	7999      	ldrb	r1, [r3, #6]
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009740:	461a      	mov	r2, r3
 8009742:	f003 f989 	bl	800ca58 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	2200      	movs	r2, #0
 800974a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800974e:	2300      	movs	r3, #0
}
 8009750:	4618      	mov	r0, r3
 8009752:	3710      	adds	r7, #16
 8009754:	46bd      	mov	sp, r7
 8009756:	bd80      	pop	{r7, pc}

08009758 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b084      	sub	sp, #16
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
 8009760:	460b      	mov	r3, r1
 8009762:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8009764:	78fb      	ldrb	r3, [r7, #3]
 8009766:	f003 030f 	and.w	r3, r3, #15
 800976a:	687a      	ldr	r2, [r7, #4]
 800976c:	7912      	ldrb	r2, [r2, #4]
 800976e:	4293      	cmp	r3, r2
 8009770:	d901      	bls.n	8009776 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8009772:	2301      	movs	r3, #1
 8009774:	e042      	b.n	80097fc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009776:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800977a:	2b00      	cmp	r3, #0
 800977c:	da0f      	bge.n	800979e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800977e:	78fb      	ldrb	r3, [r7, #3]
 8009780:	f003 020f 	and.w	r2, r3, #15
 8009784:	4613      	mov	r3, r2
 8009786:	00db      	lsls	r3, r3, #3
 8009788:	4413      	add	r3, r2
 800978a:	009b      	lsls	r3, r3, #2
 800978c:	3310      	adds	r3, #16
 800978e:	687a      	ldr	r2, [r7, #4]
 8009790:	4413      	add	r3, r2
 8009792:	3304      	adds	r3, #4
 8009794:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	2201      	movs	r2, #1
 800979a:	705a      	strb	r2, [r3, #1]
 800979c:	e00f      	b.n	80097be <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800979e:	78fb      	ldrb	r3, [r7, #3]
 80097a0:	f003 020f 	and.w	r2, r3, #15
 80097a4:	4613      	mov	r3, r2
 80097a6:	00db      	lsls	r3, r3, #3
 80097a8:	4413      	add	r3, r2
 80097aa:	009b      	lsls	r3, r3, #2
 80097ac:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80097b0:	687a      	ldr	r2, [r7, #4]
 80097b2:	4413      	add	r3, r2
 80097b4:	3304      	adds	r3, #4
 80097b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	2200      	movs	r2, #0
 80097bc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	2200      	movs	r2, #0
 80097c2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80097c4:	78fb      	ldrb	r3, [r7, #3]
 80097c6:	f003 030f 	and.w	r3, r3, #15
 80097ca:	b2da      	uxtb	r2, r3
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80097d6:	2b01      	cmp	r3, #1
 80097d8:	d101      	bne.n	80097de <HAL_PCD_EP_ClrStall+0x86>
 80097da:	2302      	movs	r3, #2
 80097dc:	e00e      	b.n	80097fc <HAL_PCD_EP_ClrStall+0xa4>
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	2201      	movs	r2, #1
 80097e2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	68f9      	ldr	r1, [r7, #12]
 80097ec:	4618      	mov	r0, r3
 80097ee:	f002 ffa1 	bl	800c734 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	2200      	movs	r2, #0
 80097f6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80097fa:	2300      	movs	r3, #0
}
 80097fc:	4618      	mov	r0, r3
 80097fe:	3710      	adds	r7, #16
 8009800:	46bd      	mov	sp, r7
 8009802:	bd80      	pop	{r7, pc}

08009804 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b084      	sub	sp, #16
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
 800980c:	460b      	mov	r3, r1
 800980e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8009810:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009814:	2b00      	cmp	r3, #0
 8009816:	da0c      	bge.n	8009832 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009818:	78fb      	ldrb	r3, [r7, #3]
 800981a:	f003 020f 	and.w	r2, r3, #15
 800981e:	4613      	mov	r3, r2
 8009820:	00db      	lsls	r3, r3, #3
 8009822:	4413      	add	r3, r2
 8009824:	009b      	lsls	r3, r3, #2
 8009826:	3310      	adds	r3, #16
 8009828:	687a      	ldr	r2, [r7, #4]
 800982a:	4413      	add	r3, r2
 800982c:	3304      	adds	r3, #4
 800982e:	60fb      	str	r3, [r7, #12]
 8009830:	e00c      	b.n	800984c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009832:	78fb      	ldrb	r3, [r7, #3]
 8009834:	f003 020f 	and.w	r2, r3, #15
 8009838:	4613      	mov	r3, r2
 800983a:	00db      	lsls	r3, r3, #3
 800983c:	4413      	add	r3, r2
 800983e:	009b      	lsls	r3, r3, #2
 8009840:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009844:	687a      	ldr	r2, [r7, #4]
 8009846:	4413      	add	r3, r2
 8009848:	3304      	adds	r3, #4
 800984a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	68f9      	ldr	r1, [r7, #12]
 8009852:	4618      	mov	r0, r3
 8009854:	f002 fdc0 	bl	800c3d8 <USB_EPStopXfer>
 8009858:	4603      	mov	r3, r0
 800985a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800985c:	7afb      	ldrb	r3, [r7, #11]
}
 800985e:	4618      	mov	r0, r3
 8009860:	3710      	adds	r7, #16
 8009862:	46bd      	mov	sp, r7
 8009864:	bd80      	pop	{r7, pc}

08009866 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009866:	b580      	push	{r7, lr}
 8009868:	b08a      	sub	sp, #40	@ 0x28
 800986a:	af02      	add	r7, sp, #8
 800986c:	6078      	str	r0, [r7, #4]
 800986e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009876:	697b      	ldr	r3, [r7, #20]
 8009878:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800987a:	683a      	ldr	r2, [r7, #0]
 800987c:	4613      	mov	r3, r2
 800987e:	00db      	lsls	r3, r3, #3
 8009880:	4413      	add	r3, r2
 8009882:	009b      	lsls	r3, r3, #2
 8009884:	3310      	adds	r3, #16
 8009886:	687a      	ldr	r2, [r7, #4]
 8009888:	4413      	add	r3, r2
 800988a:	3304      	adds	r3, #4
 800988c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	695a      	ldr	r2, [r3, #20]
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	691b      	ldr	r3, [r3, #16]
 8009896:	429a      	cmp	r2, r3
 8009898:	d901      	bls.n	800989e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800989a:	2301      	movs	r3, #1
 800989c:	e06b      	b.n	8009976 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	691a      	ldr	r2, [r3, #16]
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	695b      	ldr	r3, [r3, #20]
 80098a6:	1ad3      	subs	r3, r2, r3
 80098a8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	689b      	ldr	r3, [r3, #8]
 80098ae:	69fa      	ldr	r2, [r7, #28]
 80098b0:	429a      	cmp	r2, r3
 80098b2:	d902      	bls.n	80098ba <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	689b      	ldr	r3, [r3, #8]
 80098b8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80098ba:	69fb      	ldr	r3, [r7, #28]
 80098bc:	3303      	adds	r3, #3
 80098be:	089b      	lsrs	r3, r3, #2
 80098c0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80098c2:	e02a      	b.n	800991a <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	691a      	ldr	r2, [r3, #16]
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	695b      	ldr	r3, [r3, #20]
 80098cc:	1ad3      	subs	r3, r2, r3
 80098ce:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	689b      	ldr	r3, [r3, #8]
 80098d4:	69fa      	ldr	r2, [r7, #28]
 80098d6:	429a      	cmp	r2, r3
 80098d8:	d902      	bls.n	80098e0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	689b      	ldr	r3, [r3, #8]
 80098de:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80098e0:	69fb      	ldr	r3, [r7, #28]
 80098e2:	3303      	adds	r3, #3
 80098e4:	089b      	lsrs	r3, r3, #2
 80098e6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	68d9      	ldr	r1, [r3, #12]
 80098ec:	683b      	ldr	r3, [r7, #0]
 80098ee:	b2da      	uxtb	r2, r3
 80098f0:	69fb      	ldr	r3, [r7, #28]
 80098f2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80098f8:	9300      	str	r3, [sp, #0]
 80098fa:	4603      	mov	r3, r0
 80098fc:	6978      	ldr	r0, [r7, #20]
 80098fe:	f002 fe15 	bl	800c52c <USB_WritePacket>

    ep->xfer_buff  += len;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	68da      	ldr	r2, [r3, #12]
 8009906:	69fb      	ldr	r3, [r7, #28]
 8009908:	441a      	add	r2, r3
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	695a      	ldr	r2, [r3, #20]
 8009912:	69fb      	ldr	r3, [r7, #28]
 8009914:	441a      	add	r2, r3
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800991a:	683b      	ldr	r3, [r7, #0]
 800991c:	015a      	lsls	r2, r3, #5
 800991e:	693b      	ldr	r3, [r7, #16]
 8009920:	4413      	add	r3, r2
 8009922:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009926:	699b      	ldr	r3, [r3, #24]
 8009928:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800992a:	69ba      	ldr	r2, [r7, #24]
 800992c:	429a      	cmp	r2, r3
 800992e:	d809      	bhi.n	8009944 <PCD_WriteEmptyTxFifo+0xde>
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	695a      	ldr	r2, [r3, #20]
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009938:	429a      	cmp	r2, r3
 800993a:	d203      	bcs.n	8009944 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	691b      	ldr	r3, [r3, #16]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d1bf      	bne.n	80098c4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	691a      	ldr	r2, [r3, #16]
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	695b      	ldr	r3, [r3, #20]
 800994c:	429a      	cmp	r2, r3
 800994e:	d811      	bhi.n	8009974 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	f003 030f 	and.w	r3, r3, #15
 8009956:	2201      	movs	r2, #1
 8009958:	fa02 f303 	lsl.w	r3, r2, r3
 800995c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800995e:	693b      	ldr	r3, [r7, #16]
 8009960:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009964:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009966:	68bb      	ldr	r3, [r7, #8]
 8009968:	43db      	mvns	r3, r3
 800996a:	6939      	ldr	r1, [r7, #16]
 800996c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009970:	4013      	ands	r3, r2
 8009972:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8009974:	2300      	movs	r3, #0
}
 8009976:	4618      	mov	r0, r3
 8009978:	3720      	adds	r7, #32
 800997a:	46bd      	mov	sp, r7
 800997c:	bd80      	pop	{r7, pc}
	...

08009980 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b088      	sub	sp, #32
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
 8009988:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009990:	69fb      	ldr	r3, [r7, #28]
 8009992:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8009994:	69fb      	ldr	r3, [r7, #28]
 8009996:	333c      	adds	r3, #60	@ 0x3c
 8009998:	3304      	adds	r3, #4
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800999e:	683b      	ldr	r3, [r7, #0]
 80099a0:	015a      	lsls	r2, r3, #5
 80099a2:	69bb      	ldr	r3, [r7, #24]
 80099a4:	4413      	add	r3, r2
 80099a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099aa:	689b      	ldr	r3, [r3, #8]
 80099ac:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	799b      	ldrb	r3, [r3, #6]
 80099b2:	2b01      	cmp	r3, #1
 80099b4:	d17b      	bne.n	8009aae <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80099b6:	693b      	ldr	r3, [r7, #16]
 80099b8:	f003 0308 	and.w	r3, r3, #8
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d015      	beq.n	80099ec <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80099c0:	697b      	ldr	r3, [r7, #20]
 80099c2:	4a61      	ldr	r2, [pc, #388]	@ (8009b48 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80099c4:	4293      	cmp	r3, r2
 80099c6:	f240 80b9 	bls.w	8009b3c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80099ca:	693b      	ldr	r3, [r7, #16]
 80099cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	f000 80b3 	beq.w	8009b3c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	015a      	lsls	r2, r3, #5
 80099da:	69bb      	ldr	r3, [r7, #24]
 80099dc:	4413      	add	r3, r2
 80099de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099e2:	461a      	mov	r2, r3
 80099e4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80099e8:	6093      	str	r3, [r2, #8]
 80099ea:	e0a7      	b.n	8009b3c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80099ec:	693b      	ldr	r3, [r7, #16]
 80099ee:	f003 0320 	and.w	r3, r3, #32
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d009      	beq.n	8009a0a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	015a      	lsls	r2, r3, #5
 80099fa:	69bb      	ldr	r3, [r7, #24]
 80099fc:	4413      	add	r3, r2
 80099fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a02:	461a      	mov	r2, r3
 8009a04:	2320      	movs	r3, #32
 8009a06:	6093      	str	r3, [r2, #8]
 8009a08:	e098      	b.n	8009b3c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8009a0a:	693b      	ldr	r3, [r7, #16]
 8009a0c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	f040 8093 	bne.w	8009b3c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009a16:	697b      	ldr	r3, [r7, #20]
 8009a18:	4a4b      	ldr	r2, [pc, #300]	@ (8009b48 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8009a1a:	4293      	cmp	r3, r2
 8009a1c:	d90f      	bls.n	8009a3e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009a1e:	693b      	ldr	r3, [r7, #16]
 8009a20:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d00a      	beq.n	8009a3e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	015a      	lsls	r2, r3, #5
 8009a2c:	69bb      	ldr	r3, [r7, #24]
 8009a2e:	4413      	add	r3, r2
 8009a30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a34:	461a      	mov	r2, r3
 8009a36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009a3a:	6093      	str	r3, [r2, #8]
 8009a3c:	e07e      	b.n	8009b3c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8009a3e:	683a      	ldr	r2, [r7, #0]
 8009a40:	4613      	mov	r3, r2
 8009a42:	00db      	lsls	r3, r3, #3
 8009a44:	4413      	add	r3, r2
 8009a46:	009b      	lsls	r3, r3, #2
 8009a48:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009a4c:	687a      	ldr	r2, [r7, #4]
 8009a4e:	4413      	add	r3, r2
 8009a50:	3304      	adds	r3, #4
 8009a52:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	6a1a      	ldr	r2, [r3, #32]
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	0159      	lsls	r1, r3, #5
 8009a5c:	69bb      	ldr	r3, [r7, #24]
 8009a5e:	440b      	add	r3, r1
 8009a60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a64:	691b      	ldr	r3, [r3, #16]
 8009a66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009a6a:	1ad2      	subs	r2, r2, r3
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d114      	bne.n	8009aa0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	691b      	ldr	r3, [r3, #16]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d109      	bne.n	8009a92 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	6818      	ldr	r0, [r3, #0]
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009a88:	461a      	mov	r2, r3
 8009a8a:	2101      	movs	r1, #1
 8009a8c:	f002 ffe4 	bl	800ca58 <USB_EP0_OutStart>
 8009a90:	e006      	b.n	8009aa0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	68da      	ldr	r2, [r3, #12]
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	695b      	ldr	r3, [r3, #20]
 8009a9a:	441a      	add	r2, r3
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	b2db      	uxtb	r3, r3
 8009aa4:	4619      	mov	r1, r3
 8009aa6:	6878      	ldr	r0, [r7, #4]
 8009aa8:	f005 fb10 	bl	800f0cc <HAL_PCD_DataOutStageCallback>
 8009aac:	e046      	b.n	8009b3c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8009aae:	697b      	ldr	r3, [r7, #20]
 8009ab0:	4a26      	ldr	r2, [pc, #152]	@ (8009b4c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8009ab2:	4293      	cmp	r3, r2
 8009ab4:	d124      	bne.n	8009b00 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8009ab6:	693b      	ldr	r3, [r7, #16]
 8009ab8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d00a      	beq.n	8009ad6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009ac0:	683b      	ldr	r3, [r7, #0]
 8009ac2:	015a      	lsls	r2, r3, #5
 8009ac4:	69bb      	ldr	r3, [r7, #24]
 8009ac6:	4413      	add	r3, r2
 8009ac8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009acc:	461a      	mov	r2, r3
 8009ace:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009ad2:	6093      	str	r3, [r2, #8]
 8009ad4:	e032      	b.n	8009b3c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009ad6:	693b      	ldr	r3, [r7, #16]
 8009ad8:	f003 0320 	and.w	r3, r3, #32
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d008      	beq.n	8009af2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	015a      	lsls	r2, r3, #5
 8009ae4:	69bb      	ldr	r3, [r7, #24]
 8009ae6:	4413      	add	r3, r2
 8009ae8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009aec:	461a      	mov	r2, r3
 8009aee:	2320      	movs	r3, #32
 8009af0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009af2:	683b      	ldr	r3, [r7, #0]
 8009af4:	b2db      	uxtb	r3, r3
 8009af6:	4619      	mov	r1, r3
 8009af8:	6878      	ldr	r0, [r7, #4]
 8009afa:	f005 fae7 	bl	800f0cc <HAL_PCD_DataOutStageCallback>
 8009afe:	e01d      	b.n	8009b3c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d114      	bne.n	8009b30 <PCD_EP_OutXfrComplete_int+0x1b0>
 8009b06:	6879      	ldr	r1, [r7, #4]
 8009b08:	683a      	ldr	r2, [r7, #0]
 8009b0a:	4613      	mov	r3, r2
 8009b0c:	00db      	lsls	r3, r3, #3
 8009b0e:	4413      	add	r3, r2
 8009b10:	009b      	lsls	r3, r3, #2
 8009b12:	440b      	add	r3, r1
 8009b14:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d108      	bne.n	8009b30 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	6818      	ldr	r0, [r3, #0]
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009b28:	461a      	mov	r2, r3
 8009b2a:	2100      	movs	r1, #0
 8009b2c:	f002 ff94 	bl	800ca58 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009b30:	683b      	ldr	r3, [r7, #0]
 8009b32:	b2db      	uxtb	r3, r3
 8009b34:	4619      	mov	r1, r3
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	f005 fac8 	bl	800f0cc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8009b3c:	2300      	movs	r3, #0
}
 8009b3e:	4618      	mov	r0, r3
 8009b40:	3720      	adds	r7, #32
 8009b42:	46bd      	mov	sp, r7
 8009b44:	bd80      	pop	{r7, pc}
 8009b46:	bf00      	nop
 8009b48:	4f54300a 	.word	0x4f54300a
 8009b4c:	4f54310a 	.word	0x4f54310a

08009b50 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b086      	sub	sp, #24
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
 8009b58:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b60:	697b      	ldr	r3, [r7, #20]
 8009b62:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8009b64:	697b      	ldr	r3, [r7, #20]
 8009b66:	333c      	adds	r3, #60	@ 0x3c
 8009b68:	3304      	adds	r3, #4
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	015a      	lsls	r2, r3, #5
 8009b72:	693b      	ldr	r3, [r7, #16]
 8009b74:	4413      	add	r3, r2
 8009b76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b7a:	689b      	ldr	r3, [r3, #8]
 8009b7c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	4a15      	ldr	r2, [pc, #84]	@ (8009bd8 <PCD_EP_OutSetupPacket_int+0x88>)
 8009b82:	4293      	cmp	r3, r2
 8009b84:	d90e      	bls.n	8009ba4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009b86:	68bb      	ldr	r3, [r7, #8]
 8009b88:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d009      	beq.n	8009ba4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	015a      	lsls	r2, r3, #5
 8009b94:	693b      	ldr	r3, [r7, #16]
 8009b96:	4413      	add	r3, r2
 8009b98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b9c:	461a      	mov	r2, r3
 8009b9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009ba2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8009ba4:	6878      	ldr	r0, [r7, #4]
 8009ba6:	f005 fa7f 	bl	800f0a8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	4a0a      	ldr	r2, [pc, #40]	@ (8009bd8 <PCD_EP_OutSetupPacket_int+0x88>)
 8009bae:	4293      	cmp	r3, r2
 8009bb0:	d90c      	bls.n	8009bcc <PCD_EP_OutSetupPacket_int+0x7c>
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	799b      	ldrb	r3, [r3, #6]
 8009bb6:	2b01      	cmp	r3, #1
 8009bb8:	d108      	bne.n	8009bcc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	6818      	ldr	r0, [r3, #0]
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009bc4:	461a      	mov	r2, r3
 8009bc6:	2101      	movs	r1, #1
 8009bc8:	f002 ff46 	bl	800ca58 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8009bcc:	2300      	movs	r3, #0
}
 8009bce:	4618      	mov	r0, r3
 8009bd0:	3718      	adds	r7, #24
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	bd80      	pop	{r7, pc}
 8009bd6:	bf00      	nop
 8009bd8:	4f54300a 	.word	0x4f54300a

08009bdc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8009bdc:	b480      	push	{r7}
 8009bde:	b085      	sub	sp, #20
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
 8009be4:	460b      	mov	r3, r1
 8009be6:	70fb      	strb	r3, [r7, #3]
 8009be8:	4613      	mov	r3, r2
 8009bea:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bf2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8009bf4:	78fb      	ldrb	r3, [r7, #3]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d107      	bne.n	8009c0a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8009bfa:	883b      	ldrh	r3, [r7, #0]
 8009bfc:	0419      	lsls	r1, r3, #16
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	68ba      	ldr	r2, [r7, #8]
 8009c04:	430a      	orrs	r2, r1
 8009c06:	629a      	str	r2, [r3, #40]	@ 0x28
 8009c08:	e028      	b.n	8009c5c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c10:	0c1b      	lsrs	r3, r3, #16
 8009c12:	68ba      	ldr	r2, [r7, #8]
 8009c14:	4413      	add	r3, r2
 8009c16:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009c18:	2300      	movs	r3, #0
 8009c1a:	73fb      	strb	r3, [r7, #15]
 8009c1c:	e00d      	b.n	8009c3a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681a      	ldr	r2, [r3, #0]
 8009c22:	7bfb      	ldrb	r3, [r7, #15]
 8009c24:	3340      	adds	r3, #64	@ 0x40
 8009c26:	009b      	lsls	r3, r3, #2
 8009c28:	4413      	add	r3, r2
 8009c2a:	685b      	ldr	r3, [r3, #4]
 8009c2c:	0c1b      	lsrs	r3, r3, #16
 8009c2e:	68ba      	ldr	r2, [r7, #8]
 8009c30:	4413      	add	r3, r2
 8009c32:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009c34:	7bfb      	ldrb	r3, [r7, #15]
 8009c36:	3301      	adds	r3, #1
 8009c38:	73fb      	strb	r3, [r7, #15]
 8009c3a:	7bfa      	ldrb	r2, [r7, #15]
 8009c3c:	78fb      	ldrb	r3, [r7, #3]
 8009c3e:	3b01      	subs	r3, #1
 8009c40:	429a      	cmp	r2, r3
 8009c42:	d3ec      	bcc.n	8009c1e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8009c44:	883b      	ldrh	r3, [r7, #0]
 8009c46:	0418      	lsls	r0, r3, #16
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	6819      	ldr	r1, [r3, #0]
 8009c4c:	78fb      	ldrb	r3, [r7, #3]
 8009c4e:	3b01      	subs	r3, #1
 8009c50:	68ba      	ldr	r2, [r7, #8]
 8009c52:	4302      	orrs	r2, r0
 8009c54:	3340      	adds	r3, #64	@ 0x40
 8009c56:	009b      	lsls	r3, r3, #2
 8009c58:	440b      	add	r3, r1
 8009c5a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8009c5c:	2300      	movs	r3, #0
}
 8009c5e:	4618      	mov	r0, r3
 8009c60:	3714      	adds	r7, #20
 8009c62:	46bd      	mov	sp, r7
 8009c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c68:	4770      	bx	lr

08009c6a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8009c6a:	b480      	push	{r7}
 8009c6c:	b083      	sub	sp, #12
 8009c6e:	af00      	add	r7, sp, #0
 8009c70:	6078      	str	r0, [r7, #4]
 8009c72:	460b      	mov	r3, r1
 8009c74:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	887a      	ldrh	r2, [r7, #2]
 8009c7c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8009c7e:	2300      	movs	r3, #0
}
 8009c80:	4618      	mov	r0, r3
 8009c82:	370c      	adds	r7, #12
 8009c84:	46bd      	mov	sp, r7
 8009c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8a:	4770      	bx	lr

08009c8c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009c8c:	b480      	push	{r7}
 8009c8e:	b083      	sub	sp, #12
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
 8009c94:	460b      	mov	r3, r1
 8009c96:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8009c98:	bf00      	nop
 8009c9a:	370c      	adds	r7, #12
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca2:	4770      	bx	lr

08009ca4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b086      	sub	sp, #24
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d101      	bne.n	8009cb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009cb2:	2301      	movs	r3, #1
 8009cb4:	e267      	b.n	800a186 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	f003 0301 	and.w	r3, r3, #1
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d075      	beq.n	8009dae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8009cc2:	4b88      	ldr	r3, [pc, #544]	@ (8009ee4 <HAL_RCC_OscConfig+0x240>)
 8009cc4:	689b      	ldr	r3, [r3, #8]
 8009cc6:	f003 030c 	and.w	r3, r3, #12
 8009cca:	2b04      	cmp	r3, #4
 8009ccc:	d00c      	beq.n	8009ce8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009cce:	4b85      	ldr	r3, [pc, #532]	@ (8009ee4 <HAL_RCC_OscConfig+0x240>)
 8009cd0:	689b      	ldr	r3, [r3, #8]
 8009cd2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8009cd6:	2b08      	cmp	r3, #8
 8009cd8:	d112      	bne.n	8009d00 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009cda:	4b82      	ldr	r3, [pc, #520]	@ (8009ee4 <HAL_RCC_OscConfig+0x240>)
 8009cdc:	685b      	ldr	r3, [r3, #4]
 8009cde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009ce2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009ce6:	d10b      	bne.n	8009d00 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009ce8:	4b7e      	ldr	r3, [pc, #504]	@ (8009ee4 <HAL_RCC_OscConfig+0x240>)
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d05b      	beq.n	8009dac <HAL_RCC_OscConfig+0x108>
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	685b      	ldr	r3, [r3, #4]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d157      	bne.n	8009dac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009cfc:	2301      	movs	r3, #1
 8009cfe:	e242      	b.n	800a186 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	685b      	ldr	r3, [r3, #4]
 8009d04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009d08:	d106      	bne.n	8009d18 <HAL_RCC_OscConfig+0x74>
 8009d0a:	4b76      	ldr	r3, [pc, #472]	@ (8009ee4 <HAL_RCC_OscConfig+0x240>)
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	4a75      	ldr	r2, [pc, #468]	@ (8009ee4 <HAL_RCC_OscConfig+0x240>)
 8009d10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009d14:	6013      	str	r3, [r2, #0]
 8009d16:	e01d      	b.n	8009d54 <HAL_RCC_OscConfig+0xb0>
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	685b      	ldr	r3, [r3, #4]
 8009d1c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009d20:	d10c      	bne.n	8009d3c <HAL_RCC_OscConfig+0x98>
 8009d22:	4b70      	ldr	r3, [pc, #448]	@ (8009ee4 <HAL_RCC_OscConfig+0x240>)
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	4a6f      	ldr	r2, [pc, #444]	@ (8009ee4 <HAL_RCC_OscConfig+0x240>)
 8009d28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009d2c:	6013      	str	r3, [r2, #0]
 8009d2e:	4b6d      	ldr	r3, [pc, #436]	@ (8009ee4 <HAL_RCC_OscConfig+0x240>)
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	4a6c      	ldr	r2, [pc, #432]	@ (8009ee4 <HAL_RCC_OscConfig+0x240>)
 8009d34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009d38:	6013      	str	r3, [r2, #0]
 8009d3a:	e00b      	b.n	8009d54 <HAL_RCC_OscConfig+0xb0>
 8009d3c:	4b69      	ldr	r3, [pc, #420]	@ (8009ee4 <HAL_RCC_OscConfig+0x240>)
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	4a68      	ldr	r2, [pc, #416]	@ (8009ee4 <HAL_RCC_OscConfig+0x240>)
 8009d42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009d46:	6013      	str	r3, [r2, #0]
 8009d48:	4b66      	ldr	r3, [pc, #408]	@ (8009ee4 <HAL_RCC_OscConfig+0x240>)
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	4a65      	ldr	r2, [pc, #404]	@ (8009ee4 <HAL_RCC_OscConfig+0x240>)
 8009d4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009d52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	685b      	ldr	r3, [r3, #4]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d013      	beq.n	8009d84 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009d5c:	f7f9 fd84 	bl	8003868 <HAL_GetTick>
 8009d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009d62:	e008      	b.n	8009d76 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009d64:	f7f9 fd80 	bl	8003868 <HAL_GetTick>
 8009d68:	4602      	mov	r2, r0
 8009d6a:	693b      	ldr	r3, [r7, #16]
 8009d6c:	1ad3      	subs	r3, r2, r3
 8009d6e:	2b64      	cmp	r3, #100	@ 0x64
 8009d70:	d901      	bls.n	8009d76 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009d72:	2303      	movs	r3, #3
 8009d74:	e207      	b.n	800a186 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009d76:	4b5b      	ldr	r3, [pc, #364]	@ (8009ee4 <HAL_RCC_OscConfig+0x240>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d0f0      	beq.n	8009d64 <HAL_RCC_OscConfig+0xc0>
 8009d82:	e014      	b.n	8009dae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009d84:	f7f9 fd70 	bl	8003868 <HAL_GetTick>
 8009d88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009d8a:	e008      	b.n	8009d9e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009d8c:	f7f9 fd6c 	bl	8003868 <HAL_GetTick>
 8009d90:	4602      	mov	r2, r0
 8009d92:	693b      	ldr	r3, [r7, #16]
 8009d94:	1ad3      	subs	r3, r2, r3
 8009d96:	2b64      	cmp	r3, #100	@ 0x64
 8009d98:	d901      	bls.n	8009d9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009d9a:	2303      	movs	r3, #3
 8009d9c:	e1f3      	b.n	800a186 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009d9e:	4b51      	ldr	r3, [pc, #324]	@ (8009ee4 <HAL_RCC_OscConfig+0x240>)
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d1f0      	bne.n	8009d8c <HAL_RCC_OscConfig+0xe8>
 8009daa:	e000      	b.n	8009dae <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009dac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	f003 0302 	and.w	r3, r3, #2
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d063      	beq.n	8009e82 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8009dba:	4b4a      	ldr	r3, [pc, #296]	@ (8009ee4 <HAL_RCC_OscConfig+0x240>)
 8009dbc:	689b      	ldr	r3, [r3, #8]
 8009dbe:	f003 030c 	and.w	r3, r3, #12
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d00b      	beq.n	8009dde <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009dc6:	4b47      	ldr	r3, [pc, #284]	@ (8009ee4 <HAL_RCC_OscConfig+0x240>)
 8009dc8:	689b      	ldr	r3, [r3, #8]
 8009dca:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8009dce:	2b08      	cmp	r3, #8
 8009dd0:	d11c      	bne.n	8009e0c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009dd2:	4b44      	ldr	r3, [pc, #272]	@ (8009ee4 <HAL_RCC_OscConfig+0x240>)
 8009dd4:	685b      	ldr	r3, [r3, #4]
 8009dd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d116      	bne.n	8009e0c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009dde:	4b41      	ldr	r3, [pc, #260]	@ (8009ee4 <HAL_RCC_OscConfig+0x240>)
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	f003 0302 	and.w	r3, r3, #2
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d005      	beq.n	8009df6 <HAL_RCC_OscConfig+0x152>
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	68db      	ldr	r3, [r3, #12]
 8009dee:	2b01      	cmp	r3, #1
 8009df0:	d001      	beq.n	8009df6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009df2:	2301      	movs	r3, #1
 8009df4:	e1c7      	b.n	800a186 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009df6:	4b3b      	ldr	r3, [pc, #236]	@ (8009ee4 <HAL_RCC_OscConfig+0x240>)
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	691b      	ldr	r3, [r3, #16]
 8009e02:	00db      	lsls	r3, r3, #3
 8009e04:	4937      	ldr	r1, [pc, #220]	@ (8009ee4 <HAL_RCC_OscConfig+0x240>)
 8009e06:	4313      	orrs	r3, r2
 8009e08:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009e0a:	e03a      	b.n	8009e82 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	68db      	ldr	r3, [r3, #12]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d020      	beq.n	8009e56 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009e14:	4b34      	ldr	r3, [pc, #208]	@ (8009ee8 <HAL_RCC_OscConfig+0x244>)
 8009e16:	2201      	movs	r2, #1
 8009e18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e1a:	f7f9 fd25 	bl	8003868 <HAL_GetTick>
 8009e1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009e20:	e008      	b.n	8009e34 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009e22:	f7f9 fd21 	bl	8003868 <HAL_GetTick>
 8009e26:	4602      	mov	r2, r0
 8009e28:	693b      	ldr	r3, [r7, #16]
 8009e2a:	1ad3      	subs	r3, r2, r3
 8009e2c:	2b02      	cmp	r3, #2
 8009e2e:	d901      	bls.n	8009e34 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009e30:	2303      	movs	r3, #3
 8009e32:	e1a8      	b.n	800a186 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009e34:	4b2b      	ldr	r3, [pc, #172]	@ (8009ee4 <HAL_RCC_OscConfig+0x240>)
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	f003 0302 	and.w	r3, r3, #2
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d0f0      	beq.n	8009e22 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009e40:	4b28      	ldr	r3, [pc, #160]	@ (8009ee4 <HAL_RCC_OscConfig+0x240>)
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	691b      	ldr	r3, [r3, #16]
 8009e4c:	00db      	lsls	r3, r3, #3
 8009e4e:	4925      	ldr	r1, [pc, #148]	@ (8009ee4 <HAL_RCC_OscConfig+0x240>)
 8009e50:	4313      	orrs	r3, r2
 8009e52:	600b      	str	r3, [r1, #0]
 8009e54:	e015      	b.n	8009e82 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009e56:	4b24      	ldr	r3, [pc, #144]	@ (8009ee8 <HAL_RCC_OscConfig+0x244>)
 8009e58:	2200      	movs	r2, #0
 8009e5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e5c:	f7f9 fd04 	bl	8003868 <HAL_GetTick>
 8009e60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009e62:	e008      	b.n	8009e76 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009e64:	f7f9 fd00 	bl	8003868 <HAL_GetTick>
 8009e68:	4602      	mov	r2, r0
 8009e6a:	693b      	ldr	r3, [r7, #16]
 8009e6c:	1ad3      	subs	r3, r2, r3
 8009e6e:	2b02      	cmp	r3, #2
 8009e70:	d901      	bls.n	8009e76 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009e72:	2303      	movs	r3, #3
 8009e74:	e187      	b.n	800a186 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009e76:	4b1b      	ldr	r3, [pc, #108]	@ (8009ee4 <HAL_RCC_OscConfig+0x240>)
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	f003 0302 	and.w	r3, r3, #2
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d1f0      	bne.n	8009e64 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	f003 0308 	and.w	r3, r3, #8
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d036      	beq.n	8009efc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	695b      	ldr	r3, [r3, #20]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d016      	beq.n	8009ec4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009e96:	4b15      	ldr	r3, [pc, #84]	@ (8009eec <HAL_RCC_OscConfig+0x248>)
 8009e98:	2201      	movs	r2, #1
 8009e9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009e9c:	f7f9 fce4 	bl	8003868 <HAL_GetTick>
 8009ea0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009ea2:	e008      	b.n	8009eb6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009ea4:	f7f9 fce0 	bl	8003868 <HAL_GetTick>
 8009ea8:	4602      	mov	r2, r0
 8009eaa:	693b      	ldr	r3, [r7, #16]
 8009eac:	1ad3      	subs	r3, r2, r3
 8009eae:	2b02      	cmp	r3, #2
 8009eb0:	d901      	bls.n	8009eb6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009eb2:	2303      	movs	r3, #3
 8009eb4:	e167      	b.n	800a186 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009eb6:	4b0b      	ldr	r3, [pc, #44]	@ (8009ee4 <HAL_RCC_OscConfig+0x240>)
 8009eb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009eba:	f003 0302 	and.w	r3, r3, #2
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d0f0      	beq.n	8009ea4 <HAL_RCC_OscConfig+0x200>
 8009ec2:	e01b      	b.n	8009efc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009ec4:	4b09      	ldr	r3, [pc, #36]	@ (8009eec <HAL_RCC_OscConfig+0x248>)
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009eca:	f7f9 fccd 	bl	8003868 <HAL_GetTick>
 8009ece:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009ed0:	e00e      	b.n	8009ef0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009ed2:	f7f9 fcc9 	bl	8003868 <HAL_GetTick>
 8009ed6:	4602      	mov	r2, r0
 8009ed8:	693b      	ldr	r3, [r7, #16]
 8009eda:	1ad3      	subs	r3, r2, r3
 8009edc:	2b02      	cmp	r3, #2
 8009ede:	d907      	bls.n	8009ef0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009ee0:	2303      	movs	r3, #3
 8009ee2:	e150      	b.n	800a186 <HAL_RCC_OscConfig+0x4e2>
 8009ee4:	40023800 	.word	0x40023800
 8009ee8:	42470000 	.word	0x42470000
 8009eec:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009ef0:	4b88      	ldr	r3, [pc, #544]	@ (800a114 <HAL_RCC_OscConfig+0x470>)
 8009ef2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009ef4:	f003 0302 	and.w	r3, r3, #2
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d1ea      	bne.n	8009ed2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	f003 0304 	and.w	r3, r3, #4
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	f000 8097 	beq.w	800a038 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009f0e:	4b81      	ldr	r3, [pc, #516]	@ (800a114 <HAL_RCC_OscConfig+0x470>)
 8009f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d10f      	bne.n	8009f3a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	60bb      	str	r3, [r7, #8]
 8009f1e:	4b7d      	ldr	r3, [pc, #500]	@ (800a114 <HAL_RCC_OscConfig+0x470>)
 8009f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f22:	4a7c      	ldr	r2, [pc, #496]	@ (800a114 <HAL_RCC_OscConfig+0x470>)
 8009f24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009f28:	6413      	str	r3, [r2, #64]	@ 0x40
 8009f2a:	4b7a      	ldr	r3, [pc, #488]	@ (800a114 <HAL_RCC_OscConfig+0x470>)
 8009f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009f32:	60bb      	str	r3, [r7, #8]
 8009f34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009f36:	2301      	movs	r3, #1
 8009f38:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009f3a:	4b77      	ldr	r3, [pc, #476]	@ (800a118 <HAL_RCC_OscConfig+0x474>)
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d118      	bne.n	8009f78 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009f46:	4b74      	ldr	r3, [pc, #464]	@ (800a118 <HAL_RCC_OscConfig+0x474>)
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	4a73      	ldr	r2, [pc, #460]	@ (800a118 <HAL_RCC_OscConfig+0x474>)
 8009f4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009f50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009f52:	f7f9 fc89 	bl	8003868 <HAL_GetTick>
 8009f56:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009f58:	e008      	b.n	8009f6c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009f5a:	f7f9 fc85 	bl	8003868 <HAL_GetTick>
 8009f5e:	4602      	mov	r2, r0
 8009f60:	693b      	ldr	r3, [r7, #16]
 8009f62:	1ad3      	subs	r3, r2, r3
 8009f64:	2b02      	cmp	r3, #2
 8009f66:	d901      	bls.n	8009f6c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8009f68:	2303      	movs	r3, #3
 8009f6a:	e10c      	b.n	800a186 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009f6c:	4b6a      	ldr	r3, [pc, #424]	@ (800a118 <HAL_RCC_OscConfig+0x474>)
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d0f0      	beq.n	8009f5a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	689b      	ldr	r3, [r3, #8]
 8009f7c:	2b01      	cmp	r3, #1
 8009f7e:	d106      	bne.n	8009f8e <HAL_RCC_OscConfig+0x2ea>
 8009f80:	4b64      	ldr	r3, [pc, #400]	@ (800a114 <HAL_RCC_OscConfig+0x470>)
 8009f82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009f84:	4a63      	ldr	r2, [pc, #396]	@ (800a114 <HAL_RCC_OscConfig+0x470>)
 8009f86:	f043 0301 	orr.w	r3, r3, #1
 8009f8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8009f8c:	e01c      	b.n	8009fc8 <HAL_RCC_OscConfig+0x324>
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	689b      	ldr	r3, [r3, #8]
 8009f92:	2b05      	cmp	r3, #5
 8009f94:	d10c      	bne.n	8009fb0 <HAL_RCC_OscConfig+0x30c>
 8009f96:	4b5f      	ldr	r3, [pc, #380]	@ (800a114 <HAL_RCC_OscConfig+0x470>)
 8009f98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009f9a:	4a5e      	ldr	r2, [pc, #376]	@ (800a114 <HAL_RCC_OscConfig+0x470>)
 8009f9c:	f043 0304 	orr.w	r3, r3, #4
 8009fa0:	6713      	str	r3, [r2, #112]	@ 0x70
 8009fa2:	4b5c      	ldr	r3, [pc, #368]	@ (800a114 <HAL_RCC_OscConfig+0x470>)
 8009fa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009fa6:	4a5b      	ldr	r2, [pc, #364]	@ (800a114 <HAL_RCC_OscConfig+0x470>)
 8009fa8:	f043 0301 	orr.w	r3, r3, #1
 8009fac:	6713      	str	r3, [r2, #112]	@ 0x70
 8009fae:	e00b      	b.n	8009fc8 <HAL_RCC_OscConfig+0x324>
 8009fb0:	4b58      	ldr	r3, [pc, #352]	@ (800a114 <HAL_RCC_OscConfig+0x470>)
 8009fb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009fb4:	4a57      	ldr	r2, [pc, #348]	@ (800a114 <HAL_RCC_OscConfig+0x470>)
 8009fb6:	f023 0301 	bic.w	r3, r3, #1
 8009fba:	6713      	str	r3, [r2, #112]	@ 0x70
 8009fbc:	4b55      	ldr	r3, [pc, #340]	@ (800a114 <HAL_RCC_OscConfig+0x470>)
 8009fbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009fc0:	4a54      	ldr	r2, [pc, #336]	@ (800a114 <HAL_RCC_OscConfig+0x470>)
 8009fc2:	f023 0304 	bic.w	r3, r3, #4
 8009fc6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	689b      	ldr	r3, [r3, #8]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d015      	beq.n	8009ffc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009fd0:	f7f9 fc4a 	bl	8003868 <HAL_GetTick>
 8009fd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009fd6:	e00a      	b.n	8009fee <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009fd8:	f7f9 fc46 	bl	8003868 <HAL_GetTick>
 8009fdc:	4602      	mov	r2, r0
 8009fde:	693b      	ldr	r3, [r7, #16]
 8009fe0:	1ad3      	subs	r3, r2, r3
 8009fe2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009fe6:	4293      	cmp	r3, r2
 8009fe8:	d901      	bls.n	8009fee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8009fea:	2303      	movs	r3, #3
 8009fec:	e0cb      	b.n	800a186 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009fee:	4b49      	ldr	r3, [pc, #292]	@ (800a114 <HAL_RCC_OscConfig+0x470>)
 8009ff0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009ff2:	f003 0302 	and.w	r3, r3, #2
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d0ee      	beq.n	8009fd8 <HAL_RCC_OscConfig+0x334>
 8009ffa:	e014      	b.n	800a026 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009ffc:	f7f9 fc34 	bl	8003868 <HAL_GetTick>
 800a000:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a002:	e00a      	b.n	800a01a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a004:	f7f9 fc30 	bl	8003868 <HAL_GetTick>
 800a008:	4602      	mov	r2, r0
 800a00a:	693b      	ldr	r3, [r7, #16]
 800a00c:	1ad3      	subs	r3, r2, r3
 800a00e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a012:	4293      	cmp	r3, r2
 800a014:	d901      	bls.n	800a01a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800a016:	2303      	movs	r3, #3
 800a018:	e0b5      	b.n	800a186 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a01a:	4b3e      	ldr	r3, [pc, #248]	@ (800a114 <HAL_RCC_OscConfig+0x470>)
 800a01c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a01e:	f003 0302 	and.w	r3, r3, #2
 800a022:	2b00      	cmp	r3, #0
 800a024:	d1ee      	bne.n	800a004 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a026:	7dfb      	ldrb	r3, [r7, #23]
 800a028:	2b01      	cmp	r3, #1
 800a02a:	d105      	bne.n	800a038 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a02c:	4b39      	ldr	r3, [pc, #228]	@ (800a114 <HAL_RCC_OscConfig+0x470>)
 800a02e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a030:	4a38      	ldr	r2, [pc, #224]	@ (800a114 <HAL_RCC_OscConfig+0x470>)
 800a032:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a036:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	699b      	ldr	r3, [r3, #24]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	f000 80a1 	beq.w	800a184 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a042:	4b34      	ldr	r3, [pc, #208]	@ (800a114 <HAL_RCC_OscConfig+0x470>)
 800a044:	689b      	ldr	r3, [r3, #8]
 800a046:	f003 030c 	and.w	r3, r3, #12
 800a04a:	2b08      	cmp	r3, #8
 800a04c:	d05c      	beq.n	800a108 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	699b      	ldr	r3, [r3, #24]
 800a052:	2b02      	cmp	r3, #2
 800a054:	d141      	bne.n	800a0da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a056:	4b31      	ldr	r3, [pc, #196]	@ (800a11c <HAL_RCC_OscConfig+0x478>)
 800a058:	2200      	movs	r2, #0
 800a05a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a05c:	f7f9 fc04 	bl	8003868 <HAL_GetTick>
 800a060:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a062:	e008      	b.n	800a076 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a064:	f7f9 fc00 	bl	8003868 <HAL_GetTick>
 800a068:	4602      	mov	r2, r0
 800a06a:	693b      	ldr	r3, [r7, #16]
 800a06c:	1ad3      	subs	r3, r2, r3
 800a06e:	2b02      	cmp	r3, #2
 800a070:	d901      	bls.n	800a076 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800a072:	2303      	movs	r3, #3
 800a074:	e087      	b.n	800a186 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a076:	4b27      	ldr	r3, [pc, #156]	@ (800a114 <HAL_RCC_OscConfig+0x470>)
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d1f0      	bne.n	800a064 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	69da      	ldr	r2, [r3, #28]
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	6a1b      	ldr	r3, [r3, #32]
 800a08a:	431a      	orrs	r2, r3
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a090:	019b      	lsls	r3, r3, #6
 800a092:	431a      	orrs	r2, r3
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a098:	085b      	lsrs	r3, r3, #1
 800a09a:	3b01      	subs	r3, #1
 800a09c:	041b      	lsls	r3, r3, #16
 800a09e:	431a      	orrs	r2, r3
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0a4:	061b      	lsls	r3, r3, #24
 800a0a6:	491b      	ldr	r1, [pc, #108]	@ (800a114 <HAL_RCC_OscConfig+0x470>)
 800a0a8:	4313      	orrs	r3, r2
 800a0aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a0ac:	4b1b      	ldr	r3, [pc, #108]	@ (800a11c <HAL_RCC_OscConfig+0x478>)
 800a0ae:	2201      	movs	r2, #1
 800a0b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a0b2:	f7f9 fbd9 	bl	8003868 <HAL_GetTick>
 800a0b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a0b8:	e008      	b.n	800a0cc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a0ba:	f7f9 fbd5 	bl	8003868 <HAL_GetTick>
 800a0be:	4602      	mov	r2, r0
 800a0c0:	693b      	ldr	r3, [r7, #16]
 800a0c2:	1ad3      	subs	r3, r2, r3
 800a0c4:	2b02      	cmp	r3, #2
 800a0c6:	d901      	bls.n	800a0cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800a0c8:	2303      	movs	r3, #3
 800a0ca:	e05c      	b.n	800a186 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a0cc:	4b11      	ldr	r3, [pc, #68]	@ (800a114 <HAL_RCC_OscConfig+0x470>)
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d0f0      	beq.n	800a0ba <HAL_RCC_OscConfig+0x416>
 800a0d8:	e054      	b.n	800a184 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a0da:	4b10      	ldr	r3, [pc, #64]	@ (800a11c <HAL_RCC_OscConfig+0x478>)
 800a0dc:	2200      	movs	r2, #0
 800a0de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a0e0:	f7f9 fbc2 	bl	8003868 <HAL_GetTick>
 800a0e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a0e6:	e008      	b.n	800a0fa <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a0e8:	f7f9 fbbe 	bl	8003868 <HAL_GetTick>
 800a0ec:	4602      	mov	r2, r0
 800a0ee:	693b      	ldr	r3, [r7, #16]
 800a0f0:	1ad3      	subs	r3, r2, r3
 800a0f2:	2b02      	cmp	r3, #2
 800a0f4:	d901      	bls.n	800a0fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800a0f6:	2303      	movs	r3, #3
 800a0f8:	e045      	b.n	800a186 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a0fa:	4b06      	ldr	r3, [pc, #24]	@ (800a114 <HAL_RCC_OscConfig+0x470>)
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a102:	2b00      	cmp	r3, #0
 800a104:	d1f0      	bne.n	800a0e8 <HAL_RCC_OscConfig+0x444>
 800a106:	e03d      	b.n	800a184 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	699b      	ldr	r3, [r3, #24]
 800a10c:	2b01      	cmp	r3, #1
 800a10e:	d107      	bne.n	800a120 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800a110:	2301      	movs	r3, #1
 800a112:	e038      	b.n	800a186 <HAL_RCC_OscConfig+0x4e2>
 800a114:	40023800 	.word	0x40023800
 800a118:	40007000 	.word	0x40007000
 800a11c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800a120:	4b1b      	ldr	r3, [pc, #108]	@ (800a190 <HAL_RCC_OscConfig+0x4ec>)
 800a122:	685b      	ldr	r3, [r3, #4]
 800a124:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	699b      	ldr	r3, [r3, #24]
 800a12a:	2b01      	cmp	r3, #1
 800a12c:	d028      	beq.n	800a180 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a138:	429a      	cmp	r2, r3
 800a13a:	d121      	bne.n	800a180 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a146:	429a      	cmp	r2, r3
 800a148:	d11a      	bne.n	800a180 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a14a:	68fa      	ldr	r2, [r7, #12]
 800a14c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800a150:	4013      	ands	r3, r2
 800a152:	687a      	ldr	r2, [r7, #4]
 800a154:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800a156:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a158:	4293      	cmp	r3, r2
 800a15a:	d111      	bne.n	800a180 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a166:	085b      	lsrs	r3, r3, #1
 800a168:	3b01      	subs	r3, #1
 800a16a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a16c:	429a      	cmp	r2, r3
 800a16e:	d107      	bne.n	800a180 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a17a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a17c:	429a      	cmp	r2, r3
 800a17e:	d001      	beq.n	800a184 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800a180:	2301      	movs	r3, #1
 800a182:	e000      	b.n	800a186 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800a184:	2300      	movs	r3, #0
}
 800a186:	4618      	mov	r0, r3
 800a188:	3718      	adds	r7, #24
 800a18a:	46bd      	mov	sp, r7
 800a18c:	bd80      	pop	{r7, pc}
 800a18e:	bf00      	nop
 800a190:	40023800 	.word	0x40023800

0800a194 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a194:	b580      	push	{r7, lr}
 800a196:	b084      	sub	sp, #16
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
 800a19c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d101      	bne.n	800a1a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a1a4:	2301      	movs	r3, #1
 800a1a6:	e0cc      	b.n	800a342 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a1a8:	4b68      	ldr	r3, [pc, #416]	@ (800a34c <HAL_RCC_ClockConfig+0x1b8>)
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	f003 0307 	and.w	r3, r3, #7
 800a1b0:	683a      	ldr	r2, [r7, #0]
 800a1b2:	429a      	cmp	r2, r3
 800a1b4:	d90c      	bls.n	800a1d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a1b6:	4b65      	ldr	r3, [pc, #404]	@ (800a34c <HAL_RCC_ClockConfig+0x1b8>)
 800a1b8:	683a      	ldr	r2, [r7, #0]
 800a1ba:	b2d2      	uxtb	r2, r2
 800a1bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a1be:	4b63      	ldr	r3, [pc, #396]	@ (800a34c <HAL_RCC_ClockConfig+0x1b8>)
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	f003 0307 	and.w	r3, r3, #7
 800a1c6:	683a      	ldr	r2, [r7, #0]
 800a1c8:	429a      	cmp	r2, r3
 800a1ca:	d001      	beq.n	800a1d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a1cc:	2301      	movs	r3, #1
 800a1ce:	e0b8      	b.n	800a342 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	f003 0302 	and.w	r3, r3, #2
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d020      	beq.n	800a21e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	f003 0304 	and.w	r3, r3, #4
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d005      	beq.n	800a1f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a1e8:	4b59      	ldr	r3, [pc, #356]	@ (800a350 <HAL_RCC_ClockConfig+0x1bc>)
 800a1ea:	689b      	ldr	r3, [r3, #8]
 800a1ec:	4a58      	ldr	r2, [pc, #352]	@ (800a350 <HAL_RCC_ClockConfig+0x1bc>)
 800a1ee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800a1f2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	f003 0308 	and.w	r3, r3, #8
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d005      	beq.n	800a20c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a200:	4b53      	ldr	r3, [pc, #332]	@ (800a350 <HAL_RCC_ClockConfig+0x1bc>)
 800a202:	689b      	ldr	r3, [r3, #8]
 800a204:	4a52      	ldr	r2, [pc, #328]	@ (800a350 <HAL_RCC_ClockConfig+0x1bc>)
 800a206:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800a20a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a20c:	4b50      	ldr	r3, [pc, #320]	@ (800a350 <HAL_RCC_ClockConfig+0x1bc>)
 800a20e:	689b      	ldr	r3, [r3, #8]
 800a210:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	689b      	ldr	r3, [r3, #8]
 800a218:	494d      	ldr	r1, [pc, #308]	@ (800a350 <HAL_RCC_ClockConfig+0x1bc>)
 800a21a:	4313      	orrs	r3, r2
 800a21c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	f003 0301 	and.w	r3, r3, #1
 800a226:	2b00      	cmp	r3, #0
 800a228:	d044      	beq.n	800a2b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	685b      	ldr	r3, [r3, #4]
 800a22e:	2b01      	cmp	r3, #1
 800a230:	d107      	bne.n	800a242 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a232:	4b47      	ldr	r3, [pc, #284]	@ (800a350 <HAL_RCC_ClockConfig+0x1bc>)
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d119      	bne.n	800a272 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a23e:	2301      	movs	r3, #1
 800a240:	e07f      	b.n	800a342 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	685b      	ldr	r3, [r3, #4]
 800a246:	2b02      	cmp	r3, #2
 800a248:	d003      	beq.n	800a252 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a24e:	2b03      	cmp	r3, #3
 800a250:	d107      	bne.n	800a262 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a252:	4b3f      	ldr	r3, [pc, #252]	@ (800a350 <HAL_RCC_ClockConfig+0x1bc>)
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d109      	bne.n	800a272 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a25e:	2301      	movs	r3, #1
 800a260:	e06f      	b.n	800a342 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a262:	4b3b      	ldr	r3, [pc, #236]	@ (800a350 <HAL_RCC_ClockConfig+0x1bc>)
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	f003 0302 	and.w	r3, r3, #2
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d101      	bne.n	800a272 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a26e:	2301      	movs	r3, #1
 800a270:	e067      	b.n	800a342 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a272:	4b37      	ldr	r3, [pc, #220]	@ (800a350 <HAL_RCC_ClockConfig+0x1bc>)
 800a274:	689b      	ldr	r3, [r3, #8]
 800a276:	f023 0203 	bic.w	r2, r3, #3
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	685b      	ldr	r3, [r3, #4]
 800a27e:	4934      	ldr	r1, [pc, #208]	@ (800a350 <HAL_RCC_ClockConfig+0x1bc>)
 800a280:	4313      	orrs	r3, r2
 800a282:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a284:	f7f9 faf0 	bl	8003868 <HAL_GetTick>
 800a288:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a28a:	e00a      	b.n	800a2a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a28c:	f7f9 faec 	bl	8003868 <HAL_GetTick>
 800a290:	4602      	mov	r2, r0
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	1ad3      	subs	r3, r2, r3
 800a296:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a29a:	4293      	cmp	r3, r2
 800a29c:	d901      	bls.n	800a2a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a29e:	2303      	movs	r3, #3
 800a2a0:	e04f      	b.n	800a342 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a2a2:	4b2b      	ldr	r3, [pc, #172]	@ (800a350 <HAL_RCC_ClockConfig+0x1bc>)
 800a2a4:	689b      	ldr	r3, [r3, #8]
 800a2a6:	f003 020c 	and.w	r2, r3, #12
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	685b      	ldr	r3, [r3, #4]
 800a2ae:	009b      	lsls	r3, r3, #2
 800a2b0:	429a      	cmp	r2, r3
 800a2b2:	d1eb      	bne.n	800a28c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a2b4:	4b25      	ldr	r3, [pc, #148]	@ (800a34c <HAL_RCC_ClockConfig+0x1b8>)
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	f003 0307 	and.w	r3, r3, #7
 800a2bc:	683a      	ldr	r2, [r7, #0]
 800a2be:	429a      	cmp	r2, r3
 800a2c0:	d20c      	bcs.n	800a2dc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a2c2:	4b22      	ldr	r3, [pc, #136]	@ (800a34c <HAL_RCC_ClockConfig+0x1b8>)
 800a2c4:	683a      	ldr	r2, [r7, #0]
 800a2c6:	b2d2      	uxtb	r2, r2
 800a2c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a2ca:	4b20      	ldr	r3, [pc, #128]	@ (800a34c <HAL_RCC_ClockConfig+0x1b8>)
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	f003 0307 	and.w	r3, r3, #7
 800a2d2:	683a      	ldr	r2, [r7, #0]
 800a2d4:	429a      	cmp	r2, r3
 800a2d6:	d001      	beq.n	800a2dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a2d8:	2301      	movs	r3, #1
 800a2da:	e032      	b.n	800a342 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	f003 0304 	and.w	r3, r3, #4
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d008      	beq.n	800a2fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a2e8:	4b19      	ldr	r3, [pc, #100]	@ (800a350 <HAL_RCC_ClockConfig+0x1bc>)
 800a2ea:	689b      	ldr	r3, [r3, #8]
 800a2ec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	68db      	ldr	r3, [r3, #12]
 800a2f4:	4916      	ldr	r1, [pc, #88]	@ (800a350 <HAL_RCC_ClockConfig+0x1bc>)
 800a2f6:	4313      	orrs	r3, r2
 800a2f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	f003 0308 	and.w	r3, r3, #8
 800a302:	2b00      	cmp	r3, #0
 800a304:	d009      	beq.n	800a31a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a306:	4b12      	ldr	r3, [pc, #72]	@ (800a350 <HAL_RCC_ClockConfig+0x1bc>)
 800a308:	689b      	ldr	r3, [r3, #8]
 800a30a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	691b      	ldr	r3, [r3, #16]
 800a312:	00db      	lsls	r3, r3, #3
 800a314:	490e      	ldr	r1, [pc, #56]	@ (800a350 <HAL_RCC_ClockConfig+0x1bc>)
 800a316:	4313      	orrs	r3, r2
 800a318:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a31a:	f000 f82d 	bl	800a378 <HAL_RCC_GetSysClockFreq>
 800a31e:	4602      	mov	r2, r0
 800a320:	4b0b      	ldr	r3, [pc, #44]	@ (800a350 <HAL_RCC_ClockConfig+0x1bc>)
 800a322:	689b      	ldr	r3, [r3, #8]
 800a324:	091b      	lsrs	r3, r3, #4
 800a326:	f003 030f 	and.w	r3, r3, #15
 800a32a:	490a      	ldr	r1, [pc, #40]	@ (800a354 <HAL_RCC_ClockConfig+0x1c0>)
 800a32c:	5ccb      	ldrb	r3, [r1, r3]
 800a32e:	fa22 f303 	lsr.w	r3, r2, r3
 800a332:	4a09      	ldr	r2, [pc, #36]	@ (800a358 <HAL_RCC_ClockConfig+0x1c4>)
 800a334:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800a336:	4b09      	ldr	r3, [pc, #36]	@ (800a35c <HAL_RCC_ClockConfig+0x1c8>)
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	4618      	mov	r0, r3
 800a33c:	f7f9 fa50 	bl	80037e0 <HAL_InitTick>

  return HAL_OK;
 800a340:	2300      	movs	r3, #0
}
 800a342:	4618      	mov	r0, r3
 800a344:	3710      	adds	r7, #16
 800a346:	46bd      	mov	sp, r7
 800a348:	bd80      	pop	{r7, pc}
 800a34a:	bf00      	nop
 800a34c:	40023c00 	.word	0x40023c00
 800a350:	40023800 	.word	0x40023800
 800a354:	08011154 	.word	0x08011154
 800a358:	2000000c 	.word	0x2000000c
 800a35c:	20000010 	.word	0x20000010

0800a360 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800a360:	b480      	push	{r7}
 800a362:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 800a364:	4b03      	ldr	r3, [pc, #12]	@ (800a374 <HAL_RCC_EnableCSS+0x14>)
 800a366:	2201      	movs	r2, #1
 800a368:	601a      	str	r2, [r3, #0]
}
 800a36a:	bf00      	nop
 800a36c:	46bd      	mov	sp, r7
 800a36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a372:	4770      	bx	lr
 800a374:	4247004c 	.word	0x4247004c

0800a378 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a378:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a37c:	b090      	sub	sp, #64	@ 0x40
 800a37e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800a380:	2300      	movs	r3, #0
 800a382:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800a384:	2300      	movs	r3, #0
 800a386:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800a388:	2300      	movs	r3, #0
 800a38a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800a38c:	2300      	movs	r3, #0
 800a38e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a390:	4b59      	ldr	r3, [pc, #356]	@ (800a4f8 <HAL_RCC_GetSysClockFreq+0x180>)
 800a392:	689b      	ldr	r3, [r3, #8]
 800a394:	f003 030c 	and.w	r3, r3, #12
 800a398:	2b08      	cmp	r3, #8
 800a39a:	d00d      	beq.n	800a3b8 <HAL_RCC_GetSysClockFreq+0x40>
 800a39c:	2b08      	cmp	r3, #8
 800a39e:	f200 80a1 	bhi.w	800a4e4 <HAL_RCC_GetSysClockFreq+0x16c>
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d002      	beq.n	800a3ac <HAL_RCC_GetSysClockFreq+0x34>
 800a3a6:	2b04      	cmp	r3, #4
 800a3a8:	d003      	beq.n	800a3b2 <HAL_RCC_GetSysClockFreq+0x3a>
 800a3aa:	e09b      	b.n	800a4e4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a3ac:	4b53      	ldr	r3, [pc, #332]	@ (800a4fc <HAL_RCC_GetSysClockFreq+0x184>)
 800a3ae:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a3b0:	e09b      	b.n	800a4ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a3b2:	4b53      	ldr	r3, [pc, #332]	@ (800a500 <HAL_RCC_GetSysClockFreq+0x188>)
 800a3b4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a3b6:	e098      	b.n	800a4ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a3b8:	4b4f      	ldr	r3, [pc, #316]	@ (800a4f8 <HAL_RCC_GetSysClockFreq+0x180>)
 800a3ba:	685b      	ldr	r3, [r3, #4]
 800a3bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a3c0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a3c2:	4b4d      	ldr	r3, [pc, #308]	@ (800a4f8 <HAL_RCC_GetSysClockFreq+0x180>)
 800a3c4:	685b      	ldr	r3, [r3, #4]
 800a3c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d028      	beq.n	800a420 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a3ce:	4b4a      	ldr	r3, [pc, #296]	@ (800a4f8 <HAL_RCC_GetSysClockFreq+0x180>)
 800a3d0:	685b      	ldr	r3, [r3, #4]
 800a3d2:	099b      	lsrs	r3, r3, #6
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	623b      	str	r3, [r7, #32]
 800a3d8:	627a      	str	r2, [r7, #36]	@ 0x24
 800a3da:	6a3b      	ldr	r3, [r7, #32]
 800a3dc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800a3e0:	2100      	movs	r1, #0
 800a3e2:	4b47      	ldr	r3, [pc, #284]	@ (800a500 <HAL_RCC_GetSysClockFreq+0x188>)
 800a3e4:	fb03 f201 	mul.w	r2, r3, r1
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	fb00 f303 	mul.w	r3, r0, r3
 800a3ee:	4413      	add	r3, r2
 800a3f0:	4a43      	ldr	r2, [pc, #268]	@ (800a500 <HAL_RCC_GetSysClockFreq+0x188>)
 800a3f2:	fba0 1202 	umull	r1, r2, r0, r2
 800a3f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a3f8:	460a      	mov	r2, r1
 800a3fa:	62ba      	str	r2, [r7, #40]	@ 0x28
 800a3fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a3fe:	4413      	add	r3, r2
 800a400:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a402:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a404:	2200      	movs	r2, #0
 800a406:	61bb      	str	r3, [r7, #24]
 800a408:	61fa      	str	r2, [r7, #28]
 800a40a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a40e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800a412:	f7f5 ff35 	bl	8000280 <__aeabi_uldivmod>
 800a416:	4602      	mov	r2, r0
 800a418:	460b      	mov	r3, r1
 800a41a:	4613      	mov	r3, r2
 800a41c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a41e:	e053      	b.n	800a4c8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a420:	4b35      	ldr	r3, [pc, #212]	@ (800a4f8 <HAL_RCC_GetSysClockFreq+0x180>)
 800a422:	685b      	ldr	r3, [r3, #4]
 800a424:	099b      	lsrs	r3, r3, #6
 800a426:	2200      	movs	r2, #0
 800a428:	613b      	str	r3, [r7, #16]
 800a42a:	617a      	str	r2, [r7, #20]
 800a42c:	693b      	ldr	r3, [r7, #16]
 800a42e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800a432:	f04f 0b00 	mov.w	fp, #0
 800a436:	4652      	mov	r2, sl
 800a438:	465b      	mov	r3, fp
 800a43a:	f04f 0000 	mov.w	r0, #0
 800a43e:	f04f 0100 	mov.w	r1, #0
 800a442:	0159      	lsls	r1, r3, #5
 800a444:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a448:	0150      	lsls	r0, r2, #5
 800a44a:	4602      	mov	r2, r0
 800a44c:	460b      	mov	r3, r1
 800a44e:	ebb2 080a 	subs.w	r8, r2, sl
 800a452:	eb63 090b 	sbc.w	r9, r3, fp
 800a456:	f04f 0200 	mov.w	r2, #0
 800a45a:	f04f 0300 	mov.w	r3, #0
 800a45e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800a462:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800a466:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800a46a:	ebb2 0408 	subs.w	r4, r2, r8
 800a46e:	eb63 0509 	sbc.w	r5, r3, r9
 800a472:	f04f 0200 	mov.w	r2, #0
 800a476:	f04f 0300 	mov.w	r3, #0
 800a47a:	00eb      	lsls	r3, r5, #3
 800a47c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a480:	00e2      	lsls	r2, r4, #3
 800a482:	4614      	mov	r4, r2
 800a484:	461d      	mov	r5, r3
 800a486:	eb14 030a 	adds.w	r3, r4, sl
 800a48a:	603b      	str	r3, [r7, #0]
 800a48c:	eb45 030b 	adc.w	r3, r5, fp
 800a490:	607b      	str	r3, [r7, #4]
 800a492:	f04f 0200 	mov.w	r2, #0
 800a496:	f04f 0300 	mov.w	r3, #0
 800a49a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a49e:	4629      	mov	r1, r5
 800a4a0:	028b      	lsls	r3, r1, #10
 800a4a2:	4621      	mov	r1, r4
 800a4a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a4a8:	4621      	mov	r1, r4
 800a4aa:	028a      	lsls	r2, r1, #10
 800a4ac:	4610      	mov	r0, r2
 800a4ae:	4619      	mov	r1, r3
 800a4b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	60bb      	str	r3, [r7, #8]
 800a4b6:	60fa      	str	r2, [r7, #12]
 800a4b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a4bc:	f7f5 fee0 	bl	8000280 <__aeabi_uldivmod>
 800a4c0:	4602      	mov	r2, r0
 800a4c2:	460b      	mov	r3, r1
 800a4c4:	4613      	mov	r3, r2
 800a4c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800a4c8:	4b0b      	ldr	r3, [pc, #44]	@ (800a4f8 <HAL_RCC_GetSysClockFreq+0x180>)
 800a4ca:	685b      	ldr	r3, [r3, #4]
 800a4cc:	0c1b      	lsrs	r3, r3, #16
 800a4ce:	f003 0303 	and.w	r3, r3, #3
 800a4d2:	3301      	adds	r3, #1
 800a4d4:	005b      	lsls	r3, r3, #1
 800a4d6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800a4d8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a4da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4dc:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4e0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a4e2:	e002      	b.n	800a4ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a4e4:	4b05      	ldr	r3, [pc, #20]	@ (800a4fc <HAL_RCC_GetSysClockFreq+0x184>)
 800a4e6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a4e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a4ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	3740      	adds	r7, #64	@ 0x40
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a4f6:	bf00      	nop
 800a4f8:	40023800 	.word	0x40023800
 800a4fc:	00f42400 	.word	0x00f42400
 800a500:	017d7840 	.word	0x017d7840

0800a504 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a504:	b480      	push	{r7}
 800a506:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a508:	4b03      	ldr	r3, [pc, #12]	@ (800a518 <HAL_RCC_GetHCLKFreq+0x14>)
 800a50a:	681b      	ldr	r3, [r3, #0]
}
 800a50c:	4618      	mov	r0, r3
 800a50e:	46bd      	mov	sp, r7
 800a510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a514:	4770      	bx	lr
 800a516:	bf00      	nop
 800a518:	2000000c 	.word	0x2000000c

0800a51c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a520:	f7ff fff0 	bl	800a504 <HAL_RCC_GetHCLKFreq>
 800a524:	4602      	mov	r2, r0
 800a526:	4b05      	ldr	r3, [pc, #20]	@ (800a53c <HAL_RCC_GetPCLK1Freq+0x20>)
 800a528:	689b      	ldr	r3, [r3, #8]
 800a52a:	0a9b      	lsrs	r3, r3, #10
 800a52c:	f003 0307 	and.w	r3, r3, #7
 800a530:	4903      	ldr	r1, [pc, #12]	@ (800a540 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a532:	5ccb      	ldrb	r3, [r1, r3]
 800a534:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a538:	4618      	mov	r0, r3
 800a53a:	bd80      	pop	{r7, pc}
 800a53c:	40023800 	.word	0x40023800
 800a540:	08011164 	.word	0x08011164

0800a544 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800a544:	b580      	push	{r7, lr}
 800a546:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 800a548:	4b06      	ldr	r3, [pc, #24]	@ (800a564 <HAL_RCC_NMI_IRQHandler+0x20>)
 800a54a:	68db      	ldr	r3, [r3, #12]
 800a54c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a550:	2b80      	cmp	r3, #128	@ 0x80
 800a552:	d104      	bne.n	800a55e <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800a554:	f000 f80a 	bl	800a56c <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800a558:	4b03      	ldr	r3, [pc, #12]	@ (800a568 <HAL_RCC_NMI_IRQHandler+0x24>)
 800a55a:	2280      	movs	r2, #128	@ 0x80
 800a55c:	701a      	strb	r2, [r3, #0]
  }
}
 800a55e:	bf00      	nop
 800a560:	bd80      	pop	{r7, pc}
 800a562:	bf00      	nop
 800a564:	40023800 	.word	0x40023800
 800a568:	4002380e 	.word	0x4002380e

0800a56c <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800a56c:	b480      	push	{r7}
 800a56e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 800a570:	bf00      	nop
 800a572:	46bd      	mov	sp, r7
 800a574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a578:	4770      	bx	lr

0800a57a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a57a:	b580      	push	{r7, lr}
 800a57c:	b082      	sub	sp, #8
 800a57e:	af00      	add	r7, sp, #0
 800a580:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d101      	bne.n	800a58c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a588:	2301      	movs	r3, #1
 800a58a:	e041      	b.n	800a610 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a592:	b2db      	uxtb	r3, r3
 800a594:	2b00      	cmp	r3, #0
 800a596:	d106      	bne.n	800a5a6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2200      	movs	r2, #0
 800a59c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a5a0:	6878      	ldr	r0, [r7, #4]
 800a5a2:	f7f8 ff65 	bl	8003470 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	2202      	movs	r2, #2
 800a5aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681a      	ldr	r2, [r3, #0]
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	3304      	adds	r3, #4
 800a5b6:	4619      	mov	r1, r3
 800a5b8:	4610      	mov	r0, r2
 800a5ba:	f000 fc3b 	bl	800ae34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	2201      	movs	r2, #1
 800a5c2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	2201      	movs	r2, #1
 800a5ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	2201      	movs	r2, #1
 800a5d2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	2201      	movs	r2, #1
 800a5da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	2201      	movs	r2, #1
 800a5e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	2201      	movs	r2, #1
 800a5ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	2201      	movs	r2, #1
 800a5f2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	2201      	movs	r2, #1
 800a5fa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	2201      	movs	r2, #1
 800a602:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	2201      	movs	r2, #1
 800a60a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a60e:	2300      	movs	r3, #0
}
 800a610:	4618      	mov	r0, r3
 800a612:	3708      	adds	r7, #8
 800a614:	46bd      	mov	sp, r7
 800a616:	bd80      	pop	{r7, pc}

0800a618 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a618:	b480      	push	{r7}
 800a61a:	b085      	sub	sp, #20
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a626:	b2db      	uxtb	r3, r3
 800a628:	2b01      	cmp	r3, #1
 800a62a:	d001      	beq.n	800a630 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a62c:	2301      	movs	r3, #1
 800a62e:	e044      	b.n	800a6ba <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	2202      	movs	r2, #2
 800a634:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	68da      	ldr	r2, [r3, #12]
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	f042 0201 	orr.w	r2, r2, #1
 800a646:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	4a1e      	ldr	r2, [pc, #120]	@ (800a6c8 <HAL_TIM_Base_Start_IT+0xb0>)
 800a64e:	4293      	cmp	r3, r2
 800a650:	d018      	beq.n	800a684 <HAL_TIM_Base_Start_IT+0x6c>
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a65a:	d013      	beq.n	800a684 <HAL_TIM_Base_Start_IT+0x6c>
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	4a1a      	ldr	r2, [pc, #104]	@ (800a6cc <HAL_TIM_Base_Start_IT+0xb4>)
 800a662:	4293      	cmp	r3, r2
 800a664:	d00e      	beq.n	800a684 <HAL_TIM_Base_Start_IT+0x6c>
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	4a19      	ldr	r2, [pc, #100]	@ (800a6d0 <HAL_TIM_Base_Start_IT+0xb8>)
 800a66c:	4293      	cmp	r3, r2
 800a66e:	d009      	beq.n	800a684 <HAL_TIM_Base_Start_IT+0x6c>
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	4a17      	ldr	r2, [pc, #92]	@ (800a6d4 <HAL_TIM_Base_Start_IT+0xbc>)
 800a676:	4293      	cmp	r3, r2
 800a678:	d004      	beq.n	800a684 <HAL_TIM_Base_Start_IT+0x6c>
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	4a16      	ldr	r2, [pc, #88]	@ (800a6d8 <HAL_TIM_Base_Start_IT+0xc0>)
 800a680:	4293      	cmp	r3, r2
 800a682:	d111      	bne.n	800a6a8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	689b      	ldr	r3, [r3, #8]
 800a68a:	f003 0307 	and.w	r3, r3, #7
 800a68e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	2b06      	cmp	r3, #6
 800a694:	d010      	beq.n	800a6b8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	681a      	ldr	r2, [r3, #0]
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	f042 0201 	orr.w	r2, r2, #1
 800a6a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a6a6:	e007      	b.n	800a6b8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	681a      	ldr	r2, [r3, #0]
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	f042 0201 	orr.w	r2, r2, #1
 800a6b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a6b8:	2300      	movs	r3, #0
}
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	3714      	adds	r7, #20
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c4:	4770      	bx	lr
 800a6c6:	bf00      	nop
 800a6c8:	40010000 	.word	0x40010000
 800a6cc:	40000400 	.word	0x40000400
 800a6d0:	40000800 	.word	0x40000800
 800a6d4:	40000c00 	.word	0x40000c00
 800a6d8:	40014000 	.word	0x40014000

0800a6dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	b082      	sub	sp, #8
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d101      	bne.n	800a6ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a6ea:	2301      	movs	r3, #1
 800a6ec:	e041      	b.n	800a772 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a6f4:	b2db      	uxtb	r3, r3
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d106      	bne.n	800a708 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a702:	6878      	ldr	r0, [r7, #4]
 800a704:	f000 f839 	bl	800a77a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2202      	movs	r2, #2
 800a70c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681a      	ldr	r2, [r3, #0]
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	3304      	adds	r3, #4
 800a718:	4619      	mov	r1, r3
 800a71a:	4610      	mov	r0, r2
 800a71c:	f000 fb8a 	bl	800ae34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	2201      	movs	r2, #1
 800a724:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2201      	movs	r2, #1
 800a72c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2201      	movs	r2, #1
 800a734:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	2201      	movs	r2, #1
 800a73c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	2201      	movs	r2, #1
 800a744:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	2201      	movs	r2, #1
 800a74c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	2201      	movs	r2, #1
 800a754:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	2201      	movs	r2, #1
 800a75c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	2201      	movs	r2, #1
 800a764:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	2201      	movs	r2, #1
 800a76c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a770:	2300      	movs	r3, #0
}
 800a772:	4618      	mov	r0, r3
 800a774:	3708      	adds	r7, #8
 800a776:	46bd      	mov	sp, r7
 800a778:	bd80      	pop	{r7, pc}

0800a77a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a77a:	b480      	push	{r7}
 800a77c:	b083      	sub	sp, #12
 800a77e:	af00      	add	r7, sp, #0
 800a780:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a782:	bf00      	nop
 800a784:	370c      	adds	r7, #12
 800a786:	46bd      	mov	sp, r7
 800a788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78c:	4770      	bx	lr
	...

0800a790 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b084      	sub	sp, #16
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
 800a798:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d109      	bne.n	800a7b4 <HAL_TIM_PWM_Start+0x24>
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a7a6:	b2db      	uxtb	r3, r3
 800a7a8:	2b01      	cmp	r3, #1
 800a7aa:	bf14      	ite	ne
 800a7ac:	2301      	movne	r3, #1
 800a7ae:	2300      	moveq	r3, #0
 800a7b0:	b2db      	uxtb	r3, r3
 800a7b2:	e022      	b.n	800a7fa <HAL_TIM_PWM_Start+0x6a>
 800a7b4:	683b      	ldr	r3, [r7, #0]
 800a7b6:	2b04      	cmp	r3, #4
 800a7b8:	d109      	bne.n	800a7ce <HAL_TIM_PWM_Start+0x3e>
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a7c0:	b2db      	uxtb	r3, r3
 800a7c2:	2b01      	cmp	r3, #1
 800a7c4:	bf14      	ite	ne
 800a7c6:	2301      	movne	r3, #1
 800a7c8:	2300      	moveq	r3, #0
 800a7ca:	b2db      	uxtb	r3, r3
 800a7cc:	e015      	b.n	800a7fa <HAL_TIM_PWM_Start+0x6a>
 800a7ce:	683b      	ldr	r3, [r7, #0]
 800a7d0:	2b08      	cmp	r3, #8
 800a7d2:	d109      	bne.n	800a7e8 <HAL_TIM_PWM_Start+0x58>
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a7da:	b2db      	uxtb	r3, r3
 800a7dc:	2b01      	cmp	r3, #1
 800a7de:	bf14      	ite	ne
 800a7e0:	2301      	movne	r3, #1
 800a7e2:	2300      	moveq	r3, #0
 800a7e4:	b2db      	uxtb	r3, r3
 800a7e6:	e008      	b.n	800a7fa <HAL_TIM_PWM_Start+0x6a>
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a7ee:	b2db      	uxtb	r3, r3
 800a7f0:	2b01      	cmp	r3, #1
 800a7f2:	bf14      	ite	ne
 800a7f4:	2301      	movne	r3, #1
 800a7f6:	2300      	moveq	r3, #0
 800a7f8:	b2db      	uxtb	r3, r3
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d001      	beq.n	800a802 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800a7fe:	2301      	movs	r3, #1
 800a800:	e068      	b.n	800a8d4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a802:	683b      	ldr	r3, [r7, #0]
 800a804:	2b00      	cmp	r3, #0
 800a806:	d104      	bne.n	800a812 <HAL_TIM_PWM_Start+0x82>
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	2202      	movs	r2, #2
 800a80c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a810:	e013      	b.n	800a83a <HAL_TIM_PWM_Start+0xaa>
 800a812:	683b      	ldr	r3, [r7, #0]
 800a814:	2b04      	cmp	r3, #4
 800a816:	d104      	bne.n	800a822 <HAL_TIM_PWM_Start+0x92>
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	2202      	movs	r2, #2
 800a81c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a820:	e00b      	b.n	800a83a <HAL_TIM_PWM_Start+0xaa>
 800a822:	683b      	ldr	r3, [r7, #0]
 800a824:	2b08      	cmp	r3, #8
 800a826:	d104      	bne.n	800a832 <HAL_TIM_PWM_Start+0xa2>
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	2202      	movs	r2, #2
 800a82c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a830:	e003      	b.n	800a83a <HAL_TIM_PWM_Start+0xaa>
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	2202      	movs	r2, #2
 800a836:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	2201      	movs	r2, #1
 800a840:	6839      	ldr	r1, [r7, #0]
 800a842:	4618      	mov	r0, r3
 800a844:	f000 fda8 	bl	800b398 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	4a23      	ldr	r2, [pc, #140]	@ (800a8dc <HAL_TIM_PWM_Start+0x14c>)
 800a84e:	4293      	cmp	r3, r2
 800a850:	d107      	bne.n	800a862 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a860:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	4a1d      	ldr	r2, [pc, #116]	@ (800a8dc <HAL_TIM_PWM_Start+0x14c>)
 800a868:	4293      	cmp	r3, r2
 800a86a:	d018      	beq.n	800a89e <HAL_TIM_PWM_Start+0x10e>
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a874:	d013      	beq.n	800a89e <HAL_TIM_PWM_Start+0x10e>
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	4a19      	ldr	r2, [pc, #100]	@ (800a8e0 <HAL_TIM_PWM_Start+0x150>)
 800a87c:	4293      	cmp	r3, r2
 800a87e:	d00e      	beq.n	800a89e <HAL_TIM_PWM_Start+0x10e>
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	4a17      	ldr	r2, [pc, #92]	@ (800a8e4 <HAL_TIM_PWM_Start+0x154>)
 800a886:	4293      	cmp	r3, r2
 800a888:	d009      	beq.n	800a89e <HAL_TIM_PWM_Start+0x10e>
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	4a16      	ldr	r2, [pc, #88]	@ (800a8e8 <HAL_TIM_PWM_Start+0x158>)
 800a890:	4293      	cmp	r3, r2
 800a892:	d004      	beq.n	800a89e <HAL_TIM_PWM_Start+0x10e>
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	4a14      	ldr	r2, [pc, #80]	@ (800a8ec <HAL_TIM_PWM_Start+0x15c>)
 800a89a:	4293      	cmp	r3, r2
 800a89c:	d111      	bne.n	800a8c2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	689b      	ldr	r3, [r3, #8]
 800a8a4:	f003 0307 	and.w	r3, r3, #7
 800a8a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	2b06      	cmp	r3, #6
 800a8ae:	d010      	beq.n	800a8d2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	681a      	ldr	r2, [r3, #0]
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	f042 0201 	orr.w	r2, r2, #1
 800a8be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a8c0:	e007      	b.n	800a8d2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	681a      	ldr	r2, [r3, #0]
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	f042 0201 	orr.w	r2, r2, #1
 800a8d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a8d2:	2300      	movs	r3, #0
}
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	3710      	adds	r7, #16
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	bd80      	pop	{r7, pc}
 800a8dc:	40010000 	.word	0x40010000
 800a8e0:	40000400 	.word	0x40000400
 800a8e4:	40000800 	.word	0x40000800
 800a8e8:	40000c00 	.word	0x40000c00
 800a8ec:	40014000 	.word	0x40014000

0800a8f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b084      	sub	sp, #16
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	68db      	ldr	r3, [r3, #12]
 800a8fe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	691b      	ldr	r3, [r3, #16]
 800a906:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a908:	68bb      	ldr	r3, [r7, #8]
 800a90a:	f003 0302 	and.w	r3, r3, #2
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d020      	beq.n	800a954 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	f003 0302 	and.w	r3, r3, #2
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d01b      	beq.n	800a954 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	f06f 0202 	mvn.w	r2, #2
 800a924:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	2201      	movs	r2, #1
 800a92a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	699b      	ldr	r3, [r3, #24]
 800a932:	f003 0303 	and.w	r3, r3, #3
 800a936:	2b00      	cmp	r3, #0
 800a938:	d003      	beq.n	800a942 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a93a:	6878      	ldr	r0, [r7, #4]
 800a93c:	f000 fa5b 	bl	800adf6 <HAL_TIM_IC_CaptureCallback>
 800a940:	e005      	b.n	800a94e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a942:	6878      	ldr	r0, [r7, #4]
 800a944:	f000 fa4d 	bl	800ade2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a948:	6878      	ldr	r0, [r7, #4]
 800a94a:	f000 fa5e 	bl	800ae0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	2200      	movs	r2, #0
 800a952:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a954:	68bb      	ldr	r3, [r7, #8]
 800a956:	f003 0304 	and.w	r3, r3, #4
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d020      	beq.n	800a9a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	f003 0304 	and.w	r3, r3, #4
 800a964:	2b00      	cmp	r3, #0
 800a966:	d01b      	beq.n	800a9a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	f06f 0204 	mvn.w	r2, #4
 800a970:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	2202      	movs	r2, #2
 800a976:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	699b      	ldr	r3, [r3, #24]
 800a97e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a982:	2b00      	cmp	r3, #0
 800a984:	d003      	beq.n	800a98e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a986:	6878      	ldr	r0, [r7, #4]
 800a988:	f000 fa35 	bl	800adf6 <HAL_TIM_IC_CaptureCallback>
 800a98c:	e005      	b.n	800a99a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a98e:	6878      	ldr	r0, [r7, #4]
 800a990:	f000 fa27 	bl	800ade2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a994:	6878      	ldr	r0, [r7, #4]
 800a996:	f000 fa38 	bl	800ae0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	2200      	movs	r2, #0
 800a99e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a9a0:	68bb      	ldr	r3, [r7, #8]
 800a9a2:	f003 0308 	and.w	r3, r3, #8
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d020      	beq.n	800a9ec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	f003 0308 	and.w	r3, r3, #8
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d01b      	beq.n	800a9ec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	f06f 0208 	mvn.w	r2, #8
 800a9bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	2204      	movs	r2, #4
 800a9c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	69db      	ldr	r3, [r3, #28]
 800a9ca:	f003 0303 	and.w	r3, r3, #3
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d003      	beq.n	800a9da <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a9d2:	6878      	ldr	r0, [r7, #4]
 800a9d4:	f000 fa0f 	bl	800adf6 <HAL_TIM_IC_CaptureCallback>
 800a9d8:	e005      	b.n	800a9e6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a9da:	6878      	ldr	r0, [r7, #4]
 800a9dc:	f000 fa01 	bl	800ade2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a9e0:	6878      	ldr	r0, [r7, #4]
 800a9e2:	f000 fa12 	bl	800ae0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	2200      	movs	r2, #0
 800a9ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a9ec:	68bb      	ldr	r3, [r7, #8]
 800a9ee:	f003 0310 	and.w	r3, r3, #16
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d020      	beq.n	800aa38 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	f003 0310 	and.w	r3, r3, #16
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d01b      	beq.n	800aa38 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	f06f 0210 	mvn.w	r2, #16
 800aa08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	2208      	movs	r2, #8
 800aa0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	69db      	ldr	r3, [r3, #28]
 800aa16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d003      	beq.n	800aa26 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aa1e:	6878      	ldr	r0, [r7, #4]
 800aa20:	f000 f9e9 	bl	800adf6 <HAL_TIM_IC_CaptureCallback>
 800aa24:	e005      	b.n	800aa32 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa26:	6878      	ldr	r0, [r7, #4]
 800aa28:	f000 f9db 	bl	800ade2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa2c:	6878      	ldr	r0, [r7, #4]
 800aa2e:	f000 f9ec 	bl	800ae0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	2200      	movs	r2, #0
 800aa36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800aa38:	68bb      	ldr	r3, [r7, #8]
 800aa3a:	f003 0301 	and.w	r3, r3, #1
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d00c      	beq.n	800aa5c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	f003 0301 	and.w	r3, r3, #1
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d007      	beq.n	800aa5c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	f06f 0201 	mvn.w	r2, #1
 800aa54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800aa56:	6878      	ldr	r0, [r7, #4]
 800aa58:	f7f8 f92e 	bl	8002cb8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800aa5c:	68bb      	ldr	r3, [r7, #8]
 800aa5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d00c      	beq.n	800aa80 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d007      	beq.n	800aa80 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800aa78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800aa7a:	6878      	ldr	r0, [r7, #4]
 800aa7c:	f000 fd2a 	bl	800b4d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800aa80:	68bb      	ldr	r3, [r7, #8]
 800aa82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d00c      	beq.n	800aaa4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d007      	beq.n	800aaa4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800aa9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800aa9e:	6878      	ldr	r0, [r7, #4]
 800aaa0:	f000 f9bd 	bl	800ae1e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800aaa4:	68bb      	ldr	r3, [r7, #8]
 800aaa6:	f003 0320 	and.w	r3, r3, #32
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d00c      	beq.n	800aac8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	f003 0320 	and.w	r3, r3, #32
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d007      	beq.n	800aac8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	f06f 0220 	mvn.w	r2, #32
 800aac0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800aac2:	6878      	ldr	r0, [r7, #4]
 800aac4:	f000 fcfc 	bl	800b4c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800aac8:	bf00      	nop
 800aaca:	3710      	adds	r7, #16
 800aacc:	46bd      	mov	sp, r7
 800aace:	bd80      	pop	{r7, pc}

0800aad0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800aad0:	b580      	push	{r7, lr}
 800aad2:	b086      	sub	sp, #24
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	60f8      	str	r0, [r7, #12]
 800aad8:	60b9      	str	r1, [r7, #8]
 800aada:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aadc:	2300      	movs	r3, #0
 800aade:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800aae6:	2b01      	cmp	r3, #1
 800aae8:	d101      	bne.n	800aaee <HAL_TIM_PWM_ConfigChannel+0x1e>
 800aaea:	2302      	movs	r3, #2
 800aaec:	e0ae      	b.n	800ac4c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	2201      	movs	r2, #1
 800aaf2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	2b0c      	cmp	r3, #12
 800aafa:	f200 809f 	bhi.w	800ac3c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800aafe:	a201      	add	r2, pc, #4	@ (adr r2, 800ab04 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ab00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab04:	0800ab39 	.word	0x0800ab39
 800ab08:	0800ac3d 	.word	0x0800ac3d
 800ab0c:	0800ac3d 	.word	0x0800ac3d
 800ab10:	0800ac3d 	.word	0x0800ac3d
 800ab14:	0800ab79 	.word	0x0800ab79
 800ab18:	0800ac3d 	.word	0x0800ac3d
 800ab1c:	0800ac3d 	.word	0x0800ac3d
 800ab20:	0800ac3d 	.word	0x0800ac3d
 800ab24:	0800abbb 	.word	0x0800abbb
 800ab28:	0800ac3d 	.word	0x0800ac3d
 800ab2c:	0800ac3d 	.word	0x0800ac3d
 800ab30:	0800ac3d 	.word	0x0800ac3d
 800ab34:	0800abfb 	.word	0x0800abfb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	68b9      	ldr	r1, [r7, #8]
 800ab3e:	4618      	mov	r0, r3
 800ab40:	f000 fa04 	bl	800af4c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	699a      	ldr	r2, [r3, #24]
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	f042 0208 	orr.w	r2, r2, #8
 800ab52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	699a      	ldr	r2, [r3, #24]
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	f022 0204 	bic.w	r2, r2, #4
 800ab62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	6999      	ldr	r1, [r3, #24]
 800ab6a:	68bb      	ldr	r3, [r7, #8]
 800ab6c:	691a      	ldr	r2, [r3, #16]
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	430a      	orrs	r2, r1
 800ab74:	619a      	str	r2, [r3, #24]
      break;
 800ab76:	e064      	b.n	800ac42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	68b9      	ldr	r1, [r7, #8]
 800ab7e:	4618      	mov	r0, r3
 800ab80:	f000 fa4a 	bl	800b018 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	699a      	ldr	r2, [r3, #24]
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ab92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	699a      	ldr	r2, [r3, #24]
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800aba2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	6999      	ldr	r1, [r3, #24]
 800abaa:	68bb      	ldr	r3, [r7, #8]
 800abac:	691b      	ldr	r3, [r3, #16]
 800abae:	021a      	lsls	r2, r3, #8
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	430a      	orrs	r2, r1
 800abb6:	619a      	str	r2, [r3, #24]
      break;
 800abb8:	e043      	b.n	800ac42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	68b9      	ldr	r1, [r7, #8]
 800abc0:	4618      	mov	r0, r3
 800abc2:	f000 fa95 	bl	800b0f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	69da      	ldr	r2, [r3, #28]
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	f042 0208 	orr.w	r2, r2, #8
 800abd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	69da      	ldr	r2, [r3, #28]
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	f022 0204 	bic.w	r2, r2, #4
 800abe4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	69d9      	ldr	r1, [r3, #28]
 800abec:	68bb      	ldr	r3, [r7, #8]
 800abee:	691a      	ldr	r2, [r3, #16]
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	430a      	orrs	r2, r1
 800abf6:	61da      	str	r2, [r3, #28]
      break;
 800abf8:	e023      	b.n	800ac42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	68b9      	ldr	r1, [r7, #8]
 800ac00:	4618      	mov	r0, r3
 800ac02:	f000 fadf 	bl	800b1c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	69da      	ldr	r2, [r3, #28]
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ac14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	69da      	ldr	r2, [r3, #28]
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ac24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	69d9      	ldr	r1, [r3, #28]
 800ac2c:	68bb      	ldr	r3, [r7, #8]
 800ac2e:	691b      	ldr	r3, [r3, #16]
 800ac30:	021a      	lsls	r2, r3, #8
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	430a      	orrs	r2, r1
 800ac38:	61da      	str	r2, [r3, #28]
      break;
 800ac3a:	e002      	b.n	800ac42 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800ac3c:	2301      	movs	r3, #1
 800ac3e:	75fb      	strb	r3, [r7, #23]
      break;
 800ac40:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	2200      	movs	r2, #0
 800ac46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ac4a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	3718      	adds	r7, #24
 800ac50:	46bd      	mov	sp, r7
 800ac52:	bd80      	pop	{r7, pc}

0800ac54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ac54:	b580      	push	{r7, lr}
 800ac56:	b084      	sub	sp, #16
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
 800ac5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ac5e:	2300      	movs	r3, #0
 800ac60:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ac68:	2b01      	cmp	r3, #1
 800ac6a:	d101      	bne.n	800ac70 <HAL_TIM_ConfigClockSource+0x1c>
 800ac6c:	2302      	movs	r3, #2
 800ac6e:	e0b4      	b.n	800adda <HAL_TIM_ConfigClockSource+0x186>
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2201      	movs	r2, #1
 800ac74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	2202      	movs	r2, #2
 800ac7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	689b      	ldr	r3, [r3, #8]
 800ac86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ac88:	68bb      	ldr	r3, [r7, #8]
 800ac8a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800ac8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ac90:	68bb      	ldr	r3, [r7, #8]
 800ac92:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ac96:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	68ba      	ldr	r2, [r7, #8]
 800ac9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800aca0:	683b      	ldr	r3, [r7, #0]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aca8:	d03e      	beq.n	800ad28 <HAL_TIM_ConfigClockSource+0xd4>
 800acaa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800acae:	f200 8087 	bhi.w	800adc0 <HAL_TIM_ConfigClockSource+0x16c>
 800acb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800acb6:	f000 8086 	beq.w	800adc6 <HAL_TIM_ConfigClockSource+0x172>
 800acba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800acbe:	d87f      	bhi.n	800adc0 <HAL_TIM_ConfigClockSource+0x16c>
 800acc0:	2b70      	cmp	r3, #112	@ 0x70
 800acc2:	d01a      	beq.n	800acfa <HAL_TIM_ConfigClockSource+0xa6>
 800acc4:	2b70      	cmp	r3, #112	@ 0x70
 800acc6:	d87b      	bhi.n	800adc0 <HAL_TIM_ConfigClockSource+0x16c>
 800acc8:	2b60      	cmp	r3, #96	@ 0x60
 800acca:	d050      	beq.n	800ad6e <HAL_TIM_ConfigClockSource+0x11a>
 800accc:	2b60      	cmp	r3, #96	@ 0x60
 800acce:	d877      	bhi.n	800adc0 <HAL_TIM_ConfigClockSource+0x16c>
 800acd0:	2b50      	cmp	r3, #80	@ 0x50
 800acd2:	d03c      	beq.n	800ad4e <HAL_TIM_ConfigClockSource+0xfa>
 800acd4:	2b50      	cmp	r3, #80	@ 0x50
 800acd6:	d873      	bhi.n	800adc0 <HAL_TIM_ConfigClockSource+0x16c>
 800acd8:	2b40      	cmp	r3, #64	@ 0x40
 800acda:	d058      	beq.n	800ad8e <HAL_TIM_ConfigClockSource+0x13a>
 800acdc:	2b40      	cmp	r3, #64	@ 0x40
 800acde:	d86f      	bhi.n	800adc0 <HAL_TIM_ConfigClockSource+0x16c>
 800ace0:	2b30      	cmp	r3, #48	@ 0x30
 800ace2:	d064      	beq.n	800adae <HAL_TIM_ConfigClockSource+0x15a>
 800ace4:	2b30      	cmp	r3, #48	@ 0x30
 800ace6:	d86b      	bhi.n	800adc0 <HAL_TIM_ConfigClockSource+0x16c>
 800ace8:	2b20      	cmp	r3, #32
 800acea:	d060      	beq.n	800adae <HAL_TIM_ConfigClockSource+0x15a>
 800acec:	2b20      	cmp	r3, #32
 800acee:	d867      	bhi.n	800adc0 <HAL_TIM_ConfigClockSource+0x16c>
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d05c      	beq.n	800adae <HAL_TIM_ConfigClockSource+0x15a>
 800acf4:	2b10      	cmp	r3, #16
 800acf6:	d05a      	beq.n	800adae <HAL_TIM_ConfigClockSource+0x15a>
 800acf8:	e062      	b.n	800adc0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800acfe:	683b      	ldr	r3, [r7, #0]
 800ad00:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ad02:	683b      	ldr	r3, [r7, #0]
 800ad04:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ad06:	683b      	ldr	r3, [r7, #0]
 800ad08:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ad0a:	f000 fb25 	bl	800b358 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	689b      	ldr	r3, [r3, #8]
 800ad14:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ad16:	68bb      	ldr	r3, [r7, #8]
 800ad18:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800ad1c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	68ba      	ldr	r2, [r7, #8]
 800ad24:	609a      	str	r2, [r3, #8]
      break;
 800ad26:	e04f      	b.n	800adc8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ad2c:	683b      	ldr	r3, [r7, #0]
 800ad2e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ad30:	683b      	ldr	r3, [r7, #0]
 800ad32:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ad34:	683b      	ldr	r3, [r7, #0]
 800ad36:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ad38:	f000 fb0e 	bl	800b358 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	689a      	ldr	r2, [r3, #8]
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ad4a:	609a      	str	r2, [r3, #8]
      break;
 800ad4c:	e03c      	b.n	800adc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ad52:	683b      	ldr	r3, [r7, #0]
 800ad54:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ad56:	683b      	ldr	r3, [r7, #0]
 800ad58:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ad5a:	461a      	mov	r2, r3
 800ad5c:	f000 fa82 	bl	800b264 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	2150      	movs	r1, #80	@ 0x50
 800ad66:	4618      	mov	r0, r3
 800ad68:	f000 fadb 	bl	800b322 <TIM_ITRx_SetConfig>
      break;
 800ad6c:	e02c      	b.n	800adc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ad72:	683b      	ldr	r3, [r7, #0]
 800ad74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ad76:	683b      	ldr	r3, [r7, #0]
 800ad78:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ad7a:	461a      	mov	r2, r3
 800ad7c:	f000 faa1 	bl	800b2c2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	2160      	movs	r1, #96	@ 0x60
 800ad86:	4618      	mov	r0, r3
 800ad88:	f000 facb 	bl	800b322 <TIM_ITRx_SetConfig>
      break;
 800ad8c:	e01c      	b.n	800adc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ad92:	683b      	ldr	r3, [r7, #0]
 800ad94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ad96:	683b      	ldr	r3, [r7, #0]
 800ad98:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ad9a:	461a      	mov	r2, r3
 800ad9c:	f000 fa62 	bl	800b264 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	2140      	movs	r1, #64	@ 0x40
 800ada6:	4618      	mov	r0, r3
 800ada8:	f000 fabb 	bl	800b322 <TIM_ITRx_SetConfig>
      break;
 800adac:	e00c      	b.n	800adc8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681a      	ldr	r2, [r3, #0]
 800adb2:	683b      	ldr	r3, [r7, #0]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	4619      	mov	r1, r3
 800adb8:	4610      	mov	r0, r2
 800adba:	f000 fab2 	bl	800b322 <TIM_ITRx_SetConfig>
      break;
 800adbe:	e003      	b.n	800adc8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800adc0:	2301      	movs	r3, #1
 800adc2:	73fb      	strb	r3, [r7, #15]
      break;
 800adc4:	e000      	b.n	800adc8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800adc6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	2201      	movs	r2, #1
 800adcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	2200      	movs	r2, #0
 800add4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800add8:	7bfb      	ldrb	r3, [r7, #15]
}
 800adda:	4618      	mov	r0, r3
 800addc:	3710      	adds	r7, #16
 800adde:	46bd      	mov	sp, r7
 800ade0:	bd80      	pop	{r7, pc}

0800ade2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ade2:	b480      	push	{r7}
 800ade4:	b083      	sub	sp, #12
 800ade6:	af00      	add	r7, sp, #0
 800ade8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800adea:	bf00      	nop
 800adec:	370c      	adds	r7, #12
 800adee:	46bd      	mov	sp, r7
 800adf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf4:	4770      	bx	lr

0800adf6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800adf6:	b480      	push	{r7}
 800adf8:	b083      	sub	sp, #12
 800adfa:	af00      	add	r7, sp, #0
 800adfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800adfe:	bf00      	nop
 800ae00:	370c      	adds	r7, #12
 800ae02:	46bd      	mov	sp, r7
 800ae04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae08:	4770      	bx	lr

0800ae0a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ae0a:	b480      	push	{r7}
 800ae0c:	b083      	sub	sp, #12
 800ae0e:	af00      	add	r7, sp, #0
 800ae10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ae12:	bf00      	nop
 800ae14:	370c      	adds	r7, #12
 800ae16:	46bd      	mov	sp, r7
 800ae18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1c:	4770      	bx	lr

0800ae1e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ae1e:	b480      	push	{r7}
 800ae20:	b083      	sub	sp, #12
 800ae22:	af00      	add	r7, sp, #0
 800ae24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ae26:	bf00      	nop
 800ae28:	370c      	adds	r7, #12
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae30:	4770      	bx	lr
	...

0800ae34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ae34:	b480      	push	{r7}
 800ae36:	b085      	sub	sp, #20
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
 800ae3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	4a3a      	ldr	r2, [pc, #232]	@ (800af30 <TIM_Base_SetConfig+0xfc>)
 800ae48:	4293      	cmp	r3, r2
 800ae4a:	d00f      	beq.n	800ae6c <TIM_Base_SetConfig+0x38>
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ae52:	d00b      	beq.n	800ae6c <TIM_Base_SetConfig+0x38>
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	4a37      	ldr	r2, [pc, #220]	@ (800af34 <TIM_Base_SetConfig+0x100>)
 800ae58:	4293      	cmp	r3, r2
 800ae5a:	d007      	beq.n	800ae6c <TIM_Base_SetConfig+0x38>
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	4a36      	ldr	r2, [pc, #216]	@ (800af38 <TIM_Base_SetConfig+0x104>)
 800ae60:	4293      	cmp	r3, r2
 800ae62:	d003      	beq.n	800ae6c <TIM_Base_SetConfig+0x38>
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	4a35      	ldr	r2, [pc, #212]	@ (800af3c <TIM_Base_SetConfig+0x108>)
 800ae68:	4293      	cmp	r3, r2
 800ae6a:	d108      	bne.n	800ae7e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ae72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ae74:	683b      	ldr	r3, [r7, #0]
 800ae76:	685b      	ldr	r3, [r3, #4]
 800ae78:	68fa      	ldr	r2, [r7, #12]
 800ae7a:	4313      	orrs	r3, r2
 800ae7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	4a2b      	ldr	r2, [pc, #172]	@ (800af30 <TIM_Base_SetConfig+0xfc>)
 800ae82:	4293      	cmp	r3, r2
 800ae84:	d01b      	beq.n	800aebe <TIM_Base_SetConfig+0x8a>
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ae8c:	d017      	beq.n	800aebe <TIM_Base_SetConfig+0x8a>
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	4a28      	ldr	r2, [pc, #160]	@ (800af34 <TIM_Base_SetConfig+0x100>)
 800ae92:	4293      	cmp	r3, r2
 800ae94:	d013      	beq.n	800aebe <TIM_Base_SetConfig+0x8a>
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	4a27      	ldr	r2, [pc, #156]	@ (800af38 <TIM_Base_SetConfig+0x104>)
 800ae9a:	4293      	cmp	r3, r2
 800ae9c:	d00f      	beq.n	800aebe <TIM_Base_SetConfig+0x8a>
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	4a26      	ldr	r2, [pc, #152]	@ (800af3c <TIM_Base_SetConfig+0x108>)
 800aea2:	4293      	cmp	r3, r2
 800aea4:	d00b      	beq.n	800aebe <TIM_Base_SetConfig+0x8a>
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	4a25      	ldr	r2, [pc, #148]	@ (800af40 <TIM_Base_SetConfig+0x10c>)
 800aeaa:	4293      	cmp	r3, r2
 800aeac:	d007      	beq.n	800aebe <TIM_Base_SetConfig+0x8a>
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	4a24      	ldr	r2, [pc, #144]	@ (800af44 <TIM_Base_SetConfig+0x110>)
 800aeb2:	4293      	cmp	r3, r2
 800aeb4:	d003      	beq.n	800aebe <TIM_Base_SetConfig+0x8a>
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	4a23      	ldr	r2, [pc, #140]	@ (800af48 <TIM_Base_SetConfig+0x114>)
 800aeba:	4293      	cmp	r3, r2
 800aebc:	d108      	bne.n	800aed0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800aec4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800aec6:	683b      	ldr	r3, [r7, #0]
 800aec8:	68db      	ldr	r3, [r3, #12]
 800aeca:	68fa      	ldr	r2, [r7, #12]
 800aecc:	4313      	orrs	r3, r2
 800aece:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800aed6:	683b      	ldr	r3, [r7, #0]
 800aed8:	695b      	ldr	r3, [r3, #20]
 800aeda:	4313      	orrs	r3, r2
 800aedc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	68fa      	ldr	r2, [r7, #12]
 800aee2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800aee4:	683b      	ldr	r3, [r7, #0]
 800aee6:	689a      	ldr	r2, [r3, #8]
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800aeec:	683b      	ldr	r3, [r7, #0]
 800aeee:	681a      	ldr	r2, [r3, #0]
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	4a0e      	ldr	r2, [pc, #56]	@ (800af30 <TIM_Base_SetConfig+0xfc>)
 800aef8:	4293      	cmp	r3, r2
 800aefa:	d103      	bne.n	800af04 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800aefc:	683b      	ldr	r3, [r7, #0]
 800aefe:	691a      	ldr	r2, [r3, #16]
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	2201      	movs	r2, #1
 800af08:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	691b      	ldr	r3, [r3, #16]
 800af0e:	f003 0301 	and.w	r3, r3, #1
 800af12:	2b01      	cmp	r3, #1
 800af14:	d105      	bne.n	800af22 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	691b      	ldr	r3, [r3, #16]
 800af1a:	f023 0201 	bic.w	r2, r3, #1
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	611a      	str	r2, [r3, #16]
  }
}
 800af22:	bf00      	nop
 800af24:	3714      	adds	r7, #20
 800af26:	46bd      	mov	sp, r7
 800af28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2c:	4770      	bx	lr
 800af2e:	bf00      	nop
 800af30:	40010000 	.word	0x40010000
 800af34:	40000400 	.word	0x40000400
 800af38:	40000800 	.word	0x40000800
 800af3c:	40000c00 	.word	0x40000c00
 800af40:	40014000 	.word	0x40014000
 800af44:	40014400 	.word	0x40014400
 800af48:	40014800 	.word	0x40014800

0800af4c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800af4c:	b480      	push	{r7}
 800af4e:	b087      	sub	sp, #28
 800af50:	af00      	add	r7, sp, #0
 800af52:	6078      	str	r0, [r7, #4]
 800af54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	6a1b      	ldr	r3, [r3, #32]
 800af5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	6a1b      	ldr	r3, [r3, #32]
 800af60:	f023 0201 	bic.w	r2, r3, #1
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	685b      	ldr	r3, [r3, #4]
 800af6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	699b      	ldr	r3, [r3, #24]
 800af72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800af7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	f023 0303 	bic.w	r3, r3, #3
 800af82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800af84:	683b      	ldr	r3, [r7, #0]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	68fa      	ldr	r2, [r7, #12]
 800af8a:	4313      	orrs	r3, r2
 800af8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800af8e:	697b      	ldr	r3, [r7, #20]
 800af90:	f023 0302 	bic.w	r3, r3, #2
 800af94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800af96:	683b      	ldr	r3, [r7, #0]
 800af98:	689b      	ldr	r3, [r3, #8]
 800af9a:	697a      	ldr	r2, [r7, #20]
 800af9c:	4313      	orrs	r3, r2
 800af9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	4a1c      	ldr	r2, [pc, #112]	@ (800b014 <TIM_OC1_SetConfig+0xc8>)
 800afa4:	4293      	cmp	r3, r2
 800afa6:	d10c      	bne.n	800afc2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800afa8:	697b      	ldr	r3, [r7, #20]
 800afaa:	f023 0308 	bic.w	r3, r3, #8
 800afae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800afb0:	683b      	ldr	r3, [r7, #0]
 800afb2:	68db      	ldr	r3, [r3, #12]
 800afb4:	697a      	ldr	r2, [r7, #20]
 800afb6:	4313      	orrs	r3, r2
 800afb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800afba:	697b      	ldr	r3, [r7, #20]
 800afbc:	f023 0304 	bic.w	r3, r3, #4
 800afc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	4a13      	ldr	r2, [pc, #76]	@ (800b014 <TIM_OC1_SetConfig+0xc8>)
 800afc6:	4293      	cmp	r3, r2
 800afc8:	d111      	bne.n	800afee <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800afca:	693b      	ldr	r3, [r7, #16]
 800afcc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800afd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800afd2:	693b      	ldr	r3, [r7, #16]
 800afd4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800afd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800afda:	683b      	ldr	r3, [r7, #0]
 800afdc:	695b      	ldr	r3, [r3, #20]
 800afde:	693a      	ldr	r2, [r7, #16]
 800afe0:	4313      	orrs	r3, r2
 800afe2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800afe4:	683b      	ldr	r3, [r7, #0]
 800afe6:	699b      	ldr	r3, [r3, #24]
 800afe8:	693a      	ldr	r2, [r7, #16]
 800afea:	4313      	orrs	r3, r2
 800afec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	693a      	ldr	r2, [r7, #16]
 800aff2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	68fa      	ldr	r2, [r7, #12]
 800aff8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800affa:	683b      	ldr	r3, [r7, #0]
 800affc:	685a      	ldr	r2, [r3, #4]
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	697a      	ldr	r2, [r7, #20]
 800b006:	621a      	str	r2, [r3, #32]
}
 800b008:	bf00      	nop
 800b00a:	371c      	adds	r7, #28
 800b00c:	46bd      	mov	sp, r7
 800b00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b012:	4770      	bx	lr
 800b014:	40010000 	.word	0x40010000

0800b018 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b018:	b480      	push	{r7}
 800b01a:	b087      	sub	sp, #28
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	6078      	str	r0, [r7, #4]
 800b020:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	6a1b      	ldr	r3, [r3, #32]
 800b026:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	6a1b      	ldr	r3, [r3, #32]
 800b02c:	f023 0210 	bic.w	r2, r3, #16
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	685b      	ldr	r3, [r3, #4]
 800b038:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	699b      	ldr	r3, [r3, #24]
 800b03e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b046:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b04e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b050:	683b      	ldr	r3, [r7, #0]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	021b      	lsls	r3, r3, #8
 800b056:	68fa      	ldr	r2, [r7, #12]
 800b058:	4313      	orrs	r3, r2
 800b05a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b05c:	697b      	ldr	r3, [r7, #20]
 800b05e:	f023 0320 	bic.w	r3, r3, #32
 800b062:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b064:	683b      	ldr	r3, [r7, #0]
 800b066:	689b      	ldr	r3, [r3, #8]
 800b068:	011b      	lsls	r3, r3, #4
 800b06a:	697a      	ldr	r2, [r7, #20]
 800b06c:	4313      	orrs	r3, r2
 800b06e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	4a1e      	ldr	r2, [pc, #120]	@ (800b0ec <TIM_OC2_SetConfig+0xd4>)
 800b074:	4293      	cmp	r3, r2
 800b076:	d10d      	bne.n	800b094 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b078:	697b      	ldr	r3, [r7, #20]
 800b07a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b07e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b080:	683b      	ldr	r3, [r7, #0]
 800b082:	68db      	ldr	r3, [r3, #12]
 800b084:	011b      	lsls	r3, r3, #4
 800b086:	697a      	ldr	r2, [r7, #20]
 800b088:	4313      	orrs	r3, r2
 800b08a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b08c:	697b      	ldr	r3, [r7, #20]
 800b08e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b092:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	4a15      	ldr	r2, [pc, #84]	@ (800b0ec <TIM_OC2_SetConfig+0xd4>)
 800b098:	4293      	cmp	r3, r2
 800b09a:	d113      	bne.n	800b0c4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b09c:	693b      	ldr	r3, [r7, #16]
 800b09e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b0a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b0a4:	693b      	ldr	r3, [r7, #16]
 800b0a6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b0aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b0ac:	683b      	ldr	r3, [r7, #0]
 800b0ae:	695b      	ldr	r3, [r3, #20]
 800b0b0:	009b      	lsls	r3, r3, #2
 800b0b2:	693a      	ldr	r2, [r7, #16]
 800b0b4:	4313      	orrs	r3, r2
 800b0b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b0b8:	683b      	ldr	r3, [r7, #0]
 800b0ba:	699b      	ldr	r3, [r3, #24]
 800b0bc:	009b      	lsls	r3, r3, #2
 800b0be:	693a      	ldr	r2, [r7, #16]
 800b0c0:	4313      	orrs	r3, r2
 800b0c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	693a      	ldr	r2, [r7, #16]
 800b0c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	68fa      	ldr	r2, [r7, #12]
 800b0ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b0d0:	683b      	ldr	r3, [r7, #0]
 800b0d2:	685a      	ldr	r2, [r3, #4]
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	697a      	ldr	r2, [r7, #20]
 800b0dc:	621a      	str	r2, [r3, #32]
}
 800b0de:	bf00      	nop
 800b0e0:	371c      	adds	r7, #28
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e8:	4770      	bx	lr
 800b0ea:	bf00      	nop
 800b0ec:	40010000 	.word	0x40010000

0800b0f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b0f0:	b480      	push	{r7}
 800b0f2:	b087      	sub	sp, #28
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	6078      	str	r0, [r7, #4]
 800b0f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	6a1b      	ldr	r3, [r3, #32]
 800b0fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	6a1b      	ldr	r3, [r3, #32]
 800b104:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	685b      	ldr	r3, [r3, #4]
 800b110:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	69db      	ldr	r3, [r3, #28]
 800b116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b11e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	f023 0303 	bic.w	r3, r3, #3
 800b126:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b128:	683b      	ldr	r3, [r7, #0]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	68fa      	ldr	r2, [r7, #12]
 800b12e:	4313      	orrs	r3, r2
 800b130:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b132:	697b      	ldr	r3, [r7, #20]
 800b134:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b138:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b13a:	683b      	ldr	r3, [r7, #0]
 800b13c:	689b      	ldr	r3, [r3, #8]
 800b13e:	021b      	lsls	r3, r3, #8
 800b140:	697a      	ldr	r2, [r7, #20]
 800b142:	4313      	orrs	r3, r2
 800b144:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	4a1d      	ldr	r2, [pc, #116]	@ (800b1c0 <TIM_OC3_SetConfig+0xd0>)
 800b14a:	4293      	cmp	r3, r2
 800b14c:	d10d      	bne.n	800b16a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b14e:	697b      	ldr	r3, [r7, #20]
 800b150:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b154:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b156:	683b      	ldr	r3, [r7, #0]
 800b158:	68db      	ldr	r3, [r3, #12]
 800b15a:	021b      	lsls	r3, r3, #8
 800b15c:	697a      	ldr	r2, [r7, #20]
 800b15e:	4313      	orrs	r3, r2
 800b160:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b162:	697b      	ldr	r3, [r7, #20]
 800b164:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b168:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	4a14      	ldr	r2, [pc, #80]	@ (800b1c0 <TIM_OC3_SetConfig+0xd0>)
 800b16e:	4293      	cmp	r3, r2
 800b170:	d113      	bne.n	800b19a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b172:	693b      	ldr	r3, [r7, #16]
 800b174:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b178:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b17a:	693b      	ldr	r3, [r7, #16]
 800b17c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b180:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b182:	683b      	ldr	r3, [r7, #0]
 800b184:	695b      	ldr	r3, [r3, #20]
 800b186:	011b      	lsls	r3, r3, #4
 800b188:	693a      	ldr	r2, [r7, #16]
 800b18a:	4313      	orrs	r3, r2
 800b18c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b18e:	683b      	ldr	r3, [r7, #0]
 800b190:	699b      	ldr	r3, [r3, #24]
 800b192:	011b      	lsls	r3, r3, #4
 800b194:	693a      	ldr	r2, [r7, #16]
 800b196:	4313      	orrs	r3, r2
 800b198:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	693a      	ldr	r2, [r7, #16]
 800b19e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	68fa      	ldr	r2, [r7, #12]
 800b1a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b1a6:	683b      	ldr	r3, [r7, #0]
 800b1a8:	685a      	ldr	r2, [r3, #4]
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	697a      	ldr	r2, [r7, #20]
 800b1b2:	621a      	str	r2, [r3, #32]
}
 800b1b4:	bf00      	nop
 800b1b6:	371c      	adds	r7, #28
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1be:	4770      	bx	lr
 800b1c0:	40010000 	.word	0x40010000

0800b1c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b1c4:	b480      	push	{r7}
 800b1c6:	b087      	sub	sp, #28
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	6078      	str	r0, [r7, #4]
 800b1cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	6a1b      	ldr	r3, [r3, #32]
 800b1d2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	6a1b      	ldr	r3, [r3, #32]
 800b1d8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	685b      	ldr	r3, [r3, #4]
 800b1e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	69db      	ldr	r3, [r3, #28]
 800b1ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b1f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b1fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b1fc:	683b      	ldr	r3, [r7, #0]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	021b      	lsls	r3, r3, #8
 800b202:	68fa      	ldr	r2, [r7, #12]
 800b204:	4313      	orrs	r3, r2
 800b206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b208:	693b      	ldr	r3, [r7, #16]
 800b20a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b20e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b210:	683b      	ldr	r3, [r7, #0]
 800b212:	689b      	ldr	r3, [r3, #8]
 800b214:	031b      	lsls	r3, r3, #12
 800b216:	693a      	ldr	r2, [r7, #16]
 800b218:	4313      	orrs	r3, r2
 800b21a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	4a10      	ldr	r2, [pc, #64]	@ (800b260 <TIM_OC4_SetConfig+0x9c>)
 800b220:	4293      	cmp	r3, r2
 800b222:	d109      	bne.n	800b238 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b224:	697b      	ldr	r3, [r7, #20]
 800b226:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b22a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b22c:	683b      	ldr	r3, [r7, #0]
 800b22e:	695b      	ldr	r3, [r3, #20]
 800b230:	019b      	lsls	r3, r3, #6
 800b232:	697a      	ldr	r2, [r7, #20]
 800b234:	4313      	orrs	r3, r2
 800b236:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	697a      	ldr	r2, [r7, #20]
 800b23c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	68fa      	ldr	r2, [r7, #12]
 800b242:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b244:	683b      	ldr	r3, [r7, #0]
 800b246:	685a      	ldr	r2, [r3, #4]
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	693a      	ldr	r2, [r7, #16]
 800b250:	621a      	str	r2, [r3, #32]
}
 800b252:	bf00      	nop
 800b254:	371c      	adds	r7, #28
 800b256:	46bd      	mov	sp, r7
 800b258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25c:	4770      	bx	lr
 800b25e:	bf00      	nop
 800b260:	40010000 	.word	0x40010000

0800b264 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b264:	b480      	push	{r7}
 800b266:	b087      	sub	sp, #28
 800b268:	af00      	add	r7, sp, #0
 800b26a:	60f8      	str	r0, [r7, #12]
 800b26c:	60b9      	str	r1, [r7, #8]
 800b26e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	6a1b      	ldr	r3, [r3, #32]
 800b274:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	6a1b      	ldr	r3, [r3, #32]
 800b27a:	f023 0201 	bic.w	r2, r3, #1
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	699b      	ldr	r3, [r3, #24]
 800b286:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b288:	693b      	ldr	r3, [r7, #16]
 800b28a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b28e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	011b      	lsls	r3, r3, #4
 800b294:	693a      	ldr	r2, [r7, #16]
 800b296:	4313      	orrs	r3, r2
 800b298:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b29a:	697b      	ldr	r3, [r7, #20]
 800b29c:	f023 030a 	bic.w	r3, r3, #10
 800b2a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b2a2:	697a      	ldr	r2, [r7, #20]
 800b2a4:	68bb      	ldr	r3, [r7, #8]
 800b2a6:	4313      	orrs	r3, r2
 800b2a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	693a      	ldr	r2, [r7, #16]
 800b2ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	697a      	ldr	r2, [r7, #20]
 800b2b4:	621a      	str	r2, [r3, #32]
}
 800b2b6:	bf00      	nop
 800b2b8:	371c      	adds	r7, #28
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c0:	4770      	bx	lr

0800b2c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b2c2:	b480      	push	{r7}
 800b2c4:	b087      	sub	sp, #28
 800b2c6:	af00      	add	r7, sp, #0
 800b2c8:	60f8      	str	r0, [r7, #12]
 800b2ca:	60b9      	str	r1, [r7, #8]
 800b2cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	6a1b      	ldr	r3, [r3, #32]
 800b2d2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	6a1b      	ldr	r3, [r3, #32]
 800b2d8:	f023 0210 	bic.w	r2, r3, #16
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	699b      	ldr	r3, [r3, #24]
 800b2e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b2e6:	693b      	ldr	r3, [r7, #16]
 800b2e8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b2ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	031b      	lsls	r3, r3, #12
 800b2f2:	693a      	ldr	r2, [r7, #16]
 800b2f4:	4313      	orrs	r3, r2
 800b2f6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b2f8:	697b      	ldr	r3, [r7, #20]
 800b2fa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b2fe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b300:	68bb      	ldr	r3, [r7, #8]
 800b302:	011b      	lsls	r3, r3, #4
 800b304:	697a      	ldr	r2, [r7, #20]
 800b306:	4313      	orrs	r3, r2
 800b308:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	693a      	ldr	r2, [r7, #16]
 800b30e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	697a      	ldr	r2, [r7, #20]
 800b314:	621a      	str	r2, [r3, #32]
}
 800b316:	bf00      	nop
 800b318:	371c      	adds	r7, #28
 800b31a:	46bd      	mov	sp, r7
 800b31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b320:	4770      	bx	lr

0800b322 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b322:	b480      	push	{r7}
 800b324:	b085      	sub	sp, #20
 800b326:	af00      	add	r7, sp, #0
 800b328:	6078      	str	r0, [r7, #4]
 800b32a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	689b      	ldr	r3, [r3, #8]
 800b330:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b338:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b33a:	683a      	ldr	r2, [r7, #0]
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	4313      	orrs	r3, r2
 800b340:	f043 0307 	orr.w	r3, r3, #7
 800b344:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	68fa      	ldr	r2, [r7, #12]
 800b34a:	609a      	str	r2, [r3, #8]
}
 800b34c:	bf00      	nop
 800b34e:	3714      	adds	r7, #20
 800b350:	46bd      	mov	sp, r7
 800b352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b356:	4770      	bx	lr

0800b358 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b358:	b480      	push	{r7}
 800b35a:	b087      	sub	sp, #28
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	60f8      	str	r0, [r7, #12]
 800b360:	60b9      	str	r1, [r7, #8]
 800b362:	607a      	str	r2, [r7, #4]
 800b364:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	689b      	ldr	r3, [r3, #8]
 800b36a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b36c:	697b      	ldr	r3, [r7, #20]
 800b36e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b372:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b374:	683b      	ldr	r3, [r7, #0]
 800b376:	021a      	lsls	r2, r3, #8
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	431a      	orrs	r2, r3
 800b37c:	68bb      	ldr	r3, [r7, #8]
 800b37e:	4313      	orrs	r3, r2
 800b380:	697a      	ldr	r2, [r7, #20]
 800b382:	4313      	orrs	r3, r2
 800b384:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	697a      	ldr	r2, [r7, #20]
 800b38a:	609a      	str	r2, [r3, #8]
}
 800b38c:	bf00      	nop
 800b38e:	371c      	adds	r7, #28
 800b390:	46bd      	mov	sp, r7
 800b392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b396:	4770      	bx	lr

0800b398 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b398:	b480      	push	{r7}
 800b39a:	b087      	sub	sp, #28
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	60f8      	str	r0, [r7, #12]
 800b3a0:	60b9      	str	r1, [r7, #8]
 800b3a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b3a4:	68bb      	ldr	r3, [r7, #8]
 800b3a6:	f003 031f 	and.w	r3, r3, #31
 800b3aa:	2201      	movs	r2, #1
 800b3ac:	fa02 f303 	lsl.w	r3, r2, r3
 800b3b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	6a1a      	ldr	r2, [r3, #32]
 800b3b6:	697b      	ldr	r3, [r7, #20]
 800b3b8:	43db      	mvns	r3, r3
 800b3ba:	401a      	ands	r2, r3
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	6a1a      	ldr	r2, [r3, #32]
 800b3c4:	68bb      	ldr	r3, [r7, #8]
 800b3c6:	f003 031f 	and.w	r3, r3, #31
 800b3ca:	6879      	ldr	r1, [r7, #4]
 800b3cc:	fa01 f303 	lsl.w	r3, r1, r3
 800b3d0:	431a      	orrs	r2, r3
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	621a      	str	r2, [r3, #32]
}
 800b3d6:	bf00      	nop
 800b3d8:	371c      	adds	r7, #28
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e0:	4770      	bx	lr
	...

0800b3e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b3e4:	b480      	push	{r7}
 800b3e6:	b085      	sub	sp, #20
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	6078      	str	r0, [r7, #4]
 800b3ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b3f4:	2b01      	cmp	r3, #1
 800b3f6:	d101      	bne.n	800b3fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b3f8:	2302      	movs	r3, #2
 800b3fa:	e050      	b.n	800b49e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	2201      	movs	r2, #1
 800b400:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	2202      	movs	r2, #2
 800b408:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	685b      	ldr	r3, [r3, #4]
 800b412:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	689b      	ldr	r3, [r3, #8]
 800b41a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b422:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b424:	683b      	ldr	r3, [r7, #0]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	68fa      	ldr	r2, [r7, #12]
 800b42a:	4313      	orrs	r3, r2
 800b42c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	68fa      	ldr	r2, [r7, #12]
 800b434:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	4a1c      	ldr	r2, [pc, #112]	@ (800b4ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800b43c:	4293      	cmp	r3, r2
 800b43e:	d018      	beq.n	800b472 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b448:	d013      	beq.n	800b472 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	4a18      	ldr	r2, [pc, #96]	@ (800b4b0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b450:	4293      	cmp	r3, r2
 800b452:	d00e      	beq.n	800b472 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	4a16      	ldr	r2, [pc, #88]	@ (800b4b4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800b45a:	4293      	cmp	r3, r2
 800b45c:	d009      	beq.n	800b472 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	4a15      	ldr	r2, [pc, #84]	@ (800b4b8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800b464:	4293      	cmp	r3, r2
 800b466:	d004      	beq.n	800b472 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	4a13      	ldr	r2, [pc, #76]	@ (800b4bc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800b46e:	4293      	cmp	r3, r2
 800b470:	d10c      	bne.n	800b48c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b472:	68bb      	ldr	r3, [r7, #8]
 800b474:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b478:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b47a:	683b      	ldr	r3, [r7, #0]
 800b47c:	685b      	ldr	r3, [r3, #4]
 800b47e:	68ba      	ldr	r2, [r7, #8]
 800b480:	4313      	orrs	r3, r2
 800b482:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	68ba      	ldr	r2, [r7, #8]
 800b48a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	2201      	movs	r2, #1
 800b490:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	2200      	movs	r2, #0
 800b498:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b49c:	2300      	movs	r3, #0
}
 800b49e:	4618      	mov	r0, r3
 800b4a0:	3714      	adds	r7, #20
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a8:	4770      	bx	lr
 800b4aa:	bf00      	nop
 800b4ac:	40010000 	.word	0x40010000
 800b4b0:	40000400 	.word	0x40000400
 800b4b4:	40000800 	.word	0x40000800
 800b4b8:	40000c00 	.word	0x40000c00
 800b4bc:	40014000 	.word	0x40014000

0800b4c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b4c0:	b480      	push	{r7}
 800b4c2:	b083      	sub	sp, #12
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b4c8:	bf00      	nop
 800b4ca:	370c      	adds	r7, #12
 800b4cc:	46bd      	mov	sp, r7
 800b4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d2:	4770      	bx	lr

0800b4d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b4d4:	b480      	push	{r7}
 800b4d6:	b083      	sub	sp, #12
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b4dc:	bf00      	nop
 800b4de:	370c      	adds	r7, #12
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e6:	4770      	bx	lr

0800b4e8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b4e8:	b084      	sub	sp, #16
 800b4ea:	b580      	push	{r7, lr}
 800b4ec:	b084      	sub	sp, #16
 800b4ee:	af00      	add	r7, sp, #0
 800b4f0:	6078      	str	r0, [r7, #4]
 800b4f2:	f107 001c 	add.w	r0, r7, #28
 800b4f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b4fa:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800b4fe:	2b01      	cmp	r3, #1
 800b500:	d123      	bne.n	800b54a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b506:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	68db      	ldr	r3, [r3, #12]
 800b512:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800b516:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b51a:	687a      	ldr	r2, [r7, #4]
 800b51c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	68db      	ldr	r3, [r3, #12]
 800b522:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b52a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b52e:	2b01      	cmp	r3, #1
 800b530:	d105      	bne.n	800b53e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	68db      	ldr	r3, [r3, #12]
 800b536:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b53e:	6878      	ldr	r0, [r7, #4]
 800b540:	f001 fae8 	bl	800cb14 <USB_CoreReset>
 800b544:	4603      	mov	r3, r0
 800b546:	73fb      	strb	r3, [r7, #15]
 800b548:	e01b      	b.n	800b582 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	68db      	ldr	r3, [r3, #12]
 800b54e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b556:	6878      	ldr	r0, [r7, #4]
 800b558:	f001 fadc 	bl	800cb14 <USB_CoreReset>
 800b55c:	4603      	mov	r3, r0
 800b55e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b560:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800b564:	2b00      	cmp	r3, #0
 800b566:	d106      	bne.n	800b576 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b56c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	639a      	str	r2, [r3, #56]	@ 0x38
 800b574:	e005      	b.n	800b582 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b57a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b582:	7fbb      	ldrb	r3, [r7, #30]
 800b584:	2b01      	cmp	r3, #1
 800b586:	d10b      	bne.n	800b5a0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	689b      	ldr	r3, [r3, #8]
 800b58c:	f043 0206 	orr.w	r2, r3, #6
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	689b      	ldr	r3, [r3, #8]
 800b598:	f043 0220 	orr.w	r2, r3, #32
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b5a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	3710      	adds	r7, #16
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b5ac:	b004      	add	sp, #16
 800b5ae:	4770      	bx	lr

0800b5b0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800b5b0:	b480      	push	{r7}
 800b5b2:	b087      	sub	sp, #28
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	60f8      	str	r0, [r7, #12]
 800b5b8:	60b9      	str	r1, [r7, #8]
 800b5ba:	4613      	mov	r3, r2
 800b5bc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800b5be:	79fb      	ldrb	r3, [r7, #7]
 800b5c0:	2b02      	cmp	r3, #2
 800b5c2:	d165      	bne.n	800b690 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800b5c4:	68bb      	ldr	r3, [r7, #8]
 800b5c6:	4a41      	ldr	r2, [pc, #260]	@ (800b6cc <USB_SetTurnaroundTime+0x11c>)
 800b5c8:	4293      	cmp	r3, r2
 800b5ca:	d906      	bls.n	800b5da <USB_SetTurnaroundTime+0x2a>
 800b5cc:	68bb      	ldr	r3, [r7, #8]
 800b5ce:	4a40      	ldr	r2, [pc, #256]	@ (800b6d0 <USB_SetTurnaroundTime+0x120>)
 800b5d0:	4293      	cmp	r3, r2
 800b5d2:	d202      	bcs.n	800b5da <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800b5d4:	230f      	movs	r3, #15
 800b5d6:	617b      	str	r3, [r7, #20]
 800b5d8:	e062      	b.n	800b6a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800b5da:	68bb      	ldr	r3, [r7, #8]
 800b5dc:	4a3c      	ldr	r2, [pc, #240]	@ (800b6d0 <USB_SetTurnaroundTime+0x120>)
 800b5de:	4293      	cmp	r3, r2
 800b5e0:	d306      	bcc.n	800b5f0 <USB_SetTurnaroundTime+0x40>
 800b5e2:	68bb      	ldr	r3, [r7, #8]
 800b5e4:	4a3b      	ldr	r2, [pc, #236]	@ (800b6d4 <USB_SetTurnaroundTime+0x124>)
 800b5e6:	4293      	cmp	r3, r2
 800b5e8:	d202      	bcs.n	800b5f0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800b5ea:	230e      	movs	r3, #14
 800b5ec:	617b      	str	r3, [r7, #20]
 800b5ee:	e057      	b.n	800b6a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800b5f0:	68bb      	ldr	r3, [r7, #8]
 800b5f2:	4a38      	ldr	r2, [pc, #224]	@ (800b6d4 <USB_SetTurnaroundTime+0x124>)
 800b5f4:	4293      	cmp	r3, r2
 800b5f6:	d306      	bcc.n	800b606 <USB_SetTurnaroundTime+0x56>
 800b5f8:	68bb      	ldr	r3, [r7, #8]
 800b5fa:	4a37      	ldr	r2, [pc, #220]	@ (800b6d8 <USB_SetTurnaroundTime+0x128>)
 800b5fc:	4293      	cmp	r3, r2
 800b5fe:	d202      	bcs.n	800b606 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800b600:	230d      	movs	r3, #13
 800b602:	617b      	str	r3, [r7, #20]
 800b604:	e04c      	b.n	800b6a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800b606:	68bb      	ldr	r3, [r7, #8]
 800b608:	4a33      	ldr	r2, [pc, #204]	@ (800b6d8 <USB_SetTurnaroundTime+0x128>)
 800b60a:	4293      	cmp	r3, r2
 800b60c:	d306      	bcc.n	800b61c <USB_SetTurnaroundTime+0x6c>
 800b60e:	68bb      	ldr	r3, [r7, #8]
 800b610:	4a32      	ldr	r2, [pc, #200]	@ (800b6dc <USB_SetTurnaroundTime+0x12c>)
 800b612:	4293      	cmp	r3, r2
 800b614:	d802      	bhi.n	800b61c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800b616:	230c      	movs	r3, #12
 800b618:	617b      	str	r3, [r7, #20]
 800b61a:	e041      	b.n	800b6a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800b61c:	68bb      	ldr	r3, [r7, #8]
 800b61e:	4a2f      	ldr	r2, [pc, #188]	@ (800b6dc <USB_SetTurnaroundTime+0x12c>)
 800b620:	4293      	cmp	r3, r2
 800b622:	d906      	bls.n	800b632 <USB_SetTurnaroundTime+0x82>
 800b624:	68bb      	ldr	r3, [r7, #8]
 800b626:	4a2e      	ldr	r2, [pc, #184]	@ (800b6e0 <USB_SetTurnaroundTime+0x130>)
 800b628:	4293      	cmp	r3, r2
 800b62a:	d802      	bhi.n	800b632 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800b62c:	230b      	movs	r3, #11
 800b62e:	617b      	str	r3, [r7, #20]
 800b630:	e036      	b.n	800b6a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800b632:	68bb      	ldr	r3, [r7, #8]
 800b634:	4a2a      	ldr	r2, [pc, #168]	@ (800b6e0 <USB_SetTurnaroundTime+0x130>)
 800b636:	4293      	cmp	r3, r2
 800b638:	d906      	bls.n	800b648 <USB_SetTurnaroundTime+0x98>
 800b63a:	68bb      	ldr	r3, [r7, #8]
 800b63c:	4a29      	ldr	r2, [pc, #164]	@ (800b6e4 <USB_SetTurnaroundTime+0x134>)
 800b63e:	4293      	cmp	r3, r2
 800b640:	d802      	bhi.n	800b648 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800b642:	230a      	movs	r3, #10
 800b644:	617b      	str	r3, [r7, #20]
 800b646:	e02b      	b.n	800b6a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800b648:	68bb      	ldr	r3, [r7, #8]
 800b64a:	4a26      	ldr	r2, [pc, #152]	@ (800b6e4 <USB_SetTurnaroundTime+0x134>)
 800b64c:	4293      	cmp	r3, r2
 800b64e:	d906      	bls.n	800b65e <USB_SetTurnaroundTime+0xae>
 800b650:	68bb      	ldr	r3, [r7, #8]
 800b652:	4a25      	ldr	r2, [pc, #148]	@ (800b6e8 <USB_SetTurnaroundTime+0x138>)
 800b654:	4293      	cmp	r3, r2
 800b656:	d202      	bcs.n	800b65e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800b658:	2309      	movs	r3, #9
 800b65a:	617b      	str	r3, [r7, #20]
 800b65c:	e020      	b.n	800b6a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800b65e:	68bb      	ldr	r3, [r7, #8]
 800b660:	4a21      	ldr	r2, [pc, #132]	@ (800b6e8 <USB_SetTurnaroundTime+0x138>)
 800b662:	4293      	cmp	r3, r2
 800b664:	d306      	bcc.n	800b674 <USB_SetTurnaroundTime+0xc4>
 800b666:	68bb      	ldr	r3, [r7, #8]
 800b668:	4a20      	ldr	r2, [pc, #128]	@ (800b6ec <USB_SetTurnaroundTime+0x13c>)
 800b66a:	4293      	cmp	r3, r2
 800b66c:	d802      	bhi.n	800b674 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800b66e:	2308      	movs	r3, #8
 800b670:	617b      	str	r3, [r7, #20]
 800b672:	e015      	b.n	800b6a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800b674:	68bb      	ldr	r3, [r7, #8]
 800b676:	4a1d      	ldr	r2, [pc, #116]	@ (800b6ec <USB_SetTurnaroundTime+0x13c>)
 800b678:	4293      	cmp	r3, r2
 800b67a:	d906      	bls.n	800b68a <USB_SetTurnaroundTime+0xda>
 800b67c:	68bb      	ldr	r3, [r7, #8]
 800b67e:	4a1c      	ldr	r2, [pc, #112]	@ (800b6f0 <USB_SetTurnaroundTime+0x140>)
 800b680:	4293      	cmp	r3, r2
 800b682:	d202      	bcs.n	800b68a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800b684:	2307      	movs	r3, #7
 800b686:	617b      	str	r3, [r7, #20]
 800b688:	e00a      	b.n	800b6a0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800b68a:	2306      	movs	r3, #6
 800b68c:	617b      	str	r3, [r7, #20]
 800b68e:	e007      	b.n	800b6a0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800b690:	79fb      	ldrb	r3, [r7, #7]
 800b692:	2b00      	cmp	r3, #0
 800b694:	d102      	bne.n	800b69c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800b696:	2309      	movs	r3, #9
 800b698:	617b      	str	r3, [r7, #20]
 800b69a:	e001      	b.n	800b6a0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800b69c:	2309      	movs	r3, #9
 800b69e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	68db      	ldr	r3, [r3, #12]
 800b6a4:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	68da      	ldr	r2, [r3, #12]
 800b6b0:	697b      	ldr	r3, [r7, #20]
 800b6b2:	029b      	lsls	r3, r3, #10
 800b6b4:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800b6b8:	431a      	orrs	r2, r3
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b6be:	2300      	movs	r3, #0
}
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	371c      	adds	r7, #28
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ca:	4770      	bx	lr
 800b6cc:	00d8acbf 	.word	0x00d8acbf
 800b6d0:	00e4e1c0 	.word	0x00e4e1c0
 800b6d4:	00f42400 	.word	0x00f42400
 800b6d8:	01067380 	.word	0x01067380
 800b6dc:	011a499f 	.word	0x011a499f
 800b6e0:	01312cff 	.word	0x01312cff
 800b6e4:	014ca43f 	.word	0x014ca43f
 800b6e8:	016e3600 	.word	0x016e3600
 800b6ec:	01a6ab1f 	.word	0x01a6ab1f
 800b6f0:	01e84800 	.word	0x01e84800

0800b6f4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b6f4:	b480      	push	{r7}
 800b6f6:	b083      	sub	sp, #12
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	689b      	ldr	r3, [r3, #8]
 800b700:	f043 0201 	orr.w	r2, r3, #1
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b708:	2300      	movs	r3, #0
}
 800b70a:	4618      	mov	r0, r3
 800b70c:	370c      	adds	r7, #12
 800b70e:	46bd      	mov	sp, r7
 800b710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b714:	4770      	bx	lr

0800b716 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b716:	b480      	push	{r7}
 800b718:	b083      	sub	sp, #12
 800b71a:	af00      	add	r7, sp, #0
 800b71c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	689b      	ldr	r3, [r3, #8]
 800b722:	f023 0201 	bic.w	r2, r3, #1
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b72a:	2300      	movs	r3, #0
}
 800b72c:	4618      	mov	r0, r3
 800b72e:	370c      	adds	r7, #12
 800b730:	46bd      	mov	sp, r7
 800b732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b736:	4770      	bx	lr

0800b738 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b738:	b580      	push	{r7, lr}
 800b73a:	b084      	sub	sp, #16
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	6078      	str	r0, [r7, #4]
 800b740:	460b      	mov	r3, r1
 800b742:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b744:	2300      	movs	r3, #0
 800b746:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	68db      	ldr	r3, [r3, #12]
 800b74c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b754:	78fb      	ldrb	r3, [r7, #3]
 800b756:	2b01      	cmp	r3, #1
 800b758:	d115      	bne.n	800b786 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	68db      	ldr	r3, [r3, #12]
 800b75e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800b766:	200a      	movs	r0, #10
 800b768:	f7f8 f88a 	bl	8003880 <HAL_Delay>
      ms += 10U;
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	330a      	adds	r3, #10
 800b770:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800b772:	6878      	ldr	r0, [r7, #4]
 800b774:	f001 f93f 	bl	800c9f6 <USB_GetMode>
 800b778:	4603      	mov	r3, r0
 800b77a:	2b01      	cmp	r3, #1
 800b77c:	d01e      	beq.n	800b7bc <USB_SetCurrentMode+0x84>
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	2bc7      	cmp	r3, #199	@ 0xc7
 800b782:	d9f0      	bls.n	800b766 <USB_SetCurrentMode+0x2e>
 800b784:	e01a      	b.n	800b7bc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b786:	78fb      	ldrb	r3, [r7, #3]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d115      	bne.n	800b7b8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	68db      	ldr	r3, [r3, #12]
 800b790:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800b798:	200a      	movs	r0, #10
 800b79a:	f7f8 f871 	bl	8003880 <HAL_Delay>
      ms += 10U;
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	330a      	adds	r3, #10
 800b7a2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800b7a4:	6878      	ldr	r0, [r7, #4]
 800b7a6:	f001 f926 	bl	800c9f6 <USB_GetMode>
 800b7aa:	4603      	mov	r3, r0
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d005      	beq.n	800b7bc <USB_SetCurrentMode+0x84>
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	2bc7      	cmp	r3, #199	@ 0xc7
 800b7b4:	d9f0      	bls.n	800b798 <USB_SetCurrentMode+0x60>
 800b7b6:	e001      	b.n	800b7bc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b7b8:	2301      	movs	r3, #1
 800b7ba:	e005      	b.n	800b7c8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	2bc8      	cmp	r3, #200	@ 0xc8
 800b7c0:	d101      	bne.n	800b7c6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b7c2:	2301      	movs	r3, #1
 800b7c4:	e000      	b.n	800b7c8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b7c6:	2300      	movs	r3, #0
}
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	3710      	adds	r7, #16
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	bd80      	pop	{r7, pc}

0800b7d0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b7d0:	b084      	sub	sp, #16
 800b7d2:	b580      	push	{r7, lr}
 800b7d4:	b086      	sub	sp, #24
 800b7d6:	af00      	add	r7, sp, #0
 800b7d8:	6078      	str	r0, [r7, #4]
 800b7da:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800b7de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	613b      	str	r3, [r7, #16]
 800b7ee:	e009      	b.n	800b804 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b7f0:	687a      	ldr	r2, [r7, #4]
 800b7f2:	693b      	ldr	r3, [r7, #16]
 800b7f4:	3340      	adds	r3, #64	@ 0x40
 800b7f6:	009b      	lsls	r3, r3, #2
 800b7f8:	4413      	add	r3, r2
 800b7fa:	2200      	movs	r2, #0
 800b7fc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b7fe:	693b      	ldr	r3, [r7, #16]
 800b800:	3301      	adds	r3, #1
 800b802:	613b      	str	r3, [r7, #16]
 800b804:	693b      	ldr	r3, [r7, #16]
 800b806:	2b0e      	cmp	r3, #14
 800b808:	d9f2      	bls.n	800b7f0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b80a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d11c      	bne.n	800b84c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b818:	685b      	ldr	r3, [r3, #4]
 800b81a:	68fa      	ldr	r2, [r7, #12]
 800b81c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b820:	f043 0302 	orr.w	r3, r3, #2
 800b824:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b82a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b836:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b842:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	639a      	str	r2, [r3, #56]	@ 0x38
 800b84a:	e00b      	b.n	800b864 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b850:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b85c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b86a:	461a      	mov	r2, r3
 800b86c:	2300      	movs	r3, #0
 800b86e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b870:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800b874:	2b01      	cmp	r3, #1
 800b876:	d10d      	bne.n	800b894 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b878:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d104      	bne.n	800b88a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b880:	2100      	movs	r1, #0
 800b882:	6878      	ldr	r0, [r7, #4]
 800b884:	f000 f968 	bl	800bb58 <USB_SetDevSpeed>
 800b888:	e008      	b.n	800b89c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b88a:	2101      	movs	r1, #1
 800b88c:	6878      	ldr	r0, [r7, #4]
 800b88e:	f000 f963 	bl	800bb58 <USB_SetDevSpeed>
 800b892:	e003      	b.n	800b89c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b894:	2103      	movs	r1, #3
 800b896:	6878      	ldr	r0, [r7, #4]
 800b898:	f000 f95e 	bl	800bb58 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b89c:	2110      	movs	r1, #16
 800b89e:	6878      	ldr	r0, [r7, #4]
 800b8a0:	f000 f8fa 	bl	800ba98 <USB_FlushTxFifo>
 800b8a4:	4603      	mov	r3, r0
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d001      	beq.n	800b8ae <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800b8aa:	2301      	movs	r3, #1
 800b8ac:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b8ae:	6878      	ldr	r0, [r7, #4]
 800b8b0:	f000 f924 	bl	800bafc <USB_FlushRxFifo>
 800b8b4:	4603      	mov	r3, r0
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d001      	beq.n	800b8be <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800b8ba:	2301      	movs	r3, #1
 800b8bc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b8c4:	461a      	mov	r2, r3
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b8d0:	461a      	mov	r2, r3
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b8dc:	461a      	mov	r2, r3
 800b8de:	2300      	movs	r3, #0
 800b8e0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	613b      	str	r3, [r7, #16]
 800b8e6:	e043      	b.n	800b970 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b8e8:	693b      	ldr	r3, [r7, #16]
 800b8ea:	015a      	lsls	r2, r3, #5
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	4413      	add	r3, r2
 800b8f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b8fa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b8fe:	d118      	bne.n	800b932 <USB_DevInit+0x162>
    {
      if (i == 0U)
 800b900:	693b      	ldr	r3, [r7, #16]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d10a      	bne.n	800b91c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b906:	693b      	ldr	r3, [r7, #16]
 800b908:	015a      	lsls	r2, r3, #5
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	4413      	add	r3, r2
 800b90e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b912:	461a      	mov	r2, r3
 800b914:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800b918:	6013      	str	r3, [r2, #0]
 800b91a:	e013      	b.n	800b944 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b91c:	693b      	ldr	r3, [r7, #16]
 800b91e:	015a      	lsls	r2, r3, #5
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	4413      	add	r3, r2
 800b924:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b928:	461a      	mov	r2, r3
 800b92a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800b92e:	6013      	str	r3, [r2, #0]
 800b930:	e008      	b.n	800b944 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b932:	693b      	ldr	r3, [r7, #16]
 800b934:	015a      	lsls	r2, r3, #5
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	4413      	add	r3, r2
 800b93a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b93e:	461a      	mov	r2, r3
 800b940:	2300      	movs	r3, #0
 800b942:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b944:	693b      	ldr	r3, [r7, #16]
 800b946:	015a      	lsls	r2, r3, #5
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	4413      	add	r3, r2
 800b94c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b950:	461a      	mov	r2, r3
 800b952:	2300      	movs	r3, #0
 800b954:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b956:	693b      	ldr	r3, [r7, #16]
 800b958:	015a      	lsls	r2, r3, #5
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	4413      	add	r3, r2
 800b95e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b962:	461a      	mov	r2, r3
 800b964:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800b968:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b96a:	693b      	ldr	r3, [r7, #16]
 800b96c:	3301      	adds	r3, #1
 800b96e:	613b      	str	r3, [r7, #16]
 800b970:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b974:	461a      	mov	r2, r3
 800b976:	693b      	ldr	r3, [r7, #16]
 800b978:	4293      	cmp	r3, r2
 800b97a:	d3b5      	bcc.n	800b8e8 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b97c:	2300      	movs	r3, #0
 800b97e:	613b      	str	r3, [r7, #16]
 800b980:	e043      	b.n	800ba0a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b982:	693b      	ldr	r3, [r7, #16]
 800b984:	015a      	lsls	r2, r3, #5
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	4413      	add	r3, r2
 800b98a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b994:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b998:	d118      	bne.n	800b9cc <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800b99a:	693b      	ldr	r3, [r7, #16]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d10a      	bne.n	800b9b6 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b9a0:	693b      	ldr	r3, [r7, #16]
 800b9a2:	015a      	lsls	r2, r3, #5
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	4413      	add	r3, r2
 800b9a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b9ac:	461a      	mov	r2, r3
 800b9ae:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800b9b2:	6013      	str	r3, [r2, #0]
 800b9b4:	e013      	b.n	800b9de <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b9b6:	693b      	ldr	r3, [r7, #16]
 800b9b8:	015a      	lsls	r2, r3, #5
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	4413      	add	r3, r2
 800b9be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b9c2:	461a      	mov	r2, r3
 800b9c4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800b9c8:	6013      	str	r3, [r2, #0]
 800b9ca:	e008      	b.n	800b9de <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b9cc:	693b      	ldr	r3, [r7, #16]
 800b9ce:	015a      	lsls	r2, r3, #5
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	4413      	add	r3, r2
 800b9d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b9d8:	461a      	mov	r2, r3
 800b9da:	2300      	movs	r3, #0
 800b9dc:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b9de:	693b      	ldr	r3, [r7, #16]
 800b9e0:	015a      	lsls	r2, r3, #5
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	4413      	add	r3, r2
 800b9e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b9ea:	461a      	mov	r2, r3
 800b9ec:	2300      	movs	r3, #0
 800b9ee:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b9f0:	693b      	ldr	r3, [r7, #16]
 800b9f2:	015a      	lsls	r2, r3, #5
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	4413      	add	r3, r2
 800b9f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b9fc:	461a      	mov	r2, r3
 800b9fe:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800ba02:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ba04:	693b      	ldr	r3, [r7, #16]
 800ba06:	3301      	adds	r3, #1
 800ba08:	613b      	str	r3, [r7, #16]
 800ba0a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800ba0e:	461a      	mov	r2, r3
 800ba10:	693b      	ldr	r3, [r7, #16]
 800ba12:	4293      	cmp	r3, r2
 800ba14:	d3b5      	bcc.n	800b982 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ba1c:	691b      	ldr	r3, [r3, #16]
 800ba1e:	68fa      	ldr	r2, [r7, #12]
 800ba20:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ba24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ba28:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	2200      	movs	r2, #0
 800ba2e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800ba36:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ba38:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d105      	bne.n	800ba4c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	699b      	ldr	r3, [r3, #24]
 800ba44:	f043 0210 	orr.w	r2, r3, #16
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	699a      	ldr	r2, [r3, #24]
 800ba50:	4b10      	ldr	r3, [pc, #64]	@ (800ba94 <USB_DevInit+0x2c4>)
 800ba52:	4313      	orrs	r3, r2
 800ba54:	687a      	ldr	r2, [r7, #4]
 800ba56:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800ba58:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d005      	beq.n	800ba6c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	699b      	ldr	r3, [r3, #24]
 800ba64:	f043 0208 	orr.w	r2, r3, #8
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800ba6c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800ba70:	2b01      	cmp	r3, #1
 800ba72:	d107      	bne.n	800ba84 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	699b      	ldr	r3, [r3, #24]
 800ba78:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ba7c:	f043 0304 	orr.w	r3, r3, #4
 800ba80:	687a      	ldr	r2, [r7, #4]
 800ba82:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800ba84:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba86:	4618      	mov	r0, r3
 800ba88:	3718      	adds	r7, #24
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ba90:	b004      	add	sp, #16
 800ba92:	4770      	bx	lr
 800ba94:	803c3800 	.word	0x803c3800

0800ba98 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ba98:	b480      	push	{r7}
 800ba9a:	b085      	sub	sp, #20
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
 800baa0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800baa2:	2300      	movs	r3, #0
 800baa4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	3301      	adds	r3, #1
 800baaa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bab2:	d901      	bls.n	800bab8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800bab4:	2303      	movs	r3, #3
 800bab6:	e01b      	b.n	800baf0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	691b      	ldr	r3, [r3, #16]
 800babc:	2b00      	cmp	r3, #0
 800babe:	daf2      	bge.n	800baa6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800bac0:	2300      	movs	r3, #0
 800bac2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800bac4:	683b      	ldr	r3, [r7, #0]
 800bac6:	019b      	lsls	r3, r3, #6
 800bac8:	f043 0220 	orr.w	r2, r3, #32
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	3301      	adds	r3, #1
 800bad4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800badc:	d901      	bls.n	800bae2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800bade:	2303      	movs	r3, #3
 800bae0:	e006      	b.n	800baf0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	691b      	ldr	r3, [r3, #16]
 800bae6:	f003 0320 	and.w	r3, r3, #32
 800baea:	2b20      	cmp	r3, #32
 800baec:	d0f0      	beq.n	800bad0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800baee:	2300      	movs	r3, #0
}
 800baf0:	4618      	mov	r0, r3
 800baf2:	3714      	adds	r7, #20
 800baf4:	46bd      	mov	sp, r7
 800baf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bafa:	4770      	bx	lr

0800bafc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800bafc:	b480      	push	{r7}
 800bafe:	b085      	sub	sp, #20
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bb04:	2300      	movs	r3, #0
 800bb06:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	3301      	adds	r3, #1
 800bb0c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bb14:	d901      	bls.n	800bb1a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800bb16:	2303      	movs	r3, #3
 800bb18:	e018      	b.n	800bb4c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	691b      	ldr	r3, [r3, #16]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	daf2      	bge.n	800bb08 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800bb22:	2300      	movs	r3, #0
 800bb24:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	2210      	movs	r2, #16
 800bb2a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	3301      	adds	r3, #1
 800bb30:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bb38:	d901      	bls.n	800bb3e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800bb3a:	2303      	movs	r3, #3
 800bb3c:	e006      	b.n	800bb4c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	691b      	ldr	r3, [r3, #16]
 800bb42:	f003 0310 	and.w	r3, r3, #16
 800bb46:	2b10      	cmp	r3, #16
 800bb48:	d0f0      	beq.n	800bb2c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800bb4a:	2300      	movs	r3, #0
}
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	3714      	adds	r7, #20
 800bb50:	46bd      	mov	sp, r7
 800bb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb56:	4770      	bx	lr

0800bb58 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800bb58:	b480      	push	{r7}
 800bb5a:	b085      	sub	sp, #20
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	6078      	str	r0, [r7, #4]
 800bb60:	460b      	mov	r3, r1
 800bb62:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bb6e:	681a      	ldr	r2, [r3, #0]
 800bb70:	78fb      	ldrb	r3, [r7, #3]
 800bb72:	68f9      	ldr	r1, [r7, #12]
 800bb74:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800bb78:	4313      	orrs	r3, r2
 800bb7a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800bb7c:	2300      	movs	r3, #0
}
 800bb7e:	4618      	mov	r0, r3
 800bb80:	3714      	adds	r7, #20
 800bb82:	46bd      	mov	sp, r7
 800bb84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb88:	4770      	bx	lr

0800bb8a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800bb8a:	b480      	push	{r7}
 800bb8c:	b087      	sub	sp, #28
 800bb8e:	af00      	add	r7, sp, #0
 800bb90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800bb96:	693b      	ldr	r3, [r7, #16]
 800bb98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bb9c:	689b      	ldr	r3, [r3, #8]
 800bb9e:	f003 0306 	and.w	r3, r3, #6
 800bba2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d102      	bne.n	800bbb0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800bbaa:	2300      	movs	r3, #0
 800bbac:	75fb      	strb	r3, [r7, #23]
 800bbae:	e00a      	b.n	800bbc6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	2b02      	cmp	r3, #2
 800bbb4:	d002      	beq.n	800bbbc <USB_GetDevSpeed+0x32>
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	2b06      	cmp	r3, #6
 800bbba:	d102      	bne.n	800bbc2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800bbbc:	2302      	movs	r3, #2
 800bbbe:	75fb      	strb	r3, [r7, #23]
 800bbc0:	e001      	b.n	800bbc6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800bbc2:	230f      	movs	r3, #15
 800bbc4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800bbc6:	7dfb      	ldrb	r3, [r7, #23]
}
 800bbc8:	4618      	mov	r0, r3
 800bbca:	371c      	adds	r7, #28
 800bbcc:	46bd      	mov	sp, r7
 800bbce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd2:	4770      	bx	lr

0800bbd4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800bbd4:	b480      	push	{r7}
 800bbd6:	b085      	sub	sp, #20
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	6078      	str	r0, [r7, #4]
 800bbdc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bbe2:	683b      	ldr	r3, [r7, #0]
 800bbe4:	781b      	ldrb	r3, [r3, #0]
 800bbe6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bbe8:	683b      	ldr	r3, [r7, #0]
 800bbea:	785b      	ldrb	r3, [r3, #1]
 800bbec:	2b01      	cmp	r3, #1
 800bbee:	d13a      	bne.n	800bc66 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bbf6:	69da      	ldr	r2, [r3, #28]
 800bbf8:	683b      	ldr	r3, [r7, #0]
 800bbfa:	781b      	ldrb	r3, [r3, #0]
 800bbfc:	f003 030f 	and.w	r3, r3, #15
 800bc00:	2101      	movs	r1, #1
 800bc02:	fa01 f303 	lsl.w	r3, r1, r3
 800bc06:	b29b      	uxth	r3, r3
 800bc08:	68f9      	ldr	r1, [r7, #12]
 800bc0a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800bc0e:	4313      	orrs	r3, r2
 800bc10:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800bc12:	68bb      	ldr	r3, [r7, #8]
 800bc14:	015a      	lsls	r2, r3, #5
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	4413      	add	r3, r2
 800bc1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d155      	bne.n	800bcd4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bc28:	68bb      	ldr	r3, [r7, #8]
 800bc2a:	015a      	lsls	r2, r3, #5
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	4413      	add	r3, r2
 800bc30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bc34:	681a      	ldr	r2, [r3, #0]
 800bc36:	683b      	ldr	r3, [r7, #0]
 800bc38:	689b      	ldr	r3, [r3, #8]
 800bc3a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800bc3e:	683b      	ldr	r3, [r7, #0]
 800bc40:	791b      	ldrb	r3, [r3, #4]
 800bc42:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bc44:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800bc46:	68bb      	ldr	r3, [r7, #8]
 800bc48:	059b      	lsls	r3, r3, #22
 800bc4a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bc4c:	4313      	orrs	r3, r2
 800bc4e:	68ba      	ldr	r2, [r7, #8]
 800bc50:	0151      	lsls	r1, r2, #5
 800bc52:	68fa      	ldr	r2, [r7, #12]
 800bc54:	440a      	add	r2, r1
 800bc56:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bc5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bc5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bc62:	6013      	str	r3, [r2, #0]
 800bc64:	e036      	b.n	800bcd4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bc6c:	69da      	ldr	r2, [r3, #28]
 800bc6e:	683b      	ldr	r3, [r7, #0]
 800bc70:	781b      	ldrb	r3, [r3, #0]
 800bc72:	f003 030f 	and.w	r3, r3, #15
 800bc76:	2101      	movs	r1, #1
 800bc78:	fa01 f303 	lsl.w	r3, r1, r3
 800bc7c:	041b      	lsls	r3, r3, #16
 800bc7e:	68f9      	ldr	r1, [r7, #12]
 800bc80:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800bc84:	4313      	orrs	r3, r2
 800bc86:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800bc88:	68bb      	ldr	r3, [r7, #8]
 800bc8a:	015a      	lsls	r2, r3, #5
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	4413      	add	r3, r2
 800bc90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d11a      	bne.n	800bcd4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800bc9e:	68bb      	ldr	r3, [r7, #8]
 800bca0:	015a      	lsls	r2, r3, #5
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	4413      	add	r3, r2
 800bca6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bcaa:	681a      	ldr	r2, [r3, #0]
 800bcac:	683b      	ldr	r3, [r7, #0]
 800bcae:	689b      	ldr	r3, [r3, #8]
 800bcb0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800bcb4:	683b      	ldr	r3, [r7, #0]
 800bcb6:	791b      	ldrb	r3, [r3, #4]
 800bcb8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800bcba:	430b      	orrs	r3, r1
 800bcbc:	4313      	orrs	r3, r2
 800bcbe:	68ba      	ldr	r2, [r7, #8]
 800bcc0:	0151      	lsls	r1, r2, #5
 800bcc2:	68fa      	ldr	r2, [r7, #12]
 800bcc4:	440a      	add	r2, r1
 800bcc6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bcca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bcce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bcd2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800bcd4:	2300      	movs	r3, #0
}
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	3714      	adds	r7, #20
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce0:	4770      	bx	lr
	...

0800bce4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800bce4:	b480      	push	{r7}
 800bce6:	b085      	sub	sp, #20
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	6078      	str	r0, [r7, #4]
 800bcec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bcf2:	683b      	ldr	r3, [r7, #0]
 800bcf4:	781b      	ldrb	r3, [r3, #0]
 800bcf6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800bcf8:	683b      	ldr	r3, [r7, #0]
 800bcfa:	785b      	ldrb	r3, [r3, #1]
 800bcfc:	2b01      	cmp	r3, #1
 800bcfe:	d161      	bne.n	800bdc4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bd00:	68bb      	ldr	r3, [r7, #8]
 800bd02:	015a      	lsls	r2, r3, #5
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	4413      	add	r3, r2
 800bd08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bd12:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bd16:	d11f      	bne.n	800bd58 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800bd18:	68bb      	ldr	r3, [r7, #8]
 800bd1a:	015a      	lsls	r2, r3, #5
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	4413      	add	r3, r2
 800bd20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	68ba      	ldr	r2, [r7, #8]
 800bd28:	0151      	lsls	r1, r2, #5
 800bd2a:	68fa      	ldr	r2, [r7, #12]
 800bd2c:	440a      	add	r2, r1
 800bd2e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bd32:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800bd36:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800bd38:	68bb      	ldr	r3, [r7, #8]
 800bd3a:	015a      	lsls	r2, r3, #5
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	4413      	add	r3, r2
 800bd40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	68ba      	ldr	r2, [r7, #8]
 800bd48:	0151      	lsls	r1, r2, #5
 800bd4a:	68fa      	ldr	r2, [r7, #12]
 800bd4c:	440a      	add	r2, r1
 800bd4e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bd52:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800bd56:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bd5e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bd60:	683b      	ldr	r3, [r7, #0]
 800bd62:	781b      	ldrb	r3, [r3, #0]
 800bd64:	f003 030f 	and.w	r3, r3, #15
 800bd68:	2101      	movs	r1, #1
 800bd6a:	fa01 f303 	lsl.w	r3, r1, r3
 800bd6e:	b29b      	uxth	r3, r3
 800bd70:	43db      	mvns	r3, r3
 800bd72:	68f9      	ldr	r1, [r7, #12]
 800bd74:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800bd78:	4013      	ands	r3, r2
 800bd7a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bd82:	69da      	ldr	r2, [r3, #28]
 800bd84:	683b      	ldr	r3, [r7, #0]
 800bd86:	781b      	ldrb	r3, [r3, #0]
 800bd88:	f003 030f 	and.w	r3, r3, #15
 800bd8c:	2101      	movs	r1, #1
 800bd8e:	fa01 f303 	lsl.w	r3, r1, r3
 800bd92:	b29b      	uxth	r3, r3
 800bd94:	43db      	mvns	r3, r3
 800bd96:	68f9      	ldr	r1, [r7, #12]
 800bd98:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800bd9c:	4013      	ands	r3, r2
 800bd9e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800bda0:	68bb      	ldr	r3, [r7, #8]
 800bda2:	015a      	lsls	r2, r3, #5
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	4413      	add	r3, r2
 800bda8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bdac:	681a      	ldr	r2, [r3, #0]
 800bdae:	68bb      	ldr	r3, [r7, #8]
 800bdb0:	0159      	lsls	r1, r3, #5
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	440b      	add	r3, r1
 800bdb6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bdba:	4619      	mov	r1, r3
 800bdbc:	4b35      	ldr	r3, [pc, #212]	@ (800be94 <USB_DeactivateEndpoint+0x1b0>)
 800bdbe:	4013      	ands	r3, r2
 800bdc0:	600b      	str	r3, [r1, #0]
 800bdc2:	e060      	b.n	800be86 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bdc4:	68bb      	ldr	r3, [r7, #8]
 800bdc6:	015a      	lsls	r2, r3, #5
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	4413      	add	r3, r2
 800bdcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bdd6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bdda:	d11f      	bne.n	800be1c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800bddc:	68bb      	ldr	r3, [r7, #8]
 800bdde:	015a      	lsls	r2, r3, #5
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	4413      	add	r3, r2
 800bde4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	68ba      	ldr	r2, [r7, #8]
 800bdec:	0151      	lsls	r1, r2, #5
 800bdee:	68fa      	ldr	r2, [r7, #12]
 800bdf0:	440a      	add	r2, r1
 800bdf2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bdf6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800bdfa:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800bdfc:	68bb      	ldr	r3, [r7, #8]
 800bdfe:	015a      	lsls	r2, r3, #5
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	4413      	add	r3, r2
 800be04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	68ba      	ldr	r2, [r7, #8]
 800be0c:	0151      	lsls	r1, r2, #5
 800be0e:	68fa      	ldr	r2, [r7, #12]
 800be10:	440a      	add	r2, r1
 800be12:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800be16:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800be1a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800be22:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800be24:	683b      	ldr	r3, [r7, #0]
 800be26:	781b      	ldrb	r3, [r3, #0]
 800be28:	f003 030f 	and.w	r3, r3, #15
 800be2c:	2101      	movs	r1, #1
 800be2e:	fa01 f303 	lsl.w	r3, r1, r3
 800be32:	041b      	lsls	r3, r3, #16
 800be34:	43db      	mvns	r3, r3
 800be36:	68f9      	ldr	r1, [r7, #12]
 800be38:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800be3c:	4013      	ands	r3, r2
 800be3e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800be46:	69da      	ldr	r2, [r3, #28]
 800be48:	683b      	ldr	r3, [r7, #0]
 800be4a:	781b      	ldrb	r3, [r3, #0]
 800be4c:	f003 030f 	and.w	r3, r3, #15
 800be50:	2101      	movs	r1, #1
 800be52:	fa01 f303 	lsl.w	r3, r1, r3
 800be56:	041b      	lsls	r3, r3, #16
 800be58:	43db      	mvns	r3, r3
 800be5a:	68f9      	ldr	r1, [r7, #12]
 800be5c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800be60:	4013      	ands	r3, r2
 800be62:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800be64:	68bb      	ldr	r3, [r7, #8]
 800be66:	015a      	lsls	r2, r3, #5
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	4413      	add	r3, r2
 800be6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800be70:	681a      	ldr	r2, [r3, #0]
 800be72:	68bb      	ldr	r3, [r7, #8]
 800be74:	0159      	lsls	r1, r3, #5
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	440b      	add	r3, r1
 800be7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800be7e:	4619      	mov	r1, r3
 800be80:	4b05      	ldr	r3, [pc, #20]	@ (800be98 <USB_DeactivateEndpoint+0x1b4>)
 800be82:	4013      	ands	r3, r2
 800be84:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800be86:	2300      	movs	r3, #0
}
 800be88:	4618      	mov	r0, r3
 800be8a:	3714      	adds	r7, #20
 800be8c:	46bd      	mov	sp, r7
 800be8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be92:	4770      	bx	lr
 800be94:	ec337800 	.word	0xec337800
 800be98:	eff37800 	.word	0xeff37800

0800be9c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800be9c:	b580      	push	{r7, lr}
 800be9e:	b08a      	sub	sp, #40	@ 0x28
 800bea0:	af02      	add	r7, sp, #8
 800bea2:	60f8      	str	r0, [r7, #12]
 800bea4:	60b9      	str	r1, [r7, #8]
 800bea6:	4613      	mov	r3, r2
 800bea8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800beae:	68bb      	ldr	r3, [r7, #8]
 800beb0:	781b      	ldrb	r3, [r3, #0]
 800beb2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800beb4:	68bb      	ldr	r3, [r7, #8]
 800beb6:	785b      	ldrb	r3, [r3, #1]
 800beb8:	2b01      	cmp	r3, #1
 800beba:	f040 817f 	bne.w	800c1bc <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800bebe:	68bb      	ldr	r3, [r7, #8]
 800bec0:	691b      	ldr	r3, [r3, #16]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d132      	bne.n	800bf2c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bec6:	69bb      	ldr	r3, [r7, #24]
 800bec8:	015a      	lsls	r2, r3, #5
 800beca:	69fb      	ldr	r3, [r7, #28]
 800becc:	4413      	add	r3, r2
 800bece:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bed2:	691b      	ldr	r3, [r3, #16]
 800bed4:	69ba      	ldr	r2, [r7, #24]
 800bed6:	0151      	lsls	r1, r2, #5
 800bed8:	69fa      	ldr	r2, [r7, #28]
 800beda:	440a      	add	r2, r1
 800bedc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bee0:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800bee4:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800bee8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800beea:	69bb      	ldr	r3, [r7, #24]
 800beec:	015a      	lsls	r2, r3, #5
 800beee:	69fb      	ldr	r3, [r7, #28]
 800bef0:	4413      	add	r3, r2
 800bef2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bef6:	691b      	ldr	r3, [r3, #16]
 800bef8:	69ba      	ldr	r2, [r7, #24]
 800befa:	0151      	lsls	r1, r2, #5
 800befc:	69fa      	ldr	r2, [r7, #28]
 800befe:	440a      	add	r2, r1
 800bf00:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bf04:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800bf08:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bf0a:	69bb      	ldr	r3, [r7, #24]
 800bf0c:	015a      	lsls	r2, r3, #5
 800bf0e:	69fb      	ldr	r3, [r7, #28]
 800bf10:	4413      	add	r3, r2
 800bf12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bf16:	691b      	ldr	r3, [r3, #16]
 800bf18:	69ba      	ldr	r2, [r7, #24]
 800bf1a:	0151      	lsls	r1, r2, #5
 800bf1c:	69fa      	ldr	r2, [r7, #28]
 800bf1e:	440a      	add	r2, r1
 800bf20:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bf24:	0cdb      	lsrs	r3, r3, #19
 800bf26:	04db      	lsls	r3, r3, #19
 800bf28:	6113      	str	r3, [r2, #16]
 800bf2a:	e097      	b.n	800c05c <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bf2c:	69bb      	ldr	r3, [r7, #24]
 800bf2e:	015a      	lsls	r2, r3, #5
 800bf30:	69fb      	ldr	r3, [r7, #28]
 800bf32:	4413      	add	r3, r2
 800bf34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bf38:	691b      	ldr	r3, [r3, #16]
 800bf3a:	69ba      	ldr	r2, [r7, #24]
 800bf3c:	0151      	lsls	r1, r2, #5
 800bf3e:	69fa      	ldr	r2, [r7, #28]
 800bf40:	440a      	add	r2, r1
 800bf42:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bf46:	0cdb      	lsrs	r3, r3, #19
 800bf48:	04db      	lsls	r3, r3, #19
 800bf4a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bf4c:	69bb      	ldr	r3, [r7, #24]
 800bf4e:	015a      	lsls	r2, r3, #5
 800bf50:	69fb      	ldr	r3, [r7, #28]
 800bf52:	4413      	add	r3, r2
 800bf54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bf58:	691b      	ldr	r3, [r3, #16]
 800bf5a:	69ba      	ldr	r2, [r7, #24]
 800bf5c:	0151      	lsls	r1, r2, #5
 800bf5e:	69fa      	ldr	r2, [r7, #28]
 800bf60:	440a      	add	r2, r1
 800bf62:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bf66:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800bf6a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800bf6e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800bf70:	69bb      	ldr	r3, [r7, #24]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d11a      	bne.n	800bfac <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800bf76:	68bb      	ldr	r3, [r7, #8]
 800bf78:	691a      	ldr	r2, [r3, #16]
 800bf7a:	68bb      	ldr	r3, [r7, #8]
 800bf7c:	689b      	ldr	r3, [r3, #8]
 800bf7e:	429a      	cmp	r2, r3
 800bf80:	d903      	bls.n	800bf8a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800bf82:	68bb      	ldr	r3, [r7, #8]
 800bf84:	689a      	ldr	r2, [r3, #8]
 800bf86:	68bb      	ldr	r3, [r7, #8]
 800bf88:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800bf8a:	69bb      	ldr	r3, [r7, #24]
 800bf8c:	015a      	lsls	r2, r3, #5
 800bf8e:	69fb      	ldr	r3, [r7, #28]
 800bf90:	4413      	add	r3, r2
 800bf92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bf96:	691b      	ldr	r3, [r3, #16]
 800bf98:	69ba      	ldr	r2, [r7, #24]
 800bf9a:	0151      	lsls	r1, r2, #5
 800bf9c:	69fa      	ldr	r2, [r7, #28]
 800bf9e:	440a      	add	r2, r1
 800bfa0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bfa4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800bfa8:	6113      	str	r3, [r2, #16]
 800bfaa:	e044      	b.n	800c036 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800bfac:	68bb      	ldr	r3, [r7, #8]
 800bfae:	691a      	ldr	r2, [r3, #16]
 800bfb0:	68bb      	ldr	r3, [r7, #8]
 800bfb2:	689b      	ldr	r3, [r3, #8]
 800bfb4:	4413      	add	r3, r2
 800bfb6:	1e5a      	subs	r2, r3, #1
 800bfb8:	68bb      	ldr	r3, [r7, #8]
 800bfba:	689b      	ldr	r3, [r3, #8]
 800bfbc:	fbb2 f3f3 	udiv	r3, r2, r3
 800bfc0:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 800bfc2:	69bb      	ldr	r3, [r7, #24]
 800bfc4:	015a      	lsls	r2, r3, #5
 800bfc6:	69fb      	ldr	r3, [r7, #28]
 800bfc8:	4413      	add	r3, r2
 800bfca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bfce:	691a      	ldr	r2, [r3, #16]
 800bfd0:	8afb      	ldrh	r3, [r7, #22]
 800bfd2:	04d9      	lsls	r1, r3, #19
 800bfd4:	4ba4      	ldr	r3, [pc, #656]	@ (800c268 <USB_EPStartXfer+0x3cc>)
 800bfd6:	400b      	ands	r3, r1
 800bfd8:	69b9      	ldr	r1, [r7, #24]
 800bfda:	0148      	lsls	r0, r1, #5
 800bfdc:	69f9      	ldr	r1, [r7, #28]
 800bfde:	4401      	add	r1, r0
 800bfe0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800bfe4:	4313      	orrs	r3, r2
 800bfe6:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800bfe8:	68bb      	ldr	r3, [r7, #8]
 800bfea:	791b      	ldrb	r3, [r3, #4]
 800bfec:	2b01      	cmp	r3, #1
 800bfee:	d122      	bne.n	800c036 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800bff0:	69bb      	ldr	r3, [r7, #24]
 800bff2:	015a      	lsls	r2, r3, #5
 800bff4:	69fb      	ldr	r3, [r7, #28]
 800bff6:	4413      	add	r3, r2
 800bff8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bffc:	691b      	ldr	r3, [r3, #16]
 800bffe:	69ba      	ldr	r2, [r7, #24]
 800c000:	0151      	lsls	r1, r2, #5
 800c002:	69fa      	ldr	r2, [r7, #28]
 800c004:	440a      	add	r2, r1
 800c006:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c00a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800c00e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 800c010:	69bb      	ldr	r3, [r7, #24]
 800c012:	015a      	lsls	r2, r3, #5
 800c014:	69fb      	ldr	r3, [r7, #28]
 800c016:	4413      	add	r3, r2
 800c018:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c01c:	691a      	ldr	r2, [r3, #16]
 800c01e:	8afb      	ldrh	r3, [r7, #22]
 800c020:	075b      	lsls	r3, r3, #29
 800c022:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800c026:	69b9      	ldr	r1, [r7, #24]
 800c028:	0148      	lsls	r0, r1, #5
 800c02a:	69f9      	ldr	r1, [r7, #28]
 800c02c:	4401      	add	r1, r0
 800c02e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800c032:	4313      	orrs	r3, r2
 800c034:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c036:	69bb      	ldr	r3, [r7, #24]
 800c038:	015a      	lsls	r2, r3, #5
 800c03a:	69fb      	ldr	r3, [r7, #28]
 800c03c:	4413      	add	r3, r2
 800c03e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c042:	691a      	ldr	r2, [r3, #16]
 800c044:	68bb      	ldr	r3, [r7, #8]
 800c046:	691b      	ldr	r3, [r3, #16]
 800c048:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c04c:	69b9      	ldr	r1, [r7, #24]
 800c04e:	0148      	lsls	r0, r1, #5
 800c050:	69f9      	ldr	r1, [r7, #28]
 800c052:	4401      	add	r1, r0
 800c054:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800c058:	4313      	orrs	r3, r2
 800c05a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800c05c:	79fb      	ldrb	r3, [r7, #7]
 800c05e:	2b01      	cmp	r3, #1
 800c060:	d14b      	bne.n	800c0fa <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c062:	68bb      	ldr	r3, [r7, #8]
 800c064:	69db      	ldr	r3, [r3, #28]
 800c066:	2b00      	cmp	r3, #0
 800c068:	d009      	beq.n	800c07e <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c06a:	69bb      	ldr	r3, [r7, #24]
 800c06c:	015a      	lsls	r2, r3, #5
 800c06e:	69fb      	ldr	r3, [r7, #28]
 800c070:	4413      	add	r3, r2
 800c072:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c076:	461a      	mov	r2, r3
 800c078:	68bb      	ldr	r3, [r7, #8]
 800c07a:	69db      	ldr	r3, [r3, #28]
 800c07c:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800c07e:	68bb      	ldr	r3, [r7, #8]
 800c080:	791b      	ldrb	r3, [r3, #4]
 800c082:	2b01      	cmp	r3, #1
 800c084:	d128      	bne.n	800c0d8 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c086:	69fb      	ldr	r3, [r7, #28]
 800c088:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c08c:	689b      	ldr	r3, [r3, #8]
 800c08e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c092:	2b00      	cmp	r3, #0
 800c094:	d110      	bne.n	800c0b8 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c096:	69bb      	ldr	r3, [r7, #24]
 800c098:	015a      	lsls	r2, r3, #5
 800c09a:	69fb      	ldr	r3, [r7, #28]
 800c09c:	4413      	add	r3, r2
 800c09e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	69ba      	ldr	r2, [r7, #24]
 800c0a6:	0151      	lsls	r1, r2, #5
 800c0a8:	69fa      	ldr	r2, [r7, #28]
 800c0aa:	440a      	add	r2, r1
 800c0ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c0b0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800c0b4:	6013      	str	r3, [r2, #0]
 800c0b6:	e00f      	b.n	800c0d8 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c0b8:	69bb      	ldr	r3, [r7, #24]
 800c0ba:	015a      	lsls	r2, r3, #5
 800c0bc:	69fb      	ldr	r3, [r7, #28]
 800c0be:	4413      	add	r3, r2
 800c0c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	69ba      	ldr	r2, [r7, #24]
 800c0c8:	0151      	lsls	r1, r2, #5
 800c0ca:	69fa      	ldr	r2, [r7, #28]
 800c0cc:	440a      	add	r2, r1
 800c0ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c0d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c0d6:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c0d8:	69bb      	ldr	r3, [r7, #24]
 800c0da:	015a      	lsls	r2, r3, #5
 800c0dc:	69fb      	ldr	r3, [r7, #28]
 800c0de:	4413      	add	r3, r2
 800c0e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	69ba      	ldr	r2, [r7, #24]
 800c0e8:	0151      	lsls	r1, r2, #5
 800c0ea:	69fa      	ldr	r2, [r7, #28]
 800c0ec:	440a      	add	r2, r1
 800c0ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c0f2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800c0f6:	6013      	str	r3, [r2, #0]
 800c0f8:	e166      	b.n	800c3c8 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c0fa:	69bb      	ldr	r3, [r7, #24]
 800c0fc:	015a      	lsls	r2, r3, #5
 800c0fe:	69fb      	ldr	r3, [r7, #28]
 800c100:	4413      	add	r3, r2
 800c102:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	69ba      	ldr	r2, [r7, #24]
 800c10a:	0151      	lsls	r1, r2, #5
 800c10c:	69fa      	ldr	r2, [r7, #28]
 800c10e:	440a      	add	r2, r1
 800c110:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c114:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800c118:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c11a:	68bb      	ldr	r3, [r7, #8]
 800c11c:	791b      	ldrb	r3, [r3, #4]
 800c11e:	2b01      	cmp	r3, #1
 800c120:	d015      	beq.n	800c14e <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800c122:	68bb      	ldr	r3, [r7, #8]
 800c124:	691b      	ldr	r3, [r3, #16]
 800c126:	2b00      	cmp	r3, #0
 800c128:	f000 814e 	beq.w	800c3c8 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c12c:	69fb      	ldr	r3, [r7, #28]
 800c12e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c132:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c134:	68bb      	ldr	r3, [r7, #8]
 800c136:	781b      	ldrb	r3, [r3, #0]
 800c138:	f003 030f 	and.w	r3, r3, #15
 800c13c:	2101      	movs	r1, #1
 800c13e:	fa01 f303 	lsl.w	r3, r1, r3
 800c142:	69f9      	ldr	r1, [r7, #28]
 800c144:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c148:	4313      	orrs	r3, r2
 800c14a:	634b      	str	r3, [r1, #52]	@ 0x34
 800c14c:	e13c      	b.n	800c3c8 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c14e:	69fb      	ldr	r3, [r7, #28]
 800c150:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c154:	689b      	ldr	r3, [r3, #8]
 800c156:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d110      	bne.n	800c180 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c15e:	69bb      	ldr	r3, [r7, #24]
 800c160:	015a      	lsls	r2, r3, #5
 800c162:	69fb      	ldr	r3, [r7, #28]
 800c164:	4413      	add	r3, r2
 800c166:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	69ba      	ldr	r2, [r7, #24]
 800c16e:	0151      	lsls	r1, r2, #5
 800c170:	69fa      	ldr	r2, [r7, #28]
 800c172:	440a      	add	r2, r1
 800c174:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c178:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800c17c:	6013      	str	r3, [r2, #0]
 800c17e:	e00f      	b.n	800c1a0 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c180:	69bb      	ldr	r3, [r7, #24]
 800c182:	015a      	lsls	r2, r3, #5
 800c184:	69fb      	ldr	r3, [r7, #28]
 800c186:	4413      	add	r3, r2
 800c188:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	69ba      	ldr	r2, [r7, #24]
 800c190:	0151      	lsls	r1, r2, #5
 800c192:	69fa      	ldr	r2, [r7, #28]
 800c194:	440a      	add	r2, r1
 800c196:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c19a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c19e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800c1a0:	68bb      	ldr	r3, [r7, #8]
 800c1a2:	68d9      	ldr	r1, [r3, #12]
 800c1a4:	68bb      	ldr	r3, [r7, #8]
 800c1a6:	781a      	ldrb	r2, [r3, #0]
 800c1a8:	68bb      	ldr	r3, [r7, #8]
 800c1aa:	691b      	ldr	r3, [r3, #16]
 800c1ac:	b298      	uxth	r0, r3
 800c1ae:	79fb      	ldrb	r3, [r7, #7]
 800c1b0:	9300      	str	r3, [sp, #0]
 800c1b2:	4603      	mov	r3, r0
 800c1b4:	68f8      	ldr	r0, [r7, #12]
 800c1b6:	f000 f9b9 	bl	800c52c <USB_WritePacket>
 800c1ba:	e105      	b.n	800c3c8 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c1bc:	69bb      	ldr	r3, [r7, #24]
 800c1be:	015a      	lsls	r2, r3, #5
 800c1c0:	69fb      	ldr	r3, [r7, #28]
 800c1c2:	4413      	add	r3, r2
 800c1c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c1c8:	691b      	ldr	r3, [r3, #16]
 800c1ca:	69ba      	ldr	r2, [r7, #24]
 800c1cc:	0151      	lsls	r1, r2, #5
 800c1ce:	69fa      	ldr	r2, [r7, #28]
 800c1d0:	440a      	add	r2, r1
 800c1d2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c1d6:	0cdb      	lsrs	r3, r3, #19
 800c1d8:	04db      	lsls	r3, r3, #19
 800c1da:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c1dc:	69bb      	ldr	r3, [r7, #24]
 800c1de:	015a      	lsls	r2, r3, #5
 800c1e0:	69fb      	ldr	r3, [r7, #28]
 800c1e2:	4413      	add	r3, r2
 800c1e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c1e8:	691b      	ldr	r3, [r3, #16]
 800c1ea:	69ba      	ldr	r2, [r7, #24]
 800c1ec:	0151      	lsls	r1, r2, #5
 800c1ee:	69fa      	ldr	r2, [r7, #28]
 800c1f0:	440a      	add	r2, r1
 800c1f2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c1f6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800c1fa:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800c1fe:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800c200:	69bb      	ldr	r3, [r7, #24]
 800c202:	2b00      	cmp	r3, #0
 800c204:	d132      	bne.n	800c26c <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800c206:	68bb      	ldr	r3, [r7, #8]
 800c208:	691b      	ldr	r3, [r3, #16]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d003      	beq.n	800c216 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800c20e:	68bb      	ldr	r3, [r7, #8]
 800c210:	689a      	ldr	r2, [r3, #8]
 800c212:	68bb      	ldr	r3, [r7, #8]
 800c214:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800c216:	68bb      	ldr	r3, [r7, #8]
 800c218:	689a      	ldr	r2, [r3, #8]
 800c21a:	68bb      	ldr	r3, [r7, #8]
 800c21c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800c21e:	69bb      	ldr	r3, [r7, #24]
 800c220:	015a      	lsls	r2, r3, #5
 800c222:	69fb      	ldr	r3, [r7, #28]
 800c224:	4413      	add	r3, r2
 800c226:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c22a:	691a      	ldr	r2, [r3, #16]
 800c22c:	68bb      	ldr	r3, [r7, #8]
 800c22e:	6a1b      	ldr	r3, [r3, #32]
 800c230:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c234:	69b9      	ldr	r1, [r7, #24]
 800c236:	0148      	lsls	r0, r1, #5
 800c238:	69f9      	ldr	r1, [r7, #28]
 800c23a:	4401      	add	r1, r0
 800c23c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800c240:	4313      	orrs	r3, r2
 800c242:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c244:	69bb      	ldr	r3, [r7, #24]
 800c246:	015a      	lsls	r2, r3, #5
 800c248:	69fb      	ldr	r3, [r7, #28]
 800c24a:	4413      	add	r3, r2
 800c24c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c250:	691b      	ldr	r3, [r3, #16]
 800c252:	69ba      	ldr	r2, [r7, #24]
 800c254:	0151      	lsls	r1, r2, #5
 800c256:	69fa      	ldr	r2, [r7, #28]
 800c258:	440a      	add	r2, r1
 800c25a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c25e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c262:	6113      	str	r3, [r2, #16]
 800c264:	e062      	b.n	800c32c <USB_EPStartXfer+0x490>
 800c266:	bf00      	nop
 800c268:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800c26c:	68bb      	ldr	r3, [r7, #8]
 800c26e:	691b      	ldr	r3, [r3, #16]
 800c270:	2b00      	cmp	r3, #0
 800c272:	d123      	bne.n	800c2bc <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800c274:	69bb      	ldr	r3, [r7, #24]
 800c276:	015a      	lsls	r2, r3, #5
 800c278:	69fb      	ldr	r3, [r7, #28]
 800c27a:	4413      	add	r3, r2
 800c27c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c280:	691a      	ldr	r2, [r3, #16]
 800c282:	68bb      	ldr	r3, [r7, #8]
 800c284:	689b      	ldr	r3, [r3, #8]
 800c286:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c28a:	69b9      	ldr	r1, [r7, #24]
 800c28c:	0148      	lsls	r0, r1, #5
 800c28e:	69f9      	ldr	r1, [r7, #28]
 800c290:	4401      	add	r1, r0
 800c292:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800c296:	4313      	orrs	r3, r2
 800c298:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c29a:	69bb      	ldr	r3, [r7, #24]
 800c29c:	015a      	lsls	r2, r3, #5
 800c29e:	69fb      	ldr	r3, [r7, #28]
 800c2a0:	4413      	add	r3, r2
 800c2a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c2a6:	691b      	ldr	r3, [r3, #16]
 800c2a8:	69ba      	ldr	r2, [r7, #24]
 800c2aa:	0151      	lsls	r1, r2, #5
 800c2ac:	69fa      	ldr	r2, [r7, #28]
 800c2ae:	440a      	add	r2, r1
 800c2b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c2b4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c2b8:	6113      	str	r3, [r2, #16]
 800c2ba:	e037      	b.n	800c32c <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800c2bc:	68bb      	ldr	r3, [r7, #8]
 800c2be:	691a      	ldr	r2, [r3, #16]
 800c2c0:	68bb      	ldr	r3, [r7, #8]
 800c2c2:	689b      	ldr	r3, [r3, #8]
 800c2c4:	4413      	add	r3, r2
 800c2c6:	1e5a      	subs	r2, r3, #1
 800c2c8:	68bb      	ldr	r3, [r7, #8]
 800c2ca:	689b      	ldr	r3, [r3, #8]
 800c2cc:	fbb2 f3f3 	udiv	r3, r2, r3
 800c2d0:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800c2d2:	68bb      	ldr	r3, [r7, #8]
 800c2d4:	689b      	ldr	r3, [r3, #8]
 800c2d6:	8afa      	ldrh	r2, [r7, #22]
 800c2d8:	fb03 f202 	mul.w	r2, r3, r2
 800c2dc:	68bb      	ldr	r3, [r7, #8]
 800c2de:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800c2e0:	69bb      	ldr	r3, [r7, #24]
 800c2e2:	015a      	lsls	r2, r3, #5
 800c2e4:	69fb      	ldr	r3, [r7, #28]
 800c2e6:	4413      	add	r3, r2
 800c2e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c2ec:	691a      	ldr	r2, [r3, #16]
 800c2ee:	8afb      	ldrh	r3, [r7, #22]
 800c2f0:	04d9      	lsls	r1, r3, #19
 800c2f2:	4b38      	ldr	r3, [pc, #224]	@ (800c3d4 <USB_EPStartXfer+0x538>)
 800c2f4:	400b      	ands	r3, r1
 800c2f6:	69b9      	ldr	r1, [r7, #24]
 800c2f8:	0148      	lsls	r0, r1, #5
 800c2fa:	69f9      	ldr	r1, [r7, #28]
 800c2fc:	4401      	add	r1, r0
 800c2fe:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800c302:	4313      	orrs	r3, r2
 800c304:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800c306:	69bb      	ldr	r3, [r7, #24]
 800c308:	015a      	lsls	r2, r3, #5
 800c30a:	69fb      	ldr	r3, [r7, #28]
 800c30c:	4413      	add	r3, r2
 800c30e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c312:	691a      	ldr	r2, [r3, #16]
 800c314:	68bb      	ldr	r3, [r7, #8]
 800c316:	6a1b      	ldr	r3, [r3, #32]
 800c318:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c31c:	69b9      	ldr	r1, [r7, #24]
 800c31e:	0148      	lsls	r0, r1, #5
 800c320:	69f9      	ldr	r1, [r7, #28]
 800c322:	4401      	add	r1, r0
 800c324:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800c328:	4313      	orrs	r3, r2
 800c32a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800c32c:	79fb      	ldrb	r3, [r7, #7]
 800c32e:	2b01      	cmp	r3, #1
 800c330:	d10d      	bne.n	800c34e <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c332:	68bb      	ldr	r3, [r7, #8]
 800c334:	68db      	ldr	r3, [r3, #12]
 800c336:	2b00      	cmp	r3, #0
 800c338:	d009      	beq.n	800c34e <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c33a:	68bb      	ldr	r3, [r7, #8]
 800c33c:	68d9      	ldr	r1, [r3, #12]
 800c33e:	69bb      	ldr	r3, [r7, #24]
 800c340:	015a      	lsls	r2, r3, #5
 800c342:	69fb      	ldr	r3, [r7, #28]
 800c344:	4413      	add	r3, r2
 800c346:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c34a:	460a      	mov	r2, r1
 800c34c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800c34e:	68bb      	ldr	r3, [r7, #8]
 800c350:	791b      	ldrb	r3, [r3, #4]
 800c352:	2b01      	cmp	r3, #1
 800c354:	d128      	bne.n	800c3a8 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c356:	69fb      	ldr	r3, [r7, #28]
 800c358:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c35c:	689b      	ldr	r3, [r3, #8]
 800c35e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c362:	2b00      	cmp	r3, #0
 800c364:	d110      	bne.n	800c388 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800c366:	69bb      	ldr	r3, [r7, #24]
 800c368:	015a      	lsls	r2, r3, #5
 800c36a:	69fb      	ldr	r3, [r7, #28]
 800c36c:	4413      	add	r3, r2
 800c36e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	69ba      	ldr	r2, [r7, #24]
 800c376:	0151      	lsls	r1, r2, #5
 800c378:	69fa      	ldr	r2, [r7, #28]
 800c37a:	440a      	add	r2, r1
 800c37c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c380:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800c384:	6013      	str	r3, [r2, #0]
 800c386:	e00f      	b.n	800c3a8 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800c388:	69bb      	ldr	r3, [r7, #24]
 800c38a:	015a      	lsls	r2, r3, #5
 800c38c:	69fb      	ldr	r3, [r7, #28]
 800c38e:	4413      	add	r3, r2
 800c390:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	69ba      	ldr	r2, [r7, #24]
 800c398:	0151      	lsls	r1, r2, #5
 800c39a:	69fa      	ldr	r2, [r7, #28]
 800c39c:	440a      	add	r2, r1
 800c39e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c3a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c3a6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c3a8:	69bb      	ldr	r3, [r7, #24]
 800c3aa:	015a      	lsls	r2, r3, #5
 800c3ac:	69fb      	ldr	r3, [r7, #28]
 800c3ae:	4413      	add	r3, r2
 800c3b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	69ba      	ldr	r2, [r7, #24]
 800c3b8:	0151      	lsls	r1, r2, #5
 800c3ba:	69fa      	ldr	r2, [r7, #28]
 800c3bc:	440a      	add	r2, r1
 800c3be:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c3c2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800c3c6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c3c8:	2300      	movs	r3, #0
}
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	3720      	adds	r7, #32
 800c3ce:	46bd      	mov	sp, r7
 800c3d0:	bd80      	pop	{r7, pc}
 800c3d2:	bf00      	nop
 800c3d4:	1ff80000 	.word	0x1ff80000

0800c3d8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c3d8:	b480      	push	{r7}
 800c3da:	b087      	sub	sp, #28
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	6078      	str	r0, [r7, #4]
 800c3e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c3e2:	2300      	movs	r3, #0
 800c3e4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800c3e6:	2300      	movs	r3, #0
 800c3e8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c3ee:	683b      	ldr	r3, [r7, #0]
 800c3f0:	785b      	ldrb	r3, [r3, #1]
 800c3f2:	2b01      	cmp	r3, #1
 800c3f4:	d14a      	bne.n	800c48c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c3f6:	683b      	ldr	r3, [r7, #0]
 800c3f8:	781b      	ldrb	r3, [r3, #0]
 800c3fa:	015a      	lsls	r2, r3, #5
 800c3fc:	693b      	ldr	r3, [r7, #16]
 800c3fe:	4413      	add	r3, r2
 800c400:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c40a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c40e:	f040 8086 	bne.w	800c51e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800c412:	683b      	ldr	r3, [r7, #0]
 800c414:	781b      	ldrb	r3, [r3, #0]
 800c416:	015a      	lsls	r2, r3, #5
 800c418:	693b      	ldr	r3, [r7, #16]
 800c41a:	4413      	add	r3, r2
 800c41c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	683a      	ldr	r2, [r7, #0]
 800c424:	7812      	ldrb	r2, [r2, #0]
 800c426:	0151      	lsls	r1, r2, #5
 800c428:	693a      	ldr	r2, [r7, #16]
 800c42a:	440a      	add	r2, r1
 800c42c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c430:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800c434:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800c436:	683b      	ldr	r3, [r7, #0]
 800c438:	781b      	ldrb	r3, [r3, #0]
 800c43a:	015a      	lsls	r2, r3, #5
 800c43c:	693b      	ldr	r3, [r7, #16]
 800c43e:	4413      	add	r3, r2
 800c440:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	683a      	ldr	r2, [r7, #0]
 800c448:	7812      	ldrb	r2, [r2, #0]
 800c44a:	0151      	lsls	r1, r2, #5
 800c44c:	693a      	ldr	r2, [r7, #16]
 800c44e:	440a      	add	r2, r1
 800c450:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c454:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c458:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	3301      	adds	r3, #1
 800c45e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	f242 7210 	movw	r2, #10000	@ 0x2710
 800c466:	4293      	cmp	r3, r2
 800c468:	d902      	bls.n	800c470 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800c46a:	2301      	movs	r3, #1
 800c46c:	75fb      	strb	r3, [r7, #23]
          break;
 800c46e:	e056      	b.n	800c51e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800c470:	683b      	ldr	r3, [r7, #0]
 800c472:	781b      	ldrb	r3, [r3, #0]
 800c474:	015a      	lsls	r2, r3, #5
 800c476:	693b      	ldr	r3, [r7, #16]
 800c478:	4413      	add	r3, r2
 800c47a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c484:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c488:	d0e7      	beq.n	800c45a <USB_EPStopXfer+0x82>
 800c48a:	e048      	b.n	800c51e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c48c:	683b      	ldr	r3, [r7, #0]
 800c48e:	781b      	ldrb	r3, [r3, #0]
 800c490:	015a      	lsls	r2, r3, #5
 800c492:	693b      	ldr	r3, [r7, #16]
 800c494:	4413      	add	r3, r2
 800c496:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c4a0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c4a4:	d13b      	bne.n	800c51e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800c4a6:	683b      	ldr	r3, [r7, #0]
 800c4a8:	781b      	ldrb	r3, [r3, #0]
 800c4aa:	015a      	lsls	r2, r3, #5
 800c4ac:	693b      	ldr	r3, [r7, #16]
 800c4ae:	4413      	add	r3, r2
 800c4b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	683a      	ldr	r2, [r7, #0]
 800c4b8:	7812      	ldrb	r2, [r2, #0]
 800c4ba:	0151      	lsls	r1, r2, #5
 800c4bc:	693a      	ldr	r2, [r7, #16]
 800c4be:	440a      	add	r2, r1
 800c4c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c4c4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800c4c8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800c4ca:	683b      	ldr	r3, [r7, #0]
 800c4cc:	781b      	ldrb	r3, [r3, #0]
 800c4ce:	015a      	lsls	r2, r3, #5
 800c4d0:	693b      	ldr	r3, [r7, #16]
 800c4d2:	4413      	add	r3, r2
 800c4d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	683a      	ldr	r2, [r7, #0]
 800c4dc:	7812      	ldrb	r2, [r2, #0]
 800c4de:	0151      	lsls	r1, r2, #5
 800c4e0:	693a      	ldr	r2, [r7, #16]
 800c4e2:	440a      	add	r2, r1
 800c4e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c4e8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c4ec:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	3301      	adds	r3, #1
 800c4f2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	f242 7210 	movw	r2, #10000	@ 0x2710
 800c4fa:	4293      	cmp	r3, r2
 800c4fc:	d902      	bls.n	800c504 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800c4fe:	2301      	movs	r3, #1
 800c500:	75fb      	strb	r3, [r7, #23]
          break;
 800c502:	e00c      	b.n	800c51e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800c504:	683b      	ldr	r3, [r7, #0]
 800c506:	781b      	ldrb	r3, [r3, #0]
 800c508:	015a      	lsls	r2, r3, #5
 800c50a:	693b      	ldr	r3, [r7, #16]
 800c50c:	4413      	add	r3, r2
 800c50e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c518:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c51c:	d0e7      	beq.n	800c4ee <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800c51e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c520:	4618      	mov	r0, r3
 800c522:	371c      	adds	r7, #28
 800c524:	46bd      	mov	sp, r7
 800c526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c52a:	4770      	bx	lr

0800c52c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800c52c:	b480      	push	{r7}
 800c52e:	b089      	sub	sp, #36	@ 0x24
 800c530:	af00      	add	r7, sp, #0
 800c532:	60f8      	str	r0, [r7, #12]
 800c534:	60b9      	str	r1, [r7, #8]
 800c536:	4611      	mov	r1, r2
 800c538:	461a      	mov	r2, r3
 800c53a:	460b      	mov	r3, r1
 800c53c:	71fb      	strb	r3, [r7, #7]
 800c53e:	4613      	mov	r3, r2
 800c540:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800c546:	68bb      	ldr	r3, [r7, #8]
 800c548:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800c54a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d123      	bne.n	800c59a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800c552:	88bb      	ldrh	r3, [r7, #4]
 800c554:	3303      	adds	r3, #3
 800c556:	089b      	lsrs	r3, r3, #2
 800c558:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800c55a:	2300      	movs	r3, #0
 800c55c:	61bb      	str	r3, [r7, #24]
 800c55e:	e018      	b.n	800c592 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c560:	79fb      	ldrb	r3, [r7, #7]
 800c562:	031a      	lsls	r2, r3, #12
 800c564:	697b      	ldr	r3, [r7, #20]
 800c566:	4413      	add	r3, r2
 800c568:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c56c:	461a      	mov	r2, r3
 800c56e:	69fb      	ldr	r3, [r7, #28]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	6013      	str	r3, [r2, #0]
      pSrc++;
 800c574:	69fb      	ldr	r3, [r7, #28]
 800c576:	3301      	adds	r3, #1
 800c578:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c57a:	69fb      	ldr	r3, [r7, #28]
 800c57c:	3301      	adds	r3, #1
 800c57e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c580:	69fb      	ldr	r3, [r7, #28]
 800c582:	3301      	adds	r3, #1
 800c584:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c586:	69fb      	ldr	r3, [r7, #28]
 800c588:	3301      	adds	r3, #1
 800c58a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800c58c:	69bb      	ldr	r3, [r7, #24]
 800c58e:	3301      	adds	r3, #1
 800c590:	61bb      	str	r3, [r7, #24]
 800c592:	69ba      	ldr	r2, [r7, #24]
 800c594:	693b      	ldr	r3, [r7, #16]
 800c596:	429a      	cmp	r2, r3
 800c598:	d3e2      	bcc.n	800c560 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800c59a:	2300      	movs	r3, #0
}
 800c59c:	4618      	mov	r0, r3
 800c59e:	3724      	adds	r7, #36	@ 0x24
 800c5a0:	46bd      	mov	sp, r7
 800c5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a6:	4770      	bx	lr

0800c5a8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c5a8:	b480      	push	{r7}
 800c5aa:	b08b      	sub	sp, #44	@ 0x2c
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	60f8      	str	r0, [r7, #12]
 800c5b0:	60b9      	str	r1, [r7, #8]
 800c5b2:	4613      	mov	r3, r2
 800c5b4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800c5ba:	68bb      	ldr	r3, [r7, #8]
 800c5bc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800c5be:	88fb      	ldrh	r3, [r7, #6]
 800c5c0:	089b      	lsrs	r3, r3, #2
 800c5c2:	b29b      	uxth	r3, r3
 800c5c4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800c5c6:	88fb      	ldrh	r3, [r7, #6]
 800c5c8:	f003 0303 	and.w	r3, r3, #3
 800c5cc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800c5ce:	2300      	movs	r3, #0
 800c5d0:	623b      	str	r3, [r7, #32]
 800c5d2:	e014      	b.n	800c5fe <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c5d4:	69bb      	ldr	r3, [r7, #24]
 800c5d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c5da:	681a      	ldr	r2, [r3, #0]
 800c5dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5de:	601a      	str	r2, [r3, #0]
    pDest++;
 800c5e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5e2:	3301      	adds	r3, #1
 800c5e4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800c5e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5e8:	3301      	adds	r3, #1
 800c5ea:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800c5ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5ee:	3301      	adds	r3, #1
 800c5f0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800c5f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5f4:	3301      	adds	r3, #1
 800c5f6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800c5f8:	6a3b      	ldr	r3, [r7, #32]
 800c5fa:	3301      	adds	r3, #1
 800c5fc:	623b      	str	r3, [r7, #32]
 800c5fe:	6a3a      	ldr	r2, [r7, #32]
 800c600:	697b      	ldr	r3, [r7, #20]
 800c602:	429a      	cmp	r2, r3
 800c604:	d3e6      	bcc.n	800c5d4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800c606:	8bfb      	ldrh	r3, [r7, #30]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d01e      	beq.n	800c64a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800c60c:	2300      	movs	r3, #0
 800c60e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800c610:	69bb      	ldr	r3, [r7, #24]
 800c612:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c616:	461a      	mov	r2, r3
 800c618:	f107 0310 	add.w	r3, r7, #16
 800c61c:	6812      	ldr	r2, [r2, #0]
 800c61e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800c620:	693a      	ldr	r2, [r7, #16]
 800c622:	6a3b      	ldr	r3, [r7, #32]
 800c624:	b2db      	uxtb	r3, r3
 800c626:	00db      	lsls	r3, r3, #3
 800c628:	fa22 f303 	lsr.w	r3, r2, r3
 800c62c:	b2da      	uxtb	r2, r3
 800c62e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c630:	701a      	strb	r2, [r3, #0]
      i++;
 800c632:	6a3b      	ldr	r3, [r7, #32]
 800c634:	3301      	adds	r3, #1
 800c636:	623b      	str	r3, [r7, #32]
      pDest++;
 800c638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c63a:	3301      	adds	r3, #1
 800c63c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800c63e:	8bfb      	ldrh	r3, [r7, #30]
 800c640:	3b01      	subs	r3, #1
 800c642:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800c644:	8bfb      	ldrh	r3, [r7, #30]
 800c646:	2b00      	cmp	r3, #0
 800c648:	d1ea      	bne.n	800c620 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800c64a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c64c:	4618      	mov	r0, r3
 800c64e:	372c      	adds	r7, #44	@ 0x2c
 800c650:	46bd      	mov	sp, r7
 800c652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c656:	4770      	bx	lr

0800c658 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800c658:	b480      	push	{r7}
 800c65a:	b085      	sub	sp, #20
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	6078      	str	r0, [r7, #4]
 800c660:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c666:	683b      	ldr	r3, [r7, #0]
 800c668:	781b      	ldrb	r3, [r3, #0]
 800c66a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c66c:	683b      	ldr	r3, [r7, #0]
 800c66e:	785b      	ldrb	r3, [r3, #1]
 800c670:	2b01      	cmp	r3, #1
 800c672:	d12c      	bne.n	800c6ce <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c674:	68bb      	ldr	r3, [r7, #8]
 800c676:	015a      	lsls	r2, r3, #5
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	4413      	add	r3, r2
 800c67c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	2b00      	cmp	r3, #0
 800c684:	db12      	blt.n	800c6ac <USB_EPSetStall+0x54>
 800c686:	68bb      	ldr	r3, [r7, #8]
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d00f      	beq.n	800c6ac <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800c68c:	68bb      	ldr	r3, [r7, #8]
 800c68e:	015a      	lsls	r2, r3, #5
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	4413      	add	r3, r2
 800c694:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	68ba      	ldr	r2, [r7, #8]
 800c69c:	0151      	lsls	r1, r2, #5
 800c69e:	68fa      	ldr	r2, [r7, #12]
 800c6a0:	440a      	add	r2, r1
 800c6a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c6a6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800c6aa:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800c6ac:	68bb      	ldr	r3, [r7, #8]
 800c6ae:	015a      	lsls	r2, r3, #5
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	4413      	add	r3, r2
 800c6b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	68ba      	ldr	r2, [r7, #8]
 800c6bc:	0151      	lsls	r1, r2, #5
 800c6be:	68fa      	ldr	r2, [r7, #12]
 800c6c0:	440a      	add	r2, r1
 800c6c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c6c6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800c6ca:	6013      	str	r3, [r2, #0]
 800c6cc:	e02b      	b.n	800c726 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c6ce:	68bb      	ldr	r3, [r7, #8]
 800c6d0:	015a      	lsls	r2, r3, #5
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	4413      	add	r3, r2
 800c6d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	db12      	blt.n	800c706 <USB_EPSetStall+0xae>
 800c6e0:	68bb      	ldr	r3, [r7, #8]
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d00f      	beq.n	800c706 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800c6e6:	68bb      	ldr	r3, [r7, #8]
 800c6e8:	015a      	lsls	r2, r3, #5
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	4413      	add	r3, r2
 800c6ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	68ba      	ldr	r2, [r7, #8]
 800c6f6:	0151      	lsls	r1, r2, #5
 800c6f8:	68fa      	ldr	r2, [r7, #12]
 800c6fa:	440a      	add	r2, r1
 800c6fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c700:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800c704:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800c706:	68bb      	ldr	r3, [r7, #8]
 800c708:	015a      	lsls	r2, r3, #5
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	4413      	add	r3, r2
 800c70e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	68ba      	ldr	r2, [r7, #8]
 800c716:	0151      	lsls	r1, r2, #5
 800c718:	68fa      	ldr	r2, [r7, #12]
 800c71a:	440a      	add	r2, r1
 800c71c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c720:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800c724:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c726:	2300      	movs	r3, #0
}
 800c728:	4618      	mov	r0, r3
 800c72a:	3714      	adds	r7, #20
 800c72c:	46bd      	mov	sp, r7
 800c72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c732:	4770      	bx	lr

0800c734 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800c734:	b480      	push	{r7}
 800c736:	b085      	sub	sp, #20
 800c738:	af00      	add	r7, sp, #0
 800c73a:	6078      	str	r0, [r7, #4]
 800c73c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c742:	683b      	ldr	r3, [r7, #0]
 800c744:	781b      	ldrb	r3, [r3, #0]
 800c746:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c748:	683b      	ldr	r3, [r7, #0]
 800c74a:	785b      	ldrb	r3, [r3, #1]
 800c74c:	2b01      	cmp	r3, #1
 800c74e:	d128      	bne.n	800c7a2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c750:	68bb      	ldr	r3, [r7, #8]
 800c752:	015a      	lsls	r2, r3, #5
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	4413      	add	r3, r2
 800c758:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	68ba      	ldr	r2, [r7, #8]
 800c760:	0151      	lsls	r1, r2, #5
 800c762:	68fa      	ldr	r2, [r7, #12]
 800c764:	440a      	add	r2, r1
 800c766:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c76a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c76e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c770:	683b      	ldr	r3, [r7, #0]
 800c772:	791b      	ldrb	r3, [r3, #4]
 800c774:	2b03      	cmp	r3, #3
 800c776:	d003      	beq.n	800c780 <USB_EPClearStall+0x4c>
 800c778:	683b      	ldr	r3, [r7, #0]
 800c77a:	791b      	ldrb	r3, [r3, #4]
 800c77c:	2b02      	cmp	r3, #2
 800c77e:	d138      	bne.n	800c7f2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c780:	68bb      	ldr	r3, [r7, #8]
 800c782:	015a      	lsls	r2, r3, #5
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	4413      	add	r3, r2
 800c788:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	68ba      	ldr	r2, [r7, #8]
 800c790:	0151      	lsls	r1, r2, #5
 800c792:	68fa      	ldr	r2, [r7, #12]
 800c794:	440a      	add	r2, r1
 800c796:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c79a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c79e:	6013      	str	r3, [r2, #0]
 800c7a0:	e027      	b.n	800c7f2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c7a2:	68bb      	ldr	r3, [r7, #8]
 800c7a4:	015a      	lsls	r2, r3, #5
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	4413      	add	r3, r2
 800c7aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	68ba      	ldr	r2, [r7, #8]
 800c7b2:	0151      	lsls	r1, r2, #5
 800c7b4:	68fa      	ldr	r2, [r7, #12]
 800c7b6:	440a      	add	r2, r1
 800c7b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c7bc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c7c0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c7c2:	683b      	ldr	r3, [r7, #0]
 800c7c4:	791b      	ldrb	r3, [r3, #4]
 800c7c6:	2b03      	cmp	r3, #3
 800c7c8:	d003      	beq.n	800c7d2 <USB_EPClearStall+0x9e>
 800c7ca:	683b      	ldr	r3, [r7, #0]
 800c7cc:	791b      	ldrb	r3, [r3, #4]
 800c7ce:	2b02      	cmp	r3, #2
 800c7d0:	d10f      	bne.n	800c7f2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c7d2:	68bb      	ldr	r3, [r7, #8]
 800c7d4:	015a      	lsls	r2, r3, #5
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	4413      	add	r3, r2
 800c7da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	68ba      	ldr	r2, [r7, #8]
 800c7e2:	0151      	lsls	r1, r2, #5
 800c7e4:	68fa      	ldr	r2, [r7, #12]
 800c7e6:	440a      	add	r2, r1
 800c7e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c7ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c7f0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800c7f2:	2300      	movs	r3, #0
}
 800c7f4:	4618      	mov	r0, r3
 800c7f6:	3714      	adds	r7, #20
 800c7f8:	46bd      	mov	sp, r7
 800c7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7fe:	4770      	bx	lr

0800c800 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800c800:	b480      	push	{r7}
 800c802:	b085      	sub	sp, #20
 800c804:	af00      	add	r7, sp, #0
 800c806:	6078      	str	r0, [r7, #4]
 800c808:	460b      	mov	r3, r1
 800c80a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	68fa      	ldr	r2, [r7, #12]
 800c81a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c81e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800c822:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c82a:	681a      	ldr	r2, [r3, #0]
 800c82c:	78fb      	ldrb	r3, [r7, #3]
 800c82e:	011b      	lsls	r3, r3, #4
 800c830:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800c834:	68f9      	ldr	r1, [r7, #12]
 800c836:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c83a:	4313      	orrs	r3, r2
 800c83c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800c83e:	2300      	movs	r3, #0
}
 800c840:	4618      	mov	r0, r3
 800c842:	3714      	adds	r7, #20
 800c844:	46bd      	mov	sp, r7
 800c846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c84a:	4770      	bx	lr

0800c84c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800c84c:	b480      	push	{r7}
 800c84e:	b085      	sub	sp, #20
 800c850:	af00      	add	r7, sp, #0
 800c852:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	68fa      	ldr	r2, [r7, #12]
 800c862:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c866:	f023 0303 	bic.w	r3, r3, #3
 800c86a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c872:	685b      	ldr	r3, [r3, #4]
 800c874:	68fa      	ldr	r2, [r7, #12]
 800c876:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c87a:	f023 0302 	bic.w	r3, r3, #2
 800c87e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c880:	2300      	movs	r3, #0
}
 800c882:	4618      	mov	r0, r3
 800c884:	3714      	adds	r7, #20
 800c886:	46bd      	mov	sp, r7
 800c888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c88c:	4770      	bx	lr

0800c88e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800c88e:	b480      	push	{r7}
 800c890:	b085      	sub	sp, #20
 800c892:	af00      	add	r7, sp, #0
 800c894:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	68fa      	ldr	r2, [r7, #12]
 800c8a4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c8a8:	f023 0303 	bic.w	r3, r3, #3
 800c8ac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c8b4:	685b      	ldr	r3, [r3, #4]
 800c8b6:	68fa      	ldr	r2, [r7, #12]
 800c8b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c8bc:	f043 0302 	orr.w	r3, r3, #2
 800c8c0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c8c2:	2300      	movs	r3, #0
}
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	3714      	adds	r7, #20
 800c8c8:	46bd      	mov	sp, r7
 800c8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ce:	4770      	bx	lr

0800c8d0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800c8d0:	b480      	push	{r7}
 800c8d2:	b085      	sub	sp, #20
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	695b      	ldr	r3, [r3, #20]
 800c8dc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	699b      	ldr	r3, [r3, #24]
 800c8e2:	68fa      	ldr	r2, [r7, #12]
 800c8e4:	4013      	ands	r3, r2
 800c8e6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800c8e8:	68fb      	ldr	r3, [r7, #12]
}
 800c8ea:	4618      	mov	r0, r3
 800c8ec:	3714      	adds	r7, #20
 800c8ee:	46bd      	mov	sp, r7
 800c8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f4:	4770      	bx	lr

0800c8f6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800c8f6:	b480      	push	{r7}
 800c8f8:	b085      	sub	sp, #20
 800c8fa:	af00      	add	r7, sp, #0
 800c8fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c908:	699b      	ldr	r3, [r3, #24]
 800c90a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c912:	69db      	ldr	r3, [r3, #28]
 800c914:	68ba      	ldr	r2, [r7, #8]
 800c916:	4013      	ands	r3, r2
 800c918:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800c91a:	68bb      	ldr	r3, [r7, #8]
 800c91c:	0c1b      	lsrs	r3, r3, #16
}
 800c91e:	4618      	mov	r0, r3
 800c920:	3714      	adds	r7, #20
 800c922:	46bd      	mov	sp, r7
 800c924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c928:	4770      	bx	lr

0800c92a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800c92a:	b480      	push	{r7}
 800c92c:	b085      	sub	sp, #20
 800c92e:	af00      	add	r7, sp, #0
 800c930:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c93c:	699b      	ldr	r3, [r3, #24]
 800c93e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c946:	69db      	ldr	r3, [r3, #28]
 800c948:	68ba      	ldr	r2, [r7, #8]
 800c94a:	4013      	ands	r3, r2
 800c94c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800c94e:	68bb      	ldr	r3, [r7, #8]
 800c950:	b29b      	uxth	r3, r3
}
 800c952:	4618      	mov	r0, r3
 800c954:	3714      	adds	r7, #20
 800c956:	46bd      	mov	sp, r7
 800c958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c95c:	4770      	bx	lr

0800c95e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c95e:	b480      	push	{r7}
 800c960:	b085      	sub	sp, #20
 800c962:	af00      	add	r7, sp, #0
 800c964:	6078      	str	r0, [r7, #4]
 800c966:	460b      	mov	r3, r1
 800c968:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800c96e:	78fb      	ldrb	r3, [r7, #3]
 800c970:	015a      	lsls	r2, r3, #5
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	4413      	add	r3, r2
 800c976:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c97a:	689b      	ldr	r3, [r3, #8]
 800c97c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c984:	695b      	ldr	r3, [r3, #20]
 800c986:	68ba      	ldr	r2, [r7, #8]
 800c988:	4013      	ands	r3, r2
 800c98a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c98c:	68bb      	ldr	r3, [r7, #8]
}
 800c98e:	4618      	mov	r0, r3
 800c990:	3714      	adds	r7, #20
 800c992:	46bd      	mov	sp, r7
 800c994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c998:	4770      	bx	lr

0800c99a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c99a:	b480      	push	{r7}
 800c99c:	b087      	sub	sp, #28
 800c99e:	af00      	add	r7, sp, #0
 800c9a0:	6078      	str	r0, [r7, #4]
 800c9a2:	460b      	mov	r3, r1
 800c9a4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800c9aa:	697b      	ldr	r3, [r7, #20]
 800c9ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c9b0:	691b      	ldr	r3, [r3, #16]
 800c9b2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800c9b4:	697b      	ldr	r3, [r7, #20]
 800c9b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c9ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c9bc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800c9be:	78fb      	ldrb	r3, [r7, #3]
 800c9c0:	f003 030f 	and.w	r3, r3, #15
 800c9c4:	68fa      	ldr	r2, [r7, #12]
 800c9c6:	fa22 f303 	lsr.w	r3, r2, r3
 800c9ca:	01db      	lsls	r3, r3, #7
 800c9cc:	b2db      	uxtb	r3, r3
 800c9ce:	693a      	ldr	r2, [r7, #16]
 800c9d0:	4313      	orrs	r3, r2
 800c9d2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800c9d4:	78fb      	ldrb	r3, [r7, #3]
 800c9d6:	015a      	lsls	r2, r3, #5
 800c9d8:	697b      	ldr	r3, [r7, #20]
 800c9da:	4413      	add	r3, r2
 800c9dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c9e0:	689b      	ldr	r3, [r3, #8]
 800c9e2:	693a      	ldr	r2, [r7, #16]
 800c9e4:	4013      	ands	r3, r2
 800c9e6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c9e8:	68bb      	ldr	r3, [r7, #8]
}
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	371c      	adds	r7, #28
 800c9ee:	46bd      	mov	sp, r7
 800c9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f4:	4770      	bx	lr

0800c9f6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800c9f6:	b480      	push	{r7}
 800c9f8:	b083      	sub	sp, #12
 800c9fa:	af00      	add	r7, sp, #0
 800c9fc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	695b      	ldr	r3, [r3, #20]
 800ca02:	f003 0301 	and.w	r3, r3, #1
}
 800ca06:	4618      	mov	r0, r3
 800ca08:	370c      	adds	r7, #12
 800ca0a:	46bd      	mov	sp, r7
 800ca0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca10:	4770      	bx	lr

0800ca12 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800ca12:	b480      	push	{r7}
 800ca14:	b085      	sub	sp, #20
 800ca16:	af00      	add	r7, sp, #0
 800ca18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	68fa      	ldr	r2, [r7, #12]
 800ca28:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ca2c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800ca30:	f023 0307 	bic.w	r3, r3, #7
 800ca34:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ca3c:	685b      	ldr	r3, [r3, #4]
 800ca3e:	68fa      	ldr	r2, [r7, #12]
 800ca40:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ca44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ca48:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ca4a:	2300      	movs	r3, #0
}
 800ca4c:	4618      	mov	r0, r3
 800ca4e:	3714      	adds	r7, #20
 800ca50:	46bd      	mov	sp, r7
 800ca52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca56:	4770      	bx	lr

0800ca58 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800ca58:	b480      	push	{r7}
 800ca5a:	b087      	sub	sp, #28
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	60f8      	str	r0, [r7, #12]
 800ca60:	460b      	mov	r3, r1
 800ca62:	607a      	str	r2, [r7, #4]
 800ca64:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	333c      	adds	r3, #60	@ 0x3c
 800ca6e:	3304      	adds	r3, #4
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800ca74:	693b      	ldr	r3, [r7, #16]
 800ca76:	4a26      	ldr	r2, [pc, #152]	@ (800cb10 <USB_EP0_OutStart+0xb8>)
 800ca78:	4293      	cmp	r3, r2
 800ca7a:	d90a      	bls.n	800ca92 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ca7c:	697b      	ldr	r3, [r7, #20]
 800ca7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ca88:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ca8c:	d101      	bne.n	800ca92 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800ca8e:	2300      	movs	r3, #0
 800ca90:	e037      	b.n	800cb02 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800ca92:	697b      	ldr	r3, [r7, #20]
 800ca94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ca98:	461a      	mov	r2, r3
 800ca9a:	2300      	movs	r3, #0
 800ca9c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ca9e:	697b      	ldr	r3, [r7, #20]
 800caa0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800caa4:	691b      	ldr	r3, [r3, #16]
 800caa6:	697a      	ldr	r2, [r7, #20]
 800caa8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800caac:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800cab0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800cab2:	697b      	ldr	r3, [r7, #20]
 800cab4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cab8:	691b      	ldr	r3, [r3, #16]
 800caba:	697a      	ldr	r2, [r7, #20]
 800cabc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cac0:	f043 0318 	orr.w	r3, r3, #24
 800cac4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800cac6:	697b      	ldr	r3, [r7, #20]
 800cac8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cacc:	691b      	ldr	r3, [r3, #16]
 800cace:	697a      	ldr	r2, [r7, #20]
 800cad0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cad4:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800cad8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800cada:	7afb      	ldrb	r3, [r7, #11]
 800cadc:	2b01      	cmp	r3, #1
 800cade:	d10f      	bne.n	800cb00 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800cae0:	697b      	ldr	r3, [r7, #20]
 800cae2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cae6:	461a      	mov	r2, r3
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800caec:	697b      	ldr	r3, [r7, #20]
 800caee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	697a      	ldr	r2, [r7, #20]
 800caf6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cafa:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800cafe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cb00:	2300      	movs	r3, #0
}
 800cb02:	4618      	mov	r0, r3
 800cb04:	371c      	adds	r7, #28
 800cb06:	46bd      	mov	sp, r7
 800cb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb0c:	4770      	bx	lr
 800cb0e:	bf00      	nop
 800cb10:	4f54300a 	.word	0x4f54300a

0800cb14 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800cb14:	b480      	push	{r7}
 800cb16:	b085      	sub	sp, #20
 800cb18:	af00      	add	r7, sp, #0
 800cb1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800cb1c:	2300      	movs	r3, #0
 800cb1e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	3301      	adds	r3, #1
 800cb24:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800cb2c:	d901      	bls.n	800cb32 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800cb2e:	2303      	movs	r3, #3
 800cb30:	e01b      	b.n	800cb6a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	691b      	ldr	r3, [r3, #16]
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	daf2      	bge.n	800cb20 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800cb3a:	2300      	movs	r3, #0
 800cb3c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	691b      	ldr	r3, [r3, #16]
 800cb42:	f043 0201 	orr.w	r2, r3, #1
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	3301      	adds	r3, #1
 800cb4e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800cb56:	d901      	bls.n	800cb5c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800cb58:	2303      	movs	r3, #3
 800cb5a:	e006      	b.n	800cb6a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	691b      	ldr	r3, [r3, #16]
 800cb60:	f003 0301 	and.w	r3, r3, #1
 800cb64:	2b01      	cmp	r3, #1
 800cb66:	d0f0      	beq.n	800cb4a <USB_CoreReset+0x36>

  return HAL_OK;
 800cb68:	2300      	movs	r3, #0
}
 800cb6a:	4618      	mov	r0, r3
 800cb6c:	3714      	adds	r7, #20
 800cb6e:	46bd      	mov	sp, r7
 800cb70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb74:	4770      	bx	lr
	...

0800cb78 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cb78:	b580      	push	{r7, lr}
 800cb7a:	b084      	sub	sp, #16
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	6078      	str	r0, [r7, #4]
 800cb80:	460b      	mov	r3, r1
 800cb82:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800cb84:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800cb88:	f002 fd00 	bl	800f58c <USBD_static_malloc>
 800cb8c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d109      	bne.n	800cba8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	32b0      	adds	r2, #176	@ 0xb0
 800cb9e:	2100      	movs	r1, #0
 800cba0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800cba4:	2302      	movs	r3, #2
 800cba6:	e0d4      	b.n	800cd52 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800cba8:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800cbac:	2100      	movs	r1, #0
 800cbae:	68f8      	ldr	r0, [r7, #12]
 800cbb0:	f002 fd52 	bl	800f658 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	32b0      	adds	r2, #176	@ 0xb0
 800cbbe:	68f9      	ldr	r1, [r7, #12]
 800cbc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	32b0      	adds	r2, #176	@ 0xb0
 800cbce:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	7c1b      	ldrb	r3, [r3, #16]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d138      	bne.n	800cc52 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800cbe0:	4b5e      	ldr	r3, [pc, #376]	@ (800cd5c <USBD_CDC_Init+0x1e4>)
 800cbe2:	7819      	ldrb	r1, [r3, #0]
 800cbe4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800cbe8:	2202      	movs	r2, #2
 800cbea:	6878      	ldr	r0, [r7, #4]
 800cbec:	f002 fbab 	bl	800f346 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800cbf0:	4b5a      	ldr	r3, [pc, #360]	@ (800cd5c <USBD_CDC_Init+0x1e4>)
 800cbf2:	781b      	ldrb	r3, [r3, #0]
 800cbf4:	f003 020f 	and.w	r2, r3, #15
 800cbf8:	6879      	ldr	r1, [r7, #4]
 800cbfa:	4613      	mov	r3, r2
 800cbfc:	009b      	lsls	r3, r3, #2
 800cbfe:	4413      	add	r3, r2
 800cc00:	009b      	lsls	r3, r3, #2
 800cc02:	440b      	add	r3, r1
 800cc04:	3324      	adds	r3, #36	@ 0x24
 800cc06:	2201      	movs	r2, #1
 800cc08:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800cc0a:	4b55      	ldr	r3, [pc, #340]	@ (800cd60 <USBD_CDC_Init+0x1e8>)
 800cc0c:	7819      	ldrb	r1, [r3, #0]
 800cc0e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800cc12:	2202      	movs	r2, #2
 800cc14:	6878      	ldr	r0, [r7, #4]
 800cc16:	f002 fb96 	bl	800f346 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800cc1a:	4b51      	ldr	r3, [pc, #324]	@ (800cd60 <USBD_CDC_Init+0x1e8>)
 800cc1c:	781b      	ldrb	r3, [r3, #0]
 800cc1e:	f003 020f 	and.w	r2, r3, #15
 800cc22:	6879      	ldr	r1, [r7, #4]
 800cc24:	4613      	mov	r3, r2
 800cc26:	009b      	lsls	r3, r3, #2
 800cc28:	4413      	add	r3, r2
 800cc2a:	009b      	lsls	r3, r3, #2
 800cc2c:	440b      	add	r3, r1
 800cc2e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800cc32:	2201      	movs	r2, #1
 800cc34:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800cc36:	4b4b      	ldr	r3, [pc, #300]	@ (800cd64 <USBD_CDC_Init+0x1ec>)
 800cc38:	781b      	ldrb	r3, [r3, #0]
 800cc3a:	f003 020f 	and.w	r2, r3, #15
 800cc3e:	6879      	ldr	r1, [r7, #4]
 800cc40:	4613      	mov	r3, r2
 800cc42:	009b      	lsls	r3, r3, #2
 800cc44:	4413      	add	r3, r2
 800cc46:	009b      	lsls	r3, r3, #2
 800cc48:	440b      	add	r3, r1
 800cc4a:	3326      	adds	r3, #38	@ 0x26
 800cc4c:	2210      	movs	r2, #16
 800cc4e:	801a      	strh	r2, [r3, #0]
 800cc50:	e035      	b.n	800ccbe <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800cc52:	4b42      	ldr	r3, [pc, #264]	@ (800cd5c <USBD_CDC_Init+0x1e4>)
 800cc54:	7819      	ldrb	r1, [r3, #0]
 800cc56:	2340      	movs	r3, #64	@ 0x40
 800cc58:	2202      	movs	r2, #2
 800cc5a:	6878      	ldr	r0, [r7, #4]
 800cc5c:	f002 fb73 	bl	800f346 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800cc60:	4b3e      	ldr	r3, [pc, #248]	@ (800cd5c <USBD_CDC_Init+0x1e4>)
 800cc62:	781b      	ldrb	r3, [r3, #0]
 800cc64:	f003 020f 	and.w	r2, r3, #15
 800cc68:	6879      	ldr	r1, [r7, #4]
 800cc6a:	4613      	mov	r3, r2
 800cc6c:	009b      	lsls	r3, r3, #2
 800cc6e:	4413      	add	r3, r2
 800cc70:	009b      	lsls	r3, r3, #2
 800cc72:	440b      	add	r3, r1
 800cc74:	3324      	adds	r3, #36	@ 0x24
 800cc76:	2201      	movs	r2, #1
 800cc78:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800cc7a:	4b39      	ldr	r3, [pc, #228]	@ (800cd60 <USBD_CDC_Init+0x1e8>)
 800cc7c:	7819      	ldrb	r1, [r3, #0]
 800cc7e:	2340      	movs	r3, #64	@ 0x40
 800cc80:	2202      	movs	r2, #2
 800cc82:	6878      	ldr	r0, [r7, #4]
 800cc84:	f002 fb5f 	bl	800f346 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800cc88:	4b35      	ldr	r3, [pc, #212]	@ (800cd60 <USBD_CDC_Init+0x1e8>)
 800cc8a:	781b      	ldrb	r3, [r3, #0]
 800cc8c:	f003 020f 	and.w	r2, r3, #15
 800cc90:	6879      	ldr	r1, [r7, #4]
 800cc92:	4613      	mov	r3, r2
 800cc94:	009b      	lsls	r3, r3, #2
 800cc96:	4413      	add	r3, r2
 800cc98:	009b      	lsls	r3, r3, #2
 800cc9a:	440b      	add	r3, r1
 800cc9c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800cca0:	2201      	movs	r2, #1
 800cca2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800cca4:	4b2f      	ldr	r3, [pc, #188]	@ (800cd64 <USBD_CDC_Init+0x1ec>)
 800cca6:	781b      	ldrb	r3, [r3, #0]
 800cca8:	f003 020f 	and.w	r2, r3, #15
 800ccac:	6879      	ldr	r1, [r7, #4]
 800ccae:	4613      	mov	r3, r2
 800ccb0:	009b      	lsls	r3, r3, #2
 800ccb2:	4413      	add	r3, r2
 800ccb4:	009b      	lsls	r3, r3, #2
 800ccb6:	440b      	add	r3, r1
 800ccb8:	3326      	adds	r3, #38	@ 0x26
 800ccba:	2210      	movs	r2, #16
 800ccbc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ccbe:	4b29      	ldr	r3, [pc, #164]	@ (800cd64 <USBD_CDC_Init+0x1ec>)
 800ccc0:	7819      	ldrb	r1, [r3, #0]
 800ccc2:	2308      	movs	r3, #8
 800ccc4:	2203      	movs	r2, #3
 800ccc6:	6878      	ldr	r0, [r7, #4]
 800ccc8:	f002 fb3d 	bl	800f346 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800cccc:	4b25      	ldr	r3, [pc, #148]	@ (800cd64 <USBD_CDC_Init+0x1ec>)
 800ccce:	781b      	ldrb	r3, [r3, #0]
 800ccd0:	f003 020f 	and.w	r2, r3, #15
 800ccd4:	6879      	ldr	r1, [r7, #4]
 800ccd6:	4613      	mov	r3, r2
 800ccd8:	009b      	lsls	r3, r3, #2
 800ccda:	4413      	add	r3, r2
 800ccdc:	009b      	lsls	r3, r3, #2
 800ccde:	440b      	add	r3, r1
 800cce0:	3324      	adds	r3, #36	@ 0x24
 800cce2:	2201      	movs	r2, #1
 800cce4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	2200      	movs	r2, #0
 800ccea:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ccf4:	687a      	ldr	r2, [r7, #4]
 800ccf6:	33b0      	adds	r3, #176	@ 0xb0
 800ccf8:	009b      	lsls	r3, r3, #2
 800ccfa:	4413      	add	r3, r2
 800ccfc:	685b      	ldr	r3, [r3, #4]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	2200      	movs	r2, #0
 800cd06:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	2200      	movs	r2, #0
 800cd0e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d101      	bne.n	800cd20 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800cd1c:	2302      	movs	r3, #2
 800cd1e:	e018      	b.n	800cd52 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	7c1b      	ldrb	r3, [r3, #16]
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d10a      	bne.n	800cd3e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800cd28:	4b0d      	ldr	r3, [pc, #52]	@ (800cd60 <USBD_CDC_Init+0x1e8>)
 800cd2a:	7819      	ldrb	r1, [r3, #0]
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800cd32:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800cd36:	6878      	ldr	r0, [r7, #4]
 800cd38:	f002 fbf4 	bl	800f524 <USBD_LL_PrepareReceive>
 800cd3c:	e008      	b.n	800cd50 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800cd3e:	4b08      	ldr	r3, [pc, #32]	@ (800cd60 <USBD_CDC_Init+0x1e8>)
 800cd40:	7819      	ldrb	r1, [r3, #0]
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800cd48:	2340      	movs	r3, #64	@ 0x40
 800cd4a:	6878      	ldr	r0, [r7, #4]
 800cd4c:	f002 fbea 	bl	800f524 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800cd50:	2300      	movs	r3, #0
}
 800cd52:	4618      	mov	r0, r3
 800cd54:	3710      	adds	r7, #16
 800cd56:	46bd      	mov	sp, r7
 800cd58:	bd80      	pop	{r7, pc}
 800cd5a:	bf00      	nop
 800cd5c:	2000009f 	.word	0x2000009f
 800cd60:	200000a0 	.word	0x200000a0
 800cd64:	200000a1 	.word	0x200000a1

0800cd68 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cd68:	b580      	push	{r7, lr}
 800cd6a:	b082      	sub	sp, #8
 800cd6c:	af00      	add	r7, sp, #0
 800cd6e:	6078      	str	r0, [r7, #4]
 800cd70:	460b      	mov	r3, r1
 800cd72:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800cd74:	4b3a      	ldr	r3, [pc, #232]	@ (800ce60 <USBD_CDC_DeInit+0xf8>)
 800cd76:	781b      	ldrb	r3, [r3, #0]
 800cd78:	4619      	mov	r1, r3
 800cd7a:	6878      	ldr	r0, [r7, #4]
 800cd7c:	f002 fb09 	bl	800f392 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800cd80:	4b37      	ldr	r3, [pc, #220]	@ (800ce60 <USBD_CDC_DeInit+0xf8>)
 800cd82:	781b      	ldrb	r3, [r3, #0]
 800cd84:	f003 020f 	and.w	r2, r3, #15
 800cd88:	6879      	ldr	r1, [r7, #4]
 800cd8a:	4613      	mov	r3, r2
 800cd8c:	009b      	lsls	r3, r3, #2
 800cd8e:	4413      	add	r3, r2
 800cd90:	009b      	lsls	r3, r3, #2
 800cd92:	440b      	add	r3, r1
 800cd94:	3324      	adds	r3, #36	@ 0x24
 800cd96:	2200      	movs	r2, #0
 800cd98:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800cd9a:	4b32      	ldr	r3, [pc, #200]	@ (800ce64 <USBD_CDC_DeInit+0xfc>)
 800cd9c:	781b      	ldrb	r3, [r3, #0]
 800cd9e:	4619      	mov	r1, r3
 800cda0:	6878      	ldr	r0, [r7, #4]
 800cda2:	f002 faf6 	bl	800f392 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800cda6:	4b2f      	ldr	r3, [pc, #188]	@ (800ce64 <USBD_CDC_DeInit+0xfc>)
 800cda8:	781b      	ldrb	r3, [r3, #0]
 800cdaa:	f003 020f 	and.w	r2, r3, #15
 800cdae:	6879      	ldr	r1, [r7, #4]
 800cdb0:	4613      	mov	r3, r2
 800cdb2:	009b      	lsls	r3, r3, #2
 800cdb4:	4413      	add	r3, r2
 800cdb6:	009b      	lsls	r3, r3, #2
 800cdb8:	440b      	add	r3, r1
 800cdba:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800cdbe:	2200      	movs	r2, #0
 800cdc0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800cdc2:	4b29      	ldr	r3, [pc, #164]	@ (800ce68 <USBD_CDC_DeInit+0x100>)
 800cdc4:	781b      	ldrb	r3, [r3, #0]
 800cdc6:	4619      	mov	r1, r3
 800cdc8:	6878      	ldr	r0, [r7, #4]
 800cdca:	f002 fae2 	bl	800f392 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800cdce:	4b26      	ldr	r3, [pc, #152]	@ (800ce68 <USBD_CDC_DeInit+0x100>)
 800cdd0:	781b      	ldrb	r3, [r3, #0]
 800cdd2:	f003 020f 	and.w	r2, r3, #15
 800cdd6:	6879      	ldr	r1, [r7, #4]
 800cdd8:	4613      	mov	r3, r2
 800cdda:	009b      	lsls	r3, r3, #2
 800cddc:	4413      	add	r3, r2
 800cdde:	009b      	lsls	r3, r3, #2
 800cde0:	440b      	add	r3, r1
 800cde2:	3324      	adds	r3, #36	@ 0x24
 800cde4:	2200      	movs	r2, #0
 800cde6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800cde8:	4b1f      	ldr	r3, [pc, #124]	@ (800ce68 <USBD_CDC_DeInit+0x100>)
 800cdea:	781b      	ldrb	r3, [r3, #0]
 800cdec:	f003 020f 	and.w	r2, r3, #15
 800cdf0:	6879      	ldr	r1, [r7, #4]
 800cdf2:	4613      	mov	r3, r2
 800cdf4:	009b      	lsls	r3, r3, #2
 800cdf6:	4413      	add	r3, r2
 800cdf8:	009b      	lsls	r3, r3, #2
 800cdfa:	440b      	add	r3, r1
 800cdfc:	3326      	adds	r3, #38	@ 0x26
 800cdfe:	2200      	movs	r2, #0
 800ce00:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	32b0      	adds	r2, #176	@ 0xb0
 800ce0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d01f      	beq.n	800ce54 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ce1a:	687a      	ldr	r2, [r7, #4]
 800ce1c:	33b0      	adds	r3, #176	@ 0xb0
 800ce1e:	009b      	lsls	r3, r3, #2
 800ce20:	4413      	add	r3, r2
 800ce22:	685b      	ldr	r3, [r3, #4]
 800ce24:	685b      	ldr	r3, [r3, #4]
 800ce26:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	32b0      	adds	r2, #176	@ 0xb0
 800ce32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce36:	4618      	mov	r0, r3
 800ce38:	f002 fbb6 	bl	800f5a8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	32b0      	adds	r2, #176	@ 0xb0
 800ce46:	2100      	movs	r1, #0
 800ce48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	2200      	movs	r2, #0
 800ce50:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800ce54:	2300      	movs	r3, #0
}
 800ce56:	4618      	mov	r0, r3
 800ce58:	3708      	adds	r7, #8
 800ce5a:	46bd      	mov	sp, r7
 800ce5c:	bd80      	pop	{r7, pc}
 800ce5e:	bf00      	nop
 800ce60:	2000009f 	.word	0x2000009f
 800ce64:	200000a0 	.word	0x200000a0
 800ce68:	200000a1 	.word	0x200000a1

0800ce6c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800ce6c:	b580      	push	{r7, lr}
 800ce6e:	b086      	sub	sp, #24
 800ce70:	af00      	add	r7, sp, #0
 800ce72:	6078      	str	r0, [r7, #4]
 800ce74:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	32b0      	adds	r2, #176	@ 0xb0
 800ce80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce84:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800ce86:	2300      	movs	r3, #0
 800ce88:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800ce8a:	2300      	movs	r3, #0
 800ce8c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800ce8e:	2300      	movs	r3, #0
 800ce90:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800ce92:	693b      	ldr	r3, [r7, #16]
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d101      	bne.n	800ce9c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800ce98:	2303      	movs	r3, #3
 800ce9a:	e0bf      	b.n	800d01c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ce9c:	683b      	ldr	r3, [r7, #0]
 800ce9e:	781b      	ldrb	r3, [r3, #0]
 800cea0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d050      	beq.n	800cf4a <USBD_CDC_Setup+0xde>
 800cea8:	2b20      	cmp	r3, #32
 800ceaa:	f040 80af 	bne.w	800d00c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800ceae:	683b      	ldr	r3, [r7, #0]
 800ceb0:	88db      	ldrh	r3, [r3, #6]
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d03a      	beq.n	800cf2c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800ceb6:	683b      	ldr	r3, [r7, #0]
 800ceb8:	781b      	ldrb	r3, [r3, #0]
 800ceba:	b25b      	sxtb	r3, r3
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	da1b      	bge.n	800cef8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cec6:	687a      	ldr	r2, [r7, #4]
 800cec8:	33b0      	adds	r3, #176	@ 0xb0
 800ceca:	009b      	lsls	r3, r3, #2
 800cecc:	4413      	add	r3, r2
 800cece:	685b      	ldr	r3, [r3, #4]
 800ced0:	689b      	ldr	r3, [r3, #8]
 800ced2:	683a      	ldr	r2, [r7, #0]
 800ced4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800ced6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ced8:	683a      	ldr	r2, [r7, #0]
 800ceda:	88d2      	ldrh	r2, [r2, #6]
 800cedc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800cede:	683b      	ldr	r3, [r7, #0]
 800cee0:	88db      	ldrh	r3, [r3, #6]
 800cee2:	2b07      	cmp	r3, #7
 800cee4:	bf28      	it	cs
 800cee6:	2307      	movcs	r3, #7
 800cee8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800ceea:	693b      	ldr	r3, [r7, #16]
 800ceec:	89fa      	ldrh	r2, [r7, #14]
 800ceee:	4619      	mov	r1, r3
 800cef0:	6878      	ldr	r0, [r7, #4]
 800cef2:	f001 fd93 	bl	800ea1c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800cef6:	e090      	b.n	800d01a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800cef8:	683b      	ldr	r3, [r7, #0]
 800cefa:	785a      	ldrb	r2, [r3, #1]
 800cefc:	693b      	ldr	r3, [r7, #16]
 800cefe:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800cf02:	683b      	ldr	r3, [r7, #0]
 800cf04:	88db      	ldrh	r3, [r3, #6]
 800cf06:	2b3f      	cmp	r3, #63	@ 0x3f
 800cf08:	d803      	bhi.n	800cf12 <USBD_CDC_Setup+0xa6>
 800cf0a:	683b      	ldr	r3, [r7, #0]
 800cf0c:	88db      	ldrh	r3, [r3, #6]
 800cf0e:	b2da      	uxtb	r2, r3
 800cf10:	e000      	b.n	800cf14 <USBD_CDC_Setup+0xa8>
 800cf12:	2240      	movs	r2, #64	@ 0x40
 800cf14:	693b      	ldr	r3, [r7, #16]
 800cf16:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800cf1a:	6939      	ldr	r1, [r7, #16]
 800cf1c:	693b      	ldr	r3, [r7, #16]
 800cf1e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800cf22:	461a      	mov	r2, r3
 800cf24:	6878      	ldr	r0, [r7, #4]
 800cf26:	f001 fda5 	bl	800ea74 <USBD_CtlPrepareRx>
      break;
 800cf2a:	e076      	b.n	800d01a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cf32:	687a      	ldr	r2, [r7, #4]
 800cf34:	33b0      	adds	r3, #176	@ 0xb0
 800cf36:	009b      	lsls	r3, r3, #2
 800cf38:	4413      	add	r3, r2
 800cf3a:	685b      	ldr	r3, [r3, #4]
 800cf3c:	689b      	ldr	r3, [r3, #8]
 800cf3e:	683a      	ldr	r2, [r7, #0]
 800cf40:	7850      	ldrb	r0, [r2, #1]
 800cf42:	2200      	movs	r2, #0
 800cf44:	6839      	ldr	r1, [r7, #0]
 800cf46:	4798      	blx	r3
      break;
 800cf48:	e067      	b.n	800d01a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cf4a:	683b      	ldr	r3, [r7, #0]
 800cf4c:	785b      	ldrb	r3, [r3, #1]
 800cf4e:	2b0b      	cmp	r3, #11
 800cf50:	d851      	bhi.n	800cff6 <USBD_CDC_Setup+0x18a>
 800cf52:	a201      	add	r2, pc, #4	@ (adr r2, 800cf58 <USBD_CDC_Setup+0xec>)
 800cf54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf58:	0800cf89 	.word	0x0800cf89
 800cf5c:	0800d005 	.word	0x0800d005
 800cf60:	0800cff7 	.word	0x0800cff7
 800cf64:	0800cff7 	.word	0x0800cff7
 800cf68:	0800cff7 	.word	0x0800cff7
 800cf6c:	0800cff7 	.word	0x0800cff7
 800cf70:	0800cff7 	.word	0x0800cff7
 800cf74:	0800cff7 	.word	0x0800cff7
 800cf78:	0800cff7 	.word	0x0800cff7
 800cf7c:	0800cff7 	.word	0x0800cff7
 800cf80:	0800cfb3 	.word	0x0800cfb3
 800cf84:	0800cfdd 	.word	0x0800cfdd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cf8e:	b2db      	uxtb	r3, r3
 800cf90:	2b03      	cmp	r3, #3
 800cf92:	d107      	bne.n	800cfa4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800cf94:	f107 030a 	add.w	r3, r7, #10
 800cf98:	2202      	movs	r2, #2
 800cf9a:	4619      	mov	r1, r3
 800cf9c:	6878      	ldr	r0, [r7, #4]
 800cf9e:	f001 fd3d 	bl	800ea1c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800cfa2:	e032      	b.n	800d00a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800cfa4:	6839      	ldr	r1, [r7, #0]
 800cfa6:	6878      	ldr	r0, [r7, #4]
 800cfa8:	f001 fcbb 	bl	800e922 <USBD_CtlError>
            ret = USBD_FAIL;
 800cfac:	2303      	movs	r3, #3
 800cfae:	75fb      	strb	r3, [r7, #23]
          break;
 800cfb0:	e02b      	b.n	800d00a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cfb8:	b2db      	uxtb	r3, r3
 800cfba:	2b03      	cmp	r3, #3
 800cfbc:	d107      	bne.n	800cfce <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800cfbe:	f107 030d 	add.w	r3, r7, #13
 800cfc2:	2201      	movs	r2, #1
 800cfc4:	4619      	mov	r1, r3
 800cfc6:	6878      	ldr	r0, [r7, #4]
 800cfc8:	f001 fd28 	bl	800ea1c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800cfcc:	e01d      	b.n	800d00a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800cfce:	6839      	ldr	r1, [r7, #0]
 800cfd0:	6878      	ldr	r0, [r7, #4]
 800cfd2:	f001 fca6 	bl	800e922 <USBD_CtlError>
            ret = USBD_FAIL;
 800cfd6:	2303      	movs	r3, #3
 800cfd8:	75fb      	strb	r3, [r7, #23]
          break;
 800cfda:	e016      	b.n	800d00a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cfe2:	b2db      	uxtb	r3, r3
 800cfe4:	2b03      	cmp	r3, #3
 800cfe6:	d00f      	beq.n	800d008 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800cfe8:	6839      	ldr	r1, [r7, #0]
 800cfea:	6878      	ldr	r0, [r7, #4]
 800cfec:	f001 fc99 	bl	800e922 <USBD_CtlError>
            ret = USBD_FAIL;
 800cff0:	2303      	movs	r3, #3
 800cff2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800cff4:	e008      	b.n	800d008 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800cff6:	6839      	ldr	r1, [r7, #0]
 800cff8:	6878      	ldr	r0, [r7, #4]
 800cffa:	f001 fc92 	bl	800e922 <USBD_CtlError>
          ret = USBD_FAIL;
 800cffe:	2303      	movs	r3, #3
 800d000:	75fb      	strb	r3, [r7, #23]
          break;
 800d002:	e002      	b.n	800d00a <USBD_CDC_Setup+0x19e>
          break;
 800d004:	bf00      	nop
 800d006:	e008      	b.n	800d01a <USBD_CDC_Setup+0x1ae>
          break;
 800d008:	bf00      	nop
      }
      break;
 800d00a:	e006      	b.n	800d01a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800d00c:	6839      	ldr	r1, [r7, #0]
 800d00e:	6878      	ldr	r0, [r7, #4]
 800d010:	f001 fc87 	bl	800e922 <USBD_CtlError>
      ret = USBD_FAIL;
 800d014:	2303      	movs	r3, #3
 800d016:	75fb      	strb	r3, [r7, #23]
      break;
 800d018:	bf00      	nop
  }

  return (uint8_t)ret;
 800d01a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d01c:	4618      	mov	r0, r3
 800d01e:	3718      	adds	r7, #24
 800d020:	46bd      	mov	sp, r7
 800d022:	bd80      	pop	{r7, pc}

0800d024 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d024:	b580      	push	{r7, lr}
 800d026:	b084      	sub	sp, #16
 800d028:	af00      	add	r7, sp, #0
 800d02a:	6078      	str	r0, [r7, #4]
 800d02c:	460b      	mov	r3, r1
 800d02e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d036:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	32b0      	adds	r2, #176	@ 0xb0
 800d042:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d046:	2b00      	cmp	r3, #0
 800d048:	d101      	bne.n	800d04e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800d04a:	2303      	movs	r3, #3
 800d04c:	e065      	b.n	800d11a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	32b0      	adds	r2, #176	@ 0xb0
 800d058:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d05c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d05e:	78fb      	ldrb	r3, [r7, #3]
 800d060:	f003 020f 	and.w	r2, r3, #15
 800d064:	6879      	ldr	r1, [r7, #4]
 800d066:	4613      	mov	r3, r2
 800d068:	009b      	lsls	r3, r3, #2
 800d06a:	4413      	add	r3, r2
 800d06c:	009b      	lsls	r3, r3, #2
 800d06e:	440b      	add	r3, r1
 800d070:	3318      	adds	r3, #24
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	2b00      	cmp	r3, #0
 800d076:	d02f      	beq.n	800d0d8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800d078:	78fb      	ldrb	r3, [r7, #3]
 800d07a:	f003 020f 	and.w	r2, r3, #15
 800d07e:	6879      	ldr	r1, [r7, #4]
 800d080:	4613      	mov	r3, r2
 800d082:	009b      	lsls	r3, r3, #2
 800d084:	4413      	add	r3, r2
 800d086:	009b      	lsls	r3, r3, #2
 800d088:	440b      	add	r3, r1
 800d08a:	3318      	adds	r3, #24
 800d08c:	681a      	ldr	r2, [r3, #0]
 800d08e:	78fb      	ldrb	r3, [r7, #3]
 800d090:	f003 010f 	and.w	r1, r3, #15
 800d094:	68f8      	ldr	r0, [r7, #12]
 800d096:	460b      	mov	r3, r1
 800d098:	00db      	lsls	r3, r3, #3
 800d09a:	440b      	add	r3, r1
 800d09c:	009b      	lsls	r3, r3, #2
 800d09e:	4403      	add	r3, r0
 800d0a0:	331c      	adds	r3, #28
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	fbb2 f1f3 	udiv	r1, r2, r3
 800d0a8:	fb01 f303 	mul.w	r3, r1, r3
 800d0ac:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d112      	bne.n	800d0d8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800d0b2:	78fb      	ldrb	r3, [r7, #3]
 800d0b4:	f003 020f 	and.w	r2, r3, #15
 800d0b8:	6879      	ldr	r1, [r7, #4]
 800d0ba:	4613      	mov	r3, r2
 800d0bc:	009b      	lsls	r3, r3, #2
 800d0be:	4413      	add	r3, r2
 800d0c0:	009b      	lsls	r3, r3, #2
 800d0c2:	440b      	add	r3, r1
 800d0c4:	3318      	adds	r3, #24
 800d0c6:	2200      	movs	r2, #0
 800d0c8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d0ca:	78f9      	ldrb	r1, [r7, #3]
 800d0cc:	2300      	movs	r3, #0
 800d0ce:	2200      	movs	r2, #0
 800d0d0:	6878      	ldr	r0, [r7, #4]
 800d0d2:	f002 fa06 	bl	800f4e2 <USBD_LL_Transmit>
 800d0d6:	e01f      	b.n	800d118 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800d0d8:	68bb      	ldr	r3, [r7, #8]
 800d0da:	2200      	movs	r2, #0
 800d0dc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d0e6:	687a      	ldr	r2, [r7, #4]
 800d0e8:	33b0      	adds	r3, #176	@ 0xb0
 800d0ea:	009b      	lsls	r3, r3, #2
 800d0ec:	4413      	add	r3, r2
 800d0ee:	685b      	ldr	r3, [r3, #4]
 800d0f0:	691b      	ldr	r3, [r3, #16]
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d010      	beq.n	800d118 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d0fc:	687a      	ldr	r2, [r7, #4]
 800d0fe:	33b0      	adds	r3, #176	@ 0xb0
 800d100:	009b      	lsls	r3, r3, #2
 800d102:	4413      	add	r3, r2
 800d104:	685b      	ldr	r3, [r3, #4]
 800d106:	691b      	ldr	r3, [r3, #16]
 800d108:	68ba      	ldr	r2, [r7, #8]
 800d10a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800d10e:	68ba      	ldr	r2, [r7, #8]
 800d110:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800d114:	78fa      	ldrb	r2, [r7, #3]
 800d116:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800d118:	2300      	movs	r3, #0
}
 800d11a:	4618      	mov	r0, r3
 800d11c:	3710      	adds	r7, #16
 800d11e:	46bd      	mov	sp, r7
 800d120:	bd80      	pop	{r7, pc}

0800d122 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d122:	b580      	push	{r7, lr}
 800d124:	b084      	sub	sp, #16
 800d126:	af00      	add	r7, sp, #0
 800d128:	6078      	str	r0, [r7, #4]
 800d12a:	460b      	mov	r3, r1
 800d12c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	32b0      	adds	r2, #176	@ 0xb0
 800d138:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d13c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	32b0      	adds	r2, #176	@ 0xb0
 800d148:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d101      	bne.n	800d154 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800d150:	2303      	movs	r3, #3
 800d152:	e01a      	b.n	800d18a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d154:	78fb      	ldrb	r3, [r7, #3]
 800d156:	4619      	mov	r1, r3
 800d158:	6878      	ldr	r0, [r7, #4]
 800d15a:	f002 fa04 	bl	800f566 <USBD_LL_GetRxDataSize>
 800d15e:	4602      	mov	r2, r0
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d16c:	687a      	ldr	r2, [r7, #4]
 800d16e:	33b0      	adds	r3, #176	@ 0xb0
 800d170:	009b      	lsls	r3, r3, #2
 800d172:	4413      	add	r3, r2
 800d174:	685b      	ldr	r3, [r3, #4]
 800d176:	68db      	ldr	r3, [r3, #12]
 800d178:	68fa      	ldr	r2, [r7, #12]
 800d17a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800d17e:	68fa      	ldr	r2, [r7, #12]
 800d180:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800d184:	4611      	mov	r1, r2
 800d186:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800d188:	2300      	movs	r3, #0
}
 800d18a:	4618      	mov	r0, r3
 800d18c:	3710      	adds	r7, #16
 800d18e:	46bd      	mov	sp, r7
 800d190:	bd80      	pop	{r7, pc}

0800d192 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800d192:	b580      	push	{r7, lr}
 800d194:	b084      	sub	sp, #16
 800d196:	af00      	add	r7, sp, #0
 800d198:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	32b0      	adds	r2, #176	@ 0xb0
 800d1a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d1a8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d101      	bne.n	800d1b4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d1b0:	2303      	movs	r3, #3
 800d1b2:	e024      	b.n	800d1fe <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d1ba:	687a      	ldr	r2, [r7, #4]
 800d1bc:	33b0      	adds	r3, #176	@ 0xb0
 800d1be:	009b      	lsls	r3, r3, #2
 800d1c0:	4413      	add	r3, r2
 800d1c2:	685b      	ldr	r3, [r3, #4]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d019      	beq.n	800d1fc <USBD_CDC_EP0_RxReady+0x6a>
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800d1ce:	2bff      	cmp	r3, #255	@ 0xff
 800d1d0:	d014      	beq.n	800d1fc <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d1d8:	687a      	ldr	r2, [r7, #4]
 800d1da:	33b0      	adds	r3, #176	@ 0xb0
 800d1dc:	009b      	lsls	r3, r3, #2
 800d1de:	4413      	add	r3, r2
 800d1e0:	685b      	ldr	r3, [r3, #4]
 800d1e2:	689b      	ldr	r3, [r3, #8]
 800d1e4:	68fa      	ldr	r2, [r7, #12]
 800d1e6:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800d1ea:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800d1ec:	68fa      	ldr	r2, [r7, #12]
 800d1ee:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d1f2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	22ff      	movs	r2, #255	@ 0xff
 800d1f8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800d1fc:	2300      	movs	r3, #0
}
 800d1fe:	4618      	mov	r0, r3
 800d200:	3710      	adds	r7, #16
 800d202:	46bd      	mov	sp, r7
 800d204:	bd80      	pop	{r7, pc}
	...

0800d208 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800d208:	b580      	push	{r7, lr}
 800d20a:	b086      	sub	sp, #24
 800d20c:	af00      	add	r7, sp, #0
 800d20e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d210:	2182      	movs	r1, #130	@ 0x82
 800d212:	4818      	ldr	r0, [pc, #96]	@ (800d274 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d214:	f000 fd4f 	bl	800dcb6 <USBD_GetEpDesc>
 800d218:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d21a:	2101      	movs	r1, #1
 800d21c:	4815      	ldr	r0, [pc, #84]	@ (800d274 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d21e:	f000 fd4a 	bl	800dcb6 <USBD_GetEpDesc>
 800d222:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d224:	2181      	movs	r1, #129	@ 0x81
 800d226:	4813      	ldr	r0, [pc, #76]	@ (800d274 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d228:	f000 fd45 	bl	800dcb6 <USBD_GetEpDesc>
 800d22c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d22e:	697b      	ldr	r3, [r7, #20]
 800d230:	2b00      	cmp	r3, #0
 800d232:	d002      	beq.n	800d23a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d234:	697b      	ldr	r3, [r7, #20]
 800d236:	2210      	movs	r2, #16
 800d238:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d23a:	693b      	ldr	r3, [r7, #16]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d006      	beq.n	800d24e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d240:	693b      	ldr	r3, [r7, #16]
 800d242:	2200      	movs	r2, #0
 800d244:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d248:	711a      	strb	r2, [r3, #4]
 800d24a:	2200      	movs	r2, #0
 800d24c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	2b00      	cmp	r3, #0
 800d252:	d006      	beq.n	800d262 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	2200      	movs	r2, #0
 800d258:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d25c:	711a      	strb	r2, [r3, #4]
 800d25e:	2200      	movs	r2, #0
 800d260:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	2243      	movs	r2, #67	@ 0x43
 800d266:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d268:	4b02      	ldr	r3, [pc, #8]	@ (800d274 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800d26a:	4618      	mov	r0, r3
 800d26c:	3718      	adds	r7, #24
 800d26e:	46bd      	mov	sp, r7
 800d270:	bd80      	pop	{r7, pc}
 800d272:	bf00      	nop
 800d274:	2000005c 	.word	0x2000005c

0800d278 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800d278:	b580      	push	{r7, lr}
 800d27a:	b086      	sub	sp, #24
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d280:	2182      	movs	r1, #130	@ 0x82
 800d282:	4818      	ldr	r0, [pc, #96]	@ (800d2e4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d284:	f000 fd17 	bl	800dcb6 <USBD_GetEpDesc>
 800d288:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d28a:	2101      	movs	r1, #1
 800d28c:	4815      	ldr	r0, [pc, #84]	@ (800d2e4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d28e:	f000 fd12 	bl	800dcb6 <USBD_GetEpDesc>
 800d292:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d294:	2181      	movs	r1, #129	@ 0x81
 800d296:	4813      	ldr	r0, [pc, #76]	@ (800d2e4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d298:	f000 fd0d 	bl	800dcb6 <USBD_GetEpDesc>
 800d29c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d29e:	697b      	ldr	r3, [r7, #20]
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d002      	beq.n	800d2aa <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800d2a4:	697b      	ldr	r3, [r7, #20]
 800d2a6:	2210      	movs	r2, #16
 800d2a8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d2aa:	693b      	ldr	r3, [r7, #16]
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d006      	beq.n	800d2be <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d2b0:	693b      	ldr	r3, [r7, #16]
 800d2b2:	2200      	movs	r2, #0
 800d2b4:	711a      	strb	r2, [r3, #4]
 800d2b6:	2200      	movs	r2, #0
 800d2b8:	f042 0202 	orr.w	r2, r2, #2
 800d2bc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d006      	beq.n	800d2d2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	2200      	movs	r2, #0
 800d2c8:	711a      	strb	r2, [r3, #4]
 800d2ca:	2200      	movs	r2, #0
 800d2cc:	f042 0202 	orr.w	r2, r2, #2
 800d2d0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	2243      	movs	r2, #67	@ 0x43
 800d2d6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d2d8:	4b02      	ldr	r3, [pc, #8]	@ (800d2e4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800d2da:	4618      	mov	r0, r3
 800d2dc:	3718      	adds	r7, #24
 800d2de:	46bd      	mov	sp, r7
 800d2e0:	bd80      	pop	{r7, pc}
 800d2e2:	bf00      	nop
 800d2e4:	2000005c 	.word	0x2000005c

0800d2e8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d2e8:	b580      	push	{r7, lr}
 800d2ea:	b086      	sub	sp, #24
 800d2ec:	af00      	add	r7, sp, #0
 800d2ee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d2f0:	2182      	movs	r1, #130	@ 0x82
 800d2f2:	4818      	ldr	r0, [pc, #96]	@ (800d354 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d2f4:	f000 fcdf 	bl	800dcb6 <USBD_GetEpDesc>
 800d2f8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d2fa:	2101      	movs	r1, #1
 800d2fc:	4815      	ldr	r0, [pc, #84]	@ (800d354 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d2fe:	f000 fcda 	bl	800dcb6 <USBD_GetEpDesc>
 800d302:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d304:	2181      	movs	r1, #129	@ 0x81
 800d306:	4813      	ldr	r0, [pc, #76]	@ (800d354 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d308:	f000 fcd5 	bl	800dcb6 <USBD_GetEpDesc>
 800d30c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d30e:	697b      	ldr	r3, [r7, #20]
 800d310:	2b00      	cmp	r3, #0
 800d312:	d002      	beq.n	800d31a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d314:	697b      	ldr	r3, [r7, #20]
 800d316:	2210      	movs	r2, #16
 800d318:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d31a:	693b      	ldr	r3, [r7, #16]
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d006      	beq.n	800d32e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d320:	693b      	ldr	r3, [r7, #16]
 800d322:	2200      	movs	r2, #0
 800d324:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d328:	711a      	strb	r2, [r3, #4]
 800d32a:	2200      	movs	r2, #0
 800d32c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	2b00      	cmp	r3, #0
 800d332:	d006      	beq.n	800d342 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	2200      	movs	r2, #0
 800d338:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d33c:	711a      	strb	r2, [r3, #4]
 800d33e:	2200      	movs	r2, #0
 800d340:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	2243      	movs	r2, #67	@ 0x43
 800d346:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d348:	4b02      	ldr	r3, [pc, #8]	@ (800d354 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800d34a:	4618      	mov	r0, r3
 800d34c:	3718      	adds	r7, #24
 800d34e:	46bd      	mov	sp, r7
 800d350:	bd80      	pop	{r7, pc}
 800d352:	bf00      	nop
 800d354:	2000005c 	.word	0x2000005c

0800d358 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d358:	b480      	push	{r7}
 800d35a:	b083      	sub	sp, #12
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	220a      	movs	r2, #10
 800d364:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800d366:	4b03      	ldr	r3, [pc, #12]	@ (800d374 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d368:	4618      	mov	r0, r3
 800d36a:	370c      	adds	r7, #12
 800d36c:	46bd      	mov	sp, r7
 800d36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d372:	4770      	bx	lr
 800d374:	20000018 	.word	0x20000018

0800d378 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800d378:	b480      	push	{r7}
 800d37a:	b083      	sub	sp, #12
 800d37c:	af00      	add	r7, sp, #0
 800d37e:	6078      	str	r0, [r7, #4]
 800d380:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d382:	683b      	ldr	r3, [r7, #0]
 800d384:	2b00      	cmp	r3, #0
 800d386:	d101      	bne.n	800d38c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d388:	2303      	movs	r3, #3
 800d38a:	e009      	b.n	800d3a0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d392:	687a      	ldr	r2, [r7, #4]
 800d394:	33b0      	adds	r3, #176	@ 0xb0
 800d396:	009b      	lsls	r3, r3, #2
 800d398:	4413      	add	r3, r2
 800d39a:	683a      	ldr	r2, [r7, #0]
 800d39c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800d39e:	2300      	movs	r3, #0
}
 800d3a0:	4618      	mov	r0, r3
 800d3a2:	370c      	adds	r7, #12
 800d3a4:	46bd      	mov	sp, r7
 800d3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3aa:	4770      	bx	lr

0800d3ac <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800d3ac:	b480      	push	{r7}
 800d3ae:	b087      	sub	sp, #28
 800d3b0:	af00      	add	r7, sp, #0
 800d3b2:	60f8      	str	r0, [r7, #12]
 800d3b4:	60b9      	str	r1, [r7, #8]
 800d3b6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	32b0      	adds	r2, #176	@ 0xb0
 800d3c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d3c6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800d3c8:	697b      	ldr	r3, [r7, #20]
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d101      	bne.n	800d3d2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800d3ce:	2303      	movs	r3, #3
 800d3d0:	e008      	b.n	800d3e4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800d3d2:	697b      	ldr	r3, [r7, #20]
 800d3d4:	68ba      	ldr	r2, [r7, #8]
 800d3d6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800d3da:	697b      	ldr	r3, [r7, #20]
 800d3dc:	687a      	ldr	r2, [r7, #4]
 800d3de:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800d3e2:	2300      	movs	r3, #0
}
 800d3e4:	4618      	mov	r0, r3
 800d3e6:	371c      	adds	r7, #28
 800d3e8:	46bd      	mov	sp, r7
 800d3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ee:	4770      	bx	lr

0800d3f0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800d3f0:	b480      	push	{r7}
 800d3f2:	b085      	sub	sp, #20
 800d3f4:	af00      	add	r7, sp, #0
 800d3f6:	6078      	str	r0, [r7, #4]
 800d3f8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	32b0      	adds	r2, #176	@ 0xb0
 800d404:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d408:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d101      	bne.n	800d414 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800d410:	2303      	movs	r3, #3
 800d412:	e004      	b.n	800d41e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	683a      	ldr	r2, [r7, #0]
 800d418:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800d41c:	2300      	movs	r3, #0
}
 800d41e:	4618      	mov	r0, r3
 800d420:	3714      	adds	r7, #20
 800d422:	46bd      	mov	sp, r7
 800d424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d428:	4770      	bx	lr
	...

0800d42c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800d42c:	b580      	push	{r7, lr}
 800d42e:	b084      	sub	sp, #16
 800d430:	af00      	add	r7, sp, #0
 800d432:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	32b0      	adds	r2, #176	@ 0xb0
 800d43e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d442:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800d444:	2301      	movs	r3, #1
 800d446:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800d448:	68bb      	ldr	r3, [r7, #8]
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d101      	bne.n	800d452 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800d44e:	2303      	movs	r3, #3
 800d450:	e025      	b.n	800d49e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800d452:	68bb      	ldr	r3, [r7, #8]
 800d454:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d11f      	bne.n	800d49c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800d45c:	68bb      	ldr	r3, [r7, #8]
 800d45e:	2201      	movs	r2, #1
 800d460:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800d464:	4b10      	ldr	r3, [pc, #64]	@ (800d4a8 <USBD_CDC_TransmitPacket+0x7c>)
 800d466:	781b      	ldrb	r3, [r3, #0]
 800d468:	f003 020f 	and.w	r2, r3, #15
 800d46c:	68bb      	ldr	r3, [r7, #8]
 800d46e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800d472:	6878      	ldr	r0, [r7, #4]
 800d474:	4613      	mov	r3, r2
 800d476:	009b      	lsls	r3, r3, #2
 800d478:	4413      	add	r3, r2
 800d47a:	009b      	lsls	r3, r3, #2
 800d47c:	4403      	add	r3, r0
 800d47e:	3318      	adds	r3, #24
 800d480:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800d482:	4b09      	ldr	r3, [pc, #36]	@ (800d4a8 <USBD_CDC_TransmitPacket+0x7c>)
 800d484:	7819      	ldrb	r1, [r3, #0]
 800d486:	68bb      	ldr	r3, [r7, #8]
 800d488:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800d48c:	68bb      	ldr	r3, [r7, #8]
 800d48e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800d492:	6878      	ldr	r0, [r7, #4]
 800d494:	f002 f825 	bl	800f4e2 <USBD_LL_Transmit>

    ret = USBD_OK;
 800d498:	2300      	movs	r3, #0
 800d49a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800d49c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d49e:	4618      	mov	r0, r3
 800d4a0:	3710      	adds	r7, #16
 800d4a2:	46bd      	mov	sp, r7
 800d4a4:	bd80      	pop	{r7, pc}
 800d4a6:	bf00      	nop
 800d4a8:	2000009f 	.word	0x2000009f

0800d4ac <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d4ac:	b580      	push	{r7, lr}
 800d4ae:	b084      	sub	sp, #16
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	32b0      	adds	r2, #176	@ 0xb0
 800d4be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d4c2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	32b0      	adds	r2, #176	@ 0xb0
 800d4ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d101      	bne.n	800d4da <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800d4d6:	2303      	movs	r3, #3
 800d4d8:	e018      	b.n	800d50c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	7c1b      	ldrb	r3, [r3, #16]
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d10a      	bne.n	800d4f8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d4e2:	4b0c      	ldr	r3, [pc, #48]	@ (800d514 <USBD_CDC_ReceivePacket+0x68>)
 800d4e4:	7819      	ldrb	r1, [r3, #0]
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d4ec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d4f0:	6878      	ldr	r0, [r7, #4]
 800d4f2:	f002 f817 	bl	800f524 <USBD_LL_PrepareReceive>
 800d4f6:	e008      	b.n	800d50a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d4f8:	4b06      	ldr	r3, [pc, #24]	@ (800d514 <USBD_CDC_ReceivePacket+0x68>)
 800d4fa:	7819      	ldrb	r1, [r3, #0]
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d502:	2340      	movs	r3, #64	@ 0x40
 800d504:	6878      	ldr	r0, [r7, #4]
 800d506:	f002 f80d 	bl	800f524 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d50a:	2300      	movs	r3, #0
}
 800d50c:	4618      	mov	r0, r3
 800d50e:	3710      	adds	r7, #16
 800d510:	46bd      	mov	sp, r7
 800d512:	bd80      	pop	{r7, pc}
 800d514:	200000a0 	.word	0x200000a0

0800d518 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d518:	b580      	push	{r7, lr}
 800d51a:	b086      	sub	sp, #24
 800d51c:	af00      	add	r7, sp, #0
 800d51e:	60f8      	str	r0, [r7, #12]
 800d520:	60b9      	str	r1, [r7, #8]
 800d522:	4613      	mov	r3, r2
 800d524:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d101      	bne.n	800d530 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d52c:	2303      	movs	r3, #3
 800d52e:	e01f      	b.n	800d570 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	2200      	movs	r2, #0
 800d534:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	2200      	movs	r2, #0
 800d53c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	2200      	movs	r2, #0
 800d544:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d548:	68bb      	ldr	r3, [r7, #8]
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d003      	beq.n	800d556 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	68ba      	ldr	r2, [r7, #8]
 800d552:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	2201      	movs	r2, #1
 800d55a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	79fa      	ldrb	r2, [r7, #7]
 800d562:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800d564:	68f8      	ldr	r0, [r7, #12]
 800d566:	f001 fe87 	bl	800f278 <USBD_LL_Init>
 800d56a:	4603      	mov	r3, r0
 800d56c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800d56e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d570:	4618      	mov	r0, r3
 800d572:	3718      	adds	r7, #24
 800d574:	46bd      	mov	sp, r7
 800d576:	bd80      	pop	{r7, pc}

0800d578 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d578:	b580      	push	{r7, lr}
 800d57a:	b084      	sub	sp, #16
 800d57c:	af00      	add	r7, sp, #0
 800d57e:	6078      	str	r0, [r7, #4]
 800d580:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d582:	2300      	movs	r3, #0
 800d584:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800d586:	683b      	ldr	r3, [r7, #0]
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d101      	bne.n	800d590 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d58c:	2303      	movs	r3, #3
 800d58e:	e025      	b.n	800d5dc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	683a      	ldr	r2, [r7, #0]
 800d594:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	32ae      	adds	r2, #174	@ 0xae
 800d5a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d5a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d00f      	beq.n	800d5cc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	32ae      	adds	r2, #174	@ 0xae
 800d5b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d5ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d5bc:	f107 020e 	add.w	r2, r7, #14
 800d5c0:	4610      	mov	r0, r2
 800d5c2:	4798      	blx	r3
 800d5c4:	4602      	mov	r2, r0
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800d5d2:	1c5a      	adds	r2, r3, #1
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800d5da:	2300      	movs	r3, #0
}
 800d5dc:	4618      	mov	r0, r3
 800d5de:	3710      	adds	r7, #16
 800d5e0:	46bd      	mov	sp, r7
 800d5e2:	bd80      	pop	{r7, pc}

0800d5e4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d5e4:	b580      	push	{r7, lr}
 800d5e6:	b082      	sub	sp, #8
 800d5e8:	af00      	add	r7, sp, #0
 800d5ea:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800d5ec:	6878      	ldr	r0, [r7, #4]
 800d5ee:	f001 fe8f 	bl	800f310 <USBD_LL_Start>
 800d5f2:	4603      	mov	r3, r0
}
 800d5f4:	4618      	mov	r0, r3
 800d5f6:	3708      	adds	r7, #8
 800d5f8:	46bd      	mov	sp, r7
 800d5fa:	bd80      	pop	{r7, pc}

0800d5fc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800d5fc:	b480      	push	{r7}
 800d5fe:	b083      	sub	sp, #12
 800d600:	af00      	add	r7, sp, #0
 800d602:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d604:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800d606:	4618      	mov	r0, r3
 800d608:	370c      	adds	r7, #12
 800d60a:	46bd      	mov	sp, r7
 800d60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d610:	4770      	bx	lr

0800d612 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d612:	b580      	push	{r7, lr}
 800d614:	b084      	sub	sp, #16
 800d616:	af00      	add	r7, sp, #0
 800d618:	6078      	str	r0, [r7, #4]
 800d61a:	460b      	mov	r3, r1
 800d61c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d61e:	2300      	movs	r3, #0
 800d620:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d009      	beq.n	800d640 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	78fa      	ldrb	r2, [r7, #3]
 800d636:	4611      	mov	r1, r2
 800d638:	6878      	ldr	r0, [r7, #4]
 800d63a:	4798      	blx	r3
 800d63c:	4603      	mov	r3, r0
 800d63e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d640:	7bfb      	ldrb	r3, [r7, #15]
}
 800d642:	4618      	mov	r0, r3
 800d644:	3710      	adds	r7, #16
 800d646:	46bd      	mov	sp, r7
 800d648:	bd80      	pop	{r7, pc}

0800d64a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d64a:	b580      	push	{r7, lr}
 800d64c:	b084      	sub	sp, #16
 800d64e:	af00      	add	r7, sp, #0
 800d650:	6078      	str	r0, [r7, #4]
 800d652:	460b      	mov	r3, r1
 800d654:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d656:	2300      	movs	r3, #0
 800d658:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d660:	685b      	ldr	r3, [r3, #4]
 800d662:	78fa      	ldrb	r2, [r7, #3]
 800d664:	4611      	mov	r1, r2
 800d666:	6878      	ldr	r0, [r7, #4]
 800d668:	4798      	blx	r3
 800d66a:	4603      	mov	r3, r0
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d001      	beq.n	800d674 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800d670:	2303      	movs	r3, #3
 800d672:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d674:	7bfb      	ldrb	r3, [r7, #15]
}
 800d676:	4618      	mov	r0, r3
 800d678:	3710      	adds	r7, #16
 800d67a:	46bd      	mov	sp, r7
 800d67c:	bd80      	pop	{r7, pc}

0800d67e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d67e:	b580      	push	{r7, lr}
 800d680:	b084      	sub	sp, #16
 800d682:	af00      	add	r7, sp, #0
 800d684:	6078      	str	r0, [r7, #4]
 800d686:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d68e:	6839      	ldr	r1, [r7, #0]
 800d690:	4618      	mov	r0, r3
 800d692:	f001 f90c 	bl	800e8ae <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	2201      	movs	r2, #1
 800d69a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800d6a4:	461a      	mov	r2, r3
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800d6b2:	f003 031f 	and.w	r3, r3, #31
 800d6b6:	2b02      	cmp	r3, #2
 800d6b8:	d01a      	beq.n	800d6f0 <USBD_LL_SetupStage+0x72>
 800d6ba:	2b02      	cmp	r3, #2
 800d6bc:	d822      	bhi.n	800d704 <USBD_LL_SetupStage+0x86>
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d002      	beq.n	800d6c8 <USBD_LL_SetupStage+0x4a>
 800d6c2:	2b01      	cmp	r3, #1
 800d6c4:	d00a      	beq.n	800d6dc <USBD_LL_SetupStage+0x5e>
 800d6c6:	e01d      	b.n	800d704 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d6ce:	4619      	mov	r1, r3
 800d6d0:	6878      	ldr	r0, [r7, #4]
 800d6d2:	f000 fb63 	bl	800dd9c <USBD_StdDevReq>
 800d6d6:	4603      	mov	r3, r0
 800d6d8:	73fb      	strb	r3, [r7, #15]
      break;
 800d6da:	e020      	b.n	800d71e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d6e2:	4619      	mov	r1, r3
 800d6e4:	6878      	ldr	r0, [r7, #4]
 800d6e6:	f000 fbcb 	bl	800de80 <USBD_StdItfReq>
 800d6ea:	4603      	mov	r3, r0
 800d6ec:	73fb      	strb	r3, [r7, #15]
      break;
 800d6ee:	e016      	b.n	800d71e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d6f6:	4619      	mov	r1, r3
 800d6f8:	6878      	ldr	r0, [r7, #4]
 800d6fa:	f000 fc2d 	bl	800df58 <USBD_StdEPReq>
 800d6fe:	4603      	mov	r3, r0
 800d700:	73fb      	strb	r3, [r7, #15]
      break;
 800d702:	e00c      	b.n	800d71e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800d70a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800d70e:	b2db      	uxtb	r3, r3
 800d710:	4619      	mov	r1, r3
 800d712:	6878      	ldr	r0, [r7, #4]
 800d714:	f001 fe5c 	bl	800f3d0 <USBD_LL_StallEP>
 800d718:	4603      	mov	r3, r0
 800d71a:	73fb      	strb	r3, [r7, #15]
      break;
 800d71c:	bf00      	nop
  }

  return ret;
 800d71e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d720:	4618      	mov	r0, r3
 800d722:	3710      	adds	r7, #16
 800d724:	46bd      	mov	sp, r7
 800d726:	bd80      	pop	{r7, pc}

0800d728 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d728:	b580      	push	{r7, lr}
 800d72a:	b086      	sub	sp, #24
 800d72c:	af00      	add	r7, sp, #0
 800d72e:	60f8      	str	r0, [r7, #12]
 800d730:	460b      	mov	r3, r1
 800d732:	607a      	str	r2, [r7, #4]
 800d734:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800d736:	2300      	movs	r3, #0
 800d738:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800d73a:	7afb      	ldrb	r3, [r7, #11]
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d16e      	bne.n	800d81e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800d746:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800d74e:	2b03      	cmp	r3, #3
 800d750:	f040 8098 	bne.w	800d884 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800d754:	693b      	ldr	r3, [r7, #16]
 800d756:	689a      	ldr	r2, [r3, #8]
 800d758:	693b      	ldr	r3, [r7, #16]
 800d75a:	68db      	ldr	r3, [r3, #12]
 800d75c:	429a      	cmp	r2, r3
 800d75e:	d913      	bls.n	800d788 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800d760:	693b      	ldr	r3, [r7, #16]
 800d762:	689a      	ldr	r2, [r3, #8]
 800d764:	693b      	ldr	r3, [r7, #16]
 800d766:	68db      	ldr	r3, [r3, #12]
 800d768:	1ad2      	subs	r2, r2, r3
 800d76a:	693b      	ldr	r3, [r7, #16]
 800d76c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800d76e:	693b      	ldr	r3, [r7, #16]
 800d770:	68da      	ldr	r2, [r3, #12]
 800d772:	693b      	ldr	r3, [r7, #16]
 800d774:	689b      	ldr	r3, [r3, #8]
 800d776:	4293      	cmp	r3, r2
 800d778:	bf28      	it	cs
 800d77a:	4613      	movcs	r3, r2
 800d77c:	461a      	mov	r2, r3
 800d77e:	6879      	ldr	r1, [r7, #4]
 800d780:	68f8      	ldr	r0, [r7, #12]
 800d782:	f001 f994 	bl	800eaae <USBD_CtlContinueRx>
 800d786:	e07d      	b.n	800d884 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800d78e:	f003 031f 	and.w	r3, r3, #31
 800d792:	2b02      	cmp	r3, #2
 800d794:	d014      	beq.n	800d7c0 <USBD_LL_DataOutStage+0x98>
 800d796:	2b02      	cmp	r3, #2
 800d798:	d81d      	bhi.n	800d7d6 <USBD_LL_DataOutStage+0xae>
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d002      	beq.n	800d7a4 <USBD_LL_DataOutStage+0x7c>
 800d79e:	2b01      	cmp	r3, #1
 800d7a0:	d003      	beq.n	800d7aa <USBD_LL_DataOutStage+0x82>
 800d7a2:	e018      	b.n	800d7d6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800d7a4:	2300      	movs	r3, #0
 800d7a6:	75bb      	strb	r3, [r7, #22]
            break;
 800d7a8:	e018      	b.n	800d7dc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800d7b0:	b2db      	uxtb	r3, r3
 800d7b2:	4619      	mov	r1, r3
 800d7b4:	68f8      	ldr	r0, [r7, #12]
 800d7b6:	f000 fa64 	bl	800dc82 <USBD_CoreFindIF>
 800d7ba:	4603      	mov	r3, r0
 800d7bc:	75bb      	strb	r3, [r7, #22]
            break;
 800d7be:	e00d      	b.n	800d7dc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800d7c6:	b2db      	uxtb	r3, r3
 800d7c8:	4619      	mov	r1, r3
 800d7ca:	68f8      	ldr	r0, [r7, #12]
 800d7cc:	f000 fa66 	bl	800dc9c <USBD_CoreFindEP>
 800d7d0:	4603      	mov	r3, r0
 800d7d2:	75bb      	strb	r3, [r7, #22]
            break;
 800d7d4:	e002      	b.n	800d7dc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800d7d6:	2300      	movs	r3, #0
 800d7d8:	75bb      	strb	r3, [r7, #22]
            break;
 800d7da:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800d7dc:	7dbb      	ldrb	r3, [r7, #22]
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d119      	bne.n	800d816 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d7e8:	b2db      	uxtb	r3, r3
 800d7ea:	2b03      	cmp	r3, #3
 800d7ec:	d113      	bne.n	800d816 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800d7ee:	7dba      	ldrb	r2, [r7, #22]
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	32ae      	adds	r2, #174	@ 0xae
 800d7f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d7f8:	691b      	ldr	r3, [r3, #16]
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d00b      	beq.n	800d816 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800d7fe:	7dba      	ldrb	r2, [r7, #22]
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800d806:	7dba      	ldrb	r2, [r7, #22]
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	32ae      	adds	r2, #174	@ 0xae
 800d80c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d810:	691b      	ldr	r3, [r3, #16]
 800d812:	68f8      	ldr	r0, [r7, #12]
 800d814:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800d816:	68f8      	ldr	r0, [r7, #12]
 800d818:	f001 f95a 	bl	800ead0 <USBD_CtlSendStatus>
 800d81c:	e032      	b.n	800d884 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800d81e:	7afb      	ldrb	r3, [r7, #11]
 800d820:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d824:	b2db      	uxtb	r3, r3
 800d826:	4619      	mov	r1, r3
 800d828:	68f8      	ldr	r0, [r7, #12]
 800d82a:	f000 fa37 	bl	800dc9c <USBD_CoreFindEP>
 800d82e:	4603      	mov	r3, r0
 800d830:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d832:	7dbb      	ldrb	r3, [r7, #22]
 800d834:	2bff      	cmp	r3, #255	@ 0xff
 800d836:	d025      	beq.n	800d884 <USBD_LL_DataOutStage+0x15c>
 800d838:	7dbb      	ldrb	r3, [r7, #22]
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d122      	bne.n	800d884 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d844:	b2db      	uxtb	r3, r3
 800d846:	2b03      	cmp	r3, #3
 800d848:	d117      	bne.n	800d87a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800d84a:	7dba      	ldrb	r2, [r7, #22]
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	32ae      	adds	r2, #174	@ 0xae
 800d850:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d854:	699b      	ldr	r3, [r3, #24]
 800d856:	2b00      	cmp	r3, #0
 800d858:	d00f      	beq.n	800d87a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800d85a:	7dba      	ldrb	r2, [r7, #22]
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800d862:	7dba      	ldrb	r2, [r7, #22]
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	32ae      	adds	r2, #174	@ 0xae
 800d868:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d86c:	699b      	ldr	r3, [r3, #24]
 800d86e:	7afa      	ldrb	r2, [r7, #11]
 800d870:	4611      	mov	r1, r2
 800d872:	68f8      	ldr	r0, [r7, #12]
 800d874:	4798      	blx	r3
 800d876:	4603      	mov	r3, r0
 800d878:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800d87a:	7dfb      	ldrb	r3, [r7, #23]
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d001      	beq.n	800d884 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800d880:	7dfb      	ldrb	r3, [r7, #23]
 800d882:	e000      	b.n	800d886 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800d884:	2300      	movs	r3, #0
}
 800d886:	4618      	mov	r0, r3
 800d888:	3718      	adds	r7, #24
 800d88a:	46bd      	mov	sp, r7
 800d88c:	bd80      	pop	{r7, pc}

0800d88e <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d88e:	b580      	push	{r7, lr}
 800d890:	b086      	sub	sp, #24
 800d892:	af00      	add	r7, sp, #0
 800d894:	60f8      	str	r0, [r7, #12]
 800d896:	460b      	mov	r3, r1
 800d898:	607a      	str	r2, [r7, #4]
 800d89a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800d89c:	7afb      	ldrb	r3, [r7, #11]
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d16f      	bne.n	800d982 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	3314      	adds	r3, #20
 800d8a6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800d8ae:	2b02      	cmp	r3, #2
 800d8b0:	d15a      	bne.n	800d968 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800d8b2:	693b      	ldr	r3, [r7, #16]
 800d8b4:	689a      	ldr	r2, [r3, #8]
 800d8b6:	693b      	ldr	r3, [r7, #16]
 800d8b8:	68db      	ldr	r3, [r3, #12]
 800d8ba:	429a      	cmp	r2, r3
 800d8bc:	d914      	bls.n	800d8e8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d8be:	693b      	ldr	r3, [r7, #16]
 800d8c0:	689a      	ldr	r2, [r3, #8]
 800d8c2:	693b      	ldr	r3, [r7, #16]
 800d8c4:	68db      	ldr	r3, [r3, #12]
 800d8c6:	1ad2      	subs	r2, r2, r3
 800d8c8:	693b      	ldr	r3, [r7, #16]
 800d8ca:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800d8cc:	693b      	ldr	r3, [r7, #16]
 800d8ce:	689b      	ldr	r3, [r3, #8]
 800d8d0:	461a      	mov	r2, r3
 800d8d2:	6879      	ldr	r1, [r7, #4]
 800d8d4:	68f8      	ldr	r0, [r7, #12]
 800d8d6:	f001 f8bc 	bl	800ea52 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d8da:	2300      	movs	r3, #0
 800d8dc:	2200      	movs	r2, #0
 800d8de:	2100      	movs	r1, #0
 800d8e0:	68f8      	ldr	r0, [r7, #12]
 800d8e2:	f001 fe1f 	bl	800f524 <USBD_LL_PrepareReceive>
 800d8e6:	e03f      	b.n	800d968 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800d8e8:	693b      	ldr	r3, [r7, #16]
 800d8ea:	68da      	ldr	r2, [r3, #12]
 800d8ec:	693b      	ldr	r3, [r7, #16]
 800d8ee:	689b      	ldr	r3, [r3, #8]
 800d8f0:	429a      	cmp	r2, r3
 800d8f2:	d11c      	bne.n	800d92e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800d8f4:	693b      	ldr	r3, [r7, #16]
 800d8f6:	685a      	ldr	r2, [r3, #4]
 800d8f8:	693b      	ldr	r3, [r7, #16]
 800d8fa:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800d8fc:	429a      	cmp	r2, r3
 800d8fe:	d316      	bcc.n	800d92e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800d900:	693b      	ldr	r3, [r7, #16]
 800d902:	685a      	ldr	r2, [r3, #4]
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d90a:	429a      	cmp	r2, r3
 800d90c:	d20f      	bcs.n	800d92e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d90e:	2200      	movs	r2, #0
 800d910:	2100      	movs	r1, #0
 800d912:	68f8      	ldr	r0, [r7, #12]
 800d914:	f001 f89d 	bl	800ea52 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	2200      	movs	r2, #0
 800d91c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d920:	2300      	movs	r3, #0
 800d922:	2200      	movs	r2, #0
 800d924:	2100      	movs	r1, #0
 800d926:	68f8      	ldr	r0, [r7, #12]
 800d928:	f001 fdfc 	bl	800f524 <USBD_LL_PrepareReceive>
 800d92c:	e01c      	b.n	800d968 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d934:	b2db      	uxtb	r3, r3
 800d936:	2b03      	cmp	r3, #3
 800d938:	d10f      	bne.n	800d95a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d940:	68db      	ldr	r3, [r3, #12]
 800d942:	2b00      	cmp	r3, #0
 800d944:	d009      	beq.n	800d95a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	2200      	movs	r2, #0
 800d94a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d954:	68db      	ldr	r3, [r3, #12]
 800d956:	68f8      	ldr	r0, [r7, #12]
 800d958:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d95a:	2180      	movs	r1, #128	@ 0x80
 800d95c:	68f8      	ldr	r0, [r7, #12]
 800d95e:	f001 fd37 	bl	800f3d0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d962:	68f8      	ldr	r0, [r7, #12]
 800d964:	f001 f8c7 	bl	800eaf6 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d03a      	beq.n	800d9e8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800d972:	68f8      	ldr	r0, [r7, #12]
 800d974:	f7ff fe42 	bl	800d5fc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	2200      	movs	r2, #0
 800d97c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800d980:	e032      	b.n	800d9e8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800d982:	7afb      	ldrb	r3, [r7, #11]
 800d984:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800d988:	b2db      	uxtb	r3, r3
 800d98a:	4619      	mov	r1, r3
 800d98c:	68f8      	ldr	r0, [r7, #12]
 800d98e:	f000 f985 	bl	800dc9c <USBD_CoreFindEP>
 800d992:	4603      	mov	r3, r0
 800d994:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d996:	7dfb      	ldrb	r3, [r7, #23]
 800d998:	2bff      	cmp	r3, #255	@ 0xff
 800d99a:	d025      	beq.n	800d9e8 <USBD_LL_DataInStage+0x15a>
 800d99c:	7dfb      	ldrb	r3, [r7, #23]
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d122      	bne.n	800d9e8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d9a8:	b2db      	uxtb	r3, r3
 800d9aa:	2b03      	cmp	r3, #3
 800d9ac:	d11c      	bne.n	800d9e8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800d9ae:	7dfa      	ldrb	r2, [r7, #23]
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	32ae      	adds	r2, #174	@ 0xae
 800d9b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d9b8:	695b      	ldr	r3, [r3, #20]
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d014      	beq.n	800d9e8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800d9be:	7dfa      	ldrb	r2, [r7, #23]
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800d9c6:	7dfa      	ldrb	r2, [r7, #23]
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	32ae      	adds	r2, #174	@ 0xae
 800d9cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d9d0:	695b      	ldr	r3, [r3, #20]
 800d9d2:	7afa      	ldrb	r2, [r7, #11]
 800d9d4:	4611      	mov	r1, r2
 800d9d6:	68f8      	ldr	r0, [r7, #12]
 800d9d8:	4798      	blx	r3
 800d9da:	4603      	mov	r3, r0
 800d9dc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800d9de:	7dbb      	ldrb	r3, [r7, #22]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d001      	beq.n	800d9e8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800d9e4:	7dbb      	ldrb	r3, [r7, #22]
 800d9e6:	e000      	b.n	800d9ea <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800d9e8:	2300      	movs	r3, #0
}
 800d9ea:	4618      	mov	r0, r3
 800d9ec:	3718      	adds	r7, #24
 800d9ee:	46bd      	mov	sp, r7
 800d9f0:	bd80      	pop	{r7, pc}

0800d9f2 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d9f2:	b580      	push	{r7, lr}
 800d9f4:	b084      	sub	sp, #16
 800d9f6:	af00      	add	r7, sp, #0
 800d9f8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800d9fa:	2300      	movs	r3, #0
 800d9fc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	2201      	movs	r2, #1
 800da02:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	2200      	movs	r2, #0
 800da0a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	2200      	movs	r2, #0
 800da12:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	2200      	movs	r2, #0
 800da18:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	2200      	movs	r2, #0
 800da20:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d014      	beq.n	800da58 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800da34:	685b      	ldr	r3, [r3, #4]
 800da36:	2b00      	cmp	r3, #0
 800da38:	d00e      	beq.n	800da58 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800da40:	685b      	ldr	r3, [r3, #4]
 800da42:	687a      	ldr	r2, [r7, #4]
 800da44:	6852      	ldr	r2, [r2, #4]
 800da46:	b2d2      	uxtb	r2, r2
 800da48:	4611      	mov	r1, r2
 800da4a:	6878      	ldr	r0, [r7, #4]
 800da4c:	4798      	blx	r3
 800da4e:	4603      	mov	r3, r0
 800da50:	2b00      	cmp	r3, #0
 800da52:	d001      	beq.n	800da58 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800da54:	2303      	movs	r3, #3
 800da56:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800da58:	2340      	movs	r3, #64	@ 0x40
 800da5a:	2200      	movs	r2, #0
 800da5c:	2100      	movs	r1, #0
 800da5e:	6878      	ldr	r0, [r7, #4]
 800da60:	f001 fc71 	bl	800f346 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	2201      	movs	r2, #1
 800da68:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	2240      	movs	r2, #64	@ 0x40
 800da70:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800da74:	2340      	movs	r3, #64	@ 0x40
 800da76:	2200      	movs	r2, #0
 800da78:	2180      	movs	r1, #128	@ 0x80
 800da7a:	6878      	ldr	r0, [r7, #4]
 800da7c:	f001 fc63 	bl	800f346 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	2201      	movs	r2, #1
 800da84:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	2240      	movs	r2, #64	@ 0x40
 800da8a:	621a      	str	r2, [r3, #32]

  return ret;
 800da8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800da8e:	4618      	mov	r0, r3
 800da90:	3710      	adds	r7, #16
 800da92:	46bd      	mov	sp, r7
 800da94:	bd80      	pop	{r7, pc}

0800da96 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800da96:	b480      	push	{r7}
 800da98:	b083      	sub	sp, #12
 800da9a:	af00      	add	r7, sp, #0
 800da9c:	6078      	str	r0, [r7, #4]
 800da9e:	460b      	mov	r3, r1
 800daa0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	78fa      	ldrb	r2, [r7, #3]
 800daa6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800daa8:	2300      	movs	r3, #0
}
 800daaa:	4618      	mov	r0, r3
 800daac:	370c      	adds	r7, #12
 800daae:	46bd      	mov	sp, r7
 800dab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dab4:	4770      	bx	lr

0800dab6 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800dab6:	b480      	push	{r7}
 800dab8:	b083      	sub	sp, #12
 800daba:	af00      	add	r7, sp, #0
 800dabc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dac4:	b2db      	uxtb	r3, r3
 800dac6:	2b04      	cmp	r3, #4
 800dac8:	d006      	beq.n	800dad8 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dad0:	b2da      	uxtb	r2, r3
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	2204      	movs	r2, #4
 800dadc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800dae0:	2300      	movs	r3, #0
}
 800dae2:	4618      	mov	r0, r3
 800dae4:	370c      	adds	r7, #12
 800dae6:	46bd      	mov	sp, r7
 800dae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daec:	4770      	bx	lr

0800daee <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800daee:	b480      	push	{r7}
 800daf0:	b083      	sub	sp, #12
 800daf2:	af00      	add	r7, sp, #0
 800daf4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dafc:	b2db      	uxtb	r3, r3
 800dafe:	2b04      	cmp	r3, #4
 800db00:	d106      	bne.n	800db10 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800db08:	b2da      	uxtb	r2, r3
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800db10:	2300      	movs	r3, #0
}
 800db12:	4618      	mov	r0, r3
 800db14:	370c      	adds	r7, #12
 800db16:	46bd      	mov	sp, r7
 800db18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db1c:	4770      	bx	lr

0800db1e <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800db1e:	b580      	push	{r7, lr}
 800db20:	b082      	sub	sp, #8
 800db22:	af00      	add	r7, sp, #0
 800db24:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800db2c:	b2db      	uxtb	r3, r3
 800db2e:	2b03      	cmp	r3, #3
 800db30:	d110      	bne.n	800db54 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d00b      	beq.n	800db54 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800db42:	69db      	ldr	r3, [r3, #28]
 800db44:	2b00      	cmp	r3, #0
 800db46:	d005      	beq.n	800db54 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800db4e:	69db      	ldr	r3, [r3, #28]
 800db50:	6878      	ldr	r0, [r7, #4]
 800db52:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800db54:	2300      	movs	r3, #0
}
 800db56:	4618      	mov	r0, r3
 800db58:	3708      	adds	r7, #8
 800db5a:	46bd      	mov	sp, r7
 800db5c:	bd80      	pop	{r7, pc}

0800db5e <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800db5e:	b580      	push	{r7, lr}
 800db60:	b082      	sub	sp, #8
 800db62:	af00      	add	r7, sp, #0
 800db64:	6078      	str	r0, [r7, #4]
 800db66:	460b      	mov	r3, r1
 800db68:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	32ae      	adds	r2, #174	@ 0xae
 800db74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d101      	bne.n	800db80 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800db7c:	2303      	movs	r3, #3
 800db7e:	e01c      	b.n	800dbba <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800db86:	b2db      	uxtb	r3, r3
 800db88:	2b03      	cmp	r3, #3
 800db8a:	d115      	bne.n	800dbb8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	32ae      	adds	r2, #174	@ 0xae
 800db96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db9a:	6a1b      	ldr	r3, [r3, #32]
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d00b      	beq.n	800dbb8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	32ae      	adds	r2, #174	@ 0xae
 800dbaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dbae:	6a1b      	ldr	r3, [r3, #32]
 800dbb0:	78fa      	ldrb	r2, [r7, #3]
 800dbb2:	4611      	mov	r1, r2
 800dbb4:	6878      	ldr	r0, [r7, #4]
 800dbb6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800dbb8:	2300      	movs	r3, #0
}
 800dbba:	4618      	mov	r0, r3
 800dbbc:	3708      	adds	r7, #8
 800dbbe:	46bd      	mov	sp, r7
 800dbc0:	bd80      	pop	{r7, pc}

0800dbc2 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800dbc2:	b580      	push	{r7, lr}
 800dbc4:	b082      	sub	sp, #8
 800dbc6:	af00      	add	r7, sp, #0
 800dbc8:	6078      	str	r0, [r7, #4]
 800dbca:	460b      	mov	r3, r1
 800dbcc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	32ae      	adds	r2, #174	@ 0xae
 800dbd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d101      	bne.n	800dbe4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800dbe0:	2303      	movs	r3, #3
 800dbe2:	e01c      	b.n	800dc1e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dbea:	b2db      	uxtb	r3, r3
 800dbec:	2b03      	cmp	r3, #3
 800dbee:	d115      	bne.n	800dc1c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	32ae      	adds	r2, #174	@ 0xae
 800dbfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dbfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d00b      	beq.n	800dc1c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	32ae      	adds	r2, #174	@ 0xae
 800dc0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc14:	78fa      	ldrb	r2, [r7, #3]
 800dc16:	4611      	mov	r1, r2
 800dc18:	6878      	ldr	r0, [r7, #4]
 800dc1a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800dc1c:	2300      	movs	r3, #0
}
 800dc1e:	4618      	mov	r0, r3
 800dc20:	3708      	adds	r7, #8
 800dc22:	46bd      	mov	sp, r7
 800dc24:	bd80      	pop	{r7, pc}

0800dc26 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800dc26:	b480      	push	{r7}
 800dc28:	b083      	sub	sp, #12
 800dc2a:	af00      	add	r7, sp, #0
 800dc2c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800dc2e:	2300      	movs	r3, #0
}
 800dc30:	4618      	mov	r0, r3
 800dc32:	370c      	adds	r7, #12
 800dc34:	46bd      	mov	sp, r7
 800dc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc3a:	4770      	bx	lr

0800dc3c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800dc3c:	b580      	push	{r7, lr}
 800dc3e:	b084      	sub	sp, #16
 800dc40:	af00      	add	r7, sp, #0
 800dc42:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800dc44:	2300      	movs	r3, #0
 800dc46:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	2201      	movs	r2, #1
 800dc4c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d00e      	beq.n	800dc78 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dc60:	685b      	ldr	r3, [r3, #4]
 800dc62:	687a      	ldr	r2, [r7, #4]
 800dc64:	6852      	ldr	r2, [r2, #4]
 800dc66:	b2d2      	uxtb	r2, r2
 800dc68:	4611      	mov	r1, r2
 800dc6a:	6878      	ldr	r0, [r7, #4]
 800dc6c:	4798      	blx	r3
 800dc6e:	4603      	mov	r3, r0
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d001      	beq.n	800dc78 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800dc74:	2303      	movs	r3, #3
 800dc76:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800dc78:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc7a:	4618      	mov	r0, r3
 800dc7c:	3710      	adds	r7, #16
 800dc7e:	46bd      	mov	sp, r7
 800dc80:	bd80      	pop	{r7, pc}

0800dc82 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800dc82:	b480      	push	{r7}
 800dc84:	b083      	sub	sp, #12
 800dc86:	af00      	add	r7, sp, #0
 800dc88:	6078      	str	r0, [r7, #4]
 800dc8a:	460b      	mov	r3, r1
 800dc8c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800dc8e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800dc90:	4618      	mov	r0, r3
 800dc92:	370c      	adds	r7, #12
 800dc94:	46bd      	mov	sp, r7
 800dc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc9a:	4770      	bx	lr

0800dc9c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800dc9c:	b480      	push	{r7}
 800dc9e:	b083      	sub	sp, #12
 800dca0:	af00      	add	r7, sp, #0
 800dca2:	6078      	str	r0, [r7, #4]
 800dca4:	460b      	mov	r3, r1
 800dca6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800dca8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800dcaa:	4618      	mov	r0, r3
 800dcac:	370c      	adds	r7, #12
 800dcae:	46bd      	mov	sp, r7
 800dcb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb4:	4770      	bx	lr

0800dcb6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800dcb6:	b580      	push	{r7, lr}
 800dcb8:	b086      	sub	sp, #24
 800dcba:	af00      	add	r7, sp, #0
 800dcbc:	6078      	str	r0, [r7, #4]
 800dcbe:	460b      	mov	r3, r1
 800dcc0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800dcca:	2300      	movs	r3, #0
 800dccc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	885b      	ldrh	r3, [r3, #2]
 800dcd2:	b29b      	uxth	r3, r3
 800dcd4:	68fa      	ldr	r2, [r7, #12]
 800dcd6:	7812      	ldrb	r2, [r2, #0]
 800dcd8:	4293      	cmp	r3, r2
 800dcda:	d91f      	bls.n	800dd1c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	781b      	ldrb	r3, [r3, #0]
 800dce0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800dce2:	e013      	b.n	800dd0c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800dce4:	f107 030a 	add.w	r3, r7, #10
 800dce8:	4619      	mov	r1, r3
 800dcea:	6978      	ldr	r0, [r7, #20]
 800dcec:	f000 f81b 	bl	800dd26 <USBD_GetNextDesc>
 800dcf0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800dcf2:	697b      	ldr	r3, [r7, #20]
 800dcf4:	785b      	ldrb	r3, [r3, #1]
 800dcf6:	2b05      	cmp	r3, #5
 800dcf8:	d108      	bne.n	800dd0c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800dcfa:	697b      	ldr	r3, [r7, #20]
 800dcfc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800dcfe:	693b      	ldr	r3, [r7, #16]
 800dd00:	789b      	ldrb	r3, [r3, #2]
 800dd02:	78fa      	ldrb	r2, [r7, #3]
 800dd04:	429a      	cmp	r2, r3
 800dd06:	d008      	beq.n	800dd1a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800dd08:	2300      	movs	r3, #0
 800dd0a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	885b      	ldrh	r3, [r3, #2]
 800dd10:	b29a      	uxth	r2, r3
 800dd12:	897b      	ldrh	r3, [r7, #10]
 800dd14:	429a      	cmp	r2, r3
 800dd16:	d8e5      	bhi.n	800dce4 <USBD_GetEpDesc+0x2e>
 800dd18:	e000      	b.n	800dd1c <USBD_GetEpDesc+0x66>
          break;
 800dd1a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800dd1c:	693b      	ldr	r3, [r7, #16]
}
 800dd1e:	4618      	mov	r0, r3
 800dd20:	3718      	adds	r7, #24
 800dd22:	46bd      	mov	sp, r7
 800dd24:	bd80      	pop	{r7, pc}

0800dd26 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800dd26:	b480      	push	{r7}
 800dd28:	b085      	sub	sp, #20
 800dd2a:	af00      	add	r7, sp, #0
 800dd2c:	6078      	str	r0, [r7, #4]
 800dd2e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800dd34:	683b      	ldr	r3, [r7, #0]
 800dd36:	881b      	ldrh	r3, [r3, #0]
 800dd38:	68fa      	ldr	r2, [r7, #12]
 800dd3a:	7812      	ldrb	r2, [r2, #0]
 800dd3c:	4413      	add	r3, r2
 800dd3e:	b29a      	uxth	r2, r3
 800dd40:	683b      	ldr	r3, [r7, #0]
 800dd42:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	781b      	ldrb	r3, [r3, #0]
 800dd48:	461a      	mov	r2, r3
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	4413      	add	r3, r2
 800dd4e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800dd50:	68fb      	ldr	r3, [r7, #12]
}
 800dd52:	4618      	mov	r0, r3
 800dd54:	3714      	adds	r7, #20
 800dd56:	46bd      	mov	sp, r7
 800dd58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd5c:	4770      	bx	lr

0800dd5e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800dd5e:	b480      	push	{r7}
 800dd60:	b087      	sub	sp, #28
 800dd62:	af00      	add	r7, sp, #0
 800dd64:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800dd6a:	697b      	ldr	r3, [r7, #20]
 800dd6c:	781b      	ldrb	r3, [r3, #0]
 800dd6e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800dd70:	697b      	ldr	r3, [r7, #20]
 800dd72:	3301      	adds	r3, #1
 800dd74:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800dd76:	697b      	ldr	r3, [r7, #20]
 800dd78:	781b      	ldrb	r3, [r3, #0]
 800dd7a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800dd7c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800dd80:	021b      	lsls	r3, r3, #8
 800dd82:	b21a      	sxth	r2, r3
 800dd84:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800dd88:	4313      	orrs	r3, r2
 800dd8a:	b21b      	sxth	r3, r3
 800dd8c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800dd8e:	89fb      	ldrh	r3, [r7, #14]
}
 800dd90:	4618      	mov	r0, r3
 800dd92:	371c      	adds	r7, #28
 800dd94:	46bd      	mov	sp, r7
 800dd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd9a:	4770      	bx	lr

0800dd9c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dd9c:	b580      	push	{r7, lr}
 800dd9e:	b084      	sub	sp, #16
 800dda0:	af00      	add	r7, sp, #0
 800dda2:	6078      	str	r0, [r7, #4]
 800dda4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dda6:	2300      	movs	r3, #0
 800dda8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ddaa:	683b      	ldr	r3, [r7, #0]
 800ddac:	781b      	ldrb	r3, [r3, #0]
 800ddae:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ddb2:	2b40      	cmp	r3, #64	@ 0x40
 800ddb4:	d005      	beq.n	800ddc2 <USBD_StdDevReq+0x26>
 800ddb6:	2b40      	cmp	r3, #64	@ 0x40
 800ddb8:	d857      	bhi.n	800de6a <USBD_StdDevReq+0xce>
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d00f      	beq.n	800ddde <USBD_StdDevReq+0x42>
 800ddbe:	2b20      	cmp	r3, #32
 800ddc0:	d153      	bne.n	800de6a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	32ae      	adds	r2, #174	@ 0xae
 800ddcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ddd0:	689b      	ldr	r3, [r3, #8]
 800ddd2:	6839      	ldr	r1, [r7, #0]
 800ddd4:	6878      	ldr	r0, [r7, #4]
 800ddd6:	4798      	blx	r3
 800ddd8:	4603      	mov	r3, r0
 800ddda:	73fb      	strb	r3, [r7, #15]
      break;
 800dddc:	e04a      	b.n	800de74 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ddde:	683b      	ldr	r3, [r7, #0]
 800dde0:	785b      	ldrb	r3, [r3, #1]
 800dde2:	2b09      	cmp	r3, #9
 800dde4:	d83b      	bhi.n	800de5e <USBD_StdDevReq+0xc2>
 800dde6:	a201      	add	r2, pc, #4	@ (adr r2, 800ddec <USBD_StdDevReq+0x50>)
 800dde8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddec:	0800de41 	.word	0x0800de41
 800ddf0:	0800de55 	.word	0x0800de55
 800ddf4:	0800de5f 	.word	0x0800de5f
 800ddf8:	0800de4b 	.word	0x0800de4b
 800ddfc:	0800de5f 	.word	0x0800de5f
 800de00:	0800de1f 	.word	0x0800de1f
 800de04:	0800de15 	.word	0x0800de15
 800de08:	0800de5f 	.word	0x0800de5f
 800de0c:	0800de37 	.word	0x0800de37
 800de10:	0800de29 	.word	0x0800de29
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800de14:	6839      	ldr	r1, [r7, #0]
 800de16:	6878      	ldr	r0, [r7, #4]
 800de18:	f000 fa3c 	bl	800e294 <USBD_GetDescriptor>
          break;
 800de1c:	e024      	b.n	800de68 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800de1e:	6839      	ldr	r1, [r7, #0]
 800de20:	6878      	ldr	r0, [r7, #4]
 800de22:	f000 fba1 	bl	800e568 <USBD_SetAddress>
          break;
 800de26:	e01f      	b.n	800de68 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800de28:	6839      	ldr	r1, [r7, #0]
 800de2a:	6878      	ldr	r0, [r7, #4]
 800de2c:	f000 fbe0 	bl	800e5f0 <USBD_SetConfig>
 800de30:	4603      	mov	r3, r0
 800de32:	73fb      	strb	r3, [r7, #15]
          break;
 800de34:	e018      	b.n	800de68 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800de36:	6839      	ldr	r1, [r7, #0]
 800de38:	6878      	ldr	r0, [r7, #4]
 800de3a:	f000 fc83 	bl	800e744 <USBD_GetConfig>
          break;
 800de3e:	e013      	b.n	800de68 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800de40:	6839      	ldr	r1, [r7, #0]
 800de42:	6878      	ldr	r0, [r7, #4]
 800de44:	f000 fcb4 	bl	800e7b0 <USBD_GetStatus>
          break;
 800de48:	e00e      	b.n	800de68 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800de4a:	6839      	ldr	r1, [r7, #0]
 800de4c:	6878      	ldr	r0, [r7, #4]
 800de4e:	f000 fce3 	bl	800e818 <USBD_SetFeature>
          break;
 800de52:	e009      	b.n	800de68 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800de54:	6839      	ldr	r1, [r7, #0]
 800de56:	6878      	ldr	r0, [r7, #4]
 800de58:	f000 fd07 	bl	800e86a <USBD_ClrFeature>
          break;
 800de5c:	e004      	b.n	800de68 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800de5e:	6839      	ldr	r1, [r7, #0]
 800de60:	6878      	ldr	r0, [r7, #4]
 800de62:	f000 fd5e 	bl	800e922 <USBD_CtlError>
          break;
 800de66:	bf00      	nop
      }
      break;
 800de68:	e004      	b.n	800de74 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800de6a:	6839      	ldr	r1, [r7, #0]
 800de6c:	6878      	ldr	r0, [r7, #4]
 800de6e:	f000 fd58 	bl	800e922 <USBD_CtlError>
      break;
 800de72:	bf00      	nop
  }

  return ret;
 800de74:	7bfb      	ldrb	r3, [r7, #15]
}
 800de76:	4618      	mov	r0, r3
 800de78:	3710      	adds	r7, #16
 800de7a:	46bd      	mov	sp, r7
 800de7c:	bd80      	pop	{r7, pc}
 800de7e:	bf00      	nop

0800de80 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800de80:	b580      	push	{r7, lr}
 800de82:	b084      	sub	sp, #16
 800de84:	af00      	add	r7, sp, #0
 800de86:	6078      	str	r0, [r7, #4]
 800de88:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800de8a:	2300      	movs	r3, #0
 800de8c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800de8e:	683b      	ldr	r3, [r7, #0]
 800de90:	781b      	ldrb	r3, [r3, #0]
 800de92:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800de96:	2b40      	cmp	r3, #64	@ 0x40
 800de98:	d005      	beq.n	800dea6 <USBD_StdItfReq+0x26>
 800de9a:	2b40      	cmp	r3, #64	@ 0x40
 800de9c:	d852      	bhi.n	800df44 <USBD_StdItfReq+0xc4>
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d001      	beq.n	800dea6 <USBD_StdItfReq+0x26>
 800dea2:	2b20      	cmp	r3, #32
 800dea4:	d14e      	bne.n	800df44 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800deac:	b2db      	uxtb	r3, r3
 800deae:	3b01      	subs	r3, #1
 800deb0:	2b02      	cmp	r3, #2
 800deb2:	d840      	bhi.n	800df36 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800deb4:	683b      	ldr	r3, [r7, #0]
 800deb6:	889b      	ldrh	r3, [r3, #4]
 800deb8:	b2db      	uxtb	r3, r3
 800deba:	2b01      	cmp	r3, #1
 800debc:	d836      	bhi.n	800df2c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800debe:	683b      	ldr	r3, [r7, #0]
 800dec0:	889b      	ldrh	r3, [r3, #4]
 800dec2:	b2db      	uxtb	r3, r3
 800dec4:	4619      	mov	r1, r3
 800dec6:	6878      	ldr	r0, [r7, #4]
 800dec8:	f7ff fedb 	bl	800dc82 <USBD_CoreFindIF>
 800decc:	4603      	mov	r3, r0
 800dece:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ded0:	7bbb      	ldrb	r3, [r7, #14]
 800ded2:	2bff      	cmp	r3, #255	@ 0xff
 800ded4:	d01d      	beq.n	800df12 <USBD_StdItfReq+0x92>
 800ded6:	7bbb      	ldrb	r3, [r7, #14]
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d11a      	bne.n	800df12 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800dedc:	7bba      	ldrb	r2, [r7, #14]
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	32ae      	adds	r2, #174	@ 0xae
 800dee2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dee6:	689b      	ldr	r3, [r3, #8]
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d00f      	beq.n	800df0c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800deec:	7bba      	ldrb	r2, [r7, #14]
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800def4:	7bba      	ldrb	r2, [r7, #14]
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	32ae      	adds	r2, #174	@ 0xae
 800defa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800defe:	689b      	ldr	r3, [r3, #8]
 800df00:	6839      	ldr	r1, [r7, #0]
 800df02:	6878      	ldr	r0, [r7, #4]
 800df04:	4798      	blx	r3
 800df06:	4603      	mov	r3, r0
 800df08:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800df0a:	e004      	b.n	800df16 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800df0c:	2303      	movs	r3, #3
 800df0e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800df10:	e001      	b.n	800df16 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800df12:	2303      	movs	r3, #3
 800df14:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800df16:	683b      	ldr	r3, [r7, #0]
 800df18:	88db      	ldrh	r3, [r3, #6]
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d110      	bne.n	800df40 <USBD_StdItfReq+0xc0>
 800df1e:	7bfb      	ldrb	r3, [r7, #15]
 800df20:	2b00      	cmp	r3, #0
 800df22:	d10d      	bne.n	800df40 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800df24:	6878      	ldr	r0, [r7, #4]
 800df26:	f000 fdd3 	bl	800ead0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800df2a:	e009      	b.n	800df40 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800df2c:	6839      	ldr	r1, [r7, #0]
 800df2e:	6878      	ldr	r0, [r7, #4]
 800df30:	f000 fcf7 	bl	800e922 <USBD_CtlError>
          break;
 800df34:	e004      	b.n	800df40 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800df36:	6839      	ldr	r1, [r7, #0]
 800df38:	6878      	ldr	r0, [r7, #4]
 800df3a:	f000 fcf2 	bl	800e922 <USBD_CtlError>
          break;
 800df3e:	e000      	b.n	800df42 <USBD_StdItfReq+0xc2>
          break;
 800df40:	bf00      	nop
      }
      break;
 800df42:	e004      	b.n	800df4e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800df44:	6839      	ldr	r1, [r7, #0]
 800df46:	6878      	ldr	r0, [r7, #4]
 800df48:	f000 fceb 	bl	800e922 <USBD_CtlError>
      break;
 800df4c:	bf00      	nop
  }

  return ret;
 800df4e:	7bfb      	ldrb	r3, [r7, #15]
}
 800df50:	4618      	mov	r0, r3
 800df52:	3710      	adds	r7, #16
 800df54:	46bd      	mov	sp, r7
 800df56:	bd80      	pop	{r7, pc}

0800df58 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800df58:	b580      	push	{r7, lr}
 800df5a:	b084      	sub	sp, #16
 800df5c:	af00      	add	r7, sp, #0
 800df5e:	6078      	str	r0, [r7, #4]
 800df60:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800df62:	2300      	movs	r3, #0
 800df64:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800df66:	683b      	ldr	r3, [r7, #0]
 800df68:	889b      	ldrh	r3, [r3, #4]
 800df6a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800df6c:	683b      	ldr	r3, [r7, #0]
 800df6e:	781b      	ldrb	r3, [r3, #0]
 800df70:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800df74:	2b40      	cmp	r3, #64	@ 0x40
 800df76:	d007      	beq.n	800df88 <USBD_StdEPReq+0x30>
 800df78:	2b40      	cmp	r3, #64	@ 0x40
 800df7a:	f200 817f 	bhi.w	800e27c <USBD_StdEPReq+0x324>
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d02a      	beq.n	800dfd8 <USBD_StdEPReq+0x80>
 800df82:	2b20      	cmp	r3, #32
 800df84:	f040 817a 	bne.w	800e27c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800df88:	7bbb      	ldrb	r3, [r7, #14]
 800df8a:	4619      	mov	r1, r3
 800df8c:	6878      	ldr	r0, [r7, #4]
 800df8e:	f7ff fe85 	bl	800dc9c <USBD_CoreFindEP>
 800df92:	4603      	mov	r3, r0
 800df94:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800df96:	7b7b      	ldrb	r3, [r7, #13]
 800df98:	2bff      	cmp	r3, #255	@ 0xff
 800df9a:	f000 8174 	beq.w	800e286 <USBD_StdEPReq+0x32e>
 800df9e:	7b7b      	ldrb	r3, [r7, #13]
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	f040 8170 	bne.w	800e286 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800dfa6:	7b7a      	ldrb	r2, [r7, #13]
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800dfae:	7b7a      	ldrb	r2, [r7, #13]
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	32ae      	adds	r2, #174	@ 0xae
 800dfb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dfb8:	689b      	ldr	r3, [r3, #8]
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	f000 8163 	beq.w	800e286 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800dfc0:	7b7a      	ldrb	r2, [r7, #13]
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	32ae      	adds	r2, #174	@ 0xae
 800dfc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dfca:	689b      	ldr	r3, [r3, #8]
 800dfcc:	6839      	ldr	r1, [r7, #0]
 800dfce:	6878      	ldr	r0, [r7, #4]
 800dfd0:	4798      	blx	r3
 800dfd2:	4603      	mov	r3, r0
 800dfd4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800dfd6:	e156      	b.n	800e286 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800dfd8:	683b      	ldr	r3, [r7, #0]
 800dfda:	785b      	ldrb	r3, [r3, #1]
 800dfdc:	2b03      	cmp	r3, #3
 800dfde:	d008      	beq.n	800dff2 <USBD_StdEPReq+0x9a>
 800dfe0:	2b03      	cmp	r3, #3
 800dfe2:	f300 8145 	bgt.w	800e270 <USBD_StdEPReq+0x318>
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	f000 809b 	beq.w	800e122 <USBD_StdEPReq+0x1ca>
 800dfec:	2b01      	cmp	r3, #1
 800dfee:	d03c      	beq.n	800e06a <USBD_StdEPReq+0x112>
 800dff0:	e13e      	b.n	800e270 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dff8:	b2db      	uxtb	r3, r3
 800dffa:	2b02      	cmp	r3, #2
 800dffc:	d002      	beq.n	800e004 <USBD_StdEPReq+0xac>
 800dffe:	2b03      	cmp	r3, #3
 800e000:	d016      	beq.n	800e030 <USBD_StdEPReq+0xd8>
 800e002:	e02c      	b.n	800e05e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e004:	7bbb      	ldrb	r3, [r7, #14]
 800e006:	2b00      	cmp	r3, #0
 800e008:	d00d      	beq.n	800e026 <USBD_StdEPReq+0xce>
 800e00a:	7bbb      	ldrb	r3, [r7, #14]
 800e00c:	2b80      	cmp	r3, #128	@ 0x80
 800e00e:	d00a      	beq.n	800e026 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e010:	7bbb      	ldrb	r3, [r7, #14]
 800e012:	4619      	mov	r1, r3
 800e014:	6878      	ldr	r0, [r7, #4]
 800e016:	f001 f9db 	bl	800f3d0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e01a:	2180      	movs	r1, #128	@ 0x80
 800e01c:	6878      	ldr	r0, [r7, #4]
 800e01e:	f001 f9d7 	bl	800f3d0 <USBD_LL_StallEP>
 800e022:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e024:	e020      	b.n	800e068 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800e026:	6839      	ldr	r1, [r7, #0]
 800e028:	6878      	ldr	r0, [r7, #4]
 800e02a:	f000 fc7a 	bl	800e922 <USBD_CtlError>
              break;
 800e02e:	e01b      	b.n	800e068 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e030:	683b      	ldr	r3, [r7, #0]
 800e032:	885b      	ldrh	r3, [r3, #2]
 800e034:	2b00      	cmp	r3, #0
 800e036:	d10e      	bne.n	800e056 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800e038:	7bbb      	ldrb	r3, [r7, #14]
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d00b      	beq.n	800e056 <USBD_StdEPReq+0xfe>
 800e03e:	7bbb      	ldrb	r3, [r7, #14]
 800e040:	2b80      	cmp	r3, #128	@ 0x80
 800e042:	d008      	beq.n	800e056 <USBD_StdEPReq+0xfe>
 800e044:	683b      	ldr	r3, [r7, #0]
 800e046:	88db      	ldrh	r3, [r3, #6]
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d104      	bne.n	800e056 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800e04c:	7bbb      	ldrb	r3, [r7, #14]
 800e04e:	4619      	mov	r1, r3
 800e050:	6878      	ldr	r0, [r7, #4]
 800e052:	f001 f9bd 	bl	800f3d0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800e056:	6878      	ldr	r0, [r7, #4]
 800e058:	f000 fd3a 	bl	800ead0 <USBD_CtlSendStatus>

              break;
 800e05c:	e004      	b.n	800e068 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800e05e:	6839      	ldr	r1, [r7, #0]
 800e060:	6878      	ldr	r0, [r7, #4]
 800e062:	f000 fc5e 	bl	800e922 <USBD_CtlError>
              break;
 800e066:	bf00      	nop
          }
          break;
 800e068:	e107      	b.n	800e27a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e070:	b2db      	uxtb	r3, r3
 800e072:	2b02      	cmp	r3, #2
 800e074:	d002      	beq.n	800e07c <USBD_StdEPReq+0x124>
 800e076:	2b03      	cmp	r3, #3
 800e078:	d016      	beq.n	800e0a8 <USBD_StdEPReq+0x150>
 800e07a:	e04b      	b.n	800e114 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e07c:	7bbb      	ldrb	r3, [r7, #14]
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d00d      	beq.n	800e09e <USBD_StdEPReq+0x146>
 800e082:	7bbb      	ldrb	r3, [r7, #14]
 800e084:	2b80      	cmp	r3, #128	@ 0x80
 800e086:	d00a      	beq.n	800e09e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e088:	7bbb      	ldrb	r3, [r7, #14]
 800e08a:	4619      	mov	r1, r3
 800e08c:	6878      	ldr	r0, [r7, #4]
 800e08e:	f001 f99f 	bl	800f3d0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e092:	2180      	movs	r1, #128	@ 0x80
 800e094:	6878      	ldr	r0, [r7, #4]
 800e096:	f001 f99b 	bl	800f3d0 <USBD_LL_StallEP>
 800e09a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e09c:	e040      	b.n	800e120 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800e09e:	6839      	ldr	r1, [r7, #0]
 800e0a0:	6878      	ldr	r0, [r7, #4]
 800e0a2:	f000 fc3e 	bl	800e922 <USBD_CtlError>
              break;
 800e0a6:	e03b      	b.n	800e120 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e0a8:	683b      	ldr	r3, [r7, #0]
 800e0aa:	885b      	ldrh	r3, [r3, #2]
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d136      	bne.n	800e11e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800e0b0:	7bbb      	ldrb	r3, [r7, #14]
 800e0b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d004      	beq.n	800e0c4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800e0ba:	7bbb      	ldrb	r3, [r7, #14]
 800e0bc:	4619      	mov	r1, r3
 800e0be:	6878      	ldr	r0, [r7, #4]
 800e0c0:	f001 f9a5 	bl	800f40e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800e0c4:	6878      	ldr	r0, [r7, #4]
 800e0c6:	f000 fd03 	bl	800ead0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800e0ca:	7bbb      	ldrb	r3, [r7, #14]
 800e0cc:	4619      	mov	r1, r3
 800e0ce:	6878      	ldr	r0, [r7, #4]
 800e0d0:	f7ff fde4 	bl	800dc9c <USBD_CoreFindEP>
 800e0d4:	4603      	mov	r3, r0
 800e0d6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e0d8:	7b7b      	ldrb	r3, [r7, #13]
 800e0da:	2bff      	cmp	r3, #255	@ 0xff
 800e0dc:	d01f      	beq.n	800e11e <USBD_StdEPReq+0x1c6>
 800e0de:	7b7b      	ldrb	r3, [r7, #13]
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d11c      	bne.n	800e11e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800e0e4:	7b7a      	ldrb	r2, [r7, #13]
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800e0ec:	7b7a      	ldrb	r2, [r7, #13]
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	32ae      	adds	r2, #174	@ 0xae
 800e0f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e0f6:	689b      	ldr	r3, [r3, #8]
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d010      	beq.n	800e11e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e0fc:	7b7a      	ldrb	r2, [r7, #13]
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	32ae      	adds	r2, #174	@ 0xae
 800e102:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e106:	689b      	ldr	r3, [r3, #8]
 800e108:	6839      	ldr	r1, [r7, #0]
 800e10a:	6878      	ldr	r0, [r7, #4]
 800e10c:	4798      	blx	r3
 800e10e:	4603      	mov	r3, r0
 800e110:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800e112:	e004      	b.n	800e11e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800e114:	6839      	ldr	r1, [r7, #0]
 800e116:	6878      	ldr	r0, [r7, #4]
 800e118:	f000 fc03 	bl	800e922 <USBD_CtlError>
              break;
 800e11c:	e000      	b.n	800e120 <USBD_StdEPReq+0x1c8>
              break;
 800e11e:	bf00      	nop
          }
          break;
 800e120:	e0ab      	b.n	800e27a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e128:	b2db      	uxtb	r3, r3
 800e12a:	2b02      	cmp	r3, #2
 800e12c:	d002      	beq.n	800e134 <USBD_StdEPReq+0x1dc>
 800e12e:	2b03      	cmp	r3, #3
 800e130:	d032      	beq.n	800e198 <USBD_StdEPReq+0x240>
 800e132:	e097      	b.n	800e264 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e134:	7bbb      	ldrb	r3, [r7, #14]
 800e136:	2b00      	cmp	r3, #0
 800e138:	d007      	beq.n	800e14a <USBD_StdEPReq+0x1f2>
 800e13a:	7bbb      	ldrb	r3, [r7, #14]
 800e13c:	2b80      	cmp	r3, #128	@ 0x80
 800e13e:	d004      	beq.n	800e14a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800e140:	6839      	ldr	r1, [r7, #0]
 800e142:	6878      	ldr	r0, [r7, #4]
 800e144:	f000 fbed 	bl	800e922 <USBD_CtlError>
                break;
 800e148:	e091      	b.n	800e26e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e14a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e14e:	2b00      	cmp	r3, #0
 800e150:	da0b      	bge.n	800e16a <USBD_StdEPReq+0x212>
 800e152:	7bbb      	ldrb	r3, [r7, #14]
 800e154:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e158:	4613      	mov	r3, r2
 800e15a:	009b      	lsls	r3, r3, #2
 800e15c:	4413      	add	r3, r2
 800e15e:	009b      	lsls	r3, r3, #2
 800e160:	3310      	adds	r3, #16
 800e162:	687a      	ldr	r2, [r7, #4]
 800e164:	4413      	add	r3, r2
 800e166:	3304      	adds	r3, #4
 800e168:	e00b      	b.n	800e182 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e16a:	7bbb      	ldrb	r3, [r7, #14]
 800e16c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e170:	4613      	mov	r3, r2
 800e172:	009b      	lsls	r3, r3, #2
 800e174:	4413      	add	r3, r2
 800e176:	009b      	lsls	r3, r3, #2
 800e178:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800e17c:	687a      	ldr	r2, [r7, #4]
 800e17e:	4413      	add	r3, r2
 800e180:	3304      	adds	r3, #4
 800e182:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800e184:	68bb      	ldr	r3, [r7, #8]
 800e186:	2200      	movs	r2, #0
 800e188:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e18a:	68bb      	ldr	r3, [r7, #8]
 800e18c:	2202      	movs	r2, #2
 800e18e:	4619      	mov	r1, r3
 800e190:	6878      	ldr	r0, [r7, #4]
 800e192:	f000 fc43 	bl	800ea1c <USBD_CtlSendData>
              break;
 800e196:	e06a      	b.n	800e26e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800e198:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	da11      	bge.n	800e1c4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e1a0:	7bbb      	ldrb	r3, [r7, #14]
 800e1a2:	f003 020f 	and.w	r2, r3, #15
 800e1a6:	6879      	ldr	r1, [r7, #4]
 800e1a8:	4613      	mov	r3, r2
 800e1aa:	009b      	lsls	r3, r3, #2
 800e1ac:	4413      	add	r3, r2
 800e1ae:	009b      	lsls	r3, r3, #2
 800e1b0:	440b      	add	r3, r1
 800e1b2:	3324      	adds	r3, #36	@ 0x24
 800e1b4:	881b      	ldrh	r3, [r3, #0]
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d117      	bne.n	800e1ea <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e1ba:	6839      	ldr	r1, [r7, #0]
 800e1bc:	6878      	ldr	r0, [r7, #4]
 800e1be:	f000 fbb0 	bl	800e922 <USBD_CtlError>
                  break;
 800e1c2:	e054      	b.n	800e26e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e1c4:	7bbb      	ldrb	r3, [r7, #14]
 800e1c6:	f003 020f 	and.w	r2, r3, #15
 800e1ca:	6879      	ldr	r1, [r7, #4]
 800e1cc:	4613      	mov	r3, r2
 800e1ce:	009b      	lsls	r3, r3, #2
 800e1d0:	4413      	add	r3, r2
 800e1d2:	009b      	lsls	r3, r3, #2
 800e1d4:	440b      	add	r3, r1
 800e1d6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800e1da:	881b      	ldrh	r3, [r3, #0]
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d104      	bne.n	800e1ea <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e1e0:	6839      	ldr	r1, [r7, #0]
 800e1e2:	6878      	ldr	r0, [r7, #4]
 800e1e4:	f000 fb9d 	bl	800e922 <USBD_CtlError>
                  break;
 800e1e8:	e041      	b.n	800e26e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e1ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	da0b      	bge.n	800e20a <USBD_StdEPReq+0x2b2>
 800e1f2:	7bbb      	ldrb	r3, [r7, #14]
 800e1f4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e1f8:	4613      	mov	r3, r2
 800e1fa:	009b      	lsls	r3, r3, #2
 800e1fc:	4413      	add	r3, r2
 800e1fe:	009b      	lsls	r3, r3, #2
 800e200:	3310      	adds	r3, #16
 800e202:	687a      	ldr	r2, [r7, #4]
 800e204:	4413      	add	r3, r2
 800e206:	3304      	adds	r3, #4
 800e208:	e00b      	b.n	800e222 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e20a:	7bbb      	ldrb	r3, [r7, #14]
 800e20c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e210:	4613      	mov	r3, r2
 800e212:	009b      	lsls	r3, r3, #2
 800e214:	4413      	add	r3, r2
 800e216:	009b      	lsls	r3, r3, #2
 800e218:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800e21c:	687a      	ldr	r2, [r7, #4]
 800e21e:	4413      	add	r3, r2
 800e220:	3304      	adds	r3, #4
 800e222:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e224:	7bbb      	ldrb	r3, [r7, #14]
 800e226:	2b00      	cmp	r3, #0
 800e228:	d002      	beq.n	800e230 <USBD_StdEPReq+0x2d8>
 800e22a:	7bbb      	ldrb	r3, [r7, #14]
 800e22c:	2b80      	cmp	r3, #128	@ 0x80
 800e22e:	d103      	bne.n	800e238 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800e230:	68bb      	ldr	r3, [r7, #8]
 800e232:	2200      	movs	r2, #0
 800e234:	601a      	str	r2, [r3, #0]
 800e236:	e00e      	b.n	800e256 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e238:	7bbb      	ldrb	r3, [r7, #14]
 800e23a:	4619      	mov	r1, r3
 800e23c:	6878      	ldr	r0, [r7, #4]
 800e23e:	f001 f905 	bl	800f44c <USBD_LL_IsStallEP>
 800e242:	4603      	mov	r3, r0
 800e244:	2b00      	cmp	r3, #0
 800e246:	d003      	beq.n	800e250 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800e248:	68bb      	ldr	r3, [r7, #8]
 800e24a:	2201      	movs	r2, #1
 800e24c:	601a      	str	r2, [r3, #0]
 800e24e:	e002      	b.n	800e256 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800e250:	68bb      	ldr	r3, [r7, #8]
 800e252:	2200      	movs	r2, #0
 800e254:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e256:	68bb      	ldr	r3, [r7, #8]
 800e258:	2202      	movs	r2, #2
 800e25a:	4619      	mov	r1, r3
 800e25c:	6878      	ldr	r0, [r7, #4]
 800e25e:	f000 fbdd 	bl	800ea1c <USBD_CtlSendData>
              break;
 800e262:	e004      	b.n	800e26e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800e264:	6839      	ldr	r1, [r7, #0]
 800e266:	6878      	ldr	r0, [r7, #4]
 800e268:	f000 fb5b 	bl	800e922 <USBD_CtlError>
              break;
 800e26c:	bf00      	nop
          }
          break;
 800e26e:	e004      	b.n	800e27a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800e270:	6839      	ldr	r1, [r7, #0]
 800e272:	6878      	ldr	r0, [r7, #4]
 800e274:	f000 fb55 	bl	800e922 <USBD_CtlError>
          break;
 800e278:	bf00      	nop
      }
      break;
 800e27a:	e005      	b.n	800e288 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800e27c:	6839      	ldr	r1, [r7, #0]
 800e27e:	6878      	ldr	r0, [r7, #4]
 800e280:	f000 fb4f 	bl	800e922 <USBD_CtlError>
      break;
 800e284:	e000      	b.n	800e288 <USBD_StdEPReq+0x330>
      break;
 800e286:	bf00      	nop
  }

  return ret;
 800e288:	7bfb      	ldrb	r3, [r7, #15]
}
 800e28a:	4618      	mov	r0, r3
 800e28c:	3710      	adds	r7, #16
 800e28e:	46bd      	mov	sp, r7
 800e290:	bd80      	pop	{r7, pc}
	...

0800e294 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e294:	b580      	push	{r7, lr}
 800e296:	b084      	sub	sp, #16
 800e298:	af00      	add	r7, sp, #0
 800e29a:	6078      	str	r0, [r7, #4]
 800e29c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e29e:	2300      	movs	r3, #0
 800e2a0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800e2a2:	2300      	movs	r3, #0
 800e2a4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e2a6:	2300      	movs	r3, #0
 800e2a8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800e2aa:	683b      	ldr	r3, [r7, #0]
 800e2ac:	885b      	ldrh	r3, [r3, #2]
 800e2ae:	0a1b      	lsrs	r3, r3, #8
 800e2b0:	b29b      	uxth	r3, r3
 800e2b2:	3b01      	subs	r3, #1
 800e2b4:	2b06      	cmp	r3, #6
 800e2b6:	f200 8128 	bhi.w	800e50a <USBD_GetDescriptor+0x276>
 800e2ba:	a201      	add	r2, pc, #4	@ (adr r2, 800e2c0 <USBD_GetDescriptor+0x2c>)
 800e2bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2c0:	0800e2dd 	.word	0x0800e2dd
 800e2c4:	0800e2f5 	.word	0x0800e2f5
 800e2c8:	0800e335 	.word	0x0800e335
 800e2cc:	0800e50b 	.word	0x0800e50b
 800e2d0:	0800e50b 	.word	0x0800e50b
 800e2d4:	0800e4ab 	.word	0x0800e4ab
 800e2d8:	0800e4d7 	.word	0x0800e4d7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	687a      	ldr	r2, [r7, #4]
 800e2e6:	7c12      	ldrb	r2, [r2, #16]
 800e2e8:	f107 0108 	add.w	r1, r7, #8
 800e2ec:	4610      	mov	r0, r2
 800e2ee:	4798      	blx	r3
 800e2f0:	60f8      	str	r0, [r7, #12]
      break;
 800e2f2:	e112      	b.n	800e51a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	7c1b      	ldrb	r3, [r3, #16]
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d10d      	bne.n	800e318 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e302:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e304:	f107 0208 	add.w	r2, r7, #8
 800e308:	4610      	mov	r0, r2
 800e30a:	4798      	blx	r3
 800e30c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	3301      	adds	r3, #1
 800e312:	2202      	movs	r2, #2
 800e314:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800e316:	e100      	b.n	800e51a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e31e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e320:	f107 0208 	add.w	r2, r7, #8
 800e324:	4610      	mov	r0, r2
 800e326:	4798      	blx	r3
 800e328:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	3301      	adds	r3, #1
 800e32e:	2202      	movs	r2, #2
 800e330:	701a      	strb	r2, [r3, #0]
      break;
 800e332:	e0f2      	b.n	800e51a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800e334:	683b      	ldr	r3, [r7, #0]
 800e336:	885b      	ldrh	r3, [r3, #2]
 800e338:	b2db      	uxtb	r3, r3
 800e33a:	2b05      	cmp	r3, #5
 800e33c:	f200 80ac 	bhi.w	800e498 <USBD_GetDescriptor+0x204>
 800e340:	a201      	add	r2, pc, #4	@ (adr r2, 800e348 <USBD_GetDescriptor+0xb4>)
 800e342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e346:	bf00      	nop
 800e348:	0800e361 	.word	0x0800e361
 800e34c:	0800e395 	.word	0x0800e395
 800e350:	0800e3c9 	.word	0x0800e3c9
 800e354:	0800e3fd 	.word	0x0800e3fd
 800e358:	0800e431 	.word	0x0800e431
 800e35c:	0800e465 	.word	0x0800e465
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e366:	685b      	ldr	r3, [r3, #4]
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d00b      	beq.n	800e384 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e372:	685b      	ldr	r3, [r3, #4]
 800e374:	687a      	ldr	r2, [r7, #4]
 800e376:	7c12      	ldrb	r2, [r2, #16]
 800e378:	f107 0108 	add.w	r1, r7, #8
 800e37c:	4610      	mov	r0, r2
 800e37e:	4798      	blx	r3
 800e380:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e382:	e091      	b.n	800e4a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e384:	6839      	ldr	r1, [r7, #0]
 800e386:	6878      	ldr	r0, [r7, #4]
 800e388:	f000 facb 	bl	800e922 <USBD_CtlError>
            err++;
 800e38c:	7afb      	ldrb	r3, [r7, #11]
 800e38e:	3301      	adds	r3, #1
 800e390:	72fb      	strb	r3, [r7, #11]
          break;
 800e392:	e089      	b.n	800e4a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e39a:	689b      	ldr	r3, [r3, #8]
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d00b      	beq.n	800e3b8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e3a6:	689b      	ldr	r3, [r3, #8]
 800e3a8:	687a      	ldr	r2, [r7, #4]
 800e3aa:	7c12      	ldrb	r2, [r2, #16]
 800e3ac:	f107 0108 	add.w	r1, r7, #8
 800e3b0:	4610      	mov	r0, r2
 800e3b2:	4798      	blx	r3
 800e3b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e3b6:	e077      	b.n	800e4a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e3b8:	6839      	ldr	r1, [r7, #0]
 800e3ba:	6878      	ldr	r0, [r7, #4]
 800e3bc:	f000 fab1 	bl	800e922 <USBD_CtlError>
            err++;
 800e3c0:	7afb      	ldrb	r3, [r7, #11]
 800e3c2:	3301      	adds	r3, #1
 800e3c4:	72fb      	strb	r3, [r7, #11]
          break;
 800e3c6:	e06f      	b.n	800e4a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e3ce:	68db      	ldr	r3, [r3, #12]
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d00b      	beq.n	800e3ec <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e3da:	68db      	ldr	r3, [r3, #12]
 800e3dc:	687a      	ldr	r2, [r7, #4]
 800e3de:	7c12      	ldrb	r2, [r2, #16]
 800e3e0:	f107 0108 	add.w	r1, r7, #8
 800e3e4:	4610      	mov	r0, r2
 800e3e6:	4798      	blx	r3
 800e3e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e3ea:	e05d      	b.n	800e4a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e3ec:	6839      	ldr	r1, [r7, #0]
 800e3ee:	6878      	ldr	r0, [r7, #4]
 800e3f0:	f000 fa97 	bl	800e922 <USBD_CtlError>
            err++;
 800e3f4:	7afb      	ldrb	r3, [r7, #11]
 800e3f6:	3301      	adds	r3, #1
 800e3f8:	72fb      	strb	r3, [r7, #11]
          break;
 800e3fa:	e055      	b.n	800e4a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e402:	691b      	ldr	r3, [r3, #16]
 800e404:	2b00      	cmp	r3, #0
 800e406:	d00b      	beq.n	800e420 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e40e:	691b      	ldr	r3, [r3, #16]
 800e410:	687a      	ldr	r2, [r7, #4]
 800e412:	7c12      	ldrb	r2, [r2, #16]
 800e414:	f107 0108 	add.w	r1, r7, #8
 800e418:	4610      	mov	r0, r2
 800e41a:	4798      	blx	r3
 800e41c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e41e:	e043      	b.n	800e4a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e420:	6839      	ldr	r1, [r7, #0]
 800e422:	6878      	ldr	r0, [r7, #4]
 800e424:	f000 fa7d 	bl	800e922 <USBD_CtlError>
            err++;
 800e428:	7afb      	ldrb	r3, [r7, #11]
 800e42a:	3301      	adds	r3, #1
 800e42c:	72fb      	strb	r3, [r7, #11]
          break;
 800e42e:	e03b      	b.n	800e4a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e436:	695b      	ldr	r3, [r3, #20]
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d00b      	beq.n	800e454 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e442:	695b      	ldr	r3, [r3, #20]
 800e444:	687a      	ldr	r2, [r7, #4]
 800e446:	7c12      	ldrb	r2, [r2, #16]
 800e448:	f107 0108 	add.w	r1, r7, #8
 800e44c:	4610      	mov	r0, r2
 800e44e:	4798      	blx	r3
 800e450:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e452:	e029      	b.n	800e4a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e454:	6839      	ldr	r1, [r7, #0]
 800e456:	6878      	ldr	r0, [r7, #4]
 800e458:	f000 fa63 	bl	800e922 <USBD_CtlError>
            err++;
 800e45c:	7afb      	ldrb	r3, [r7, #11]
 800e45e:	3301      	adds	r3, #1
 800e460:	72fb      	strb	r3, [r7, #11]
          break;
 800e462:	e021      	b.n	800e4a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e46a:	699b      	ldr	r3, [r3, #24]
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d00b      	beq.n	800e488 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e476:	699b      	ldr	r3, [r3, #24]
 800e478:	687a      	ldr	r2, [r7, #4]
 800e47a:	7c12      	ldrb	r2, [r2, #16]
 800e47c:	f107 0108 	add.w	r1, r7, #8
 800e480:	4610      	mov	r0, r2
 800e482:	4798      	blx	r3
 800e484:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e486:	e00f      	b.n	800e4a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e488:	6839      	ldr	r1, [r7, #0]
 800e48a:	6878      	ldr	r0, [r7, #4]
 800e48c:	f000 fa49 	bl	800e922 <USBD_CtlError>
            err++;
 800e490:	7afb      	ldrb	r3, [r7, #11]
 800e492:	3301      	adds	r3, #1
 800e494:	72fb      	strb	r3, [r7, #11]
          break;
 800e496:	e007      	b.n	800e4a8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800e498:	6839      	ldr	r1, [r7, #0]
 800e49a:	6878      	ldr	r0, [r7, #4]
 800e49c:	f000 fa41 	bl	800e922 <USBD_CtlError>
          err++;
 800e4a0:	7afb      	ldrb	r3, [r7, #11]
 800e4a2:	3301      	adds	r3, #1
 800e4a4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800e4a6:	bf00      	nop
      }
      break;
 800e4a8:	e037      	b.n	800e51a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	7c1b      	ldrb	r3, [r3, #16]
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d109      	bne.n	800e4c6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e4b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e4ba:	f107 0208 	add.w	r2, r7, #8
 800e4be:	4610      	mov	r0, r2
 800e4c0:	4798      	blx	r3
 800e4c2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e4c4:	e029      	b.n	800e51a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800e4c6:	6839      	ldr	r1, [r7, #0]
 800e4c8:	6878      	ldr	r0, [r7, #4]
 800e4ca:	f000 fa2a 	bl	800e922 <USBD_CtlError>
        err++;
 800e4ce:	7afb      	ldrb	r3, [r7, #11]
 800e4d0:	3301      	adds	r3, #1
 800e4d2:	72fb      	strb	r3, [r7, #11]
      break;
 800e4d4:	e021      	b.n	800e51a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	7c1b      	ldrb	r3, [r3, #16]
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d10d      	bne.n	800e4fa <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e4e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e4e6:	f107 0208 	add.w	r2, r7, #8
 800e4ea:	4610      	mov	r0, r2
 800e4ec:	4798      	blx	r3
 800e4ee:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	3301      	adds	r3, #1
 800e4f4:	2207      	movs	r2, #7
 800e4f6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e4f8:	e00f      	b.n	800e51a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800e4fa:	6839      	ldr	r1, [r7, #0]
 800e4fc:	6878      	ldr	r0, [r7, #4]
 800e4fe:	f000 fa10 	bl	800e922 <USBD_CtlError>
        err++;
 800e502:	7afb      	ldrb	r3, [r7, #11]
 800e504:	3301      	adds	r3, #1
 800e506:	72fb      	strb	r3, [r7, #11]
      break;
 800e508:	e007      	b.n	800e51a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800e50a:	6839      	ldr	r1, [r7, #0]
 800e50c:	6878      	ldr	r0, [r7, #4]
 800e50e:	f000 fa08 	bl	800e922 <USBD_CtlError>
      err++;
 800e512:	7afb      	ldrb	r3, [r7, #11]
 800e514:	3301      	adds	r3, #1
 800e516:	72fb      	strb	r3, [r7, #11]
      break;
 800e518:	bf00      	nop
  }

  if (err != 0U)
 800e51a:	7afb      	ldrb	r3, [r7, #11]
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d11e      	bne.n	800e55e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800e520:	683b      	ldr	r3, [r7, #0]
 800e522:	88db      	ldrh	r3, [r3, #6]
 800e524:	2b00      	cmp	r3, #0
 800e526:	d016      	beq.n	800e556 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800e528:	893b      	ldrh	r3, [r7, #8]
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d00e      	beq.n	800e54c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800e52e:	683b      	ldr	r3, [r7, #0]
 800e530:	88da      	ldrh	r2, [r3, #6]
 800e532:	893b      	ldrh	r3, [r7, #8]
 800e534:	4293      	cmp	r3, r2
 800e536:	bf28      	it	cs
 800e538:	4613      	movcs	r3, r2
 800e53a:	b29b      	uxth	r3, r3
 800e53c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e53e:	893b      	ldrh	r3, [r7, #8]
 800e540:	461a      	mov	r2, r3
 800e542:	68f9      	ldr	r1, [r7, #12]
 800e544:	6878      	ldr	r0, [r7, #4]
 800e546:	f000 fa69 	bl	800ea1c <USBD_CtlSendData>
 800e54a:	e009      	b.n	800e560 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800e54c:	6839      	ldr	r1, [r7, #0]
 800e54e:	6878      	ldr	r0, [r7, #4]
 800e550:	f000 f9e7 	bl	800e922 <USBD_CtlError>
 800e554:	e004      	b.n	800e560 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800e556:	6878      	ldr	r0, [r7, #4]
 800e558:	f000 faba 	bl	800ead0 <USBD_CtlSendStatus>
 800e55c:	e000      	b.n	800e560 <USBD_GetDescriptor+0x2cc>
    return;
 800e55e:	bf00      	nop
  }
}
 800e560:	3710      	adds	r7, #16
 800e562:	46bd      	mov	sp, r7
 800e564:	bd80      	pop	{r7, pc}
 800e566:	bf00      	nop

0800e568 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e568:	b580      	push	{r7, lr}
 800e56a:	b084      	sub	sp, #16
 800e56c:	af00      	add	r7, sp, #0
 800e56e:	6078      	str	r0, [r7, #4]
 800e570:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e572:	683b      	ldr	r3, [r7, #0]
 800e574:	889b      	ldrh	r3, [r3, #4]
 800e576:	2b00      	cmp	r3, #0
 800e578:	d131      	bne.n	800e5de <USBD_SetAddress+0x76>
 800e57a:	683b      	ldr	r3, [r7, #0]
 800e57c:	88db      	ldrh	r3, [r3, #6]
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d12d      	bne.n	800e5de <USBD_SetAddress+0x76>
 800e582:	683b      	ldr	r3, [r7, #0]
 800e584:	885b      	ldrh	r3, [r3, #2]
 800e586:	2b7f      	cmp	r3, #127	@ 0x7f
 800e588:	d829      	bhi.n	800e5de <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e58a:	683b      	ldr	r3, [r7, #0]
 800e58c:	885b      	ldrh	r3, [r3, #2]
 800e58e:	b2db      	uxtb	r3, r3
 800e590:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e594:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e59c:	b2db      	uxtb	r3, r3
 800e59e:	2b03      	cmp	r3, #3
 800e5a0:	d104      	bne.n	800e5ac <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800e5a2:	6839      	ldr	r1, [r7, #0]
 800e5a4:	6878      	ldr	r0, [r7, #4]
 800e5a6:	f000 f9bc 	bl	800e922 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e5aa:	e01d      	b.n	800e5e8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	7bfa      	ldrb	r2, [r7, #15]
 800e5b0:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e5b4:	7bfb      	ldrb	r3, [r7, #15]
 800e5b6:	4619      	mov	r1, r3
 800e5b8:	6878      	ldr	r0, [r7, #4]
 800e5ba:	f000 ff73 	bl	800f4a4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800e5be:	6878      	ldr	r0, [r7, #4]
 800e5c0:	f000 fa86 	bl	800ead0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e5c4:	7bfb      	ldrb	r3, [r7, #15]
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d004      	beq.n	800e5d4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	2202      	movs	r2, #2
 800e5ce:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e5d2:	e009      	b.n	800e5e8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	2201      	movs	r2, #1
 800e5d8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e5dc:	e004      	b.n	800e5e8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e5de:	6839      	ldr	r1, [r7, #0]
 800e5e0:	6878      	ldr	r0, [r7, #4]
 800e5e2:	f000 f99e 	bl	800e922 <USBD_CtlError>
  }
}
 800e5e6:	bf00      	nop
 800e5e8:	bf00      	nop
 800e5ea:	3710      	adds	r7, #16
 800e5ec:	46bd      	mov	sp, r7
 800e5ee:	bd80      	pop	{r7, pc}

0800e5f0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e5f0:	b580      	push	{r7, lr}
 800e5f2:	b084      	sub	sp, #16
 800e5f4:	af00      	add	r7, sp, #0
 800e5f6:	6078      	str	r0, [r7, #4]
 800e5f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e5fa:	2300      	movs	r3, #0
 800e5fc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e5fe:	683b      	ldr	r3, [r7, #0]
 800e600:	885b      	ldrh	r3, [r3, #2]
 800e602:	b2da      	uxtb	r2, r3
 800e604:	4b4e      	ldr	r3, [pc, #312]	@ (800e740 <USBD_SetConfig+0x150>)
 800e606:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e608:	4b4d      	ldr	r3, [pc, #308]	@ (800e740 <USBD_SetConfig+0x150>)
 800e60a:	781b      	ldrb	r3, [r3, #0]
 800e60c:	2b01      	cmp	r3, #1
 800e60e:	d905      	bls.n	800e61c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800e610:	6839      	ldr	r1, [r7, #0]
 800e612:	6878      	ldr	r0, [r7, #4]
 800e614:	f000 f985 	bl	800e922 <USBD_CtlError>
    return USBD_FAIL;
 800e618:	2303      	movs	r3, #3
 800e61a:	e08c      	b.n	800e736 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e622:	b2db      	uxtb	r3, r3
 800e624:	2b02      	cmp	r3, #2
 800e626:	d002      	beq.n	800e62e <USBD_SetConfig+0x3e>
 800e628:	2b03      	cmp	r3, #3
 800e62a:	d029      	beq.n	800e680 <USBD_SetConfig+0x90>
 800e62c:	e075      	b.n	800e71a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800e62e:	4b44      	ldr	r3, [pc, #272]	@ (800e740 <USBD_SetConfig+0x150>)
 800e630:	781b      	ldrb	r3, [r3, #0]
 800e632:	2b00      	cmp	r3, #0
 800e634:	d020      	beq.n	800e678 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800e636:	4b42      	ldr	r3, [pc, #264]	@ (800e740 <USBD_SetConfig+0x150>)
 800e638:	781b      	ldrb	r3, [r3, #0]
 800e63a:	461a      	mov	r2, r3
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e640:	4b3f      	ldr	r3, [pc, #252]	@ (800e740 <USBD_SetConfig+0x150>)
 800e642:	781b      	ldrb	r3, [r3, #0]
 800e644:	4619      	mov	r1, r3
 800e646:	6878      	ldr	r0, [r7, #4]
 800e648:	f7fe ffe3 	bl	800d612 <USBD_SetClassConfig>
 800e64c:	4603      	mov	r3, r0
 800e64e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800e650:	7bfb      	ldrb	r3, [r7, #15]
 800e652:	2b00      	cmp	r3, #0
 800e654:	d008      	beq.n	800e668 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800e656:	6839      	ldr	r1, [r7, #0]
 800e658:	6878      	ldr	r0, [r7, #4]
 800e65a:	f000 f962 	bl	800e922 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	2202      	movs	r2, #2
 800e662:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e666:	e065      	b.n	800e734 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e668:	6878      	ldr	r0, [r7, #4]
 800e66a:	f000 fa31 	bl	800ead0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	2203      	movs	r2, #3
 800e672:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800e676:	e05d      	b.n	800e734 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e678:	6878      	ldr	r0, [r7, #4]
 800e67a:	f000 fa29 	bl	800ead0 <USBD_CtlSendStatus>
      break;
 800e67e:	e059      	b.n	800e734 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800e680:	4b2f      	ldr	r3, [pc, #188]	@ (800e740 <USBD_SetConfig+0x150>)
 800e682:	781b      	ldrb	r3, [r3, #0]
 800e684:	2b00      	cmp	r3, #0
 800e686:	d112      	bne.n	800e6ae <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	2202      	movs	r2, #2
 800e68c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800e690:	4b2b      	ldr	r3, [pc, #172]	@ (800e740 <USBD_SetConfig+0x150>)
 800e692:	781b      	ldrb	r3, [r3, #0]
 800e694:	461a      	mov	r2, r3
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e69a:	4b29      	ldr	r3, [pc, #164]	@ (800e740 <USBD_SetConfig+0x150>)
 800e69c:	781b      	ldrb	r3, [r3, #0]
 800e69e:	4619      	mov	r1, r3
 800e6a0:	6878      	ldr	r0, [r7, #4]
 800e6a2:	f7fe ffd2 	bl	800d64a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800e6a6:	6878      	ldr	r0, [r7, #4]
 800e6a8:	f000 fa12 	bl	800ead0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e6ac:	e042      	b.n	800e734 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800e6ae:	4b24      	ldr	r3, [pc, #144]	@ (800e740 <USBD_SetConfig+0x150>)
 800e6b0:	781b      	ldrb	r3, [r3, #0]
 800e6b2:	461a      	mov	r2, r3
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	685b      	ldr	r3, [r3, #4]
 800e6b8:	429a      	cmp	r2, r3
 800e6ba:	d02a      	beq.n	800e712 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	685b      	ldr	r3, [r3, #4]
 800e6c0:	b2db      	uxtb	r3, r3
 800e6c2:	4619      	mov	r1, r3
 800e6c4:	6878      	ldr	r0, [r7, #4]
 800e6c6:	f7fe ffc0 	bl	800d64a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e6ca:	4b1d      	ldr	r3, [pc, #116]	@ (800e740 <USBD_SetConfig+0x150>)
 800e6cc:	781b      	ldrb	r3, [r3, #0]
 800e6ce:	461a      	mov	r2, r3
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e6d4:	4b1a      	ldr	r3, [pc, #104]	@ (800e740 <USBD_SetConfig+0x150>)
 800e6d6:	781b      	ldrb	r3, [r3, #0]
 800e6d8:	4619      	mov	r1, r3
 800e6da:	6878      	ldr	r0, [r7, #4]
 800e6dc:	f7fe ff99 	bl	800d612 <USBD_SetClassConfig>
 800e6e0:	4603      	mov	r3, r0
 800e6e2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800e6e4:	7bfb      	ldrb	r3, [r7, #15]
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d00f      	beq.n	800e70a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800e6ea:	6839      	ldr	r1, [r7, #0]
 800e6ec:	6878      	ldr	r0, [r7, #4]
 800e6ee:	f000 f918 	bl	800e922 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	685b      	ldr	r3, [r3, #4]
 800e6f6:	b2db      	uxtb	r3, r3
 800e6f8:	4619      	mov	r1, r3
 800e6fa:	6878      	ldr	r0, [r7, #4]
 800e6fc:	f7fe ffa5 	bl	800d64a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	2202      	movs	r2, #2
 800e704:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800e708:	e014      	b.n	800e734 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e70a:	6878      	ldr	r0, [r7, #4]
 800e70c:	f000 f9e0 	bl	800ead0 <USBD_CtlSendStatus>
      break;
 800e710:	e010      	b.n	800e734 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e712:	6878      	ldr	r0, [r7, #4]
 800e714:	f000 f9dc 	bl	800ead0 <USBD_CtlSendStatus>
      break;
 800e718:	e00c      	b.n	800e734 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800e71a:	6839      	ldr	r1, [r7, #0]
 800e71c:	6878      	ldr	r0, [r7, #4]
 800e71e:	f000 f900 	bl	800e922 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e722:	4b07      	ldr	r3, [pc, #28]	@ (800e740 <USBD_SetConfig+0x150>)
 800e724:	781b      	ldrb	r3, [r3, #0]
 800e726:	4619      	mov	r1, r3
 800e728:	6878      	ldr	r0, [r7, #4]
 800e72a:	f7fe ff8e 	bl	800d64a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800e72e:	2303      	movs	r3, #3
 800e730:	73fb      	strb	r3, [r7, #15]
      break;
 800e732:	bf00      	nop
  }

  return ret;
 800e734:	7bfb      	ldrb	r3, [r7, #15]
}
 800e736:	4618      	mov	r0, r3
 800e738:	3710      	adds	r7, #16
 800e73a:	46bd      	mov	sp, r7
 800e73c:	bd80      	pop	{r7, pc}
 800e73e:	bf00      	nop
 800e740:	2000118c 	.word	0x2000118c

0800e744 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e744:	b580      	push	{r7, lr}
 800e746:	b082      	sub	sp, #8
 800e748:	af00      	add	r7, sp, #0
 800e74a:	6078      	str	r0, [r7, #4]
 800e74c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e74e:	683b      	ldr	r3, [r7, #0]
 800e750:	88db      	ldrh	r3, [r3, #6]
 800e752:	2b01      	cmp	r3, #1
 800e754:	d004      	beq.n	800e760 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e756:	6839      	ldr	r1, [r7, #0]
 800e758:	6878      	ldr	r0, [r7, #4]
 800e75a:	f000 f8e2 	bl	800e922 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800e75e:	e023      	b.n	800e7a8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e766:	b2db      	uxtb	r3, r3
 800e768:	2b02      	cmp	r3, #2
 800e76a:	dc02      	bgt.n	800e772 <USBD_GetConfig+0x2e>
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	dc03      	bgt.n	800e778 <USBD_GetConfig+0x34>
 800e770:	e015      	b.n	800e79e <USBD_GetConfig+0x5a>
 800e772:	2b03      	cmp	r3, #3
 800e774:	d00b      	beq.n	800e78e <USBD_GetConfig+0x4a>
 800e776:	e012      	b.n	800e79e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	2200      	movs	r2, #0
 800e77c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	3308      	adds	r3, #8
 800e782:	2201      	movs	r2, #1
 800e784:	4619      	mov	r1, r3
 800e786:	6878      	ldr	r0, [r7, #4]
 800e788:	f000 f948 	bl	800ea1c <USBD_CtlSendData>
        break;
 800e78c:	e00c      	b.n	800e7a8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	3304      	adds	r3, #4
 800e792:	2201      	movs	r2, #1
 800e794:	4619      	mov	r1, r3
 800e796:	6878      	ldr	r0, [r7, #4]
 800e798:	f000 f940 	bl	800ea1c <USBD_CtlSendData>
        break;
 800e79c:	e004      	b.n	800e7a8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800e79e:	6839      	ldr	r1, [r7, #0]
 800e7a0:	6878      	ldr	r0, [r7, #4]
 800e7a2:	f000 f8be 	bl	800e922 <USBD_CtlError>
        break;
 800e7a6:	bf00      	nop
}
 800e7a8:	bf00      	nop
 800e7aa:	3708      	adds	r7, #8
 800e7ac:	46bd      	mov	sp, r7
 800e7ae:	bd80      	pop	{r7, pc}

0800e7b0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e7b0:	b580      	push	{r7, lr}
 800e7b2:	b082      	sub	sp, #8
 800e7b4:	af00      	add	r7, sp, #0
 800e7b6:	6078      	str	r0, [r7, #4]
 800e7b8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e7c0:	b2db      	uxtb	r3, r3
 800e7c2:	3b01      	subs	r3, #1
 800e7c4:	2b02      	cmp	r3, #2
 800e7c6:	d81e      	bhi.n	800e806 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800e7c8:	683b      	ldr	r3, [r7, #0]
 800e7ca:	88db      	ldrh	r3, [r3, #6]
 800e7cc:	2b02      	cmp	r3, #2
 800e7ce:	d004      	beq.n	800e7da <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800e7d0:	6839      	ldr	r1, [r7, #0]
 800e7d2:	6878      	ldr	r0, [r7, #4]
 800e7d4:	f000 f8a5 	bl	800e922 <USBD_CtlError>
        break;
 800e7d8:	e01a      	b.n	800e810 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	2201      	movs	r2, #1
 800e7de:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d005      	beq.n	800e7f6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	68db      	ldr	r3, [r3, #12]
 800e7ee:	f043 0202 	orr.w	r2, r3, #2
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	330c      	adds	r3, #12
 800e7fa:	2202      	movs	r2, #2
 800e7fc:	4619      	mov	r1, r3
 800e7fe:	6878      	ldr	r0, [r7, #4]
 800e800:	f000 f90c 	bl	800ea1c <USBD_CtlSendData>
      break;
 800e804:	e004      	b.n	800e810 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800e806:	6839      	ldr	r1, [r7, #0]
 800e808:	6878      	ldr	r0, [r7, #4]
 800e80a:	f000 f88a 	bl	800e922 <USBD_CtlError>
      break;
 800e80e:	bf00      	nop
  }
}
 800e810:	bf00      	nop
 800e812:	3708      	adds	r7, #8
 800e814:	46bd      	mov	sp, r7
 800e816:	bd80      	pop	{r7, pc}

0800e818 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e818:	b580      	push	{r7, lr}
 800e81a:	b082      	sub	sp, #8
 800e81c:	af00      	add	r7, sp, #0
 800e81e:	6078      	str	r0, [r7, #4]
 800e820:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e822:	683b      	ldr	r3, [r7, #0]
 800e824:	885b      	ldrh	r3, [r3, #2]
 800e826:	2b01      	cmp	r3, #1
 800e828:	d107      	bne.n	800e83a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	2201      	movs	r2, #1
 800e82e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800e832:	6878      	ldr	r0, [r7, #4]
 800e834:	f000 f94c 	bl	800ead0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800e838:	e013      	b.n	800e862 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800e83a:	683b      	ldr	r3, [r7, #0]
 800e83c:	885b      	ldrh	r3, [r3, #2]
 800e83e:	2b02      	cmp	r3, #2
 800e840:	d10b      	bne.n	800e85a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800e842:	683b      	ldr	r3, [r7, #0]
 800e844:	889b      	ldrh	r3, [r3, #4]
 800e846:	0a1b      	lsrs	r3, r3, #8
 800e848:	b29b      	uxth	r3, r3
 800e84a:	b2da      	uxtb	r2, r3
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800e852:	6878      	ldr	r0, [r7, #4]
 800e854:	f000 f93c 	bl	800ead0 <USBD_CtlSendStatus>
}
 800e858:	e003      	b.n	800e862 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800e85a:	6839      	ldr	r1, [r7, #0]
 800e85c:	6878      	ldr	r0, [r7, #4]
 800e85e:	f000 f860 	bl	800e922 <USBD_CtlError>
}
 800e862:	bf00      	nop
 800e864:	3708      	adds	r7, #8
 800e866:	46bd      	mov	sp, r7
 800e868:	bd80      	pop	{r7, pc}

0800e86a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e86a:	b580      	push	{r7, lr}
 800e86c:	b082      	sub	sp, #8
 800e86e:	af00      	add	r7, sp, #0
 800e870:	6078      	str	r0, [r7, #4]
 800e872:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e87a:	b2db      	uxtb	r3, r3
 800e87c:	3b01      	subs	r3, #1
 800e87e:	2b02      	cmp	r3, #2
 800e880:	d80b      	bhi.n	800e89a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e882:	683b      	ldr	r3, [r7, #0]
 800e884:	885b      	ldrh	r3, [r3, #2]
 800e886:	2b01      	cmp	r3, #1
 800e888:	d10c      	bne.n	800e8a4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	2200      	movs	r2, #0
 800e88e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800e892:	6878      	ldr	r0, [r7, #4]
 800e894:	f000 f91c 	bl	800ead0 <USBD_CtlSendStatus>
      }
      break;
 800e898:	e004      	b.n	800e8a4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800e89a:	6839      	ldr	r1, [r7, #0]
 800e89c:	6878      	ldr	r0, [r7, #4]
 800e89e:	f000 f840 	bl	800e922 <USBD_CtlError>
      break;
 800e8a2:	e000      	b.n	800e8a6 <USBD_ClrFeature+0x3c>
      break;
 800e8a4:	bf00      	nop
  }
}
 800e8a6:	bf00      	nop
 800e8a8:	3708      	adds	r7, #8
 800e8aa:	46bd      	mov	sp, r7
 800e8ac:	bd80      	pop	{r7, pc}

0800e8ae <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e8ae:	b580      	push	{r7, lr}
 800e8b0:	b084      	sub	sp, #16
 800e8b2:	af00      	add	r7, sp, #0
 800e8b4:	6078      	str	r0, [r7, #4]
 800e8b6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800e8b8:	683b      	ldr	r3, [r7, #0]
 800e8ba:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	781a      	ldrb	r2, [r3, #0]
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	3301      	adds	r3, #1
 800e8c8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	781a      	ldrb	r2, [r3, #0]
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	3301      	adds	r3, #1
 800e8d6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800e8d8:	68f8      	ldr	r0, [r7, #12]
 800e8da:	f7ff fa40 	bl	800dd5e <SWAPBYTE>
 800e8de:	4603      	mov	r3, r0
 800e8e0:	461a      	mov	r2, r3
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	3301      	adds	r3, #1
 800e8ea:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	3301      	adds	r3, #1
 800e8f0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800e8f2:	68f8      	ldr	r0, [r7, #12]
 800e8f4:	f7ff fa33 	bl	800dd5e <SWAPBYTE>
 800e8f8:	4603      	mov	r3, r0
 800e8fa:	461a      	mov	r2, r3
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	3301      	adds	r3, #1
 800e904:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	3301      	adds	r3, #1
 800e90a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800e90c:	68f8      	ldr	r0, [r7, #12]
 800e90e:	f7ff fa26 	bl	800dd5e <SWAPBYTE>
 800e912:	4603      	mov	r3, r0
 800e914:	461a      	mov	r2, r3
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	80da      	strh	r2, [r3, #6]
}
 800e91a:	bf00      	nop
 800e91c:	3710      	adds	r7, #16
 800e91e:	46bd      	mov	sp, r7
 800e920:	bd80      	pop	{r7, pc}

0800e922 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e922:	b580      	push	{r7, lr}
 800e924:	b082      	sub	sp, #8
 800e926:	af00      	add	r7, sp, #0
 800e928:	6078      	str	r0, [r7, #4]
 800e92a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e92c:	2180      	movs	r1, #128	@ 0x80
 800e92e:	6878      	ldr	r0, [r7, #4]
 800e930:	f000 fd4e 	bl	800f3d0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e934:	2100      	movs	r1, #0
 800e936:	6878      	ldr	r0, [r7, #4]
 800e938:	f000 fd4a 	bl	800f3d0 <USBD_LL_StallEP>
}
 800e93c:	bf00      	nop
 800e93e:	3708      	adds	r7, #8
 800e940:	46bd      	mov	sp, r7
 800e942:	bd80      	pop	{r7, pc}

0800e944 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e944:	b580      	push	{r7, lr}
 800e946:	b086      	sub	sp, #24
 800e948:	af00      	add	r7, sp, #0
 800e94a:	60f8      	str	r0, [r7, #12]
 800e94c:	60b9      	str	r1, [r7, #8]
 800e94e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e950:	2300      	movs	r3, #0
 800e952:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	2b00      	cmp	r3, #0
 800e958:	d042      	beq.n	800e9e0 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800e95e:	6938      	ldr	r0, [r7, #16]
 800e960:	f000 f842 	bl	800e9e8 <USBD_GetLen>
 800e964:	4603      	mov	r3, r0
 800e966:	3301      	adds	r3, #1
 800e968:	005b      	lsls	r3, r3, #1
 800e96a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e96e:	d808      	bhi.n	800e982 <USBD_GetString+0x3e>
 800e970:	6938      	ldr	r0, [r7, #16]
 800e972:	f000 f839 	bl	800e9e8 <USBD_GetLen>
 800e976:	4603      	mov	r3, r0
 800e978:	3301      	adds	r3, #1
 800e97a:	b29b      	uxth	r3, r3
 800e97c:	005b      	lsls	r3, r3, #1
 800e97e:	b29a      	uxth	r2, r3
 800e980:	e001      	b.n	800e986 <USBD_GetString+0x42>
 800e982:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800e98a:	7dfb      	ldrb	r3, [r7, #23]
 800e98c:	68ba      	ldr	r2, [r7, #8]
 800e98e:	4413      	add	r3, r2
 800e990:	687a      	ldr	r2, [r7, #4]
 800e992:	7812      	ldrb	r2, [r2, #0]
 800e994:	701a      	strb	r2, [r3, #0]
  idx++;
 800e996:	7dfb      	ldrb	r3, [r7, #23]
 800e998:	3301      	adds	r3, #1
 800e99a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800e99c:	7dfb      	ldrb	r3, [r7, #23]
 800e99e:	68ba      	ldr	r2, [r7, #8]
 800e9a0:	4413      	add	r3, r2
 800e9a2:	2203      	movs	r2, #3
 800e9a4:	701a      	strb	r2, [r3, #0]
  idx++;
 800e9a6:	7dfb      	ldrb	r3, [r7, #23]
 800e9a8:	3301      	adds	r3, #1
 800e9aa:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800e9ac:	e013      	b.n	800e9d6 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800e9ae:	7dfb      	ldrb	r3, [r7, #23]
 800e9b0:	68ba      	ldr	r2, [r7, #8]
 800e9b2:	4413      	add	r3, r2
 800e9b4:	693a      	ldr	r2, [r7, #16]
 800e9b6:	7812      	ldrb	r2, [r2, #0]
 800e9b8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800e9ba:	693b      	ldr	r3, [r7, #16]
 800e9bc:	3301      	adds	r3, #1
 800e9be:	613b      	str	r3, [r7, #16]
    idx++;
 800e9c0:	7dfb      	ldrb	r3, [r7, #23]
 800e9c2:	3301      	adds	r3, #1
 800e9c4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800e9c6:	7dfb      	ldrb	r3, [r7, #23]
 800e9c8:	68ba      	ldr	r2, [r7, #8]
 800e9ca:	4413      	add	r3, r2
 800e9cc:	2200      	movs	r2, #0
 800e9ce:	701a      	strb	r2, [r3, #0]
    idx++;
 800e9d0:	7dfb      	ldrb	r3, [r7, #23]
 800e9d2:	3301      	adds	r3, #1
 800e9d4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800e9d6:	693b      	ldr	r3, [r7, #16]
 800e9d8:	781b      	ldrb	r3, [r3, #0]
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d1e7      	bne.n	800e9ae <USBD_GetString+0x6a>
 800e9de:	e000      	b.n	800e9e2 <USBD_GetString+0x9e>
    return;
 800e9e0:	bf00      	nop
  }
}
 800e9e2:	3718      	adds	r7, #24
 800e9e4:	46bd      	mov	sp, r7
 800e9e6:	bd80      	pop	{r7, pc}

0800e9e8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e9e8:	b480      	push	{r7}
 800e9ea:	b085      	sub	sp, #20
 800e9ec:	af00      	add	r7, sp, #0
 800e9ee:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800e9f0:	2300      	movs	r3, #0
 800e9f2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800e9f8:	e005      	b.n	800ea06 <USBD_GetLen+0x1e>
  {
    len++;
 800e9fa:	7bfb      	ldrb	r3, [r7, #15]
 800e9fc:	3301      	adds	r3, #1
 800e9fe:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ea00:	68bb      	ldr	r3, [r7, #8]
 800ea02:	3301      	adds	r3, #1
 800ea04:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ea06:	68bb      	ldr	r3, [r7, #8]
 800ea08:	781b      	ldrb	r3, [r3, #0]
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d1f5      	bne.n	800e9fa <USBD_GetLen+0x12>
  }

  return len;
 800ea0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea10:	4618      	mov	r0, r3
 800ea12:	3714      	adds	r7, #20
 800ea14:	46bd      	mov	sp, r7
 800ea16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea1a:	4770      	bx	lr

0800ea1c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ea1c:	b580      	push	{r7, lr}
 800ea1e:	b084      	sub	sp, #16
 800ea20:	af00      	add	r7, sp, #0
 800ea22:	60f8      	str	r0, [r7, #12]
 800ea24:	60b9      	str	r1, [r7, #8]
 800ea26:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	2202      	movs	r2, #2
 800ea2c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	687a      	ldr	r2, [r7, #4]
 800ea34:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ea36:	68fb      	ldr	r3, [r7, #12]
 800ea38:	687a      	ldr	r2, [r7, #4]
 800ea3a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	68ba      	ldr	r2, [r7, #8]
 800ea40:	2100      	movs	r1, #0
 800ea42:	68f8      	ldr	r0, [r7, #12]
 800ea44:	f000 fd4d 	bl	800f4e2 <USBD_LL_Transmit>

  return USBD_OK;
 800ea48:	2300      	movs	r3, #0
}
 800ea4a:	4618      	mov	r0, r3
 800ea4c:	3710      	adds	r7, #16
 800ea4e:	46bd      	mov	sp, r7
 800ea50:	bd80      	pop	{r7, pc}

0800ea52 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ea52:	b580      	push	{r7, lr}
 800ea54:	b084      	sub	sp, #16
 800ea56:	af00      	add	r7, sp, #0
 800ea58:	60f8      	str	r0, [r7, #12]
 800ea5a:	60b9      	str	r1, [r7, #8]
 800ea5c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	68ba      	ldr	r2, [r7, #8]
 800ea62:	2100      	movs	r1, #0
 800ea64:	68f8      	ldr	r0, [r7, #12]
 800ea66:	f000 fd3c 	bl	800f4e2 <USBD_LL_Transmit>

  return USBD_OK;
 800ea6a:	2300      	movs	r3, #0
}
 800ea6c:	4618      	mov	r0, r3
 800ea6e:	3710      	adds	r7, #16
 800ea70:	46bd      	mov	sp, r7
 800ea72:	bd80      	pop	{r7, pc}

0800ea74 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ea74:	b580      	push	{r7, lr}
 800ea76:	b084      	sub	sp, #16
 800ea78:	af00      	add	r7, sp, #0
 800ea7a:	60f8      	str	r0, [r7, #12]
 800ea7c:	60b9      	str	r1, [r7, #8]
 800ea7e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	2203      	movs	r2, #3
 800ea84:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	687a      	ldr	r2, [r7, #4]
 800ea8c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	687a      	ldr	r2, [r7, #4]
 800ea94:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	68ba      	ldr	r2, [r7, #8]
 800ea9c:	2100      	movs	r1, #0
 800ea9e:	68f8      	ldr	r0, [r7, #12]
 800eaa0:	f000 fd40 	bl	800f524 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800eaa4:	2300      	movs	r3, #0
}
 800eaa6:	4618      	mov	r0, r3
 800eaa8:	3710      	adds	r7, #16
 800eaaa:	46bd      	mov	sp, r7
 800eaac:	bd80      	pop	{r7, pc}

0800eaae <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800eaae:	b580      	push	{r7, lr}
 800eab0:	b084      	sub	sp, #16
 800eab2:	af00      	add	r7, sp, #0
 800eab4:	60f8      	str	r0, [r7, #12]
 800eab6:	60b9      	str	r1, [r7, #8]
 800eab8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	68ba      	ldr	r2, [r7, #8]
 800eabe:	2100      	movs	r1, #0
 800eac0:	68f8      	ldr	r0, [r7, #12]
 800eac2:	f000 fd2f 	bl	800f524 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800eac6:	2300      	movs	r3, #0
}
 800eac8:	4618      	mov	r0, r3
 800eaca:	3710      	adds	r7, #16
 800eacc:	46bd      	mov	sp, r7
 800eace:	bd80      	pop	{r7, pc}

0800ead0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ead0:	b580      	push	{r7, lr}
 800ead2:	b082      	sub	sp, #8
 800ead4:	af00      	add	r7, sp, #0
 800ead6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	2204      	movs	r2, #4
 800eadc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800eae0:	2300      	movs	r3, #0
 800eae2:	2200      	movs	r2, #0
 800eae4:	2100      	movs	r1, #0
 800eae6:	6878      	ldr	r0, [r7, #4]
 800eae8:	f000 fcfb 	bl	800f4e2 <USBD_LL_Transmit>

  return USBD_OK;
 800eaec:	2300      	movs	r3, #0
}
 800eaee:	4618      	mov	r0, r3
 800eaf0:	3708      	adds	r7, #8
 800eaf2:	46bd      	mov	sp, r7
 800eaf4:	bd80      	pop	{r7, pc}

0800eaf6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800eaf6:	b580      	push	{r7, lr}
 800eaf8:	b082      	sub	sp, #8
 800eafa:	af00      	add	r7, sp, #0
 800eafc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	2205      	movs	r2, #5
 800eb02:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800eb06:	2300      	movs	r3, #0
 800eb08:	2200      	movs	r2, #0
 800eb0a:	2100      	movs	r1, #0
 800eb0c:	6878      	ldr	r0, [r7, #4]
 800eb0e:	f000 fd09 	bl	800f524 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800eb12:	2300      	movs	r3, #0
}
 800eb14:	4618      	mov	r0, r3
 800eb16:	3708      	adds	r7, #8
 800eb18:	46bd      	mov	sp, r7
 800eb1a:	bd80      	pop	{r7, pc}

0800eb1c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800eb1c:	b580      	push	{r7, lr}
 800eb1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800eb20:	2200      	movs	r2, #0
 800eb22:	4912      	ldr	r1, [pc, #72]	@ (800eb6c <MX_USB_DEVICE_Init+0x50>)
 800eb24:	4812      	ldr	r0, [pc, #72]	@ (800eb70 <MX_USB_DEVICE_Init+0x54>)
 800eb26:	f7fe fcf7 	bl	800d518 <USBD_Init>
 800eb2a:	4603      	mov	r3, r0
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d001      	beq.n	800eb34 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800eb30:	f7f4 fb10 	bl	8003154 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800eb34:	490f      	ldr	r1, [pc, #60]	@ (800eb74 <MX_USB_DEVICE_Init+0x58>)
 800eb36:	480e      	ldr	r0, [pc, #56]	@ (800eb70 <MX_USB_DEVICE_Init+0x54>)
 800eb38:	f7fe fd1e 	bl	800d578 <USBD_RegisterClass>
 800eb3c:	4603      	mov	r3, r0
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d001      	beq.n	800eb46 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800eb42:	f7f4 fb07 	bl	8003154 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800eb46:	490c      	ldr	r1, [pc, #48]	@ (800eb78 <MX_USB_DEVICE_Init+0x5c>)
 800eb48:	4809      	ldr	r0, [pc, #36]	@ (800eb70 <MX_USB_DEVICE_Init+0x54>)
 800eb4a:	f7fe fc15 	bl	800d378 <USBD_CDC_RegisterInterface>
 800eb4e:	4603      	mov	r3, r0
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d001      	beq.n	800eb58 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800eb54:	f7f4 fafe 	bl	8003154 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800eb58:	4805      	ldr	r0, [pc, #20]	@ (800eb70 <MX_USB_DEVICE_Init+0x54>)
 800eb5a:	f7fe fd43 	bl	800d5e4 <USBD_Start>
 800eb5e:	4603      	mov	r3, r0
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d001      	beq.n	800eb68 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800eb64:	f7f4 faf6 	bl	8003154 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800eb68:	bf00      	nop
 800eb6a:	bd80      	pop	{r7, pc}
 800eb6c:	200000c0 	.word	0x200000c0
 800eb70:	20001190 	.word	0x20001190
 800eb74:	20000024 	.word	0x20000024
 800eb78:	200000ac 	.word	0x200000ac

0800eb7c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800eb7c:	b580      	push	{r7, lr}
 800eb7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800eb80:	2200      	movs	r2, #0
 800eb82:	4905      	ldr	r1, [pc, #20]	@ (800eb98 <CDC_Init_FS+0x1c>)
 800eb84:	4805      	ldr	r0, [pc, #20]	@ (800eb9c <CDC_Init_FS+0x20>)
 800eb86:	f7fe fc11 	bl	800d3ac <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800eb8a:	4905      	ldr	r1, [pc, #20]	@ (800eba0 <CDC_Init_FS+0x24>)
 800eb8c:	4803      	ldr	r0, [pc, #12]	@ (800eb9c <CDC_Init_FS+0x20>)
 800eb8e:	f7fe fc2f 	bl	800d3f0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800eb92:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800eb94:	4618      	mov	r0, r3
 800eb96:	bd80      	pop	{r7, pc}
 800eb98:	2000166c 	.word	0x2000166c
 800eb9c:	20001190 	.word	0x20001190
 800eba0:	2000146c 	.word	0x2000146c

0800eba4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800eba4:	b480      	push	{r7}
 800eba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800eba8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ebaa:	4618      	mov	r0, r3
 800ebac:	46bd      	mov	sp, r7
 800ebae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebb2:	4770      	bx	lr

0800ebb4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ebb4:	b480      	push	{r7}
 800ebb6:	b083      	sub	sp, #12
 800ebb8:	af00      	add	r7, sp, #0
 800ebba:	4603      	mov	r3, r0
 800ebbc:	6039      	str	r1, [r7, #0]
 800ebbe:	71fb      	strb	r3, [r7, #7]
 800ebc0:	4613      	mov	r3, r2
 800ebc2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ebc4:	79fb      	ldrb	r3, [r7, #7]
 800ebc6:	2b23      	cmp	r3, #35	@ 0x23
 800ebc8:	f200 8097 	bhi.w	800ecfa <CDC_Control_FS+0x146>
 800ebcc:	a201      	add	r2, pc, #4	@ (adr r2, 800ebd4 <CDC_Control_FS+0x20>)
 800ebce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebd2:	bf00      	nop
 800ebd4:	0800ecfb 	.word	0x0800ecfb
 800ebd8:	0800ecfb 	.word	0x0800ecfb
 800ebdc:	0800ecfb 	.word	0x0800ecfb
 800ebe0:	0800ecfb 	.word	0x0800ecfb
 800ebe4:	0800ecfb 	.word	0x0800ecfb
 800ebe8:	0800ecfb 	.word	0x0800ecfb
 800ebec:	0800ecfb 	.word	0x0800ecfb
 800ebf0:	0800ecfb 	.word	0x0800ecfb
 800ebf4:	0800ecfb 	.word	0x0800ecfb
 800ebf8:	0800ecfb 	.word	0x0800ecfb
 800ebfc:	0800ecfb 	.word	0x0800ecfb
 800ec00:	0800ecfb 	.word	0x0800ecfb
 800ec04:	0800ecfb 	.word	0x0800ecfb
 800ec08:	0800ecfb 	.word	0x0800ecfb
 800ec0c:	0800ecfb 	.word	0x0800ecfb
 800ec10:	0800ecfb 	.word	0x0800ecfb
 800ec14:	0800ecfb 	.word	0x0800ecfb
 800ec18:	0800ecfb 	.word	0x0800ecfb
 800ec1c:	0800ecfb 	.word	0x0800ecfb
 800ec20:	0800ecfb 	.word	0x0800ecfb
 800ec24:	0800ecfb 	.word	0x0800ecfb
 800ec28:	0800ecfb 	.word	0x0800ecfb
 800ec2c:	0800ecfb 	.word	0x0800ecfb
 800ec30:	0800ecfb 	.word	0x0800ecfb
 800ec34:	0800ecfb 	.word	0x0800ecfb
 800ec38:	0800ecfb 	.word	0x0800ecfb
 800ec3c:	0800ecfb 	.word	0x0800ecfb
 800ec40:	0800ecfb 	.word	0x0800ecfb
 800ec44:	0800ecfb 	.word	0x0800ecfb
 800ec48:	0800ecfb 	.word	0x0800ecfb
 800ec4c:	0800ecfb 	.word	0x0800ecfb
 800ec50:	0800ecfb 	.word	0x0800ecfb
 800ec54:	0800ec65 	.word	0x0800ec65
 800ec58:	0800eca7 	.word	0x0800eca7
 800ec5c:	0800ecfb 	.word	0x0800ecfb
 800ec60:	0800ecfb 	.word	0x0800ecfb
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	LineCoding.bitrate = (uint32_t)(pbuf[0]) | (pbuf[1] << 8) | (pbuf[2] << 16) | (pbuf[3] << 24);
 800ec64:	683b      	ldr	r3, [r7, #0]
 800ec66:	781b      	ldrb	r3, [r3, #0]
 800ec68:	461a      	mov	r2, r3
 800ec6a:	683b      	ldr	r3, [r7, #0]
 800ec6c:	3301      	adds	r3, #1
 800ec6e:	781b      	ldrb	r3, [r3, #0]
 800ec70:	021b      	lsls	r3, r3, #8
 800ec72:	431a      	orrs	r2, r3
 800ec74:	683b      	ldr	r3, [r7, #0]
 800ec76:	3302      	adds	r3, #2
 800ec78:	781b      	ldrb	r3, [r3, #0]
 800ec7a:	041b      	lsls	r3, r3, #16
 800ec7c:	431a      	orrs	r2, r3
 800ec7e:	683b      	ldr	r3, [r7, #0]
 800ec80:	3303      	adds	r3, #3
 800ec82:	781b      	ldrb	r3, [r3, #0]
 800ec84:	061b      	lsls	r3, r3, #24
 800ec86:	4313      	orrs	r3, r2
 800ec88:	4a20      	ldr	r2, [pc, #128]	@ (800ed0c <CDC_Control_FS+0x158>)
 800ec8a:	6013      	str	r3, [r2, #0]
		LineCoding.format = pbuf[4];
 800ec8c:	683b      	ldr	r3, [r7, #0]
 800ec8e:	791a      	ldrb	r2, [r3, #4]
 800ec90:	4b1e      	ldr	r3, [pc, #120]	@ (800ed0c <CDC_Control_FS+0x158>)
 800ec92:	711a      	strb	r2, [r3, #4]
		LineCoding.paritytype = pbuf[5];
 800ec94:	683b      	ldr	r3, [r7, #0]
 800ec96:	795a      	ldrb	r2, [r3, #5]
 800ec98:	4b1c      	ldr	r3, [pc, #112]	@ (800ed0c <CDC_Control_FS+0x158>)
 800ec9a:	715a      	strb	r2, [r3, #5]
		LineCoding.datatype = pbuf[6];
 800ec9c:	683b      	ldr	r3, [r7, #0]
 800ec9e:	799a      	ldrb	r2, [r3, #6]
 800eca0:	4b1a      	ldr	r3, [pc, #104]	@ (800ed0c <CDC_Control_FS+0x158>)
 800eca2:	719a      	strb	r2, [r3, #6]
    break;
 800eca4:	e02a      	b.n	800ecfc <CDC_Control_FS+0x148>

    case CDC_GET_LINE_CODING:
    	pbuf[0] = (uint8_t)(LineCoding.bitrate);
 800eca6:	4b19      	ldr	r3, [pc, #100]	@ (800ed0c <CDC_Control_FS+0x158>)
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	b2da      	uxtb	r2, r3
 800ecac:	683b      	ldr	r3, [r7, #0]
 800ecae:	701a      	strb	r2, [r3, #0]
    	pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 800ecb0:	4b16      	ldr	r3, [pc, #88]	@ (800ed0c <CDC_Control_FS+0x158>)
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	0a1a      	lsrs	r2, r3, #8
 800ecb6:	683b      	ldr	r3, [r7, #0]
 800ecb8:	3301      	adds	r3, #1
 800ecba:	b2d2      	uxtb	r2, r2
 800ecbc:	701a      	strb	r2, [r3, #0]
    	pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 800ecbe:	4b13      	ldr	r3, [pc, #76]	@ (800ed0c <CDC_Control_FS+0x158>)
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	0c1a      	lsrs	r2, r3, #16
 800ecc4:	683b      	ldr	r3, [r7, #0]
 800ecc6:	3302      	adds	r3, #2
 800ecc8:	b2d2      	uxtb	r2, r2
 800ecca:	701a      	strb	r2, [r3, #0]
    	pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 800eccc:	4b0f      	ldr	r3, [pc, #60]	@ (800ed0c <CDC_Control_FS+0x158>)
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	0e1a      	lsrs	r2, r3, #24
 800ecd2:	683b      	ldr	r3, [r7, #0]
 800ecd4:	3303      	adds	r3, #3
 800ecd6:	b2d2      	uxtb	r2, r2
 800ecd8:	701a      	strb	r2, [r3, #0]
    	pbuf[4] = LineCoding.format;
 800ecda:	683b      	ldr	r3, [r7, #0]
 800ecdc:	3304      	adds	r3, #4
 800ecde:	4a0b      	ldr	r2, [pc, #44]	@ (800ed0c <CDC_Control_FS+0x158>)
 800ece0:	7912      	ldrb	r2, [r2, #4]
 800ece2:	701a      	strb	r2, [r3, #0]
    	pbuf[5] = LineCoding.paritytype;
 800ece4:	683b      	ldr	r3, [r7, #0]
 800ece6:	3305      	adds	r3, #5
 800ece8:	4a08      	ldr	r2, [pc, #32]	@ (800ed0c <CDC_Control_FS+0x158>)
 800ecea:	7952      	ldrb	r2, [r2, #5]
 800ecec:	701a      	strb	r2, [r3, #0]
    	pbuf[6] = LineCoding.datatype;
 800ecee:	683b      	ldr	r3, [r7, #0]
 800ecf0:	3306      	adds	r3, #6
 800ecf2:	4a06      	ldr	r2, [pc, #24]	@ (800ed0c <CDC_Control_FS+0x158>)
 800ecf4:	7992      	ldrb	r2, [r2, #6]
 800ecf6:	701a      	strb	r2, [r3, #0]
	break;
 800ecf8:	e000      	b.n	800ecfc <CDC_Control_FS+0x148>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ecfa:	bf00      	nop
  }

  return (USBD_OK);
 800ecfc:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ecfe:	4618      	mov	r0, r3
 800ed00:	370c      	adds	r7, #12
 800ed02:	46bd      	mov	sp, r7
 800ed04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed08:	4770      	bx	lr
 800ed0a:	bf00      	nop
 800ed0c:	200000a4 	.word	0x200000a4

0800ed10 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ed10:	b580      	push	{r7, lr}
 800ed12:	b082      	sub	sp, #8
 800ed14:	af00      	add	r7, sp, #0
 800ed16:	6078      	str	r0, [r7, #4]
 800ed18:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	if(dataOnRx != NULL){
 800ed1a:	4b0b      	ldr	r3, [pc, #44]	@ (800ed48 <CDC_Receive_FS+0x38>)
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d006      	beq.n	800ed30 <CDC_Receive_FS+0x20>
		dataOnRx(Buf, *Len);
 800ed22:	4b09      	ldr	r3, [pc, #36]	@ (800ed48 <CDC_Receive_FS+0x38>)
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	683a      	ldr	r2, [r7, #0]
 800ed28:	6812      	ldr	r2, [r2, #0]
 800ed2a:	4611      	mov	r1, r2
 800ed2c:	6878      	ldr	r0, [r7, #4]
 800ed2e:	4798      	blx	r3
	}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ed30:	6879      	ldr	r1, [r7, #4]
 800ed32:	4806      	ldr	r0, [pc, #24]	@ (800ed4c <CDC_Receive_FS+0x3c>)
 800ed34:	f7fe fb5c 	bl	800d3f0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ed38:	4804      	ldr	r0, [pc, #16]	@ (800ed4c <CDC_Receive_FS+0x3c>)
 800ed3a:	f7fe fbb7 	bl	800d4ac <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800ed3e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ed40:	4618      	mov	r0, r3
 800ed42:	3708      	adds	r7, #8
 800ed44:	46bd      	mov	sp, r7
 800ed46:	bd80      	pop	{r7, pc}
 800ed48:	2000186c 	.word	0x2000186c
 800ed4c:	20001190 	.word	0x20001190

0800ed50 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800ed50:	b580      	push	{r7, lr}
 800ed52:	b084      	sub	sp, #16
 800ed54:	af00      	add	r7, sp, #0
 800ed56:	6078      	str	r0, [r7, #4]
 800ed58:	460b      	mov	r3, r1
 800ed5a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800ed5c:	2300      	movs	r3, #0
 800ed5e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800ed60:	4b0d      	ldr	r3, [pc, #52]	@ (800ed98 <CDC_Transmit_FS+0x48>)
 800ed62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ed66:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800ed68:	68bb      	ldr	r3, [r7, #8]
 800ed6a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d001      	beq.n	800ed76 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800ed72:	2301      	movs	r3, #1
 800ed74:	e00b      	b.n	800ed8e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ed76:	887b      	ldrh	r3, [r7, #2]
 800ed78:	461a      	mov	r2, r3
 800ed7a:	6879      	ldr	r1, [r7, #4]
 800ed7c:	4806      	ldr	r0, [pc, #24]	@ (800ed98 <CDC_Transmit_FS+0x48>)
 800ed7e:	f7fe fb15 	bl	800d3ac <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ed82:	4805      	ldr	r0, [pc, #20]	@ (800ed98 <CDC_Transmit_FS+0x48>)
 800ed84:	f7fe fb52 	bl	800d42c <USBD_CDC_TransmitPacket>
 800ed88:	4603      	mov	r3, r0
 800ed8a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800ed8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed8e:	4618      	mov	r0, r3
 800ed90:	3710      	adds	r7, #16
 800ed92:	46bd      	mov	sp, r7
 800ed94:	bd80      	pop	{r7, pc}
 800ed96:	bf00      	nop
 800ed98:	20001190 	.word	0x20001190

0800ed9c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800ed9c:	b480      	push	{r7}
 800ed9e:	b087      	sub	sp, #28
 800eda0:	af00      	add	r7, sp, #0
 800eda2:	60f8      	str	r0, [r7, #12]
 800eda4:	60b9      	str	r1, [r7, #8]
 800eda6:	4613      	mov	r3, r2
 800eda8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800edaa:	2300      	movs	r3, #0
 800edac:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800edae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800edb2:	4618      	mov	r0, r3
 800edb4:	371c      	adds	r7, #28
 800edb6:	46bd      	mov	sp, r7
 800edb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edbc:	4770      	bx	lr
	...

0800edc0 <CDC_Attach_Rx>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void CDC_Attach_Rx(void (*RxData)(uint8_t* buf, uint32_t len)){
 800edc0:	b480      	push	{r7}
 800edc2:	b083      	sub	sp, #12
 800edc4:	af00      	add	r7, sp, #0
 800edc6:	6078      	str	r0, [r7, #4]
	dataOnRx = RxData;
 800edc8:	4a04      	ldr	r2, [pc, #16]	@ (800eddc <CDC_Attach_Rx+0x1c>)
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	6013      	str	r3, [r2, #0]
}
 800edce:	bf00      	nop
 800edd0:	370c      	adds	r7, #12
 800edd2:	46bd      	mov	sp, r7
 800edd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edd8:	4770      	bx	lr
 800edda:	bf00      	nop
 800eddc:	2000186c 	.word	0x2000186c

0800ede0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ede0:	b480      	push	{r7}
 800ede2:	b083      	sub	sp, #12
 800ede4:	af00      	add	r7, sp, #0
 800ede6:	4603      	mov	r3, r0
 800ede8:	6039      	str	r1, [r7, #0]
 800edea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800edec:	683b      	ldr	r3, [r7, #0]
 800edee:	2212      	movs	r2, #18
 800edf0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800edf2:	4b03      	ldr	r3, [pc, #12]	@ (800ee00 <USBD_FS_DeviceDescriptor+0x20>)
}
 800edf4:	4618      	mov	r0, r3
 800edf6:	370c      	adds	r7, #12
 800edf8:	46bd      	mov	sp, r7
 800edfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edfe:	4770      	bx	lr
 800ee00:	200000dc 	.word	0x200000dc

0800ee04 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ee04:	b480      	push	{r7}
 800ee06:	b083      	sub	sp, #12
 800ee08:	af00      	add	r7, sp, #0
 800ee0a:	4603      	mov	r3, r0
 800ee0c:	6039      	str	r1, [r7, #0]
 800ee0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ee10:	683b      	ldr	r3, [r7, #0]
 800ee12:	2204      	movs	r2, #4
 800ee14:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ee16:	4b03      	ldr	r3, [pc, #12]	@ (800ee24 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ee18:	4618      	mov	r0, r3
 800ee1a:	370c      	adds	r7, #12
 800ee1c:	46bd      	mov	sp, r7
 800ee1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee22:	4770      	bx	lr
 800ee24:	200000f0 	.word	0x200000f0

0800ee28 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ee28:	b580      	push	{r7, lr}
 800ee2a:	b082      	sub	sp, #8
 800ee2c:	af00      	add	r7, sp, #0
 800ee2e:	4603      	mov	r3, r0
 800ee30:	6039      	str	r1, [r7, #0]
 800ee32:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ee34:	79fb      	ldrb	r3, [r7, #7]
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d105      	bne.n	800ee46 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ee3a:	683a      	ldr	r2, [r7, #0]
 800ee3c:	4907      	ldr	r1, [pc, #28]	@ (800ee5c <USBD_FS_ProductStrDescriptor+0x34>)
 800ee3e:	4808      	ldr	r0, [pc, #32]	@ (800ee60 <USBD_FS_ProductStrDescriptor+0x38>)
 800ee40:	f7ff fd80 	bl	800e944 <USBD_GetString>
 800ee44:	e004      	b.n	800ee50 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ee46:	683a      	ldr	r2, [r7, #0]
 800ee48:	4904      	ldr	r1, [pc, #16]	@ (800ee5c <USBD_FS_ProductStrDescriptor+0x34>)
 800ee4a:	4805      	ldr	r0, [pc, #20]	@ (800ee60 <USBD_FS_ProductStrDescriptor+0x38>)
 800ee4c:	f7ff fd7a 	bl	800e944 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ee50:	4b02      	ldr	r3, [pc, #8]	@ (800ee5c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ee52:	4618      	mov	r0, r3
 800ee54:	3708      	adds	r7, #8
 800ee56:	46bd      	mov	sp, r7
 800ee58:	bd80      	pop	{r7, pc}
 800ee5a:	bf00      	nop
 800ee5c:	20001870 	.word	0x20001870
 800ee60:	08010038 	.word	0x08010038

0800ee64 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ee64:	b580      	push	{r7, lr}
 800ee66:	b082      	sub	sp, #8
 800ee68:	af00      	add	r7, sp, #0
 800ee6a:	4603      	mov	r3, r0
 800ee6c:	6039      	str	r1, [r7, #0]
 800ee6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ee70:	683a      	ldr	r2, [r7, #0]
 800ee72:	4904      	ldr	r1, [pc, #16]	@ (800ee84 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ee74:	4804      	ldr	r0, [pc, #16]	@ (800ee88 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ee76:	f7ff fd65 	bl	800e944 <USBD_GetString>
  return USBD_StrDesc;
 800ee7a:	4b02      	ldr	r3, [pc, #8]	@ (800ee84 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ee7c:	4618      	mov	r0, r3
 800ee7e:	3708      	adds	r7, #8
 800ee80:	46bd      	mov	sp, r7
 800ee82:	bd80      	pop	{r7, pc}
 800ee84:	20001870 	.word	0x20001870
 800ee88:	08010050 	.word	0x08010050

0800ee8c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ee8c:	b580      	push	{r7, lr}
 800ee8e:	b082      	sub	sp, #8
 800ee90:	af00      	add	r7, sp, #0
 800ee92:	4603      	mov	r3, r0
 800ee94:	6039      	str	r1, [r7, #0]
 800ee96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ee98:	683b      	ldr	r3, [r7, #0]
 800ee9a:	221a      	movs	r2, #26
 800ee9c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ee9e:	f000 f843 	bl	800ef28 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800eea2:	4b02      	ldr	r3, [pc, #8]	@ (800eeac <USBD_FS_SerialStrDescriptor+0x20>)
}
 800eea4:	4618      	mov	r0, r3
 800eea6:	3708      	adds	r7, #8
 800eea8:	46bd      	mov	sp, r7
 800eeaa:	bd80      	pop	{r7, pc}
 800eeac:	200000f4 	.word	0x200000f4

0800eeb0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eeb0:	b580      	push	{r7, lr}
 800eeb2:	b082      	sub	sp, #8
 800eeb4:	af00      	add	r7, sp, #0
 800eeb6:	4603      	mov	r3, r0
 800eeb8:	6039      	str	r1, [r7, #0]
 800eeba:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800eebc:	79fb      	ldrb	r3, [r7, #7]
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d105      	bne.n	800eece <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800eec2:	683a      	ldr	r2, [r7, #0]
 800eec4:	4907      	ldr	r1, [pc, #28]	@ (800eee4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800eec6:	4808      	ldr	r0, [pc, #32]	@ (800eee8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800eec8:	f7ff fd3c 	bl	800e944 <USBD_GetString>
 800eecc:	e004      	b.n	800eed8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800eece:	683a      	ldr	r2, [r7, #0]
 800eed0:	4904      	ldr	r1, [pc, #16]	@ (800eee4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800eed2:	4805      	ldr	r0, [pc, #20]	@ (800eee8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800eed4:	f7ff fd36 	bl	800e944 <USBD_GetString>
  }
  return USBD_StrDesc;
 800eed8:	4b02      	ldr	r3, [pc, #8]	@ (800eee4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800eeda:	4618      	mov	r0, r3
 800eedc:	3708      	adds	r7, #8
 800eede:	46bd      	mov	sp, r7
 800eee0:	bd80      	pop	{r7, pc}
 800eee2:	bf00      	nop
 800eee4:	20001870 	.word	0x20001870
 800eee8:	08010064 	.word	0x08010064

0800eeec <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eeec:	b580      	push	{r7, lr}
 800eeee:	b082      	sub	sp, #8
 800eef0:	af00      	add	r7, sp, #0
 800eef2:	4603      	mov	r3, r0
 800eef4:	6039      	str	r1, [r7, #0]
 800eef6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800eef8:	79fb      	ldrb	r3, [r7, #7]
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d105      	bne.n	800ef0a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800eefe:	683a      	ldr	r2, [r7, #0]
 800ef00:	4907      	ldr	r1, [pc, #28]	@ (800ef20 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ef02:	4808      	ldr	r0, [pc, #32]	@ (800ef24 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ef04:	f7ff fd1e 	bl	800e944 <USBD_GetString>
 800ef08:	e004      	b.n	800ef14 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ef0a:	683a      	ldr	r2, [r7, #0]
 800ef0c:	4904      	ldr	r1, [pc, #16]	@ (800ef20 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ef0e:	4805      	ldr	r0, [pc, #20]	@ (800ef24 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ef10:	f7ff fd18 	bl	800e944 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ef14:	4b02      	ldr	r3, [pc, #8]	@ (800ef20 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ef16:	4618      	mov	r0, r3
 800ef18:	3708      	adds	r7, #8
 800ef1a:	46bd      	mov	sp, r7
 800ef1c:	bd80      	pop	{r7, pc}
 800ef1e:	bf00      	nop
 800ef20:	20001870 	.word	0x20001870
 800ef24:	08010070 	.word	0x08010070

0800ef28 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ef28:	b580      	push	{r7, lr}
 800ef2a:	b084      	sub	sp, #16
 800ef2c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ef2e:	4b0f      	ldr	r3, [pc, #60]	@ (800ef6c <Get_SerialNum+0x44>)
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ef34:	4b0e      	ldr	r3, [pc, #56]	@ (800ef70 <Get_SerialNum+0x48>)
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ef3a:	4b0e      	ldr	r3, [pc, #56]	@ (800ef74 <Get_SerialNum+0x4c>)
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ef40:	68fa      	ldr	r2, [r7, #12]
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	4413      	add	r3, r2
 800ef46:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d009      	beq.n	800ef62 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ef4e:	2208      	movs	r2, #8
 800ef50:	4909      	ldr	r1, [pc, #36]	@ (800ef78 <Get_SerialNum+0x50>)
 800ef52:	68f8      	ldr	r0, [r7, #12]
 800ef54:	f000 f814 	bl	800ef80 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ef58:	2204      	movs	r2, #4
 800ef5a:	4908      	ldr	r1, [pc, #32]	@ (800ef7c <Get_SerialNum+0x54>)
 800ef5c:	68b8      	ldr	r0, [r7, #8]
 800ef5e:	f000 f80f 	bl	800ef80 <IntToUnicode>
  }
}
 800ef62:	bf00      	nop
 800ef64:	3710      	adds	r7, #16
 800ef66:	46bd      	mov	sp, r7
 800ef68:	bd80      	pop	{r7, pc}
 800ef6a:	bf00      	nop
 800ef6c:	1fff7a10 	.word	0x1fff7a10
 800ef70:	1fff7a14 	.word	0x1fff7a14
 800ef74:	1fff7a18 	.word	0x1fff7a18
 800ef78:	200000f6 	.word	0x200000f6
 800ef7c:	20000106 	.word	0x20000106

0800ef80 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ef80:	b480      	push	{r7}
 800ef82:	b087      	sub	sp, #28
 800ef84:	af00      	add	r7, sp, #0
 800ef86:	60f8      	str	r0, [r7, #12]
 800ef88:	60b9      	str	r1, [r7, #8]
 800ef8a:	4613      	mov	r3, r2
 800ef8c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ef8e:	2300      	movs	r3, #0
 800ef90:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ef92:	2300      	movs	r3, #0
 800ef94:	75fb      	strb	r3, [r7, #23]
 800ef96:	e027      	b.n	800efe8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	0f1b      	lsrs	r3, r3, #28
 800ef9c:	2b09      	cmp	r3, #9
 800ef9e:	d80b      	bhi.n	800efb8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800efa0:	68fb      	ldr	r3, [r7, #12]
 800efa2:	0f1b      	lsrs	r3, r3, #28
 800efa4:	b2da      	uxtb	r2, r3
 800efa6:	7dfb      	ldrb	r3, [r7, #23]
 800efa8:	005b      	lsls	r3, r3, #1
 800efaa:	4619      	mov	r1, r3
 800efac:	68bb      	ldr	r3, [r7, #8]
 800efae:	440b      	add	r3, r1
 800efb0:	3230      	adds	r2, #48	@ 0x30
 800efb2:	b2d2      	uxtb	r2, r2
 800efb4:	701a      	strb	r2, [r3, #0]
 800efb6:	e00a      	b.n	800efce <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	0f1b      	lsrs	r3, r3, #28
 800efbc:	b2da      	uxtb	r2, r3
 800efbe:	7dfb      	ldrb	r3, [r7, #23]
 800efc0:	005b      	lsls	r3, r3, #1
 800efc2:	4619      	mov	r1, r3
 800efc4:	68bb      	ldr	r3, [r7, #8]
 800efc6:	440b      	add	r3, r1
 800efc8:	3237      	adds	r2, #55	@ 0x37
 800efca:	b2d2      	uxtb	r2, r2
 800efcc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	011b      	lsls	r3, r3, #4
 800efd2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800efd4:	7dfb      	ldrb	r3, [r7, #23]
 800efd6:	005b      	lsls	r3, r3, #1
 800efd8:	3301      	adds	r3, #1
 800efda:	68ba      	ldr	r2, [r7, #8]
 800efdc:	4413      	add	r3, r2
 800efde:	2200      	movs	r2, #0
 800efe0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800efe2:	7dfb      	ldrb	r3, [r7, #23]
 800efe4:	3301      	adds	r3, #1
 800efe6:	75fb      	strb	r3, [r7, #23]
 800efe8:	7dfa      	ldrb	r2, [r7, #23]
 800efea:	79fb      	ldrb	r3, [r7, #7]
 800efec:	429a      	cmp	r2, r3
 800efee:	d3d3      	bcc.n	800ef98 <IntToUnicode+0x18>
  }
}
 800eff0:	bf00      	nop
 800eff2:	bf00      	nop
 800eff4:	371c      	adds	r7, #28
 800eff6:	46bd      	mov	sp, r7
 800eff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800effc:	4770      	bx	lr
	...

0800f000 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800f000:	b580      	push	{r7, lr}
 800f002:	b08a      	sub	sp, #40	@ 0x28
 800f004:	af00      	add	r7, sp, #0
 800f006:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f008:	f107 0314 	add.w	r3, r7, #20
 800f00c:	2200      	movs	r2, #0
 800f00e:	601a      	str	r2, [r3, #0]
 800f010:	605a      	str	r2, [r3, #4]
 800f012:	609a      	str	r2, [r3, #8]
 800f014:	60da      	str	r2, [r3, #12]
 800f016:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800f020:	d13a      	bne.n	800f098 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f022:	2300      	movs	r3, #0
 800f024:	613b      	str	r3, [r7, #16]
 800f026:	4b1e      	ldr	r3, [pc, #120]	@ (800f0a0 <HAL_PCD_MspInit+0xa0>)
 800f028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f02a:	4a1d      	ldr	r2, [pc, #116]	@ (800f0a0 <HAL_PCD_MspInit+0xa0>)
 800f02c:	f043 0301 	orr.w	r3, r3, #1
 800f030:	6313      	str	r3, [r2, #48]	@ 0x30
 800f032:	4b1b      	ldr	r3, [pc, #108]	@ (800f0a0 <HAL_PCD_MspInit+0xa0>)
 800f034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f036:	f003 0301 	and.w	r3, r3, #1
 800f03a:	613b      	str	r3, [r7, #16]
 800f03c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800f03e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800f042:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f044:	2302      	movs	r3, #2
 800f046:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f048:	2300      	movs	r3, #0
 800f04a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f04c:	2303      	movs	r3, #3
 800f04e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f050:	230a      	movs	r3, #10
 800f052:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f054:	f107 0314 	add.w	r3, r7, #20
 800f058:	4619      	mov	r1, r3
 800f05a:	4812      	ldr	r0, [pc, #72]	@ (800f0a4 <HAL_PCD_MspInit+0xa4>)
 800f05c:	f7f5 fe0e 	bl	8004c7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f060:	4b0f      	ldr	r3, [pc, #60]	@ (800f0a0 <HAL_PCD_MspInit+0xa0>)
 800f062:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f064:	4a0e      	ldr	r2, [pc, #56]	@ (800f0a0 <HAL_PCD_MspInit+0xa0>)
 800f066:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f06a:	6353      	str	r3, [r2, #52]	@ 0x34
 800f06c:	2300      	movs	r3, #0
 800f06e:	60fb      	str	r3, [r7, #12]
 800f070:	4b0b      	ldr	r3, [pc, #44]	@ (800f0a0 <HAL_PCD_MspInit+0xa0>)
 800f072:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f074:	4a0a      	ldr	r2, [pc, #40]	@ (800f0a0 <HAL_PCD_MspInit+0xa0>)
 800f076:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800f07a:	6453      	str	r3, [r2, #68]	@ 0x44
 800f07c:	4b08      	ldr	r3, [pc, #32]	@ (800f0a0 <HAL_PCD_MspInit+0xa0>)
 800f07e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f080:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f084:	60fb      	str	r3, [r7, #12]
 800f086:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800f088:	2200      	movs	r2, #0
 800f08a:	2100      	movs	r1, #0
 800f08c:	2043      	movs	r0, #67	@ 0x43
 800f08e:	f7f5 fa12 	bl	80044b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f092:	2043      	movs	r0, #67	@ 0x43
 800f094:	f7f5 fa2b 	bl	80044ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f098:	bf00      	nop
 800f09a:	3728      	adds	r7, #40	@ 0x28
 800f09c:	46bd      	mov	sp, r7
 800f09e:	bd80      	pop	{r7, pc}
 800f0a0:	40023800 	.word	0x40023800
 800f0a4:	40020000 	.word	0x40020000

0800f0a8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f0a8:	b580      	push	{r7, lr}
 800f0aa:	b082      	sub	sp, #8
 800f0ac:	af00      	add	r7, sp, #0
 800f0ae:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800f0bc:	4619      	mov	r1, r3
 800f0be:	4610      	mov	r0, r2
 800f0c0:	f7fe fadd 	bl	800d67e <USBD_LL_SetupStage>
}
 800f0c4:	bf00      	nop
 800f0c6:	3708      	adds	r7, #8
 800f0c8:	46bd      	mov	sp, r7
 800f0ca:	bd80      	pop	{r7, pc}

0800f0cc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f0cc:	b580      	push	{r7, lr}
 800f0ce:	b082      	sub	sp, #8
 800f0d0:	af00      	add	r7, sp, #0
 800f0d2:	6078      	str	r0, [r7, #4]
 800f0d4:	460b      	mov	r3, r1
 800f0d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800f0de:	78fa      	ldrb	r2, [r7, #3]
 800f0e0:	6879      	ldr	r1, [r7, #4]
 800f0e2:	4613      	mov	r3, r2
 800f0e4:	00db      	lsls	r3, r3, #3
 800f0e6:	4413      	add	r3, r2
 800f0e8:	009b      	lsls	r3, r3, #2
 800f0ea:	440b      	add	r3, r1
 800f0ec:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800f0f0:	681a      	ldr	r2, [r3, #0]
 800f0f2:	78fb      	ldrb	r3, [r7, #3]
 800f0f4:	4619      	mov	r1, r3
 800f0f6:	f7fe fb17 	bl	800d728 <USBD_LL_DataOutStage>
}
 800f0fa:	bf00      	nop
 800f0fc:	3708      	adds	r7, #8
 800f0fe:	46bd      	mov	sp, r7
 800f100:	bd80      	pop	{r7, pc}

0800f102 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f102:	b580      	push	{r7, lr}
 800f104:	b082      	sub	sp, #8
 800f106:	af00      	add	r7, sp, #0
 800f108:	6078      	str	r0, [r7, #4]
 800f10a:	460b      	mov	r3, r1
 800f10c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800f114:	78fa      	ldrb	r2, [r7, #3]
 800f116:	6879      	ldr	r1, [r7, #4]
 800f118:	4613      	mov	r3, r2
 800f11a:	00db      	lsls	r3, r3, #3
 800f11c:	4413      	add	r3, r2
 800f11e:	009b      	lsls	r3, r3, #2
 800f120:	440b      	add	r3, r1
 800f122:	3320      	adds	r3, #32
 800f124:	681a      	ldr	r2, [r3, #0]
 800f126:	78fb      	ldrb	r3, [r7, #3]
 800f128:	4619      	mov	r1, r3
 800f12a:	f7fe fbb0 	bl	800d88e <USBD_LL_DataInStage>
}
 800f12e:	bf00      	nop
 800f130:	3708      	adds	r7, #8
 800f132:	46bd      	mov	sp, r7
 800f134:	bd80      	pop	{r7, pc}

0800f136 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f136:	b580      	push	{r7, lr}
 800f138:	b082      	sub	sp, #8
 800f13a:	af00      	add	r7, sp, #0
 800f13c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f144:	4618      	mov	r0, r3
 800f146:	f7fe fcea 	bl	800db1e <USBD_LL_SOF>
}
 800f14a:	bf00      	nop
 800f14c:	3708      	adds	r7, #8
 800f14e:	46bd      	mov	sp, r7
 800f150:	bd80      	pop	{r7, pc}

0800f152 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f152:	b580      	push	{r7, lr}
 800f154:	b084      	sub	sp, #16
 800f156:	af00      	add	r7, sp, #0
 800f158:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f15a:	2301      	movs	r3, #1
 800f15c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	79db      	ldrb	r3, [r3, #7]
 800f162:	2b02      	cmp	r3, #2
 800f164:	d001      	beq.n	800f16a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800f166:	f7f3 fff5 	bl	8003154 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f170:	7bfa      	ldrb	r2, [r7, #15]
 800f172:	4611      	mov	r1, r2
 800f174:	4618      	mov	r0, r3
 800f176:	f7fe fc8e 	bl	800da96 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f180:	4618      	mov	r0, r3
 800f182:	f7fe fc36 	bl	800d9f2 <USBD_LL_Reset>
}
 800f186:	bf00      	nop
 800f188:	3710      	adds	r7, #16
 800f18a:	46bd      	mov	sp, r7
 800f18c:	bd80      	pop	{r7, pc}
	...

0800f190 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f190:	b580      	push	{r7, lr}
 800f192:	b082      	sub	sp, #8
 800f194:	af00      	add	r7, sp, #0
 800f196:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f19e:	4618      	mov	r0, r3
 800f1a0:	f7fe fc89 	bl	800dab6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	687a      	ldr	r2, [r7, #4]
 800f1b0:	6812      	ldr	r2, [r2, #0]
 800f1b2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800f1b6:	f043 0301 	orr.w	r3, r3, #1
 800f1ba:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	7adb      	ldrb	r3, [r3, #11]
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d005      	beq.n	800f1d0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f1c4:	4b04      	ldr	r3, [pc, #16]	@ (800f1d8 <HAL_PCD_SuspendCallback+0x48>)
 800f1c6:	691b      	ldr	r3, [r3, #16]
 800f1c8:	4a03      	ldr	r2, [pc, #12]	@ (800f1d8 <HAL_PCD_SuspendCallback+0x48>)
 800f1ca:	f043 0306 	orr.w	r3, r3, #6
 800f1ce:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800f1d0:	bf00      	nop
 800f1d2:	3708      	adds	r7, #8
 800f1d4:	46bd      	mov	sp, r7
 800f1d6:	bd80      	pop	{r7, pc}
 800f1d8:	e000ed00 	.word	0xe000ed00

0800f1dc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f1dc:	b580      	push	{r7, lr}
 800f1de:	b082      	sub	sp, #8
 800f1e0:	af00      	add	r7, sp, #0
 800f1e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f1ea:	4618      	mov	r0, r3
 800f1ec:	f7fe fc7f 	bl	800daee <USBD_LL_Resume>
}
 800f1f0:	bf00      	nop
 800f1f2:	3708      	adds	r7, #8
 800f1f4:	46bd      	mov	sp, r7
 800f1f6:	bd80      	pop	{r7, pc}

0800f1f8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f1f8:	b580      	push	{r7, lr}
 800f1fa:	b082      	sub	sp, #8
 800f1fc:	af00      	add	r7, sp, #0
 800f1fe:	6078      	str	r0, [r7, #4]
 800f200:	460b      	mov	r3, r1
 800f202:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f20a:	78fa      	ldrb	r2, [r7, #3]
 800f20c:	4611      	mov	r1, r2
 800f20e:	4618      	mov	r0, r3
 800f210:	f7fe fcd7 	bl	800dbc2 <USBD_LL_IsoOUTIncomplete>
}
 800f214:	bf00      	nop
 800f216:	3708      	adds	r7, #8
 800f218:	46bd      	mov	sp, r7
 800f21a:	bd80      	pop	{r7, pc}

0800f21c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f21c:	b580      	push	{r7, lr}
 800f21e:	b082      	sub	sp, #8
 800f220:	af00      	add	r7, sp, #0
 800f222:	6078      	str	r0, [r7, #4]
 800f224:	460b      	mov	r3, r1
 800f226:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f22e:	78fa      	ldrb	r2, [r7, #3]
 800f230:	4611      	mov	r1, r2
 800f232:	4618      	mov	r0, r3
 800f234:	f7fe fc93 	bl	800db5e <USBD_LL_IsoINIncomplete>
}
 800f238:	bf00      	nop
 800f23a:	3708      	adds	r7, #8
 800f23c:	46bd      	mov	sp, r7
 800f23e:	bd80      	pop	{r7, pc}

0800f240 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f240:	b580      	push	{r7, lr}
 800f242:	b082      	sub	sp, #8
 800f244:	af00      	add	r7, sp, #0
 800f246:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f24e:	4618      	mov	r0, r3
 800f250:	f7fe fce9 	bl	800dc26 <USBD_LL_DevConnected>
}
 800f254:	bf00      	nop
 800f256:	3708      	adds	r7, #8
 800f258:	46bd      	mov	sp, r7
 800f25a:	bd80      	pop	{r7, pc}

0800f25c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f25c:	b580      	push	{r7, lr}
 800f25e:	b082      	sub	sp, #8
 800f260:	af00      	add	r7, sp, #0
 800f262:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f26a:	4618      	mov	r0, r3
 800f26c:	f7fe fce6 	bl	800dc3c <USBD_LL_DevDisconnected>
}
 800f270:	bf00      	nop
 800f272:	3708      	adds	r7, #8
 800f274:	46bd      	mov	sp, r7
 800f276:	bd80      	pop	{r7, pc}

0800f278 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f278:	b580      	push	{r7, lr}
 800f27a:	b082      	sub	sp, #8
 800f27c:	af00      	add	r7, sp, #0
 800f27e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	781b      	ldrb	r3, [r3, #0]
 800f284:	2b00      	cmp	r3, #0
 800f286:	d13c      	bne.n	800f302 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800f288:	4a20      	ldr	r2, [pc, #128]	@ (800f30c <USBD_LL_Init+0x94>)
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	4a1e      	ldr	r2, [pc, #120]	@ (800f30c <USBD_LL_Init+0x94>)
 800f294:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f298:	4b1c      	ldr	r3, [pc, #112]	@ (800f30c <USBD_LL_Init+0x94>)
 800f29a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800f29e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800f2a0:	4b1a      	ldr	r3, [pc, #104]	@ (800f30c <USBD_LL_Init+0x94>)
 800f2a2:	2204      	movs	r2, #4
 800f2a4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800f2a6:	4b19      	ldr	r3, [pc, #100]	@ (800f30c <USBD_LL_Init+0x94>)
 800f2a8:	2202      	movs	r2, #2
 800f2aa:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800f2ac:	4b17      	ldr	r3, [pc, #92]	@ (800f30c <USBD_LL_Init+0x94>)
 800f2ae:	2200      	movs	r2, #0
 800f2b0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800f2b2:	4b16      	ldr	r3, [pc, #88]	@ (800f30c <USBD_LL_Init+0x94>)
 800f2b4:	2202      	movs	r2, #2
 800f2b6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800f2b8:	4b14      	ldr	r3, [pc, #80]	@ (800f30c <USBD_LL_Init+0x94>)
 800f2ba:	2200      	movs	r2, #0
 800f2bc:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800f2be:	4b13      	ldr	r3, [pc, #76]	@ (800f30c <USBD_LL_Init+0x94>)
 800f2c0:	2200      	movs	r2, #0
 800f2c2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800f2c4:	4b11      	ldr	r3, [pc, #68]	@ (800f30c <USBD_LL_Init+0x94>)
 800f2c6:	2200      	movs	r2, #0
 800f2c8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800f2ca:	4b10      	ldr	r3, [pc, #64]	@ (800f30c <USBD_LL_Init+0x94>)
 800f2cc:	2200      	movs	r2, #0
 800f2ce:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800f2d0:	4b0e      	ldr	r3, [pc, #56]	@ (800f30c <USBD_LL_Init+0x94>)
 800f2d2:	2200      	movs	r2, #0
 800f2d4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800f2d6:	480d      	ldr	r0, [pc, #52]	@ (800f30c <USBD_LL_Init+0x94>)
 800f2d8:	f7f9 fa91 	bl	80087fe <HAL_PCD_Init>
 800f2dc:	4603      	mov	r3, r0
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d001      	beq.n	800f2e6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800f2e2:	f7f3 ff37 	bl	8003154 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800f2e6:	2180      	movs	r1, #128	@ 0x80
 800f2e8:	4808      	ldr	r0, [pc, #32]	@ (800f30c <USBD_LL_Init+0x94>)
 800f2ea:	f7fa fcbe 	bl	8009c6a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800f2ee:	2240      	movs	r2, #64	@ 0x40
 800f2f0:	2100      	movs	r1, #0
 800f2f2:	4806      	ldr	r0, [pc, #24]	@ (800f30c <USBD_LL_Init+0x94>)
 800f2f4:	f7fa fc72 	bl	8009bdc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800f2f8:	2280      	movs	r2, #128	@ 0x80
 800f2fa:	2101      	movs	r1, #1
 800f2fc:	4803      	ldr	r0, [pc, #12]	@ (800f30c <USBD_LL_Init+0x94>)
 800f2fe:	f7fa fc6d 	bl	8009bdc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800f302:	2300      	movs	r3, #0
}
 800f304:	4618      	mov	r0, r3
 800f306:	3708      	adds	r7, #8
 800f308:	46bd      	mov	sp, r7
 800f30a:	bd80      	pop	{r7, pc}
 800f30c:	20001a70 	.word	0x20001a70

0800f310 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f310:	b580      	push	{r7, lr}
 800f312:	b084      	sub	sp, #16
 800f314:	af00      	add	r7, sp, #0
 800f316:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f318:	2300      	movs	r3, #0
 800f31a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f31c:	2300      	movs	r3, #0
 800f31e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f326:	4618      	mov	r0, r3
 800f328:	f7f9 fb78 	bl	8008a1c <HAL_PCD_Start>
 800f32c:	4603      	mov	r3, r0
 800f32e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f330:	7bfb      	ldrb	r3, [r7, #15]
 800f332:	4618      	mov	r0, r3
 800f334:	f000 f942 	bl	800f5bc <USBD_Get_USB_Status>
 800f338:	4603      	mov	r3, r0
 800f33a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f33c:	7bbb      	ldrb	r3, [r7, #14]
}
 800f33e:	4618      	mov	r0, r3
 800f340:	3710      	adds	r7, #16
 800f342:	46bd      	mov	sp, r7
 800f344:	bd80      	pop	{r7, pc}

0800f346 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f346:	b580      	push	{r7, lr}
 800f348:	b084      	sub	sp, #16
 800f34a:	af00      	add	r7, sp, #0
 800f34c:	6078      	str	r0, [r7, #4]
 800f34e:	4608      	mov	r0, r1
 800f350:	4611      	mov	r1, r2
 800f352:	461a      	mov	r2, r3
 800f354:	4603      	mov	r3, r0
 800f356:	70fb      	strb	r3, [r7, #3]
 800f358:	460b      	mov	r3, r1
 800f35a:	70bb      	strb	r3, [r7, #2]
 800f35c:	4613      	mov	r3, r2
 800f35e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f360:	2300      	movs	r3, #0
 800f362:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f364:	2300      	movs	r3, #0
 800f366:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800f36e:	78bb      	ldrb	r3, [r7, #2]
 800f370:	883a      	ldrh	r2, [r7, #0]
 800f372:	78f9      	ldrb	r1, [r7, #3]
 800f374:	f7fa f84c 	bl	8009410 <HAL_PCD_EP_Open>
 800f378:	4603      	mov	r3, r0
 800f37a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f37c:	7bfb      	ldrb	r3, [r7, #15]
 800f37e:	4618      	mov	r0, r3
 800f380:	f000 f91c 	bl	800f5bc <USBD_Get_USB_Status>
 800f384:	4603      	mov	r3, r0
 800f386:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f388:	7bbb      	ldrb	r3, [r7, #14]
}
 800f38a:	4618      	mov	r0, r3
 800f38c:	3710      	adds	r7, #16
 800f38e:	46bd      	mov	sp, r7
 800f390:	bd80      	pop	{r7, pc}

0800f392 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f392:	b580      	push	{r7, lr}
 800f394:	b084      	sub	sp, #16
 800f396:	af00      	add	r7, sp, #0
 800f398:	6078      	str	r0, [r7, #4]
 800f39a:	460b      	mov	r3, r1
 800f39c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f39e:	2300      	movs	r3, #0
 800f3a0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f3a2:	2300      	movs	r3, #0
 800f3a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f3ac:	78fa      	ldrb	r2, [r7, #3]
 800f3ae:	4611      	mov	r1, r2
 800f3b0:	4618      	mov	r0, r3
 800f3b2:	f7fa f897 	bl	80094e4 <HAL_PCD_EP_Close>
 800f3b6:	4603      	mov	r3, r0
 800f3b8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f3ba:	7bfb      	ldrb	r3, [r7, #15]
 800f3bc:	4618      	mov	r0, r3
 800f3be:	f000 f8fd 	bl	800f5bc <USBD_Get_USB_Status>
 800f3c2:	4603      	mov	r3, r0
 800f3c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f3c6:	7bbb      	ldrb	r3, [r7, #14]
}
 800f3c8:	4618      	mov	r0, r3
 800f3ca:	3710      	adds	r7, #16
 800f3cc:	46bd      	mov	sp, r7
 800f3ce:	bd80      	pop	{r7, pc}

0800f3d0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f3d0:	b580      	push	{r7, lr}
 800f3d2:	b084      	sub	sp, #16
 800f3d4:	af00      	add	r7, sp, #0
 800f3d6:	6078      	str	r0, [r7, #4]
 800f3d8:	460b      	mov	r3, r1
 800f3da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f3dc:	2300      	movs	r3, #0
 800f3de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f3e0:	2300      	movs	r3, #0
 800f3e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f3ea:	78fa      	ldrb	r2, [r7, #3]
 800f3ec:	4611      	mov	r1, r2
 800f3ee:	4618      	mov	r0, r3
 800f3f0:	f7fa f94f 	bl	8009692 <HAL_PCD_EP_SetStall>
 800f3f4:	4603      	mov	r3, r0
 800f3f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f3f8:	7bfb      	ldrb	r3, [r7, #15]
 800f3fa:	4618      	mov	r0, r3
 800f3fc:	f000 f8de 	bl	800f5bc <USBD_Get_USB_Status>
 800f400:	4603      	mov	r3, r0
 800f402:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f404:	7bbb      	ldrb	r3, [r7, #14]
}
 800f406:	4618      	mov	r0, r3
 800f408:	3710      	adds	r7, #16
 800f40a:	46bd      	mov	sp, r7
 800f40c:	bd80      	pop	{r7, pc}

0800f40e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f40e:	b580      	push	{r7, lr}
 800f410:	b084      	sub	sp, #16
 800f412:	af00      	add	r7, sp, #0
 800f414:	6078      	str	r0, [r7, #4]
 800f416:	460b      	mov	r3, r1
 800f418:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f41a:	2300      	movs	r3, #0
 800f41c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f41e:	2300      	movs	r3, #0
 800f420:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f428:	78fa      	ldrb	r2, [r7, #3]
 800f42a:	4611      	mov	r1, r2
 800f42c:	4618      	mov	r0, r3
 800f42e:	f7fa f993 	bl	8009758 <HAL_PCD_EP_ClrStall>
 800f432:	4603      	mov	r3, r0
 800f434:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f436:	7bfb      	ldrb	r3, [r7, #15]
 800f438:	4618      	mov	r0, r3
 800f43a:	f000 f8bf 	bl	800f5bc <USBD_Get_USB_Status>
 800f43e:	4603      	mov	r3, r0
 800f440:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f442:	7bbb      	ldrb	r3, [r7, #14]
}
 800f444:	4618      	mov	r0, r3
 800f446:	3710      	adds	r7, #16
 800f448:	46bd      	mov	sp, r7
 800f44a:	bd80      	pop	{r7, pc}

0800f44c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f44c:	b480      	push	{r7}
 800f44e:	b085      	sub	sp, #20
 800f450:	af00      	add	r7, sp, #0
 800f452:	6078      	str	r0, [r7, #4]
 800f454:	460b      	mov	r3, r1
 800f456:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f45e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800f460:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f464:	2b00      	cmp	r3, #0
 800f466:	da0b      	bge.n	800f480 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f468:	78fb      	ldrb	r3, [r7, #3]
 800f46a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f46e:	68f9      	ldr	r1, [r7, #12]
 800f470:	4613      	mov	r3, r2
 800f472:	00db      	lsls	r3, r3, #3
 800f474:	4413      	add	r3, r2
 800f476:	009b      	lsls	r3, r3, #2
 800f478:	440b      	add	r3, r1
 800f47a:	3316      	adds	r3, #22
 800f47c:	781b      	ldrb	r3, [r3, #0]
 800f47e:	e00b      	b.n	800f498 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f480:	78fb      	ldrb	r3, [r7, #3]
 800f482:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f486:	68f9      	ldr	r1, [r7, #12]
 800f488:	4613      	mov	r3, r2
 800f48a:	00db      	lsls	r3, r3, #3
 800f48c:	4413      	add	r3, r2
 800f48e:	009b      	lsls	r3, r3, #2
 800f490:	440b      	add	r3, r1
 800f492:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800f496:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f498:	4618      	mov	r0, r3
 800f49a:	3714      	adds	r7, #20
 800f49c:	46bd      	mov	sp, r7
 800f49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4a2:	4770      	bx	lr

0800f4a4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f4a4:	b580      	push	{r7, lr}
 800f4a6:	b084      	sub	sp, #16
 800f4a8:	af00      	add	r7, sp, #0
 800f4aa:	6078      	str	r0, [r7, #4]
 800f4ac:	460b      	mov	r3, r1
 800f4ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f4b0:	2300      	movs	r3, #0
 800f4b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f4b4:	2300      	movs	r3, #0
 800f4b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f4be:	78fa      	ldrb	r2, [r7, #3]
 800f4c0:	4611      	mov	r1, r2
 800f4c2:	4618      	mov	r0, r3
 800f4c4:	f7f9 ff80 	bl	80093c8 <HAL_PCD_SetAddress>
 800f4c8:	4603      	mov	r3, r0
 800f4ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f4cc:	7bfb      	ldrb	r3, [r7, #15]
 800f4ce:	4618      	mov	r0, r3
 800f4d0:	f000 f874 	bl	800f5bc <USBD_Get_USB_Status>
 800f4d4:	4603      	mov	r3, r0
 800f4d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f4d8:	7bbb      	ldrb	r3, [r7, #14]
}
 800f4da:	4618      	mov	r0, r3
 800f4dc:	3710      	adds	r7, #16
 800f4de:	46bd      	mov	sp, r7
 800f4e0:	bd80      	pop	{r7, pc}

0800f4e2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f4e2:	b580      	push	{r7, lr}
 800f4e4:	b086      	sub	sp, #24
 800f4e6:	af00      	add	r7, sp, #0
 800f4e8:	60f8      	str	r0, [r7, #12]
 800f4ea:	607a      	str	r2, [r7, #4]
 800f4ec:	603b      	str	r3, [r7, #0]
 800f4ee:	460b      	mov	r3, r1
 800f4f0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f4f2:	2300      	movs	r3, #0
 800f4f4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f4f6:	2300      	movs	r3, #0
 800f4f8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f4fa:	68fb      	ldr	r3, [r7, #12]
 800f4fc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800f500:	7af9      	ldrb	r1, [r7, #11]
 800f502:	683b      	ldr	r3, [r7, #0]
 800f504:	687a      	ldr	r2, [r7, #4]
 800f506:	f7fa f88a 	bl	800961e <HAL_PCD_EP_Transmit>
 800f50a:	4603      	mov	r3, r0
 800f50c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f50e:	7dfb      	ldrb	r3, [r7, #23]
 800f510:	4618      	mov	r0, r3
 800f512:	f000 f853 	bl	800f5bc <USBD_Get_USB_Status>
 800f516:	4603      	mov	r3, r0
 800f518:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f51a:	7dbb      	ldrb	r3, [r7, #22]
}
 800f51c:	4618      	mov	r0, r3
 800f51e:	3718      	adds	r7, #24
 800f520:	46bd      	mov	sp, r7
 800f522:	bd80      	pop	{r7, pc}

0800f524 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f524:	b580      	push	{r7, lr}
 800f526:	b086      	sub	sp, #24
 800f528:	af00      	add	r7, sp, #0
 800f52a:	60f8      	str	r0, [r7, #12]
 800f52c:	607a      	str	r2, [r7, #4]
 800f52e:	603b      	str	r3, [r7, #0]
 800f530:	460b      	mov	r3, r1
 800f532:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f534:	2300      	movs	r3, #0
 800f536:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f538:	2300      	movs	r3, #0
 800f53a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f53c:	68fb      	ldr	r3, [r7, #12]
 800f53e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800f542:	7af9      	ldrb	r1, [r7, #11]
 800f544:	683b      	ldr	r3, [r7, #0]
 800f546:	687a      	ldr	r2, [r7, #4]
 800f548:	f7fa f816 	bl	8009578 <HAL_PCD_EP_Receive>
 800f54c:	4603      	mov	r3, r0
 800f54e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f550:	7dfb      	ldrb	r3, [r7, #23]
 800f552:	4618      	mov	r0, r3
 800f554:	f000 f832 	bl	800f5bc <USBD_Get_USB_Status>
 800f558:	4603      	mov	r3, r0
 800f55a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f55c:	7dbb      	ldrb	r3, [r7, #22]
}
 800f55e:	4618      	mov	r0, r3
 800f560:	3718      	adds	r7, #24
 800f562:	46bd      	mov	sp, r7
 800f564:	bd80      	pop	{r7, pc}

0800f566 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f566:	b580      	push	{r7, lr}
 800f568:	b082      	sub	sp, #8
 800f56a:	af00      	add	r7, sp, #0
 800f56c:	6078      	str	r0, [r7, #4]
 800f56e:	460b      	mov	r3, r1
 800f570:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f578:	78fa      	ldrb	r2, [r7, #3]
 800f57a:	4611      	mov	r1, r2
 800f57c:	4618      	mov	r0, r3
 800f57e:	f7fa f836 	bl	80095ee <HAL_PCD_EP_GetRxCount>
 800f582:	4603      	mov	r3, r0
}
 800f584:	4618      	mov	r0, r3
 800f586:	3708      	adds	r7, #8
 800f588:	46bd      	mov	sp, r7
 800f58a:	bd80      	pop	{r7, pc}

0800f58c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800f58c:	b480      	push	{r7}
 800f58e:	b083      	sub	sp, #12
 800f590:	af00      	add	r7, sp, #0
 800f592:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800f594:	4b03      	ldr	r3, [pc, #12]	@ (800f5a4 <USBD_static_malloc+0x18>)
}
 800f596:	4618      	mov	r0, r3
 800f598:	370c      	adds	r7, #12
 800f59a:	46bd      	mov	sp, r7
 800f59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5a0:	4770      	bx	lr
 800f5a2:	bf00      	nop
 800f5a4:	20001f54 	.word	0x20001f54

0800f5a8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800f5a8:	b480      	push	{r7}
 800f5aa:	b083      	sub	sp, #12
 800f5ac:	af00      	add	r7, sp, #0
 800f5ae:	6078      	str	r0, [r7, #4]

}
 800f5b0:	bf00      	nop
 800f5b2:	370c      	adds	r7, #12
 800f5b4:	46bd      	mov	sp, r7
 800f5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ba:	4770      	bx	lr

0800f5bc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f5bc:	b480      	push	{r7}
 800f5be:	b085      	sub	sp, #20
 800f5c0:	af00      	add	r7, sp, #0
 800f5c2:	4603      	mov	r3, r0
 800f5c4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f5c6:	2300      	movs	r3, #0
 800f5c8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f5ca:	79fb      	ldrb	r3, [r7, #7]
 800f5cc:	2b03      	cmp	r3, #3
 800f5ce:	d817      	bhi.n	800f600 <USBD_Get_USB_Status+0x44>
 800f5d0:	a201      	add	r2, pc, #4	@ (adr r2, 800f5d8 <USBD_Get_USB_Status+0x1c>)
 800f5d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5d6:	bf00      	nop
 800f5d8:	0800f5e9 	.word	0x0800f5e9
 800f5dc:	0800f5ef 	.word	0x0800f5ef
 800f5e0:	0800f5f5 	.word	0x0800f5f5
 800f5e4:	0800f5fb 	.word	0x0800f5fb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f5e8:	2300      	movs	r3, #0
 800f5ea:	73fb      	strb	r3, [r7, #15]
    break;
 800f5ec:	e00b      	b.n	800f606 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f5ee:	2303      	movs	r3, #3
 800f5f0:	73fb      	strb	r3, [r7, #15]
    break;
 800f5f2:	e008      	b.n	800f606 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f5f4:	2301      	movs	r3, #1
 800f5f6:	73fb      	strb	r3, [r7, #15]
    break;
 800f5f8:	e005      	b.n	800f606 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f5fa:	2303      	movs	r3, #3
 800f5fc:	73fb      	strb	r3, [r7, #15]
    break;
 800f5fe:	e002      	b.n	800f606 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800f600:	2303      	movs	r3, #3
 800f602:	73fb      	strb	r3, [r7, #15]
    break;
 800f604:	bf00      	nop
  }
  return usb_status;
 800f606:	7bfb      	ldrb	r3, [r7, #15]
}
 800f608:	4618      	mov	r0, r3
 800f60a:	3714      	adds	r7, #20
 800f60c:	46bd      	mov	sp, r7
 800f60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f612:	4770      	bx	lr

0800f614 <siprintf>:
 800f614:	b40e      	push	{r1, r2, r3}
 800f616:	b510      	push	{r4, lr}
 800f618:	b09d      	sub	sp, #116	@ 0x74
 800f61a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800f61c:	9002      	str	r0, [sp, #8]
 800f61e:	9006      	str	r0, [sp, #24]
 800f620:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800f624:	480a      	ldr	r0, [pc, #40]	@ (800f650 <siprintf+0x3c>)
 800f626:	9107      	str	r1, [sp, #28]
 800f628:	9104      	str	r1, [sp, #16]
 800f62a:	490a      	ldr	r1, [pc, #40]	@ (800f654 <siprintf+0x40>)
 800f62c:	f853 2b04 	ldr.w	r2, [r3], #4
 800f630:	9105      	str	r1, [sp, #20]
 800f632:	2400      	movs	r4, #0
 800f634:	a902      	add	r1, sp, #8
 800f636:	6800      	ldr	r0, [r0, #0]
 800f638:	9301      	str	r3, [sp, #4]
 800f63a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800f63c:	f000 f9a2 	bl	800f984 <_svfiprintf_r>
 800f640:	9b02      	ldr	r3, [sp, #8]
 800f642:	701c      	strb	r4, [r3, #0]
 800f644:	b01d      	add	sp, #116	@ 0x74
 800f646:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f64a:	b003      	add	sp, #12
 800f64c:	4770      	bx	lr
 800f64e:	bf00      	nop
 800f650:	20000110 	.word	0x20000110
 800f654:	ffff0208 	.word	0xffff0208

0800f658 <memset>:
 800f658:	4402      	add	r2, r0
 800f65a:	4603      	mov	r3, r0
 800f65c:	4293      	cmp	r3, r2
 800f65e:	d100      	bne.n	800f662 <memset+0xa>
 800f660:	4770      	bx	lr
 800f662:	f803 1b01 	strb.w	r1, [r3], #1
 800f666:	e7f9      	b.n	800f65c <memset+0x4>

0800f668 <__errno>:
 800f668:	4b01      	ldr	r3, [pc, #4]	@ (800f670 <__errno+0x8>)
 800f66a:	6818      	ldr	r0, [r3, #0]
 800f66c:	4770      	bx	lr
 800f66e:	bf00      	nop
 800f670:	20000110 	.word	0x20000110

0800f674 <__libc_init_array>:
 800f674:	b570      	push	{r4, r5, r6, lr}
 800f676:	4d0d      	ldr	r5, [pc, #52]	@ (800f6ac <__libc_init_array+0x38>)
 800f678:	4c0d      	ldr	r4, [pc, #52]	@ (800f6b0 <__libc_init_array+0x3c>)
 800f67a:	1b64      	subs	r4, r4, r5
 800f67c:	10a4      	asrs	r4, r4, #2
 800f67e:	2600      	movs	r6, #0
 800f680:	42a6      	cmp	r6, r4
 800f682:	d109      	bne.n	800f698 <__libc_init_array+0x24>
 800f684:	4d0b      	ldr	r5, [pc, #44]	@ (800f6b4 <__libc_init_array+0x40>)
 800f686:	4c0c      	ldr	r4, [pc, #48]	@ (800f6b8 <__libc_init_array+0x44>)
 800f688:	f000 fc64 	bl	800ff54 <_init>
 800f68c:	1b64      	subs	r4, r4, r5
 800f68e:	10a4      	asrs	r4, r4, #2
 800f690:	2600      	movs	r6, #0
 800f692:	42a6      	cmp	r6, r4
 800f694:	d105      	bne.n	800f6a2 <__libc_init_array+0x2e>
 800f696:	bd70      	pop	{r4, r5, r6, pc}
 800f698:	f855 3b04 	ldr.w	r3, [r5], #4
 800f69c:	4798      	blx	r3
 800f69e:	3601      	adds	r6, #1
 800f6a0:	e7ee      	b.n	800f680 <__libc_init_array+0xc>
 800f6a2:	f855 3b04 	ldr.w	r3, [r5], #4
 800f6a6:	4798      	blx	r3
 800f6a8:	3601      	adds	r6, #1
 800f6aa:	e7f2      	b.n	800f692 <__libc_init_array+0x1e>
 800f6ac:	080111b0 	.word	0x080111b0
 800f6b0:	080111b0 	.word	0x080111b0
 800f6b4:	080111b0 	.word	0x080111b0
 800f6b8:	080111b4 	.word	0x080111b4

0800f6bc <__retarget_lock_acquire_recursive>:
 800f6bc:	4770      	bx	lr

0800f6be <__retarget_lock_release_recursive>:
 800f6be:	4770      	bx	lr

0800f6c0 <memcpy>:
 800f6c0:	440a      	add	r2, r1
 800f6c2:	4291      	cmp	r1, r2
 800f6c4:	f100 33ff 	add.w	r3, r0, #4294967295
 800f6c8:	d100      	bne.n	800f6cc <memcpy+0xc>
 800f6ca:	4770      	bx	lr
 800f6cc:	b510      	push	{r4, lr}
 800f6ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f6d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f6d6:	4291      	cmp	r1, r2
 800f6d8:	d1f9      	bne.n	800f6ce <memcpy+0xe>
 800f6da:	bd10      	pop	{r4, pc}

0800f6dc <_free_r>:
 800f6dc:	b538      	push	{r3, r4, r5, lr}
 800f6de:	4605      	mov	r5, r0
 800f6e0:	2900      	cmp	r1, #0
 800f6e2:	d041      	beq.n	800f768 <_free_r+0x8c>
 800f6e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f6e8:	1f0c      	subs	r4, r1, #4
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	bfb8      	it	lt
 800f6ee:	18e4      	addlt	r4, r4, r3
 800f6f0:	f000 f8e0 	bl	800f8b4 <__malloc_lock>
 800f6f4:	4a1d      	ldr	r2, [pc, #116]	@ (800f76c <_free_r+0x90>)
 800f6f6:	6813      	ldr	r3, [r2, #0]
 800f6f8:	b933      	cbnz	r3, 800f708 <_free_r+0x2c>
 800f6fa:	6063      	str	r3, [r4, #4]
 800f6fc:	6014      	str	r4, [r2, #0]
 800f6fe:	4628      	mov	r0, r5
 800f700:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f704:	f000 b8dc 	b.w	800f8c0 <__malloc_unlock>
 800f708:	42a3      	cmp	r3, r4
 800f70a:	d908      	bls.n	800f71e <_free_r+0x42>
 800f70c:	6820      	ldr	r0, [r4, #0]
 800f70e:	1821      	adds	r1, r4, r0
 800f710:	428b      	cmp	r3, r1
 800f712:	bf01      	itttt	eq
 800f714:	6819      	ldreq	r1, [r3, #0]
 800f716:	685b      	ldreq	r3, [r3, #4]
 800f718:	1809      	addeq	r1, r1, r0
 800f71a:	6021      	streq	r1, [r4, #0]
 800f71c:	e7ed      	b.n	800f6fa <_free_r+0x1e>
 800f71e:	461a      	mov	r2, r3
 800f720:	685b      	ldr	r3, [r3, #4]
 800f722:	b10b      	cbz	r3, 800f728 <_free_r+0x4c>
 800f724:	42a3      	cmp	r3, r4
 800f726:	d9fa      	bls.n	800f71e <_free_r+0x42>
 800f728:	6811      	ldr	r1, [r2, #0]
 800f72a:	1850      	adds	r0, r2, r1
 800f72c:	42a0      	cmp	r0, r4
 800f72e:	d10b      	bne.n	800f748 <_free_r+0x6c>
 800f730:	6820      	ldr	r0, [r4, #0]
 800f732:	4401      	add	r1, r0
 800f734:	1850      	adds	r0, r2, r1
 800f736:	4283      	cmp	r3, r0
 800f738:	6011      	str	r1, [r2, #0]
 800f73a:	d1e0      	bne.n	800f6fe <_free_r+0x22>
 800f73c:	6818      	ldr	r0, [r3, #0]
 800f73e:	685b      	ldr	r3, [r3, #4]
 800f740:	6053      	str	r3, [r2, #4]
 800f742:	4408      	add	r0, r1
 800f744:	6010      	str	r0, [r2, #0]
 800f746:	e7da      	b.n	800f6fe <_free_r+0x22>
 800f748:	d902      	bls.n	800f750 <_free_r+0x74>
 800f74a:	230c      	movs	r3, #12
 800f74c:	602b      	str	r3, [r5, #0]
 800f74e:	e7d6      	b.n	800f6fe <_free_r+0x22>
 800f750:	6820      	ldr	r0, [r4, #0]
 800f752:	1821      	adds	r1, r4, r0
 800f754:	428b      	cmp	r3, r1
 800f756:	bf04      	itt	eq
 800f758:	6819      	ldreq	r1, [r3, #0]
 800f75a:	685b      	ldreq	r3, [r3, #4]
 800f75c:	6063      	str	r3, [r4, #4]
 800f75e:	bf04      	itt	eq
 800f760:	1809      	addeq	r1, r1, r0
 800f762:	6021      	streq	r1, [r4, #0]
 800f764:	6054      	str	r4, [r2, #4]
 800f766:	e7ca      	b.n	800f6fe <_free_r+0x22>
 800f768:	bd38      	pop	{r3, r4, r5, pc}
 800f76a:	bf00      	nop
 800f76c:	200022b8 	.word	0x200022b8

0800f770 <sbrk_aligned>:
 800f770:	b570      	push	{r4, r5, r6, lr}
 800f772:	4e0f      	ldr	r6, [pc, #60]	@ (800f7b0 <sbrk_aligned+0x40>)
 800f774:	460c      	mov	r4, r1
 800f776:	6831      	ldr	r1, [r6, #0]
 800f778:	4605      	mov	r5, r0
 800f77a:	b911      	cbnz	r1, 800f782 <sbrk_aligned+0x12>
 800f77c:	f000 fba4 	bl	800fec8 <_sbrk_r>
 800f780:	6030      	str	r0, [r6, #0]
 800f782:	4621      	mov	r1, r4
 800f784:	4628      	mov	r0, r5
 800f786:	f000 fb9f 	bl	800fec8 <_sbrk_r>
 800f78a:	1c43      	adds	r3, r0, #1
 800f78c:	d103      	bne.n	800f796 <sbrk_aligned+0x26>
 800f78e:	f04f 34ff 	mov.w	r4, #4294967295
 800f792:	4620      	mov	r0, r4
 800f794:	bd70      	pop	{r4, r5, r6, pc}
 800f796:	1cc4      	adds	r4, r0, #3
 800f798:	f024 0403 	bic.w	r4, r4, #3
 800f79c:	42a0      	cmp	r0, r4
 800f79e:	d0f8      	beq.n	800f792 <sbrk_aligned+0x22>
 800f7a0:	1a21      	subs	r1, r4, r0
 800f7a2:	4628      	mov	r0, r5
 800f7a4:	f000 fb90 	bl	800fec8 <_sbrk_r>
 800f7a8:	3001      	adds	r0, #1
 800f7aa:	d1f2      	bne.n	800f792 <sbrk_aligned+0x22>
 800f7ac:	e7ef      	b.n	800f78e <sbrk_aligned+0x1e>
 800f7ae:	bf00      	nop
 800f7b0:	200022b4 	.word	0x200022b4

0800f7b4 <_malloc_r>:
 800f7b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f7b8:	1ccd      	adds	r5, r1, #3
 800f7ba:	f025 0503 	bic.w	r5, r5, #3
 800f7be:	3508      	adds	r5, #8
 800f7c0:	2d0c      	cmp	r5, #12
 800f7c2:	bf38      	it	cc
 800f7c4:	250c      	movcc	r5, #12
 800f7c6:	2d00      	cmp	r5, #0
 800f7c8:	4606      	mov	r6, r0
 800f7ca:	db01      	blt.n	800f7d0 <_malloc_r+0x1c>
 800f7cc:	42a9      	cmp	r1, r5
 800f7ce:	d904      	bls.n	800f7da <_malloc_r+0x26>
 800f7d0:	230c      	movs	r3, #12
 800f7d2:	6033      	str	r3, [r6, #0]
 800f7d4:	2000      	movs	r0, #0
 800f7d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f7da:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f8b0 <_malloc_r+0xfc>
 800f7de:	f000 f869 	bl	800f8b4 <__malloc_lock>
 800f7e2:	f8d8 3000 	ldr.w	r3, [r8]
 800f7e6:	461c      	mov	r4, r3
 800f7e8:	bb44      	cbnz	r4, 800f83c <_malloc_r+0x88>
 800f7ea:	4629      	mov	r1, r5
 800f7ec:	4630      	mov	r0, r6
 800f7ee:	f7ff ffbf 	bl	800f770 <sbrk_aligned>
 800f7f2:	1c43      	adds	r3, r0, #1
 800f7f4:	4604      	mov	r4, r0
 800f7f6:	d158      	bne.n	800f8aa <_malloc_r+0xf6>
 800f7f8:	f8d8 4000 	ldr.w	r4, [r8]
 800f7fc:	4627      	mov	r7, r4
 800f7fe:	2f00      	cmp	r7, #0
 800f800:	d143      	bne.n	800f88a <_malloc_r+0xd6>
 800f802:	2c00      	cmp	r4, #0
 800f804:	d04b      	beq.n	800f89e <_malloc_r+0xea>
 800f806:	6823      	ldr	r3, [r4, #0]
 800f808:	4639      	mov	r1, r7
 800f80a:	4630      	mov	r0, r6
 800f80c:	eb04 0903 	add.w	r9, r4, r3
 800f810:	f000 fb5a 	bl	800fec8 <_sbrk_r>
 800f814:	4581      	cmp	r9, r0
 800f816:	d142      	bne.n	800f89e <_malloc_r+0xea>
 800f818:	6821      	ldr	r1, [r4, #0]
 800f81a:	1a6d      	subs	r5, r5, r1
 800f81c:	4629      	mov	r1, r5
 800f81e:	4630      	mov	r0, r6
 800f820:	f7ff ffa6 	bl	800f770 <sbrk_aligned>
 800f824:	3001      	adds	r0, #1
 800f826:	d03a      	beq.n	800f89e <_malloc_r+0xea>
 800f828:	6823      	ldr	r3, [r4, #0]
 800f82a:	442b      	add	r3, r5
 800f82c:	6023      	str	r3, [r4, #0]
 800f82e:	f8d8 3000 	ldr.w	r3, [r8]
 800f832:	685a      	ldr	r2, [r3, #4]
 800f834:	bb62      	cbnz	r2, 800f890 <_malloc_r+0xdc>
 800f836:	f8c8 7000 	str.w	r7, [r8]
 800f83a:	e00f      	b.n	800f85c <_malloc_r+0xa8>
 800f83c:	6822      	ldr	r2, [r4, #0]
 800f83e:	1b52      	subs	r2, r2, r5
 800f840:	d420      	bmi.n	800f884 <_malloc_r+0xd0>
 800f842:	2a0b      	cmp	r2, #11
 800f844:	d917      	bls.n	800f876 <_malloc_r+0xc2>
 800f846:	1961      	adds	r1, r4, r5
 800f848:	42a3      	cmp	r3, r4
 800f84a:	6025      	str	r5, [r4, #0]
 800f84c:	bf18      	it	ne
 800f84e:	6059      	strne	r1, [r3, #4]
 800f850:	6863      	ldr	r3, [r4, #4]
 800f852:	bf08      	it	eq
 800f854:	f8c8 1000 	streq.w	r1, [r8]
 800f858:	5162      	str	r2, [r4, r5]
 800f85a:	604b      	str	r3, [r1, #4]
 800f85c:	4630      	mov	r0, r6
 800f85e:	f000 f82f 	bl	800f8c0 <__malloc_unlock>
 800f862:	f104 000b 	add.w	r0, r4, #11
 800f866:	1d23      	adds	r3, r4, #4
 800f868:	f020 0007 	bic.w	r0, r0, #7
 800f86c:	1ac2      	subs	r2, r0, r3
 800f86e:	bf1c      	itt	ne
 800f870:	1a1b      	subne	r3, r3, r0
 800f872:	50a3      	strne	r3, [r4, r2]
 800f874:	e7af      	b.n	800f7d6 <_malloc_r+0x22>
 800f876:	6862      	ldr	r2, [r4, #4]
 800f878:	42a3      	cmp	r3, r4
 800f87a:	bf0c      	ite	eq
 800f87c:	f8c8 2000 	streq.w	r2, [r8]
 800f880:	605a      	strne	r2, [r3, #4]
 800f882:	e7eb      	b.n	800f85c <_malloc_r+0xa8>
 800f884:	4623      	mov	r3, r4
 800f886:	6864      	ldr	r4, [r4, #4]
 800f888:	e7ae      	b.n	800f7e8 <_malloc_r+0x34>
 800f88a:	463c      	mov	r4, r7
 800f88c:	687f      	ldr	r7, [r7, #4]
 800f88e:	e7b6      	b.n	800f7fe <_malloc_r+0x4a>
 800f890:	461a      	mov	r2, r3
 800f892:	685b      	ldr	r3, [r3, #4]
 800f894:	42a3      	cmp	r3, r4
 800f896:	d1fb      	bne.n	800f890 <_malloc_r+0xdc>
 800f898:	2300      	movs	r3, #0
 800f89a:	6053      	str	r3, [r2, #4]
 800f89c:	e7de      	b.n	800f85c <_malloc_r+0xa8>
 800f89e:	230c      	movs	r3, #12
 800f8a0:	6033      	str	r3, [r6, #0]
 800f8a2:	4630      	mov	r0, r6
 800f8a4:	f000 f80c 	bl	800f8c0 <__malloc_unlock>
 800f8a8:	e794      	b.n	800f7d4 <_malloc_r+0x20>
 800f8aa:	6005      	str	r5, [r0, #0]
 800f8ac:	e7d6      	b.n	800f85c <_malloc_r+0xa8>
 800f8ae:	bf00      	nop
 800f8b0:	200022b8 	.word	0x200022b8

0800f8b4 <__malloc_lock>:
 800f8b4:	4801      	ldr	r0, [pc, #4]	@ (800f8bc <__malloc_lock+0x8>)
 800f8b6:	f7ff bf01 	b.w	800f6bc <__retarget_lock_acquire_recursive>
 800f8ba:	bf00      	nop
 800f8bc:	200022b0 	.word	0x200022b0

0800f8c0 <__malloc_unlock>:
 800f8c0:	4801      	ldr	r0, [pc, #4]	@ (800f8c8 <__malloc_unlock+0x8>)
 800f8c2:	f7ff befc 	b.w	800f6be <__retarget_lock_release_recursive>
 800f8c6:	bf00      	nop
 800f8c8:	200022b0 	.word	0x200022b0

0800f8cc <__ssputs_r>:
 800f8cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f8d0:	688e      	ldr	r6, [r1, #8]
 800f8d2:	461f      	mov	r7, r3
 800f8d4:	42be      	cmp	r6, r7
 800f8d6:	680b      	ldr	r3, [r1, #0]
 800f8d8:	4682      	mov	sl, r0
 800f8da:	460c      	mov	r4, r1
 800f8dc:	4690      	mov	r8, r2
 800f8de:	d82d      	bhi.n	800f93c <__ssputs_r+0x70>
 800f8e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f8e4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f8e8:	d026      	beq.n	800f938 <__ssputs_r+0x6c>
 800f8ea:	6965      	ldr	r5, [r4, #20]
 800f8ec:	6909      	ldr	r1, [r1, #16]
 800f8ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f8f2:	eba3 0901 	sub.w	r9, r3, r1
 800f8f6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f8fa:	1c7b      	adds	r3, r7, #1
 800f8fc:	444b      	add	r3, r9
 800f8fe:	106d      	asrs	r5, r5, #1
 800f900:	429d      	cmp	r5, r3
 800f902:	bf38      	it	cc
 800f904:	461d      	movcc	r5, r3
 800f906:	0553      	lsls	r3, r2, #21
 800f908:	d527      	bpl.n	800f95a <__ssputs_r+0x8e>
 800f90a:	4629      	mov	r1, r5
 800f90c:	f7ff ff52 	bl	800f7b4 <_malloc_r>
 800f910:	4606      	mov	r6, r0
 800f912:	b360      	cbz	r0, 800f96e <__ssputs_r+0xa2>
 800f914:	6921      	ldr	r1, [r4, #16]
 800f916:	464a      	mov	r2, r9
 800f918:	f7ff fed2 	bl	800f6c0 <memcpy>
 800f91c:	89a3      	ldrh	r3, [r4, #12]
 800f91e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f922:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f926:	81a3      	strh	r3, [r4, #12]
 800f928:	6126      	str	r6, [r4, #16]
 800f92a:	6165      	str	r5, [r4, #20]
 800f92c:	444e      	add	r6, r9
 800f92e:	eba5 0509 	sub.w	r5, r5, r9
 800f932:	6026      	str	r6, [r4, #0]
 800f934:	60a5      	str	r5, [r4, #8]
 800f936:	463e      	mov	r6, r7
 800f938:	42be      	cmp	r6, r7
 800f93a:	d900      	bls.n	800f93e <__ssputs_r+0x72>
 800f93c:	463e      	mov	r6, r7
 800f93e:	6820      	ldr	r0, [r4, #0]
 800f940:	4632      	mov	r2, r6
 800f942:	4641      	mov	r1, r8
 800f944:	f000 faa6 	bl	800fe94 <memmove>
 800f948:	68a3      	ldr	r3, [r4, #8]
 800f94a:	1b9b      	subs	r3, r3, r6
 800f94c:	60a3      	str	r3, [r4, #8]
 800f94e:	6823      	ldr	r3, [r4, #0]
 800f950:	4433      	add	r3, r6
 800f952:	6023      	str	r3, [r4, #0]
 800f954:	2000      	movs	r0, #0
 800f956:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f95a:	462a      	mov	r2, r5
 800f95c:	f000 fac4 	bl	800fee8 <_realloc_r>
 800f960:	4606      	mov	r6, r0
 800f962:	2800      	cmp	r0, #0
 800f964:	d1e0      	bne.n	800f928 <__ssputs_r+0x5c>
 800f966:	6921      	ldr	r1, [r4, #16]
 800f968:	4650      	mov	r0, sl
 800f96a:	f7ff feb7 	bl	800f6dc <_free_r>
 800f96e:	230c      	movs	r3, #12
 800f970:	f8ca 3000 	str.w	r3, [sl]
 800f974:	89a3      	ldrh	r3, [r4, #12]
 800f976:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f97a:	81a3      	strh	r3, [r4, #12]
 800f97c:	f04f 30ff 	mov.w	r0, #4294967295
 800f980:	e7e9      	b.n	800f956 <__ssputs_r+0x8a>
	...

0800f984 <_svfiprintf_r>:
 800f984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f988:	4698      	mov	r8, r3
 800f98a:	898b      	ldrh	r3, [r1, #12]
 800f98c:	061b      	lsls	r3, r3, #24
 800f98e:	b09d      	sub	sp, #116	@ 0x74
 800f990:	4607      	mov	r7, r0
 800f992:	460d      	mov	r5, r1
 800f994:	4614      	mov	r4, r2
 800f996:	d510      	bpl.n	800f9ba <_svfiprintf_r+0x36>
 800f998:	690b      	ldr	r3, [r1, #16]
 800f99a:	b973      	cbnz	r3, 800f9ba <_svfiprintf_r+0x36>
 800f99c:	2140      	movs	r1, #64	@ 0x40
 800f99e:	f7ff ff09 	bl	800f7b4 <_malloc_r>
 800f9a2:	6028      	str	r0, [r5, #0]
 800f9a4:	6128      	str	r0, [r5, #16]
 800f9a6:	b930      	cbnz	r0, 800f9b6 <_svfiprintf_r+0x32>
 800f9a8:	230c      	movs	r3, #12
 800f9aa:	603b      	str	r3, [r7, #0]
 800f9ac:	f04f 30ff 	mov.w	r0, #4294967295
 800f9b0:	b01d      	add	sp, #116	@ 0x74
 800f9b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9b6:	2340      	movs	r3, #64	@ 0x40
 800f9b8:	616b      	str	r3, [r5, #20]
 800f9ba:	2300      	movs	r3, #0
 800f9bc:	9309      	str	r3, [sp, #36]	@ 0x24
 800f9be:	2320      	movs	r3, #32
 800f9c0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f9c4:	f8cd 800c 	str.w	r8, [sp, #12]
 800f9c8:	2330      	movs	r3, #48	@ 0x30
 800f9ca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800fb68 <_svfiprintf_r+0x1e4>
 800f9ce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f9d2:	f04f 0901 	mov.w	r9, #1
 800f9d6:	4623      	mov	r3, r4
 800f9d8:	469a      	mov	sl, r3
 800f9da:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f9de:	b10a      	cbz	r2, 800f9e4 <_svfiprintf_r+0x60>
 800f9e0:	2a25      	cmp	r2, #37	@ 0x25
 800f9e2:	d1f9      	bne.n	800f9d8 <_svfiprintf_r+0x54>
 800f9e4:	ebba 0b04 	subs.w	fp, sl, r4
 800f9e8:	d00b      	beq.n	800fa02 <_svfiprintf_r+0x7e>
 800f9ea:	465b      	mov	r3, fp
 800f9ec:	4622      	mov	r2, r4
 800f9ee:	4629      	mov	r1, r5
 800f9f0:	4638      	mov	r0, r7
 800f9f2:	f7ff ff6b 	bl	800f8cc <__ssputs_r>
 800f9f6:	3001      	adds	r0, #1
 800f9f8:	f000 80a7 	beq.w	800fb4a <_svfiprintf_r+0x1c6>
 800f9fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f9fe:	445a      	add	r2, fp
 800fa00:	9209      	str	r2, [sp, #36]	@ 0x24
 800fa02:	f89a 3000 	ldrb.w	r3, [sl]
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	f000 809f 	beq.w	800fb4a <_svfiprintf_r+0x1c6>
 800fa0c:	2300      	movs	r3, #0
 800fa0e:	f04f 32ff 	mov.w	r2, #4294967295
 800fa12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fa16:	f10a 0a01 	add.w	sl, sl, #1
 800fa1a:	9304      	str	r3, [sp, #16]
 800fa1c:	9307      	str	r3, [sp, #28]
 800fa1e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800fa22:	931a      	str	r3, [sp, #104]	@ 0x68
 800fa24:	4654      	mov	r4, sl
 800fa26:	2205      	movs	r2, #5
 800fa28:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa2c:	484e      	ldr	r0, [pc, #312]	@ (800fb68 <_svfiprintf_r+0x1e4>)
 800fa2e:	f7f0 fbd7 	bl	80001e0 <memchr>
 800fa32:	9a04      	ldr	r2, [sp, #16]
 800fa34:	b9d8      	cbnz	r0, 800fa6e <_svfiprintf_r+0xea>
 800fa36:	06d0      	lsls	r0, r2, #27
 800fa38:	bf44      	itt	mi
 800fa3a:	2320      	movmi	r3, #32
 800fa3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fa40:	0711      	lsls	r1, r2, #28
 800fa42:	bf44      	itt	mi
 800fa44:	232b      	movmi	r3, #43	@ 0x2b
 800fa46:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fa4a:	f89a 3000 	ldrb.w	r3, [sl]
 800fa4e:	2b2a      	cmp	r3, #42	@ 0x2a
 800fa50:	d015      	beq.n	800fa7e <_svfiprintf_r+0xfa>
 800fa52:	9a07      	ldr	r2, [sp, #28]
 800fa54:	4654      	mov	r4, sl
 800fa56:	2000      	movs	r0, #0
 800fa58:	f04f 0c0a 	mov.w	ip, #10
 800fa5c:	4621      	mov	r1, r4
 800fa5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fa62:	3b30      	subs	r3, #48	@ 0x30
 800fa64:	2b09      	cmp	r3, #9
 800fa66:	d94b      	bls.n	800fb00 <_svfiprintf_r+0x17c>
 800fa68:	b1b0      	cbz	r0, 800fa98 <_svfiprintf_r+0x114>
 800fa6a:	9207      	str	r2, [sp, #28]
 800fa6c:	e014      	b.n	800fa98 <_svfiprintf_r+0x114>
 800fa6e:	eba0 0308 	sub.w	r3, r0, r8
 800fa72:	fa09 f303 	lsl.w	r3, r9, r3
 800fa76:	4313      	orrs	r3, r2
 800fa78:	9304      	str	r3, [sp, #16]
 800fa7a:	46a2      	mov	sl, r4
 800fa7c:	e7d2      	b.n	800fa24 <_svfiprintf_r+0xa0>
 800fa7e:	9b03      	ldr	r3, [sp, #12]
 800fa80:	1d19      	adds	r1, r3, #4
 800fa82:	681b      	ldr	r3, [r3, #0]
 800fa84:	9103      	str	r1, [sp, #12]
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	bfbb      	ittet	lt
 800fa8a:	425b      	neglt	r3, r3
 800fa8c:	f042 0202 	orrlt.w	r2, r2, #2
 800fa90:	9307      	strge	r3, [sp, #28]
 800fa92:	9307      	strlt	r3, [sp, #28]
 800fa94:	bfb8      	it	lt
 800fa96:	9204      	strlt	r2, [sp, #16]
 800fa98:	7823      	ldrb	r3, [r4, #0]
 800fa9a:	2b2e      	cmp	r3, #46	@ 0x2e
 800fa9c:	d10a      	bne.n	800fab4 <_svfiprintf_r+0x130>
 800fa9e:	7863      	ldrb	r3, [r4, #1]
 800faa0:	2b2a      	cmp	r3, #42	@ 0x2a
 800faa2:	d132      	bne.n	800fb0a <_svfiprintf_r+0x186>
 800faa4:	9b03      	ldr	r3, [sp, #12]
 800faa6:	1d1a      	adds	r2, r3, #4
 800faa8:	681b      	ldr	r3, [r3, #0]
 800faaa:	9203      	str	r2, [sp, #12]
 800faac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800fab0:	3402      	adds	r4, #2
 800fab2:	9305      	str	r3, [sp, #20]
 800fab4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800fb78 <_svfiprintf_r+0x1f4>
 800fab8:	7821      	ldrb	r1, [r4, #0]
 800faba:	2203      	movs	r2, #3
 800fabc:	4650      	mov	r0, sl
 800fabe:	f7f0 fb8f 	bl	80001e0 <memchr>
 800fac2:	b138      	cbz	r0, 800fad4 <_svfiprintf_r+0x150>
 800fac4:	9b04      	ldr	r3, [sp, #16]
 800fac6:	eba0 000a 	sub.w	r0, r0, sl
 800faca:	2240      	movs	r2, #64	@ 0x40
 800facc:	4082      	lsls	r2, r0
 800face:	4313      	orrs	r3, r2
 800fad0:	3401      	adds	r4, #1
 800fad2:	9304      	str	r3, [sp, #16]
 800fad4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fad8:	4824      	ldr	r0, [pc, #144]	@ (800fb6c <_svfiprintf_r+0x1e8>)
 800fada:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800fade:	2206      	movs	r2, #6
 800fae0:	f7f0 fb7e 	bl	80001e0 <memchr>
 800fae4:	2800      	cmp	r0, #0
 800fae6:	d036      	beq.n	800fb56 <_svfiprintf_r+0x1d2>
 800fae8:	4b21      	ldr	r3, [pc, #132]	@ (800fb70 <_svfiprintf_r+0x1ec>)
 800faea:	bb1b      	cbnz	r3, 800fb34 <_svfiprintf_r+0x1b0>
 800faec:	9b03      	ldr	r3, [sp, #12]
 800faee:	3307      	adds	r3, #7
 800faf0:	f023 0307 	bic.w	r3, r3, #7
 800faf4:	3308      	adds	r3, #8
 800faf6:	9303      	str	r3, [sp, #12]
 800faf8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fafa:	4433      	add	r3, r6
 800fafc:	9309      	str	r3, [sp, #36]	@ 0x24
 800fafe:	e76a      	b.n	800f9d6 <_svfiprintf_r+0x52>
 800fb00:	fb0c 3202 	mla	r2, ip, r2, r3
 800fb04:	460c      	mov	r4, r1
 800fb06:	2001      	movs	r0, #1
 800fb08:	e7a8      	b.n	800fa5c <_svfiprintf_r+0xd8>
 800fb0a:	2300      	movs	r3, #0
 800fb0c:	3401      	adds	r4, #1
 800fb0e:	9305      	str	r3, [sp, #20]
 800fb10:	4619      	mov	r1, r3
 800fb12:	f04f 0c0a 	mov.w	ip, #10
 800fb16:	4620      	mov	r0, r4
 800fb18:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fb1c:	3a30      	subs	r2, #48	@ 0x30
 800fb1e:	2a09      	cmp	r2, #9
 800fb20:	d903      	bls.n	800fb2a <_svfiprintf_r+0x1a6>
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d0c6      	beq.n	800fab4 <_svfiprintf_r+0x130>
 800fb26:	9105      	str	r1, [sp, #20]
 800fb28:	e7c4      	b.n	800fab4 <_svfiprintf_r+0x130>
 800fb2a:	fb0c 2101 	mla	r1, ip, r1, r2
 800fb2e:	4604      	mov	r4, r0
 800fb30:	2301      	movs	r3, #1
 800fb32:	e7f0      	b.n	800fb16 <_svfiprintf_r+0x192>
 800fb34:	ab03      	add	r3, sp, #12
 800fb36:	9300      	str	r3, [sp, #0]
 800fb38:	462a      	mov	r2, r5
 800fb3a:	4b0e      	ldr	r3, [pc, #56]	@ (800fb74 <_svfiprintf_r+0x1f0>)
 800fb3c:	a904      	add	r1, sp, #16
 800fb3e:	4638      	mov	r0, r7
 800fb40:	f3af 8000 	nop.w
 800fb44:	1c42      	adds	r2, r0, #1
 800fb46:	4606      	mov	r6, r0
 800fb48:	d1d6      	bne.n	800faf8 <_svfiprintf_r+0x174>
 800fb4a:	89ab      	ldrh	r3, [r5, #12]
 800fb4c:	065b      	lsls	r3, r3, #25
 800fb4e:	f53f af2d 	bmi.w	800f9ac <_svfiprintf_r+0x28>
 800fb52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fb54:	e72c      	b.n	800f9b0 <_svfiprintf_r+0x2c>
 800fb56:	ab03      	add	r3, sp, #12
 800fb58:	9300      	str	r3, [sp, #0]
 800fb5a:	462a      	mov	r2, r5
 800fb5c:	4b05      	ldr	r3, [pc, #20]	@ (800fb74 <_svfiprintf_r+0x1f0>)
 800fb5e:	a904      	add	r1, sp, #16
 800fb60:	4638      	mov	r0, r7
 800fb62:	f000 f879 	bl	800fc58 <_printf_i>
 800fb66:	e7ed      	b.n	800fb44 <_svfiprintf_r+0x1c0>
 800fb68:	08011174 	.word	0x08011174
 800fb6c:	0801117e 	.word	0x0801117e
 800fb70:	00000000 	.word	0x00000000
 800fb74:	0800f8cd 	.word	0x0800f8cd
 800fb78:	0801117a 	.word	0x0801117a

0800fb7c <_printf_common>:
 800fb7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fb80:	4616      	mov	r6, r2
 800fb82:	4698      	mov	r8, r3
 800fb84:	688a      	ldr	r2, [r1, #8]
 800fb86:	690b      	ldr	r3, [r1, #16]
 800fb88:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800fb8c:	4293      	cmp	r3, r2
 800fb8e:	bfb8      	it	lt
 800fb90:	4613      	movlt	r3, r2
 800fb92:	6033      	str	r3, [r6, #0]
 800fb94:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800fb98:	4607      	mov	r7, r0
 800fb9a:	460c      	mov	r4, r1
 800fb9c:	b10a      	cbz	r2, 800fba2 <_printf_common+0x26>
 800fb9e:	3301      	adds	r3, #1
 800fba0:	6033      	str	r3, [r6, #0]
 800fba2:	6823      	ldr	r3, [r4, #0]
 800fba4:	0699      	lsls	r1, r3, #26
 800fba6:	bf42      	ittt	mi
 800fba8:	6833      	ldrmi	r3, [r6, #0]
 800fbaa:	3302      	addmi	r3, #2
 800fbac:	6033      	strmi	r3, [r6, #0]
 800fbae:	6825      	ldr	r5, [r4, #0]
 800fbb0:	f015 0506 	ands.w	r5, r5, #6
 800fbb4:	d106      	bne.n	800fbc4 <_printf_common+0x48>
 800fbb6:	f104 0a19 	add.w	sl, r4, #25
 800fbba:	68e3      	ldr	r3, [r4, #12]
 800fbbc:	6832      	ldr	r2, [r6, #0]
 800fbbe:	1a9b      	subs	r3, r3, r2
 800fbc0:	42ab      	cmp	r3, r5
 800fbc2:	dc26      	bgt.n	800fc12 <_printf_common+0x96>
 800fbc4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800fbc8:	6822      	ldr	r2, [r4, #0]
 800fbca:	3b00      	subs	r3, #0
 800fbcc:	bf18      	it	ne
 800fbce:	2301      	movne	r3, #1
 800fbd0:	0692      	lsls	r2, r2, #26
 800fbd2:	d42b      	bmi.n	800fc2c <_printf_common+0xb0>
 800fbd4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800fbd8:	4641      	mov	r1, r8
 800fbda:	4638      	mov	r0, r7
 800fbdc:	47c8      	blx	r9
 800fbde:	3001      	adds	r0, #1
 800fbe0:	d01e      	beq.n	800fc20 <_printf_common+0xa4>
 800fbe2:	6823      	ldr	r3, [r4, #0]
 800fbe4:	6922      	ldr	r2, [r4, #16]
 800fbe6:	f003 0306 	and.w	r3, r3, #6
 800fbea:	2b04      	cmp	r3, #4
 800fbec:	bf02      	ittt	eq
 800fbee:	68e5      	ldreq	r5, [r4, #12]
 800fbf0:	6833      	ldreq	r3, [r6, #0]
 800fbf2:	1aed      	subeq	r5, r5, r3
 800fbf4:	68a3      	ldr	r3, [r4, #8]
 800fbf6:	bf0c      	ite	eq
 800fbf8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fbfc:	2500      	movne	r5, #0
 800fbfe:	4293      	cmp	r3, r2
 800fc00:	bfc4      	itt	gt
 800fc02:	1a9b      	subgt	r3, r3, r2
 800fc04:	18ed      	addgt	r5, r5, r3
 800fc06:	2600      	movs	r6, #0
 800fc08:	341a      	adds	r4, #26
 800fc0a:	42b5      	cmp	r5, r6
 800fc0c:	d11a      	bne.n	800fc44 <_printf_common+0xc8>
 800fc0e:	2000      	movs	r0, #0
 800fc10:	e008      	b.n	800fc24 <_printf_common+0xa8>
 800fc12:	2301      	movs	r3, #1
 800fc14:	4652      	mov	r2, sl
 800fc16:	4641      	mov	r1, r8
 800fc18:	4638      	mov	r0, r7
 800fc1a:	47c8      	blx	r9
 800fc1c:	3001      	adds	r0, #1
 800fc1e:	d103      	bne.n	800fc28 <_printf_common+0xac>
 800fc20:	f04f 30ff 	mov.w	r0, #4294967295
 800fc24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc28:	3501      	adds	r5, #1
 800fc2a:	e7c6      	b.n	800fbba <_printf_common+0x3e>
 800fc2c:	18e1      	adds	r1, r4, r3
 800fc2e:	1c5a      	adds	r2, r3, #1
 800fc30:	2030      	movs	r0, #48	@ 0x30
 800fc32:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800fc36:	4422      	add	r2, r4
 800fc38:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800fc3c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800fc40:	3302      	adds	r3, #2
 800fc42:	e7c7      	b.n	800fbd4 <_printf_common+0x58>
 800fc44:	2301      	movs	r3, #1
 800fc46:	4622      	mov	r2, r4
 800fc48:	4641      	mov	r1, r8
 800fc4a:	4638      	mov	r0, r7
 800fc4c:	47c8      	blx	r9
 800fc4e:	3001      	adds	r0, #1
 800fc50:	d0e6      	beq.n	800fc20 <_printf_common+0xa4>
 800fc52:	3601      	adds	r6, #1
 800fc54:	e7d9      	b.n	800fc0a <_printf_common+0x8e>
	...

0800fc58 <_printf_i>:
 800fc58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fc5c:	7e0f      	ldrb	r7, [r1, #24]
 800fc5e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800fc60:	2f78      	cmp	r7, #120	@ 0x78
 800fc62:	4691      	mov	r9, r2
 800fc64:	4680      	mov	r8, r0
 800fc66:	460c      	mov	r4, r1
 800fc68:	469a      	mov	sl, r3
 800fc6a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800fc6e:	d807      	bhi.n	800fc80 <_printf_i+0x28>
 800fc70:	2f62      	cmp	r7, #98	@ 0x62
 800fc72:	d80a      	bhi.n	800fc8a <_printf_i+0x32>
 800fc74:	2f00      	cmp	r7, #0
 800fc76:	f000 80d1 	beq.w	800fe1c <_printf_i+0x1c4>
 800fc7a:	2f58      	cmp	r7, #88	@ 0x58
 800fc7c:	f000 80b8 	beq.w	800fdf0 <_printf_i+0x198>
 800fc80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fc84:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800fc88:	e03a      	b.n	800fd00 <_printf_i+0xa8>
 800fc8a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800fc8e:	2b15      	cmp	r3, #21
 800fc90:	d8f6      	bhi.n	800fc80 <_printf_i+0x28>
 800fc92:	a101      	add	r1, pc, #4	@ (adr r1, 800fc98 <_printf_i+0x40>)
 800fc94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fc98:	0800fcf1 	.word	0x0800fcf1
 800fc9c:	0800fd05 	.word	0x0800fd05
 800fca0:	0800fc81 	.word	0x0800fc81
 800fca4:	0800fc81 	.word	0x0800fc81
 800fca8:	0800fc81 	.word	0x0800fc81
 800fcac:	0800fc81 	.word	0x0800fc81
 800fcb0:	0800fd05 	.word	0x0800fd05
 800fcb4:	0800fc81 	.word	0x0800fc81
 800fcb8:	0800fc81 	.word	0x0800fc81
 800fcbc:	0800fc81 	.word	0x0800fc81
 800fcc0:	0800fc81 	.word	0x0800fc81
 800fcc4:	0800fe03 	.word	0x0800fe03
 800fcc8:	0800fd2f 	.word	0x0800fd2f
 800fccc:	0800fdbd 	.word	0x0800fdbd
 800fcd0:	0800fc81 	.word	0x0800fc81
 800fcd4:	0800fc81 	.word	0x0800fc81
 800fcd8:	0800fe25 	.word	0x0800fe25
 800fcdc:	0800fc81 	.word	0x0800fc81
 800fce0:	0800fd2f 	.word	0x0800fd2f
 800fce4:	0800fc81 	.word	0x0800fc81
 800fce8:	0800fc81 	.word	0x0800fc81
 800fcec:	0800fdc5 	.word	0x0800fdc5
 800fcf0:	6833      	ldr	r3, [r6, #0]
 800fcf2:	1d1a      	adds	r2, r3, #4
 800fcf4:	681b      	ldr	r3, [r3, #0]
 800fcf6:	6032      	str	r2, [r6, #0]
 800fcf8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fcfc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800fd00:	2301      	movs	r3, #1
 800fd02:	e09c      	b.n	800fe3e <_printf_i+0x1e6>
 800fd04:	6833      	ldr	r3, [r6, #0]
 800fd06:	6820      	ldr	r0, [r4, #0]
 800fd08:	1d19      	adds	r1, r3, #4
 800fd0a:	6031      	str	r1, [r6, #0]
 800fd0c:	0606      	lsls	r6, r0, #24
 800fd0e:	d501      	bpl.n	800fd14 <_printf_i+0xbc>
 800fd10:	681d      	ldr	r5, [r3, #0]
 800fd12:	e003      	b.n	800fd1c <_printf_i+0xc4>
 800fd14:	0645      	lsls	r5, r0, #25
 800fd16:	d5fb      	bpl.n	800fd10 <_printf_i+0xb8>
 800fd18:	f9b3 5000 	ldrsh.w	r5, [r3]
 800fd1c:	2d00      	cmp	r5, #0
 800fd1e:	da03      	bge.n	800fd28 <_printf_i+0xd0>
 800fd20:	232d      	movs	r3, #45	@ 0x2d
 800fd22:	426d      	negs	r5, r5
 800fd24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fd28:	4858      	ldr	r0, [pc, #352]	@ (800fe8c <_printf_i+0x234>)
 800fd2a:	230a      	movs	r3, #10
 800fd2c:	e011      	b.n	800fd52 <_printf_i+0xfa>
 800fd2e:	6821      	ldr	r1, [r4, #0]
 800fd30:	6833      	ldr	r3, [r6, #0]
 800fd32:	0608      	lsls	r0, r1, #24
 800fd34:	f853 5b04 	ldr.w	r5, [r3], #4
 800fd38:	d402      	bmi.n	800fd40 <_printf_i+0xe8>
 800fd3a:	0649      	lsls	r1, r1, #25
 800fd3c:	bf48      	it	mi
 800fd3e:	b2ad      	uxthmi	r5, r5
 800fd40:	2f6f      	cmp	r7, #111	@ 0x6f
 800fd42:	4852      	ldr	r0, [pc, #328]	@ (800fe8c <_printf_i+0x234>)
 800fd44:	6033      	str	r3, [r6, #0]
 800fd46:	bf14      	ite	ne
 800fd48:	230a      	movne	r3, #10
 800fd4a:	2308      	moveq	r3, #8
 800fd4c:	2100      	movs	r1, #0
 800fd4e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800fd52:	6866      	ldr	r6, [r4, #4]
 800fd54:	60a6      	str	r6, [r4, #8]
 800fd56:	2e00      	cmp	r6, #0
 800fd58:	db05      	blt.n	800fd66 <_printf_i+0x10e>
 800fd5a:	6821      	ldr	r1, [r4, #0]
 800fd5c:	432e      	orrs	r6, r5
 800fd5e:	f021 0104 	bic.w	r1, r1, #4
 800fd62:	6021      	str	r1, [r4, #0]
 800fd64:	d04b      	beq.n	800fdfe <_printf_i+0x1a6>
 800fd66:	4616      	mov	r6, r2
 800fd68:	fbb5 f1f3 	udiv	r1, r5, r3
 800fd6c:	fb03 5711 	mls	r7, r3, r1, r5
 800fd70:	5dc7      	ldrb	r7, [r0, r7]
 800fd72:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800fd76:	462f      	mov	r7, r5
 800fd78:	42bb      	cmp	r3, r7
 800fd7a:	460d      	mov	r5, r1
 800fd7c:	d9f4      	bls.n	800fd68 <_printf_i+0x110>
 800fd7e:	2b08      	cmp	r3, #8
 800fd80:	d10b      	bne.n	800fd9a <_printf_i+0x142>
 800fd82:	6823      	ldr	r3, [r4, #0]
 800fd84:	07df      	lsls	r7, r3, #31
 800fd86:	d508      	bpl.n	800fd9a <_printf_i+0x142>
 800fd88:	6923      	ldr	r3, [r4, #16]
 800fd8a:	6861      	ldr	r1, [r4, #4]
 800fd8c:	4299      	cmp	r1, r3
 800fd8e:	bfde      	ittt	le
 800fd90:	2330      	movle	r3, #48	@ 0x30
 800fd92:	f806 3c01 	strble.w	r3, [r6, #-1]
 800fd96:	f106 36ff 	addle.w	r6, r6, #4294967295
 800fd9a:	1b92      	subs	r2, r2, r6
 800fd9c:	6122      	str	r2, [r4, #16]
 800fd9e:	f8cd a000 	str.w	sl, [sp]
 800fda2:	464b      	mov	r3, r9
 800fda4:	aa03      	add	r2, sp, #12
 800fda6:	4621      	mov	r1, r4
 800fda8:	4640      	mov	r0, r8
 800fdaa:	f7ff fee7 	bl	800fb7c <_printf_common>
 800fdae:	3001      	adds	r0, #1
 800fdb0:	d14a      	bne.n	800fe48 <_printf_i+0x1f0>
 800fdb2:	f04f 30ff 	mov.w	r0, #4294967295
 800fdb6:	b004      	add	sp, #16
 800fdb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fdbc:	6823      	ldr	r3, [r4, #0]
 800fdbe:	f043 0320 	orr.w	r3, r3, #32
 800fdc2:	6023      	str	r3, [r4, #0]
 800fdc4:	4832      	ldr	r0, [pc, #200]	@ (800fe90 <_printf_i+0x238>)
 800fdc6:	2778      	movs	r7, #120	@ 0x78
 800fdc8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800fdcc:	6823      	ldr	r3, [r4, #0]
 800fdce:	6831      	ldr	r1, [r6, #0]
 800fdd0:	061f      	lsls	r7, r3, #24
 800fdd2:	f851 5b04 	ldr.w	r5, [r1], #4
 800fdd6:	d402      	bmi.n	800fdde <_printf_i+0x186>
 800fdd8:	065f      	lsls	r7, r3, #25
 800fdda:	bf48      	it	mi
 800fddc:	b2ad      	uxthmi	r5, r5
 800fdde:	6031      	str	r1, [r6, #0]
 800fde0:	07d9      	lsls	r1, r3, #31
 800fde2:	bf44      	itt	mi
 800fde4:	f043 0320 	orrmi.w	r3, r3, #32
 800fde8:	6023      	strmi	r3, [r4, #0]
 800fdea:	b11d      	cbz	r5, 800fdf4 <_printf_i+0x19c>
 800fdec:	2310      	movs	r3, #16
 800fdee:	e7ad      	b.n	800fd4c <_printf_i+0xf4>
 800fdf0:	4826      	ldr	r0, [pc, #152]	@ (800fe8c <_printf_i+0x234>)
 800fdf2:	e7e9      	b.n	800fdc8 <_printf_i+0x170>
 800fdf4:	6823      	ldr	r3, [r4, #0]
 800fdf6:	f023 0320 	bic.w	r3, r3, #32
 800fdfa:	6023      	str	r3, [r4, #0]
 800fdfc:	e7f6      	b.n	800fdec <_printf_i+0x194>
 800fdfe:	4616      	mov	r6, r2
 800fe00:	e7bd      	b.n	800fd7e <_printf_i+0x126>
 800fe02:	6833      	ldr	r3, [r6, #0]
 800fe04:	6825      	ldr	r5, [r4, #0]
 800fe06:	6961      	ldr	r1, [r4, #20]
 800fe08:	1d18      	adds	r0, r3, #4
 800fe0a:	6030      	str	r0, [r6, #0]
 800fe0c:	062e      	lsls	r6, r5, #24
 800fe0e:	681b      	ldr	r3, [r3, #0]
 800fe10:	d501      	bpl.n	800fe16 <_printf_i+0x1be>
 800fe12:	6019      	str	r1, [r3, #0]
 800fe14:	e002      	b.n	800fe1c <_printf_i+0x1c4>
 800fe16:	0668      	lsls	r0, r5, #25
 800fe18:	d5fb      	bpl.n	800fe12 <_printf_i+0x1ba>
 800fe1a:	8019      	strh	r1, [r3, #0]
 800fe1c:	2300      	movs	r3, #0
 800fe1e:	6123      	str	r3, [r4, #16]
 800fe20:	4616      	mov	r6, r2
 800fe22:	e7bc      	b.n	800fd9e <_printf_i+0x146>
 800fe24:	6833      	ldr	r3, [r6, #0]
 800fe26:	1d1a      	adds	r2, r3, #4
 800fe28:	6032      	str	r2, [r6, #0]
 800fe2a:	681e      	ldr	r6, [r3, #0]
 800fe2c:	6862      	ldr	r2, [r4, #4]
 800fe2e:	2100      	movs	r1, #0
 800fe30:	4630      	mov	r0, r6
 800fe32:	f7f0 f9d5 	bl	80001e0 <memchr>
 800fe36:	b108      	cbz	r0, 800fe3c <_printf_i+0x1e4>
 800fe38:	1b80      	subs	r0, r0, r6
 800fe3a:	6060      	str	r0, [r4, #4]
 800fe3c:	6863      	ldr	r3, [r4, #4]
 800fe3e:	6123      	str	r3, [r4, #16]
 800fe40:	2300      	movs	r3, #0
 800fe42:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fe46:	e7aa      	b.n	800fd9e <_printf_i+0x146>
 800fe48:	6923      	ldr	r3, [r4, #16]
 800fe4a:	4632      	mov	r2, r6
 800fe4c:	4649      	mov	r1, r9
 800fe4e:	4640      	mov	r0, r8
 800fe50:	47d0      	blx	sl
 800fe52:	3001      	adds	r0, #1
 800fe54:	d0ad      	beq.n	800fdb2 <_printf_i+0x15a>
 800fe56:	6823      	ldr	r3, [r4, #0]
 800fe58:	079b      	lsls	r3, r3, #30
 800fe5a:	d413      	bmi.n	800fe84 <_printf_i+0x22c>
 800fe5c:	68e0      	ldr	r0, [r4, #12]
 800fe5e:	9b03      	ldr	r3, [sp, #12]
 800fe60:	4298      	cmp	r0, r3
 800fe62:	bfb8      	it	lt
 800fe64:	4618      	movlt	r0, r3
 800fe66:	e7a6      	b.n	800fdb6 <_printf_i+0x15e>
 800fe68:	2301      	movs	r3, #1
 800fe6a:	4632      	mov	r2, r6
 800fe6c:	4649      	mov	r1, r9
 800fe6e:	4640      	mov	r0, r8
 800fe70:	47d0      	blx	sl
 800fe72:	3001      	adds	r0, #1
 800fe74:	d09d      	beq.n	800fdb2 <_printf_i+0x15a>
 800fe76:	3501      	adds	r5, #1
 800fe78:	68e3      	ldr	r3, [r4, #12]
 800fe7a:	9903      	ldr	r1, [sp, #12]
 800fe7c:	1a5b      	subs	r3, r3, r1
 800fe7e:	42ab      	cmp	r3, r5
 800fe80:	dcf2      	bgt.n	800fe68 <_printf_i+0x210>
 800fe82:	e7eb      	b.n	800fe5c <_printf_i+0x204>
 800fe84:	2500      	movs	r5, #0
 800fe86:	f104 0619 	add.w	r6, r4, #25
 800fe8a:	e7f5      	b.n	800fe78 <_printf_i+0x220>
 800fe8c:	08011185 	.word	0x08011185
 800fe90:	08011196 	.word	0x08011196

0800fe94 <memmove>:
 800fe94:	4288      	cmp	r0, r1
 800fe96:	b510      	push	{r4, lr}
 800fe98:	eb01 0402 	add.w	r4, r1, r2
 800fe9c:	d902      	bls.n	800fea4 <memmove+0x10>
 800fe9e:	4284      	cmp	r4, r0
 800fea0:	4623      	mov	r3, r4
 800fea2:	d807      	bhi.n	800feb4 <memmove+0x20>
 800fea4:	1e43      	subs	r3, r0, #1
 800fea6:	42a1      	cmp	r1, r4
 800fea8:	d008      	beq.n	800febc <memmove+0x28>
 800feaa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800feae:	f803 2f01 	strb.w	r2, [r3, #1]!
 800feb2:	e7f8      	b.n	800fea6 <memmove+0x12>
 800feb4:	4402      	add	r2, r0
 800feb6:	4601      	mov	r1, r0
 800feb8:	428a      	cmp	r2, r1
 800feba:	d100      	bne.n	800febe <memmove+0x2a>
 800febc:	bd10      	pop	{r4, pc}
 800febe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fec2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fec6:	e7f7      	b.n	800feb8 <memmove+0x24>

0800fec8 <_sbrk_r>:
 800fec8:	b538      	push	{r3, r4, r5, lr}
 800feca:	4d06      	ldr	r5, [pc, #24]	@ (800fee4 <_sbrk_r+0x1c>)
 800fecc:	2300      	movs	r3, #0
 800fece:	4604      	mov	r4, r0
 800fed0:	4608      	mov	r0, r1
 800fed2:	602b      	str	r3, [r5, #0]
 800fed4:	f7f3 fbf0 	bl	80036b8 <_sbrk>
 800fed8:	1c43      	adds	r3, r0, #1
 800feda:	d102      	bne.n	800fee2 <_sbrk_r+0x1a>
 800fedc:	682b      	ldr	r3, [r5, #0]
 800fede:	b103      	cbz	r3, 800fee2 <_sbrk_r+0x1a>
 800fee0:	6023      	str	r3, [r4, #0]
 800fee2:	bd38      	pop	{r3, r4, r5, pc}
 800fee4:	200022ac 	.word	0x200022ac

0800fee8 <_realloc_r>:
 800fee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800feec:	4607      	mov	r7, r0
 800feee:	4614      	mov	r4, r2
 800fef0:	460d      	mov	r5, r1
 800fef2:	b921      	cbnz	r1, 800fefe <_realloc_r+0x16>
 800fef4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fef8:	4611      	mov	r1, r2
 800fefa:	f7ff bc5b 	b.w	800f7b4 <_malloc_r>
 800fefe:	b92a      	cbnz	r2, 800ff0c <_realloc_r+0x24>
 800ff00:	f7ff fbec 	bl	800f6dc <_free_r>
 800ff04:	4625      	mov	r5, r4
 800ff06:	4628      	mov	r0, r5
 800ff08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff0c:	f000 f81a 	bl	800ff44 <_malloc_usable_size_r>
 800ff10:	4284      	cmp	r4, r0
 800ff12:	4606      	mov	r6, r0
 800ff14:	d802      	bhi.n	800ff1c <_realloc_r+0x34>
 800ff16:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ff1a:	d8f4      	bhi.n	800ff06 <_realloc_r+0x1e>
 800ff1c:	4621      	mov	r1, r4
 800ff1e:	4638      	mov	r0, r7
 800ff20:	f7ff fc48 	bl	800f7b4 <_malloc_r>
 800ff24:	4680      	mov	r8, r0
 800ff26:	b908      	cbnz	r0, 800ff2c <_realloc_r+0x44>
 800ff28:	4645      	mov	r5, r8
 800ff2a:	e7ec      	b.n	800ff06 <_realloc_r+0x1e>
 800ff2c:	42b4      	cmp	r4, r6
 800ff2e:	4622      	mov	r2, r4
 800ff30:	4629      	mov	r1, r5
 800ff32:	bf28      	it	cs
 800ff34:	4632      	movcs	r2, r6
 800ff36:	f7ff fbc3 	bl	800f6c0 <memcpy>
 800ff3a:	4629      	mov	r1, r5
 800ff3c:	4638      	mov	r0, r7
 800ff3e:	f7ff fbcd 	bl	800f6dc <_free_r>
 800ff42:	e7f1      	b.n	800ff28 <_realloc_r+0x40>

0800ff44 <_malloc_usable_size_r>:
 800ff44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ff48:	1f18      	subs	r0, r3, #4
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	bfbc      	itt	lt
 800ff4e:	580b      	ldrlt	r3, [r1, r0]
 800ff50:	18c0      	addlt	r0, r0, r3
 800ff52:	4770      	bx	lr

0800ff54 <_init>:
 800ff54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff56:	bf00      	nop
 800ff58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ff5a:	bc08      	pop	{r3}
 800ff5c:	469e      	mov	lr, r3
 800ff5e:	4770      	bx	lr

0800ff60 <_fini>:
 800ff60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff62:	bf00      	nop
 800ff64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ff66:	bc08      	pop	{r3}
 800ff68:	469e      	mov	lr, r3
 800ff6a:	4770      	bx	lr
