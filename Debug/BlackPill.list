
BlackPill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000126a8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001748  08012848  08012848  00013848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013f90  08013f90  00015168  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08013f90  08013f90  00014f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013f98  08013f98  00015168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013f98  08013f98  00014f98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08013f9c  08013f9c  00014f9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000168  20000000  08013fa0  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000027b0  20000168  08014108  00015168  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002918  08014108  00015918  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00015168  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fcce  00000000  00000000  00015198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004e4d  00000000  00000000  00034e66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c18  00000000  00000000  00039cb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000015b8  00000000  00000000  0003b8d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cbb3  00000000  00000000  0003ce88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025697  00000000  00000000  00059a3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a3676  00000000  00000000  0007f0d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00122748  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007b3c  00000000  00000000  0012278c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009b  00000000  00000000  0012a2c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000168 	.word	0x20000168
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08012830 	.word	0x08012830

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000016c 	.word	0x2000016c
 80001dc:	08012830 	.word	0x08012830

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <ADC_Conversion_Cplt>:
	0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff,
	0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff,
	0xff, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xf8
};

void ADC_Conversion_Cplt(uint16_t *rawData, uint16_t *filtredData){
 80005bc:	b490      	push	{r4, r7}
 80005be:	b084      	sub	sp, #16
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
 80005c4:	6039      	str	r1, [r7, #0]
	for(uint8_t channel = 0; channel < ADC_NUM_SENSORS; channel++){
 80005c6:	2300      	movs	r3, #0
 80005c8:	73fb      	strb	r3, [r7, #15]
 80005ca:	e042      	b.n	8000652 <ADC_Conversion_Cplt+0x96>
		sumData[channel] -= mediaBuffer[index][channel];
 80005cc:	7bfb      	ldrb	r3, [r7, #15]
 80005ce:	4a2b      	ldr	r2, [pc, #172]	@ (800067c <ADC_Conversion_Cplt+0xc0>)
 80005d0:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80005d4:	4b2a      	ldr	r3, [pc, #168]	@ (8000680 <ADC_Conversion_Cplt+0xc4>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	461c      	mov	r4, r3
 80005da:	7bfa      	ldrb	r2, [r7, #15]
 80005dc:	4829      	ldr	r0, [pc, #164]	@ (8000684 <ADC_Conversion_Cplt+0xc8>)
 80005de:	4623      	mov	r3, r4
 80005e0:	00db      	lsls	r3, r3, #3
 80005e2:	4423      	add	r3, r4
 80005e4:	4413      	add	r3, r2
 80005e6:	f830 2013 	ldrh.w	r2, [r0, r3, lsl #1]
 80005ea:	7bfb      	ldrb	r3, [r7, #15]
 80005ec:	1a8a      	subs	r2, r1, r2
 80005ee:	b291      	uxth	r1, r2
 80005f0:	4a22      	ldr	r2, [pc, #136]	@ (800067c <ADC_Conversion_Cplt+0xc0>)
 80005f2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		sumData[channel] += rawData[channel];
 80005f6:	7bfb      	ldrb	r3, [r7, #15]
 80005f8:	4a20      	ldr	r2, [pc, #128]	@ (800067c <ADC_Conversion_Cplt+0xc0>)
 80005fa:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80005fe:	7bfb      	ldrb	r3, [r7, #15]
 8000600:	005b      	lsls	r3, r3, #1
 8000602:	687a      	ldr	r2, [r7, #4]
 8000604:	4413      	add	r3, r2
 8000606:	881a      	ldrh	r2, [r3, #0]
 8000608:	7bfb      	ldrb	r3, [r7, #15]
 800060a:	440a      	add	r2, r1
 800060c:	b291      	uxth	r1, r2
 800060e:	4a1b      	ldr	r2, [pc, #108]	@ (800067c <ADC_Conversion_Cplt+0xc0>)
 8000610:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		mediaBuffer[index][channel] = rawData[channel];
 8000614:	7bfb      	ldrb	r3, [r7, #15]
 8000616:	005b      	lsls	r3, r3, #1
 8000618:	687a      	ldr	r2, [r7, #4]
 800061a:	4413      	add	r3, r2
 800061c:	4a18      	ldr	r2, [pc, #96]	@ (8000680 <ADC_Conversion_Cplt+0xc4>)
 800061e:	7812      	ldrb	r2, [r2, #0]
 8000620:	4610      	mov	r0, r2
 8000622:	7bfa      	ldrb	r2, [r7, #15]
 8000624:	881c      	ldrh	r4, [r3, #0]
 8000626:	4917      	ldr	r1, [pc, #92]	@ (8000684 <ADC_Conversion_Cplt+0xc8>)
 8000628:	4603      	mov	r3, r0
 800062a:	00db      	lsls	r3, r3, #3
 800062c:	4403      	add	r3, r0
 800062e:	4413      	add	r3, r2
 8000630:	4622      	mov	r2, r4
 8000632:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		filtredData[channel] = (sumData[channel] >> ADC_DESPLAZAMIENTOS);
 8000636:	7bfb      	ldrb	r3, [r7, #15]
 8000638:	4a10      	ldr	r2, [pc, #64]	@ (800067c <ADC_Conversion_Cplt+0xc0>)
 800063a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800063e:	7bfb      	ldrb	r3, [r7, #15]
 8000640:	005b      	lsls	r3, r3, #1
 8000642:	6839      	ldr	r1, [r7, #0]
 8000644:	440b      	add	r3, r1
 8000646:	0952      	lsrs	r2, r2, #5
 8000648:	b292      	uxth	r2, r2
 800064a:	801a      	strh	r2, [r3, #0]
	for(uint8_t channel = 0; channel < ADC_NUM_SENSORS; channel++){
 800064c:	7bfb      	ldrb	r3, [r7, #15]
 800064e:	3301      	adds	r3, #1
 8000650:	73fb      	strb	r3, [r7, #15]
 8000652:	7bfb      	ldrb	r3, [r7, #15]
 8000654:	2b08      	cmp	r3, #8
 8000656:	d9b9      	bls.n	80005cc <ADC_Conversion_Cplt+0x10>
	}
	index++;
 8000658:	4b09      	ldr	r3, [pc, #36]	@ (8000680 <ADC_Conversion_Cplt+0xc4>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	3301      	adds	r3, #1
 800065e:	b2da      	uxtb	r2, r3
 8000660:	4b07      	ldr	r3, [pc, #28]	@ (8000680 <ADC_Conversion_Cplt+0xc4>)
 8000662:	701a      	strb	r2, [r3, #0]
	index &= (ADC_MEDIA_SIZE - 1);
 8000664:	4b06      	ldr	r3, [pc, #24]	@ (8000680 <ADC_Conversion_Cplt+0xc4>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	f003 031f 	and.w	r3, r3, #31
 800066c:	b2da      	uxtb	r2, r3
 800066e:	4b04      	ldr	r3, [pc, #16]	@ (8000680 <ADC_Conversion_Cplt+0xc4>)
 8000670:	701a      	strb	r2, [r3, #0]
}
 8000672:	bf00      	nop
 8000674:	3710      	adds	r7, #16
 8000676:	46bd      	mov	sp, r7
 8000678:	bc90      	pop	{r4, r7}
 800067a:	4770      	bx	lr
 800067c:	200003c4 	.word	0x200003c4
 8000680:	200003d6 	.word	0x200003d6
 8000684:	20000184 	.word	0x20000184

08000688 <inputState>:
#include "utilities.h"

s_Input debouncerBuff[MAX_INPUTS_DEBOUNCED];
uint8_t	inputIndex = 0;

void inputState(s_Input *stateInput){
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
	switch(stateInput->state){
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	785b      	ldrb	r3, [r3, #1]
 8000694:	2b03      	cmp	r3, #3
 8000696:	d849      	bhi.n	800072c <inputState+0xa4>
 8000698:	a201      	add	r2, pc, #4	@ (adr r2, 80006a0 <inputState+0x18>)
 800069a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800069e:	bf00      	nop
 80006a0:	080006c1 	.word	0x080006c1
 80006a4:	080006b1 	.word	0x080006b1
 80006a8:	080006ff 	.word	0x080006ff
 80006ac:	080006d1 	.word	0x080006d1
		case UP:
			if(stateInput->value == DOWN)
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d13d      	bne.n	8000734 <inputState+0xac>
				stateInput->state = FALLING;
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	2202      	movs	r2, #2
 80006bc:	705a      	strb	r2, [r3, #1]
		break;
 80006be:	e039      	b.n	8000734 <inputState+0xac>
		case DOWN:
			if(stateInput->value == UP)
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	2b01      	cmp	r3, #1
 80006c6:	d137      	bne.n	8000738 <inputState+0xb0>
				stateInput->state = RISING;
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	2203      	movs	r2, #3
 80006cc:	705a      	strb	r2, [r3, #1]
		break;
 80006ce:	e033      	b.n	8000738 <inputState+0xb0>
		case RISING:
			if(stateInput->value == UP){
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	2b01      	cmp	r3, #1
 80006d6:	d10e      	bne.n	80006f6 <inputState+0x6e>
				stateInput->state = UP;
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	2201      	movs	r2, #1
 80006dc:	705a      	strb	r2, [r3, #1]
				/*------------------------------*/
				stateInput->val = UP;
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	2201      	movs	r2, #1
 80006e2:	709a      	strb	r2, [r3, #2]
				if(stateInput->stateChanged != NULL)
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	685b      	ldr	r3, [r3, #4]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d027      	beq.n	800073c <inputState+0xb4>
					stateInput->stateChanged(RISING);
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	685b      	ldr	r3, [r3, #4]
 80006f0:	2003      	movs	r0, #3
 80006f2:	4798      	blx	r3
				/*------------------------------*/
			}else{
				stateInput->state = DOWN;
			}
		break;
 80006f4:	e022      	b.n	800073c <inputState+0xb4>
				stateInput->state = DOWN;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	2200      	movs	r2, #0
 80006fa:	705a      	strb	r2, [r3, #1]
		break;
 80006fc:	e01e      	b.n	800073c <inputState+0xb4>
		case FALLING:
			if(stateInput->value == DOWN){
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	2b00      	cmp	r3, #0
 8000704:	d10e      	bne.n	8000724 <inputState+0x9c>
				stateInput->state = DOWN;
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	2200      	movs	r2, #0
 800070a:	705a      	strb	r2, [r3, #1]
				/*------------------------------*/
				stateInput->val = DOWN;
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	2200      	movs	r2, #0
 8000710:	709a      	strb	r2, [r3, #2]
				if(stateInput->stateChanged != NULL)
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	685b      	ldr	r3, [r3, #4]
 8000716:	2b00      	cmp	r3, #0
 8000718:	d012      	beq.n	8000740 <inputState+0xb8>
					stateInput->stateChanged(FALLING);
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	685b      	ldr	r3, [r3, #4]
 800071e:	2002      	movs	r0, #2
 8000720:	4798      	blx	r3
				/*------------------------------*/
			}else{
				stateInput->state = UP;
			}
		break;
 8000722:	e00d      	b.n	8000740 <inputState+0xb8>
				stateInput->state = UP;
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	2201      	movs	r2, #1
 8000728:	705a      	strb	r2, [r3, #1]
		break;
 800072a:	e009      	b.n	8000740 <inputState+0xb8>
		default:
		stateInput->state = UP;
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	2201      	movs	r2, #1
 8000730:	705a      	strb	r2, [r3, #1]
	}
}
 8000732:	e006      	b.n	8000742 <inputState+0xba>
		break;
 8000734:	bf00      	nop
 8000736:	e004      	b.n	8000742 <inputState+0xba>
		break;
 8000738:	bf00      	nop
 800073a:	e002      	b.n	8000742 <inputState+0xba>
		break;
 800073c:	bf00      	nop
 800073e:	e000      	b.n	8000742 <inputState+0xba>
		break;
 8000740:	bf00      	nop
}
 8000742:	bf00      	nop
 8000744:	3708      	adds	r7, #8
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop

0800074c <Debounce_Init>:

void Debounce_Init(){
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
	for(inputIndex=0; inputIndex<MAX_INPUTS_DEBOUNCED; inputIndex++){
 8000750:	4b16      	ldr	r3, [pc, #88]	@ (80007ac <Debounce_Init+0x60>)
 8000752:	2200      	movs	r2, #0
 8000754:	701a      	strb	r2, [r3, #0]
 8000756:	e01d      	b.n	8000794 <Debounce_Init+0x48>
		debouncerBuff[inputIndex].getInputState = NULL;
 8000758:	4b14      	ldr	r3, [pc, #80]	@ (80007ac <Debounce_Init+0x60>)
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	4619      	mov	r1, r3
 800075e:	4a14      	ldr	r2, [pc, #80]	@ (80007b0 <Debounce_Init+0x64>)
 8000760:	460b      	mov	r3, r1
 8000762:	005b      	lsls	r3, r3, #1
 8000764:	440b      	add	r3, r1
 8000766:	009b      	lsls	r3, r3, #2
 8000768:	4413      	add	r3, r2
 800076a:	3308      	adds	r3, #8
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
		debouncerBuff[inputIndex].stateChanged = NULL;
 8000770:	4b0e      	ldr	r3, [pc, #56]	@ (80007ac <Debounce_Init+0x60>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	4619      	mov	r1, r3
 8000776:	4a0e      	ldr	r2, [pc, #56]	@ (80007b0 <Debounce_Init+0x64>)
 8000778:	460b      	mov	r3, r1
 800077a:	005b      	lsls	r3, r3, #1
 800077c:	440b      	add	r3, r1
 800077e:	009b      	lsls	r3, r3, #2
 8000780:	4413      	add	r3, r2
 8000782:	3304      	adds	r3, #4
 8000784:	2200      	movs	r2, #0
 8000786:	601a      	str	r2, [r3, #0]
	for(inputIndex=0; inputIndex<MAX_INPUTS_DEBOUNCED; inputIndex++){
 8000788:	4b08      	ldr	r3, [pc, #32]	@ (80007ac <Debounce_Init+0x60>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	3301      	adds	r3, #1
 800078e:	b2da      	uxtb	r2, r3
 8000790:	4b06      	ldr	r3, [pc, #24]	@ (80007ac <Debounce_Init+0x60>)
 8000792:	701a      	strb	r2, [r3, #0]
 8000794:	4b05      	ldr	r3, [pc, #20]	@ (80007ac <Debounce_Init+0x60>)
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d0dd      	beq.n	8000758 <Debounce_Init+0xc>
	}
	inputIndex = 0;
 800079c:	4b03      	ldr	r3, [pc, #12]	@ (80007ac <Debounce_Init+0x60>)
 800079e:	2200      	movs	r2, #0
 80007a0:	701a      	strb	r2, [r3, #0]
}
 80007a2:	bf00      	nop
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr
 80007ac:	200003e4 	.word	0x200003e4
 80007b0:	200003d8 	.word	0x200003d8

080007b4 <Debounce_Add>:

uint8_t Debounce_Add(uint8_t (*AbstHard)(), void (*STATECHANGED)(e_Estados estado)){
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
 80007bc:	6039      	str	r1, [r7, #0]
	if(inputIndex >= MAX_INPUTS_DEBOUNCED)
 80007be:	4b15      	ldr	r3, [pc, #84]	@ (8000814 <Debounce_Add+0x60>)
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <Debounce_Add+0x16>
		return 0;
 80007c6:	2300      	movs	r3, #0
 80007c8:	e01d      	b.n	8000806 <Debounce_Add+0x52>
	debouncerBuff[inputIndex].getInputState = AbstHard;
 80007ca:	4b12      	ldr	r3, [pc, #72]	@ (8000814 <Debounce_Add+0x60>)
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	4619      	mov	r1, r3
 80007d0:	4a11      	ldr	r2, [pc, #68]	@ (8000818 <Debounce_Add+0x64>)
 80007d2:	460b      	mov	r3, r1
 80007d4:	005b      	lsls	r3, r3, #1
 80007d6:	440b      	add	r3, r1
 80007d8:	009b      	lsls	r3, r3, #2
 80007da:	4413      	add	r3, r2
 80007dc:	3308      	adds	r3, #8
 80007de:	687a      	ldr	r2, [r7, #4]
 80007e0:	601a      	str	r2, [r3, #0]
	debouncerBuff[inputIndex].stateChanged = STATECHANGED;
 80007e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000814 <Debounce_Add+0x60>)
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	4619      	mov	r1, r3
 80007e8:	4a0b      	ldr	r2, [pc, #44]	@ (8000818 <Debounce_Add+0x64>)
 80007ea:	460b      	mov	r3, r1
 80007ec:	005b      	lsls	r3, r3, #1
 80007ee:	440b      	add	r3, r1
 80007f0:	009b      	lsls	r3, r3, #2
 80007f2:	4413      	add	r3, r2
 80007f4:	3304      	adds	r3, #4
 80007f6:	683a      	ldr	r2, [r7, #0]
 80007f8:	601a      	str	r2, [r3, #0]
	return inputIndex++;
 80007fa:	4b06      	ldr	r3, [pc, #24]	@ (8000814 <Debounce_Add+0x60>)
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	1c5a      	adds	r2, r3, #1
 8000800:	b2d1      	uxtb	r1, r2
 8000802:	4a04      	ldr	r2, [pc, #16]	@ (8000814 <Debounce_Add+0x60>)
 8000804:	7011      	strb	r1, [r2, #0]
}
 8000806:	4618      	mov	r0, r3
 8000808:	370c      	adds	r7, #12
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	200003e4 	.word	0x200003e4
 8000818:	200003d8 	.word	0x200003d8

0800081c <Debouncer_Task>:

void Debouncer_Task(){
 800081c:	b590      	push	{r4, r7, lr}
 800081e:	b083      	sub	sp, #12
 8000820:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < MAX_INPUTS_DEBOUNCED; i++){
 8000822:	2300      	movs	r3, #0
 8000824:	71fb      	strb	r3, [r7, #7]
 8000826:	e021      	b.n	800086c <Debouncer_Task+0x50>
		debouncerBuff[i].value = debouncerBuff[i].getInputState();
 8000828:	79fa      	ldrb	r2, [r7, #7]
 800082a:	4914      	ldr	r1, [pc, #80]	@ (800087c <Debouncer_Task+0x60>)
 800082c:	4613      	mov	r3, r2
 800082e:	005b      	lsls	r3, r3, #1
 8000830:	4413      	add	r3, r2
 8000832:	009b      	lsls	r3, r3, #2
 8000834:	440b      	add	r3, r1
 8000836:	3308      	adds	r3, #8
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	79fc      	ldrb	r4, [r7, #7]
 800083c:	4798      	blx	r3
 800083e:	4603      	mov	r3, r0
 8000840:	4619      	mov	r1, r3
 8000842:	4a0e      	ldr	r2, [pc, #56]	@ (800087c <Debouncer_Task+0x60>)
 8000844:	4623      	mov	r3, r4
 8000846:	005b      	lsls	r3, r3, #1
 8000848:	4423      	add	r3, r4
 800084a:	009b      	lsls	r3, r3, #2
 800084c:	4413      	add	r3, r2
 800084e:	460a      	mov	r2, r1
 8000850:	701a      	strb	r2, [r3, #0]
		inputState(&debouncerBuff[i]);
 8000852:	79fa      	ldrb	r2, [r7, #7]
 8000854:	4613      	mov	r3, r2
 8000856:	005b      	lsls	r3, r3, #1
 8000858:	4413      	add	r3, r2
 800085a:	009b      	lsls	r3, r3, #2
 800085c:	4a07      	ldr	r2, [pc, #28]	@ (800087c <Debouncer_Task+0x60>)
 800085e:	4413      	add	r3, r2
 8000860:	4618      	mov	r0, r3
 8000862:	f7ff ff11 	bl	8000688 <inputState>
	for(uint8_t i = 0; i < MAX_INPUTS_DEBOUNCED; i++){
 8000866:	79fb      	ldrb	r3, [r7, #7]
 8000868:	3301      	adds	r3, #1
 800086a:	71fb      	strb	r3, [r7, #7]
 800086c:	79fb      	ldrb	r3, [r7, #7]
 800086e:	2b00      	cmp	r3, #0
 8000870:	d0da      	beq.n	8000828 <Debouncer_Task+0xc>
	}
}
 8000872:	bf00      	nop
 8000874:	bf00      	nop
 8000876:	370c      	adds	r7, #12
 8000878:	46bd      	mov	sp, r7
 800087a:	bd90      	pop	{r4, r7, pc}
 800087c:	200003d8 	.word	0x200003d8

08000880 <MPU6050_Set_I2C_Communication>:
static e_system (*I2C_Mem_Read)(uint16_t Dev_Address, uint8_t Mem_Adress, uint8_t Mem_AddSize, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout);


void MPU6050_Set_I2C_Communication(
		e_system (*Mem_Write_Blocking)(uint16_t Dev_Address, uint8_t Mem_Adress, uint8_t Mem_AddSize, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout),
		e_system (*Mem_Read_Blocking)(uint16_t Dev_Address, uint8_t Mem_Adress, uint8_t Mem_AddSize, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout)){
 8000880:	b480      	push	{r7}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
 8000888:	6039      	str	r1, [r7, #0]
	I2C_Master_Transmit_Blocking = Mem_Write_Blocking;
 800088a:	4a06      	ldr	r2, [pc, #24]	@ (80008a4 <MPU6050_Set_I2C_Communication+0x24>)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	6013      	str	r3, [r2, #0]
	I2C_Mem_Read = Mem_Read_Blocking;
 8000890:	4a05      	ldr	r2, [pc, #20]	@ (80008a8 <MPU6050_Set_I2C_Communication+0x28>)
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	6013      	str	r3, [r2, #0]
}
 8000896:	bf00      	nop
 8000898:	370c      	adds	r7, #12
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop
 80008a4:	200003e8 	.word	0x200003e8
 80008a8:	200003ec 	.word	0x200003ec

080008ac <MPU6050_Init>:

e_system MPU6050_Init(s_MPU *mpu){
 80008ac:	b590      	push	{r4, r7, lr}
 80008ae:	b0b7      	sub	sp, #220	@ 0xdc
 80008b0:	af02      	add	r7, sp, #8
 80008b2:	6078      	str	r0, [r7, #4]
	uint8_t data = 0;
 80008b4:	2300      	movs	r3, #0
 80008b6:	f887 30ce 	strb.w	r3, [r7, #206]	@ 0xce
	e_system status = SYS_OK;
 80008ba:	2300      	movs	r3, #0
 80008bc:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf
	status += I2C_Mem_Read(MPU6050_ADDR, WHO_AM_I_MPU6050, 1, &data, 1, MPU_TIMEOUT);
 80008c0:	4b51      	ldr	r3, [pc, #324]	@ (8000a08 <MPU6050_Init+0x15c>)
 80008c2:	681c      	ldr	r4, [r3, #0]
 80008c4:	f107 03ce 	add.w	r3, r7, #206	@ 0xce
 80008c8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80008cc:	9201      	str	r2, [sp, #4]
 80008ce:	2201      	movs	r2, #1
 80008d0:	9200      	str	r2, [sp, #0]
 80008d2:	2201      	movs	r2, #1
 80008d4:	2175      	movs	r1, #117	@ 0x75
 80008d6:	20d0      	movs	r0, #208	@ 0xd0
 80008d8:	47a0      	blx	r4
 80008da:	4603      	mov	r3, r0
 80008dc:	461a      	mov	r2, r3
 80008de:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 80008e2:	4413      	add	r3, r2
 80008e4:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf
	if(data == WHO_AM_I_DEFAULT_VALUE){
 80008e8:	f897 30ce 	ldrb.w	r3, [r7, #206]	@ 0xce
 80008ec:	2b68      	cmp	r3, #104	@ 0x68
 80008ee:	f040 8084 	bne.w	80009fa <MPU6050_Init+0x14e>
		data = 0x00;
 80008f2:	2300      	movs	r3, #0
 80008f4:	f887 30ce 	strb.w	r3, [r7, #206]	@ 0xce
		status += I2C_Master_Transmit_Blocking(MPU6050_ADDR, POWER_MANAGEMENT_REG, 1, &data, 1, MPU_TIMEOUT);
 80008f8:	4b44      	ldr	r3, [pc, #272]	@ (8000a0c <MPU6050_Init+0x160>)
 80008fa:	681c      	ldr	r4, [r3, #0]
 80008fc:	f107 03ce 	add.w	r3, r7, #206	@ 0xce
 8000900:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000904:	9201      	str	r2, [sp, #4]
 8000906:	2201      	movs	r2, #1
 8000908:	9200      	str	r2, [sp, #0]
 800090a:	2201      	movs	r2, #1
 800090c:	216b      	movs	r1, #107	@ 0x6b
 800090e:	20d0      	movs	r0, #208	@ 0xd0
 8000910:	47a0      	blx	r4
 8000912:	4603      	mov	r3, r0
 8000914:	461a      	mov	r2, r3
 8000916:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 800091a:	4413      	add	r3, r2
 800091c:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf

		// Set data rate of 1 KHz (default)
		data = 0x07;
 8000920:	2307      	movs	r3, #7
 8000922:	f887 30ce 	strb.w	r3, [r7, #206]	@ 0xce
		status +=I2C_Master_Transmit_Blocking(MPU6050_ADDR, SMPLRT_DIV_REG, 1, &data, 1, MPU_TIMEOUT);
 8000926:	4b39      	ldr	r3, [pc, #228]	@ (8000a0c <MPU6050_Init+0x160>)
 8000928:	681c      	ldr	r4, [r3, #0]
 800092a:	f107 03ce 	add.w	r3, r7, #206	@ 0xce
 800092e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000932:	9201      	str	r2, [sp, #4]
 8000934:	2201      	movs	r2, #1
 8000936:	9200      	str	r2, [sp, #0]
 8000938:	2201      	movs	r2, #1
 800093a:	2119      	movs	r1, #25
 800093c:	20d0      	movs	r0, #208	@ 0xd0
 800093e:	47a0      	blx	r4
 8000940:	4603      	mov	r3, r0
 8000942:	461a      	mov	r2, r3
 8000944:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 8000948:	4413      	add	r3, r2
 800094a:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf

		// Set accelerometer range of +/- 2g (default)
		data = 0x00;
 800094e:	2300      	movs	r3, #0
 8000950:	f887 30ce 	strb.w	r3, [r7, #206]	@ 0xce
		status += I2C_Master_Transmit_Blocking(MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &data, 1, MPU_TIMEOUT);
 8000954:	4b2d      	ldr	r3, [pc, #180]	@ (8000a0c <MPU6050_Init+0x160>)
 8000956:	681c      	ldr	r4, [r3, #0]
 8000958:	f107 03ce 	add.w	r3, r7, #206	@ 0xce
 800095c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000960:	9201      	str	r2, [sp, #4]
 8000962:	2201      	movs	r2, #1
 8000964:	9200      	str	r2, [sp, #0]
 8000966:	2201      	movs	r2, #1
 8000968:	211c      	movs	r1, #28
 800096a:	20d0      	movs	r0, #208	@ 0xd0
 800096c:	47a0      	blx	r4
 800096e:	4603      	mov	r3, r0
 8000970:	461a      	mov	r2, r3
 8000972:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 8000976:	4413      	add	r3, r2
 8000978:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf

		// Set gyroscope range of +/- 250 degree/s (default)
		data = 0x00;
 800097c:	2300      	movs	r3, #0
 800097e:	f887 30ce 	strb.w	r3, [r7, #206]	@ 0xce
		status += I2C_Master_Transmit_Blocking(MPU6050_ADDR, GYRO_CONFIG_REG, 1, &data, 1, MPU_TIMEOUT);
 8000982:	4b22      	ldr	r3, [pc, #136]	@ (8000a0c <MPU6050_Init+0x160>)
 8000984:	681c      	ldr	r4, [r3, #0]
 8000986:	f107 03ce 	add.w	r3, r7, #206	@ 0xce
 800098a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800098e:	9201      	str	r2, [sp, #4]
 8000990:	2201      	movs	r2, #1
 8000992:	9200      	str	r2, [sp, #0]
 8000994:	2201      	movs	r2, #1
 8000996:	211b      	movs	r1, #27
 8000998:	20d0      	movs	r0, #208	@ 0xd0
 800099a:	47a0      	blx	r4
 800099c:	4603      	mov	r3, r0
 800099e:	461a      	mov	r2, r3
 80009a0:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 80009a4:	4413      	add	r3, r2
 80009a6:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf

		// Set Digital Low Pass Filter
		data = 0x03;
 80009aa:	2303      	movs	r3, #3
 80009ac:	f887 30ce 	strb.w	r3, [r7, #206]	@ 0xce
		status += I2C_Master_Transmit_Blocking(MPU6050_ADDR, CONFIG, 1, &data, 1, MPU_TIMEOUT);
 80009b0:	4b16      	ldr	r3, [pc, #88]	@ (8000a0c <MPU6050_Init+0x160>)
 80009b2:	681c      	ldr	r4, [r3, #0]
 80009b4:	f107 03ce 	add.w	r3, r7, #206	@ 0xce
 80009b8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80009bc:	9201      	str	r2, [sp, #4]
 80009be:	2201      	movs	r2, #1
 80009c0:	9200      	str	r2, [sp, #0]
 80009c2:	2201      	movs	r2, #1
 80009c4:	211a      	movs	r1, #26
 80009c6:	20d0      	movs	r0, #208	@ 0xd0
 80009c8:	47a0      	blx	r4
 80009ca:	4603      	mov	r3, r0
 80009cc:	461a      	mov	r2, r3
 80009ce:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 80009d2:	4413      	add	r3, r2
 80009d4:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf
		I2C_Master_Transmit_Blocking(MPU6050_ADDR, INT_PIN_CFG, 1, &data, 1, MPU_TIMEOUT);

		data = 0x01;
		I2C_Master_Transmit_Blocking(MPU6050_ADDR, INT_ENABLE, 1, &data, 1, MPU_TIMEOUT);
		 */
		*mpu = (s_MPU){
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	4618      	mov	r0, r3
 80009dc:	23c4      	movs	r3, #196	@ 0xc4
 80009de:	461a      	mov	r2, r3
 80009e0:	2100      	movs	r1, #0
 80009e2:	f011 fa93 	bl	8011f0c <memset>
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	2201      	movs	r2, #1
 80009ea:	f883 20c2 	strb.w	r2, [r3, #194]	@ 0xc2
		    },
		    .bit_data = {0},
		    .isInit = 1
		};

		if(status != SYS_OK){
 80009ee:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d003      	beq.n	80009fe <MPU6050_Init+0x152>
			return SYS_ERROR;
 80009f6:	2301      	movs	r3, #1
 80009f8:	e002      	b.n	8000a00 <MPU6050_Init+0x154>
		}

	}else{
		return SYS_ERROR;
 80009fa:	2301      	movs	r3, #1
 80009fc:	e000      	b.n	8000a00 <MPU6050_Init+0x154>
	}
	return SYS_OK;
 80009fe:	2300      	movs	r3, #0
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	37d4      	adds	r7, #212	@ 0xd4
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd90      	pop	{r4, r7, pc}
 8000a08:	200003ec 	.word	0x200003ec
 8000a0c:	200003e8 	.word	0x200003e8

08000a10 <MPU6050_Calibrate>:

void MPU6050_Calibrate(s_MPU *mpu){
 8000a10:	b590      	push	{r4, r7, lr}
 8000a12:	b08d      	sub	sp, #52	@ 0x34
 8000a14:	af02      	add	r7, sp, #8
 8000a16:	6078      	str	r0, [r7, #4]
	int32_t temp_raw[6] = {0};
 8000a18:	f107 030c 	add.w	r3, r7, #12
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	60da      	str	r2, [r3, #12]
 8000a26:	611a      	str	r2, [r3, #16]
 8000a28:	615a      	str	r2, [r3, #20]
	for (uint16_t i=0; i < NUM_SAMPLES; i++){
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8000a2e:	e069      	b.n	8000b04 <MPU6050_Calibrate+0xf4>
		I2C_Mem_Read(MPU6050_ADDR, ACCEL_XOUT_REG, 1, mpu->bit_data, 14, MPU_TIMEOUT);
 8000a30:	4b49      	ldr	r3, [pc, #292]	@ (8000b58 <MPU6050_Calibrate+0x148>)
 8000a32:	681c      	ldr	r4, [r3, #0]
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	33b4      	adds	r3, #180	@ 0xb4
 8000a38:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000a3c:	9201      	str	r2, [sp, #4]
 8000a3e:	220e      	movs	r2, #14
 8000a40:	9200      	str	r2, [sp, #0]
 8000a42:	2201      	movs	r2, #1
 8000a44:	213b      	movs	r1, #59	@ 0x3b
 8000a46:	20d0      	movs	r0, #208	@ 0xd0
 8000a48:	47a0      	blx	r4
		temp_raw[0] += (int16_t)((mpu->bit_data[0] << 8) | mpu->bit_data[1]);
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	687a      	ldr	r2, [r7, #4]
 8000a4e:	f892 20b4 	ldrb.w	r2, [r2, #180]	@ 0xb4
 8000a52:	b212      	sxth	r2, r2
 8000a54:	0212      	lsls	r2, r2, #8
 8000a56:	b211      	sxth	r1, r2
 8000a58:	687a      	ldr	r2, [r7, #4]
 8000a5a:	f892 20b5 	ldrb.w	r2, [r2, #181]	@ 0xb5
 8000a5e:	b212      	sxth	r2, r2
 8000a60:	430a      	orrs	r2, r1
 8000a62:	b212      	sxth	r2, r2
 8000a64:	4413      	add	r3, r2
 8000a66:	60fb      	str	r3, [r7, #12]
		temp_raw[1] += (int16_t)((mpu->bit_data[2] << 8) | mpu->bit_data[3]);
 8000a68:	693b      	ldr	r3, [r7, #16]
 8000a6a:	687a      	ldr	r2, [r7, #4]
 8000a6c:	f892 20b6 	ldrb.w	r2, [r2, #182]	@ 0xb6
 8000a70:	b212      	sxth	r2, r2
 8000a72:	0212      	lsls	r2, r2, #8
 8000a74:	b211      	sxth	r1, r2
 8000a76:	687a      	ldr	r2, [r7, #4]
 8000a78:	f892 20b7 	ldrb.w	r2, [r2, #183]	@ 0xb7
 8000a7c:	b212      	sxth	r2, r2
 8000a7e:	430a      	orrs	r2, r1
 8000a80:	b212      	sxth	r2, r2
 8000a82:	4413      	add	r3, r2
 8000a84:	613b      	str	r3, [r7, #16]
		temp_raw[2] += (int16_t)((mpu->bit_data[4] << 8) | mpu->bit_data[5]);
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	687a      	ldr	r2, [r7, #4]
 8000a8a:	f892 20b8 	ldrb.w	r2, [r2, #184]	@ 0xb8
 8000a8e:	b212      	sxth	r2, r2
 8000a90:	0212      	lsls	r2, r2, #8
 8000a92:	b211      	sxth	r1, r2
 8000a94:	687a      	ldr	r2, [r7, #4]
 8000a96:	f892 20b9 	ldrb.w	r2, [r2, #185]	@ 0xb9
 8000a9a:	b212      	sxth	r2, r2
 8000a9c:	430a      	orrs	r2, r1
 8000a9e:	b212      	sxth	r2, r2
 8000aa0:	4413      	add	r3, r2
 8000aa2:	617b      	str	r3, [r7, #20]

		temp_raw[3] += (int16_t)((mpu->bit_data[8 ] << 8) | mpu->bit_data[9 ]);
 8000aa4:	69bb      	ldr	r3, [r7, #24]
 8000aa6:	687a      	ldr	r2, [r7, #4]
 8000aa8:	f892 20bc 	ldrb.w	r2, [r2, #188]	@ 0xbc
 8000aac:	b212      	sxth	r2, r2
 8000aae:	0212      	lsls	r2, r2, #8
 8000ab0:	b211      	sxth	r1, r2
 8000ab2:	687a      	ldr	r2, [r7, #4]
 8000ab4:	f892 20bd 	ldrb.w	r2, [r2, #189]	@ 0xbd
 8000ab8:	b212      	sxth	r2, r2
 8000aba:	430a      	orrs	r2, r1
 8000abc:	b212      	sxth	r2, r2
 8000abe:	4413      	add	r3, r2
 8000ac0:	61bb      	str	r3, [r7, #24]
		temp_raw[4] += (int16_t)((mpu->bit_data[10] << 8) | mpu->bit_data[11]);
 8000ac2:	69fb      	ldr	r3, [r7, #28]
 8000ac4:	687a      	ldr	r2, [r7, #4]
 8000ac6:	f892 20be 	ldrb.w	r2, [r2, #190]	@ 0xbe
 8000aca:	b212      	sxth	r2, r2
 8000acc:	0212      	lsls	r2, r2, #8
 8000ace:	b211      	sxth	r1, r2
 8000ad0:	687a      	ldr	r2, [r7, #4]
 8000ad2:	f892 20bf 	ldrb.w	r2, [r2, #191]	@ 0xbf
 8000ad6:	b212      	sxth	r2, r2
 8000ad8:	430a      	orrs	r2, r1
 8000ada:	b212      	sxth	r2, r2
 8000adc:	4413      	add	r3, r2
 8000ade:	61fb      	str	r3, [r7, #28]
		temp_raw[5] += (int16_t)((mpu->bit_data[12] << 8) | mpu->bit_data[13]);
 8000ae0:	6a3b      	ldr	r3, [r7, #32]
 8000ae2:	687a      	ldr	r2, [r7, #4]
 8000ae4:	f892 20c0 	ldrb.w	r2, [r2, #192]	@ 0xc0
 8000ae8:	b212      	sxth	r2, r2
 8000aea:	0212      	lsls	r2, r2, #8
 8000aec:	b211      	sxth	r1, r2
 8000aee:	687a      	ldr	r2, [r7, #4]
 8000af0:	f892 20c1 	ldrb.w	r2, [r2, #193]	@ 0xc1
 8000af4:	b212      	sxth	r2, r2
 8000af6:	430a      	orrs	r2, r1
 8000af8:	b212      	sxth	r2, r2
 8000afa:	4413      	add	r3, r2
 8000afc:	623b      	str	r3, [r7, #32]
	for (uint16_t i=0; i < NUM_SAMPLES; i++){
 8000afe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000b00:	3301      	adds	r3, #1
 8000b02:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8000b04:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000b06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000b0a:	d391      	bcc.n	8000a30 <MPU6050_Calibrate+0x20>
	}
    mpu->Acc.offset.x = (int16_t)(temp_raw[0] >> NUM_SAMPLES_BITS);
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	131b      	asrs	r3, r3, #12
 8000b10:	b21a      	sxth	r2, r3
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	80da      	strh	r2, [r3, #6]
    mpu->Acc.offset.y = (int16_t)(temp_raw[1] >> NUM_SAMPLES_BITS);
 8000b16:	693b      	ldr	r3, [r7, #16]
 8000b18:	131b      	asrs	r3, r3, #12
 8000b1a:	b21a      	sxth	r2, r3
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	811a      	strh	r2, [r3, #8]
    mpu->Acc.offset.z = (int16_t)(temp_raw[2] >> NUM_SAMPLES_BITS) - SCALE_FACTOR;
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	131b      	asrs	r3, r3, #12
 8000b24:	b29b      	uxth	r3, r3
 8000b26:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8000b2a:	b29b      	uxth	r3, r3
 8000b2c:	b21a      	sxth	r2, r3
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	815a      	strh	r2, [r3, #10]

    mpu->Gyro.offset.x = (int16_t)(temp_raw[3] >> NUM_SAMPLES_BITS);
 8000b32:	69bb      	ldr	r3, [r7, #24]
 8000b34:	131b      	asrs	r3, r3, #12
 8000b36:	b21a      	sxth	r2, r3
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	825a      	strh	r2, [r3, #18]
	mpu->Gyro.offset.y = (int16_t)(temp_raw[4] >> NUM_SAMPLES_BITS);
 8000b3c:	69fb      	ldr	r3, [r7, #28]
 8000b3e:	131b      	asrs	r3, r3, #12
 8000b40:	b21a      	sxth	r2, r3
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	829a      	strh	r2, [r3, #20]
	mpu->Gyro.offset.z = (int16_t)(temp_raw[5] >> NUM_SAMPLES_BITS);
 8000b46:	6a3b      	ldr	r3, [r7, #32]
 8000b48:	131b      	asrs	r3, r3, #12
 8000b4a:	b21a      	sxth	r2, r3
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	82da      	strh	r2, [r3, #22]

	//mpu->Angle.pitch = atan2f(mpu->Acc.offset.y, sqrtf(mpu->Acc.offset.x * mpu->Acc.offset.x + mpu->Acc.offset.z * mpu->Acc.offset.z)) * 180.0f / M_PI;
	//mpu->Angle.roll  = atan2f(-mpu->Acc.offset.x, mpu->Acc.offset.z) * 180.0f / M_PI;
}
 8000b50:	bf00      	nop
 8000b52:	372c      	adds	r7, #44	@ 0x2c
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd90      	pop	{r4, r7, pc}
 8000b58:	200003ec 	.word	0x200003ec

08000b5c <MPU6050_I2C_DMA_Cplt>:

void MPU6050_I2C_DMA_Cplt(s_MPU *mpu){
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
	// ACC: GET RAW INFORMATION
	mpu->MAF.rawData[0] = (((mpu->bit_data[0] << 8) | mpu->bit_data[1]));
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 8000b6a:	b21b      	sxth	r3, r3
 8000b6c:	021b      	lsls	r3, r3, #8
 8000b6e:	b21a      	sxth	r2, r3
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	f893 30b5 	ldrb.w	r3, [r3, #181]	@ 0xb5
 8000b76:	b21b      	sxth	r3, r3
 8000b78:	4313      	orrs	r3, r2
 8000b7a:	b21a      	sxth	r2, r3
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	f8a3 2098 	strh.w	r2, [r3, #152]	@ 0x98
	mpu->MAF.rawData[1] = (((mpu->bit_data[2] << 8) | mpu->bit_data[3]));
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	f893 30b6 	ldrb.w	r3, [r3, #182]	@ 0xb6
 8000b88:	b21b      	sxth	r3, r3
 8000b8a:	021b      	lsls	r3, r3, #8
 8000b8c:	b21a      	sxth	r2, r3
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	f893 30b7 	ldrb.w	r3, [r3, #183]	@ 0xb7
 8000b94:	b21b      	sxth	r3, r3
 8000b96:	4313      	orrs	r3, r2
 8000b98:	b21a      	sxth	r2, r3
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
	mpu->MAF.rawData[2] = (((mpu->bit_data[4] << 8) | mpu->bit_data[5]));
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	f893 30b8 	ldrb.w	r3, [r3, #184]	@ 0xb8
 8000ba6:	b21b      	sxth	r3, r3
 8000ba8:	021b      	lsls	r3, r3, #8
 8000baa:	b21a      	sxth	r2, r3
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	f893 30b9 	ldrb.w	r3, [r3, #185]	@ 0xb9
 8000bb2:	b21b      	sxth	r3, r3
 8000bb4:	4313      	orrs	r3, r2
 8000bb6:	b21a      	sxth	r2, r3
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
	// GYR: GET RAW INFORMATION
	mpu->MAF.rawData[3] = (((mpu->bit_data[8 ] << 8) | mpu->bit_data[9 ]));
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	f893 30bc 	ldrb.w	r3, [r3, #188]	@ 0xbc
 8000bc4:	b21b      	sxth	r3, r3
 8000bc6:	021b      	lsls	r3, r3, #8
 8000bc8:	b21a      	sxth	r2, r3
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	f893 30bd 	ldrb.w	r3, [r3, #189]	@ 0xbd
 8000bd0:	b21b      	sxth	r3, r3
 8000bd2:	4313      	orrs	r3, r2
 8000bd4:	b21a      	sxth	r2, r3
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	f8a3 209e 	strh.w	r2, [r3, #158]	@ 0x9e
	mpu->MAF.rawData[4] = (((mpu->bit_data[10] << 8) | mpu->bit_data[11]));
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	f893 30be 	ldrb.w	r3, [r3, #190]	@ 0xbe
 8000be2:	b21b      	sxth	r3, r3
 8000be4:	021b      	lsls	r3, r3, #8
 8000be6:	b21a      	sxth	r2, r3
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	f893 30bf 	ldrb.w	r3, [r3, #191]	@ 0xbf
 8000bee:	b21b      	sxth	r3, r3
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	b21a      	sxth	r2, r3
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
	mpu->MAF.rawData[5] = (((mpu->bit_data[12] << 8) | mpu->bit_data[13]));
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 8000c00:	b21b      	sxth	r3, r3
 8000c02:	021b      	lsls	r3, r3, #8
 8000c04:	b21a      	sxth	r2, r3
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 8000c0c:	b21b      	sxth	r3, r3
 8000c0e:	4313      	orrs	r3, r2
 8000c10:	b21a      	sxth	r2, r3
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	f8a3 20a2 	strh.w	r2, [r3, #162]	@ 0xa2
	mpu->MAF.isOn = TRUE;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	f883 20b1 	strb.w	r2, [r3, #177]	@ 0xb1
}
 8000c20:	bf00      	nop
 8000c22:	370c      	adds	r7, #12
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr

08000c2c <MPU6050_MAF>:

void MPU6050_MAF(s_MPU *mpu){ //Moving Average Filter
 8000c2c:	b490      	push	{r4, r7}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
	if(mpu->MAF.isOn){
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	f893 30b1 	ldrb.w	r3, [r3, #177]	@ 0xb1
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	f000 80b8 	beq.w	8000db0 <MPU6050_MAF+0x184>
		mpu->MAF.isOn = FALSE;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2200      	movs	r2, #0
 8000c44:	f883 20b1 	strb.w	r2, [r3, #177]	@ 0xb1
		for(uint8_t axis = 0; axis < NUM_AXIS; axis++){
 8000c48:	2300      	movs	r3, #0
 8000c4a:	73fb      	strb	r3, [r7, #15]
 8000c4c:	e04e      	b.n	8000cec <MPU6050_MAF+0xc0>
			mpu->MAF.sumData[axis] -= mpu->MAF.mediaBuffer[mpu->MAF.index][axis];
 8000c4e:	7bfa      	ldrb	r2, [r7, #15]
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	3208      	adds	r2, #8
 8000c54:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 8000c5e:	461c      	mov	r4, r3
 8000c60:	7bf8      	ldrb	r0, [r7, #15]
 8000c62:	687a      	ldr	r2, [r7, #4]
 8000c64:	4623      	mov	r3, r4
 8000c66:	005b      	lsls	r3, r3, #1
 8000c68:	4423      	add	r3, r4
 8000c6a:	005b      	lsls	r3, r3, #1
 8000c6c:	4403      	add	r3, r0
 8000c6e:	331c      	adds	r3, #28
 8000c70:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000c74:	7bfa      	ldrb	r2, [r7, #15]
 8000c76:	1ac9      	subs	r1, r1, r3
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	3208      	adds	r2, #8
 8000c7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			mpu->MAF.sumData[axis] += mpu->MAF.rawData[axis];
 8000c80:	7bfa      	ldrb	r2, [r7, #15]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	3208      	adds	r2, #8
 8000c86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c8a:	7bf9      	ldrb	r1, [r7, #15]
 8000c8c:	687a      	ldr	r2, [r7, #4]
 8000c8e:	314c      	adds	r1, #76	@ 0x4c
 8000c90:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8000c94:	4611      	mov	r1, r2
 8000c96:	7bfa      	ldrb	r2, [r7, #15]
 8000c98:	4419      	add	r1, r3
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	3208      	adds	r2, #8
 8000c9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			mpu->MAF.mediaBuffer[mpu->MAF.index][axis] = mpu->MAF.rawData[axis];
 8000ca2:	7bfa      	ldrb	r2, [r7, #15]
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 8000caa:	4618      	mov	r0, r3
 8000cac:	7bf9      	ldrb	r1, [r7, #15]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	324c      	adds	r2, #76	@ 0x4c
 8000cb2:	f933 4012 	ldrsh.w	r4, [r3, r2, lsl #1]
 8000cb6:	687a      	ldr	r2, [r7, #4]
 8000cb8:	4603      	mov	r3, r0
 8000cba:	005b      	lsls	r3, r3, #1
 8000cbc:	4403      	add	r3, r0
 8000cbe:	005b      	lsls	r3, r3, #1
 8000cc0:	440b      	add	r3, r1
 8000cc2:	331c      	adds	r3, #28
 8000cc4:	4621      	mov	r1, r4
 8000cc6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			mpu->MAF.filtredData[axis] = (mpu->MAF.sumData[axis] >> NUM_MAF_BITS);
 8000cca:	7bfa      	ldrb	r2, [r7, #15]
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	3208      	adds	r2, #8
 8000cd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cd4:	10da      	asrs	r2, r3, #3
 8000cd6:	7bfb      	ldrb	r3, [r7, #15]
 8000cd8:	b211      	sxth	r1, r2
 8000cda:	687a      	ldr	r2, [r7, #4]
 8000cdc:	3350      	adds	r3, #80	@ 0x50
 8000cde:	005b      	lsls	r3, r3, #1
 8000ce0:	4413      	add	r3, r2
 8000ce2:	460a      	mov	r2, r1
 8000ce4:	809a      	strh	r2, [r3, #4]
		for(uint8_t axis = 0; axis < NUM_AXIS; axis++){
 8000ce6:	7bfb      	ldrb	r3, [r7, #15]
 8000ce8:	3301      	adds	r3, #1
 8000cea:	73fb      	strb	r3, [r7, #15]
 8000cec:	7bfb      	ldrb	r3, [r7, #15]
 8000cee:	2b05      	cmp	r3, #5
 8000cf0:	d9ad      	bls.n	8000c4e <MPU6050_MAF+0x22>
		}
		mpu->MAF.index++;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	b2da      	uxtb	r2, r3
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0
		mpu->MAF.index &= (NUM_MAF - 1);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 8000d08:	f003 0307 	and.w	r3, r3, #7
 8000d0c:	b2da      	uxtb	r2, r3
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0

		// ACC: CALCULATE TRUE ACCELERATION
		mpu->Acc.x = mpu->MAF.filtredData[0] - mpu->Acc.offset.x;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	f9b3 30a4 	ldrsh.w	r3, [r3, #164]	@ 0xa4
 8000d1a:	b29a      	uxth	r2, r3
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000d22:	b29b      	uxth	r3, r3
 8000d24:	1ad3      	subs	r3, r2, r3
 8000d26:	b29b      	uxth	r3, r3
 8000d28:	b21a      	sxth	r2, r3
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	801a      	strh	r2, [r3, #0]
		mpu->Acc.y = mpu->MAF.filtredData[1] - mpu->Acc.offset.y;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	f9b3 30a6 	ldrsh.w	r3, [r3, #166]	@ 0xa6
 8000d34:	b29a      	uxth	r2, r3
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000d3c:	b29b      	uxth	r3, r3
 8000d3e:	1ad3      	subs	r3, r2, r3
 8000d40:	b29b      	uxth	r3, r3
 8000d42:	b21a      	sxth	r2, r3
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	805a      	strh	r2, [r3, #2]
		mpu->Acc.z = mpu->MAF.filtredData[2] - mpu->Acc.offset.z;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	f9b3 30a8 	ldrsh.w	r3, [r3, #168]	@ 0xa8
 8000d4e:	b29a      	uxth	r2, r3
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000d56:	b29b      	uxth	r3, r3
 8000d58:	1ad3      	subs	r3, r2, r3
 8000d5a:	b29b      	uxth	r3, r3
 8000d5c:	b21a      	sxth	r2, r3
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	809a      	strh	r2, [r3, #4]
		// GYR: CALCULATE TRUE ACCELERATION
		mpu->Gyro.x = mpu->MAF.filtredData[3] - mpu->Gyro.offset.x;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	f9b3 30aa 	ldrsh.w	r3, [r3, #170]	@ 0xaa
 8000d68:	b29a      	uxth	r2, r3
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8000d70:	b29b      	uxth	r3, r3
 8000d72:	1ad3      	subs	r3, r2, r3
 8000d74:	b29b      	uxth	r3, r3
 8000d76:	b21a      	sxth	r2, r3
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	819a      	strh	r2, [r3, #12]
		mpu->Gyro.y = mpu->MAF.filtredData[4] - mpu->Gyro.offset.y;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	f9b3 30ac 	ldrsh.w	r3, [r3, #172]	@ 0xac
 8000d82:	b29a      	uxth	r2, r3
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000d8a:	b29b      	uxth	r3, r3
 8000d8c:	1ad3      	subs	r3, r2, r3
 8000d8e:	b29b      	uxth	r3, r3
 8000d90:	b21a      	sxth	r2, r3
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	81da      	strh	r2, [r3, #14]
		mpu->Gyro.z = mpu->MAF.filtredData[5] - mpu->Gyro.offset.z;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	f9b3 30ae 	ldrsh.w	r3, [r3, #174]	@ 0xae
 8000d9c:	b29a      	uxth	r2, r3
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8000da4:	b29b      	uxth	r3, r3
 8000da6:	1ad3      	subs	r3, r2, r3
 8000da8:	b29b      	uxth	r3, r3
 8000daa:	b21a      	sxth	r2, r3
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	821a      	strh	r2, [r3, #16]
	}
}
 8000db0:	bf00      	nop
 8000db2:	3710      	adds	r7, #16
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bc90      	pop	{r4, r7}
 8000db8:	4770      	bx	lr
	...

08000dbc <Display_Set_I2C_Master_Transmit>:
	uint8_t PageData[6];
}Update;

void Display_Set_I2C_Master_Transmit(
		e_system (*Master_Transmit)(uint16_t DevAddress, uint8_t reg, uint8_t *pData, uint16_t Size),
		e_system (*Master_Transmit_Blocking)(uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)){
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
 8000dc4:	6039      	str	r1, [r7, #0]
	I2C_Master_Transmit = Master_Transmit;
 8000dc6:	4a06      	ldr	r2, [pc, #24]	@ (8000de0 <Display_Set_I2C_Master_Transmit+0x24>)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	6013      	str	r3, [r2, #0]
	I2C_Master_Transmit_Blocking = Master_Transmit_Blocking;
 8000dcc:	4a05      	ldr	r2, [pc, #20]	@ (8000de4 <Display_Set_I2C_Master_Transmit+0x28>)
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	6013      	str	r3, [r2, #0]
}
 8000dd2:	bf00      	nop
 8000dd4:	370c      	adds	r7, #12
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	200003f8 	.word	0x200003f8
 8000de4:	200003fc 	.word	0x200003fc

08000de8 <Display_Init>:

e_system Display_Init(){
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 8000dee:	2300      	movs	r3, #0
 8000df0:	71fb      	strb	r3, [r7, #7]

    status += SSD1306_WRITECOMMAND(0xAE);   // Display off
 8000df2:	22ae      	movs	r2, #174	@ 0xae
 8000df4:	2100      	movs	r1, #0
 8000df6:	2078      	movs	r0, #120	@ 0x78
 8000df8:	f000 f94a 	bl	8001090 <ssd1306_I2C_Write>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	461a      	mov	r2, r3
 8000e00:	79fb      	ldrb	r3, [r7, #7]
 8000e02:	4413      	add	r3, r2
 8000e04:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x20);   // Set Memory Addressing Mode
 8000e06:	2220      	movs	r2, #32
 8000e08:	2100      	movs	r1, #0
 8000e0a:	2078      	movs	r0, #120	@ 0x78
 8000e0c:	f000 f940 	bl	8001090 <ssd1306_I2C_Write>
 8000e10:	4603      	mov	r3, r0
 8000e12:	461a      	mov	r2, r3
 8000e14:	79fb      	ldrb	r3, [r7, #7]
 8000e16:	4413      	add	r3, r2
 8000e18:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x10);   // 00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000e1a:	2210      	movs	r2, #16
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	2078      	movs	r0, #120	@ 0x78
 8000e20:	f000 f936 	bl	8001090 <ssd1306_I2C_Write>
 8000e24:	4603      	mov	r3, r0
 8000e26:	461a      	mov	r2, r3
 8000e28:	79fb      	ldrb	r3, [r7, #7]
 8000e2a:	4413      	add	r3, r2
 8000e2c:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xB0);   // Set Page Start Address for Page Addressing Mode,0-7
 8000e2e:	22b0      	movs	r2, #176	@ 0xb0
 8000e30:	2100      	movs	r1, #0
 8000e32:	2078      	movs	r0, #120	@ 0x78
 8000e34:	f000 f92c 	bl	8001090 <ssd1306_I2C_Write>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	79fb      	ldrb	r3, [r7, #7]
 8000e3e:	4413      	add	r3, r2
 8000e40:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xC8);   // Set COM Output Scan Direction
 8000e42:	22c8      	movs	r2, #200	@ 0xc8
 8000e44:	2100      	movs	r1, #0
 8000e46:	2078      	movs	r0, #120	@ 0x78
 8000e48:	f000 f922 	bl	8001090 <ssd1306_I2C_Write>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	461a      	mov	r2, r3
 8000e50:	79fb      	ldrb	r3, [r7, #7]
 8000e52:	4413      	add	r3, r2
 8000e54:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x00);   // Set low column address
 8000e56:	2200      	movs	r2, #0
 8000e58:	2100      	movs	r1, #0
 8000e5a:	2078      	movs	r0, #120	@ 0x78
 8000e5c:	f000 f918 	bl	8001090 <ssd1306_I2C_Write>
 8000e60:	4603      	mov	r3, r0
 8000e62:	461a      	mov	r2, r3
 8000e64:	79fb      	ldrb	r3, [r7, #7]
 8000e66:	4413      	add	r3, r2
 8000e68:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x10);   // Set high column address
 8000e6a:	2210      	movs	r2, #16
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	2078      	movs	r0, #120	@ 0x78
 8000e70:	f000 f90e 	bl	8001090 <ssd1306_I2C_Write>
 8000e74:	4603      	mov	r3, r0
 8000e76:	461a      	mov	r2, r3
 8000e78:	79fb      	ldrb	r3, [r7, #7]
 8000e7a:	4413      	add	r3, r2
 8000e7c:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x40);   // Set start line address
 8000e7e:	2240      	movs	r2, #64	@ 0x40
 8000e80:	2100      	movs	r1, #0
 8000e82:	2078      	movs	r0, #120	@ 0x78
 8000e84:	f000 f904 	bl	8001090 <ssd1306_I2C_Write>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	79fb      	ldrb	r3, [r7, #7]
 8000e8e:	4413      	add	r3, r2
 8000e90:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x81);   // set contrast control register
 8000e92:	2281      	movs	r2, #129	@ 0x81
 8000e94:	2100      	movs	r1, #0
 8000e96:	2078      	movs	r0, #120	@ 0x78
 8000e98:	f000 f8fa 	bl	8001090 <ssd1306_I2C_Write>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	461a      	mov	r2, r3
 8000ea0:	79fb      	ldrb	r3, [r7, #7]
 8000ea2:	4413      	add	r3, r2
 8000ea4:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xFF);
 8000ea6:	22ff      	movs	r2, #255	@ 0xff
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	2078      	movs	r0, #120	@ 0x78
 8000eac:	f000 f8f0 	bl	8001090 <ssd1306_I2C_Write>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	79fb      	ldrb	r3, [r7, #7]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xA1);   // Set segment re-map 0 to 127
 8000eba:	22a1      	movs	r2, #161	@ 0xa1
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	2078      	movs	r0, #120	@ 0x78
 8000ec0:	f000 f8e6 	bl	8001090 <ssd1306_I2C_Write>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	461a      	mov	r2, r3
 8000ec8:	79fb      	ldrb	r3, [r7, #7]
 8000eca:	4413      	add	r3, r2
 8000ecc:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xA6);   // Set normal display
 8000ece:	22a6      	movs	r2, #166	@ 0xa6
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	2078      	movs	r0, #120	@ 0x78
 8000ed4:	f000 f8dc 	bl	8001090 <ssd1306_I2C_Write>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	461a      	mov	r2, r3
 8000edc:	79fb      	ldrb	r3, [r7, #7]
 8000ede:	4413      	add	r3, r2
 8000ee0:	71fb      	strb	r3, [r7, #7]

    status += SSD1306_WRITECOMMAND(0xA8);   // Set multiplex ratio(1 to 64)
 8000ee2:	22a8      	movs	r2, #168	@ 0xa8
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	2078      	movs	r0, #120	@ 0x78
 8000ee8:	f000 f8d2 	bl	8001090 <ssd1306_I2C_Write>
 8000eec:	4603      	mov	r3, r0
 8000eee:	461a      	mov	r2, r3
 8000ef0:	79fb      	ldrb	r3, [r7, #7]
 8000ef2:	4413      	add	r3, r2
 8000ef4:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(SSD1306_HEIGHT - 1);
 8000ef6:	223f      	movs	r2, #63	@ 0x3f
 8000ef8:	2100      	movs	r1, #0
 8000efa:	2078      	movs	r0, #120	@ 0x78
 8000efc:	f000 f8c8 	bl	8001090 <ssd1306_I2C_Write>
 8000f00:	4603      	mov	r3, r0
 8000f02:	461a      	mov	r2, r3
 8000f04:	79fb      	ldrb	r3, [r7, #7]
 8000f06:	4413      	add	r3, r2
 8000f08:	71fb      	strb	r3, [r7, #7]

    status += SSD1306_WRITECOMMAND(0xA4);   // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000f0a:	22a4      	movs	r2, #164	@ 0xa4
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	2078      	movs	r0, #120	@ 0x78
 8000f10:	f000 f8be 	bl	8001090 <ssd1306_I2C_Write>
 8000f14:	4603      	mov	r3, r0
 8000f16:	461a      	mov	r2, r3
 8000f18:	79fb      	ldrb	r3, [r7, #7]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xD3);   // Set display offset
 8000f1e:	22d3      	movs	r2, #211	@ 0xd3
 8000f20:	2100      	movs	r1, #0
 8000f22:	2078      	movs	r0, #120	@ 0x78
 8000f24:	f000 f8b4 	bl	8001090 <ssd1306_I2C_Write>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	79fb      	ldrb	r3, [r7, #7]
 8000f2e:	4413      	add	r3, r2
 8000f30:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x00);   // No offset
 8000f32:	2200      	movs	r2, #0
 8000f34:	2100      	movs	r1, #0
 8000f36:	2078      	movs	r0, #120	@ 0x78
 8000f38:	f000 f8aa 	bl	8001090 <ssd1306_I2C_Write>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	461a      	mov	r2, r3
 8000f40:	79fb      	ldrb	r3, [r7, #7]
 8000f42:	4413      	add	r3, r2
 8000f44:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xD5);   // Set display clock divide ratio/oscillator frequency
 8000f46:	22d5      	movs	r2, #213	@ 0xd5
 8000f48:	2100      	movs	r1, #0
 8000f4a:	2078      	movs	r0, #120	@ 0x78
 8000f4c:	f000 f8a0 	bl	8001090 <ssd1306_I2C_Write>
 8000f50:	4603      	mov	r3, r0
 8000f52:	461a      	mov	r2, r3
 8000f54:	79fb      	ldrb	r3, [r7, #7]
 8000f56:	4413      	add	r3, r2
 8000f58:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xF0);   // Set divide ratio
 8000f5a:	22f0      	movs	r2, #240	@ 0xf0
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	2078      	movs	r0, #120	@ 0x78
 8000f60:	f000 f896 	bl	8001090 <ssd1306_I2C_Write>
 8000f64:	4603      	mov	r3, r0
 8000f66:	461a      	mov	r2, r3
 8000f68:	79fb      	ldrb	r3, [r7, #7]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xD9);   // Set pre-charge period
 8000f6e:	22d9      	movs	r2, #217	@ 0xd9
 8000f70:	2100      	movs	r1, #0
 8000f72:	2078      	movs	r0, #120	@ 0x78
 8000f74:	f000 f88c 	bl	8001090 <ssd1306_I2C_Write>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	79fb      	ldrb	r3, [r7, #7]
 8000f7e:	4413      	add	r3, r2
 8000f80:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x22);
 8000f82:	2222      	movs	r2, #34	@ 0x22
 8000f84:	2100      	movs	r1, #0
 8000f86:	2078      	movs	r0, #120	@ 0x78
 8000f88:	f000 f882 	bl	8001090 <ssd1306_I2C_Write>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	461a      	mov	r2, r3
 8000f90:	79fb      	ldrb	r3, [r7, #7]
 8000f92:	4413      	add	r3, r2
 8000f94:	71fb      	strb	r3, [r7, #7]

    status += SSD1306_WRITECOMMAND(0xDA);   // Set com pins hardware configuration
 8000f96:	22da      	movs	r2, #218	@ 0xda
 8000f98:	2100      	movs	r1, #0
 8000f9a:	2078      	movs	r0, #120	@ 0x78
 8000f9c:	f000 f878 	bl	8001090 <ssd1306_I2C_Write>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	79fb      	ldrb	r3, [r7, #7]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(Display_COM_LR_REMAP << 5 | Display_COM_ALTERNATIVE_PIN_CONFIG << 4 | 0x02);
 8000faa:	2212      	movs	r2, #18
 8000fac:	2100      	movs	r1, #0
 8000fae:	2078      	movs	r0, #120	@ 0x78
 8000fb0:	f000 f86e 	bl	8001090 <ssd1306_I2C_Write>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	79fb      	ldrb	r3, [r7, #7]
 8000fba:	4413      	add	r3, r2
 8000fbc:	71fb      	strb	r3, [r7, #7]

    status += SSD1306_WRITECOMMAND(0xDB);   // Set vcomh
 8000fbe:	22db      	movs	r2, #219	@ 0xdb
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	2078      	movs	r0, #120	@ 0x78
 8000fc4:	f000 f864 	bl	8001090 <ssd1306_I2C_Write>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	461a      	mov	r2, r3
 8000fcc:	79fb      	ldrb	r3, [r7, #7]
 8000fce:	4413      	add	r3, r2
 8000fd0:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x20);   // 0x20,0.77xVcc
 8000fd2:	2220      	movs	r2, #32
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	2078      	movs	r0, #120	@ 0x78
 8000fd8:	f000 f85a 	bl	8001090 <ssd1306_I2C_Write>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	461a      	mov	r2, r3
 8000fe0:	79fb      	ldrb	r3, [r7, #7]
 8000fe2:	4413      	add	r3, r2
 8000fe4:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x8D);   // Set DC-DC enable
 8000fe6:	228d      	movs	r2, #141	@ 0x8d
 8000fe8:	2100      	movs	r1, #0
 8000fea:	2078      	movs	r0, #120	@ 0x78
 8000fec:	f000 f850 	bl	8001090 <ssd1306_I2C_Write>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	4413      	add	r3, r2
 8000ff8:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x14);   //
 8000ffa:	2214      	movs	r2, #20
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	2078      	movs	r0, #120	@ 0x78
 8001000:	f000 f846 	bl	8001090 <ssd1306_I2C_Write>
 8001004:	4603      	mov	r3, r0
 8001006:	461a      	mov	r2, r3
 8001008:	79fb      	ldrb	r3, [r7, #7]
 800100a:	4413      	add	r3, r2
 800100c:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xAF);   // Turn on Display panel
 800100e:	22af      	movs	r2, #175	@ 0xaf
 8001010:	2100      	movs	r1, #0
 8001012:	2078      	movs	r0, #120	@ 0x78
 8001014:	f000 f83c 	bl	8001090 <ssd1306_I2C_Write>
 8001018:	4603      	mov	r3, r0
 800101a:	461a      	mov	r2, r3
 800101c:	79fb      	ldrb	r3, [r7, #7]
 800101e:	4413      	add	r3, r2
 8001020:	71fb      	strb	r3, [r7, #7]

	status += SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001022:	222e      	movs	r2, #46	@ 0x2e
 8001024:	2100      	movs	r1, #0
 8001026:	2078      	movs	r0, #120	@ 0x78
 8001028:	f000 f832 	bl	8001090 <ssd1306_I2C_Write>
 800102c:	4603      	mov	r3, r0
 800102e:	461a      	mov	r2, r3
 8001030:	79fb      	ldrb	r3, [r7, #7]
 8001032:	4413      	add	r3, r2
 8001034:	71fb      	strb	r3, [r7, #7]

	/* Clear screen */
	Display_Fill(SSD1306_COLOR_BLACK);
 8001036:	2000      	movs	r0, #0
 8001038:	f000 f8e8 	bl	800120c <Display_Fill>

	/* Set default values */
	SSD1306.CurrentX = 0;
 800103c:	4b12      	ldr	r3, [pc, #72]	@ (8001088 <Display_Init+0x2a0>)
 800103e:	2200      	movs	r2, #0
 8001040:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001042:	4b11      	ldr	r3, [pc, #68]	@ (8001088 <Display_Init+0x2a0>)
 8001044:	2200      	movs	r2, #0
 8001046:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = TRUE;
 8001048:	4b0f      	ldr	r3, [pc, #60]	@ (8001088 <Display_Init+0x2a0>)
 800104a:	2201      	movs	r2, #1
 800104c:	715a      	strb	r2, [r3, #5]

	Update.state = PAGE;
 800104e:	4b0f      	ldr	r3, [pc, #60]	@ (800108c <Display_Init+0x2a4>)
 8001050:	2200      	movs	r2, #0
 8001052:	70da      	strb	r2, [r3, #3]
	Update.Page = 0;
 8001054:	4b0d      	ldr	r3, [pc, #52]	@ (800108c <Display_Init+0x2a4>)
 8001056:	2200      	movs	r2, #0
 8001058:	709a      	strb	r2, [r3, #2]
	Update.Ready_DMA = TRUE;
 800105a:	4b0c      	ldr	r3, [pc, #48]	@ (800108c <Display_Init+0x2a4>)
 800105c:	2201      	movs	r2, #1
 800105e:	705a      	strb	r2, [r3, #1]
	Update.Ready_To_Refresh = FALSE;
 8001060:	4b0a      	ldr	r3, [pc, #40]	@ (800108c <Display_Init+0x2a4>)
 8001062:	2200      	movs	r2, #0
 8001064:	701a      	strb	r2, [r3, #0]

	Update.PageData[0] = 0xB0 + Update.Page;
 8001066:	4b09      	ldr	r3, [pc, #36]	@ (800108c <Display_Init+0x2a4>)
 8001068:	789b      	ldrb	r3, [r3, #2]
 800106a:	3b50      	subs	r3, #80	@ 0x50
 800106c:	b2da      	uxtb	r2, r3
 800106e:	4b07      	ldr	r3, [pc, #28]	@ (800108c <Display_Init+0x2a4>)
 8001070:	711a      	strb	r2, [r3, #4]
	Update.PageData[1] = 0x00; //< acá seleccionamos Lower start
 8001072:	4b06      	ldr	r3, [pc, #24]	@ (800108c <Display_Init+0x2a4>)
 8001074:	2200      	movs	r2, #0
 8001076:	715a      	strb	r2, [r3, #5]
	Update.PageData[2] = 0x10; //< y acá upper start
 8001078:	4b04      	ldr	r3, [pc, #16]	@ (800108c <Display_Init+0x2a4>)
 800107a:	2210      	movs	r2, #16
 800107c:	719a      	strb	r2, [r3, #6]

	/* Return OK */
	return status;
 800107e:	79fb      	ldrb	r3, [r7, #7]
}
 8001080:	4618      	mov	r0, r3
 8001082:	3708      	adds	r7, #8
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	200003f0 	.word	0x200003f0
 800108c:	20000800 	.word	0x20000800

08001090 <ssd1306_I2C_Write>:

e_system ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data){
 8001090:	b590      	push	{r4, r7, lr}
 8001092:	b085      	sub	sp, #20
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	71fb      	strb	r3, [r7, #7]
 800109a:	460b      	mov	r3, r1
 800109c:	71bb      	strb	r3, [r7, #6]
 800109e:	4613      	mov	r3, r2
 80010a0:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80010a2:	79bb      	ldrb	r3, [r7, #6]
 80010a4:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80010a6:	797b      	ldrb	r3, [r7, #5]
 80010a8:	737b      	strb	r3, [r7, #13]
	return I2C_Master_Transmit_Blocking(address, dt, 2, 10);
 80010aa:	4b07      	ldr	r3, [pc, #28]	@ (80010c8 <ssd1306_I2C_Write+0x38>)
 80010ac:	681c      	ldr	r4, [r3, #0]
 80010ae:	79fb      	ldrb	r3, [r7, #7]
 80010b0:	b298      	uxth	r0, r3
 80010b2:	f107 010c 	add.w	r1, r7, #12
 80010b6:	230a      	movs	r3, #10
 80010b8:	2202      	movs	r2, #2
 80010ba:	47a0      	blx	r4
 80010bc:	4603      	mov	r3, r0
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3714      	adds	r7, #20
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd90      	pop	{r4, r7, pc}
 80010c6:	bf00      	nop
 80010c8:	200003fc 	.word	0x200003fc

080010cc <Display_UpdateScreen_Task>:

e_system Display_UpdateScreen_Task() {
 80010cc:	b598      	push	{r3, r4, r7, lr}
 80010ce:	af00      	add	r7, sp, #0
	if(Update.Ready_To_Refresh && Update.Ready_DMA && SSD1306.Initialized){
 80010d0:	4b2d      	ldr	r3, [pc, #180]	@ (8001188 <Display_UpdateScreen_Task+0xbc>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d054      	beq.n	8001182 <Display_UpdateScreen_Task+0xb6>
 80010d8:	4b2b      	ldr	r3, [pc, #172]	@ (8001188 <Display_UpdateScreen_Task+0xbc>)
 80010da:	785b      	ldrb	r3, [r3, #1]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d050      	beq.n	8001182 <Display_UpdateScreen_Task+0xb6>
 80010e0:	4b2a      	ldr	r3, [pc, #168]	@ (800118c <Display_UpdateScreen_Task+0xc0>)
 80010e2:	795b      	ldrb	r3, [r3, #5]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d04c      	beq.n	8001182 <Display_UpdateScreen_Task+0xb6>

		switch(Update.state){
 80010e8:	4b27      	ldr	r3, [pc, #156]	@ (8001188 <Display_UpdateScreen_Task+0xbc>)
 80010ea:	78db      	ldrb	r3, [r3, #3]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d002      	beq.n	80010f6 <Display_UpdateScreen_Task+0x2a>
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	d01c      	beq.n	800112e <Display_UpdateScreen_Task+0x62>
 80010f4:	e038      	b.n	8001168 <Display_UpdateScreen_Task+0x9c>
		case PAGE:
			Update.PageData[0] = 0xB0 + Update.Page;     // Set Page
 80010f6:	4b24      	ldr	r3, [pc, #144]	@ (8001188 <Display_UpdateScreen_Task+0xbc>)
 80010f8:	789b      	ldrb	r3, [r3, #2]
 80010fa:	3b50      	subs	r3, #80	@ 0x50
 80010fc:	b2da      	uxtb	r2, r3
 80010fe:	4b22      	ldr	r3, [pc, #136]	@ (8001188 <Display_UpdateScreen_Task+0xbc>)
 8001100:	711a      	strb	r2, [r3, #4]
			Update.PageData[1] = 0x00;                   // Lower Column
 8001102:	4b21      	ldr	r3, [pc, #132]	@ (8001188 <Display_UpdateScreen_Task+0xbc>)
 8001104:	2200      	movs	r2, #0
 8001106:	715a      	strb	r2, [r3, #5]
			Update.PageData[2] = 0x10;                   // Upper Column
 8001108:	4b1f      	ldr	r3, [pc, #124]	@ (8001188 <Display_UpdateScreen_Task+0xbc>)
 800110a:	2210      	movs	r2, #16
 800110c:	719a      	strb	r2, [r3, #6]
			if(I2C_Master_Transmit(SSD1306_I2C_ADDR, 0x00, Update.PageData, 3)		== SYS_OK){
 800110e:	4b20      	ldr	r3, [pc, #128]	@ (8001190 <Display_UpdateScreen_Task+0xc4>)
 8001110:	681c      	ldr	r4, [r3, #0]
 8001112:	2303      	movs	r3, #3
 8001114:	4a1f      	ldr	r2, [pc, #124]	@ (8001194 <Display_UpdateScreen_Task+0xc8>)
 8001116:	2100      	movs	r1, #0
 8001118:	2078      	movs	r0, #120	@ 0x78
 800111a:	47a0      	blx	r4
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d103      	bne.n	800112a <Display_UpdateScreen_Task+0x5e>
				Update.state = DATA;
 8001122:	4b19      	ldr	r3, [pc, #100]	@ (8001188 <Display_UpdateScreen_Task+0xbc>)
 8001124:	2201      	movs	r2, #1
 8001126:	70da      	strb	r2, [r3, #3]
				//Update.Ready_DMA = FALSE;     //< LO DESACTIVO PARA QUE PAGE Y DATA SE HAGA DE UNA SOLA PASADA
			}else{
				return SYS_ERROR;
			}
			break;
 8001128:	e021      	b.n	800116e <Display_UpdateScreen_Task+0xa2>
				return SYS_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	e02a      	b.n	8001184 <Display_UpdateScreen_Task+0xb8>
		case DATA:
			if(I2C_Master_Transmit(	SSD1306_I2C_ADDR, 0x40,
 800112e:	4b18      	ldr	r3, [pc, #96]	@ (8001190 <Display_UpdateScreen_Task+0xc4>)
 8001130:	681c      	ldr	r4, [r3, #0]
									&OLED_DMA_BUFFER[SSD1306_WIDTH * Update.Page],
 8001132:	4b15      	ldr	r3, [pc, #84]	@ (8001188 <Display_UpdateScreen_Task+0xbc>)
 8001134:	789b      	ldrb	r3, [r3, #2]
 8001136:	01db      	lsls	r3, r3, #7
			if(I2C_Master_Transmit(	SSD1306_I2C_ADDR, 0x40,
 8001138:	4a17      	ldr	r2, [pc, #92]	@ (8001198 <Display_UpdateScreen_Task+0xcc>)
 800113a:	441a      	add	r2, r3
 800113c:	2380      	movs	r3, #128	@ 0x80
 800113e:	2140      	movs	r1, #64	@ 0x40
 8001140:	2078      	movs	r0, #120	@ 0x78
 8001142:	47a0      	blx	r4
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d10c      	bne.n	8001164 <Display_UpdateScreen_Task+0x98>
									SSD1306_WIDTH) 									== SYS_OK){
				Update.Page++;
 800114a:	4b0f      	ldr	r3, [pc, #60]	@ (8001188 <Display_UpdateScreen_Task+0xbc>)
 800114c:	789b      	ldrb	r3, [r3, #2]
 800114e:	3301      	adds	r3, #1
 8001150:	b2da      	uxtb	r2, r3
 8001152:	4b0d      	ldr	r3, [pc, #52]	@ (8001188 <Display_UpdateScreen_Task+0xbc>)
 8001154:	709a      	strb	r2, [r3, #2]
				Update.state = PAGE;
 8001156:	4b0c      	ldr	r3, [pc, #48]	@ (8001188 <Display_UpdateScreen_Task+0xbc>)
 8001158:	2200      	movs	r2, #0
 800115a:	70da      	strb	r2, [r3, #3]
				Update.Ready_DMA = FALSE;
 800115c:	4b0a      	ldr	r3, [pc, #40]	@ (8001188 <Display_UpdateScreen_Task+0xbc>)
 800115e:	2200      	movs	r2, #0
 8001160:	705a      	strb	r2, [r3, #1]
			}else{
				return SYS_ERROR;
			}
			break;
 8001162:	e004      	b.n	800116e <Display_UpdateScreen_Task+0xa2>
				return SYS_ERROR;
 8001164:	2301      	movs	r3, #1
 8001166:	e00d      	b.n	8001184 <Display_UpdateScreen_Task+0xb8>
		default:
			Update.Page = 8; //!< fuerzo el if de abajo para reiniciar el sistema
 8001168:	4b07      	ldr	r3, [pc, #28]	@ (8001188 <Display_UpdateScreen_Task+0xbc>)
 800116a:	2208      	movs	r2, #8
 800116c:	709a      	strb	r2, [r3, #2]
		}
		if(Update.Page > 7){
 800116e:	4b06      	ldr	r3, [pc, #24]	@ (8001188 <Display_UpdateScreen_Task+0xbc>)
 8001170:	789b      	ldrb	r3, [r3, #2]
 8001172:	2b07      	cmp	r3, #7
 8001174:	d905      	bls.n	8001182 <Display_UpdateScreen_Task+0xb6>
			Update.Page = 0;
 8001176:	4b04      	ldr	r3, [pc, #16]	@ (8001188 <Display_UpdateScreen_Task+0xbc>)
 8001178:	2200      	movs	r2, #0
 800117a:	709a      	strb	r2, [r3, #2]
			Update.Ready_To_Refresh = FALSE;
 800117c:	4b02      	ldr	r3, [pc, #8]	@ (8001188 <Display_UpdateScreen_Task+0xbc>)
 800117e:	2200      	movs	r2, #0
 8001180:	701a      	strb	r2, [r3, #0]
		}
	}

	return SYS_OK;
 8001182:	2300      	movs	r3, #0
}
 8001184:	4618      	mov	r0, r3
 8001186:	bd98      	pop	{r3, r4, r7, pc}
 8001188:	20000800 	.word	0x20000800
 800118c:	200003f0 	.word	0x200003f0
 8001190:	200003f8 	.word	0x200003f8
 8001194:	20000804 	.word	0x20000804
 8001198:	20000400 	.word	0x20000400

0800119c <Display_I2C_DMA_Ready>:

void Display_I2C_DMA_Ready(uint8_t val){
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	4603      	mov	r3, r0
 80011a4:	71fb      	strb	r3, [r7, #7]
	Update.Ready_DMA = val;
 80011a6:	4a04      	ldr	r2, [pc, #16]	@ (80011b8 <Display_I2C_DMA_Ready+0x1c>)
 80011a8:	79fb      	ldrb	r3, [r7, #7]
 80011aa:	7053      	strb	r3, [r2, #1]
}
 80011ac:	bf00      	nop
 80011ae:	370c      	adds	r7, #12
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr
 80011b8:	20000800 	.word	0x20000800

080011bc <Display_I2C_Refresh_Ready>:

void Display_I2C_Refresh_Ready(uint8_t val){
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	71fb      	strb	r3, [r7, #7]
	Update.Ready_To_Refresh = val;
 80011c6:	4a04      	ldr	r2, [pc, #16]	@ (80011d8 <Display_I2C_Refresh_Ready+0x1c>)
 80011c8:	79fb      	ldrb	r3, [r7, #7]
 80011ca:	7013      	strb	r3, [r2, #0]
}
 80011cc:	bf00      	nop
 80011ce:	370c      	adds	r7, #12
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr
 80011d8:	20000800 	.word	0x20000800

080011dc <Display_SetCursor>:

/**
 * SET CURSOR POSITION
 */
void Display_SetCursor(uint8_t x, uint8_t y)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	460a      	mov	r2, r1
 80011e6:	71fb      	strb	r3, [r7, #7]
 80011e8:	4613      	mov	r3, r2
 80011ea:	71bb      	strb	r3, [r7, #6]
	SSD1306.CurrentX = x;
 80011ec:	79fb      	ldrb	r3, [r7, #7]
 80011ee:	b29a      	uxth	r2, r3
 80011f0:	4b05      	ldr	r3, [pc, #20]	@ (8001208 <Display_SetCursor+0x2c>)
 80011f2:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 80011f4:	79bb      	ldrb	r3, [r7, #6]
 80011f6:	b29a      	uxth	r2, r3
 80011f8:	4b03      	ldr	r3, [pc, #12]	@ (8001208 <Display_SetCursor+0x2c>)
 80011fa:	805a      	strh	r2, [r3, #2]
}
 80011fc:	bf00      	nop
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr
 8001208:	200003f0 	.word	0x200003f0

0800120c <Display_Fill>:

void Display_Fill(SSD1306_COLOR_t color) {
 800120c:	b480      	push	{r7}
 800120e:	b085      	sub	sp, #20
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	//memset(OLED_DMA_BUFFER, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, 1024);
	uint32_t i;

	for(i = 0; i < sizeof(OLED_DMA_BUFFER); i++)	// Fill screenbuffer with a constant value (color)
 8001216:	2300      	movs	r3, #0
 8001218:	60fb      	str	r3, [r7, #12]
 800121a:	e00d      	b.n	8001238 <Display_Fill+0x2c>
	{
		OLED_DMA_BUFFER[i] = (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF;
 800121c:	79fb      	ldrb	r3, [r7, #7]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d101      	bne.n	8001226 <Display_Fill+0x1a>
 8001222:	2100      	movs	r1, #0
 8001224:	e000      	b.n	8001228 <Display_Fill+0x1c>
 8001226:	21ff      	movs	r1, #255	@ 0xff
 8001228:	4a09      	ldr	r2, [pc, #36]	@ (8001250 <Display_Fill+0x44>)
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	4413      	add	r3, r2
 800122e:	460a      	mov	r2, r1
 8001230:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < sizeof(OLED_DMA_BUFFER); i++)	// Fill screenbuffer with a constant value (color)
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	3301      	adds	r3, #1
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800123e:	d3ed      	bcc.n	800121c <Display_Fill+0x10>
	}
}
 8001240:	bf00      	nop
 8001242:	bf00      	nop
 8001244:	3714      	adds	r7, #20
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	20000400 	.word	0x20000400

08001254 <Display_DrawPixel>:

void Display_Clear (void){
	Display_Fill (0);
}

void Display_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	4603      	mov	r3, r0
 800125c:	80fb      	strh	r3, [r7, #6]
 800125e:	460b      	mov	r3, r1
 8001260:	80bb      	strh	r3, [r7, #4]
 8001262:	4613      	mov	r3, r2
 8001264:	70fb      	strb	r3, [r7, #3]
	if (
 8001266:	88fb      	ldrh	r3, [r7, #6]
 8001268:	2b7f      	cmp	r3, #127	@ 0x7f
 800126a:	d848      	bhi.n	80012fe <Display_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 800126c:	88bb      	ldrh	r3, [r7, #4]
 800126e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001270:	d845      	bhi.n	80012fe <Display_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001272:	4b26      	ldr	r3, [pc, #152]	@ (800130c <Display_DrawPixel+0xb8>)
 8001274:	791b      	ldrb	r3, [r3, #4]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d006      	beq.n	8001288 <Display_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800127a:	78fb      	ldrb	r3, [r7, #3]
 800127c:	2b00      	cmp	r3, #0
 800127e:	bf0c      	ite	eq
 8001280:	2301      	moveq	r3, #1
 8001282:	2300      	movne	r3, #0
 8001284:	b2db      	uxtb	r3, r3
 8001286:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001288:	78fb      	ldrb	r3, [r7, #3]
 800128a:	2b01      	cmp	r3, #1
 800128c:	d11a      	bne.n	80012c4 <Display_DrawPixel+0x70>
		OLED_DMA_BUFFER[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800128e:	88fa      	ldrh	r2, [r7, #6]
 8001290:	88bb      	ldrh	r3, [r7, #4]
 8001292:	08db      	lsrs	r3, r3, #3
 8001294:	b298      	uxth	r0, r3
 8001296:	4603      	mov	r3, r0
 8001298:	01db      	lsls	r3, r3, #7
 800129a:	4413      	add	r3, r2
 800129c:	4a1c      	ldr	r2, [pc, #112]	@ (8001310 <Display_DrawPixel+0xbc>)
 800129e:	5cd3      	ldrb	r3, [r2, r3]
 80012a0:	b25a      	sxtb	r2, r3
 80012a2:	88bb      	ldrh	r3, [r7, #4]
 80012a4:	f003 0307 	and.w	r3, r3, #7
 80012a8:	2101      	movs	r1, #1
 80012aa:	fa01 f303 	lsl.w	r3, r1, r3
 80012ae:	b25b      	sxtb	r3, r3
 80012b0:	4313      	orrs	r3, r2
 80012b2:	b259      	sxtb	r1, r3
 80012b4:	88fa      	ldrh	r2, [r7, #6]
 80012b6:	4603      	mov	r3, r0
 80012b8:	01db      	lsls	r3, r3, #7
 80012ba:	4413      	add	r3, r2
 80012bc:	b2c9      	uxtb	r1, r1
 80012be:	4a14      	ldr	r2, [pc, #80]	@ (8001310 <Display_DrawPixel+0xbc>)
 80012c0:	54d1      	strb	r1, [r2, r3]
 80012c2:	e01d      	b.n	8001300 <Display_DrawPixel+0xac>
	} else {
		OLED_DMA_BUFFER[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80012c4:	88fa      	ldrh	r2, [r7, #6]
 80012c6:	88bb      	ldrh	r3, [r7, #4]
 80012c8:	08db      	lsrs	r3, r3, #3
 80012ca:	b298      	uxth	r0, r3
 80012cc:	4603      	mov	r3, r0
 80012ce:	01db      	lsls	r3, r3, #7
 80012d0:	4413      	add	r3, r2
 80012d2:	4a0f      	ldr	r2, [pc, #60]	@ (8001310 <Display_DrawPixel+0xbc>)
 80012d4:	5cd3      	ldrb	r3, [r2, r3]
 80012d6:	b25a      	sxtb	r2, r3
 80012d8:	88bb      	ldrh	r3, [r7, #4]
 80012da:	f003 0307 	and.w	r3, r3, #7
 80012de:	2101      	movs	r1, #1
 80012e0:	fa01 f303 	lsl.w	r3, r1, r3
 80012e4:	b25b      	sxtb	r3, r3
 80012e6:	43db      	mvns	r3, r3
 80012e8:	b25b      	sxtb	r3, r3
 80012ea:	4013      	ands	r3, r2
 80012ec:	b259      	sxtb	r1, r3
 80012ee:	88fa      	ldrh	r2, [r7, #6]
 80012f0:	4603      	mov	r3, r0
 80012f2:	01db      	lsls	r3, r3, #7
 80012f4:	4413      	add	r3, r2
 80012f6:	b2c9      	uxtb	r1, r1
 80012f8:	4a05      	ldr	r2, [pc, #20]	@ (8001310 <Display_DrawPixel+0xbc>)
 80012fa:	54d1      	strb	r1, [r2, r3]
 80012fc:	e000      	b.n	8001300 <Display_DrawPixel+0xac>
		return;
 80012fe:	bf00      	nop
	}
}
 8001300:	370c      	adds	r7, #12
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	200003f0 	.word	0x200003f0
 8001310:	20000400 	.word	0x20000400

08001314 <Display_DrawBitmap>:

void Display_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b086      	sub	sp, #24
 8001318:	af00      	add	r7, sp, #0
 800131a:	60ba      	str	r2, [r7, #8]
 800131c:	461a      	mov	r2, r3
 800131e:	4603      	mov	r3, r0
 8001320:	81fb      	strh	r3, [r7, #14]
 8001322:	460b      	mov	r3, r1
 8001324:	81bb      	strh	r3, [r7, #12]
 8001326:	4613      	mov	r3, r2
 8001328:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 800132a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800132e:	3307      	adds	r3, #7
 8001330:	2b00      	cmp	r3, #0
 8001332:	da00      	bge.n	8001336 <Display_DrawBitmap+0x22>
 8001334:	3307      	adds	r3, #7
 8001336:	10db      	asrs	r3, r3, #3
 8001338:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 800133a:	2300      	movs	r3, #0
 800133c:	75fb      	strb	r3, [r7, #23]

    //memcpy(&OLED_DMA_BUFFER[OFFSET_DATA], bitmap, 1024);
	/*for(uint16_t i = 0; i<1024; i++){
		OLED_DMA_BUFFER[i] = bitmap[i];
	}*/
    for(int16_t j=0; j<h; j++, y++)
 800133e:	2300      	movs	r3, #0
 8001340:	82bb      	strh	r3, [r7, #20]
 8001342:	e044      	b.n	80013ce <Display_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 8001344:	2300      	movs	r3, #0
 8001346:	827b      	strh	r3, [r7, #18]
 8001348:	e02f      	b.n	80013aa <Display_DrawBitmap+0x96>
        {
            if(i & 7)
 800134a:	8a7b      	ldrh	r3, [r7, #18]
 800134c:	f003 0307 	and.w	r3, r3, #7
 8001350:	2b00      	cmp	r3, #0
 8001352:	d003      	beq.n	800135c <Display_DrawBitmap+0x48>
            {
               byte <<= 1;
 8001354:	7dfb      	ldrb	r3, [r7, #23]
 8001356:	005b      	lsls	r3, r3, #1
 8001358:	75fb      	strb	r3, [r7, #23]
 800135a:	e012      	b.n	8001382 <Display_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 800135c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001360:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001364:	fb03 f202 	mul.w	r2, r3, r2
 8001368:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800136c:	2b00      	cmp	r3, #0
 800136e:	da00      	bge.n	8001372 <Display_DrawBitmap+0x5e>
 8001370:	3307      	adds	r3, #7
 8001372:	10db      	asrs	r3, r3, #3
 8001374:	b21b      	sxth	r3, r3
 8001376:	4413      	add	r3, r2
 8001378:	461a      	mov	r2, r3
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	4413      	add	r3, r2
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) Display_DrawPixel(x+i, y, color);
 8001382:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001386:	2b00      	cmp	r3, #0
 8001388:	da09      	bge.n	800139e <Display_DrawBitmap+0x8a>
 800138a:	89fa      	ldrh	r2, [r7, #14]
 800138c:	8a7b      	ldrh	r3, [r7, #18]
 800138e:	4413      	add	r3, r2
 8001390:	b29b      	uxth	r3, r3
 8001392:	89b9      	ldrh	r1, [r7, #12]
 8001394:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001396:	b2d2      	uxtb	r2, r2
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff ff5b 	bl	8001254 <Display_DrawPixel>
        for(int16_t i=0; i<w; i++)
 800139e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80013a2:	b29b      	uxth	r3, r3
 80013a4:	3301      	adds	r3, #1
 80013a6:	b29b      	uxth	r3, r3
 80013a8:	827b      	strh	r3, [r7, #18]
 80013aa:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80013ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013b2:	429a      	cmp	r2, r3
 80013b4:	dbc9      	blt.n	800134a <Display_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 80013b6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80013ba:	b29b      	uxth	r3, r3
 80013bc:	3301      	adds	r3, #1
 80013be:	b29b      	uxth	r3, r3
 80013c0:	82bb      	strh	r3, [r7, #20]
 80013c2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80013c6:	b29b      	uxth	r3, r3
 80013c8:	3301      	adds	r3, #1
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	81bb      	strh	r3, [r7, #12]
 80013ce:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80013d2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80013d6:	429a      	cmp	r2, r3
 80013d8:	dbb4      	blt.n	8001344 <Display_DrawBitmap+0x30>
        }
    }
}
 80013da:	bf00      	nop
 80013dc:	bf00      	nop
 80013de:	3718      	adds	r7, #24
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}

080013e4 <Display_WriteChar>:

/**
 * WRITE A CHAR INTO THE DISPLAY BUFFER
 */
char Display_WriteChar(char ch, FontDef_t Font, SSD1306_COLOR_t color)
{
 80013e4:	b590      	push	{r4, r7, lr}
 80013e6:	b089      	sub	sp, #36	@ 0x24
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4604      	mov	r4, r0
 80013ec:	1d38      	adds	r0, r7, #4
 80013ee:	e880 0006 	stmia.w	r0, {r1, r2}
 80013f2:	461a      	mov	r2, r3
 80013f4:	4623      	mov	r3, r4
 80013f6:	73fb      	strb	r3, [r7, #15]
 80013f8:	4613      	mov	r3, r2
 80013fa:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80013fc:	4b36      	ldr	r3, [pc, #216]	@ (80014d8 <Display_WriteChar+0xf4>)
 80013fe:	881b      	ldrh	r3, [r3, #0]
 8001400:	461a      	mov	r2, r3
 8001402:	793b      	ldrb	r3, [r7, #4]
 8001404:	4413      	add	r3, r2
 8001406:	2b7f      	cmp	r3, #127	@ 0x7f
 8001408:	dc06      	bgt.n	8001418 <Display_WriteChar+0x34>
    		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 800140a:	4b33      	ldr	r3, [pc, #204]	@ (80014d8 <Display_WriteChar+0xf4>)
 800140c:	885b      	ldrh	r3, [r3, #2]
 800140e:	461a      	mov	r2, r3
 8001410:	797b      	ldrb	r3, [r7, #5]
 8001412:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8001414:	2b3f      	cmp	r3, #63	@ 0x3f
 8001416:	dd01      	ble.n	800141c <Display_WriteChar+0x38>
    {

        return 0;	// Not enough space on current line
 8001418:	2300      	movs	r3, #0
 800141a:	e058      	b.n	80014ce <Display_WriteChar+0xea>
    }

    for (i = 0; i < Font.FontHeight; i++)	// Translate font to screenbuffer
 800141c:	2300      	movs	r3, #0
 800141e:	61fb      	str	r3, [r7, #28]
 8001420:	e048      	b.n	80014b4 <Display_WriteChar+0xd0>
    {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001422:	68ba      	ldr	r2, [r7, #8]
 8001424:	7bfb      	ldrb	r3, [r7, #15]
 8001426:	3b20      	subs	r3, #32
 8001428:	7979      	ldrb	r1, [r7, #5]
 800142a:	fb01 f303 	mul.w	r3, r1, r3
 800142e:	4619      	mov	r1, r3
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	440b      	add	r3, r1
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	4413      	add	r3, r2
 8001438:	881b      	ldrh	r3, [r3, #0]
 800143a:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++)
 800143c:	2300      	movs	r3, #0
 800143e:	61bb      	str	r3, [r7, #24]
 8001440:	e030      	b.n	80014a4 <Display_WriteChar+0xc0>
        {
            if ((b << j) & 0x8000)
 8001442:	697a      	ldr	r2, [r7, #20]
 8001444:	69bb      	ldr	r3, [r7, #24]
 8001446:	fa02 f303 	lsl.w	r3, r2, r3
 800144a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d010      	beq.n	8001474 <Display_WriteChar+0x90>
                Display_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001452:	4b21      	ldr	r3, [pc, #132]	@ (80014d8 <Display_WriteChar+0xf4>)
 8001454:	881a      	ldrh	r2, [r3, #0]
 8001456:	69bb      	ldr	r3, [r7, #24]
 8001458:	b29b      	uxth	r3, r3
 800145a:	4413      	add	r3, r2
 800145c:	b298      	uxth	r0, r3
 800145e:	4b1e      	ldr	r3, [pc, #120]	@ (80014d8 <Display_WriteChar+0xf4>)
 8001460:	885a      	ldrh	r2, [r3, #2]
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	b29b      	uxth	r3, r3
 8001466:	4413      	add	r3, r2
 8001468:	b29b      	uxth	r3, r3
 800146a:	7bba      	ldrb	r2, [r7, #14]
 800146c:	4619      	mov	r1, r3
 800146e:	f7ff fef1 	bl	8001254 <Display_DrawPixel>
 8001472:	e014      	b.n	800149e <Display_WriteChar+0xba>
            else
                Display_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001474:	4b18      	ldr	r3, [pc, #96]	@ (80014d8 <Display_WriteChar+0xf4>)
 8001476:	881a      	ldrh	r2, [r3, #0]
 8001478:	69bb      	ldr	r3, [r7, #24]
 800147a:	b29b      	uxth	r3, r3
 800147c:	4413      	add	r3, r2
 800147e:	b298      	uxth	r0, r3
 8001480:	4b15      	ldr	r3, [pc, #84]	@ (80014d8 <Display_WriteChar+0xf4>)
 8001482:	885a      	ldrh	r2, [r3, #2]
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	b29b      	uxth	r3, r3
 8001488:	4413      	add	r3, r2
 800148a:	b299      	uxth	r1, r3
 800148c:	7bbb      	ldrb	r3, [r7, #14]
 800148e:	2b00      	cmp	r3, #0
 8001490:	bf0c      	ite	eq
 8001492:	2301      	moveq	r3, #1
 8001494:	2300      	movne	r3, #0
 8001496:	b2db      	uxtb	r3, r3
 8001498:	461a      	mov	r2, r3
 800149a:	f7ff fedb 	bl	8001254 <Display_DrawPixel>
        for (j = 0; j < Font.FontWidth; j++)
 800149e:	69bb      	ldr	r3, [r7, #24]
 80014a0:	3301      	adds	r3, #1
 80014a2:	61bb      	str	r3, [r7, #24]
 80014a4:	793b      	ldrb	r3, [r7, #4]
 80014a6:	461a      	mov	r2, r3
 80014a8:	69bb      	ldr	r3, [r7, #24]
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d3c9      	bcc.n	8001442 <Display_WriteChar+0x5e>
    for (i = 0; i < Font.FontHeight; i++)	// Translate font to screenbuffer
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	3301      	adds	r3, #1
 80014b2:	61fb      	str	r3, [r7, #28]
 80014b4:	797b      	ldrb	r3, [r7, #5]
 80014b6:	461a      	mov	r2, r3
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d3b1      	bcc.n	8001422 <Display_WriteChar+0x3e>
        }
    }
    SSD1306.CurrentX += Font.FontWidth;	// The current space is now taken
 80014be:	4b06      	ldr	r3, [pc, #24]	@ (80014d8 <Display_WriteChar+0xf4>)
 80014c0:	881b      	ldrh	r3, [r3, #0]
 80014c2:	793a      	ldrb	r2, [r7, #4]
 80014c4:	4413      	add	r3, r2
 80014c6:	b29a      	uxth	r2, r3
 80014c8:	4b03      	ldr	r3, [pc, #12]	@ (80014d8 <Display_WriteChar+0xf4>)
 80014ca:	801a      	strh	r2, [r3, #0]

    return ch;	// Return written char for validation
 80014cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3724      	adds	r7, #36	@ 0x24
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd90      	pop	{r4, r7, pc}
 80014d6:	bf00      	nop
 80014d8:	200003f0 	.word	0x200003f0

080014dc <Display_WriteString>:

/**
 * WRITE STRING INTO THE DISPLAY BUFFER
 */
char Display_WriteString(char* str, FontDef_t Font, SSD1306_COLOR_t color)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	60f8      	str	r0, [r7, #12]
 80014e4:	1d38      	adds	r0, r7, #4
 80014e6:	e880 0006 	stmia.w	r0, {r1, r2}
 80014ea:	70fb      	strb	r3, [r7, #3]
    while (*str){
 80014ec:	e012      	b.n	8001514 <Display_WriteString+0x38>
        if (Display_WriteChar(*str, Font, color) != *str)	// Write until null-byte
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	7818      	ldrb	r0, [r3, #0]
 80014f2:	78fb      	ldrb	r3, [r7, #3]
 80014f4:	1d3a      	adds	r2, r7, #4
 80014f6:	ca06      	ldmia	r2, {r1, r2}
 80014f8:	f7ff ff74 	bl	80013e4 <Display_WriteChar>
 80014fc:	4603      	mov	r3, r0
 80014fe:	461a      	mov	r2, r3
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	429a      	cmp	r2, r3
 8001506:	d002      	beq.n	800150e <Display_WriteString+0x32>
        	return *str;	// Char could not be written
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	e008      	b.n	8001520 <Display_WriteString+0x44>

        str++;	// Next char
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	3301      	adds	r3, #1
 8001512:	60fb      	str	r3, [r7, #12]
    while (*str){
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d1e8      	bne.n	80014ee <Display_WriteString+0x12>
    }
    return *str;	// Everything ok
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	781b      	ldrb	r3, [r3, #0]
}
 8001520:	4618      	mov	r0, r3
 8001522:	3710      	adds	r7, #16
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}

08001528 <Display_DrawLine>:

void Display_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 8001528:	b590      	push	{r4, r7, lr}
 800152a:	b085      	sub	sp, #20
 800152c:	af00      	add	r7, sp, #0
 800152e:	4604      	mov	r4, r0
 8001530:	4608      	mov	r0, r1
 8001532:	4611      	mov	r1, r2
 8001534:	461a      	mov	r2, r3
 8001536:	4623      	mov	r3, r4
 8001538:	80fb      	strh	r3, [r7, #6]
 800153a:	4603      	mov	r3, r0
 800153c:	80bb      	strh	r3, [r7, #4]
 800153e:	460b      	mov	r3, r1
 8001540:	807b      	strh	r3, [r7, #2]
 8001542:	4613      	mov	r3, r2
 8001544:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, i, tmp;

	if(x0 != x1 && y0 != y1)
 8001546:	88fa      	ldrh	r2, [r7, #6]
 8001548:	887b      	ldrh	r3, [r7, #2]
 800154a:	429a      	cmp	r2, r3
 800154c:	d004      	beq.n	8001558 <Display_DrawLine+0x30>
 800154e:	88ba      	ldrh	r2, [r7, #4]
 8001550:	883b      	ldrh	r3, [r7, #0]
 8001552:	429a      	cmp	r2, r3
 8001554:	f040 8090 	bne.w	8001678 <Display_DrawLine+0x150>
		return;

	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 8001558:	88fb      	ldrh	r3, [r7, #6]
 800155a:	2b7f      	cmp	r3, #127	@ 0x7f
 800155c:	d901      	bls.n	8001562 <Display_DrawLine+0x3a>
		x0 = SSD1306_WIDTH - 1;
 800155e:	237f      	movs	r3, #127	@ 0x7f
 8001560:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= SSD1306_WIDTH) {
 8001562:	887b      	ldrh	r3, [r7, #2]
 8001564:	2b7f      	cmp	r3, #127	@ 0x7f
 8001566:	d901      	bls.n	800156c <Display_DrawLine+0x44>
		x1 = SSD1306_WIDTH - 1;
 8001568:	237f      	movs	r3, #127	@ 0x7f
 800156a:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= SSD1306_HEIGHT) {
 800156c:	88bb      	ldrh	r3, [r7, #4]
 800156e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001570:	d901      	bls.n	8001576 <Display_DrawLine+0x4e>
		y0 = SSD1306_HEIGHT - 1;
 8001572:	233f      	movs	r3, #63	@ 0x3f
 8001574:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= SSD1306_HEIGHT) {
 8001576:	883b      	ldrh	r3, [r7, #0]
 8001578:	2b3f      	cmp	r3, #63	@ 0x3f
 800157a:	d901      	bls.n	8001580 <Display_DrawLine+0x58>
		y1 = SSD1306_HEIGHT - 1;
 800157c:	233f      	movs	r3, #63	@ 0x3f
 800157e:	803b      	strh	r3, [r7, #0]
	}

	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1);
 8001580:	88fa      	ldrh	r2, [r7, #6]
 8001582:	887b      	ldrh	r3, [r7, #2]
 8001584:	429a      	cmp	r2, r3
 8001586:	d205      	bcs.n	8001594 <Display_DrawLine+0x6c>
 8001588:	887a      	ldrh	r2, [r7, #2]
 800158a:	88fb      	ldrh	r3, [r7, #6]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	b29b      	uxth	r3, r3
 8001590:	b21b      	sxth	r3, r3
 8001592:	e004      	b.n	800159e <Display_DrawLine+0x76>
 8001594:	88fa      	ldrh	r2, [r7, #6]
 8001596:	887b      	ldrh	r3, [r7, #2]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	b29b      	uxth	r3, r3
 800159c:	b21b      	sxth	r3, r3
 800159e:	81bb      	strh	r3, [r7, #12]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1);
 80015a0:	88ba      	ldrh	r2, [r7, #4]
 80015a2:	883b      	ldrh	r3, [r7, #0]
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d205      	bcs.n	80015b4 <Display_DrawLine+0x8c>
 80015a8:	883a      	ldrh	r2, [r7, #0]
 80015aa:	88bb      	ldrh	r3, [r7, #4]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	b21b      	sxth	r3, r3
 80015b2:	e004      	b.n	80015be <Display_DrawLine+0x96>
 80015b4:	88ba      	ldrh	r2, [r7, #4]
 80015b6:	883b      	ldrh	r3, [r7, #0]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	b29b      	uxth	r3, r3
 80015bc:	b21b      	sxth	r3, r3
 80015be:	817b      	strh	r3, [r7, #10]

	if (dx == 0) {
 80015c0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d129      	bne.n	800161c <Display_DrawLine+0xf4>
		if (y1 < y0) {
 80015c8:	883a      	ldrh	r2, [r7, #0]
 80015ca:	88bb      	ldrh	r3, [r7, #4]
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d205      	bcs.n	80015dc <Display_DrawLine+0xb4>
			tmp = y1;
 80015d0:	883b      	ldrh	r3, [r7, #0]
 80015d2:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 80015d4:	88bb      	ldrh	r3, [r7, #4]
 80015d6:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 80015d8:	893b      	ldrh	r3, [r7, #8]
 80015da:	80bb      	strh	r3, [r7, #4]
		}

		if (x1 < x0) {
 80015dc:	887a      	ldrh	r2, [r7, #2]
 80015de:	88fb      	ldrh	r3, [r7, #6]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d205      	bcs.n	80015f0 <Display_DrawLine+0xc8>
			tmp = x1;
 80015e4:	887b      	ldrh	r3, [r7, #2]
 80015e6:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 80015e8:	88fb      	ldrh	r3, [r7, #6]
 80015ea:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 80015ec:	893b      	ldrh	r3, [r7, #8]
 80015ee:	80fb      	strh	r3, [r7, #6]
		}

		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 80015f0:	88bb      	ldrh	r3, [r7, #4]
 80015f2:	81fb      	strh	r3, [r7, #14]
 80015f4:	e00c      	b.n	8001610 <Display_DrawLine+0xe8>
			Display_DrawPixel(x0, i, c);
 80015f6:	89f9      	ldrh	r1, [r7, #14]
 80015f8:	f897 2020 	ldrb.w	r2, [r7, #32]
 80015fc:	88fb      	ldrh	r3, [r7, #6]
 80015fe:	4618      	mov	r0, r3
 8001600:	f7ff fe28 	bl	8001254 <Display_DrawPixel>
		for (i = y0; i <= y1; i++) {
 8001604:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001608:	b29b      	uxth	r3, r3
 800160a:	3301      	adds	r3, #1
 800160c:	b29b      	uxth	r3, r3
 800160e:	81fb      	strh	r3, [r7, #14]
 8001610:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001614:	883b      	ldrh	r3, [r7, #0]
 8001616:	429a      	cmp	r2, r3
 8001618:	dded      	ble.n	80015f6 <Display_DrawLine+0xce>
		}

		/* Return from function */
		return;
 800161a:	e030      	b.n	800167e <Display_DrawLine+0x156>
	}

	if (dy == 0) {
 800161c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d12b      	bne.n	800167c <Display_DrawLine+0x154>
		if (y1 < y0) {
 8001624:	883a      	ldrh	r2, [r7, #0]
 8001626:	88bb      	ldrh	r3, [r7, #4]
 8001628:	429a      	cmp	r2, r3
 800162a:	d205      	bcs.n	8001638 <Display_DrawLine+0x110>
			tmp = y1;
 800162c:	883b      	ldrh	r3, [r7, #0]
 800162e:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8001630:	88bb      	ldrh	r3, [r7, #4]
 8001632:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8001634:	893b      	ldrh	r3, [r7, #8]
 8001636:	80bb      	strh	r3, [r7, #4]
		}

		if (x1 < x0) {
 8001638:	887a      	ldrh	r2, [r7, #2]
 800163a:	88fb      	ldrh	r3, [r7, #6]
 800163c:	429a      	cmp	r2, r3
 800163e:	d205      	bcs.n	800164c <Display_DrawLine+0x124>
			tmp = x1;
 8001640:	887b      	ldrh	r3, [r7, #2]
 8001642:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8001644:	88fb      	ldrh	r3, [r7, #6]
 8001646:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8001648:	893b      	ldrh	r3, [r7, #8]
 800164a:	80fb      	strh	r3, [r7, #6]
		}

		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 800164c:	88fb      	ldrh	r3, [r7, #6]
 800164e:	81fb      	strh	r3, [r7, #14]
 8001650:	e00c      	b.n	800166c <Display_DrawLine+0x144>
			Display_DrawPixel(i, y0, c);
 8001652:	89fb      	ldrh	r3, [r7, #14]
 8001654:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001658:	88b9      	ldrh	r1, [r7, #4]
 800165a:	4618      	mov	r0, r3
 800165c:	f7ff fdfa 	bl	8001254 <Display_DrawPixel>
		for (i = x0; i <= x1; i++) {
 8001660:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001664:	b29b      	uxth	r3, r3
 8001666:	3301      	adds	r3, #1
 8001668:	b29b      	uxth	r3, r3
 800166a:	81fb      	strh	r3, [r7, #14]
 800166c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001670:	887b      	ldrh	r3, [r7, #2]
 8001672:	429a      	cmp	r2, r3
 8001674:	dded      	ble.n	8001652 <Display_DrawLine+0x12a>
		}
	}
	return;
 8001676:	e001      	b.n	800167c <Display_DrawLine+0x154>
		return;
 8001678:	bf00      	nop
 800167a:	e000      	b.n	800167e <Display_DrawLine+0x156>
	return;
 800167c:	bf00      	nop
}
 800167e:	3714      	adds	r7, #20
 8001680:	46bd      	mov	sp, r7
 8001682:	bd90      	pop	{r4, r7, pc}

08001684 <Display_DrawFilledRectangle>:
	Display_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
	Display_DrawLine(x, y, x, y + h, c);         /* Left line */
	Display_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
}

void Display_DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 8001684:	b590      	push	{r4, r7, lr}
 8001686:	b087      	sub	sp, #28
 8001688:	af02      	add	r7, sp, #8
 800168a:	4604      	mov	r4, r0
 800168c:	4608      	mov	r0, r1
 800168e:	4611      	mov	r1, r2
 8001690:	461a      	mov	r2, r3
 8001692:	4623      	mov	r3, r4
 8001694:	80fb      	strh	r3, [r7, #6]
 8001696:	4603      	mov	r3, r0
 8001698:	80bb      	strh	r3, [r7, #4]
 800169a:	460b      	mov	r3, r1
 800169c:	807b      	strh	r3, [r7, #2]
 800169e:	4613      	mov	r3, r2
 80016a0:	803b      	strh	r3, [r7, #0]
	uint8_t i;

	/* Check input parameters */
	if (
 80016a2:	88fb      	ldrh	r3, [r7, #6]
 80016a4:	2b7f      	cmp	r3, #127	@ 0x7f
 80016a6:	d836      	bhi.n	8001716 <Display_DrawFilledRectangle+0x92>
		x >= SSD1306_WIDTH ||
 80016a8:	88bb      	ldrh	r3, [r7, #4]
 80016aa:	2b3f      	cmp	r3, #63	@ 0x3f
 80016ac:	d833      	bhi.n	8001716 <Display_DrawFilledRectangle+0x92>
		/* Return error */
		return;
	}

	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 80016ae:	88fa      	ldrh	r2, [r7, #6]
 80016b0:	887b      	ldrh	r3, [r7, #2]
 80016b2:	4413      	add	r3, r2
 80016b4:	2b7f      	cmp	r3, #127	@ 0x7f
 80016b6:	dd03      	ble.n	80016c0 <Display_DrawFilledRectangle+0x3c>
		w = SSD1306_WIDTH - x;
 80016b8:	88fb      	ldrh	r3, [r7, #6]
 80016ba:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 80016be:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 80016c0:	88ba      	ldrh	r2, [r7, #4]
 80016c2:	883b      	ldrh	r3, [r7, #0]
 80016c4:	4413      	add	r3, r2
 80016c6:	2b3f      	cmp	r3, #63	@ 0x3f
 80016c8:	dd03      	ble.n	80016d2 <Display_DrawFilledRectangle+0x4e>
		h = SSD1306_HEIGHT - y;
 80016ca:	88bb      	ldrh	r3, [r7, #4]
 80016cc:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 80016d0:	803b      	strh	r3, [r7, #0]
	}

	/* Draw lines */
	for (i = 0; i <= h; i++) {
 80016d2:	2300      	movs	r3, #0
 80016d4:	73fb      	strb	r3, [r7, #15]
 80016d6:	e018      	b.n	800170a <Display_DrawFilledRectangle+0x86>
		/* Draw lines */
		Display_DrawLine(x, y + i, x + w, y + i, c);
 80016d8:	7bfb      	ldrb	r3, [r7, #15]
 80016da:	b29a      	uxth	r2, r3
 80016dc:	88bb      	ldrh	r3, [r7, #4]
 80016de:	4413      	add	r3, r2
 80016e0:	b299      	uxth	r1, r3
 80016e2:	88fa      	ldrh	r2, [r7, #6]
 80016e4:	887b      	ldrh	r3, [r7, #2]
 80016e6:	4413      	add	r3, r2
 80016e8:	b29c      	uxth	r4, r3
 80016ea:	7bfb      	ldrb	r3, [r7, #15]
 80016ec:	b29a      	uxth	r2, r3
 80016ee:	88bb      	ldrh	r3, [r7, #4]
 80016f0:	4413      	add	r3, r2
 80016f2:	b29a      	uxth	r2, r3
 80016f4:	88f8      	ldrh	r0, [r7, #6]
 80016f6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80016fa:	9300      	str	r3, [sp, #0]
 80016fc:	4613      	mov	r3, r2
 80016fe:	4622      	mov	r2, r4
 8001700:	f7ff ff12 	bl	8001528 <Display_DrawLine>
	for (i = 0; i <= h; i++) {
 8001704:	7bfb      	ldrb	r3, [r7, #15]
 8001706:	3301      	adds	r3, #1
 8001708:	73fb      	strb	r3, [r7, #15]
 800170a:	7bfb      	ldrb	r3, [r7, #15]
 800170c:	b29b      	uxth	r3, r3
 800170e:	883a      	ldrh	r2, [r7, #0]
 8001710:	429a      	cmp	r2, r3
 8001712:	d2e1      	bcs.n	80016d8 <Display_DrawFilledRectangle+0x54>
 8001714:	e000      	b.n	8001718 <Display_DrawFilledRectangle+0x94>
		return;
 8001716:	bf00      	nop
	}
}
 8001718:	3714      	adds	r7, #20
 800171a:	46bd      	mov	sp, r7
 800171c:	bd90      	pop	{r4, r7, pc}

0800171e <Encoder_Init>:
 *      Author: Agustín Alejandro Mayer
 */

#include "Motors/encoder.h"

void Encoder_Init(s_encoder *enc, uint8_t reset){
 800171e:	b480      	push	{r7}
 8001720:	b083      	sub	sp, #12
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
 8001726:	460b      	mov	r3, r1
 8001728:	70fb      	strb	r3, [r7, #3]
	enc->pulses = 0;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2200      	movs	r2, #0
 800172e:	809a      	strh	r2, [r3, #4]
	enc->resetBase = reset;
 8001730:	78fb      	ldrb	r3, [r7, #3]
 8001732:	b29a      	uxth	r2, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	801a      	strh	r2, [r3, #0]
	enc->timeReset = reset;
 8001738:	78fb      	ldrb	r3, [r7, #3]
 800173a:	b29a      	uxth	r2, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	805a      	strh	r2, [r3, #2]
	enc->counter1s = 1000 / reset;
 8001740:	78fb      	ldrb	r3, [r7, #3]
 8001742:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001746:	fb92 f3f3 	sdiv	r3, r2, r3
 800174a:	b2da      	uxtb	r2, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	729a      	strb	r2, [r3, #10]
}
 8001750:	bf00      	nop
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <Encoder_Task>:

void Encoder_Task(s_encoder *enc){
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
	enc->timeReset--;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	885b      	ldrh	r3, [r3, #2]
 8001768:	3b01      	subs	r3, #1
 800176a:	b29a      	uxth	r2, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	805a      	strh	r2, [r3, #2]
	if(!enc->timeReset){
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	885b      	ldrh	r3, [r3, #2]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d10e      	bne.n	8001796 <Encoder_Task+0x3a>

		enc->fastPPS += enc->pulses;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	88da      	ldrh	r2, [r3, #6]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	889b      	ldrh	r3, [r3, #4]
 8001780:	4413      	add	r3, r2
 8001782:	b29a      	uxth	r2, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	80da      	strh	r2, [r3, #6]

		enc->timeReset = enc->resetBase;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	881a      	ldrh	r2, [r3, #0]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	805a      	strh	r2, [r3, #2]
		enc->pulses = 0;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2200      	movs	r2, #0
 8001794:	809a      	strh	r2, [r3, #4]
	}
	enc->counter1s--;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	7a9b      	ldrb	r3, [r3, #10]
 800179a:	3b01      	subs	r3, #1
 800179c:	b2da      	uxtb	r2, r3
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	729a      	strb	r2, [r3, #10]
	if(!enc->counter1s){
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	7a9b      	ldrb	r3, [r3, #10]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d102      	bne.n	80017b0 <Encoder_Task+0x54>
		enc->pps = 0;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2200      	movs	r2, #0
 80017ae:	811a      	strh	r2, [r3, #8]
	}
}
 80017b0:	bf00      	nop
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr

080017bc <Encoder_Add_Pulse>:

void Encoder_Add_Pulse(s_encoder *enc){
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
	enc->pulses++;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	889b      	ldrh	r3, [r3, #4]
 80017c8:	3301      	adds	r3, #1
 80017ca:	b29a      	uxth	r2, r3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	809a      	strh	r2, [r3, #4]
}
 80017d0:	bf00      	nop
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr

080017dc <Encoder_1s_Elapsed>:

void Encoder_1s_Elapsed(s_encoder *enc){
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
	enc->pps = enc->fastPPS;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	88da      	ldrh	r2, [r3, #6]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	811a      	strh	r2, [r3, #8]
	enc->fastPPS=0;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2200      	movs	r2, #0
 80017f0:	80da      	strh	r2, [r3, #6]
}
 80017f2:	bf00      	nop
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr

080017fe <Motor_Init>:
 */
#include "Motors/motors.h"
#include <stddef.h>

void Motor_Init(s_motor *motor, void (*PWM_set)(uint16_t dCycle),
		void (*PIN_set)(uint8_t A, uint8_t B), uint16_t max_value){
 80017fe:	b480      	push	{r7}
 8001800:	b085      	sub	sp, #20
 8001802:	af00      	add	r7, sp, #0
 8001804:	60f8      	str	r0, [r7, #12]
 8001806:	60b9      	str	r1, [r7, #8]
 8001808:	607a      	str	r2, [r7, #4]
 800180a:	807b      	strh	r3, [r7, #2]

	motor->direction = NO_INIT;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	2200      	movs	r2, #0
 8001810:	701a      	strb	r2, [r3, #0]
	motor->setPins = PIN_set;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	611a      	str	r2, [r3, #16]
	motor->setPWM = PWM_set;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	68ba      	ldr	r2, [r7, #8]
 800181c:	615a      	str	r2, [r3, #20]
	motor->maxValue = max_value;
 800181e:	887a      	ldrh	r2, [r7, #2]
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	605a      	str	r2, [r3, #4]
	motor->vel = 0;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	2200      	movs	r2, #0
 8001828:	609a      	str	r2, [r3, #8]
	motor->brakeTimeout = 0;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	2200      	movs	r2, #0
 800182e:	819a      	strh	r2, [r3, #12]
}
 8001830:	bf00      	nop
 8001832:	3714      	adds	r7, #20
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <Motor_Set_Speed>:

void Motor_Set_Speed(s_motor *motor, int8_t speed){
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	460b      	mov	r3, r1
 8001846:	70fb      	strb	r3, [r7, #3]
	if(motor->setPWM == NULL)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	695b      	ldr	r3, [r3, #20]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d050      	beq.n	80018f2 <Motor_Set_Speed+0xb6>
		return;
	if(speed > 100)
 8001850:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001854:	2b64      	cmp	r3, #100	@ 0x64
 8001856:	dd01      	ble.n	800185c <Motor_Set_Speed+0x20>
		speed = 100;
 8001858:	2364      	movs	r3, #100	@ 0x64
 800185a:	70fb      	strb	r3, [r7, #3]
	if(speed < -100)
 800185c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001860:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 8001864:	da01      	bge.n	800186a <Motor_Set_Speed+0x2e>
		speed = -100;
 8001866:	239c      	movs	r3, #156	@ 0x9c
 8001868:	70fb      	strb	r3, [r7, #3]
	if(speed == motor->vel)
 800186a:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	429a      	cmp	r2, r3
 8001874:	d03f      	beq.n	80018f6 <Motor_Set_Speed+0xba>
		return;

	motor->vel = speed * 600;
 8001876:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800187a:	f44f 7216 	mov.w	r2, #600	@ 0x258
 800187e:	fb03 f202 	mul.w	r2, r3, r2
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	609a      	str	r2, [r3, #8]

	if(speed > 0){
 8001886:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800188a:	2b00      	cmp	r3, #0
 800188c:	dd10      	ble.n	80018b0 <Motor_Set_Speed+0x74>
		motor->direction = FORWARD;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2202      	movs	r2, #2
 8001892:	701a      	strb	r2, [r3, #0]
		Motor_Set_Direction(motor, FORWARD);
 8001894:	2102      	movs	r1, #2
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f000 f832 	bl	8001900 <Motor_Set_Direction>
		motor->setPWM((uint16_t)motor->vel-1);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	695b      	ldr	r3, [r3, #20]
 80018a0:	687a      	ldr	r2, [r7, #4]
 80018a2:	6892      	ldr	r2, [r2, #8]
 80018a4:	b292      	uxth	r2, r2
 80018a6:	3a01      	subs	r2, #1
 80018a8:	b292      	uxth	r2, r2
 80018aa:	4610      	mov	r0, r2
 80018ac:	4798      	blx	r3
 80018ae:	e023      	b.n	80018f8 <Motor_Set_Speed+0xbc>
	}else if(speed < 0){
 80018b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	da10      	bge.n	80018da <Motor_Set_Speed+0x9e>
		motor->direction = BACKWARD;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2203      	movs	r2, #3
 80018bc:	701a      	strb	r2, [r3, #0]
		Motor_Set_Direction(motor, BACKWARD);
 80018be:	2103      	movs	r1, #3
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	f000 f81d 	bl	8001900 <Motor_Set_Direction>
		motor->setPWM((uint16_t)(motor->vel * -1)-1);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	695b      	ldr	r3, [r3, #20]
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	6892      	ldr	r2, [r2, #8]
 80018ce:	b292      	uxth	r2, r2
 80018d0:	43d2      	mvns	r2, r2
 80018d2:	b292      	uxth	r2, r2
 80018d4:	4610      	mov	r0, r2
 80018d6:	4798      	blx	r3
 80018d8:	e00e      	b.n	80018f8 <Motor_Set_Speed+0xbc>
	}else{
		motor->direction = FREE_WHEEL;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2201      	movs	r2, #1
 80018de:	701a      	strb	r2, [r3, #0]
		Motor_Set_Direction(motor, FREE_WHEEL);
 80018e0:	2101      	movs	r1, #1
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f000 f80c 	bl	8001900 <Motor_Set_Direction>
		motor->setPWM(0);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	695b      	ldr	r3, [r3, #20]
 80018ec:	2000      	movs	r0, #0
 80018ee:	4798      	blx	r3
 80018f0:	e002      	b.n	80018f8 <Motor_Set_Speed+0xbc>
		return;
 80018f2:	bf00      	nop
 80018f4:	e000      	b.n	80018f8 <Motor_Set_Speed+0xbc>
		return;
 80018f6:	bf00      	nop
	}
}
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
	...

08001900 <Motor_Set_Direction>:

void Motor_Set_Direction(s_motor *motor, e_direction direction){
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	460b      	mov	r3, r1
 800190a:	70fb      	strb	r3, [r7, #3]
	if(motor->setPins == NULL)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	691b      	ldr	r3, [r3, #16]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d027      	beq.n	8001964 <Motor_Set_Direction+0x64>
		return;
	switch(direction){
 8001914:	78fb      	ldrb	r3, [r7, #3]
 8001916:	2b04      	cmp	r3, #4
 8001918:	d825      	bhi.n	8001966 <Motor_Set_Direction+0x66>
 800191a:	a201      	add	r2, pc, #4	@ (adr r2, 8001920 <Motor_Set_Direction+0x20>)
 800191c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001920:	08001967 	.word	0x08001967
 8001924:	08001935 	.word	0x08001935
 8001928:	08001941 	.word	0x08001941
 800192c:	0800194d 	.word	0x0800194d
 8001930:	08001959 	.word	0x08001959
		case NO_INIT:
			break;
		case FREE_WHEEL:
			motor->setPins(0, 0);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	691b      	ldr	r3, [r3, #16]
 8001938:	2100      	movs	r1, #0
 800193a:	2000      	movs	r0, #0
 800193c:	4798      	blx	r3
			break;
 800193e:	e012      	b.n	8001966 <Motor_Set_Direction+0x66>
		case FORWARD:
			motor->setPins(1, 0);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	691b      	ldr	r3, [r3, #16]
 8001944:	2100      	movs	r1, #0
 8001946:	2001      	movs	r0, #1
 8001948:	4798      	blx	r3
			break;
 800194a:	e00c      	b.n	8001966 <Motor_Set_Direction+0x66>
		case BACKWARD:
			motor->setPins(0, 1);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	691b      	ldr	r3, [r3, #16]
 8001950:	2101      	movs	r1, #1
 8001952:	2000      	movs	r0, #0
 8001954:	4798      	blx	r3
			break;
 8001956:	e006      	b.n	8001966 <Motor_Set_Direction+0x66>
		case BRAKE:
			motor->setPins(1, 1);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	691b      	ldr	r3, [r3, #16]
 800195c:	2101      	movs	r1, #1
 800195e:	2001      	movs	r0, #1
 8001960:	4798      	blx	r3
			break;
 8001962:	e000      	b.n	8001966 <Motor_Set_Direction+0x66>
		return;
 8001964:	bf00      	nop
	}
}
 8001966:	3708      	adds	r7, #8
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}

0800196c <Motor_Break_Timeout>:
	motor->direction = BRAKE;
	Motor_Set_Direction(motor, BRAKE);

}

void Motor_Break_Timeout(s_motor *motor){
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
	if(motor->direction == BRAKE){
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	2b04      	cmp	r3, #4
 800197a:	d10c      	bne.n	8001996 <Motor_Break_Timeout+0x2a>
		motor->brakeTimeout--;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	899b      	ldrh	r3, [r3, #12]
 8001980:	3b01      	subs	r3, #1
 8001982:	b29a      	uxth	r2, r3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	819a      	strh	r2, [r3, #12]
		if(!motor->brakeTimeout)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	899b      	ldrh	r3, [r3, #12]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d102      	bne.n	8001996 <Motor_Break_Timeout+0x2a>
			motor->direction = FREE_WHEEL;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2201      	movs	r2, #1
 8001994:	701a      	strb	r2, [r3, #0]
	}
}
 8001996:	bf00      	nop
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr

080019a2 <Comm_Init>:
static uint8_t TxAuxBuffer[30];
static uint8_t indexStart;
static uint8_t indexStartValue;
static uint8_t checksum;

void Comm_Init(s_commData* comm, void (*dataD)(s_commData *comm), void (*dataW)(s_commData *comm)){
 80019a2:	b480      	push	{r7}
 80019a4:	b085      	sub	sp, #20
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	60f8      	str	r0, [r7, #12]
 80019aa:	60b9      	str	r1, [r7, #8]
 80019ac:	607a      	str	r2, [r7, #4]
	comm->dataDecoder = dataD;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	68ba      	ldr	r2, [r7, #8]
 80019b2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
	comm->dataWriter = dataW;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	687a      	ldr	r2, [r7, #4]
 80019ba:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
	comm->timeOut = 0;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	2200      	movs	r2, #0
 80019c2:	701a      	strb	r2, [r3, #0]
	comm->indexStart = 0;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	2200      	movs	r2, #0
 80019c8:	705a      	strb	r2, [r3, #1]
	comm->checksumRx = 0;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	2200      	movs	r2, #0
 80019ce:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
	comm->Tx.write=0;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	2200      	movs	r2, #0
 80019d6:	70da      	strb	r2, [r3, #3]
	comm->Tx.read=0;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	2200      	movs	r2, #0
 80019dc:	709a      	strb	r2, [r3, #2]
	comm->Rx.write=0;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	2200      	movs	r2, #0
 80019e2:	f883 2105 	strb.w	r2, [r3, #261]	@ 0x105
	comm->Rx.read=0;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	2200      	movs	r2, #0
 80019ea:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
	comm->isESP01 = 0;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	2200      	movs	r2, #0
 80019f2:	f883 222f 	strb.w	r2, [r3, #559]	@ 0x22f
	comm->protocolState = START;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	2200      	movs	r2, #0
 80019fa:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
}
 80019fe:	bf00      	nop
 8001a00:	3714      	adds	r7, #20
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr

08001a0a <Comm_Task>:

void Comm_Task(s_commData* comm){
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b082      	sub	sp, #8
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
	if(comm->Rx.read != comm->Rx.write){
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	f893 2104 	ldrb.w	r2, [r3, #260]	@ 0x104
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d002      	beq.n	8001a28 <Comm_Task+0x1e>
		decodeProtocol(comm);
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f000 f81a 	bl	8001a5c <decodeProtocol>
	}
	if (comm->Tx.read != comm->Tx.write) {
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	789a      	ldrb	r2, [r3, #2]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	78db      	ldrb	r3, [r3, #3]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d00e      	beq.n	8001a52 <Comm_Task+0x48>
		if(!comm->isESP01){
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	f893 322f 	ldrb.w	r3, [r3, #559]	@ 0x22f
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d109      	bne.n	8001a52 <Comm_Task+0x48>
			if(comm->dataWriter != NULL)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d004      	beq.n	8001a52 <Comm_Task+0x48>
				comm->dataWriter(comm);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	4798      	blx	r3
		}else{
			//ESP01_Send((unsigned char*)&comm->Tx.buffer,  comm->Tx.read,  1,  RINGBUFFLENGTH);
		}
	}
}
 8001a52:	bf00      	nop
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
	...

08001a5c <decodeProtocol>:

void decodeProtocol(s_commData *datosCom){
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
	static uint8_t nBytes=0;
	uint8_t indexWriteRxCopy = datosCom->Rx.write;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 8001a6a:	73fb      	strb	r3, [r7, #15]

	while (datosCom->Rx.read != indexWriteRxCopy){
 8001a6c:	e11b      	b.n	8001ca6 <decodeProtocol+0x24a>
		switch(datosCom->protocolState){
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	f893 322e 	ldrb.w	r3, [r3, #558]	@ 0x22e
 8001a74:	2b06      	cmp	r3, #6
 8001a76:	f200 810e 	bhi.w	8001c96 <decodeProtocol+0x23a>
 8001a7a:	a201      	add	r2, pc, #4	@ (adr r2, 8001a80 <decodeProtocol+0x24>)
 8001a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a80:	08001a9d 	.word	0x08001a9d
 8001a84:	08001acf 	.word	0x08001acf
 8001a88:	08001b11 	.word	0x08001b11
 8001a8c:	08001b53 	.word	0x08001b53
 8001a90:	08001b95 	.word	0x08001b95
 8001a94:	08001bc7 	.word	0x08001bc7
 8001a98:	08001c19 	.word	0x08001c19
		case START:
			if (datosCom->Rx.buffer[datosCom->Rx.read++] == 'U'){
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8001aa2:	1c5a      	adds	r2, r3, #1
 8001aa4:	b2d1      	uxtb	r1, r2
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	f882 1104 	strb.w	r1, [r2, #260]	@ 0x104
 8001aac:	461a      	mov	r2, r3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8001ab6:	2b55      	cmp	r3, #85	@ 0x55
 8001ab8:	f040 80f2 	bne.w	8001ca0 <decodeProtocol+0x244>
				datosCom->protocolState = HEADER_1;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2201      	movs	r2, #1
 8001ac0:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
				datosCom->checksumRx = 0;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
			}
			break;
 8001acc:	e0e8      	b.n	8001ca0 <decodeProtocol+0x244>
		case HEADER_1:
			if (datosCom->Rx.buffer[datosCom->Rx.read++] == 'N')
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8001ad4:	1c5a      	adds	r2, r3, #1
 8001ad6:	b2d1      	uxtb	r1, r2
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	f882 1104 	strb.w	r1, [r2, #260]	@ 0x104
 8001ade:	461a      	mov	r2, r3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8001ae8:	2b4e      	cmp	r3, #78	@ 0x4e
 8001aea:	d104      	bne.n	8001af6 <decodeProtocol+0x9a>
				datosCom->protocolState = HEADER_2;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2202      	movs	r2, #2
 8001af0:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			else{
				datosCom->Rx.read--;
				datosCom->protocolState = START;
			}
			break;
 8001af4:	e0d7      	b.n	8001ca6 <decodeProtocol+0x24a>
				datosCom->Rx.read--;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8001afc:	3b01      	subs	r3, #1
 8001afe:	b2da      	uxtb	r2, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
				datosCom->protocolState = START;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			break;
 8001b0e:	e0ca      	b.n	8001ca6 <decodeProtocol+0x24a>
		case HEADER_2:
			if (datosCom->Rx.buffer[datosCom->Rx.read++] == 'E')
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8001b16:	1c5a      	adds	r2, r3, #1
 8001b18:	b2d1      	uxtb	r1, r2
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	f882 1104 	strb.w	r1, [r2, #260]	@ 0x104
 8001b20:	461a      	mov	r2, r3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4413      	add	r3, r2
 8001b26:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8001b2a:	2b45      	cmp	r3, #69	@ 0x45
 8001b2c:	d104      	bne.n	8001b38 <decodeProtocol+0xdc>
				datosCom->protocolState = HEADER_3;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2203      	movs	r2, #3
 8001b32:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			else{
				datosCom->Rx.read--;
				datosCom->protocolState = START;
			}
			break;
 8001b36:	e0b6      	b.n	8001ca6 <decodeProtocol+0x24a>
				datosCom->Rx.read--;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8001b3e:	3b01      	subs	r3, #1
 8001b40:	b2da      	uxtb	r2, r3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
				datosCom->protocolState = START;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			break;
 8001b50:	e0a9      	b.n	8001ca6 <decodeProtocol+0x24a>
		case HEADER_3:
			if (datosCom->Rx.buffer[datosCom->Rx.read++] == 'R')
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8001b58:	1c5a      	adds	r2, r3, #1
 8001b5a:	b2d1      	uxtb	r1, r2
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	f882 1104 	strb.w	r1, [r2, #260]	@ 0x104
 8001b62:	461a      	mov	r2, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	4413      	add	r3, r2
 8001b68:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8001b6c:	2b52      	cmp	r3, #82	@ 0x52
 8001b6e:	d104      	bne.n	8001b7a <decodeProtocol+0x11e>
				datosCom->protocolState = NBYTES;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2204      	movs	r2, #4
 8001b74:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			else{
				datosCom->Rx.read--;
				datosCom->protocolState = START;
			}
			break;
 8001b78:	e095      	b.n	8001ca6 <decodeProtocol+0x24a>
				datosCom->Rx.read--;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8001b80:	3b01      	subs	r3, #1
 8001b82:	b2da      	uxtb	r2, r3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
				datosCom->protocolState = START;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			break;
 8001b92:	e088      	b.n	8001ca6 <decodeProtocol+0x24a>
		case NBYTES:
			datosCom->indexStart = datosCom->Rx.read;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f893 2104 	ldrb.w	r2, [r3, #260]	@ 0x104
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	705a      	strb	r2, [r3, #1]
			nBytes = datosCom->Rx.buffer[datosCom->Rx.read++];
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8001ba4:	1c5a      	adds	r2, r3, #1
 8001ba6:	b2d1      	uxtb	r1, r2
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	f882 1104 	strb.w	r1, [r2, #260]	@ 0x104
 8001bae:	461a      	mov	r2, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	f893 2106 	ldrb.w	r2, [r3, #262]	@ 0x106
 8001bb8:	4b41      	ldr	r3, [pc, #260]	@ (8001cc0 <decodeProtocol+0x264>)
 8001bba:	701a      	strb	r2, [r3, #0]
			datosCom->protocolState = TOKEN;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2205      	movs	r2, #5
 8001bc0:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			break;
 8001bc4:	e06f      	b.n	8001ca6 <decodeProtocol+0x24a>
		case TOKEN:
			if (datosCom->Rx.buffer[datosCom->Rx.read++] == ':'){
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8001bcc:	1c5a      	adds	r2, r3, #1
 8001bce:	b2d1      	uxtb	r1, r2
 8001bd0:	687a      	ldr	r2, [r7, #4]
 8001bd2:	f882 1104 	strb.w	r1, [r2, #260]	@ 0x104
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	4413      	add	r3, r2
 8001bdc:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8001be0:	2b3a      	cmp	r3, #58	@ 0x3a
 8001be2:	d10c      	bne.n	8001bfe <decodeProtocol+0x1a2>
				datosCom->protocolState = PAYLOAD;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2206      	movs	r2, #6
 8001be8:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
				datosCom->checksumRx ='U' ^ 'N' ^ 'E' ^ 'R' ^ nBytes ^ ':';
 8001bec:	4b34      	ldr	r3, [pc, #208]	@ (8001cc0 <decodeProtocol+0x264>)
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	f083 0336 	eor.w	r3, r3, #54	@ 0x36
 8001bf4:	b2da      	uxtb	r2, r3
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
			}
			else{
				datosCom->Rx.read--;
				datosCom->protocolState = START;
			}
			break;
 8001bfc:	e053      	b.n	8001ca6 <decodeProtocol+0x24a>
				datosCom->Rx.read--;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8001c04:	3b01      	subs	r3, #1
 8001c06:	b2da      	uxtb	r2, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
				datosCom->protocolState = START;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2200      	movs	r2, #0
 8001c12:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			break;
 8001c16:	e046      	b.n	8001ca6 <decodeProtocol+0x24a>
		case PAYLOAD:
			if (nBytes > 1){
 8001c18:	4b29      	ldr	r3, [pc, #164]	@ (8001cc0 <decodeProtocol+0x264>)
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d914      	bls.n	8001c4a <decodeProtocol+0x1ee>
				datosCom->checksumRx ^= datosCom->Rx.buffer[datosCom->Rx.read++];
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8001c26:	1c5a      	adds	r2, r3, #1
 8001c28:	b2d1      	uxtb	r1, r2
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	f882 1104 	strb.w	r1, [r2, #260]	@ 0x104
 8001c30:	461a      	mov	r2, r3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4413      	add	r3, r2
 8001c36:	f893 2106 	ldrb.w	r2, [r3, #262]	@ 0x106
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8001c40:	4053      	eors	r3, r2
 8001c42:	b2da      	uxtb	r2, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
			}
			nBytes--;
 8001c4a:	4b1d      	ldr	r3, [pc, #116]	@ (8001cc0 <decodeProtocol+0x264>)
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	3b01      	subs	r3, #1
 8001c50:	b2da      	uxtb	r2, r3
 8001c52:	4b1b      	ldr	r3, [pc, #108]	@ (8001cc0 <decodeProtocol+0x264>)
 8001c54:	701a      	strb	r2, [r3, #0]
			if(nBytes<=0){
 8001c56:	4b1a      	ldr	r3, [pc, #104]	@ (8001cc0 <decodeProtocol+0x264>)
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d122      	bne.n	8001ca4 <decodeProtocol+0x248>
				datosCom->protocolState = START;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2200      	movs	r2, #0
 8001c62:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
				if(datosCom->checksumRx == datosCom->Rx.buffer[datosCom->Rx.read]){
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	f893 2206 	ldrb.w	r2, [r3, #518]	@ 0x206
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8001c72:	4619      	mov	r1, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	440b      	add	r3, r1
 8001c78:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d111      	bne.n	8001ca4 <decodeProtocol+0x248>
					if(datosCom->dataDecoder != NULL)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d00c      	beq.n	8001ca4 <decodeProtocol+0x248>
						datosCom->dataDecoder(datosCom);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	4798      	blx	r3
				}
			}
			break;
 8001c94:	e006      	b.n	8001ca4 <decodeProtocol+0x248>
		default:
			datosCom->protocolState = START;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			break;
 8001c9e:	e002      	b.n	8001ca6 <decodeProtocol+0x24a>
			break;
 8001ca0:	bf00      	nop
 8001ca2:	e000      	b.n	8001ca6 <decodeProtocol+0x24a>
			break;
 8001ca4:	bf00      	nop
	while (datosCom->Rx.read != indexWriteRxCopy){
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8001cac:	7bfa      	ldrb	r2, [r7, #15]
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	f47f aedd 	bne.w	8001a6e <decodeProtocol+0x12>
		}
	}
}
 8001cb4:	bf00      	nop
 8001cb6:	bf00      	nop
 8001cb8:	3710      	adds	r7, #16
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	2000082d 	.word	0x2000082d

08001cc4 <comm_sendCMD>:

void comm_sendCMD(s_commData *datosCom, _eID cmd, uint8_t *str, uint8_t len){
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b084      	sub	sp, #16
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	60f8      	str	r0, [r7, #12]
 8001ccc:	607a      	str	r2, [r7, #4]
 8001cce:	461a      	mov	r2, r3
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	72fb      	strb	r3, [r7, #11]
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	72bb      	strb	r3, [r7, #10]
    i = 0;
 8001cd8:	4b62      	ldr	r3, [pc, #392]	@ (8001e64 <comm_sendCMD+0x1a0>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	701a      	strb	r2, [r3, #0]
    auxIndex = 0;
 8001cde:	4b62      	ldr	r3, [pc, #392]	@ (8001e68 <comm_sendCMD+0x1a4>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	701a      	strb	r2, [r3, #0]

    // Cabecera
    TxAuxBuffer[auxIndex++] = 'U'; // Start
 8001ce4:	4b60      	ldr	r3, [pc, #384]	@ (8001e68 <comm_sendCMD+0x1a4>)
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	1c5a      	adds	r2, r3, #1
 8001cea:	b2d1      	uxtb	r1, r2
 8001cec:	4a5e      	ldr	r2, [pc, #376]	@ (8001e68 <comm_sendCMD+0x1a4>)
 8001cee:	7011      	strb	r1, [r2, #0]
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	4b5e      	ldr	r3, [pc, #376]	@ (8001e6c <comm_sendCMD+0x1a8>)
 8001cf4:	2155      	movs	r1, #85	@ 0x55
 8001cf6:	5499      	strb	r1, [r3, r2]
    TxAuxBuffer[auxIndex++] = 'N'; // Header 1
 8001cf8:	4b5b      	ldr	r3, [pc, #364]	@ (8001e68 <comm_sendCMD+0x1a4>)
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	1c5a      	adds	r2, r3, #1
 8001cfe:	b2d1      	uxtb	r1, r2
 8001d00:	4a59      	ldr	r2, [pc, #356]	@ (8001e68 <comm_sendCMD+0x1a4>)
 8001d02:	7011      	strb	r1, [r2, #0]
 8001d04:	461a      	mov	r2, r3
 8001d06:	4b59      	ldr	r3, [pc, #356]	@ (8001e6c <comm_sendCMD+0x1a8>)
 8001d08:	214e      	movs	r1, #78	@ 0x4e
 8001d0a:	5499      	strb	r1, [r3, r2]
    TxAuxBuffer[auxIndex++] = 'E'; // Header 2
 8001d0c:	4b56      	ldr	r3, [pc, #344]	@ (8001e68 <comm_sendCMD+0x1a4>)
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	1c5a      	adds	r2, r3, #1
 8001d12:	b2d1      	uxtb	r1, r2
 8001d14:	4a54      	ldr	r2, [pc, #336]	@ (8001e68 <comm_sendCMD+0x1a4>)
 8001d16:	7011      	strb	r1, [r2, #0]
 8001d18:	461a      	mov	r2, r3
 8001d1a:	4b54      	ldr	r3, [pc, #336]	@ (8001e6c <comm_sendCMD+0x1a8>)
 8001d1c:	2145      	movs	r1, #69	@ 0x45
 8001d1e:	5499      	strb	r1, [r3, r2]
    TxAuxBuffer[auxIndex++] = 'R'; // Header 3
 8001d20:	4b51      	ldr	r3, [pc, #324]	@ (8001e68 <comm_sendCMD+0x1a4>)
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	1c5a      	adds	r2, r3, #1
 8001d26:	b2d1      	uxtb	r1, r2
 8001d28:	4a4f      	ldr	r2, [pc, #316]	@ (8001e68 <comm_sendCMD+0x1a4>)
 8001d2a:	7011      	strb	r1, [r2, #0]
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	4b4f      	ldr	r3, [pc, #316]	@ (8001e6c <comm_sendCMD+0x1a8>)
 8001d30:	2152      	movs	r1, #82	@ 0x52
 8001d32:	5499      	strb	r1, [r3, r2]

    indexStart = auxIndex; // Se guarda la posición del primer dato del mensaje (cmd)
 8001d34:	4b4c      	ldr	r3, [pc, #304]	@ (8001e68 <comm_sendCMD+0x1a4>)
 8001d36:	781a      	ldrb	r2, [r3, #0]
 8001d38:	4b4d      	ldr	r3, [pc, #308]	@ (8001e70 <comm_sendCMD+0x1ac>)
 8001d3a:	701a      	strb	r2, [r3, #0]
    TxAuxBuffer[auxIndex++] = 0;   // Placeholder del indexStart, se sobrescribirá después
 8001d3c:	4b4a      	ldr	r3, [pc, #296]	@ (8001e68 <comm_sendCMD+0x1a4>)
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	1c5a      	adds	r2, r3, #1
 8001d42:	b2d1      	uxtb	r1, r2
 8001d44:	4a48      	ldr	r2, [pc, #288]	@ (8001e68 <comm_sendCMD+0x1a4>)
 8001d46:	7011      	strb	r1, [r2, #0]
 8001d48:	461a      	mov	r2, r3
 8001d4a:	4b48      	ldr	r3, [pc, #288]	@ (8001e6c <comm_sendCMD+0x1a8>)
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	5499      	strb	r1, [r3, r2]

    TxAuxBuffer[auxIndex++] = ':'; // Token
 8001d50:	4b45      	ldr	r3, [pc, #276]	@ (8001e68 <comm_sendCMD+0x1a4>)
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	1c5a      	adds	r2, r3, #1
 8001d56:	b2d1      	uxtb	r1, r2
 8001d58:	4a43      	ldr	r2, [pc, #268]	@ (8001e68 <comm_sendCMD+0x1a4>)
 8001d5a:	7011      	strb	r1, [r2, #0]
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	4b43      	ldr	r3, [pc, #268]	@ (8001e6c <comm_sendCMD+0x1a8>)
 8001d60:	213a      	movs	r1, #58	@ 0x3a
 8001d62:	5499      	strb	r1, [r3, r2]
    TxAuxBuffer[auxIndex++] = cmd; // Comando
 8001d64:	4b40      	ldr	r3, [pc, #256]	@ (8001e68 <comm_sendCMD+0x1a4>)
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	1c5a      	adds	r2, r3, #1
 8001d6a:	b2d1      	uxtb	r1, r2
 8001d6c:	4a3e      	ldr	r2, [pc, #248]	@ (8001e68 <comm_sendCMD+0x1a4>)
 8001d6e:	7011      	strb	r1, [r2, #0]
 8001d70:	4619      	mov	r1, r3
 8001d72:	4a3e      	ldr	r2, [pc, #248]	@ (8001e6c <comm_sendCMD+0x1a8>)
 8001d74:	7afb      	ldrb	r3, [r7, #11]
 8001d76:	5453      	strb	r3, [r2, r1]

    if(cmd == USERTEXT || cmd == SYSERROR)
 8001d78:	7afb      	ldrb	r3, [r7, #11]
 8001d7a:	2bb1      	cmp	r3, #177	@ 0xb1
 8001d7c:	d002      	beq.n	8001d84 <comm_sendCMD+0xc0>
 8001d7e:	7afb      	ldrb	r3, [r7, #11]
 8001d80:	2bee      	cmp	r3, #238	@ 0xee
 8001d82:	d109      	bne.n	8001d98 <comm_sendCMD+0xd4>
    	TxAuxBuffer[auxIndex++] = len;
 8001d84:	4b38      	ldr	r3, [pc, #224]	@ (8001e68 <comm_sendCMD+0x1a4>)
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	1c5a      	adds	r2, r3, #1
 8001d8a:	b2d1      	uxtb	r1, r2
 8001d8c:	4a36      	ldr	r2, [pc, #216]	@ (8001e68 <comm_sendCMD+0x1a4>)
 8001d8e:	7011      	strb	r1, [r2, #0]
 8001d90:	4619      	mov	r1, r3
 8001d92:	4a36      	ldr	r2, [pc, #216]	@ (8001e6c <comm_sendCMD+0x1a8>)
 8001d94:	7abb      	ldrb	r3, [r7, #10]
 8001d96:	5453      	strb	r3, [r2, r1]

    // Copia de datos si hay
    if (str != NULL && len > 0) {
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d013      	beq.n	8001dc6 <comm_sendCMD+0x102>
 8001d9e:	7abb      	ldrb	r3, [r7, #10]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d010      	beq.n	8001dc6 <comm_sendCMD+0x102>
        memcpy(&TxAuxBuffer[auxIndex], str, len);
 8001da4:	4b30      	ldr	r3, [pc, #192]	@ (8001e68 <comm_sendCMD+0x1a4>)
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	461a      	mov	r2, r3
 8001daa:	4b30      	ldr	r3, [pc, #192]	@ (8001e6c <comm_sendCMD+0x1a8>)
 8001dac:	4413      	add	r3, r2
 8001dae:	7aba      	ldrb	r2, [r7, #10]
 8001db0:	6879      	ldr	r1, [r7, #4]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f010 f8f2 	bl	8011f9c <memcpy>
        auxIndex += len;
 8001db8:	4b2b      	ldr	r3, [pc, #172]	@ (8001e68 <comm_sendCMD+0x1a4>)
 8001dba:	781a      	ldrb	r2, [r3, #0]
 8001dbc:	7abb      	ldrb	r3, [r7, #10]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	b2da      	uxtb	r2, r3
 8001dc2:	4b29      	ldr	r3, [pc, #164]	@ (8001e68 <comm_sendCMD+0x1a4>)
 8001dc4:	701a      	strb	r2, [r3, #0]
    }

    indexStartValue = auxIndex - indexStart - 1; // Cantidad de datos desde cmd hasta checksum
 8001dc6:	4b28      	ldr	r3, [pc, #160]	@ (8001e68 <comm_sendCMD+0x1a4>)
 8001dc8:	781a      	ldrb	r2, [r3, #0]
 8001dca:	4b29      	ldr	r3, [pc, #164]	@ (8001e70 <comm_sendCMD+0x1ac>)
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	3b01      	subs	r3, #1
 8001dd4:	b2da      	uxtb	r2, r3
 8001dd6:	4b27      	ldr	r3, [pc, #156]	@ (8001e74 <comm_sendCMD+0x1b0>)
 8001dd8:	701a      	strb	r2, [r3, #0]
    TxAuxBuffer[indexStart] = indexStartValue;
 8001dda:	4b25      	ldr	r3, [pc, #148]	@ (8001e70 <comm_sendCMD+0x1ac>)
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	461a      	mov	r2, r3
 8001de0:	4b24      	ldr	r3, [pc, #144]	@ (8001e74 <comm_sendCMD+0x1b0>)
 8001de2:	7819      	ldrb	r1, [r3, #0]
 8001de4:	4b21      	ldr	r3, [pc, #132]	@ (8001e6c <comm_sendCMD+0x1a8>)
 8001de6:	5499      	strb	r1, [r3, r2]

    // Checksum
    checksum = 0;
 8001de8:	4b23      	ldr	r3, [pc, #140]	@ (8001e78 <comm_sendCMD+0x1b4>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < auxIndex; i++) {
 8001dee:	4b1d      	ldr	r3, [pc, #116]	@ (8001e64 <comm_sendCMD+0x1a0>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	701a      	strb	r2, [r3, #0]
 8001df4:	e01f      	b.n	8001e36 <comm_sendCMD+0x172>
        checksum ^= TxAuxBuffer[i];
 8001df6:	4b1b      	ldr	r3, [pc, #108]	@ (8001e64 <comm_sendCMD+0x1a0>)
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	4b1b      	ldr	r3, [pc, #108]	@ (8001e6c <comm_sendCMD+0x1a8>)
 8001dfe:	5c9a      	ldrb	r2, [r3, r2]
 8001e00:	4b1d      	ldr	r3, [pc, #116]	@ (8001e78 <comm_sendCMD+0x1b4>)
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	4053      	eors	r3, r2
 8001e06:	b2da      	uxtb	r2, r3
 8001e08:	4b1b      	ldr	r3, [pc, #108]	@ (8001e78 <comm_sendCMD+0x1b4>)
 8001e0a:	701a      	strb	r2, [r3, #0]
        datosCom->Tx.buffer[datosCom->Tx.write++] = TxAuxBuffer[i];
 8001e0c:	4b15      	ldr	r3, [pc, #84]	@ (8001e64 <comm_sendCMD+0x1a0>)
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	4618      	mov	r0, r3
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	78db      	ldrb	r3, [r3, #3]
 8001e16:	1c5a      	adds	r2, r3, #1
 8001e18:	b2d1      	uxtb	r1, r2
 8001e1a:	68fa      	ldr	r2, [r7, #12]
 8001e1c:	70d1      	strb	r1, [r2, #3]
 8001e1e:	4619      	mov	r1, r3
 8001e20:	4b12      	ldr	r3, [pc, #72]	@ (8001e6c <comm_sendCMD+0x1a8>)
 8001e22:	5c1a      	ldrb	r2, [r3, r0]
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	440b      	add	r3, r1
 8001e28:	711a      	strb	r2, [r3, #4]
    for (i = 0; i < auxIndex; i++) {
 8001e2a:	4b0e      	ldr	r3, [pc, #56]	@ (8001e64 <comm_sendCMD+0x1a0>)
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	3301      	adds	r3, #1
 8001e30:	b2da      	uxtb	r2, r3
 8001e32:	4b0c      	ldr	r3, [pc, #48]	@ (8001e64 <comm_sendCMD+0x1a0>)
 8001e34:	701a      	strb	r2, [r3, #0]
 8001e36:	4b0b      	ldr	r3, [pc, #44]	@ (8001e64 <comm_sendCMD+0x1a0>)
 8001e38:	781a      	ldrb	r2, [r3, #0]
 8001e3a:	4b0b      	ldr	r3, [pc, #44]	@ (8001e68 <comm_sendCMD+0x1a4>)
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d3d9      	bcc.n	8001df6 <comm_sendCMD+0x132>
    }

    datosCom->Tx.buffer[datosCom->Tx.write++] = checksum;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	78db      	ldrb	r3, [r3, #3]
 8001e46:	1c5a      	adds	r2, r3, #1
 8001e48:	b2d1      	uxtb	r1, r2
 8001e4a:	68fa      	ldr	r2, [r7, #12]
 8001e4c:	70d1      	strb	r1, [r2, #3]
 8001e4e:	4619      	mov	r1, r3
 8001e50:	4b09      	ldr	r3, [pc, #36]	@ (8001e78 <comm_sendCMD+0x1b4>)
 8001e52:	781a      	ldrb	r2, [r3, #0]
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	440b      	add	r3, r1
 8001e58:	711a      	strb	r2, [r3, #4]
}
 8001e5a:	bf00      	nop
 8001e5c:	3710      	adds	r7, #16
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	2000080a 	.word	0x2000080a
 8001e68:	2000080b 	.word	0x2000080b
 8001e6c:	2000080c 	.word	0x2000080c
 8001e70:	2000082a 	.word	0x2000082a
 8001e74:	2000082b 	.word	0x2000082b
 8001e78:	2000082c 	.word	0x2000082c

08001e7c <ESP01_SetWIFI>:
//const char CIFSRAPMAC[] = "+CIFSR:APMAC\r";
//const char CIFSRSTAIP[] = "+CIFSR:STAIP\r";
//const char CIFSRSTAMAC[] = "+CIFSR:STAMAC\r";


void ESP01_SetWIFI(const char *ssid, const char *password){
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	6039      	str	r1, [r7, #0]
	esp01ATSate = ESP01ATIDLE;
 8001e86:	4b12      	ldr	r3, [pc, #72]	@ (8001ed0 <ESP01_SetWIFI+0x54>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	701a      	strb	r2, [r3, #0]
	esp01Flags.byte = 0;
 8001e8c:	4b11      	ldr	r3, [pc, #68]	@ (8001ed4 <ESP01_SetWIFI+0x58>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	701a      	strb	r2, [r3, #0]

	strncpy(esp01SSID, ssid, 64);
 8001e92:	2240      	movs	r2, #64	@ 0x40
 8001e94:	6879      	ldr	r1, [r7, #4]
 8001e96:	4810      	ldr	r0, [pc, #64]	@ (8001ed8 <ESP01_SetWIFI+0x5c>)
 8001e98:	f010 f840 	bl	8011f1c <strncpy>
	esp01SSID[63] = '\0';
 8001e9c:	4b0e      	ldr	r3, [pc, #56]	@ (8001ed8 <ESP01_SetWIFI+0x5c>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
	strncpy(esp01PASSWORD, password, 32);
 8001ea4:	2220      	movs	r2, #32
 8001ea6:	6839      	ldr	r1, [r7, #0]
 8001ea8:	480c      	ldr	r0, [pc, #48]	@ (8001edc <ESP01_SetWIFI+0x60>)
 8001eaa:	f010 f837 	bl	8011f1c <strncpy>
	esp01PASSWORD[31] = '\0';
 8001eae:	4b0b      	ldr	r3, [pc, #44]	@ (8001edc <ESP01_SetWIFI+0x60>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	77da      	strb	r2, [r3, #31]

	esp01TimeoutTask = 50;
 8001eb4:	4b0a      	ldr	r3, [pc, #40]	@ (8001ee0 <ESP01_SetWIFI+0x64>)
 8001eb6:	2232      	movs	r2, #50	@ 0x32
 8001eb8:	601a      	str	r2, [r3, #0]
	esp01ATSate = ESP01ATHARDRST0;
 8001eba:	4b05      	ldr	r3, [pc, #20]	@ (8001ed0 <ESP01_SetWIFI+0x54>)
 8001ebc:	220d      	movs	r2, #13
 8001ebe:	701a      	strb	r2, [r3, #0]

	esp01TriesAT = 0;
 8001ec0:	4b08      	ldr	r3, [pc, #32]	@ (8001ee4 <ESP01_SetWIFI+0x68>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	701a      	strb	r2, [r3, #0]

}
 8001ec6:	bf00      	nop
 8001ec8:	3708      	adds	r7, #8
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	2000082e 	.word	0x2000082e
 8001ed4:	20000830 	.word	0x20000830
 8001ed8:	20000848 	.word	0x20000848
 8001edc:	20000888 	.word	0x20000888
 8001ee0:	20000834 	.word	0x20000834
 8001ee4:	20000a64 	.word	0x20000a64

08001ee8 <ESP01_StartUDP>:


_eESP01STATUS ESP01_StartUDP(const char *RemoteIP, uint16_t RemotePORT, uint16_t LocalPORT){
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	807b      	strh	r3, [r7, #2]
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	803b      	strh	r3, [r7, #0]
	if(esp01Handle.WriteUSARTByte == NULL)
 8001ef8:	4b1d      	ldr	r3, [pc, #116]	@ (8001f70 <ESP01_StartUDP+0x88>)
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d102      	bne.n	8001f06 <ESP01_StartUDP+0x1e>
		return ESP01_NOT_INIT;
 8001f00:	f04f 33ff 	mov.w	r3, #4294967295
 8001f04:	e02f      	b.n	8001f66 <ESP01_StartUDP+0x7e>

	if(LocalPORT == 0)
 8001f06:	883b      	ldrh	r3, [r7, #0]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d102      	bne.n	8001f12 <ESP01_StartUDP+0x2a>
		LocalPORT = 30000;
 8001f0c:	f247 5330 	movw	r3, #30000	@ 0x7530
 8001f10:	803b      	strh	r3, [r7, #0]

	strcpy(esp01PROTO, "UDP");
 8001f12:	4b18      	ldr	r3, [pc, #96]	@ (8001f74 <ESP01_StartUDP+0x8c>)
 8001f14:	4a18      	ldr	r2, [pc, #96]	@ (8001f78 <ESP01_StartUDP+0x90>)
 8001f16:	601a      	str	r2, [r3, #0]

	strncpy(esp01RemoteIP, RemoteIP, 15);
 8001f18:	220f      	movs	r2, #15
 8001f1a:	6879      	ldr	r1, [r7, #4]
 8001f1c:	4817      	ldr	r0, [pc, #92]	@ (8001f7c <ESP01_StartUDP+0x94>)
 8001f1e:	f00f fffd 	bl	8011f1c <strncpy>
	esp01RemoteIP[15] = '\0';
 8001f22:	4b16      	ldr	r3, [pc, #88]	@ (8001f7c <ESP01_StartUDP+0x94>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	73da      	strb	r2, [r3, #15]

	itoa(RemotePORT, esp01RemotePORT, 10);
 8001f28:	887b      	ldrh	r3, [r7, #2]
 8001f2a:	220a      	movs	r2, #10
 8001f2c:	4914      	ldr	r1, [pc, #80]	@ (8001f80 <ESP01_StartUDP+0x98>)
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f00f ff86 	bl	8011e40 <itoa>
	itoa(LocalPORT, esp01LocalPORT, 10);
 8001f34:	883b      	ldrh	r3, [r7, #0]
 8001f36:	220a      	movs	r2, #10
 8001f38:	4912      	ldr	r1, [pc, #72]	@ (8001f84 <ESP01_StartUDP+0x9c>)
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f00f ff80 	bl	8011e40 <itoa>

	if(esp01SSID[0] == '\0')
 8001f40:	4b11      	ldr	r3, [pc, #68]	@ (8001f88 <ESP01_StartUDP+0xa0>)
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d101      	bne.n	8001f4c <ESP01_StartUDP+0x64>
		return ESP01_WIFI_NOT_SETED;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e00c      	b.n	8001f66 <ESP01_StartUDP+0x7e>

	if(esp01Flags.bit.WIFICONNECTED == 0)
 8001f4c:	4b0f      	ldr	r3, [pc, #60]	@ (8001f8c <ESP01_StartUDP+0xa4>)
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	f003 0302 	and.w	r3, r3, #2
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d101      	bne.n	8001f5e <ESP01_StartUDP+0x76>
		return ESP01_WIFI_DISCONNECTED;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	e003      	b.n	8001f66 <ESP01_StartUDP+0x7e>

	esp01ATSate = ESP01ATCIPCLOSE;
 8001f5e:	4b0c      	ldr	r3, [pc, #48]	@ (8001f90 <ESP01_StartUDP+0xa8>)
 8001f60:	2209      	movs	r2, #9
 8001f62:	701a      	strb	r2, [r3, #0]

	return ESP01_UDPTCP_CONNECTING;
 8001f64:	2306      	movs	r3, #6
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3708      	adds	r7, #8
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	20000a68 	.word	0x20000a68
 8001f74:	20000008 	.word	0x20000008
 8001f78:	00504455 	.word	0x00504455
 8001f7c:	200008a8 	.word	0x200008a8
 8001f80:	200008b8 	.word	0x200008b8
 8001f84:	200008d0 	.word	0x200008d0
 8001f88:	20000848 	.word	0x20000848
 8001f8c:	20000830 	.word	0x20000830
 8001f90:	2000082e 	.word	0x2000082e

08001f94 <ESP01_StateWIFI>:
		return;

	esp01ATSate = ESP01ATCIPCLOSE;
}

_eESP01STATUS ESP01_StateWIFI(){
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
	if(esp01Handle.WriteUSARTByte == NULL)
 8001f98:	4b0a      	ldr	r3, [pc, #40]	@ (8001fc4 <ESP01_StateWIFI+0x30>)
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d102      	bne.n	8001fa6 <ESP01_StateWIFI+0x12>
		return ESP01_NOT_INIT;
 8001fa0:	f04f 33ff 	mov.w	r3, #4294967295
 8001fa4:	e009      	b.n	8001fba <ESP01_StateWIFI+0x26>

	if(esp01Flags.bit.WIFICONNECTED)
 8001fa6:	4b08      	ldr	r3, [pc, #32]	@ (8001fc8 <ESP01_StateWIFI+0x34>)
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	f003 0302 	and.w	r3, r3, #2
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d001      	beq.n	8001fb8 <ESP01_StateWIFI+0x24>
		return ESP01_WIFI_CONNECTED;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e000      	b.n	8001fba <ESP01_StateWIFI+0x26>
	else
		return ESP01_WIFI_DISCONNECTED;
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr
 8001fc4:	20000a68 	.word	0x20000a68
 8001fc8:	20000830 	.word	0x20000830

08001fcc <ESP01_GetLocalIP>:

char *ESP01_GetLocalIP(){
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
	if(esp01Flags.bit.WIFICONNECTED &&  esp01LocalIP[0]!='\0')
 8001fd0:	4b09      	ldr	r3, [pc, #36]	@ (8001ff8 <ESP01_GetLocalIP+0x2c>)
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	f003 0302 	and.w	r3, r3, #2
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d005      	beq.n	8001fea <ESP01_GetLocalIP+0x1e>
 8001fde:	4b07      	ldr	r3, [pc, #28]	@ (8001ffc <ESP01_GetLocalIP+0x30>)
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <ESP01_GetLocalIP+0x1e>
		return esp01LocalIP;
 8001fe6:	4b05      	ldr	r3, [pc, #20]	@ (8001ffc <ESP01_GetLocalIP+0x30>)
 8001fe8:	e000      	b.n	8001fec <ESP01_GetLocalIP+0x20>

	return NULL;
 8001fea:	2300      	movs	r3, #0
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	20000830 	.word	0x20000830
 8001ffc:	200008c0 	.word	0x200008c0

08002000 <ESP01_WriteRX>:
	else
		return ESP01_UDPTCP_DISCONNECTED;
}


void ESP01_WriteRX(uint8_t value){
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	4603      	mov	r3, r0
 8002008:	71fb      	strb	r3, [r7, #7]
//	if(esp01Handle.bufRX == NULL)
//		return;
	esp01RXATBuf[esp01iwRXAT++] = value;
 800200a:	4b0b      	ldr	r3, [pc, #44]	@ (8002038 <ESP01_WriteRX+0x38>)
 800200c:	881b      	ldrh	r3, [r3, #0]
 800200e:	1c5a      	adds	r2, r3, #1
 8002010:	b291      	uxth	r1, r2
 8002012:	4a09      	ldr	r2, [pc, #36]	@ (8002038 <ESP01_WriteRX+0x38>)
 8002014:	8011      	strh	r1, [r2, #0]
 8002016:	4619      	mov	r1, r3
 8002018:	4a08      	ldr	r2, [pc, #32]	@ (800203c <ESP01_WriteRX+0x3c>)
 800201a:	79fb      	ldrb	r3, [r7, #7]
 800201c:	5453      	strb	r3, [r2, r1]
	if(esp01iwRXAT == ESP01RXBUFAT)
 800201e:	4b06      	ldr	r3, [pc, #24]	@ (8002038 <ESP01_WriteRX+0x38>)
 8002020:	881b      	ldrh	r3, [r3, #0]
 8002022:	2b80      	cmp	r3, #128	@ 0x80
 8002024:	d102      	bne.n	800202c <ESP01_WriteRX+0x2c>
		esp01iwRXAT = 0;
 8002026:	4b04      	ldr	r3, [pc, #16]	@ (8002038 <ESP01_WriteRX+0x38>)
 8002028:	2200      	movs	r2, #0
 800202a:	801a      	strh	r2, [r3, #0]
}
 800202c:	bf00      	nop
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr
 8002038:	20000a5c 	.word	0x20000a5c
 800203c:	200008dc 	.word	0x200008dc

08002040 <ESP01_Init>:

	return ESP01_SEND_BUSY;
}


void ESP01_Init(_sESP01Handle *hESP01){
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]

	memcpy(&esp01Handle, hESP01, sizeof(_sESP01Handle));
 8002048:	220c      	movs	r2, #12
 800204a:	6879      	ldr	r1, [r7, #4]
 800204c:	4810      	ldr	r0, [pc, #64]	@ (8002090 <ESP01_Init+0x50>)
 800204e:	f00f ffa5 	bl	8011f9c <memcpy>

	esp01ATSate = ESP01ATIDLE;
 8002052:	4b10      	ldr	r3, [pc, #64]	@ (8002094 <ESP01_Init+0x54>)
 8002054:	2200      	movs	r2, #0
 8002056:	701a      	strb	r2, [r3, #0]
	esp01HState = 0;
 8002058:	4b0f      	ldr	r3, [pc, #60]	@ (8002098 <ESP01_Init+0x58>)
 800205a:	2200      	movs	r2, #0
 800205c:	701a      	strb	r2, [r3, #0]
	esp01irTX = 0;
 800205e:	4b0f      	ldr	r3, [pc, #60]	@ (800209c <ESP01_Init+0x5c>)
 8002060:	2200      	movs	r2, #0
 8002062:	801a      	strh	r2, [r3, #0]
	esp01iwTX = 0;
 8002064:	4b0e      	ldr	r3, [pc, #56]	@ (80020a0 <ESP01_Init+0x60>)
 8002066:	2200      	movs	r2, #0
 8002068:	801a      	strh	r2, [r3, #0]
	esp01irRXAT = 0;
 800206a:	4b0e      	ldr	r3, [pc, #56]	@ (80020a4 <ESP01_Init+0x64>)
 800206c:	2200      	movs	r2, #0
 800206e:	801a      	strh	r2, [r3, #0]
	esp01iwRXAT = 0;
 8002070:	4b0d      	ldr	r3, [pc, #52]	@ (80020a8 <ESP01_Init+0x68>)
 8002072:	2200      	movs	r2, #0
 8002074:	801a      	strh	r2, [r3, #0]
	esp01Flags.byte = 0;
 8002076:	4b0d      	ldr	r3, [pc, #52]	@ (80020ac <ESP01_Init+0x6c>)
 8002078:	2200      	movs	r2, #0
 800207a:	701a      	strb	r2, [r3, #0]
	ESP01ChangeState = NULL;
 800207c:	4b0c      	ldr	r3, [pc, #48]	@ (80020b0 <ESP01_Init+0x70>)
 800207e:	2200      	movs	r2, #0
 8002080:	601a      	str	r2, [r3, #0]
	ESP01DbgStr = NULL;
 8002082:	4b0c      	ldr	r3, [pc, #48]	@ (80020b4 <ESP01_Init+0x74>)
 8002084:	2200      	movs	r2, #0
 8002086:	601a      	str	r2, [r3, #0]
}
 8002088:	bf00      	nop
 800208a:	3708      	adds	r7, #8
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	20000a68 	.word	0x20000a68
 8002094:	2000082e 	.word	0x2000082e
 8002098:	200008d6 	.word	0x200008d6
 800209c:	20000a60 	.word	0x20000a60
 80020a0:	20000a62 	.word	0x20000a62
 80020a4:	20000a5e 	.word	0x20000a5e
 80020a8:	20000a5c 	.word	0x20000a5c
 80020ac:	20000830 	.word	0x20000830
 80020b0:	20000840 	.word	0x20000840
 80020b4:	20000844 	.word	0x20000844

080020b8 <ESP01_Timeout10ms>:


void ESP01_Timeout10ms(){
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
	if(esp01TimeoutTask)
 80020bc:	4b13      	ldr	r3, [pc, #76]	@ (800210c <ESP01_Timeout10ms+0x54>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d004      	beq.n	80020ce <ESP01_Timeout10ms+0x16>
		esp01TimeoutTask--;
 80020c4:	4b11      	ldr	r3, [pc, #68]	@ (800210c <ESP01_Timeout10ms+0x54>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	3b01      	subs	r3, #1
 80020ca:	4a10      	ldr	r2, [pc, #64]	@ (800210c <ESP01_Timeout10ms+0x54>)
 80020cc:	6013      	str	r3, [r2, #0]

	if(esp01TimeoutDataRx){
 80020ce:	4b10      	ldr	r3, [pc, #64]	@ (8002110 <ESP01_Timeout10ms+0x58>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d00b      	beq.n	80020ee <ESP01_Timeout10ms+0x36>
		esp01TimeoutDataRx--;
 80020d6:	4b0e      	ldr	r3, [pc, #56]	@ (8002110 <ESP01_Timeout10ms+0x58>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	3b01      	subs	r3, #1
 80020dc:	4a0c      	ldr	r2, [pc, #48]	@ (8002110 <ESP01_Timeout10ms+0x58>)
 80020de:	6013      	str	r3, [r2, #0]
		if(!esp01TimeoutDataRx)
 80020e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002110 <ESP01_Timeout10ms+0x58>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d102      	bne.n	80020ee <ESP01_Timeout10ms+0x36>
			esp01HState = 0;
 80020e8:	4b0a      	ldr	r3, [pc, #40]	@ (8002114 <ESP01_Timeout10ms+0x5c>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	701a      	strb	r2, [r3, #0]
	}

	if(esp01TimeoutTxSymbol)
 80020ee:	4b0a      	ldr	r3, [pc, #40]	@ (8002118 <ESP01_Timeout10ms+0x60>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d004      	beq.n	8002100 <ESP01_Timeout10ms+0x48>
		esp01TimeoutTxSymbol--;
 80020f6:	4b08      	ldr	r3, [pc, #32]	@ (8002118 <ESP01_Timeout10ms+0x60>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	3b01      	subs	r3, #1
 80020fc:	4a06      	ldr	r2, [pc, #24]	@ (8002118 <ESP01_Timeout10ms+0x60>)
 80020fe:	6013      	str	r3, [r2, #0]
}
 8002100:	bf00      	nop
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr
 800210a:	bf00      	nop
 800210c:	20000834 	.word	0x20000834
 8002110:	20000838 	.word	0x20000838
 8002114:	200008d6 	.word	0x200008d6
 8002118:	2000083c 	.word	0x2000083c

0800211c <ESP01_Task>:

void ESP01_Task(){
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0

	if(esp01irRXAT != esp01iwRXAT)
 8002120:	4b08      	ldr	r3, [pc, #32]	@ (8002144 <ESP01_Task+0x28>)
 8002122:	881a      	ldrh	r2, [r3, #0]
 8002124:	4b08      	ldr	r3, [pc, #32]	@ (8002148 <ESP01_Task+0x2c>)
 8002126:	881b      	ldrh	r3, [r3, #0]
 8002128:	429a      	cmp	r2, r3
 800212a:	d001      	beq.n	8002130 <ESP01_Task+0x14>
		ESP01ATDecode();
 800212c:	f000 f830 	bl	8002190 <ESP01ATDecode>

	if(!esp01TimeoutTask)
 8002130:	4b06      	ldr	r3, [pc, #24]	@ (800214c <ESP01_Task+0x30>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d101      	bne.n	800213c <ESP01_Task+0x20>
		ESP01DOConnection();
 8002138:	f000 fbe0 	bl	80028fc <ESP01DOConnection>

	ESP01SENDData();
 800213c:	f000 fde8 	bl	8002d10 <ESP01SENDData>
}
 8002140:	bf00      	nop
 8002142:	bd80      	pop	{r7, pc}
 8002144:	20000a5e 	.word	0x20000a5e
 8002148:	20000a5c 	.word	0x20000a5c
 800214c:	20000834 	.word	0x20000834

08002150 <ESP01_AttachChangeState>:

void ESP01_AttachChangeState(void (*aESP01ChangeState)(_eESP01STATUS esp01State)){
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
	ESP01ChangeState = aESP01ChangeState;
 8002158:	4a04      	ldr	r2, [pc, #16]	@ (800216c <ESP01_AttachChangeState+0x1c>)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6013      	str	r3, [r2, #0]
}
 800215e:	bf00      	nop
 8002160:	370c      	adds	r7, #12
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	20000840 	.word	0x20000840

08002170 <ESP01_AttachDebugStr>:

void ESP01_AttachDebugStr(void (*aESP01DbgStr)(const char *dbgStr)){
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
	ESP01DbgStr = aESP01DbgStr;
 8002178:	4a04      	ldr	r2, [pc, #16]	@ (800218c <ESP01_AttachDebugStr+0x1c>)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6013      	str	r3, [r2, #0]
}
 800217e:	bf00      	nop
 8002180:	370c      	adds	r7, #12
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	20000844 	.word	0x20000844

08002190 <ESP01ATDecode>:




/* Private Functions */
static void ESP01ATDecode(){
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
	uint16_t i;
	uint8_t value;

	if(esp01ATSate==ESP01ATHARDRST0 || esp01ATSate==ESP01ATHARDRST1 ||
 8002196:	4b7f      	ldr	r3, [pc, #508]	@ (8002394 <ESP01ATDecode+0x204>)
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	2b0d      	cmp	r3, #13
 800219c:	d007      	beq.n	80021ae <ESP01ATDecode+0x1e>
 800219e:	4b7d      	ldr	r3, [pc, #500]	@ (8002394 <ESP01ATDecode+0x204>)
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	2b0e      	cmp	r3, #14
 80021a4:	d003      	beq.n	80021ae <ESP01ATDecode+0x1e>
	   esp01ATSate==ESP01ATHARDRSTSTOP){
 80021a6:	4b7b      	ldr	r3, [pc, #492]	@ (8002394 <ESP01ATDecode+0x204>)
 80021a8:	781b      	ldrb	r3, [r3, #0]
	if(esp01ATSate==ESP01ATHARDRST0 || esp01ATSate==ESP01ATHARDRST1 ||
 80021aa:	2b0f      	cmp	r3, #15
 80021ac:	d104      	bne.n	80021b8 <ESP01ATDecode+0x28>
		esp01irRXAT = esp01iwRXAT;
 80021ae:	4b7a      	ldr	r3, [pc, #488]	@ (8002398 <ESP01ATDecode+0x208>)
 80021b0:	881a      	ldrh	r2, [r3, #0]
 80021b2:	4b7a      	ldr	r3, [pc, #488]	@ (800239c <ESP01ATDecode+0x20c>)
 80021b4:	801a      	strh	r2, [r3, #0]
		return;
 80021b6:	e381      	b.n	80028bc <ESP01ATDecode+0x72c>
	}


	i = esp01iwRXAT;
 80021b8:	4b77      	ldr	r3, [pc, #476]	@ (8002398 <ESP01ATDecode+0x208>)
 80021ba:	881b      	ldrh	r3, [r3, #0]
 80021bc:	80fb      	strh	r3, [r7, #6]
	esp01TimeoutDataRx = 2;
 80021be:	4b78      	ldr	r3, [pc, #480]	@ (80023a0 <ESP01ATDecode+0x210>)
 80021c0:	2202      	movs	r2, #2
 80021c2:	601a      	str	r2, [r3, #0]
	while(esp01irRXAT != i){
 80021c4:	e374      	b.n	80028b0 <ESP01ATDecode+0x720>
		value = esp01RXATBuf[esp01irRXAT];
 80021c6:	4b75      	ldr	r3, [pc, #468]	@ (800239c <ESP01ATDecode+0x20c>)
 80021c8:	881b      	ldrh	r3, [r3, #0]
 80021ca:	461a      	mov	r2, r3
 80021cc:	4b75      	ldr	r3, [pc, #468]	@ (80023a4 <ESP01ATDecode+0x214>)
 80021ce:	5c9b      	ldrb	r3, [r3, r2]
 80021d0:	717b      	strb	r3, [r7, #5]
		switch(esp01HState){
 80021d2:	4b75      	ldr	r3, [pc, #468]	@ (80023a8 <ESP01ATDecode+0x218>)
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	2b0c      	cmp	r3, #12
 80021d8:	f200 834b 	bhi.w	8002872 <ESP01ATDecode+0x6e2>
 80021dc:	a201      	add	r2, pc, #4	@ (adr r2, 80021e4 <ESP01ATDecode+0x54>)
 80021de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021e2:	bf00      	nop
 80021e4:	08002219 	.word	0x08002219
 80021e8:	08002309 	.word	0x08002309
 80021ec:	080024eb 	.word	0x080024eb
 80021f0:	08002873 	.word	0x08002873
 80021f4:	08002873 	.word	0x08002873
 80021f8:	080026e3 	.word	0x080026e3
 80021fc:	08002729 	.word	0x08002729
 8002200:	0800273f 	.word	0x0800273f
 8002204:	0800276b 	.word	0x0800276b
 8002208:	08002873 	.word	0x08002873
 800220c:	080027b7 	.word	0x080027b7
 8002210:	080027df 	.word	0x080027df
 8002214:	08002835 	.word	0x08002835
		case 0:
            indexResponse = 0;
 8002218:	4b64      	ldr	r3, [pc, #400]	@ (80023ac <ESP01ATDecode+0x21c>)
 800221a:	2200      	movs	r2, #0
 800221c:	701a      	strb	r2, [r3, #0]
            indexResponseChar = 4;
 800221e:	4b64      	ldr	r3, [pc, #400]	@ (80023b0 <ESP01ATDecode+0x220>)
 8002220:	2204      	movs	r2, #4
 8002222:	701a      	strb	r2, [r3, #0]
            while(responses[indexResponse] != NULL){
 8002224:	e03e      	b.n	80022a4 <ESP01ATDecode+0x114>
                if(value == responses[indexResponse][indexResponseChar]){
 8002226:	4b61      	ldr	r3, [pc, #388]	@ (80023ac <ESP01ATDecode+0x21c>)
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	461a      	mov	r2, r3
 800222c:	4b61      	ldr	r3, [pc, #388]	@ (80023b4 <ESP01ATDecode+0x224>)
 800222e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002232:	4a5f      	ldr	r2, [pc, #380]	@ (80023b0 <ESP01ATDecode+0x220>)
 8002234:	7812      	ldrb	r2, [r2, #0]
 8002236:	4413      	add	r3, r2
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	797a      	ldrb	r2, [r7, #5]
 800223c:	429a      	cmp	r2, r3
 800223e:	d12b      	bne.n	8002298 <ESP01ATDecode+0x108>
                    esp01nBytes = (responses[indexResponse][0] - '0');
 8002240:	4b5a      	ldr	r3, [pc, #360]	@ (80023ac <ESP01ATDecode+0x21c>)
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	461a      	mov	r2, r3
 8002246:	4b5b      	ldr	r3, [pc, #364]	@ (80023b4 <ESP01ATDecode+0x224>)
 8002248:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	3b30      	subs	r3, #48	@ 0x30
 8002250:	b29a      	uxth	r2, r3
 8002252:	4b59      	ldr	r3, [pc, #356]	@ (80023b8 <ESP01ATDecode+0x228>)
 8002254:	801a      	strh	r2, [r3, #0]
                    esp01nBytes *= 10;
 8002256:	4b58      	ldr	r3, [pc, #352]	@ (80023b8 <ESP01ATDecode+0x228>)
 8002258:	881b      	ldrh	r3, [r3, #0]
 800225a:	461a      	mov	r2, r3
 800225c:	0092      	lsls	r2, r2, #2
 800225e:	4413      	add	r3, r2
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	b29a      	uxth	r2, r3
 8002264:	4b54      	ldr	r3, [pc, #336]	@ (80023b8 <ESP01ATDecode+0x228>)
 8002266:	801a      	strh	r2, [r3, #0]
                    esp01nBytes += (responses[indexResponse][1] - '0');
 8002268:	4b50      	ldr	r3, [pc, #320]	@ (80023ac <ESP01ATDecode+0x21c>)
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	461a      	mov	r2, r3
 800226e:	4b51      	ldr	r3, [pc, #324]	@ (80023b4 <ESP01ATDecode+0x224>)
 8002270:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002274:	3301      	adds	r3, #1
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	461a      	mov	r2, r3
 800227a:	4b4f      	ldr	r3, [pc, #316]	@ (80023b8 <ESP01ATDecode+0x228>)
 800227c:	881b      	ldrh	r3, [r3, #0]
 800227e:	4413      	add	r3, r2
 8002280:	b29b      	uxth	r3, r3
 8002282:	3b30      	subs	r3, #48	@ 0x30
 8002284:	b29a      	uxth	r2, r3
 8002286:	4b4c      	ldr	r3, [pc, #304]	@ (80023b8 <ESP01ATDecode+0x228>)
 8002288:	801a      	strh	r2, [r3, #0]
                    esp01nBytes--;
 800228a:	4b4b      	ldr	r3, [pc, #300]	@ (80023b8 <ESP01ATDecode+0x228>)
 800228c:	881b      	ldrh	r3, [r3, #0]
 800228e:	3b01      	subs	r3, #1
 8002290:	b29a      	uxth	r2, r3
 8002292:	4b49      	ldr	r3, [pc, #292]	@ (80023b8 <ESP01ATDecode+0x228>)
 8002294:	801a      	strh	r2, [r3, #0]
                    break;
 8002296:	e00d      	b.n	80022b4 <ESP01ATDecode+0x124>
                }
                indexResponse++;
 8002298:	4b44      	ldr	r3, [pc, #272]	@ (80023ac <ESP01ATDecode+0x21c>)
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	3301      	adds	r3, #1
 800229e:	b2da      	uxtb	r2, r3
 80022a0:	4b42      	ldr	r3, [pc, #264]	@ (80023ac <ESP01ATDecode+0x21c>)
 80022a2:	701a      	strb	r2, [r3, #0]
            while(responses[indexResponse] != NULL){
 80022a4:	4b41      	ldr	r3, [pc, #260]	@ (80023ac <ESP01ATDecode+0x21c>)
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	461a      	mov	r2, r3
 80022aa:	4b42      	ldr	r3, [pc, #264]	@ (80023b4 <ESP01ATDecode+0x224>)
 80022ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d1b8      	bne.n	8002226 <ESP01ATDecode+0x96>
            }
            if(responses[indexResponse] != NULL){
 80022b4:	4b3d      	ldr	r3, [pc, #244]	@ (80023ac <ESP01ATDecode+0x21c>)
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	461a      	mov	r2, r3
 80022ba:	4b3e      	ldr	r3, [pc, #248]	@ (80023b4 <ESP01ATDecode+0x224>)
 80022bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d009      	beq.n	80022d8 <ESP01ATDecode+0x148>
                esp01HState = 1;
 80022c4:	4b38      	ldr	r3, [pc, #224]	@ (80023a8 <ESP01ATDecode+0x218>)
 80022c6:	2201      	movs	r2, #1
 80022c8:	701a      	strb	r2, [r3, #0]
                indexResponseChar++;
 80022ca:	4b39      	ldr	r3, [pc, #228]	@ (80023b0 <ESP01ATDecode+0x220>)
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	3301      	adds	r3, #1
 80022d0:	b2da      	uxtb	r2, r3
 80022d2:	4b37      	ldr	r3, [pc, #220]	@ (80023b0 <ESP01ATDecode+0x220>)
 80022d4:	701a      	strb	r2, [r3, #0]
						esp01Flags.bit.WAITINGSYMBOL = 0;
						esp01TimeoutTxSymbol = 0;
					}
				}
			}
			break;
 80022d6:	e2d3      	b.n	8002880 <ESP01ATDecode+0x6f0>
				esp01TimeoutDataRx = 0;
 80022d8:	4b31      	ldr	r3, [pc, #196]	@ (80023a0 <ESP01ATDecode+0x210>)
 80022da:	2200      	movs	r2, #0
 80022dc:	601a      	str	r2, [r3, #0]
				if(esp01Flags.bit.WAITINGSYMBOL){
 80022de:	4b37      	ldr	r3, [pc, #220]	@ (80023bc <ESP01ATDecode+0x22c>)
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	f003 0301 	and.w	r3, r3, #1
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	f000 82c9 	beq.w	8002880 <ESP01ATDecode+0x6f0>
					if(value == '>'){
 80022ee:	797b      	ldrb	r3, [r7, #5]
 80022f0:	2b3e      	cmp	r3, #62	@ 0x3e
 80022f2:	f040 82c5 	bne.w	8002880 <ESP01ATDecode+0x6f0>
						esp01Flags.bit.WAITINGSYMBOL = 0;
 80022f6:	4a31      	ldr	r2, [pc, #196]	@ (80023bc <ESP01ATDecode+0x22c>)
 80022f8:	7813      	ldrb	r3, [r2, #0]
 80022fa:	f023 0301 	bic.w	r3, r3, #1
 80022fe:	7013      	strb	r3, [r2, #0]
						esp01TimeoutTxSymbol = 0;
 8002300:	4b2f      	ldr	r3, [pc, #188]	@ (80023c0 <ESP01ATDecode+0x230>)
 8002302:	2200      	movs	r2, #0
 8002304:	601a      	str	r2, [r3, #0]
			break;
 8002306:	e2bb      	b.n	8002880 <ESP01ATDecode+0x6f0>
		case 1:
            if(value == responses[indexResponse][indexResponseChar]){
 8002308:	4b28      	ldr	r3, [pc, #160]	@ (80023ac <ESP01ATDecode+0x21c>)
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	461a      	mov	r2, r3
 800230e:	4b29      	ldr	r3, [pc, #164]	@ (80023b4 <ESP01ATDecode+0x224>)
 8002310:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002314:	4a26      	ldr	r2, [pc, #152]	@ (80023b0 <ESP01ATDecode+0x220>)
 8002316:	7812      	ldrb	r2, [r2, #0]
 8002318:	4413      	add	r3, r2
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	797a      	ldrb	r2, [r7, #5]
 800231e:	429a      	cmp	r2, r3
 8002320:	d133      	bne.n	800238a <ESP01ATDecode+0x1fa>
                esp01nBytes--;
 8002322:	4b25      	ldr	r3, [pc, #148]	@ (80023b8 <ESP01ATDecode+0x228>)
 8002324:	881b      	ldrh	r3, [r3, #0]
 8002326:	3b01      	subs	r3, #1
 8002328:	b29a      	uxth	r2, r3
 800232a:	4b23      	ldr	r3, [pc, #140]	@ (80023b8 <ESP01ATDecode+0x228>)
 800232c:	801a      	strh	r2, [r3, #0]
                if(!esp01nBytes || value=='\r'){
 800232e:	4b22      	ldr	r3, [pc, #136]	@ (80023b8 <ESP01ATDecode+0x228>)
 8002330:	881b      	ldrh	r3, [r3, #0]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d003      	beq.n	800233e <ESP01ATDecode+0x1ae>
 8002336:	797b      	ldrb	r3, [r7, #5]
 8002338:	2b0d      	cmp	r3, #13
 800233a:	f040 80cf 	bne.w	80024dc <ESP01ATDecode+0x34c>
                    esp01HState = (responses[indexResponse][2] - '0');
 800233e:	4b1b      	ldr	r3, [pc, #108]	@ (80023ac <ESP01ATDecode+0x21c>)
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	461a      	mov	r2, r3
 8002344:	4b1b      	ldr	r3, [pc, #108]	@ (80023b4 <ESP01ATDecode+0x224>)
 8002346:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800234a:	3302      	adds	r3, #2
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	3b30      	subs	r3, #48	@ 0x30
 8002350:	b2da      	uxtb	r2, r3
 8002352:	4b15      	ldr	r3, [pc, #84]	@ (80023a8 <ESP01ATDecode+0x218>)
 8002354:	701a      	strb	r2, [r3, #0]
                    esp01HState *= 10;
 8002356:	4b14      	ldr	r3, [pc, #80]	@ (80023a8 <ESP01ATDecode+0x218>)
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	461a      	mov	r2, r3
 800235c:	0092      	lsls	r2, r2, #2
 800235e:	4413      	add	r3, r2
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	b2da      	uxtb	r2, r3
 8002364:	4b10      	ldr	r3, [pc, #64]	@ (80023a8 <ESP01ATDecode+0x218>)
 8002366:	701a      	strb	r2, [r3, #0]
                    esp01HState += (responses[indexResponse][3] - '0');
 8002368:	4b10      	ldr	r3, [pc, #64]	@ (80023ac <ESP01ATDecode+0x21c>)
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	461a      	mov	r2, r3
 800236e:	4b11      	ldr	r3, [pc, #68]	@ (80023b4 <ESP01ATDecode+0x224>)
 8002370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002374:	3303      	adds	r3, #3
 8002376:	781a      	ldrb	r2, [r3, #0]
 8002378:	4b0b      	ldr	r3, [pc, #44]	@ (80023a8 <ESP01ATDecode+0x218>)
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	4413      	add	r3, r2
 800237e:	b2db      	uxtb	r3, r3
 8002380:	3b30      	subs	r3, #48	@ 0x30
 8002382:	b2da      	uxtb	r2, r3
 8002384:	4b08      	ldr	r3, [pc, #32]	@ (80023a8 <ESP01ATDecode+0x218>)
 8002386:	701a      	strb	r2, [r3, #0]
                    break;
 8002388:	e285      	b.n	8002896 <ESP01ATDecode+0x706>
                }
            }
            else{
                indexResponse = 0;
 800238a:	4b08      	ldr	r3, [pc, #32]	@ (80023ac <ESP01ATDecode+0x21c>)
 800238c:	2200      	movs	r2, #0
 800238e:	701a      	strb	r2, [r3, #0]
                while(responses[indexResponse] != NULL){
 8002390:	e088      	b.n	80024a4 <ESP01ATDecode+0x314>
 8002392:	bf00      	nop
 8002394:	2000082e 	.word	0x2000082e
 8002398:	20000a5c 	.word	0x20000a5c
 800239c:	20000a5e 	.word	0x20000a5e
 80023a0:	20000838 	.word	0x20000838
 80023a4:	200008dc 	.word	0x200008dc
 80023a8:	200008d6 	.word	0x200008d6
 80023ac:	20000a74 	.word	0x20000a74
 80023b0:	20000a75 	.word	0x20000a75
 80023b4:	08013ecc 	.word	0x08013ecc
 80023b8:	200008d8 	.word	0x200008d8
 80023bc:	20000830 	.word	0x20000830
 80023c0:	2000083c 	.word	0x2000083c
                    esp01nBytes = (responses[indexResponse][0] - '0');
 80023c4:	4ba4      	ldr	r3, [pc, #656]	@ (8002658 <ESP01ATDecode+0x4c8>)
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	461a      	mov	r2, r3
 80023ca:	4ba4      	ldr	r3, [pc, #656]	@ (800265c <ESP01ATDecode+0x4cc>)
 80023cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	3b30      	subs	r3, #48	@ 0x30
 80023d4:	b29a      	uxth	r2, r3
 80023d6:	4ba2      	ldr	r3, [pc, #648]	@ (8002660 <ESP01ATDecode+0x4d0>)
 80023d8:	801a      	strh	r2, [r3, #0]
                    esp01nBytes *= 10;
 80023da:	4ba1      	ldr	r3, [pc, #644]	@ (8002660 <ESP01ATDecode+0x4d0>)
 80023dc:	881b      	ldrh	r3, [r3, #0]
 80023de:	461a      	mov	r2, r3
 80023e0:	0092      	lsls	r2, r2, #2
 80023e2:	4413      	add	r3, r2
 80023e4:	005b      	lsls	r3, r3, #1
 80023e6:	b29a      	uxth	r2, r3
 80023e8:	4b9d      	ldr	r3, [pc, #628]	@ (8002660 <ESP01ATDecode+0x4d0>)
 80023ea:	801a      	strh	r2, [r3, #0]
                    esp01nBytes += (responses[indexResponse][1] - '0');
 80023ec:	4b9a      	ldr	r3, [pc, #616]	@ (8002658 <ESP01ATDecode+0x4c8>)
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	461a      	mov	r2, r3
 80023f2:	4b9a      	ldr	r3, [pc, #616]	@ (800265c <ESP01ATDecode+0x4cc>)
 80023f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023f8:	3301      	adds	r3, #1
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	461a      	mov	r2, r3
 80023fe:	4b98      	ldr	r3, [pc, #608]	@ (8002660 <ESP01ATDecode+0x4d0>)
 8002400:	881b      	ldrh	r3, [r3, #0]
 8002402:	4413      	add	r3, r2
 8002404:	b29b      	uxth	r3, r3
 8002406:	3b30      	subs	r3, #48	@ 0x30
 8002408:	b29a      	uxth	r2, r3
 800240a:	4b95      	ldr	r3, [pc, #596]	@ (8002660 <ESP01ATDecode+0x4d0>)
 800240c:	801a      	strh	r2, [r3, #0]
                    esp01nBytes -= (indexResponseChar-3);
 800240e:	4b94      	ldr	r3, [pc, #592]	@ (8002660 <ESP01ATDecode+0x4d0>)
 8002410:	881b      	ldrh	r3, [r3, #0]
 8002412:	4a94      	ldr	r2, [pc, #592]	@ (8002664 <ESP01ATDecode+0x4d4>)
 8002414:	7812      	ldrb	r2, [r2, #0]
 8002416:	1a9b      	subs	r3, r3, r2
 8002418:	b29b      	uxth	r3, r3
 800241a:	3303      	adds	r3, #3
 800241c:	b29a      	uxth	r2, r3
 800241e:	4b90      	ldr	r3, [pc, #576]	@ (8002660 <ESP01ATDecode+0x4d0>)
 8002420:	801a      	strh	r2, [r3, #0]
                    if(esp01nBytes<128 && value==responses[indexResponse][indexResponseChar]){
 8002422:	4b8f      	ldr	r3, [pc, #572]	@ (8002660 <ESP01ATDecode+0x4d0>)
 8002424:	881b      	ldrh	r3, [r3, #0]
 8002426:	2b7f      	cmp	r3, #127	@ 0x7f
 8002428:	d836      	bhi.n	8002498 <ESP01ATDecode+0x308>
 800242a:	4b8b      	ldr	r3, [pc, #556]	@ (8002658 <ESP01ATDecode+0x4c8>)
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	461a      	mov	r2, r3
 8002430:	4b8a      	ldr	r3, [pc, #552]	@ (800265c <ESP01ATDecode+0x4cc>)
 8002432:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002436:	4a8b      	ldr	r2, [pc, #556]	@ (8002664 <ESP01ATDecode+0x4d4>)
 8002438:	7812      	ldrb	r2, [r2, #0]
 800243a:	4413      	add	r3, r2
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	797a      	ldrb	r2, [r7, #5]
 8002440:	429a      	cmp	r2, r3
 8002442:	d129      	bne.n	8002498 <ESP01ATDecode+0x308>
                        if(esp01nBytes == 0){
 8002444:	4b86      	ldr	r3, [pc, #536]	@ (8002660 <ESP01ATDecode+0x4d0>)
 8002446:	881b      	ldrh	r3, [r3, #0]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d134      	bne.n	80024b6 <ESP01ATDecode+0x326>
                            esp01HState = (responses[indexResponse][2] - '0');
 800244c:	4b82      	ldr	r3, [pc, #520]	@ (8002658 <ESP01ATDecode+0x4c8>)
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	461a      	mov	r2, r3
 8002452:	4b82      	ldr	r3, [pc, #520]	@ (800265c <ESP01ATDecode+0x4cc>)
 8002454:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002458:	3302      	adds	r3, #2
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	3b30      	subs	r3, #48	@ 0x30
 800245e:	b2da      	uxtb	r2, r3
 8002460:	4b81      	ldr	r3, [pc, #516]	@ (8002668 <ESP01ATDecode+0x4d8>)
 8002462:	701a      	strb	r2, [r3, #0]
                            esp01HState *= 10;
 8002464:	4b80      	ldr	r3, [pc, #512]	@ (8002668 <ESP01ATDecode+0x4d8>)
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	461a      	mov	r2, r3
 800246a:	0092      	lsls	r2, r2, #2
 800246c:	4413      	add	r3, r2
 800246e:	005b      	lsls	r3, r3, #1
 8002470:	b2da      	uxtb	r2, r3
 8002472:	4b7d      	ldr	r3, [pc, #500]	@ (8002668 <ESP01ATDecode+0x4d8>)
 8002474:	701a      	strb	r2, [r3, #0]
                            esp01HState += (responses[indexResponse][3] - '0');
 8002476:	4b78      	ldr	r3, [pc, #480]	@ (8002658 <ESP01ATDecode+0x4c8>)
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	461a      	mov	r2, r3
 800247c:	4b77      	ldr	r3, [pc, #476]	@ (800265c <ESP01ATDecode+0x4cc>)
 800247e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002482:	3303      	adds	r3, #3
 8002484:	781a      	ldrb	r2, [r3, #0]
 8002486:	4b78      	ldr	r3, [pc, #480]	@ (8002668 <ESP01ATDecode+0x4d8>)
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	4413      	add	r3, r2
 800248c:	b2db      	uxtb	r3, r3
 800248e:	3b30      	subs	r3, #48	@ 0x30
 8002490:	b2da      	uxtb	r2, r3
 8002492:	4b75      	ldr	r3, [pc, #468]	@ (8002668 <ESP01ATDecode+0x4d8>)
 8002494:	701a      	strb	r2, [r3, #0]
                        }
                        break;
 8002496:	e00e      	b.n	80024b6 <ESP01ATDecode+0x326>
                    }
                    indexResponse++;
 8002498:	4b6f      	ldr	r3, [pc, #444]	@ (8002658 <ESP01ATDecode+0x4c8>)
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	3301      	adds	r3, #1
 800249e:	b2da      	uxtb	r2, r3
 80024a0:	4b6d      	ldr	r3, [pc, #436]	@ (8002658 <ESP01ATDecode+0x4c8>)
 80024a2:	701a      	strb	r2, [r3, #0]
                while(responses[indexResponse] != NULL){
 80024a4:	4b6c      	ldr	r3, [pc, #432]	@ (8002658 <ESP01ATDecode+0x4c8>)
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	461a      	mov	r2, r3
 80024aa:	4b6c      	ldr	r3, [pc, #432]	@ (800265c <ESP01ATDecode+0x4cc>)
 80024ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d187      	bne.n	80023c4 <ESP01ATDecode+0x234>
 80024b4:	e000      	b.n	80024b8 <ESP01ATDecode+0x328>
                        break;
 80024b6:	bf00      	nop
                }
                if(responses[indexResponse] == NULL){
 80024b8:	4b67      	ldr	r3, [pc, #412]	@ (8002658 <ESP01ATDecode+0x4c8>)
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	461a      	mov	r2, r3
 80024be:	4b67      	ldr	r3, [pc, #412]	@ (800265c <ESP01ATDecode+0x4cc>)
 80024c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d109      	bne.n	80024dc <ESP01ATDecode+0x34c>
                    esp01HState = 0;
 80024c8:	4b67      	ldr	r3, [pc, #412]	@ (8002668 <ESP01ATDecode+0x4d8>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	701a      	strb	r2, [r3, #0]
                    esp01irRXAT--;
 80024ce:	4b67      	ldr	r3, [pc, #412]	@ (800266c <ESP01ATDecode+0x4dc>)
 80024d0:	881b      	ldrh	r3, [r3, #0]
 80024d2:	3b01      	subs	r3, #1
 80024d4:	b29a      	uxth	r2, r3
 80024d6:	4b65      	ldr	r3, [pc, #404]	@ (800266c <ESP01ATDecode+0x4dc>)
 80024d8:	801a      	strh	r2, [r3, #0]
                    break;
 80024da:	e1dc      	b.n	8002896 <ESP01ATDecode+0x706>
                }
            }
			indexResponseChar++;
 80024dc:	4b61      	ldr	r3, [pc, #388]	@ (8002664 <ESP01ATDecode+0x4d4>)
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	3301      	adds	r3, #1
 80024e2:	b2da      	uxtb	r2, r3
 80024e4:	4b5f      	ldr	r3, [pc, #380]	@ (8002664 <ESP01ATDecode+0x4d4>)
 80024e6:	701a      	strb	r2, [r3, #0]
			break;
 80024e8:	e1d5      	b.n	8002896 <ESP01ATDecode+0x706>
		case 2:
			if(value == '\n'){
 80024ea:	797b      	ldrb	r3, [r7, #5]
 80024ec:	2b0a      	cmp	r3, #10
 80024ee:	f040 81c9 	bne.w	8002884 <ESP01ATDecode+0x6f4>
				esp01HState = 0;
 80024f2:	4b5d      	ldr	r3, [pc, #372]	@ (8002668 <ESP01ATDecode+0x4d8>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	701a      	strb	r2, [r3, #0]
				switch(indexResponse){
 80024f8:	4b57      	ldr	r3, [pc, #348]	@ (8002658 <ESP01ATDecode+0x4c8>)
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	2b11      	cmp	r3, #17
 80024fe:	f200 81c1 	bhi.w	8002884 <ESP01ATDecode+0x6f4>
 8002502:	a201      	add	r2, pc, #4	@ (adr r2, 8002508 <ESP01ATDecode+0x378>)
 8002504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002508:	080026c7 	.word	0x080026c7
 800250c:	080026c7 	.word	0x080026c7
 8002510:	08002551 	.word	0x08002551
 8002514:	0800256d 	.word	0x0800256d
 8002518:	0800259b 	.word	0x0800259b
 800251c:	080026c7 	.word	0x080026c7
 8002520:	080025d1 	.word	0x080025d1
 8002524:	080025d1 	.word	0x080025d1
 8002528:	08002605 	.word	0x08002605
 800252c:	08002611 	.word	0x08002611
 8002530:	0800262d 	.word	0x0800262d
 8002534:	08002689 	.word	0x08002689
 8002538:	08002885 	.word	0x08002885
 800253c:	08002695 	.word	0x08002695
 8002540:	08002885 	.word	0x08002885
 8002544:	080026ab 	.word	0x080026ab
 8002548:	080026c7 	.word	0x080026c7
 800254c:	080026c7 	.word	0x080026c7
				case 0://AT
				case 1:
					break;
				case 2://OK
					if(esp01ATSate == ESP01ATRESPONSE){
 8002550:	4b47      	ldr	r3, [pc, #284]	@ (8002670 <ESP01ATDecode+0x4e0>)
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	2b02      	cmp	r3, #2
 8002556:	f040 80b8 	bne.w	80026ca <ESP01ATDecode+0x53a>
						esp01TimeoutTask = 0;
 800255a:	4b46      	ldr	r3, [pc, #280]	@ (8002674 <ESP01ATDecode+0x4e4>)
 800255c:	2200      	movs	r2, #0
 800255e:	601a      	str	r2, [r3, #0]
						esp01Flags.bit.ATRESPONSEOK = 1;
 8002560:	4a45      	ldr	r2, [pc, #276]	@ (8002678 <ESP01ATDecode+0x4e8>)
 8002562:	7813      	ldrb	r3, [r2, #0]
 8002564:	f043 0320 	orr.w	r3, r3, #32
 8002568:	7013      	strb	r3, [r2, #0]
					}
					break;
 800256a:	e0ae      	b.n	80026ca <ESP01ATDecode+0x53a>
				case 3://ERROR
					if(esp01Flags.bit.SENDINGDATA){
 800256c:	4b42      	ldr	r3, [pc, #264]	@ (8002678 <ESP01ATDecode+0x4e8>)
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	f003 0308 	and.w	r3, r3, #8
 8002574:	b2db      	uxtb	r3, r3
 8002576:	2b00      	cmp	r3, #0
 8002578:	f000 80a9 	beq.w	80026ce <ESP01ATDecode+0x53e>
						esp01Flags.bit.SENDINGDATA = 0;
 800257c:	4a3e      	ldr	r2, [pc, #248]	@ (8002678 <ESP01ATDecode+0x4e8>)
 800257e:	7813      	ldrb	r3, [r2, #0]
 8002580:	f023 0308 	bic.w	r3, r3, #8
 8002584:	7013      	strb	r3, [r2, #0]
						esp01Flags.bit.UDPTCPCONNECTED = 0;
 8002586:	4a3c      	ldr	r2, [pc, #240]	@ (8002678 <ESP01ATDecode+0x4e8>)
 8002588:	7813      	ldrb	r3, [r2, #0]
 800258a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800258e:	7013      	strb	r3, [r2, #0]
						esp01irTX = esp01iwTX;
 8002590:	4b3a      	ldr	r3, [pc, #232]	@ (800267c <ESP01ATDecode+0x4ec>)
 8002592:	881a      	ldrh	r2, [r3, #0]
 8002594:	4b3a      	ldr	r3, [pc, #232]	@ (8002680 <ESP01ATDecode+0x4f0>)
 8002596:	801a      	strh	r2, [r3, #0]
					}
					break;
 8002598:	e099      	b.n	80026ce <ESP01ATDecode+0x53e>
				case 4://WIFI GOT IP
					esp01TimeoutTask = 0;
 800259a:	4b36      	ldr	r3, [pc, #216]	@ (8002674 <ESP01ATDecode+0x4e4>)
 800259c:	2200      	movs	r2, #0
 800259e:	601a      	str	r2, [r3, #0]
					if(esp01ATSate == ESP01CWJAPRESPONSE)
 80025a0:	4b33      	ldr	r3, [pc, #204]	@ (8002670 <ESP01ATDecode+0x4e0>)
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	2b06      	cmp	r3, #6
 80025a6:	d104      	bne.n	80025b2 <ESP01ATDecode+0x422>
						esp01Flags.bit.ATRESPONSEOK = 1;
 80025a8:	4a33      	ldr	r2, [pc, #204]	@ (8002678 <ESP01ATDecode+0x4e8>)
 80025aa:	7813      	ldrb	r3, [r2, #0]
 80025ac:	f043 0320 	orr.w	r3, r3, #32
 80025b0:	7013      	strb	r3, [r2, #0]
					esp01Flags.bit.WIFICONNECTED = 1;
 80025b2:	4a31      	ldr	r2, [pc, #196]	@ (8002678 <ESP01ATDecode+0x4e8>)
 80025b4:	7813      	ldrb	r3, [r2, #0]
 80025b6:	f043 0302 	orr.w	r3, r3, #2
 80025ba:	7013      	strb	r3, [r2, #0]
					if(ESP01ChangeState != NULL)
 80025bc:	4b31      	ldr	r3, [pc, #196]	@ (8002684 <ESP01ATDecode+0x4f4>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	f000 8086 	beq.w	80026d2 <ESP01ATDecode+0x542>
						ESP01ChangeState(ESP01_WIFI_CONNECTED);
 80025c6:	4b2f      	ldr	r3, [pc, #188]	@ (8002684 <ESP01ATDecode+0x4f4>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	2003      	movs	r0, #3
 80025cc:	4798      	blx	r3
					break;
 80025ce:	e080      	b.n	80026d2 <ESP01ATDecode+0x542>
				case 5://WIFI CONNECTED
					break;
				case 6://WIFI DISCONNECT
				case 7://WIFI DISCONNECTED
					esp01Flags.bit.UDPTCPCONNECTED = 0;
 80025d0:	4a29      	ldr	r2, [pc, #164]	@ (8002678 <ESP01ATDecode+0x4e8>)
 80025d2:	7813      	ldrb	r3, [r2, #0]
 80025d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80025d8:	7013      	strb	r3, [r2, #0]
					esp01Flags.bit.WIFICONNECTED = 0;
 80025da:	4a27      	ldr	r2, [pc, #156]	@ (8002678 <ESP01ATDecode+0x4e8>)
 80025dc:	7813      	ldrb	r3, [r2, #0]
 80025de:	f023 0302 	bic.w	r3, r3, #2
 80025e2:	7013      	strb	r3, [r2, #0]
					if(ESP01ChangeState != NULL)
 80025e4:	4b27      	ldr	r3, [pc, #156]	@ (8002684 <ESP01ATDecode+0x4f4>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d003      	beq.n	80025f4 <ESP01ATDecode+0x464>
						ESP01ChangeState(ESP01_WIFI_DISCONNECTED);
 80025ec:	4b25      	ldr	r3, [pc, #148]	@ (8002684 <ESP01ATDecode+0x4f4>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2000      	movs	r0, #0
 80025f2:	4798      	blx	r3
					if(esp01ATSate == ESP01CWJAPRESPONSE)
 80025f4:	4b1e      	ldr	r3, [pc, #120]	@ (8002670 <ESP01ATDecode+0x4e0>)
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	2b06      	cmp	r3, #6
 80025fa:	d06c      	beq.n	80026d6 <ESP01ATDecode+0x546>
						break;
					esp01ATSate = ESP01ATHARDRSTSTOP;
 80025fc:	4b1c      	ldr	r3, [pc, #112]	@ (8002670 <ESP01ATDecode+0x4e0>)
 80025fe:	220f      	movs	r2, #15
 8002600:	701a      	strb	r2, [r3, #0]
					break;
 8002602:	e06d      	b.n	80026e0 <ESP01ATDecode+0x550>
				case 8://DISCONNECTED
					esp01Flags.bit.UDPTCPCONNECTED = 0;
 8002604:	4a1c      	ldr	r2, [pc, #112]	@ (8002678 <ESP01ATDecode+0x4e8>)
 8002606:	7813      	ldrb	r3, [r2, #0]
 8002608:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800260c:	7013      	strb	r3, [r2, #0]
					break;
 800260e:	e067      	b.n	80026e0 <ESP01ATDecode+0x550>
				case 9://SEND OK
					esp01Flags.bit.SENDINGDATA = 0;
 8002610:	4a19      	ldr	r2, [pc, #100]	@ (8002678 <ESP01ATDecode+0x4e8>)
 8002612:	7813      	ldrb	r3, [r2, #0]
 8002614:	f023 0308 	bic.w	r3, r3, #8
 8002618:	7013      	strb	r3, [r2, #0]
					if(ESP01ChangeState != NULL)
 800261a:	4b1a      	ldr	r3, [pc, #104]	@ (8002684 <ESP01ATDecode+0x4f4>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d05b      	beq.n	80026da <ESP01ATDecode+0x54a>
						ESP01ChangeState(ESP01_SEND_OK);
 8002622:	4b18      	ldr	r3, [pc, #96]	@ (8002684 <ESP01ATDecode+0x4f4>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	200a      	movs	r0, #10
 8002628:	4798      	blx	r3
					break;
 800262a:	e056      	b.n	80026da <ESP01ATDecode+0x54a>
				case 10://CONNECT
					esp01TimeoutTask = 0;
 800262c:	4b11      	ldr	r3, [pc, #68]	@ (8002674 <ESP01ATDecode+0x4e4>)
 800262e:	2200      	movs	r2, #0
 8002630:	601a      	str	r2, [r3, #0]
					esp01Flags.bit.ATRESPONSEOK = 1;
 8002632:	4a11      	ldr	r2, [pc, #68]	@ (8002678 <ESP01ATDecode+0x4e8>)
 8002634:	7813      	ldrb	r3, [r2, #0]
 8002636:	f043 0320 	orr.w	r3, r3, #32
 800263a:	7013      	strb	r3, [r2, #0]
					esp01Flags.bit.UDPTCPCONNECTED = 1;
 800263c:	4a0e      	ldr	r2, [pc, #56]	@ (8002678 <ESP01ATDecode+0x4e8>)
 800263e:	7813      	ldrb	r3, [r2, #0]
 8002640:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002644:	7013      	strb	r3, [r2, #0]
					if(ESP01ChangeState != NULL)
 8002646:	4b0f      	ldr	r3, [pc, #60]	@ (8002684 <ESP01ATDecode+0x4f4>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d047      	beq.n	80026de <ESP01ATDecode+0x54e>
						ESP01ChangeState(ESP01_UDPTCP_CONNECTED);
 800264e:	4b0d      	ldr	r3, [pc, #52]	@ (8002684 <ESP01ATDecode+0x4f4>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	2007      	movs	r0, #7
 8002654:	4798      	blx	r3
					break;
 8002656:	e042      	b.n	80026de <ESP01ATDecode+0x54e>
 8002658:	20000a74 	.word	0x20000a74
 800265c:	08013ecc 	.word	0x08013ecc
 8002660:	200008d8 	.word	0x200008d8
 8002664:	20000a75 	.word	0x20000a75
 8002668:	200008d6 	.word	0x200008d6
 800266c:	20000a5e 	.word	0x20000a5e
 8002670:	2000082e 	.word	0x2000082e
 8002674:	20000834 	.word	0x20000834
 8002678:	20000830 	.word	0x20000830
 800267c:	20000a62 	.word	0x20000a62
 8002680:	20000a60 	.word	0x20000a60
 8002684:	20000840 	.word	0x20000840
				case 11://CLOSED
					esp01Flags.bit.UDPTCPCONNECTED = 0;
 8002688:	4a8e      	ldr	r2, [pc, #568]	@ (80028c4 <ESP01ATDecode+0x734>)
 800268a:	7813      	ldrb	r3, [r2, #0]
 800268c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002690:	7013      	strb	r3, [r2, #0]
					break;
 8002692:	e025      	b.n	80026e0 <ESP01ATDecode+0x550>
				case 13://busy
					esp01Flags.bit.UDPTCPCONNECTED = 0;
 8002694:	4a8b      	ldr	r2, [pc, #556]	@ (80028c4 <ESP01ATDecode+0x734>)
 8002696:	7813      	ldrb	r3, [r2, #0]
 8002698:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800269c:	7013      	strb	r3, [r2, #0]
					esp01Flags.bit.WIFICONNECTED = 0;
 800269e:	4a89      	ldr	r2, [pc, #548]	@ (80028c4 <ESP01ATDecode+0x734>)
 80026a0:	7813      	ldrb	r3, [r2, #0]
 80026a2:	f023 0302 	bic.w	r3, r3, #2
 80026a6:	7013      	strb	r3, [r2, #0]
					break;
 80026a8:	e01a      	b.n	80026e0 <ESP01ATDecode+0x550>
				case 15://ready
					esp01Flags.bit.UDPTCPCONNECTED = 0;
 80026aa:	4a86      	ldr	r2, [pc, #536]	@ (80028c4 <ESP01ATDecode+0x734>)
 80026ac:	7813      	ldrb	r3, [r2, #0]
 80026ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80026b2:	7013      	strb	r3, [r2, #0]
					esp01Flags.bit.WIFICONNECTED = 0;
 80026b4:	4a83      	ldr	r2, [pc, #524]	@ (80028c4 <ESP01ATDecode+0x734>)
 80026b6:	7813      	ldrb	r3, [r2, #0]
 80026b8:	f023 0302 	bic.w	r3, r3, #2
 80026bc:	7013      	strb	r3, [r2, #0]
					esp01ATSate = ESP01ATHARDRSTSTOP;
 80026be:	4b82      	ldr	r3, [pc, #520]	@ (80028c8 <ESP01ATDecode+0x738>)
 80026c0:	220f      	movs	r2, #15
 80026c2:	701a      	strb	r2, [r3, #0]
					break;
 80026c4:	e00c      	b.n	80026e0 <ESP01ATDecode+0x550>
					break;
 80026c6:	bf00      	nop
 80026c8:	e0dc      	b.n	8002884 <ESP01ATDecode+0x6f4>
					break;
 80026ca:	bf00      	nop
 80026cc:	e0da      	b.n	8002884 <ESP01ATDecode+0x6f4>
					break;
 80026ce:	bf00      	nop
 80026d0:	e0d8      	b.n	8002884 <ESP01ATDecode+0x6f4>
					break;
 80026d2:	bf00      	nop
 80026d4:	e0d6      	b.n	8002884 <ESP01ATDecode+0x6f4>
						break;
 80026d6:	bf00      	nop
 80026d8:	e0d4      	b.n	8002884 <ESP01ATDecode+0x6f4>
					break;
 80026da:	bf00      	nop
 80026dc:	e0d2      	b.n	8002884 <ESP01ATDecode+0x6f4>
					break;
 80026de:	bf00      	nop
					break;
				case 17://busy s
					break;
				}
			}
			break;
 80026e0:	e0d0      	b.n	8002884 <ESP01ATDecode+0x6f4>
		case 5://CIFR,STAIP
			if(value == ','){
 80026e2:	797b      	ldrb	r3, [r7, #5]
 80026e4:	2b2c      	cmp	r3, #44	@ 0x2c
 80026e6:	d10c      	bne.n	8002702 <ESP01ATDecode+0x572>
				esp01HState = 6;
 80026e8:	4b78      	ldr	r3, [pc, #480]	@ (80028cc <ESP01ATDecode+0x73c>)
 80026ea:	2206      	movs	r2, #6
 80026ec:	701a      	strb	r2, [r3, #0]
				if(ESP01DbgStr != NULL)
 80026ee:	4b78      	ldr	r3, [pc, #480]	@ (80028d0 <ESP01ATDecode+0x740>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	f000 80c8 	beq.w	8002888 <ESP01ATDecode+0x6f8>
					ESP01DbgStr("+&DBGRESPONSE CIFSR\n");
 80026f8:	4b75      	ldr	r3, [pc, #468]	@ (80028d0 <ESP01ATDecode+0x740>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4875      	ldr	r0, [pc, #468]	@ (80028d4 <ESP01ATDecode+0x744>)
 80026fe:	4798      	blx	r3
				esp01HState = 0;
				esp01irRXAT--;
				if(ESP01DbgStr != NULL)
					ESP01DbgStr("+&DBGERROR CIFSR 5\n");
			}
			break;
 8002700:	e0c2      	b.n	8002888 <ESP01ATDecode+0x6f8>
				esp01HState = 0;
 8002702:	4b72      	ldr	r3, [pc, #456]	@ (80028cc <ESP01ATDecode+0x73c>)
 8002704:	2200      	movs	r2, #0
 8002706:	701a      	strb	r2, [r3, #0]
				esp01irRXAT--;
 8002708:	4b73      	ldr	r3, [pc, #460]	@ (80028d8 <ESP01ATDecode+0x748>)
 800270a:	881b      	ldrh	r3, [r3, #0]
 800270c:	3b01      	subs	r3, #1
 800270e:	b29a      	uxth	r2, r3
 8002710:	4b71      	ldr	r3, [pc, #452]	@ (80028d8 <ESP01ATDecode+0x748>)
 8002712:	801a      	strh	r2, [r3, #0]
				if(ESP01DbgStr != NULL)
 8002714:	4b6e      	ldr	r3, [pc, #440]	@ (80028d0 <ESP01ATDecode+0x740>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2b00      	cmp	r3, #0
 800271a:	f000 80b5 	beq.w	8002888 <ESP01ATDecode+0x6f8>
					ESP01DbgStr("+&DBGERROR CIFSR 5\n");
 800271e:	4b6c      	ldr	r3, [pc, #432]	@ (80028d0 <ESP01ATDecode+0x740>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	486e      	ldr	r0, [pc, #440]	@ (80028dc <ESP01ATDecode+0x74c>)
 8002724:	4798      	blx	r3
			break;
 8002726:	e0af      	b.n	8002888 <ESP01ATDecode+0x6f8>
		case 6:
			if(value == '\"'){
 8002728:	797b      	ldrb	r3, [r7, #5]
 800272a:	2b22      	cmp	r3, #34	@ 0x22
 800272c:	f040 80ae 	bne.w	800288c <ESP01ATDecode+0x6fc>
				esp01HState = 7;
 8002730:	4b66      	ldr	r3, [pc, #408]	@ (80028cc <ESP01ATDecode+0x73c>)
 8002732:	2207      	movs	r2, #7
 8002734:	701a      	strb	r2, [r3, #0]
				esp01nBytes = 0;
 8002736:	4b6a      	ldr	r3, [pc, #424]	@ (80028e0 <ESP01ATDecode+0x750>)
 8002738:	2200      	movs	r2, #0
 800273a:	801a      	strh	r2, [r3, #0]
			}
			break;
 800273c:	e0a6      	b.n	800288c <ESP01ATDecode+0x6fc>
		case 7:
			if(value == '\"' || esp01nBytes==16)
 800273e:	797b      	ldrb	r3, [r7, #5]
 8002740:	2b22      	cmp	r3, #34	@ 0x22
 8002742:	d003      	beq.n	800274c <ESP01ATDecode+0x5bc>
 8002744:	4b66      	ldr	r3, [pc, #408]	@ (80028e0 <ESP01ATDecode+0x750>)
 8002746:	881b      	ldrh	r3, [r3, #0]
 8002748:	2b10      	cmp	r3, #16
 800274a:	d103      	bne.n	8002754 <ESP01ATDecode+0x5c4>
				esp01HState = 8;
 800274c:	4b5f      	ldr	r3, [pc, #380]	@ (80028cc <ESP01ATDecode+0x73c>)
 800274e:	2208      	movs	r2, #8
 8002750:	701a      	strb	r2, [r3, #0]
			else
				esp01LocalIP[esp01nBytes++] = value;
			break;
 8002752:	e0a0      	b.n	8002896 <ESP01ATDecode+0x706>
				esp01LocalIP[esp01nBytes++] = value;
 8002754:	4b62      	ldr	r3, [pc, #392]	@ (80028e0 <ESP01ATDecode+0x750>)
 8002756:	881b      	ldrh	r3, [r3, #0]
 8002758:	1c5a      	adds	r2, r3, #1
 800275a:	b291      	uxth	r1, r2
 800275c:	4a60      	ldr	r2, [pc, #384]	@ (80028e0 <ESP01ATDecode+0x750>)
 800275e:	8011      	strh	r1, [r2, #0]
 8002760:	4619      	mov	r1, r3
 8002762:	4a60      	ldr	r2, [pc, #384]	@ (80028e4 <ESP01ATDecode+0x754>)
 8002764:	797b      	ldrb	r3, [r7, #5]
 8002766:	5453      	strb	r3, [r2, r1]
			break;
 8002768:	e095      	b.n	8002896 <ESP01ATDecode+0x706>
		case 8:
			if(value == '\n'){
 800276a:	797b      	ldrb	r3, [r7, #5]
 800276c:	2b0a      	cmp	r3, #10
 800276e:	f040 808f 	bne.w	8002890 <ESP01ATDecode+0x700>
				esp01HState = 0;
 8002772:	4b56      	ldr	r3, [pc, #344]	@ (80028cc <ESP01ATDecode+0x73c>)
 8002774:	2200      	movs	r2, #0
 8002776:	701a      	strb	r2, [r3, #0]
				if(esp01nBytes < 16){
 8002778:	4b59      	ldr	r3, [pc, #356]	@ (80028e0 <ESP01ATDecode+0x750>)
 800277a:	881b      	ldrh	r3, [r3, #0]
 800277c:	2b0f      	cmp	r3, #15
 800277e:	d80e      	bhi.n	800279e <ESP01ATDecode+0x60e>
					esp01LocalIP[esp01nBytes] = '\0';
 8002780:	4b57      	ldr	r3, [pc, #348]	@ (80028e0 <ESP01ATDecode+0x750>)
 8002782:	881b      	ldrh	r3, [r3, #0]
 8002784:	461a      	mov	r2, r3
 8002786:	4b57      	ldr	r3, [pc, #348]	@ (80028e4 <ESP01ATDecode+0x754>)
 8002788:	2100      	movs	r1, #0
 800278a:	5499      	strb	r1, [r3, r2]
					esp01Flags.bit.ATRESPONSEOK = 1;
 800278c:	4a4d      	ldr	r2, [pc, #308]	@ (80028c4 <ESP01ATDecode+0x734>)
 800278e:	7813      	ldrb	r3, [r2, #0]
 8002790:	f043 0320 	orr.w	r3, r3, #32
 8002794:	7013      	strb	r3, [r2, #0]
					esp01TimeoutTask = 0;
 8002796:	4b54      	ldr	r3, [pc, #336]	@ (80028e8 <ESP01ATDecode+0x758>)
 8002798:	2200      	movs	r2, #0
 800279a:	601a      	str	r2, [r3, #0]
 800279c:	e002      	b.n	80027a4 <ESP01ATDecode+0x614>
				}
				else
					esp01LocalIP[0] = '\0';
 800279e:	4b51      	ldr	r3, [pc, #324]	@ (80028e4 <ESP01ATDecode+0x754>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	701a      	strb	r2, [r3, #0]
				if(ESP01ChangeState != NULL)
 80027a4:	4b51      	ldr	r3, [pc, #324]	@ (80028ec <ESP01ATDecode+0x75c>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d071      	beq.n	8002890 <ESP01ATDecode+0x700>
					ESP01ChangeState(ESP01_WIFI_NEW_IP);
 80027ac:	4b4f      	ldr	r3, [pc, #316]	@ (80028ec <ESP01ATDecode+0x75c>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2004      	movs	r0, #4
 80027b2:	4798      	blx	r3
			}
			break;
 80027b4:	e06c      	b.n	8002890 <ESP01ATDecode+0x700>
		case 10://IPD
			if(value == ','){
 80027b6:	797b      	ldrb	r3, [r7, #5]
 80027b8:	2b2c      	cmp	r3, #44	@ 0x2c
 80027ba:	d106      	bne.n	80027ca <ESP01ATDecode+0x63a>
				esp01HState = 11;
 80027bc:	4b43      	ldr	r3, [pc, #268]	@ (80028cc <ESP01ATDecode+0x73c>)
 80027be:	220b      	movs	r2, #11
 80027c0:	701a      	strb	r2, [r3, #0]
				esp01nBytes = 0;
 80027c2:	4b47      	ldr	r3, [pc, #284]	@ (80028e0 <ESP01ATDecode+0x750>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	801a      	strh	r2, [r3, #0]
			}
			else{
				esp01HState = 0;
				esp01irRXAT--;
			}
			break;
 80027c8:	e065      	b.n	8002896 <ESP01ATDecode+0x706>
				esp01HState = 0;
 80027ca:	4b40      	ldr	r3, [pc, #256]	@ (80028cc <ESP01ATDecode+0x73c>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	701a      	strb	r2, [r3, #0]
				esp01irRXAT--;
 80027d0:	4b41      	ldr	r3, [pc, #260]	@ (80028d8 <ESP01ATDecode+0x748>)
 80027d2:	881b      	ldrh	r3, [r3, #0]
 80027d4:	3b01      	subs	r3, #1
 80027d6:	b29a      	uxth	r2, r3
 80027d8:	4b3f      	ldr	r3, [pc, #252]	@ (80028d8 <ESP01ATDecode+0x748>)
 80027da:	801a      	strh	r2, [r3, #0]
			break;
 80027dc:	e05b      	b.n	8002896 <ESP01ATDecode+0x706>
		case 11:
			if(value == ':')
 80027de:	797b      	ldrb	r3, [r7, #5]
 80027e0:	2b3a      	cmp	r3, #58	@ 0x3a
 80027e2:	d103      	bne.n	80027ec <ESP01ATDecode+0x65c>
				esp01HState = 12;
 80027e4:	4b39      	ldr	r3, [pc, #228]	@ (80028cc <ESP01ATDecode+0x73c>)
 80027e6:	220c      	movs	r2, #12
 80027e8:	701a      	strb	r2, [r3, #0]
				else{
					esp01nBytes *= 10;
					esp01nBytes += (value - '0');
				}
			}
			break;
 80027ea:	e054      	b.n	8002896 <ESP01ATDecode+0x706>
				if(value<'0' || value>'9'){
 80027ec:	797b      	ldrb	r3, [r7, #5]
 80027ee:	2b2f      	cmp	r3, #47	@ 0x2f
 80027f0:	d902      	bls.n	80027f8 <ESP01ATDecode+0x668>
 80027f2:	797b      	ldrb	r3, [r7, #5]
 80027f4:	2b39      	cmp	r3, #57	@ 0x39
 80027f6:	d909      	bls.n	800280c <ESP01ATDecode+0x67c>
					esp01HState = 0;
 80027f8:	4b34      	ldr	r3, [pc, #208]	@ (80028cc <ESP01ATDecode+0x73c>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	701a      	strb	r2, [r3, #0]
					esp01irRXAT--;
 80027fe:	4b36      	ldr	r3, [pc, #216]	@ (80028d8 <ESP01ATDecode+0x748>)
 8002800:	881b      	ldrh	r3, [r3, #0]
 8002802:	3b01      	subs	r3, #1
 8002804:	b29a      	uxth	r2, r3
 8002806:	4b34      	ldr	r3, [pc, #208]	@ (80028d8 <ESP01ATDecode+0x748>)
 8002808:	801a      	strh	r2, [r3, #0]
			break;
 800280a:	e044      	b.n	8002896 <ESP01ATDecode+0x706>
					esp01nBytes *= 10;
 800280c:	4b34      	ldr	r3, [pc, #208]	@ (80028e0 <ESP01ATDecode+0x750>)
 800280e:	881b      	ldrh	r3, [r3, #0]
 8002810:	461a      	mov	r2, r3
 8002812:	0092      	lsls	r2, r2, #2
 8002814:	4413      	add	r3, r2
 8002816:	005b      	lsls	r3, r3, #1
 8002818:	b29a      	uxth	r2, r3
 800281a:	4b31      	ldr	r3, [pc, #196]	@ (80028e0 <ESP01ATDecode+0x750>)
 800281c:	801a      	strh	r2, [r3, #0]
					esp01nBytes += (value - '0');
 800281e:	797b      	ldrb	r3, [r7, #5]
 8002820:	b29a      	uxth	r2, r3
 8002822:	4b2f      	ldr	r3, [pc, #188]	@ (80028e0 <ESP01ATDecode+0x750>)
 8002824:	881b      	ldrh	r3, [r3, #0]
 8002826:	4413      	add	r3, r2
 8002828:	b29b      	uxth	r3, r3
 800282a:	3b30      	subs	r3, #48	@ 0x30
 800282c:	b29a      	uxth	r2, r3
 800282e:	4b2c      	ldr	r3, [pc, #176]	@ (80028e0 <ESP01ATDecode+0x750>)
 8002830:	801a      	strh	r2, [r3, #0]
			break;
 8002832:	e030      	b.n	8002896 <ESP01ATDecode+0x706>
		case 12:
			if(esp01Handle.WriteByteToBufRX != NULL)
 8002834:	4b2e      	ldr	r3, [pc, #184]	@ (80028f0 <ESP01ATDecode+0x760>)
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d004      	beq.n	8002846 <ESP01ATDecode+0x6b6>
				esp01Handle.WriteByteToBufRX(value);
 800283c:	4b2c      	ldr	r3, [pc, #176]	@ (80028f0 <ESP01ATDecode+0x760>)
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	797a      	ldrb	r2, [r7, #5]
 8002842:	4610      	mov	r0, r2
 8002844:	4798      	blx	r3
			esp01nBytes--;
 8002846:	4b26      	ldr	r3, [pc, #152]	@ (80028e0 <ESP01ATDecode+0x750>)
 8002848:	881b      	ldrh	r3, [r3, #0]
 800284a:	3b01      	subs	r3, #1
 800284c:	b29a      	uxth	r2, r3
 800284e:	4b24      	ldr	r3, [pc, #144]	@ (80028e0 <ESP01ATDecode+0x750>)
 8002850:	801a      	strh	r2, [r3, #0]
			if(!esp01nBytes){
 8002852:	4b23      	ldr	r3, [pc, #140]	@ (80028e0 <ESP01ATDecode+0x750>)
 8002854:	881b      	ldrh	r3, [r3, #0]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d11c      	bne.n	8002894 <ESP01ATDecode+0x704>
				esp01HState = 0;
 800285a:	4b1c      	ldr	r3, [pc, #112]	@ (80028cc <ESP01ATDecode+0x73c>)
 800285c:	2200      	movs	r2, #0
 800285e:	701a      	strb	r2, [r3, #0]
				if(ESP01DbgStr != NULL)
 8002860:	4b1b      	ldr	r3, [pc, #108]	@ (80028d0 <ESP01ATDecode+0x740>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d015      	beq.n	8002894 <ESP01ATDecode+0x704>
					ESP01DbgStr("+&DBGRESPONSE IPD\n");
 8002868:	4b19      	ldr	r3, [pc, #100]	@ (80028d0 <ESP01ATDecode+0x740>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4821      	ldr	r0, [pc, #132]	@ (80028f4 <ESP01ATDecode+0x764>)
 800286e:	4798      	blx	r3
			}
			break;
 8002870:	e010      	b.n	8002894 <ESP01ATDecode+0x704>
		default:
			esp01HState = 0;
 8002872:	4b16      	ldr	r3, [pc, #88]	@ (80028cc <ESP01ATDecode+0x73c>)
 8002874:	2200      	movs	r2, #0
 8002876:	701a      	strb	r2, [r3, #0]
			esp01TimeoutDataRx = 0;
 8002878:	4b1f      	ldr	r3, [pc, #124]	@ (80028f8 <ESP01ATDecode+0x768>)
 800287a:	2200      	movs	r2, #0
 800287c:	601a      	str	r2, [r3, #0]
 800287e:	e00a      	b.n	8002896 <ESP01ATDecode+0x706>
			break;
 8002880:	bf00      	nop
 8002882:	e008      	b.n	8002896 <ESP01ATDecode+0x706>
			break;
 8002884:	bf00      	nop
 8002886:	e006      	b.n	8002896 <ESP01ATDecode+0x706>
			break;
 8002888:	bf00      	nop
 800288a:	e004      	b.n	8002896 <ESP01ATDecode+0x706>
			break;
 800288c:	bf00      	nop
 800288e:	e002      	b.n	8002896 <ESP01ATDecode+0x706>
			break;
 8002890:	bf00      	nop
 8002892:	e000      	b.n	8002896 <ESP01ATDecode+0x706>
			break;
 8002894:	bf00      	nop
		}

		esp01irRXAT++;
 8002896:	4b10      	ldr	r3, [pc, #64]	@ (80028d8 <ESP01ATDecode+0x748>)
 8002898:	881b      	ldrh	r3, [r3, #0]
 800289a:	3301      	adds	r3, #1
 800289c:	b29a      	uxth	r2, r3
 800289e:	4b0e      	ldr	r3, [pc, #56]	@ (80028d8 <ESP01ATDecode+0x748>)
 80028a0:	801a      	strh	r2, [r3, #0]
		if(esp01irRXAT == ESP01RXBUFAT)
 80028a2:	4b0d      	ldr	r3, [pc, #52]	@ (80028d8 <ESP01ATDecode+0x748>)
 80028a4:	881b      	ldrh	r3, [r3, #0]
 80028a6:	2b80      	cmp	r3, #128	@ 0x80
 80028a8:	d102      	bne.n	80028b0 <ESP01ATDecode+0x720>
			esp01irRXAT = 0;
 80028aa:	4b0b      	ldr	r3, [pc, #44]	@ (80028d8 <ESP01ATDecode+0x748>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	801a      	strh	r2, [r3, #0]
	while(esp01irRXAT != i){
 80028b0:	4b09      	ldr	r3, [pc, #36]	@ (80028d8 <ESP01ATDecode+0x748>)
 80028b2:	881b      	ldrh	r3, [r3, #0]
 80028b4:	88fa      	ldrh	r2, [r7, #6]
 80028b6:	429a      	cmp	r2, r3
 80028b8:	f47f ac85 	bne.w	80021c6 <ESP01ATDecode+0x36>
	}

}
 80028bc:	3708      	adds	r7, #8
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	20000830 	.word	0x20000830
 80028c8:	2000082e 	.word	0x2000082e
 80028cc:	200008d6 	.word	0x200008d6
 80028d0:	20000844 	.word	0x20000844
 80028d4:	0801287c 	.word	0x0801287c
 80028d8:	20000a5e 	.word	0x20000a5e
 80028dc:	08012894 	.word	0x08012894
 80028e0:	200008d8 	.word	0x200008d8
 80028e4:	200008c0 	.word	0x200008c0
 80028e8:	20000834 	.word	0x20000834
 80028ec:	20000840 	.word	0x20000840
 80028f0:	20000a68 	.word	0x20000a68
 80028f4:	080128a8 	.word	0x080128a8
 80028f8:	20000838 	.word	0x20000838

080028fc <ESP01DOConnection>:

static void ESP01DOConnection(){
 80028fc:	b580      	push	{r7, lr}
 80028fe:	af00      	add	r7, sp, #0
	esp01TimeoutTask = 100;
 8002900:	4b9c      	ldr	r3, [pc, #624]	@ (8002b74 <ESP01DOConnection+0x278>)
 8002902:	2264      	movs	r2, #100	@ 0x64
 8002904:	601a      	str	r2, [r3, #0]
	switch(esp01ATSate){
 8002906:	4b9c      	ldr	r3, [pc, #624]	@ (8002b78 <ESP01DOConnection+0x27c>)
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	2b0f      	cmp	r3, #15
 800290c:	f200 81e5 	bhi.w	8002cda <ESP01DOConnection+0x3de>
 8002910:	a201      	add	r2, pc, #4	@ (adr r2, 8002918 <ESP01DOConnection+0x1c>)
 8002912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002916:	bf00      	nop
 8002918:	08002959 	.word	0x08002959
 800291c:	080029b7 	.word	0x080029b7
 8002920:	08002a09 	.word	0x08002a09
 8002924:	08002a27 	.word	0x08002a27
 8002928:	08002a45 	.word	0x08002a45
 800292c:	08002a63 	.word	0x08002a63
 8002930:	08002ae9 	.word	0x08002ae9
 8002934:	08002b0d 	.word	0x08002b0d
 8002938:	08002b3b 	.word	0x08002b3b
 800293c:	08002bc9 	.word	0x08002bc9
 8002940:	08002bf1 	.word	0x08002bf1
 8002944:	08002c83 	.word	0x08002c83
 8002948:	08002ca1 	.word	0x08002ca1
 800294c:	08002961 	.word	0x08002961
 8002950:	08002981 	.word	0x08002981
 8002954:	080029a9 	.word	0x080029a9
	case ESP01ATIDLE:
		esp01TimeoutTask = 0;
 8002958:	4b86      	ldr	r3, [pc, #536]	@ (8002b74 <ESP01DOConnection+0x278>)
 800295a:	2200      	movs	r2, #0
 800295c:	601a      	str	r2, [r3, #0]
		break;
 800295e:	e1bc      	b.n	8002cda <ESP01DOConnection+0x3de>
	case ESP01ATHARDRST0:
		esp01Handle.DoCHPD(0);
 8002960:	4b86      	ldr	r3, [pc, #536]	@ (8002b7c <ESP01DOConnection+0x280>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2000      	movs	r0, #0
 8002966:	4798      	blx	r3
		if(ESP01DbgStr != NULL)
 8002968:	4b85      	ldr	r3, [pc, #532]	@ (8002b80 <ESP01DOConnection+0x284>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d003      	beq.n	8002978 <ESP01DOConnection+0x7c>
			ESP01DbgStr("+&DBGESP01HARDRESET0\n");
 8002970:	4b83      	ldr	r3, [pc, #524]	@ (8002b80 <ESP01DOConnection+0x284>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4883      	ldr	r0, [pc, #524]	@ (8002b84 <ESP01DOConnection+0x288>)
 8002976:	4798      	blx	r3
		esp01ATSate = ESP01ATHARDRST1;
 8002978:	4b7f      	ldr	r3, [pc, #508]	@ (8002b78 <ESP01DOConnection+0x27c>)
 800297a:	220e      	movs	r2, #14
 800297c:	701a      	strb	r2, [r3, #0]
		break;
 800297e:	e1ac      	b.n	8002cda <ESP01DOConnection+0x3de>
	case ESP01ATHARDRST1:
		esp01Handle.DoCHPD(1);
 8002980:	4b7e      	ldr	r3, [pc, #504]	@ (8002b7c <ESP01DOConnection+0x280>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2001      	movs	r0, #1
 8002986:	4798      	blx	r3
		if(ESP01DbgStr != NULL)
 8002988:	4b7d      	ldr	r3, [pc, #500]	@ (8002b80 <ESP01DOConnection+0x284>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d003      	beq.n	8002998 <ESP01DOConnection+0x9c>
			ESP01DbgStr("+&DBGESP01HARDRESET1\n");
 8002990:	4b7b      	ldr	r3, [pc, #492]	@ (8002b80 <ESP01DOConnection+0x284>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	487c      	ldr	r0, [pc, #496]	@ (8002b88 <ESP01DOConnection+0x28c>)
 8002996:	4798      	blx	r3
		esp01ATSate = ESP01ATHARDRSTSTOP;
 8002998:	4b77      	ldr	r3, [pc, #476]	@ (8002b78 <ESP01DOConnection+0x27c>)
 800299a:	220f      	movs	r2, #15
 800299c:	701a      	strb	r2, [r3, #0]
		esp01TimeoutTask = 500;
 800299e:	4b75      	ldr	r3, [pc, #468]	@ (8002b74 <ESP01DOConnection+0x278>)
 80029a0:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80029a4:	601a      	str	r2, [r3, #0]
		break;
 80029a6:	e198      	b.n	8002cda <ESP01DOConnection+0x3de>
	case ESP01ATHARDRSTSTOP:
		esp01ATSate = ESP01ATAT;
 80029a8:	4b73      	ldr	r3, [pc, #460]	@ (8002b78 <ESP01DOConnection+0x27c>)
 80029aa:	2201      	movs	r2, #1
 80029ac:	701a      	strb	r2, [r3, #0]
		esp01TriesAT = 0;
 80029ae:	4b77      	ldr	r3, [pc, #476]	@ (8002b8c <ESP01DOConnection+0x290>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	701a      	strb	r2, [r3, #0]
		break;
 80029b4:	e191      	b.n	8002cda <ESP01DOConnection+0x3de>
	case ESP01ATAT:
		if(esp01TriesAT){
 80029b6:	4b75      	ldr	r3, [pc, #468]	@ (8002b8c <ESP01DOConnection+0x290>)
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d00d      	beq.n	80029da <ESP01DOConnection+0xde>
			esp01TriesAT--;
 80029be:	4b73      	ldr	r3, [pc, #460]	@ (8002b8c <ESP01DOConnection+0x290>)
 80029c0:	781b      	ldrb	r3, [r3, #0]
 80029c2:	3b01      	subs	r3, #1
 80029c4:	b2da      	uxtb	r2, r3
 80029c6:	4b71      	ldr	r3, [pc, #452]	@ (8002b8c <ESP01DOConnection+0x290>)
 80029c8:	701a      	strb	r2, [r3, #0]
			if(!esp01TriesAT){
 80029ca:	4b70      	ldr	r3, [pc, #448]	@ (8002b8c <ESP01DOConnection+0x290>)
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d106      	bne.n	80029e0 <ESP01DOConnection+0xe4>
				esp01ATSate = ESP01ATHARDRST0;
 80029d2:	4b69      	ldr	r3, [pc, #420]	@ (8002b78 <ESP01DOConnection+0x27c>)
 80029d4:	220d      	movs	r2, #13
 80029d6:	701a      	strb	r2, [r3, #0]
				break;
 80029d8:	e17f      	b.n	8002cda <ESP01DOConnection+0x3de>
			}
		}
		else
			esp01TriesAT = 4;
 80029da:	4b6c      	ldr	r3, [pc, #432]	@ (8002b8c <ESP01DOConnection+0x290>)
 80029dc:	2204      	movs	r2, #4
 80029de:	701a      	strb	r2, [r3, #0]

		esp01Flags.bit.ATRESPONSEOK = 0;
 80029e0:	4a6b      	ldr	r2, [pc, #428]	@ (8002b90 <ESP01DOConnection+0x294>)
 80029e2:	7813      	ldrb	r3, [r2, #0]
 80029e4:	f023 0320 	bic.w	r3, r3, #32
 80029e8:	7013      	strb	r3, [r2, #0]
		ESP01StrToBufTX(ATAT);
 80029ea:	486a      	ldr	r0, [pc, #424]	@ (8002b94 <ESP01DOConnection+0x298>)
 80029ec:	f000 fa0c 	bl	8002e08 <ESP01StrToBufTX>
		if(ESP01DbgStr != NULL)
 80029f0:	4b63      	ldr	r3, [pc, #396]	@ (8002b80 <ESP01DOConnection+0x284>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d003      	beq.n	8002a00 <ESP01DOConnection+0x104>
			ESP01DbgStr("+&DBGESP01AT\n");
 80029f8:	4b61      	ldr	r3, [pc, #388]	@ (8002b80 <ESP01DOConnection+0x284>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4866      	ldr	r0, [pc, #408]	@ (8002b98 <ESP01DOConnection+0x29c>)
 80029fe:	4798      	blx	r3
		esp01ATSate = ESP01ATRESPONSE;
 8002a00:	4b5d      	ldr	r3, [pc, #372]	@ (8002b78 <ESP01DOConnection+0x27c>)
 8002a02:	2202      	movs	r2, #2
 8002a04:	701a      	strb	r2, [r3, #0]
		break;
 8002a06:	e168      	b.n	8002cda <ESP01DOConnection+0x3de>
	case ESP01ATRESPONSE:
		if(esp01Flags.bit.ATRESPONSEOK)
 8002a08:	4b61      	ldr	r3, [pc, #388]	@ (8002b90 <ESP01DOConnection+0x294>)
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	f003 0320 	and.w	r3, r3, #32
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d003      	beq.n	8002a1e <ESP01DOConnection+0x122>
			esp01ATSate = ESP01ATCWMODE;
 8002a16:	4b58      	ldr	r3, [pc, #352]	@ (8002b78 <ESP01DOConnection+0x27c>)
 8002a18:	2203      	movs	r2, #3
 8002a1a:	701a      	strb	r2, [r3, #0]
		else
			esp01ATSate = ESP01ATAT;
		break;
 8002a1c:	e15d      	b.n	8002cda <ESP01DOConnection+0x3de>
			esp01ATSate = ESP01ATAT;
 8002a1e:	4b56      	ldr	r3, [pc, #344]	@ (8002b78 <ESP01DOConnection+0x27c>)
 8002a20:	2201      	movs	r2, #1
 8002a22:	701a      	strb	r2, [r3, #0]
		break;
 8002a24:	e159      	b.n	8002cda <ESP01DOConnection+0x3de>
	case ESP01ATCWMODE:
		ESP01StrToBufTX(ATCWMODE);
 8002a26:	485d      	ldr	r0, [pc, #372]	@ (8002b9c <ESP01DOConnection+0x2a0>)
 8002a28:	f000 f9ee 	bl	8002e08 <ESP01StrToBufTX>
		if(ESP01DbgStr != NULL)
 8002a2c:	4b54      	ldr	r3, [pc, #336]	@ (8002b80 <ESP01DOConnection+0x284>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d003      	beq.n	8002a3c <ESP01DOConnection+0x140>
			ESP01DbgStr("+&DBGESP01ATCWMODE\n");
 8002a34:	4b52      	ldr	r3, [pc, #328]	@ (8002b80 <ESP01DOConnection+0x284>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4859      	ldr	r0, [pc, #356]	@ (8002ba0 <ESP01DOConnection+0x2a4>)
 8002a3a:	4798      	blx	r3
		esp01ATSate = ESP01ATCIPMUX;
 8002a3c:	4b4e      	ldr	r3, [pc, #312]	@ (8002b78 <ESP01DOConnection+0x27c>)
 8002a3e:	2204      	movs	r2, #4
 8002a40:	701a      	strb	r2, [r3, #0]
		break;
 8002a42:	e14a      	b.n	8002cda <ESP01DOConnection+0x3de>
	case ESP01ATCIPMUX:
		ESP01StrToBufTX(ATCIPMUX);
 8002a44:	4857      	ldr	r0, [pc, #348]	@ (8002ba4 <ESP01DOConnection+0x2a8>)
 8002a46:	f000 f9df 	bl	8002e08 <ESP01StrToBufTX>
		if(ESP01DbgStr != NULL)
 8002a4a:	4b4d      	ldr	r3, [pc, #308]	@ (8002b80 <ESP01DOConnection+0x284>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d003      	beq.n	8002a5a <ESP01DOConnection+0x15e>
			ESP01DbgStr("+&DBGESP01ATCIPMUX\n");
 8002a52:	4b4b      	ldr	r3, [pc, #300]	@ (8002b80 <ESP01DOConnection+0x284>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4854      	ldr	r0, [pc, #336]	@ (8002ba8 <ESP01DOConnection+0x2ac>)
 8002a58:	4798      	blx	r3
		esp01ATSate = ESP01ATCWJAP;
 8002a5a:	4b47      	ldr	r3, [pc, #284]	@ (8002b78 <ESP01DOConnection+0x27c>)
 8002a5c:	2205      	movs	r2, #5
 8002a5e:	701a      	strb	r2, [r3, #0]
		break;
 8002a60:	e13b      	b.n	8002cda <ESP01DOConnection+0x3de>
	case ESP01ATCWJAP:
		if(esp01Flags.bit.WIFICONNECTED){
 8002a62:	4b4b      	ldr	r3, [pc, #300]	@ (8002b90 <ESP01DOConnection+0x294>)
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	f003 0302 	and.w	r3, r3, #2
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d003      	beq.n	8002a78 <ESP01DOConnection+0x17c>
			esp01ATSate = ESP01ATCIFSR;
 8002a70:	4b41      	ldr	r3, [pc, #260]	@ (8002b78 <ESP01DOConnection+0x27c>)
 8002a72:	2207      	movs	r2, #7
 8002a74:	701a      	strb	r2, [r3, #0]
			break;
 8002a76:	e130      	b.n	8002cda <ESP01DOConnection+0x3de>
		}
		if(esp01SSID[0] == '\0')
 8002a78:	4b4c      	ldr	r3, [pc, #304]	@ (8002bac <ESP01DOConnection+0x2b0>)
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	f000 8129 	beq.w	8002cd4 <ESP01DOConnection+0x3d8>
			break;
		ESP01StrToBufTX(ATCWJAP);
 8002a82:	484b      	ldr	r0, [pc, #300]	@ (8002bb0 <ESP01DOConnection+0x2b4>)
 8002a84:	f000 f9c0 	bl	8002e08 <ESP01StrToBufTX>
		ESP01ByteToBufTX('\"');
 8002a88:	2022      	movs	r0, #34	@ 0x22
 8002a8a:	f000 f9ed 	bl	8002e68 <ESP01ByteToBufTX>
		ESP01StrToBufTX(esp01SSID);
 8002a8e:	4847      	ldr	r0, [pc, #284]	@ (8002bac <ESP01DOConnection+0x2b0>)
 8002a90:	f000 f9ba 	bl	8002e08 <ESP01StrToBufTX>
		ESP01ByteToBufTX('\"');
 8002a94:	2022      	movs	r0, #34	@ 0x22
 8002a96:	f000 f9e7 	bl	8002e68 <ESP01ByteToBufTX>
		ESP01ByteToBufTX(',');
 8002a9a:	202c      	movs	r0, #44	@ 0x2c
 8002a9c:	f000 f9e4 	bl	8002e68 <ESP01ByteToBufTX>
		ESP01ByteToBufTX('\"');
 8002aa0:	2022      	movs	r0, #34	@ 0x22
 8002aa2:	f000 f9e1 	bl	8002e68 <ESP01ByteToBufTX>
		ESP01StrToBufTX(esp01PASSWORD);
 8002aa6:	4843      	ldr	r0, [pc, #268]	@ (8002bb4 <ESP01DOConnection+0x2b8>)
 8002aa8:	f000 f9ae 	bl	8002e08 <ESP01StrToBufTX>
		ESP01ByteToBufTX('\"');
 8002aac:	2022      	movs	r0, #34	@ 0x22
 8002aae:	f000 f9db 	bl	8002e68 <ESP01ByteToBufTX>
		ESP01ByteToBufTX('\r');
 8002ab2:	200d      	movs	r0, #13
 8002ab4:	f000 f9d8 	bl	8002e68 <ESP01ByteToBufTX>
		ESP01ByteToBufTX('\n');
 8002ab8:	200a      	movs	r0, #10
 8002aba:	f000 f9d5 	bl	8002e68 <ESP01ByteToBufTX>
		if(ESP01DbgStr != NULL)
 8002abe:	4b30      	ldr	r3, [pc, #192]	@ (8002b80 <ESP01DOConnection+0x284>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d003      	beq.n	8002ace <ESP01DOConnection+0x1d2>
			ESP01DbgStr("+&DBGESP01ATCWJAP\n");
 8002ac6:	4b2e      	ldr	r3, [pc, #184]	@ (8002b80 <ESP01DOConnection+0x284>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	483b      	ldr	r0, [pc, #236]	@ (8002bb8 <ESP01DOConnection+0x2bc>)
 8002acc:	4798      	blx	r3
		esp01Flags.bit.ATRESPONSEOK = 0;
 8002ace:	4a30      	ldr	r2, [pc, #192]	@ (8002b90 <ESP01DOConnection+0x294>)
 8002ad0:	7813      	ldrb	r3, [r2, #0]
 8002ad2:	f023 0320 	bic.w	r3, r3, #32
 8002ad6:	7013      	strb	r3, [r2, #0]
		esp01ATSate = ESP01CWJAPRESPONSE;
 8002ad8:	4b27      	ldr	r3, [pc, #156]	@ (8002b78 <ESP01DOConnection+0x27c>)
 8002ada:	2206      	movs	r2, #6
 8002adc:	701a      	strb	r2, [r3, #0]
		esp01TimeoutTask = 1500;
 8002ade:	4b25      	ldr	r3, [pc, #148]	@ (8002b74 <ESP01DOConnection+0x278>)
 8002ae0:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8002ae4:	601a      	str	r2, [r3, #0]
		break;
 8002ae6:	e0f8      	b.n	8002cda <ESP01DOConnection+0x3de>
	case ESP01CWJAPRESPONSE:
		if(esp01Flags.bit.ATRESPONSEOK){
 8002ae8:	4b29      	ldr	r3, [pc, #164]	@ (8002b90 <ESP01DOConnection+0x294>)
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	f003 0320 	and.w	r3, r3, #32
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d006      	beq.n	8002b04 <ESP01DOConnection+0x208>
			esp01ATSate = ESP01ATCIFSR;
 8002af6:	4b20      	ldr	r3, [pc, #128]	@ (8002b78 <ESP01DOConnection+0x27c>)
 8002af8:	2207      	movs	r2, #7
 8002afa:	701a      	strb	r2, [r3, #0]
			esp01TriesAT = 4;
 8002afc:	4b23      	ldr	r3, [pc, #140]	@ (8002b8c <ESP01DOConnection+0x290>)
 8002afe:	2204      	movs	r2, #4
 8002b00:	701a      	strb	r2, [r3, #0]
		}
		else
			esp01ATSate = ESP01ATAT;
		break;
 8002b02:	e0ea      	b.n	8002cda <ESP01DOConnection+0x3de>
			esp01ATSate = ESP01ATAT;
 8002b04:	4b1c      	ldr	r3, [pc, #112]	@ (8002b78 <ESP01DOConnection+0x27c>)
 8002b06:	2201      	movs	r2, #1
 8002b08:	701a      	strb	r2, [r3, #0]
		break;
 8002b0a:	e0e6      	b.n	8002cda <ESP01DOConnection+0x3de>
	case ESP01ATCIFSR:
		esp01LocalIP[0] = '\0';
 8002b0c:	4b2b      	ldr	r3, [pc, #172]	@ (8002bbc <ESP01DOConnection+0x2c0>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	701a      	strb	r2, [r3, #0]
		ESP01StrToBufTX(ATCIFSR);
 8002b12:	482b      	ldr	r0, [pc, #172]	@ (8002bc0 <ESP01DOConnection+0x2c4>)
 8002b14:	f000 f978 	bl	8002e08 <ESP01StrToBufTX>
		if(ESP01DbgStr != NULL)
 8002b18:	4b19      	ldr	r3, [pc, #100]	@ (8002b80 <ESP01DOConnection+0x284>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d003      	beq.n	8002b28 <ESP01DOConnection+0x22c>
			ESP01DbgStr("+&DBGESP01CIFSR\n");
 8002b20:	4b17      	ldr	r3, [pc, #92]	@ (8002b80 <ESP01DOConnection+0x284>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4827      	ldr	r0, [pc, #156]	@ (8002bc4 <ESP01DOConnection+0x2c8>)
 8002b26:	4798      	blx	r3
		esp01Flags.bit.ATRESPONSEOK = 0;
 8002b28:	4a19      	ldr	r2, [pc, #100]	@ (8002b90 <ESP01DOConnection+0x294>)
 8002b2a:	7813      	ldrb	r3, [r2, #0]
 8002b2c:	f023 0320 	bic.w	r3, r3, #32
 8002b30:	7013      	strb	r3, [r2, #0]
		esp01ATSate = ESP01CIFSRRESPONSE;
 8002b32:	4b11      	ldr	r3, [pc, #68]	@ (8002b78 <ESP01DOConnection+0x27c>)
 8002b34:	2208      	movs	r2, #8
 8002b36:	701a      	strb	r2, [r3, #0]
		break;
 8002b38:	e0cf      	b.n	8002cda <ESP01DOConnection+0x3de>
	case ESP01CIFSRRESPONSE:
		if(esp01Flags.bit.ATRESPONSEOK)
 8002b3a:	4b15      	ldr	r3, [pc, #84]	@ (8002b90 <ESP01DOConnection+0x294>)
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	f003 0320 	and.w	r3, r3, #32
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d003      	beq.n	8002b50 <ESP01DOConnection+0x254>
			esp01ATSate = ESP01ATCIPCLOSE;
 8002b48:	4b0b      	ldr	r3, [pc, #44]	@ (8002b78 <ESP01DOConnection+0x27c>)
 8002b4a:	2209      	movs	r2, #9
 8002b4c:	701a      	strb	r2, [r3, #0]
				esp01ATSate = ESP01ATAT;
				break;
			}
			esp01ATSate = ESP01ATCIFSR;
		}
		break;
 8002b4e:	e0c4      	b.n	8002cda <ESP01DOConnection+0x3de>
			esp01TriesAT--;
 8002b50:	4b0e      	ldr	r3, [pc, #56]	@ (8002b8c <ESP01DOConnection+0x290>)
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	3b01      	subs	r3, #1
 8002b56:	b2da      	uxtb	r2, r3
 8002b58:	4b0c      	ldr	r3, [pc, #48]	@ (8002b8c <ESP01DOConnection+0x290>)
 8002b5a:	701a      	strb	r2, [r3, #0]
			if(esp01TriesAT == 0){
 8002b5c:	4b0b      	ldr	r3, [pc, #44]	@ (8002b8c <ESP01DOConnection+0x290>)
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d103      	bne.n	8002b6c <ESP01DOConnection+0x270>
				esp01ATSate = ESP01ATAT;
 8002b64:	4b04      	ldr	r3, [pc, #16]	@ (8002b78 <ESP01DOConnection+0x27c>)
 8002b66:	2201      	movs	r2, #1
 8002b68:	701a      	strb	r2, [r3, #0]
				break;
 8002b6a:	e0b6      	b.n	8002cda <ESP01DOConnection+0x3de>
			esp01ATSate = ESP01ATCIFSR;
 8002b6c:	4b02      	ldr	r3, [pc, #8]	@ (8002b78 <ESP01DOConnection+0x27c>)
 8002b6e:	2207      	movs	r2, #7
 8002b70:	701a      	strb	r2, [r3, #0]
		break;
 8002b72:	e0b2      	b.n	8002cda <ESP01DOConnection+0x3de>
 8002b74:	20000834 	.word	0x20000834
 8002b78:	2000082e 	.word	0x2000082e
 8002b7c:	20000a68 	.word	0x20000a68
 8002b80:	20000844 	.word	0x20000844
 8002b84:	080128bc 	.word	0x080128bc
 8002b88:	080128d4 	.word	0x080128d4
 8002b8c:	20000a64 	.word	0x20000a64
 8002b90:	20000830 	.word	0x20000830
 8002b94:	08013d54 	.word	0x08013d54
 8002b98:	080128ec 	.word	0x080128ec
 8002b9c:	08013d6c 	.word	0x08013d6c
 8002ba0:	080128fc 	.word	0x080128fc
 8002ba4:	08013d5c 	.word	0x08013d5c
 8002ba8:	08012910 	.word	0x08012910
 8002bac:	20000848 	.word	0x20000848
 8002bb0:	08013d7c 	.word	0x08013d7c
 8002bb4:	20000888 	.word	0x20000888
 8002bb8:	08012924 	.word	0x08012924
 8002bbc:	200008c0 	.word	0x200008c0
 8002bc0:	08013d88 	.word	0x08013d88
 8002bc4:	08012938 	.word	0x08012938
	case ESP01ATCIPCLOSE:
		if(esp01RemoteIP[0] == '\0')
 8002bc8:	4b45      	ldr	r3, [pc, #276]	@ (8002ce0 <ESP01DOConnection+0x3e4>)
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	f000 8083 	beq.w	8002cd8 <ESP01DOConnection+0x3dc>
			break;
		ESP01StrToBufTX(ATCIPCLOSE);
 8002bd2:	4844      	ldr	r0, [pc, #272]	@ (8002ce4 <ESP01DOConnection+0x3e8>)
 8002bd4:	f000 f918 	bl	8002e08 <ESP01StrToBufTX>
		if(ESP01DbgStr != NULL)
 8002bd8:	4b43      	ldr	r3, [pc, #268]	@ (8002ce8 <ESP01DOConnection+0x3ec>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d003      	beq.n	8002be8 <ESP01DOConnection+0x2ec>
			ESP01DbgStr("+&DBGESP01ATCIPCLOSE\n");
 8002be0:	4b41      	ldr	r3, [pc, #260]	@ (8002ce8 <ESP01DOConnection+0x3ec>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4841      	ldr	r0, [pc, #260]	@ (8002cec <ESP01DOConnection+0x3f0>)
 8002be6:	4798      	blx	r3
		esp01ATSate = ESP01ATCIPSTART;
 8002be8:	4b41      	ldr	r3, [pc, #260]	@ (8002cf0 <ESP01DOConnection+0x3f4>)
 8002bea:	220a      	movs	r2, #10
 8002bec:	701a      	strb	r2, [r3, #0]
		break;
 8002bee:	e074      	b.n	8002cda <ESP01DOConnection+0x3de>
	case ESP01ATCIPSTART:
		ESP01StrToBufTX(ATCIPSTART);
 8002bf0:	4840      	ldr	r0, [pc, #256]	@ (8002cf4 <ESP01DOConnection+0x3f8>)
 8002bf2:	f000 f909 	bl	8002e08 <ESP01StrToBufTX>
		ESP01ByteToBufTX('\"');
 8002bf6:	2022      	movs	r0, #34	@ 0x22
 8002bf8:	f000 f936 	bl	8002e68 <ESP01ByteToBufTX>
		ESP01StrToBufTX(esp01PROTO);
 8002bfc:	483e      	ldr	r0, [pc, #248]	@ (8002cf8 <ESP01DOConnection+0x3fc>)
 8002bfe:	f000 f903 	bl	8002e08 <ESP01StrToBufTX>
		ESP01ByteToBufTX('\"');
 8002c02:	2022      	movs	r0, #34	@ 0x22
 8002c04:	f000 f930 	bl	8002e68 <ESP01ByteToBufTX>
		ESP01ByteToBufTX(',');
 8002c08:	202c      	movs	r0, #44	@ 0x2c
 8002c0a:	f000 f92d 	bl	8002e68 <ESP01ByteToBufTX>
		ESP01ByteToBufTX('\"');
 8002c0e:	2022      	movs	r0, #34	@ 0x22
 8002c10:	f000 f92a 	bl	8002e68 <ESP01ByteToBufTX>
		ESP01StrToBufTX(esp01RemoteIP);
 8002c14:	4832      	ldr	r0, [pc, #200]	@ (8002ce0 <ESP01DOConnection+0x3e4>)
 8002c16:	f000 f8f7 	bl	8002e08 <ESP01StrToBufTX>
		ESP01ByteToBufTX('\"');
 8002c1a:	2022      	movs	r0, #34	@ 0x22
 8002c1c:	f000 f924 	bl	8002e68 <ESP01ByteToBufTX>
		ESP01ByteToBufTX(',');
 8002c20:	202c      	movs	r0, #44	@ 0x2c
 8002c22:	f000 f921 	bl	8002e68 <ESP01ByteToBufTX>
		ESP01StrToBufTX(esp01RemotePORT);
 8002c26:	4835      	ldr	r0, [pc, #212]	@ (8002cfc <ESP01DOConnection+0x400>)
 8002c28:	f000 f8ee 	bl	8002e08 <ESP01StrToBufTX>
		ESP01ByteToBufTX(',');
 8002c2c:	202c      	movs	r0, #44	@ 0x2c
 8002c2e:	f000 f91b 	bl	8002e68 <ESP01ByteToBufTX>
		ESP01StrToBufTX(esp01LocalPORT);
 8002c32:	4833      	ldr	r0, [pc, #204]	@ (8002d00 <ESP01DOConnection+0x404>)
 8002c34:	f000 f8e8 	bl	8002e08 <ESP01StrToBufTX>
		ESP01ByteToBufTX(',');
 8002c38:	202c      	movs	r0, #44	@ 0x2c
 8002c3a:	f000 f915 	bl	8002e68 <ESP01ByteToBufTX>
		ESP01ByteToBufTX('0');
 8002c3e:	2030      	movs	r0, #48	@ 0x30
 8002c40:	f000 f912 	bl	8002e68 <ESP01ByteToBufTX>
		ESP01ByteToBufTX('\r');
 8002c44:	200d      	movs	r0, #13
 8002c46:	f000 f90f 	bl	8002e68 <ESP01ByteToBufTX>
		ESP01ByteToBufTX('\n');
 8002c4a:	200a      	movs	r0, #10
 8002c4c:	f000 f90c 	bl	8002e68 <ESP01ByteToBufTX>
		if(ESP01DbgStr != NULL)
 8002c50:	4b25      	ldr	r3, [pc, #148]	@ (8002ce8 <ESP01DOConnection+0x3ec>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d003      	beq.n	8002c60 <ESP01DOConnection+0x364>
			ESP01DbgStr("+&DBGESP01ATCIPSTART\n");
 8002c58:	4b23      	ldr	r3, [pc, #140]	@ (8002ce8 <ESP01DOConnection+0x3ec>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4829      	ldr	r0, [pc, #164]	@ (8002d04 <ESP01DOConnection+0x408>)
 8002c5e:	4798      	blx	r3
		esp01Flags.bit.ATRESPONSEOK = 0;
 8002c60:	4a29      	ldr	r2, [pc, #164]	@ (8002d08 <ESP01DOConnection+0x40c>)
 8002c62:	7813      	ldrb	r3, [r2, #0]
 8002c64:	f023 0320 	bic.w	r3, r3, #32
 8002c68:	7013      	strb	r3, [r2, #0]
		esp01Flags.bit.UDPTCPCONNECTED = 0;
 8002c6a:	4a27      	ldr	r2, [pc, #156]	@ (8002d08 <ESP01DOConnection+0x40c>)
 8002c6c:	7813      	ldrb	r3, [r2, #0]
 8002c6e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002c72:	7013      	strb	r3, [r2, #0]
		esp01ATSate = ESP01CIPSTARTRESPONSE;
 8002c74:	4b1e      	ldr	r3, [pc, #120]	@ (8002cf0 <ESP01DOConnection+0x3f4>)
 8002c76:	220b      	movs	r2, #11
 8002c78:	701a      	strb	r2, [r3, #0]
		esp01TimeoutTask = 200;
 8002c7a:	4b24      	ldr	r3, [pc, #144]	@ (8002d0c <ESP01DOConnection+0x410>)
 8002c7c:	22c8      	movs	r2, #200	@ 0xc8
 8002c7e:	601a      	str	r2, [r3, #0]
		break;
 8002c80:	e02b      	b.n	8002cda <ESP01DOConnection+0x3de>
	case ESP01CIPSTARTRESPONSE:
		if(esp01Flags.bit.ATRESPONSEOK)
 8002c82:	4b21      	ldr	r3, [pc, #132]	@ (8002d08 <ESP01DOConnection+0x40c>)
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	f003 0320 	and.w	r3, r3, #32
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d003      	beq.n	8002c98 <ESP01DOConnection+0x39c>
			esp01ATSate = ESP01ATCONNECTED;
 8002c90:	4b17      	ldr	r3, [pc, #92]	@ (8002cf0 <ESP01DOConnection+0x3f4>)
 8002c92:	220c      	movs	r2, #12
 8002c94:	701a      	strb	r2, [r3, #0]
		else
			esp01ATSate = ESP01ATAT;
		break;
 8002c96:	e020      	b.n	8002cda <ESP01DOConnection+0x3de>
			esp01ATSate = ESP01ATAT;
 8002c98:	4b15      	ldr	r3, [pc, #84]	@ (8002cf0 <ESP01DOConnection+0x3f4>)
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	701a      	strb	r2, [r3, #0]
		break;
 8002c9e:	e01c      	b.n	8002cda <ESP01DOConnection+0x3de>
	case ESP01ATCONNECTED:
		if(esp01Flags.bit.WIFICONNECTED == 0){
 8002ca0:	4b19      	ldr	r3, [pc, #100]	@ (8002d08 <ESP01DOConnection+0x40c>)
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	f003 0302 	and.w	r3, r3, #2
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d103      	bne.n	8002cb6 <ESP01DOConnection+0x3ba>
			esp01ATSate = ESP01ATAT;
 8002cae:	4b10      	ldr	r3, [pc, #64]	@ (8002cf0 <ESP01DOConnection+0x3f4>)
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	701a      	strb	r2, [r3, #0]
			break;
 8002cb4:	e011      	b.n	8002cda <ESP01DOConnection+0x3de>
		}
		if(esp01Flags.bit.UDPTCPCONNECTED == 0){
 8002cb6:	4b14      	ldr	r3, [pc, #80]	@ (8002d08 <ESP01DOConnection+0x40c>)
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d103      	bne.n	8002ccc <ESP01DOConnection+0x3d0>
			esp01ATSate = ESP01ATCIPCLOSE;
 8002cc4:	4b0a      	ldr	r3, [pc, #40]	@ (8002cf0 <ESP01DOConnection+0x3f4>)
 8002cc6:	2209      	movs	r2, #9
 8002cc8:	701a      	strb	r2, [r3, #0]
			break;
 8002cca:	e006      	b.n	8002cda <ESP01DOConnection+0x3de>
		}
		esp01TimeoutTask = 0;
 8002ccc:	4b0f      	ldr	r3, [pc, #60]	@ (8002d0c <ESP01DOConnection+0x410>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	601a      	str	r2, [r3, #0]
		break;
 8002cd2:	e002      	b.n	8002cda <ESP01DOConnection+0x3de>
			break;
 8002cd4:	bf00      	nop
 8002cd6:	e000      	b.n	8002cda <ESP01DOConnection+0x3de>
			break;
 8002cd8:	bf00      	nop
	}
}
 8002cda:	bf00      	nop
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	200008a8 	.word	0x200008a8
 8002ce4:	08013da4 	.word	0x08013da4
 8002ce8:	20000844 	.word	0x20000844
 8002cec:	0801294c 	.word	0x0801294c
 8002cf0:	2000082e 	.word	0x2000082e
 8002cf4:	08013d94 	.word	0x08013d94
 8002cf8:	20000008 	.word	0x20000008
 8002cfc:	200008b8 	.word	0x200008b8
 8002d00:	200008d0 	.word	0x200008d0
 8002d04:	08012964 	.word	0x08012964
 8002d08:	20000830 	.word	0x20000830
 8002d0c:	20000834 	.word	0x20000834

08002d10 <ESP01SENDData>:

static void ESP01SENDData(){
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
	uint8_t value;

	if(esp01Flags.bit.WAITINGSYMBOL){
 8002d16:	4b34      	ldr	r3, [pc, #208]	@ (8002de8 <ESP01SENDData+0xd8>)
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	f003 0301 	and.w	r3, r3, #1
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d013      	beq.n	8002d4c <ESP01SENDData+0x3c>
		if(!esp01TimeoutTxSymbol){
 8002d24:	4b31      	ldr	r3, [pc, #196]	@ (8002dec <ESP01SENDData+0xdc>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d159      	bne.n	8002de0 <ESP01SENDData+0xd0>
			esp01irTX = esp01iwTX;
 8002d2c:	4b30      	ldr	r3, [pc, #192]	@ (8002df0 <ESP01SENDData+0xe0>)
 8002d2e:	881a      	ldrh	r2, [r3, #0]
 8002d30:	4b30      	ldr	r3, [pc, #192]	@ (8002df4 <ESP01SENDData+0xe4>)
 8002d32:	801a      	strh	r2, [r3, #0]
			esp01Flags.bit.WAITINGSYMBOL = 0;
 8002d34:	4a2c      	ldr	r2, [pc, #176]	@ (8002de8 <ESP01SENDData+0xd8>)
 8002d36:	7813      	ldrb	r3, [r2, #0]
 8002d38:	f023 0301 	bic.w	r3, r3, #1
 8002d3c:	7013      	strb	r3, [r2, #0]
			esp01ATSate = ESP01ATAT;
 8002d3e:	4b2e      	ldr	r3, [pc, #184]	@ (8002df8 <ESP01SENDData+0xe8>)
 8002d40:	2201      	movs	r2, #1
 8002d42:	701a      	strb	r2, [r3, #0]
			esp01TimeoutTask = 10;
 8002d44:	4b2d      	ldr	r3, [pc, #180]	@ (8002dfc <ESP01SENDData+0xec>)
 8002d46:	220a      	movs	r2, #10
 8002d48:	601a      	str	r2, [r3, #0]
		}
		return;
 8002d4a:	e049      	b.n	8002de0 <ESP01SENDData+0xd0>
	}
	if(esp01irTX != esp01iwTX){
 8002d4c:	4b29      	ldr	r3, [pc, #164]	@ (8002df4 <ESP01SENDData+0xe4>)
 8002d4e:	881a      	ldrh	r2, [r3, #0]
 8002d50:	4b27      	ldr	r3, [pc, #156]	@ (8002df0 <ESP01SENDData+0xe0>)
 8002d52:	881b      	ldrh	r3, [r3, #0]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d044      	beq.n	8002de2 <ESP01SENDData+0xd2>
		value = esp01TXATBuf[esp01irTX];
 8002d58:	4b26      	ldr	r3, [pc, #152]	@ (8002df4 <ESP01SENDData+0xe4>)
 8002d5a:	881b      	ldrh	r3, [r3, #0]
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	4b28      	ldr	r3, [pc, #160]	@ (8002e00 <ESP01SENDData+0xf0>)
 8002d60:	5c9b      	ldrb	r3, [r3, r2]
 8002d62:	71fb      	strb	r3, [r7, #7]
		if(esp01Flags.bit.TXCIPSEND){
 8002d64:	4b20      	ldr	r3, [pc, #128]	@ (8002de8 <ESP01SENDData+0xd8>)
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	f003 0304 	and.w	r3, r3, #4
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d004      	beq.n	8002d7c <ESP01SENDData+0x6c>
			if(value == '>')
 8002d72:	79fb      	ldrb	r3, [r7, #7]
 8002d74:	2b3e      	cmp	r3, #62	@ 0x3e
 8002d76:	d101      	bne.n	8002d7c <ESP01SENDData+0x6c>
				value = '\n';
 8002d78:	230a      	movs	r3, #10
 8002d7a:	71fb      	strb	r3, [r7, #7]
		}
		if(esp01Handle.WriteUSARTByte(value)){
 8002d7c:	4b21      	ldr	r3, [pc, #132]	@ (8002e04 <ESP01SENDData+0xf4>)
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	79fa      	ldrb	r2, [r7, #7]
 8002d82:	4610      	mov	r0, r2
 8002d84:	4798      	blx	r3
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d02a      	beq.n	8002de2 <ESP01SENDData+0xd2>
			if(esp01Flags.bit.TXCIPSEND){
 8002d8c:	4b16      	ldr	r3, [pc, #88]	@ (8002de8 <ESP01SENDData+0xd8>)
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	f003 0304 	and.w	r3, r3, #4
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d013      	beq.n	8002dc2 <ESP01SENDData+0xb2>
				if(esp01TXATBuf[esp01irTX] == '>'){
 8002d9a:	4b16      	ldr	r3, [pc, #88]	@ (8002df4 <ESP01SENDData+0xe4>)
 8002d9c:	881b      	ldrh	r3, [r3, #0]
 8002d9e:	461a      	mov	r2, r3
 8002da0:	4b17      	ldr	r3, [pc, #92]	@ (8002e00 <ESP01SENDData+0xf0>)
 8002da2:	5c9b      	ldrb	r3, [r3, r2]
 8002da4:	2b3e      	cmp	r3, #62	@ 0x3e
 8002da6:	d10c      	bne.n	8002dc2 <ESP01SENDData+0xb2>
					esp01Flags.bit.TXCIPSEND = 0;
 8002da8:	4a0f      	ldr	r2, [pc, #60]	@ (8002de8 <ESP01SENDData+0xd8>)
 8002daa:	7813      	ldrb	r3, [r2, #0]
 8002dac:	f023 0304 	bic.w	r3, r3, #4
 8002db0:	7013      	strb	r3, [r2, #0]
					esp01Flags.bit.WAITINGSYMBOL = 1;
 8002db2:	4a0d      	ldr	r2, [pc, #52]	@ (8002de8 <ESP01SENDData+0xd8>)
 8002db4:	7813      	ldrb	r3, [r2, #0]
 8002db6:	f043 0301 	orr.w	r3, r3, #1
 8002dba:	7013      	strb	r3, [r2, #0]
					esp01TimeoutTxSymbol = 5;
 8002dbc:	4b0b      	ldr	r3, [pc, #44]	@ (8002dec <ESP01SENDData+0xdc>)
 8002dbe:	2205      	movs	r2, #5
 8002dc0:	601a      	str	r2, [r3, #0]
				}
			}
			esp01irTX++;
 8002dc2:	4b0c      	ldr	r3, [pc, #48]	@ (8002df4 <ESP01SENDData+0xe4>)
 8002dc4:	881b      	ldrh	r3, [r3, #0]
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	b29a      	uxth	r2, r3
 8002dca:	4b0a      	ldr	r3, [pc, #40]	@ (8002df4 <ESP01SENDData+0xe4>)
 8002dcc:	801a      	strh	r2, [r3, #0]
			if(esp01irTX == ESP01TXBUFAT)
 8002dce:	4b09      	ldr	r3, [pc, #36]	@ (8002df4 <ESP01SENDData+0xe4>)
 8002dd0:	881b      	ldrh	r3, [r3, #0]
 8002dd2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002dd6:	d104      	bne.n	8002de2 <ESP01SENDData+0xd2>
				esp01irTX = 0;
 8002dd8:	4b06      	ldr	r3, [pc, #24]	@ (8002df4 <ESP01SENDData+0xe4>)
 8002dda:	2200      	movs	r2, #0
 8002ddc:	801a      	strh	r2, [r3, #0]
 8002dde:	e000      	b.n	8002de2 <ESP01SENDData+0xd2>
		return;
 8002de0:	bf00      	nop
		}
	}
}
 8002de2:	3708      	adds	r7, #8
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	20000830 	.word	0x20000830
 8002dec:	2000083c 	.word	0x2000083c
 8002df0:	20000a62 	.word	0x20000a62
 8002df4:	20000a60 	.word	0x20000a60
 8002df8:	2000082e 	.word	0x2000082e
 8002dfc:	20000834 	.word	0x20000834
 8002e00:	2000095c 	.word	0x2000095c
 8002e04:	20000a68 	.word	0x20000a68

08002e08 <ESP01StrToBufTX>:

static void ESP01StrToBufTX(const char *str){
 8002e08:	b480      	push	{r7}
 8002e0a:	b085      	sub	sp, #20
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
	for(int i=0; str[i]; i++){
 8002e10:	2300      	movs	r3, #0
 8002e12:	60fb      	str	r3, [r7, #12]
 8002e14:	e017      	b.n	8002e46 <ESP01StrToBufTX+0x3e>
		esp01TXATBuf[esp01iwTX++] = str[i];
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	441a      	add	r2, r3
 8002e1c:	4b10      	ldr	r3, [pc, #64]	@ (8002e60 <ESP01StrToBufTX+0x58>)
 8002e1e:	881b      	ldrh	r3, [r3, #0]
 8002e20:	1c59      	adds	r1, r3, #1
 8002e22:	b288      	uxth	r0, r1
 8002e24:	490e      	ldr	r1, [pc, #56]	@ (8002e60 <ESP01StrToBufTX+0x58>)
 8002e26:	8008      	strh	r0, [r1, #0]
 8002e28:	4619      	mov	r1, r3
 8002e2a:	7812      	ldrb	r2, [r2, #0]
 8002e2c:	4b0d      	ldr	r3, [pc, #52]	@ (8002e64 <ESP01StrToBufTX+0x5c>)
 8002e2e:	545a      	strb	r2, [r3, r1]
		if(esp01iwTX == ESP01TXBUFAT)
 8002e30:	4b0b      	ldr	r3, [pc, #44]	@ (8002e60 <ESP01StrToBufTX+0x58>)
 8002e32:	881b      	ldrh	r3, [r3, #0]
 8002e34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e38:	d102      	bne.n	8002e40 <ESP01StrToBufTX+0x38>
			esp01iwTX = 0;
 8002e3a:	4b09      	ldr	r3, [pc, #36]	@ (8002e60 <ESP01StrToBufTX+0x58>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	801a      	strh	r2, [r3, #0]
	for(int i=0; str[i]; i++){
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	3301      	adds	r3, #1
 8002e44:	60fb      	str	r3, [r7, #12]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	4413      	add	r3, r2
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d1e1      	bne.n	8002e16 <ESP01StrToBufTX+0xe>
	}
}
 8002e52:	bf00      	nop
 8002e54:	bf00      	nop
 8002e56:	3714      	adds	r7, #20
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr
 8002e60:	20000a62 	.word	0x20000a62
 8002e64:	2000095c 	.word	0x2000095c

08002e68 <ESP01ByteToBufTX>:

static void ESP01ByteToBufTX(uint8_t value){
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	4603      	mov	r3, r0
 8002e70:	71fb      	strb	r3, [r7, #7]
	esp01TXATBuf[esp01iwTX++] = value;
 8002e72:	4b0c      	ldr	r3, [pc, #48]	@ (8002ea4 <ESP01ByteToBufTX+0x3c>)
 8002e74:	881b      	ldrh	r3, [r3, #0]
 8002e76:	1c5a      	adds	r2, r3, #1
 8002e78:	b291      	uxth	r1, r2
 8002e7a:	4a0a      	ldr	r2, [pc, #40]	@ (8002ea4 <ESP01ByteToBufTX+0x3c>)
 8002e7c:	8011      	strh	r1, [r2, #0]
 8002e7e:	4619      	mov	r1, r3
 8002e80:	4a09      	ldr	r2, [pc, #36]	@ (8002ea8 <ESP01ByteToBufTX+0x40>)
 8002e82:	79fb      	ldrb	r3, [r7, #7]
 8002e84:	5453      	strb	r3, [r2, r1]
	if(esp01iwTX == ESP01TXBUFAT)
 8002e86:	4b07      	ldr	r3, [pc, #28]	@ (8002ea4 <ESP01ByteToBufTX+0x3c>)
 8002e88:	881b      	ldrh	r3, [r3, #0]
 8002e8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e8e:	d102      	bne.n	8002e96 <ESP01ByteToBufTX+0x2e>
		esp01iwTX = 0;
 8002e90:	4b04      	ldr	r3, [pc, #16]	@ (8002ea4 <ESP01ByteToBufTX+0x3c>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	801a      	strh	r2, [r3, #0]
}
 8002e96:	bf00      	nop
 8002e98:	370c      	adds	r7, #12
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr
 8002ea2:	bf00      	nop
 8002ea4:	20000a62 	.word	0x20000a62
 8002ea8:	2000095c 	.word	0x2000095c

08002eac <OLED_Print_Data_Task>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void OLED_Print_Data_Task(){
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af02      	add	r7, sp, #8
	uint8_t auxPos = 0;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	717b      	strb	r3, [r7, #5]
	if(Display.isInit){
 8002eb6:	4ba3      	ldr	r3, [pc, #652]	@ (8003144 <OLED_Print_Data_Task+0x298>)
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	f000 812b 	beq.w	8003116 <OLED_Print_Data_Task+0x26a>
		switch(Display.state){
 8002ec0:	4ba0      	ldr	r3, [pc, #640]	@ (8003144 <OLED_Print_Data_Task+0x298>)
 8002ec2:	f893 3401 	ldrb.w	r3, [r3, #1025]	@ 0x401
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d023      	beq.n	8002f12 <OLED_Print_Data_Task+0x66>
 8002eca:	2b02      	cmp	r3, #2
 8002ecc:	f300 8123 	bgt.w	8003116 <OLED_Print_Data_Task+0x26a>
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d001      	beq.n	8002ed8 <OLED_Print_Data_Task+0x2c>
 8002ed4:	2b01      	cmp	r3, #1
				Display.state = INPUTS;
			}
			break;
		case MENU:

			break;
 8002ed6:	e11e      	b.n	8003116 <OLED_Print_Data_Task+0x26a>
			if(HAL_GetTick() - Display.timer > 2000){
 8002ed8:	f002 f896 	bl	8005008 <HAL_GetTick>
 8002edc:	4602      	mov	r2, r0
 8002ede:	4b99      	ldr	r3, [pc, #612]	@ (8003144 <OLED_Print_Data_Task+0x298>)
 8002ee0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8002eea:	f240 8111 	bls.w	8003110 <OLED_Print_Data_Task+0x264>
				Display_Fill(SSD1306_COLOR_BLACK);
 8002eee:	2000      	movs	r0, #0
 8002ef0:	f7fe f98c 	bl	800120c <Display_Fill>
				Display_DrawBitmap(0, 0, status_screen, 128, 64, SSD1306_COLOR_WHITE);
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	9301      	str	r3, [sp, #4]
 8002ef8:	2340      	movs	r3, #64	@ 0x40
 8002efa:	9300      	str	r3, [sp, #0]
 8002efc:	2380      	movs	r3, #128	@ 0x80
 8002efe:	4a92      	ldr	r2, [pc, #584]	@ (8003148 <OLED_Print_Data_Task+0x29c>)
 8002f00:	2100      	movs	r1, #0
 8002f02:	2000      	movs	r0, #0
 8002f04:	f7fe fa06 	bl	8001314 <Display_DrawBitmap>
				Display.state = INPUTS;
 8002f08:	4b8e      	ldr	r3, [pc, #568]	@ (8003144 <OLED_Print_Data_Task+0x298>)
 8002f0a:	2202      	movs	r2, #2
 8002f0c:	f883 2401 	strb.w	r2, [r3, #1025]	@ 0x401
			break;
 8002f10:	e0fe      	b.n	8003110 <OLED_Print_Data_Task+0x264>
		case INPUTS:
			Display_DrawBitmap(2, 17, ADC_Blackout, 37, 44, SSD1306_COLOR_BLACK);
 8002f12:	2300      	movs	r3, #0
 8002f14:	9301      	str	r3, [sp, #4]
 8002f16:	232c      	movs	r3, #44	@ 0x2c
 8002f18:	9300      	str	r3, [sp, #0]
 8002f1a:	2325      	movs	r3, #37	@ 0x25
 8002f1c:	4a8b      	ldr	r2, [pc, #556]	@ (800314c <OLED_Print_Data_Task+0x2a0>)
 8002f1e:	2111      	movs	r1, #17
 8002f20:	2002      	movs	r0, #2
 8002f22:	f7fe f9f7 	bl	8001314 <Display_DrawBitmap>
			for(uint8_t i = 0; i < 8; i++){
 8002f26:	2300      	movs	r3, #0
 8002f28:	71fb      	strb	r3, [r7, #7]
 8002f2a:	e03f      	b.n	8002fac <OLED_Print_Data_Task+0x100>
				for(uint8_t j = 0; j < 45; j++){
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	71bb      	strb	r3, [r7, #6]
 8002f30:	e036      	b.n	8002fa0 <OLED_Print_Data_Task+0xf4>
					if(Analog.value[i] <= ADC_to_Index[j]){
 8002f32:	79fb      	ldrb	r3, [r7, #7]
 8002f34:	4a86      	ldr	r2, [pc, #536]	@ (8003150 <OLED_Print_Data_Task+0x2a4>)
 8002f36:	3308      	adds	r3, #8
 8002f38:	005b      	lsls	r3, r3, #1
 8002f3a:	4413      	add	r3, r2
 8002f3c:	885a      	ldrh	r2, [r3, #2]
 8002f3e:	79bb      	ldrb	r3, [r7, #6]
 8002f40:	4984      	ldr	r1, [pc, #528]	@ (8003154 <OLED_Print_Data_Task+0x2a8>)
 8002f42:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d827      	bhi.n	8002f9a <OLED_Print_Data_Task+0xee>
						auxPos = 2 + i * 3;
 8002f4a:	79fb      	ldrb	r3, [r7, #7]
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	0052      	lsls	r2, r2, #1
 8002f50:	4413      	add	r3, r2
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	3302      	adds	r3, #2
 8002f56:	717b      	strb	r3, [r7, #5]
						Display_DrawLine(auxPos, 61,  auxPos, Index_to_Bar[j], SSD1306_COLOR_WHITE);
 8002f58:	797b      	ldrb	r3, [r7, #5]
 8002f5a:	b298      	uxth	r0, r3
 8002f5c:	797b      	ldrb	r3, [r7, #5]
 8002f5e:	b29a      	uxth	r2, r3
 8002f60:	79bb      	ldrb	r3, [r7, #6]
 8002f62:	497d      	ldr	r1, [pc, #500]	@ (8003158 <OLED_Print_Data_Task+0x2ac>)
 8002f64:	5ccb      	ldrb	r3, [r1, r3]
 8002f66:	4619      	mov	r1, r3
 8002f68:	2301      	movs	r3, #1
 8002f6a:	9300      	str	r3, [sp, #0]
 8002f6c:	460b      	mov	r3, r1
 8002f6e:	213d      	movs	r1, #61	@ 0x3d
 8002f70:	f7fe fada 	bl	8001528 <Display_DrawLine>
						Display_DrawLine(auxPos+1, 61,  auxPos+1, Index_to_Bar[j], SSD1306_COLOR_WHITE);
 8002f74:	797b      	ldrb	r3, [r7, #5]
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	3301      	adds	r3, #1
 8002f7a:	b298      	uxth	r0, r3
 8002f7c:	797b      	ldrb	r3, [r7, #5]
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	3301      	adds	r3, #1
 8002f82:	b29a      	uxth	r2, r3
 8002f84:	79bb      	ldrb	r3, [r7, #6]
 8002f86:	4974      	ldr	r1, [pc, #464]	@ (8003158 <OLED_Print_Data_Task+0x2ac>)
 8002f88:	5ccb      	ldrb	r3, [r1, r3]
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	9300      	str	r3, [sp, #0]
 8002f90:	460b      	mov	r3, r1
 8002f92:	213d      	movs	r1, #61	@ 0x3d
 8002f94:	f7fe fac8 	bl	8001528 <Display_DrawLine>
						break;
 8002f98:	e005      	b.n	8002fa6 <OLED_Print_Data_Task+0xfa>
				for(uint8_t j = 0; j < 45; j++){
 8002f9a:	79bb      	ldrb	r3, [r7, #6]
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	71bb      	strb	r3, [r7, #6]
 8002fa0:	79bb      	ldrb	r3, [r7, #6]
 8002fa2:	2b2c      	cmp	r3, #44	@ 0x2c
 8002fa4:	d9c5      	bls.n	8002f32 <OLED_Print_Data_Task+0x86>
			for(uint8_t i = 0; i < 8; i++){
 8002fa6:	79fb      	ldrb	r3, [r7, #7]
 8002fa8:	3301      	adds	r3, #1
 8002faa:	71fb      	strb	r3, [r7, #7]
 8002fac:	79fb      	ldrb	r3, [r7, #7]
 8002fae:	2b07      	cmp	r3, #7
 8002fb0:	d9bc      	bls.n	8002f2c <OLED_Print_Data_Task+0x80>
					}
				}
			}

			if(MPU6050.isInit){
 8002fb2:	4b6a      	ldr	r3, [pc, #424]	@ (800315c <OLED_Print_Data_Task+0x2b0>)
 8002fb4:	f893 30c2 	ldrb.w	r3, [r3, #194]	@ 0xc2
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	f000 80ab 	beq.w	8003114 <OLED_Print_Data_Task+0x268>
				MPU6050.Acc.x = (MPU6050.Acc.x >> 14) * 9.8f;
 8002fbe:	4b67      	ldr	r3, [pc, #412]	@ (800315c <OLED_Print_Data_Task+0x2b0>)
 8002fc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fc4:	139b      	asrs	r3, r3, #14
 8002fc6:	b21b      	sxth	r3, r3
 8002fc8:	ee07 3a90 	vmov	s15, r3
 8002fcc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002fd0:	ed9f 7a63 	vldr	s14, [pc, #396]	@ 8003160 <OLED_Print_Data_Task+0x2b4>
 8002fd4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002fd8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002fdc:	ee17 3a90 	vmov	r3, s15
 8002fe0:	b21a      	sxth	r2, r3
 8002fe2:	4b5e      	ldr	r3, [pc, #376]	@ (800315c <OLED_Print_Data_Task+0x2b0>)
 8002fe4:	801a      	strh	r2, [r3, #0]
				MPU6050.Acc.y = (MPU6050.Acc.y >> 14) * 9.8f;
 8002fe6:	4b5d      	ldr	r3, [pc, #372]	@ (800315c <OLED_Print_Data_Task+0x2b0>)
 8002fe8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002fec:	139b      	asrs	r3, r3, #14
 8002fee:	b21b      	sxth	r3, r3
 8002ff0:	ee07 3a90 	vmov	s15, r3
 8002ff4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ff8:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8003160 <OLED_Print_Data_Task+0x2b4>
 8002ffc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003000:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003004:	ee17 3a90 	vmov	r3, s15
 8003008:	b21a      	sxth	r2, r3
 800300a:	4b54      	ldr	r3, [pc, #336]	@ (800315c <OLED_Print_Data_Task+0x2b0>)
 800300c:	805a      	strh	r2, [r3, #2]
				MPU6050.Acc.z = (MPU6050.Acc.z >> 14) * 9.8f;
 800300e:	4b53      	ldr	r3, [pc, #332]	@ (800315c <OLED_Print_Data_Task+0x2b0>)
 8003010:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003014:	139b      	asrs	r3, r3, #14
 8003016:	b21b      	sxth	r3, r3
 8003018:	ee07 3a90 	vmov	s15, r3
 800301c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003020:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 8003160 <OLED_Print_Data_Task+0x2b4>
 8003024:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003028:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800302c:	ee17 3a90 	vmov	r3, s15
 8003030:	b21a      	sxth	r2, r3
 8003032:	4b4a      	ldr	r3, [pc, #296]	@ (800315c <OLED_Print_Data_Task+0x2b0>)
 8003034:	809a      	strh	r2, [r3, #4]
				sprintf((char*)Display.auxString, "Ax:%d", MPU6050.Acc.x);
 8003036:	4b49      	ldr	r3, [pc, #292]	@ (800315c <OLED_Print_Data_Task+0x2b0>)
 8003038:	f9b3 3000 	ldrsh.w	r3, [r3]
 800303c:	461a      	mov	r2, r3
 800303e:	4949      	ldr	r1, [pc, #292]	@ (8003164 <OLED_Print_Data_Task+0x2b8>)
 8003040:	4849      	ldr	r0, [pc, #292]	@ (8003168 <OLED_Print_Data_Task+0x2bc>)
 8003042:	f00e ff41 	bl	8011ec8 <siprintf>
				Display_SetCursor(25, 17);
 8003046:	2111      	movs	r1, #17
 8003048:	2019      	movs	r0, #25
 800304a:	f7fe f8c7 	bl	80011dc <Display_SetCursor>
				Display_WriteString((char*)Display.auxString, Font_7x10, SSD1306_COLOR_WHITE);
 800304e:	4a47      	ldr	r2, [pc, #284]	@ (800316c <OLED_Print_Data_Task+0x2c0>)
 8003050:	2301      	movs	r3, #1
 8003052:	ca06      	ldmia	r2, {r1, r2}
 8003054:	4844      	ldr	r0, [pc, #272]	@ (8003168 <OLED_Print_Data_Task+0x2bc>)
 8003056:	f7fe fa41 	bl	80014dc <Display_WriteString>
				sprintf((char*)Display.auxString, "Ay:%d", MPU6050.Acc.y);
 800305a:	4b40      	ldr	r3, [pc, #256]	@ (800315c <OLED_Print_Data_Task+0x2b0>)
 800305c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003060:	461a      	mov	r2, r3
 8003062:	4943      	ldr	r1, [pc, #268]	@ (8003170 <OLED_Print_Data_Task+0x2c4>)
 8003064:	4840      	ldr	r0, [pc, #256]	@ (8003168 <OLED_Print_Data_Task+0x2bc>)
 8003066:	f00e ff2f 	bl	8011ec8 <siprintf>
				Display_SetCursor(25, 34);
 800306a:	2122      	movs	r1, #34	@ 0x22
 800306c:	2019      	movs	r0, #25
 800306e:	f7fe f8b5 	bl	80011dc <Display_SetCursor>
				Display_WriteString((char*)Display.auxString, Font_7x10, SSD1306_COLOR_WHITE);
 8003072:	4a3e      	ldr	r2, [pc, #248]	@ (800316c <OLED_Print_Data_Task+0x2c0>)
 8003074:	2301      	movs	r3, #1
 8003076:	ca06      	ldmia	r2, {r1, r2}
 8003078:	483b      	ldr	r0, [pc, #236]	@ (8003168 <OLED_Print_Data_Task+0x2bc>)
 800307a:	f7fe fa2f 	bl	80014dc <Display_WriteString>
				sprintf((char*)Display.auxString, "Az:%d", MPU6050.Acc.z);
 800307e:	4b37      	ldr	r3, [pc, #220]	@ (800315c <OLED_Print_Data_Task+0x2b0>)
 8003080:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003084:	461a      	mov	r2, r3
 8003086:	493b      	ldr	r1, [pc, #236]	@ (8003174 <OLED_Print_Data_Task+0x2c8>)
 8003088:	4837      	ldr	r0, [pc, #220]	@ (8003168 <OLED_Print_Data_Task+0x2bc>)
 800308a:	f00e ff1d 	bl	8011ec8 <siprintf>
				Display_SetCursor(25, 51);
 800308e:	2133      	movs	r1, #51	@ 0x33
 8003090:	2019      	movs	r0, #25
 8003092:	f7fe f8a3 	bl	80011dc <Display_SetCursor>
				Display_WriteString((char*)Display.auxString, Font_7x10, SSD1306_COLOR_WHITE);
 8003096:	4a35      	ldr	r2, [pc, #212]	@ (800316c <OLED_Print_Data_Task+0x2c0>)
 8003098:	2301      	movs	r3, #1
 800309a:	ca06      	ldmia	r2, {r1, r2}
 800309c:	4832      	ldr	r0, [pc, #200]	@ (8003168 <OLED_Print_Data_Task+0x2bc>)
 800309e:	f7fe fa1d 	bl	80014dc <Display_WriteString>
				sprintf((char*)Display.auxString, "Gx:%d", MPU6050.Gyro.x);
 80030a2:	4b2e      	ldr	r3, [pc, #184]	@ (800315c <OLED_Print_Data_Task+0x2b0>)
 80030a4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80030a8:	461a      	mov	r2, r3
 80030aa:	4933      	ldr	r1, [pc, #204]	@ (8003178 <OLED_Print_Data_Task+0x2cc>)
 80030ac:	482e      	ldr	r0, [pc, #184]	@ (8003168 <OLED_Print_Data_Task+0x2bc>)
 80030ae:	f00e ff0b 	bl	8011ec8 <siprintf>
				Display_SetCursor(73, 17);
 80030b2:	2111      	movs	r1, #17
 80030b4:	2049      	movs	r0, #73	@ 0x49
 80030b6:	f7fe f891 	bl	80011dc <Display_SetCursor>
				Display_WriteString((char*)Display.auxString, Font_7x10, SSD1306_COLOR_WHITE);
 80030ba:	4a2c      	ldr	r2, [pc, #176]	@ (800316c <OLED_Print_Data_Task+0x2c0>)
 80030bc:	2301      	movs	r3, #1
 80030be:	ca06      	ldmia	r2, {r1, r2}
 80030c0:	4829      	ldr	r0, [pc, #164]	@ (8003168 <OLED_Print_Data_Task+0x2bc>)
 80030c2:	f7fe fa0b 	bl	80014dc <Display_WriteString>
				sprintf((char*)Display.auxString, "Gy:%d", MPU6050.Gyro.y);
 80030c6:	4b25      	ldr	r3, [pc, #148]	@ (800315c <OLED_Print_Data_Task+0x2b0>)
 80030c8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80030cc:	461a      	mov	r2, r3
 80030ce:	492b      	ldr	r1, [pc, #172]	@ (800317c <OLED_Print_Data_Task+0x2d0>)
 80030d0:	4825      	ldr	r0, [pc, #148]	@ (8003168 <OLED_Print_Data_Task+0x2bc>)
 80030d2:	f00e fef9 	bl	8011ec8 <siprintf>
				Display_SetCursor(73, 34);
 80030d6:	2122      	movs	r1, #34	@ 0x22
 80030d8:	2049      	movs	r0, #73	@ 0x49
 80030da:	f7fe f87f 	bl	80011dc <Display_SetCursor>
				Display_WriteString((char*)Display.auxString, Font_7x10, SSD1306_COLOR_WHITE);
 80030de:	4a23      	ldr	r2, [pc, #140]	@ (800316c <OLED_Print_Data_Task+0x2c0>)
 80030e0:	2301      	movs	r3, #1
 80030e2:	ca06      	ldmia	r2, {r1, r2}
 80030e4:	4820      	ldr	r0, [pc, #128]	@ (8003168 <OLED_Print_Data_Task+0x2bc>)
 80030e6:	f7fe f9f9 	bl	80014dc <Display_WriteString>
				sprintf((char*)Display.auxString, "Gz:%d", MPU6050.Gyro.z);
 80030ea:	4b1c      	ldr	r3, [pc, #112]	@ (800315c <OLED_Print_Data_Task+0x2b0>)
 80030ec:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80030f0:	461a      	mov	r2, r3
 80030f2:	4923      	ldr	r1, [pc, #140]	@ (8003180 <OLED_Print_Data_Task+0x2d4>)
 80030f4:	481c      	ldr	r0, [pc, #112]	@ (8003168 <OLED_Print_Data_Task+0x2bc>)
 80030f6:	f00e fee7 	bl	8011ec8 <siprintf>
				Display_SetCursor(73, 51);
 80030fa:	2133      	movs	r1, #51	@ 0x33
 80030fc:	2049      	movs	r0, #73	@ 0x49
 80030fe:	f7fe f86d 	bl	80011dc <Display_SetCursor>
				Display_WriteString((char*)Display.auxString, Font_7x10, SSD1306_COLOR_WHITE);
 8003102:	4a1a      	ldr	r2, [pc, #104]	@ (800316c <OLED_Print_Data_Task+0x2c0>)
 8003104:	2301      	movs	r3, #1
 8003106:	ca06      	ldmia	r2, {r1, r2}
 8003108:	4817      	ldr	r0, [pc, #92]	@ (8003168 <OLED_Print_Data_Task+0x2bc>)
 800310a:	f7fe f9e7 	bl	80014dc <Display_WriteString>
			}

			break;
 800310e:	e001      	b.n	8003114 <OLED_Print_Data_Task+0x268>
			break;
 8003110:	bf00      	nop
 8003112:	e000      	b.n	8003116 <OLED_Print_Data_Task+0x26a>
			break;
 8003114:	bf00      	nop
		}
	}

	is30s--;
 8003116:	4b1b      	ldr	r3, [pc, #108]	@ (8003184 <OLED_Print_Data_Task+0x2d8>)
 8003118:	881b      	ldrh	r3, [r3, #0]
 800311a:	3b01      	subs	r3, #1
 800311c:	b29a      	uxth	r2, r3
 800311e:	4b19      	ldr	r3, [pc, #100]	@ (8003184 <OLED_Print_Data_Task+0x2d8>)
 8003120:	801a      	strh	r2, [r3, #0]
	if(!is30s){
 8003122:	4b18      	ldr	r3, [pc, #96]	@ (8003184 <OLED_Print_Data_Task+0x2d8>)
 8003124:	881b      	ldrh	r3, [r3, #0]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d105      	bne.n	8003136 <OLED_Print_Data_Task+0x28a>
		is30s = 300;
 800312a:	4b16      	ldr	r3, [pc, #88]	@ (8003184 <OLED_Print_Data_Task+0x2d8>)
 800312c:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003130:	801a      	strh	r2, [r3, #0]
		BateryLevel_Set();
 8003132:	f000 f829 	bl	8003188 <BateryLevel_Set>
	}

	Display_I2C_Refresh_Ready(TRUE);
 8003136:	2001      	movs	r0, #1
 8003138:	f7fe f840 	bl	80011bc <Display_I2C_Refresh_Ready>
}
 800313c:	bf00      	nop
 800313e:	3708      	adds	r7, #8
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}
 8003144:	20000e24 	.word	0x20000e24
 8003148:	080131e8 	.word	0x080131e8
 800314c:	08012d0c 	.word	0x08012d0c
 8003150:	20001238 	.word	0x20001238
 8003154:	08012cb0 	.word	0x08012cb0
 8003158:	08012c80 	.word	0x08012c80
 800315c:	20000d60 	.word	0x20000d60
 8003160:	411ccccd 	.word	0x411ccccd
 8003164:	0801297c 	.word	0x0801297c
 8003168:	2000122c 	.word	0x2000122c
 800316c:	20000000 	.word	0x20000000
 8003170:	08012984 	.word	0x08012984
 8003174:	0801298c 	.word	0x0801298c
 8003178:	08012994 	.word	0x08012994
 800317c:	0801299c 	.word	0x0801299c
 8003180:	080129a4 	.word	0x080129a4
 8003184:	20000010 	.word	0x20000010

08003188 <BateryLevel_Set>:

void BateryLevel_Set(){
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af02      	add	r7, sp, #8
	Display_DrawFilledRectangle(3, 4, 6, 9, SSD1306_COLOR_BLACK);
 800318e:	2300      	movs	r3, #0
 8003190:	9300      	str	r3, [sp, #0]
 8003192:	2309      	movs	r3, #9
 8003194:	2206      	movs	r2, #6
 8003196:	2104      	movs	r1, #4
 8003198:	2003      	movs	r0, #3
 800319a:	f7fe fa73 	bl	8001684 <Display_DrawFilledRectangle>
	if(Analog.value[8] >= 3900){
 800319e:	4b1f      	ldr	r3, [pc, #124]	@ (800321c <BateryLevel_Set+0x94>)
 80031a0:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80031a2:	f640 723b 	movw	r2, #3899	@ 0xf3b
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d908      	bls.n	80031bc <BateryLevel_Set+0x34>
		Display_DrawFilledRectangle(3, 4, 6, 9, SSD1306_COLOR_WHITE);
 80031aa:	2301      	movs	r3, #1
 80031ac:	9300      	str	r3, [sp, #0]
 80031ae:	2309      	movs	r3, #9
 80031b0:	2206      	movs	r2, #6
 80031b2:	2104      	movs	r1, #4
 80031b4:	2003      	movs	r0, #3
 80031b6:	f7fe fa65 	bl	8001684 <Display_DrawFilledRectangle>
	}else if(Analog.value[8] >= 2047){
		Display_DrawFilledRectangle(3, 8, 6, 5, SSD1306_COLOR_WHITE);
	}else if(Analog.value[8] >= 1023){
		Display_DrawFilledRectangle(3, 11, 6, 2, SSD1306_COLOR_WHITE);
	}
}
 80031ba:	e02b      	b.n	8003214 <BateryLevel_Set+0x8c>
	}else if(Analog.value[8] >= 3000){
 80031bc:	4b17      	ldr	r3, [pc, #92]	@ (800321c <BateryLevel_Set+0x94>)
 80031be:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80031c0:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d908      	bls.n	80031da <BateryLevel_Set+0x52>
		Display_DrawFilledRectangle(3, 6, 6, 7, SSD1306_COLOR_WHITE);
 80031c8:	2301      	movs	r3, #1
 80031ca:	9300      	str	r3, [sp, #0]
 80031cc:	2307      	movs	r3, #7
 80031ce:	2206      	movs	r2, #6
 80031d0:	2106      	movs	r1, #6
 80031d2:	2003      	movs	r0, #3
 80031d4:	f7fe fa56 	bl	8001684 <Display_DrawFilledRectangle>
}
 80031d8:	e01c      	b.n	8003214 <BateryLevel_Set+0x8c>
	}else if(Analog.value[8] >= 2047){
 80031da:	4b10      	ldr	r3, [pc, #64]	@ (800321c <BateryLevel_Set+0x94>)
 80031dc:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80031de:	f240 72fe 	movw	r2, #2046	@ 0x7fe
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d908      	bls.n	80031f8 <BateryLevel_Set+0x70>
		Display_DrawFilledRectangle(3, 8, 6, 5, SSD1306_COLOR_WHITE);
 80031e6:	2301      	movs	r3, #1
 80031e8:	9300      	str	r3, [sp, #0]
 80031ea:	2305      	movs	r3, #5
 80031ec:	2206      	movs	r2, #6
 80031ee:	2108      	movs	r1, #8
 80031f0:	2003      	movs	r0, #3
 80031f2:	f7fe fa47 	bl	8001684 <Display_DrawFilledRectangle>
}
 80031f6:	e00d      	b.n	8003214 <BateryLevel_Set+0x8c>
	}else if(Analog.value[8] >= 1023){
 80031f8:	4b08      	ldr	r3, [pc, #32]	@ (800321c <BateryLevel_Set+0x94>)
 80031fa:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80031fc:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 8003200:	4293      	cmp	r3, r2
 8003202:	d907      	bls.n	8003214 <BateryLevel_Set+0x8c>
		Display_DrawFilledRectangle(3, 11, 6, 2, SSD1306_COLOR_WHITE);
 8003204:	2301      	movs	r3, #1
 8003206:	9300      	str	r3, [sp, #0]
 8003208:	2302      	movs	r3, #2
 800320a:	2206      	movs	r2, #6
 800320c:	210b      	movs	r1, #11
 800320e:	2003      	movs	r0, #3
 8003210:	f7fe fa38 	bl	8001684 <Display_DrawFilledRectangle>
}
 8003214:	bf00      	nop
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	20001238 	.word	0x20001238

08003220 <decodeOn_USB>:

void decodeOn_USB(s_commData *data){
 8003220:	b580      	push	{r7, lr}
 8003222:	b084      	sub	sp, #16
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
	switch(RXBUF[RXCMD]){
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	785b      	ldrb	r3, [r3, #1]
 800322c:	3302      	adds	r3, #2
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	4413      	add	r3, r2
 8003232:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8003236:	2bf1      	cmp	r3, #241	@ 0xf1
 8003238:	f000 81c9 	beq.w	80035ce <decodeOn_USB+0x3ae>
 800323c:	2bf1      	cmp	r3, #241	@ 0xf1
 800323e:	f300 81bf 	bgt.w	80035c0 <decodeOn_USB+0x3a0>
 8003242:	2bf0      	cmp	r3, #240	@ 0xf0
 8003244:	d036      	beq.n	80032b4 <decodeOn_USB+0x94>
 8003246:	2bf0      	cmp	r3, #240	@ 0xf0
 8003248:	f300 81ba 	bgt.w	80035c0 <decodeOn_USB+0x3a0>
 800324c:	2bb1      	cmp	r3, #177	@ 0xb1
 800324e:	dc2d      	bgt.n	80032ac <decodeOn_USB+0x8c>
 8003250:	2ba0      	cmp	r3, #160	@ 0xa0
 8003252:	f2c0 81b5 	blt.w	80035c0 <decodeOn_USB+0x3a0>
 8003256:	3ba0      	subs	r3, #160	@ 0xa0
 8003258:	2b11      	cmp	r3, #17
 800325a:	f200 81b1 	bhi.w	80035c0 <decodeOn_USB+0x3a0>
 800325e:	a201      	add	r2, pc, #4	@ (adr r2, 8003264 <decodeOn_USB+0x44>)
 8003260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003264:	080032cf 	.word	0x080032cf
 8003268:	08003345 	.word	0x08003345
 800326c:	0800339f 	.word	0x0800339f
 8003270:	0800342b 	.word	0x0800342b
 8003274:	080034c9 	.word	0x080034c9
 8003278:	080035c1 	.word	0x080035c1
 800327c:	080035c1 	.word	0x080035c1
 8003280:	080035c1 	.word	0x080035c1
 8003284:	080035c1 	.word	0x080035c1
 8003288:	080035c1 	.word	0x080035c1
 800328c:	080035c1 	.word	0x080035c1
 8003290:	080035c1 	.word	0x080035c1
 8003294:	080035c1 	.word	0x080035c1
 8003298:	080035c1 	.word	0x080035c1
 800329c:	080035c1 	.word	0x080035c1
 80032a0:	080035c1 	.word	0x080035c1
 80032a4:	080035c1 	.word	0x080035c1
 80032a8:	080035d3 	.word	0x080035d3
 80032ac:	2bde      	cmp	r3, #222	@ 0xde
 80032ae:	f000 8192 	beq.w	80035d6 <decodeOn_USB+0x3b6>
 80032b2:	e185      	b.n	80035c0 <decodeOn_USB+0x3a0>
	case GETALIVE:
		data->auxBuffer[0] = ACK;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	220d      	movs	r2, #13
 80032b8:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
		comm_sendCMD(data, GETALIVE, &data->auxBuffer[0], 1);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 80032c2:	2301      	movs	r3, #1
 80032c4:	21f0      	movs	r1, #240	@ 0xf0
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f7fe fcfc 	bl	8001cc4 <comm_sendCMD>
		break;
 80032cc:	e184      	b.n	80035d8 <decodeOn_USB+0x3b8>
	case FIRMWARE:
		break;
	case USERTEXT:
		break;
	case ADCSINGLE:
		if(RXBUF[RXCMD + 1] <= 8 && RXBUF[RXCMD + 1] >= 0){
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	785b      	ldrb	r3, [r3, #1]
 80032d2:	3303      	adds	r3, #3
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	4413      	add	r3, r2
 80032d8:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 80032dc:	2b08      	cmp	r3, #8
 80032de:	d82a      	bhi.n	8003336 <decodeOn_USB+0x116>
			decom.ui16[0] = Analog.value[RXBUF[RXCMD + 1]];
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	785b      	ldrb	r3, [r3, #1]
 80032e4:	3303      	adds	r3, #3
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	4413      	add	r3, r2
 80032ea:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 80032ee:	4aa8      	ldr	r2, [pc, #672]	@ (8003590 <decodeOn_USB+0x370>)
 80032f0:	3308      	adds	r3, #8
 80032f2:	005b      	lsls	r3, r3, #1
 80032f4:	4413      	add	r3, r2
 80032f6:	885a      	ldrh	r2, [r3, #2]
 80032f8:	4ba6      	ldr	r3, [pc, #664]	@ (8003594 <decodeOn_USB+0x374>)
 80032fa:	801a      	strh	r2, [r3, #0]
			data->auxBuffer[0] = RXBUF[RXCMD + 1];
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	785b      	ldrb	r3, [r3, #1]
 8003300:	3303      	adds	r3, #3
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	4413      	add	r3, r2
 8003306:	f893 2106 	ldrb.w	r2, [r3, #262]	@ 0x106
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
			data->auxBuffer[1] = decom.ui8[0];
 8003310:	4ba0      	ldr	r3, [pc, #640]	@ (8003594 <decodeOn_USB+0x374>)
 8003312:	781a      	ldrb	r2, [r3, #0]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f883 2211 	strb.w	r2, [r3, #529]	@ 0x211
			data->auxBuffer[2] = decom.ui8[1];
 800331a:	4b9e      	ldr	r3, [pc, #632]	@ (8003594 <decodeOn_USB+0x374>)
 800331c:	785a      	ldrb	r2, [r3, #1]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f883 2212 	strb.w	r2, [r3, #530]	@ 0x212
			comm_sendCMD(data, ADCSINGLE, &data->auxBuffer[0], 3);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 800332a:	2303      	movs	r3, #3
 800332c:	21a0      	movs	r1, #160	@ 0xa0
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f7fe fcc8 	bl	8001cc4 <comm_sendCMD>
		}else{
			comm_sendCMD(data, SYSWARNING, (uint8_t*)"NO ADC", 6);
		}
		break;
 8003334:	e150      	b.n	80035d8 <decodeOn_USB+0x3b8>
			comm_sendCMD(data, SYSWARNING, (uint8_t*)"NO ADC", 6);
 8003336:	2306      	movs	r3, #6
 8003338:	4a97      	ldr	r2, [pc, #604]	@ (8003598 <decodeOn_USB+0x378>)
 800333a:	21ef      	movs	r1, #239	@ 0xef
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	f7fe fcc1 	bl	8001cc4 <comm_sendCMD>
		break;
 8003342:	e149      	b.n	80035d8 <decodeOn_USB+0x3b8>
	case ADCBLOCK:
		for(uint8_t i = 0; i < ADC_NUM_SENSORS; i++){
 8003344:	2300      	movs	r3, #0
 8003346:	73fb      	strb	r3, [r7, #15]
 8003348:	e01d      	b.n	8003386 <decodeOn_USB+0x166>
			decom.ui16[0] = Analog.value[i];
 800334a:	7bfb      	ldrb	r3, [r7, #15]
 800334c:	4a90      	ldr	r2, [pc, #576]	@ (8003590 <decodeOn_USB+0x370>)
 800334e:	3308      	adds	r3, #8
 8003350:	005b      	lsls	r3, r3, #1
 8003352:	4413      	add	r3, r2
 8003354:	885a      	ldrh	r2, [r3, #2]
 8003356:	4b8f      	ldr	r3, [pc, #572]	@ (8003594 <decodeOn_USB+0x374>)
 8003358:	801a      	strh	r2, [r3, #0]
			data->auxBuffer[i*2] = decom.ui8[0];
 800335a:	7bfb      	ldrb	r3, [r7, #15]
 800335c:	005b      	lsls	r3, r3, #1
 800335e:	4a8d      	ldr	r2, [pc, #564]	@ (8003594 <decodeOn_USB+0x374>)
 8003360:	7811      	ldrb	r1, [r2, #0]
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	4413      	add	r3, r2
 8003366:	460a      	mov	r2, r1
 8003368:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
			data->auxBuffer[i*2+1] = decom.ui8[1];
 800336c:	7bfb      	ldrb	r3, [r7, #15]
 800336e:	005b      	lsls	r3, r3, #1
 8003370:	3301      	adds	r3, #1
 8003372:	4a88      	ldr	r2, [pc, #544]	@ (8003594 <decodeOn_USB+0x374>)
 8003374:	7851      	ldrb	r1, [r2, #1]
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	4413      	add	r3, r2
 800337a:	460a      	mov	r2, r1
 800337c:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
		for(uint8_t i = 0; i < ADC_NUM_SENSORS; i++){
 8003380:	7bfb      	ldrb	r3, [r7, #15]
 8003382:	3301      	adds	r3, #1
 8003384:	73fb      	strb	r3, [r7, #15]
 8003386:	7bfb      	ldrb	r3, [r7, #15]
 8003388:	2b08      	cmp	r3, #8
 800338a:	d9de      	bls.n	800334a <decodeOn_USB+0x12a>
		}
		comm_sendCMD(data, ADCBLOCK, &data->auxBuffer[0], 17);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 8003392:	2311      	movs	r3, #17
 8003394:	21a1      	movs	r1, #161	@ 0xa1
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f7fe fc94 	bl	8001cc4 <comm_sendCMD>
		break;
 800339c:	e11c      	b.n	80035d8 <decodeOn_USB+0x3b8>
	case DEBUGER:

		break;
	case SETMOTOR:
		if(RXBUF[RXCMD + 1] == MOTOR_L){
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	785b      	ldrb	r3, [r3, #1]
 80033a2:	3303      	adds	r3, #3
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	4413      	add	r3, r2
 80033a8:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d115      	bne.n	80033dc <decodeOn_USB+0x1bc>
			Motor_Set_Speed(&MotorL, RXBUF[RXCMD + 2]);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	785b      	ldrb	r3, [r3, #1]
 80033b4:	3304      	adds	r3, #4
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	4413      	add	r3, r2
 80033ba:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 80033be:	b25b      	sxtb	r3, r3
 80033c0:	4619      	mov	r1, r3
 80033c2:	4876      	ldr	r0, [pc, #472]	@ (800359c <decodeOn_USB+0x37c>)
 80033c4:	f7fe fa3a 	bl	800183c <Motor_Set_Speed>
			USB.data.auxBuffer[0] = ACK;
 80033c8:	4b75      	ldr	r3, [pc, #468]	@ (80035a0 <decodeOn_USB+0x380>)
 80033ca:	220d      	movs	r2, #13
 80033cc:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
			comm_sendCMD(&USB.data, SETMOTOR, &USB.data.auxBuffer[0], 1);
 80033d0:	2301      	movs	r3, #1
 80033d2:	4a74      	ldr	r2, [pc, #464]	@ (80035a4 <decodeOn_USB+0x384>)
 80033d4:	21a2      	movs	r1, #162	@ 0xa2
 80033d6:	4872      	ldr	r0, [pc, #456]	@ (80035a0 <decodeOn_USB+0x380>)
 80033d8:	f7fe fc74 	bl	8001cc4 <comm_sendCMD>
		}
		if(RXBUF[RXCMD + 1] == MOTOR_R){
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	785b      	ldrb	r3, [r3, #1]
 80033e0:	3303      	adds	r3, #3
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	4413      	add	r3, r2
 80033e6:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d116      	bne.n	800341c <decodeOn_USB+0x1fc>
			Motor_Set_Speed(&MotorR, RXBUF[RXCMD + 2]);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	785b      	ldrb	r3, [r3, #1]
 80033f2:	3304      	adds	r3, #4
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	4413      	add	r3, r2
 80033f8:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 80033fc:	b25b      	sxtb	r3, r3
 80033fe:	4619      	mov	r1, r3
 8003400:	4869      	ldr	r0, [pc, #420]	@ (80035a8 <decodeOn_USB+0x388>)
 8003402:	f7fe fa1b 	bl	800183c <Motor_Set_Speed>
			USB.data.auxBuffer[0] = ACK;
 8003406:	4b66      	ldr	r3, [pc, #408]	@ (80035a0 <decodeOn_USB+0x380>)
 8003408:	220d      	movs	r2, #13
 800340a:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
			comm_sendCMD(&USB.data, SETMOTOR, &USB.data.auxBuffer[0], 1);
 800340e:	2301      	movs	r3, #1
 8003410:	4a64      	ldr	r2, [pc, #400]	@ (80035a4 <decodeOn_USB+0x384>)
 8003412:	21a2      	movs	r1, #162	@ 0xa2
 8003414:	4862      	ldr	r0, [pc, #392]	@ (80035a0 <decodeOn_USB+0x380>)
 8003416:	f7fe fc55 	bl	8001cc4 <comm_sendCMD>
		}else{
			comm_sendCMD(data, SYSWARNING, (uint8_t*)"NO MOTOR", 8);
		}
		break;
 800341a:	e0dd      	b.n	80035d8 <decodeOn_USB+0x3b8>
			comm_sendCMD(data, SYSWARNING, (uint8_t*)"NO MOTOR", 8);
 800341c:	2308      	movs	r3, #8
 800341e:	4a63      	ldr	r2, [pc, #396]	@ (80035ac <decodeOn_USB+0x38c>)
 8003420:	21ef      	movs	r1, #239	@ 0xef
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f7fe fc4e 	bl	8001cc4 <comm_sendCMD>
		break;
 8003428:	e0d6      	b.n	80035d8 <decodeOn_USB+0x3b8>
	case GET_ENCODER:
		if(RXBUF[RXCMD + 1] == ENCODER_L){
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	785b      	ldrb	r3, [r3, #1]
 800342e:	3303      	adds	r3, #3
 8003430:	687a      	ldr	r2, [r7, #4]
 8003432:	4413      	add	r3, r2
 8003434:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8003438:	2b00      	cmp	r3, #0
 800343a:	d11a      	bne.n	8003472 <decodeOn_USB+0x252>
			decom.ui16[0] = EncoderL.pps;
 800343c:	4b5c      	ldr	r3, [pc, #368]	@ (80035b0 <decodeOn_USB+0x390>)
 800343e:	891a      	ldrh	r2, [r3, #8]
 8003440:	4b54      	ldr	r3, [pc, #336]	@ (8003594 <decodeOn_USB+0x374>)
 8003442:	801a      	strh	r2, [r3, #0]
			data->auxBuffer[0] = ENCODER_L;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
			data->auxBuffer[1] = decom.ui8[0];
 800344c:	4b51      	ldr	r3, [pc, #324]	@ (8003594 <decodeOn_USB+0x374>)
 800344e:	781a      	ldrb	r2, [r3, #0]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f883 2211 	strb.w	r2, [r3, #529]	@ 0x211
			data->auxBuffer[2] = decom.ui8[1];
 8003456:	4b4f      	ldr	r3, [pc, #316]	@ (8003594 <decodeOn_USB+0x374>)
 8003458:	785a      	ldrb	r2, [r3, #1]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f883 2212 	strb.w	r2, [r3, #530]	@ 0x212
			comm_sendCMD(data, GET_ENCODER, &data->auxBuffer[0], 3);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 8003466:	2303      	movs	r3, #3
 8003468:	21a3      	movs	r1, #163	@ 0xa3
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f7fe fc2a 	bl	8001cc4 <comm_sendCMD>
			data->auxBuffer[2] = decom.ui8[1];
			comm_sendCMD(data, GET_ENCODER, &data->auxBuffer[0], 3);
		}else{
			comm_sendCMD(data, SYSWARNING, (uint8_t*)"NO ENCODER", 10);
		}
		break;
 8003470:	e0b2      	b.n	80035d8 <decodeOn_USB+0x3b8>
		}else if(RXBUF[RXCMD + 1] == ENCODER_R){
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	785b      	ldrb	r3, [r3, #1]
 8003476:	3303      	adds	r3, #3
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	4413      	add	r3, r2
 800347c:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8003480:	2b01      	cmp	r3, #1
 8003482:	d11a      	bne.n	80034ba <decodeOn_USB+0x29a>
			decom.ui16[0] = EncoderR.pps;
 8003484:	4b4b      	ldr	r3, [pc, #300]	@ (80035b4 <decodeOn_USB+0x394>)
 8003486:	891a      	ldrh	r2, [r3, #8]
 8003488:	4b42      	ldr	r3, [pc, #264]	@ (8003594 <decodeOn_USB+0x374>)
 800348a:	801a      	strh	r2, [r3, #0]
			data->auxBuffer[0] = ENCODER_R;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
			data->auxBuffer[1] = decom.ui8[0];
 8003494:	4b3f      	ldr	r3, [pc, #252]	@ (8003594 <decodeOn_USB+0x374>)
 8003496:	781a      	ldrb	r2, [r3, #0]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f883 2211 	strb.w	r2, [r3, #529]	@ 0x211
			data->auxBuffer[2] = decom.ui8[1];
 800349e:	4b3d      	ldr	r3, [pc, #244]	@ (8003594 <decodeOn_USB+0x374>)
 80034a0:	785a      	ldrb	r2, [r3, #1]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f883 2212 	strb.w	r2, [r3, #530]	@ 0x212
			comm_sendCMD(data, GET_ENCODER, &data->auxBuffer[0], 3);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 80034ae:	2303      	movs	r3, #3
 80034b0:	21a3      	movs	r1, #163	@ 0xa3
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f7fe fc06 	bl	8001cc4 <comm_sendCMD>
		break;
 80034b8:	e08e      	b.n	80035d8 <decodeOn_USB+0x3b8>
			comm_sendCMD(data, SYSWARNING, (uint8_t*)"NO ENCODER", 10);
 80034ba:	230a      	movs	r3, #10
 80034bc:	4a3e      	ldr	r2, [pc, #248]	@ (80035b8 <decodeOn_USB+0x398>)
 80034be:	21ef      	movs	r1, #239	@ 0xef
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f7fe fbff 	bl	8001cc4 <comm_sendCMD>
		break;
 80034c6:	e087      	b.n	80035d8 <decodeOn_USB+0x3b8>
	case MPUBLOCK:
		decom.i16[0] = MPU6050.Acc.x;
 80034c8:	4b3c      	ldr	r3, [pc, #240]	@ (80035bc <decodeOn_USB+0x39c>)
 80034ca:	f9b3 2000 	ldrsh.w	r2, [r3]
 80034ce:	4b31      	ldr	r3, [pc, #196]	@ (8003594 <decodeOn_USB+0x374>)
 80034d0:	801a      	strh	r2, [r3, #0]
		data->auxBuffer[0] = decom.ui8[0];
 80034d2:	4b30      	ldr	r3, [pc, #192]	@ (8003594 <decodeOn_USB+0x374>)
 80034d4:	781a      	ldrb	r2, [r3, #0]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
		data->auxBuffer[1] = decom.ui8[1];
 80034dc:	4b2d      	ldr	r3, [pc, #180]	@ (8003594 <decodeOn_USB+0x374>)
 80034de:	785a      	ldrb	r2, [r3, #1]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f883 2211 	strb.w	r2, [r3, #529]	@ 0x211
		decom.i16[0] = MPU6050.Acc.y;
 80034e6:	4b35      	ldr	r3, [pc, #212]	@ (80035bc <decodeOn_USB+0x39c>)
 80034e8:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80034ec:	4b29      	ldr	r3, [pc, #164]	@ (8003594 <decodeOn_USB+0x374>)
 80034ee:	801a      	strh	r2, [r3, #0]
		data->auxBuffer[2] = decom.ui8[0];
 80034f0:	4b28      	ldr	r3, [pc, #160]	@ (8003594 <decodeOn_USB+0x374>)
 80034f2:	781a      	ldrb	r2, [r3, #0]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	f883 2212 	strb.w	r2, [r3, #530]	@ 0x212
		data->auxBuffer[3] = decom.ui8[1];
 80034fa:	4b26      	ldr	r3, [pc, #152]	@ (8003594 <decodeOn_USB+0x374>)
 80034fc:	785a      	ldrb	r2, [r3, #1]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f883 2213 	strb.w	r2, [r3, #531]	@ 0x213
		decom.i16[0] = MPU6050.Acc.z;
 8003504:	4b2d      	ldr	r3, [pc, #180]	@ (80035bc <decodeOn_USB+0x39c>)
 8003506:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800350a:	4b22      	ldr	r3, [pc, #136]	@ (8003594 <decodeOn_USB+0x374>)
 800350c:	801a      	strh	r2, [r3, #0]
		data->auxBuffer[4] = decom.ui8[0];
 800350e:	4b21      	ldr	r3, [pc, #132]	@ (8003594 <decodeOn_USB+0x374>)
 8003510:	781a      	ldrb	r2, [r3, #0]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f883 2214 	strb.w	r2, [r3, #532]	@ 0x214
		data->auxBuffer[5] = decom.ui8[1];
 8003518:	4b1e      	ldr	r3, [pc, #120]	@ (8003594 <decodeOn_USB+0x374>)
 800351a:	785a      	ldrb	r2, [r3, #1]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	f883 2215 	strb.w	r2, [r3, #533]	@ 0x215
		decom.i16[0] = MPU6050.Gyro.x;
 8003522:	4b26      	ldr	r3, [pc, #152]	@ (80035bc <decodeOn_USB+0x39c>)
 8003524:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8003528:	4b1a      	ldr	r3, [pc, #104]	@ (8003594 <decodeOn_USB+0x374>)
 800352a:	801a      	strh	r2, [r3, #0]
		data->auxBuffer[6] = decom.ui8[0];
 800352c:	4b19      	ldr	r3, [pc, #100]	@ (8003594 <decodeOn_USB+0x374>)
 800352e:	781a      	ldrb	r2, [r3, #0]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f883 2216 	strb.w	r2, [r3, #534]	@ 0x216
		data->auxBuffer[7] = decom.ui8[1];
 8003536:	4b17      	ldr	r3, [pc, #92]	@ (8003594 <decodeOn_USB+0x374>)
 8003538:	785a      	ldrb	r2, [r3, #1]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f883 2217 	strb.w	r2, [r3, #535]	@ 0x217
		decom.i16[0] = MPU6050.Gyro.y;
 8003540:	4b1e      	ldr	r3, [pc, #120]	@ (80035bc <decodeOn_USB+0x39c>)
 8003542:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8003546:	4b13      	ldr	r3, [pc, #76]	@ (8003594 <decodeOn_USB+0x374>)
 8003548:	801a      	strh	r2, [r3, #0]
		data->auxBuffer[8] = decom.ui8[0];
 800354a:	4b12      	ldr	r3, [pc, #72]	@ (8003594 <decodeOn_USB+0x374>)
 800354c:	781a      	ldrb	r2, [r3, #0]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f883 2218 	strb.w	r2, [r3, #536]	@ 0x218
		data->auxBuffer[9] = decom.ui8[1];
 8003554:	4b0f      	ldr	r3, [pc, #60]	@ (8003594 <decodeOn_USB+0x374>)
 8003556:	785a      	ldrb	r2, [r3, #1]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f883 2219 	strb.w	r2, [r3, #537]	@ 0x219
		decom.i16[0] = MPU6050.Gyro.z;
 800355e:	4b17      	ldr	r3, [pc, #92]	@ (80035bc <decodeOn_USB+0x39c>)
 8003560:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8003564:	4b0b      	ldr	r3, [pc, #44]	@ (8003594 <decodeOn_USB+0x374>)
 8003566:	801a      	strh	r2, [r3, #0]
		data->auxBuffer[10] = decom.ui8[0];
 8003568:	4b0a      	ldr	r3, [pc, #40]	@ (8003594 <decodeOn_USB+0x374>)
 800356a:	781a      	ldrb	r2, [r3, #0]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f883 221a 	strb.w	r2, [r3, #538]	@ 0x21a
		data->auxBuffer[11] = decom.ui8[1];
 8003572:	4b08      	ldr	r3, [pc, #32]	@ (8003594 <decodeOn_USB+0x374>)
 8003574:	785a      	ldrb	r2, [r3, #1]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f883 221b 	strb.w	r2, [r3, #539]	@ 0x21b
		comm_sendCMD(data, MPUBLOCK, data->auxBuffer, 12);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 8003582:	230c      	movs	r3, #12
 8003584:	21a4      	movs	r1, #164	@ 0xa4
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f7fe fb9c 	bl	8001cc4 <comm_sendCMD>
		break;
 800358c:	e024      	b.n	80035d8 <decodeOn_USB+0x3b8>
 800358e:	bf00      	nop
 8003590:	20001238 	.word	0x20001238
 8003594:	20000d10 	.word	0x20000d10
 8003598:	080129ac 	.word	0x080129ac
 800359c:	20000d18 	.word	0x20000d18
 80035a0:	2000125c 	.word	0x2000125c
 80035a4:	2000146c 	.word	0x2000146c
 80035a8:	20000d30 	.word	0x20000d30
 80035ac:	080129b4 	.word	0x080129b4
 80035b0:	20000d48 	.word	0x20000d48
 80035b4:	20000d54 	.word	0x20000d54
 80035b8:	080129c0 	.word	0x080129c0
 80035bc:	20000d60 	.word	0x20000d60
	default:
		comm_sendCMD(data, SYSWARNING, (uint8_t*)"NO CMD", 6);
 80035c0:	2306      	movs	r3, #6
 80035c2:	4a07      	ldr	r2, [pc, #28]	@ (80035e0 <decodeOn_USB+0x3c0>)
 80035c4:	21ef      	movs	r1, #239	@ 0xef
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f7fe fb7c 	bl	8001cc4 <comm_sendCMD>
		break;
 80035cc:	e004      	b.n	80035d8 <decodeOn_USB+0x3b8>
		break;
 80035ce:	bf00      	nop
 80035d0:	e002      	b.n	80035d8 <decodeOn_USB+0x3b8>
		break;
 80035d2:	bf00      	nop
 80035d4:	e000      	b.n	80035d8 <decodeOn_USB+0x3b8>
		break;
 80035d6:	bf00      	nop
	}
}
 80035d8:	bf00      	nop
 80035da:	3710      	adds	r7, #16
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	080129cc 	.word	0x080129cc

080035e4 <onKeyChangeState>:

void onKeyChangeState(e_Estados value){
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	4603      	mov	r3, r0
 80035ec:	71fb      	strb	r3, [r7, #7]

}
 80035ee:	bf00      	nop
 80035f0:	370c      	adds	r7, #12
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr
	...

080035fc <onESP01ChangeState>:

void onESP01ChangeState(_eESP01STATUS esp01State) {
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b082      	sub	sp, #8
 8003600:	af00      	add	r7, sp, #0
 8003602:	4603      	mov	r3, r0
 8003604:	71fb      	strb	r3, [r7, #7]
    switch (esp01State) {
 8003606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800360a:	3301      	adds	r3, #1
 800360c:	2b0c      	cmp	r3, #12
 800360e:	d85e      	bhi.n	80036ce <onESP01ChangeState+0xd2>
 8003610:	a201      	add	r2, pc, #4	@ (adr r2, 8003618 <onESP01ChangeState+0x1c>)
 8003612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003616:	bf00      	nop
 8003618:	0800364d 	.word	0x0800364d
 800361c:	08003657 	.word	0x08003657
 8003620:	08003661 	.word	0x08003661
 8003624:	0800366b 	.word	0x0800366b
 8003628:	08003675 	.word	0x08003675
 800362c:	0800367f 	.word	0x0800367f
 8003630:	08003689 	.word	0x08003689
 8003634:	08003693 	.word	0x08003693
 8003638:	0800369d 	.word	0x0800369d
 800363c:	080036a7 	.word	0x080036a7
 8003640:	080036b1 	.word	0x080036b1
 8003644:	080036bb 	.word	0x080036bb
 8003648:	080036c5 	.word	0x080036c5
        case ESP01_NOT_INIT:
            sprintf((char*)USB.data.auxBuffer, "ESP01: No inicializado");
 800364c:	4929      	ldr	r1, [pc, #164]	@ (80036f4 <onESP01ChangeState+0xf8>)
 800364e:	482a      	ldr	r0, [pc, #168]	@ (80036f8 <onESP01ChangeState+0xfc>)
 8003650:	f00e fc3a 	bl	8011ec8 <siprintf>
            break;
 8003654:	e040      	b.n	80036d8 <onESP01ChangeState+0xdc>
        case ESP01_WIFI_DISCONNECTED:
            sprintf((char*)USB.data.auxBuffer, "ESP01: WiFi desconectado");
 8003656:	4929      	ldr	r1, [pc, #164]	@ (80036fc <onESP01ChangeState+0x100>)
 8003658:	4827      	ldr	r0, [pc, #156]	@ (80036f8 <onESP01ChangeState+0xfc>)
 800365a:	f00e fc35 	bl	8011ec8 <siprintf>
            break;
 800365e:	e03b      	b.n	80036d8 <onESP01ChangeState+0xdc>
        case ESP01_WIFI_NOT_SETED:
            sprintf((char*)USB.data.auxBuffer, "ESP01: WiFi no configurado");
 8003660:	4927      	ldr	r1, [pc, #156]	@ (8003700 <onESP01ChangeState+0x104>)
 8003662:	4825      	ldr	r0, [pc, #148]	@ (80036f8 <onESP01ChangeState+0xfc>)
 8003664:	f00e fc30 	bl	8011ec8 <siprintf>
            break;
 8003668:	e036      	b.n	80036d8 <onESP01ChangeState+0xdc>
        case ESP01_WIFI_CONNECTING_WIFI:
            sprintf((char*)USB.data.auxBuffer, "ESP01: Conectando a WiFi...");
 800366a:	4926      	ldr	r1, [pc, #152]	@ (8003704 <onESP01ChangeState+0x108>)
 800366c:	4822      	ldr	r0, [pc, #136]	@ (80036f8 <onESP01ChangeState+0xfc>)
 800366e:	f00e fc2b 	bl	8011ec8 <siprintf>
            break;
 8003672:	e031      	b.n	80036d8 <onESP01ChangeState+0xdc>
        case ESP01_WIFI_CONNECTED:
            sprintf((char*)USB.data.auxBuffer, "ESP01: WiFi conectado");
 8003674:	4924      	ldr	r1, [pc, #144]	@ (8003708 <onESP01ChangeState+0x10c>)
 8003676:	4820      	ldr	r0, [pc, #128]	@ (80036f8 <onESP01ChangeState+0xfc>)
 8003678:	f00e fc26 	bl	8011ec8 <siprintf>
            break;
 800367c:	e02c      	b.n	80036d8 <onESP01ChangeState+0xdc>
        case ESP01_WIFI_NEW_IP:
            sprintf((char*)USB.data.auxBuffer, "ESP01: Nueva IP asignada");
 800367e:	4923      	ldr	r1, [pc, #140]	@ (800370c <onESP01ChangeState+0x110>)
 8003680:	481d      	ldr	r0, [pc, #116]	@ (80036f8 <onESP01ChangeState+0xfc>)
 8003682:	f00e fc21 	bl	8011ec8 <siprintf>
            break;
 8003686:	e027      	b.n	80036d8 <onESP01ChangeState+0xdc>
        case ESP01_UDPTCP_DISCONNECTED:
            sprintf((char*)USB.data.auxBuffer, "ESP01: UDP/TCP desconectado");
 8003688:	4921      	ldr	r1, [pc, #132]	@ (8003710 <onESP01ChangeState+0x114>)
 800368a:	481b      	ldr	r0, [pc, #108]	@ (80036f8 <onESP01ChangeState+0xfc>)
 800368c:	f00e fc1c 	bl	8011ec8 <siprintf>
            break;
 8003690:	e022      	b.n	80036d8 <onESP01ChangeState+0xdc>
        case ESP01_UDPTCP_CONNECTING:
            sprintf((char*)USB.data.auxBuffer, "ESP01: Conectando UDP/TCP...");
 8003692:	4920      	ldr	r1, [pc, #128]	@ (8003714 <onESP01ChangeState+0x118>)
 8003694:	4818      	ldr	r0, [pc, #96]	@ (80036f8 <onESP01ChangeState+0xfc>)
 8003696:	f00e fc17 	bl	8011ec8 <siprintf>
            break;
 800369a:	e01d      	b.n	80036d8 <onESP01ChangeState+0xdc>
        case ESP01_UDPTCP_CONNECTED:
            sprintf((char*)USB.data.auxBuffer, "ESP01: UDP/TCP conectado");
 800369c:	491e      	ldr	r1, [pc, #120]	@ (8003718 <onESP01ChangeState+0x11c>)
 800369e:	4816      	ldr	r0, [pc, #88]	@ (80036f8 <onESP01ChangeState+0xfc>)
 80036a0:	f00e fc12 	bl	8011ec8 <siprintf>
            break;
 80036a4:	e018      	b.n	80036d8 <onESP01ChangeState+0xdc>
        case ESP01_SEND_BUSY:
            sprintf((char*)USB.data.auxBuffer, "ESP01: Enviando datos...");
 80036a6:	491d      	ldr	r1, [pc, #116]	@ (800371c <onESP01ChangeState+0x120>)
 80036a8:	4813      	ldr	r0, [pc, #76]	@ (80036f8 <onESP01ChangeState+0xfc>)
 80036aa:	f00e fc0d 	bl	8011ec8 <siprintf>
            break;
 80036ae:	e013      	b.n	80036d8 <onESP01ChangeState+0xdc>
        case ESP01_SEND_READY:
            sprintf((char*)USB.data.auxBuffer, "ESP01: Listo para enviar");
 80036b0:	491b      	ldr	r1, [pc, #108]	@ (8003720 <onESP01ChangeState+0x124>)
 80036b2:	4811      	ldr	r0, [pc, #68]	@ (80036f8 <onESP01ChangeState+0xfc>)
 80036b4:	f00e fc08 	bl	8011ec8 <siprintf>
            break;
 80036b8:	e00e      	b.n	80036d8 <onESP01ChangeState+0xdc>
        case ESP01_SEND_OK:
            sprintf((char*)USB.data.auxBuffer, "ESP01: Envío OK");
 80036ba:	491a      	ldr	r1, [pc, #104]	@ (8003724 <onESP01ChangeState+0x128>)
 80036bc:	480e      	ldr	r0, [pc, #56]	@ (80036f8 <onESP01ChangeState+0xfc>)
 80036be:	f00e fc03 	bl	8011ec8 <siprintf>
            break;
 80036c2:	e009      	b.n	80036d8 <onESP01ChangeState+0xdc>
        case ESP01_SEND_ERROR:
            sprintf((char*)USB.data.auxBuffer, "ESP01: Error al enviar");
 80036c4:	4918      	ldr	r1, [pc, #96]	@ (8003728 <onESP01ChangeState+0x12c>)
 80036c6:	480c      	ldr	r0, [pc, #48]	@ (80036f8 <onESP01ChangeState+0xfc>)
 80036c8:	f00e fbfe 	bl	8011ec8 <siprintf>
            break;
 80036cc:	e004      	b.n	80036d8 <onESP01ChangeState+0xdc>
        default:
            sprintf((char*)USB.data.auxBuffer, "ESP01: Estado desconocido");
 80036ce:	4917      	ldr	r1, [pc, #92]	@ (800372c <onESP01ChangeState+0x130>)
 80036d0:	4809      	ldr	r0, [pc, #36]	@ (80036f8 <onESP01ChangeState+0xfc>)
 80036d2:	f00e fbf9 	bl	8011ec8 <siprintf>
            break;
 80036d6:	bf00      	nop
    }

    // Cast explícito también aplicado aquí
    comm_sendCMD(&USB.data, USERTEXT, USB.data.auxBuffer, strlen((char*)USB.data.auxBuffer));
 80036d8:	4807      	ldr	r0, [pc, #28]	@ (80036f8 <onESP01ChangeState+0xfc>)
 80036da:	f7fc fd81 	bl	80001e0 <strlen>
 80036de:	4603      	mov	r3, r0
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	4a05      	ldr	r2, [pc, #20]	@ (80036f8 <onESP01ChangeState+0xfc>)
 80036e4:	21b1      	movs	r1, #177	@ 0xb1
 80036e6:	4812      	ldr	r0, [pc, #72]	@ (8003730 <onESP01ChangeState+0x134>)
 80036e8:	f7fe faec 	bl	8001cc4 <comm_sendCMD>
}
 80036ec:	bf00      	nop
 80036ee:	3708      	adds	r7, #8
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	080129d4 	.word	0x080129d4
 80036f8:	2000146c 	.word	0x2000146c
 80036fc:	080129ec 	.word	0x080129ec
 8003700:	08012a08 	.word	0x08012a08
 8003704:	08012a24 	.word	0x08012a24
 8003708:	08012a40 	.word	0x08012a40
 800370c:	08012a58 	.word	0x08012a58
 8003710:	08012a74 	.word	0x08012a74
 8003714:	08012a90 	.word	0x08012a90
 8003718:	08012ab0 	.word	0x08012ab0
 800371c:	08012acc 	.word	0x08012acc
 8003720:	08012ae8 	.word	0x08012ae8
 8003724:	08012b04 	.word	0x08012b04
 8003728:	08012b18 	.word	0x08012b18
 800372c:	08012b30 	.word	0x08012b30
 8003730:	2000125c 	.word	0x2000125c

08003734 <onESP01Debug>:

void onESP01Debug(const char *dbgStr) {
 8003734:	b580      	push	{r7, lr}
 8003736:	b082      	sub	sp, #8
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
    comm_sendCMD(&USB.data, USERTEXT, (uint8_t *)dbgStr, strlen(dbgStr));
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f7fc fd4f 	bl	80001e0 <strlen>
 8003742:	4603      	mov	r3, r0
 8003744:	b2db      	uxtb	r3, r3
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	21b1      	movs	r1, #177	@ 0xb1
 800374a:	4803      	ldr	r0, [pc, #12]	@ (8003758 <onESP01Debug+0x24>)
 800374c:	f7fe faba 	bl	8001cc4 <comm_sendCMD>
}
 8003750:	bf00      	nop
 8003752:	3708      	adds	r7, #8
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}
 8003758:	2000125c 	.word	0x2000125c

0800375c <setESP01_CHPD>:

void setESP01_CHPD(uint8_t val){
 800375c:	b580      	push	{r7, lr}
 800375e:	b082      	sub	sp, #8
 8003760:	af00      	add	r7, sp, #0
 8003762:	4603      	mov	r3, r0
 8003764:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ESP_EN_GPIO_Port, ESP_EN_Pin, val);
 8003766:	79fb      	ldrb	r3, [r7, #7]
 8003768:	461a      	mov	r2, r3
 800376a:	2104      	movs	r1, #4
 800376c:	4803      	ldr	r0, [pc, #12]	@ (800377c <setESP01_CHPD+0x20>)
 800376e:	f003 f861 	bl	8006834 <HAL_GPIO_WritePin>
}
 8003772:	bf00      	nop
 8003774:	3708      	adds	r7, #8
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	40020400 	.word	0x40020400

08003780 <task_10ms>:

void task_10ms(){
 8003780:	b580      	push	{r7, lr}
 8003782:	b082      	sub	sp, #8
 8003784:	af00      	add	r7, sp, #0
	IS10MS = FALSE;
 8003786:	4a5d      	ldr	r2, [pc, #372]	@ (80038fc <task_10ms+0x17c>)
 8003788:	7813      	ldrb	r3, [r2, #0]
 800378a:	f023 0301 	bic.w	r3, r3, #1
 800378e:	7013      	strb	r3, [r2, #0]

	is100ms1--;
 8003790:	4b5b      	ldr	r3, [pc, #364]	@ (8003900 <task_10ms+0x180>)
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	3b01      	subs	r3, #1
 8003796:	b2da      	uxtb	r2, r3
 8003798:	4b59      	ldr	r3, [pc, #356]	@ (8003900 <task_10ms+0x180>)
 800379a:	701a      	strb	r2, [r3, #0]
	if(!is100ms1){
 800379c:	4b58      	ldr	r3, [pc, #352]	@ (8003900 <task_10ms+0x180>)
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	f040 8082 	bne.w	80038aa <task_10ms+0x12a>
		is100ms1 = 10;
 80037a6:	4b56      	ldr	r3, [pc, #344]	@ (8003900 <task_10ms+0x180>)
 80037a8:	220a      	movs	r2, #10
 80037aa:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 80037ac:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80037b0:	4854      	ldr	r0, [pc, #336]	@ (8003904 <task_10ms+0x184>)
 80037b2:	f003 f858 	bl	8006866 <HAL_GPIO_TogglePin>
		is1s--;
 80037b6:	4b54      	ldr	r3, [pc, #336]	@ (8003908 <task_10ms+0x188>)
 80037b8:	781b      	ldrb	r3, [r3, #0]
 80037ba:	3b01      	subs	r3, #1
 80037bc:	b2da      	uxtb	r2, r3
 80037be:	4b52      	ldr	r3, [pc, #328]	@ (8003908 <task_10ms+0x188>)
 80037c0:	701a      	strb	r2, [r3, #0]
		if(!is1s){
 80037c2:	4b51      	ldr	r3, [pc, #324]	@ (8003908 <task_10ms+0x188>)
 80037c4:	781b      	ldrb	r3, [r3, #0]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d16f      	bne.n	80038aa <task_10ms+0x12a>
			is1s = 10;
 80037ca:	4b4f      	ldr	r3, [pc, #316]	@ (8003908 <task_10ms+0x188>)
 80037cc:	220a      	movs	r2, #10
 80037ce:	701a      	strb	r2, [r3, #0]
			Encoder_1s_Elapsed(&EncoderL);
 80037d0:	484e      	ldr	r0, [pc, #312]	@ (800390c <task_10ms+0x18c>)
 80037d2:	f7fe f803 	bl	80017dc <Encoder_1s_Elapsed>
			Encoder_1s_Elapsed(&EncoderR);
 80037d6:	484e      	ldr	r0, [pc, #312]	@ (8003910 <task_10ms+0x190>)
 80037d8:	f7fe f800 	bl	80017dc <Encoder_1s_Elapsed>

			is20s--;
 80037dc:	4b4d      	ldr	r3, [pc, #308]	@ (8003914 <task_10ms+0x194>)
 80037de:	781b      	ldrb	r3, [r3, #0]
 80037e0:	3b01      	subs	r3, #1
 80037e2:	b2da      	uxtb	r2, r3
 80037e4:	4b4b      	ldr	r3, [pc, #300]	@ (8003914 <task_10ms+0x194>)
 80037e6:	701a      	strb	r2, [r3, #0]
			if(!is20s){
 80037e8:	4b4a      	ldr	r3, [pc, #296]	@ (8003914 <task_10ms+0x194>)
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d15c      	bne.n	80038aa <task_10ms+0x12a>
				is20s = 10;
 80037f0:	4b48      	ldr	r3, [pc, #288]	@ (8003914 <task_10ms+0x194>)
 80037f2:	220a      	movs	r2, #10
 80037f4:	701a      	strb	r2, [r3, #0]
				if(ESP01_StateWIFI() != ESP01_WIFI_DISCONNECTED){
 80037f6:	f7fe fbcd 	bl	8001f94 <ESP01_StateWIFI>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d154      	bne.n	80038aa <task_10ms+0x12a>

				}else{
					_eESP01STATUS nigger = ESP01_StartUDP((const char*) "192.168.1.8", 30010, 30000);
 8003800:	f247 5230 	movw	r2, #30000	@ 0x7530
 8003804:	f247 513a 	movw	r1, #30010	@ 0x753a
 8003808:	4843      	ldr	r0, [pc, #268]	@ (8003918 <task_10ms+0x198>)
 800380a:	f7fe fb6d 	bl	8001ee8 <ESP01_StartUDP>
 800380e:	4603      	mov	r3, r0
 8003810:	71fb      	strb	r3, [r7, #7]
					switch(nigger){
 8003812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003816:	3301      	adds	r3, #1
 8003818:	2b07      	cmp	r3, #7
 800381a:	d83e      	bhi.n	800389a <task_10ms+0x11a>
 800381c:	a201      	add	r2, pc, #4	@ (adr r2, 8003824 <task_10ms+0xa4>)
 800381e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003822:	bf00      	nop
 8003824:	08003845 	.word	0x08003845
 8003828:	08003861 	.word	0x08003861
 800382c:	08003853 	.word	0x08003853
 8003830:	0800389b 	.word	0x0800389b
 8003834:	0800389b 	.word	0x0800389b
 8003838:	0800389b 	.word	0x0800389b
 800383c:	0800389b 	.word	0x0800389b
 8003840:	0800386f 	.word	0x0800386f
					case ESP01_NOT_INIT:
						comm_sendCMD(&USB.data, USERTEXT, (uint8_t *)"WIFI NOT INIT", 13);
 8003844:	230d      	movs	r3, #13
 8003846:	4a35      	ldr	r2, [pc, #212]	@ (800391c <task_10ms+0x19c>)
 8003848:	21b1      	movs	r1, #177	@ 0xb1
 800384a:	4835      	ldr	r0, [pc, #212]	@ (8003920 <task_10ms+0x1a0>)
 800384c:	f7fe fa3a 	bl	8001cc4 <comm_sendCMD>
						break;
 8003850:	e02b      	b.n	80038aa <task_10ms+0x12a>
					case ESP01_WIFI_NOT_SETED:
						comm_sendCMD(&USB.data, USERTEXT, (uint8_t *)"WIFI NOT SETED", 14);
 8003852:	230e      	movs	r3, #14
 8003854:	4a33      	ldr	r2, [pc, #204]	@ (8003924 <task_10ms+0x1a4>)
 8003856:	21b1      	movs	r1, #177	@ 0xb1
 8003858:	4831      	ldr	r0, [pc, #196]	@ (8003920 <task_10ms+0x1a0>)
 800385a:	f7fe fa33 	bl	8001cc4 <comm_sendCMD>
						break;
 800385e:	e024      	b.n	80038aa <task_10ms+0x12a>
					case ESP01_WIFI_DISCONNECTED:
						comm_sendCMD(&USB.data, USERTEXT, (uint8_t *)"WIFI DISCONECT", 14);
 8003860:	230e      	movs	r3, #14
 8003862:	4a31      	ldr	r2, [pc, #196]	@ (8003928 <task_10ms+0x1a8>)
 8003864:	21b1      	movs	r1, #177	@ 0xb1
 8003866:	482e      	ldr	r0, [pc, #184]	@ (8003920 <task_10ms+0x1a0>)
 8003868:	f7fe fa2c 	bl	8001cc4 <comm_sendCMD>
						break;
 800386c:	e01d      	b.n	80038aa <task_10ms+0x12a>
					case ESP01_UDPTCP_CONNECTING:
						if(ESP01_GetLocalIP() != NULL){
 800386e:	f7fe fbad 	bl	8001fcc <ESP01_GetLocalIP>
 8003872:	4603      	mov	r3, r0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d017      	beq.n	80038a8 <task_10ms+0x128>
							uint8_t len = sprintf((char*)&USB.data.auxBuffer[0], "IP: %s", ESP01_GetLocalIP());
 8003878:	f7fe fba8 	bl	8001fcc <ESP01_GetLocalIP>
 800387c:	4603      	mov	r3, r0
 800387e:	461a      	mov	r2, r3
 8003880:	492a      	ldr	r1, [pc, #168]	@ (800392c <task_10ms+0x1ac>)
 8003882:	482b      	ldr	r0, [pc, #172]	@ (8003930 <task_10ms+0x1b0>)
 8003884:	f00e fb20 	bl	8011ec8 <siprintf>
 8003888:	4603      	mov	r3, r0
 800388a:	71bb      	strb	r3, [r7, #6]
							comm_sendCMD(&USB.data, USERTEXT, USB.data.auxBuffer, len);
 800388c:	79bb      	ldrb	r3, [r7, #6]
 800388e:	4a28      	ldr	r2, [pc, #160]	@ (8003930 <task_10ms+0x1b0>)
 8003890:	21b1      	movs	r1, #177	@ 0xb1
 8003892:	4823      	ldr	r0, [pc, #140]	@ (8003920 <task_10ms+0x1a0>)
 8003894:	f7fe fa16 	bl	8001cc4 <comm_sendCMD>
						}
						break;
 8003898:	e006      	b.n	80038a8 <task_10ms+0x128>
					default:
						comm_sendCMD(&USB.data, USERTEXT, (uint8_t *)"vat", 3);
 800389a:	2303      	movs	r3, #3
 800389c:	4a25      	ldr	r2, [pc, #148]	@ (8003934 <task_10ms+0x1b4>)
 800389e:	21b1      	movs	r1, #177	@ 0xb1
 80038a0:	481f      	ldr	r0, [pc, #124]	@ (8003920 <task_10ms+0x1a0>)
 80038a2:	f7fe fa0f 	bl	8001cc4 <comm_sendCMD>
						break;
 80038a6:	e000      	b.n	80038aa <task_10ms+0x12a>
						break;
 80038a8:	bf00      	nop
				}
			}
		}
	}

	Display.refreshCounter_10ms--;
 80038aa:	4b23      	ldr	r3, [pc, #140]	@ (8003938 <task_10ms+0x1b8>)
 80038ac:	f893 3413 	ldrb.w	r3, [r3, #1043]	@ 0x413
 80038b0:	3b01      	subs	r3, #1
 80038b2:	b2da      	uxtb	r2, r3
 80038b4:	4b20      	ldr	r3, [pc, #128]	@ (8003938 <task_10ms+0x1b8>)
 80038b6:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
	if(!Display.refreshCounter_10ms){ //Tasa de refresco variable
 80038ba:	4b1f      	ldr	r3, [pc, #124]	@ (8003938 <task_10ms+0x1b8>)
 80038bc:	f893 3413 	ldrb.w	r3, [r3, #1043]	@ 0x413
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d107      	bne.n	80038d4 <task_10ms+0x154>
		Display.refreshCounter_10ms = Display.refreshRate_10ms;
 80038c4:	4b1c      	ldr	r3, [pc, #112]	@ (8003938 <task_10ms+0x1b8>)
 80038c6:	f893 2412 	ldrb.w	r2, [r3, #1042]	@ 0x412
 80038ca:	4b1b      	ldr	r3, [pc, #108]	@ (8003938 <task_10ms+0x1b8>)
 80038cc:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
		OLED_Print_Data_Task();
 80038d0:	f7ff faec 	bl	8002eac <OLED_Print_Data_Task>
	}

	ESP01_Timeout10ms();
 80038d4:	f7fe fbf0 	bl	80020b8 <ESP01_Timeout10ms>
	Debouncer_Task();
 80038d8:	f7fc ffa0 	bl	800081c <Debouncer_Task>
	Motor_Break_Timeout(&MotorL);
 80038dc:	4817      	ldr	r0, [pc, #92]	@ (800393c <task_10ms+0x1bc>)
 80038de:	f7fe f845 	bl	800196c <Motor_Break_Timeout>
	Motor_Break_Timeout(&MotorR);
 80038e2:	4817      	ldr	r0, [pc, #92]	@ (8003940 <task_10ms+0x1c0>)
 80038e4:	f7fe f842 	bl	800196c <Motor_Break_Timeout>
	Encoder_Task(&EncoderL);
 80038e8:	4808      	ldr	r0, [pc, #32]	@ (800390c <task_10ms+0x18c>)
 80038ea:	f7fd ff37 	bl	800175c <Encoder_Task>
	Encoder_Task(&EncoderR);
 80038ee:	4808      	ldr	r0, [pc, #32]	@ (8003910 <task_10ms+0x190>)
 80038f0:	f7fd ff34 	bl	800175c <Encoder_Task>
}
 80038f4:	bf00      	nop
 80038f6:	3708      	adds	r7, #8
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	20000d0c 	.word	0x20000d0c
 8003900:	2000000c 	.word	0x2000000c
 8003904:	40020800 	.word	0x40020800
 8003908:	2000000d 	.word	0x2000000d
 800390c:	20000d48 	.word	0x20000d48
 8003910:	20000d54 	.word	0x20000d54
 8003914:	2000000f 	.word	0x2000000f
 8003918:	08012b4c 	.word	0x08012b4c
 800391c:	08012b58 	.word	0x08012b58
 8003920:	2000125c 	.word	0x2000125c
 8003924:	08012b68 	.word	0x08012b68
 8003928:	08012b78 	.word	0x08012b78
 800392c:	08012b88 	.word	0x08012b88
 8003930:	2000146c 	.word	0x2000146c
 8003934:	08012b90 	.word	0x08012b90
 8003938:	20000e24 	.word	0x20000e24
 800393c:	20000d18 	.word	0x20000d18
 8003940:	20000d30 	.word	0x20000d30

08003944 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003948:	f001 faf8 	bl	8004f3c <HAL_Init>

  /* USER CODE BEGIN Init */
  MPU6050.isInit = FALSE;
 800394c:	4b5c      	ldr	r3, [pc, #368]	@ (8003ac0 <main+0x17c>)
 800394e:	2200      	movs	r2, #0
 8003950:	f883 20c2 	strb.w	r2, [r3, #194]	@ 0xc2
  Display.isInit = FALSE;
 8003954:	4b5b      	ldr	r3, [pc, #364]	@ (8003ac4 <main+0x180>)
 8003956:	2200      	movs	r2, #0
 8003958:	701a      	strb	r2, [r3, #0]
  Display.state = INIT;
 800395a:	4b5a      	ldr	r3, [pc, #360]	@ (8003ac4 <main+0x180>)
 800395c:	2200      	movs	r2, #0
 800395e:	f883 2401 	strb.w	r2, [r3, #1025]	@ 0x401

  ESP.password = "wlan412877";
 8003962:	4b59      	ldr	r3, [pc, #356]	@ (8003ac8 <main+0x184>)
 8003964:	4a59      	ldr	r2, [pc, #356]	@ (8003acc <main+0x188>)
 8003966:	611a      	str	r2, [r3, #16]
  ESP.ssid = "InternetPlus_bed788";
 8003968:	4b57      	ldr	r3, [pc, #348]	@ (8003ac8 <main+0x184>)
 800396a:	4a59      	ldr	r2, [pc, #356]	@ (8003ad0 <main+0x18c>)
 800396c:	60da      	str	r2, [r3, #12]
  ESP.IP = "192.168.1.8";
 800396e:	4b56      	ldr	r3, [pc, #344]	@ (8003ac8 <main+0x184>)
 8003970:	4a58      	ldr	r2, [pc, #352]	@ (8003ad4 <main+0x190>)
 8003972:	615a      	str	r2, [r3, #20]
  ESP.iR = 0;
 8003974:	4b54      	ldr	r3, [pc, #336]	@ (8003ac8 <main+0x184>)
 8003976:	2200      	movs	r2, #0
 8003978:	f883 2349 	strb.w	r2, [r3, #841]	@ 0x349
  ESP.iW = 0;
 800397c:	4b52      	ldr	r3, [pc, #328]	@ (8003ac8 <main+0x184>)
 800397e:	2200      	movs	r2, #0
 8003980:	f883 234a 	strb.w	r2, [r3, #842]	@ 0x34a



  ESP.Config.DoCHPD = setESP01_CHPD;
 8003984:	4b50      	ldr	r3, [pc, #320]	@ (8003ac8 <main+0x184>)
 8003986:	4a54      	ldr	r2, [pc, #336]	@ (8003ad8 <main+0x194>)
 8003988:	601a      	str	r2, [r3, #0]
  ESP.Config.WriteByteToBufRX = ESP01_Data_Recived;
 800398a:	4b4f      	ldr	r3, [pc, #316]	@ (8003ac8 <main+0x184>)
 800398c:	4a53      	ldr	r2, [pc, #332]	@ (8003adc <main+0x198>)
 800398e:	609a      	str	r2, [r3, #8]
  ESP.Config.WriteUSARTByte = ESP01_UART_Transmit;
 8003990:	4b4d      	ldr	r3, [pc, #308]	@ (8003ac8 <main+0x184>)
 8003992:	4a53      	ldr	r2, [pc, #332]	@ (8003ae0 <main+0x19c>)
 8003994:	605a      	str	r2, [r3, #4]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003996:	f000 f8d5 	bl	8003b44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800399a:	f000 fb67 	bl	800406c <MX_GPIO_Init>
  MX_DMA_Init();
 800399e:	f000 fb27 	bl	8003ff0 <MX_DMA_Init>
  MX_ADC1_Init();
 80039a2:	f000 f939 	bl	8003c18 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 80039a6:	f00d fcb7 	bl	8011318 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 80039aa:	f000 fa25 	bl	8003df8 <MX_TIM1_Init>
  MX_I2C1_Init();
 80039ae:	f000 f9f5 	bl	8003d9c <MX_I2C1_Init>
  MX_TIM3_Init();
 80039b2:	f000 fa71 	bl	8003e98 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80039b6:	f000 faf1 	bl	8003f9c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  /* INICIALIZACIÓN DE PROTOCOLO MEDIANTE USB */
  Comm_Init(&USB.data, &decodeOn_USB, &writeOn_USB);
 80039ba:	4a4a      	ldr	r2, [pc, #296]	@ (8003ae4 <main+0x1a0>)
 80039bc:	494a      	ldr	r1, [pc, #296]	@ (8003ae8 <main+0x1a4>)
 80039be:	484b      	ldr	r0, [pc, #300]	@ (8003aec <main+0x1a8>)
 80039c0:	f7fd ffef 	bl	80019a2 <Comm_Init>
  CDC_Attach_Rx(&dataRxOn_USB);
 80039c4:	484a      	ldr	r0, [pc, #296]	@ (8003af0 <main+0x1ac>)
 80039c6:	f00d fdf9 	bl	80115bc <CDC_Attach_Rx>

  //HAL_UART_Receive_IT(&huart1, &dataRx, 1);
  /* FIN INICIALIZACIÓN DE PROTOCOLO MEDIANTE USB */

  /* INICIALIZACIÓN DE USER KEY Y DEBOUNCE */
  Debounce_Init();
 80039ca:	f7fc febf 	bl	800074c <Debounce_Init>
  key = Debounce_Add(&KEY_Read_Value, &onKeyChangeState);
 80039ce:	4949      	ldr	r1, [pc, #292]	@ (8003af4 <main+0x1b0>)
 80039d0:	4849      	ldr	r0, [pc, #292]	@ (8003af8 <main+0x1b4>)
 80039d2:	f7fc feef 	bl	80007b4 <Debounce_Add>
 80039d6:	4603      	mov	r3, r0
 80039d8:	461a      	mov	r2, r3
 80039da:	4b48      	ldr	r3, [pc, #288]	@ (8003afc <main+0x1b8>)
 80039dc:	701a      	strb	r2, [r3, #0]
  /* FIN INICIALIZACIÓN DE USER KEY Y DEBOUNCE */

  /* INICIALIZACIÓN DE MPU6050 */
  Init_MPU6050();
 80039de:	f000 fc5f 	bl	80042a0 <Init_MPU6050>
  /* FIN INICIALIZACIÓN DE MPU6050 */

  /* INICIALIZACIÓN DISPLAY*/
  Init_Display();
 80039e2:	f000 fc95 	bl	8004310 <Init_Display>
  /* FIN INICIALIZACIÓN DISPLAY */

  /* INICIALIZACIÓN DE MOTORES Y ENCODERS */
  Motor_Init(&MotorL, &Motor_Left_SetPWM , &Motor_Left_SetPins , htim3.Instance->ARR);
 80039e6:	4b46      	ldr	r3, [pc, #280]	@ (8003b00 <main+0x1bc>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	4a45      	ldr	r2, [pc, #276]	@ (8003b04 <main+0x1c0>)
 80039f0:	4945      	ldr	r1, [pc, #276]	@ (8003b08 <main+0x1c4>)
 80039f2:	4846      	ldr	r0, [pc, #280]	@ (8003b0c <main+0x1c8>)
 80039f4:	f7fd ff03 	bl	80017fe <Motor_Init>
  Motor_Init(&MotorR, &Motor_Right_SetPWM, &Motor_Right_SetPins, htim3.Instance->ARR);
 80039f8:	4b41      	ldr	r3, [pc, #260]	@ (8003b00 <main+0x1bc>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	4a43      	ldr	r2, [pc, #268]	@ (8003b10 <main+0x1cc>)
 8003a02:	4944      	ldr	r1, [pc, #272]	@ (8003b14 <main+0x1d0>)
 8003a04:	4844      	ldr	r0, [pc, #272]	@ (8003b18 <main+0x1d4>)
 8003a06:	f7fd fefa 	bl	80017fe <Motor_Init>

  Encoder_Init(&EncoderL, ENCODER_FASTPPS_COUNTER_10MS);
 8003a0a:	210a      	movs	r1, #10
 8003a0c:	4843      	ldr	r0, [pc, #268]	@ (8003b1c <main+0x1d8>)
 8003a0e:	f7fd fe86 	bl	800171e <Encoder_Init>
  Encoder_Init(&EncoderR, ENCODER_FASTPPS_COUNTER_10MS);
 8003a12:	210a      	movs	r1, #10
 8003a14:	4842      	ldr	r0, [pc, #264]	@ (8003b20 <main+0x1dc>)
 8003a16:	f7fd fe82 	bl	800171e <Encoder_Init>
  /* FIN INICIALIZACIÓN DE MOTORES Y ENCODERS */

  ESP01_Init(&ESP.Config);
 8003a1a:	482b      	ldr	r0, [pc, #172]	@ (8003ac8 <main+0x184>)
 8003a1c:	f7fe fb10 	bl	8002040 <ESP01_Init>
  ESP01_SetWIFI(ESP.ssid, ESP.password);
 8003a20:	4b29      	ldr	r3, [pc, #164]	@ (8003ac8 <main+0x184>)
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	4a28      	ldr	r2, [pc, #160]	@ (8003ac8 <main+0x184>)
 8003a26:	6912      	ldr	r2, [r2, #16]
 8003a28:	4611      	mov	r1, r2
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f7fe fa26 	bl	8001e7c <ESP01_SetWIFI>
  ESP01_AttachChangeState(&onESP01ChangeState);
 8003a30:	483c      	ldr	r0, [pc, #240]	@ (8003b24 <main+0x1e0>)
 8003a32:	f7fe fb8d 	bl	8002150 <ESP01_AttachChangeState>
  ESP01_AttachDebugStr(&onESP01Debug);
 8003a36:	483c      	ldr	r0, [pc, #240]	@ (8003b28 <main+0x1e4>)
 8003a38:	f7fe fb9a 	bl	8002170 <ESP01_AttachDebugStr>

  if(ESP01_StartUDP((const char*) "192.168.1.8", 30010, 30000) != ESP01_UDPTCP_CONNECTING){
 8003a3c:	f247 5230 	movw	r2, #30000	@ 0x7530
 8003a40:	f247 513a 	movw	r1, #30010	@ 0x753a
 8003a44:	4823      	ldr	r0, [pc, #140]	@ (8003ad4 <main+0x190>)
 8003a46:	f7fe fa4f 	bl	8001ee8 <ESP01_StartUDP>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	2b06      	cmp	r3, #6
 8003a4e:	d006      	beq.n	8003a5e <main+0x11a>
	  comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"ESP UDP", 7);
 8003a50:	2307      	movs	r3, #7
 8003a52:	4a36      	ldr	r2, [pc, #216]	@ (8003b2c <main+0x1e8>)
 8003a54:	21ee      	movs	r1, #238	@ 0xee
 8003a56:	4825      	ldr	r0, [pc, #148]	@ (8003aec <main+0x1a8>)
 8003a58:	f7fe f934 	bl	8001cc4 <comm_sendCMD>
 8003a5c:	e005      	b.n	8003a6a <main+0x126>
  }else{
	  comm_sendCMD(&USB.data, USERTEXT, (uint8_t*)"UDP ON", 6);
 8003a5e:	2306      	movs	r3, #6
 8003a60:	4a33      	ldr	r2, [pc, #204]	@ (8003b30 <main+0x1ec>)
 8003a62:	21b1      	movs	r1, #177	@ 0xb1
 8003a64:	4821      	ldr	r0, [pc, #132]	@ (8003aec <main+0x1a8>)
 8003a66:	f7fe f92d 	bl	8001cc4 <comm_sendCMD>
  }

  HAL_UART_Receive_IT(&huart1, &ESP.bytesInRx, 1);
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	4931      	ldr	r1, [pc, #196]	@ (8003b34 <main+0x1f0>)
 8003a6e:	4832      	ldr	r0, [pc, #200]	@ (8003b38 <main+0x1f4>)
 8003a70:	f009 fa14 	bl	800ce9c <HAL_UART_Receive_IT>

  Car.state = IDLE;
 8003a74:	4b31      	ldr	r3, [pc, #196]	@ (8003b3c <main+0x1f8>)
 8003a76:	2200      	movs	r2, #0
 8003a78:	701a      	strb	r2, [r3, #0]

  Init_Timing();
 8003a7a:	f000 fbcd 	bl	8004218 <Init_Timing>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  /* USER TASK */
	Comm_Task(&USB.data);
 8003a7e:	481b      	ldr	r0, [pc, #108]	@ (8003aec <main+0x1a8>)
 8003a80:	f7fd ffc3 	bl	8001a0a <Comm_Task>
	Display_UpdateScreen_Task();
 8003a84:	f7fd fb22 	bl	80010cc <Display_UpdateScreen_Task>
	MPU6050_MAF(&MPU6050);
 8003a88:	480d      	ldr	r0, [pc, #52]	@ (8003ac0 <main+0x17c>)
 8003a8a:	f7fd f8cf 	bl	8000c2c <MPU6050_MAF>
	ESP01_Task();
 8003a8e:	f7fe fb45 	bl	800211c <ESP01_Task>

	if(IS10MS){
 8003a92:	4b2b      	ldr	r3, [pc, #172]	@ (8003b40 <main+0x1fc>)
 8003a94:	781b      	ldrb	r3, [r3, #0]
 8003a96:	f003 0301 	and.w	r3, r3, #1
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d001      	beq.n	8003aa4 <main+0x160>
		task_10ms();
 8003aa0:	f7ff fe6e 	bl	8003780 <task_10ms>
	}

	switch(Car.state){
 8003aa4:	4b25      	ldr	r3, [pc, #148]	@ (8003b3c <main+0x1f8>)
 8003aa6:	781b      	ldrb	r3, [r3, #0]
 8003aa8:	2b02      	cmp	r3, #2
 8003aaa:	d005      	beq.n	8003ab8 <main+0x174>
 8003aac:	2b02      	cmp	r3, #2
 8003aae:	dce6      	bgt.n	8003a7e <main+0x13a>
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d003      	beq.n	8003abc <main+0x178>
 8003ab4:	2b01      	cmp	r3, #1
	case IDLE:

		break;
	case FOLLOW_LINE:

		break;
 8003ab6:	e002      	b.n	8003abe <main+0x17a>
	case GO_FROM_TO:

		break;
 8003ab8:	bf00      	nop
 8003aba:	e7e0      	b.n	8003a7e <main+0x13a>
		break;
 8003abc:	bf00      	nop
	Comm_Task(&USB.data);
 8003abe:	e7de      	b.n	8003a7e <main+0x13a>
 8003ac0:	20000d60 	.word	0x20000d60
 8003ac4:	20000e24 	.word	0x20000e24
 8003ac8:	20001490 	.word	0x20001490
 8003acc:	08012b94 	.word	0x08012b94
 8003ad0:	08012ba0 	.word	0x08012ba0
 8003ad4:	08012b4c 	.word	0x08012b4c
 8003ad8:	0800375d 	.word	0x0800375d
 8003adc:	08004579 	.word	0x08004579
 8003ae0:	0800453d 	.word	0x0800453d
 8003ae4:	080046b9 	.word	0x080046b9
 8003ae8:	08003221 	.word	0x08003221
 8003aec:	2000125c 	.word	0x2000125c
 8003af0:	0800472d 	.word	0x0800472d
 8003af4:	080035e5 	.word	0x080035e5
 8003af8:	080046a1 	.word	0x080046a1
 8003afc:	20000d14 	.word	0x20000d14
 8003b00:	20000c7c 	.word	0x20000c7c
 8003b04:	08004785 	.word	0x08004785
 8003b08:	080047f9 	.word	0x080047f9
 8003b0c:	20000d18 	.word	0x20000d18
 8003b10:	080047bd 	.word	0x080047bd
 8003b14:	0800481d 	.word	0x0800481d
 8003b18:	20000d30 	.word	0x20000d30
 8003b1c:	20000d48 	.word	0x20000d48
 8003b20:	20000d54 	.word	0x20000d54
 8003b24:	080035fd 	.word	0x080035fd
 8003b28:	08003735 	.word	0x08003735
 8003b2c:	08012bb4 	.word	0x08012bb4
 8003b30:	08012bbc 	.word	0x08012bbc
 8003b34:	200016d8 	.word	0x200016d8
 8003b38:	20000cc4 	.word	0x20000cc4
 8003b3c:	200017dc 	.word	0x200017dc
 8003b40:	20000d0c 	.word	0x20000d0c

08003b44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b094      	sub	sp, #80	@ 0x50
 8003b48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003b4a:	f107 0320 	add.w	r3, r7, #32
 8003b4e:	2230      	movs	r2, #48	@ 0x30
 8003b50:	2100      	movs	r1, #0
 8003b52:	4618      	mov	r0, r3
 8003b54:	f00e f9da 	bl	8011f0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003b58:	f107 030c 	add.w	r3, r7, #12
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	601a      	str	r2, [r3, #0]
 8003b60:	605a      	str	r2, [r3, #4]
 8003b62:	609a      	str	r2, [r3, #8]
 8003b64:	60da      	str	r2, [r3, #12]
 8003b66:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b68:	2300      	movs	r3, #0
 8003b6a:	60bb      	str	r3, [r7, #8]
 8003b6c:	4b28      	ldr	r3, [pc, #160]	@ (8003c10 <SystemClock_Config+0xcc>)
 8003b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b70:	4a27      	ldr	r2, [pc, #156]	@ (8003c10 <SystemClock_Config+0xcc>)
 8003b72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b76:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b78:	4b25      	ldr	r3, [pc, #148]	@ (8003c10 <SystemClock_Config+0xcc>)
 8003b7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b80:	60bb      	str	r3, [r7, #8]
 8003b82:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b84:	2300      	movs	r3, #0
 8003b86:	607b      	str	r3, [r7, #4]
 8003b88:	4b22      	ldr	r3, [pc, #136]	@ (8003c14 <SystemClock_Config+0xd0>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a21      	ldr	r2, [pc, #132]	@ (8003c14 <SystemClock_Config+0xd0>)
 8003b8e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003b92:	6013      	str	r3, [r2, #0]
 8003b94:	4b1f      	ldr	r3, [pc, #124]	@ (8003c14 <SystemClock_Config+0xd0>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003b9c:	607b      	str	r3, [r7, #4]
 8003b9e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003ba4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003ba8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003baa:	2302      	movs	r3, #2
 8003bac:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003bae:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003bb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8003bb4:	2319      	movs	r3, #25
 8003bb6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8003bb8:	23c0      	movs	r3, #192	@ 0xc0
 8003bba:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003bbc:	2302      	movs	r3, #2
 8003bbe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003bc0:	2304      	movs	r3, #4
 8003bc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003bc4:	f107 0320 	add.w	r3, r7, #32
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f007 fcab 	bl	800b524 <HAL_RCC_OscConfig>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d001      	beq.n	8003bd8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003bd4:	f000 fe34 	bl	8004840 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003bd8:	230f      	movs	r3, #15
 8003bda:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003bdc:	2302      	movs	r3, #2
 8003bde:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003be0:	2300      	movs	r3, #0
 8003be2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003be4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003be8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003bea:	2300      	movs	r3, #0
 8003bec:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8003bee:	f107 030c 	add.w	r3, r7, #12
 8003bf2:	2103      	movs	r1, #3
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f007 ff0d 	bl	800ba14 <HAL_RCC_ClockConfig>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d001      	beq.n	8003c04 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8003c00:	f000 fe1e 	bl	8004840 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8003c04:	f007 ffec 	bl	800bbe0 <HAL_RCC_EnableCSS>
}
 8003c08:	bf00      	nop
 8003c0a:	3750      	adds	r7, #80	@ 0x50
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}
 8003c10:	40023800 	.word	0x40023800
 8003c14:	40007000 	.word	0x40007000

08003c18 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b084      	sub	sp, #16
 8003c1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003c1e:	463b      	mov	r3, r7
 8003c20:	2200      	movs	r2, #0
 8003c22:	601a      	str	r2, [r3, #0]
 8003c24:	605a      	str	r2, [r3, #4]
 8003c26:	609a      	str	r2, [r3, #8]
 8003c28:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003c2a:	4b59      	ldr	r3, [pc, #356]	@ (8003d90 <MX_ADC1_Init+0x178>)
 8003c2c:	4a59      	ldr	r2, [pc, #356]	@ (8003d94 <MX_ADC1_Init+0x17c>)
 8003c2e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003c30:	4b57      	ldr	r3, [pc, #348]	@ (8003d90 <MX_ADC1_Init+0x178>)
 8003c32:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003c36:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003c38:	4b55      	ldr	r3, [pc, #340]	@ (8003d90 <MX_ADC1_Init+0x178>)
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8003c3e:	4b54      	ldr	r3, [pc, #336]	@ (8003d90 <MX_ADC1_Init+0x178>)
 8003c40:	2201      	movs	r2, #1
 8003c42:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003c44:	4b52      	ldr	r3, [pc, #328]	@ (8003d90 <MX_ADC1_Init+0x178>)
 8003c46:	2200      	movs	r2, #0
 8003c48:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003c4a:	4b51      	ldr	r3, [pc, #324]	@ (8003d90 <MX_ADC1_Init+0x178>)
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003c52:	4b4f      	ldr	r3, [pc, #316]	@ (8003d90 <MX_ADC1_Init+0x178>)
 8003c54:	2200      	movs	r2, #0
 8003c56:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003c58:	4b4d      	ldr	r3, [pc, #308]	@ (8003d90 <MX_ADC1_Init+0x178>)
 8003c5a:	4a4f      	ldr	r2, [pc, #316]	@ (8003d98 <MX_ADC1_Init+0x180>)
 8003c5c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003c5e:	4b4c      	ldr	r3, [pc, #304]	@ (8003d90 <MX_ADC1_Init+0x178>)
 8003c60:	2200      	movs	r2, #0
 8003c62:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 9;
 8003c64:	4b4a      	ldr	r3, [pc, #296]	@ (8003d90 <MX_ADC1_Init+0x178>)
 8003c66:	2209      	movs	r2, #9
 8003c68:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003c6a:	4b49      	ldr	r3, [pc, #292]	@ (8003d90 <MX_ADC1_Init+0x178>)
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003c72:	4b47      	ldr	r3, [pc, #284]	@ (8003d90 <MX_ADC1_Init+0x178>)
 8003c74:	2201      	movs	r2, #1
 8003c76:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003c78:	4845      	ldr	r0, [pc, #276]	@ (8003d90 <MX_ADC1_Init+0x178>)
 8003c7a:	f001 f9f5 	bl	8005068 <HAL_ADC_Init>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d001      	beq.n	8003c88 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8003c84:	f000 fddc 	bl	8004840 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8003c90:	2303      	movs	r3, #3
 8003c92:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003c94:	463b      	mov	r3, r7
 8003c96:	4619      	mov	r1, r3
 8003c98:	483d      	ldr	r0, [pc, #244]	@ (8003d90 <MX_ADC1_Init+0x178>)
 8003c9a:	f001 fc47 	bl	800552c <HAL_ADC_ConfigChannel>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d001      	beq.n	8003ca8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8003ca4:	f000 fdcc 	bl	8004840 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8003ca8:	2302      	movs	r3, #2
 8003caa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8003cac:	2302      	movs	r3, #2
 8003cae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003cb0:	463b      	mov	r3, r7
 8003cb2:	4619      	mov	r1, r3
 8003cb4:	4836      	ldr	r0, [pc, #216]	@ (8003d90 <MX_ADC1_Init+0x178>)
 8003cb6:	f001 fc39 	bl	800552c <HAL_ADC_ConfigChannel>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d001      	beq.n	8003cc4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8003cc0:	f000 fdbe 	bl	8004840 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8003cc4:	2303      	movs	r3, #3
 8003cc6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8003cc8:	2303      	movs	r3, #3
 8003cca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003ccc:	463b      	mov	r3, r7
 8003cce:	4619      	mov	r1, r3
 8003cd0:	482f      	ldr	r0, [pc, #188]	@ (8003d90 <MX_ADC1_Init+0x178>)
 8003cd2:	f001 fc2b 	bl	800552c <HAL_ADC_ConfigChannel>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d001      	beq.n	8003ce0 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8003cdc:	f000 fdb0 	bl	8004840 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8003ce0:	2304      	movs	r3, #4
 8003ce2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8003ce4:	2304      	movs	r3, #4
 8003ce6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003ce8:	463b      	mov	r3, r7
 8003cea:	4619      	mov	r1, r3
 8003cec:	4828      	ldr	r0, [pc, #160]	@ (8003d90 <MX_ADC1_Init+0x178>)
 8003cee:	f001 fc1d 	bl	800552c <HAL_ADC_ConfigChannel>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d001      	beq.n	8003cfc <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8003cf8:	f000 fda2 	bl	8004840 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8003cfc:	2305      	movs	r3, #5
 8003cfe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8003d00:	2305      	movs	r3, #5
 8003d02:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003d04:	463b      	mov	r3, r7
 8003d06:	4619      	mov	r1, r3
 8003d08:	4821      	ldr	r0, [pc, #132]	@ (8003d90 <MX_ADC1_Init+0x178>)
 8003d0a:	f001 fc0f 	bl	800552c <HAL_ADC_ConfigChannel>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d001      	beq.n	8003d18 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8003d14:	f000 fd94 	bl	8004840 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8003d18:	2306      	movs	r3, #6
 8003d1a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8003d1c:	2306      	movs	r3, #6
 8003d1e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003d20:	463b      	mov	r3, r7
 8003d22:	4619      	mov	r1, r3
 8003d24:	481a      	ldr	r0, [pc, #104]	@ (8003d90 <MX_ADC1_Init+0x178>)
 8003d26:	f001 fc01 	bl	800552c <HAL_ADC_ConfigChannel>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d001      	beq.n	8003d34 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8003d30:	f000 fd86 	bl	8004840 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8003d34:	2307      	movs	r3, #7
 8003d36:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8003d38:	2307      	movs	r3, #7
 8003d3a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003d3c:	463b      	mov	r3, r7
 8003d3e:	4619      	mov	r1, r3
 8003d40:	4813      	ldr	r0, [pc, #76]	@ (8003d90 <MX_ADC1_Init+0x178>)
 8003d42:	f001 fbf3 	bl	800552c <HAL_ADC_ConfigChannel>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d001      	beq.n	8003d50 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8003d4c:	f000 fd78 	bl	8004840 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8003d50:	2308      	movs	r3, #8
 8003d52:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8003d54:	2308      	movs	r3, #8
 8003d56:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003d58:	463b      	mov	r3, r7
 8003d5a:	4619      	mov	r1, r3
 8003d5c:	480c      	ldr	r0, [pc, #48]	@ (8003d90 <MX_ADC1_Init+0x178>)
 8003d5e:	f001 fbe5 	bl	800552c <HAL_ADC_ConfigChannel>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d001      	beq.n	8003d6c <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8003d68:	f000 fd6a 	bl	8004840 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8003d6c:	2309      	movs	r3, #9
 8003d6e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8003d70:	2309      	movs	r3, #9
 8003d72:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003d74:	463b      	mov	r3, r7
 8003d76:	4619      	mov	r1, r3
 8003d78:	4805      	ldr	r0, [pc, #20]	@ (8003d90 <MX_ADC1_Init+0x178>)
 8003d7a:	f001 fbd7 	bl	800552c <HAL_ADC_ConfigChannel>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d001      	beq.n	8003d88 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8003d84:	f000 fd5c 	bl	8004840 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003d88:	bf00      	nop
 8003d8a:	3710      	adds	r7, #16
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	20000a78 	.word	0x20000a78
 8003d94:	40012000 	.word	0x40012000
 8003d98:	0f000001 	.word	0x0f000001

08003d9c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003da0:	4b12      	ldr	r3, [pc, #72]	@ (8003dec <MX_I2C1_Init+0x50>)
 8003da2:	4a13      	ldr	r2, [pc, #76]	@ (8003df0 <MX_I2C1_Init+0x54>)
 8003da4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8003da6:	4b11      	ldr	r3, [pc, #68]	@ (8003dec <MX_I2C1_Init+0x50>)
 8003da8:	4a12      	ldr	r2, [pc, #72]	@ (8003df4 <MX_I2C1_Init+0x58>)
 8003daa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003dac:	4b0f      	ldr	r3, [pc, #60]	@ (8003dec <MX_I2C1_Init+0x50>)
 8003dae:	2200      	movs	r2, #0
 8003db0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003db2:	4b0e      	ldr	r3, [pc, #56]	@ (8003dec <MX_I2C1_Init+0x50>)
 8003db4:	2200      	movs	r2, #0
 8003db6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003db8:	4b0c      	ldr	r3, [pc, #48]	@ (8003dec <MX_I2C1_Init+0x50>)
 8003dba:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003dbe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003dc0:	4b0a      	ldr	r3, [pc, #40]	@ (8003dec <MX_I2C1_Init+0x50>)
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003dc6:	4b09      	ldr	r3, [pc, #36]	@ (8003dec <MX_I2C1_Init+0x50>)
 8003dc8:	2200      	movs	r2, #0
 8003dca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003dcc:	4b07      	ldr	r3, [pc, #28]	@ (8003dec <MX_I2C1_Init+0x50>)
 8003dce:	2200      	movs	r2, #0
 8003dd0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003dd2:	4b06      	ldr	r3, [pc, #24]	@ (8003dec <MX_I2C1_Init+0x50>)
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003dd8:	4804      	ldr	r0, [pc, #16]	@ (8003dec <MX_I2C1_Init+0x50>)
 8003dda:	f002 fd77 	bl	80068cc <HAL_I2C_Init>
 8003dde:	4603      	mov	r3, r0
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d001      	beq.n	8003de8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003de4:	f000 fd2c 	bl	8004840 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003de8:	bf00      	nop
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	20000b20 	.word	0x20000b20
 8003df0:	40005400 	.word	0x40005400
 8003df4:	00061a80 	.word	0x00061a80

08003df8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b086      	sub	sp, #24
 8003dfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003dfe:	f107 0308 	add.w	r3, r7, #8
 8003e02:	2200      	movs	r2, #0
 8003e04:	601a      	str	r2, [r3, #0]
 8003e06:	605a      	str	r2, [r3, #4]
 8003e08:	609a      	str	r2, [r3, #8]
 8003e0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e0c:	463b      	mov	r3, r7
 8003e0e:	2200      	movs	r2, #0
 8003e10:	601a      	str	r2, [r3, #0]
 8003e12:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003e14:	4b1e      	ldr	r3, [pc, #120]	@ (8003e90 <MX_TIM1_Init+0x98>)
 8003e16:	4a1f      	ldr	r2, [pc, #124]	@ (8003e94 <MX_TIM1_Init+0x9c>)
 8003e18:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003e1a:	4b1d      	ldr	r3, [pc, #116]	@ (8003e90 <MX_TIM1_Init+0x98>)
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e20:	4b1b      	ldr	r3, [pc, #108]	@ (8003e90 <MX_TIM1_Init+0x98>)
 8003e22:	2200      	movs	r2, #0
 8003e24:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 23999;
 8003e26:	4b1a      	ldr	r3, [pc, #104]	@ (8003e90 <MX_TIM1_Init+0x98>)
 8003e28:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 8003e2c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e2e:	4b18      	ldr	r3, [pc, #96]	@ (8003e90 <MX_TIM1_Init+0x98>)
 8003e30:	2200      	movs	r2, #0
 8003e32:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003e34:	4b16      	ldr	r3, [pc, #88]	@ (8003e90 <MX_TIM1_Init+0x98>)
 8003e36:	2200      	movs	r2, #0
 8003e38:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e3a:	4b15      	ldr	r3, [pc, #84]	@ (8003e90 <MX_TIM1_Init+0x98>)
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003e40:	4813      	ldr	r0, [pc, #76]	@ (8003e90 <MX_TIM1_Init+0x98>)
 8003e42:	f007 ffee 	bl	800be22 <HAL_TIM_Base_Init>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d001      	beq.n	8003e50 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8003e4c:	f000 fcf8 	bl	8004840 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e50:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003e54:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003e56:	f107 0308 	add.w	r3, r7, #8
 8003e5a:	4619      	mov	r1, r3
 8003e5c:	480c      	ldr	r0, [pc, #48]	@ (8003e90 <MX_TIM1_Init+0x98>)
 8003e5e:	f008 fb4d 	bl	800c4fc <HAL_TIM_ConfigClockSource>
 8003e62:	4603      	mov	r3, r0
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d001      	beq.n	8003e6c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8003e68:	f000 fcea 	bl	8004840 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e70:	2300      	movs	r3, #0
 8003e72:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003e74:	463b      	mov	r3, r7
 8003e76:	4619      	mov	r1, r3
 8003e78:	4805      	ldr	r0, [pc, #20]	@ (8003e90 <MX_TIM1_Init+0x98>)
 8003e7a:	f008 ff07 	bl	800cc8c <HAL_TIMEx_MasterConfigSynchronization>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d001      	beq.n	8003e88 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8003e84:	f000 fcdc 	bl	8004840 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003e88:	bf00      	nop
 8003e8a:	3718      	adds	r7, #24
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	20000c34 	.word	0x20000c34
 8003e94:	40010000 	.word	0x40010000

08003e98 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b08e      	sub	sp, #56	@ 0x38
 8003e9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003e9e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	601a      	str	r2, [r3, #0]
 8003ea6:	605a      	str	r2, [r3, #4]
 8003ea8:	609a      	str	r2, [r3, #8]
 8003eaa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003eac:	f107 0320 	add.w	r3, r7, #32
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	601a      	str	r2, [r3, #0]
 8003eb4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003eb6:	1d3b      	adds	r3, r7, #4
 8003eb8:	2200      	movs	r2, #0
 8003eba:	601a      	str	r2, [r3, #0]
 8003ebc:	605a      	str	r2, [r3, #4]
 8003ebe:	609a      	str	r2, [r3, #8]
 8003ec0:	60da      	str	r2, [r3, #12]
 8003ec2:	611a      	str	r2, [r3, #16]
 8003ec4:	615a      	str	r2, [r3, #20]
 8003ec6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003ec8:	4b32      	ldr	r3, [pc, #200]	@ (8003f94 <MX_TIM3_Init+0xfc>)
 8003eca:	4a33      	ldr	r2, [pc, #204]	@ (8003f98 <MX_TIM3_Init+0x100>)
 8003ecc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15;
 8003ece:	4b31      	ldr	r3, [pc, #196]	@ (8003f94 <MX_TIM3_Init+0xfc>)
 8003ed0:	220f      	movs	r2, #15
 8003ed2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ed4:	4b2f      	ldr	r3, [pc, #188]	@ (8003f94 <MX_TIM3_Init+0xfc>)
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 59999;
 8003eda:	4b2e      	ldr	r3, [pc, #184]	@ (8003f94 <MX_TIM3_Init+0xfc>)
 8003edc:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8003ee0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ee2:	4b2c      	ldr	r3, [pc, #176]	@ (8003f94 <MX_TIM3_Init+0xfc>)
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ee8:	4b2a      	ldr	r3, [pc, #168]	@ (8003f94 <MX_TIM3_Init+0xfc>)
 8003eea:	2200      	movs	r2, #0
 8003eec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003eee:	4829      	ldr	r0, [pc, #164]	@ (8003f94 <MX_TIM3_Init+0xfc>)
 8003ef0:	f007 ff97 	bl	800be22 <HAL_TIM_Base_Init>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d001      	beq.n	8003efe <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8003efa:	f000 fca1 	bl	8004840 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003efe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003f02:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003f04:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003f08:	4619      	mov	r1, r3
 8003f0a:	4822      	ldr	r0, [pc, #136]	@ (8003f94 <MX_TIM3_Init+0xfc>)
 8003f0c:	f008 faf6 	bl	800c4fc <HAL_TIM_ConfigClockSource>
 8003f10:	4603      	mov	r3, r0
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d001      	beq.n	8003f1a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8003f16:	f000 fc93 	bl	8004840 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003f1a:	481e      	ldr	r0, [pc, #120]	@ (8003f94 <MX_TIM3_Init+0xfc>)
 8003f1c:	f008 f832 	bl	800bf84 <HAL_TIM_PWM_Init>
 8003f20:	4603      	mov	r3, r0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d001      	beq.n	8003f2a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8003f26:	f000 fc8b 	bl	8004840 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003f32:	f107 0320 	add.w	r3, r7, #32
 8003f36:	4619      	mov	r1, r3
 8003f38:	4816      	ldr	r0, [pc, #88]	@ (8003f94 <MX_TIM3_Init+0xfc>)
 8003f3a:	f008 fea7 	bl	800cc8c <HAL_TIMEx_MasterConfigSynchronization>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d001      	beq.n	8003f48 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8003f44:	f000 fc7c 	bl	8004840 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003f48:	2360      	movs	r3, #96	@ 0x60
 8003f4a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003f50:	2300      	movs	r3, #0
 8003f52:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003f54:	2300      	movs	r3, #0
 8003f56:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003f58:	1d3b      	adds	r3, r7, #4
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	4619      	mov	r1, r3
 8003f5e:	480d      	ldr	r0, [pc, #52]	@ (8003f94 <MX_TIM3_Init+0xfc>)
 8003f60:	f008 fa0a 	bl	800c378 <HAL_TIM_PWM_ConfigChannel>
 8003f64:	4603      	mov	r3, r0
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d001      	beq.n	8003f6e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8003f6a:	f000 fc69 	bl	8004840 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003f6e:	1d3b      	adds	r3, r7, #4
 8003f70:	2204      	movs	r2, #4
 8003f72:	4619      	mov	r1, r3
 8003f74:	4807      	ldr	r0, [pc, #28]	@ (8003f94 <MX_TIM3_Init+0xfc>)
 8003f76:	f008 f9ff 	bl	800c378 <HAL_TIM_PWM_ConfigChannel>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d001      	beq.n	8003f84 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8003f80:	f000 fc5e 	bl	8004840 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003f84:	4803      	ldr	r0, [pc, #12]	@ (8003f94 <MX_TIM3_Init+0xfc>)
 8003f86:	f000 fe2f 	bl	8004be8 <HAL_TIM_MspPostInit>

}
 8003f8a:	bf00      	nop
 8003f8c:	3738      	adds	r7, #56	@ 0x38
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	20000c7c 	.word	0x20000c7c
 8003f98:	40000400 	.word	0x40000400

08003f9c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003fa0:	4b11      	ldr	r3, [pc, #68]	@ (8003fe8 <MX_USART1_UART_Init+0x4c>)
 8003fa2:	4a12      	ldr	r2, [pc, #72]	@ (8003fec <MX_USART1_UART_Init+0x50>)
 8003fa4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003fa6:	4b10      	ldr	r3, [pc, #64]	@ (8003fe8 <MX_USART1_UART_Init+0x4c>)
 8003fa8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003fac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003fae:	4b0e      	ldr	r3, [pc, #56]	@ (8003fe8 <MX_USART1_UART_Init+0x4c>)
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003fb4:	4b0c      	ldr	r3, [pc, #48]	@ (8003fe8 <MX_USART1_UART_Init+0x4c>)
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003fba:	4b0b      	ldr	r3, [pc, #44]	@ (8003fe8 <MX_USART1_UART_Init+0x4c>)
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003fc0:	4b09      	ldr	r3, [pc, #36]	@ (8003fe8 <MX_USART1_UART_Init+0x4c>)
 8003fc2:	220c      	movs	r2, #12
 8003fc4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003fc6:	4b08      	ldr	r3, [pc, #32]	@ (8003fe8 <MX_USART1_UART_Init+0x4c>)
 8003fc8:	2200      	movs	r2, #0
 8003fca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003fcc:	4b06      	ldr	r3, [pc, #24]	@ (8003fe8 <MX_USART1_UART_Init+0x4c>)
 8003fce:	2200      	movs	r2, #0
 8003fd0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003fd2:	4805      	ldr	r0, [pc, #20]	@ (8003fe8 <MX_USART1_UART_Init+0x4c>)
 8003fd4:	f008 fedc 	bl	800cd90 <HAL_UART_Init>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d001      	beq.n	8003fe2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003fde:	f000 fc2f 	bl	8004840 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003fe2:	bf00      	nop
 8003fe4:	bd80      	pop	{r7, pc}
 8003fe6:	bf00      	nop
 8003fe8:	20000cc4 	.word	0x20000cc4
 8003fec:	40011000 	.word	0x40011000

08003ff0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b082      	sub	sp, #8
 8003ff4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	607b      	str	r3, [r7, #4]
 8003ffa:	4b1b      	ldr	r3, [pc, #108]	@ (8004068 <MX_DMA_Init+0x78>)
 8003ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ffe:	4a1a      	ldr	r2, [pc, #104]	@ (8004068 <MX_DMA_Init+0x78>)
 8004000:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004004:	6313      	str	r3, [r2, #48]	@ 0x30
 8004006:	4b18      	ldr	r3, [pc, #96]	@ (8004068 <MX_DMA_Init+0x78>)
 8004008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800400a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800400e:	607b      	str	r3, [r7, #4]
 8004010:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004012:	2300      	movs	r3, #0
 8004014:	603b      	str	r3, [r7, #0]
 8004016:	4b14      	ldr	r3, [pc, #80]	@ (8004068 <MX_DMA_Init+0x78>)
 8004018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800401a:	4a13      	ldr	r2, [pc, #76]	@ (8004068 <MX_DMA_Init+0x78>)
 800401c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004020:	6313      	str	r3, [r2, #48]	@ 0x30
 8004022:	4b11      	ldr	r3, [pc, #68]	@ (8004068 <MX_DMA_Init+0x78>)
 8004024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004026:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800402a:	603b      	str	r3, [r7, #0]
 800402c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800402e:	2200      	movs	r2, #0
 8004030:	2100      	movs	r1, #0
 8004032:	200b      	movs	r0, #11
 8004034:	f001 fe0f 	bl	8005c56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8004038:	200b      	movs	r0, #11
 800403a:	f001 fe28 	bl	8005c8e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800403e:	2200      	movs	r2, #0
 8004040:	2100      	movs	r1, #0
 8004042:	200c      	movs	r0, #12
 8004044:	f001 fe07 	bl	8005c56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8004048:	200c      	movs	r0, #12
 800404a:	f001 fe20 	bl	8005c8e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800404e:	2200      	movs	r2, #0
 8004050:	2100      	movs	r1, #0
 8004052:	2038      	movs	r0, #56	@ 0x38
 8004054:	f001 fdff 	bl	8005c56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8004058:	2038      	movs	r0, #56	@ 0x38
 800405a:	f001 fe18 	bl	8005c8e <HAL_NVIC_EnableIRQ>

}
 800405e:	bf00      	nop
 8004060:	3708      	adds	r7, #8
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
 8004066:	bf00      	nop
 8004068:	40023800 	.word	0x40023800

0800406c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b08a      	sub	sp, #40	@ 0x28
 8004070:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004072:	f107 0314 	add.w	r3, r7, #20
 8004076:	2200      	movs	r2, #0
 8004078:	601a      	str	r2, [r3, #0]
 800407a:	605a      	str	r2, [r3, #4]
 800407c:	609a      	str	r2, [r3, #8]
 800407e:	60da      	str	r2, [r3, #12]
 8004080:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004082:	2300      	movs	r3, #0
 8004084:	613b      	str	r3, [r7, #16]
 8004086:	4b60      	ldr	r3, [pc, #384]	@ (8004208 <MX_GPIO_Init+0x19c>)
 8004088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800408a:	4a5f      	ldr	r2, [pc, #380]	@ (8004208 <MX_GPIO_Init+0x19c>)
 800408c:	f043 0304 	orr.w	r3, r3, #4
 8004090:	6313      	str	r3, [r2, #48]	@ 0x30
 8004092:	4b5d      	ldr	r3, [pc, #372]	@ (8004208 <MX_GPIO_Init+0x19c>)
 8004094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004096:	f003 0304 	and.w	r3, r3, #4
 800409a:	613b      	str	r3, [r7, #16]
 800409c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800409e:	2300      	movs	r3, #0
 80040a0:	60fb      	str	r3, [r7, #12]
 80040a2:	4b59      	ldr	r3, [pc, #356]	@ (8004208 <MX_GPIO_Init+0x19c>)
 80040a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040a6:	4a58      	ldr	r2, [pc, #352]	@ (8004208 <MX_GPIO_Init+0x19c>)
 80040a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80040ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80040ae:	4b56      	ldr	r3, [pc, #344]	@ (8004208 <MX_GPIO_Init+0x19c>)
 80040b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040b6:	60fb      	str	r3, [r7, #12]
 80040b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80040ba:	2300      	movs	r3, #0
 80040bc:	60bb      	str	r3, [r7, #8]
 80040be:	4b52      	ldr	r3, [pc, #328]	@ (8004208 <MX_GPIO_Init+0x19c>)
 80040c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040c2:	4a51      	ldr	r2, [pc, #324]	@ (8004208 <MX_GPIO_Init+0x19c>)
 80040c4:	f043 0301 	orr.w	r3, r3, #1
 80040c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80040ca:	4b4f      	ldr	r3, [pc, #316]	@ (8004208 <MX_GPIO_Init+0x19c>)
 80040cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040ce:	f003 0301 	and.w	r3, r3, #1
 80040d2:	60bb      	str	r3, [r7, #8]
 80040d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80040d6:	2300      	movs	r3, #0
 80040d8:	607b      	str	r3, [r7, #4]
 80040da:	4b4b      	ldr	r3, [pc, #300]	@ (8004208 <MX_GPIO_Init+0x19c>)
 80040dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040de:	4a4a      	ldr	r2, [pc, #296]	@ (8004208 <MX_GPIO_Init+0x19c>)
 80040e0:	f043 0302 	orr.w	r3, r3, #2
 80040e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80040e6:	4b48      	ldr	r3, [pc, #288]	@ (8004208 <MX_GPIO_Init+0x19c>)
 80040e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040ea:	f003 0302 	and.w	r3, r3, #2
 80040ee:	607b      	str	r3, [r7, #4]
 80040f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80040f2:	2200      	movs	r2, #0
 80040f4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80040f8:	4844      	ldr	r0, [pc, #272]	@ (800420c <MX_GPIO_Init+0x1a0>)
 80040fa:	f002 fb9b 	bl	8006834 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ESP_EN_Pin|M2_IN2_Pin, GPIO_PIN_RESET);
 80040fe:	2200      	movs	r2, #0
 8004100:	210c      	movs	r1, #12
 8004102:	4843      	ldr	r0, [pc, #268]	@ (8004210 <MX_GPIO_Init+0x1a4>)
 8004104:	f002 fb96 	bl	8006834 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, M1_IN1_Pin|M1_IN2_Pin|M2_IN1_Pin, GPIO_PIN_RESET);
 8004108:	2200      	movs	r2, #0
 800410a:	f44f 4106 	mov.w	r1, #34304	@ 0x8600
 800410e:	4841      	ldr	r0, [pc, #260]	@ (8004214 <MX_GPIO_Init+0x1a8>)
 8004110:	f002 fb90 	bl	8006834 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8004114:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004118:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800411a:	2301      	movs	r3, #1
 800411c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800411e:	2300      	movs	r3, #0
 8004120:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004122:	2300      	movs	r3, #0
 8004124:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8004126:	f107 0314 	add.w	r3, r7, #20
 800412a:	4619      	mov	r1, r3
 800412c:	4837      	ldr	r0, [pc, #220]	@ (800420c <MX_GPIO_Init+0x1a0>)
 800412e:	f002 f9e5 	bl	80064fc <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY_Pin */
  GPIO_InitStruct.Pin = KEY_Pin;
 8004132:	2301      	movs	r3, #1
 8004134:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004136:	2300      	movs	r3, #0
 8004138:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800413a:	2300      	movs	r3, #0
 800413c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 800413e:	f107 0314 	add.w	r3, r7, #20
 8004142:	4619      	mov	r1, r3
 8004144:	4833      	ldr	r0, [pc, #204]	@ (8004214 <MX_GPIO_Init+0x1a8>)
 8004146:	f002 f9d9 	bl	80064fc <HAL_GPIO_Init>

  /*Configure GPIO pins : ESP_EN_Pin M2_IN2_Pin */
  GPIO_InitStruct.Pin = ESP_EN_Pin|M2_IN2_Pin;
 800414a:	230c      	movs	r3, #12
 800414c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800414e:	2301      	movs	r3, #1
 8004150:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004152:	2300      	movs	r3, #0
 8004154:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004156:	2300      	movs	r3, #0
 8004158:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800415a:	f107 0314 	add.w	r3, r7, #20
 800415e:	4619      	mov	r1, r3
 8004160:	482b      	ldr	r0, [pc, #172]	@ (8004210 <MX_GPIO_Init+0x1a4>)
 8004162:	f002 f9cb 	bl	80064fc <HAL_GPIO_Init>

  /*Configure GPIO pin : M1_ENC_A_Pin */
  GPIO_InitStruct.Pin = M1_ENC_A_Pin;
 8004166:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800416a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800416c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004170:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004172:	2300      	movs	r3, #0
 8004174:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(M1_ENC_A_GPIO_Port, &GPIO_InitStruct);
 8004176:	f107 0314 	add.w	r3, r7, #20
 800417a:	4619      	mov	r1, r3
 800417c:	4824      	ldr	r0, [pc, #144]	@ (8004210 <MX_GPIO_Init+0x1a4>)
 800417e:	f002 f9bd 	bl	80064fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8004182:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8004186:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004188:	2302      	movs	r3, #2
 800418a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800418c:	2300      	movs	r3, #0
 800418e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004190:	2303      	movs	r3, #3
 8004192:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004194:	2305      	movs	r3, #5
 8004196:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004198:	f107 0314 	add.w	r3, r7, #20
 800419c:	4619      	mov	r1, r3
 800419e:	481c      	ldr	r0, [pc, #112]	@ (8004210 <MX_GPIO_Init+0x1a4>)
 80041a0:	f002 f9ac 	bl	80064fc <HAL_GPIO_Init>

  /*Configure GPIO pin : M2_ENC_A_Pin */
  GPIO_InitStruct.Pin = M2_ENC_A_Pin;
 80041a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80041a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80041aa:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80041ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041b0:	2300      	movs	r3, #0
 80041b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(M2_ENC_A_GPIO_Port, &GPIO_InitStruct);
 80041b4:	f107 0314 	add.w	r3, r7, #20
 80041b8:	4619      	mov	r1, r3
 80041ba:	4816      	ldr	r0, [pc, #88]	@ (8004214 <MX_GPIO_Init+0x1a8>)
 80041bc:	f002 f99e 	bl	80064fc <HAL_GPIO_Init>

  /*Configure GPIO pins : M1_IN1_Pin M1_IN2_Pin M2_IN1_Pin */
  GPIO_InitStruct.Pin = M1_IN1_Pin|M1_IN2_Pin|M2_IN1_Pin;
 80041c0:	f44f 4306 	mov.w	r3, #34304	@ 0x8600
 80041c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80041c6:	2301      	movs	r3, #1
 80041c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041ca:	2300      	movs	r3, #0
 80041cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041ce:	2300      	movs	r3, #0
 80041d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041d2:	f107 0314 	add.w	r3, r7, #20
 80041d6:	4619      	mov	r1, r3
 80041d8:	480e      	ldr	r0, [pc, #56]	@ (8004214 <MX_GPIO_Init+0x1a8>)
 80041da:	f002 f98f 	bl	80064fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80041de:	2200      	movs	r2, #0
 80041e0:	2100      	movs	r1, #0
 80041e2:	2017      	movs	r0, #23
 80041e4:	f001 fd37 	bl	8005c56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80041e8:	2017      	movs	r0, #23
 80041ea:	f001 fd50 	bl	8005c8e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80041ee:	2200      	movs	r2, #0
 80041f0:	2100      	movs	r1, #0
 80041f2:	2028      	movs	r0, #40	@ 0x28
 80041f4:	f001 fd2f 	bl	8005c56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80041f8:	2028      	movs	r0, #40	@ 0x28
 80041fa:	f001 fd48 	bl	8005c8e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80041fe:	bf00      	nop
 8004200:	3728      	adds	r7, #40	@ 0x28
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop
 8004208:	40023800 	.word	0x40023800
 800420c:	40020800 	.word	0x40020800
 8004210:	40020400 	.word	0x40020400
 8004214:	40020000 	.word	0x40020000

08004218 <Init_Timing>:

/* USER CODE BEGIN 4 */
/************************************ USER INIT FUNCTIONS ****************************************/
/* INICIALIZACIÓN DE TIMERS Y PWM*/
void Init_Timing(){
 8004218:	b580      	push	{r7, lr}
 800421a:	af00      	add	r7, sp, #0
	  if(HAL_TIM_Base_Start_IT(&htim1) != HAL_OK){
 800421c:	4819      	ldr	r0, [pc, #100]	@ (8004284 <Init_Timing+0x6c>)
 800421e:	f007 fe4f 	bl	800bec0 <HAL_TIM_Base_Start_IT>
 8004222:	4603      	mov	r3, r0
 8004224:	2b00      	cmp	r3, #0
 8004226:	d005      	beq.n	8004234 <Init_Timing+0x1c>
		  comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"TIM1 INIT", 9);
 8004228:	2309      	movs	r3, #9
 800422a:	4a17      	ldr	r2, [pc, #92]	@ (8004288 <Init_Timing+0x70>)
 800422c:	21ee      	movs	r1, #238	@ 0xee
 800422e:	4817      	ldr	r0, [pc, #92]	@ (800428c <Init_Timing+0x74>)
 8004230:	f7fd fd48 	bl	8001cc4 <comm_sendCMD>
	  }
	  if(HAL_TIM_Base_Start_IT(&htim3) != HAL_OK){
 8004234:	4816      	ldr	r0, [pc, #88]	@ (8004290 <Init_Timing+0x78>)
 8004236:	f007 fe43 	bl	800bec0 <HAL_TIM_Base_Start_IT>
 800423a:	4603      	mov	r3, r0
 800423c:	2b00      	cmp	r3, #0
 800423e:	d005      	beq.n	800424c <Init_Timing+0x34>
	  	  comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"TIM3 INIT BASE", 14);
 8004240:	230e      	movs	r3, #14
 8004242:	4a14      	ldr	r2, [pc, #80]	@ (8004294 <Init_Timing+0x7c>)
 8004244:	21ee      	movs	r1, #238	@ 0xee
 8004246:	4811      	ldr	r0, [pc, #68]	@ (800428c <Init_Timing+0x74>)
 8004248:	f7fd fd3c 	bl	8001cc4 <comm_sendCMD>
	  }
	  if(HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1) != HAL_OK){
 800424c:	2100      	movs	r1, #0
 800424e:	4810      	ldr	r0, [pc, #64]	@ (8004290 <Init_Timing+0x78>)
 8004250:	f007 fef2 	bl	800c038 <HAL_TIM_PWM_Start>
 8004254:	4603      	mov	r3, r0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d005      	beq.n	8004266 <Init_Timing+0x4e>
		  comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"TIM3 INIT PWM1", 14);
 800425a:	230e      	movs	r3, #14
 800425c:	4a0e      	ldr	r2, [pc, #56]	@ (8004298 <Init_Timing+0x80>)
 800425e:	21ee      	movs	r1, #238	@ 0xee
 8004260:	480a      	ldr	r0, [pc, #40]	@ (800428c <Init_Timing+0x74>)
 8004262:	f7fd fd2f 	bl	8001cc4 <comm_sendCMD>
	  }
	  if(HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2) != HAL_OK){
 8004266:	2104      	movs	r1, #4
 8004268:	4809      	ldr	r0, [pc, #36]	@ (8004290 <Init_Timing+0x78>)
 800426a:	f007 fee5 	bl	800c038 <HAL_TIM_PWM_Start>
 800426e:	4603      	mov	r3, r0
 8004270:	2b00      	cmp	r3, #0
 8004272:	d005      	beq.n	8004280 <Init_Timing+0x68>
		  comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"TIM3 INIT PWM2", 14);
 8004274:	230e      	movs	r3, #14
 8004276:	4a09      	ldr	r2, [pc, #36]	@ (800429c <Init_Timing+0x84>)
 8004278:	21ee      	movs	r1, #238	@ 0xee
 800427a:	4804      	ldr	r0, [pc, #16]	@ (800428c <Init_Timing+0x74>)
 800427c:	f7fd fd22 	bl	8001cc4 <comm_sendCMD>
	  }
}
 8004280:	bf00      	nop
 8004282:	bd80      	pop	{r7, pc}
 8004284:	20000c34 	.word	0x20000c34
 8004288:	08012bc4 	.word	0x08012bc4
 800428c:	2000125c 	.word	0x2000125c
 8004290:	20000c7c 	.word	0x20000c7c
 8004294:	08012bd0 	.word	0x08012bd0
 8004298:	08012be0 	.word	0x08012be0
 800429c:	08012bf0 	.word	0x08012bf0

080042a0 <Init_MPU6050>:
/* FIN INICIALIZACIÓN DE TIMERS Y PWM*/
/* INICIALIZACIÓN DE MPU6050 */
void Init_MPU6050(){
 80042a0:	b580      	push	{r7, lr}
 80042a2:	af00      	add	r7, sp, #0
	if(HAL_I2C_IsDeviceReady(&hi2c1, MPU6050_ADDR, 1, 10000) != HAL_OK){
 80042a4:	f242 7310 	movw	r3, #10000	@ 0x2710
 80042a8:	2201      	movs	r2, #1
 80042aa:	21d0      	movs	r1, #208	@ 0xd0
 80042ac:	4811      	ldr	r0, [pc, #68]	@ (80042f4 <Init_MPU6050+0x54>)
 80042ae:	f003 fb7f 	bl	80079b0 <HAL_I2C_IsDeviceReady>
 80042b2:	4603      	mov	r3, r0
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d006      	beq.n	80042c6 <Init_MPU6050+0x26>
		comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"MPU6050 READY", 13);
 80042b8:	230d      	movs	r3, #13
 80042ba:	4a0f      	ldr	r2, [pc, #60]	@ (80042f8 <Init_MPU6050+0x58>)
 80042bc:	21ee      	movs	r1, #238	@ 0xee
 80042be:	480f      	ldr	r0, [pc, #60]	@ (80042fc <Init_MPU6050+0x5c>)
 80042c0:	f7fd fd00 	bl	8001cc4 <comm_sendCMD>
			comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"MPU6050 INIT", 12);
		}else{
			MPU6050_Calibrate(&MPU6050);
		}
	}
}
 80042c4:	e013      	b.n	80042ee <Init_MPU6050+0x4e>
		MPU6050_Set_I2C_Communication(&I2C_1_Abstract_Mem_Write_Blocking, &I2C_1_Abstract_Mem_Read_Blocking);
 80042c6:	490e      	ldr	r1, [pc, #56]	@ (8004300 <Init_MPU6050+0x60>)
 80042c8:	480e      	ldr	r0, [pc, #56]	@ (8004304 <Init_MPU6050+0x64>)
 80042ca:	f7fc fad9 	bl	8000880 <MPU6050_Set_I2C_Communication>
		if(MPU6050_Init(&MPU6050) != SYS_OK){
 80042ce:	480e      	ldr	r0, [pc, #56]	@ (8004308 <Init_MPU6050+0x68>)
 80042d0:	f7fc faec 	bl	80008ac <MPU6050_Init>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d006      	beq.n	80042e8 <Init_MPU6050+0x48>
			comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"MPU6050 INIT", 12);
 80042da:	230c      	movs	r3, #12
 80042dc:	4a0b      	ldr	r2, [pc, #44]	@ (800430c <Init_MPU6050+0x6c>)
 80042de:	21ee      	movs	r1, #238	@ 0xee
 80042e0:	4806      	ldr	r0, [pc, #24]	@ (80042fc <Init_MPU6050+0x5c>)
 80042e2:	f7fd fcef 	bl	8001cc4 <comm_sendCMD>
}
 80042e6:	e002      	b.n	80042ee <Init_MPU6050+0x4e>
			MPU6050_Calibrate(&MPU6050);
 80042e8:	4807      	ldr	r0, [pc, #28]	@ (8004308 <Init_MPU6050+0x68>)
 80042ea:	f7fc fb91 	bl	8000a10 <MPU6050_Calibrate>
}
 80042ee:	bf00      	nop
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	bf00      	nop
 80042f4:	20000b20 	.word	0x20000b20
 80042f8:	08012c00 	.word	0x08012c00
 80042fc:	2000125c 	.word	0x2000125c
 8004300:	08004661 	.word	0x08004661
 8004304:	08004621 	.word	0x08004621
 8004308:	20000d60 	.word	0x20000d60
 800430c:	08012c10 	.word	0x08012c10

08004310 <Init_Display>:
/* FIN INICIALIZACIÓN DE MPU6050 */
/* INICIALIZACIÓN DISPLAY*/
void Init_Display(){
 8004310:	b580      	push	{r7, lr}
 8004312:	b082      	sub	sp, #8
 8004314:	af02      	add	r7, sp, #8
	Display.refreshCounter_10ms = DISPLAY_LOW_REFRESH_RATE_10MS;
 8004316:	4b1f      	ldr	r3, [pc, #124]	@ (8004394 <Init_Display+0x84>)
 8004318:	2264      	movs	r2, #100	@ 0x64
 800431a:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
	Display.refreshRate_10ms = DISPLAY_LOW_REFRESH_RATE_10MS;
 800431e:	4b1d      	ldr	r3, [pc, #116]	@ (8004394 <Init_Display+0x84>)
 8004320:	2264      	movs	r2, #100	@ 0x64
 8004322:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412

	if(HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 10000) != HAL_OK){
 8004326:	f242 7310 	movw	r3, #10000	@ 0x2710
 800432a:	2201      	movs	r2, #1
 800432c:	2178      	movs	r1, #120	@ 0x78
 800432e:	481a      	ldr	r0, [pc, #104]	@ (8004398 <Init_Display+0x88>)
 8004330:	f003 fb3e 	bl	80079b0 <HAL_I2C_IsDeviceReady>
 8004334:	4603      	mov	r3, r0
 8004336:	2b00      	cmp	r3, #0
 8004338:	d006      	beq.n	8004348 <Init_Display+0x38>
		comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"OLED READY", 10);
 800433a:	230a      	movs	r3, #10
 800433c:	4a17      	ldr	r2, [pc, #92]	@ (800439c <Init_Display+0x8c>)
 800433e:	21ee      	movs	r1, #238	@ 0xee
 8004340:	4817      	ldr	r0, [pc, #92]	@ (80043a0 <Init_Display+0x90>)
 8004342:	f7fd fcbf 	bl	8001cc4 <comm_sendCMD>
			Display_DrawBitmap(0,0, uner_logo, 128, 64, 1);
			Display.isInit = TRUE;
			Display.timer = HAL_GetTick();
		}
	}
}
 8004346:	e022      	b.n	800438e <Init_Display+0x7e>
		Display_Set_I2C_Master_Transmit(&I2C_1_Abstract_Mem_DMA_Transmit, &I2C_1_Abstract_Master_Transmit_Blocking);
 8004348:	4916      	ldr	r1, [pc, #88]	@ (80043a4 <Init_Display+0x94>)
 800434a:	4817      	ldr	r0, [pc, #92]	@ (80043a8 <Init_Display+0x98>)
 800434c:	f7fc fd36 	bl	8000dbc <Display_Set_I2C_Master_Transmit>
		if(Display_Init() != SYS_OK){
 8004350:	f7fc fd4a 	bl	8000de8 <Display_Init>
 8004354:	4603      	mov	r3, r0
 8004356:	2b00      	cmp	r3, #0
 8004358:	d006      	beq.n	8004368 <Init_Display+0x58>
			comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"OLED INIT", 9);
 800435a:	2309      	movs	r3, #9
 800435c:	4a13      	ldr	r2, [pc, #76]	@ (80043ac <Init_Display+0x9c>)
 800435e:	21ee      	movs	r1, #238	@ 0xee
 8004360:	480f      	ldr	r0, [pc, #60]	@ (80043a0 <Init_Display+0x90>)
 8004362:	f7fd fcaf 	bl	8001cc4 <comm_sendCMD>
}
 8004366:	e012      	b.n	800438e <Init_Display+0x7e>
			Display_DrawBitmap(0,0, uner_logo, 128, 64, 1);
 8004368:	2301      	movs	r3, #1
 800436a:	9301      	str	r3, [sp, #4]
 800436c:	2340      	movs	r3, #64	@ 0x40
 800436e:	9300      	str	r3, [sp, #0]
 8004370:	2380      	movs	r3, #128	@ 0x80
 8004372:	4a0f      	ldr	r2, [pc, #60]	@ (80043b0 <Init_Display+0xa0>)
 8004374:	2100      	movs	r1, #0
 8004376:	2000      	movs	r0, #0
 8004378:	f7fc ffcc 	bl	8001314 <Display_DrawBitmap>
			Display.isInit = TRUE;
 800437c:	4b05      	ldr	r3, [pc, #20]	@ (8004394 <Init_Display+0x84>)
 800437e:	2201      	movs	r2, #1
 8004380:	701a      	strb	r2, [r3, #0]
			Display.timer = HAL_GetTick();
 8004382:	f000 fe41 	bl	8005008 <HAL_GetTick>
 8004386:	4603      	mov	r3, r0
 8004388:	4a02      	ldr	r2, [pc, #8]	@ (8004394 <Init_Display+0x84>)
 800438a:	f8c2 3404 	str.w	r3, [r2, #1028]	@ 0x404
}
 800438e:	bf00      	nop
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}
 8004394:	20000e24 	.word	0x20000e24
 8004398:	20000b20 	.word	0x20000b20
 800439c:	08012c20 	.word	0x08012c20
 80043a0:	2000125c 	.word	0x2000125c
 80043a4:	080045ed 	.word	0x080045ed
 80043a8:	080045b1 	.word	0x080045b1
 80043ac:	08012c2c 	.word	0x08012c2c
 80043b0:	08012de8 	.word	0x08012de8

080043b4 <HAL_TIM_PeriodElapsedCallback>:
/* FIN INICIALIZACIÓN DISPLAY */
/************************************ END USER INIT FUNCTIONS ****************************************/
/**************************************** HAL CALLBACKS ***************************************/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){ //			1/4000s
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b084      	sub	sp, #16
 80043b8:	af02      	add	r7, sp, #8
 80043ba:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1){
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a1a      	ldr	r2, [pc, #104]	@ (800442c <HAL_TIM_PeriodElapsedCallback+0x78>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d123      	bne.n	800440e <HAL_TIM_PeriodElapsedCallback+0x5a>

		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&Analog.raw, 9);
 80043c6:	2209      	movs	r2, #9
 80043c8:	4919      	ldr	r1, [pc, #100]	@ (8004430 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80043ca:	481a      	ldr	r0, [pc, #104]	@ (8004434 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80043cc:	f000 ffa0 	bl	8005310 <HAL_ADC_Start_DMA>
		is5ms--;
 80043d0:	4b19      	ldr	r3, [pc, #100]	@ (8004438 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80043d2:	781b      	ldrb	r3, [r3, #0]
 80043d4:	3b01      	subs	r3, #1
 80043d6:	b2da      	uxtb	r2, r3
 80043d8:	4b17      	ldr	r3, [pc, #92]	@ (8004438 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80043da:	701a      	strb	r2, [r3, #0]
		if(!is5ms){
 80043dc:	4b16      	ldr	r3, [pc, #88]	@ (8004438 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80043de:	781b      	ldrb	r3, [r3, #0]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d114      	bne.n	800440e <HAL_TIM_PeriodElapsedCallback+0x5a>
			is5ms = 20;
 80043e4:	4b14      	ldr	r3, [pc, #80]	@ (8004438 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80043e6:	2214      	movs	r2, #20
 80043e8:	701a      	strb	r2, [r3, #0]
			if(MPU6050.isInit){
 80043ea:	4b14      	ldr	r3, [pc, #80]	@ (800443c <HAL_TIM_PeriodElapsedCallback+0x88>)
 80043ec:	f893 30c2 	ldrb.w	r3, [r3, #194]	@ 0xc2
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d00c      	beq.n	800440e <HAL_TIM_PeriodElapsedCallback+0x5a>
				HAL_I2C_Mem_Read_DMA(&hi2c1, MPU6050_ADDR, ACCEL_XOUT_REG, 1, MPU6050.bit_data, 14);
 80043f4:	230e      	movs	r3, #14
 80043f6:	9301      	str	r3, [sp, #4]
 80043f8:	4b11      	ldr	r3, [pc, #68]	@ (8004440 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80043fa:	9300      	str	r3, [sp, #0]
 80043fc:	2301      	movs	r3, #1
 80043fe:	223b      	movs	r2, #59	@ 0x3b
 8004400:	21d0      	movs	r1, #208	@ 0xd0
 8004402:	4810      	ldr	r0, [pc, #64]	@ (8004444 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8004404:	f003 f944 	bl	8007690 <HAL_I2C_Mem_Read_DMA>
				Display_I2C_DMA_Ready(FALSE);
 8004408:	2000      	movs	r0, #0
 800440a:	f7fc fec7 	bl	800119c <Display_I2C_DMA_Ready>
			}
		}
	}
	if(htim->Instance == TIM3){
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a0d      	ldr	r2, [pc, #52]	@ (8004448 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d104      	bne.n	8004422 <HAL_TIM_PeriodElapsedCallback+0x6e>
		IS10MS = TRUE;
 8004418:	4a0c      	ldr	r2, [pc, #48]	@ (800444c <HAL_TIM_PeriodElapsedCallback+0x98>)
 800441a:	7813      	ldrb	r3, [r2, #0]
 800441c:	f043 0301 	orr.w	r3, r3, #1
 8004420:	7013      	strb	r3, [r2, #0]
	}
}
 8004422:	bf00      	nop
 8004424:	3708      	adds	r7, #8
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
 800442a:	bf00      	nop
 800442c:	40010000 	.word	0x40010000
 8004430:	20001238 	.word	0x20001238
 8004434:	20000a78 	.word	0x20000a78
 8004438:	2000000e 	.word	0x2000000e
 800443c:	20000d60 	.word	0x20000d60
 8004440:	20000e14 	.word	0x20000e14
 8004444:	20000b20 	.word	0x20000b20
 8004448:	40000400 	.word	0x40000400
 800444c:	20000d0c 	.word	0x20000d0c

08004450 <HAL_I2C_MemTxCpltCallback>:

void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c){
 8004450:	b580      	push	{r7, lr}
 8004452:	b082      	sub	sp, #8
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
	if(hi2c->Devaddress == SSD1306_I2C_ADDR){
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800445c:	2b78      	cmp	r3, #120	@ 0x78
 800445e:	d107      	bne.n	8004470 <HAL_I2C_MemTxCpltCallback+0x20>
		if(!MPU6050.isInit){
 8004460:	4b05      	ldr	r3, [pc, #20]	@ (8004478 <HAL_I2C_MemTxCpltCallback+0x28>)
 8004462:	f893 30c2 	ldrb.w	r3, [r3, #194]	@ 0xc2
 8004466:	2b00      	cmp	r3, #0
 8004468:	d102      	bne.n	8004470 <HAL_I2C_MemTxCpltCallback+0x20>
			Display_I2C_DMA_Ready(TRUE);
 800446a:	2001      	movs	r0, #1
 800446c:	f7fc fe96 	bl	800119c <Display_I2C_DMA_Ready>
		}
	}
}
 8004470:	bf00      	nop
 8004472:	3708      	adds	r7, #8
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}
 8004478:	20000d60 	.word	0x20000d60

0800447c <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){
 800447c:	b580      	push	{r7, lr}
 800447e:	b082      	sub	sp, #8
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
	if(hi2c->Devaddress == MPU6050_ADDR){
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004488:	2bd0      	cmp	r3, #208	@ 0xd0
 800448a:	d105      	bne.n	8004498 <HAL_I2C_MemRxCpltCallback+0x1c>
		MPU6050_I2C_DMA_Cplt(&MPU6050);
 800448c:	4804      	ldr	r0, [pc, #16]	@ (80044a0 <HAL_I2C_MemRxCpltCallback+0x24>)
 800448e:	f7fc fb65 	bl	8000b5c <MPU6050_I2C_DMA_Cplt>
		Display_I2C_DMA_Ready(TRUE);
 8004492:	2001      	movs	r0, #1
 8004494:	f7fc fe82 	bl	800119c <Display_I2C_DMA_Ready>
	}
}
 8004498:	bf00      	nop
 800449a:	3708      	adds	r7, #8
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	20000d60 	.word	0x20000d60

080044a4 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b082      	sub	sp, #8
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
	ADC_Conversion_Cplt(Analog.raw, Analog.value);
 80044ac:	4903      	ldr	r1, [pc, #12]	@ (80044bc <HAL_ADC_ConvCpltCallback+0x18>)
 80044ae:	4804      	ldr	r0, [pc, #16]	@ (80044c0 <HAL_ADC_ConvCpltCallback+0x1c>)
 80044b0:	f7fc f884 	bl	80005bc <ADC_Conversion_Cplt>
}
 80044b4:	bf00      	nop
 80044b6:	3708      	adds	r7, #8
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}
 80044bc:	2000124a 	.word	0x2000124a
 80044c0:	20001238 	.word	0x20001238

080044c4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b082      	sub	sp, #8
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	4603      	mov	r3, r0
 80044cc:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == M1_ENC_A_Pin){
 80044ce:	88fb      	ldrh	r3, [r7, #6]
 80044d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044d4:	d102      	bne.n	80044dc <HAL_GPIO_EXTI_Callback+0x18>
    	Encoder_Add_Pulse(&EncoderL);
 80044d6:	4807      	ldr	r0, [pc, #28]	@ (80044f4 <HAL_GPIO_EXTI_Callback+0x30>)
 80044d8:	f7fd f970 	bl	80017bc <Encoder_Add_Pulse>
    }
    if (GPIO_Pin == M2_ENC_A_Pin){
 80044dc:	88fb      	ldrh	r3, [r7, #6]
 80044de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044e2:	d102      	bne.n	80044ea <HAL_GPIO_EXTI_Callback+0x26>
    	Encoder_Add_Pulse(&EncoderR);
 80044e4:	4804      	ldr	r0, [pc, #16]	@ (80044f8 <HAL_GPIO_EXTI_Callback+0x34>)
 80044e6:	f7fd f969 	bl	80017bc <Encoder_Add_Pulse>
	}
}
 80044ea:	bf00      	nop
 80044ec:	3708      	adds	r7, #8
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	bf00      	nop
 80044f4:	20000d48 	.word	0x20000d48
 80044f8:	20000d54 	.word	0x20000d54

080044fc <HAL_UART_RxCpltCallback>:
/**************************************** END HAL CALLBACKS ***************************************/

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b082      	sub	sp, #8
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a08      	ldr	r2, [pc, #32]	@ (800452c <HAL_UART_RxCpltCallback+0x30>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d10a      	bne.n	8004524 <HAL_UART_RxCpltCallback+0x28>
		ESP01_WriteRX(ESP.bytesInRx);
 800450e:	4b08      	ldr	r3, [pc, #32]	@ (8004530 <HAL_UART_RxCpltCallback+0x34>)
 8004510:	f893 3248 	ldrb.w	r3, [r3, #584]	@ 0x248
 8004514:	4618      	mov	r0, r3
 8004516:	f7fd fd73 	bl	8002000 <ESP01_WriteRX>
		HAL_UART_Receive_IT(&huart1, &ESP.bytesInRx, 1);
 800451a:	2201      	movs	r2, #1
 800451c:	4905      	ldr	r1, [pc, #20]	@ (8004534 <HAL_UART_RxCpltCallback+0x38>)
 800451e:	4806      	ldr	r0, [pc, #24]	@ (8004538 <HAL_UART_RxCpltCallback+0x3c>)
 8004520:	f008 fcbc 	bl	800ce9c <HAL_UART_Receive_IT>
	}
}
 8004524:	bf00      	nop
 8004526:	3708      	adds	r7, #8
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}
 800452c:	40011000 	.word	0x40011000
 8004530:	20001490 	.word	0x20001490
 8004534:	200016d8 	.word	0x200016d8
 8004538:	20000cc4 	.word	0x20000cc4

0800453c <ESP01_UART_Transmit>:

int ESP01_UART_Transmit(uint8_t val){
 800453c:	b580      	push	{r7, lr}
 800453e:	b082      	sub	sp, #8
 8004540:	af00      	add	r7, sp, #0
 8004542:	4603      	mov	r3, r0
 8004544:	71fb      	strb	r3, [r7, #7]
	if(__HAL_UART_GET_FLAG(&huart1, USART_SR_TXE)){
 8004546:	4b0b      	ldr	r3, [pc, #44]	@ (8004574 <ESP01_UART_Transmit+0x38>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004550:	2b80      	cmp	r3, #128	@ 0x80
 8004552:	d10a      	bne.n	800456a <ESP01_UART_Transmit+0x2e>
		if(HAL_UART_Transmit_IT(&huart1, &val, 1) == HAL_OK)
 8004554:	1dfb      	adds	r3, r7, #7
 8004556:	2201      	movs	r2, #1
 8004558:	4619      	mov	r1, r3
 800455a:	4806      	ldr	r0, [pc, #24]	@ (8004574 <ESP01_UART_Transmit+0x38>)
 800455c:	f008 fc68 	bl	800ce30 <HAL_UART_Transmit_IT>
 8004560:	4603      	mov	r3, r0
 8004562:	2b00      	cmp	r3, #0
 8004564:	d101      	bne.n	800456a <ESP01_UART_Transmit+0x2e>
			return 1;
 8004566:	2301      	movs	r3, #1
 8004568:	e000      	b.n	800456c <ESP01_UART_Transmit+0x30>
	}
	return 0;
 800456a:	2300      	movs	r3, #0
}
 800456c:	4618      	mov	r0, r3
 800456e:	3708      	adds	r7, #8
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}
 8004574:	20000cc4 	.word	0x20000cc4

08004578 <ESP01_Data_Recived>:

void ESP01_Data_Recived(uint8_t value){
 8004578:	b480      	push	{r7}
 800457a:	b083      	sub	sp, #12
 800457c:	af00      	add	r7, sp, #0
 800457e:	4603      	mov	r3, r0
 8004580:	71fb      	strb	r3, [r7, #7]
	ESP.buffer[ESP.iW++] = value;
 8004582:	4b0a      	ldr	r3, [pc, #40]	@ (80045ac <ESP01_Data_Recived+0x34>)
 8004584:	f893 334a 	ldrb.w	r3, [r3, #842]	@ 0x34a
 8004588:	1c5a      	adds	r2, r3, #1
 800458a:	b2d1      	uxtb	r1, r2
 800458c:	4a07      	ldr	r2, [pc, #28]	@ (80045ac <ESP01_Data_Recived+0x34>)
 800458e:	f882 134a 	strb.w	r1, [r2, #842]	@ 0x34a
 8004592:	461a      	mov	r2, r3
 8004594:	4b05      	ldr	r3, [pc, #20]	@ (80045ac <ESP01_Data_Recived+0x34>)
 8004596:	4413      	add	r3, r2
 8004598:	79fa      	ldrb	r2, [r7, #7]
 800459a:	f883 2249 	strb.w	r2, [r3, #585]	@ 0x249
}
 800459e:	bf00      	nop
 80045a0:	370c      	adds	r7, #12
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr
 80045aa:	bf00      	nop
 80045ac:	20001490 	.word	0x20001490

080045b0 <I2C_1_Abstract_Mem_DMA_Transmit>:

/*************************************** HARDWARE ABSTRACTION ************************************/
e_system I2C_1_Abstract_Mem_DMA_Transmit(uint16_t Dev_Address, uint8_t reg, uint8_t *p_Data, uint16_t _Size){
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b086      	sub	sp, #24
 80045b4:	af02      	add	r7, sp, #8
 80045b6:	60ba      	str	r2, [r7, #8]
 80045b8:	461a      	mov	r2, r3
 80045ba:	4603      	mov	r3, r0
 80045bc:	81fb      	strh	r3, [r7, #14]
 80045be:	460b      	mov	r3, r1
 80045c0:	737b      	strb	r3, [r7, #13]
 80045c2:	4613      	mov	r3, r2
 80045c4:	80fb      	strh	r3, [r7, #6]
	return (e_system)HAL_I2C_Mem_Write_DMA(&hi2c1, Dev_Address, reg, 1, p_Data, _Size);
 80045c6:	7b7b      	ldrb	r3, [r7, #13]
 80045c8:	b29a      	uxth	r2, r3
 80045ca:	89f9      	ldrh	r1, [r7, #14]
 80045cc:	88fb      	ldrh	r3, [r7, #6]
 80045ce:	9301      	str	r3, [sp, #4]
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	9300      	str	r3, [sp, #0]
 80045d4:	2301      	movs	r3, #1
 80045d6:	4804      	ldr	r0, [pc, #16]	@ (80045e8 <I2C_1_Abstract_Mem_DMA_Transmit+0x38>)
 80045d8:	f002 fefc 	bl	80073d4 <HAL_I2C_Mem_Write_DMA>
 80045dc:	4603      	mov	r3, r0
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3710      	adds	r7, #16
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}
 80045e6:	bf00      	nop
 80045e8:	20000b20 	.word	0x20000b20

080045ec <I2C_1_Abstract_Master_Transmit_Blocking>:

e_system I2C_1_Abstract_Master_Transmit_Blocking(uint16_t Dev_Address, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout){
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b086      	sub	sp, #24
 80045f0:	af02      	add	r7, sp, #8
 80045f2:	60b9      	str	r1, [r7, #8]
 80045f4:	607b      	str	r3, [r7, #4]
 80045f6:	4603      	mov	r3, r0
 80045f8:	81fb      	strh	r3, [r7, #14]
 80045fa:	4613      	mov	r3, r2
 80045fc:	81bb      	strh	r3, [r7, #12]
	return (e_system)HAL_I2C_Master_Transmit(&hi2c1, Dev_Address, p_Data, _Size, _Timeout);
 80045fe:	89ba      	ldrh	r2, [r7, #12]
 8004600:	89f9      	ldrh	r1, [r7, #14]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	9300      	str	r3, [sp, #0]
 8004606:	4613      	mov	r3, r2
 8004608:	68ba      	ldr	r2, [r7, #8]
 800460a:	4804      	ldr	r0, [pc, #16]	@ (800461c <I2C_1_Abstract_Master_Transmit_Blocking+0x30>)
 800460c:	f002 fab8 	bl	8006b80 <HAL_I2C_Master_Transmit>
 8004610:	4603      	mov	r3, r0
}
 8004612:	4618      	mov	r0, r3
 8004614:	3710      	adds	r7, #16
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop
 800461c:	20000b20 	.word	0x20000b20

08004620 <I2C_1_Abstract_Mem_Write_Blocking>:

e_system I2C_1_Abstract_Mem_Write_Blocking(uint16_t Dev_Address, uint8_t Mem_Adress, uint8_t Mem_AddSize, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout){
 8004620:	b580      	push	{r7, lr}
 8004622:	b086      	sub	sp, #24
 8004624:	af04      	add	r7, sp, #16
 8004626:	603b      	str	r3, [r7, #0]
 8004628:	4603      	mov	r3, r0
 800462a:	80fb      	strh	r3, [r7, #6]
 800462c:	460b      	mov	r3, r1
 800462e:	717b      	strb	r3, [r7, #5]
 8004630:	4613      	mov	r3, r2
 8004632:	713b      	strb	r3, [r7, #4]
	return HAL_I2C_Mem_Write(&hi2c1, Dev_Address, Mem_Adress, Mem_AddSize, p_Data, _Size, _Timeout);
 8004634:	797b      	ldrb	r3, [r7, #5]
 8004636:	b29a      	uxth	r2, r3
 8004638:	793b      	ldrb	r3, [r7, #4]
 800463a:	b298      	uxth	r0, r3
 800463c:	88f9      	ldrh	r1, [r7, #6]
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	9302      	str	r3, [sp, #8]
 8004642:	8a3b      	ldrh	r3, [r7, #16]
 8004644:	9301      	str	r3, [sp, #4]
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	9300      	str	r3, [sp, #0]
 800464a:	4603      	mov	r3, r0
 800464c:	4803      	ldr	r0, [pc, #12]	@ (800465c <I2C_1_Abstract_Mem_Write_Blocking+0x3c>)
 800464e:	f002 fb95 	bl	8006d7c <HAL_I2C_Mem_Write>
 8004652:	4603      	mov	r3, r0
}
 8004654:	4618      	mov	r0, r3
 8004656:	3708      	adds	r7, #8
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}
 800465c:	20000b20 	.word	0x20000b20

08004660 <I2C_1_Abstract_Mem_Read_Blocking>:

e_system I2C_1_Abstract_Mem_Read_Blocking(uint16_t Dev_Address, uint8_t Mem_Adress, uint8_t Mem_AddSize, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout){
 8004660:	b580      	push	{r7, lr}
 8004662:	b086      	sub	sp, #24
 8004664:	af04      	add	r7, sp, #16
 8004666:	603b      	str	r3, [r7, #0]
 8004668:	4603      	mov	r3, r0
 800466a:	80fb      	strh	r3, [r7, #6]
 800466c:	460b      	mov	r3, r1
 800466e:	717b      	strb	r3, [r7, #5]
 8004670:	4613      	mov	r3, r2
 8004672:	713b      	strb	r3, [r7, #4]
	return HAL_I2C_Mem_Read(&hi2c1, Dev_Address, Mem_Adress, Mem_AddSize, p_Data, _Size, _Timeout);
 8004674:	797b      	ldrb	r3, [r7, #5]
 8004676:	b29a      	uxth	r2, r3
 8004678:	793b      	ldrb	r3, [r7, #4]
 800467a:	b298      	uxth	r0, r3
 800467c:	88f9      	ldrh	r1, [r7, #6]
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	9302      	str	r3, [sp, #8]
 8004682:	8a3b      	ldrh	r3, [r7, #16]
 8004684:	9301      	str	r3, [sp, #4]
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	9300      	str	r3, [sp, #0]
 800468a:	4603      	mov	r3, r0
 800468c:	4803      	ldr	r0, [pc, #12]	@ (800469c <I2C_1_Abstract_Mem_Read_Blocking+0x3c>)
 800468e:	f002 fc6f 	bl	8006f70 <HAL_I2C_Mem_Read>
 8004692:	4603      	mov	r3, r0
}
 8004694:	4618      	mov	r0, r3
 8004696:	3708      	adds	r7, #8
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}
 800469c:	20000b20 	.word	0x20000b20

080046a0 <KEY_Read_Value>:

uint8_t KEY_Read_Value(){
 80046a0:	b580      	push	{r7, lr}
 80046a2:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin);
 80046a4:	2101      	movs	r1, #1
 80046a6:	4803      	ldr	r0, [pc, #12]	@ (80046b4 <KEY_Read_Value+0x14>)
 80046a8:	f002 f8ac 	bl	8006804 <HAL_GPIO_ReadPin>
 80046ac:	4603      	mov	r3, r0
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	bd80      	pop	{r7, pc}
 80046b2:	bf00      	nop
 80046b4:	40020000 	.word	0x40020000

080046b8 <writeOn_USB>:

void writeOn_USB(s_commData *data){
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b082      	sub	sp, #8
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
	if(USB.data.Tx.write > USB.data.Tx.read){
 80046c0:	4b19      	ldr	r3, [pc, #100]	@ (8004728 <writeOn_USB+0x70>)
 80046c2:	78da      	ldrb	r2, [r3, #3]
 80046c4:	4b18      	ldr	r3, [pc, #96]	@ (8004728 <writeOn_USB+0x70>)
 80046c6:	789b      	ldrb	r3, [r3, #2]
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d909      	bls.n	80046e0 <writeOn_USB+0x28>
		USB.bytesToTx = USB.data.Tx.write - USB.data.Tx.read;
 80046cc:	4b16      	ldr	r3, [pc, #88]	@ (8004728 <writeOn_USB+0x70>)
 80046ce:	78da      	ldrb	r2, [r3, #3]
 80046d0:	4b15      	ldr	r3, [pc, #84]	@ (8004728 <writeOn_USB+0x70>)
 80046d2:	789b      	ldrb	r3, [r3, #2]
 80046d4:	1ad3      	subs	r3, r2, r3
 80046d6:	b2da      	uxtb	r2, r3
 80046d8:	4b13      	ldr	r3, [pc, #76]	@ (8004728 <writeOn_USB+0x70>)
 80046da:	f883 2230 	strb.w	r2, [r3, #560]	@ 0x230
 80046de:	e006      	b.n	80046ee <writeOn_USB+0x36>
	}else{
		USB.bytesToTx = RINGBUFFLENGTH - USB.data.Tx.read;
 80046e0:	4b11      	ldr	r3, [pc, #68]	@ (8004728 <writeOn_USB+0x70>)
 80046e2:	789b      	ldrb	r3, [r3, #2]
 80046e4:	425b      	negs	r3, r3
 80046e6:	b2da      	uxtb	r2, r3
 80046e8:	4b0f      	ldr	r3, [pc, #60]	@ (8004728 <writeOn_USB+0x70>)
 80046ea:	f883 2230 	strb.w	r2, [r3, #560]	@ 0x230
	}
	if(CDC_Transmit_FS(&USB.data.Tx.buffer[USB.data.Tx.read], USB.bytesToTx) == USBD_OK){
 80046ee:	4b0e      	ldr	r3, [pc, #56]	@ (8004728 <writeOn_USB+0x70>)
 80046f0:	789b      	ldrb	r3, [r3, #2]
 80046f2:	461a      	mov	r2, r3
 80046f4:	4b0c      	ldr	r3, [pc, #48]	@ (8004728 <writeOn_USB+0x70>)
 80046f6:	4413      	add	r3, r2
 80046f8:	3304      	adds	r3, #4
 80046fa:	4a0b      	ldr	r2, [pc, #44]	@ (8004728 <writeOn_USB+0x70>)
 80046fc:	f892 2230 	ldrb.w	r2, [r2, #560]	@ 0x230
 8004700:	4611      	mov	r1, r2
 8004702:	4618      	mov	r0, r3
 8004704:	f00c ff22 	bl	801154c <CDC_Transmit_FS>
 8004708:	4603      	mov	r3, r0
 800470a:	2b00      	cmp	r3, #0
 800470c:	d108      	bne.n	8004720 <writeOn_USB+0x68>
		USB.data.Tx.read += USB.bytesToTx;
 800470e:	4b06      	ldr	r3, [pc, #24]	@ (8004728 <writeOn_USB+0x70>)
 8004710:	789a      	ldrb	r2, [r3, #2]
 8004712:	4b05      	ldr	r3, [pc, #20]	@ (8004728 <writeOn_USB+0x70>)
 8004714:	f893 3230 	ldrb.w	r3, [r3, #560]	@ 0x230
 8004718:	4413      	add	r3, r2
 800471a:	b2da      	uxtb	r2, r3
 800471c:	4b02      	ldr	r3, [pc, #8]	@ (8004728 <writeOn_USB+0x70>)
 800471e:	709a      	strb	r2, [r3, #2]
	}
}
 8004720:	bf00      	nop
 8004722:	3708      	adds	r7, #8
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}
 8004728:	2000125c 	.word	0x2000125c

0800472c <dataRxOn_USB>:

void dataRxOn_USB(uint8_t *buff, uint32_t len){
 800472c:	b480      	push	{r7}
 800472e:	b085      	sub	sp, #20
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	6039      	str	r1, [r7, #0]
	if(buff != NULL){
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d01a      	beq.n	8004772 <dataRxOn_USB+0x46>
		for(uint16_t i = 0; i < len; i++){
 800473c:	2300      	movs	r3, #0
 800473e:	81fb      	strh	r3, [r7, #14]
 8004740:	e013      	b.n	800476a <dataRxOn_USB+0x3e>
			USB.data.Rx.buffer[USB.data.Rx.write++] = buff[i];
 8004742:	89fb      	ldrh	r3, [r7, #14]
 8004744:	687a      	ldr	r2, [r7, #4]
 8004746:	441a      	add	r2, r3
 8004748:	4b0d      	ldr	r3, [pc, #52]	@ (8004780 <dataRxOn_USB+0x54>)
 800474a:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 800474e:	1c59      	adds	r1, r3, #1
 8004750:	b2c8      	uxtb	r0, r1
 8004752:	490b      	ldr	r1, [pc, #44]	@ (8004780 <dataRxOn_USB+0x54>)
 8004754:	f881 0105 	strb.w	r0, [r1, #261]	@ 0x105
 8004758:	4619      	mov	r1, r3
 800475a:	7812      	ldrb	r2, [r2, #0]
 800475c:	4b08      	ldr	r3, [pc, #32]	@ (8004780 <dataRxOn_USB+0x54>)
 800475e:	440b      	add	r3, r1
 8004760:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
		for(uint16_t i = 0; i < len; i++){
 8004764:	89fb      	ldrh	r3, [r7, #14]
 8004766:	3301      	adds	r3, #1
 8004768:	81fb      	strh	r3, [r7, #14]
 800476a:	89fb      	ldrh	r3, [r7, #14]
 800476c:	683a      	ldr	r2, [r7, #0]
 800476e:	429a      	cmp	r2, r3
 8004770:	d8e7      	bhi.n	8004742 <dataRxOn_USB+0x16>
		}
	}
}
 8004772:	bf00      	nop
 8004774:	3714      	adds	r7, #20
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr
 800477e:	bf00      	nop
 8004780:	2000125c 	.word	0x2000125c

08004784 <Motor_Left_SetPins>:

void Motor_Left_SetPins(uint8_t pinA, uint8_t pinB){
 8004784:	b580      	push	{r7, lr}
 8004786:	b082      	sub	sp, #8
 8004788:	af00      	add	r7, sp, #0
 800478a:	4603      	mov	r3, r0
 800478c:	460a      	mov	r2, r1
 800478e:	71fb      	strb	r3, [r7, #7]
 8004790:	4613      	mov	r3, r2
 8004792:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(M1_IN1_GPIO_Port, M1_IN1_Pin, pinA);
 8004794:	79fb      	ldrb	r3, [r7, #7]
 8004796:	461a      	mov	r2, r3
 8004798:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800479c:	4806      	ldr	r0, [pc, #24]	@ (80047b8 <Motor_Left_SetPins+0x34>)
 800479e:	f002 f849 	bl	8006834 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(M1_IN2_GPIO_Port, M1_IN2_Pin, pinB);
 80047a2:	79bb      	ldrb	r3, [r7, #6]
 80047a4:	461a      	mov	r2, r3
 80047a6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80047aa:	4803      	ldr	r0, [pc, #12]	@ (80047b8 <Motor_Left_SetPins+0x34>)
 80047ac:	f002 f842 	bl	8006834 <HAL_GPIO_WritePin>
}
 80047b0:	bf00      	nop
 80047b2:	3708      	adds	r7, #8
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}
 80047b8:	40020000 	.word	0x40020000

080047bc <Motor_Right_SetPins>:

void Motor_Right_SetPins(uint8_t pinA, uint8_t pinB){
 80047bc:	b580      	push	{r7, lr}
 80047be:	b082      	sub	sp, #8
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	4603      	mov	r3, r0
 80047c4:	460a      	mov	r2, r1
 80047c6:	71fb      	strb	r3, [r7, #7]
 80047c8:	4613      	mov	r3, r2
 80047ca:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(M2_IN1_GPIO_Port, M2_IN1_Pin, pinA);
 80047cc:	79fb      	ldrb	r3, [r7, #7]
 80047ce:	461a      	mov	r2, r3
 80047d0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80047d4:	4806      	ldr	r0, [pc, #24]	@ (80047f0 <Motor_Right_SetPins+0x34>)
 80047d6:	f002 f82d 	bl	8006834 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(M2_IN2_GPIO_Port, M2_IN2_Pin, pinB);
 80047da:	79bb      	ldrb	r3, [r7, #6]
 80047dc:	461a      	mov	r2, r3
 80047de:	2108      	movs	r1, #8
 80047e0:	4804      	ldr	r0, [pc, #16]	@ (80047f4 <Motor_Right_SetPins+0x38>)
 80047e2:	f002 f827 	bl	8006834 <HAL_GPIO_WritePin>
}
 80047e6:	bf00      	nop
 80047e8:	3708      	adds	r7, #8
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}
 80047ee:	bf00      	nop
 80047f0:	40020000 	.word	0x40020000
 80047f4:	40020400 	.word	0x40020400

080047f8 <Motor_Left_SetPWM>:

void Motor_Left_SetPWM(uint16_t dCycle){
 80047f8:	b480      	push	{r7}
 80047fa:	b083      	sub	sp, #12
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	4603      	mov	r3, r0
 8004800:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, dCycle);
 8004802:	4b05      	ldr	r3, [pc, #20]	@ (8004818 <Motor_Left_SetPWM+0x20>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	88fa      	ldrh	r2, [r7, #6]
 8004808:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800480a:	bf00      	nop
 800480c:	370c      	adds	r7, #12
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr
 8004816:	bf00      	nop
 8004818:	20000c7c 	.word	0x20000c7c

0800481c <Motor_Right_SetPWM>:

void Motor_Right_SetPWM(uint16_t dCycle){
 800481c:	b480      	push	{r7}
 800481e:	b083      	sub	sp, #12
 8004820:	af00      	add	r7, sp, #0
 8004822:	4603      	mov	r3, r0
 8004824:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, dCycle);
 8004826:	4b05      	ldr	r3, [pc, #20]	@ (800483c <Motor_Right_SetPWM+0x20>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	88fa      	ldrh	r2, [r7, #6]
 800482c:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800482e:	bf00      	nop
 8004830:	370c      	adds	r7, #12
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr
 800483a:	bf00      	nop
 800483c:	20000c7c 	.word	0x20000c7c

08004840 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004840:	b480      	push	{r7}
 8004842:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004844:	b672      	cpsid	i
}
 8004846:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004848:	bf00      	nop
 800484a:	e7fd      	b.n	8004848 <Error_Handler+0x8>

0800484c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b082      	sub	sp, #8
 8004850:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004852:	2300      	movs	r3, #0
 8004854:	607b      	str	r3, [r7, #4]
 8004856:	4b13      	ldr	r3, [pc, #76]	@ (80048a4 <HAL_MspInit+0x58>)
 8004858:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800485a:	4a12      	ldr	r2, [pc, #72]	@ (80048a4 <HAL_MspInit+0x58>)
 800485c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004860:	6453      	str	r3, [r2, #68]	@ 0x44
 8004862:	4b10      	ldr	r3, [pc, #64]	@ (80048a4 <HAL_MspInit+0x58>)
 8004864:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004866:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800486a:	607b      	str	r3, [r7, #4]
 800486c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800486e:	2300      	movs	r3, #0
 8004870:	603b      	str	r3, [r7, #0]
 8004872:	4b0c      	ldr	r3, [pc, #48]	@ (80048a4 <HAL_MspInit+0x58>)
 8004874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004876:	4a0b      	ldr	r2, [pc, #44]	@ (80048a4 <HAL_MspInit+0x58>)
 8004878:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800487c:	6413      	str	r3, [r2, #64]	@ 0x40
 800487e:	4b09      	ldr	r3, [pc, #36]	@ (80048a4 <HAL_MspInit+0x58>)
 8004880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004882:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004886:	603b      	str	r3, [r7, #0]
 8004888:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 0, 0);
 800488a:	2200      	movs	r2, #0
 800488c:	2100      	movs	r1, #0
 800488e:	2051      	movs	r0, #81	@ 0x51
 8004890:	f001 f9e1 	bl	8005c56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8004894:	2051      	movs	r0, #81	@ 0x51
 8004896:	f001 f9fa 	bl	8005c8e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800489a:	bf00      	nop
 800489c:	3708      	adds	r7, #8
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop
 80048a4:	40023800 	.word	0x40023800

080048a8 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b08a      	sub	sp, #40	@ 0x28
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048b0:	f107 0314 	add.w	r3, r7, #20
 80048b4:	2200      	movs	r2, #0
 80048b6:	601a      	str	r2, [r3, #0]
 80048b8:	605a      	str	r2, [r3, #4]
 80048ba:	609a      	str	r2, [r3, #8]
 80048bc:	60da      	str	r2, [r3, #12]
 80048be:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a40      	ldr	r2, [pc, #256]	@ (80049c8 <HAL_ADC_MspInit+0x120>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d179      	bne.n	80049be <HAL_ADC_MspInit+0x116>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80048ca:	2300      	movs	r3, #0
 80048cc:	613b      	str	r3, [r7, #16]
 80048ce:	4b3f      	ldr	r3, [pc, #252]	@ (80049cc <HAL_ADC_MspInit+0x124>)
 80048d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048d2:	4a3e      	ldr	r2, [pc, #248]	@ (80049cc <HAL_ADC_MspInit+0x124>)
 80048d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80048da:	4b3c      	ldr	r3, [pc, #240]	@ (80049cc <HAL_ADC_MspInit+0x124>)
 80048dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048e2:	613b      	str	r3, [r7, #16]
 80048e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048e6:	2300      	movs	r3, #0
 80048e8:	60fb      	str	r3, [r7, #12]
 80048ea:	4b38      	ldr	r3, [pc, #224]	@ (80049cc <HAL_ADC_MspInit+0x124>)
 80048ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048ee:	4a37      	ldr	r2, [pc, #220]	@ (80049cc <HAL_ADC_MspInit+0x124>)
 80048f0:	f043 0301 	orr.w	r3, r3, #1
 80048f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80048f6:	4b35      	ldr	r3, [pc, #212]	@ (80049cc <HAL_ADC_MspInit+0x124>)
 80048f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048fa:	f003 0301 	and.w	r3, r3, #1
 80048fe:	60fb      	str	r3, [r7, #12]
 8004900:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004902:	2300      	movs	r3, #0
 8004904:	60bb      	str	r3, [r7, #8]
 8004906:	4b31      	ldr	r3, [pc, #196]	@ (80049cc <HAL_ADC_MspInit+0x124>)
 8004908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800490a:	4a30      	ldr	r2, [pc, #192]	@ (80049cc <HAL_ADC_MspInit+0x124>)
 800490c:	f043 0302 	orr.w	r3, r3, #2
 8004910:	6313      	str	r3, [r2, #48]	@ 0x30
 8004912:	4b2e      	ldr	r3, [pc, #184]	@ (80049cc <HAL_ADC_MspInit+0x124>)
 8004914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004916:	f003 0302 	and.w	r3, r3, #2
 800491a:	60bb      	str	r3, [r7, #8]
 800491c:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = LF1_Pin|LF2_Pin|LF3_Pin|LF4_Pin
 800491e:	23fe      	movs	r3, #254	@ 0xfe
 8004920:	617b      	str	r3, [r7, #20]
                          |WD1_Pin|WD2_Pin|WD3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004922:	2303      	movs	r3, #3
 8004924:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004926:	2300      	movs	r3, #0
 8004928:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800492a:	f107 0314 	add.w	r3, r7, #20
 800492e:	4619      	mov	r1, r3
 8004930:	4827      	ldr	r0, [pc, #156]	@ (80049d0 <HAL_ADC_MspInit+0x128>)
 8004932:	f001 fde3 	bl	80064fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = WD4_Pin|BAT_LVL_Pin;
 8004936:	2303      	movs	r3, #3
 8004938:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800493a:	2303      	movs	r3, #3
 800493c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800493e:	2300      	movs	r3, #0
 8004940:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004942:	f107 0314 	add.w	r3, r7, #20
 8004946:	4619      	mov	r1, r3
 8004948:	4822      	ldr	r0, [pc, #136]	@ (80049d4 <HAL_ADC_MspInit+0x12c>)
 800494a:	f001 fdd7 	bl	80064fc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800494e:	4b22      	ldr	r3, [pc, #136]	@ (80049d8 <HAL_ADC_MspInit+0x130>)
 8004950:	4a22      	ldr	r2, [pc, #136]	@ (80049dc <HAL_ADC_MspInit+0x134>)
 8004952:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8004954:	4b20      	ldr	r3, [pc, #128]	@ (80049d8 <HAL_ADC_MspInit+0x130>)
 8004956:	2200      	movs	r2, #0
 8004958:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800495a:	4b1f      	ldr	r3, [pc, #124]	@ (80049d8 <HAL_ADC_MspInit+0x130>)
 800495c:	2200      	movs	r2, #0
 800495e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004960:	4b1d      	ldr	r3, [pc, #116]	@ (80049d8 <HAL_ADC_MspInit+0x130>)
 8004962:	2200      	movs	r2, #0
 8004964:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004966:	4b1c      	ldr	r3, [pc, #112]	@ (80049d8 <HAL_ADC_MspInit+0x130>)
 8004968:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800496c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800496e:	4b1a      	ldr	r3, [pc, #104]	@ (80049d8 <HAL_ADC_MspInit+0x130>)
 8004970:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004974:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004976:	4b18      	ldr	r3, [pc, #96]	@ (80049d8 <HAL_ADC_MspInit+0x130>)
 8004978:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800497c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800497e:	4b16      	ldr	r3, [pc, #88]	@ (80049d8 <HAL_ADC_MspInit+0x130>)
 8004980:	2200      	movs	r2, #0
 8004982:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004984:	4b14      	ldr	r3, [pc, #80]	@ (80049d8 <HAL_ADC_MspInit+0x130>)
 8004986:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800498a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800498c:	4b12      	ldr	r3, [pc, #72]	@ (80049d8 <HAL_ADC_MspInit+0x130>)
 800498e:	2200      	movs	r2, #0
 8004990:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004992:	4811      	ldr	r0, [pc, #68]	@ (80049d8 <HAL_ADC_MspInit+0x130>)
 8004994:	f001 f996 	bl	8005cc4 <HAL_DMA_Init>
 8004998:	4603      	mov	r3, r0
 800499a:	2b00      	cmp	r3, #0
 800499c:	d001      	beq.n	80049a2 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800499e:	f7ff ff4f 	bl	8004840 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	4a0c      	ldr	r2, [pc, #48]	@ (80049d8 <HAL_ADC_MspInit+0x130>)
 80049a6:	639a      	str	r2, [r3, #56]	@ 0x38
 80049a8:	4a0b      	ldr	r2, [pc, #44]	@ (80049d8 <HAL_ADC_MspInit+0x130>)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80049ae:	2200      	movs	r2, #0
 80049b0:	2100      	movs	r1, #0
 80049b2:	2012      	movs	r0, #18
 80049b4:	f001 f94f 	bl	8005c56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80049b8:	2012      	movs	r0, #18
 80049ba:	f001 f968 	bl	8005c8e <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80049be:	bf00      	nop
 80049c0:	3728      	adds	r7, #40	@ 0x28
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}
 80049c6:	bf00      	nop
 80049c8:	40012000 	.word	0x40012000
 80049cc:	40023800 	.word	0x40023800
 80049d0:	40020000 	.word	0x40020000
 80049d4:	40020400 	.word	0x40020400
 80049d8:	20000ac0 	.word	0x20000ac0
 80049dc:	40026410 	.word	0x40026410

080049e0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b08a      	sub	sp, #40	@ 0x28
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049e8:	f107 0314 	add.w	r3, r7, #20
 80049ec:	2200      	movs	r2, #0
 80049ee:	601a      	str	r2, [r3, #0]
 80049f0:	605a      	str	r2, [r3, #4]
 80049f2:	609a      	str	r2, [r3, #8]
 80049f4:	60da      	str	r2, [r3, #12]
 80049f6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a50      	ldr	r2, [pc, #320]	@ (8004b40 <HAL_I2C_MspInit+0x160>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	f040 8099 	bne.w	8004b36 <HAL_I2C_MspInit+0x156>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a04:	2300      	movs	r3, #0
 8004a06:	613b      	str	r3, [r7, #16]
 8004a08:	4b4e      	ldr	r3, [pc, #312]	@ (8004b44 <HAL_I2C_MspInit+0x164>)
 8004a0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a0c:	4a4d      	ldr	r2, [pc, #308]	@ (8004b44 <HAL_I2C_MspInit+0x164>)
 8004a0e:	f043 0302 	orr.w	r3, r3, #2
 8004a12:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a14:	4b4b      	ldr	r3, [pc, #300]	@ (8004b44 <HAL_I2C_MspInit+0x164>)
 8004a16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a18:	f003 0302 	and.w	r3, r3, #2
 8004a1c:	613b      	str	r3, [r7, #16]
 8004a1e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 8004a20:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004a24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004a26:	2312      	movs	r3, #18
 8004a28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a2e:	2303      	movs	r3, #3
 8004a30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004a32:	2304      	movs	r3, #4
 8004a34:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a36:	f107 0314 	add.w	r3, r7, #20
 8004a3a:	4619      	mov	r1, r3
 8004a3c:	4842      	ldr	r0, [pc, #264]	@ (8004b48 <HAL_I2C_MspInit+0x168>)
 8004a3e:	f001 fd5d 	bl	80064fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004a42:	2300      	movs	r3, #0
 8004a44:	60fb      	str	r3, [r7, #12]
 8004a46:	4b3f      	ldr	r3, [pc, #252]	@ (8004b44 <HAL_I2C_MspInit+0x164>)
 8004a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a4a:	4a3e      	ldr	r2, [pc, #248]	@ (8004b44 <HAL_I2C_MspInit+0x164>)
 8004a4c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004a50:	6413      	str	r3, [r2, #64]	@ 0x40
 8004a52:	4b3c      	ldr	r3, [pc, #240]	@ (8004b44 <HAL_I2C_MspInit+0x164>)
 8004a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a56:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004a5a:	60fb      	str	r3, [r7, #12]
 8004a5c:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 8004a5e:	4b3b      	ldr	r3, [pc, #236]	@ (8004b4c <HAL_I2C_MspInit+0x16c>)
 8004a60:	4a3b      	ldr	r2, [pc, #236]	@ (8004b50 <HAL_I2C_MspInit+0x170>)
 8004a62:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 8004a64:	4b39      	ldr	r3, [pc, #228]	@ (8004b4c <HAL_I2C_MspInit+0x16c>)
 8004a66:	2200      	movs	r2, #0
 8004a68:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004a6a:	4b38      	ldr	r3, [pc, #224]	@ (8004b4c <HAL_I2C_MspInit+0x16c>)
 8004a6c:	2240      	movs	r2, #64	@ 0x40
 8004a6e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004a70:	4b36      	ldr	r3, [pc, #216]	@ (8004b4c <HAL_I2C_MspInit+0x16c>)
 8004a72:	2200      	movs	r2, #0
 8004a74:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004a76:	4b35      	ldr	r3, [pc, #212]	@ (8004b4c <HAL_I2C_MspInit+0x16c>)
 8004a78:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004a7c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004a7e:	4b33      	ldr	r3, [pc, #204]	@ (8004b4c <HAL_I2C_MspInit+0x16c>)
 8004a80:	2200      	movs	r2, #0
 8004a82:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004a84:	4b31      	ldr	r3, [pc, #196]	@ (8004b4c <HAL_I2C_MspInit+0x16c>)
 8004a86:	2200      	movs	r2, #0
 8004a88:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8004a8a:	4b30      	ldr	r3, [pc, #192]	@ (8004b4c <HAL_I2C_MspInit+0x16c>)
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004a90:	4b2e      	ldr	r3, [pc, #184]	@ (8004b4c <HAL_I2C_MspInit+0x16c>)
 8004a92:	2200      	movs	r2, #0
 8004a94:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004a96:	4b2d      	ldr	r3, [pc, #180]	@ (8004b4c <HAL_I2C_MspInit+0x16c>)
 8004a98:	2200      	movs	r2, #0
 8004a9a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8004a9c:	482b      	ldr	r0, [pc, #172]	@ (8004b4c <HAL_I2C_MspInit+0x16c>)
 8004a9e:	f001 f911 	bl	8005cc4 <HAL_DMA_Init>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d001      	beq.n	8004aac <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8004aa8:	f7ff feca 	bl	8004840 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	4a27      	ldr	r2, [pc, #156]	@ (8004b4c <HAL_I2C_MspInit+0x16c>)
 8004ab0:	635a      	str	r2, [r3, #52]	@ 0x34
 8004ab2:	4a26      	ldr	r2, [pc, #152]	@ (8004b4c <HAL_I2C_MspInit+0x16c>)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8004ab8:	4b26      	ldr	r3, [pc, #152]	@ (8004b54 <HAL_I2C_MspInit+0x174>)
 8004aba:	4a27      	ldr	r2, [pc, #156]	@ (8004b58 <HAL_I2C_MspInit+0x178>)
 8004abc:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8004abe:	4b25      	ldr	r3, [pc, #148]	@ (8004b54 <HAL_I2C_MspInit+0x174>)
 8004ac0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004ac4:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004ac6:	4b23      	ldr	r3, [pc, #140]	@ (8004b54 <HAL_I2C_MspInit+0x174>)
 8004ac8:	2200      	movs	r2, #0
 8004aca:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004acc:	4b21      	ldr	r3, [pc, #132]	@ (8004b54 <HAL_I2C_MspInit+0x174>)
 8004ace:	2200      	movs	r2, #0
 8004ad0:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004ad2:	4b20      	ldr	r3, [pc, #128]	@ (8004b54 <HAL_I2C_MspInit+0x174>)
 8004ad4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004ad8:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004ada:	4b1e      	ldr	r3, [pc, #120]	@ (8004b54 <HAL_I2C_MspInit+0x174>)
 8004adc:	2200      	movs	r2, #0
 8004ade:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004ae0:	4b1c      	ldr	r3, [pc, #112]	@ (8004b54 <HAL_I2C_MspInit+0x174>)
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8004ae6:	4b1b      	ldr	r3, [pc, #108]	@ (8004b54 <HAL_I2C_MspInit+0x174>)
 8004ae8:	2200      	movs	r2, #0
 8004aea:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004aec:	4b19      	ldr	r3, [pc, #100]	@ (8004b54 <HAL_I2C_MspInit+0x174>)
 8004aee:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8004af2:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004af4:	4b17      	ldr	r3, [pc, #92]	@ (8004b54 <HAL_I2C_MspInit+0x174>)
 8004af6:	2200      	movs	r2, #0
 8004af8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8004afa:	4816      	ldr	r0, [pc, #88]	@ (8004b54 <HAL_I2C_MspInit+0x174>)
 8004afc:	f001 f8e2 	bl	8005cc4 <HAL_DMA_Init>
 8004b00:	4603      	mov	r3, r0
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d001      	beq.n	8004b0a <HAL_I2C_MspInit+0x12a>
    {
      Error_Handler();
 8004b06:	f7ff fe9b 	bl	8004840 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	4a11      	ldr	r2, [pc, #68]	@ (8004b54 <HAL_I2C_MspInit+0x174>)
 8004b0e:	639a      	str	r2, [r3, #56]	@ 0x38
 8004b10:	4a10      	ldr	r2, [pc, #64]	@ (8004b54 <HAL_I2C_MspInit+0x174>)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8004b16:	2200      	movs	r2, #0
 8004b18:	2100      	movs	r1, #0
 8004b1a:	201f      	movs	r0, #31
 8004b1c:	f001 f89b 	bl	8005c56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8004b20:	201f      	movs	r0, #31
 8004b22:	f001 f8b4 	bl	8005c8e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8004b26:	2200      	movs	r2, #0
 8004b28:	2100      	movs	r1, #0
 8004b2a:	2020      	movs	r0, #32
 8004b2c:	f001 f893 	bl	8005c56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8004b30:	2020      	movs	r0, #32
 8004b32:	f001 f8ac 	bl	8005c8e <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8004b36:	bf00      	nop
 8004b38:	3728      	adds	r7, #40	@ 0x28
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	bf00      	nop
 8004b40:	40005400 	.word	0x40005400
 8004b44:	40023800 	.word	0x40023800
 8004b48:	40020400 	.word	0x40020400
 8004b4c:	20000b74 	.word	0x20000b74
 8004b50:	40026028 	.word	0x40026028
 8004b54:	20000bd4 	.word	0x20000bd4
 8004b58:	40026010 	.word	0x40026010

08004b5c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b084      	sub	sp, #16
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a1c      	ldr	r2, [pc, #112]	@ (8004bdc <HAL_TIM_Base_MspInit+0x80>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d116      	bne.n	8004b9c <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004b6e:	2300      	movs	r3, #0
 8004b70:	60fb      	str	r3, [r7, #12]
 8004b72:	4b1b      	ldr	r3, [pc, #108]	@ (8004be0 <HAL_TIM_Base_MspInit+0x84>)
 8004b74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b76:	4a1a      	ldr	r2, [pc, #104]	@ (8004be0 <HAL_TIM_Base_MspInit+0x84>)
 8004b78:	f043 0301 	orr.w	r3, r3, #1
 8004b7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8004b7e:	4b18      	ldr	r3, [pc, #96]	@ (8004be0 <HAL_TIM_Base_MspInit+0x84>)
 8004b80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b82:	f003 0301 	and.w	r3, r3, #1
 8004b86:	60fb      	str	r3, [r7, #12]
 8004b88:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	2100      	movs	r1, #0
 8004b8e:	2019      	movs	r0, #25
 8004b90:	f001 f861 	bl	8005c56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004b94:	2019      	movs	r0, #25
 8004b96:	f001 f87a 	bl	8005c8e <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004b9a:	e01a      	b.n	8004bd2 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a10      	ldr	r2, [pc, #64]	@ (8004be4 <HAL_TIM_Base_MspInit+0x88>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d115      	bne.n	8004bd2 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	60bb      	str	r3, [r7, #8]
 8004baa:	4b0d      	ldr	r3, [pc, #52]	@ (8004be0 <HAL_TIM_Base_MspInit+0x84>)
 8004bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bae:	4a0c      	ldr	r2, [pc, #48]	@ (8004be0 <HAL_TIM_Base_MspInit+0x84>)
 8004bb0:	f043 0302 	orr.w	r3, r3, #2
 8004bb4:	6413      	str	r3, [r2, #64]	@ 0x40
 8004bb6:	4b0a      	ldr	r3, [pc, #40]	@ (8004be0 <HAL_TIM_Base_MspInit+0x84>)
 8004bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bba:	f003 0302 	and.w	r3, r3, #2
 8004bbe:	60bb      	str	r3, [r7, #8]
 8004bc0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	2100      	movs	r1, #0
 8004bc6:	201d      	movs	r0, #29
 8004bc8:	f001 f845 	bl	8005c56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004bcc:	201d      	movs	r0, #29
 8004bce:	f001 f85e 	bl	8005c8e <HAL_NVIC_EnableIRQ>
}
 8004bd2:	bf00      	nop
 8004bd4:	3710      	adds	r7, #16
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
 8004bda:	bf00      	nop
 8004bdc:	40010000 	.word	0x40010000
 8004be0:	40023800 	.word	0x40023800
 8004be4:	40000400 	.word	0x40000400

08004be8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b088      	sub	sp, #32
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bf0:	f107 030c 	add.w	r3, r7, #12
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	601a      	str	r2, [r3, #0]
 8004bf8:	605a      	str	r2, [r3, #4]
 8004bfa:	609a      	str	r2, [r3, #8]
 8004bfc:	60da      	str	r2, [r3, #12]
 8004bfe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a12      	ldr	r2, [pc, #72]	@ (8004c50 <HAL_TIM_MspPostInit+0x68>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d11d      	bne.n	8004c46 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	60bb      	str	r3, [r7, #8]
 8004c0e:	4b11      	ldr	r3, [pc, #68]	@ (8004c54 <HAL_TIM_MspPostInit+0x6c>)
 8004c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c12:	4a10      	ldr	r2, [pc, #64]	@ (8004c54 <HAL_TIM_MspPostInit+0x6c>)
 8004c14:	f043 0302 	orr.w	r3, r3, #2
 8004c18:	6313      	str	r3, [r2, #48]	@ 0x30
 8004c1a:	4b0e      	ldr	r3, [pc, #56]	@ (8004c54 <HAL_TIM_MspPostInit+0x6c>)
 8004c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c1e:	f003 0302 	and.w	r3, r3, #2
 8004c22:	60bb      	str	r3, [r7, #8]
 8004c24:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = M1_PWM_Pin|M2_PWM_Pin;
 8004c26:	2330      	movs	r3, #48	@ 0x30
 8004c28:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c2a:	2302      	movs	r3, #2
 8004c2c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c32:	2300      	movs	r3, #0
 8004c34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004c36:	2302      	movs	r3, #2
 8004c38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c3a:	f107 030c 	add.w	r3, r7, #12
 8004c3e:	4619      	mov	r1, r3
 8004c40:	4805      	ldr	r0, [pc, #20]	@ (8004c58 <HAL_TIM_MspPostInit+0x70>)
 8004c42:	f001 fc5b 	bl	80064fc <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004c46:	bf00      	nop
 8004c48:	3720      	adds	r7, #32
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	bf00      	nop
 8004c50:	40000400 	.word	0x40000400
 8004c54:	40023800 	.word	0x40023800
 8004c58:	40020400 	.word	0x40020400

08004c5c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b08a      	sub	sp, #40	@ 0x28
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c64:	f107 0314 	add.w	r3, r7, #20
 8004c68:	2200      	movs	r2, #0
 8004c6a:	601a      	str	r2, [r3, #0]
 8004c6c:	605a      	str	r2, [r3, #4]
 8004c6e:	609a      	str	r2, [r3, #8]
 8004c70:	60da      	str	r2, [r3, #12]
 8004c72:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a1d      	ldr	r2, [pc, #116]	@ (8004cf0 <HAL_UART_MspInit+0x94>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d133      	bne.n	8004ce6 <HAL_UART_MspInit+0x8a>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004c7e:	2300      	movs	r3, #0
 8004c80:	613b      	str	r3, [r7, #16]
 8004c82:	4b1c      	ldr	r3, [pc, #112]	@ (8004cf4 <HAL_UART_MspInit+0x98>)
 8004c84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c86:	4a1b      	ldr	r2, [pc, #108]	@ (8004cf4 <HAL_UART_MspInit+0x98>)
 8004c88:	f043 0310 	orr.w	r3, r3, #16
 8004c8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8004c8e:	4b19      	ldr	r3, [pc, #100]	@ (8004cf4 <HAL_UART_MspInit+0x98>)
 8004c90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c92:	f003 0310 	and.w	r3, r3, #16
 8004c96:	613b      	str	r3, [r7, #16]
 8004c98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	60fb      	str	r3, [r7, #12]
 8004c9e:	4b15      	ldr	r3, [pc, #84]	@ (8004cf4 <HAL_UART_MspInit+0x98>)
 8004ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ca2:	4a14      	ldr	r2, [pc, #80]	@ (8004cf4 <HAL_UART_MspInit+0x98>)
 8004ca4:	f043 0302 	orr.w	r3, r3, #2
 8004ca8:	6313      	str	r3, [r2, #48]	@ 0x30
 8004caa:	4b12      	ldr	r3, [pc, #72]	@ (8004cf4 <HAL_UART_MspInit+0x98>)
 8004cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cae:	f003 0302 	and.w	r3, r3, #2
 8004cb2:	60fb      	str	r3, [r7, #12]
 8004cb4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ESP_RX_Pin|ESP_TX_Pin;
 8004cb6:	23c0      	movs	r3, #192	@ 0xc0
 8004cb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cba:	2302      	movs	r3, #2
 8004cbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004cc2:	2303      	movs	r3, #3
 8004cc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004cc6:	2307      	movs	r3, #7
 8004cc8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004cca:	f107 0314 	add.w	r3, r7, #20
 8004cce:	4619      	mov	r1, r3
 8004cd0:	4809      	ldr	r0, [pc, #36]	@ (8004cf8 <HAL_UART_MspInit+0x9c>)
 8004cd2:	f001 fc13 	bl	80064fc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	2100      	movs	r1, #0
 8004cda:	2025      	movs	r0, #37	@ 0x25
 8004cdc:	f000 ffbb 	bl	8005c56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004ce0:	2025      	movs	r0, #37	@ 0x25
 8004ce2:	f000 ffd4 	bl	8005c8e <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8004ce6:	bf00      	nop
 8004ce8:	3728      	adds	r7, #40	@ 0x28
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}
 8004cee:	bf00      	nop
 8004cf0:	40011000 	.word	0x40011000
 8004cf4:	40023800 	.word	0x40023800
 8004cf8:	40020400 	.word	0x40020400

08004cfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8004d00:	f007 f874 	bl	800bdec <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004d04:	bf00      	nop
 8004d06:	e7fd      	b.n	8004d04 <NMI_Handler+0x8>

08004d08 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004d0c:	bf00      	nop
 8004d0e:	e7fd      	b.n	8004d0c <HardFault_Handler+0x4>

08004d10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004d10:	b480      	push	{r7}
 8004d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004d14:	bf00      	nop
 8004d16:	e7fd      	b.n	8004d14 <MemManage_Handler+0x4>

08004d18 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004d1c:	bf00      	nop
 8004d1e:	e7fd      	b.n	8004d1c <BusFault_Handler+0x4>

08004d20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004d20:	b480      	push	{r7}
 8004d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004d24:	bf00      	nop
 8004d26:	e7fd      	b.n	8004d24 <UsageFault_Handler+0x4>

08004d28 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004d2c:	bf00      	nop
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d34:	4770      	bx	lr

08004d36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004d36:	b480      	push	{r7}
 8004d38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004d3a:	bf00      	nop
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr

08004d44 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004d44:	b480      	push	{r7}
 8004d46:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004d48:	bf00      	nop
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d50:	4770      	bx	lr

08004d52 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004d52:	b580      	push	{r7, lr}
 8004d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004d56:	f000 f943 	bl	8004fe0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004d5a:	bf00      	nop
 8004d5c:	bd80      	pop	{r7, pc}
	...

08004d60 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8004d64:	4802      	ldr	r0, [pc, #8]	@ (8004d70 <DMA1_Stream0_IRQHandler+0x10>)
 8004d66:	f001 f945 	bl	8005ff4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8004d6a:	bf00      	nop
 8004d6c:	bd80      	pop	{r7, pc}
 8004d6e:	bf00      	nop
 8004d70:	20000bd4 	.word	0x20000bd4

08004d74 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8004d78:	4802      	ldr	r0, [pc, #8]	@ (8004d84 <DMA1_Stream1_IRQHandler+0x10>)
 8004d7a:	f001 f93b 	bl	8005ff4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8004d7e:	bf00      	nop
 8004d80:	bd80      	pop	{r7, pc}
 8004d82:	bf00      	nop
 8004d84:	20000b74 	.word	0x20000b74

08004d88 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004d8c:	4802      	ldr	r0, [pc, #8]	@ (8004d98 <ADC_IRQHandler+0x10>)
 8004d8e:	f000 f9ae 	bl	80050ee <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8004d92:	bf00      	nop
 8004d94:	bd80      	pop	{r7, pc}
 8004d96:	bf00      	nop
 8004d98:	20000a78 	.word	0x20000a78

08004d9c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(M2_ENC_A_Pin);
 8004da0:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8004da4:	f001 fd7a 	bl	800689c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004da8:	bf00      	nop
 8004daa:	bd80      	pop	{r7, pc}

08004dac <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004db0:	4802      	ldr	r0, [pc, #8]	@ (8004dbc <TIM1_UP_TIM10_IRQHandler+0x10>)
 8004db2:	f007 f9f1 	bl	800c198 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004db6:	bf00      	nop
 8004db8:	bd80      	pop	{r7, pc}
 8004dba:	bf00      	nop
 8004dbc:	20000c34 	.word	0x20000c34

08004dc0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004dc4:	4802      	ldr	r0, [pc, #8]	@ (8004dd0 <TIM3_IRQHandler+0x10>)
 8004dc6:	f007 f9e7 	bl	800c198 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004dca:	bf00      	nop
 8004dcc:	bd80      	pop	{r7, pc}
 8004dce:	bf00      	nop
 8004dd0:	20000c7c 	.word	0x20000c7c

08004dd4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004dd8:	4802      	ldr	r0, [pc, #8]	@ (8004de4 <I2C1_EV_IRQHandler+0x10>)
 8004dda:	f002 ff17 	bl	8007c0c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8004dde:	bf00      	nop
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	bf00      	nop
 8004de4:	20000b20 	.word	0x20000b20

08004de8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8004dec:	4802      	ldr	r0, [pc, #8]	@ (8004df8 <I2C1_ER_IRQHandler+0x10>)
 8004dee:	f003 f87e 	bl	8007eee <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8004df2:	bf00      	nop
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	bf00      	nop
 8004df8:	20000b20 	.word	0x20000b20

08004dfc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004e00:	4802      	ldr	r0, [pc, #8]	@ (8004e0c <USART1_IRQHandler+0x10>)
 8004e02:	f008 f871 	bl	800cee8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004e06:	bf00      	nop
 8004e08:	bd80      	pop	{r7, pc}
 8004e0a:	bf00      	nop
 8004e0c:	20000cc4 	.word	0x20000cc4

08004e10 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(M1_ENC_A_Pin);
 8004e14:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8004e18:	f001 fd40 	bl	800689c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004e1c:	bf00      	nop
 8004e1e:	bd80      	pop	{r7, pc}

08004e20 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004e24:	4802      	ldr	r0, [pc, #8]	@ (8004e30 <DMA2_Stream0_IRQHandler+0x10>)
 8004e26:	f001 f8e5 	bl	8005ff4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004e2a:	bf00      	nop
 8004e2c:	bd80      	pop	{r7, pc}
 8004e2e:	bf00      	nop
 8004e30:	20000ac0 	.word	0x20000ac0

08004e34 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8004e38:	4802      	ldr	r0, [pc, #8]	@ (8004e44 <OTG_FS_IRQHandler+0x10>)
 8004e3a:	f005 fa64 	bl	800a306 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8004e3e:	bf00      	nop
 8004e40:	bd80      	pop	{r7, pc}
 8004e42:	bf00      	nop
 8004e44:	200020cc 	.word	0x200020cc

08004e48 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 8004e4c:	bf00      	nop
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr
	...

08004e58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b086      	sub	sp, #24
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004e60:	4a14      	ldr	r2, [pc, #80]	@ (8004eb4 <_sbrk+0x5c>)
 8004e62:	4b15      	ldr	r3, [pc, #84]	@ (8004eb8 <_sbrk+0x60>)
 8004e64:	1ad3      	subs	r3, r2, r3
 8004e66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004e6c:	4b13      	ldr	r3, [pc, #76]	@ (8004ebc <_sbrk+0x64>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d102      	bne.n	8004e7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004e74:	4b11      	ldr	r3, [pc, #68]	@ (8004ebc <_sbrk+0x64>)
 8004e76:	4a12      	ldr	r2, [pc, #72]	@ (8004ec0 <_sbrk+0x68>)
 8004e78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004e7a:	4b10      	ldr	r3, [pc, #64]	@ (8004ebc <_sbrk+0x64>)
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	4413      	add	r3, r2
 8004e82:	693a      	ldr	r2, [r7, #16]
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d207      	bcs.n	8004e98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004e88:	f00d f85c 	bl	8011f44 <__errno>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	220c      	movs	r2, #12
 8004e90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004e92:	f04f 33ff 	mov.w	r3, #4294967295
 8004e96:	e009      	b.n	8004eac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004e98:	4b08      	ldr	r3, [pc, #32]	@ (8004ebc <_sbrk+0x64>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004e9e:	4b07      	ldr	r3, [pc, #28]	@ (8004ebc <_sbrk+0x64>)
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4413      	add	r3, r2
 8004ea6:	4a05      	ldr	r2, [pc, #20]	@ (8004ebc <_sbrk+0x64>)
 8004ea8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	3718      	adds	r7, #24
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}
 8004eb4:	20020000 	.word	0x20020000
 8004eb8:	00000400 	.word	0x00000400
 8004ebc:	200017e0 	.word	0x200017e0
 8004ec0:	20002918 	.word	0x20002918

08004ec4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004ec8:	4b06      	ldr	r3, [pc, #24]	@ (8004ee4 <SystemInit+0x20>)
 8004eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ece:	4a05      	ldr	r2, [pc, #20]	@ (8004ee4 <SystemInit+0x20>)
 8004ed0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004ed4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004ed8:	bf00      	nop
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr
 8004ee2:	bf00      	nop
 8004ee4:	e000ed00 	.word	0xe000ed00

08004ee8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004ee8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004f20 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004eec:	f7ff ffea 	bl	8004ec4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004ef0:	480c      	ldr	r0, [pc, #48]	@ (8004f24 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004ef2:	490d      	ldr	r1, [pc, #52]	@ (8004f28 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004ef4:	4a0d      	ldr	r2, [pc, #52]	@ (8004f2c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004ef6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004ef8:	e002      	b.n	8004f00 <LoopCopyDataInit>

08004efa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004efa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004efc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004efe:	3304      	adds	r3, #4

08004f00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004f00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004f02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004f04:	d3f9      	bcc.n	8004efa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004f06:	4a0a      	ldr	r2, [pc, #40]	@ (8004f30 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004f08:	4c0a      	ldr	r4, [pc, #40]	@ (8004f34 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004f0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004f0c:	e001      	b.n	8004f12 <LoopFillZerobss>

08004f0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004f0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004f10:	3204      	adds	r2, #4

08004f12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004f12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004f14:	d3fb      	bcc.n	8004f0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004f16:	f00d f81b 	bl	8011f50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004f1a:	f7fe fd13 	bl	8003944 <main>
  bx  lr    
 8004f1e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004f20:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004f24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004f28:	20000168 	.word	0x20000168
  ldr r2, =_sidata
 8004f2c:	08013fa0 	.word	0x08013fa0
  ldr r2, =_sbss
 8004f30:	20000168 	.word	0x20000168
  ldr r4, =_ebss
 8004f34:	20002918 	.word	0x20002918

08004f38 <DMA1_Stream2_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004f38:	e7fe      	b.n	8004f38 <DMA1_Stream2_IRQHandler>
	...

08004f3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004f40:	4b0e      	ldr	r3, [pc, #56]	@ (8004f7c <HAL_Init+0x40>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a0d      	ldr	r2, [pc, #52]	@ (8004f7c <HAL_Init+0x40>)
 8004f46:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004f4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004f4c:	4b0b      	ldr	r3, [pc, #44]	@ (8004f7c <HAL_Init+0x40>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a0a      	ldr	r2, [pc, #40]	@ (8004f7c <HAL_Init+0x40>)
 8004f52:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004f56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004f58:	4b08      	ldr	r3, [pc, #32]	@ (8004f7c <HAL_Init+0x40>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a07      	ldr	r2, [pc, #28]	@ (8004f7c <HAL_Init+0x40>)
 8004f5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004f64:	2003      	movs	r0, #3
 8004f66:	f000 fe6b 	bl	8005c40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004f6a:	200f      	movs	r0, #15
 8004f6c:	f000 f808 	bl	8004f80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004f70:	f7ff fc6c 	bl	800484c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004f74:	2300      	movs	r3, #0
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	bd80      	pop	{r7, pc}
 8004f7a:	bf00      	nop
 8004f7c:	40023c00 	.word	0x40023c00

08004f80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b082      	sub	sp, #8
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004f88:	4b12      	ldr	r3, [pc, #72]	@ (8004fd4 <HAL_InitTick+0x54>)
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	4b12      	ldr	r3, [pc, #72]	@ (8004fd8 <HAL_InitTick+0x58>)
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	4619      	mov	r1, r3
 8004f92:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004f96:	fbb3 f3f1 	udiv	r3, r3, r1
 8004f9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f000 fe83 	bl	8005caa <HAL_SYSTICK_Config>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d001      	beq.n	8004fae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	e00e      	b.n	8004fcc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2b0f      	cmp	r3, #15
 8004fb2:	d80a      	bhi.n	8004fca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	6879      	ldr	r1, [r7, #4]
 8004fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8004fbc:	f000 fe4b 	bl	8005c56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004fc0:	4a06      	ldr	r2, [pc, #24]	@ (8004fdc <HAL_InitTick+0x5c>)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	e000      	b.n	8004fcc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3708      	adds	r7, #8
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}
 8004fd4:	20000014 	.word	0x20000014
 8004fd8:	2000001c 	.word	0x2000001c
 8004fdc:	20000018 	.word	0x20000018

08004fe0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004fe4:	4b06      	ldr	r3, [pc, #24]	@ (8005000 <HAL_IncTick+0x20>)
 8004fe6:	781b      	ldrb	r3, [r3, #0]
 8004fe8:	461a      	mov	r2, r3
 8004fea:	4b06      	ldr	r3, [pc, #24]	@ (8005004 <HAL_IncTick+0x24>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4413      	add	r3, r2
 8004ff0:	4a04      	ldr	r2, [pc, #16]	@ (8005004 <HAL_IncTick+0x24>)
 8004ff2:	6013      	str	r3, [r2, #0]
}
 8004ff4:	bf00      	nop
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr
 8004ffe:	bf00      	nop
 8005000:	2000001c 	.word	0x2000001c
 8005004:	200017e4 	.word	0x200017e4

08005008 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005008:	b480      	push	{r7}
 800500a:	af00      	add	r7, sp, #0
  return uwTick;
 800500c:	4b03      	ldr	r3, [pc, #12]	@ (800501c <HAL_GetTick+0x14>)
 800500e:	681b      	ldr	r3, [r3, #0]
}
 8005010:	4618      	mov	r0, r3
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr
 800501a:	bf00      	nop
 800501c:	200017e4 	.word	0x200017e4

08005020 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b084      	sub	sp, #16
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005028:	f7ff ffee 	bl	8005008 <HAL_GetTick>
 800502c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005038:	d005      	beq.n	8005046 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800503a:	4b0a      	ldr	r3, [pc, #40]	@ (8005064 <HAL_Delay+0x44>)
 800503c:	781b      	ldrb	r3, [r3, #0]
 800503e:	461a      	mov	r2, r3
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	4413      	add	r3, r2
 8005044:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005046:	bf00      	nop
 8005048:	f7ff ffde 	bl	8005008 <HAL_GetTick>
 800504c:	4602      	mov	r2, r0
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	68fa      	ldr	r2, [r7, #12]
 8005054:	429a      	cmp	r2, r3
 8005056:	d8f7      	bhi.n	8005048 <HAL_Delay+0x28>
  {
  }
}
 8005058:	bf00      	nop
 800505a:	bf00      	nop
 800505c:	3710      	adds	r7, #16
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}
 8005062:	bf00      	nop
 8005064:	2000001c 	.word	0x2000001c

08005068 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b084      	sub	sp, #16
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005070:	2300      	movs	r3, #0
 8005072:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d101      	bne.n	800507e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	e033      	b.n	80050e6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005082:	2b00      	cmp	r3, #0
 8005084:	d109      	bne.n	800509a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f7ff fc0e 	bl	80048a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2200      	movs	r2, #0
 8005090:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2200      	movs	r2, #0
 8005096:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800509e:	f003 0310 	and.w	r3, r3, #16
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d118      	bne.n	80050d8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050aa:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80050ae:	f023 0302 	bic.w	r3, r3, #2
 80050b2:	f043 0202 	orr.w	r2, r3, #2
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f000 fb68 	bl	8005790 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2200      	movs	r2, #0
 80050c4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ca:	f023 0303 	bic.w	r3, r3, #3
 80050ce:	f043 0201 	orr.w	r2, r3, #1
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	641a      	str	r2, [r3, #64]	@ 0x40
 80050d6:	e001      	b.n	80050dc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2200      	movs	r2, #0
 80050e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80050e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3710      	adds	r7, #16
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}

080050ee <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80050ee:	b580      	push	{r7, lr}
 80050f0:	b086      	sub	sp, #24
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80050f6:	2300      	movs	r3, #0
 80050f8:	617b      	str	r3, [r7, #20]
 80050fa:	2300      	movs	r3, #0
 80050fc:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	f003 0302 	and.w	r3, r3, #2
 8005114:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	f003 0320 	and.w	r3, r3, #32
 800511c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d049      	beq.n	80051b8 <HAL_ADC_IRQHandler+0xca>
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d046      	beq.n	80051b8 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800512e:	f003 0310 	and.w	r3, r3, #16
 8005132:	2b00      	cmp	r3, #0
 8005134:	d105      	bne.n	8005142 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800513a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800514c:	2b00      	cmp	r3, #0
 800514e:	d12b      	bne.n	80051a8 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005154:	2b00      	cmp	r3, #0
 8005156:	d127      	bne.n	80051a8 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800515e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005162:	2b00      	cmp	r3, #0
 8005164:	d006      	beq.n	8005174 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005170:	2b00      	cmp	r3, #0
 8005172:	d119      	bne.n	80051a8 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	685a      	ldr	r2, [r3, #4]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f022 0220 	bic.w	r2, r2, #32
 8005182:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005188:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005194:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005198:	2b00      	cmp	r3, #0
 800519a:	d105      	bne.n	80051a8 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051a0:	f043 0201 	orr.w	r2, r3, #1
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f7ff f97b 	bl	80044a4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f06f 0212 	mvn.w	r2, #18
 80051b6:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f003 0304 	and.w	r3, r3, #4
 80051be:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051c6:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d057      	beq.n	800527e <HAL_ADC_IRQHandler+0x190>
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d054      	beq.n	800527e <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051d8:	f003 0310 	and.w	r3, r3, #16
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d105      	bne.n	80051ec <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051e4:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d139      	bne.n	800526e <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005200:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8005204:	2b00      	cmp	r3, #0
 8005206:	d006      	beq.n	8005216 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8005212:	2b00      	cmp	r3, #0
 8005214:	d12b      	bne.n	800526e <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8005220:	2b00      	cmp	r3, #0
 8005222:	d124      	bne.n	800526e <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800522e:	2b00      	cmp	r3, #0
 8005230:	d11d      	bne.n	800526e <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8005236:	2b00      	cmp	r3, #0
 8005238:	d119      	bne.n	800526e <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	685a      	ldr	r2, [r3, #4]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005248:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800524e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800525a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800525e:	2b00      	cmp	r3, #0
 8005260:	d105      	bne.n	800526e <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005266:	f043 0201 	orr.w	r2, r3, #1
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f000 fc0c 	bl	8005a8c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f06f 020c 	mvn.w	r2, #12
 800527c:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	f003 0301 	and.w	r3, r3, #1
 8005284:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800528c:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d017      	beq.n	80052c4 <HAL_ADC_IRQHandler+0x1d6>
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d014      	beq.n	80052c4 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f003 0301 	and.w	r3, r3, #1
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d10d      	bne.n	80052c4 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052ac:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f000 f925 	bl	8005504 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f06f 0201 	mvn.w	r2, #1
 80052c2:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f003 0320 	and.w	r3, r3, #32
 80052ca:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80052d2:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d015      	beq.n	8005306 <HAL_ADC_IRQHandler+0x218>
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d012      	beq.n	8005306 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052e4:	f043 0202 	orr.w	r2, r3, #2
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f06f 0220 	mvn.w	r2, #32
 80052f4:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f000 f90e 	bl	8005518 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f06f 0220 	mvn.w	r2, #32
 8005304:	601a      	str	r2, [r3, #0]
  }
}
 8005306:	bf00      	nop
 8005308:	3718      	adds	r7, #24
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}
	...

08005310 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b086      	sub	sp, #24
 8005314:	af00      	add	r7, sp, #0
 8005316:	60f8      	str	r0, [r7, #12]
 8005318:	60b9      	str	r1, [r7, #8]
 800531a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800531c:	2300      	movs	r3, #0
 800531e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005326:	2b01      	cmp	r3, #1
 8005328:	d101      	bne.n	800532e <HAL_ADC_Start_DMA+0x1e>
 800532a:	2302      	movs	r3, #2
 800532c:	e0ce      	b.n	80054cc <HAL_ADC_Start_DMA+0x1bc>
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2201      	movs	r2, #1
 8005332:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	689b      	ldr	r3, [r3, #8]
 800533c:	f003 0301 	and.w	r3, r3, #1
 8005340:	2b01      	cmp	r3, #1
 8005342:	d018      	beq.n	8005376 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	689a      	ldr	r2, [r3, #8]
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f042 0201 	orr.w	r2, r2, #1
 8005352:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005354:	4b5f      	ldr	r3, [pc, #380]	@ (80054d4 <HAL_ADC_Start_DMA+0x1c4>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a5f      	ldr	r2, [pc, #380]	@ (80054d8 <HAL_ADC_Start_DMA+0x1c8>)
 800535a:	fba2 2303 	umull	r2, r3, r2, r3
 800535e:	0c9a      	lsrs	r2, r3, #18
 8005360:	4613      	mov	r3, r2
 8005362:	005b      	lsls	r3, r3, #1
 8005364:	4413      	add	r3, r2
 8005366:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8005368:	e002      	b.n	8005370 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	3b01      	subs	r3, #1
 800536e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d1f9      	bne.n	800536a <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005380:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005384:	d107      	bne.n	8005396 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	689a      	ldr	r2, [r3, #8]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005394:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	f003 0301 	and.w	r3, r3, #1
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	f040 8086 	bne.w	80054b2 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053aa:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80053ae:	f023 0301 	bic.w	r3, r3, #1
 80053b2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d007      	beq.n	80053d8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053cc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80053d0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80053e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053e4:	d106      	bne.n	80053f4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053ea:	f023 0206 	bic.w	r2, r3, #6
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	645a      	str	r2, [r3, #68]	@ 0x44
 80053f2:	e002      	b.n	80053fa <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2200      	movs	r2, #0
 80053f8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2200      	movs	r2, #0
 80053fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005402:	4b36      	ldr	r3, [pc, #216]	@ (80054dc <HAL_ADC_Start_DMA+0x1cc>)
 8005404:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800540a:	4a35      	ldr	r2, [pc, #212]	@ (80054e0 <HAL_ADC_Start_DMA+0x1d0>)
 800540c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005412:	4a34      	ldr	r2, [pc, #208]	@ (80054e4 <HAL_ADC_Start_DMA+0x1d4>)
 8005414:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800541a:	4a33      	ldr	r2, [pc, #204]	@ (80054e8 <HAL_ADC_Start_DMA+0x1d8>)
 800541c:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8005426:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	685a      	ldr	r2, [r3, #4]
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8005436:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	689a      	ldr	r2, [r3, #8]
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005446:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	334c      	adds	r3, #76	@ 0x4c
 8005452:	4619      	mov	r1, r3
 8005454:	68ba      	ldr	r2, [r7, #8]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	f000 fce2 	bl	8005e20 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	f003 031f 	and.w	r3, r3, #31
 8005464:	2b00      	cmp	r3, #0
 8005466:	d10f      	bne.n	8005488 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005472:	2b00      	cmp	r3, #0
 8005474:	d129      	bne.n	80054ca <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	689a      	ldr	r2, [r3, #8]
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8005484:	609a      	str	r2, [r3, #8]
 8005486:	e020      	b.n	80054ca <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a17      	ldr	r2, [pc, #92]	@ (80054ec <HAL_ADC_Start_DMA+0x1dc>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d11b      	bne.n	80054ca <HAL_ADC_Start_DMA+0x1ba>
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800549c:	2b00      	cmp	r3, #0
 800549e:	d114      	bne.n	80054ca <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	689a      	ldr	r2, [r3, #8]
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80054ae:	609a      	str	r2, [r3, #8]
 80054b0:	e00b      	b.n	80054ca <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054b6:	f043 0210 	orr.w	r2, r3, #16
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054c2:	f043 0201 	orr.w	r2, r3, #1
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80054ca:	2300      	movs	r3, #0
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3718      	adds	r7, #24
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}
 80054d4:	20000014 	.word	0x20000014
 80054d8:	431bde83 	.word	0x431bde83
 80054dc:	40012300 	.word	0x40012300
 80054e0:	08005989 	.word	0x08005989
 80054e4:	08005a43 	.word	0x08005a43
 80054e8:	08005a5f 	.word	0x08005a5f
 80054ec:	40012000 	.word	0x40012000

080054f0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b083      	sub	sp, #12
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80054f8:	bf00      	nop
 80054fa:	370c      	adds	r7, #12
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr

08005504 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8005504:	b480      	push	{r7}
 8005506:	b083      	sub	sp, #12
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800550c:	bf00      	nop
 800550e:	370c      	adds	r7, #12
 8005510:	46bd      	mov	sp, r7
 8005512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005516:	4770      	bx	lr

08005518 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005518:	b480      	push	{r7}
 800551a:	b083      	sub	sp, #12
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8005520:	bf00      	nop
 8005522:	370c      	adds	r7, #12
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr

0800552c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800552c:	b480      	push	{r7}
 800552e:	b085      	sub	sp, #20
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
 8005534:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005536:	2300      	movs	r3, #0
 8005538:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005540:	2b01      	cmp	r3, #1
 8005542:	d101      	bne.n	8005548 <HAL_ADC_ConfigChannel+0x1c>
 8005544:	2302      	movs	r3, #2
 8005546:	e113      	b.n	8005770 <HAL_ADC_ConfigChannel+0x244>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	2b09      	cmp	r3, #9
 8005556:	d925      	bls.n	80055a4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	68d9      	ldr	r1, [r3, #12]
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	b29b      	uxth	r3, r3
 8005564:	461a      	mov	r2, r3
 8005566:	4613      	mov	r3, r2
 8005568:	005b      	lsls	r3, r3, #1
 800556a:	4413      	add	r3, r2
 800556c:	3b1e      	subs	r3, #30
 800556e:	2207      	movs	r2, #7
 8005570:	fa02 f303 	lsl.w	r3, r2, r3
 8005574:	43da      	mvns	r2, r3
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	400a      	ands	r2, r1
 800557c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	68d9      	ldr	r1, [r3, #12]
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	689a      	ldr	r2, [r3, #8]
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	b29b      	uxth	r3, r3
 800558e:	4618      	mov	r0, r3
 8005590:	4603      	mov	r3, r0
 8005592:	005b      	lsls	r3, r3, #1
 8005594:	4403      	add	r3, r0
 8005596:	3b1e      	subs	r3, #30
 8005598:	409a      	lsls	r2, r3
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	430a      	orrs	r2, r1
 80055a0:	60da      	str	r2, [r3, #12]
 80055a2:	e022      	b.n	80055ea <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	6919      	ldr	r1, [r3, #16]
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	461a      	mov	r2, r3
 80055b2:	4613      	mov	r3, r2
 80055b4:	005b      	lsls	r3, r3, #1
 80055b6:	4413      	add	r3, r2
 80055b8:	2207      	movs	r2, #7
 80055ba:	fa02 f303 	lsl.w	r3, r2, r3
 80055be:	43da      	mvns	r2, r3
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	400a      	ands	r2, r1
 80055c6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	6919      	ldr	r1, [r3, #16]
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	689a      	ldr	r2, [r3, #8]
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	4618      	mov	r0, r3
 80055da:	4603      	mov	r3, r0
 80055dc:	005b      	lsls	r3, r3, #1
 80055de:	4403      	add	r3, r0
 80055e0:	409a      	lsls	r2, r3
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	430a      	orrs	r2, r1
 80055e8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	2b06      	cmp	r3, #6
 80055f0:	d824      	bhi.n	800563c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	685a      	ldr	r2, [r3, #4]
 80055fc:	4613      	mov	r3, r2
 80055fe:	009b      	lsls	r3, r3, #2
 8005600:	4413      	add	r3, r2
 8005602:	3b05      	subs	r3, #5
 8005604:	221f      	movs	r2, #31
 8005606:	fa02 f303 	lsl.w	r3, r2, r3
 800560a:	43da      	mvns	r2, r3
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	400a      	ands	r2, r1
 8005612:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	b29b      	uxth	r3, r3
 8005620:	4618      	mov	r0, r3
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	685a      	ldr	r2, [r3, #4]
 8005626:	4613      	mov	r3, r2
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	4413      	add	r3, r2
 800562c:	3b05      	subs	r3, #5
 800562e:	fa00 f203 	lsl.w	r2, r0, r3
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	430a      	orrs	r2, r1
 8005638:	635a      	str	r2, [r3, #52]	@ 0x34
 800563a:	e04c      	b.n	80056d6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	2b0c      	cmp	r3, #12
 8005642:	d824      	bhi.n	800568e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	685a      	ldr	r2, [r3, #4]
 800564e:	4613      	mov	r3, r2
 8005650:	009b      	lsls	r3, r3, #2
 8005652:	4413      	add	r3, r2
 8005654:	3b23      	subs	r3, #35	@ 0x23
 8005656:	221f      	movs	r2, #31
 8005658:	fa02 f303 	lsl.w	r3, r2, r3
 800565c:	43da      	mvns	r2, r3
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	400a      	ands	r2, r1
 8005664:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	b29b      	uxth	r3, r3
 8005672:	4618      	mov	r0, r3
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	685a      	ldr	r2, [r3, #4]
 8005678:	4613      	mov	r3, r2
 800567a:	009b      	lsls	r3, r3, #2
 800567c:	4413      	add	r3, r2
 800567e:	3b23      	subs	r3, #35	@ 0x23
 8005680:	fa00 f203 	lsl.w	r2, r0, r3
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	430a      	orrs	r2, r1
 800568a:	631a      	str	r2, [r3, #48]	@ 0x30
 800568c:	e023      	b.n	80056d6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	685a      	ldr	r2, [r3, #4]
 8005698:	4613      	mov	r3, r2
 800569a:	009b      	lsls	r3, r3, #2
 800569c:	4413      	add	r3, r2
 800569e:	3b41      	subs	r3, #65	@ 0x41
 80056a0:	221f      	movs	r2, #31
 80056a2:	fa02 f303 	lsl.w	r3, r2, r3
 80056a6:	43da      	mvns	r2, r3
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	400a      	ands	r2, r1
 80056ae:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	4618      	mov	r0, r3
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	685a      	ldr	r2, [r3, #4]
 80056c2:	4613      	mov	r3, r2
 80056c4:	009b      	lsls	r3, r3, #2
 80056c6:	4413      	add	r3, r2
 80056c8:	3b41      	subs	r3, #65	@ 0x41
 80056ca:	fa00 f203 	lsl.w	r2, r0, r3
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	430a      	orrs	r2, r1
 80056d4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80056d6:	4b29      	ldr	r3, [pc, #164]	@ (800577c <HAL_ADC_ConfigChannel+0x250>)
 80056d8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a28      	ldr	r2, [pc, #160]	@ (8005780 <HAL_ADC_ConfigChannel+0x254>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d10f      	bne.n	8005704 <HAL_ADC_ConfigChannel+0x1d8>
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	2b12      	cmp	r3, #18
 80056ea:	d10b      	bne.n	8005704 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a1d      	ldr	r2, [pc, #116]	@ (8005780 <HAL_ADC_ConfigChannel+0x254>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d12b      	bne.n	8005766 <HAL_ADC_ConfigChannel+0x23a>
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a1c      	ldr	r2, [pc, #112]	@ (8005784 <HAL_ADC_ConfigChannel+0x258>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d003      	beq.n	8005720 <HAL_ADC_ConfigChannel+0x1f4>
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	2b11      	cmp	r3, #17
 800571e:	d122      	bne.n	8005766 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a11      	ldr	r2, [pc, #68]	@ (8005784 <HAL_ADC_ConfigChannel+0x258>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d111      	bne.n	8005766 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005742:	4b11      	ldr	r3, [pc, #68]	@ (8005788 <HAL_ADC_ConfigChannel+0x25c>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a11      	ldr	r2, [pc, #68]	@ (800578c <HAL_ADC_ConfigChannel+0x260>)
 8005748:	fba2 2303 	umull	r2, r3, r2, r3
 800574c:	0c9a      	lsrs	r2, r3, #18
 800574e:	4613      	mov	r3, r2
 8005750:	009b      	lsls	r3, r3, #2
 8005752:	4413      	add	r3, r2
 8005754:	005b      	lsls	r3, r3, #1
 8005756:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8005758:	e002      	b.n	8005760 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	3b01      	subs	r3, #1
 800575e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d1f9      	bne.n	800575a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2200      	movs	r2, #0
 800576a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800576e:	2300      	movs	r3, #0
}
 8005770:	4618      	mov	r0, r3
 8005772:	3714      	adds	r7, #20
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr
 800577c:	40012300 	.word	0x40012300
 8005780:	40012000 	.word	0x40012000
 8005784:	10000012 	.word	0x10000012
 8005788:	20000014 	.word	0x20000014
 800578c:	431bde83 	.word	0x431bde83

08005790 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005790:	b480      	push	{r7}
 8005792:	b085      	sub	sp, #20
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005798:	4b79      	ldr	r3, [pc, #484]	@ (8005980 <ADC_Init+0x1f0>)
 800579a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	685a      	ldr	r2, [r3, #4]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	431a      	orrs	r2, r3
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	685a      	ldr	r2, [r3, #4]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80057c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	6859      	ldr	r1, [r3, #4]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	691b      	ldr	r3, [r3, #16]
 80057d0:	021a      	lsls	r2, r3, #8
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	430a      	orrs	r2, r1
 80057d8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	685a      	ldr	r2, [r3, #4]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80057e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	6859      	ldr	r1, [r3, #4]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	689a      	ldr	r2, [r3, #8]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	430a      	orrs	r2, r1
 80057fa:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	689a      	ldr	r2, [r3, #8]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800580a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	6899      	ldr	r1, [r3, #8]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	68da      	ldr	r2, [r3, #12]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	430a      	orrs	r2, r1
 800581c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005822:	4a58      	ldr	r2, [pc, #352]	@ (8005984 <ADC_Init+0x1f4>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d022      	beq.n	800586e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	689a      	ldr	r2, [r3, #8]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005836:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	6899      	ldr	r1, [r3, #8]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	430a      	orrs	r2, r1
 8005848:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	689a      	ldr	r2, [r3, #8]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005858:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	6899      	ldr	r1, [r3, #8]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	430a      	orrs	r2, r1
 800586a:	609a      	str	r2, [r3, #8]
 800586c:	e00f      	b.n	800588e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	689a      	ldr	r2, [r3, #8]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800587c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	689a      	ldr	r2, [r3, #8]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800588c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	689a      	ldr	r2, [r3, #8]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f022 0202 	bic.w	r2, r2, #2
 800589c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	6899      	ldr	r1, [r3, #8]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	7e1b      	ldrb	r3, [r3, #24]
 80058a8:	005a      	lsls	r2, r3, #1
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	430a      	orrs	r2, r1
 80058b0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d01b      	beq.n	80058f4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	685a      	ldr	r2, [r3, #4]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80058ca:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	685a      	ldr	r2, [r3, #4]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80058da:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	6859      	ldr	r1, [r3, #4]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058e6:	3b01      	subs	r3, #1
 80058e8:	035a      	lsls	r2, r3, #13
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	430a      	orrs	r2, r1
 80058f0:	605a      	str	r2, [r3, #4]
 80058f2:	e007      	b.n	8005904 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	685a      	ldr	r2, [r3, #4]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005902:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8005912:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	69db      	ldr	r3, [r3, #28]
 800591e:	3b01      	subs	r3, #1
 8005920:	051a      	lsls	r2, r3, #20
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	430a      	orrs	r2, r1
 8005928:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	689a      	ldr	r2, [r3, #8]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005938:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	6899      	ldr	r1, [r3, #8]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005946:	025a      	lsls	r2, r3, #9
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	430a      	orrs	r2, r1
 800594e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	689a      	ldr	r2, [r3, #8]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800595e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	6899      	ldr	r1, [r3, #8]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	695b      	ldr	r3, [r3, #20]
 800596a:	029a      	lsls	r2, r3, #10
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	430a      	orrs	r2, r1
 8005972:	609a      	str	r2, [r3, #8]
}
 8005974:	bf00      	nop
 8005976:	3714      	adds	r7, #20
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr
 8005980:	40012300 	.word	0x40012300
 8005984:	0f000001 	.word	0x0f000001

08005988 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b084      	sub	sp, #16
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005994:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800599a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d13c      	bne.n	8005a1c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059a6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d12b      	bne.n	8005a14 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d127      	bne.n	8005a14 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059ca:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d006      	beq.n	80059e0 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d119      	bne.n	8005a14 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	685a      	ldr	r2, [r3, #4]
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f022 0220 	bic.w	r2, r2, #32
 80059ee:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059f4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a00:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d105      	bne.n	8005a14 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a0c:	f043 0201 	orr.w	r2, r3, #1
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005a14:	68f8      	ldr	r0, [r7, #12]
 8005a16:	f7fe fd45 	bl	80044a4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005a1a:	e00e      	b.n	8005a3a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a20:	f003 0310 	and.w	r3, r3, #16
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d003      	beq.n	8005a30 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8005a28:	68f8      	ldr	r0, [r7, #12]
 8005a2a:	f7ff fd75 	bl	8005518 <HAL_ADC_ErrorCallback>
}
 8005a2e:	e004      	b.n	8005a3a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	4798      	blx	r3
}
 8005a3a:	bf00      	nop
 8005a3c:	3710      	adds	r7, #16
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}

08005a42 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005a42:	b580      	push	{r7, lr}
 8005a44:	b084      	sub	sp, #16
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a4e:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005a50:	68f8      	ldr	r0, [r7, #12]
 8005a52:	f7ff fd4d 	bl	80054f0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005a56:	bf00      	nop
 8005a58:	3710      	adds	r7, #16
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}

08005a5e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005a5e:	b580      	push	{r7, lr}
 8005a60:	b084      	sub	sp, #16
 8005a62:	af00      	add	r7, sp, #0
 8005a64:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a6a:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2240      	movs	r2, #64	@ 0x40
 8005a70:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a76:	f043 0204 	orr.w	r2, r3, #4
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005a7e:	68f8      	ldr	r0, [r7, #12]
 8005a80:	f7ff fd4a 	bl	8005518 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005a84:	bf00      	nop
 8005a86:	3710      	adds	r7, #16
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}

08005a8c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b083      	sub	sp, #12
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8005a94:	bf00      	nop
 8005a96:	370c      	adds	r7, #12
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr

08005aa0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b085      	sub	sp, #20
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f003 0307 	and.w	r3, r3, #7
 8005aae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005ab0:	4b0c      	ldr	r3, [pc, #48]	@ (8005ae4 <__NVIC_SetPriorityGrouping+0x44>)
 8005ab2:	68db      	ldr	r3, [r3, #12]
 8005ab4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005ab6:	68ba      	ldr	r2, [r7, #8]
 8005ab8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005abc:	4013      	ands	r3, r2
 8005abe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005ac8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005acc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ad0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005ad2:	4a04      	ldr	r2, [pc, #16]	@ (8005ae4 <__NVIC_SetPriorityGrouping+0x44>)
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	60d3      	str	r3, [r2, #12]
}
 8005ad8:	bf00      	nop
 8005ada:	3714      	adds	r7, #20
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr
 8005ae4:	e000ed00 	.word	0xe000ed00

08005ae8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005aec:	4b04      	ldr	r3, [pc, #16]	@ (8005b00 <__NVIC_GetPriorityGrouping+0x18>)
 8005aee:	68db      	ldr	r3, [r3, #12]
 8005af0:	0a1b      	lsrs	r3, r3, #8
 8005af2:	f003 0307 	and.w	r3, r3, #7
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr
 8005b00:	e000ed00 	.word	0xe000ed00

08005b04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b083      	sub	sp, #12
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	db0b      	blt.n	8005b2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005b16:	79fb      	ldrb	r3, [r7, #7]
 8005b18:	f003 021f 	and.w	r2, r3, #31
 8005b1c:	4907      	ldr	r1, [pc, #28]	@ (8005b3c <__NVIC_EnableIRQ+0x38>)
 8005b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b22:	095b      	lsrs	r3, r3, #5
 8005b24:	2001      	movs	r0, #1
 8005b26:	fa00 f202 	lsl.w	r2, r0, r2
 8005b2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005b2e:	bf00      	nop
 8005b30:	370c      	adds	r7, #12
 8005b32:	46bd      	mov	sp, r7
 8005b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b38:	4770      	bx	lr
 8005b3a:	bf00      	nop
 8005b3c:	e000e100 	.word	0xe000e100

08005b40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b083      	sub	sp, #12
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	4603      	mov	r3, r0
 8005b48:	6039      	str	r1, [r7, #0]
 8005b4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	db0a      	blt.n	8005b6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	b2da      	uxtb	r2, r3
 8005b58:	490c      	ldr	r1, [pc, #48]	@ (8005b8c <__NVIC_SetPriority+0x4c>)
 8005b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b5e:	0112      	lsls	r2, r2, #4
 8005b60:	b2d2      	uxtb	r2, r2
 8005b62:	440b      	add	r3, r1
 8005b64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005b68:	e00a      	b.n	8005b80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	b2da      	uxtb	r2, r3
 8005b6e:	4908      	ldr	r1, [pc, #32]	@ (8005b90 <__NVIC_SetPriority+0x50>)
 8005b70:	79fb      	ldrb	r3, [r7, #7]
 8005b72:	f003 030f 	and.w	r3, r3, #15
 8005b76:	3b04      	subs	r3, #4
 8005b78:	0112      	lsls	r2, r2, #4
 8005b7a:	b2d2      	uxtb	r2, r2
 8005b7c:	440b      	add	r3, r1
 8005b7e:	761a      	strb	r2, [r3, #24]
}
 8005b80:	bf00      	nop
 8005b82:	370c      	adds	r7, #12
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr
 8005b8c:	e000e100 	.word	0xe000e100
 8005b90:	e000ed00 	.word	0xe000ed00

08005b94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b089      	sub	sp, #36	@ 0x24
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	60f8      	str	r0, [r7, #12]
 8005b9c:	60b9      	str	r1, [r7, #8]
 8005b9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	f003 0307 	and.w	r3, r3, #7
 8005ba6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005ba8:	69fb      	ldr	r3, [r7, #28]
 8005baa:	f1c3 0307 	rsb	r3, r3, #7
 8005bae:	2b04      	cmp	r3, #4
 8005bb0:	bf28      	it	cs
 8005bb2:	2304      	movcs	r3, #4
 8005bb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005bb6:	69fb      	ldr	r3, [r7, #28]
 8005bb8:	3304      	adds	r3, #4
 8005bba:	2b06      	cmp	r3, #6
 8005bbc:	d902      	bls.n	8005bc4 <NVIC_EncodePriority+0x30>
 8005bbe:	69fb      	ldr	r3, [r7, #28]
 8005bc0:	3b03      	subs	r3, #3
 8005bc2:	e000      	b.n	8005bc6 <NVIC_EncodePriority+0x32>
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005bc8:	f04f 32ff 	mov.w	r2, #4294967295
 8005bcc:	69bb      	ldr	r3, [r7, #24]
 8005bce:	fa02 f303 	lsl.w	r3, r2, r3
 8005bd2:	43da      	mvns	r2, r3
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	401a      	ands	r2, r3
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005bdc:	f04f 31ff 	mov.w	r1, #4294967295
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	fa01 f303 	lsl.w	r3, r1, r3
 8005be6:	43d9      	mvns	r1, r3
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005bec:	4313      	orrs	r3, r2
         );
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3724      	adds	r7, #36	@ 0x24
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf8:	4770      	bx	lr
	...

08005bfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b082      	sub	sp, #8
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	3b01      	subs	r3, #1
 8005c08:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005c0c:	d301      	bcc.n	8005c12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005c0e:	2301      	movs	r3, #1
 8005c10:	e00f      	b.n	8005c32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005c12:	4a0a      	ldr	r2, [pc, #40]	@ (8005c3c <SysTick_Config+0x40>)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	3b01      	subs	r3, #1
 8005c18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005c1a:	210f      	movs	r1, #15
 8005c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c20:	f7ff ff8e 	bl	8005b40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005c24:	4b05      	ldr	r3, [pc, #20]	@ (8005c3c <SysTick_Config+0x40>)
 8005c26:	2200      	movs	r2, #0
 8005c28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005c2a:	4b04      	ldr	r3, [pc, #16]	@ (8005c3c <SysTick_Config+0x40>)
 8005c2c:	2207      	movs	r2, #7
 8005c2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005c30:	2300      	movs	r3, #0
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3708      	adds	r7, #8
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}
 8005c3a:	bf00      	nop
 8005c3c:	e000e010 	.word	0xe000e010

08005c40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b082      	sub	sp, #8
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f7ff ff29 	bl	8005aa0 <__NVIC_SetPriorityGrouping>
}
 8005c4e:	bf00      	nop
 8005c50:	3708      	adds	r7, #8
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}

08005c56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005c56:	b580      	push	{r7, lr}
 8005c58:	b086      	sub	sp, #24
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	60b9      	str	r1, [r7, #8]
 8005c60:	607a      	str	r2, [r7, #4]
 8005c62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005c64:	2300      	movs	r3, #0
 8005c66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005c68:	f7ff ff3e 	bl	8005ae8 <__NVIC_GetPriorityGrouping>
 8005c6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	68b9      	ldr	r1, [r7, #8]
 8005c72:	6978      	ldr	r0, [r7, #20]
 8005c74:	f7ff ff8e 	bl	8005b94 <NVIC_EncodePriority>
 8005c78:	4602      	mov	r2, r0
 8005c7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c7e:	4611      	mov	r1, r2
 8005c80:	4618      	mov	r0, r3
 8005c82:	f7ff ff5d 	bl	8005b40 <__NVIC_SetPriority>
}
 8005c86:	bf00      	nop
 8005c88:	3718      	adds	r7, #24
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}

08005c8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005c8e:	b580      	push	{r7, lr}
 8005c90:	b082      	sub	sp, #8
 8005c92:	af00      	add	r7, sp, #0
 8005c94:	4603      	mov	r3, r0
 8005c96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005c98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	f7ff ff31 	bl	8005b04 <__NVIC_EnableIRQ>
}
 8005ca2:	bf00      	nop
 8005ca4:	3708      	adds	r7, #8
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}

08005caa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005caa:	b580      	push	{r7, lr}
 8005cac:	b082      	sub	sp, #8
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f7ff ffa2 	bl	8005bfc <SysTick_Config>
 8005cb8:	4603      	mov	r3, r0
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3708      	adds	r7, #8
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}
	...

08005cc4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b086      	sub	sp, #24
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005cd0:	f7ff f99a 	bl	8005008 <HAL_GetTick>
 8005cd4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d101      	bne.n	8005ce0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	e099      	b.n	8005e14 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2202      	movs	r2, #2
 8005ce4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2200      	movs	r2, #0
 8005cec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	681a      	ldr	r2, [r3, #0]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f022 0201 	bic.w	r2, r2, #1
 8005cfe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005d00:	e00f      	b.n	8005d22 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005d02:	f7ff f981 	bl	8005008 <HAL_GetTick>
 8005d06:	4602      	mov	r2, r0
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	1ad3      	subs	r3, r2, r3
 8005d0c:	2b05      	cmp	r3, #5
 8005d0e:	d908      	bls.n	8005d22 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2220      	movs	r2, #32
 8005d14:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2203      	movs	r2, #3
 8005d1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8005d1e:	2303      	movs	r3, #3
 8005d20:	e078      	b.n	8005e14 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f003 0301 	and.w	r3, r3, #1
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d1e8      	bne.n	8005d02 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005d38:	697a      	ldr	r2, [r7, #20]
 8005d3a:	4b38      	ldr	r3, [pc, #224]	@ (8005e1c <HAL_DMA_Init+0x158>)
 8005d3c:	4013      	ands	r3, r2
 8005d3e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	685a      	ldr	r2, [r3, #4]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	689b      	ldr	r3, [r3, #8]
 8005d48:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005d4e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	691b      	ldr	r3, [r3, #16]
 8005d54:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005d5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	699b      	ldr	r3, [r3, #24]
 8005d60:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005d66:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6a1b      	ldr	r3, [r3, #32]
 8005d6c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005d6e:	697a      	ldr	r2, [r7, #20]
 8005d70:	4313      	orrs	r3, r2
 8005d72:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d78:	2b04      	cmp	r3, #4
 8005d7a:	d107      	bne.n	8005d8c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d84:	4313      	orrs	r3, r2
 8005d86:	697a      	ldr	r2, [r7, #20]
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	697a      	ldr	r2, [r7, #20]
 8005d92:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	695b      	ldr	r3, [r3, #20]
 8005d9a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	f023 0307 	bic.w	r3, r3, #7
 8005da2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005da8:	697a      	ldr	r2, [r7, #20]
 8005daa:	4313      	orrs	r3, r2
 8005dac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005db2:	2b04      	cmp	r3, #4
 8005db4:	d117      	bne.n	8005de6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dba:	697a      	ldr	r2, [r7, #20]
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d00e      	beq.n	8005de6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f000 fb1b 	bl	8006404 <DMA_CheckFifoParam>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d008      	beq.n	8005de6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2240      	movs	r2, #64	@ 0x40
 8005dd8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2201      	movs	r2, #1
 8005dde:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8005de2:	2301      	movs	r3, #1
 8005de4:	e016      	b.n	8005e14 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	697a      	ldr	r2, [r7, #20]
 8005dec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f000 fad2 	bl	8006398 <DMA_CalcBaseAndBitshift>
 8005df4:	4603      	mov	r3, r0
 8005df6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005dfc:	223f      	movs	r2, #63	@ 0x3f
 8005dfe:	409a      	lsls	r2, r3
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2200      	movs	r2, #0
 8005e08:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005e12:	2300      	movs	r3, #0
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3718      	adds	r7, #24
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}
 8005e1c:	f010803f 	.word	0xf010803f

08005e20 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b086      	sub	sp, #24
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	60f8      	str	r0, [r7, #12]
 8005e28:	60b9      	str	r1, [r7, #8]
 8005e2a:	607a      	str	r2, [r7, #4]
 8005e2c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e36:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005e3e:	2b01      	cmp	r3, #1
 8005e40:	d101      	bne.n	8005e46 <HAL_DMA_Start_IT+0x26>
 8005e42:	2302      	movs	r3, #2
 8005e44:	e040      	b.n	8005ec8 <HAL_DMA_Start_IT+0xa8>
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2201      	movs	r2, #1
 8005e4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005e54:	b2db      	uxtb	r3, r3
 8005e56:	2b01      	cmp	r3, #1
 8005e58:	d12f      	bne.n	8005eba <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2202      	movs	r2, #2
 8005e5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2200      	movs	r2, #0
 8005e66:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	687a      	ldr	r2, [r7, #4]
 8005e6c:	68b9      	ldr	r1, [r7, #8]
 8005e6e:	68f8      	ldr	r0, [r7, #12]
 8005e70:	f000 fa64 	bl	800633c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e78:	223f      	movs	r2, #63	@ 0x3f
 8005e7a:	409a      	lsls	r2, r3
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f042 0216 	orr.w	r2, r2, #22
 8005e8e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d007      	beq.n	8005ea8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	681a      	ldr	r2, [r3, #0]
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f042 0208 	orr.w	r2, r2, #8
 8005ea6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	681a      	ldr	r2, [r3, #0]
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f042 0201 	orr.w	r2, r2, #1
 8005eb6:	601a      	str	r2, [r3, #0]
 8005eb8:	e005      	b.n	8005ec6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005ec2:	2302      	movs	r3, #2
 8005ec4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005ec6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	3718      	adds	r7, #24
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd80      	pop	{r7, pc}

08005ed0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b084      	sub	sp, #16
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005edc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005ede:	f7ff f893 	bl	8005008 <HAL_GetTick>
 8005ee2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005eea:	b2db      	uxtb	r3, r3
 8005eec:	2b02      	cmp	r3, #2
 8005eee:	d008      	beq.n	8005f02 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2280      	movs	r2, #128	@ 0x80
 8005ef4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8005efe:	2301      	movs	r3, #1
 8005f00:	e052      	b.n	8005fa8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f022 0216 	bic.w	r2, r2, #22
 8005f10:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	695a      	ldr	r2, [r3, #20]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005f20:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d103      	bne.n	8005f32 <HAL_DMA_Abort+0x62>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d007      	beq.n	8005f42 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f022 0208 	bic.w	r2, r2, #8
 8005f40:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	681a      	ldr	r2, [r3, #0]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f022 0201 	bic.w	r2, r2, #1
 8005f50:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005f52:	e013      	b.n	8005f7c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005f54:	f7ff f858 	bl	8005008 <HAL_GetTick>
 8005f58:	4602      	mov	r2, r0
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	1ad3      	subs	r3, r2, r3
 8005f5e:	2b05      	cmp	r3, #5
 8005f60:	d90c      	bls.n	8005f7c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2220      	movs	r2, #32
 8005f66:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2203      	movs	r2, #3
 8005f6c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2200      	movs	r2, #0
 8005f74:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8005f78:	2303      	movs	r3, #3
 8005f7a:	e015      	b.n	8005fa8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f003 0301 	and.w	r3, r3, #1
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d1e4      	bne.n	8005f54 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f8e:	223f      	movs	r2, #63	@ 0x3f
 8005f90:	409a      	lsls	r2, r3
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2201      	movs	r2, #1
 8005f9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8005fa6:	2300      	movs	r3, #0
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	3710      	adds	r7, #16
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}

08005fb0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b083      	sub	sp, #12
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005fbe:	b2db      	uxtb	r3, r3
 8005fc0:	2b02      	cmp	r3, #2
 8005fc2:	d004      	beq.n	8005fce <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2280      	movs	r2, #128	@ 0x80
 8005fc8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	e00c      	b.n	8005fe8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2205      	movs	r2, #5
 8005fd2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	681a      	ldr	r2, [r3, #0]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f022 0201 	bic.w	r2, r2, #1
 8005fe4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005fe6:	2300      	movs	r3, #0
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	370c      	adds	r7, #12
 8005fec:	46bd      	mov	sp, r7
 8005fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff2:	4770      	bx	lr

08005ff4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b086      	sub	sp, #24
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006000:	4b8e      	ldr	r3, [pc, #568]	@ (800623c <HAL_DMA_IRQHandler+0x248>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a8e      	ldr	r2, [pc, #568]	@ (8006240 <HAL_DMA_IRQHandler+0x24c>)
 8006006:	fba2 2303 	umull	r2, r3, r2, r3
 800600a:	0a9b      	lsrs	r3, r3, #10
 800600c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006012:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800601e:	2208      	movs	r2, #8
 8006020:	409a      	lsls	r2, r3
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	4013      	ands	r3, r2
 8006026:	2b00      	cmp	r3, #0
 8006028:	d01a      	beq.n	8006060 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f003 0304 	and.w	r3, r3, #4
 8006034:	2b00      	cmp	r3, #0
 8006036:	d013      	beq.n	8006060 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	681a      	ldr	r2, [r3, #0]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f022 0204 	bic.w	r2, r2, #4
 8006046:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800604c:	2208      	movs	r2, #8
 800604e:	409a      	lsls	r2, r3
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006058:	f043 0201 	orr.w	r2, r3, #1
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006064:	2201      	movs	r2, #1
 8006066:	409a      	lsls	r2, r3
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	4013      	ands	r3, r2
 800606c:	2b00      	cmp	r3, #0
 800606e:	d012      	beq.n	8006096 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	695b      	ldr	r3, [r3, #20]
 8006076:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800607a:	2b00      	cmp	r3, #0
 800607c:	d00b      	beq.n	8006096 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006082:	2201      	movs	r2, #1
 8006084:	409a      	lsls	r2, r3
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800608e:	f043 0202 	orr.w	r2, r3, #2
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800609a:	2204      	movs	r2, #4
 800609c:	409a      	lsls	r2, r3
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	4013      	ands	r3, r2
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d012      	beq.n	80060cc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f003 0302 	and.w	r3, r3, #2
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d00b      	beq.n	80060cc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060b8:	2204      	movs	r2, #4
 80060ba:	409a      	lsls	r2, r3
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060c4:	f043 0204 	orr.w	r2, r3, #4
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060d0:	2210      	movs	r2, #16
 80060d2:	409a      	lsls	r2, r3
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	4013      	ands	r3, r2
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d043      	beq.n	8006164 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f003 0308 	and.w	r3, r3, #8
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d03c      	beq.n	8006164 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060ee:	2210      	movs	r2, #16
 80060f0:	409a      	lsls	r2, r3
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006100:	2b00      	cmp	r3, #0
 8006102:	d018      	beq.n	8006136 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800610e:	2b00      	cmp	r3, #0
 8006110:	d108      	bne.n	8006124 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006116:	2b00      	cmp	r3, #0
 8006118:	d024      	beq.n	8006164 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	4798      	blx	r3
 8006122:	e01f      	b.n	8006164 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006128:	2b00      	cmp	r3, #0
 800612a:	d01b      	beq.n	8006164 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	4798      	blx	r3
 8006134:	e016      	b.n	8006164 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006140:	2b00      	cmp	r3, #0
 8006142:	d107      	bne.n	8006154 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	681a      	ldr	r2, [r3, #0]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f022 0208 	bic.w	r2, r2, #8
 8006152:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006158:	2b00      	cmp	r3, #0
 800615a:	d003      	beq.n	8006164 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006168:	2220      	movs	r2, #32
 800616a:	409a      	lsls	r2, r3
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	4013      	ands	r3, r2
 8006170:	2b00      	cmp	r3, #0
 8006172:	f000 808f 	beq.w	8006294 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f003 0310 	and.w	r3, r3, #16
 8006180:	2b00      	cmp	r3, #0
 8006182:	f000 8087 	beq.w	8006294 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800618a:	2220      	movs	r2, #32
 800618c:	409a      	lsls	r2, r3
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006198:	b2db      	uxtb	r3, r3
 800619a:	2b05      	cmp	r3, #5
 800619c:	d136      	bne.n	800620c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	681a      	ldr	r2, [r3, #0]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f022 0216 	bic.w	r2, r2, #22
 80061ac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	695a      	ldr	r2, [r3, #20]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80061bc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d103      	bne.n	80061ce <HAL_DMA_IRQHandler+0x1da>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d007      	beq.n	80061de <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	681a      	ldr	r2, [r3, #0]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f022 0208 	bic.w	r2, r2, #8
 80061dc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061e2:	223f      	movs	r2, #63	@ 0x3f
 80061e4:	409a      	lsls	r2, r3
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2201      	movs	r2, #1
 80061ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2200      	movs	r2, #0
 80061f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d07e      	beq.n	8006300 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	4798      	blx	r3
        }
        return;
 800620a:	e079      	b.n	8006300 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006216:	2b00      	cmp	r3, #0
 8006218:	d01d      	beq.n	8006256 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006224:	2b00      	cmp	r3, #0
 8006226:	d10d      	bne.n	8006244 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800622c:	2b00      	cmp	r3, #0
 800622e:	d031      	beq.n	8006294 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	4798      	blx	r3
 8006238:	e02c      	b.n	8006294 <HAL_DMA_IRQHandler+0x2a0>
 800623a:	bf00      	nop
 800623c:	20000014 	.word	0x20000014
 8006240:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006248:	2b00      	cmp	r3, #0
 800624a:	d023      	beq.n	8006294 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	4798      	blx	r3
 8006254:	e01e      	b.n	8006294 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006260:	2b00      	cmp	r3, #0
 8006262:	d10f      	bne.n	8006284 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	681a      	ldr	r2, [r3, #0]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f022 0210 	bic.w	r2, r2, #16
 8006272:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2201      	movs	r2, #1
 8006278:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2200      	movs	r2, #0
 8006280:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006288:	2b00      	cmp	r3, #0
 800628a:	d003      	beq.n	8006294 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006298:	2b00      	cmp	r3, #0
 800629a:	d032      	beq.n	8006302 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062a0:	f003 0301 	and.w	r3, r3, #1
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d022      	beq.n	80062ee <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2205      	movs	r2, #5
 80062ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	681a      	ldr	r2, [r3, #0]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f022 0201 	bic.w	r2, r2, #1
 80062be:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	3301      	adds	r3, #1
 80062c4:	60bb      	str	r3, [r7, #8]
 80062c6:	697a      	ldr	r2, [r7, #20]
 80062c8:	429a      	cmp	r2, r3
 80062ca:	d307      	bcc.n	80062dc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f003 0301 	and.w	r3, r3, #1
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d1f2      	bne.n	80062c0 <HAL_DMA_IRQHandler+0x2cc>
 80062da:	e000      	b.n	80062de <HAL_DMA_IRQHandler+0x2ea>
          break;
 80062dc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2201      	movs	r2, #1
 80062e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2200      	movs	r2, #0
 80062ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d005      	beq.n	8006302 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	4798      	blx	r3
 80062fe:	e000      	b.n	8006302 <HAL_DMA_IRQHandler+0x30e>
        return;
 8006300:	bf00      	nop
    }
  }
}
 8006302:	3718      	adds	r7, #24
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}

08006308 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8006308:	b480      	push	{r7}
 800630a:	b083      	sub	sp, #12
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006316:	b2db      	uxtb	r3, r3
}
 8006318:	4618      	mov	r0, r3
 800631a:	370c      	adds	r7, #12
 800631c:	46bd      	mov	sp, r7
 800631e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006322:	4770      	bx	lr

08006324 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8006324:	b480      	push	{r7}
 8006326:	b083      	sub	sp, #12
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8006330:	4618      	mov	r0, r3
 8006332:	370c      	adds	r7, #12
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr

0800633c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800633c:	b480      	push	{r7}
 800633e:	b085      	sub	sp, #20
 8006340:	af00      	add	r7, sp, #0
 8006342:	60f8      	str	r0, [r7, #12]
 8006344:	60b9      	str	r1, [r7, #8]
 8006346:	607a      	str	r2, [r7, #4]
 8006348:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	681a      	ldr	r2, [r3, #0]
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006358:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	683a      	ldr	r2, [r7, #0]
 8006360:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	2b40      	cmp	r3, #64	@ 0x40
 8006368:	d108      	bne.n	800637c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	687a      	ldr	r2, [r7, #4]
 8006370:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	68ba      	ldr	r2, [r7, #8]
 8006378:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800637a:	e007      	b.n	800638c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	68ba      	ldr	r2, [r7, #8]
 8006382:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	687a      	ldr	r2, [r7, #4]
 800638a:	60da      	str	r2, [r3, #12]
}
 800638c:	bf00      	nop
 800638e:	3714      	adds	r7, #20
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr

08006398 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006398:	b480      	push	{r7}
 800639a:	b085      	sub	sp, #20
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	b2db      	uxtb	r3, r3
 80063a6:	3b10      	subs	r3, #16
 80063a8:	4a14      	ldr	r2, [pc, #80]	@ (80063fc <DMA_CalcBaseAndBitshift+0x64>)
 80063aa:	fba2 2303 	umull	r2, r3, r2, r3
 80063ae:	091b      	lsrs	r3, r3, #4
 80063b0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80063b2:	4a13      	ldr	r2, [pc, #76]	@ (8006400 <DMA_CalcBaseAndBitshift+0x68>)
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	4413      	add	r3, r2
 80063b8:	781b      	ldrb	r3, [r3, #0]
 80063ba:	461a      	mov	r2, r3
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2b03      	cmp	r3, #3
 80063c4:	d909      	bls.n	80063da <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80063ce:	f023 0303 	bic.w	r3, r3, #3
 80063d2:	1d1a      	adds	r2, r3, #4
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	659a      	str	r2, [r3, #88]	@ 0x58
 80063d8:	e007      	b.n	80063ea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80063e2:	f023 0303 	bic.w	r3, r3, #3
 80063e6:	687a      	ldr	r2, [r7, #4]
 80063e8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3714      	adds	r7, #20
 80063f2:	46bd      	mov	sp, r7
 80063f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f8:	4770      	bx	lr
 80063fa:	bf00      	nop
 80063fc:	aaaaaaab 	.word	0xaaaaaaab
 8006400:	08013f30 	.word	0x08013f30

08006404 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006404:	b480      	push	{r7}
 8006406:	b085      	sub	sp, #20
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800640c:	2300      	movs	r3, #0
 800640e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006414:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	699b      	ldr	r3, [r3, #24]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d11f      	bne.n	800645e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	2b03      	cmp	r3, #3
 8006422:	d856      	bhi.n	80064d2 <DMA_CheckFifoParam+0xce>
 8006424:	a201      	add	r2, pc, #4	@ (adr r2, 800642c <DMA_CheckFifoParam+0x28>)
 8006426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800642a:	bf00      	nop
 800642c:	0800643d 	.word	0x0800643d
 8006430:	0800644f 	.word	0x0800644f
 8006434:	0800643d 	.word	0x0800643d
 8006438:	080064d3 	.word	0x080064d3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006440:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006444:	2b00      	cmp	r3, #0
 8006446:	d046      	beq.n	80064d6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006448:	2301      	movs	r3, #1
 800644a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800644c:	e043      	b.n	80064d6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006452:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006456:	d140      	bne.n	80064da <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006458:	2301      	movs	r3, #1
 800645a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800645c:	e03d      	b.n	80064da <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	699b      	ldr	r3, [r3, #24]
 8006462:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006466:	d121      	bne.n	80064ac <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	2b03      	cmp	r3, #3
 800646c:	d837      	bhi.n	80064de <DMA_CheckFifoParam+0xda>
 800646e:	a201      	add	r2, pc, #4	@ (adr r2, 8006474 <DMA_CheckFifoParam+0x70>)
 8006470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006474:	08006485 	.word	0x08006485
 8006478:	0800648b 	.word	0x0800648b
 800647c:	08006485 	.word	0x08006485
 8006480:	0800649d 	.word	0x0800649d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006484:	2301      	movs	r3, #1
 8006486:	73fb      	strb	r3, [r7, #15]
      break;
 8006488:	e030      	b.n	80064ec <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800648e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006492:	2b00      	cmp	r3, #0
 8006494:	d025      	beq.n	80064e2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006496:	2301      	movs	r3, #1
 8006498:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800649a:	e022      	b.n	80064e2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064a0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80064a4:	d11f      	bne.n	80064e6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80064a6:	2301      	movs	r3, #1
 80064a8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80064aa:	e01c      	b.n	80064e6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	2b02      	cmp	r3, #2
 80064b0:	d903      	bls.n	80064ba <DMA_CheckFifoParam+0xb6>
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	2b03      	cmp	r3, #3
 80064b6:	d003      	beq.n	80064c0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80064b8:	e018      	b.n	80064ec <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80064ba:	2301      	movs	r3, #1
 80064bc:	73fb      	strb	r3, [r7, #15]
      break;
 80064be:	e015      	b.n	80064ec <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064c4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d00e      	beq.n	80064ea <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80064cc:	2301      	movs	r3, #1
 80064ce:	73fb      	strb	r3, [r7, #15]
      break;
 80064d0:	e00b      	b.n	80064ea <DMA_CheckFifoParam+0xe6>
      break;
 80064d2:	bf00      	nop
 80064d4:	e00a      	b.n	80064ec <DMA_CheckFifoParam+0xe8>
      break;
 80064d6:	bf00      	nop
 80064d8:	e008      	b.n	80064ec <DMA_CheckFifoParam+0xe8>
      break;
 80064da:	bf00      	nop
 80064dc:	e006      	b.n	80064ec <DMA_CheckFifoParam+0xe8>
      break;
 80064de:	bf00      	nop
 80064e0:	e004      	b.n	80064ec <DMA_CheckFifoParam+0xe8>
      break;
 80064e2:	bf00      	nop
 80064e4:	e002      	b.n	80064ec <DMA_CheckFifoParam+0xe8>
      break;   
 80064e6:	bf00      	nop
 80064e8:	e000      	b.n	80064ec <DMA_CheckFifoParam+0xe8>
      break;
 80064ea:	bf00      	nop
    }
  } 
  
  return status; 
 80064ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	3714      	adds	r7, #20
 80064f2:	46bd      	mov	sp, r7
 80064f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f8:	4770      	bx	lr
 80064fa:	bf00      	nop

080064fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b089      	sub	sp, #36	@ 0x24
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
 8006504:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006506:	2300      	movs	r3, #0
 8006508:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800650a:	2300      	movs	r3, #0
 800650c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800650e:	2300      	movs	r3, #0
 8006510:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006512:	2300      	movs	r3, #0
 8006514:	61fb      	str	r3, [r7, #28]
 8006516:	e159      	b.n	80067cc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006518:	2201      	movs	r2, #1
 800651a:	69fb      	ldr	r3, [r7, #28]
 800651c:	fa02 f303 	lsl.w	r3, r2, r3
 8006520:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	697a      	ldr	r2, [r7, #20]
 8006528:	4013      	ands	r3, r2
 800652a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800652c:	693a      	ldr	r2, [r7, #16]
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	429a      	cmp	r2, r3
 8006532:	f040 8148 	bne.w	80067c6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	f003 0303 	and.w	r3, r3, #3
 800653e:	2b01      	cmp	r3, #1
 8006540:	d005      	beq.n	800654e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800654a:	2b02      	cmp	r3, #2
 800654c:	d130      	bne.n	80065b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	689b      	ldr	r3, [r3, #8]
 8006552:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006554:	69fb      	ldr	r3, [r7, #28]
 8006556:	005b      	lsls	r3, r3, #1
 8006558:	2203      	movs	r2, #3
 800655a:	fa02 f303 	lsl.w	r3, r2, r3
 800655e:	43db      	mvns	r3, r3
 8006560:	69ba      	ldr	r2, [r7, #24]
 8006562:	4013      	ands	r3, r2
 8006564:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	68da      	ldr	r2, [r3, #12]
 800656a:	69fb      	ldr	r3, [r7, #28]
 800656c:	005b      	lsls	r3, r3, #1
 800656e:	fa02 f303 	lsl.w	r3, r2, r3
 8006572:	69ba      	ldr	r2, [r7, #24]
 8006574:	4313      	orrs	r3, r2
 8006576:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	69ba      	ldr	r2, [r7, #24]
 800657c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006584:	2201      	movs	r2, #1
 8006586:	69fb      	ldr	r3, [r7, #28]
 8006588:	fa02 f303 	lsl.w	r3, r2, r3
 800658c:	43db      	mvns	r3, r3
 800658e:	69ba      	ldr	r2, [r7, #24]
 8006590:	4013      	ands	r3, r2
 8006592:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	091b      	lsrs	r3, r3, #4
 800659a:	f003 0201 	and.w	r2, r3, #1
 800659e:	69fb      	ldr	r3, [r7, #28]
 80065a0:	fa02 f303 	lsl.w	r3, r2, r3
 80065a4:	69ba      	ldr	r2, [r7, #24]
 80065a6:	4313      	orrs	r3, r2
 80065a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	69ba      	ldr	r2, [r7, #24]
 80065ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	685b      	ldr	r3, [r3, #4]
 80065b4:	f003 0303 	and.w	r3, r3, #3
 80065b8:	2b03      	cmp	r3, #3
 80065ba:	d017      	beq.n	80065ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	68db      	ldr	r3, [r3, #12]
 80065c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80065c2:	69fb      	ldr	r3, [r7, #28]
 80065c4:	005b      	lsls	r3, r3, #1
 80065c6:	2203      	movs	r2, #3
 80065c8:	fa02 f303 	lsl.w	r3, r2, r3
 80065cc:	43db      	mvns	r3, r3
 80065ce:	69ba      	ldr	r2, [r7, #24]
 80065d0:	4013      	ands	r3, r2
 80065d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	689a      	ldr	r2, [r3, #8]
 80065d8:	69fb      	ldr	r3, [r7, #28]
 80065da:	005b      	lsls	r3, r3, #1
 80065dc:	fa02 f303 	lsl.w	r3, r2, r3
 80065e0:	69ba      	ldr	r2, [r7, #24]
 80065e2:	4313      	orrs	r3, r2
 80065e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	69ba      	ldr	r2, [r7, #24]
 80065ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	f003 0303 	and.w	r3, r3, #3
 80065f4:	2b02      	cmp	r3, #2
 80065f6:	d123      	bne.n	8006640 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80065f8:	69fb      	ldr	r3, [r7, #28]
 80065fa:	08da      	lsrs	r2, r3, #3
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	3208      	adds	r2, #8
 8006600:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006604:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006606:	69fb      	ldr	r3, [r7, #28]
 8006608:	f003 0307 	and.w	r3, r3, #7
 800660c:	009b      	lsls	r3, r3, #2
 800660e:	220f      	movs	r2, #15
 8006610:	fa02 f303 	lsl.w	r3, r2, r3
 8006614:	43db      	mvns	r3, r3
 8006616:	69ba      	ldr	r2, [r7, #24]
 8006618:	4013      	ands	r3, r2
 800661a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	691a      	ldr	r2, [r3, #16]
 8006620:	69fb      	ldr	r3, [r7, #28]
 8006622:	f003 0307 	and.w	r3, r3, #7
 8006626:	009b      	lsls	r3, r3, #2
 8006628:	fa02 f303 	lsl.w	r3, r2, r3
 800662c:	69ba      	ldr	r2, [r7, #24]
 800662e:	4313      	orrs	r3, r2
 8006630:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006632:	69fb      	ldr	r3, [r7, #28]
 8006634:	08da      	lsrs	r2, r3, #3
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	3208      	adds	r2, #8
 800663a:	69b9      	ldr	r1, [r7, #24]
 800663c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006646:	69fb      	ldr	r3, [r7, #28]
 8006648:	005b      	lsls	r3, r3, #1
 800664a:	2203      	movs	r2, #3
 800664c:	fa02 f303 	lsl.w	r3, r2, r3
 8006650:	43db      	mvns	r3, r3
 8006652:	69ba      	ldr	r2, [r7, #24]
 8006654:	4013      	ands	r3, r2
 8006656:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	f003 0203 	and.w	r2, r3, #3
 8006660:	69fb      	ldr	r3, [r7, #28]
 8006662:	005b      	lsls	r3, r3, #1
 8006664:	fa02 f303 	lsl.w	r3, r2, r3
 8006668:	69ba      	ldr	r2, [r7, #24]
 800666a:	4313      	orrs	r3, r2
 800666c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	69ba      	ldr	r2, [r7, #24]
 8006672:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800667c:	2b00      	cmp	r3, #0
 800667e:	f000 80a2 	beq.w	80067c6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006682:	2300      	movs	r3, #0
 8006684:	60fb      	str	r3, [r7, #12]
 8006686:	4b57      	ldr	r3, [pc, #348]	@ (80067e4 <HAL_GPIO_Init+0x2e8>)
 8006688:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800668a:	4a56      	ldr	r2, [pc, #344]	@ (80067e4 <HAL_GPIO_Init+0x2e8>)
 800668c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006690:	6453      	str	r3, [r2, #68]	@ 0x44
 8006692:	4b54      	ldr	r3, [pc, #336]	@ (80067e4 <HAL_GPIO_Init+0x2e8>)
 8006694:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006696:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800669a:	60fb      	str	r3, [r7, #12]
 800669c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800669e:	4a52      	ldr	r2, [pc, #328]	@ (80067e8 <HAL_GPIO_Init+0x2ec>)
 80066a0:	69fb      	ldr	r3, [r7, #28]
 80066a2:	089b      	lsrs	r3, r3, #2
 80066a4:	3302      	adds	r3, #2
 80066a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80066ac:	69fb      	ldr	r3, [r7, #28]
 80066ae:	f003 0303 	and.w	r3, r3, #3
 80066b2:	009b      	lsls	r3, r3, #2
 80066b4:	220f      	movs	r2, #15
 80066b6:	fa02 f303 	lsl.w	r3, r2, r3
 80066ba:	43db      	mvns	r3, r3
 80066bc:	69ba      	ldr	r2, [r7, #24]
 80066be:	4013      	ands	r3, r2
 80066c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	4a49      	ldr	r2, [pc, #292]	@ (80067ec <HAL_GPIO_Init+0x2f0>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d019      	beq.n	80066fe <HAL_GPIO_Init+0x202>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	4a48      	ldr	r2, [pc, #288]	@ (80067f0 <HAL_GPIO_Init+0x2f4>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d013      	beq.n	80066fa <HAL_GPIO_Init+0x1fe>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	4a47      	ldr	r2, [pc, #284]	@ (80067f4 <HAL_GPIO_Init+0x2f8>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d00d      	beq.n	80066f6 <HAL_GPIO_Init+0x1fa>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	4a46      	ldr	r2, [pc, #280]	@ (80067f8 <HAL_GPIO_Init+0x2fc>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d007      	beq.n	80066f2 <HAL_GPIO_Init+0x1f6>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	4a45      	ldr	r2, [pc, #276]	@ (80067fc <HAL_GPIO_Init+0x300>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d101      	bne.n	80066ee <HAL_GPIO_Init+0x1f2>
 80066ea:	2304      	movs	r3, #4
 80066ec:	e008      	b.n	8006700 <HAL_GPIO_Init+0x204>
 80066ee:	2307      	movs	r3, #7
 80066f0:	e006      	b.n	8006700 <HAL_GPIO_Init+0x204>
 80066f2:	2303      	movs	r3, #3
 80066f4:	e004      	b.n	8006700 <HAL_GPIO_Init+0x204>
 80066f6:	2302      	movs	r3, #2
 80066f8:	e002      	b.n	8006700 <HAL_GPIO_Init+0x204>
 80066fa:	2301      	movs	r3, #1
 80066fc:	e000      	b.n	8006700 <HAL_GPIO_Init+0x204>
 80066fe:	2300      	movs	r3, #0
 8006700:	69fa      	ldr	r2, [r7, #28]
 8006702:	f002 0203 	and.w	r2, r2, #3
 8006706:	0092      	lsls	r2, r2, #2
 8006708:	4093      	lsls	r3, r2
 800670a:	69ba      	ldr	r2, [r7, #24]
 800670c:	4313      	orrs	r3, r2
 800670e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006710:	4935      	ldr	r1, [pc, #212]	@ (80067e8 <HAL_GPIO_Init+0x2ec>)
 8006712:	69fb      	ldr	r3, [r7, #28]
 8006714:	089b      	lsrs	r3, r3, #2
 8006716:	3302      	adds	r3, #2
 8006718:	69ba      	ldr	r2, [r7, #24]
 800671a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800671e:	4b38      	ldr	r3, [pc, #224]	@ (8006800 <HAL_GPIO_Init+0x304>)
 8006720:	689b      	ldr	r3, [r3, #8]
 8006722:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	43db      	mvns	r3, r3
 8006728:	69ba      	ldr	r2, [r7, #24]
 800672a:	4013      	ands	r3, r2
 800672c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006736:	2b00      	cmp	r3, #0
 8006738:	d003      	beq.n	8006742 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800673a:	69ba      	ldr	r2, [r7, #24]
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	4313      	orrs	r3, r2
 8006740:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006742:	4a2f      	ldr	r2, [pc, #188]	@ (8006800 <HAL_GPIO_Init+0x304>)
 8006744:	69bb      	ldr	r3, [r7, #24]
 8006746:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006748:	4b2d      	ldr	r3, [pc, #180]	@ (8006800 <HAL_GPIO_Init+0x304>)
 800674a:	68db      	ldr	r3, [r3, #12]
 800674c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	43db      	mvns	r3, r3
 8006752:	69ba      	ldr	r2, [r7, #24]
 8006754:	4013      	ands	r3, r2
 8006756:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006760:	2b00      	cmp	r3, #0
 8006762:	d003      	beq.n	800676c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8006764:	69ba      	ldr	r2, [r7, #24]
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	4313      	orrs	r3, r2
 800676a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800676c:	4a24      	ldr	r2, [pc, #144]	@ (8006800 <HAL_GPIO_Init+0x304>)
 800676e:	69bb      	ldr	r3, [r7, #24]
 8006770:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006772:	4b23      	ldr	r3, [pc, #140]	@ (8006800 <HAL_GPIO_Init+0x304>)
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	43db      	mvns	r3, r3
 800677c:	69ba      	ldr	r2, [r7, #24]
 800677e:	4013      	ands	r3, r2
 8006780:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800678a:	2b00      	cmp	r3, #0
 800678c:	d003      	beq.n	8006796 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800678e:	69ba      	ldr	r2, [r7, #24]
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	4313      	orrs	r3, r2
 8006794:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006796:	4a1a      	ldr	r2, [pc, #104]	@ (8006800 <HAL_GPIO_Init+0x304>)
 8006798:	69bb      	ldr	r3, [r7, #24]
 800679a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800679c:	4b18      	ldr	r3, [pc, #96]	@ (8006800 <HAL_GPIO_Init+0x304>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	43db      	mvns	r3, r3
 80067a6:	69ba      	ldr	r2, [r7, #24]
 80067a8:	4013      	ands	r3, r2
 80067aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d003      	beq.n	80067c0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80067b8:	69ba      	ldr	r2, [r7, #24]
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	4313      	orrs	r3, r2
 80067be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80067c0:	4a0f      	ldr	r2, [pc, #60]	@ (8006800 <HAL_GPIO_Init+0x304>)
 80067c2:	69bb      	ldr	r3, [r7, #24]
 80067c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80067c6:	69fb      	ldr	r3, [r7, #28]
 80067c8:	3301      	adds	r3, #1
 80067ca:	61fb      	str	r3, [r7, #28]
 80067cc:	69fb      	ldr	r3, [r7, #28]
 80067ce:	2b0f      	cmp	r3, #15
 80067d0:	f67f aea2 	bls.w	8006518 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80067d4:	bf00      	nop
 80067d6:	bf00      	nop
 80067d8:	3724      	adds	r7, #36	@ 0x24
 80067da:	46bd      	mov	sp, r7
 80067dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e0:	4770      	bx	lr
 80067e2:	bf00      	nop
 80067e4:	40023800 	.word	0x40023800
 80067e8:	40013800 	.word	0x40013800
 80067ec:	40020000 	.word	0x40020000
 80067f0:	40020400 	.word	0x40020400
 80067f4:	40020800 	.word	0x40020800
 80067f8:	40020c00 	.word	0x40020c00
 80067fc:	40021000 	.word	0x40021000
 8006800:	40013c00 	.word	0x40013c00

08006804 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006804:	b480      	push	{r7}
 8006806:	b085      	sub	sp, #20
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
 800680c:	460b      	mov	r3, r1
 800680e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	691a      	ldr	r2, [r3, #16]
 8006814:	887b      	ldrh	r3, [r7, #2]
 8006816:	4013      	ands	r3, r2
 8006818:	2b00      	cmp	r3, #0
 800681a:	d002      	beq.n	8006822 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800681c:	2301      	movs	r3, #1
 800681e:	73fb      	strb	r3, [r7, #15]
 8006820:	e001      	b.n	8006826 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006822:	2300      	movs	r3, #0
 8006824:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006826:	7bfb      	ldrb	r3, [r7, #15]
}
 8006828:	4618      	mov	r0, r3
 800682a:	3714      	adds	r7, #20
 800682c:	46bd      	mov	sp, r7
 800682e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006832:	4770      	bx	lr

08006834 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006834:	b480      	push	{r7}
 8006836:	b083      	sub	sp, #12
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
 800683c:	460b      	mov	r3, r1
 800683e:	807b      	strh	r3, [r7, #2]
 8006840:	4613      	mov	r3, r2
 8006842:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006844:	787b      	ldrb	r3, [r7, #1]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d003      	beq.n	8006852 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800684a:	887a      	ldrh	r2, [r7, #2]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006850:	e003      	b.n	800685a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006852:	887b      	ldrh	r3, [r7, #2]
 8006854:	041a      	lsls	r2, r3, #16
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	619a      	str	r2, [r3, #24]
}
 800685a:	bf00      	nop
 800685c:	370c      	adds	r7, #12
 800685e:	46bd      	mov	sp, r7
 8006860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006864:	4770      	bx	lr

08006866 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006866:	b480      	push	{r7}
 8006868:	b085      	sub	sp, #20
 800686a:	af00      	add	r7, sp, #0
 800686c:	6078      	str	r0, [r7, #4]
 800686e:	460b      	mov	r3, r1
 8006870:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	695b      	ldr	r3, [r3, #20]
 8006876:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006878:	887a      	ldrh	r2, [r7, #2]
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	4013      	ands	r3, r2
 800687e:	041a      	lsls	r2, r3, #16
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	43d9      	mvns	r1, r3
 8006884:	887b      	ldrh	r3, [r7, #2]
 8006886:	400b      	ands	r3, r1
 8006888:	431a      	orrs	r2, r3
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	619a      	str	r2, [r3, #24]
}
 800688e:	bf00      	nop
 8006890:	3714      	adds	r7, #20
 8006892:	46bd      	mov	sp, r7
 8006894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006898:	4770      	bx	lr
	...

0800689c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b082      	sub	sp, #8
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	4603      	mov	r3, r0
 80068a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80068a6:	4b08      	ldr	r3, [pc, #32]	@ (80068c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80068a8:	695a      	ldr	r2, [r3, #20]
 80068aa:	88fb      	ldrh	r3, [r7, #6]
 80068ac:	4013      	ands	r3, r2
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d006      	beq.n	80068c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80068b2:	4a05      	ldr	r2, [pc, #20]	@ (80068c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80068b4:	88fb      	ldrh	r3, [r7, #6]
 80068b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80068b8:	88fb      	ldrh	r3, [r7, #6]
 80068ba:	4618      	mov	r0, r3
 80068bc:	f7fd fe02 	bl	80044c4 <HAL_GPIO_EXTI_Callback>
  }
}
 80068c0:	bf00      	nop
 80068c2:	3708      	adds	r7, #8
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}
 80068c8:	40013c00 	.word	0x40013c00

080068cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b084      	sub	sp, #16
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d101      	bne.n	80068de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80068da:	2301      	movs	r3, #1
 80068dc:	e12b      	b.n	8006b36 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80068e4:	b2db      	uxtb	r3, r3
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d106      	bne.n	80068f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2200      	movs	r2, #0
 80068ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f7fe f874 	bl	80049e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2224      	movs	r2, #36	@ 0x24
 80068fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	681a      	ldr	r2, [r3, #0]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f022 0201 	bic.w	r2, r2, #1
 800690e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	681a      	ldr	r2, [r3, #0]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800691e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	681a      	ldr	r2, [r3, #0]
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800692e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006930:	f005 fa34 	bl	800bd9c <HAL_RCC_GetPCLK1Freq>
 8006934:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	4a81      	ldr	r2, [pc, #516]	@ (8006b40 <HAL_I2C_Init+0x274>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d807      	bhi.n	8006950 <HAL_I2C_Init+0x84>
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	4a80      	ldr	r2, [pc, #512]	@ (8006b44 <HAL_I2C_Init+0x278>)
 8006944:	4293      	cmp	r3, r2
 8006946:	bf94      	ite	ls
 8006948:	2301      	movls	r3, #1
 800694a:	2300      	movhi	r3, #0
 800694c:	b2db      	uxtb	r3, r3
 800694e:	e006      	b.n	800695e <HAL_I2C_Init+0x92>
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	4a7d      	ldr	r2, [pc, #500]	@ (8006b48 <HAL_I2C_Init+0x27c>)
 8006954:	4293      	cmp	r3, r2
 8006956:	bf94      	ite	ls
 8006958:	2301      	movls	r3, #1
 800695a:	2300      	movhi	r3, #0
 800695c:	b2db      	uxtb	r3, r3
 800695e:	2b00      	cmp	r3, #0
 8006960:	d001      	beq.n	8006966 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006962:	2301      	movs	r3, #1
 8006964:	e0e7      	b.n	8006b36 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	4a78      	ldr	r2, [pc, #480]	@ (8006b4c <HAL_I2C_Init+0x280>)
 800696a:	fba2 2303 	umull	r2, r3, r2, r3
 800696e:	0c9b      	lsrs	r3, r3, #18
 8006970:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	68ba      	ldr	r2, [r7, #8]
 8006982:	430a      	orrs	r2, r1
 8006984:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	6a1b      	ldr	r3, [r3, #32]
 800698c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	4a6a      	ldr	r2, [pc, #424]	@ (8006b40 <HAL_I2C_Init+0x274>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d802      	bhi.n	80069a0 <HAL_I2C_Init+0xd4>
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	3301      	adds	r3, #1
 800699e:	e009      	b.n	80069b4 <HAL_I2C_Init+0xe8>
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80069a6:	fb02 f303 	mul.w	r3, r2, r3
 80069aa:	4a69      	ldr	r2, [pc, #420]	@ (8006b50 <HAL_I2C_Init+0x284>)
 80069ac:	fba2 2303 	umull	r2, r3, r2, r3
 80069b0:	099b      	lsrs	r3, r3, #6
 80069b2:	3301      	adds	r3, #1
 80069b4:	687a      	ldr	r2, [r7, #4]
 80069b6:	6812      	ldr	r2, [r2, #0]
 80069b8:	430b      	orrs	r3, r1
 80069ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	69db      	ldr	r3, [r3, #28]
 80069c2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80069c6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	495c      	ldr	r1, [pc, #368]	@ (8006b40 <HAL_I2C_Init+0x274>)
 80069d0:	428b      	cmp	r3, r1
 80069d2:	d819      	bhi.n	8006a08 <HAL_I2C_Init+0x13c>
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	1e59      	subs	r1, r3, #1
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	005b      	lsls	r3, r3, #1
 80069de:	fbb1 f3f3 	udiv	r3, r1, r3
 80069e2:	1c59      	adds	r1, r3, #1
 80069e4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80069e8:	400b      	ands	r3, r1
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d00a      	beq.n	8006a04 <HAL_I2C_Init+0x138>
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	1e59      	subs	r1, r3, #1
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	005b      	lsls	r3, r3, #1
 80069f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80069fc:	3301      	adds	r3, #1
 80069fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a02:	e051      	b.n	8006aa8 <HAL_I2C_Init+0x1dc>
 8006a04:	2304      	movs	r3, #4
 8006a06:	e04f      	b.n	8006aa8 <HAL_I2C_Init+0x1dc>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	689b      	ldr	r3, [r3, #8]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d111      	bne.n	8006a34 <HAL_I2C_Init+0x168>
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	1e58      	subs	r0, r3, #1
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6859      	ldr	r1, [r3, #4]
 8006a18:	460b      	mov	r3, r1
 8006a1a:	005b      	lsls	r3, r3, #1
 8006a1c:	440b      	add	r3, r1
 8006a1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006a22:	3301      	adds	r3, #1
 8006a24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	bf0c      	ite	eq
 8006a2c:	2301      	moveq	r3, #1
 8006a2e:	2300      	movne	r3, #0
 8006a30:	b2db      	uxtb	r3, r3
 8006a32:	e012      	b.n	8006a5a <HAL_I2C_Init+0x18e>
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	1e58      	subs	r0, r3, #1
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6859      	ldr	r1, [r3, #4]
 8006a3c:	460b      	mov	r3, r1
 8006a3e:	009b      	lsls	r3, r3, #2
 8006a40:	440b      	add	r3, r1
 8006a42:	0099      	lsls	r1, r3, #2
 8006a44:	440b      	add	r3, r1
 8006a46:	fbb0 f3f3 	udiv	r3, r0, r3
 8006a4a:	3301      	adds	r3, #1
 8006a4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	bf0c      	ite	eq
 8006a54:	2301      	moveq	r3, #1
 8006a56:	2300      	movne	r3, #0
 8006a58:	b2db      	uxtb	r3, r3
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d001      	beq.n	8006a62 <HAL_I2C_Init+0x196>
 8006a5e:	2301      	movs	r3, #1
 8006a60:	e022      	b.n	8006aa8 <HAL_I2C_Init+0x1dc>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	689b      	ldr	r3, [r3, #8]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d10e      	bne.n	8006a88 <HAL_I2C_Init+0x1bc>
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	1e58      	subs	r0, r3, #1
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6859      	ldr	r1, [r3, #4]
 8006a72:	460b      	mov	r3, r1
 8006a74:	005b      	lsls	r3, r3, #1
 8006a76:	440b      	add	r3, r1
 8006a78:	fbb0 f3f3 	udiv	r3, r0, r3
 8006a7c:	3301      	adds	r3, #1
 8006a7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a86:	e00f      	b.n	8006aa8 <HAL_I2C_Init+0x1dc>
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	1e58      	subs	r0, r3, #1
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6859      	ldr	r1, [r3, #4]
 8006a90:	460b      	mov	r3, r1
 8006a92:	009b      	lsls	r3, r3, #2
 8006a94:	440b      	add	r3, r1
 8006a96:	0099      	lsls	r1, r3, #2
 8006a98:	440b      	add	r3, r1
 8006a9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8006a9e:	3301      	adds	r3, #1
 8006aa0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006aa4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006aa8:	6879      	ldr	r1, [r7, #4]
 8006aaa:	6809      	ldr	r1, [r1, #0]
 8006aac:	4313      	orrs	r3, r2
 8006aae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	69da      	ldr	r2, [r3, #28]
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6a1b      	ldr	r3, [r3, #32]
 8006ac2:	431a      	orrs	r2, r3
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	430a      	orrs	r2, r1
 8006aca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	689b      	ldr	r3, [r3, #8]
 8006ad2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8006ad6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006ada:	687a      	ldr	r2, [r7, #4]
 8006adc:	6911      	ldr	r1, [r2, #16]
 8006ade:	687a      	ldr	r2, [r7, #4]
 8006ae0:	68d2      	ldr	r2, [r2, #12]
 8006ae2:	4311      	orrs	r1, r2
 8006ae4:	687a      	ldr	r2, [r7, #4]
 8006ae6:	6812      	ldr	r2, [r2, #0]
 8006ae8:	430b      	orrs	r3, r1
 8006aea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	68db      	ldr	r3, [r3, #12]
 8006af2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	695a      	ldr	r2, [r3, #20]
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	699b      	ldr	r3, [r3, #24]
 8006afe:	431a      	orrs	r2, r3
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	430a      	orrs	r2, r1
 8006b06:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	681a      	ldr	r2, [r3, #0]
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f042 0201 	orr.w	r2, r2, #1
 8006b16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2220      	movs	r2, #32
 8006b22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8006b34:	2300      	movs	r3, #0
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3710      	adds	r7, #16
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}
 8006b3e:	bf00      	nop
 8006b40:	000186a0 	.word	0x000186a0
 8006b44:	001e847f 	.word	0x001e847f
 8006b48:	003d08ff 	.word	0x003d08ff
 8006b4c:	431bde83 	.word	0x431bde83
 8006b50:	10624dd3 	.word	0x10624dd3

08006b54 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b083      	sub	sp, #12
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	695b      	ldr	r3, [r3, #20]
 8006b62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b66:	2b80      	cmp	r3, #128	@ 0x80
 8006b68:	d103      	bne.n	8006b72 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	611a      	str	r2, [r3, #16]
  }
}
 8006b72:	bf00      	nop
 8006b74:	370c      	adds	r7, #12
 8006b76:	46bd      	mov	sp, r7
 8006b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7c:	4770      	bx	lr
	...

08006b80 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b088      	sub	sp, #32
 8006b84:	af02      	add	r7, sp, #8
 8006b86:	60f8      	str	r0, [r7, #12]
 8006b88:	607a      	str	r2, [r7, #4]
 8006b8a:	461a      	mov	r2, r3
 8006b8c:	460b      	mov	r3, r1
 8006b8e:	817b      	strh	r3, [r7, #10]
 8006b90:	4613      	mov	r3, r2
 8006b92:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006b94:	f7fe fa38 	bl	8005008 <HAL_GetTick>
 8006b98:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ba0:	b2db      	uxtb	r3, r3
 8006ba2:	2b20      	cmp	r3, #32
 8006ba4:	f040 80e0 	bne.w	8006d68 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	9300      	str	r3, [sp, #0]
 8006bac:	2319      	movs	r3, #25
 8006bae:	2201      	movs	r2, #1
 8006bb0:	4970      	ldr	r1, [pc, #448]	@ (8006d74 <HAL_I2C_Master_Transmit+0x1f4>)
 8006bb2:	68f8      	ldr	r0, [r7, #12]
 8006bb4:	f002 ffe0 	bl	8009b78 <I2C_WaitOnFlagUntilTimeout>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d001      	beq.n	8006bc2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8006bbe:	2302      	movs	r3, #2
 8006bc0:	e0d3      	b.n	8006d6a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006bc8:	2b01      	cmp	r3, #1
 8006bca:	d101      	bne.n	8006bd0 <HAL_I2C_Master_Transmit+0x50>
 8006bcc:	2302      	movs	r3, #2
 8006bce:	e0cc      	b.n	8006d6a <HAL_I2C_Master_Transmit+0x1ea>
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f003 0301 	and.w	r3, r3, #1
 8006be2:	2b01      	cmp	r3, #1
 8006be4:	d007      	beq.n	8006bf6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	681a      	ldr	r2, [r3, #0]
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f042 0201 	orr.w	r2, r2, #1
 8006bf4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	681a      	ldr	r2, [r3, #0]
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006c04:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2221      	movs	r2, #33	@ 0x21
 8006c0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	2210      	movs	r2, #16
 8006c12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	687a      	ldr	r2, [r7, #4]
 8006c20:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	893a      	ldrh	r2, [r7, #8]
 8006c26:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c2c:	b29a      	uxth	r2, r3
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	4a50      	ldr	r2, [pc, #320]	@ (8006d78 <HAL_I2C_Master_Transmit+0x1f8>)
 8006c36:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006c38:	8979      	ldrh	r1, [r7, #10]
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	6a3a      	ldr	r2, [r7, #32]
 8006c3e:	68f8      	ldr	r0, [r7, #12]
 8006c40:	f002 fbd6 	bl	80093f0 <I2C_MasterRequestWrite>
 8006c44:	4603      	mov	r3, r0
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d001      	beq.n	8006c4e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	e08d      	b.n	8006d6a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c4e:	2300      	movs	r3, #0
 8006c50:	613b      	str	r3, [r7, #16]
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	695b      	ldr	r3, [r3, #20]
 8006c58:	613b      	str	r3, [r7, #16]
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	699b      	ldr	r3, [r3, #24]
 8006c60:	613b      	str	r3, [r7, #16]
 8006c62:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006c64:	e066      	b.n	8006d34 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c66:	697a      	ldr	r2, [r7, #20]
 8006c68:	6a39      	ldr	r1, [r7, #32]
 8006c6a:	68f8      	ldr	r0, [r7, #12]
 8006c6c:	f003 f89e 	bl	8009dac <I2C_WaitOnTXEFlagUntilTimeout>
 8006c70:	4603      	mov	r3, r0
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d00d      	beq.n	8006c92 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c7a:	2b04      	cmp	r3, #4
 8006c7c:	d107      	bne.n	8006c8e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	681a      	ldr	r2, [r3, #0]
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c8c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006c8e:	2301      	movs	r3, #1
 8006c90:	e06b      	b.n	8006d6a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c96:	781a      	ldrb	r2, [r3, #0]
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ca2:	1c5a      	adds	r2, r3, #1
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006cac:	b29b      	uxth	r3, r3
 8006cae:	3b01      	subs	r3, #1
 8006cb0:	b29a      	uxth	r2, r3
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006cba:	3b01      	subs	r3, #1
 8006cbc:	b29a      	uxth	r2, r3
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	695b      	ldr	r3, [r3, #20]
 8006cc8:	f003 0304 	and.w	r3, r3, #4
 8006ccc:	2b04      	cmp	r3, #4
 8006cce:	d11b      	bne.n	8006d08 <HAL_I2C_Master_Transmit+0x188>
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d017      	beq.n	8006d08 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cdc:	781a      	ldrb	r2, [r3, #0]
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ce8:	1c5a      	adds	r2, r3, #1
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006cf2:	b29b      	uxth	r3, r3
 8006cf4:	3b01      	subs	r3, #1
 8006cf6:	b29a      	uxth	r2, r3
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d00:	3b01      	subs	r3, #1
 8006d02:	b29a      	uxth	r2, r3
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d08:	697a      	ldr	r2, [r7, #20]
 8006d0a:	6a39      	ldr	r1, [r7, #32]
 8006d0c:	68f8      	ldr	r0, [r7, #12]
 8006d0e:	f003 f895 	bl	8009e3c <I2C_WaitOnBTFFlagUntilTimeout>
 8006d12:	4603      	mov	r3, r0
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d00d      	beq.n	8006d34 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d1c:	2b04      	cmp	r3, #4
 8006d1e:	d107      	bne.n	8006d30 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	681a      	ldr	r2, [r3, #0]
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006d2e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006d30:	2301      	movs	r3, #1
 8006d32:	e01a      	b.n	8006d6a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d194      	bne.n	8006c66 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	681a      	ldr	r2, [r3, #0]
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006d4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2220      	movs	r2, #32
 8006d50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2200      	movs	r2, #0
 8006d58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006d64:	2300      	movs	r3, #0
 8006d66:	e000      	b.n	8006d6a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006d68:	2302      	movs	r3, #2
  }
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3718      	adds	r7, #24
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}
 8006d72:	bf00      	nop
 8006d74:	00100002 	.word	0x00100002
 8006d78:	ffff0000 	.word	0xffff0000

08006d7c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b088      	sub	sp, #32
 8006d80:	af02      	add	r7, sp, #8
 8006d82:	60f8      	str	r0, [r7, #12]
 8006d84:	4608      	mov	r0, r1
 8006d86:	4611      	mov	r1, r2
 8006d88:	461a      	mov	r2, r3
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	817b      	strh	r3, [r7, #10]
 8006d8e:	460b      	mov	r3, r1
 8006d90:	813b      	strh	r3, [r7, #8]
 8006d92:	4613      	mov	r3, r2
 8006d94:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006d96:	f7fe f937 	bl	8005008 <HAL_GetTick>
 8006d9a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006da2:	b2db      	uxtb	r3, r3
 8006da4:	2b20      	cmp	r3, #32
 8006da6:	f040 80d9 	bne.w	8006f5c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	9300      	str	r3, [sp, #0]
 8006dae:	2319      	movs	r3, #25
 8006db0:	2201      	movs	r2, #1
 8006db2:	496d      	ldr	r1, [pc, #436]	@ (8006f68 <HAL_I2C_Mem_Write+0x1ec>)
 8006db4:	68f8      	ldr	r0, [r7, #12]
 8006db6:	f002 fedf 	bl	8009b78 <I2C_WaitOnFlagUntilTimeout>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d001      	beq.n	8006dc4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006dc0:	2302      	movs	r3, #2
 8006dc2:	e0cc      	b.n	8006f5e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006dca:	2b01      	cmp	r3, #1
 8006dcc:	d101      	bne.n	8006dd2 <HAL_I2C_Mem_Write+0x56>
 8006dce:	2302      	movs	r3, #2
 8006dd0:	e0c5      	b.n	8006f5e <HAL_I2C_Mem_Write+0x1e2>
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	2201      	movs	r2, #1
 8006dd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f003 0301 	and.w	r3, r3, #1
 8006de4:	2b01      	cmp	r3, #1
 8006de6:	d007      	beq.n	8006df8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	681a      	ldr	r2, [r3, #0]
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f042 0201 	orr.w	r2, r2, #1
 8006df6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	681a      	ldr	r2, [r3, #0]
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006e06:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	2221      	movs	r2, #33	@ 0x21
 8006e0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	2240      	movs	r2, #64	@ 0x40
 8006e14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	6a3a      	ldr	r2, [r7, #32]
 8006e22:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006e28:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e2e:	b29a      	uxth	r2, r3
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	4a4d      	ldr	r2, [pc, #308]	@ (8006f6c <HAL_I2C_Mem_Write+0x1f0>)
 8006e38:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006e3a:	88f8      	ldrh	r0, [r7, #6]
 8006e3c:	893a      	ldrh	r2, [r7, #8]
 8006e3e:	8979      	ldrh	r1, [r7, #10]
 8006e40:	697b      	ldr	r3, [r7, #20]
 8006e42:	9301      	str	r3, [sp, #4]
 8006e44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e46:	9300      	str	r3, [sp, #0]
 8006e48:	4603      	mov	r3, r0
 8006e4a:	68f8      	ldr	r0, [r7, #12]
 8006e4c:	f002 fb52 	bl	80094f4 <I2C_RequestMemoryWrite>
 8006e50:	4603      	mov	r3, r0
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d052      	beq.n	8006efc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006e56:	2301      	movs	r3, #1
 8006e58:	e081      	b.n	8006f5e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006e5a:	697a      	ldr	r2, [r7, #20]
 8006e5c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006e5e:	68f8      	ldr	r0, [r7, #12]
 8006e60:	f002 ffa4 	bl	8009dac <I2C_WaitOnTXEFlagUntilTimeout>
 8006e64:	4603      	mov	r3, r0
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d00d      	beq.n	8006e86 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e6e:	2b04      	cmp	r3, #4
 8006e70:	d107      	bne.n	8006e82 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	681a      	ldr	r2, [r3, #0]
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006e80:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006e82:	2301      	movs	r3, #1
 8006e84:	e06b      	b.n	8006f5e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e8a:	781a      	ldrb	r2, [r3, #0]
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e96:	1c5a      	adds	r2, r3, #1
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ea0:	3b01      	subs	r3, #1
 8006ea2:	b29a      	uxth	r2, r3
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006eac:	b29b      	uxth	r3, r3
 8006eae:	3b01      	subs	r3, #1
 8006eb0:	b29a      	uxth	r2, r3
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	695b      	ldr	r3, [r3, #20]
 8006ebc:	f003 0304 	and.w	r3, r3, #4
 8006ec0:	2b04      	cmp	r3, #4
 8006ec2:	d11b      	bne.n	8006efc <HAL_I2C_Mem_Write+0x180>
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d017      	beq.n	8006efc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ed0:	781a      	ldrb	r2, [r3, #0]
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006edc:	1c5a      	adds	r2, r3, #1
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ee6:	3b01      	subs	r3, #1
 8006ee8:	b29a      	uxth	r2, r3
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ef2:	b29b      	uxth	r3, r3
 8006ef4:	3b01      	subs	r3, #1
 8006ef6:	b29a      	uxth	r2, r3
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d1aa      	bne.n	8006e5a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f04:	697a      	ldr	r2, [r7, #20]
 8006f06:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006f08:	68f8      	ldr	r0, [r7, #12]
 8006f0a:	f002 ff97 	bl	8009e3c <I2C_WaitOnBTFFlagUntilTimeout>
 8006f0e:	4603      	mov	r3, r0
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d00d      	beq.n	8006f30 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f18:	2b04      	cmp	r3, #4
 8006f1a:	d107      	bne.n	8006f2c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	681a      	ldr	r2, [r3, #0]
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006f2a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	e016      	b.n	8006f5e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	681a      	ldr	r2, [r3, #0]
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006f3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	2220      	movs	r2, #32
 8006f44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	2200      	movs	r2, #0
 8006f54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006f58:	2300      	movs	r3, #0
 8006f5a:	e000      	b.n	8006f5e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006f5c:	2302      	movs	r3, #2
  }
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	3718      	adds	r7, #24
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}
 8006f66:	bf00      	nop
 8006f68:	00100002 	.word	0x00100002
 8006f6c:	ffff0000 	.word	0xffff0000

08006f70 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b08c      	sub	sp, #48	@ 0x30
 8006f74:	af02      	add	r7, sp, #8
 8006f76:	60f8      	str	r0, [r7, #12]
 8006f78:	4608      	mov	r0, r1
 8006f7a:	4611      	mov	r1, r2
 8006f7c:	461a      	mov	r2, r3
 8006f7e:	4603      	mov	r3, r0
 8006f80:	817b      	strh	r3, [r7, #10]
 8006f82:	460b      	mov	r3, r1
 8006f84:	813b      	strh	r3, [r7, #8]
 8006f86:	4613      	mov	r3, r2
 8006f88:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006f8a:	f7fe f83d 	bl	8005008 <HAL_GetTick>
 8006f8e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f96:	b2db      	uxtb	r3, r3
 8006f98:	2b20      	cmp	r3, #32
 8006f9a:	f040 8214 	bne.w	80073c6 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fa0:	9300      	str	r3, [sp, #0]
 8006fa2:	2319      	movs	r3, #25
 8006fa4:	2201      	movs	r2, #1
 8006fa6:	497b      	ldr	r1, [pc, #492]	@ (8007194 <HAL_I2C_Mem_Read+0x224>)
 8006fa8:	68f8      	ldr	r0, [r7, #12]
 8006faa:	f002 fde5 	bl	8009b78 <I2C_WaitOnFlagUntilTimeout>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d001      	beq.n	8006fb8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006fb4:	2302      	movs	r3, #2
 8006fb6:	e207      	b.n	80073c8 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006fbe:	2b01      	cmp	r3, #1
 8006fc0:	d101      	bne.n	8006fc6 <HAL_I2C_Mem_Read+0x56>
 8006fc2:	2302      	movs	r3, #2
 8006fc4:	e200      	b.n	80073c8 <HAL_I2C_Mem_Read+0x458>
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2201      	movs	r2, #1
 8006fca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f003 0301 	and.w	r3, r3, #1
 8006fd8:	2b01      	cmp	r3, #1
 8006fda:	d007      	beq.n	8006fec <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	681a      	ldr	r2, [r3, #0]
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f042 0201 	orr.w	r2, r2, #1
 8006fea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	681a      	ldr	r2, [r3, #0]
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006ffa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	2222      	movs	r2, #34	@ 0x22
 8007000:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	2240      	movs	r2, #64	@ 0x40
 8007008:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2200      	movs	r2, #0
 8007010:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007016:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800701c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007022:	b29a      	uxth	r2, r3
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	4a5b      	ldr	r2, [pc, #364]	@ (8007198 <HAL_I2C_Mem_Read+0x228>)
 800702c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800702e:	88f8      	ldrh	r0, [r7, #6]
 8007030:	893a      	ldrh	r2, [r7, #8]
 8007032:	8979      	ldrh	r1, [r7, #10]
 8007034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007036:	9301      	str	r3, [sp, #4]
 8007038:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800703a:	9300      	str	r3, [sp, #0]
 800703c:	4603      	mov	r3, r0
 800703e:	68f8      	ldr	r0, [r7, #12]
 8007040:	f002 faee 	bl	8009620 <I2C_RequestMemoryRead>
 8007044:	4603      	mov	r3, r0
 8007046:	2b00      	cmp	r3, #0
 8007048:	d001      	beq.n	800704e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800704a:	2301      	movs	r3, #1
 800704c:	e1bc      	b.n	80073c8 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007052:	2b00      	cmp	r3, #0
 8007054:	d113      	bne.n	800707e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007056:	2300      	movs	r3, #0
 8007058:	623b      	str	r3, [r7, #32]
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	695b      	ldr	r3, [r3, #20]
 8007060:	623b      	str	r3, [r7, #32]
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	699b      	ldr	r3, [r3, #24]
 8007068:	623b      	str	r3, [r7, #32]
 800706a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	681a      	ldr	r2, [r3, #0]
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800707a:	601a      	str	r2, [r3, #0]
 800707c:	e190      	b.n	80073a0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007082:	2b01      	cmp	r3, #1
 8007084:	d11b      	bne.n	80070be <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	681a      	ldr	r2, [r3, #0]
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007094:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007096:	2300      	movs	r3, #0
 8007098:	61fb      	str	r3, [r7, #28]
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	695b      	ldr	r3, [r3, #20]
 80070a0:	61fb      	str	r3, [r7, #28]
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	699b      	ldr	r3, [r3, #24]
 80070a8:	61fb      	str	r3, [r7, #28]
 80070aa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	681a      	ldr	r2, [r3, #0]
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80070ba:	601a      	str	r2, [r3, #0]
 80070bc:	e170      	b.n	80073a0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80070c2:	2b02      	cmp	r3, #2
 80070c4:	d11b      	bne.n	80070fe <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	681a      	ldr	r2, [r3, #0]
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80070d4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	681a      	ldr	r2, [r3, #0]
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80070e4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80070e6:	2300      	movs	r3, #0
 80070e8:	61bb      	str	r3, [r7, #24]
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	695b      	ldr	r3, [r3, #20]
 80070f0:	61bb      	str	r3, [r7, #24]
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	699b      	ldr	r3, [r3, #24]
 80070f8:	61bb      	str	r3, [r7, #24]
 80070fa:	69bb      	ldr	r3, [r7, #24]
 80070fc:	e150      	b.n	80073a0 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80070fe:	2300      	movs	r3, #0
 8007100:	617b      	str	r3, [r7, #20]
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	695b      	ldr	r3, [r3, #20]
 8007108:	617b      	str	r3, [r7, #20]
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	699b      	ldr	r3, [r3, #24]
 8007110:	617b      	str	r3, [r7, #20]
 8007112:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007114:	e144      	b.n	80073a0 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800711a:	2b03      	cmp	r3, #3
 800711c:	f200 80f1 	bhi.w	8007302 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007124:	2b01      	cmp	r3, #1
 8007126:	d123      	bne.n	8007170 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007128:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800712a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800712c:	68f8      	ldr	r0, [r7, #12]
 800712e:	f002 feff 	bl	8009f30 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007132:	4603      	mov	r3, r0
 8007134:	2b00      	cmp	r3, #0
 8007136:	d001      	beq.n	800713c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8007138:	2301      	movs	r3, #1
 800713a:	e145      	b.n	80073c8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	691a      	ldr	r2, [r3, #16]
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007146:	b2d2      	uxtb	r2, r2
 8007148:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800714e:	1c5a      	adds	r2, r3, #1
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007158:	3b01      	subs	r3, #1
 800715a:	b29a      	uxth	r2, r3
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007164:	b29b      	uxth	r3, r3
 8007166:	3b01      	subs	r3, #1
 8007168:	b29a      	uxth	r2, r3
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800716e:	e117      	b.n	80073a0 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007174:	2b02      	cmp	r3, #2
 8007176:	d14e      	bne.n	8007216 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800717a:	9300      	str	r3, [sp, #0]
 800717c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800717e:	2200      	movs	r2, #0
 8007180:	4906      	ldr	r1, [pc, #24]	@ (800719c <HAL_I2C_Mem_Read+0x22c>)
 8007182:	68f8      	ldr	r0, [r7, #12]
 8007184:	f002 fcf8 	bl	8009b78 <I2C_WaitOnFlagUntilTimeout>
 8007188:	4603      	mov	r3, r0
 800718a:	2b00      	cmp	r3, #0
 800718c:	d008      	beq.n	80071a0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800718e:	2301      	movs	r3, #1
 8007190:	e11a      	b.n	80073c8 <HAL_I2C_Mem_Read+0x458>
 8007192:	bf00      	nop
 8007194:	00100002 	.word	0x00100002
 8007198:	ffff0000 	.word	0xffff0000
 800719c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	681a      	ldr	r2, [r3, #0]
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80071ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	691a      	ldr	r2, [r3, #16]
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071ba:	b2d2      	uxtb	r2, r2
 80071bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071c2:	1c5a      	adds	r2, r3, #1
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80071cc:	3b01      	subs	r3, #1
 80071ce:	b29a      	uxth	r2, r3
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80071d8:	b29b      	uxth	r3, r3
 80071da:	3b01      	subs	r3, #1
 80071dc:	b29a      	uxth	r2, r3
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	691a      	ldr	r2, [r3, #16]
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071ec:	b2d2      	uxtb	r2, r2
 80071ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071f4:	1c5a      	adds	r2, r3, #1
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80071fe:	3b01      	subs	r3, #1
 8007200:	b29a      	uxth	r2, r3
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800720a:	b29b      	uxth	r3, r3
 800720c:	3b01      	subs	r3, #1
 800720e:	b29a      	uxth	r2, r3
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007214:	e0c4      	b.n	80073a0 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007218:	9300      	str	r3, [sp, #0]
 800721a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800721c:	2200      	movs	r2, #0
 800721e:	496c      	ldr	r1, [pc, #432]	@ (80073d0 <HAL_I2C_Mem_Read+0x460>)
 8007220:	68f8      	ldr	r0, [r7, #12]
 8007222:	f002 fca9 	bl	8009b78 <I2C_WaitOnFlagUntilTimeout>
 8007226:	4603      	mov	r3, r0
 8007228:	2b00      	cmp	r3, #0
 800722a:	d001      	beq.n	8007230 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800722c:	2301      	movs	r3, #1
 800722e:	e0cb      	b.n	80073c8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	681a      	ldr	r2, [r3, #0]
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800723e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	691a      	ldr	r2, [r3, #16]
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800724a:	b2d2      	uxtb	r2, r2
 800724c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007252:	1c5a      	adds	r2, r3, #1
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800725c:	3b01      	subs	r3, #1
 800725e:	b29a      	uxth	r2, r3
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007268:	b29b      	uxth	r3, r3
 800726a:	3b01      	subs	r3, #1
 800726c:	b29a      	uxth	r2, r3
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007274:	9300      	str	r3, [sp, #0]
 8007276:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007278:	2200      	movs	r2, #0
 800727a:	4955      	ldr	r1, [pc, #340]	@ (80073d0 <HAL_I2C_Mem_Read+0x460>)
 800727c:	68f8      	ldr	r0, [r7, #12]
 800727e:	f002 fc7b 	bl	8009b78 <I2C_WaitOnFlagUntilTimeout>
 8007282:	4603      	mov	r3, r0
 8007284:	2b00      	cmp	r3, #0
 8007286:	d001      	beq.n	800728c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8007288:	2301      	movs	r3, #1
 800728a:	e09d      	b.n	80073c8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	681a      	ldr	r2, [r3, #0]
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800729a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	691a      	ldr	r2, [r3, #16]
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072a6:	b2d2      	uxtb	r2, r2
 80072a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072ae:	1c5a      	adds	r2, r3, #1
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80072b8:	3b01      	subs	r3, #1
 80072ba:	b29a      	uxth	r2, r3
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80072c4:	b29b      	uxth	r3, r3
 80072c6:	3b01      	subs	r3, #1
 80072c8:	b29a      	uxth	r2, r3
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	691a      	ldr	r2, [r3, #16]
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072d8:	b2d2      	uxtb	r2, r2
 80072da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072e0:	1c5a      	adds	r2, r3, #1
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80072ea:	3b01      	subs	r3, #1
 80072ec:	b29a      	uxth	r2, r3
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80072f6:	b29b      	uxth	r3, r3
 80072f8:	3b01      	subs	r3, #1
 80072fa:	b29a      	uxth	r2, r3
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007300:	e04e      	b.n	80073a0 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007302:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007304:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007306:	68f8      	ldr	r0, [r7, #12]
 8007308:	f002 fe12 	bl	8009f30 <I2C_WaitOnRXNEFlagUntilTimeout>
 800730c:	4603      	mov	r3, r0
 800730e:	2b00      	cmp	r3, #0
 8007310:	d001      	beq.n	8007316 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8007312:	2301      	movs	r3, #1
 8007314:	e058      	b.n	80073c8 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	691a      	ldr	r2, [r3, #16]
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007320:	b2d2      	uxtb	r2, r2
 8007322:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007328:	1c5a      	adds	r2, r3, #1
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007332:	3b01      	subs	r3, #1
 8007334:	b29a      	uxth	r2, r3
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800733e:	b29b      	uxth	r3, r3
 8007340:	3b01      	subs	r3, #1
 8007342:	b29a      	uxth	r2, r3
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	695b      	ldr	r3, [r3, #20]
 800734e:	f003 0304 	and.w	r3, r3, #4
 8007352:	2b04      	cmp	r3, #4
 8007354:	d124      	bne.n	80073a0 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800735a:	2b03      	cmp	r3, #3
 800735c:	d107      	bne.n	800736e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	681a      	ldr	r2, [r3, #0]
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800736c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	691a      	ldr	r2, [r3, #16]
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007378:	b2d2      	uxtb	r2, r2
 800737a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007380:	1c5a      	adds	r2, r3, #1
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800738a:	3b01      	subs	r3, #1
 800738c:	b29a      	uxth	r2, r3
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007396:	b29b      	uxth	r3, r3
 8007398:	3b01      	subs	r3, #1
 800739a:	b29a      	uxth	r2, r3
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	f47f aeb6 	bne.w	8007116 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	2220      	movs	r2, #32
 80073ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	2200      	movs	r2, #0
 80073b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	2200      	movs	r2, #0
 80073be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80073c2:	2300      	movs	r3, #0
 80073c4:	e000      	b.n	80073c8 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80073c6:	2302      	movs	r3, #2
  }
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	3728      	adds	r7, #40	@ 0x28
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}
 80073d0:	00010004 	.word	0x00010004

080073d4 <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b08a      	sub	sp, #40	@ 0x28
 80073d8:	af02      	add	r7, sp, #8
 80073da:	60f8      	str	r0, [r7, #12]
 80073dc:	4608      	mov	r0, r1
 80073de:	4611      	mov	r1, r2
 80073e0:	461a      	mov	r2, r3
 80073e2:	4603      	mov	r3, r0
 80073e4:	817b      	strh	r3, [r7, #10]
 80073e6:	460b      	mov	r3, r1
 80073e8:	813b      	strh	r3, [r7, #8]
 80073ea:	4613      	mov	r3, r2
 80073ec:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80073ee:	2300      	movs	r3, #0
 80073f0:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80073f2:	f7fd fe09 	bl	8005008 <HAL_GetTick>
 80073f6:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80073fe:	b2db      	uxtb	r3, r3
 8007400:	2b20      	cmp	r3, #32
 8007402:	f040 8136 	bne.w	8007672 <HAL_I2C_Mem_Write_DMA+0x29e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8007406:	4b9d      	ldr	r3, [pc, #628]	@ (800767c <HAL_I2C_Mem_Write_DMA+0x2a8>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	08db      	lsrs	r3, r3, #3
 800740c:	4a9c      	ldr	r2, [pc, #624]	@ (8007680 <HAL_I2C_Mem_Write_DMA+0x2ac>)
 800740e:	fba2 2303 	umull	r2, r3, r2, r3
 8007412:	0a1a      	lsrs	r2, r3, #8
 8007414:	4613      	mov	r3, r2
 8007416:	009b      	lsls	r3, r3, #2
 8007418:	4413      	add	r3, r2
 800741a:	009a      	lsls	r2, r3, #2
 800741c:	4413      	add	r3, r2
 800741e:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8007420:	697b      	ldr	r3, [r7, #20]
 8007422:	3b01      	subs	r3, #1
 8007424:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d112      	bne.n	8007452 <HAL_I2C_Mem_Write_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	2200      	movs	r2, #0
 8007430:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	2220      	movs	r2, #32
 8007436:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	2200      	movs	r2, #0
 800743e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007446:	f043 0220 	orr.w	r2, r3, #32
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 800744e:	2302      	movs	r3, #2
 8007450:	e110      	b.n	8007674 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	699b      	ldr	r3, [r3, #24]
 8007458:	f003 0302 	and.w	r3, r3, #2
 800745c:	2b02      	cmp	r3, #2
 800745e:	d0df      	beq.n	8007420 <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007466:	2b01      	cmp	r3, #1
 8007468:	d101      	bne.n	800746e <HAL_I2C_Mem_Write_DMA+0x9a>
 800746a:	2302      	movs	r3, #2
 800746c:	e102      	b.n	8007674 <HAL_I2C_Mem_Write_DMA+0x2a0>
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	2201      	movs	r2, #1
 8007472:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f003 0301 	and.w	r3, r3, #1
 8007480:	2b01      	cmp	r3, #1
 8007482:	d007      	beq.n	8007494 <HAL_I2C_Mem_Write_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	681a      	ldr	r2, [r3, #0]
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f042 0201 	orr.w	r2, r2, #1
 8007492:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	681a      	ldr	r2, [r3, #0]
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80074a2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	2221      	movs	r2, #33	@ 0x21
 80074a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	2240      	movs	r2, #64	@ 0x40
 80074b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	2200      	movs	r2, #0
 80074b8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80074be:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 80074c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80074ca:	b29a      	uxth	r2, r3
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	4a6c      	ldr	r2, [pc, #432]	@ (8007684 <HAL_I2C_Mem_Write_DMA+0x2b0>)
 80074d4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 80074d6:	897a      	ldrh	r2, [r7, #10]
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 80074dc:	893a      	ldrh	r2, [r7, #8]
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 80074e2:	88fa      	ldrh	r2, [r7, #6]
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2200      	movs	r2, #0
 80074ec:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	f000 80a9 	beq.w	800764a <HAL_I2C_Mem_Write_DMA+0x276>
    {
      if (hi2c->hdmatx != NULL)
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d02a      	beq.n	8007556 <HAL_I2C_Mem_Write_DMA+0x182>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007504:	4a60      	ldr	r2, [pc, #384]	@ (8007688 <HAL_I2C_Mem_Write_DMA+0x2b4>)
 8007506:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800750c:	4a5f      	ldr	r2, [pc, #380]	@ (800768c <HAL_I2C_Mem_Write_DMA+0x2b8>)
 800750e:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007514:	2200      	movs	r2, #0
 8007516:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800751c:	2200      	movs	r2, #0
 800751e:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007524:	2200      	movs	r2, #0
 8007526:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800752c:	2200      	movs	r2, #0
 800752e:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007538:	4619      	mov	r1, r3
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	3310      	adds	r3, #16
 8007540:	461a      	mov	r2, r3
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007546:	f7fe fc6b 	bl	8005e20 <HAL_DMA_Start_IT>
 800754a:	4603      	mov	r3, r0
 800754c:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800754e:	7efb      	ldrb	r3, [r7, #27]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d166      	bne.n	8007622 <HAL_I2C_Mem_Write_DMA+0x24e>
 8007554:	e013      	b.n	800757e <HAL_I2C_Mem_Write_DMA+0x1aa>
        hi2c->State     = HAL_I2C_STATE_READY;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2220      	movs	r2, #32
 800755a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	2200      	movs	r2, #0
 8007562:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800756a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	2200      	movs	r2, #0
 8007576:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 800757a:	2301      	movs	r3, #1
 800757c:	e07a      	b.n	8007674 <HAL_I2C_Mem_Write_DMA+0x2a0>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800757e:	88f8      	ldrh	r0, [r7, #6]
 8007580:	893a      	ldrh	r2, [r7, #8]
 8007582:	8979      	ldrh	r1, [r7, #10]
 8007584:	69fb      	ldr	r3, [r7, #28]
 8007586:	9301      	str	r3, [sp, #4]
 8007588:	2323      	movs	r3, #35	@ 0x23
 800758a:	9300      	str	r3, [sp, #0]
 800758c:	4603      	mov	r3, r0
 800758e:	68f8      	ldr	r0, [r7, #12]
 8007590:	f001 ffb0 	bl	80094f4 <I2C_RequestMemoryWrite>
 8007594:	4603      	mov	r3, r0
 8007596:	2b00      	cmp	r3, #0
 8007598:	d022      	beq.n	80075e0 <HAL_I2C_Mem_Write_DMA+0x20c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800759e:	4618      	mov	r0, r3
 80075a0:	f7fe fd06 	bl	8005fb0 <HAL_DMA_Abort_IT>
 80075a4:	4603      	mov	r3, r0
 80075a6:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075ac:	2200      	movs	r2, #0
 80075ae:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	681a      	ldr	r2, [r3, #0]
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80075be:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	2200      	movs	r2, #0
 80075c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	2200      	movs	r2, #0
 80075ca:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	681a      	ldr	r2, [r3, #0]
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f022 0201 	bic.w	r2, r2, #1
 80075da:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 80075dc:	2301      	movs	r3, #1
 80075de:	e049      	b.n	8007674 <HAL_I2C_Mem_Write_DMA+0x2a0>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80075e0:	2300      	movs	r3, #0
 80075e2:	613b      	str	r3, [r7, #16]
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	695b      	ldr	r3, [r3, #20]
 80075ea:	613b      	str	r3, [r7, #16]
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	699b      	ldr	r3, [r3, #24]
 80075f2:	613b      	str	r3, [r7, #16]
 80075f4:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	2200      	movs	r2, #0
 80075fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	685a      	ldr	r2, [r3, #4]
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800760c:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	685a      	ldr	r2, [r3, #4]
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800761c:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 800761e:	2300      	movs	r3, #0
 8007620:	e028      	b.n	8007674 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	2220      	movs	r2, #32
 8007626:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	2200      	movs	r2, #0
 800762e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007636:	f043 0210 	orr.w	r2, r3, #16
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	2200      	movs	r2, #0
 8007642:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8007646:	2301      	movs	r3, #1
 8007648:	e014      	b.n	8007674 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	2220      	movs	r2, #32
 800764e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	2200      	movs	r2, #0
 8007656:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800765e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	2200      	movs	r2, #0
 800766a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800766e:	2301      	movs	r3, #1
 8007670:	e000      	b.n	8007674 <HAL_I2C_Mem_Write_DMA+0x2a0>
    }
  }
  else
  {
    return HAL_BUSY;
 8007672:	2302      	movs	r3, #2
  }
}
 8007674:	4618      	mov	r0, r3
 8007676:	3720      	adds	r7, #32
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}
 800767c:	20000014 	.word	0x20000014
 8007680:	14f8b589 	.word	0x14f8b589
 8007684:	ffff0000 	.word	0xffff0000
 8007688:	080097f1 	.word	0x080097f1
 800768c:	080099af 	.word	0x080099af

08007690 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b08c      	sub	sp, #48	@ 0x30
 8007694:	af02      	add	r7, sp, #8
 8007696:	60f8      	str	r0, [r7, #12]
 8007698:	4608      	mov	r0, r1
 800769a:	4611      	mov	r1, r2
 800769c:	461a      	mov	r2, r3
 800769e:	4603      	mov	r3, r0
 80076a0:	817b      	strh	r3, [r7, #10]
 80076a2:	460b      	mov	r3, r1
 80076a4:	813b      	strh	r3, [r7, #8]
 80076a6:	4613      	mov	r3, r2
 80076a8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80076aa:	f7fd fcad 	bl	8005008 <HAL_GetTick>
 80076ae:	6278      	str	r0, [r7, #36]	@ 0x24
  __IO uint32_t count = 0U;
 80076b0:	2300      	movs	r3, #0
 80076b2:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80076ba:	b2db      	uxtb	r3, r3
 80076bc:	2b20      	cmp	r3, #32
 80076be:	f040 8172 	bne.w	80079a6 <HAL_I2C_Mem_Read_DMA+0x316>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80076c2:	4b93      	ldr	r3, [pc, #588]	@ (8007910 <HAL_I2C_Mem_Read_DMA+0x280>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	08db      	lsrs	r3, r3, #3
 80076c8:	4a92      	ldr	r2, [pc, #584]	@ (8007914 <HAL_I2C_Mem_Read_DMA+0x284>)
 80076ca:	fba2 2303 	umull	r2, r3, r2, r3
 80076ce:	0a1a      	lsrs	r2, r3, #8
 80076d0:	4613      	mov	r3, r2
 80076d2:	009b      	lsls	r3, r3, #2
 80076d4:	4413      	add	r3, r2
 80076d6:	009a      	lsls	r2, r3, #2
 80076d8:	4413      	add	r3, r2
 80076da:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 80076dc:	69fb      	ldr	r3, [r7, #28]
 80076de:	3b01      	subs	r3, #1
 80076e0:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 80076e2:	69fb      	ldr	r3, [r7, #28]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d112      	bne.n	800770e <HAL_I2C_Mem_Read_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	2200      	movs	r2, #0
 80076ec:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	2220      	movs	r2, #32
 80076f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	2200      	movs	r2, #0
 80076fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007702:	f043 0220 	orr.w	r2, r3, #32
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 800770a:	2302      	movs	r3, #2
 800770c:	e14c      	b.n	80079a8 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	699b      	ldr	r3, [r3, #24]
 8007714:	f003 0302 	and.w	r3, r3, #2
 8007718:	2b02      	cmp	r3, #2
 800771a:	d0df      	beq.n	80076dc <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007722:	2b01      	cmp	r3, #1
 8007724:	d101      	bne.n	800772a <HAL_I2C_Mem_Read_DMA+0x9a>
 8007726:	2302      	movs	r3, #2
 8007728:	e13e      	b.n	80079a8 <HAL_I2C_Mem_Read_DMA+0x318>
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	2201      	movs	r2, #1
 800772e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f003 0301 	and.w	r3, r3, #1
 800773c:	2b01      	cmp	r3, #1
 800773e:	d007      	beq.n	8007750 <HAL_I2C_Mem_Read_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	681a      	ldr	r2, [r3, #0]
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f042 0201 	orr.w	r2, r2, #1
 800774e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	681a      	ldr	r2, [r3, #0]
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800775e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	2222      	movs	r2, #34	@ 0x22
 8007764:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	2240      	movs	r2, #64	@ 0x40
 800776c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	2200      	movs	r2, #0
 8007774:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800777a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8007780:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007786:	b29a      	uxth	r2, r3
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	4a62      	ldr	r2, [pc, #392]	@ (8007918 <HAL_I2C_Mem_Read_DMA+0x288>)
 8007790:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8007792:	897a      	ldrh	r2, [r7, #10]
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8007798:	893a      	ldrh	r2, [r7, #8]
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 800779e:	88fa      	ldrh	r2, [r7, #6]
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	2200      	movs	r2, #0
 80077a8:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	f000 80cc 	beq.w	800794c <HAL_I2C_Mem_Read_DMA+0x2bc>
    {
      if (hi2c->hdmarx != NULL)
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d02d      	beq.n	8007818 <HAL_I2C_Mem_Read_DMA+0x188>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077c0:	4a56      	ldr	r2, [pc, #344]	@ (800791c <HAL_I2C_Mem_Read_DMA+0x28c>)
 80077c2:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077c8:	4a55      	ldr	r2, [pc, #340]	@ (8007920 <HAL_I2C_Mem_Read_DMA+0x290>)
 80077ca:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077d0:	2200      	movs	r2, #0
 80077d2:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077d8:	2200      	movs	r2, #0
 80077da:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077e0:	2200      	movs	r2, #0
 80077e2:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077e8:	2200      	movs	r2, #0
 80077ea:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	3310      	adds	r3, #16
 80077f6:	4619      	mov	r1, r3
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077fc:	461a      	mov	r2, r3
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007802:	f7fe fb0d 	bl	8005e20 <HAL_DMA_Start_IT>
 8007806:	4603      	mov	r3, r0
 8007808:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800780c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007810:	2b00      	cmp	r3, #0
 8007812:	f040 8087 	bne.w	8007924 <HAL_I2C_Mem_Read_DMA+0x294>
 8007816:	e013      	b.n	8007840 <HAL_I2C_Mem_Read_DMA+0x1b0>
        hi2c->State     = HAL_I2C_STATE_READY;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	2220      	movs	r2, #32
 800781c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	2200      	movs	r2, #0
 8007824:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800782c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	2200      	movs	r2, #0
 8007838:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 800783c:	2301      	movs	r3, #1
 800783e:	e0b3      	b.n	80079a8 <HAL_I2C_Mem_Read_DMA+0x318>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8007840:	88f8      	ldrh	r0, [r7, #6]
 8007842:	893a      	ldrh	r2, [r7, #8]
 8007844:	8979      	ldrh	r1, [r7, #10]
 8007846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007848:	9301      	str	r3, [sp, #4]
 800784a:	2323      	movs	r3, #35	@ 0x23
 800784c:	9300      	str	r3, [sp, #0]
 800784e:	4603      	mov	r3, r0
 8007850:	68f8      	ldr	r0, [r7, #12]
 8007852:	f001 fee5 	bl	8009620 <I2C_RequestMemoryRead>
 8007856:	4603      	mov	r3, r0
 8007858:	2b00      	cmp	r3, #0
 800785a:	d023      	beq.n	80078a4 <HAL_I2C_Mem_Read_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007860:	4618      	mov	r0, r3
 8007862:	f7fe fba5 	bl	8005fb0 <HAL_DMA_Abort_IT>
 8007866:	4603      	mov	r3, r0
 8007868:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007870:	2200      	movs	r2, #0
 8007872:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	681a      	ldr	r2, [r3, #0]
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007882:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	2200      	movs	r2, #0
 8007888:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	2200      	movs	r2, #0
 800788e:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	681a      	ldr	r2, [r3, #0]
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f022 0201 	bic.w	r2, r2, #1
 800789e:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 80078a0:	2301      	movs	r3, #1
 80078a2:	e081      	b.n	80079a8 <HAL_I2C_Mem_Read_DMA+0x318>
        }

        if (hi2c->XferSize == 1U)
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80078a8:	2b01      	cmp	r3, #1
 80078aa:	d108      	bne.n	80078be <HAL_I2C_Mem_Read_DMA+0x22e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	681a      	ldr	r2, [r3, #0]
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80078ba:	601a      	str	r2, [r3, #0]
 80078bc:	e007      	b.n	80078ce <HAL_I2C_Mem_Read_DMA+0x23e>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	685a      	ldr	r2, [r3, #4]
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80078cc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80078ce:	2300      	movs	r3, #0
 80078d0:	61bb      	str	r3, [r7, #24]
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	695b      	ldr	r3, [r3, #20]
 80078d8:	61bb      	str	r3, [r7, #24]
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	699b      	ldr	r3, [r3, #24]
 80078e0:	61bb      	str	r3, [r7, #24]
 80078e2:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	2200      	movs	r2, #0
 80078e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	685a      	ldr	r2, [r3, #4]
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80078fa:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	685a      	ldr	r2, [r3, #4]
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800790a:	605a      	str	r2, [r3, #4]
 800790c:	e049      	b.n	80079a2 <HAL_I2C_Mem_Read_DMA+0x312>
 800790e:	bf00      	nop
 8007910:	20000014 	.word	0x20000014
 8007914:	14f8b589 	.word	0x14f8b589
 8007918:	ffff0000 	.word	0xffff0000
 800791c:	080097f1 	.word	0x080097f1
 8007920:	080099af 	.word	0x080099af
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	2220      	movs	r2, #32
 8007928:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	2200      	movs	r2, #0
 8007930:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007938:	f043 0210 	orr.w	r2, r3, #16
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	2200      	movs	r2, #0
 8007944:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8007948:	2301      	movs	r3, #1
 800794a:	e02d      	b.n	80079a8 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800794c:	88f8      	ldrh	r0, [r7, #6]
 800794e:	893a      	ldrh	r2, [r7, #8]
 8007950:	8979      	ldrh	r1, [r7, #10]
 8007952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007954:	9301      	str	r3, [sp, #4]
 8007956:	2323      	movs	r3, #35	@ 0x23
 8007958:	9300      	str	r3, [sp, #0]
 800795a:	4603      	mov	r3, r0
 800795c:	68f8      	ldr	r0, [r7, #12]
 800795e:	f001 fe5f 	bl	8009620 <I2C_RequestMemoryRead>
 8007962:	4603      	mov	r3, r0
 8007964:	2b00      	cmp	r3, #0
 8007966:	d001      	beq.n	800796c <HAL_I2C_Mem_Read_DMA+0x2dc>
      {
        return HAL_ERROR;
 8007968:	2301      	movs	r3, #1
 800796a:	e01d      	b.n	80079a8 <HAL_I2C_Mem_Read_DMA+0x318>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800796c:	2300      	movs	r3, #0
 800796e:	617b      	str	r3, [r7, #20]
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	695b      	ldr	r3, [r3, #20]
 8007976:	617b      	str	r3, [r7, #20]
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	699b      	ldr	r3, [r3, #24]
 800797e:	617b      	str	r3, [r7, #20]
 8007980:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	681a      	ldr	r2, [r3, #0]
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007990:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	2220      	movs	r2, #32
 8007996:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	2200      	movs	r2, #0
 800799e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }

    return HAL_OK;
 80079a2:	2300      	movs	r3, #0
 80079a4:	e000      	b.n	80079a8 <HAL_I2C_Mem_Read_DMA+0x318>
  }
  else
  {
    return HAL_BUSY;
 80079a6:	2302      	movs	r3, #2
  }
}
 80079a8:	4618      	mov	r0, r3
 80079aa:	3728      	adds	r7, #40	@ 0x28
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bd80      	pop	{r7, pc}

080079b0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b08a      	sub	sp, #40	@ 0x28
 80079b4:	af02      	add	r7, sp, #8
 80079b6:	60f8      	str	r0, [r7, #12]
 80079b8:	607a      	str	r2, [r7, #4]
 80079ba:	603b      	str	r3, [r7, #0]
 80079bc:	460b      	mov	r3, r1
 80079be:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80079c0:	f7fd fb22 	bl	8005008 <HAL_GetTick>
 80079c4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80079c6:	2300      	movs	r3, #0
 80079c8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80079d0:	b2db      	uxtb	r3, r3
 80079d2:	2b20      	cmp	r3, #32
 80079d4:	f040 8111 	bne.w	8007bfa <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80079d8:	69fb      	ldr	r3, [r7, #28]
 80079da:	9300      	str	r3, [sp, #0]
 80079dc:	2319      	movs	r3, #25
 80079de:	2201      	movs	r2, #1
 80079e0:	4988      	ldr	r1, [pc, #544]	@ (8007c04 <HAL_I2C_IsDeviceReady+0x254>)
 80079e2:	68f8      	ldr	r0, [r7, #12]
 80079e4:	f002 f8c8 	bl	8009b78 <I2C_WaitOnFlagUntilTimeout>
 80079e8:	4603      	mov	r3, r0
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d001      	beq.n	80079f2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80079ee:	2302      	movs	r3, #2
 80079f0:	e104      	b.n	8007bfc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80079f8:	2b01      	cmp	r3, #1
 80079fa:	d101      	bne.n	8007a00 <HAL_I2C_IsDeviceReady+0x50>
 80079fc:	2302      	movs	r3, #2
 80079fe:	e0fd      	b.n	8007bfc <HAL_I2C_IsDeviceReady+0x24c>
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	2201      	movs	r2, #1
 8007a04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f003 0301 	and.w	r3, r3, #1
 8007a12:	2b01      	cmp	r3, #1
 8007a14:	d007      	beq.n	8007a26 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	681a      	ldr	r2, [r3, #0]
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f042 0201 	orr.w	r2, r2, #1
 8007a24:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	681a      	ldr	r2, [r3, #0]
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007a34:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	2224      	movs	r2, #36	@ 0x24
 8007a3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	2200      	movs	r2, #0
 8007a42:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	4a70      	ldr	r2, [pc, #448]	@ (8007c08 <HAL_I2C_IsDeviceReady+0x258>)
 8007a48:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	681a      	ldr	r2, [r3, #0]
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007a58:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8007a5a:	69fb      	ldr	r3, [r7, #28]
 8007a5c:	9300      	str	r3, [sp, #0]
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	2200      	movs	r2, #0
 8007a62:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007a66:	68f8      	ldr	r0, [r7, #12]
 8007a68:	f002 f886 	bl	8009b78 <I2C_WaitOnFlagUntilTimeout>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d00d      	beq.n	8007a8e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a80:	d103      	bne.n	8007a8a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007a88:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8007a8a:	2303      	movs	r3, #3
 8007a8c:	e0b6      	b.n	8007bfc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007a8e:	897b      	ldrh	r3, [r7, #10]
 8007a90:	b2db      	uxtb	r3, r3
 8007a92:	461a      	mov	r2, r3
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007a9c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8007a9e:	f7fd fab3 	bl	8005008 <HAL_GetTick>
 8007aa2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	695b      	ldr	r3, [r3, #20]
 8007aaa:	f003 0302 	and.w	r3, r3, #2
 8007aae:	2b02      	cmp	r3, #2
 8007ab0:	bf0c      	ite	eq
 8007ab2:	2301      	moveq	r3, #1
 8007ab4:	2300      	movne	r3, #0
 8007ab6:	b2db      	uxtb	r3, r3
 8007ab8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	695b      	ldr	r3, [r3, #20]
 8007ac0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007ac4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007ac8:	bf0c      	ite	eq
 8007aca:	2301      	moveq	r3, #1
 8007acc:	2300      	movne	r3, #0
 8007ace:	b2db      	uxtb	r3, r3
 8007ad0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8007ad2:	e025      	b.n	8007b20 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007ad4:	f7fd fa98 	bl	8005008 <HAL_GetTick>
 8007ad8:	4602      	mov	r2, r0
 8007ada:	69fb      	ldr	r3, [r7, #28]
 8007adc:	1ad3      	subs	r3, r2, r3
 8007ade:	683a      	ldr	r2, [r7, #0]
 8007ae0:	429a      	cmp	r2, r3
 8007ae2:	d302      	bcc.n	8007aea <HAL_I2C_IsDeviceReady+0x13a>
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d103      	bne.n	8007af2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	22a0      	movs	r2, #160	@ 0xa0
 8007aee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	695b      	ldr	r3, [r3, #20]
 8007af8:	f003 0302 	and.w	r3, r3, #2
 8007afc:	2b02      	cmp	r3, #2
 8007afe:	bf0c      	ite	eq
 8007b00:	2301      	moveq	r3, #1
 8007b02:	2300      	movne	r3, #0
 8007b04:	b2db      	uxtb	r3, r3
 8007b06:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	695b      	ldr	r3, [r3, #20]
 8007b0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007b12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b16:	bf0c      	ite	eq
 8007b18:	2301      	moveq	r3, #1
 8007b1a:	2300      	movne	r3, #0
 8007b1c:	b2db      	uxtb	r3, r3
 8007b1e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b26:	b2db      	uxtb	r3, r3
 8007b28:	2ba0      	cmp	r3, #160	@ 0xa0
 8007b2a:	d005      	beq.n	8007b38 <HAL_I2C_IsDeviceReady+0x188>
 8007b2c:	7dfb      	ldrb	r3, [r7, #23]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d102      	bne.n	8007b38 <HAL_I2C_IsDeviceReady+0x188>
 8007b32:	7dbb      	ldrb	r3, [r7, #22]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d0cd      	beq.n	8007ad4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	2220      	movs	r2, #32
 8007b3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	695b      	ldr	r3, [r3, #20]
 8007b46:	f003 0302 	and.w	r3, r3, #2
 8007b4a:	2b02      	cmp	r3, #2
 8007b4c:	d129      	bne.n	8007ba2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	681a      	ldr	r2, [r3, #0]
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007b5c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b5e:	2300      	movs	r3, #0
 8007b60:	613b      	str	r3, [r7, #16]
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	695b      	ldr	r3, [r3, #20]
 8007b68:	613b      	str	r3, [r7, #16]
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	699b      	ldr	r3, [r3, #24]
 8007b70:	613b      	str	r3, [r7, #16]
 8007b72:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007b74:	69fb      	ldr	r3, [r7, #28]
 8007b76:	9300      	str	r3, [sp, #0]
 8007b78:	2319      	movs	r3, #25
 8007b7a:	2201      	movs	r2, #1
 8007b7c:	4921      	ldr	r1, [pc, #132]	@ (8007c04 <HAL_I2C_IsDeviceReady+0x254>)
 8007b7e:	68f8      	ldr	r0, [r7, #12]
 8007b80:	f001 fffa 	bl	8009b78 <I2C_WaitOnFlagUntilTimeout>
 8007b84:	4603      	mov	r3, r0
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d001      	beq.n	8007b8e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	e036      	b.n	8007bfc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	2220      	movs	r2, #32
 8007b92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	e02c      	b.n	8007bfc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	681a      	ldr	r2, [r3, #0]
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007bb0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007bba:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007bbc:	69fb      	ldr	r3, [r7, #28]
 8007bbe:	9300      	str	r3, [sp, #0]
 8007bc0:	2319      	movs	r3, #25
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	490f      	ldr	r1, [pc, #60]	@ (8007c04 <HAL_I2C_IsDeviceReady+0x254>)
 8007bc6:	68f8      	ldr	r0, [r7, #12]
 8007bc8:	f001 ffd6 	bl	8009b78 <I2C_WaitOnFlagUntilTimeout>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d001      	beq.n	8007bd6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	e012      	b.n	8007bfc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8007bd6:	69bb      	ldr	r3, [r7, #24]
 8007bd8:	3301      	adds	r3, #1
 8007bda:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8007bdc:	69ba      	ldr	r2, [r7, #24]
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	429a      	cmp	r2, r3
 8007be2:	f4ff af32 	bcc.w	8007a4a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	2220      	movs	r2, #32
 8007bea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	e000      	b.n	8007bfc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8007bfa:	2302      	movs	r3, #2
  }
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	3720      	adds	r7, #32
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd80      	pop	{r7, pc}
 8007c04:	00100002 	.word	0x00100002
 8007c08:	ffff0000 	.word	0xffff0000

08007c0c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b088      	sub	sp, #32
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8007c14:	2300      	movs	r3, #0
 8007c16:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	685b      	ldr	r3, [r3, #4]
 8007c1e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c24:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007c2c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c34:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8007c36:	7bfb      	ldrb	r3, [r7, #15]
 8007c38:	2b10      	cmp	r3, #16
 8007c3a:	d003      	beq.n	8007c44 <HAL_I2C_EV_IRQHandler+0x38>
 8007c3c:	7bfb      	ldrb	r3, [r7, #15]
 8007c3e:	2b40      	cmp	r3, #64	@ 0x40
 8007c40:	f040 80c1 	bne.w	8007dc6 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	699b      	ldr	r3, [r3, #24]
 8007c4a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	695b      	ldr	r3, [r3, #20]
 8007c52:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8007c54:	69fb      	ldr	r3, [r7, #28]
 8007c56:	f003 0301 	and.w	r3, r3, #1
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d10d      	bne.n	8007c7a <HAL_I2C_EV_IRQHandler+0x6e>
 8007c5e:	693b      	ldr	r3, [r7, #16]
 8007c60:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8007c64:	d003      	beq.n	8007c6e <HAL_I2C_EV_IRQHandler+0x62>
 8007c66:	693b      	ldr	r3, [r7, #16]
 8007c68:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8007c6c:	d101      	bne.n	8007c72 <HAL_I2C_EV_IRQHandler+0x66>
 8007c6e:	2301      	movs	r3, #1
 8007c70:	e000      	b.n	8007c74 <HAL_I2C_EV_IRQHandler+0x68>
 8007c72:	2300      	movs	r3, #0
 8007c74:	2b01      	cmp	r3, #1
 8007c76:	f000 8132 	beq.w	8007ede <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007c7a:	69fb      	ldr	r3, [r7, #28]
 8007c7c:	f003 0301 	and.w	r3, r3, #1
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d00c      	beq.n	8007c9e <HAL_I2C_EV_IRQHandler+0x92>
 8007c84:	697b      	ldr	r3, [r7, #20]
 8007c86:	0a5b      	lsrs	r3, r3, #9
 8007c88:	f003 0301 	and.w	r3, r3, #1
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d006      	beq.n	8007c9e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f002 f9d9 	bl	800a048 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f000 fd8b 	bl	80087b2 <I2C_Master_SB>
 8007c9c:	e092      	b.n	8007dc4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007c9e:	69fb      	ldr	r3, [r7, #28]
 8007ca0:	08db      	lsrs	r3, r3, #3
 8007ca2:	f003 0301 	and.w	r3, r3, #1
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d009      	beq.n	8007cbe <HAL_I2C_EV_IRQHandler+0xb2>
 8007caa:	697b      	ldr	r3, [r7, #20]
 8007cac:	0a5b      	lsrs	r3, r3, #9
 8007cae:	f003 0301 	and.w	r3, r3, #1
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d003      	beq.n	8007cbe <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f000 fe01 	bl	80088be <I2C_Master_ADD10>
 8007cbc:	e082      	b.n	8007dc4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007cbe:	69fb      	ldr	r3, [r7, #28]
 8007cc0:	085b      	lsrs	r3, r3, #1
 8007cc2:	f003 0301 	and.w	r3, r3, #1
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d009      	beq.n	8007cde <HAL_I2C_EV_IRQHandler+0xd2>
 8007cca:	697b      	ldr	r3, [r7, #20]
 8007ccc:	0a5b      	lsrs	r3, r3, #9
 8007cce:	f003 0301 	and.w	r3, r3, #1
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d003      	beq.n	8007cde <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f000 fe1b 	bl	8008912 <I2C_Master_ADDR>
 8007cdc:	e072      	b.n	8007dc4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8007cde:	69bb      	ldr	r3, [r7, #24]
 8007ce0:	089b      	lsrs	r3, r3, #2
 8007ce2:	f003 0301 	and.w	r3, r3, #1
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d03b      	beq.n	8007d62 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	685b      	ldr	r3, [r3, #4]
 8007cf0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007cf4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007cf8:	f000 80f3 	beq.w	8007ee2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007cfc:	69fb      	ldr	r3, [r7, #28]
 8007cfe:	09db      	lsrs	r3, r3, #7
 8007d00:	f003 0301 	and.w	r3, r3, #1
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d00f      	beq.n	8007d28 <HAL_I2C_EV_IRQHandler+0x11c>
 8007d08:	697b      	ldr	r3, [r7, #20]
 8007d0a:	0a9b      	lsrs	r3, r3, #10
 8007d0c:	f003 0301 	and.w	r3, r3, #1
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d009      	beq.n	8007d28 <HAL_I2C_EV_IRQHandler+0x11c>
 8007d14:	69fb      	ldr	r3, [r7, #28]
 8007d16:	089b      	lsrs	r3, r3, #2
 8007d18:	f003 0301 	and.w	r3, r3, #1
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d103      	bne.n	8007d28 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f000 f9df 	bl	80080e4 <I2C_MasterTransmit_TXE>
 8007d26:	e04d      	b.n	8007dc4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007d28:	69fb      	ldr	r3, [r7, #28]
 8007d2a:	089b      	lsrs	r3, r3, #2
 8007d2c:	f003 0301 	and.w	r3, r3, #1
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	f000 80d6 	beq.w	8007ee2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8007d36:	697b      	ldr	r3, [r7, #20]
 8007d38:	0a5b      	lsrs	r3, r3, #9
 8007d3a:	f003 0301 	and.w	r3, r3, #1
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	f000 80cf 	beq.w	8007ee2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8007d44:	7bbb      	ldrb	r3, [r7, #14]
 8007d46:	2b21      	cmp	r3, #33	@ 0x21
 8007d48:	d103      	bne.n	8007d52 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f000 fa66 	bl	800821c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007d50:	e0c7      	b.n	8007ee2 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8007d52:	7bfb      	ldrb	r3, [r7, #15]
 8007d54:	2b40      	cmp	r3, #64	@ 0x40
 8007d56:	f040 80c4 	bne.w	8007ee2 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	f000 fad4 	bl	8008308 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007d60:	e0bf      	b.n	8007ee2 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	685b      	ldr	r3, [r3, #4]
 8007d68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007d6c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007d70:	f000 80b7 	beq.w	8007ee2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007d74:	69fb      	ldr	r3, [r7, #28]
 8007d76:	099b      	lsrs	r3, r3, #6
 8007d78:	f003 0301 	and.w	r3, r3, #1
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d00f      	beq.n	8007da0 <HAL_I2C_EV_IRQHandler+0x194>
 8007d80:	697b      	ldr	r3, [r7, #20]
 8007d82:	0a9b      	lsrs	r3, r3, #10
 8007d84:	f003 0301 	and.w	r3, r3, #1
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d009      	beq.n	8007da0 <HAL_I2C_EV_IRQHandler+0x194>
 8007d8c:	69fb      	ldr	r3, [r7, #28]
 8007d8e:	089b      	lsrs	r3, r3, #2
 8007d90:	f003 0301 	and.w	r3, r3, #1
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d103      	bne.n	8007da0 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f000 fb4d 	bl	8008438 <I2C_MasterReceive_RXNE>
 8007d9e:	e011      	b.n	8007dc4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007da0:	69fb      	ldr	r3, [r7, #28]
 8007da2:	089b      	lsrs	r3, r3, #2
 8007da4:	f003 0301 	and.w	r3, r3, #1
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	f000 809a 	beq.w	8007ee2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8007dae:	697b      	ldr	r3, [r7, #20]
 8007db0:	0a5b      	lsrs	r3, r3, #9
 8007db2:	f003 0301 	and.w	r3, r3, #1
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	f000 8093 	beq.w	8007ee2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f000 fc03 	bl	80085c8 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007dc2:	e08e      	b.n	8007ee2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8007dc4:	e08d      	b.n	8007ee2 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d004      	beq.n	8007dd8 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	695b      	ldr	r3, [r3, #20]
 8007dd4:	61fb      	str	r3, [r7, #28]
 8007dd6:	e007      	b.n	8007de8 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	699b      	ldr	r3, [r3, #24]
 8007dde:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	695b      	ldr	r3, [r3, #20]
 8007de6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007de8:	69fb      	ldr	r3, [r7, #28]
 8007dea:	085b      	lsrs	r3, r3, #1
 8007dec:	f003 0301 	and.w	r3, r3, #1
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d012      	beq.n	8007e1a <HAL_I2C_EV_IRQHandler+0x20e>
 8007df4:	697b      	ldr	r3, [r7, #20]
 8007df6:	0a5b      	lsrs	r3, r3, #9
 8007df8:	f003 0301 	and.w	r3, r3, #1
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d00c      	beq.n	8007e1a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d003      	beq.n	8007e10 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	699b      	ldr	r3, [r3, #24]
 8007e0e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8007e10:	69b9      	ldr	r1, [r7, #24]
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f000 ffcc 	bl	8008db0 <I2C_Slave_ADDR>
 8007e18:	e066      	b.n	8007ee8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007e1a:	69fb      	ldr	r3, [r7, #28]
 8007e1c:	091b      	lsrs	r3, r3, #4
 8007e1e:	f003 0301 	and.w	r3, r3, #1
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d009      	beq.n	8007e3a <HAL_I2C_EV_IRQHandler+0x22e>
 8007e26:	697b      	ldr	r3, [r7, #20]
 8007e28:	0a5b      	lsrs	r3, r3, #9
 8007e2a:	f003 0301 	and.w	r3, r3, #1
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d003      	beq.n	8007e3a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f001 f806 	bl	8008e44 <I2C_Slave_STOPF>
 8007e38:	e056      	b.n	8007ee8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007e3a:	7bbb      	ldrb	r3, [r7, #14]
 8007e3c:	2b21      	cmp	r3, #33	@ 0x21
 8007e3e:	d002      	beq.n	8007e46 <HAL_I2C_EV_IRQHandler+0x23a>
 8007e40:	7bbb      	ldrb	r3, [r7, #14]
 8007e42:	2b29      	cmp	r3, #41	@ 0x29
 8007e44:	d125      	bne.n	8007e92 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007e46:	69fb      	ldr	r3, [r7, #28]
 8007e48:	09db      	lsrs	r3, r3, #7
 8007e4a:	f003 0301 	and.w	r3, r3, #1
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d00f      	beq.n	8007e72 <HAL_I2C_EV_IRQHandler+0x266>
 8007e52:	697b      	ldr	r3, [r7, #20]
 8007e54:	0a9b      	lsrs	r3, r3, #10
 8007e56:	f003 0301 	and.w	r3, r3, #1
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d009      	beq.n	8007e72 <HAL_I2C_EV_IRQHandler+0x266>
 8007e5e:	69fb      	ldr	r3, [r7, #28]
 8007e60:	089b      	lsrs	r3, r3, #2
 8007e62:	f003 0301 	and.w	r3, r3, #1
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d103      	bne.n	8007e72 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	f000 fee2 	bl	8008c34 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007e70:	e039      	b.n	8007ee6 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007e72:	69fb      	ldr	r3, [r7, #28]
 8007e74:	089b      	lsrs	r3, r3, #2
 8007e76:	f003 0301 	and.w	r3, r3, #1
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d033      	beq.n	8007ee6 <HAL_I2C_EV_IRQHandler+0x2da>
 8007e7e:	697b      	ldr	r3, [r7, #20]
 8007e80:	0a5b      	lsrs	r3, r3, #9
 8007e82:	f003 0301 	and.w	r3, r3, #1
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d02d      	beq.n	8007ee6 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f000 ff0f 	bl	8008cae <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007e90:	e029      	b.n	8007ee6 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007e92:	69fb      	ldr	r3, [r7, #28]
 8007e94:	099b      	lsrs	r3, r3, #6
 8007e96:	f003 0301 	and.w	r3, r3, #1
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d00f      	beq.n	8007ebe <HAL_I2C_EV_IRQHandler+0x2b2>
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	0a9b      	lsrs	r3, r3, #10
 8007ea2:	f003 0301 	and.w	r3, r3, #1
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d009      	beq.n	8007ebe <HAL_I2C_EV_IRQHandler+0x2b2>
 8007eaa:	69fb      	ldr	r3, [r7, #28]
 8007eac:	089b      	lsrs	r3, r3, #2
 8007eae:	f003 0301 	and.w	r3, r3, #1
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d103      	bne.n	8007ebe <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f000 ff1a 	bl	8008cf0 <I2C_SlaveReceive_RXNE>
 8007ebc:	e014      	b.n	8007ee8 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007ebe:	69fb      	ldr	r3, [r7, #28]
 8007ec0:	089b      	lsrs	r3, r3, #2
 8007ec2:	f003 0301 	and.w	r3, r3, #1
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d00e      	beq.n	8007ee8 <HAL_I2C_EV_IRQHandler+0x2dc>
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	0a5b      	lsrs	r3, r3, #9
 8007ece:	f003 0301 	and.w	r3, r3, #1
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d008      	beq.n	8007ee8 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f000 ff48 	bl	8008d6c <I2C_SlaveReceive_BTF>
 8007edc:	e004      	b.n	8007ee8 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8007ede:	bf00      	nop
 8007ee0:	e002      	b.n	8007ee8 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007ee2:	bf00      	nop
 8007ee4:	e000      	b.n	8007ee8 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007ee6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8007ee8:	3720      	adds	r7, #32
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}

08007eee <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007eee:	b580      	push	{r7, lr}
 8007ef0:	b08a      	sub	sp, #40	@ 0x28
 8007ef2:	af00      	add	r7, sp, #0
 8007ef4:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	695b      	ldr	r3, [r3, #20]
 8007efc:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	685b      	ldr	r3, [r3, #4]
 8007f04:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8007f06:	2300      	movs	r3, #0
 8007f08:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007f10:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007f12:	6a3b      	ldr	r3, [r7, #32]
 8007f14:	0a1b      	lsrs	r3, r3, #8
 8007f16:	f003 0301 	and.w	r3, r3, #1
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d00e      	beq.n	8007f3c <HAL_I2C_ER_IRQHandler+0x4e>
 8007f1e:	69fb      	ldr	r3, [r7, #28]
 8007f20:	0a1b      	lsrs	r3, r3, #8
 8007f22:	f003 0301 	and.w	r3, r3, #1
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d008      	beq.n	8007f3c <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8007f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f2c:	f043 0301 	orr.w	r3, r3, #1
 8007f30:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007f3a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007f3c:	6a3b      	ldr	r3, [r7, #32]
 8007f3e:	0a5b      	lsrs	r3, r3, #9
 8007f40:	f003 0301 	and.w	r3, r3, #1
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d00e      	beq.n	8007f66 <HAL_I2C_ER_IRQHandler+0x78>
 8007f48:	69fb      	ldr	r3, [r7, #28]
 8007f4a:	0a1b      	lsrs	r3, r3, #8
 8007f4c:	f003 0301 	and.w	r3, r3, #1
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d008      	beq.n	8007f66 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8007f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f56:	f043 0302 	orr.w	r3, r3, #2
 8007f5a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8007f64:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007f66:	6a3b      	ldr	r3, [r7, #32]
 8007f68:	0a9b      	lsrs	r3, r3, #10
 8007f6a:	f003 0301 	and.w	r3, r3, #1
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d03f      	beq.n	8007ff2 <HAL_I2C_ER_IRQHandler+0x104>
 8007f72:	69fb      	ldr	r3, [r7, #28]
 8007f74:	0a1b      	lsrs	r3, r3, #8
 8007f76:	f003 0301 	and.w	r3, r3, #1
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d039      	beq.n	8007ff2 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8007f7e:	7efb      	ldrb	r3, [r7, #27]
 8007f80:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f86:	b29b      	uxth	r3, r3
 8007f88:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007f90:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f96:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8007f98:	7ebb      	ldrb	r3, [r7, #26]
 8007f9a:	2b20      	cmp	r3, #32
 8007f9c:	d112      	bne.n	8007fc4 <HAL_I2C_ER_IRQHandler+0xd6>
 8007f9e:	697b      	ldr	r3, [r7, #20]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d10f      	bne.n	8007fc4 <HAL_I2C_ER_IRQHandler+0xd6>
 8007fa4:	7cfb      	ldrb	r3, [r7, #19]
 8007fa6:	2b21      	cmp	r3, #33	@ 0x21
 8007fa8:	d008      	beq.n	8007fbc <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8007faa:	7cfb      	ldrb	r3, [r7, #19]
 8007fac:	2b29      	cmp	r3, #41	@ 0x29
 8007fae:	d005      	beq.n	8007fbc <HAL_I2C_ER_IRQHandler+0xce>
 8007fb0:	7cfb      	ldrb	r3, [r7, #19]
 8007fb2:	2b28      	cmp	r3, #40	@ 0x28
 8007fb4:	d106      	bne.n	8007fc4 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	2b21      	cmp	r3, #33	@ 0x21
 8007fba:	d103      	bne.n	8007fc4 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	f001 f871 	bl	80090a4 <I2C_Slave_AF>
 8007fc2:	e016      	b.n	8007ff2 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007fcc:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8007fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fd0:	f043 0304 	orr.w	r3, r3, #4
 8007fd4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8007fd6:	7efb      	ldrb	r3, [r7, #27]
 8007fd8:	2b10      	cmp	r3, #16
 8007fda:	d002      	beq.n	8007fe2 <HAL_I2C_ER_IRQHandler+0xf4>
 8007fdc:	7efb      	ldrb	r3, [r7, #27]
 8007fde:	2b40      	cmp	r3, #64	@ 0x40
 8007fe0:	d107      	bne.n	8007ff2 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	681a      	ldr	r2, [r3, #0]
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007ff0:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007ff2:	6a3b      	ldr	r3, [r7, #32]
 8007ff4:	0adb      	lsrs	r3, r3, #11
 8007ff6:	f003 0301 	and.w	r3, r3, #1
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d00e      	beq.n	800801c <HAL_I2C_ER_IRQHandler+0x12e>
 8007ffe:	69fb      	ldr	r3, [r7, #28]
 8008000:	0a1b      	lsrs	r3, r3, #8
 8008002:	f003 0301 	and.w	r3, r3, #1
 8008006:	2b00      	cmp	r3, #0
 8008008:	d008      	beq.n	800801c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800800a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800800c:	f043 0308 	orr.w	r3, r3, #8
 8008010:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 800801a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800801c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800801e:	2b00      	cmp	r3, #0
 8008020:	d008      	beq.n	8008034 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008028:	431a      	orrs	r2, r3
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f001 f8ac 	bl	800918c <I2C_ITError>
  }
}
 8008034:	bf00      	nop
 8008036:	3728      	adds	r7, #40	@ 0x28
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}

0800803c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800803c:	b480      	push	{r7}
 800803e:	b083      	sub	sp, #12
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8008044:	bf00      	nop
 8008046:	370c      	adds	r7, #12
 8008048:	46bd      	mov	sp, r7
 800804a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804e:	4770      	bx	lr

08008050 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008050:	b480      	push	{r7}
 8008052:	b083      	sub	sp, #12
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8008058:	bf00      	nop
 800805a:	370c      	adds	r7, #12
 800805c:	46bd      	mov	sp, r7
 800805e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008062:	4770      	bx	lr

08008064 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008064:	b480      	push	{r7}
 8008066:	b083      	sub	sp, #12
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800806c:	bf00      	nop
 800806e:	370c      	adds	r7, #12
 8008070:	46bd      	mov	sp, r7
 8008072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008076:	4770      	bx	lr

08008078 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008078:	b480      	push	{r7}
 800807a:	b083      	sub	sp, #12
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8008080:	bf00      	nop
 8008082:	370c      	adds	r7, #12
 8008084:	46bd      	mov	sp, r7
 8008086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808a:	4770      	bx	lr

0800808c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800808c:	b480      	push	{r7}
 800808e:	b083      	sub	sp, #12
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
 8008094:	460b      	mov	r3, r1
 8008096:	70fb      	strb	r3, [r7, #3]
 8008098:	4613      	mov	r3, r2
 800809a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800809c:	bf00      	nop
 800809e:	370c      	adds	r7, #12
 80080a0:	46bd      	mov	sp, r7
 80080a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a6:	4770      	bx	lr

080080a8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80080a8:	b480      	push	{r7}
 80080aa:	b083      	sub	sp, #12
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80080b0:	bf00      	nop
 80080b2:	370c      	adds	r7, #12
 80080b4:	46bd      	mov	sp, r7
 80080b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ba:	4770      	bx	lr

080080bc <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80080bc:	b480      	push	{r7}
 80080be:	b083      	sub	sp, #12
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80080c4:	bf00      	nop
 80080c6:	370c      	adds	r7, #12
 80080c8:	46bd      	mov	sp, r7
 80080ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ce:	4770      	bx	lr

080080d0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80080d0:	b480      	push	{r7}
 80080d2:	b083      	sub	sp, #12
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80080d8:	bf00      	nop
 80080da:	370c      	adds	r7, #12
 80080dc:	46bd      	mov	sp, r7
 80080de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e2:	4770      	bx	lr

080080e4 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b084      	sub	sp, #16
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80080f2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80080fa:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008100:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008106:	2b00      	cmp	r3, #0
 8008108:	d150      	bne.n	80081ac <I2C_MasterTransmit_TXE+0xc8>
 800810a:	7bfb      	ldrb	r3, [r7, #15]
 800810c:	2b21      	cmp	r3, #33	@ 0x21
 800810e:	d14d      	bne.n	80081ac <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	2b08      	cmp	r3, #8
 8008114:	d01d      	beq.n	8008152 <I2C_MasterTransmit_TXE+0x6e>
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	2b20      	cmp	r3, #32
 800811a:	d01a      	beq.n	8008152 <I2C_MasterTransmit_TXE+0x6e>
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008122:	d016      	beq.n	8008152 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	685a      	ldr	r2, [r3, #4]
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8008132:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2211      	movs	r2, #17
 8008138:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2200      	movs	r2, #0
 800813e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2220      	movs	r2, #32
 8008146:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	f7ff ff76 	bl	800803c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008150:	e060      	b.n	8008214 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	685a      	ldr	r2, [r3, #4]
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8008160:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	681a      	ldr	r2, [r3, #0]
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008170:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2200      	movs	r2, #0
 8008176:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2220      	movs	r2, #32
 800817c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008186:	b2db      	uxtb	r3, r3
 8008188:	2b40      	cmp	r3, #64	@ 0x40
 800818a:	d107      	bne.n	800819c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2200      	movs	r2, #0
 8008190:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f7fc f95b 	bl	8004450 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800819a:	e03b      	b.n	8008214 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2200      	movs	r2, #0
 80081a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f7ff ff49 	bl	800803c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80081aa:	e033      	b.n	8008214 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80081ac:	7bfb      	ldrb	r3, [r7, #15]
 80081ae:	2b21      	cmp	r3, #33	@ 0x21
 80081b0:	d005      	beq.n	80081be <I2C_MasterTransmit_TXE+0xda>
 80081b2:	7bbb      	ldrb	r3, [r7, #14]
 80081b4:	2b40      	cmp	r3, #64	@ 0x40
 80081b6:	d12d      	bne.n	8008214 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80081b8:	7bfb      	ldrb	r3, [r7, #15]
 80081ba:	2b22      	cmp	r3, #34	@ 0x22
 80081bc:	d12a      	bne.n	8008214 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80081c2:	b29b      	uxth	r3, r3
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d108      	bne.n	80081da <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	685a      	ldr	r2, [r3, #4]
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80081d6:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80081d8:	e01c      	b.n	8008214 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80081e0:	b2db      	uxtb	r3, r3
 80081e2:	2b40      	cmp	r3, #64	@ 0x40
 80081e4:	d103      	bne.n	80081ee <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f000 f88e 	bl	8008308 <I2C_MemoryTransmit_TXE_BTF>
}
 80081ec:	e012      	b.n	8008214 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081f2:	781a      	ldrb	r2, [r3, #0]
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081fe:	1c5a      	adds	r2, r3, #1
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008208:	b29b      	uxth	r3, r3
 800820a:	3b01      	subs	r3, #1
 800820c:	b29a      	uxth	r2, r3
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8008212:	e7ff      	b.n	8008214 <I2C_MasterTransmit_TXE+0x130>
 8008214:	bf00      	nop
 8008216:	3710      	adds	r7, #16
 8008218:	46bd      	mov	sp, r7
 800821a:	bd80      	pop	{r7, pc}

0800821c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b084      	sub	sp, #16
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008228:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008230:	b2db      	uxtb	r3, r3
 8008232:	2b21      	cmp	r3, #33	@ 0x21
 8008234:	d164      	bne.n	8008300 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800823a:	b29b      	uxth	r3, r3
 800823c:	2b00      	cmp	r3, #0
 800823e:	d012      	beq.n	8008266 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008244:	781a      	ldrb	r2, [r3, #0]
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008250:	1c5a      	adds	r2, r3, #1
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800825a:	b29b      	uxth	r3, r3
 800825c:	3b01      	subs	r3, #1
 800825e:	b29a      	uxth	r2, r3
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8008264:	e04c      	b.n	8008300 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	2b08      	cmp	r3, #8
 800826a:	d01d      	beq.n	80082a8 <I2C_MasterTransmit_BTF+0x8c>
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	2b20      	cmp	r3, #32
 8008270:	d01a      	beq.n	80082a8 <I2C_MasterTransmit_BTF+0x8c>
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008278:	d016      	beq.n	80082a8 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	685a      	ldr	r2, [r3, #4]
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8008288:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2211      	movs	r2, #17
 800828e:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2200      	movs	r2, #0
 8008294:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2220      	movs	r2, #32
 800829c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f7ff fecb 	bl	800803c <HAL_I2C_MasterTxCpltCallback>
}
 80082a6:	e02b      	b.n	8008300 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	685a      	ldr	r2, [r3, #4]
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80082b6:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	681a      	ldr	r2, [r3, #0]
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80082c6:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2200      	movs	r2, #0
 80082cc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2220      	movs	r2, #32
 80082d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80082dc:	b2db      	uxtb	r3, r3
 80082de:	2b40      	cmp	r3, #64	@ 0x40
 80082e0:	d107      	bne.n	80082f2 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2200      	movs	r2, #0
 80082e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	f7fc f8b0 	bl	8004450 <HAL_I2C_MemTxCpltCallback>
}
 80082f0:	e006      	b.n	8008300 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2200      	movs	r2, #0
 80082f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f7ff fe9e 	bl	800803c <HAL_I2C_MasterTxCpltCallback>
}
 8008300:	bf00      	nop
 8008302:	3710      	adds	r7, #16
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}

08008308 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b084      	sub	sp, #16
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008316:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800831c:	2b00      	cmp	r3, #0
 800831e:	d11d      	bne.n	800835c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008324:	2b01      	cmp	r3, #1
 8008326:	d10b      	bne.n	8008340 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800832c:	b2da      	uxtb	r2, r3
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008338:	1c9a      	adds	r2, r3, #2
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 800833e:	e077      	b.n	8008430 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008344:	b29b      	uxth	r3, r3
 8008346:	121b      	asrs	r3, r3, #8
 8008348:	b2da      	uxtb	r2, r3
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008354:	1c5a      	adds	r2, r3, #1
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800835a:	e069      	b.n	8008430 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008360:	2b01      	cmp	r3, #1
 8008362:	d10b      	bne.n	800837c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008368:	b2da      	uxtb	r2, r3
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008374:	1c5a      	adds	r2, r3, #1
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800837a:	e059      	b.n	8008430 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008380:	2b02      	cmp	r3, #2
 8008382:	d152      	bne.n	800842a <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8008384:	7bfb      	ldrb	r3, [r7, #15]
 8008386:	2b22      	cmp	r3, #34	@ 0x22
 8008388:	d10d      	bne.n	80083a6 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	681a      	ldr	r2, [r3, #0]
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008398:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800839e:	1c5a      	adds	r2, r3, #1
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80083a4:	e044      	b.n	8008430 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80083aa:	b29b      	uxth	r3, r3
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d015      	beq.n	80083dc <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80083b0:	7bfb      	ldrb	r3, [r7, #15]
 80083b2:	2b21      	cmp	r3, #33	@ 0x21
 80083b4:	d112      	bne.n	80083dc <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083ba:	781a      	ldrb	r2, [r3, #0]
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083c6:	1c5a      	adds	r2, r3, #1
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80083d0:	b29b      	uxth	r3, r3
 80083d2:	3b01      	subs	r3, #1
 80083d4:	b29a      	uxth	r2, r3
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80083da:	e029      	b.n	8008430 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80083e0:	b29b      	uxth	r3, r3
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d124      	bne.n	8008430 <I2C_MemoryTransmit_TXE_BTF+0x128>
 80083e6:	7bfb      	ldrb	r3, [r7, #15]
 80083e8:	2b21      	cmp	r3, #33	@ 0x21
 80083ea:	d121      	bne.n	8008430 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	685a      	ldr	r2, [r3, #4]
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80083fa:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	681a      	ldr	r2, [r3, #0]
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800840a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2200      	movs	r2, #0
 8008410:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2220      	movs	r2, #32
 8008416:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2200      	movs	r2, #0
 800841e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f7fc f814 	bl	8004450 <HAL_I2C_MemTxCpltCallback>
}
 8008428:	e002      	b.n	8008430 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f7fe fb92 	bl	8006b54 <I2C_Flush_DR>
}
 8008430:	bf00      	nop
 8008432:	3710      	adds	r7, #16
 8008434:	46bd      	mov	sp, r7
 8008436:	bd80      	pop	{r7, pc}

08008438 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b084      	sub	sp, #16
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008446:	b2db      	uxtb	r3, r3
 8008448:	2b22      	cmp	r3, #34	@ 0x22
 800844a:	f040 80b9 	bne.w	80085c0 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008452:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008458:	b29b      	uxth	r3, r3
 800845a:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	2b03      	cmp	r3, #3
 8008460:	d921      	bls.n	80084a6 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	691a      	ldr	r2, [r3, #16]
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800846c:	b2d2      	uxtb	r2, r2
 800846e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008474:	1c5a      	adds	r2, r3, #1
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800847e:	b29b      	uxth	r3, r3
 8008480:	3b01      	subs	r3, #1
 8008482:	b29a      	uxth	r2, r3
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800848c:	b29b      	uxth	r3, r3
 800848e:	2b03      	cmp	r3, #3
 8008490:	f040 8096 	bne.w	80085c0 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	685a      	ldr	r2, [r3, #4]
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80084a2:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80084a4:	e08c      	b.n	80085c0 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084aa:	2b02      	cmp	r3, #2
 80084ac:	d07f      	beq.n	80085ae <I2C_MasterReceive_RXNE+0x176>
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	2b01      	cmp	r3, #1
 80084b2:	d002      	beq.n	80084ba <I2C_MasterReceive_RXNE+0x82>
 80084b4:	68bb      	ldr	r3, [r7, #8]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d179      	bne.n	80085ae <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f001 fd06 	bl	8009ecc <I2C_WaitOnSTOPRequestThroughIT>
 80084c0:	4603      	mov	r3, r0
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d14c      	bne.n	8008560 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	681a      	ldr	r2, [r3, #0]
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80084d4:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	685a      	ldr	r2, [r3, #4]
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80084e4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	691a      	ldr	r2, [r3, #16]
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084f0:	b2d2      	uxtb	r2, r2
 80084f2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084f8:	1c5a      	adds	r2, r3, #1
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008502:	b29b      	uxth	r3, r3
 8008504:	3b01      	subs	r3, #1
 8008506:	b29a      	uxth	r2, r3
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2220      	movs	r2, #32
 8008510:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800851a:	b2db      	uxtb	r3, r3
 800851c:	2b40      	cmp	r3, #64	@ 0x40
 800851e:	d10a      	bne.n	8008536 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2200      	movs	r2, #0
 8008524:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2200      	movs	r2, #0
 800852c:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	f7fb ffa4 	bl	800447c <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8008534:	e044      	b.n	80085c0 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2200      	movs	r2, #0
 800853a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	2b08      	cmp	r3, #8
 8008542:	d002      	beq.n	800854a <I2C_MasterReceive_RXNE+0x112>
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	2b20      	cmp	r3, #32
 8008548:	d103      	bne.n	8008552 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2200      	movs	r2, #0
 800854e:	631a      	str	r2, [r3, #48]	@ 0x30
 8008550:	e002      	b.n	8008558 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2212      	movs	r2, #18
 8008556:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8008558:	6878      	ldr	r0, [r7, #4]
 800855a:	f7ff fd79 	bl	8008050 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800855e:	e02f      	b.n	80085c0 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	685a      	ldr	r2, [r3, #4]
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800856e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	691a      	ldr	r2, [r3, #16]
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800857a:	b2d2      	uxtb	r2, r2
 800857c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008582:	1c5a      	adds	r2, r3, #1
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800858c:	b29b      	uxth	r3, r3
 800858e:	3b01      	subs	r3, #1
 8008590:	b29a      	uxth	r2, r3
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2220      	movs	r2, #32
 800859a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2200      	movs	r2, #0
 80085a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	f7ff fd88 	bl	80080bc <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80085ac:	e008      	b.n	80085c0 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	685a      	ldr	r2, [r3, #4]
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80085bc:	605a      	str	r2, [r3, #4]
}
 80085be:	e7ff      	b.n	80085c0 <I2C_MasterReceive_RXNE+0x188>
 80085c0:	bf00      	nop
 80085c2:	3710      	adds	r7, #16
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bd80      	pop	{r7, pc}

080085c8 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b084      	sub	sp, #16
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085d4:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80085da:	b29b      	uxth	r3, r3
 80085dc:	2b04      	cmp	r3, #4
 80085de:	d11b      	bne.n	8008618 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	685a      	ldr	r2, [r3, #4]
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80085ee:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	691a      	ldr	r2, [r3, #16]
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085fa:	b2d2      	uxtb	r2, r2
 80085fc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008602:	1c5a      	adds	r2, r3, #1
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800860c:	b29b      	uxth	r3, r3
 800860e:	3b01      	subs	r3, #1
 8008610:	b29a      	uxth	r2, r3
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8008616:	e0c8      	b.n	80087aa <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800861c:	b29b      	uxth	r3, r3
 800861e:	2b03      	cmp	r3, #3
 8008620:	d129      	bne.n	8008676 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	685a      	ldr	r2, [r3, #4]
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008630:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	2b04      	cmp	r3, #4
 8008636:	d00a      	beq.n	800864e <I2C_MasterReceive_BTF+0x86>
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	2b02      	cmp	r3, #2
 800863c:	d007      	beq.n	800864e <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	681a      	ldr	r2, [r3, #0]
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800864c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	691a      	ldr	r2, [r3, #16]
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008658:	b2d2      	uxtb	r2, r2
 800865a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008660:	1c5a      	adds	r2, r3, #1
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800866a:	b29b      	uxth	r3, r3
 800866c:	3b01      	subs	r3, #1
 800866e:	b29a      	uxth	r2, r3
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8008674:	e099      	b.n	80087aa <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800867a:	b29b      	uxth	r3, r3
 800867c:	2b02      	cmp	r3, #2
 800867e:	f040 8081 	bne.w	8008784 <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	2b01      	cmp	r3, #1
 8008686:	d002      	beq.n	800868e <I2C_MasterReceive_BTF+0xc6>
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	2b10      	cmp	r3, #16
 800868c:	d108      	bne.n	80086a0 <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	681a      	ldr	r2, [r3, #0]
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800869c:	601a      	str	r2, [r3, #0]
 800869e:	e019      	b.n	80086d4 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	2b04      	cmp	r3, #4
 80086a4:	d002      	beq.n	80086ac <I2C_MasterReceive_BTF+0xe4>
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	2b02      	cmp	r3, #2
 80086aa:	d108      	bne.n	80086be <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	681a      	ldr	r2, [r3, #0]
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80086ba:	601a      	str	r2, [r3, #0]
 80086bc:	e00a      	b.n	80086d4 <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	2b10      	cmp	r3, #16
 80086c2:	d007      	beq.n	80086d4 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	681a      	ldr	r2, [r3, #0]
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80086d2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	691a      	ldr	r2, [r3, #16]
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086de:	b2d2      	uxtb	r2, r2
 80086e0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086e6:	1c5a      	adds	r2, r3, #1
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80086f0:	b29b      	uxth	r3, r3
 80086f2:	3b01      	subs	r3, #1
 80086f4:	b29a      	uxth	r2, r3
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	691a      	ldr	r2, [r3, #16]
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008704:	b2d2      	uxtb	r2, r2
 8008706:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800870c:	1c5a      	adds	r2, r3, #1
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008716:	b29b      	uxth	r3, r3
 8008718:	3b01      	subs	r3, #1
 800871a:	b29a      	uxth	r2, r3
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	685a      	ldr	r2, [r3, #4]
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800872e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2220      	movs	r2, #32
 8008734:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800873e:	b2db      	uxtb	r3, r3
 8008740:	2b40      	cmp	r3, #64	@ 0x40
 8008742:	d10a      	bne.n	800875a <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2200      	movs	r2, #0
 8008748:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2200      	movs	r2, #0
 8008750:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	f7fb fe92 	bl	800447c <HAL_I2C_MemRxCpltCallback>
}
 8008758:	e027      	b.n	80087aa <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2200      	movs	r2, #0
 800875e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	2b08      	cmp	r3, #8
 8008766:	d002      	beq.n	800876e <I2C_MasterReceive_BTF+0x1a6>
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	2b20      	cmp	r3, #32
 800876c:	d103      	bne.n	8008776 <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2200      	movs	r2, #0
 8008772:	631a      	str	r2, [r3, #48]	@ 0x30
 8008774:	e002      	b.n	800877c <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2212      	movs	r2, #18
 800877a:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800877c:	6878      	ldr	r0, [r7, #4]
 800877e:	f7ff fc67 	bl	8008050 <HAL_I2C_MasterRxCpltCallback>
}
 8008782:	e012      	b.n	80087aa <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	691a      	ldr	r2, [r3, #16]
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800878e:	b2d2      	uxtb	r2, r2
 8008790:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008796:	1c5a      	adds	r2, r3, #1
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80087a0:	b29b      	uxth	r3, r3
 80087a2:	3b01      	subs	r3, #1
 80087a4:	b29a      	uxth	r2, r3
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80087aa:	bf00      	nop
 80087ac:	3710      	adds	r7, #16
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}

080087b2 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80087b2:	b480      	push	{r7}
 80087b4:	b083      	sub	sp, #12
 80087b6:	af00      	add	r7, sp, #0
 80087b8:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80087c0:	b2db      	uxtb	r3, r3
 80087c2:	2b40      	cmp	r3, #64	@ 0x40
 80087c4:	d117      	bne.n	80087f6 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d109      	bne.n	80087e2 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087d2:	b2db      	uxtb	r3, r3
 80087d4:	461a      	mov	r2, r3
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80087de:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80087e0:	e067      	b.n	80088b2 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087e6:	b2db      	uxtb	r3, r3
 80087e8:	f043 0301 	orr.w	r3, r3, #1
 80087ec:	b2da      	uxtb	r2, r3
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	611a      	str	r2, [r3, #16]
}
 80087f4:	e05d      	b.n	80088b2 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	691b      	ldr	r3, [r3, #16]
 80087fa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80087fe:	d133      	bne.n	8008868 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008806:	b2db      	uxtb	r3, r3
 8008808:	2b21      	cmp	r3, #33	@ 0x21
 800880a:	d109      	bne.n	8008820 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008810:	b2db      	uxtb	r3, r3
 8008812:	461a      	mov	r2, r3
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800881c:	611a      	str	r2, [r3, #16]
 800881e:	e008      	b.n	8008832 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008824:	b2db      	uxtb	r3, r3
 8008826:	f043 0301 	orr.w	r3, r3, #1
 800882a:	b2da      	uxtb	r2, r3
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008836:	2b00      	cmp	r3, #0
 8008838:	d004      	beq.n	8008844 <I2C_Master_SB+0x92>
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800883e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008840:	2b00      	cmp	r3, #0
 8008842:	d108      	bne.n	8008856 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008848:	2b00      	cmp	r3, #0
 800884a:	d032      	beq.n	80088b2 <I2C_Master_SB+0x100>
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008850:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008852:	2b00      	cmp	r3, #0
 8008854:	d02d      	beq.n	80088b2 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	685a      	ldr	r2, [r3, #4]
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008864:	605a      	str	r2, [r3, #4]
}
 8008866:	e024      	b.n	80088b2 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800886c:	2b00      	cmp	r3, #0
 800886e:	d10e      	bne.n	800888e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008874:	b29b      	uxth	r3, r3
 8008876:	11db      	asrs	r3, r3, #7
 8008878:	b2db      	uxtb	r3, r3
 800887a:	f003 0306 	and.w	r3, r3, #6
 800887e:	b2db      	uxtb	r3, r3
 8008880:	f063 030f 	orn	r3, r3, #15
 8008884:	b2da      	uxtb	r2, r3
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	611a      	str	r2, [r3, #16]
}
 800888c:	e011      	b.n	80088b2 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008892:	2b01      	cmp	r3, #1
 8008894:	d10d      	bne.n	80088b2 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800889a:	b29b      	uxth	r3, r3
 800889c:	11db      	asrs	r3, r3, #7
 800889e:	b2db      	uxtb	r3, r3
 80088a0:	f003 0306 	and.w	r3, r3, #6
 80088a4:	b2db      	uxtb	r3, r3
 80088a6:	f063 030e 	orn	r3, r3, #14
 80088aa:	b2da      	uxtb	r2, r3
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	611a      	str	r2, [r3, #16]
}
 80088b2:	bf00      	nop
 80088b4:	370c      	adds	r7, #12
 80088b6:	46bd      	mov	sp, r7
 80088b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088bc:	4770      	bx	lr

080088be <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80088be:	b480      	push	{r7}
 80088c0:	b083      	sub	sp, #12
 80088c2:	af00      	add	r7, sp, #0
 80088c4:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80088ca:	b2da      	uxtb	r2, r3
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d004      	beq.n	80088e4 <I2C_Master_ADD10+0x26>
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d108      	bne.n	80088f6 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d00c      	beq.n	8008906 <I2C_Master_ADD10+0x48>
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d007      	beq.n	8008906 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	685a      	ldr	r2, [r3, #4]
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008904:	605a      	str	r2, [r3, #4]
  }
}
 8008906:	bf00      	nop
 8008908:	370c      	adds	r7, #12
 800890a:	46bd      	mov	sp, r7
 800890c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008910:	4770      	bx	lr

08008912 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8008912:	b480      	push	{r7}
 8008914:	b091      	sub	sp, #68	@ 0x44
 8008916:	af00      	add	r7, sp, #0
 8008918:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008920:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008928:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800892e:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008936:	b2db      	uxtb	r3, r3
 8008938:	2b22      	cmp	r3, #34	@ 0x22
 800893a:	f040 8169 	bne.w	8008c10 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008942:	2b00      	cmp	r3, #0
 8008944:	d10f      	bne.n	8008966 <I2C_Master_ADDR+0x54>
 8008946:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800894a:	2b40      	cmp	r3, #64	@ 0x40
 800894c:	d10b      	bne.n	8008966 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800894e:	2300      	movs	r3, #0
 8008950:	633b      	str	r3, [r7, #48]	@ 0x30
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	695b      	ldr	r3, [r3, #20]
 8008958:	633b      	str	r3, [r7, #48]	@ 0x30
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	699b      	ldr	r3, [r3, #24]
 8008960:	633b      	str	r3, [r7, #48]	@ 0x30
 8008962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008964:	e160      	b.n	8008c28 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800896a:	2b00      	cmp	r3, #0
 800896c:	d11d      	bne.n	80089aa <I2C_Master_ADDR+0x98>
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	691b      	ldr	r3, [r3, #16]
 8008972:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8008976:	d118      	bne.n	80089aa <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008978:	2300      	movs	r3, #0
 800897a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	695b      	ldr	r3, [r3, #20]
 8008982:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	699b      	ldr	r3, [r3, #24]
 800898a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800898c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	681a      	ldr	r2, [r3, #0]
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800899c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80089a2:	1c5a      	adds	r2, r3, #1
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	651a      	str	r2, [r3, #80]	@ 0x50
 80089a8:	e13e      	b.n	8008c28 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80089ae:	b29b      	uxth	r3, r3
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d113      	bne.n	80089dc <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80089b4:	2300      	movs	r3, #0
 80089b6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	695b      	ldr	r3, [r3, #20]
 80089be:	62bb      	str	r3, [r7, #40]	@ 0x28
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	699b      	ldr	r3, [r3, #24]
 80089c6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80089c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	681a      	ldr	r2, [r3, #0]
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80089d8:	601a      	str	r2, [r3, #0]
 80089da:	e115      	b.n	8008c08 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80089e0:	b29b      	uxth	r3, r3
 80089e2:	2b01      	cmp	r3, #1
 80089e4:	f040 808a 	bne.w	8008afc <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80089e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089ea:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80089ee:	d137      	bne.n	8008a60 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	681a      	ldr	r2, [r3, #0]
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80089fe:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	685b      	ldr	r3, [r3, #4]
 8008a06:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008a0a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008a0e:	d113      	bne.n	8008a38 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	681a      	ldr	r2, [r3, #0]
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008a1e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008a20:	2300      	movs	r3, #0
 8008a22:	627b      	str	r3, [r7, #36]	@ 0x24
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	695b      	ldr	r3, [r3, #20]
 8008a2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	699b      	ldr	r3, [r3, #24]
 8008a32:	627b      	str	r3, [r7, #36]	@ 0x24
 8008a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a36:	e0e7      	b.n	8008c08 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008a38:	2300      	movs	r3, #0
 8008a3a:	623b      	str	r3, [r7, #32]
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	695b      	ldr	r3, [r3, #20]
 8008a42:	623b      	str	r3, [r7, #32]
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	699b      	ldr	r3, [r3, #24]
 8008a4a:	623b      	str	r3, [r7, #32]
 8008a4c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	681a      	ldr	r2, [r3, #0]
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008a5c:	601a      	str	r2, [r3, #0]
 8008a5e:	e0d3      	b.n	8008c08 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8008a60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a62:	2b08      	cmp	r3, #8
 8008a64:	d02e      	beq.n	8008ac4 <I2C_Master_ADDR+0x1b2>
 8008a66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a68:	2b20      	cmp	r3, #32
 8008a6a:	d02b      	beq.n	8008ac4 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8008a6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a6e:	2b12      	cmp	r3, #18
 8008a70:	d102      	bne.n	8008a78 <I2C_Master_ADDR+0x166>
 8008a72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a74:	2b01      	cmp	r3, #1
 8008a76:	d125      	bne.n	8008ac4 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8008a78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a7a:	2b04      	cmp	r3, #4
 8008a7c:	d00e      	beq.n	8008a9c <I2C_Master_ADDR+0x18a>
 8008a7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a80:	2b02      	cmp	r3, #2
 8008a82:	d00b      	beq.n	8008a9c <I2C_Master_ADDR+0x18a>
 8008a84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a86:	2b10      	cmp	r3, #16
 8008a88:	d008      	beq.n	8008a9c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	681a      	ldr	r2, [r3, #0]
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008a98:	601a      	str	r2, [r3, #0]
 8008a9a:	e007      	b.n	8008aac <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	681a      	ldr	r2, [r3, #0]
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008aaa:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008aac:	2300      	movs	r3, #0
 8008aae:	61fb      	str	r3, [r7, #28]
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	695b      	ldr	r3, [r3, #20]
 8008ab6:	61fb      	str	r3, [r7, #28]
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	699b      	ldr	r3, [r3, #24]
 8008abe:	61fb      	str	r3, [r7, #28]
 8008ac0:	69fb      	ldr	r3, [r7, #28]
 8008ac2:	e0a1      	b.n	8008c08 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	681a      	ldr	r2, [r3, #0]
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008ad2:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	61bb      	str	r3, [r7, #24]
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	695b      	ldr	r3, [r3, #20]
 8008ade:	61bb      	str	r3, [r7, #24]
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	699b      	ldr	r3, [r3, #24]
 8008ae6:	61bb      	str	r3, [r7, #24]
 8008ae8:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	681a      	ldr	r2, [r3, #0]
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008af8:	601a      	str	r2, [r3, #0]
 8008afa:	e085      	b.n	8008c08 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b00:	b29b      	uxth	r3, r3
 8008b02:	2b02      	cmp	r3, #2
 8008b04:	d14d      	bne.n	8008ba2 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8008b06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b08:	2b04      	cmp	r3, #4
 8008b0a:	d016      	beq.n	8008b3a <I2C_Master_ADDR+0x228>
 8008b0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b0e:	2b02      	cmp	r3, #2
 8008b10:	d013      	beq.n	8008b3a <I2C_Master_ADDR+0x228>
 8008b12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b14:	2b10      	cmp	r3, #16
 8008b16:	d010      	beq.n	8008b3a <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	681a      	ldr	r2, [r3, #0]
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008b26:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	681a      	ldr	r2, [r3, #0]
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008b36:	601a      	str	r2, [r3, #0]
 8008b38:	e007      	b.n	8008b4a <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	681a      	ldr	r2, [r3, #0]
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008b48:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	685b      	ldr	r3, [r3, #4]
 8008b50:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008b54:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008b58:	d117      	bne.n	8008b8a <I2C_Master_ADDR+0x278>
 8008b5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b5c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008b60:	d00b      	beq.n	8008b7a <I2C_Master_ADDR+0x268>
 8008b62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b64:	2b01      	cmp	r3, #1
 8008b66:	d008      	beq.n	8008b7a <I2C_Master_ADDR+0x268>
 8008b68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b6a:	2b08      	cmp	r3, #8
 8008b6c:	d005      	beq.n	8008b7a <I2C_Master_ADDR+0x268>
 8008b6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b70:	2b10      	cmp	r3, #16
 8008b72:	d002      	beq.n	8008b7a <I2C_Master_ADDR+0x268>
 8008b74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b76:	2b20      	cmp	r3, #32
 8008b78:	d107      	bne.n	8008b8a <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	685a      	ldr	r2, [r3, #4]
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008b88:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	617b      	str	r3, [r7, #20]
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	695b      	ldr	r3, [r3, #20]
 8008b94:	617b      	str	r3, [r7, #20]
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	699b      	ldr	r3, [r3, #24]
 8008b9c:	617b      	str	r3, [r7, #20]
 8008b9e:	697b      	ldr	r3, [r7, #20]
 8008ba0:	e032      	b.n	8008c08 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	681a      	ldr	r2, [r3, #0]
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008bb0:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	685b      	ldr	r3, [r3, #4]
 8008bb8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008bbc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008bc0:	d117      	bne.n	8008bf2 <I2C_Master_ADDR+0x2e0>
 8008bc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bc4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008bc8:	d00b      	beq.n	8008be2 <I2C_Master_ADDR+0x2d0>
 8008bca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bcc:	2b01      	cmp	r3, #1
 8008bce:	d008      	beq.n	8008be2 <I2C_Master_ADDR+0x2d0>
 8008bd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bd2:	2b08      	cmp	r3, #8
 8008bd4:	d005      	beq.n	8008be2 <I2C_Master_ADDR+0x2d0>
 8008bd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bd8:	2b10      	cmp	r3, #16
 8008bda:	d002      	beq.n	8008be2 <I2C_Master_ADDR+0x2d0>
 8008bdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bde:	2b20      	cmp	r3, #32
 8008be0:	d107      	bne.n	8008bf2 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	685a      	ldr	r2, [r3, #4]
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008bf0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	613b      	str	r3, [r7, #16]
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	695b      	ldr	r3, [r3, #20]
 8008bfc:	613b      	str	r3, [r7, #16]
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	699b      	ldr	r3, [r3, #24]
 8008c04:	613b      	str	r3, [r7, #16]
 8008c06:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8008c0e:	e00b      	b.n	8008c28 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008c10:	2300      	movs	r3, #0
 8008c12:	60fb      	str	r3, [r7, #12]
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	695b      	ldr	r3, [r3, #20]
 8008c1a:	60fb      	str	r3, [r7, #12]
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	699b      	ldr	r3, [r3, #24]
 8008c22:	60fb      	str	r3, [r7, #12]
 8008c24:	68fb      	ldr	r3, [r7, #12]
}
 8008c26:	e7ff      	b.n	8008c28 <I2C_Master_ADDR+0x316>
 8008c28:	bf00      	nop
 8008c2a:	3744      	adds	r7, #68	@ 0x44
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c32:	4770      	bx	lr

08008c34 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b084      	sub	sp, #16
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008c42:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c48:	b29b      	uxth	r3, r3
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d02b      	beq.n	8008ca6 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c52:	781a      	ldrb	r2, [r3, #0]
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c5e:	1c5a      	adds	r2, r3, #1
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c68:	b29b      	uxth	r3, r3
 8008c6a:	3b01      	subs	r3, #1
 8008c6c:	b29a      	uxth	r2, r3
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c76:	b29b      	uxth	r3, r3
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d114      	bne.n	8008ca6 <I2C_SlaveTransmit_TXE+0x72>
 8008c7c:	7bfb      	ldrb	r3, [r7, #15]
 8008c7e:	2b29      	cmp	r3, #41	@ 0x29
 8008c80:	d111      	bne.n	8008ca6 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	685a      	ldr	r2, [r3, #4]
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008c90:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2221      	movs	r2, #33	@ 0x21
 8008c96:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2228      	movs	r2, #40	@ 0x28
 8008c9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008ca0:	6878      	ldr	r0, [r7, #4]
 8008ca2:	f7ff f9df 	bl	8008064 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8008ca6:	bf00      	nop
 8008ca8:	3710      	adds	r7, #16
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bd80      	pop	{r7, pc}

08008cae <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8008cae:	b480      	push	{r7}
 8008cb0:	b083      	sub	sp, #12
 8008cb2:	af00      	add	r7, sp, #0
 8008cb4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008cba:	b29b      	uxth	r3, r3
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d011      	beq.n	8008ce4 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cc4:	781a      	ldrb	r2, [r3, #0]
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cd0:	1c5a      	adds	r2, r3, #1
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008cda:	b29b      	uxth	r3, r3
 8008cdc:	3b01      	subs	r3, #1
 8008cde:	b29a      	uxth	r2, r3
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8008ce4:	bf00      	nop
 8008ce6:	370c      	adds	r7, #12
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cee:	4770      	bx	lr

08008cf0 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b084      	sub	sp, #16
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008cfe:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008d04:	b29b      	uxth	r3, r3
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d02c      	beq.n	8008d64 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	691a      	ldr	r2, [r3, #16]
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d14:	b2d2      	uxtb	r2, r2
 8008d16:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d1c:	1c5a      	adds	r2, r3, #1
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008d26:	b29b      	uxth	r3, r3
 8008d28:	3b01      	subs	r3, #1
 8008d2a:	b29a      	uxth	r2, r3
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008d34:	b29b      	uxth	r3, r3
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d114      	bne.n	8008d64 <I2C_SlaveReceive_RXNE+0x74>
 8008d3a:	7bfb      	ldrb	r3, [r7, #15]
 8008d3c:	2b2a      	cmp	r3, #42	@ 0x2a
 8008d3e:	d111      	bne.n	8008d64 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	685a      	ldr	r2, [r3, #4]
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008d4e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2222      	movs	r2, #34	@ 0x22
 8008d54:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	2228      	movs	r2, #40	@ 0x28
 8008d5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f7ff f98a 	bl	8008078 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8008d64:	bf00      	nop
 8008d66:	3710      	adds	r7, #16
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd80      	pop	{r7, pc}

08008d6c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8008d6c:	b480      	push	{r7}
 8008d6e:	b083      	sub	sp, #12
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008d78:	b29b      	uxth	r3, r3
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d012      	beq.n	8008da4 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	691a      	ldr	r2, [r3, #16]
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d88:	b2d2      	uxtb	r2, r2
 8008d8a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d90:	1c5a      	adds	r2, r3, #1
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008d9a:	b29b      	uxth	r3, r3
 8008d9c:	3b01      	subs	r3, #1
 8008d9e:	b29a      	uxth	r2, r3
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8008da4:	bf00      	nop
 8008da6:	370c      	adds	r7, #12
 8008da8:	46bd      	mov	sp, r7
 8008daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dae:	4770      	bx	lr

08008db0 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b084      	sub	sp, #16
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
 8008db8:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8008dba:	2300      	movs	r3, #0
 8008dbc:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008dc4:	b2db      	uxtb	r3, r3
 8008dc6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008dca:	2b28      	cmp	r3, #40	@ 0x28
 8008dcc:	d127      	bne.n	8008e1e <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	685a      	ldr	r2, [r3, #4]
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008ddc:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8008dde:	683b      	ldr	r3, [r7, #0]
 8008de0:	089b      	lsrs	r3, r3, #2
 8008de2:	f003 0301 	and.w	r3, r3, #1
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d101      	bne.n	8008dee <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8008dea:	2301      	movs	r3, #1
 8008dec:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	09db      	lsrs	r3, r3, #7
 8008df2:	f003 0301 	and.w	r3, r3, #1
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d103      	bne.n	8008e02 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	68db      	ldr	r3, [r3, #12]
 8008dfe:	81bb      	strh	r3, [r7, #12]
 8008e00:	e002      	b.n	8008e08 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	699b      	ldr	r3, [r3, #24]
 8008e06:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8008e10:	89ba      	ldrh	r2, [r7, #12]
 8008e12:	7bfb      	ldrb	r3, [r7, #15]
 8008e14:	4619      	mov	r1, r3
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	f7ff f938 	bl	800808c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8008e1c:	e00e      	b.n	8008e3c <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008e1e:	2300      	movs	r3, #0
 8008e20:	60bb      	str	r3, [r7, #8]
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	695b      	ldr	r3, [r3, #20]
 8008e28:	60bb      	str	r3, [r7, #8]
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	699b      	ldr	r3, [r3, #24]
 8008e30:	60bb      	str	r3, [r7, #8]
 8008e32:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2200      	movs	r2, #0
 8008e38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8008e3c:	bf00      	nop
 8008e3e:	3710      	adds	r7, #16
 8008e40:	46bd      	mov	sp, r7
 8008e42:	bd80      	pop	{r7, pc}

08008e44 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b084      	sub	sp, #16
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008e52:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	685a      	ldr	r2, [r3, #4]
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8008e62:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8008e64:	2300      	movs	r3, #0
 8008e66:	60bb      	str	r3, [r7, #8]
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	695b      	ldr	r3, [r3, #20]
 8008e6e:	60bb      	str	r3, [r7, #8]
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	681a      	ldr	r2, [r3, #0]
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f042 0201 	orr.w	r2, r2, #1
 8008e7e:	601a      	str	r2, [r3, #0]
 8008e80:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	681a      	ldr	r2, [r3, #0]
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008e90:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	685b      	ldr	r3, [r3, #4]
 8008e98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008e9c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008ea0:	d172      	bne.n	8008f88 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008ea2:	7bfb      	ldrb	r3, [r7, #15]
 8008ea4:	2b22      	cmp	r3, #34	@ 0x22
 8008ea6:	d002      	beq.n	8008eae <I2C_Slave_STOPF+0x6a>
 8008ea8:	7bfb      	ldrb	r3, [r7, #15]
 8008eaa:	2b2a      	cmp	r3, #42	@ 0x2a
 8008eac:	d135      	bne.n	8008f1a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	685b      	ldr	r3, [r3, #4]
 8008eb6:	b29a      	uxth	r2, r3
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008ec0:	b29b      	uxth	r3, r3
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d005      	beq.n	8008ed2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008eca:	f043 0204 	orr.w	r2, r3, #4
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	685a      	ldr	r2, [r3, #4]
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008ee0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	f7fd fa0e 	bl	8006308 <HAL_DMA_GetState>
 8008eec:	4603      	mov	r3, r0
 8008eee:	2b01      	cmp	r3, #1
 8008ef0:	d049      	beq.n	8008f86 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ef6:	4a69      	ldr	r2, [pc, #420]	@ (800909c <I2C_Slave_STOPF+0x258>)
 8008ef8:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008efe:	4618      	mov	r0, r3
 8008f00:	f7fd f856 	bl	8005fb0 <HAL_DMA_Abort_IT>
 8008f04:	4603      	mov	r3, r0
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d03d      	beq.n	8008f86 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f10:	687a      	ldr	r2, [r7, #4]
 8008f12:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8008f14:	4610      	mov	r0, r2
 8008f16:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008f18:	e035      	b.n	8008f86 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	685b      	ldr	r3, [r3, #4]
 8008f22:	b29a      	uxth	r2, r3
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008f2c:	b29b      	uxth	r3, r3
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d005      	beq.n	8008f3e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f36:	f043 0204 	orr.w	r2, r3, #4
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	685a      	ldr	r2, [r3, #4]
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008f4c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f52:	4618      	mov	r0, r3
 8008f54:	f7fd f9d8 	bl	8006308 <HAL_DMA_GetState>
 8008f58:	4603      	mov	r3, r0
 8008f5a:	2b01      	cmp	r3, #1
 8008f5c:	d014      	beq.n	8008f88 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f62:	4a4e      	ldr	r2, [pc, #312]	@ (800909c <I2C_Slave_STOPF+0x258>)
 8008f64:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	f7fd f820 	bl	8005fb0 <HAL_DMA_Abort_IT>
 8008f70:	4603      	mov	r3, r0
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d008      	beq.n	8008f88 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f7c:	687a      	ldr	r2, [r7, #4]
 8008f7e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008f80:	4610      	mov	r0, r2
 8008f82:	4798      	blx	r3
 8008f84:	e000      	b.n	8008f88 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008f86:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008f8c:	b29b      	uxth	r3, r3
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d03e      	beq.n	8009010 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	695b      	ldr	r3, [r3, #20]
 8008f98:	f003 0304 	and.w	r3, r3, #4
 8008f9c:	2b04      	cmp	r3, #4
 8008f9e:	d112      	bne.n	8008fc6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	691a      	ldr	r2, [r3, #16]
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008faa:	b2d2      	uxtb	r2, r2
 8008fac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fb2:	1c5a      	adds	r2, r3, #1
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008fbc:	b29b      	uxth	r3, r3
 8008fbe:	3b01      	subs	r3, #1
 8008fc0:	b29a      	uxth	r2, r3
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	695b      	ldr	r3, [r3, #20]
 8008fcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008fd0:	2b40      	cmp	r3, #64	@ 0x40
 8008fd2:	d112      	bne.n	8008ffa <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	691a      	ldr	r2, [r3, #16]
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fde:	b2d2      	uxtb	r2, r2
 8008fe0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fe6:	1c5a      	adds	r2, r3, #1
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008ff0:	b29b      	uxth	r3, r3
 8008ff2:	3b01      	subs	r3, #1
 8008ff4:	b29a      	uxth	r2, r3
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008ffe:	b29b      	uxth	r3, r3
 8009000:	2b00      	cmp	r3, #0
 8009002:	d005      	beq.n	8009010 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009008:	f043 0204 	orr.w	r2, r3, #4
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009014:	2b00      	cmp	r3, #0
 8009016:	d003      	beq.n	8009020 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8009018:	6878      	ldr	r0, [r7, #4]
 800901a:	f000 f8b7 	bl	800918c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800901e:	e039      	b.n	8009094 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8009020:	7bfb      	ldrb	r3, [r7, #15]
 8009022:	2b2a      	cmp	r3, #42	@ 0x2a
 8009024:	d109      	bne.n	800903a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2200      	movs	r2, #0
 800902a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2228      	movs	r2, #40	@ 0x28
 8009030:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009034:	6878      	ldr	r0, [r7, #4]
 8009036:	f7ff f81f 	bl	8008078 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009040:	b2db      	uxtb	r3, r3
 8009042:	2b28      	cmp	r3, #40	@ 0x28
 8009044:	d111      	bne.n	800906a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	4a15      	ldr	r2, [pc, #84]	@ (80090a0 <I2C_Slave_STOPF+0x25c>)
 800904a:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2200      	movs	r2, #0
 8009050:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	2220      	movs	r2, #32
 8009056:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2200      	movs	r2, #0
 800905e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	f7ff f820 	bl	80080a8 <HAL_I2C_ListenCpltCallback>
}
 8009068:	e014      	b.n	8009094 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800906e:	2b22      	cmp	r3, #34	@ 0x22
 8009070:	d002      	beq.n	8009078 <I2C_Slave_STOPF+0x234>
 8009072:	7bfb      	ldrb	r3, [r7, #15]
 8009074:	2b22      	cmp	r3, #34	@ 0x22
 8009076:	d10d      	bne.n	8009094 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2200      	movs	r2, #0
 800907c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2220      	movs	r2, #32
 8009082:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	2200      	movs	r2, #0
 800908a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800908e:	6878      	ldr	r0, [r7, #4]
 8009090:	f7fe fff2 	bl	8008078 <HAL_I2C_SlaveRxCpltCallback>
}
 8009094:	bf00      	nop
 8009096:	3710      	adds	r7, #16
 8009098:	46bd      	mov	sp, r7
 800909a:	bd80      	pop	{r7, pc}
 800909c:	08009a29 	.word	0x08009a29
 80090a0:	ffff0000 	.word	0xffff0000

080090a4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b084      	sub	sp, #16
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80090b2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090b8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80090ba:	68bb      	ldr	r3, [r7, #8]
 80090bc:	2b08      	cmp	r3, #8
 80090be:	d002      	beq.n	80090c6 <I2C_Slave_AF+0x22>
 80090c0:	68bb      	ldr	r3, [r7, #8]
 80090c2:	2b20      	cmp	r3, #32
 80090c4:	d129      	bne.n	800911a <I2C_Slave_AF+0x76>
 80090c6:	7bfb      	ldrb	r3, [r7, #15]
 80090c8:	2b28      	cmp	r3, #40	@ 0x28
 80090ca:	d126      	bne.n	800911a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	4a2e      	ldr	r2, [pc, #184]	@ (8009188 <I2C_Slave_AF+0xe4>)
 80090d0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	685a      	ldr	r2, [r3, #4]
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80090e0:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80090ea:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	681a      	ldr	r2, [r3, #0]
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80090fa:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2200      	movs	r2, #0
 8009100:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	2220      	movs	r2, #32
 8009106:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	2200      	movs	r2, #0
 800910e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	f7fe ffc8 	bl	80080a8 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8009118:	e031      	b.n	800917e <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800911a:	7bfb      	ldrb	r3, [r7, #15]
 800911c:	2b21      	cmp	r3, #33	@ 0x21
 800911e:	d129      	bne.n	8009174 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	4a19      	ldr	r2, [pc, #100]	@ (8009188 <I2C_Slave_AF+0xe4>)
 8009124:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	2221      	movs	r2, #33	@ 0x21
 800912a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2220      	movs	r2, #32
 8009130:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2200      	movs	r2, #0
 8009138:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	685a      	ldr	r2, [r3, #4]
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800914a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8009154:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	681a      	ldr	r2, [r3, #0]
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009164:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8009166:	6878      	ldr	r0, [r7, #4]
 8009168:	f7fd fcf4 	bl	8006b54 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800916c:	6878      	ldr	r0, [r7, #4]
 800916e:	f7fe ff79 	bl	8008064 <HAL_I2C_SlaveTxCpltCallback>
}
 8009172:	e004      	b.n	800917e <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800917c:	615a      	str	r2, [r3, #20]
}
 800917e:	bf00      	nop
 8009180:	3710      	adds	r7, #16
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}
 8009186:	bf00      	nop
 8009188:	ffff0000 	.word	0xffff0000

0800918c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b084      	sub	sp, #16
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800919a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80091a2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80091a4:	7bbb      	ldrb	r3, [r7, #14]
 80091a6:	2b10      	cmp	r3, #16
 80091a8:	d002      	beq.n	80091b0 <I2C_ITError+0x24>
 80091aa:	7bbb      	ldrb	r3, [r7, #14]
 80091ac:	2b40      	cmp	r3, #64	@ 0x40
 80091ae:	d10a      	bne.n	80091c6 <I2C_ITError+0x3a>
 80091b0:	7bfb      	ldrb	r3, [r7, #15]
 80091b2:	2b22      	cmp	r3, #34	@ 0x22
 80091b4:	d107      	bne.n	80091c6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	681a      	ldr	r2, [r3, #0]
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80091c4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80091c6:	7bfb      	ldrb	r3, [r7, #15]
 80091c8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80091cc:	2b28      	cmp	r3, #40	@ 0x28
 80091ce:	d107      	bne.n	80091e0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2200      	movs	r2, #0
 80091d4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2228      	movs	r2, #40	@ 0x28
 80091da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80091de:	e015      	b.n	800920c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	685b      	ldr	r3, [r3, #4]
 80091e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80091ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80091ee:	d00a      	beq.n	8009206 <I2C_ITError+0x7a>
 80091f0:	7bfb      	ldrb	r3, [r7, #15]
 80091f2:	2b60      	cmp	r3, #96	@ 0x60
 80091f4:	d007      	beq.n	8009206 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	2220      	movs	r2, #32
 80091fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	2200      	movs	r2, #0
 8009202:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	2200      	movs	r2, #0
 800920a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	685b      	ldr	r3, [r3, #4]
 8009212:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009216:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800921a:	d162      	bne.n	80092e2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	685a      	ldr	r2, [r3, #4]
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800922a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009230:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8009234:	b2db      	uxtb	r3, r3
 8009236:	2b01      	cmp	r3, #1
 8009238:	d020      	beq.n	800927c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800923e:	4a6a      	ldr	r2, [pc, #424]	@ (80093e8 <I2C_ITError+0x25c>)
 8009240:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009246:	4618      	mov	r0, r3
 8009248:	f7fc feb2 	bl	8005fb0 <HAL_DMA_Abort_IT>
 800924c:	4603      	mov	r3, r0
 800924e:	2b00      	cmp	r3, #0
 8009250:	f000 8089 	beq.w	8009366 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	681a      	ldr	r2, [r3, #0]
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	f022 0201 	bic.w	r2, r2, #1
 8009262:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2220      	movs	r2, #32
 8009268:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009270:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009272:	687a      	ldr	r2, [r7, #4]
 8009274:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8009276:	4610      	mov	r0, r2
 8009278:	4798      	blx	r3
 800927a:	e074      	b.n	8009366 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009280:	4a59      	ldr	r2, [pc, #356]	@ (80093e8 <I2C_ITError+0x25c>)
 8009282:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009288:	4618      	mov	r0, r3
 800928a:	f7fc fe91 	bl	8005fb0 <HAL_DMA_Abort_IT>
 800928e:	4603      	mov	r3, r0
 8009290:	2b00      	cmp	r3, #0
 8009292:	d068      	beq.n	8009366 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	695b      	ldr	r3, [r3, #20]
 800929a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800929e:	2b40      	cmp	r3, #64	@ 0x40
 80092a0:	d10b      	bne.n	80092ba <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	691a      	ldr	r2, [r3, #16]
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092ac:	b2d2      	uxtb	r2, r2
 80092ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092b4:	1c5a      	adds	r2, r3, #1
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	681a      	ldr	r2, [r3, #0]
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	f022 0201 	bic.w	r2, r2, #1
 80092c8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	2220      	movs	r2, #32
 80092ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80092d8:	687a      	ldr	r2, [r7, #4]
 80092da:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80092dc:	4610      	mov	r0, r2
 80092de:	4798      	blx	r3
 80092e0:	e041      	b.n	8009366 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80092e8:	b2db      	uxtb	r3, r3
 80092ea:	2b60      	cmp	r3, #96	@ 0x60
 80092ec:	d125      	bne.n	800933a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2220      	movs	r2, #32
 80092f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	2200      	movs	r2, #0
 80092fa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	695b      	ldr	r3, [r3, #20]
 8009302:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009306:	2b40      	cmp	r3, #64	@ 0x40
 8009308:	d10b      	bne.n	8009322 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	691a      	ldr	r2, [r3, #16]
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009314:	b2d2      	uxtb	r2, r2
 8009316:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800931c:	1c5a      	adds	r2, r3, #1
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	681a      	ldr	r2, [r3, #0]
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f022 0201 	bic.w	r2, r2, #1
 8009330:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8009332:	6878      	ldr	r0, [r7, #4]
 8009334:	f7fe fecc 	bl	80080d0 <HAL_I2C_AbortCpltCallback>
 8009338:	e015      	b.n	8009366 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	695b      	ldr	r3, [r3, #20]
 8009340:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009344:	2b40      	cmp	r3, #64	@ 0x40
 8009346:	d10b      	bne.n	8009360 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	691a      	ldr	r2, [r3, #16]
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009352:	b2d2      	uxtb	r2, r2
 8009354:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800935a:	1c5a      	adds	r2, r3, #1
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8009360:	6878      	ldr	r0, [r7, #4]
 8009362:	f7fe feab 	bl	80080bc <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800936a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800936c:	68bb      	ldr	r3, [r7, #8]
 800936e:	f003 0301 	and.w	r3, r3, #1
 8009372:	2b00      	cmp	r3, #0
 8009374:	d10e      	bne.n	8009394 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8009376:	68bb      	ldr	r3, [r7, #8]
 8009378:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800937c:	2b00      	cmp	r3, #0
 800937e:	d109      	bne.n	8009394 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8009380:	68bb      	ldr	r3, [r7, #8]
 8009382:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8009386:	2b00      	cmp	r3, #0
 8009388:	d104      	bne.n	8009394 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800938a:	68bb      	ldr	r3, [r7, #8]
 800938c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8009390:	2b00      	cmp	r3, #0
 8009392:	d007      	beq.n	80093a4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	685a      	ldr	r2, [r3, #4]
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80093a2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80093aa:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093b0:	f003 0304 	and.w	r3, r3, #4
 80093b4:	2b04      	cmp	r3, #4
 80093b6:	d113      	bne.n	80093e0 <I2C_ITError+0x254>
 80093b8:	7bfb      	ldrb	r3, [r7, #15]
 80093ba:	2b28      	cmp	r3, #40	@ 0x28
 80093bc:	d110      	bne.n	80093e0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	4a0a      	ldr	r2, [pc, #40]	@ (80093ec <I2C_ITError+0x260>)
 80093c2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2200      	movs	r2, #0
 80093c8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	2220      	movs	r2, #32
 80093ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	2200      	movs	r2, #0
 80093d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80093da:	6878      	ldr	r0, [r7, #4]
 80093dc:	f7fe fe64 	bl	80080a8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80093e0:	bf00      	nop
 80093e2:	3710      	adds	r7, #16
 80093e4:	46bd      	mov	sp, r7
 80093e6:	bd80      	pop	{r7, pc}
 80093e8:	08009a29 	.word	0x08009a29
 80093ec:	ffff0000 	.word	0xffff0000

080093f0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b088      	sub	sp, #32
 80093f4:	af02      	add	r7, sp, #8
 80093f6:	60f8      	str	r0, [r7, #12]
 80093f8:	607a      	str	r2, [r7, #4]
 80093fa:	603b      	str	r3, [r7, #0]
 80093fc:	460b      	mov	r3, r1
 80093fe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009404:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8009406:	697b      	ldr	r3, [r7, #20]
 8009408:	2b08      	cmp	r3, #8
 800940a:	d006      	beq.n	800941a <I2C_MasterRequestWrite+0x2a>
 800940c:	697b      	ldr	r3, [r7, #20]
 800940e:	2b01      	cmp	r3, #1
 8009410:	d003      	beq.n	800941a <I2C_MasterRequestWrite+0x2a>
 8009412:	697b      	ldr	r3, [r7, #20]
 8009414:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009418:	d108      	bne.n	800942c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	681a      	ldr	r2, [r3, #0]
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009428:	601a      	str	r2, [r3, #0]
 800942a:	e00b      	b.n	8009444 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009430:	2b12      	cmp	r3, #18
 8009432:	d107      	bne.n	8009444 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	681a      	ldr	r2, [r3, #0]
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009442:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009444:	683b      	ldr	r3, [r7, #0]
 8009446:	9300      	str	r3, [sp, #0]
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2200      	movs	r2, #0
 800944c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009450:	68f8      	ldr	r0, [r7, #12]
 8009452:	f000 fb91 	bl	8009b78 <I2C_WaitOnFlagUntilTimeout>
 8009456:	4603      	mov	r3, r0
 8009458:	2b00      	cmp	r3, #0
 800945a:	d00d      	beq.n	8009478 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009466:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800946a:	d103      	bne.n	8009474 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009472:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8009474:	2303      	movs	r3, #3
 8009476:	e035      	b.n	80094e4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	691b      	ldr	r3, [r3, #16]
 800947c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009480:	d108      	bne.n	8009494 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009482:	897b      	ldrh	r3, [r7, #10]
 8009484:	b2db      	uxtb	r3, r3
 8009486:	461a      	mov	r2, r3
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8009490:	611a      	str	r2, [r3, #16]
 8009492:	e01b      	b.n	80094cc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009494:	897b      	ldrh	r3, [r7, #10]
 8009496:	11db      	asrs	r3, r3, #7
 8009498:	b2db      	uxtb	r3, r3
 800949a:	f003 0306 	and.w	r3, r3, #6
 800949e:	b2db      	uxtb	r3, r3
 80094a0:	f063 030f 	orn	r3, r3, #15
 80094a4:	b2da      	uxtb	r2, r3
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	687a      	ldr	r2, [r7, #4]
 80094b0:	490e      	ldr	r1, [pc, #56]	@ (80094ec <I2C_MasterRequestWrite+0xfc>)
 80094b2:	68f8      	ldr	r0, [r7, #12]
 80094b4:	f000 fbda 	bl	8009c6c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80094b8:	4603      	mov	r3, r0
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d001      	beq.n	80094c2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80094be:	2301      	movs	r3, #1
 80094c0:	e010      	b.n	80094e4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80094c2:	897b      	ldrh	r3, [r7, #10]
 80094c4:	b2da      	uxtb	r2, r3
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	687a      	ldr	r2, [r7, #4]
 80094d0:	4907      	ldr	r1, [pc, #28]	@ (80094f0 <I2C_MasterRequestWrite+0x100>)
 80094d2:	68f8      	ldr	r0, [r7, #12]
 80094d4:	f000 fbca 	bl	8009c6c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80094d8:	4603      	mov	r3, r0
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d001      	beq.n	80094e2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80094de:	2301      	movs	r3, #1
 80094e0:	e000      	b.n	80094e4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80094e2:	2300      	movs	r3, #0
}
 80094e4:	4618      	mov	r0, r3
 80094e6:	3718      	adds	r7, #24
 80094e8:	46bd      	mov	sp, r7
 80094ea:	bd80      	pop	{r7, pc}
 80094ec:	00010008 	.word	0x00010008
 80094f0:	00010002 	.word	0x00010002

080094f4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b088      	sub	sp, #32
 80094f8:	af02      	add	r7, sp, #8
 80094fa:	60f8      	str	r0, [r7, #12]
 80094fc:	4608      	mov	r0, r1
 80094fe:	4611      	mov	r1, r2
 8009500:	461a      	mov	r2, r3
 8009502:	4603      	mov	r3, r0
 8009504:	817b      	strh	r3, [r7, #10]
 8009506:	460b      	mov	r3, r1
 8009508:	813b      	strh	r3, [r7, #8]
 800950a:	4613      	mov	r3, r2
 800950c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	681a      	ldr	r2, [r3, #0]
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800951c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800951e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009520:	9300      	str	r3, [sp, #0]
 8009522:	6a3b      	ldr	r3, [r7, #32]
 8009524:	2200      	movs	r2, #0
 8009526:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800952a:	68f8      	ldr	r0, [r7, #12]
 800952c:	f000 fb24 	bl	8009b78 <I2C_WaitOnFlagUntilTimeout>
 8009530:	4603      	mov	r3, r0
 8009532:	2b00      	cmp	r3, #0
 8009534:	d00d      	beq.n	8009552 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009540:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009544:	d103      	bne.n	800954e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800954c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800954e:	2303      	movs	r3, #3
 8009550:	e05f      	b.n	8009612 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009552:	897b      	ldrh	r3, [r7, #10]
 8009554:	b2db      	uxtb	r3, r3
 8009556:	461a      	mov	r2, r3
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8009560:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009564:	6a3a      	ldr	r2, [r7, #32]
 8009566:	492d      	ldr	r1, [pc, #180]	@ (800961c <I2C_RequestMemoryWrite+0x128>)
 8009568:	68f8      	ldr	r0, [r7, #12]
 800956a:	f000 fb7f 	bl	8009c6c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800956e:	4603      	mov	r3, r0
 8009570:	2b00      	cmp	r3, #0
 8009572:	d001      	beq.n	8009578 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8009574:	2301      	movs	r3, #1
 8009576:	e04c      	b.n	8009612 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009578:	2300      	movs	r3, #0
 800957a:	617b      	str	r3, [r7, #20]
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	695b      	ldr	r3, [r3, #20]
 8009582:	617b      	str	r3, [r7, #20]
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	699b      	ldr	r3, [r3, #24]
 800958a:	617b      	str	r3, [r7, #20]
 800958c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800958e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009590:	6a39      	ldr	r1, [r7, #32]
 8009592:	68f8      	ldr	r0, [r7, #12]
 8009594:	f000 fc0a 	bl	8009dac <I2C_WaitOnTXEFlagUntilTimeout>
 8009598:	4603      	mov	r3, r0
 800959a:	2b00      	cmp	r3, #0
 800959c:	d00d      	beq.n	80095ba <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095a2:	2b04      	cmp	r3, #4
 80095a4:	d107      	bne.n	80095b6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	681a      	ldr	r2, [r3, #0]
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80095b4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80095b6:	2301      	movs	r3, #1
 80095b8:	e02b      	b.n	8009612 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80095ba:	88fb      	ldrh	r3, [r7, #6]
 80095bc:	2b01      	cmp	r3, #1
 80095be:	d105      	bne.n	80095cc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80095c0:	893b      	ldrh	r3, [r7, #8]
 80095c2:	b2da      	uxtb	r2, r3
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	611a      	str	r2, [r3, #16]
 80095ca:	e021      	b.n	8009610 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80095cc:	893b      	ldrh	r3, [r7, #8]
 80095ce:	0a1b      	lsrs	r3, r3, #8
 80095d0:	b29b      	uxth	r3, r3
 80095d2:	b2da      	uxtb	r2, r3
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80095da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80095dc:	6a39      	ldr	r1, [r7, #32]
 80095de:	68f8      	ldr	r0, [r7, #12]
 80095e0:	f000 fbe4 	bl	8009dac <I2C_WaitOnTXEFlagUntilTimeout>
 80095e4:	4603      	mov	r3, r0
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d00d      	beq.n	8009606 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095ee:	2b04      	cmp	r3, #4
 80095f0:	d107      	bne.n	8009602 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	681a      	ldr	r2, [r3, #0]
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009600:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009602:	2301      	movs	r3, #1
 8009604:	e005      	b.n	8009612 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009606:	893b      	ldrh	r3, [r7, #8]
 8009608:	b2da      	uxtb	r2, r3
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8009610:	2300      	movs	r3, #0
}
 8009612:	4618      	mov	r0, r3
 8009614:	3718      	adds	r7, #24
 8009616:	46bd      	mov	sp, r7
 8009618:	bd80      	pop	{r7, pc}
 800961a:	bf00      	nop
 800961c:	00010002 	.word	0x00010002

08009620 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b088      	sub	sp, #32
 8009624:	af02      	add	r7, sp, #8
 8009626:	60f8      	str	r0, [r7, #12]
 8009628:	4608      	mov	r0, r1
 800962a:	4611      	mov	r1, r2
 800962c:	461a      	mov	r2, r3
 800962e:	4603      	mov	r3, r0
 8009630:	817b      	strh	r3, [r7, #10]
 8009632:	460b      	mov	r3, r1
 8009634:	813b      	strh	r3, [r7, #8]
 8009636:	4613      	mov	r3, r2
 8009638:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	681a      	ldr	r2, [r3, #0]
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009648:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	681a      	ldr	r2, [r3, #0]
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009658:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800965a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800965c:	9300      	str	r3, [sp, #0]
 800965e:	6a3b      	ldr	r3, [r7, #32]
 8009660:	2200      	movs	r2, #0
 8009662:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009666:	68f8      	ldr	r0, [r7, #12]
 8009668:	f000 fa86 	bl	8009b78 <I2C_WaitOnFlagUntilTimeout>
 800966c:	4603      	mov	r3, r0
 800966e:	2b00      	cmp	r3, #0
 8009670:	d00d      	beq.n	800968e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800967c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009680:	d103      	bne.n	800968a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009688:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800968a:	2303      	movs	r3, #3
 800968c:	e0aa      	b.n	80097e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800968e:	897b      	ldrh	r3, [r7, #10]
 8009690:	b2db      	uxtb	r3, r3
 8009692:	461a      	mov	r2, r3
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800969c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800969e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096a0:	6a3a      	ldr	r2, [r7, #32]
 80096a2:	4952      	ldr	r1, [pc, #328]	@ (80097ec <I2C_RequestMemoryRead+0x1cc>)
 80096a4:	68f8      	ldr	r0, [r7, #12]
 80096a6:	f000 fae1 	bl	8009c6c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80096aa:	4603      	mov	r3, r0
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d001      	beq.n	80096b4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80096b0:	2301      	movs	r3, #1
 80096b2:	e097      	b.n	80097e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80096b4:	2300      	movs	r3, #0
 80096b6:	617b      	str	r3, [r7, #20]
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	695b      	ldr	r3, [r3, #20]
 80096be:	617b      	str	r3, [r7, #20]
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	699b      	ldr	r3, [r3, #24]
 80096c6:	617b      	str	r3, [r7, #20]
 80096c8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80096ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80096cc:	6a39      	ldr	r1, [r7, #32]
 80096ce:	68f8      	ldr	r0, [r7, #12]
 80096d0:	f000 fb6c 	bl	8009dac <I2C_WaitOnTXEFlagUntilTimeout>
 80096d4:	4603      	mov	r3, r0
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d00d      	beq.n	80096f6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096de:	2b04      	cmp	r3, #4
 80096e0:	d107      	bne.n	80096f2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	681a      	ldr	r2, [r3, #0]
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80096f0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80096f2:	2301      	movs	r3, #1
 80096f4:	e076      	b.n	80097e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80096f6:	88fb      	ldrh	r3, [r7, #6]
 80096f8:	2b01      	cmp	r3, #1
 80096fa:	d105      	bne.n	8009708 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80096fc:	893b      	ldrh	r3, [r7, #8]
 80096fe:	b2da      	uxtb	r2, r3
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	611a      	str	r2, [r3, #16]
 8009706:	e021      	b.n	800974c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009708:	893b      	ldrh	r3, [r7, #8]
 800970a:	0a1b      	lsrs	r3, r3, #8
 800970c:	b29b      	uxth	r3, r3
 800970e:	b2da      	uxtb	r2, r3
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009716:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009718:	6a39      	ldr	r1, [r7, #32]
 800971a:	68f8      	ldr	r0, [r7, #12]
 800971c:	f000 fb46 	bl	8009dac <I2C_WaitOnTXEFlagUntilTimeout>
 8009720:	4603      	mov	r3, r0
 8009722:	2b00      	cmp	r3, #0
 8009724:	d00d      	beq.n	8009742 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800972a:	2b04      	cmp	r3, #4
 800972c:	d107      	bne.n	800973e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	681a      	ldr	r2, [r3, #0]
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800973c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800973e:	2301      	movs	r3, #1
 8009740:	e050      	b.n	80097e4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009742:	893b      	ldrh	r3, [r7, #8]
 8009744:	b2da      	uxtb	r2, r3
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800974c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800974e:	6a39      	ldr	r1, [r7, #32]
 8009750:	68f8      	ldr	r0, [r7, #12]
 8009752:	f000 fb2b 	bl	8009dac <I2C_WaitOnTXEFlagUntilTimeout>
 8009756:	4603      	mov	r3, r0
 8009758:	2b00      	cmp	r3, #0
 800975a:	d00d      	beq.n	8009778 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009760:	2b04      	cmp	r3, #4
 8009762:	d107      	bne.n	8009774 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	681a      	ldr	r2, [r3, #0]
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009772:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009774:	2301      	movs	r3, #1
 8009776:	e035      	b.n	80097e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	681a      	ldr	r2, [r3, #0]
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009786:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800978a:	9300      	str	r3, [sp, #0]
 800978c:	6a3b      	ldr	r3, [r7, #32]
 800978e:	2200      	movs	r2, #0
 8009790:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009794:	68f8      	ldr	r0, [r7, #12]
 8009796:	f000 f9ef 	bl	8009b78 <I2C_WaitOnFlagUntilTimeout>
 800979a:	4603      	mov	r3, r0
 800979c:	2b00      	cmp	r3, #0
 800979e:	d00d      	beq.n	80097bc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80097aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80097ae:	d103      	bne.n	80097b8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80097b6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80097b8:	2303      	movs	r3, #3
 80097ba:	e013      	b.n	80097e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80097bc:	897b      	ldrh	r3, [r7, #10]
 80097be:	b2db      	uxtb	r3, r3
 80097c0:	f043 0301 	orr.w	r3, r3, #1
 80097c4:	b2da      	uxtb	r2, r3
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80097cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097ce:	6a3a      	ldr	r2, [r7, #32]
 80097d0:	4906      	ldr	r1, [pc, #24]	@ (80097ec <I2C_RequestMemoryRead+0x1cc>)
 80097d2:	68f8      	ldr	r0, [r7, #12]
 80097d4:	f000 fa4a 	bl	8009c6c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80097d8:	4603      	mov	r3, r0
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d001      	beq.n	80097e2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80097de:	2301      	movs	r3, #1
 80097e0:	e000      	b.n	80097e4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80097e2:	2300      	movs	r3, #0
}
 80097e4:	4618      	mov	r0, r3
 80097e6:	3718      	adds	r7, #24
 80097e8:	46bd      	mov	sp, r7
 80097ea:	bd80      	pop	{r7, pc}
 80097ec:	00010002 	.word	0x00010002

080097f0 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b086      	sub	sp, #24
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097fc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80097fe:	697b      	ldr	r3, [r7, #20]
 8009800:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009804:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8009806:	697b      	ldr	r3, [r7, #20]
 8009808:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800980c:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800980e:	697b      	ldr	r3, [r7, #20]
 8009810:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009812:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8009814:	697b      	ldr	r3, [r7, #20]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	685a      	ldr	r2, [r3, #4]
 800981a:	697b      	ldr	r3, [r7, #20]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8009822:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8009824:	697b      	ldr	r3, [r7, #20]
 8009826:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009828:	2b00      	cmp	r3, #0
 800982a:	d003      	beq.n	8009834 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800982c:	697b      	ldr	r3, [r7, #20]
 800982e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009830:	2200      	movs	r2, #0
 8009832:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8009834:	697b      	ldr	r3, [r7, #20]
 8009836:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009838:	2b00      	cmp	r3, #0
 800983a:	d003      	beq.n	8009844 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800983c:	697b      	ldr	r3, [r7, #20]
 800983e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009840:	2200      	movs	r2, #0
 8009842:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8009844:	7cfb      	ldrb	r3, [r7, #19]
 8009846:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 800984a:	2b21      	cmp	r3, #33	@ 0x21
 800984c:	d007      	beq.n	800985e <I2C_DMAXferCplt+0x6e>
 800984e:	7cfb      	ldrb	r3, [r7, #19]
 8009850:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 8009854:	2b22      	cmp	r3, #34	@ 0x22
 8009856:	d131      	bne.n	80098bc <I2C_DMAXferCplt+0xcc>
 8009858:	7cbb      	ldrb	r3, [r7, #18]
 800985a:	2b20      	cmp	r3, #32
 800985c:	d12e      	bne.n	80098bc <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800985e:	697b      	ldr	r3, [r7, #20]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	685a      	ldr	r2, [r3, #4]
 8009864:	697b      	ldr	r3, [r7, #20]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800986c:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 800986e:	697b      	ldr	r3, [r7, #20]
 8009870:	2200      	movs	r2, #0
 8009872:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8009874:	7cfb      	ldrb	r3, [r7, #19]
 8009876:	2b29      	cmp	r3, #41	@ 0x29
 8009878:	d10a      	bne.n	8009890 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800987a:	697b      	ldr	r3, [r7, #20]
 800987c:	2221      	movs	r2, #33	@ 0x21
 800987e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009880:	697b      	ldr	r3, [r7, #20]
 8009882:	2228      	movs	r2, #40	@ 0x28
 8009884:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009888:	6978      	ldr	r0, [r7, #20]
 800988a:	f7fe fbeb 	bl	8008064 <HAL_I2C_SlaveTxCpltCallback>
 800988e:	e00c      	b.n	80098aa <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8009890:	7cfb      	ldrb	r3, [r7, #19]
 8009892:	2b2a      	cmp	r3, #42	@ 0x2a
 8009894:	d109      	bne.n	80098aa <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8009896:	697b      	ldr	r3, [r7, #20]
 8009898:	2222      	movs	r2, #34	@ 0x22
 800989a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800989c:	697b      	ldr	r3, [r7, #20]
 800989e:	2228      	movs	r2, #40	@ 0x28
 80098a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80098a4:	6978      	ldr	r0, [r7, #20]
 80098a6:	f7fe fbe7 	bl	8008078 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80098aa:	697b      	ldr	r3, [r7, #20]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	685a      	ldr	r2, [r3, #4]
 80098b0:	697b      	ldr	r3, [r7, #20]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80098b8:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80098ba:	e074      	b.n	80099a6 <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 80098bc:	697b      	ldr	r3, [r7, #20]
 80098be:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80098c2:	b2db      	uxtb	r3, r3
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d06e      	beq.n	80099a6 <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 80098c8:	697b      	ldr	r3, [r7, #20]
 80098ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80098cc:	b29b      	uxth	r3, r3
 80098ce:	2b01      	cmp	r3, #1
 80098d0:	d107      	bne.n	80098e2 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80098d2:	697b      	ldr	r3, [r7, #20]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	681a      	ldr	r2, [r3, #0]
 80098d8:	697b      	ldr	r3, [r7, #20]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80098e0:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80098e2:	697b      	ldr	r3, [r7, #20]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	685a      	ldr	r2, [r3, #4]
 80098e8:	697b      	ldr	r3, [r7, #20]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80098f0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80098f8:	d009      	beq.n	800990e <I2C_DMAXferCplt+0x11e>
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	2b08      	cmp	r3, #8
 80098fe:	d006      	beq.n	800990e <I2C_DMAXferCplt+0x11e>
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8009906:	d002      	beq.n	800990e <I2C_DMAXferCplt+0x11e>
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	2b20      	cmp	r3, #32
 800990c:	d107      	bne.n	800991e <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800990e:	697b      	ldr	r3, [r7, #20]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	681a      	ldr	r2, [r3, #0]
 8009914:	697b      	ldr	r3, [r7, #20]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800991c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800991e:	697b      	ldr	r3, [r7, #20]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	685a      	ldr	r2, [r3, #4]
 8009924:	697b      	ldr	r3, [r7, #20]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800992c:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800992e:	697b      	ldr	r3, [r7, #20]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	685a      	ldr	r2, [r3, #4]
 8009934:	697b      	ldr	r3, [r7, #20]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800993c:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 800993e:	697b      	ldr	r3, [r7, #20]
 8009940:	2200      	movs	r2, #0
 8009942:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8009944:	697b      	ldr	r3, [r7, #20]
 8009946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009948:	2b00      	cmp	r3, #0
 800994a:	d003      	beq.n	8009954 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 800994c:	6978      	ldr	r0, [r7, #20]
 800994e:	f7fe fbb5 	bl	80080bc <HAL_I2C_ErrorCallback>
}
 8009952:	e028      	b.n	80099a6 <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 8009954:	697b      	ldr	r3, [r7, #20]
 8009956:	2220      	movs	r2, #32
 8009958:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800995c:	697b      	ldr	r3, [r7, #20]
 800995e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009962:	b2db      	uxtb	r3, r3
 8009964:	2b40      	cmp	r3, #64	@ 0x40
 8009966:	d10a      	bne.n	800997e <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009968:	697b      	ldr	r3, [r7, #20]
 800996a:	2200      	movs	r2, #0
 800996c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8009970:	697b      	ldr	r3, [r7, #20]
 8009972:	2200      	movs	r2, #0
 8009974:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8009976:	6978      	ldr	r0, [r7, #20]
 8009978:	f7fa fd80 	bl	800447c <HAL_I2C_MemRxCpltCallback>
}
 800997c:	e013      	b.n	80099a6 <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800997e:	697b      	ldr	r3, [r7, #20]
 8009980:	2200      	movs	r2, #0
 8009982:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	2b08      	cmp	r3, #8
 800998a:	d002      	beq.n	8009992 <I2C_DMAXferCplt+0x1a2>
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	2b20      	cmp	r3, #32
 8009990:	d103      	bne.n	800999a <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 8009992:	697b      	ldr	r3, [r7, #20]
 8009994:	2200      	movs	r2, #0
 8009996:	631a      	str	r2, [r3, #48]	@ 0x30
 8009998:	e002      	b.n	80099a0 <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800999a:	697b      	ldr	r3, [r7, #20]
 800999c:	2212      	movs	r2, #18
 800999e:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80099a0:	6978      	ldr	r0, [r7, #20]
 80099a2:	f7fe fb55 	bl	8008050 <HAL_I2C_MasterRxCpltCallback>
}
 80099a6:	bf00      	nop
 80099a8:	3718      	adds	r7, #24
 80099aa:	46bd      	mov	sp, r7
 80099ac:	bd80      	pop	{r7, pc}

080099ae <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80099ae:	b580      	push	{r7, lr}
 80099b0:	b084      	sub	sp, #16
 80099b2:	af00      	add	r7, sp, #0
 80099b4:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099ba:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d003      	beq.n	80099cc <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80099c8:	2200      	movs	r2, #0
 80099ca:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d003      	beq.n	80099dc <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099d8:	2200      	movs	r2, #0
 80099da:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80099dc:	6878      	ldr	r0, [r7, #4]
 80099de:	f7fc fca1 	bl	8006324 <HAL_DMA_GetError>
 80099e2:	4603      	mov	r3, r0
 80099e4:	2b02      	cmp	r3, #2
 80099e6:	d01b      	beq.n	8009a20 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	681a      	ldr	r2, [r3, #0]
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80099f6:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	2200      	movs	r2, #0
 80099fc:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	2220      	movs	r2, #32
 8009a02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	2200      	movs	r2, #0
 8009a0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a12:	f043 0210 	orr.w	r2, r3, #16
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8009a1a:	68f8      	ldr	r0, [r7, #12]
 8009a1c:	f7fe fb4e 	bl	80080bc <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009a20:	bf00      	nop
 8009a22:	3710      	adds	r7, #16
 8009a24:	46bd      	mov	sp, r7
 8009a26:	bd80      	pop	{r7, pc}

08009a28 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b086      	sub	sp, #24
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009a30:	2300      	movs	r3, #0
 8009a32:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a38:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009a3a:	697b      	ldr	r3, [r7, #20]
 8009a3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009a40:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8009a42:	4b4b      	ldr	r3, [pc, #300]	@ (8009b70 <I2C_DMAAbort+0x148>)
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	08db      	lsrs	r3, r3, #3
 8009a48:	4a4a      	ldr	r2, [pc, #296]	@ (8009b74 <I2C_DMAAbort+0x14c>)
 8009a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8009a4e:	0a1a      	lsrs	r2, r3, #8
 8009a50:	4613      	mov	r3, r2
 8009a52:	009b      	lsls	r3, r3, #2
 8009a54:	4413      	add	r3, r2
 8009a56:	00da      	lsls	r2, r3, #3
 8009a58:	1ad3      	subs	r3, r2, r3
 8009a5a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d106      	bne.n	8009a70 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009a62:	697b      	ldr	r3, [r7, #20]
 8009a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a66:	f043 0220 	orr.w	r2, r3, #32
 8009a6a:	697b      	ldr	r3, [r7, #20]
 8009a6c:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8009a6e:	e00a      	b.n	8009a86 <I2C_DMAAbort+0x5e>
    }
    count--;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	3b01      	subs	r3, #1
 8009a74:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8009a76:	697b      	ldr	r3, [r7, #20]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009a80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009a84:	d0ea      	beq.n	8009a5c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8009a86:	697b      	ldr	r3, [r7, #20]
 8009a88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d003      	beq.n	8009a96 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8009a8e:	697b      	ldr	r3, [r7, #20]
 8009a90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a92:	2200      	movs	r2, #0
 8009a94:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8009a96:	697b      	ldr	r3, [r7, #20]
 8009a98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d003      	beq.n	8009aa6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8009a9e:	697b      	ldr	r3, [r7, #20]
 8009aa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009aa6:	697b      	ldr	r3, [r7, #20]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	681a      	ldr	r2, [r3, #0]
 8009aac:	697b      	ldr	r3, [r7, #20]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009ab4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8009ab6:	697b      	ldr	r3, [r7, #20]
 8009ab8:	2200      	movs	r2, #0
 8009aba:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8009abc:	697b      	ldr	r3, [r7, #20]
 8009abe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d003      	beq.n	8009acc <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8009ac4:	697b      	ldr	r3, [r7, #20]
 8009ac6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ac8:	2200      	movs	r2, #0
 8009aca:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8009acc:	697b      	ldr	r3, [r7, #20]
 8009ace:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d003      	beq.n	8009adc <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8009ad4:	697b      	ldr	r3, [r7, #20]
 8009ad6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ad8:	2200      	movs	r2, #0
 8009ada:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8009adc:	697b      	ldr	r3, [r7, #20]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	681a      	ldr	r2, [r3, #0]
 8009ae2:	697b      	ldr	r3, [r7, #20]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	f022 0201 	bic.w	r2, r2, #1
 8009aea:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8009aec:	697b      	ldr	r3, [r7, #20]
 8009aee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009af2:	b2db      	uxtb	r3, r3
 8009af4:	2b60      	cmp	r3, #96	@ 0x60
 8009af6:	d10e      	bne.n	8009b16 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8009af8:	697b      	ldr	r3, [r7, #20]
 8009afa:	2220      	movs	r2, #32
 8009afc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009b00:	697b      	ldr	r3, [r7, #20]
 8009b02:	2200      	movs	r2, #0
 8009b04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8009b08:	697b      	ldr	r3, [r7, #20]
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8009b0e:	6978      	ldr	r0, [r7, #20]
 8009b10:	f7fe fade 	bl	80080d0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009b14:	e027      	b.n	8009b66 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009b16:	7cfb      	ldrb	r3, [r7, #19]
 8009b18:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8009b1c:	2b28      	cmp	r3, #40	@ 0x28
 8009b1e:	d117      	bne.n	8009b50 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8009b20:	697b      	ldr	r3, [r7, #20]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	681a      	ldr	r2, [r3, #0]
 8009b26:	697b      	ldr	r3, [r7, #20]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	f042 0201 	orr.w	r2, r2, #1
 8009b2e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009b30:	697b      	ldr	r3, [r7, #20]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	681a      	ldr	r2, [r3, #0]
 8009b36:	697b      	ldr	r3, [r7, #20]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009b3e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8009b40:	697b      	ldr	r3, [r7, #20]
 8009b42:	2200      	movs	r2, #0
 8009b44:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009b46:	697b      	ldr	r3, [r7, #20]
 8009b48:	2228      	movs	r2, #40	@ 0x28
 8009b4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8009b4e:	e007      	b.n	8009b60 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8009b50:	697b      	ldr	r3, [r7, #20]
 8009b52:	2220      	movs	r2, #32
 8009b54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009b58:	697b      	ldr	r3, [r7, #20]
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8009b60:	6978      	ldr	r0, [r7, #20]
 8009b62:	f7fe faab 	bl	80080bc <HAL_I2C_ErrorCallback>
}
 8009b66:	bf00      	nop
 8009b68:	3718      	adds	r7, #24
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	bd80      	pop	{r7, pc}
 8009b6e:	bf00      	nop
 8009b70:	20000014 	.word	0x20000014
 8009b74:	14f8b589 	.word	0x14f8b589

08009b78 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b084      	sub	sp, #16
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	60f8      	str	r0, [r7, #12]
 8009b80:	60b9      	str	r1, [r7, #8]
 8009b82:	603b      	str	r3, [r7, #0]
 8009b84:	4613      	mov	r3, r2
 8009b86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009b88:	e048      	b.n	8009c1c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009b8a:	683b      	ldr	r3, [r7, #0]
 8009b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b90:	d044      	beq.n	8009c1c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b92:	f7fb fa39 	bl	8005008 <HAL_GetTick>
 8009b96:	4602      	mov	r2, r0
 8009b98:	69bb      	ldr	r3, [r7, #24]
 8009b9a:	1ad3      	subs	r3, r2, r3
 8009b9c:	683a      	ldr	r2, [r7, #0]
 8009b9e:	429a      	cmp	r2, r3
 8009ba0:	d302      	bcc.n	8009ba8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009ba2:	683b      	ldr	r3, [r7, #0]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d139      	bne.n	8009c1c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009ba8:	68bb      	ldr	r3, [r7, #8]
 8009baa:	0c1b      	lsrs	r3, r3, #16
 8009bac:	b2db      	uxtb	r3, r3
 8009bae:	2b01      	cmp	r3, #1
 8009bb0:	d10d      	bne.n	8009bce <I2C_WaitOnFlagUntilTimeout+0x56>
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	695b      	ldr	r3, [r3, #20]
 8009bb8:	43da      	mvns	r2, r3
 8009bba:	68bb      	ldr	r3, [r7, #8]
 8009bbc:	4013      	ands	r3, r2
 8009bbe:	b29b      	uxth	r3, r3
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	bf0c      	ite	eq
 8009bc4:	2301      	moveq	r3, #1
 8009bc6:	2300      	movne	r3, #0
 8009bc8:	b2db      	uxtb	r3, r3
 8009bca:	461a      	mov	r2, r3
 8009bcc:	e00c      	b.n	8009be8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	699b      	ldr	r3, [r3, #24]
 8009bd4:	43da      	mvns	r2, r3
 8009bd6:	68bb      	ldr	r3, [r7, #8]
 8009bd8:	4013      	ands	r3, r2
 8009bda:	b29b      	uxth	r3, r3
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	bf0c      	ite	eq
 8009be0:	2301      	moveq	r3, #1
 8009be2:	2300      	movne	r3, #0
 8009be4:	b2db      	uxtb	r3, r3
 8009be6:	461a      	mov	r2, r3
 8009be8:	79fb      	ldrb	r3, [r7, #7]
 8009bea:	429a      	cmp	r2, r3
 8009bec:	d116      	bne.n	8009c1c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	2220      	movs	r2, #32
 8009bf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	2200      	movs	r2, #0
 8009c00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c08:	f043 0220 	orr.w	r2, r3, #32
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	2200      	movs	r2, #0
 8009c14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009c18:	2301      	movs	r3, #1
 8009c1a:	e023      	b.n	8009c64 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009c1c:	68bb      	ldr	r3, [r7, #8]
 8009c1e:	0c1b      	lsrs	r3, r3, #16
 8009c20:	b2db      	uxtb	r3, r3
 8009c22:	2b01      	cmp	r3, #1
 8009c24:	d10d      	bne.n	8009c42 <I2C_WaitOnFlagUntilTimeout+0xca>
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	695b      	ldr	r3, [r3, #20]
 8009c2c:	43da      	mvns	r2, r3
 8009c2e:	68bb      	ldr	r3, [r7, #8]
 8009c30:	4013      	ands	r3, r2
 8009c32:	b29b      	uxth	r3, r3
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	bf0c      	ite	eq
 8009c38:	2301      	moveq	r3, #1
 8009c3a:	2300      	movne	r3, #0
 8009c3c:	b2db      	uxtb	r3, r3
 8009c3e:	461a      	mov	r2, r3
 8009c40:	e00c      	b.n	8009c5c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	699b      	ldr	r3, [r3, #24]
 8009c48:	43da      	mvns	r2, r3
 8009c4a:	68bb      	ldr	r3, [r7, #8]
 8009c4c:	4013      	ands	r3, r2
 8009c4e:	b29b      	uxth	r3, r3
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	bf0c      	ite	eq
 8009c54:	2301      	moveq	r3, #1
 8009c56:	2300      	movne	r3, #0
 8009c58:	b2db      	uxtb	r3, r3
 8009c5a:	461a      	mov	r2, r3
 8009c5c:	79fb      	ldrb	r3, [r7, #7]
 8009c5e:	429a      	cmp	r2, r3
 8009c60:	d093      	beq.n	8009b8a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009c62:	2300      	movs	r3, #0
}
 8009c64:	4618      	mov	r0, r3
 8009c66:	3710      	adds	r7, #16
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	bd80      	pop	{r7, pc}

08009c6c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b084      	sub	sp, #16
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	60f8      	str	r0, [r7, #12]
 8009c74:	60b9      	str	r1, [r7, #8]
 8009c76:	607a      	str	r2, [r7, #4]
 8009c78:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009c7a:	e071      	b.n	8009d60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	695b      	ldr	r3, [r3, #20]
 8009c82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009c86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009c8a:	d123      	bne.n	8009cd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	681a      	ldr	r2, [r3, #0]
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009c9a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8009ca4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	2200      	movs	r2, #0
 8009caa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	2220      	movs	r2, #32
 8009cb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009cc0:	f043 0204 	orr.w	r2, r3, #4
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	2200      	movs	r2, #0
 8009ccc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8009cd0:	2301      	movs	r3, #1
 8009cd2:	e067      	b.n	8009da4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cda:	d041      	beq.n	8009d60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009cdc:	f7fb f994 	bl	8005008 <HAL_GetTick>
 8009ce0:	4602      	mov	r2, r0
 8009ce2:	683b      	ldr	r3, [r7, #0]
 8009ce4:	1ad3      	subs	r3, r2, r3
 8009ce6:	687a      	ldr	r2, [r7, #4]
 8009ce8:	429a      	cmp	r2, r3
 8009cea:	d302      	bcc.n	8009cf2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d136      	bne.n	8009d60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8009cf2:	68bb      	ldr	r3, [r7, #8]
 8009cf4:	0c1b      	lsrs	r3, r3, #16
 8009cf6:	b2db      	uxtb	r3, r3
 8009cf8:	2b01      	cmp	r3, #1
 8009cfa:	d10c      	bne.n	8009d16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	695b      	ldr	r3, [r3, #20]
 8009d02:	43da      	mvns	r2, r3
 8009d04:	68bb      	ldr	r3, [r7, #8]
 8009d06:	4013      	ands	r3, r2
 8009d08:	b29b      	uxth	r3, r3
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	bf14      	ite	ne
 8009d0e:	2301      	movne	r3, #1
 8009d10:	2300      	moveq	r3, #0
 8009d12:	b2db      	uxtb	r3, r3
 8009d14:	e00b      	b.n	8009d2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	699b      	ldr	r3, [r3, #24]
 8009d1c:	43da      	mvns	r2, r3
 8009d1e:	68bb      	ldr	r3, [r7, #8]
 8009d20:	4013      	ands	r3, r2
 8009d22:	b29b      	uxth	r3, r3
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	bf14      	ite	ne
 8009d28:	2301      	movne	r3, #1
 8009d2a:	2300      	moveq	r3, #0
 8009d2c:	b2db      	uxtb	r3, r3
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d016      	beq.n	8009d60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	2200      	movs	r2, #0
 8009d36:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	2220      	movs	r2, #32
 8009d3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	2200      	movs	r2, #0
 8009d44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d4c:	f043 0220 	orr.w	r2, r3, #32
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	2200      	movs	r2, #0
 8009d58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009d5c:	2301      	movs	r3, #1
 8009d5e:	e021      	b.n	8009da4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009d60:	68bb      	ldr	r3, [r7, #8]
 8009d62:	0c1b      	lsrs	r3, r3, #16
 8009d64:	b2db      	uxtb	r3, r3
 8009d66:	2b01      	cmp	r3, #1
 8009d68:	d10c      	bne.n	8009d84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	695b      	ldr	r3, [r3, #20]
 8009d70:	43da      	mvns	r2, r3
 8009d72:	68bb      	ldr	r3, [r7, #8]
 8009d74:	4013      	ands	r3, r2
 8009d76:	b29b      	uxth	r3, r3
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	bf14      	ite	ne
 8009d7c:	2301      	movne	r3, #1
 8009d7e:	2300      	moveq	r3, #0
 8009d80:	b2db      	uxtb	r3, r3
 8009d82:	e00b      	b.n	8009d9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	699b      	ldr	r3, [r3, #24]
 8009d8a:	43da      	mvns	r2, r3
 8009d8c:	68bb      	ldr	r3, [r7, #8]
 8009d8e:	4013      	ands	r3, r2
 8009d90:	b29b      	uxth	r3, r3
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	bf14      	ite	ne
 8009d96:	2301      	movne	r3, #1
 8009d98:	2300      	moveq	r3, #0
 8009d9a:	b2db      	uxtb	r3, r3
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	f47f af6d 	bne.w	8009c7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8009da2:	2300      	movs	r3, #0
}
 8009da4:	4618      	mov	r0, r3
 8009da6:	3710      	adds	r7, #16
 8009da8:	46bd      	mov	sp, r7
 8009daa:	bd80      	pop	{r7, pc}

08009dac <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b084      	sub	sp, #16
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	60f8      	str	r0, [r7, #12]
 8009db4:	60b9      	str	r1, [r7, #8]
 8009db6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009db8:	e034      	b.n	8009e24 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009dba:	68f8      	ldr	r0, [r7, #12]
 8009dbc:	f000 f915 	bl	8009fea <I2C_IsAcknowledgeFailed>
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d001      	beq.n	8009dca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009dc6:	2301      	movs	r3, #1
 8009dc8:	e034      	b.n	8009e34 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009dca:	68bb      	ldr	r3, [r7, #8]
 8009dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dd0:	d028      	beq.n	8009e24 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009dd2:	f7fb f919 	bl	8005008 <HAL_GetTick>
 8009dd6:	4602      	mov	r2, r0
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	1ad3      	subs	r3, r2, r3
 8009ddc:	68ba      	ldr	r2, [r7, #8]
 8009dde:	429a      	cmp	r2, r3
 8009de0:	d302      	bcc.n	8009de8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009de2:	68bb      	ldr	r3, [r7, #8]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d11d      	bne.n	8009e24 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	695b      	ldr	r3, [r3, #20]
 8009dee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009df2:	2b80      	cmp	r3, #128	@ 0x80
 8009df4:	d016      	beq.n	8009e24 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	2200      	movs	r2, #0
 8009dfa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	2220      	movs	r2, #32
 8009e00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	2200      	movs	r2, #0
 8009e08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e10:	f043 0220 	orr.w	r2, r3, #32
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009e20:	2301      	movs	r3, #1
 8009e22:	e007      	b.n	8009e34 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	695b      	ldr	r3, [r3, #20]
 8009e2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e2e:	2b80      	cmp	r3, #128	@ 0x80
 8009e30:	d1c3      	bne.n	8009dba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009e32:	2300      	movs	r3, #0
}
 8009e34:	4618      	mov	r0, r3
 8009e36:	3710      	adds	r7, #16
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	bd80      	pop	{r7, pc}

08009e3c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b084      	sub	sp, #16
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	60f8      	str	r0, [r7, #12]
 8009e44:	60b9      	str	r1, [r7, #8]
 8009e46:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009e48:	e034      	b.n	8009eb4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009e4a:	68f8      	ldr	r0, [r7, #12]
 8009e4c:	f000 f8cd 	bl	8009fea <I2C_IsAcknowledgeFailed>
 8009e50:	4603      	mov	r3, r0
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d001      	beq.n	8009e5a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009e56:	2301      	movs	r3, #1
 8009e58:	e034      	b.n	8009ec4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009e5a:	68bb      	ldr	r3, [r7, #8]
 8009e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e60:	d028      	beq.n	8009eb4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e62:	f7fb f8d1 	bl	8005008 <HAL_GetTick>
 8009e66:	4602      	mov	r2, r0
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	1ad3      	subs	r3, r2, r3
 8009e6c:	68ba      	ldr	r2, [r7, #8]
 8009e6e:	429a      	cmp	r2, r3
 8009e70:	d302      	bcc.n	8009e78 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009e72:	68bb      	ldr	r3, [r7, #8]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d11d      	bne.n	8009eb4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	695b      	ldr	r3, [r3, #20]
 8009e7e:	f003 0304 	and.w	r3, r3, #4
 8009e82:	2b04      	cmp	r3, #4
 8009e84:	d016      	beq.n	8009eb4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	2200      	movs	r2, #0
 8009e8a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	2220      	movs	r2, #32
 8009e90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	2200      	movs	r2, #0
 8009e98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ea0:	f043 0220 	orr.w	r2, r3, #32
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	2200      	movs	r2, #0
 8009eac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009eb0:	2301      	movs	r3, #1
 8009eb2:	e007      	b.n	8009ec4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	695b      	ldr	r3, [r3, #20]
 8009eba:	f003 0304 	and.w	r3, r3, #4
 8009ebe:	2b04      	cmp	r3, #4
 8009ec0:	d1c3      	bne.n	8009e4a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009ec2:	2300      	movs	r3, #0
}
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	3710      	adds	r7, #16
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	bd80      	pop	{r7, pc}

08009ecc <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8009ecc:	b480      	push	{r7}
 8009ece:	b085      	sub	sp, #20
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8009ed8:	4b13      	ldr	r3, [pc, #76]	@ (8009f28 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	08db      	lsrs	r3, r3, #3
 8009ede:	4a13      	ldr	r2, [pc, #76]	@ (8009f2c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8009ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8009ee4:	0a1a      	lsrs	r2, r3, #8
 8009ee6:	4613      	mov	r3, r2
 8009ee8:	009b      	lsls	r3, r3, #2
 8009eea:	4413      	add	r3, r2
 8009eec:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	3b01      	subs	r3, #1
 8009ef2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d107      	bne.n	8009f0a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009efe:	f043 0220 	orr.w	r2, r3, #32
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8009f06:	2301      	movs	r3, #1
 8009f08:	e008      	b.n	8009f1c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009f14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f18:	d0e9      	beq.n	8009eee <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8009f1a:	2300      	movs	r3, #0
}
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	3714      	adds	r7, #20
 8009f20:	46bd      	mov	sp, r7
 8009f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f26:	4770      	bx	lr
 8009f28:	20000014 	.word	0x20000014
 8009f2c:	14f8b589 	.word	0x14f8b589

08009f30 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b084      	sub	sp, #16
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	60f8      	str	r0, [r7, #12]
 8009f38:	60b9      	str	r1, [r7, #8]
 8009f3a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009f3c:	e049      	b.n	8009fd2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	695b      	ldr	r3, [r3, #20]
 8009f44:	f003 0310 	and.w	r3, r3, #16
 8009f48:	2b10      	cmp	r3, #16
 8009f4a:	d119      	bne.n	8009f80 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	f06f 0210 	mvn.w	r2, #16
 8009f54:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	2200      	movs	r2, #0
 8009f5a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	2220      	movs	r2, #32
 8009f60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	2200      	movs	r2, #0
 8009f68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	2200      	movs	r2, #0
 8009f78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8009f7c:	2301      	movs	r3, #1
 8009f7e:	e030      	b.n	8009fe2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009f80:	f7fb f842 	bl	8005008 <HAL_GetTick>
 8009f84:	4602      	mov	r2, r0
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	1ad3      	subs	r3, r2, r3
 8009f8a:	68ba      	ldr	r2, [r7, #8]
 8009f8c:	429a      	cmp	r2, r3
 8009f8e:	d302      	bcc.n	8009f96 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009f90:	68bb      	ldr	r3, [r7, #8]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d11d      	bne.n	8009fd2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	695b      	ldr	r3, [r3, #20]
 8009f9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009fa0:	2b40      	cmp	r3, #64	@ 0x40
 8009fa2:	d016      	beq.n	8009fd2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	2220      	movs	r2, #32
 8009fae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009fbe:	f043 0220 	orr.w	r2, r3, #32
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	2200      	movs	r2, #0
 8009fca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8009fce:	2301      	movs	r3, #1
 8009fd0:	e007      	b.n	8009fe2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	695b      	ldr	r3, [r3, #20]
 8009fd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009fdc:	2b40      	cmp	r3, #64	@ 0x40
 8009fde:	d1ae      	bne.n	8009f3e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009fe0:	2300      	movs	r3, #0
}
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	3710      	adds	r7, #16
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	bd80      	pop	{r7, pc}

08009fea <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009fea:	b480      	push	{r7}
 8009fec:	b083      	sub	sp, #12
 8009fee:	af00      	add	r7, sp, #0
 8009ff0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	695b      	ldr	r3, [r3, #20]
 8009ff8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009ffc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a000:	d11b      	bne.n	800a03a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800a00a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2200      	movs	r2, #0
 800a010:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	2220      	movs	r2, #32
 800a016:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	2200      	movs	r2, #0
 800a01e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a026:	f043 0204 	orr.w	r2, r3, #4
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	2200      	movs	r2, #0
 800a032:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800a036:	2301      	movs	r3, #1
 800a038:	e000      	b.n	800a03c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a03a:	2300      	movs	r3, #0
}
 800a03c:	4618      	mov	r0, r3
 800a03e:	370c      	adds	r7, #12
 800a040:	46bd      	mov	sp, r7
 800a042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a046:	4770      	bx	lr

0800a048 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800a048:	b480      	push	{r7}
 800a04a:	b083      	sub	sp, #12
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a054:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800a058:	d103      	bne.n	800a062 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2201      	movs	r2, #1
 800a05e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800a060:	e007      	b.n	800a072 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a066:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800a06a:	d102      	bne.n	800a072 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	2208      	movs	r2, #8
 800a070:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800a072:	bf00      	nop
 800a074:	370c      	adds	r7, #12
 800a076:	46bd      	mov	sp, r7
 800a078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07c:	4770      	bx	lr

0800a07e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800a07e:	b580      	push	{r7, lr}
 800a080:	b086      	sub	sp, #24
 800a082:	af02      	add	r7, sp, #8
 800a084:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d101      	bne.n	800a090 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800a08c:	2301      	movs	r3, #1
 800a08e:	e101      	b.n	800a294 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800a09c:	b2db      	uxtb	r3, r3
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d106      	bne.n	800a0b0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800a0aa:	6878      	ldr	r0, [r7, #4]
 800a0ac:	f007 fba6 	bl	80117fc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2203      	movs	r2, #3
 800a0b4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800a0b8:	68bb      	ldr	r3, [r7, #8]
 800a0ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a0be:	d102      	bne.n	800a0c6 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	f003 ff21 	bl	800df12 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	6818      	ldr	r0, [r3, #0]
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	7c1a      	ldrb	r2, [r3, #16]
 800a0d8:	f88d 2000 	strb.w	r2, [sp]
 800a0dc:	3304      	adds	r3, #4
 800a0de:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a0e0:	f003 fe00 	bl	800dce4 <USB_CoreInit>
 800a0e4:	4603      	mov	r3, r0
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d005      	beq.n	800a0f6 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	2202      	movs	r2, #2
 800a0ee:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800a0f2:	2301      	movs	r3, #1
 800a0f4:	e0ce      	b.n	800a294 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	2100      	movs	r1, #0
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	f003 ff19 	bl	800df34 <USB_SetCurrentMode>
 800a102:	4603      	mov	r3, r0
 800a104:	2b00      	cmp	r3, #0
 800a106:	d005      	beq.n	800a114 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	2202      	movs	r2, #2
 800a10c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800a110:	2301      	movs	r3, #1
 800a112:	e0bf      	b.n	800a294 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a114:	2300      	movs	r3, #0
 800a116:	73fb      	strb	r3, [r7, #15]
 800a118:	e04a      	b.n	800a1b0 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800a11a:	7bfa      	ldrb	r2, [r7, #15]
 800a11c:	6879      	ldr	r1, [r7, #4]
 800a11e:	4613      	mov	r3, r2
 800a120:	00db      	lsls	r3, r3, #3
 800a122:	4413      	add	r3, r2
 800a124:	009b      	lsls	r3, r3, #2
 800a126:	440b      	add	r3, r1
 800a128:	3315      	adds	r3, #21
 800a12a:	2201      	movs	r2, #1
 800a12c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800a12e:	7bfa      	ldrb	r2, [r7, #15]
 800a130:	6879      	ldr	r1, [r7, #4]
 800a132:	4613      	mov	r3, r2
 800a134:	00db      	lsls	r3, r3, #3
 800a136:	4413      	add	r3, r2
 800a138:	009b      	lsls	r3, r3, #2
 800a13a:	440b      	add	r3, r1
 800a13c:	3314      	adds	r3, #20
 800a13e:	7bfa      	ldrb	r2, [r7, #15]
 800a140:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800a142:	7bfa      	ldrb	r2, [r7, #15]
 800a144:	7bfb      	ldrb	r3, [r7, #15]
 800a146:	b298      	uxth	r0, r3
 800a148:	6879      	ldr	r1, [r7, #4]
 800a14a:	4613      	mov	r3, r2
 800a14c:	00db      	lsls	r3, r3, #3
 800a14e:	4413      	add	r3, r2
 800a150:	009b      	lsls	r3, r3, #2
 800a152:	440b      	add	r3, r1
 800a154:	332e      	adds	r3, #46	@ 0x2e
 800a156:	4602      	mov	r2, r0
 800a158:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800a15a:	7bfa      	ldrb	r2, [r7, #15]
 800a15c:	6879      	ldr	r1, [r7, #4]
 800a15e:	4613      	mov	r3, r2
 800a160:	00db      	lsls	r3, r3, #3
 800a162:	4413      	add	r3, r2
 800a164:	009b      	lsls	r3, r3, #2
 800a166:	440b      	add	r3, r1
 800a168:	3318      	adds	r3, #24
 800a16a:	2200      	movs	r2, #0
 800a16c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800a16e:	7bfa      	ldrb	r2, [r7, #15]
 800a170:	6879      	ldr	r1, [r7, #4]
 800a172:	4613      	mov	r3, r2
 800a174:	00db      	lsls	r3, r3, #3
 800a176:	4413      	add	r3, r2
 800a178:	009b      	lsls	r3, r3, #2
 800a17a:	440b      	add	r3, r1
 800a17c:	331c      	adds	r3, #28
 800a17e:	2200      	movs	r2, #0
 800a180:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800a182:	7bfa      	ldrb	r2, [r7, #15]
 800a184:	6879      	ldr	r1, [r7, #4]
 800a186:	4613      	mov	r3, r2
 800a188:	00db      	lsls	r3, r3, #3
 800a18a:	4413      	add	r3, r2
 800a18c:	009b      	lsls	r3, r3, #2
 800a18e:	440b      	add	r3, r1
 800a190:	3320      	adds	r3, #32
 800a192:	2200      	movs	r2, #0
 800a194:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800a196:	7bfa      	ldrb	r2, [r7, #15]
 800a198:	6879      	ldr	r1, [r7, #4]
 800a19a:	4613      	mov	r3, r2
 800a19c:	00db      	lsls	r3, r3, #3
 800a19e:	4413      	add	r3, r2
 800a1a0:	009b      	lsls	r3, r3, #2
 800a1a2:	440b      	add	r3, r1
 800a1a4:	3324      	adds	r3, #36	@ 0x24
 800a1a6:	2200      	movs	r2, #0
 800a1a8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a1aa:	7bfb      	ldrb	r3, [r7, #15]
 800a1ac:	3301      	adds	r3, #1
 800a1ae:	73fb      	strb	r3, [r7, #15]
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	791b      	ldrb	r3, [r3, #4]
 800a1b4:	7bfa      	ldrb	r2, [r7, #15]
 800a1b6:	429a      	cmp	r2, r3
 800a1b8:	d3af      	bcc.n	800a11a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	73fb      	strb	r3, [r7, #15]
 800a1be:	e044      	b.n	800a24a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800a1c0:	7bfa      	ldrb	r2, [r7, #15]
 800a1c2:	6879      	ldr	r1, [r7, #4]
 800a1c4:	4613      	mov	r3, r2
 800a1c6:	00db      	lsls	r3, r3, #3
 800a1c8:	4413      	add	r3, r2
 800a1ca:	009b      	lsls	r3, r3, #2
 800a1cc:	440b      	add	r3, r1
 800a1ce:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800a1d6:	7bfa      	ldrb	r2, [r7, #15]
 800a1d8:	6879      	ldr	r1, [r7, #4]
 800a1da:	4613      	mov	r3, r2
 800a1dc:	00db      	lsls	r3, r3, #3
 800a1de:	4413      	add	r3, r2
 800a1e0:	009b      	lsls	r3, r3, #2
 800a1e2:	440b      	add	r3, r1
 800a1e4:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800a1e8:	7bfa      	ldrb	r2, [r7, #15]
 800a1ea:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800a1ec:	7bfa      	ldrb	r2, [r7, #15]
 800a1ee:	6879      	ldr	r1, [r7, #4]
 800a1f0:	4613      	mov	r3, r2
 800a1f2:	00db      	lsls	r3, r3, #3
 800a1f4:	4413      	add	r3, r2
 800a1f6:	009b      	lsls	r3, r3, #2
 800a1f8:	440b      	add	r3, r1
 800a1fa:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800a1fe:	2200      	movs	r2, #0
 800a200:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800a202:	7bfa      	ldrb	r2, [r7, #15]
 800a204:	6879      	ldr	r1, [r7, #4]
 800a206:	4613      	mov	r3, r2
 800a208:	00db      	lsls	r3, r3, #3
 800a20a:	4413      	add	r3, r2
 800a20c:	009b      	lsls	r3, r3, #2
 800a20e:	440b      	add	r3, r1
 800a210:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800a214:	2200      	movs	r2, #0
 800a216:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800a218:	7bfa      	ldrb	r2, [r7, #15]
 800a21a:	6879      	ldr	r1, [r7, #4]
 800a21c:	4613      	mov	r3, r2
 800a21e:	00db      	lsls	r3, r3, #3
 800a220:	4413      	add	r3, r2
 800a222:	009b      	lsls	r3, r3, #2
 800a224:	440b      	add	r3, r1
 800a226:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800a22a:	2200      	movs	r2, #0
 800a22c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800a22e:	7bfa      	ldrb	r2, [r7, #15]
 800a230:	6879      	ldr	r1, [r7, #4]
 800a232:	4613      	mov	r3, r2
 800a234:	00db      	lsls	r3, r3, #3
 800a236:	4413      	add	r3, r2
 800a238:	009b      	lsls	r3, r3, #2
 800a23a:	440b      	add	r3, r1
 800a23c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800a240:	2200      	movs	r2, #0
 800a242:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a244:	7bfb      	ldrb	r3, [r7, #15]
 800a246:	3301      	adds	r3, #1
 800a248:	73fb      	strb	r3, [r7, #15]
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	791b      	ldrb	r3, [r3, #4]
 800a24e:	7bfa      	ldrb	r2, [r7, #15]
 800a250:	429a      	cmp	r2, r3
 800a252:	d3b5      	bcc.n	800a1c0 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	6818      	ldr	r0, [r3, #0]
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	7c1a      	ldrb	r2, [r3, #16]
 800a25c:	f88d 2000 	strb.w	r2, [sp]
 800a260:	3304      	adds	r3, #4
 800a262:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a264:	f003 feb2 	bl	800dfcc <USB_DevInit>
 800a268:	4603      	mov	r3, r0
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d005      	beq.n	800a27a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	2202      	movs	r2, #2
 800a272:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800a276:	2301      	movs	r3, #1
 800a278:	e00c      	b.n	800a294 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	2200      	movs	r2, #0
 800a27e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	2201      	movs	r2, #1
 800a284:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	4618      	mov	r0, r3
 800a28e:	f004 fefc 	bl	800f08a <USB_DevDisconnect>

  return HAL_OK;
 800a292:	2300      	movs	r3, #0
}
 800a294:	4618      	mov	r0, r3
 800a296:	3710      	adds	r7, #16
 800a298:	46bd      	mov	sp, r7
 800a29a:	bd80      	pop	{r7, pc}

0800a29c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b084      	sub	sp, #16
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800a2b0:	2b01      	cmp	r3, #1
 800a2b2:	d101      	bne.n	800a2b8 <HAL_PCD_Start+0x1c>
 800a2b4:	2302      	movs	r3, #2
 800a2b6:	e022      	b.n	800a2fe <HAL_PCD_Start+0x62>
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2201      	movs	r2, #1
 800a2bc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	68db      	ldr	r3, [r3, #12]
 800a2c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d009      	beq.n	800a2e0 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800a2d0:	2b01      	cmp	r3, #1
 800a2d2:	d105      	bne.n	800a2e0 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2d8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	f003 fe03 	bl	800def0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	f004 feaa 	bl	800f048 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800a2fc:	2300      	movs	r3, #0
}
 800a2fe:	4618      	mov	r0, r3
 800a300:	3710      	adds	r7, #16
 800a302:	46bd      	mov	sp, r7
 800a304:	bd80      	pop	{r7, pc}

0800a306 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800a306:	b590      	push	{r4, r7, lr}
 800a308:	b08d      	sub	sp, #52	@ 0x34
 800a30a:	af00      	add	r7, sp, #0
 800a30c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a314:	6a3b      	ldr	r3, [r7, #32]
 800a316:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	4618      	mov	r0, r3
 800a31e:	f004 ff68 	bl	800f1f2 <USB_GetMode>
 800a322:	4603      	mov	r3, r0
 800a324:	2b00      	cmp	r3, #0
 800a326:	f040 848c 	bne.w	800ac42 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	4618      	mov	r0, r3
 800a330:	f004 fecc 	bl	800f0cc <USB_ReadInterrupts>
 800a334:	4603      	mov	r3, r0
 800a336:	2b00      	cmp	r3, #0
 800a338:	f000 8482 	beq.w	800ac40 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800a33c:	69fb      	ldr	r3, [r7, #28]
 800a33e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a342:	689b      	ldr	r3, [r3, #8]
 800a344:	0a1b      	lsrs	r3, r3, #8
 800a346:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	4618      	mov	r0, r3
 800a356:	f004 feb9 	bl	800f0cc <USB_ReadInterrupts>
 800a35a:	4603      	mov	r3, r0
 800a35c:	f003 0302 	and.w	r3, r3, #2
 800a360:	2b02      	cmp	r3, #2
 800a362:	d107      	bne.n	800a374 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	695a      	ldr	r2, [r3, #20]
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	f002 0202 	and.w	r2, r2, #2
 800a372:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	4618      	mov	r0, r3
 800a37a:	f004 fea7 	bl	800f0cc <USB_ReadInterrupts>
 800a37e:	4603      	mov	r3, r0
 800a380:	f003 0310 	and.w	r3, r3, #16
 800a384:	2b10      	cmp	r3, #16
 800a386:	d161      	bne.n	800a44c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	699a      	ldr	r2, [r3, #24]
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	f022 0210 	bic.w	r2, r2, #16
 800a396:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800a398:	6a3b      	ldr	r3, [r7, #32]
 800a39a:	6a1b      	ldr	r3, [r3, #32]
 800a39c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800a39e:	69bb      	ldr	r3, [r7, #24]
 800a3a0:	f003 020f 	and.w	r2, r3, #15
 800a3a4:	4613      	mov	r3, r2
 800a3a6:	00db      	lsls	r3, r3, #3
 800a3a8:	4413      	add	r3, r2
 800a3aa:	009b      	lsls	r3, r3, #2
 800a3ac:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800a3b0:	687a      	ldr	r2, [r7, #4]
 800a3b2:	4413      	add	r3, r2
 800a3b4:	3304      	adds	r3, #4
 800a3b6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800a3b8:	69bb      	ldr	r3, [r7, #24]
 800a3ba:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800a3be:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a3c2:	d124      	bne.n	800a40e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800a3c4:	69ba      	ldr	r2, [r7, #24]
 800a3c6:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800a3ca:	4013      	ands	r3, r2
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d035      	beq.n	800a43c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800a3d0:	697b      	ldr	r3, [r7, #20]
 800a3d2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800a3d4:	69bb      	ldr	r3, [r7, #24]
 800a3d6:	091b      	lsrs	r3, r3, #4
 800a3d8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800a3da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a3de:	b29b      	uxth	r3, r3
 800a3e0:	461a      	mov	r2, r3
 800a3e2:	6a38      	ldr	r0, [r7, #32]
 800a3e4:	f004 fcde 	bl	800eda4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a3e8:	697b      	ldr	r3, [r7, #20]
 800a3ea:	68da      	ldr	r2, [r3, #12]
 800a3ec:	69bb      	ldr	r3, [r7, #24]
 800a3ee:	091b      	lsrs	r3, r3, #4
 800a3f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a3f4:	441a      	add	r2, r3
 800a3f6:	697b      	ldr	r3, [r7, #20]
 800a3f8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a3fa:	697b      	ldr	r3, [r7, #20]
 800a3fc:	695a      	ldr	r2, [r3, #20]
 800a3fe:	69bb      	ldr	r3, [r7, #24]
 800a400:	091b      	lsrs	r3, r3, #4
 800a402:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a406:	441a      	add	r2, r3
 800a408:	697b      	ldr	r3, [r7, #20]
 800a40a:	615a      	str	r2, [r3, #20]
 800a40c:	e016      	b.n	800a43c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800a40e:	69bb      	ldr	r3, [r7, #24]
 800a410:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800a414:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800a418:	d110      	bne.n	800a43c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800a420:	2208      	movs	r2, #8
 800a422:	4619      	mov	r1, r3
 800a424:	6a38      	ldr	r0, [r7, #32]
 800a426:	f004 fcbd 	bl	800eda4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a42a:	697b      	ldr	r3, [r7, #20]
 800a42c:	695a      	ldr	r2, [r3, #20]
 800a42e:	69bb      	ldr	r3, [r7, #24]
 800a430:	091b      	lsrs	r3, r3, #4
 800a432:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a436:	441a      	add	r2, r3
 800a438:	697b      	ldr	r3, [r7, #20]
 800a43a:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	699a      	ldr	r2, [r3, #24]
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	f042 0210 	orr.w	r2, r2, #16
 800a44a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	4618      	mov	r0, r3
 800a452:	f004 fe3b 	bl	800f0cc <USB_ReadInterrupts>
 800a456:	4603      	mov	r3, r0
 800a458:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800a45c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800a460:	f040 80a7 	bne.w	800a5b2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800a464:	2300      	movs	r3, #0
 800a466:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	4618      	mov	r0, r3
 800a46e:	f004 fe40 	bl	800f0f2 <USB_ReadDevAllOutEpInterrupt>
 800a472:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800a474:	e099      	b.n	800a5aa <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800a476:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a478:	f003 0301 	and.w	r3, r3, #1
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	f000 808e 	beq.w	800a59e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a488:	b2d2      	uxtb	r2, r2
 800a48a:	4611      	mov	r1, r2
 800a48c:	4618      	mov	r0, r3
 800a48e:	f004 fe64 	bl	800f15a <USB_ReadDevOutEPInterrupt>
 800a492:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800a494:	693b      	ldr	r3, [r7, #16]
 800a496:	f003 0301 	and.w	r3, r3, #1
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d00c      	beq.n	800a4b8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800a49e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4a0:	015a      	lsls	r2, r3, #5
 800a4a2:	69fb      	ldr	r3, [r7, #28]
 800a4a4:	4413      	add	r3, r2
 800a4a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a4aa:	461a      	mov	r2, r3
 800a4ac:	2301      	movs	r3, #1
 800a4ae:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800a4b0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a4b2:	6878      	ldr	r0, [r7, #4]
 800a4b4:	f000 fea4 	bl	800b200 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800a4b8:	693b      	ldr	r3, [r7, #16]
 800a4ba:	f003 0308 	and.w	r3, r3, #8
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d00c      	beq.n	800a4dc <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800a4c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4c4:	015a      	lsls	r2, r3, #5
 800a4c6:	69fb      	ldr	r3, [r7, #28]
 800a4c8:	4413      	add	r3, r2
 800a4ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a4ce:	461a      	mov	r2, r3
 800a4d0:	2308      	movs	r3, #8
 800a4d2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800a4d4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a4d6:	6878      	ldr	r0, [r7, #4]
 800a4d8:	f000 ff7a 	bl	800b3d0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800a4dc:	693b      	ldr	r3, [r7, #16]
 800a4de:	f003 0310 	and.w	r3, r3, #16
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d008      	beq.n	800a4f8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800a4e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4e8:	015a      	lsls	r2, r3, #5
 800a4ea:	69fb      	ldr	r3, [r7, #28]
 800a4ec:	4413      	add	r3, r2
 800a4ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a4f2:	461a      	mov	r2, r3
 800a4f4:	2310      	movs	r3, #16
 800a4f6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800a4f8:	693b      	ldr	r3, [r7, #16]
 800a4fa:	f003 0302 	and.w	r3, r3, #2
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d030      	beq.n	800a564 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800a502:	6a3b      	ldr	r3, [r7, #32]
 800a504:	695b      	ldr	r3, [r3, #20]
 800a506:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a50a:	2b80      	cmp	r3, #128	@ 0x80
 800a50c:	d109      	bne.n	800a522 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800a50e:	69fb      	ldr	r3, [r7, #28]
 800a510:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a514:	685b      	ldr	r3, [r3, #4]
 800a516:	69fa      	ldr	r2, [r7, #28]
 800a518:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a51c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800a520:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800a522:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a524:	4613      	mov	r3, r2
 800a526:	00db      	lsls	r3, r3, #3
 800a528:	4413      	add	r3, r2
 800a52a:	009b      	lsls	r3, r3, #2
 800a52c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800a530:	687a      	ldr	r2, [r7, #4]
 800a532:	4413      	add	r3, r2
 800a534:	3304      	adds	r3, #4
 800a536:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800a538:	697b      	ldr	r3, [r7, #20]
 800a53a:	78db      	ldrb	r3, [r3, #3]
 800a53c:	2b01      	cmp	r3, #1
 800a53e:	d108      	bne.n	800a552 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800a540:	697b      	ldr	r3, [r7, #20]
 800a542:	2200      	movs	r2, #0
 800a544:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800a546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a548:	b2db      	uxtb	r3, r3
 800a54a:	4619      	mov	r1, r3
 800a54c:	6878      	ldr	r0, [r7, #4]
 800a54e:	f007 fa51 	bl	80119f4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800a552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a554:	015a      	lsls	r2, r3, #5
 800a556:	69fb      	ldr	r3, [r7, #28]
 800a558:	4413      	add	r3, r2
 800a55a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a55e:	461a      	mov	r2, r3
 800a560:	2302      	movs	r3, #2
 800a562:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800a564:	693b      	ldr	r3, [r7, #16]
 800a566:	f003 0320 	and.w	r3, r3, #32
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d008      	beq.n	800a580 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a56e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a570:	015a      	lsls	r2, r3, #5
 800a572:	69fb      	ldr	r3, [r7, #28]
 800a574:	4413      	add	r3, r2
 800a576:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a57a:	461a      	mov	r2, r3
 800a57c:	2320      	movs	r3, #32
 800a57e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800a580:	693b      	ldr	r3, [r7, #16]
 800a582:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a586:	2b00      	cmp	r3, #0
 800a588:	d009      	beq.n	800a59e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800a58a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a58c:	015a      	lsls	r2, r3, #5
 800a58e:	69fb      	ldr	r3, [r7, #28]
 800a590:	4413      	add	r3, r2
 800a592:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a596:	461a      	mov	r2, r3
 800a598:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a59c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800a59e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5a0:	3301      	adds	r3, #1
 800a5a2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800a5a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5a6:	085b      	lsrs	r3, r3, #1
 800a5a8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800a5aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	f47f af62 	bne.w	800a476 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	f004 fd88 	bl	800f0cc <USB_ReadInterrupts>
 800a5bc:	4603      	mov	r3, r0
 800a5be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a5c2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a5c6:	f040 80db 	bne.w	800a780 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	f004 fda9 	bl	800f126 <USB_ReadDevAllInEpInterrupt>
 800a5d4:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800a5da:	e0cd      	b.n	800a778 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800a5dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5de:	f003 0301 	and.w	r3, r3, #1
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	f000 80c2 	beq.w	800a76c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a5ee:	b2d2      	uxtb	r2, r2
 800a5f0:	4611      	mov	r1, r2
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	f004 fdcf 	bl	800f196 <USB_ReadDevInEPInterrupt>
 800a5f8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800a5fa:	693b      	ldr	r3, [r7, #16]
 800a5fc:	f003 0301 	and.w	r3, r3, #1
 800a600:	2b00      	cmp	r3, #0
 800a602:	d057      	beq.n	800a6b4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800a604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a606:	f003 030f 	and.w	r3, r3, #15
 800a60a:	2201      	movs	r2, #1
 800a60c:	fa02 f303 	lsl.w	r3, r2, r3
 800a610:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a612:	69fb      	ldr	r3, [r7, #28]
 800a614:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a618:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	43db      	mvns	r3, r3
 800a61e:	69f9      	ldr	r1, [r7, #28]
 800a620:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a624:	4013      	ands	r3, r2
 800a626:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800a628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a62a:	015a      	lsls	r2, r3, #5
 800a62c:	69fb      	ldr	r3, [r7, #28]
 800a62e:	4413      	add	r3, r2
 800a630:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a634:	461a      	mov	r2, r3
 800a636:	2301      	movs	r3, #1
 800a638:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	799b      	ldrb	r3, [r3, #6]
 800a63e:	2b01      	cmp	r3, #1
 800a640:	d132      	bne.n	800a6a8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800a642:	6879      	ldr	r1, [r7, #4]
 800a644:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a646:	4613      	mov	r3, r2
 800a648:	00db      	lsls	r3, r3, #3
 800a64a:	4413      	add	r3, r2
 800a64c:	009b      	lsls	r3, r3, #2
 800a64e:	440b      	add	r3, r1
 800a650:	3320      	adds	r3, #32
 800a652:	6819      	ldr	r1, [r3, #0]
 800a654:	6878      	ldr	r0, [r7, #4]
 800a656:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a658:	4613      	mov	r3, r2
 800a65a:	00db      	lsls	r3, r3, #3
 800a65c:	4413      	add	r3, r2
 800a65e:	009b      	lsls	r3, r3, #2
 800a660:	4403      	add	r3, r0
 800a662:	331c      	adds	r3, #28
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	4419      	add	r1, r3
 800a668:	6878      	ldr	r0, [r7, #4]
 800a66a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a66c:	4613      	mov	r3, r2
 800a66e:	00db      	lsls	r3, r3, #3
 800a670:	4413      	add	r3, r2
 800a672:	009b      	lsls	r3, r3, #2
 800a674:	4403      	add	r3, r0
 800a676:	3320      	adds	r3, #32
 800a678:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800a67a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d113      	bne.n	800a6a8 <HAL_PCD_IRQHandler+0x3a2>
 800a680:	6879      	ldr	r1, [r7, #4]
 800a682:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a684:	4613      	mov	r3, r2
 800a686:	00db      	lsls	r3, r3, #3
 800a688:	4413      	add	r3, r2
 800a68a:	009b      	lsls	r3, r3, #2
 800a68c:	440b      	add	r3, r1
 800a68e:	3324      	adds	r3, #36	@ 0x24
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d108      	bne.n	800a6a8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	6818      	ldr	r0, [r3, #0]
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800a6a0:	461a      	mov	r2, r3
 800a6a2:	2101      	movs	r1, #1
 800a6a4:	f004 fdd6 	bl	800f254 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800a6a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6aa:	b2db      	uxtb	r3, r3
 800a6ac:	4619      	mov	r1, r3
 800a6ae:	6878      	ldr	r0, [r7, #4]
 800a6b0:	f007 f925 	bl	80118fe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800a6b4:	693b      	ldr	r3, [r7, #16]
 800a6b6:	f003 0308 	and.w	r3, r3, #8
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d008      	beq.n	800a6d0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800a6be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6c0:	015a      	lsls	r2, r3, #5
 800a6c2:	69fb      	ldr	r3, [r7, #28]
 800a6c4:	4413      	add	r3, r2
 800a6c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a6ca:	461a      	mov	r2, r3
 800a6cc:	2308      	movs	r3, #8
 800a6ce:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800a6d0:	693b      	ldr	r3, [r7, #16]
 800a6d2:	f003 0310 	and.w	r3, r3, #16
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d008      	beq.n	800a6ec <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800a6da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6dc:	015a      	lsls	r2, r3, #5
 800a6de:	69fb      	ldr	r3, [r7, #28]
 800a6e0:	4413      	add	r3, r2
 800a6e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a6e6:	461a      	mov	r2, r3
 800a6e8:	2310      	movs	r3, #16
 800a6ea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800a6ec:	693b      	ldr	r3, [r7, #16]
 800a6ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d008      	beq.n	800a708 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800a6f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6f8:	015a      	lsls	r2, r3, #5
 800a6fa:	69fb      	ldr	r3, [r7, #28]
 800a6fc:	4413      	add	r3, r2
 800a6fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a702:	461a      	mov	r2, r3
 800a704:	2340      	movs	r3, #64	@ 0x40
 800a706:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800a708:	693b      	ldr	r3, [r7, #16]
 800a70a:	f003 0302 	and.w	r3, r3, #2
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d023      	beq.n	800a75a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800a712:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a714:	6a38      	ldr	r0, [r7, #32]
 800a716:	f003 fdbd 	bl	800e294 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800a71a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a71c:	4613      	mov	r3, r2
 800a71e:	00db      	lsls	r3, r3, #3
 800a720:	4413      	add	r3, r2
 800a722:	009b      	lsls	r3, r3, #2
 800a724:	3310      	adds	r3, #16
 800a726:	687a      	ldr	r2, [r7, #4]
 800a728:	4413      	add	r3, r2
 800a72a:	3304      	adds	r3, #4
 800a72c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800a72e:	697b      	ldr	r3, [r7, #20]
 800a730:	78db      	ldrb	r3, [r3, #3]
 800a732:	2b01      	cmp	r3, #1
 800a734:	d108      	bne.n	800a748 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800a736:	697b      	ldr	r3, [r7, #20]
 800a738:	2200      	movs	r2, #0
 800a73a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800a73c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a73e:	b2db      	uxtb	r3, r3
 800a740:	4619      	mov	r1, r3
 800a742:	6878      	ldr	r0, [r7, #4]
 800a744:	f007 f968 	bl	8011a18 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800a748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a74a:	015a      	lsls	r2, r3, #5
 800a74c:	69fb      	ldr	r3, [r7, #28]
 800a74e:	4413      	add	r3, r2
 800a750:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a754:	461a      	mov	r2, r3
 800a756:	2302      	movs	r3, #2
 800a758:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800a75a:	693b      	ldr	r3, [r7, #16]
 800a75c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a760:	2b00      	cmp	r3, #0
 800a762:	d003      	beq.n	800a76c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800a764:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a766:	6878      	ldr	r0, [r7, #4]
 800a768:	f000 fcbd 	bl	800b0e6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800a76c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a76e:	3301      	adds	r3, #1
 800a770:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800a772:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a774:	085b      	lsrs	r3, r3, #1
 800a776:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800a778:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	f47f af2e 	bne.w	800a5dc <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	4618      	mov	r0, r3
 800a786:	f004 fca1 	bl	800f0cc <USB_ReadInterrupts>
 800a78a:	4603      	mov	r3, r0
 800a78c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a790:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a794:	d122      	bne.n	800a7dc <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800a796:	69fb      	ldr	r3, [r7, #28]
 800a798:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a79c:	685b      	ldr	r3, [r3, #4]
 800a79e:	69fa      	ldr	r2, [r7, #28]
 800a7a0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a7a4:	f023 0301 	bic.w	r3, r3, #1
 800a7a8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800a7b0:	2b01      	cmp	r3, #1
 800a7b2:	d108      	bne.n	800a7c6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800a7bc:	2100      	movs	r1, #0
 800a7be:	6878      	ldr	r0, [r7, #4]
 800a7c0:	f000 fea4 	bl	800b50c <HAL_PCDEx_LPM_Callback>
 800a7c4:	e002      	b.n	800a7cc <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800a7c6:	6878      	ldr	r0, [r7, #4]
 800a7c8:	f007 f906 	bl	80119d8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	695a      	ldr	r2, [r3, #20]
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800a7da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	f004 fc73 	bl	800f0cc <USB_ReadInterrupts>
 800a7e6:	4603      	mov	r3, r0
 800a7e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a7ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a7f0:	d112      	bne.n	800a818 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800a7f2:	69fb      	ldr	r3, [r7, #28]
 800a7f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a7f8:	689b      	ldr	r3, [r3, #8]
 800a7fa:	f003 0301 	and.w	r3, r3, #1
 800a7fe:	2b01      	cmp	r3, #1
 800a800:	d102      	bne.n	800a808 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800a802:	6878      	ldr	r0, [r7, #4]
 800a804:	f007 f8c2 	bl	801198c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	695a      	ldr	r2, [r3, #20]
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800a816:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	4618      	mov	r0, r3
 800a81e:	f004 fc55 	bl	800f0cc <USB_ReadInterrupts>
 800a822:	4603      	mov	r3, r0
 800a824:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a828:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a82c:	f040 80b7 	bne.w	800a99e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800a830:	69fb      	ldr	r3, [r7, #28]
 800a832:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a836:	685b      	ldr	r3, [r3, #4]
 800a838:	69fa      	ldr	r2, [r7, #28]
 800a83a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a83e:	f023 0301 	bic.w	r3, r3, #1
 800a842:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	2110      	movs	r1, #16
 800a84a:	4618      	mov	r0, r3
 800a84c:	f003 fd22 	bl	800e294 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a850:	2300      	movs	r3, #0
 800a852:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a854:	e046      	b.n	800a8e4 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800a856:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a858:	015a      	lsls	r2, r3, #5
 800a85a:	69fb      	ldr	r3, [r7, #28]
 800a85c:	4413      	add	r3, r2
 800a85e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a862:	461a      	mov	r2, r3
 800a864:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a868:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a86a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a86c:	015a      	lsls	r2, r3, #5
 800a86e:	69fb      	ldr	r3, [r7, #28]
 800a870:	4413      	add	r3, r2
 800a872:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a87a:	0151      	lsls	r1, r2, #5
 800a87c:	69fa      	ldr	r2, [r7, #28]
 800a87e:	440a      	add	r2, r1
 800a880:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a884:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a888:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800a88a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a88c:	015a      	lsls	r2, r3, #5
 800a88e:	69fb      	ldr	r3, [r7, #28]
 800a890:	4413      	add	r3, r2
 800a892:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a896:	461a      	mov	r2, r3
 800a898:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a89c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a89e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8a0:	015a      	lsls	r2, r3, #5
 800a8a2:	69fb      	ldr	r3, [r7, #28]
 800a8a4:	4413      	add	r3, r2
 800a8a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a8ae:	0151      	lsls	r1, r2, #5
 800a8b0:	69fa      	ldr	r2, [r7, #28]
 800a8b2:	440a      	add	r2, r1
 800a8b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a8b8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a8bc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a8be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8c0:	015a      	lsls	r2, r3, #5
 800a8c2:	69fb      	ldr	r3, [r7, #28]
 800a8c4:	4413      	add	r3, r2
 800a8c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a8ce:	0151      	lsls	r1, r2, #5
 800a8d0:	69fa      	ldr	r2, [r7, #28]
 800a8d2:	440a      	add	r2, r1
 800a8d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a8d8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a8dc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a8de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8e0:	3301      	adds	r3, #1
 800a8e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	791b      	ldrb	r3, [r3, #4]
 800a8e8:	461a      	mov	r2, r3
 800a8ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8ec:	4293      	cmp	r3, r2
 800a8ee:	d3b2      	bcc.n	800a856 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800a8f0:	69fb      	ldr	r3, [r7, #28]
 800a8f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a8f6:	69db      	ldr	r3, [r3, #28]
 800a8f8:	69fa      	ldr	r2, [r7, #28]
 800a8fa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a8fe:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800a902:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	7bdb      	ldrb	r3, [r3, #15]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d016      	beq.n	800a93a <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800a90c:	69fb      	ldr	r3, [r7, #28]
 800a90e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a912:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a916:	69fa      	ldr	r2, [r7, #28]
 800a918:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a91c:	f043 030b 	orr.w	r3, r3, #11
 800a920:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800a924:	69fb      	ldr	r3, [r7, #28]
 800a926:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a92a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a92c:	69fa      	ldr	r2, [r7, #28]
 800a92e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a932:	f043 030b 	orr.w	r3, r3, #11
 800a936:	6453      	str	r3, [r2, #68]	@ 0x44
 800a938:	e015      	b.n	800a966 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800a93a:	69fb      	ldr	r3, [r7, #28]
 800a93c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a940:	695b      	ldr	r3, [r3, #20]
 800a942:	69fa      	ldr	r2, [r7, #28]
 800a944:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a948:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800a94c:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800a950:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800a952:	69fb      	ldr	r3, [r7, #28]
 800a954:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a958:	691b      	ldr	r3, [r3, #16]
 800a95a:	69fa      	ldr	r2, [r7, #28]
 800a95c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a960:	f043 030b 	orr.w	r3, r3, #11
 800a964:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800a966:	69fb      	ldr	r3, [r7, #28]
 800a968:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	69fa      	ldr	r2, [r7, #28]
 800a970:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a974:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800a978:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	6818      	ldr	r0, [r3, #0]
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800a988:	461a      	mov	r2, r3
 800a98a:	f004 fc63 	bl	800f254 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	695a      	ldr	r2, [r3, #20]
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800a99c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	f004 fb92 	bl	800f0cc <USB_ReadInterrupts>
 800a9a8:	4603      	mov	r3, r0
 800a9aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a9ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a9b2:	d123      	bne.n	800a9fc <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	f004 fc28 	bl	800f20e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	f003 fcdf 	bl	800e386 <USB_GetDevSpeed>
 800a9c8:	4603      	mov	r3, r0
 800a9ca:	461a      	mov	r2, r3
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681c      	ldr	r4, [r3, #0]
 800a9d4:	f001 f9d6 	bl	800bd84 <HAL_RCC_GetHCLKFreq>
 800a9d8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800a9de:	461a      	mov	r2, r3
 800a9e0:	4620      	mov	r0, r4
 800a9e2:	f003 f9e3 	bl	800ddac <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800a9e6:	6878      	ldr	r0, [r7, #4]
 800a9e8:	f006 ffb1 	bl	801194e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	695a      	ldr	r2, [r3, #20]
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800a9fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	4618      	mov	r0, r3
 800aa02:	f004 fb63 	bl	800f0cc <USB_ReadInterrupts>
 800aa06:	4603      	mov	r3, r0
 800aa08:	f003 0308 	and.w	r3, r3, #8
 800aa0c:	2b08      	cmp	r3, #8
 800aa0e:	d10a      	bne.n	800aa26 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800aa10:	6878      	ldr	r0, [r7, #4]
 800aa12:	f006 ff8e 	bl	8011932 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	695a      	ldr	r2, [r3, #20]
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	f002 0208 	and.w	r2, r2, #8
 800aa24:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	f004 fb4e 	bl	800f0cc <USB_ReadInterrupts>
 800aa30:	4603      	mov	r3, r0
 800aa32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aa36:	2b80      	cmp	r3, #128	@ 0x80
 800aa38:	d123      	bne.n	800aa82 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800aa3a:	6a3b      	ldr	r3, [r7, #32]
 800aa3c:	699b      	ldr	r3, [r3, #24]
 800aa3e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800aa42:	6a3b      	ldr	r3, [r7, #32]
 800aa44:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800aa46:	2301      	movs	r3, #1
 800aa48:	627b      	str	r3, [r7, #36]	@ 0x24
 800aa4a:	e014      	b.n	800aa76 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800aa4c:	6879      	ldr	r1, [r7, #4]
 800aa4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aa50:	4613      	mov	r3, r2
 800aa52:	00db      	lsls	r3, r3, #3
 800aa54:	4413      	add	r3, r2
 800aa56:	009b      	lsls	r3, r3, #2
 800aa58:	440b      	add	r3, r1
 800aa5a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800aa5e:	781b      	ldrb	r3, [r3, #0]
 800aa60:	2b01      	cmp	r3, #1
 800aa62:	d105      	bne.n	800aa70 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800aa64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa66:	b2db      	uxtb	r3, r3
 800aa68:	4619      	mov	r1, r3
 800aa6a:	6878      	ldr	r0, [r7, #4]
 800aa6c:	f000 fb0a 	bl	800b084 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800aa70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa72:	3301      	adds	r3, #1
 800aa74:	627b      	str	r3, [r7, #36]	@ 0x24
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	791b      	ldrb	r3, [r3, #4]
 800aa7a:	461a      	mov	r2, r3
 800aa7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa7e:	4293      	cmp	r3, r2
 800aa80:	d3e4      	bcc.n	800aa4c <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	4618      	mov	r0, r3
 800aa88:	f004 fb20 	bl	800f0cc <USB_ReadInterrupts>
 800aa8c:	4603      	mov	r3, r0
 800aa8e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800aa92:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800aa96:	d13c      	bne.n	800ab12 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800aa98:	2301      	movs	r3, #1
 800aa9a:	627b      	str	r3, [r7, #36]	@ 0x24
 800aa9c:	e02b      	b.n	800aaf6 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800aa9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaa0:	015a      	lsls	r2, r3, #5
 800aaa2:	69fb      	ldr	r3, [r7, #28]
 800aaa4:	4413      	add	r3, r2
 800aaa6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800aaae:	6879      	ldr	r1, [r7, #4]
 800aab0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aab2:	4613      	mov	r3, r2
 800aab4:	00db      	lsls	r3, r3, #3
 800aab6:	4413      	add	r3, r2
 800aab8:	009b      	lsls	r3, r3, #2
 800aaba:	440b      	add	r3, r1
 800aabc:	3318      	adds	r3, #24
 800aabe:	781b      	ldrb	r3, [r3, #0]
 800aac0:	2b01      	cmp	r3, #1
 800aac2:	d115      	bne.n	800aaf0 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800aac4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	da12      	bge.n	800aaf0 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800aaca:	6879      	ldr	r1, [r7, #4]
 800aacc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aace:	4613      	mov	r3, r2
 800aad0:	00db      	lsls	r3, r3, #3
 800aad2:	4413      	add	r3, r2
 800aad4:	009b      	lsls	r3, r3, #2
 800aad6:	440b      	add	r3, r1
 800aad8:	3317      	adds	r3, #23
 800aada:	2201      	movs	r2, #1
 800aadc:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800aade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aae0:	b2db      	uxtb	r3, r3
 800aae2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800aae6:	b2db      	uxtb	r3, r3
 800aae8:	4619      	mov	r1, r3
 800aaea:	6878      	ldr	r0, [r7, #4]
 800aaec:	f000 faca 	bl	800b084 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800aaf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaf2:	3301      	adds	r3, #1
 800aaf4:	627b      	str	r3, [r7, #36]	@ 0x24
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	791b      	ldrb	r3, [r3, #4]
 800aafa:	461a      	mov	r2, r3
 800aafc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aafe:	4293      	cmp	r3, r2
 800ab00:	d3cd      	bcc.n	800aa9e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	695a      	ldr	r2, [r3, #20]
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800ab10:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	4618      	mov	r0, r3
 800ab18:	f004 fad8 	bl	800f0cc <USB_ReadInterrupts>
 800ab1c:	4603      	mov	r3, r0
 800ab1e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800ab22:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ab26:	d156      	bne.n	800abd6 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800ab28:	2301      	movs	r3, #1
 800ab2a:	627b      	str	r3, [r7, #36]	@ 0x24
 800ab2c:	e045      	b.n	800abba <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800ab2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab30:	015a      	lsls	r2, r3, #5
 800ab32:	69fb      	ldr	r3, [r7, #28]
 800ab34:	4413      	add	r3, r2
 800ab36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800ab3e:	6879      	ldr	r1, [r7, #4]
 800ab40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ab42:	4613      	mov	r3, r2
 800ab44:	00db      	lsls	r3, r3, #3
 800ab46:	4413      	add	r3, r2
 800ab48:	009b      	lsls	r3, r3, #2
 800ab4a:	440b      	add	r3, r1
 800ab4c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800ab50:	781b      	ldrb	r3, [r3, #0]
 800ab52:	2b01      	cmp	r3, #1
 800ab54:	d12e      	bne.n	800abb4 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800ab56:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	da2b      	bge.n	800abb4 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800ab5c:	69bb      	ldr	r3, [r7, #24]
 800ab5e:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800ab68:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800ab6c:	429a      	cmp	r2, r3
 800ab6e:	d121      	bne.n	800abb4 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800ab70:	6879      	ldr	r1, [r7, #4]
 800ab72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ab74:	4613      	mov	r3, r2
 800ab76:	00db      	lsls	r3, r3, #3
 800ab78:	4413      	add	r3, r2
 800ab7a:	009b      	lsls	r3, r3, #2
 800ab7c:	440b      	add	r3, r1
 800ab7e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800ab82:	2201      	movs	r2, #1
 800ab84:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800ab86:	6a3b      	ldr	r3, [r7, #32]
 800ab88:	699b      	ldr	r3, [r3, #24]
 800ab8a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800ab8e:	6a3b      	ldr	r3, [r7, #32]
 800ab90:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800ab92:	6a3b      	ldr	r3, [r7, #32]
 800ab94:	695b      	ldr	r3, [r3, #20]
 800ab96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d10a      	bne.n	800abb4 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800ab9e:	69fb      	ldr	r3, [r7, #28]
 800aba0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aba4:	685b      	ldr	r3, [r3, #4]
 800aba6:	69fa      	ldr	r2, [r7, #28]
 800aba8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800abac:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800abb0:	6053      	str	r3, [r2, #4]
            break;
 800abb2:	e008      	b.n	800abc6 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800abb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abb6:	3301      	adds	r3, #1
 800abb8:	627b      	str	r3, [r7, #36]	@ 0x24
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	791b      	ldrb	r3, [r3, #4]
 800abbe:	461a      	mov	r2, r3
 800abc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abc2:	4293      	cmp	r3, r2
 800abc4:	d3b3      	bcc.n	800ab2e <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	695a      	ldr	r2, [r3, #20]
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800abd4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	4618      	mov	r0, r3
 800abdc:	f004 fa76 	bl	800f0cc <USB_ReadInterrupts>
 800abe0:	4603      	mov	r3, r0
 800abe2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800abe6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800abea:	d10a      	bne.n	800ac02 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800abec:	6878      	ldr	r0, [r7, #4]
 800abee:	f006 ff25 	bl	8011a3c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	695a      	ldr	r2, [r3, #20]
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800ac00:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	4618      	mov	r0, r3
 800ac08:	f004 fa60 	bl	800f0cc <USB_ReadInterrupts>
 800ac0c:	4603      	mov	r3, r0
 800ac0e:	f003 0304 	and.w	r3, r3, #4
 800ac12:	2b04      	cmp	r3, #4
 800ac14:	d115      	bne.n	800ac42 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	685b      	ldr	r3, [r3, #4]
 800ac1c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800ac1e:	69bb      	ldr	r3, [r7, #24]
 800ac20:	f003 0304 	and.w	r3, r3, #4
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d002      	beq.n	800ac2e <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800ac28:	6878      	ldr	r0, [r7, #4]
 800ac2a:	f006 ff15 	bl	8011a58 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	6859      	ldr	r1, [r3, #4]
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	69ba      	ldr	r2, [r7, #24]
 800ac3a:	430a      	orrs	r2, r1
 800ac3c:	605a      	str	r2, [r3, #4]
 800ac3e:	e000      	b.n	800ac42 <HAL_PCD_IRQHandler+0x93c>
      return;
 800ac40:	bf00      	nop
    }
  }
}
 800ac42:	3734      	adds	r7, #52	@ 0x34
 800ac44:	46bd      	mov	sp, r7
 800ac46:	bd90      	pop	{r4, r7, pc}

0800ac48 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	b082      	sub	sp, #8
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]
 800ac50:	460b      	mov	r3, r1
 800ac52:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800ac5a:	2b01      	cmp	r3, #1
 800ac5c:	d101      	bne.n	800ac62 <HAL_PCD_SetAddress+0x1a>
 800ac5e:	2302      	movs	r3, #2
 800ac60:	e012      	b.n	800ac88 <HAL_PCD_SetAddress+0x40>
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	2201      	movs	r2, #1
 800ac66:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	78fa      	ldrb	r2, [r7, #3]
 800ac6e:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	78fa      	ldrb	r2, [r7, #3]
 800ac76:	4611      	mov	r1, r2
 800ac78:	4618      	mov	r0, r3
 800ac7a:	f004 f9bf 	bl	800effc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	2200      	movs	r2, #0
 800ac82:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800ac86:	2300      	movs	r3, #0
}
 800ac88:	4618      	mov	r0, r3
 800ac8a:	3708      	adds	r7, #8
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	bd80      	pop	{r7, pc}

0800ac90 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b084      	sub	sp, #16
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
 800ac98:	4608      	mov	r0, r1
 800ac9a:	4611      	mov	r1, r2
 800ac9c:	461a      	mov	r2, r3
 800ac9e:	4603      	mov	r3, r0
 800aca0:	70fb      	strb	r3, [r7, #3]
 800aca2:	460b      	mov	r3, r1
 800aca4:	803b      	strh	r3, [r7, #0]
 800aca6:	4613      	mov	r3, r2
 800aca8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800acaa:	2300      	movs	r3, #0
 800acac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800acae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	da0f      	bge.n	800acd6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800acb6:	78fb      	ldrb	r3, [r7, #3]
 800acb8:	f003 020f 	and.w	r2, r3, #15
 800acbc:	4613      	mov	r3, r2
 800acbe:	00db      	lsls	r3, r3, #3
 800acc0:	4413      	add	r3, r2
 800acc2:	009b      	lsls	r3, r3, #2
 800acc4:	3310      	adds	r3, #16
 800acc6:	687a      	ldr	r2, [r7, #4]
 800acc8:	4413      	add	r3, r2
 800acca:	3304      	adds	r3, #4
 800accc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	2201      	movs	r2, #1
 800acd2:	705a      	strb	r2, [r3, #1]
 800acd4:	e00f      	b.n	800acf6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800acd6:	78fb      	ldrb	r3, [r7, #3]
 800acd8:	f003 020f 	and.w	r2, r3, #15
 800acdc:	4613      	mov	r3, r2
 800acde:	00db      	lsls	r3, r3, #3
 800ace0:	4413      	add	r3, r2
 800ace2:	009b      	lsls	r3, r3, #2
 800ace4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800ace8:	687a      	ldr	r2, [r7, #4]
 800acea:	4413      	add	r3, r2
 800acec:	3304      	adds	r3, #4
 800acee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	2200      	movs	r2, #0
 800acf4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800acf6:	78fb      	ldrb	r3, [r7, #3]
 800acf8:	f003 030f 	and.w	r3, r3, #15
 800acfc:	b2da      	uxtb	r2, r3
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800ad02:	883b      	ldrh	r3, [r7, #0]
 800ad04:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	78ba      	ldrb	r2, [r7, #2]
 800ad10:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	785b      	ldrb	r3, [r3, #1]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d004      	beq.n	800ad24 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	781b      	ldrb	r3, [r3, #0]
 800ad1e:	461a      	mov	r2, r3
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800ad24:	78bb      	ldrb	r3, [r7, #2]
 800ad26:	2b02      	cmp	r3, #2
 800ad28:	d102      	bne.n	800ad30 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800ad36:	2b01      	cmp	r3, #1
 800ad38:	d101      	bne.n	800ad3e <HAL_PCD_EP_Open+0xae>
 800ad3a:	2302      	movs	r3, #2
 800ad3c:	e00e      	b.n	800ad5c <HAL_PCD_EP_Open+0xcc>
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	2201      	movs	r2, #1
 800ad42:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	68f9      	ldr	r1, [r7, #12]
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	f003 fb3f 	bl	800e3d0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	2200      	movs	r2, #0
 800ad56:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800ad5a:	7afb      	ldrb	r3, [r7, #11]
}
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	3710      	adds	r7, #16
 800ad60:	46bd      	mov	sp, r7
 800ad62:	bd80      	pop	{r7, pc}

0800ad64 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b084      	sub	sp, #16
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
 800ad6c:	460b      	mov	r3, r1
 800ad6e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800ad70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	da0f      	bge.n	800ad98 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ad78:	78fb      	ldrb	r3, [r7, #3]
 800ad7a:	f003 020f 	and.w	r2, r3, #15
 800ad7e:	4613      	mov	r3, r2
 800ad80:	00db      	lsls	r3, r3, #3
 800ad82:	4413      	add	r3, r2
 800ad84:	009b      	lsls	r3, r3, #2
 800ad86:	3310      	adds	r3, #16
 800ad88:	687a      	ldr	r2, [r7, #4]
 800ad8a:	4413      	add	r3, r2
 800ad8c:	3304      	adds	r3, #4
 800ad8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	2201      	movs	r2, #1
 800ad94:	705a      	strb	r2, [r3, #1]
 800ad96:	e00f      	b.n	800adb8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ad98:	78fb      	ldrb	r3, [r7, #3]
 800ad9a:	f003 020f 	and.w	r2, r3, #15
 800ad9e:	4613      	mov	r3, r2
 800ada0:	00db      	lsls	r3, r3, #3
 800ada2:	4413      	add	r3, r2
 800ada4:	009b      	lsls	r3, r3, #2
 800ada6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800adaa:	687a      	ldr	r2, [r7, #4]
 800adac:	4413      	add	r3, r2
 800adae:	3304      	adds	r3, #4
 800adb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	2200      	movs	r2, #0
 800adb6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800adb8:	78fb      	ldrb	r3, [r7, #3]
 800adba:	f003 030f 	and.w	r3, r3, #15
 800adbe:	b2da      	uxtb	r2, r3
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800adca:	2b01      	cmp	r3, #1
 800adcc:	d101      	bne.n	800add2 <HAL_PCD_EP_Close+0x6e>
 800adce:	2302      	movs	r3, #2
 800add0:	e00e      	b.n	800adf0 <HAL_PCD_EP_Close+0x8c>
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	2201      	movs	r2, #1
 800add6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	68f9      	ldr	r1, [r7, #12]
 800ade0:	4618      	mov	r0, r3
 800ade2:	f003 fb7d 	bl	800e4e0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	2200      	movs	r2, #0
 800adea:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800adee:	2300      	movs	r3, #0
}
 800adf0:	4618      	mov	r0, r3
 800adf2:	3710      	adds	r7, #16
 800adf4:	46bd      	mov	sp, r7
 800adf6:	bd80      	pop	{r7, pc}

0800adf8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b086      	sub	sp, #24
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	60f8      	str	r0, [r7, #12]
 800ae00:	607a      	str	r2, [r7, #4]
 800ae02:	603b      	str	r3, [r7, #0]
 800ae04:	460b      	mov	r3, r1
 800ae06:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ae08:	7afb      	ldrb	r3, [r7, #11]
 800ae0a:	f003 020f 	and.w	r2, r3, #15
 800ae0e:	4613      	mov	r3, r2
 800ae10:	00db      	lsls	r3, r3, #3
 800ae12:	4413      	add	r3, r2
 800ae14:	009b      	lsls	r3, r3, #2
 800ae16:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800ae1a:	68fa      	ldr	r2, [r7, #12]
 800ae1c:	4413      	add	r3, r2
 800ae1e:	3304      	adds	r3, #4
 800ae20:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800ae22:	697b      	ldr	r3, [r7, #20]
 800ae24:	687a      	ldr	r2, [r7, #4]
 800ae26:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800ae28:	697b      	ldr	r3, [r7, #20]
 800ae2a:	683a      	ldr	r2, [r7, #0]
 800ae2c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800ae2e:	697b      	ldr	r3, [r7, #20]
 800ae30:	2200      	movs	r2, #0
 800ae32:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800ae34:	697b      	ldr	r3, [r7, #20]
 800ae36:	2200      	movs	r2, #0
 800ae38:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ae3a:	7afb      	ldrb	r3, [r7, #11]
 800ae3c:	f003 030f 	and.w	r3, r3, #15
 800ae40:	b2da      	uxtb	r2, r3
 800ae42:	697b      	ldr	r3, [r7, #20]
 800ae44:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	799b      	ldrb	r3, [r3, #6]
 800ae4a:	2b01      	cmp	r3, #1
 800ae4c:	d102      	bne.n	800ae54 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800ae4e:	687a      	ldr	r2, [r7, #4]
 800ae50:	697b      	ldr	r3, [r7, #20]
 800ae52:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	6818      	ldr	r0, [r3, #0]
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	799b      	ldrb	r3, [r3, #6]
 800ae5c:	461a      	mov	r2, r3
 800ae5e:	6979      	ldr	r1, [r7, #20]
 800ae60:	f003 fc1a 	bl	800e698 <USB_EPStartXfer>

  return HAL_OK;
 800ae64:	2300      	movs	r3, #0
}
 800ae66:	4618      	mov	r0, r3
 800ae68:	3718      	adds	r7, #24
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	bd80      	pop	{r7, pc}

0800ae6e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800ae6e:	b480      	push	{r7}
 800ae70:	b083      	sub	sp, #12
 800ae72:	af00      	add	r7, sp, #0
 800ae74:	6078      	str	r0, [r7, #4]
 800ae76:	460b      	mov	r3, r1
 800ae78:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800ae7a:	78fb      	ldrb	r3, [r7, #3]
 800ae7c:	f003 020f 	and.w	r2, r3, #15
 800ae80:	6879      	ldr	r1, [r7, #4]
 800ae82:	4613      	mov	r3, r2
 800ae84:	00db      	lsls	r3, r3, #3
 800ae86:	4413      	add	r3, r2
 800ae88:	009b      	lsls	r3, r3, #2
 800ae8a:	440b      	add	r3, r1
 800ae8c:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800ae90:	681b      	ldr	r3, [r3, #0]
}
 800ae92:	4618      	mov	r0, r3
 800ae94:	370c      	adds	r7, #12
 800ae96:	46bd      	mov	sp, r7
 800ae98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9c:	4770      	bx	lr

0800ae9e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800ae9e:	b580      	push	{r7, lr}
 800aea0:	b086      	sub	sp, #24
 800aea2:	af00      	add	r7, sp, #0
 800aea4:	60f8      	str	r0, [r7, #12]
 800aea6:	607a      	str	r2, [r7, #4]
 800aea8:	603b      	str	r3, [r7, #0]
 800aeaa:	460b      	mov	r3, r1
 800aeac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800aeae:	7afb      	ldrb	r3, [r7, #11]
 800aeb0:	f003 020f 	and.w	r2, r3, #15
 800aeb4:	4613      	mov	r3, r2
 800aeb6:	00db      	lsls	r3, r3, #3
 800aeb8:	4413      	add	r3, r2
 800aeba:	009b      	lsls	r3, r3, #2
 800aebc:	3310      	adds	r3, #16
 800aebe:	68fa      	ldr	r2, [r7, #12]
 800aec0:	4413      	add	r3, r2
 800aec2:	3304      	adds	r3, #4
 800aec4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800aec6:	697b      	ldr	r3, [r7, #20]
 800aec8:	687a      	ldr	r2, [r7, #4]
 800aeca:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800aecc:	697b      	ldr	r3, [r7, #20]
 800aece:	683a      	ldr	r2, [r7, #0]
 800aed0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800aed2:	697b      	ldr	r3, [r7, #20]
 800aed4:	2200      	movs	r2, #0
 800aed6:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800aed8:	697b      	ldr	r3, [r7, #20]
 800aeda:	2201      	movs	r2, #1
 800aedc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800aede:	7afb      	ldrb	r3, [r7, #11]
 800aee0:	f003 030f 	and.w	r3, r3, #15
 800aee4:	b2da      	uxtb	r2, r3
 800aee6:	697b      	ldr	r3, [r7, #20]
 800aee8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	799b      	ldrb	r3, [r3, #6]
 800aeee:	2b01      	cmp	r3, #1
 800aef0:	d102      	bne.n	800aef8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800aef2:	687a      	ldr	r2, [r7, #4]
 800aef4:	697b      	ldr	r3, [r7, #20]
 800aef6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	6818      	ldr	r0, [r3, #0]
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	799b      	ldrb	r3, [r3, #6]
 800af00:	461a      	mov	r2, r3
 800af02:	6979      	ldr	r1, [r7, #20]
 800af04:	f003 fbc8 	bl	800e698 <USB_EPStartXfer>

  return HAL_OK;
 800af08:	2300      	movs	r3, #0
}
 800af0a:	4618      	mov	r0, r3
 800af0c:	3718      	adds	r7, #24
 800af0e:	46bd      	mov	sp, r7
 800af10:	bd80      	pop	{r7, pc}

0800af12 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800af12:	b580      	push	{r7, lr}
 800af14:	b084      	sub	sp, #16
 800af16:	af00      	add	r7, sp, #0
 800af18:	6078      	str	r0, [r7, #4]
 800af1a:	460b      	mov	r3, r1
 800af1c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800af1e:	78fb      	ldrb	r3, [r7, #3]
 800af20:	f003 030f 	and.w	r3, r3, #15
 800af24:	687a      	ldr	r2, [r7, #4]
 800af26:	7912      	ldrb	r2, [r2, #4]
 800af28:	4293      	cmp	r3, r2
 800af2a:	d901      	bls.n	800af30 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800af2c:	2301      	movs	r3, #1
 800af2e:	e04f      	b.n	800afd0 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800af30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800af34:	2b00      	cmp	r3, #0
 800af36:	da0f      	bge.n	800af58 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800af38:	78fb      	ldrb	r3, [r7, #3]
 800af3a:	f003 020f 	and.w	r2, r3, #15
 800af3e:	4613      	mov	r3, r2
 800af40:	00db      	lsls	r3, r3, #3
 800af42:	4413      	add	r3, r2
 800af44:	009b      	lsls	r3, r3, #2
 800af46:	3310      	adds	r3, #16
 800af48:	687a      	ldr	r2, [r7, #4]
 800af4a:	4413      	add	r3, r2
 800af4c:	3304      	adds	r3, #4
 800af4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	2201      	movs	r2, #1
 800af54:	705a      	strb	r2, [r3, #1]
 800af56:	e00d      	b.n	800af74 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800af58:	78fa      	ldrb	r2, [r7, #3]
 800af5a:	4613      	mov	r3, r2
 800af5c:	00db      	lsls	r3, r3, #3
 800af5e:	4413      	add	r3, r2
 800af60:	009b      	lsls	r3, r3, #2
 800af62:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800af66:	687a      	ldr	r2, [r7, #4]
 800af68:	4413      	add	r3, r2
 800af6a:	3304      	adds	r3, #4
 800af6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	2200      	movs	r2, #0
 800af72:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	2201      	movs	r2, #1
 800af78:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800af7a:	78fb      	ldrb	r3, [r7, #3]
 800af7c:	f003 030f 	and.w	r3, r3, #15
 800af80:	b2da      	uxtb	r2, r3
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800af8c:	2b01      	cmp	r3, #1
 800af8e:	d101      	bne.n	800af94 <HAL_PCD_EP_SetStall+0x82>
 800af90:	2302      	movs	r3, #2
 800af92:	e01d      	b.n	800afd0 <HAL_PCD_EP_SetStall+0xbe>
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	2201      	movs	r2, #1
 800af98:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	68f9      	ldr	r1, [r7, #12]
 800afa2:	4618      	mov	r0, r3
 800afa4:	f003 ff56 	bl	800ee54 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800afa8:	78fb      	ldrb	r3, [r7, #3]
 800afaa:	f003 030f 	and.w	r3, r3, #15
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d109      	bne.n	800afc6 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	6818      	ldr	r0, [r3, #0]
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	7999      	ldrb	r1, [r3, #6]
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800afc0:	461a      	mov	r2, r3
 800afc2:	f004 f947 	bl	800f254 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	2200      	movs	r2, #0
 800afca:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800afce:	2300      	movs	r3, #0
}
 800afd0:	4618      	mov	r0, r3
 800afd2:	3710      	adds	r7, #16
 800afd4:	46bd      	mov	sp, r7
 800afd6:	bd80      	pop	{r7, pc}

0800afd8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800afd8:	b580      	push	{r7, lr}
 800afda:	b084      	sub	sp, #16
 800afdc:	af00      	add	r7, sp, #0
 800afde:	6078      	str	r0, [r7, #4]
 800afe0:	460b      	mov	r3, r1
 800afe2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800afe4:	78fb      	ldrb	r3, [r7, #3]
 800afe6:	f003 030f 	and.w	r3, r3, #15
 800afea:	687a      	ldr	r2, [r7, #4]
 800afec:	7912      	ldrb	r2, [r2, #4]
 800afee:	4293      	cmp	r3, r2
 800aff0:	d901      	bls.n	800aff6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800aff2:	2301      	movs	r3, #1
 800aff4:	e042      	b.n	800b07c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800aff6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800affa:	2b00      	cmp	r3, #0
 800affc:	da0f      	bge.n	800b01e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800affe:	78fb      	ldrb	r3, [r7, #3]
 800b000:	f003 020f 	and.w	r2, r3, #15
 800b004:	4613      	mov	r3, r2
 800b006:	00db      	lsls	r3, r3, #3
 800b008:	4413      	add	r3, r2
 800b00a:	009b      	lsls	r3, r3, #2
 800b00c:	3310      	adds	r3, #16
 800b00e:	687a      	ldr	r2, [r7, #4]
 800b010:	4413      	add	r3, r2
 800b012:	3304      	adds	r3, #4
 800b014:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	2201      	movs	r2, #1
 800b01a:	705a      	strb	r2, [r3, #1]
 800b01c:	e00f      	b.n	800b03e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b01e:	78fb      	ldrb	r3, [r7, #3]
 800b020:	f003 020f 	and.w	r2, r3, #15
 800b024:	4613      	mov	r3, r2
 800b026:	00db      	lsls	r3, r3, #3
 800b028:	4413      	add	r3, r2
 800b02a:	009b      	lsls	r3, r3, #2
 800b02c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800b030:	687a      	ldr	r2, [r7, #4]
 800b032:	4413      	add	r3, r2
 800b034:	3304      	adds	r3, #4
 800b036:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	2200      	movs	r2, #0
 800b03c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	2200      	movs	r2, #0
 800b042:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b044:	78fb      	ldrb	r3, [r7, #3]
 800b046:	f003 030f 	and.w	r3, r3, #15
 800b04a:	b2da      	uxtb	r2, r3
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800b056:	2b01      	cmp	r3, #1
 800b058:	d101      	bne.n	800b05e <HAL_PCD_EP_ClrStall+0x86>
 800b05a:	2302      	movs	r3, #2
 800b05c:	e00e      	b.n	800b07c <HAL_PCD_EP_ClrStall+0xa4>
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	2201      	movs	r2, #1
 800b062:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	68f9      	ldr	r1, [r7, #12]
 800b06c:	4618      	mov	r0, r3
 800b06e:	f003 ff5f 	bl	800ef30 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	2200      	movs	r2, #0
 800b076:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800b07a:	2300      	movs	r3, #0
}
 800b07c:	4618      	mov	r0, r3
 800b07e:	3710      	adds	r7, #16
 800b080:	46bd      	mov	sp, r7
 800b082:	bd80      	pop	{r7, pc}

0800b084 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b084:	b580      	push	{r7, lr}
 800b086:	b084      	sub	sp, #16
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
 800b08c:	460b      	mov	r3, r1
 800b08e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800b090:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b094:	2b00      	cmp	r3, #0
 800b096:	da0c      	bge.n	800b0b2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b098:	78fb      	ldrb	r3, [r7, #3]
 800b09a:	f003 020f 	and.w	r2, r3, #15
 800b09e:	4613      	mov	r3, r2
 800b0a0:	00db      	lsls	r3, r3, #3
 800b0a2:	4413      	add	r3, r2
 800b0a4:	009b      	lsls	r3, r3, #2
 800b0a6:	3310      	adds	r3, #16
 800b0a8:	687a      	ldr	r2, [r7, #4]
 800b0aa:	4413      	add	r3, r2
 800b0ac:	3304      	adds	r3, #4
 800b0ae:	60fb      	str	r3, [r7, #12]
 800b0b0:	e00c      	b.n	800b0cc <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b0b2:	78fb      	ldrb	r3, [r7, #3]
 800b0b4:	f003 020f 	and.w	r2, r3, #15
 800b0b8:	4613      	mov	r3, r2
 800b0ba:	00db      	lsls	r3, r3, #3
 800b0bc:	4413      	add	r3, r2
 800b0be:	009b      	lsls	r3, r3, #2
 800b0c0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800b0c4:	687a      	ldr	r2, [r7, #4]
 800b0c6:	4413      	add	r3, r2
 800b0c8:	3304      	adds	r3, #4
 800b0ca:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	68f9      	ldr	r1, [r7, #12]
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	f003 fd7e 	bl	800ebd4 <USB_EPStopXfer>
 800b0d8:	4603      	mov	r3, r0
 800b0da:	72fb      	strb	r3, [r7, #11]

  return ret;
 800b0dc:	7afb      	ldrb	r3, [r7, #11]
}
 800b0de:	4618      	mov	r0, r3
 800b0e0:	3710      	adds	r7, #16
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	bd80      	pop	{r7, pc}

0800b0e6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800b0e6:	b580      	push	{r7, lr}
 800b0e8:	b08a      	sub	sp, #40	@ 0x28
 800b0ea:	af02      	add	r7, sp, #8
 800b0ec:	6078      	str	r0, [r7, #4]
 800b0ee:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b0f6:	697b      	ldr	r3, [r7, #20]
 800b0f8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800b0fa:	683a      	ldr	r2, [r7, #0]
 800b0fc:	4613      	mov	r3, r2
 800b0fe:	00db      	lsls	r3, r3, #3
 800b100:	4413      	add	r3, r2
 800b102:	009b      	lsls	r3, r3, #2
 800b104:	3310      	adds	r3, #16
 800b106:	687a      	ldr	r2, [r7, #4]
 800b108:	4413      	add	r3, r2
 800b10a:	3304      	adds	r3, #4
 800b10c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	695a      	ldr	r2, [r3, #20]
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	691b      	ldr	r3, [r3, #16]
 800b116:	429a      	cmp	r2, r3
 800b118:	d901      	bls.n	800b11e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800b11a:	2301      	movs	r3, #1
 800b11c:	e06b      	b.n	800b1f6 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	691a      	ldr	r2, [r3, #16]
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	695b      	ldr	r3, [r3, #20]
 800b126:	1ad3      	subs	r3, r2, r3
 800b128:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	689b      	ldr	r3, [r3, #8]
 800b12e:	69fa      	ldr	r2, [r7, #28]
 800b130:	429a      	cmp	r2, r3
 800b132:	d902      	bls.n	800b13a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	689b      	ldr	r3, [r3, #8]
 800b138:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800b13a:	69fb      	ldr	r3, [r7, #28]
 800b13c:	3303      	adds	r3, #3
 800b13e:	089b      	lsrs	r3, r3, #2
 800b140:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800b142:	e02a      	b.n	800b19a <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	691a      	ldr	r2, [r3, #16]
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	695b      	ldr	r3, [r3, #20]
 800b14c:	1ad3      	subs	r3, r2, r3
 800b14e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	689b      	ldr	r3, [r3, #8]
 800b154:	69fa      	ldr	r2, [r7, #28]
 800b156:	429a      	cmp	r2, r3
 800b158:	d902      	bls.n	800b160 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	689b      	ldr	r3, [r3, #8]
 800b15e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800b160:	69fb      	ldr	r3, [r7, #28]
 800b162:	3303      	adds	r3, #3
 800b164:	089b      	lsrs	r3, r3, #2
 800b166:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	68d9      	ldr	r1, [r3, #12]
 800b16c:	683b      	ldr	r3, [r7, #0]
 800b16e:	b2da      	uxtb	r2, r3
 800b170:	69fb      	ldr	r3, [r7, #28]
 800b172:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800b178:	9300      	str	r3, [sp, #0]
 800b17a:	4603      	mov	r3, r0
 800b17c:	6978      	ldr	r0, [r7, #20]
 800b17e:	f003 fdd3 	bl	800ed28 <USB_WritePacket>

    ep->xfer_buff  += len;
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	68da      	ldr	r2, [r3, #12]
 800b186:	69fb      	ldr	r3, [r7, #28]
 800b188:	441a      	add	r2, r3
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	695a      	ldr	r2, [r3, #20]
 800b192:	69fb      	ldr	r3, [r7, #28]
 800b194:	441a      	add	r2, r3
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800b19a:	683b      	ldr	r3, [r7, #0]
 800b19c:	015a      	lsls	r2, r3, #5
 800b19e:	693b      	ldr	r3, [r7, #16]
 800b1a0:	4413      	add	r3, r2
 800b1a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b1a6:	699b      	ldr	r3, [r3, #24]
 800b1a8:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800b1aa:	69ba      	ldr	r2, [r7, #24]
 800b1ac:	429a      	cmp	r2, r3
 800b1ae:	d809      	bhi.n	800b1c4 <PCD_WriteEmptyTxFifo+0xde>
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	695a      	ldr	r2, [r3, #20]
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800b1b8:	429a      	cmp	r2, r3
 800b1ba:	d203      	bcs.n	800b1c4 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	691b      	ldr	r3, [r3, #16]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d1bf      	bne.n	800b144 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	691a      	ldr	r2, [r3, #16]
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	695b      	ldr	r3, [r3, #20]
 800b1cc:	429a      	cmp	r2, r3
 800b1ce:	d811      	bhi.n	800b1f4 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800b1d0:	683b      	ldr	r3, [r7, #0]
 800b1d2:	f003 030f 	and.w	r3, r3, #15
 800b1d6:	2201      	movs	r2, #1
 800b1d8:	fa02 f303 	lsl.w	r3, r2, r3
 800b1dc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800b1de:	693b      	ldr	r3, [r7, #16]
 800b1e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b1e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b1e6:	68bb      	ldr	r3, [r7, #8]
 800b1e8:	43db      	mvns	r3, r3
 800b1ea:	6939      	ldr	r1, [r7, #16]
 800b1ec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b1f0:	4013      	ands	r3, r2
 800b1f2:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800b1f4:	2300      	movs	r3, #0
}
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	3720      	adds	r7, #32
 800b1fa:	46bd      	mov	sp, r7
 800b1fc:	bd80      	pop	{r7, pc}
	...

0800b200 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800b200:	b580      	push	{r7, lr}
 800b202:	b088      	sub	sp, #32
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]
 800b208:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b210:	69fb      	ldr	r3, [r7, #28]
 800b212:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800b214:	69fb      	ldr	r3, [r7, #28]
 800b216:	333c      	adds	r3, #60	@ 0x3c
 800b218:	3304      	adds	r3, #4
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800b21e:	683b      	ldr	r3, [r7, #0]
 800b220:	015a      	lsls	r2, r3, #5
 800b222:	69bb      	ldr	r3, [r7, #24]
 800b224:	4413      	add	r3, r2
 800b226:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b22a:	689b      	ldr	r3, [r3, #8]
 800b22c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	799b      	ldrb	r3, [r3, #6]
 800b232:	2b01      	cmp	r3, #1
 800b234:	d17b      	bne.n	800b32e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800b236:	693b      	ldr	r3, [r7, #16]
 800b238:	f003 0308 	and.w	r3, r3, #8
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d015      	beq.n	800b26c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b240:	697b      	ldr	r3, [r7, #20]
 800b242:	4a61      	ldr	r2, [pc, #388]	@ (800b3c8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800b244:	4293      	cmp	r3, r2
 800b246:	f240 80b9 	bls.w	800b3bc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800b24a:	693b      	ldr	r3, [r7, #16]
 800b24c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b250:	2b00      	cmp	r3, #0
 800b252:	f000 80b3 	beq.w	800b3bc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800b256:	683b      	ldr	r3, [r7, #0]
 800b258:	015a      	lsls	r2, r3, #5
 800b25a:	69bb      	ldr	r3, [r7, #24]
 800b25c:	4413      	add	r3, r2
 800b25e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b262:	461a      	mov	r2, r3
 800b264:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b268:	6093      	str	r3, [r2, #8]
 800b26a:	e0a7      	b.n	800b3bc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800b26c:	693b      	ldr	r3, [r7, #16]
 800b26e:	f003 0320 	and.w	r3, r3, #32
 800b272:	2b00      	cmp	r3, #0
 800b274:	d009      	beq.n	800b28a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800b276:	683b      	ldr	r3, [r7, #0]
 800b278:	015a      	lsls	r2, r3, #5
 800b27a:	69bb      	ldr	r3, [r7, #24]
 800b27c:	4413      	add	r3, r2
 800b27e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b282:	461a      	mov	r2, r3
 800b284:	2320      	movs	r3, #32
 800b286:	6093      	str	r3, [r2, #8]
 800b288:	e098      	b.n	800b3bc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800b28a:	693b      	ldr	r3, [r7, #16]
 800b28c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800b290:	2b00      	cmp	r3, #0
 800b292:	f040 8093 	bne.w	800b3bc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b296:	697b      	ldr	r3, [r7, #20]
 800b298:	4a4b      	ldr	r2, [pc, #300]	@ (800b3c8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800b29a:	4293      	cmp	r3, r2
 800b29c:	d90f      	bls.n	800b2be <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800b29e:	693b      	ldr	r3, [r7, #16]
 800b2a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d00a      	beq.n	800b2be <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800b2a8:	683b      	ldr	r3, [r7, #0]
 800b2aa:	015a      	lsls	r2, r3, #5
 800b2ac:	69bb      	ldr	r3, [r7, #24]
 800b2ae:	4413      	add	r3, r2
 800b2b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b2b4:	461a      	mov	r2, r3
 800b2b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b2ba:	6093      	str	r3, [r2, #8]
 800b2bc:	e07e      	b.n	800b3bc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800b2be:	683a      	ldr	r2, [r7, #0]
 800b2c0:	4613      	mov	r3, r2
 800b2c2:	00db      	lsls	r3, r3, #3
 800b2c4:	4413      	add	r3, r2
 800b2c6:	009b      	lsls	r3, r3, #2
 800b2c8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800b2cc:	687a      	ldr	r2, [r7, #4]
 800b2ce:	4413      	add	r3, r2
 800b2d0:	3304      	adds	r3, #4
 800b2d2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	6a1a      	ldr	r2, [r3, #32]
 800b2d8:	683b      	ldr	r3, [r7, #0]
 800b2da:	0159      	lsls	r1, r3, #5
 800b2dc:	69bb      	ldr	r3, [r7, #24]
 800b2de:	440b      	add	r3, r1
 800b2e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b2e4:	691b      	ldr	r3, [r3, #16]
 800b2e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b2ea:	1ad2      	subs	r2, r2, r3
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800b2f0:	683b      	ldr	r3, [r7, #0]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d114      	bne.n	800b320 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	691b      	ldr	r3, [r3, #16]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d109      	bne.n	800b312 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	6818      	ldr	r0, [r3, #0]
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800b308:	461a      	mov	r2, r3
 800b30a:	2101      	movs	r1, #1
 800b30c:	f003 ffa2 	bl	800f254 <USB_EP0_OutStart>
 800b310:	e006      	b.n	800b320 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	68da      	ldr	r2, [r3, #12]
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	695b      	ldr	r3, [r3, #20]
 800b31a:	441a      	add	r2, r3
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800b320:	683b      	ldr	r3, [r7, #0]
 800b322:	b2db      	uxtb	r3, r3
 800b324:	4619      	mov	r1, r3
 800b326:	6878      	ldr	r0, [r7, #4]
 800b328:	f006 face 	bl	80118c8 <HAL_PCD_DataOutStageCallback>
 800b32c:	e046      	b.n	800b3bc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800b32e:	697b      	ldr	r3, [r7, #20]
 800b330:	4a26      	ldr	r2, [pc, #152]	@ (800b3cc <PCD_EP_OutXfrComplete_int+0x1cc>)
 800b332:	4293      	cmp	r3, r2
 800b334:	d124      	bne.n	800b380 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800b336:	693b      	ldr	r3, [r7, #16]
 800b338:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d00a      	beq.n	800b356 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800b340:	683b      	ldr	r3, [r7, #0]
 800b342:	015a      	lsls	r2, r3, #5
 800b344:	69bb      	ldr	r3, [r7, #24]
 800b346:	4413      	add	r3, r2
 800b348:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b34c:	461a      	mov	r2, r3
 800b34e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b352:	6093      	str	r3, [r2, #8]
 800b354:	e032      	b.n	800b3bc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800b356:	693b      	ldr	r3, [r7, #16]
 800b358:	f003 0320 	and.w	r3, r3, #32
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d008      	beq.n	800b372 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800b360:	683b      	ldr	r3, [r7, #0]
 800b362:	015a      	lsls	r2, r3, #5
 800b364:	69bb      	ldr	r3, [r7, #24]
 800b366:	4413      	add	r3, r2
 800b368:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b36c:	461a      	mov	r2, r3
 800b36e:	2320      	movs	r3, #32
 800b370:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800b372:	683b      	ldr	r3, [r7, #0]
 800b374:	b2db      	uxtb	r3, r3
 800b376:	4619      	mov	r1, r3
 800b378:	6878      	ldr	r0, [r7, #4]
 800b37a:	f006 faa5 	bl	80118c8 <HAL_PCD_DataOutStageCallback>
 800b37e:	e01d      	b.n	800b3bc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800b380:	683b      	ldr	r3, [r7, #0]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d114      	bne.n	800b3b0 <PCD_EP_OutXfrComplete_int+0x1b0>
 800b386:	6879      	ldr	r1, [r7, #4]
 800b388:	683a      	ldr	r2, [r7, #0]
 800b38a:	4613      	mov	r3, r2
 800b38c:	00db      	lsls	r3, r3, #3
 800b38e:	4413      	add	r3, r2
 800b390:	009b      	lsls	r3, r3, #2
 800b392:	440b      	add	r3, r1
 800b394:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d108      	bne.n	800b3b0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	6818      	ldr	r0, [r3, #0]
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800b3a8:	461a      	mov	r2, r3
 800b3aa:	2100      	movs	r1, #0
 800b3ac:	f003 ff52 	bl	800f254 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800b3b0:	683b      	ldr	r3, [r7, #0]
 800b3b2:	b2db      	uxtb	r3, r3
 800b3b4:	4619      	mov	r1, r3
 800b3b6:	6878      	ldr	r0, [r7, #4]
 800b3b8:	f006 fa86 	bl	80118c8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800b3bc:	2300      	movs	r3, #0
}
 800b3be:	4618      	mov	r0, r3
 800b3c0:	3720      	adds	r7, #32
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	bd80      	pop	{r7, pc}
 800b3c6:	bf00      	nop
 800b3c8:	4f54300a 	.word	0x4f54300a
 800b3cc:	4f54310a 	.word	0x4f54310a

0800b3d0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	b086      	sub	sp, #24
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
 800b3d8:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3e0:	697b      	ldr	r3, [r7, #20]
 800b3e2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800b3e4:	697b      	ldr	r3, [r7, #20]
 800b3e6:	333c      	adds	r3, #60	@ 0x3c
 800b3e8:	3304      	adds	r3, #4
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800b3ee:	683b      	ldr	r3, [r7, #0]
 800b3f0:	015a      	lsls	r2, r3, #5
 800b3f2:	693b      	ldr	r3, [r7, #16]
 800b3f4:	4413      	add	r3, r2
 800b3f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b3fa:	689b      	ldr	r3, [r3, #8]
 800b3fc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	4a15      	ldr	r2, [pc, #84]	@ (800b458 <PCD_EP_OutSetupPacket_int+0x88>)
 800b402:	4293      	cmp	r3, r2
 800b404:	d90e      	bls.n	800b424 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800b406:	68bb      	ldr	r3, [r7, #8]
 800b408:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d009      	beq.n	800b424 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800b410:	683b      	ldr	r3, [r7, #0]
 800b412:	015a      	lsls	r2, r3, #5
 800b414:	693b      	ldr	r3, [r7, #16]
 800b416:	4413      	add	r3, r2
 800b418:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b41c:	461a      	mov	r2, r3
 800b41e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b422:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800b424:	6878      	ldr	r0, [r7, #4]
 800b426:	f006 fa3d 	bl	80118a4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	4a0a      	ldr	r2, [pc, #40]	@ (800b458 <PCD_EP_OutSetupPacket_int+0x88>)
 800b42e:	4293      	cmp	r3, r2
 800b430:	d90c      	bls.n	800b44c <PCD_EP_OutSetupPacket_int+0x7c>
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	799b      	ldrb	r3, [r3, #6]
 800b436:	2b01      	cmp	r3, #1
 800b438:	d108      	bne.n	800b44c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	6818      	ldr	r0, [r3, #0]
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800b444:	461a      	mov	r2, r3
 800b446:	2101      	movs	r1, #1
 800b448:	f003 ff04 	bl	800f254 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800b44c:	2300      	movs	r3, #0
}
 800b44e:	4618      	mov	r0, r3
 800b450:	3718      	adds	r7, #24
 800b452:	46bd      	mov	sp, r7
 800b454:	bd80      	pop	{r7, pc}
 800b456:	bf00      	nop
 800b458:	4f54300a 	.word	0x4f54300a

0800b45c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800b45c:	b480      	push	{r7}
 800b45e:	b085      	sub	sp, #20
 800b460:	af00      	add	r7, sp, #0
 800b462:	6078      	str	r0, [r7, #4]
 800b464:	460b      	mov	r3, r1
 800b466:	70fb      	strb	r3, [r7, #3]
 800b468:	4613      	mov	r3, r2
 800b46a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b472:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800b474:	78fb      	ldrb	r3, [r7, #3]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d107      	bne.n	800b48a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800b47a:	883b      	ldrh	r3, [r7, #0]
 800b47c:	0419      	lsls	r1, r3, #16
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	68ba      	ldr	r2, [r7, #8]
 800b484:	430a      	orrs	r2, r1
 800b486:	629a      	str	r2, [r3, #40]	@ 0x28
 800b488:	e028      	b.n	800b4dc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b490:	0c1b      	lsrs	r3, r3, #16
 800b492:	68ba      	ldr	r2, [r7, #8]
 800b494:	4413      	add	r3, r2
 800b496:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800b498:	2300      	movs	r3, #0
 800b49a:	73fb      	strb	r3, [r7, #15]
 800b49c:	e00d      	b.n	800b4ba <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	681a      	ldr	r2, [r3, #0]
 800b4a2:	7bfb      	ldrb	r3, [r7, #15]
 800b4a4:	3340      	adds	r3, #64	@ 0x40
 800b4a6:	009b      	lsls	r3, r3, #2
 800b4a8:	4413      	add	r3, r2
 800b4aa:	685b      	ldr	r3, [r3, #4]
 800b4ac:	0c1b      	lsrs	r3, r3, #16
 800b4ae:	68ba      	ldr	r2, [r7, #8]
 800b4b0:	4413      	add	r3, r2
 800b4b2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800b4b4:	7bfb      	ldrb	r3, [r7, #15]
 800b4b6:	3301      	adds	r3, #1
 800b4b8:	73fb      	strb	r3, [r7, #15]
 800b4ba:	7bfa      	ldrb	r2, [r7, #15]
 800b4bc:	78fb      	ldrb	r3, [r7, #3]
 800b4be:	3b01      	subs	r3, #1
 800b4c0:	429a      	cmp	r2, r3
 800b4c2:	d3ec      	bcc.n	800b49e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800b4c4:	883b      	ldrh	r3, [r7, #0]
 800b4c6:	0418      	lsls	r0, r3, #16
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	6819      	ldr	r1, [r3, #0]
 800b4cc:	78fb      	ldrb	r3, [r7, #3]
 800b4ce:	3b01      	subs	r3, #1
 800b4d0:	68ba      	ldr	r2, [r7, #8]
 800b4d2:	4302      	orrs	r2, r0
 800b4d4:	3340      	adds	r3, #64	@ 0x40
 800b4d6:	009b      	lsls	r3, r3, #2
 800b4d8:	440b      	add	r3, r1
 800b4da:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800b4dc:	2300      	movs	r3, #0
}
 800b4de:	4618      	mov	r0, r3
 800b4e0:	3714      	adds	r7, #20
 800b4e2:	46bd      	mov	sp, r7
 800b4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e8:	4770      	bx	lr

0800b4ea <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800b4ea:	b480      	push	{r7}
 800b4ec:	b083      	sub	sp, #12
 800b4ee:	af00      	add	r7, sp, #0
 800b4f0:	6078      	str	r0, [r7, #4]
 800b4f2:	460b      	mov	r3, r1
 800b4f4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	887a      	ldrh	r2, [r7, #2]
 800b4fc:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800b4fe:	2300      	movs	r3, #0
}
 800b500:	4618      	mov	r0, r3
 800b502:	370c      	adds	r7, #12
 800b504:	46bd      	mov	sp, r7
 800b506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b50a:	4770      	bx	lr

0800b50c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800b50c:	b480      	push	{r7}
 800b50e:	b083      	sub	sp, #12
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]
 800b514:	460b      	mov	r3, r1
 800b516:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800b518:	bf00      	nop
 800b51a:	370c      	adds	r7, #12
 800b51c:	46bd      	mov	sp, r7
 800b51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b522:	4770      	bx	lr

0800b524 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b524:	b580      	push	{r7, lr}
 800b526:	b086      	sub	sp, #24
 800b528:	af00      	add	r7, sp, #0
 800b52a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d101      	bne.n	800b536 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b532:	2301      	movs	r3, #1
 800b534:	e267      	b.n	800ba06 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	f003 0301 	and.w	r3, r3, #1
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d075      	beq.n	800b62e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800b542:	4b88      	ldr	r3, [pc, #544]	@ (800b764 <HAL_RCC_OscConfig+0x240>)
 800b544:	689b      	ldr	r3, [r3, #8]
 800b546:	f003 030c 	and.w	r3, r3, #12
 800b54a:	2b04      	cmp	r3, #4
 800b54c:	d00c      	beq.n	800b568 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b54e:	4b85      	ldr	r3, [pc, #532]	@ (800b764 <HAL_RCC_OscConfig+0x240>)
 800b550:	689b      	ldr	r3, [r3, #8]
 800b552:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800b556:	2b08      	cmp	r3, #8
 800b558:	d112      	bne.n	800b580 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b55a:	4b82      	ldr	r3, [pc, #520]	@ (800b764 <HAL_RCC_OscConfig+0x240>)
 800b55c:	685b      	ldr	r3, [r3, #4]
 800b55e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b562:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b566:	d10b      	bne.n	800b580 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b568:	4b7e      	ldr	r3, [pc, #504]	@ (800b764 <HAL_RCC_OscConfig+0x240>)
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b570:	2b00      	cmp	r3, #0
 800b572:	d05b      	beq.n	800b62c <HAL_RCC_OscConfig+0x108>
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	685b      	ldr	r3, [r3, #4]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d157      	bne.n	800b62c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800b57c:	2301      	movs	r3, #1
 800b57e:	e242      	b.n	800ba06 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	685b      	ldr	r3, [r3, #4]
 800b584:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b588:	d106      	bne.n	800b598 <HAL_RCC_OscConfig+0x74>
 800b58a:	4b76      	ldr	r3, [pc, #472]	@ (800b764 <HAL_RCC_OscConfig+0x240>)
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	4a75      	ldr	r2, [pc, #468]	@ (800b764 <HAL_RCC_OscConfig+0x240>)
 800b590:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b594:	6013      	str	r3, [r2, #0]
 800b596:	e01d      	b.n	800b5d4 <HAL_RCC_OscConfig+0xb0>
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	685b      	ldr	r3, [r3, #4]
 800b59c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b5a0:	d10c      	bne.n	800b5bc <HAL_RCC_OscConfig+0x98>
 800b5a2:	4b70      	ldr	r3, [pc, #448]	@ (800b764 <HAL_RCC_OscConfig+0x240>)
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	4a6f      	ldr	r2, [pc, #444]	@ (800b764 <HAL_RCC_OscConfig+0x240>)
 800b5a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b5ac:	6013      	str	r3, [r2, #0]
 800b5ae:	4b6d      	ldr	r3, [pc, #436]	@ (800b764 <HAL_RCC_OscConfig+0x240>)
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	4a6c      	ldr	r2, [pc, #432]	@ (800b764 <HAL_RCC_OscConfig+0x240>)
 800b5b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b5b8:	6013      	str	r3, [r2, #0]
 800b5ba:	e00b      	b.n	800b5d4 <HAL_RCC_OscConfig+0xb0>
 800b5bc:	4b69      	ldr	r3, [pc, #420]	@ (800b764 <HAL_RCC_OscConfig+0x240>)
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	4a68      	ldr	r2, [pc, #416]	@ (800b764 <HAL_RCC_OscConfig+0x240>)
 800b5c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b5c6:	6013      	str	r3, [r2, #0]
 800b5c8:	4b66      	ldr	r3, [pc, #408]	@ (800b764 <HAL_RCC_OscConfig+0x240>)
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	4a65      	ldr	r2, [pc, #404]	@ (800b764 <HAL_RCC_OscConfig+0x240>)
 800b5ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b5d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	685b      	ldr	r3, [r3, #4]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d013      	beq.n	800b604 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b5dc:	f7f9 fd14 	bl	8005008 <HAL_GetTick>
 800b5e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b5e2:	e008      	b.n	800b5f6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b5e4:	f7f9 fd10 	bl	8005008 <HAL_GetTick>
 800b5e8:	4602      	mov	r2, r0
 800b5ea:	693b      	ldr	r3, [r7, #16]
 800b5ec:	1ad3      	subs	r3, r2, r3
 800b5ee:	2b64      	cmp	r3, #100	@ 0x64
 800b5f0:	d901      	bls.n	800b5f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800b5f2:	2303      	movs	r3, #3
 800b5f4:	e207      	b.n	800ba06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b5f6:	4b5b      	ldr	r3, [pc, #364]	@ (800b764 <HAL_RCC_OscConfig+0x240>)
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d0f0      	beq.n	800b5e4 <HAL_RCC_OscConfig+0xc0>
 800b602:	e014      	b.n	800b62e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b604:	f7f9 fd00 	bl	8005008 <HAL_GetTick>
 800b608:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b60a:	e008      	b.n	800b61e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b60c:	f7f9 fcfc 	bl	8005008 <HAL_GetTick>
 800b610:	4602      	mov	r2, r0
 800b612:	693b      	ldr	r3, [r7, #16]
 800b614:	1ad3      	subs	r3, r2, r3
 800b616:	2b64      	cmp	r3, #100	@ 0x64
 800b618:	d901      	bls.n	800b61e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b61a:	2303      	movs	r3, #3
 800b61c:	e1f3      	b.n	800ba06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b61e:	4b51      	ldr	r3, [pc, #324]	@ (800b764 <HAL_RCC_OscConfig+0x240>)
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b626:	2b00      	cmp	r3, #0
 800b628:	d1f0      	bne.n	800b60c <HAL_RCC_OscConfig+0xe8>
 800b62a:	e000      	b.n	800b62e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b62c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	f003 0302 	and.w	r3, r3, #2
 800b636:	2b00      	cmp	r3, #0
 800b638:	d063      	beq.n	800b702 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800b63a:	4b4a      	ldr	r3, [pc, #296]	@ (800b764 <HAL_RCC_OscConfig+0x240>)
 800b63c:	689b      	ldr	r3, [r3, #8]
 800b63e:	f003 030c 	and.w	r3, r3, #12
 800b642:	2b00      	cmp	r3, #0
 800b644:	d00b      	beq.n	800b65e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b646:	4b47      	ldr	r3, [pc, #284]	@ (800b764 <HAL_RCC_OscConfig+0x240>)
 800b648:	689b      	ldr	r3, [r3, #8]
 800b64a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800b64e:	2b08      	cmp	r3, #8
 800b650:	d11c      	bne.n	800b68c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b652:	4b44      	ldr	r3, [pc, #272]	@ (800b764 <HAL_RCC_OscConfig+0x240>)
 800b654:	685b      	ldr	r3, [r3, #4]
 800b656:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d116      	bne.n	800b68c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b65e:	4b41      	ldr	r3, [pc, #260]	@ (800b764 <HAL_RCC_OscConfig+0x240>)
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	f003 0302 	and.w	r3, r3, #2
 800b666:	2b00      	cmp	r3, #0
 800b668:	d005      	beq.n	800b676 <HAL_RCC_OscConfig+0x152>
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	68db      	ldr	r3, [r3, #12]
 800b66e:	2b01      	cmp	r3, #1
 800b670:	d001      	beq.n	800b676 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800b672:	2301      	movs	r3, #1
 800b674:	e1c7      	b.n	800ba06 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b676:	4b3b      	ldr	r3, [pc, #236]	@ (800b764 <HAL_RCC_OscConfig+0x240>)
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	691b      	ldr	r3, [r3, #16]
 800b682:	00db      	lsls	r3, r3, #3
 800b684:	4937      	ldr	r1, [pc, #220]	@ (800b764 <HAL_RCC_OscConfig+0x240>)
 800b686:	4313      	orrs	r3, r2
 800b688:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b68a:	e03a      	b.n	800b702 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	68db      	ldr	r3, [r3, #12]
 800b690:	2b00      	cmp	r3, #0
 800b692:	d020      	beq.n	800b6d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b694:	4b34      	ldr	r3, [pc, #208]	@ (800b768 <HAL_RCC_OscConfig+0x244>)
 800b696:	2201      	movs	r2, #1
 800b698:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b69a:	f7f9 fcb5 	bl	8005008 <HAL_GetTick>
 800b69e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b6a0:	e008      	b.n	800b6b4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b6a2:	f7f9 fcb1 	bl	8005008 <HAL_GetTick>
 800b6a6:	4602      	mov	r2, r0
 800b6a8:	693b      	ldr	r3, [r7, #16]
 800b6aa:	1ad3      	subs	r3, r2, r3
 800b6ac:	2b02      	cmp	r3, #2
 800b6ae:	d901      	bls.n	800b6b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800b6b0:	2303      	movs	r3, #3
 800b6b2:	e1a8      	b.n	800ba06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b6b4:	4b2b      	ldr	r3, [pc, #172]	@ (800b764 <HAL_RCC_OscConfig+0x240>)
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	f003 0302 	and.w	r3, r3, #2
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d0f0      	beq.n	800b6a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b6c0:	4b28      	ldr	r3, [pc, #160]	@ (800b764 <HAL_RCC_OscConfig+0x240>)
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	691b      	ldr	r3, [r3, #16]
 800b6cc:	00db      	lsls	r3, r3, #3
 800b6ce:	4925      	ldr	r1, [pc, #148]	@ (800b764 <HAL_RCC_OscConfig+0x240>)
 800b6d0:	4313      	orrs	r3, r2
 800b6d2:	600b      	str	r3, [r1, #0]
 800b6d4:	e015      	b.n	800b702 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b6d6:	4b24      	ldr	r3, [pc, #144]	@ (800b768 <HAL_RCC_OscConfig+0x244>)
 800b6d8:	2200      	movs	r2, #0
 800b6da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b6dc:	f7f9 fc94 	bl	8005008 <HAL_GetTick>
 800b6e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b6e2:	e008      	b.n	800b6f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b6e4:	f7f9 fc90 	bl	8005008 <HAL_GetTick>
 800b6e8:	4602      	mov	r2, r0
 800b6ea:	693b      	ldr	r3, [r7, #16]
 800b6ec:	1ad3      	subs	r3, r2, r3
 800b6ee:	2b02      	cmp	r3, #2
 800b6f0:	d901      	bls.n	800b6f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800b6f2:	2303      	movs	r3, #3
 800b6f4:	e187      	b.n	800ba06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b6f6:	4b1b      	ldr	r3, [pc, #108]	@ (800b764 <HAL_RCC_OscConfig+0x240>)
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	f003 0302 	and.w	r3, r3, #2
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d1f0      	bne.n	800b6e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	f003 0308 	and.w	r3, r3, #8
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d036      	beq.n	800b77c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	695b      	ldr	r3, [r3, #20]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d016      	beq.n	800b744 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b716:	4b15      	ldr	r3, [pc, #84]	@ (800b76c <HAL_RCC_OscConfig+0x248>)
 800b718:	2201      	movs	r2, #1
 800b71a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b71c:	f7f9 fc74 	bl	8005008 <HAL_GetTick>
 800b720:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b722:	e008      	b.n	800b736 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b724:	f7f9 fc70 	bl	8005008 <HAL_GetTick>
 800b728:	4602      	mov	r2, r0
 800b72a:	693b      	ldr	r3, [r7, #16]
 800b72c:	1ad3      	subs	r3, r2, r3
 800b72e:	2b02      	cmp	r3, #2
 800b730:	d901      	bls.n	800b736 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800b732:	2303      	movs	r3, #3
 800b734:	e167      	b.n	800ba06 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b736:	4b0b      	ldr	r3, [pc, #44]	@ (800b764 <HAL_RCC_OscConfig+0x240>)
 800b738:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b73a:	f003 0302 	and.w	r3, r3, #2
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d0f0      	beq.n	800b724 <HAL_RCC_OscConfig+0x200>
 800b742:	e01b      	b.n	800b77c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b744:	4b09      	ldr	r3, [pc, #36]	@ (800b76c <HAL_RCC_OscConfig+0x248>)
 800b746:	2200      	movs	r2, #0
 800b748:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b74a:	f7f9 fc5d 	bl	8005008 <HAL_GetTick>
 800b74e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b750:	e00e      	b.n	800b770 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b752:	f7f9 fc59 	bl	8005008 <HAL_GetTick>
 800b756:	4602      	mov	r2, r0
 800b758:	693b      	ldr	r3, [r7, #16]
 800b75a:	1ad3      	subs	r3, r2, r3
 800b75c:	2b02      	cmp	r3, #2
 800b75e:	d907      	bls.n	800b770 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800b760:	2303      	movs	r3, #3
 800b762:	e150      	b.n	800ba06 <HAL_RCC_OscConfig+0x4e2>
 800b764:	40023800 	.word	0x40023800
 800b768:	42470000 	.word	0x42470000
 800b76c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b770:	4b88      	ldr	r3, [pc, #544]	@ (800b994 <HAL_RCC_OscConfig+0x470>)
 800b772:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b774:	f003 0302 	and.w	r3, r3, #2
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d1ea      	bne.n	800b752 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	f003 0304 	and.w	r3, r3, #4
 800b784:	2b00      	cmp	r3, #0
 800b786:	f000 8097 	beq.w	800b8b8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b78a:	2300      	movs	r3, #0
 800b78c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b78e:	4b81      	ldr	r3, [pc, #516]	@ (800b994 <HAL_RCC_OscConfig+0x470>)
 800b790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b792:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b796:	2b00      	cmp	r3, #0
 800b798:	d10f      	bne.n	800b7ba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b79a:	2300      	movs	r3, #0
 800b79c:	60bb      	str	r3, [r7, #8]
 800b79e:	4b7d      	ldr	r3, [pc, #500]	@ (800b994 <HAL_RCC_OscConfig+0x470>)
 800b7a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b7a2:	4a7c      	ldr	r2, [pc, #496]	@ (800b994 <HAL_RCC_OscConfig+0x470>)
 800b7a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b7a8:	6413      	str	r3, [r2, #64]	@ 0x40
 800b7aa:	4b7a      	ldr	r3, [pc, #488]	@ (800b994 <HAL_RCC_OscConfig+0x470>)
 800b7ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b7ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b7b2:	60bb      	str	r3, [r7, #8]
 800b7b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b7b6:	2301      	movs	r3, #1
 800b7b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b7ba:	4b77      	ldr	r3, [pc, #476]	@ (800b998 <HAL_RCC_OscConfig+0x474>)
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d118      	bne.n	800b7f8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b7c6:	4b74      	ldr	r3, [pc, #464]	@ (800b998 <HAL_RCC_OscConfig+0x474>)
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	4a73      	ldr	r2, [pc, #460]	@ (800b998 <HAL_RCC_OscConfig+0x474>)
 800b7cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b7d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b7d2:	f7f9 fc19 	bl	8005008 <HAL_GetTick>
 800b7d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b7d8:	e008      	b.n	800b7ec <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b7da:	f7f9 fc15 	bl	8005008 <HAL_GetTick>
 800b7de:	4602      	mov	r2, r0
 800b7e0:	693b      	ldr	r3, [r7, #16]
 800b7e2:	1ad3      	subs	r3, r2, r3
 800b7e4:	2b02      	cmp	r3, #2
 800b7e6:	d901      	bls.n	800b7ec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800b7e8:	2303      	movs	r3, #3
 800b7ea:	e10c      	b.n	800ba06 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b7ec:	4b6a      	ldr	r3, [pc, #424]	@ (800b998 <HAL_RCC_OscConfig+0x474>)
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d0f0      	beq.n	800b7da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	689b      	ldr	r3, [r3, #8]
 800b7fc:	2b01      	cmp	r3, #1
 800b7fe:	d106      	bne.n	800b80e <HAL_RCC_OscConfig+0x2ea>
 800b800:	4b64      	ldr	r3, [pc, #400]	@ (800b994 <HAL_RCC_OscConfig+0x470>)
 800b802:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b804:	4a63      	ldr	r2, [pc, #396]	@ (800b994 <HAL_RCC_OscConfig+0x470>)
 800b806:	f043 0301 	orr.w	r3, r3, #1
 800b80a:	6713      	str	r3, [r2, #112]	@ 0x70
 800b80c:	e01c      	b.n	800b848 <HAL_RCC_OscConfig+0x324>
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	689b      	ldr	r3, [r3, #8]
 800b812:	2b05      	cmp	r3, #5
 800b814:	d10c      	bne.n	800b830 <HAL_RCC_OscConfig+0x30c>
 800b816:	4b5f      	ldr	r3, [pc, #380]	@ (800b994 <HAL_RCC_OscConfig+0x470>)
 800b818:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b81a:	4a5e      	ldr	r2, [pc, #376]	@ (800b994 <HAL_RCC_OscConfig+0x470>)
 800b81c:	f043 0304 	orr.w	r3, r3, #4
 800b820:	6713      	str	r3, [r2, #112]	@ 0x70
 800b822:	4b5c      	ldr	r3, [pc, #368]	@ (800b994 <HAL_RCC_OscConfig+0x470>)
 800b824:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b826:	4a5b      	ldr	r2, [pc, #364]	@ (800b994 <HAL_RCC_OscConfig+0x470>)
 800b828:	f043 0301 	orr.w	r3, r3, #1
 800b82c:	6713      	str	r3, [r2, #112]	@ 0x70
 800b82e:	e00b      	b.n	800b848 <HAL_RCC_OscConfig+0x324>
 800b830:	4b58      	ldr	r3, [pc, #352]	@ (800b994 <HAL_RCC_OscConfig+0x470>)
 800b832:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b834:	4a57      	ldr	r2, [pc, #348]	@ (800b994 <HAL_RCC_OscConfig+0x470>)
 800b836:	f023 0301 	bic.w	r3, r3, #1
 800b83a:	6713      	str	r3, [r2, #112]	@ 0x70
 800b83c:	4b55      	ldr	r3, [pc, #340]	@ (800b994 <HAL_RCC_OscConfig+0x470>)
 800b83e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b840:	4a54      	ldr	r2, [pc, #336]	@ (800b994 <HAL_RCC_OscConfig+0x470>)
 800b842:	f023 0304 	bic.w	r3, r3, #4
 800b846:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	689b      	ldr	r3, [r3, #8]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d015      	beq.n	800b87c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b850:	f7f9 fbda 	bl	8005008 <HAL_GetTick>
 800b854:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b856:	e00a      	b.n	800b86e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b858:	f7f9 fbd6 	bl	8005008 <HAL_GetTick>
 800b85c:	4602      	mov	r2, r0
 800b85e:	693b      	ldr	r3, [r7, #16]
 800b860:	1ad3      	subs	r3, r2, r3
 800b862:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b866:	4293      	cmp	r3, r2
 800b868:	d901      	bls.n	800b86e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800b86a:	2303      	movs	r3, #3
 800b86c:	e0cb      	b.n	800ba06 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b86e:	4b49      	ldr	r3, [pc, #292]	@ (800b994 <HAL_RCC_OscConfig+0x470>)
 800b870:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b872:	f003 0302 	and.w	r3, r3, #2
 800b876:	2b00      	cmp	r3, #0
 800b878:	d0ee      	beq.n	800b858 <HAL_RCC_OscConfig+0x334>
 800b87a:	e014      	b.n	800b8a6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b87c:	f7f9 fbc4 	bl	8005008 <HAL_GetTick>
 800b880:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b882:	e00a      	b.n	800b89a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b884:	f7f9 fbc0 	bl	8005008 <HAL_GetTick>
 800b888:	4602      	mov	r2, r0
 800b88a:	693b      	ldr	r3, [r7, #16]
 800b88c:	1ad3      	subs	r3, r2, r3
 800b88e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b892:	4293      	cmp	r3, r2
 800b894:	d901      	bls.n	800b89a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800b896:	2303      	movs	r3, #3
 800b898:	e0b5      	b.n	800ba06 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b89a:	4b3e      	ldr	r3, [pc, #248]	@ (800b994 <HAL_RCC_OscConfig+0x470>)
 800b89c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b89e:	f003 0302 	and.w	r3, r3, #2
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d1ee      	bne.n	800b884 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800b8a6:	7dfb      	ldrb	r3, [r7, #23]
 800b8a8:	2b01      	cmp	r3, #1
 800b8aa:	d105      	bne.n	800b8b8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b8ac:	4b39      	ldr	r3, [pc, #228]	@ (800b994 <HAL_RCC_OscConfig+0x470>)
 800b8ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b8b0:	4a38      	ldr	r2, [pc, #224]	@ (800b994 <HAL_RCC_OscConfig+0x470>)
 800b8b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b8b6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	699b      	ldr	r3, [r3, #24]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	f000 80a1 	beq.w	800ba04 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b8c2:	4b34      	ldr	r3, [pc, #208]	@ (800b994 <HAL_RCC_OscConfig+0x470>)
 800b8c4:	689b      	ldr	r3, [r3, #8]
 800b8c6:	f003 030c 	and.w	r3, r3, #12
 800b8ca:	2b08      	cmp	r3, #8
 800b8cc:	d05c      	beq.n	800b988 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	699b      	ldr	r3, [r3, #24]
 800b8d2:	2b02      	cmp	r3, #2
 800b8d4:	d141      	bne.n	800b95a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b8d6:	4b31      	ldr	r3, [pc, #196]	@ (800b99c <HAL_RCC_OscConfig+0x478>)
 800b8d8:	2200      	movs	r2, #0
 800b8da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b8dc:	f7f9 fb94 	bl	8005008 <HAL_GetTick>
 800b8e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b8e2:	e008      	b.n	800b8f6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b8e4:	f7f9 fb90 	bl	8005008 <HAL_GetTick>
 800b8e8:	4602      	mov	r2, r0
 800b8ea:	693b      	ldr	r3, [r7, #16]
 800b8ec:	1ad3      	subs	r3, r2, r3
 800b8ee:	2b02      	cmp	r3, #2
 800b8f0:	d901      	bls.n	800b8f6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800b8f2:	2303      	movs	r3, #3
 800b8f4:	e087      	b.n	800ba06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b8f6:	4b27      	ldr	r3, [pc, #156]	@ (800b994 <HAL_RCC_OscConfig+0x470>)
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d1f0      	bne.n	800b8e4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	69da      	ldr	r2, [r3, #28]
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	6a1b      	ldr	r3, [r3, #32]
 800b90a:	431a      	orrs	r2, r3
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b910:	019b      	lsls	r3, r3, #6
 800b912:	431a      	orrs	r2, r3
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b918:	085b      	lsrs	r3, r3, #1
 800b91a:	3b01      	subs	r3, #1
 800b91c:	041b      	lsls	r3, r3, #16
 800b91e:	431a      	orrs	r2, r3
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b924:	061b      	lsls	r3, r3, #24
 800b926:	491b      	ldr	r1, [pc, #108]	@ (800b994 <HAL_RCC_OscConfig+0x470>)
 800b928:	4313      	orrs	r3, r2
 800b92a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b92c:	4b1b      	ldr	r3, [pc, #108]	@ (800b99c <HAL_RCC_OscConfig+0x478>)
 800b92e:	2201      	movs	r2, #1
 800b930:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b932:	f7f9 fb69 	bl	8005008 <HAL_GetTick>
 800b936:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b938:	e008      	b.n	800b94c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b93a:	f7f9 fb65 	bl	8005008 <HAL_GetTick>
 800b93e:	4602      	mov	r2, r0
 800b940:	693b      	ldr	r3, [r7, #16]
 800b942:	1ad3      	subs	r3, r2, r3
 800b944:	2b02      	cmp	r3, #2
 800b946:	d901      	bls.n	800b94c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800b948:	2303      	movs	r3, #3
 800b94a:	e05c      	b.n	800ba06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b94c:	4b11      	ldr	r3, [pc, #68]	@ (800b994 <HAL_RCC_OscConfig+0x470>)
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b954:	2b00      	cmp	r3, #0
 800b956:	d0f0      	beq.n	800b93a <HAL_RCC_OscConfig+0x416>
 800b958:	e054      	b.n	800ba04 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b95a:	4b10      	ldr	r3, [pc, #64]	@ (800b99c <HAL_RCC_OscConfig+0x478>)
 800b95c:	2200      	movs	r2, #0
 800b95e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b960:	f7f9 fb52 	bl	8005008 <HAL_GetTick>
 800b964:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b966:	e008      	b.n	800b97a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b968:	f7f9 fb4e 	bl	8005008 <HAL_GetTick>
 800b96c:	4602      	mov	r2, r0
 800b96e:	693b      	ldr	r3, [r7, #16]
 800b970:	1ad3      	subs	r3, r2, r3
 800b972:	2b02      	cmp	r3, #2
 800b974:	d901      	bls.n	800b97a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800b976:	2303      	movs	r3, #3
 800b978:	e045      	b.n	800ba06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b97a:	4b06      	ldr	r3, [pc, #24]	@ (800b994 <HAL_RCC_OscConfig+0x470>)
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b982:	2b00      	cmp	r3, #0
 800b984:	d1f0      	bne.n	800b968 <HAL_RCC_OscConfig+0x444>
 800b986:	e03d      	b.n	800ba04 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	699b      	ldr	r3, [r3, #24]
 800b98c:	2b01      	cmp	r3, #1
 800b98e:	d107      	bne.n	800b9a0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800b990:	2301      	movs	r3, #1
 800b992:	e038      	b.n	800ba06 <HAL_RCC_OscConfig+0x4e2>
 800b994:	40023800 	.word	0x40023800
 800b998:	40007000 	.word	0x40007000
 800b99c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800b9a0:	4b1b      	ldr	r3, [pc, #108]	@ (800ba10 <HAL_RCC_OscConfig+0x4ec>)
 800b9a2:	685b      	ldr	r3, [r3, #4]
 800b9a4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	699b      	ldr	r3, [r3, #24]
 800b9aa:	2b01      	cmp	r3, #1
 800b9ac:	d028      	beq.n	800ba00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b9b8:	429a      	cmp	r2, r3
 800b9ba:	d121      	bne.n	800ba00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b9c6:	429a      	cmp	r2, r3
 800b9c8:	d11a      	bne.n	800ba00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b9ca:	68fa      	ldr	r2, [r7, #12]
 800b9cc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800b9d0:	4013      	ands	r3, r2
 800b9d2:	687a      	ldr	r2, [r7, #4]
 800b9d4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800b9d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b9d8:	4293      	cmp	r3, r2
 800b9da:	d111      	bne.n	800ba00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9e6:	085b      	lsrs	r3, r3, #1
 800b9e8:	3b01      	subs	r3, #1
 800b9ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b9ec:	429a      	cmp	r2, r3
 800b9ee:	d107      	bne.n	800ba00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b9fc:	429a      	cmp	r2, r3
 800b9fe:	d001      	beq.n	800ba04 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800ba00:	2301      	movs	r3, #1
 800ba02:	e000      	b.n	800ba06 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800ba04:	2300      	movs	r3, #0
}
 800ba06:	4618      	mov	r0, r3
 800ba08:	3718      	adds	r7, #24
 800ba0a:	46bd      	mov	sp, r7
 800ba0c:	bd80      	pop	{r7, pc}
 800ba0e:	bf00      	nop
 800ba10:	40023800 	.word	0x40023800

0800ba14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ba14:	b580      	push	{r7, lr}
 800ba16:	b084      	sub	sp, #16
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	6078      	str	r0, [r7, #4]
 800ba1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d101      	bne.n	800ba28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ba24:	2301      	movs	r3, #1
 800ba26:	e0cc      	b.n	800bbc2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ba28:	4b68      	ldr	r3, [pc, #416]	@ (800bbcc <HAL_RCC_ClockConfig+0x1b8>)
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	f003 0307 	and.w	r3, r3, #7
 800ba30:	683a      	ldr	r2, [r7, #0]
 800ba32:	429a      	cmp	r2, r3
 800ba34:	d90c      	bls.n	800ba50 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ba36:	4b65      	ldr	r3, [pc, #404]	@ (800bbcc <HAL_RCC_ClockConfig+0x1b8>)
 800ba38:	683a      	ldr	r2, [r7, #0]
 800ba3a:	b2d2      	uxtb	r2, r2
 800ba3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ba3e:	4b63      	ldr	r3, [pc, #396]	@ (800bbcc <HAL_RCC_ClockConfig+0x1b8>)
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	f003 0307 	and.w	r3, r3, #7
 800ba46:	683a      	ldr	r2, [r7, #0]
 800ba48:	429a      	cmp	r2, r3
 800ba4a:	d001      	beq.n	800ba50 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800ba4c:	2301      	movs	r3, #1
 800ba4e:	e0b8      	b.n	800bbc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	f003 0302 	and.w	r3, r3, #2
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d020      	beq.n	800ba9e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	f003 0304 	and.w	r3, r3, #4
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d005      	beq.n	800ba74 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ba68:	4b59      	ldr	r3, [pc, #356]	@ (800bbd0 <HAL_RCC_ClockConfig+0x1bc>)
 800ba6a:	689b      	ldr	r3, [r3, #8]
 800ba6c:	4a58      	ldr	r2, [pc, #352]	@ (800bbd0 <HAL_RCC_ClockConfig+0x1bc>)
 800ba6e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800ba72:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	f003 0308 	and.w	r3, r3, #8
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d005      	beq.n	800ba8c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ba80:	4b53      	ldr	r3, [pc, #332]	@ (800bbd0 <HAL_RCC_ClockConfig+0x1bc>)
 800ba82:	689b      	ldr	r3, [r3, #8]
 800ba84:	4a52      	ldr	r2, [pc, #328]	@ (800bbd0 <HAL_RCC_ClockConfig+0x1bc>)
 800ba86:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800ba8a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ba8c:	4b50      	ldr	r3, [pc, #320]	@ (800bbd0 <HAL_RCC_ClockConfig+0x1bc>)
 800ba8e:	689b      	ldr	r3, [r3, #8]
 800ba90:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	689b      	ldr	r3, [r3, #8]
 800ba98:	494d      	ldr	r1, [pc, #308]	@ (800bbd0 <HAL_RCC_ClockConfig+0x1bc>)
 800ba9a:	4313      	orrs	r3, r2
 800ba9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	f003 0301 	and.w	r3, r3, #1
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d044      	beq.n	800bb34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	685b      	ldr	r3, [r3, #4]
 800baae:	2b01      	cmp	r3, #1
 800bab0:	d107      	bne.n	800bac2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bab2:	4b47      	ldr	r3, [pc, #284]	@ (800bbd0 <HAL_RCC_ClockConfig+0x1bc>)
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800baba:	2b00      	cmp	r3, #0
 800babc:	d119      	bne.n	800baf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800babe:	2301      	movs	r3, #1
 800bac0:	e07f      	b.n	800bbc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	685b      	ldr	r3, [r3, #4]
 800bac6:	2b02      	cmp	r3, #2
 800bac8:	d003      	beq.n	800bad2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800bace:	2b03      	cmp	r3, #3
 800bad0:	d107      	bne.n	800bae2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bad2:	4b3f      	ldr	r3, [pc, #252]	@ (800bbd0 <HAL_RCC_ClockConfig+0x1bc>)
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bada:	2b00      	cmp	r3, #0
 800badc:	d109      	bne.n	800baf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800bade:	2301      	movs	r3, #1
 800bae0:	e06f      	b.n	800bbc2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bae2:	4b3b      	ldr	r3, [pc, #236]	@ (800bbd0 <HAL_RCC_ClockConfig+0x1bc>)
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	f003 0302 	and.w	r3, r3, #2
 800baea:	2b00      	cmp	r3, #0
 800baec:	d101      	bne.n	800baf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800baee:	2301      	movs	r3, #1
 800baf0:	e067      	b.n	800bbc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800baf2:	4b37      	ldr	r3, [pc, #220]	@ (800bbd0 <HAL_RCC_ClockConfig+0x1bc>)
 800baf4:	689b      	ldr	r3, [r3, #8]
 800baf6:	f023 0203 	bic.w	r2, r3, #3
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	685b      	ldr	r3, [r3, #4]
 800bafe:	4934      	ldr	r1, [pc, #208]	@ (800bbd0 <HAL_RCC_ClockConfig+0x1bc>)
 800bb00:	4313      	orrs	r3, r2
 800bb02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800bb04:	f7f9 fa80 	bl	8005008 <HAL_GetTick>
 800bb08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bb0a:	e00a      	b.n	800bb22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bb0c:	f7f9 fa7c 	bl	8005008 <HAL_GetTick>
 800bb10:	4602      	mov	r2, r0
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	1ad3      	subs	r3, r2, r3
 800bb16:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bb1a:	4293      	cmp	r3, r2
 800bb1c:	d901      	bls.n	800bb22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800bb1e:	2303      	movs	r3, #3
 800bb20:	e04f      	b.n	800bbc2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bb22:	4b2b      	ldr	r3, [pc, #172]	@ (800bbd0 <HAL_RCC_ClockConfig+0x1bc>)
 800bb24:	689b      	ldr	r3, [r3, #8]
 800bb26:	f003 020c 	and.w	r2, r3, #12
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	685b      	ldr	r3, [r3, #4]
 800bb2e:	009b      	lsls	r3, r3, #2
 800bb30:	429a      	cmp	r2, r3
 800bb32:	d1eb      	bne.n	800bb0c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800bb34:	4b25      	ldr	r3, [pc, #148]	@ (800bbcc <HAL_RCC_ClockConfig+0x1b8>)
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	f003 0307 	and.w	r3, r3, #7
 800bb3c:	683a      	ldr	r2, [r7, #0]
 800bb3e:	429a      	cmp	r2, r3
 800bb40:	d20c      	bcs.n	800bb5c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bb42:	4b22      	ldr	r3, [pc, #136]	@ (800bbcc <HAL_RCC_ClockConfig+0x1b8>)
 800bb44:	683a      	ldr	r2, [r7, #0]
 800bb46:	b2d2      	uxtb	r2, r2
 800bb48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bb4a:	4b20      	ldr	r3, [pc, #128]	@ (800bbcc <HAL_RCC_ClockConfig+0x1b8>)
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	f003 0307 	and.w	r3, r3, #7
 800bb52:	683a      	ldr	r2, [r7, #0]
 800bb54:	429a      	cmp	r2, r3
 800bb56:	d001      	beq.n	800bb5c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800bb58:	2301      	movs	r3, #1
 800bb5a:	e032      	b.n	800bbc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	f003 0304 	and.w	r3, r3, #4
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d008      	beq.n	800bb7a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800bb68:	4b19      	ldr	r3, [pc, #100]	@ (800bbd0 <HAL_RCC_ClockConfig+0x1bc>)
 800bb6a:	689b      	ldr	r3, [r3, #8]
 800bb6c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	68db      	ldr	r3, [r3, #12]
 800bb74:	4916      	ldr	r1, [pc, #88]	@ (800bbd0 <HAL_RCC_ClockConfig+0x1bc>)
 800bb76:	4313      	orrs	r3, r2
 800bb78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	f003 0308 	and.w	r3, r3, #8
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d009      	beq.n	800bb9a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800bb86:	4b12      	ldr	r3, [pc, #72]	@ (800bbd0 <HAL_RCC_ClockConfig+0x1bc>)
 800bb88:	689b      	ldr	r3, [r3, #8]
 800bb8a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	691b      	ldr	r3, [r3, #16]
 800bb92:	00db      	lsls	r3, r3, #3
 800bb94:	490e      	ldr	r1, [pc, #56]	@ (800bbd0 <HAL_RCC_ClockConfig+0x1bc>)
 800bb96:	4313      	orrs	r3, r2
 800bb98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800bb9a:	f000 f82d 	bl	800bbf8 <HAL_RCC_GetSysClockFreq>
 800bb9e:	4602      	mov	r2, r0
 800bba0:	4b0b      	ldr	r3, [pc, #44]	@ (800bbd0 <HAL_RCC_ClockConfig+0x1bc>)
 800bba2:	689b      	ldr	r3, [r3, #8]
 800bba4:	091b      	lsrs	r3, r3, #4
 800bba6:	f003 030f 	and.w	r3, r3, #15
 800bbaa:	490a      	ldr	r1, [pc, #40]	@ (800bbd4 <HAL_RCC_ClockConfig+0x1c0>)
 800bbac:	5ccb      	ldrb	r3, [r1, r3]
 800bbae:	fa22 f303 	lsr.w	r3, r2, r3
 800bbb2:	4a09      	ldr	r2, [pc, #36]	@ (800bbd8 <HAL_RCC_ClockConfig+0x1c4>)
 800bbb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800bbb6:	4b09      	ldr	r3, [pc, #36]	@ (800bbdc <HAL_RCC_ClockConfig+0x1c8>)
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	4618      	mov	r0, r3
 800bbbc:	f7f9 f9e0 	bl	8004f80 <HAL_InitTick>

  return HAL_OK;
 800bbc0:	2300      	movs	r3, #0
}
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	3710      	adds	r7, #16
 800bbc6:	46bd      	mov	sp, r7
 800bbc8:	bd80      	pop	{r7, pc}
 800bbca:	bf00      	nop
 800bbcc:	40023c00 	.word	0x40023c00
 800bbd0:	40023800 	.word	0x40023800
 800bbd4:	08013f18 	.word	0x08013f18
 800bbd8:	20000014 	.word	0x20000014
 800bbdc:	20000018 	.word	0x20000018

0800bbe0 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800bbe0:	b480      	push	{r7}
 800bbe2:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 800bbe4:	4b03      	ldr	r3, [pc, #12]	@ (800bbf4 <HAL_RCC_EnableCSS+0x14>)
 800bbe6:	2201      	movs	r2, #1
 800bbe8:	601a      	str	r2, [r3, #0]
}
 800bbea:	bf00      	nop
 800bbec:	46bd      	mov	sp, r7
 800bbee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf2:	4770      	bx	lr
 800bbf4:	4247004c 	.word	0x4247004c

0800bbf8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800bbf8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bbfc:	b090      	sub	sp, #64	@ 0x40
 800bbfe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800bc00:	2300      	movs	r3, #0
 800bc02:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800bc04:	2300      	movs	r3, #0
 800bc06:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800bc08:	2300      	movs	r3, #0
 800bc0a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800bc10:	4b59      	ldr	r3, [pc, #356]	@ (800bd78 <HAL_RCC_GetSysClockFreq+0x180>)
 800bc12:	689b      	ldr	r3, [r3, #8]
 800bc14:	f003 030c 	and.w	r3, r3, #12
 800bc18:	2b08      	cmp	r3, #8
 800bc1a:	d00d      	beq.n	800bc38 <HAL_RCC_GetSysClockFreq+0x40>
 800bc1c:	2b08      	cmp	r3, #8
 800bc1e:	f200 80a1 	bhi.w	800bd64 <HAL_RCC_GetSysClockFreq+0x16c>
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d002      	beq.n	800bc2c <HAL_RCC_GetSysClockFreq+0x34>
 800bc26:	2b04      	cmp	r3, #4
 800bc28:	d003      	beq.n	800bc32 <HAL_RCC_GetSysClockFreq+0x3a>
 800bc2a:	e09b      	b.n	800bd64 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800bc2c:	4b53      	ldr	r3, [pc, #332]	@ (800bd7c <HAL_RCC_GetSysClockFreq+0x184>)
 800bc2e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800bc30:	e09b      	b.n	800bd6a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800bc32:	4b53      	ldr	r3, [pc, #332]	@ (800bd80 <HAL_RCC_GetSysClockFreq+0x188>)
 800bc34:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800bc36:	e098      	b.n	800bd6a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800bc38:	4b4f      	ldr	r3, [pc, #316]	@ (800bd78 <HAL_RCC_GetSysClockFreq+0x180>)
 800bc3a:	685b      	ldr	r3, [r3, #4]
 800bc3c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bc40:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800bc42:	4b4d      	ldr	r3, [pc, #308]	@ (800bd78 <HAL_RCC_GetSysClockFreq+0x180>)
 800bc44:	685b      	ldr	r3, [r3, #4]
 800bc46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d028      	beq.n	800bca0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800bc4e:	4b4a      	ldr	r3, [pc, #296]	@ (800bd78 <HAL_RCC_GetSysClockFreq+0x180>)
 800bc50:	685b      	ldr	r3, [r3, #4]
 800bc52:	099b      	lsrs	r3, r3, #6
 800bc54:	2200      	movs	r2, #0
 800bc56:	623b      	str	r3, [r7, #32]
 800bc58:	627a      	str	r2, [r7, #36]	@ 0x24
 800bc5a:	6a3b      	ldr	r3, [r7, #32]
 800bc5c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800bc60:	2100      	movs	r1, #0
 800bc62:	4b47      	ldr	r3, [pc, #284]	@ (800bd80 <HAL_RCC_GetSysClockFreq+0x188>)
 800bc64:	fb03 f201 	mul.w	r2, r3, r1
 800bc68:	2300      	movs	r3, #0
 800bc6a:	fb00 f303 	mul.w	r3, r0, r3
 800bc6e:	4413      	add	r3, r2
 800bc70:	4a43      	ldr	r2, [pc, #268]	@ (800bd80 <HAL_RCC_GetSysClockFreq+0x188>)
 800bc72:	fba0 1202 	umull	r1, r2, r0, r2
 800bc76:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800bc78:	460a      	mov	r2, r1
 800bc7a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800bc7c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bc7e:	4413      	add	r3, r2
 800bc80:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bc82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc84:	2200      	movs	r2, #0
 800bc86:	61bb      	str	r3, [r7, #24]
 800bc88:	61fa      	str	r2, [r7, #28]
 800bc8a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800bc8e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800bc92:	f7f4 fafd 	bl	8000290 <__aeabi_uldivmod>
 800bc96:	4602      	mov	r2, r0
 800bc98:	460b      	mov	r3, r1
 800bc9a:	4613      	mov	r3, r2
 800bc9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bc9e:	e053      	b.n	800bd48 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800bca0:	4b35      	ldr	r3, [pc, #212]	@ (800bd78 <HAL_RCC_GetSysClockFreq+0x180>)
 800bca2:	685b      	ldr	r3, [r3, #4]
 800bca4:	099b      	lsrs	r3, r3, #6
 800bca6:	2200      	movs	r2, #0
 800bca8:	613b      	str	r3, [r7, #16]
 800bcaa:	617a      	str	r2, [r7, #20]
 800bcac:	693b      	ldr	r3, [r7, #16]
 800bcae:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800bcb2:	f04f 0b00 	mov.w	fp, #0
 800bcb6:	4652      	mov	r2, sl
 800bcb8:	465b      	mov	r3, fp
 800bcba:	f04f 0000 	mov.w	r0, #0
 800bcbe:	f04f 0100 	mov.w	r1, #0
 800bcc2:	0159      	lsls	r1, r3, #5
 800bcc4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800bcc8:	0150      	lsls	r0, r2, #5
 800bcca:	4602      	mov	r2, r0
 800bccc:	460b      	mov	r3, r1
 800bcce:	ebb2 080a 	subs.w	r8, r2, sl
 800bcd2:	eb63 090b 	sbc.w	r9, r3, fp
 800bcd6:	f04f 0200 	mov.w	r2, #0
 800bcda:	f04f 0300 	mov.w	r3, #0
 800bcde:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800bce2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800bce6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800bcea:	ebb2 0408 	subs.w	r4, r2, r8
 800bcee:	eb63 0509 	sbc.w	r5, r3, r9
 800bcf2:	f04f 0200 	mov.w	r2, #0
 800bcf6:	f04f 0300 	mov.w	r3, #0
 800bcfa:	00eb      	lsls	r3, r5, #3
 800bcfc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800bd00:	00e2      	lsls	r2, r4, #3
 800bd02:	4614      	mov	r4, r2
 800bd04:	461d      	mov	r5, r3
 800bd06:	eb14 030a 	adds.w	r3, r4, sl
 800bd0a:	603b      	str	r3, [r7, #0]
 800bd0c:	eb45 030b 	adc.w	r3, r5, fp
 800bd10:	607b      	str	r3, [r7, #4]
 800bd12:	f04f 0200 	mov.w	r2, #0
 800bd16:	f04f 0300 	mov.w	r3, #0
 800bd1a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800bd1e:	4629      	mov	r1, r5
 800bd20:	028b      	lsls	r3, r1, #10
 800bd22:	4621      	mov	r1, r4
 800bd24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800bd28:	4621      	mov	r1, r4
 800bd2a:	028a      	lsls	r2, r1, #10
 800bd2c:	4610      	mov	r0, r2
 800bd2e:	4619      	mov	r1, r3
 800bd30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd32:	2200      	movs	r2, #0
 800bd34:	60bb      	str	r3, [r7, #8]
 800bd36:	60fa      	str	r2, [r7, #12]
 800bd38:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bd3c:	f7f4 faa8 	bl	8000290 <__aeabi_uldivmod>
 800bd40:	4602      	mov	r2, r0
 800bd42:	460b      	mov	r3, r1
 800bd44:	4613      	mov	r3, r2
 800bd46:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800bd48:	4b0b      	ldr	r3, [pc, #44]	@ (800bd78 <HAL_RCC_GetSysClockFreq+0x180>)
 800bd4a:	685b      	ldr	r3, [r3, #4]
 800bd4c:	0c1b      	lsrs	r3, r3, #16
 800bd4e:	f003 0303 	and.w	r3, r3, #3
 800bd52:	3301      	adds	r3, #1
 800bd54:	005b      	lsls	r3, r3, #1
 800bd56:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800bd58:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800bd5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd5c:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd60:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800bd62:	e002      	b.n	800bd6a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800bd64:	4b05      	ldr	r3, [pc, #20]	@ (800bd7c <HAL_RCC_GetSysClockFreq+0x184>)
 800bd66:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800bd68:	bf00      	nop
    }
  }
  return sysclockfreq;
 800bd6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800bd6c:	4618      	mov	r0, r3
 800bd6e:	3740      	adds	r7, #64	@ 0x40
 800bd70:	46bd      	mov	sp, r7
 800bd72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bd76:	bf00      	nop
 800bd78:	40023800 	.word	0x40023800
 800bd7c:	00f42400 	.word	0x00f42400
 800bd80:	017d7840 	.word	0x017d7840

0800bd84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800bd84:	b480      	push	{r7}
 800bd86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800bd88:	4b03      	ldr	r3, [pc, #12]	@ (800bd98 <HAL_RCC_GetHCLKFreq+0x14>)
 800bd8a:	681b      	ldr	r3, [r3, #0]
}
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	46bd      	mov	sp, r7
 800bd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd94:	4770      	bx	lr
 800bd96:	bf00      	nop
 800bd98:	20000014 	.word	0x20000014

0800bd9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800bd9c:	b580      	push	{r7, lr}
 800bd9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800bda0:	f7ff fff0 	bl	800bd84 <HAL_RCC_GetHCLKFreq>
 800bda4:	4602      	mov	r2, r0
 800bda6:	4b05      	ldr	r3, [pc, #20]	@ (800bdbc <HAL_RCC_GetPCLK1Freq+0x20>)
 800bda8:	689b      	ldr	r3, [r3, #8]
 800bdaa:	0a9b      	lsrs	r3, r3, #10
 800bdac:	f003 0307 	and.w	r3, r3, #7
 800bdb0:	4903      	ldr	r1, [pc, #12]	@ (800bdc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800bdb2:	5ccb      	ldrb	r3, [r1, r3]
 800bdb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800bdb8:	4618      	mov	r0, r3
 800bdba:	bd80      	pop	{r7, pc}
 800bdbc:	40023800 	.word	0x40023800
 800bdc0:	08013f28 	.word	0x08013f28

0800bdc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800bdc4:	b580      	push	{r7, lr}
 800bdc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800bdc8:	f7ff ffdc 	bl	800bd84 <HAL_RCC_GetHCLKFreq>
 800bdcc:	4602      	mov	r2, r0
 800bdce:	4b05      	ldr	r3, [pc, #20]	@ (800bde4 <HAL_RCC_GetPCLK2Freq+0x20>)
 800bdd0:	689b      	ldr	r3, [r3, #8]
 800bdd2:	0b5b      	lsrs	r3, r3, #13
 800bdd4:	f003 0307 	and.w	r3, r3, #7
 800bdd8:	4903      	ldr	r1, [pc, #12]	@ (800bde8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800bdda:	5ccb      	ldrb	r3, [r1, r3]
 800bddc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800bde0:	4618      	mov	r0, r3
 800bde2:	bd80      	pop	{r7, pc}
 800bde4:	40023800 	.word	0x40023800
 800bde8:	08013f28 	.word	0x08013f28

0800bdec <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800bdec:	b580      	push	{r7, lr}
 800bdee:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 800bdf0:	4b06      	ldr	r3, [pc, #24]	@ (800be0c <HAL_RCC_NMI_IRQHandler+0x20>)
 800bdf2:	68db      	ldr	r3, [r3, #12]
 800bdf4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bdf8:	2b80      	cmp	r3, #128	@ 0x80
 800bdfa:	d104      	bne.n	800be06 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800bdfc:	f000 f80a 	bl	800be14 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800be00:	4b03      	ldr	r3, [pc, #12]	@ (800be10 <HAL_RCC_NMI_IRQHandler+0x24>)
 800be02:	2280      	movs	r2, #128	@ 0x80
 800be04:	701a      	strb	r2, [r3, #0]
  }
}
 800be06:	bf00      	nop
 800be08:	bd80      	pop	{r7, pc}
 800be0a:	bf00      	nop
 800be0c:	40023800 	.word	0x40023800
 800be10:	4002380e 	.word	0x4002380e

0800be14 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800be14:	b480      	push	{r7}
 800be16:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 800be18:	bf00      	nop
 800be1a:	46bd      	mov	sp, r7
 800be1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be20:	4770      	bx	lr

0800be22 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800be22:	b580      	push	{r7, lr}
 800be24:	b082      	sub	sp, #8
 800be26:	af00      	add	r7, sp, #0
 800be28:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d101      	bne.n	800be34 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800be30:	2301      	movs	r3, #1
 800be32:	e041      	b.n	800beb8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800be3a:	b2db      	uxtb	r3, r3
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d106      	bne.n	800be4e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	2200      	movs	r2, #0
 800be44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800be48:	6878      	ldr	r0, [r7, #4]
 800be4a:	f7f8 fe87 	bl	8004b5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	2202      	movs	r2, #2
 800be52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	681a      	ldr	r2, [r3, #0]
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	3304      	adds	r3, #4
 800be5e:	4619      	mov	r1, r3
 800be60:	4610      	mov	r0, r2
 800be62:	f000 fc3b 	bl	800c6dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	2201      	movs	r2, #1
 800be6a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	2201      	movs	r2, #1
 800be72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	2201      	movs	r2, #1
 800be7a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	2201      	movs	r2, #1
 800be82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	2201      	movs	r2, #1
 800be8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	2201      	movs	r2, #1
 800be92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	2201      	movs	r2, #1
 800be9a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	2201      	movs	r2, #1
 800bea2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	2201      	movs	r2, #1
 800beaa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	2201      	movs	r2, #1
 800beb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800beb6:	2300      	movs	r3, #0
}
 800beb8:	4618      	mov	r0, r3
 800beba:	3708      	adds	r7, #8
 800bebc:	46bd      	mov	sp, r7
 800bebe:	bd80      	pop	{r7, pc}

0800bec0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bec0:	b480      	push	{r7}
 800bec2:	b085      	sub	sp, #20
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bece:	b2db      	uxtb	r3, r3
 800bed0:	2b01      	cmp	r3, #1
 800bed2:	d001      	beq.n	800bed8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800bed4:	2301      	movs	r3, #1
 800bed6:	e044      	b.n	800bf62 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	2202      	movs	r2, #2
 800bedc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	68da      	ldr	r2, [r3, #12]
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	f042 0201 	orr.w	r2, r2, #1
 800beee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	4a1e      	ldr	r2, [pc, #120]	@ (800bf70 <HAL_TIM_Base_Start_IT+0xb0>)
 800bef6:	4293      	cmp	r3, r2
 800bef8:	d018      	beq.n	800bf2c <HAL_TIM_Base_Start_IT+0x6c>
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bf02:	d013      	beq.n	800bf2c <HAL_TIM_Base_Start_IT+0x6c>
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	4a1a      	ldr	r2, [pc, #104]	@ (800bf74 <HAL_TIM_Base_Start_IT+0xb4>)
 800bf0a:	4293      	cmp	r3, r2
 800bf0c:	d00e      	beq.n	800bf2c <HAL_TIM_Base_Start_IT+0x6c>
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	4a19      	ldr	r2, [pc, #100]	@ (800bf78 <HAL_TIM_Base_Start_IT+0xb8>)
 800bf14:	4293      	cmp	r3, r2
 800bf16:	d009      	beq.n	800bf2c <HAL_TIM_Base_Start_IT+0x6c>
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	4a17      	ldr	r2, [pc, #92]	@ (800bf7c <HAL_TIM_Base_Start_IT+0xbc>)
 800bf1e:	4293      	cmp	r3, r2
 800bf20:	d004      	beq.n	800bf2c <HAL_TIM_Base_Start_IT+0x6c>
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	4a16      	ldr	r2, [pc, #88]	@ (800bf80 <HAL_TIM_Base_Start_IT+0xc0>)
 800bf28:	4293      	cmp	r3, r2
 800bf2a:	d111      	bne.n	800bf50 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	689b      	ldr	r3, [r3, #8]
 800bf32:	f003 0307 	and.w	r3, r3, #7
 800bf36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	2b06      	cmp	r3, #6
 800bf3c:	d010      	beq.n	800bf60 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	681a      	ldr	r2, [r3, #0]
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	f042 0201 	orr.w	r2, r2, #1
 800bf4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bf4e:	e007      	b.n	800bf60 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	681a      	ldr	r2, [r3, #0]
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	f042 0201 	orr.w	r2, r2, #1
 800bf5e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800bf60:	2300      	movs	r3, #0
}
 800bf62:	4618      	mov	r0, r3
 800bf64:	3714      	adds	r7, #20
 800bf66:	46bd      	mov	sp, r7
 800bf68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf6c:	4770      	bx	lr
 800bf6e:	bf00      	nop
 800bf70:	40010000 	.word	0x40010000
 800bf74:	40000400 	.word	0x40000400
 800bf78:	40000800 	.word	0x40000800
 800bf7c:	40000c00 	.word	0x40000c00
 800bf80:	40014000 	.word	0x40014000

0800bf84 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800bf84:	b580      	push	{r7, lr}
 800bf86:	b082      	sub	sp, #8
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d101      	bne.n	800bf96 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800bf92:	2301      	movs	r3, #1
 800bf94:	e041      	b.n	800c01a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bf9c:	b2db      	uxtb	r3, r3
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d106      	bne.n	800bfb0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	2200      	movs	r2, #0
 800bfa6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800bfaa:	6878      	ldr	r0, [r7, #4]
 800bfac:	f000 f839 	bl	800c022 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	2202      	movs	r2, #2
 800bfb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	681a      	ldr	r2, [r3, #0]
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	3304      	adds	r3, #4
 800bfc0:	4619      	mov	r1, r3
 800bfc2:	4610      	mov	r0, r2
 800bfc4:	f000 fb8a 	bl	800c6dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	2201      	movs	r2, #1
 800bfcc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	2201      	movs	r2, #1
 800bfd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	2201      	movs	r2, #1
 800bfdc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	2201      	movs	r2, #1
 800bfe4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	2201      	movs	r2, #1
 800bfec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	2201      	movs	r2, #1
 800bff4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	2201      	movs	r2, #1
 800bffc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	2201      	movs	r2, #1
 800c004:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	2201      	movs	r2, #1
 800c00c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	2201      	movs	r2, #1
 800c014:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c018:	2300      	movs	r3, #0
}
 800c01a:	4618      	mov	r0, r3
 800c01c:	3708      	adds	r7, #8
 800c01e:	46bd      	mov	sp, r7
 800c020:	bd80      	pop	{r7, pc}

0800c022 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800c022:	b480      	push	{r7}
 800c024:	b083      	sub	sp, #12
 800c026:	af00      	add	r7, sp, #0
 800c028:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800c02a:	bf00      	nop
 800c02c:	370c      	adds	r7, #12
 800c02e:	46bd      	mov	sp, r7
 800c030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c034:	4770      	bx	lr
	...

0800c038 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c038:	b580      	push	{r7, lr}
 800c03a:	b084      	sub	sp, #16
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	6078      	str	r0, [r7, #4]
 800c040:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c042:	683b      	ldr	r3, [r7, #0]
 800c044:	2b00      	cmp	r3, #0
 800c046:	d109      	bne.n	800c05c <HAL_TIM_PWM_Start+0x24>
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800c04e:	b2db      	uxtb	r3, r3
 800c050:	2b01      	cmp	r3, #1
 800c052:	bf14      	ite	ne
 800c054:	2301      	movne	r3, #1
 800c056:	2300      	moveq	r3, #0
 800c058:	b2db      	uxtb	r3, r3
 800c05a:	e022      	b.n	800c0a2 <HAL_TIM_PWM_Start+0x6a>
 800c05c:	683b      	ldr	r3, [r7, #0]
 800c05e:	2b04      	cmp	r3, #4
 800c060:	d109      	bne.n	800c076 <HAL_TIM_PWM_Start+0x3e>
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800c068:	b2db      	uxtb	r3, r3
 800c06a:	2b01      	cmp	r3, #1
 800c06c:	bf14      	ite	ne
 800c06e:	2301      	movne	r3, #1
 800c070:	2300      	moveq	r3, #0
 800c072:	b2db      	uxtb	r3, r3
 800c074:	e015      	b.n	800c0a2 <HAL_TIM_PWM_Start+0x6a>
 800c076:	683b      	ldr	r3, [r7, #0]
 800c078:	2b08      	cmp	r3, #8
 800c07a:	d109      	bne.n	800c090 <HAL_TIM_PWM_Start+0x58>
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800c082:	b2db      	uxtb	r3, r3
 800c084:	2b01      	cmp	r3, #1
 800c086:	bf14      	ite	ne
 800c088:	2301      	movne	r3, #1
 800c08a:	2300      	moveq	r3, #0
 800c08c:	b2db      	uxtb	r3, r3
 800c08e:	e008      	b.n	800c0a2 <HAL_TIM_PWM_Start+0x6a>
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c096:	b2db      	uxtb	r3, r3
 800c098:	2b01      	cmp	r3, #1
 800c09a:	bf14      	ite	ne
 800c09c:	2301      	movne	r3, #1
 800c09e:	2300      	moveq	r3, #0
 800c0a0:	b2db      	uxtb	r3, r3
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d001      	beq.n	800c0aa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800c0a6:	2301      	movs	r3, #1
 800c0a8:	e068      	b.n	800c17c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c0aa:	683b      	ldr	r3, [r7, #0]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d104      	bne.n	800c0ba <HAL_TIM_PWM_Start+0x82>
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	2202      	movs	r2, #2
 800c0b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c0b8:	e013      	b.n	800c0e2 <HAL_TIM_PWM_Start+0xaa>
 800c0ba:	683b      	ldr	r3, [r7, #0]
 800c0bc:	2b04      	cmp	r3, #4
 800c0be:	d104      	bne.n	800c0ca <HAL_TIM_PWM_Start+0x92>
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	2202      	movs	r2, #2
 800c0c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c0c8:	e00b      	b.n	800c0e2 <HAL_TIM_PWM_Start+0xaa>
 800c0ca:	683b      	ldr	r3, [r7, #0]
 800c0cc:	2b08      	cmp	r3, #8
 800c0ce:	d104      	bne.n	800c0da <HAL_TIM_PWM_Start+0xa2>
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	2202      	movs	r2, #2
 800c0d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c0d8:	e003      	b.n	800c0e2 <HAL_TIM_PWM_Start+0xaa>
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	2202      	movs	r2, #2
 800c0de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	2201      	movs	r2, #1
 800c0e8:	6839      	ldr	r1, [r7, #0]
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	f000 fda8 	bl	800cc40 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	4a23      	ldr	r2, [pc, #140]	@ (800c184 <HAL_TIM_PWM_Start+0x14c>)
 800c0f6:	4293      	cmp	r3, r2
 800c0f8:	d107      	bne.n	800c10a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800c108:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	4a1d      	ldr	r2, [pc, #116]	@ (800c184 <HAL_TIM_PWM_Start+0x14c>)
 800c110:	4293      	cmp	r3, r2
 800c112:	d018      	beq.n	800c146 <HAL_TIM_PWM_Start+0x10e>
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c11c:	d013      	beq.n	800c146 <HAL_TIM_PWM_Start+0x10e>
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	4a19      	ldr	r2, [pc, #100]	@ (800c188 <HAL_TIM_PWM_Start+0x150>)
 800c124:	4293      	cmp	r3, r2
 800c126:	d00e      	beq.n	800c146 <HAL_TIM_PWM_Start+0x10e>
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	4a17      	ldr	r2, [pc, #92]	@ (800c18c <HAL_TIM_PWM_Start+0x154>)
 800c12e:	4293      	cmp	r3, r2
 800c130:	d009      	beq.n	800c146 <HAL_TIM_PWM_Start+0x10e>
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	4a16      	ldr	r2, [pc, #88]	@ (800c190 <HAL_TIM_PWM_Start+0x158>)
 800c138:	4293      	cmp	r3, r2
 800c13a:	d004      	beq.n	800c146 <HAL_TIM_PWM_Start+0x10e>
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	4a14      	ldr	r2, [pc, #80]	@ (800c194 <HAL_TIM_PWM_Start+0x15c>)
 800c142:	4293      	cmp	r3, r2
 800c144:	d111      	bne.n	800c16a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	689b      	ldr	r3, [r3, #8]
 800c14c:	f003 0307 	and.w	r3, r3, #7
 800c150:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	2b06      	cmp	r3, #6
 800c156:	d010      	beq.n	800c17a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	681a      	ldr	r2, [r3, #0]
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	f042 0201 	orr.w	r2, r2, #1
 800c166:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c168:	e007      	b.n	800c17a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	681a      	ldr	r2, [r3, #0]
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	f042 0201 	orr.w	r2, r2, #1
 800c178:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c17a:	2300      	movs	r3, #0
}
 800c17c:	4618      	mov	r0, r3
 800c17e:	3710      	adds	r7, #16
 800c180:	46bd      	mov	sp, r7
 800c182:	bd80      	pop	{r7, pc}
 800c184:	40010000 	.word	0x40010000
 800c188:	40000400 	.word	0x40000400
 800c18c:	40000800 	.word	0x40000800
 800c190:	40000c00 	.word	0x40000c00
 800c194:	40014000 	.word	0x40014000

0800c198 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c198:	b580      	push	{r7, lr}
 800c19a:	b084      	sub	sp, #16
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	68db      	ldr	r3, [r3, #12]
 800c1a6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	691b      	ldr	r3, [r3, #16]
 800c1ae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800c1b0:	68bb      	ldr	r3, [r7, #8]
 800c1b2:	f003 0302 	and.w	r3, r3, #2
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d020      	beq.n	800c1fc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	f003 0302 	and.w	r3, r3, #2
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d01b      	beq.n	800c1fc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	f06f 0202 	mvn.w	r2, #2
 800c1cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	2201      	movs	r2, #1
 800c1d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	699b      	ldr	r3, [r3, #24]
 800c1da:	f003 0303 	and.w	r3, r3, #3
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d003      	beq.n	800c1ea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c1e2:	6878      	ldr	r0, [r7, #4]
 800c1e4:	f000 fa5b 	bl	800c69e <HAL_TIM_IC_CaptureCallback>
 800c1e8:	e005      	b.n	800c1f6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c1ea:	6878      	ldr	r0, [r7, #4]
 800c1ec:	f000 fa4d 	bl	800c68a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c1f0:	6878      	ldr	r0, [r7, #4]
 800c1f2:	f000 fa5e 	bl	800c6b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	2200      	movs	r2, #0
 800c1fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800c1fc:	68bb      	ldr	r3, [r7, #8]
 800c1fe:	f003 0304 	and.w	r3, r3, #4
 800c202:	2b00      	cmp	r3, #0
 800c204:	d020      	beq.n	800c248 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	f003 0304 	and.w	r3, r3, #4
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d01b      	beq.n	800c248 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	f06f 0204 	mvn.w	r2, #4
 800c218:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	2202      	movs	r2, #2
 800c21e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	699b      	ldr	r3, [r3, #24]
 800c226:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d003      	beq.n	800c236 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c22e:	6878      	ldr	r0, [r7, #4]
 800c230:	f000 fa35 	bl	800c69e <HAL_TIM_IC_CaptureCallback>
 800c234:	e005      	b.n	800c242 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c236:	6878      	ldr	r0, [r7, #4]
 800c238:	f000 fa27 	bl	800c68a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c23c:	6878      	ldr	r0, [r7, #4]
 800c23e:	f000 fa38 	bl	800c6b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	2200      	movs	r2, #0
 800c246:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800c248:	68bb      	ldr	r3, [r7, #8]
 800c24a:	f003 0308 	and.w	r3, r3, #8
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d020      	beq.n	800c294 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	f003 0308 	and.w	r3, r3, #8
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d01b      	beq.n	800c294 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	f06f 0208 	mvn.w	r2, #8
 800c264:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	2204      	movs	r2, #4
 800c26a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	69db      	ldr	r3, [r3, #28]
 800c272:	f003 0303 	and.w	r3, r3, #3
 800c276:	2b00      	cmp	r3, #0
 800c278:	d003      	beq.n	800c282 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c27a:	6878      	ldr	r0, [r7, #4]
 800c27c:	f000 fa0f 	bl	800c69e <HAL_TIM_IC_CaptureCallback>
 800c280:	e005      	b.n	800c28e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c282:	6878      	ldr	r0, [r7, #4]
 800c284:	f000 fa01 	bl	800c68a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c288:	6878      	ldr	r0, [r7, #4]
 800c28a:	f000 fa12 	bl	800c6b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	2200      	movs	r2, #0
 800c292:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800c294:	68bb      	ldr	r3, [r7, #8]
 800c296:	f003 0310 	and.w	r3, r3, #16
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d020      	beq.n	800c2e0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	f003 0310 	and.w	r3, r3, #16
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d01b      	beq.n	800c2e0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	f06f 0210 	mvn.w	r2, #16
 800c2b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	2208      	movs	r2, #8
 800c2b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	69db      	ldr	r3, [r3, #28]
 800c2be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d003      	beq.n	800c2ce <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c2c6:	6878      	ldr	r0, [r7, #4]
 800c2c8:	f000 f9e9 	bl	800c69e <HAL_TIM_IC_CaptureCallback>
 800c2cc:	e005      	b.n	800c2da <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c2ce:	6878      	ldr	r0, [r7, #4]
 800c2d0:	f000 f9db 	bl	800c68a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c2d4:	6878      	ldr	r0, [r7, #4]
 800c2d6:	f000 f9ec 	bl	800c6b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	2200      	movs	r2, #0
 800c2de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800c2e0:	68bb      	ldr	r3, [r7, #8]
 800c2e2:	f003 0301 	and.w	r3, r3, #1
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d00c      	beq.n	800c304 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	f003 0301 	and.w	r3, r3, #1
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d007      	beq.n	800c304 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	f06f 0201 	mvn.w	r2, #1
 800c2fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c2fe:	6878      	ldr	r0, [r7, #4]
 800c300:	f7f8 f858 	bl	80043b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800c304:	68bb      	ldr	r3, [r7, #8]
 800c306:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d00c      	beq.n	800c328 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c314:	2b00      	cmp	r3, #0
 800c316:	d007      	beq.n	800c328 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800c320:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c322:	6878      	ldr	r0, [r7, #4]
 800c324:	f000 fd2a 	bl	800cd7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800c328:	68bb      	ldr	r3, [r7, #8]
 800c32a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d00c      	beq.n	800c34c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d007      	beq.n	800c34c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800c344:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c346:	6878      	ldr	r0, [r7, #4]
 800c348:	f000 f9bd 	bl	800c6c6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800c34c:	68bb      	ldr	r3, [r7, #8]
 800c34e:	f003 0320 	and.w	r3, r3, #32
 800c352:	2b00      	cmp	r3, #0
 800c354:	d00c      	beq.n	800c370 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	f003 0320 	and.w	r3, r3, #32
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d007      	beq.n	800c370 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	f06f 0220 	mvn.w	r2, #32
 800c368:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c36a:	6878      	ldr	r0, [r7, #4]
 800c36c:	f000 fcfc 	bl	800cd68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c370:	bf00      	nop
 800c372:	3710      	adds	r7, #16
 800c374:	46bd      	mov	sp, r7
 800c376:	bd80      	pop	{r7, pc}

0800c378 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c378:	b580      	push	{r7, lr}
 800c37a:	b086      	sub	sp, #24
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	60f8      	str	r0, [r7, #12]
 800c380:	60b9      	str	r1, [r7, #8]
 800c382:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c384:	2300      	movs	r3, #0
 800c386:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c38e:	2b01      	cmp	r3, #1
 800c390:	d101      	bne.n	800c396 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c392:	2302      	movs	r3, #2
 800c394:	e0ae      	b.n	800c4f4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	2201      	movs	r2, #1
 800c39a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	2b0c      	cmp	r3, #12
 800c3a2:	f200 809f 	bhi.w	800c4e4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800c3a6:	a201      	add	r2, pc, #4	@ (adr r2, 800c3ac <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c3a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3ac:	0800c3e1 	.word	0x0800c3e1
 800c3b0:	0800c4e5 	.word	0x0800c4e5
 800c3b4:	0800c4e5 	.word	0x0800c4e5
 800c3b8:	0800c4e5 	.word	0x0800c4e5
 800c3bc:	0800c421 	.word	0x0800c421
 800c3c0:	0800c4e5 	.word	0x0800c4e5
 800c3c4:	0800c4e5 	.word	0x0800c4e5
 800c3c8:	0800c4e5 	.word	0x0800c4e5
 800c3cc:	0800c463 	.word	0x0800c463
 800c3d0:	0800c4e5 	.word	0x0800c4e5
 800c3d4:	0800c4e5 	.word	0x0800c4e5
 800c3d8:	0800c4e5 	.word	0x0800c4e5
 800c3dc:	0800c4a3 	.word	0x0800c4a3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	68b9      	ldr	r1, [r7, #8]
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	f000 fa04 	bl	800c7f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	699a      	ldr	r2, [r3, #24]
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	f042 0208 	orr.w	r2, r2, #8
 800c3fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	699a      	ldr	r2, [r3, #24]
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	f022 0204 	bic.w	r2, r2, #4
 800c40a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	6999      	ldr	r1, [r3, #24]
 800c412:	68bb      	ldr	r3, [r7, #8]
 800c414:	691a      	ldr	r2, [r3, #16]
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	430a      	orrs	r2, r1
 800c41c:	619a      	str	r2, [r3, #24]
      break;
 800c41e:	e064      	b.n	800c4ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	68b9      	ldr	r1, [r7, #8]
 800c426:	4618      	mov	r0, r3
 800c428:	f000 fa4a 	bl	800c8c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	699a      	ldr	r2, [r3, #24]
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c43a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	699a      	ldr	r2, [r3, #24]
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c44a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	6999      	ldr	r1, [r3, #24]
 800c452:	68bb      	ldr	r3, [r7, #8]
 800c454:	691b      	ldr	r3, [r3, #16]
 800c456:	021a      	lsls	r2, r3, #8
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	430a      	orrs	r2, r1
 800c45e:	619a      	str	r2, [r3, #24]
      break;
 800c460:	e043      	b.n	800c4ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	68b9      	ldr	r1, [r7, #8]
 800c468:	4618      	mov	r0, r3
 800c46a:	f000 fa95 	bl	800c998 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	69da      	ldr	r2, [r3, #28]
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	f042 0208 	orr.w	r2, r2, #8
 800c47c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	69da      	ldr	r2, [r3, #28]
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	f022 0204 	bic.w	r2, r2, #4
 800c48c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	69d9      	ldr	r1, [r3, #28]
 800c494:	68bb      	ldr	r3, [r7, #8]
 800c496:	691a      	ldr	r2, [r3, #16]
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	430a      	orrs	r2, r1
 800c49e:	61da      	str	r2, [r3, #28]
      break;
 800c4a0:	e023      	b.n	800c4ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	68b9      	ldr	r1, [r7, #8]
 800c4a8:	4618      	mov	r0, r3
 800c4aa:	f000 fadf 	bl	800ca6c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	69da      	ldr	r2, [r3, #28]
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c4bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	69da      	ldr	r2, [r3, #28]
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c4cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	69d9      	ldr	r1, [r3, #28]
 800c4d4:	68bb      	ldr	r3, [r7, #8]
 800c4d6:	691b      	ldr	r3, [r3, #16]
 800c4d8:	021a      	lsls	r2, r3, #8
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	430a      	orrs	r2, r1
 800c4e0:	61da      	str	r2, [r3, #28]
      break;
 800c4e2:	e002      	b.n	800c4ea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800c4e4:	2301      	movs	r3, #1
 800c4e6:	75fb      	strb	r3, [r7, #23]
      break;
 800c4e8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	2200      	movs	r2, #0
 800c4ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c4f2:	7dfb      	ldrb	r3, [r7, #23]
}
 800c4f4:	4618      	mov	r0, r3
 800c4f6:	3718      	adds	r7, #24
 800c4f8:	46bd      	mov	sp, r7
 800c4fa:	bd80      	pop	{r7, pc}

0800c4fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c4fc:	b580      	push	{r7, lr}
 800c4fe:	b084      	sub	sp, #16
 800c500:	af00      	add	r7, sp, #0
 800c502:	6078      	str	r0, [r7, #4]
 800c504:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c506:	2300      	movs	r3, #0
 800c508:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c510:	2b01      	cmp	r3, #1
 800c512:	d101      	bne.n	800c518 <HAL_TIM_ConfigClockSource+0x1c>
 800c514:	2302      	movs	r3, #2
 800c516:	e0b4      	b.n	800c682 <HAL_TIM_ConfigClockSource+0x186>
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	2201      	movs	r2, #1
 800c51c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	2202      	movs	r2, #2
 800c524:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	689b      	ldr	r3, [r3, #8]
 800c52e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c530:	68bb      	ldr	r3, [r7, #8]
 800c532:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800c536:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c538:	68bb      	ldr	r3, [r7, #8]
 800c53a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c53e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	68ba      	ldr	r2, [r7, #8]
 800c546:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c548:	683b      	ldr	r3, [r7, #0]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c550:	d03e      	beq.n	800c5d0 <HAL_TIM_ConfigClockSource+0xd4>
 800c552:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c556:	f200 8087 	bhi.w	800c668 <HAL_TIM_ConfigClockSource+0x16c>
 800c55a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c55e:	f000 8086 	beq.w	800c66e <HAL_TIM_ConfigClockSource+0x172>
 800c562:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c566:	d87f      	bhi.n	800c668 <HAL_TIM_ConfigClockSource+0x16c>
 800c568:	2b70      	cmp	r3, #112	@ 0x70
 800c56a:	d01a      	beq.n	800c5a2 <HAL_TIM_ConfigClockSource+0xa6>
 800c56c:	2b70      	cmp	r3, #112	@ 0x70
 800c56e:	d87b      	bhi.n	800c668 <HAL_TIM_ConfigClockSource+0x16c>
 800c570:	2b60      	cmp	r3, #96	@ 0x60
 800c572:	d050      	beq.n	800c616 <HAL_TIM_ConfigClockSource+0x11a>
 800c574:	2b60      	cmp	r3, #96	@ 0x60
 800c576:	d877      	bhi.n	800c668 <HAL_TIM_ConfigClockSource+0x16c>
 800c578:	2b50      	cmp	r3, #80	@ 0x50
 800c57a:	d03c      	beq.n	800c5f6 <HAL_TIM_ConfigClockSource+0xfa>
 800c57c:	2b50      	cmp	r3, #80	@ 0x50
 800c57e:	d873      	bhi.n	800c668 <HAL_TIM_ConfigClockSource+0x16c>
 800c580:	2b40      	cmp	r3, #64	@ 0x40
 800c582:	d058      	beq.n	800c636 <HAL_TIM_ConfigClockSource+0x13a>
 800c584:	2b40      	cmp	r3, #64	@ 0x40
 800c586:	d86f      	bhi.n	800c668 <HAL_TIM_ConfigClockSource+0x16c>
 800c588:	2b30      	cmp	r3, #48	@ 0x30
 800c58a:	d064      	beq.n	800c656 <HAL_TIM_ConfigClockSource+0x15a>
 800c58c:	2b30      	cmp	r3, #48	@ 0x30
 800c58e:	d86b      	bhi.n	800c668 <HAL_TIM_ConfigClockSource+0x16c>
 800c590:	2b20      	cmp	r3, #32
 800c592:	d060      	beq.n	800c656 <HAL_TIM_ConfigClockSource+0x15a>
 800c594:	2b20      	cmp	r3, #32
 800c596:	d867      	bhi.n	800c668 <HAL_TIM_ConfigClockSource+0x16c>
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d05c      	beq.n	800c656 <HAL_TIM_ConfigClockSource+0x15a>
 800c59c:	2b10      	cmp	r3, #16
 800c59e:	d05a      	beq.n	800c656 <HAL_TIM_ConfigClockSource+0x15a>
 800c5a0:	e062      	b.n	800c668 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c5a6:	683b      	ldr	r3, [r7, #0]
 800c5a8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c5aa:	683b      	ldr	r3, [r7, #0]
 800c5ac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c5ae:	683b      	ldr	r3, [r7, #0]
 800c5b0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c5b2:	f000 fb25 	bl	800cc00 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	689b      	ldr	r3, [r3, #8]
 800c5bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c5be:	68bb      	ldr	r3, [r7, #8]
 800c5c0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800c5c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	68ba      	ldr	r2, [r7, #8]
 800c5cc:	609a      	str	r2, [r3, #8]
      break;
 800c5ce:	e04f      	b.n	800c670 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c5d4:	683b      	ldr	r3, [r7, #0]
 800c5d6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c5d8:	683b      	ldr	r3, [r7, #0]
 800c5da:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c5dc:	683b      	ldr	r3, [r7, #0]
 800c5de:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c5e0:	f000 fb0e 	bl	800cc00 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	689a      	ldr	r2, [r3, #8]
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c5f2:	609a      	str	r2, [r3, #8]
      break;
 800c5f4:	e03c      	b.n	800c670 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c5fa:	683b      	ldr	r3, [r7, #0]
 800c5fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c5fe:	683b      	ldr	r3, [r7, #0]
 800c600:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c602:	461a      	mov	r2, r3
 800c604:	f000 fa82 	bl	800cb0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	2150      	movs	r1, #80	@ 0x50
 800c60e:	4618      	mov	r0, r3
 800c610:	f000 fadb 	bl	800cbca <TIM_ITRx_SetConfig>
      break;
 800c614:	e02c      	b.n	800c670 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c61a:	683b      	ldr	r3, [r7, #0]
 800c61c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c61e:	683b      	ldr	r3, [r7, #0]
 800c620:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c622:	461a      	mov	r2, r3
 800c624:	f000 faa1 	bl	800cb6a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	2160      	movs	r1, #96	@ 0x60
 800c62e:	4618      	mov	r0, r3
 800c630:	f000 facb 	bl	800cbca <TIM_ITRx_SetConfig>
      break;
 800c634:	e01c      	b.n	800c670 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c63a:	683b      	ldr	r3, [r7, #0]
 800c63c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c63e:	683b      	ldr	r3, [r7, #0]
 800c640:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c642:	461a      	mov	r2, r3
 800c644:	f000 fa62 	bl	800cb0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	2140      	movs	r1, #64	@ 0x40
 800c64e:	4618      	mov	r0, r3
 800c650:	f000 fabb 	bl	800cbca <TIM_ITRx_SetConfig>
      break;
 800c654:	e00c      	b.n	800c670 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	681a      	ldr	r2, [r3, #0]
 800c65a:	683b      	ldr	r3, [r7, #0]
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	4619      	mov	r1, r3
 800c660:	4610      	mov	r0, r2
 800c662:	f000 fab2 	bl	800cbca <TIM_ITRx_SetConfig>
      break;
 800c666:	e003      	b.n	800c670 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800c668:	2301      	movs	r3, #1
 800c66a:	73fb      	strb	r3, [r7, #15]
      break;
 800c66c:	e000      	b.n	800c670 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800c66e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	2201      	movs	r2, #1
 800c674:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	2200      	movs	r2, #0
 800c67c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c680:	7bfb      	ldrb	r3, [r7, #15]
}
 800c682:	4618      	mov	r0, r3
 800c684:	3710      	adds	r7, #16
 800c686:	46bd      	mov	sp, r7
 800c688:	bd80      	pop	{r7, pc}

0800c68a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c68a:	b480      	push	{r7}
 800c68c:	b083      	sub	sp, #12
 800c68e:	af00      	add	r7, sp, #0
 800c690:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c692:	bf00      	nop
 800c694:	370c      	adds	r7, #12
 800c696:	46bd      	mov	sp, r7
 800c698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c69c:	4770      	bx	lr

0800c69e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c69e:	b480      	push	{r7}
 800c6a0:	b083      	sub	sp, #12
 800c6a2:	af00      	add	r7, sp, #0
 800c6a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c6a6:	bf00      	nop
 800c6a8:	370c      	adds	r7, #12
 800c6aa:	46bd      	mov	sp, r7
 800c6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b0:	4770      	bx	lr

0800c6b2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c6b2:	b480      	push	{r7}
 800c6b4:	b083      	sub	sp, #12
 800c6b6:	af00      	add	r7, sp, #0
 800c6b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c6ba:	bf00      	nop
 800c6bc:	370c      	adds	r7, #12
 800c6be:	46bd      	mov	sp, r7
 800c6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c4:	4770      	bx	lr

0800c6c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c6c6:	b480      	push	{r7}
 800c6c8:	b083      	sub	sp, #12
 800c6ca:	af00      	add	r7, sp, #0
 800c6cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c6ce:	bf00      	nop
 800c6d0:	370c      	adds	r7, #12
 800c6d2:	46bd      	mov	sp, r7
 800c6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d8:	4770      	bx	lr
	...

0800c6dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c6dc:	b480      	push	{r7}
 800c6de:	b085      	sub	sp, #20
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	6078      	str	r0, [r7, #4]
 800c6e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	4a3a      	ldr	r2, [pc, #232]	@ (800c7d8 <TIM_Base_SetConfig+0xfc>)
 800c6f0:	4293      	cmp	r3, r2
 800c6f2:	d00f      	beq.n	800c714 <TIM_Base_SetConfig+0x38>
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c6fa:	d00b      	beq.n	800c714 <TIM_Base_SetConfig+0x38>
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	4a37      	ldr	r2, [pc, #220]	@ (800c7dc <TIM_Base_SetConfig+0x100>)
 800c700:	4293      	cmp	r3, r2
 800c702:	d007      	beq.n	800c714 <TIM_Base_SetConfig+0x38>
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	4a36      	ldr	r2, [pc, #216]	@ (800c7e0 <TIM_Base_SetConfig+0x104>)
 800c708:	4293      	cmp	r3, r2
 800c70a:	d003      	beq.n	800c714 <TIM_Base_SetConfig+0x38>
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	4a35      	ldr	r2, [pc, #212]	@ (800c7e4 <TIM_Base_SetConfig+0x108>)
 800c710:	4293      	cmp	r3, r2
 800c712:	d108      	bne.n	800c726 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c71a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c71c:	683b      	ldr	r3, [r7, #0]
 800c71e:	685b      	ldr	r3, [r3, #4]
 800c720:	68fa      	ldr	r2, [r7, #12]
 800c722:	4313      	orrs	r3, r2
 800c724:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	4a2b      	ldr	r2, [pc, #172]	@ (800c7d8 <TIM_Base_SetConfig+0xfc>)
 800c72a:	4293      	cmp	r3, r2
 800c72c:	d01b      	beq.n	800c766 <TIM_Base_SetConfig+0x8a>
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c734:	d017      	beq.n	800c766 <TIM_Base_SetConfig+0x8a>
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	4a28      	ldr	r2, [pc, #160]	@ (800c7dc <TIM_Base_SetConfig+0x100>)
 800c73a:	4293      	cmp	r3, r2
 800c73c:	d013      	beq.n	800c766 <TIM_Base_SetConfig+0x8a>
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	4a27      	ldr	r2, [pc, #156]	@ (800c7e0 <TIM_Base_SetConfig+0x104>)
 800c742:	4293      	cmp	r3, r2
 800c744:	d00f      	beq.n	800c766 <TIM_Base_SetConfig+0x8a>
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	4a26      	ldr	r2, [pc, #152]	@ (800c7e4 <TIM_Base_SetConfig+0x108>)
 800c74a:	4293      	cmp	r3, r2
 800c74c:	d00b      	beq.n	800c766 <TIM_Base_SetConfig+0x8a>
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	4a25      	ldr	r2, [pc, #148]	@ (800c7e8 <TIM_Base_SetConfig+0x10c>)
 800c752:	4293      	cmp	r3, r2
 800c754:	d007      	beq.n	800c766 <TIM_Base_SetConfig+0x8a>
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	4a24      	ldr	r2, [pc, #144]	@ (800c7ec <TIM_Base_SetConfig+0x110>)
 800c75a:	4293      	cmp	r3, r2
 800c75c:	d003      	beq.n	800c766 <TIM_Base_SetConfig+0x8a>
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	4a23      	ldr	r2, [pc, #140]	@ (800c7f0 <TIM_Base_SetConfig+0x114>)
 800c762:	4293      	cmp	r3, r2
 800c764:	d108      	bne.n	800c778 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c76c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c76e:	683b      	ldr	r3, [r7, #0]
 800c770:	68db      	ldr	r3, [r3, #12]
 800c772:	68fa      	ldr	r2, [r7, #12]
 800c774:	4313      	orrs	r3, r2
 800c776:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c77e:	683b      	ldr	r3, [r7, #0]
 800c780:	695b      	ldr	r3, [r3, #20]
 800c782:	4313      	orrs	r3, r2
 800c784:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	68fa      	ldr	r2, [r7, #12]
 800c78a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c78c:	683b      	ldr	r3, [r7, #0]
 800c78e:	689a      	ldr	r2, [r3, #8]
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c794:	683b      	ldr	r3, [r7, #0]
 800c796:	681a      	ldr	r2, [r3, #0]
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	4a0e      	ldr	r2, [pc, #56]	@ (800c7d8 <TIM_Base_SetConfig+0xfc>)
 800c7a0:	4293      	cmp	r3, r2
 800c7a2:	d103      	bne.n	800c7ac <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c7a4:	683b      	ldr	r3, [r7, #0]
 800c7a6:	691a      	ldr	r2, [r3, #16]
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	2201      	movs	r2, #1
 800c7b0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	691b      	ldr	r3, [r3, #16]
 800c7b6:	f003 0301 	and.w	r3, r3, #1
 800c7ba:	2b01      	cmp	r3, #1
 800c7bc:	d105      	bne.n	800c7ca <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	691b      	ldr	r3, [r3, #16]
 800c7c2:	f023 0201 	bic.w	r2, r3, #1
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	611a      	str	r2, [r3, #16]
  }
}
 800c7ca:	bf00      	nop
 800c7cc:	3714      	adds	r7, #20
 800c7ce:	46bd      	mov	sp, r7
 800c7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d4:	4770      	bx	lr
 800c7d6:	bf00      	nop
 800c7d8:	40010000 	.word	0x40010000
 800c7dc:	40000400 	.word	0x40000400
 800c7e0:	40000800 	.word	0x40000800
 800c7e4:	40000c00 	.word	0x40000c00
 800c7e8:	40014000 	.word	0x40014000
 800c7ec:	40014400 	.word	0x40014400
 800c7f0:	40014800 	.word	0x40014800

0800c7f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c7f4:	b480      	push	{r7}
 800c7f6:	b087      	sub	sp, #28
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	6078      	str	r0, [r7, #4]
 800c7fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	6a1b      	ldr	r3, [r3, #32]
 800c802:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	6a1b      	ldr	r3, [r3, #32]
 800c808:	f023 0201 	bic.w	r2, r3, #1
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	685b      	ldr	r3, [r3, #4]
 800c814:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	699b      	ldr	r3, [r3, #24]
 800c81a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c822:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	f023 0303 	bic.w	r3, r3, #3
 800c82a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c82c:	683b      	ldr	r3, [r7, #0]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	68fa      	ldr	r2, [r7, #12]
 800c832:	4313      	orrs	r3, r2
 800c834:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c836:	697b      	ldr	r3, [r7, #20]
 800c838:	f023 0302 	bic.w	r3, r3, #2
 800c83c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c83e:	683b      	ldr	r3, [r7, #0]
 800c840:	689b      	ldr	r3, [r3, #8]
 800c842:	697a      	ldr	r2, [r7, #20]
 800c844:	4313      	orrs	r3, r2
 800c846:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	4a1c      	ldr	r2, [pc, #112]	@ (800c8bc <TIM_OC1_SetConfig+0xc8>)
 800c84c:	4293      	cmp	r3, r2
 800c84e:	d10c      	bne.n	800c86a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c850:	697b      	ldr	r3, [r7, #20]
 800c852:	f023 0308 	bic.w	r3, r3, #8
 800c856:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c858:	683b      	ldr	r3, [r7, #0]
 800c85a:	68db      	ldr	r3, [r3, #12]
 800c85c:	697a      	ldr	r2, [r7, #20]
 800c85e:	4313      	orrs	r3, r2
 800c860:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c862:	697b      	ldr	r3, [r7, #20]
 800c864:	f023 0304 	bic.w	r3, r3, #4
 800c868:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	4a13      	ldr	r2, [pc, #76]	@ (800c8bc <TIM_OC1_SetConfig+0xc8>)
 800c86e:	4293      	cmp	r3, r2
 800c870:	d111      	bne.n	800c896 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c872:	693b      	ldr	r3, [r7, #16]
 800c874:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c878:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c87a:	693b      	ldr	r3, [r7, #16]
 800c87c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c880:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c882:	683b      	ldr	r3, [r7, #0]
 800c884:	695b      	ldr	r3, [r3, #20]
 800c886:	693a      	ldr	r2, [r7, #16]
 800c888:	4313      	orrs	r3, r2
 800c88a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c88c:	683b      	ldr	r3, [r7, #0]
 800c88e:	699b      	ldr	r3, [r3, #24]
 800c890:	693a      	ldr	r2, [r7, #16]
 800c892:	4313      	orrs	r3, r2
 800c894:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	693a      	ldr	r2, [r7, #16]
 800c89a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	68fa      	ldr	r2, [r7, #12]
 800c8a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c8a2:	683b      	ldr	r3, [r7, #0]
 800c8a4:	685a      	ldr	r2, [r3, #4]
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	697a      	ldr	r2, [r7, #20]
 800c8ae:	621a      	str	r2, [r3, #32]
}
 800c8b0:	bf00      	nop
 800c8b2:	371c      	adds	r7, #28
 800c8b4:	46bd      	mov	sp, r7
 800c8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ba:	4770      	bx	lr
 800c8bc:	40010000 	.word	0x40010000

0800c8c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c8c0:	b480      	push	{r7}
 800c8c2:	b087      	sub	sp, #28
 800c8c4:	af00      	add	r7, sp, #0
 800c8c6:	6078      	str	r0, [r7, #4]
 800c8c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	6a1b      	ldr	r3, [r3, #32]
 800c8ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	6a1b      	ldr	r3, [r3, #32]
 800c8d4:	f023 0210 	bic.w	r2, r3, #16
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	685b      	ldr	r3, [r3, #4]
 800c8e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	699b      	ldr	r3, [r3, #24]
 800c8e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c8ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c8f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c8f8:	683b      	ldr	r3, [r7, #0]
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	021b      	lsls	r3, r3, #8
 800c8fe:	68fa      	ldr	r2, [r7, #12]
 800c900:	4313      	orrs	r3, r2
 800c902:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c904:	697b      	ldr	r3, [r7, #20]
 800c906:	f023 0320 	bic.w	r3, r3, #32
 800c90a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c90c:	683b      	ldr	r3, [r7, #0]
 800c90e:	689b      	ldr	r3, [r3, #8]
 800c910:	011b      	lsls	r3, r3, #4
 800c912:	697a      	ldr	r2, [r7, #20]
 800c914:	4313      	orrs	r3, r2
 800c916:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	4a1e      	ldr	r2, [pc, #120]	@ (800c994 <TIM_OC2_SetConfig+0xd4>)
 800c91c:	4293      	cmp	r3, r2
 800c91e:	d10d      	bne.n	800c93c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c920:	697b      	ldr	r3, [r7, #20]
 800c922:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c926:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c928:	683b      	ldr	r3, [r7, #0]
 800c92a:	68db      	ldr	r3, [r3, #12]
 800c92c:	011b      	lsls	r3, r3, #4
 800c92e:	697a      	ldr	r2, [r7, #20]
 800c930:	4313      	orrs	r3, r2
 800c932:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c934:	697b      	ldr	r3, [r7, #20]
 800c936:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c93a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	4a15      	ldr	r2, [pc, #84]	@ (800c994 <TIM_OC2_SetConfig+0xd4>)
 800c940:	4293      	cmp	r3, r2
 800c942:	d113      	bne.n	800c96c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c944:	693b      	ldr	r3, [r7, #16]
 800c946:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c94a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c94c:	693b      	ldr	r3, [r7, #16]
 800c94e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c952:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c954:	683b      	ldr	r3, [r7, #0]
 800c956:	695b      	ldr	r3, [r3, #20]
 800c958:	009b      	lsls	r3, r3, #2
 800c95a:	693a      	ldr	r2, [r7, #16]
 800c95c:	4313      	orrs	r3, r2
 800c95e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c960:	683b      	ldr	r3, [r7, #0]
 800c962:	699b      	ldr	r3, [r3, #24]
 800c964:	009b      	lsls	r3, r3, #2
 800c966:	693a      	ldr	r2, [r7, #16]
 800c968:	4313      	orrs	r3, r2
 800c96a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	693a      	ldr	r2, [r7, #16]
 800c970:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	68fa      	ldr	r2, [r7, #12]
 800c976:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c978:	683b      	ldr	r3, [r7, #0]
 800c97a:	685a      	ldr	r2, [r3, #4]
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	697a      	ldr	r2, [r7, #20]
 800c984:	621a      	str	r2, [r3, #32]
}
 800c986:	bf00      	nop
 800c988:	371c      	adds	r7, #28
 800c98a:	46bd      	mov	sp, r7
 800c98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c990:	4770      	bx	lr
 800c992:	bf00      	nop
 800c994:	40010000 	.word	0x40010000

0800c998 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c998:	b480      	push	{r7}
 800c99a:	b087      	sub	sp, #28
 800c99c:	af00      	add	r7, sp, #0
 800c99e:	6078      	str	r0, [r7, #4]
 800c9a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	6a1b      	ldr	r3, [r3, #32]
 800c9a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	6a1b      	ldr	r3, [r3, #32]
 800c9ac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	685b      	ldr	r3, [r3, #4]
 800c9b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	69db      	ldr	r3, [r3, #28]
 800c9be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c9c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	f023 0303 	bic.w	r3, r3, #3
 800c9ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c9d0:	683b      	ldr	r3, [r7, #0]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	68fa      	ldr	r2, [r7, #12]
 800c9d6:	4313      	orrs	r3, r2
 800c9d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c9da:	697b      	ldr	r3, [r7, #20]
 800c9dc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c9e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c9e2:	683b      	ldr	r3, [r7, #0]
 800c9e4:	689b      	ldr	r3, [r3, #8]
 800c9e6:	021b      	lsls	r3, r3, #8
 800c9e8:	697a      	ldr	r2, [r7, #20]
 800c9ea:	4313      	orrs	r3, r2
 800c9ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	4a1d      	ldr	r2, [pc, #116]	@ (800ca68 <TIM_OC3_SetConfig+0xd0>)
 800c9f2:	4293      	cmp	r3, r2
 800c9f4:	d10d      	bne.n	800ca12 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c9f6:	697b      	ldr	r3, [r7, #20]
 800c9f8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c9fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c9fe:	683b      	ldr	r3, [r7, #0]
 800ca00:	68db      	ldr	r3, [r3, #12]
 800ca02:	021b      	lsls	r3, r3, #8
 800ca04:	697a      	ldr	r2, [r7, #20]
 800ca06:	4313      	orrs	r3, r2
 800ca08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ca0a:	697b      	ldr	r3, [r7, #20]
 800ca0c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ca10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	4a14      	ldr	r2, [pc, #80]	@ (800ca68 <TIM_OC3_SetConfig+0xd0>)
 800ca16:	4293      	cmp	r3, r2
 800ca18:	d113      	bne.n	800ca42 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ca1a:	693b      	ldr	r3, [r7, #16]
 800ca1c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ca20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ca22:	693b      	ldr	r3, [r7, #16]
 800ca24:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ca28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ca2a:	683b      	ldr	r3, [r7, #0]
 800ca2c:	695b      	ldr	r3, [r3, #20]
 800ca2e:	011b      	lsls	r3, r3, #4
 800ca30:	693a      	ldr	r2, [r7, #16]
 800ca32:	4313      	orrs	r3, r2
 800ca34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ca36:	683b      	ldr	r3, [r7, #0]
 800ca38:	699b      	ldr	r3, [r3, #24]
 800ca3a:	011b      	lsls	r3, r3, #4
 800ca3c:	693a      	ldr	r2, [r7, #16]
 800ca3e:	4313      	orrs	r3, r2
 800ca40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	693a      	ldr	r2, [r7, #16]
 800ca46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	68fa      	ldr	r2, [r7, #12]
 800ca4c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ca4e:	683b      	ldr	r3, [r7, #0]
 800ca50:	685a      	ldr	r2, [r3, #4]
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	697a      	ldr	r2, [r7, #20]
 800ca5a:	621a      	str	r2, [r3, #32]
}
 800ca5c:	bf00      	nop
 800ca5e:	371c      	adds	r7, #28
 800ca60:	46bd      	mov	sp, r7
 800ca62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca66:	4770      	bx	lr
 800ca68:	40010000 	.word	0x40010000

0800ca6c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ca6c:	b480      	push	{r7}
 800ca6e:	b087      	sub	sp, #28
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	6078      	str	r0, [r7, #4]
 800ca74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	6a1b      	ldr	r3, [r3, #32]
 800ca7a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	6a1b      	ldr	r3, [r3, #32]
 800ca80:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	685b      	ldr	r3, [r3, #4]
 800ca8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	69db      	ldr	r3, [r3, #28]
 800ca92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ca9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800caa2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800caa4:	683b      	ldr	r3, [r7, #0]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	021b      	lsls	r3, r3, #8
 800caaa:	68fa      	ldr	r2, [r7, #12]
 800caac:	4313      	orrs	r3, r2
 800caae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800cab0:	693b      	ldr	r3, [r7, #16]
 800cab2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800cab6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800cab8:	683b      	ldr	r3, [r7, #0]
 800caba:	689b      	ldr	r3, [r3, #8]
 800cabc:	031b      	lsls	r3, r3, #12
 800cabe:	693a      	ldr	r2, [r7, #16]
 800cac0:	4313      	orrs	r3, r2
 800cac2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	4a10      	ldr	r2, [pc, #64]	@ (800cb08 <TIM_OC4_SetConfig+0x9c>)
 800cac8:	4293      	cmp	r3, r2
 800caca:	d109      	bne.n	800cae0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800cacc:	697b      	ldr	r3, [r7, #20]
 800cace:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800cad2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800cad4:	683b      	ldr	r3, [r7, #0]
 800cad6:	695b      	ldr	r3, [r3, #20]
 800cad8:	019b      	lsls	r3, r3, #6
 800cada:	697a      	ldr	r2, [r7, #20]
 800cadc:	4313      	orrs	r3, r2
 800cade:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	697a      	ldr	r2, [r7, #20]
 800cae4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	68fa      	ldr	r2, [r7, #12]
 800caea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800caec:	683b      	ldr	r3, [r7, #0]
 800caee:	685a      	ldr	r2, [r3, #4]
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	693a      	ldr	r2, [r7, #16]
 800caf8:	621a      	str	r2, [r3, #32]
}
 800cafa:	bf00      	nop
 800cafc:	371c      	adds	r7, #28
 800cafe:	46bd      	mov	sp, r7
 800cb00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb04:	4770      	bx	lr
 800cb06:	bf00      	nop
 800cb08:	40010000 	.word	0x40010000

0800cb0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cb0c:	b480      	push	{r7}
 800cb0e:	b087      	sub	sp, #28
 800cb10:	af00      	add	r7, sp, #0
 800cb12:	60f8      	str	r0, [r7, #12]
 800cb14:	60b9      	str	r1, [r7, #8]
 800cb16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	6a1b      	ldr	r3, [r3, #32]
 800cb1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	6a1b      	ldr	r3, [r3, #32]
 800cb22:	f023 0201 	bic.w	r2, r3, #1
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	699b      	ldr	r3, [r3, #24]
 800cb2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cb30:	693b      	ldr	r3, [r7, #16]
 800cb32:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800cb36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	011b      	lsls	r3, r3, #4
 800cb3c:	693a      	ldr	r2, [r7, #16]
 800cb3e:	4313      	orrs	r3, r2
 800cb40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cb42:	697b      	ldr	r3, [r7, #20]
 800cb44:	f023 030a 	bic.w	r3, r3, #10
 800cb48:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800cb4a:	697a      	ldr	r2, [r7, #20]
 800cb4c:	68bb      	ldr	r3, [r7, #8]
 800cb4e:	4313      	orrs	r3, r2
 800cb50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	693a      	ldr	r2, [r7, #16]
 800cb56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	697a      	ldr	r2, [r7, #20]
 800cb5c:	621a      	str	r2, [r3, #32]
}
 800cb5e:	bf00      	nop
 800cb60:	371c      	adds	r7, #28
 800cb62:	46bd      	mov	sp, r7
 800cb64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb68:	4770      	bx	lr

0800cb6a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cb6a:	b480      	push	{r7}
 800cb6c:	b087      	sub	sp, #28
 800cb6e:	af00      	add	r7, sp, #0
 800cb70:	60f8      	str	r0, [r7, #12]
 800cb72:	60b9      	str	r1, [r7, #8]
 800cb74:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	6a1b      	ldr	r3, [r3, #32]
 800cb7a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	6a1b      	ldr	r3, [r3, #32]
 800cb80:	f023 0210 	bic.w	r2, r3, #16
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	699b      	ldr	r3, [r3, #24]
 800cb8c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cb8e:	693b      	ldr	r3, [r7, #16]
 800cb90:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800cb94:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	031b      	lsls	r3, r3, #12
 800cb9a:	693a      	ldr	r2, [r7, #16]
 800cb9c:	4313      	orrs	r3, r2
 800cb9e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cba0:	697b      	ldr	r3, [r7, #20]
 800cba2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800cba6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800cba8:	68bb      	ldr	r3, [r7, #8]
 800cbaa:	011b      	lsls	r3, r3, #4
 800cbac:	697a      	ldr	r2, [r7, #20]
 800cbae:	4313      	orrs	r3, r2
 800cbb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	693a      	ldr	r2, [r7, #16]
 800cbb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	697a      	ldr	r2, [r7, #20]
 800cbbc:	621a      	str	r2, [r3, #32]
}
 800cbbe:	bf00      	nop
 800cbc0:	371c      	adds	r7, #28
 800cbc2:	46bd      	mov	sp, r7
 800cbc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc8:	4770      	bx	lr

0800cbca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800cbca:	b480      	push	{r7}
 800cbcc:	b085      	sub	sp, #20
 800cbce:	af00      	add	r7, sp, #0
 800cbd0:	6078      	str	r0, [r7, #4]
 800cbd2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	689b      	ldr	r3, [r3, #8]
 800cbd8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cbe0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cbe2:	683a      	ldr	r2, [r7, #0]
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	4313      	orrs	r3, r2
 800cbe8:	f043 0307 	orr.w	r3, r3, #7
 800cbec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	68fa      	ldr	r2, [r7, #12]
 800cbf2:	609a      	str	r2, [r3, #8]
}
 800cbf4:	bf00      	nop
 800cbf6:	3714      	adds	r7, #20
 800cbf8:	46bd      	mov	sp, r7
 800cbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbfe:	4770      	bx	lr

0800cc00 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800cc00:	b480      	push	{r7}
 800cc02:	b087      	sub	sp, #28
 800cc04:	af00      	add	r7, sp, #0
 800cc06:	60f8      	str	r0, [r7, #12]
 800cc08:	60b9      	str	r1, [r7, #8]
 800cc0a:	607a      	str	r2, [r7, #4]
 800cc0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	689b      	ldr	r3, [r3, #8]
 800cc12:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cc14:	697b      	ldr	r3, [r7, #20]
 800cc16:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800cc1a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800cc1c:	683b      	ldr	r3, [r7, #0]
 800cc1e:	021a      	lsls	r2, r3, #8
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	431a      	orrs	r2, r3
 800cc24:	68bb      	ldr	r3, [r7, #8]
 800cc26:	4313      	orrs	r3, r2
 800cc28:	697a      	ldr	r2, [r7, #20]
 800cc2a:	4313      	orrs	r3, r2
 800cc2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	697a      	ldr	r2, [r7, #20]
 800cc32:	609a      	str	r2, [r3, #8]
}
 800cc34:	bf00      	nop
 800cc36:	371c      	adds	r7, #28
 800cc38:	46bd      	mov	sp, r7
 800cc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc3e:	4770      	bx	lr

0800cc40 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800cc40:	b480      	push	{r7}
 800cc42:	b087      	sub	sp, #28
 800cc44:	af00      	add	r7, sp, #0
 800cc46:	60f8      	str	r0, [r7, #12]
 800cc48:	60b9      	str	r1, [r7, #8]
 800cc4a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800cc4c:	68bb      	ldr	r3, [r7, #8]
 800cc4e:	f003 031f 	and.w	r3, r3, #31
 800cc52:	2201      	movs	r2, #1
 800cc54:	fa02 f303 	lsl.w	r3, r2, r3
 800cc58:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	6a1a      	ldr	r2, [r3, #32]
 800cc5e:	697b      	ldr	r3, [r7, #20]
 800cc60:	43db      	mvns	r3, r3
 800cc62:	401a      	ands	r2, r3
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	6a1a      	ldr	r2, [r3, #32]
 800cc6c:	68bb      	ldr	r3, [r7, #8]
 800cc6e:	f003 031f 	and.w	r3, r3, #31
 800cc72:	6879      	ldr	r1, [r7, #4]
 800cc74:	fa01 f303 	lsl.w	r3, r1, r3
 800cc78:	431a      	orrs	r2, r3
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	621a      	str	r2, [r3, #32]
}
 800cc7e:	bf00      	nop
 800cc80:	371c      	adds	r7, #28
 800cc82:	46bd      	mov	sp, r7
 800cc84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc88:	4770      	bx	lr
	...

0800cc8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cc8c:	b480      	push	{r7}
 800cc8e:	b085      	sub	sp, #20
 800cc90:	af00      	add	r7, sp, #0
 800cc92:	6078      	str	r0, [r7, #4]
 800cc94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800cc9c:	2b01      	cmp	r3, #1
 800cc9e:	d101      	bne.n	800cca4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cca0:	2302      	movs	r3, #2
 800cca2:	e050      	b.n	800cd46 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	2201      	movs	r2, #1
 800cca8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	2202      	movs	r2, #2
 800ccb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	685b      	ldr	r3, [r3, #4]
 800ccba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	689b      	ldr	r3, [r3, #8]
 800ccc2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ccca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cccc:	683b      	ldr	r3, [r7, #0]
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	68fa      	ldr	r2, [r7, #12]
 800ccd2:	4313      	orrs	r3, r2
 800ccd4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	68fa      	ldr	r2, [r7, #12]
 800ccdc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	4a1c      	ldr	r2, [pc, #112]	@ (800cd54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800cce4:	4293      	cmp	r3, r2
 800cce6:	d018      	beq.n	800cd1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ccf0:	d013      	beq.n	800cd1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	4a18      	ldr	r2, [pc, #96]	@ (800cd58 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800ccf8:	4293      	cmp	r3, r2
 800ccfa:	d00e      	beq.n	800cd1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	4a16      	ldr	r2, [pc, #88]	@ (800cd5c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800cd02:	4293      	cmp	r3, r2
 800cd04:	d009      	beq.n	800cd1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	4a15      	ldr	r2, [pc, #84]	@ (800cd60 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800cd0c:	4293      	cmp	r3, r2
 800cd0e:	d004      	beq.n	800cd1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	4a13      	ldr	r2, [pc, #76]	@ (800cd64 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800cd16:	4293      	cmp	r3, r2
 800cd18:	d10c      	bne.n	800cd34 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cd1a:	68bb      	ldr	r3, [r7, #8]
 800cd1c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cd20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cd22:	683b      	ldr	r3, [r7, #0]
 800cd24:	685b      	ldr	r3, [r3, #4]
 800cd26:	68ba      	ldr	r2, [r7, #8]
 800cd28:	4313      	orrs	r3, r2
 800cd2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	68ba      	ldr	r2, [r7, #8]
 800cd32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	2201      	movs	r2, #1
 800cd38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	2200      	movs	r2, #0
 800cd40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800cd44:	2300      	movs	r3, #0
}
 800cd46:	4618      	mov	r0, r3
 800cd48:	3714      	adds	r7, #20
 800cd4a:	46bd      	mov	sp, r7
 800cd4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd50:	4770      	bx	lr
 800cd52:	bf00      	nop
 800cd54:	40010000 	.word	0x40010000
 800cd58:	40000400 	.word	0x40000400
 800cd5c:	40000800 	.word	0x40000800
 800cd60:	40000c00 	.word	0x40000c00
 800cd64:	40014000 	.word	0x40014000

0800cd68 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cd68:	b480      	push	{r7}
 800cd6a:	b083      	sub	sp, #12
 800cd6c:	af00      	add	r7, sp, #0
 800cd6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cd70:	bf00      	nop
 800cd72:	370c      	adds	r7, #12
 800cd74:	46bd      	mov	sp, r7
 800cd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd7a:	4770      	bx	lr

0800cd7c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cd7c:	b480      	push	{r7}
 800cd7e:	b083      	sub	sp, #12
 800cd80:	af00      	add	r7, sp, #0
 800cd82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cd84:	bf00      	nop
 800cd86:	370c      	adds	r7, #12
 800cd88:	46bd      	mov	sp, r7
 800cd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd8e:	4770      	bx	lr

0800cd90 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cd90:	b580      	push	{r7, lr}
 800cd92:	b082      	sub	sp, #8
 800cd94:	af00      	add	r7, sp, #0
 800cd96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d101      	bne.n	800cda2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cd9e:	2301      	movs	r3, #1
 800cda0:	e042      	b.n	800ce28 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cda8:	b2db      	uxtb	r3, r3
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d106      	bne.n	800cdbc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	2200      	movs	r2, #0
 800cdb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cdb6:	6878      	ldr	r0, [r7, #4]
 800cdb8:	f7f7 ff50 	bl	8004c5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	2224      	movs	r2, #36	@ 0x24
 800cdc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	68da      	ldr	r2, [r3, #12]
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800cdd2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800cdd4:	6878      	ldr	r0, [r7, #4]
 800cdd6:	f000 fd11 	bl	800d7fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	691a      	ldr	r2, [r3, #16]
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800cde8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	695a      	ldr	r2, [r3, #20]
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800cdf8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	68da      	ldr	r2, [r3, #12]
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800ce08:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	2200      	movs	r2, #0
 800ce0e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	2220      	movs	r2, #32
 800ce14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	2220      	movs	r2, #32
 800ce1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	2200      	movs	r2, #0
 800ce24:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800ce26:	2300      	movs	r3, #0
}
 800ce28:	4618      	mov	r0, r3
 800ce2a:	3708      	adds	r7, #8
 800ce2c:	46bd      	mov	sp, r7
 800ce2e:	bd80      	pop	{r7, pc}

0800ce30 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800ce30:	b480      	push	{r7}
 800ce32:	b085      	sub	sp, #20
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	60f8      	str	r0, [r7, #12]
 800ce38:	60b9      	str	r1, [r7, #8]
 800ce3a:	4613      	mov	r3, r2
 800ce3c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ce44:	b2db      	uxtb	r3, r3
 800ce46:	2b20      	cmp	r3, #32
 800ce48:	d121      	bne.n	800ce8e <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800ce4a:	68bb      	ldr	r3, [r7, #8]
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d002      	beq.n	800ce56 <HAL_UART_Transmit_IT+0x26>
 800ce50:	88fb      	ldrh	r3, [r7, #6]
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d101      	bne.n	800ce5a <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800ce56:	2301      	movs	r3, #1
 800ce58:	e01a      	b.n	800ce90 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	68ba      	ldr	r2, [r7, #8]
 800ce5e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	88fa      	ldrh	r2, [r7, #6]
 800ce64:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	88fa      	ldrh	r2, [r7, #6]
 800ce6a:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	2200      	movs	r2, #0
 800ce70:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	2221      	movs	r2, #33	@ 0x21
 800ce76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	68da      	ldr	r2, [r3, #12]
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800ce88:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800ce8a:	2300      	movs	r3, #0
 800ce8c:	e000      	b.n	800ce90 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800ce8e:	2302      	movs	r3, #2
  }
}
 800ce90:	4618      	mov	r0, r3
 800ce92:	3714      	adds	r7, #20
 800ce94:	46bd      	mov	sp, r7
 800ce96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce9a:	4770      	bx	lr

0800ce9c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ce9c:	b580      	push	{r7, lr}
 800ce9e:	b084      	sub	sp, #16
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	60f8      	str	r0, [r7, #12]
 800cea4:	60b9      	str	r1, [r7, #8]
 800cea6:	4613      	mov	r3, r2
 800cea8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ceb0:	b2db      	uxtb	r3, r3
 800ceb2:	2b20      	cmp	r3, #32
 800ceb4:	d112      	bne.n	800cedc <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800ceb6:	68bb      	ldr	r3, [r7, #8]
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d002      	beq.n	800cec2 <HAL_UART_Receive_IT+0x26>
 800cebc:	88fb      	ldrh	r3, [r7, #6]
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d101      	bne.n	800cec6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800cec2:	2301      	movs	r3, #1
 800cec4:	e00b      	b.n	800cede <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	2200      	movs	r2, #0
 800ceca:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800cecc:	88fb      	ldrh	r3, [r7, #6]
 800cece:	461a      	mov	r2, r3
 800ced0:	68b9      	ldr	r1, [r7, #8]
 800ced2:	68f8      	ldr	r0, [r7, #12]
 800ced4:	f000 faba 	bl	800d44c <UART_Start_Receive_IT>
 800ced8:	4603      	mov	r3, r0
 800ceda:	e000      	b.n	800cede <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800cedc:	2302      	movs	r3, #2
  }
}
 800cede:	4618      	mov	r0, r3
 800cee0:	3710      	adds	r7, #16
 800cee2:	46bd      	mov	sp, r7
 800cee4:	bd80      	pop	{r7, pc}
	...

0800cee8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800cee8:	b580      	push	{r7, lr}
 800ceea:	b0ba      	sub	sp, #232	@ 0xe8
 800ceec:	af00      	add	r7, sp, #0
 800ceee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	68db      	ldr	r3, [r3, #12]
 800cf00:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	695b      	ldr	r3, [r3, #20]
 800cf0a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800cf0e:	2300      	movs	r3, #0
 800cf10:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800cf14:	2300      	movs	r3, #0
 800cf16:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800cf1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cf1e:	f003 030f 	and.w	r3, r3, #15
 800cf22:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800cf26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d10f      	bne.n	800cf4e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800cf2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cf32:	f003 0320 	and.w	r3, r3, #32
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d009      	beq.n	800cf4e <HAL_UART_IRQHandler+0x66>
 800cf3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cf3e:	f003 0320 	and.w	r3, r3, #32
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d003      	beq.n	800cf4e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800cf46:	6878      	ldr	r0, [r7, #4]
 800cf48:	f000 fb99 	bl	800d67e <UART_Receive_IT>
      return;
 800cf4c:	e25b      	b.n	800d406 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800cf4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	f000 80de 	beq.w	800d114 <HAL_UART_IRQHandler+0x22c>
 800cf58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cf5c:	f003 0301 	and.w	r3, r3, #1
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d106      	bne.n	800cf72 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800cf64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cf68:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	f000 80d1 	beq.w	800d114 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800cf72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cf76:	f003 0301 	and.w	r3, r3, #1
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d00b      	beq.n	800cf96 <HAL_UART_IRQHandler+0xae>
 800cf7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cf82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d005      	beq.n	800cf96 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cf8e:	f043 0201 	orr.w	r2, r3, #1
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800cf96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cf9a:	f003 0304 	and.w	r3, r3, #4
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d00b      	beq.n	800cfba <HAL_UART_IRQHandler+0xd2>
 800cfa2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cfa6:	f003 0301 	and.w	r3, r3, #1
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d005      	beq.n	800cfba <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cfb2:	f043 0202 	orr.w	r2, r3, #2
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800cfba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cfbe:	f003 0302 	and.w	r3, r3, #2
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d00b      	beq.n	800cfde <HAL_UART_IRQHandler+0xf6>
 800cfc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cfca:	f003 0301 	and.w	r3, r3, #1
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d005      	beq.n	800cfde <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cfd6:	f043 0204 	orr.w	r2, r3, #4
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800cfde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cfe2:	f003 0308 	and.w	r3, r3, #8
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d011      	beq.n	800d00e <HAL_UART_IRQHandler+0x126>
 800cfea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cfee:	f003 0320 	and.w	r3, r3, #32
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d105      	bne.n	800d002 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800cff6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cffa:	f003 0301 	and.w	r3, r3, #1
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d005      	beq.n	800d00e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d006:	f043 0208 	orr.w	r2, r3, #8
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d012:	2b00      	cmp	r3, #0
 800d014:	f000 81f2 	beq.w	800d3fc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800d018:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d01c:	f003 0320 	and.w	r3, r3, #32
 800d020:	2b00      	cmp	r3, #0
 800d022:	d008      	beq.n	800d036 <HAL_UART_IRQHandler+0x14e>
 800d024:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d028:	f003 0320 	and.w	r3, r3, #32
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d002      	beq.n	800d036 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800d030:	6878      	ldr	r0, [r7, #4]
 800d032:	f000 fb24 	bl	800d67e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	695b      	ldr	r3, [r3, #20]
 800d03c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d040:	2b40      	cmp	r3, #64	@ 0x40
 800d042:	bf0c      	ite	eq
 800d044:	2301      	moveq	r3, #1
 800d046:	2300      	movne	r3, #0
 800d048:	b2db      	uxtb	r3, r3
 800d04a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d052:	f003 0308 	and.w	r3, r3, #8
 800d056:	2b00      	cmp	r3, #0
 800d058:	d103      	bne.n	800d062 <HAL_UART_IRQHandler+0x17a>
 800d05a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d04f      	beq.n	800d102 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d062:	6878      	ldr	r0, [r7, #4]
 800d064:	f000 fa2c 	bl	800d4c0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	695b      	ldr	r3, [r3, #20]
 800d06e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d072:	2b40      	cmp	r3, #64	@ 0x40
 800d074:	d141      	bne.n	800d0fa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	3314      	adds	r3, #20
 800d07c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d080:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d084:	e853 3f00 	ldrex	r3, [r3]
 800d088:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800d08c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d090:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d094:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	3314      	adds	r3, #20
 800d09e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800d0a2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800d0a6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800d0ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800d0b2:	e841 2300 	strex	r3, r2, [r1]
 800d0b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800d0ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d1d9      	bne.n	800d076 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d013      	beq.n	800d0f2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d0ce:	4a7e      	ldr	r2, [pc, #504]	@ (800d2c8 <HAL_UART_IRQHandler+0x3e0>)
 800d0d0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d0d6:	4618      	mov	r0, r3
 800d0d8:	f7f8 ff6a 	bl	8005fb0 <HAL_DMA_Abort_IT>
 800d0dc:	4603      	mov	r3, r0
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d016      	beq.n	800d110 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d0e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d0e8:	687a      	ldr	r2, [r7, #4]
 800d0ea:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800d0ec:	4610      	mov	r0, r2
 800d0ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d0f0:	e00e      	b.n	800d110 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d0f2:	6878      	ldr	r0, [r7, #4]
 800d0f4:	f000 f994 	bl	800d420 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d0f8:	e00a      	b.n	800d110 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d0fa:	6878      	ldr	r0, [r7, #4]
 800d0fc:	f000 f990 	bl	800d420 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d100:	e006      	b.n	800d110 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d102:	6878      	ldr	r0, [r7, #4]
 800d104:	f000 f98c 	bl	800d420 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	2200      	movs	r2, #0
 800d10c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800d10e:	e175      	b.n	800d3fc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d110:	bf00      	nop
    return;
 800d112:	e173      	b.n	800d3fc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d118:	2b01      	cmp	r3, #1
 800d11a:	f040 814f 	bne.w	800d3bc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800d11e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d122:	f003 0310 	and.w	r3, r3, #16
 800d126:	2b00      	cmp	r3, #0
 800d128:	f000 8148 	beq.w	800d3bc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800d12c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d130:	f003 0310 	and.w	r3, r3, #16
 800d134:	2b00      	cmp	r3, #0
 800d136:	f000 8141 	beq.w	800d3bc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800d13a:	2300      	movs	r3, #0
 800d13c:	60bb      	str	r3, [r7, #8]
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	60bb      	str	r3, [r7, #8]
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	685b      	ldr	r3, [r3, #4]
 800d14c:	60bb      	str	r3, [r7, #8]
 800d14e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	695b      	ldr	r3, [r3, #20]
 800d156:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d15a:	2b40      	cmp	r3, #64	@ 0x40
 800d15c:	f040 80b6 	bne.w	800d2cc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	685b      	ldr	r3, [r3, #4]
 800d168:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d16c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800d170:	2b00      	cmp	r3, #0
 800d172:	f000 8145 	beq.w	800d400 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800d17a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d17e:	429a      	cmp	r2, r3
 800d180:	f080 813e 	bcs.w	800d400 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d18a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d190:	69db      	ldr	r3, [r3, #28]
 800d192:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d196:	f000 8088 	beq.w	800d2aa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	330c      	adds	r3, #12
 800d1a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d1a8:	e853 3f00 	ldrex	r3, [r3]
 800d1ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800d1b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d1b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d1b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	330c      	adds	r3, #12
 800d1c2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800d1c6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800d1ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1ce:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800d1d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800d1d6:	e841 2300 	strex	r3, r2, [r1]
 800d1da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800d1de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d1d9      	bne.n	800d19a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	3314      	adds	r3, #20
 800d1ec:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d1f0:	e853 3f00 	ldrex	r3, [r3]
 800d1f4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800d1f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d1f8:	f023 0301 	bic.w	r3, r3, #1
 800d1fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	3314      	adds	r3, #20
 800d206:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800d20a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800d20e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d210:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800d212:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800d216:	e841 2300 	strex	r3, r2, [r1]
 800d21a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800d21c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d1e1      	bne.n	800d1e6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	3314      	adds	r3, #20
 800d228:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d22a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d22c:	e853 3f00 	ldrex	r3, [r3]
 800d230:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800d232:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d234:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d238:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	3314      	adds	r3, #20
 800d242:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800d246:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800d248:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d24a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800d24c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d24e:	e841 2300 	strex	r3, r2, [r1]
 800d252:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800d254:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d256:	2b00      	cmp	r3, #0
 800d258:	d1e3      	bne.n	800d222 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	2220      	movs	r2, #32
 800d25e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	2200      	movs	r2, #0
 800d266:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	330c      	adds	r3, #12
 800d26e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d270:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d272:	e853 3f00 	ldrex	r3, [r3]
 800d276:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d278:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d27a:	f023 0310 	bic.w	r3, r3, #16
 800d27e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	330c      	adds	r3, #12
 800d288:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800d28c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800d28e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d290:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d292:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d294:	e841 2300 	strex	r3, r2, [r1]
 800d298:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d29a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d1e3      	bne.n	800d268 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d2a4:	4618      	mov	r0, r3
 800d2a6:	f7f8 fe13 	bl	8005ed0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	2202      	movs	r2, #2
 800d2ae:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d2b8:	b29b      	uxth	r3, r3
 800d2ba:	1ad3      	subs	r3, r2, r3
 800d2bc:	b29b      	uxth	r3, r3
 800d2be:	4619      	mov	r1, r3
 800d2c0:	6878      	ldr	r0, [r7, #4]
 800d2c2:	f000 f8b7 	bl	800d434 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800d2c6:	e09b      	b.n	800d400 <HAL_UART_IRQHandler+0x518>
 800d2c8:	0800d587 	.word	0x0800d587
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d2d4:	b29b      	uxth	r3, r3
 800d2d6:	1ad3      	subs	r3, r2, r3
 800d2d8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d2e0:	b29b      	uxth	r3, r3
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	f000 808e 	beq.w	800d404 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800d2e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	f000 8089 	beq.w	800d404 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	330c      	adds	r3, #12
 800d2f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2fc:	e853 3f00 	ldrex	r3, [r3]
 800d300:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d302:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d304:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d308:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	330c      	adds	r3, #12
 800d312:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800d316:	647a      	str	r2, [r7, #68]	@ 0x44
 800d318:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d31a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d31c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d31e:	e841 2300 	strex	r3, r2, [r1]
 800d322:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d324:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d326:	2b00      	cmp	r3, #0
 800d328:	d1e3      	bne.n	800d2f2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	3314      	adds	r3, #20
 800d330:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d334:	e853 3f00 	ldrex	r3, [r3]
 800d338:	623b      	str	r3, [r7, #32]
   return(result);
 800d33a:	6a3b      	ldr	r3, [r7, #32]
 800d33c:	f023 0301 	bic.w	r3, r3, #1
 800d340:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	3314      	adds	r3, #20
 800d34a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800d34e:	633a      	str	r2, [r7, #48]	@ 0x30
 800d350:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d352:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d354:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d356:	e841 2300 	strex	r3, r2, [r1]
 800d35a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d35c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d1e3      	bne.n	800d32a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	2220      	movs	r2, #32
 800d366:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	2200      	movs	r2, #0
 800d36e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	330c      	adds	r3, #12
 800d376:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d378:	693b      	ldr	r3, [r7, #16]
 800d37a:	e853 3f00 	ldrex	r3, [r3]
 800d37e:	60fb      	str	r3, [r7, #12]
   return(result);
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	f023 0310 	bic.w	r3, r3, #16
 800d386:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	330c      	adds	r3, #12
 800d390:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800d394:	61fa      	str	r2, [r7, #28]
 800d396:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d398:	69b9      	ldr	r1, [r7, #24]
 800d39a:	69fa      	ldr	r2, [r7, #28]
 800d39c:	e841 2300 	strex	r3, r2, [r1]
 800d3a0:	617b      	str	r3, [r7, #20]
   return(result);
 800d3a2:	697b      	ldr	r3, [r7, #20]
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d1e3      	bne.n	800d370 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	2202      	movs	r2, #2
 800d3ac:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d3ae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d3b2:	4619      	mov	r1, r3
 800d3b4:	6878      	ldr	r0, [r7, #4]
 800d3b6:	f000 f83d 	bl	800d434 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800d3ba:	e023      	b.n	800d404 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800d3bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d3c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d009      	beq.n	800d3dc <HAL_UART_IRQHandler+0x4f4>
 800d3c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d3cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d003      	beq.n	800d3dc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800d3d4:	6878      	ldr	r0, [r7, #4]
 800d3d6:	f000 f8ea 	bl	800d5ae <UART_Transmit_IT>
    return;
 800d3da:	e014      	b.n	800d406 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800d3dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d3e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d00e      	beq.n	800d406 <HAL_UART_IRQHandler+0x51e>
 800d3e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d3ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d008      	beq.n	800d406 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800d3f4:	6878      	ldr	r0, [r7, #4]
 800d3f6:	f000 f92a 	bl	800d64e <UART_EndTransmit_IT>
    return;
 800d3fa:	e004      	b.n	800d406 <HAL_UART_IRQHandler+0x51e>
    return;
 800d3fc:	bf00      	nop
 800d3fe:	e002      	b.n	800d406 <HAL_UART_IRQHandler+0x51e>
      return;
 800d400:	bf00      	nop
 800d402:	e000      	b.n	800d406 <HAL_UART_IRQHandler+0x51e>
      return;
 800d404:	bf00      	nop
  }
}
 800d406:	37e8      	adds	r7, #232	@ 0xe8
 800d408:	46bd      	mov	sp, r7
 800d40a:	bd80      	pop	{r7, pc}

0800d40c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d40c:	b480      	push	{r7}
 800d40e:	b083      	sub	sp, #12
 800d410:	af00      	add	r7, sp, #0
 800d412:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800d414:	bf00      	nop
 800d416:	370c      	adds	r7, #12
 800d418:	46bd      	mov	sp, r7
 800d41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d41e:	4770      	bx	lr

0800d420 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d420:	b480      	push	{r7}
 800d422:	b083      	sub	sp, #12
 800d424:	af00      	add	r7, sp, #0
 800d426:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800d428:	bf00      	nop
 800d42a:	370c      	adds	r7, #12
 800d42c:	46bd      	mov	sp, r7
 800d42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d432:	4770      	bx	lr

0800d434 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d434:	b480      	push	{r7}
 800d436:	b083      	sub	sp, #12
 800d438:	af00      	add	r7, sp, #0
 800d43a:	6078      	str	r0, [r7, #4]
 800d43c:	460b      	mov	r3, r1
 800d43e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d440:	bf00      	nop
 800d442:	370c      	adds	r7, #12
 800d444:	46bd      	mov	sp, r7
 800d446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d44a:	4770      	bx	lr

0800d44c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d44c:	b480      	push	{r7}
 800d44e:	b085      	sub	sp, #20
 800d450:	af00      	add	r7, sp, #0
 800d452:	60f8      	str	r0, [r7, #12]
 800d454:	60b9      	str	r1, [r7, #8]
 800d456:	4613      	mov	r3, r2
 800d458:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	68ba      	ldr	r2, [r7, #8]
 800d45e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	88fa      	ldrh	r2, [r7, #6]
 800d464:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	88fa      	ldrh	r2, [r7, #6]
 800d46a:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	2200      	movs	r2, #0
 800d470:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	2222      	movs	r2, #34	@ 0x22
 800d476:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	691b      	ldr	r3, [r3, #16]
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d007      	beq.n	800d492 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	68da      	ldr	r2, [r3, #12]
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800d490:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	695a      	ldr	r2, [r3, #20]
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	f042 0201 	orr.w	r2, r2, #1
 800d4a0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	68da      	ldr	r2, [r3, #12]
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	f042 0220 	orr.w	r2, r2, #32
 800d4b0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800d4b2:	2300      	movs	r3, #0
}
 800d4b4:	4618      	mov	r0, r3
 800d4b6:	3714      	adds	r7, #20
 800d4b8:	46bd      	mov	sp, r7
 800d4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4be:	4770      	bx	lr

0800d4c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d4c0:	b480      	push	{r7}
 800d4c2:	b095      	sub	sp, #84	@ 0x54
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	330c      	adds	r3, #12
 800d4ce:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d4d2:	e853 3f00 	ldrex	r3, [r3]
 800d4d6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d4d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4da:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d4de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	330c      	adds	r3, #12
 800d4e6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d4e8:	643a      	str	r2, [r7, #64]	@ 0x40
 800d4ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4ec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d4ee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d4f0:	e841 2300 	strex	r3, r2, [r1]
 800d4f4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d4f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d1e5      	bne.n	800d4c8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	3314      	adds	r3, #20
 800d502:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d504:	6a3b      	ldr	r3, [r7, #32]
 800d506:	e853 3f00 	ldrex	r3, [r3]
 800d50a:	61fb      	str	r3, [r7, #28]
   return(result);
 800d50c:	69fb      	ldr	r3, [r7, #28]
 800d50e:	f023 0301 	bic.w	r3, r3, #1
 800d512:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	3314      	adds	r3, #20
 800d51a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d51c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d51e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d520:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d522:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d524:	e841 2300 	strex	r3, r2, [r1]
 800d528:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d52a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d1e5      	bne.n	800d4fc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d534:	2b01      	cmp	r3, #1
 800d536:	d119      	bne.n	800d56c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	330c      	adds	r3, #12
 800d53e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	e853 3f00 	ldrex	r3, [r3]
 800d546:	60bb      	str	r3, [r7, #8]
   return(result);
 800d548:	68bb      	ldr	r3, [r7, #8]
 800d54a:	f023 0310 	bic.w	r3, r3, #16
 800d54e:	647b      	str	r3, [r7, #68]	@ 0x44
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	330c      	adds	r3, #12
 800d556:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d558:	61ba      	str	r2, [r7, #24]
 800d55a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d55c:	6979      	ldr	r1, [r7, #20]
 800d55e:	69ba      	ldr	r2, [r7, #24]
 800d560:	e841 2300 	strex	r3, r2, [r1]
 800d564:	613b      	str	r3, [r7, #16]
   return(result);
 800d566:	693b      	ldr	r3, [r7, #16]
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d1e5      	bne.n	800d538 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	2220      	movs	r2, #32
 800d570:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	2200      	movs	r2, #0
 800d578:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800d57a:	bf00      	nop
 800d57c:	3754      	adds	r7, #84	@ 0x54
 800d57e:	46bd      	mov	sp, r7
 800d580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d584:	4770      	bx	lr

0800d586 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d586:	b580      	push	{r7, lr}
 800d588:	b084      	sub	sp, #16
 800d58a:	af00      	add	r7, sp, #0
 800d58c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d592:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	2200      	movs	r2, #0
 800d598:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	2200      	movs	r2, #0
 800d59e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d5a0:	68f8      	ldr	r0, [r7, #12]
 800d5a2:	f7ff ff3d 	bl	800d420 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d5a6:	bf00      	nop
 800d5a8:	3710      	adds	r7, #16
 800d5aa:	46bd      	mov	sp, r7
 800d5ac:	bd80      	pop	{r7, pc}

0800d5ae <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800d5ae:	b480      	push	{r7}
 800d5b0:	b085      	sub	sp, #20
 800d5b2:	af00      	add	r7, sp, #0
 800d5b4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d5bc:	b2db      	uxtb	r3, r3
 800d5be:	2b21      	cmp	r3, #33	@ 0x21
 800d5c0:	d13e      	bne.n	800d640 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	689b      	ldr	r3, [r3, #8]
 800d5c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d5ca:	d114      	bne.n	800d5f6 <UART_Transmit_IT+0x48>
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	691b      	ldr	r3, [r3, #16]
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d110      	bne.n	800d5f6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	6a1b      	ldr	r3, [r3, #32]
 800d5d8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	881b      	ldrh	r3, [r3, #0]
 800d5de:	461a      	mov	r2, r3
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d5e8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	6a1b      	ldr	r3, [r3, #32]
 800d5ee:	1c9a      	adds	r2, r3, #2
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	621a      	str	r2, [r3, #32]
 800d5f4:	e008      	b.n	800d608 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	6a1b      	ldr	r3, [r3, #32]
 800d5fa:	1c59      	adds	r1, r3, #1
 800d5fc:	687a      	ldr	r2, [r7, #4]
 800d5fe:	6211      	str	r1, [r2, #32]
 800d600:	781a      	ldrb	r2, [r3, #0]
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800d60c:	b29b      	uxth	r3, r3
 800d60e:	3b01      	subs	r3, #1
 800d610:	b29b      	uxth	r3, r3
 800d612:	687a      	ldr	r2, [r7, #4]
 800d614:	4619      	mov	r1, r3
 800d616:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d10f      	bne.n	800d63c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	68da      	ldr	r2, [r3, #12]
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d62a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	68da      	ldr	r2, [r3, #12]
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d63a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800d63c:	2300      	movs	r3, #0
 800d63e:	e000      	b.n	800d642 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800d640:	2302      	movs	r3, #2
  }
}
 800d642:	4618      	mov	r0, r3
 800d644:	3714      	adds	r7, #20
 800d646:	46bd      	mov	sp, r7
 800d648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d64c:	4770      	bx	lr

0800d64e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d64e:	b580      	push	{r7, lr}
 800d650:	b082      	sub	sp, #8
 800d652:	af00      	add	r7, sp, #0
 800d654:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	68da      	ldr	r2, [r3, #12]
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d664:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	2220      	movs	r2, #32
 800d66a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d66e:	6878      	ldr	r0, [r7, #4]
 800d670:	f7ff fecc 	bl	800d40c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800d674:	2300      	movs	r3, #0
}
 800d676:	4618      	mov	r0, r3
 800d678:	3708      	adds	r7, #8
 800d67a:	46bd      	mov	sp, r7
 800d67c:	bd80      	pop	{r7, pc}

0800d67e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800d67e:	b580      	push	{r7, lr}
 800d680:	b08c      	sub	sp, #48	@ 0x30
 800d682:	af00      	add	r7, sp, #0
 800d684:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d68c:	b2db      	uxtb	r3, r3
 800d68e:	2b22      	cmp	r3, #34	@ 0x22
 800d690:	f040 80ae 	bne.w	800d7f0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	689b      	ldr	r3, [r3, #8]
 800d698:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d69c:	d117      	bne.n	800d6ce <UART_Receive_IT+0x50>
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	691b      	ldr	r3, [r3, #16]
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d113      	bne.n	800d6ce <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800d6a6:	2300      	movs	r3, #0
 800d6a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d6ae:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	685b      	ldr	r3, [r3, #4]
 800d6b6:	b29b      	uxth	r3, r3
 800d6b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d6bc:	b29a      	uxth	r2, r3
 800d6be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6c0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d6c6:	1c9a      	adds	r2, r3, #2
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	629a      	str	r2, [r3, #40]	@ 0x28
 800d6cc:	e026      	b.n	800d71c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d6d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800d6d4:	2300      	movs	r3, #0
 800d6d6:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	689b      	ldr	r3, [r3, #8]
 800d6dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d6e0:	d007      	beq.n	800d6f2 <UART_Receive_IT+0x74>
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	689b      	ldr	r3, [r3, #8]
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d10a      	bne.n	800d700 <UART_Receive_IT+0x82>
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	691b      	ldr	r3, [r3, #16]
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d106      	bne.n	800d700 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	685b      	ldr	r3, [r3, #4]
 800d6f8:	b2da      	uxtb	r2, r3
 800d6fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6fc:	701a      	strb	r2, [r3, #0]
 800d6fe:	e008      	b.n	800d712 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	685b      	ldr	r3, [r3, #4]
 800d706:	b2db      	uxtb	r3, r3
 800d708:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d70c:	b2da      	uxtb	r2, r3
 800d70e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d710:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d716:	1c5a      	adds	r2, r3, #1
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d720:	b29b      	uxth	r3, r3
 800d722:	3b01      	subs	r3, #1
 800d724:	b29b      	uxth	r3, r3
 800d726:	687a      	ldr	r2, [r7, #4]
 800d728:	4619      	mov	r1, r3
 800d72a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d15d      	bne.n	800d7ec <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	68da      	ldr	r2, [r3, #12]
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	f022 0220 	bic.w	r2, r2, #32
 800d73e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	68da      	ldr	r2, [r3, #12]
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800d74e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	695a      	ldr	r2, [r3, #20]
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	f022 0201 	bic.w	r2, r2, #1
 800d75e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	2220      	movs	r2, #32
 800d764:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	2200      	movs	r2, #0
 800d76c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d772:	2b01      	cmp	r3, #1
 800d774:	d135      	bne.n	800d7e2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	2200      	movs	r2, #0
 800d77a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	330c      	adds	r3, #12
 800d782:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d784:	697b      	ldr	r3, [r7, #20]
 800d786:	e853 3f00 	ldrex	r3, [r3]
 800d78a:	613b      	str	r3, [r7, #16]
   return(result);
 800d78c:	693b      	ldr	r3, [r7, #16]
 800d78e:	f023 0310 	bic.w	r3, r3, #16
 800d792:	627b      	str	r3, [r7, #36]	@ 0x24
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	330c      	adds	r3, #12
 800d79a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d79c:	623a      	str	r2, [r7, #32]
 800d79e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7a0:	69f9      	ldr	r1, [r7, #28]
 800d7a2:	6a3a      	ldr	r2, [r7, #32]
 800d7a4:	e841 2300 	strex	r3, r2, [r1]
 800d7a8:	61bb      	str	r3, [r7, #24]
   return(result);
 800d7aa:	69bb      	ldr	r3, [r7, #24]
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d1e5      	bne.n	800d77c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	f003 0310 	and.w	r3, r3, #16
 800d7ba:	2b10      	cmp	r3, #16
 800d7bc:	d10a      	bne.n	800d7d4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800d7be:	2300      	movs	r3, #0
 800d7c0:	60fb      	str	r3, [r7, #12]
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	60fb      	str	r3, [r7, #12]
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	685b      	ldr	r3, [r3, #4]
 800d7d0:	60fb      	str	r3, [r7, #12]
 800d7d2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800d7d8:	4619      	mov	r1, r3
 800d7da:	6878      	ldr	r0, [r7, #4]
 800d7dc:	f7ff fe2a 	bl	800d434 <HAL_UARTEx_RxEventCallback>
 800d7e0:	e002      	b.n	800d7e8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800d7e2:	6878      	ldr	r0, [r7, #4]
 800d7e4:	f7f6 fe8a 	bl	80044fc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800d7e8:	2300      	movs	r3, #0
 800d7ea:	e002      	b.n	800d7f2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800d7ec:	2300      	movs	r3, #0
 800d7ee:	e000      	b.n	800d7f2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800d7f0:	2302      	movs	r3, #2
  }
}
 800d7f2:	4618      	mov	r0, r3
 800d7f4:	3730      	adds	r7, #48	@ 0x30
 800d7f6:	46bd      	mov	sp, r7
 800d7f8:	bd80      	pop	{r7, pc}
	...

0800d7fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d7fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d800:	b0c0      	sub	sp, #256	@ 0x100
 800d802:	af00      	add	r7, sp, #0
 800d804:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	691b      	ldr	r3, [r3, #16]
 800d810:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800d814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d818:	68d9      	ldr	r1, [r3, #12]
 800d81a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d81e:	681a      	ldr	r2, [r3, #0]
 800d820:	ea40 0301 	orr.w	r3, r0, r1
 800d824:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800d826:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d82a:	689a      	ldr	r2, [r3, #8]
 800d82c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d830:	691b      	ldr	r3, [r3, #16]
 800d832:	431a      	orrs	r2, r3
 800d834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d838:	695b      	ldr	r3, [r3, #20]
 800d83a:	431a      	orrs	r2, r3
 800d83c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d840:	69db      	ldr	r3, [r3, #28]
 800d842:	4313      	orrs	r3, r2
 800d844:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800d848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	68db      	ldr	r3, [r3, #12]
 800d850:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800d854:	f021 010c 	bic.w	r1, r1, #12
 800d858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d85c:	681a      	ldr	r2, [r3, #0]
 800d85e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800d862:	430b      	orrs	r3, r1
 800d864:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800d866:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	695b      	ldr	r3, [r3, #20]
 800d86e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800d872:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d876:	6999      	ldr	r1, [r3, #24]
 800d878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d87c:	681a      	ldr	r2, [r3, #0]
 800d87e:	ea40 0301 	orr.w	r3, r0, r1
 800d882:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800d884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d888:	681a      	ldr	r2, [r3, #0]
 800d88a:	4b8f      	ldr	r3, [pc, #572]	@ (800dac8 <UART_SetConfig+0x2cc>)
 800d88c:	429a      	cmp	r2, r3
 800d88e:	d005      	beq.n	800d89c <UART_SetConfig+0xa0>
 800d890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d894:	681a      	ldr	r2, [r3, #0]
 800d896:	4b8d      	ldr	r3, [pc, #564]	@ (800dacc <UART_SetConfig+0x2d0>)
 800d898:	429a      	cmp	r2, r3
 800d89a:	d104      	bne.n	800d8a6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800d89c:	f7fe fa92 	bl	800bdc4 <HAL_RCC_GetPCLK2Freq>
 800d8a0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800d8a4:	e003      	b.n	800d8ae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800d8a6:	f7fe fa79 	bl	800bd9c <HAL_RCC_GetPCLK1Freq>
 800d8aa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d8ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d8b2:	69db      	ldr	r3, [r3, #28]
 800d8b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d8b8:	f040 810c 	bne.w	800dad4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800d8bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d8c0:	2200      	movs	r2, #0
 800d8c2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800d8c6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800d8ca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800d8ce:	4622      	mov	r2, r4
 800d8d0:	462b      	mov	r3, r5
 800d8d2:	1891      	adds	r1, r2, r2
 800d8d4:	65b9      	str	r1, [r7, #88]	@ 0x58
 800d8d6:	415b      	adcs	r3, r3
 800d8d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d8da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800d8de:	4621      	mov	r1, r4
 800d8e0:	eb12 0801 	adds.w	r8, r2, r1
 800d8e4:	4629      	mov	r1, r5
 800d8e6:	eb43 0901 	adc.w	r9, r3, r1
 800d8ea:	f04f 0200 	mov.w	r2, #0
 800d8ee:	f04f 0300 	mov.w	r3, #0
 800d8f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d8f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d8fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d8fe:	4690      	mov	r8, r2
 800d900:	4699      	mov	r9, r3
 800d902:	4623      	mov	r3, r4
 800d904:	eb18 0303 	adds.w	r3, r8, r3
 800d908:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800d90c:	462b      	mov	r3, r5
 800d90e:	eb49 0303 	adc.w	r3, r9, r3
 800d912:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800d916:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d91a:	685b      	ldr	r3, [r3, #4]
 800d91c:	2200      	movs	r2, #0
 800d91e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800d922:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800d926:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800d92a:	460b      	mov	r3, r1
 800d92c:	18db      	adds	r3, r3, r3
 800d92e:	653b      	str	r3, [r7, #80]	@ 0x50
 800d930:	4613      	mov	r3, r2
 800d932:	eb42 0303 	adc.w	r3, r2, r3
 800d936:	657b      	str	r3, [r7, #84]	@ 0x54
 800d938:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800d93c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800d940:	f7f2 fca6 	bl	8000290 <__aeabi_uldivmod>
 800d944:	4602      	mov	r2, r0
 800d946:	460b      	mov	r3, r1
 800d948:	4b61      	ldr	r3, [pc, #388]	@ (800dad0 <UART_SetConfig+0x2d4>)
 800d94a:	fba3 2302 	umull	r2, r3, r3, r2
 800d94e:	095b      	lsrs	r3, r3, #5
 800d950:	011c      	lsls	r4, r3, #4
 800d952:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d956:	2200      	movs	r2, #0
 800d958:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800d95c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800d960:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800d964:	4642      	mov	r2, r8
 800d966:	464b      	mov	r3, r9
 800d968:	1891      	adds	r1, r2, r2
 800d96a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800d96c:	415b      	adcs	r3, r3
 800d96e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d970:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800d974:	4641      	mov	r1, r8
 800d976:	eb12 0a01 	adds.w	sl, r2, r1
 800d97a:	4649      	mov	r1, r9
 800d97c:	eb43 0b01 	adc.w	fp, r3, r1
 800d980:	f04f 0200 	mov.w	r2, #0
 800d984:	f04f 0300 	mov.w	r3, #0
 800d988:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800d98c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800d990:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d994:	4692      	mov	sl, r2
 800d996:	469b      	mov	fp, r3
 800d998:	4643      	mov	r3, r8
 800d99a:	eb1a 0303 	adds.w	r3, sl, r3
 800d99e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d9a2:	464b      	mov	r3, r9
 800d9a4:	eb4b 0303 	adc.w	r3, fp, r3
 800d9a8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800d9ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d9b0:	685b      	ldr	r3, [r3, #4]
 800d9b2:	2200      	movs	r2, #0
 800d9b4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d9b8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800d9bc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800d9c0:	460b      	mov	r3, r1
 800d9c2:	18db      	adds	r3, r3, r3
 800d9c4:	643b      	str	r3, [r7, #64]	@ 0x40
 800d9c6:	4613      	mov	r3, r2
 800d9c8:	eb42 0303 	adc.w	r3, r2, r3
 800d9cc:	647b      	str	r3, [r7, #68]	@ 0x44
 800d9ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800d9d2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800d9d6:	f7f2 fc5b 	bl	8000290 <__aeabi_uldivmod>
 800d9da:	4602      	mov	r2, r0
 800d9dc:	460b      	mov	r3, r1
 800d9de:	4611      	mov	r1, r2
 800d9e0:	4b3b      	ldr	r3, [pc, #236]	@ (800dad0 <UART_SetConfig+0x2d4>)
 800d9e2:	fba3 2301 	umull	r2, r3, r3, r1
 800d9e6:	095b      	lsrs	r3, r3, #5
 800d9e8:	2264      	movs	r2, #100	@ 0x64
 800d9ea:	fb02 f303 	mul.w	r3, r2, r3
 800d9ee:	1acb      	subs	r3, r1, r3
 800d9f0:	00db      	lsls	r3, r3, #3
 800d9f2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800d9f6:	4b36      	ldr	r3, [pc, #216]	@ (800dad0 <UART_SetConfig+0x2d4>)
 800d9f8:	fba3 2302 	umull	r2, r3, r3, r2
 800d9fc:	095b      	lsrs	r3, r3, #5
 800d9fe:	005b      	lsls	r3, r3, #1
 800da00:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800da04:	441c      	add	r4, r3
 800da06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800da0a:	2200      	movs	r2, #0
 800da0c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800da10:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800da14:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800da18:	4642      	mov	r2, r8
 800da1a:	464b      	mov	r3, r9
 800da1c:	1891      	adds	r1, r2, r2
 800da1e:	63b9      	str	r1, [r7, #56]	@ 0x38
 800da20:	415b      	adcs	r3, r3
 800da22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800da24:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800da28:	4641      	mov	r1, r8
 800da2a:	1851      	adds	r1, r2, r1
 800da2c:	6339      	str	r1, [r7, #48]	@ 0x30
 800da2e:	4649      	mov	r1, r9
 800da30:	414b      	adcs	r3, r1
 800da32:	637b      	str	r3, [r7, #52]	@ 0x34
 800da34:	f04f 0200 	mov.w	r2, #0
 800da38:	f04f 0300 	mov.w	r3, #0
 800da3c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800da40:	4659      	mov	r1, fp
 800da42:	00cb      	lsls	r3, r1, #3
 800da44:	4651      	mov	r1, sl
 800da46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800da4a:	4651      	mov	r1, sl
 800da4c:	00ca      	lsls	r2, r1, #3
 800da4e:	4610      	mov	r0, r2
 800da50:	4619      	mov	r1, r3
 800da52:	4603      	mov	r3, r0
 800da54:	4642      	mov	r2, r8
 800da56:	189b      	adds	r3, r3, r2
 800da58:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800da5c:	464b      	mov	r3, r9
 800da5e:	460a      	mov	r2, r1
 800da60:	eb42 0303 	adc.w	r3, r2, r3
 800da64:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800da68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800da6c:	685b      	ldr	r3, [r3, #4]
 800da6e:	2200      	movs	r2, #0
 800da70:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800da74:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800da78:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800da7c:	460b      	mov	r3, r1
 800da7e:	18db      	adds	r3, r3, r3
 800da80:	62bb      	str	r3, [r7, #40]	@ 0x28
 800da82:	4613      	mov	r3, r2
 800da84:	eb42 0303 	adc.w	r3, r2, r3
 800da88:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800da8a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800da8e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800da92:	f7f2 fbfd 	bl	8000290 <__aeabi_uldivmod>
 800da96:	4602      	mov	r2, r0
 800da98:	460b      	mov	r3, r1
 800da9a:	4b0d      	ldr	r3, [pc, #52]	@ (800dad0 <UART_SetConfig+0x2d4>)
 800da9c:	fba3 1302 	umull	r1, r3, r3, r2
 800daa0:	095b      	lsrs	r3, r3, #5
 800daa2:	2164      	movs	r1, #100	@ 0x64
 800daa4:	fb01 f303 	mul.w	r3, r1, r3
 800daa8:	1ad3      	subs	r3, r2, r3
 800daaa:	00db      	lsls	r3, r3, #3
 800daac:	3332      	adds	r3, #50	@ 0x32
 800daae:	4a08      	ldr	r2, [pc, #32]	@ (800dad0 <UART_SetConfig+0x2d4>)
 800dab0:	fba2 2303 	umull	r2, r3, r2, r3
 800dab4:	095b      	lsrs	r3, r3, #5
 800dab6:	f003 0207 	and.w	r2, r3, #7
 800daba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	4422      	add	r2, r4
 800dac2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800dac4:	e106      	b.n	800dcd4 <UART_SetConfig+0x4d8>
 800dac6:	bf00      	nop
 800dac8:	40011000 	.word	0x40011000
 800dacc:	40011400 	.word	0x40011400
 800dad0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800dad4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800dad8:	2200      	movs	r2, #0
 800dada:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800dade:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800dae2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800dae6:	4642      	mov	r2, r8
 800dae8:	464b      	mov	r3, r9
 800daea:	1891      	adds	r1, r2, r2
 800daec:	6239      	str	r1, [r7, #32]
 800daee:	415b      	adcs	r3, r3
 800daf0:	627b      	str	r3, [r7, #36]	@ 0x24
 800daf2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800daf6:	4641      	mov	r1, r8
 800daf8:	1854      	adds	r4, r2, r1
 800dafa:	4649      	mov	r1, r9
 800dafc:	eb43 0501 	adc.w	r5, r3, r1
 800db00:	f04f 0200 	mov.w	r2, #0
 800db04:	f04f 0300 	mov.w	r3, #0
 800db08:	00eb      	lsls	r3, r5, #3
 800db0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800db0e:	00e2      	lsls	r2, r4, #3
 800db10:	4614      	mov	r4, r2
 800db12:	461d      	mov	r5, r3
 800db14:	4643      	mov	r3, r8
 800db16:	18e3      	adds	r3, r4, r3
 800db18:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800db1c:	464b      	mov	r3, r9
 800db1e:	eb45 0303 	adc.w	r3, r5, r3
 800db22:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800db26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800db2a:	685b      	ldr	r3, [r3, #4]
 800db2c:	2200      	movs	r2, #0
 800db2e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800db32:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800db36:	f04f 0200 	mov.w	r2, #0
 800db3a:	f04f 0300 	mov.w	r3, #0
 800db3e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800db42:	4629      	mov	r1, r5
 800db44:	008b      	lsls	r3, r1, #2
 800db46:	4621      	mov	r1, r4
 800db48:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800db4c:	4621      	mov	r1, r4
 800db4e:	008a      	lsls	r2, r1, #2
 800db50:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800db54:	f7f2 fb9c 	bl	8000290 <__aeabi_uldivmod>
 800db58:	4602      	mov	r2, r0
 800db5a:	460b      	mov	r3, r1
 800db5c:	4b60      	ldr	r3, [pc, #384]	@ (800dce0 <UART_SetConfig+0x4e4>)
 800db5e:	fba3 2302 	umull	r2, r3, r3, r2
 800db62:	095b      	lsrs	r3, r3, #5
 800db64:	011c      	lsls	r4, r3, #4
 800db66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800db6a:	2200      	movs	r2, #0
 800db6c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800db70:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800db74:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800db78:	4642      	mov	r2, r8
 800db7a:	464b      	mov	r3, r9
 800db7c:	1891      	adds	r1, r2, r2
 800db7e:	61b9      	str	r1, [r7, #24]
 800db80:	415b      	adcs	r3, r3
 800db82:	61fb      	str	r3, [r7, #28]
 800db84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800db88:	4641      	mov	r1, r8
 800db8a:	1851      	adds	r1, r2, r1
 800db8c:	6139      	str	r1, [r7, #16]
 800db8e:	4649      	mov	r1, r9
 800db90:	414b      	adcs	r3, r1
 800db92:	617b      	str	r3, [r7, #20]
 800db94:	f04f 0200 	mov.w	r2, #0
 800db98:	f04f 0300 	mov.w	r3, #0
 800db9c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800dba0:	4659      	mov	r1, fp
 800dba2:	00cb      	lsls	r3, r1, #3
 800dba4:	4651      	mov	r1, sl
 800dba6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800dbaa:	4651      	mov	r1, sl
 800dbac:	00ca      	lsls	r2, r1, #3
 800dbae:	4610      	mov	r0, r2
 800dbb0:	4619      	mov	r1, r3
 800dbb2:	4603      	mov	r3, r0
 800dbb4:	4642      	mov	r2, r8
 800dbb6:	189b      	adds	r3, r3, r2
 800dbb8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800dbbc:	464b      	mov	r3, r9
 800dbbe:	460a      	mov	r2, r1
 800dbc0:	eb42 0303 	adc.w	r3, r2, r3
 800dbc4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800dbc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800dbcc:	685b      	ldr	r3, [r3, #4]
 800dbce:	2200      	movs	r2, #0
 800dbd0:	67bb      	str	r3, [r7, #120]	@ 0x78
 800dbd2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800dbd4:	f04f 0200 	mov.w	r2, #0
 800dbd8:	f04f 0300 	mov.w	r3, #0
 800dbdc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800dbe0:	4649      	mov	r1, r9
 800dbe2:	008b      	lsls	r3, r1, #2
 800dbe4:	4641      	mov	r1, r8
 800dbe6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800dbea:	4641      	mov	r1, r8
 800dbec:	008a      	lsls	r2, r1, #2
 800dbee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800dbf2:	f7f2 fb4d 	bl	8000290 <__aeabi_uldivmod>
 800dbf6:	4602      	mov	r2, r0
 800dbf8:	460b      	mov	r3, r1
 800dbfa:	4611      	mov	r1, r2
 800dbfc:	4b38      	ldr	r3, [pc, #224]	@ (800dce0 <UART_SetConfig+0x4e4>)
 800dbfe:	fba3 2301 	umull	r2, r3, r3, r1
 800dc02:	095b      	lsrs	r3, r3, #5
 800dc04:	2264      	movs	r2, #100	@ 0x64
 800dc06:	fb02 f303 	mul.w	r3, r2, r3
 800dc0a:	1acb      	subs	r3, r1, r3
 800dc0c:	011b      	lsls	r3, r3, #4
 800dc0e:	3332      	adds	r3, #50	@ 0x32
 800dc10:	4a33      	ldr	r2, [pc, #204]	@ (800dce0 <UART_SetConfig+0x4e4>)
 800dc12:	fba2 2303 	umull	r2, r3, r2, r3
 800dc16:	095b      	lsrs	r3, r3, #5
 800dc18:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800dc1c:	441c      	add	r4, r3
 800dc1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800dc22:	2200      	movs	r2, #0
 800dc24:	673b      	str	r3, [r7, #112]	@ 0x70
 800dc26:	677a      	str	r2, [r7, #116]	@ 0x74
 800dc28:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800dc2c:	4642      	mov	r2, r8
 800dc2e:	464b      	mov	r3, r9
 800dc30:	1891      	adds	r1, r2, r2
 800dc32:	60b9      	str	r1, [r7, #8]
 800dc34:	415b      	adcs	r3, r3
 800dc36:	60fb      	str	r3, [r7, #12]
 800dc38:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800dc3c:	4641      	mov	r1, r8
 800dc3e:	1851      	adds	r1, r2, r1
 800dc40:	6039      	str	r1, [r7, #0]
 800dc42:	4649      	mov	r1, r9
 800dc44:	414b      	adcs	r3, r1
 800dc46:	607b      	str	r3, [r7, #4]
 800dc48:	f04f 0200 	mov.w	r2, #0
 800dc4c:	f04f 0300 	mov.w	r3, #0
 800dc50:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800dc54:	4659      	mov	r1, fp
 800dc56:	00cb      	lsls	r3, r1, #3
 800dc58:	4651      	mov	r1, sl
 800dc5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800dc5e:	4651      	mov	r1, sl
 800dc60:	00ca      	lsls	r2, r1, #3
 800dc62:	4610      	mov	r0, r2
 800dc64:	4619      	mov	r1, r3
 800dc66:	4603      	mov	r3, r0
 800dc68:	4642      	mov	r2, r8
 800dc6a:	189b      	adds	r3, r3, r2
 800dc6c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800dc6e:	464b      	mov	r3, r9
 800dc70:	460a      	mov	r2, r1
 800dc72:	eb42 0303 	adc.w	r3, r2, r3
 800dc76:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800dc78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800dc7c:	685b      	ldr	r3, [r3, #4]
 800dc7e:	2200      	movs	r2, #0
 800dc80:	663b      	str	r3, [r7, #96]	@ 0x60
 800dc82:	667a      	str	r2, [r7, #100]	@ 0x64
 800dc84:	f04f 0200 	mov.w	r2, #0
 800dc88:	f04f 0300 	mov.w	r3, #0
 800dc8c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800dc90:	4649      	mov	r1, r9
 800dc92:	008b      	lsls	r3, r1, #2
 800dc94:	4641      	mov	r1, r8
 800dc96:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800dc9a:	4641      	mov	r1, r8
 800dc9c:	008a      	lsls	r2, r1, #2
 800dc9e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800dca2:	f7f2 faf5 	bl	8000290 <__aeabi_uldivmod>
 800dca6:	4602      	mov	r2, r0
 800dca8:	460b      	mov	r3, r1
 800dcaa:	4b0d      	ldr	r3, [pc, #52]	@ (800dce0 <UART_SetConfig+0x4e4>)
 800dcac:	fba3 1302 	umull	r1, r3, r3, r2
 800dcb0:	095b      	lsrs	r3, r3, #5
 800dcb2:	2164      	movs	r1, #100	@ 0x64
 800dcb4:	fb01 f303 	mul.w	r3, r1, r3
 800dcb8:	1ad3      	subs	r3, r2, r3
 800dcba:	011b      	lsls	r3, r3, #4
 800dcbc:	3332      	adds	r3, #50	@ 0x32
 800dcbe:	4a08      	ldr	r2, [pc, #32]	@ (800dce0 <UART_SetConfig+0x4e4>)
 800dcc0:	fba2 2303 	umull	r2, r3, r2, r3
 800dcc4:	095b      	lsrs	r3, r3, #5
 800dcc6:	f003 020f 	and.w	r2, r3, #15
 800dcca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	4422      	add	r2, r4
 800dcd2:	609a      	str	r2, [r3, #8]
}
 800dcd4:	bf00      	nop
 800dcd6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800dcda:	46bd      	mov	sp, r7
 800dcdc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800dce0:	51eb851f 	.word	0x51eb851f

0800dce4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800dce4:	b084      	sub	sp, #16
 800dce6:	b580      	push	{r7, lr}
 800dce8:	b084      	sub	sp, #16
 800dcea:	af00      	add	r7, sp, #0
 800dcec:	6078      	str	r0, [r7, #4]
 800dcee:	f107 001c 	add.w	r0, r7, #28
 800dcf2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800dcf6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800dcfa:	2b01      	cmp	r3, #1
 800dcfc:	d123      	bne.n	800dd46 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dd02:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	68db      	ldr	r3, [r3, #12]
 800dd0e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800dd12:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dd16:	687a      	ldr	r2, [r7, #4]
 800dd18:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	68db      	ldr	r3, [r3, #12]
 800dd1e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800dd26:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800dd2a:	2b01      	cmp	r3, #1
 800dd2c:	d105      	bne.n	800dd3a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	68db      	ldr	r3, [r3, #12]
 800dd32:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800dd3a:	6878      	ldr	r0, [r7, #4]
 800dd3c:	f001 fae8 	bl	800f310 <USB_CoreReset>
 800dd40:	4603      	mov	r3, r0
 800dd42:	73fb      	strb	r3, [r7, #15]
 800dd44:	e01b      	b.n	800dd7e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	68db      	ldr	r3, [r3, #12]
 800dd4a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800dd52:	6878      	ldr	r0, [r7, #4]
 800dd54:	f001 fadc 	bl	800f310 <USB_CoreReset>
 800dd58:	4603      	mov	r3, r0
 800dd5a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800dd5c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d106      	bne.n	800dd72 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dd68:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	639a      	str	r2, [r3, #56]	@ 0x38
 800dd70:	e005      	b.n	800dd7e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dd76:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800dd7e:	7fbb      	ldrb	r3, [r7, #30]
 800dd80:	2b01      	cmp	r3, #1
 800dd82:	d10b      	bne.n	800dd9c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	689b      	ldr	r3, [r3, #8]
 800dd88:	f043 0206 	orr.w	r2, r3, #6
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	689b      	ldr	r3, [r3, #8]
 800dd94:	f043 0220 	orr.w	r2, r3, #32
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800dd9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd9e:	4618      	mov	r0, r3
 800dda0:	3710      	adds	r7, #16
 800dda2:	46bd      	mov	sp, r7
 800dda4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800dda8:	b004      	add	sp, #16
 800ddaa:	4770      	bx	lr

0800ddac <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800ddac:	b480      	push	{r7}
 800ddae:	b087      	sub	sp, #28
 800ddb0:	af00      	add	r7, sp, #0
 800ddb2:	60f8      	str	r0, [r7, #12]
 800ddb4:	60b9      	str	r1, [r7, #8]
 800ddb6:	4613      	mov	r3, r2
 800ddb8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800ddba:	79fb      	ldrb	r3, [r7, #7]
 800ddbc:	2b02      	cmp	r3, #2
 800ddbe:	d165      	bne.n	800de8c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800ddc0:	68bb      	ldr	r3, [r7, #8]
 800ddc2:	4a41      	ldr	r2, [pc, #260]	@ (800dec8 <USB_SetTurnaroundTime+0x11c>)
 800ddc4:	4293      	cmp	r3, r2
 800ddc6:	d906      	bls.n	800ddd6 <USB_SetTurnaroundTime+0x2a>
 800ddc8:	68bb      	ldr	r3, [r7, #8]
 800ddca:	4a40      	ldr	r2, [pc, #256]	@ (800decc <USB_SetTurnaroundTime+0x120>)
 800ddcc:	4293      	cmp	r3, r2
 800ddce:	d202      	bcs.n	800ddd6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800ddd0:	230f      	movs	r3, #15
 800ddd2:	617b      	str	r3, [r7, #20]
 800ddd4:	e062      	b.n	800de9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800ddd6:	68bb      	ldr	r3, [r7, #8]
 800ddd8:	4a3c      	ldr	r2, [pc, #240]	@ (800decc <USB_SetTurnaroundTime+0x120>)
 800ddda:	4293      	cmp	r3, r2
 800dddc:	d306      	bcc.n	800ddec <USB_SetTurnaroundTime+0x40>
 800ddde:	68bb      	ldr	r3, [r7, #8]
 800dde0:	4a3b      	ldr	r2, [pc, #236]	@ (800ded0 <USB_SetTurnaroundTime+0x124>)
 800dde2:	4293      	cmp	r3, r2
 800dde4:	d202      	bcs.n	800ddec <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800dde6:	230e      	movs	r3, #14
 800dde8:	617b      	str	r3, [r7, #20]
 800ddea:	e057      	b.n	800de9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800ddec:	68bb      	ldr	r3, [r7, #8]
 800ddee:	4a38      	ldr	r2, [pc, #224]	@ (800ded0 <USB_SetTurnaroundTime+0x124>)
 800ddf0:	4293      	cmp	r3, r2
 800ddf2:	d306      	bcc.n	800de02 <USB_SetTurnaroundTime+0x56>
 800ddf4:	68bb      	ldr	r3, [r7, #8]
 800ddf6:	4a37      	ldr	r2, [pc, #220]	@ (800ded4 <USB_SetTurnaroundTime+0x128>)
 800ddf8:	4293      	cmp	r3, r2
 800ddfa:	d202      	bcs.n	800de02 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800ddfc:	230d      	movs	r3, #13
 800ddfe:	617b      	str	r3, [r7, #20]
 800de00:	e04c      	b.n	800de9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800de02:	68bb      	ldr	r3, [r7, #8]
 800de04:	4a33      	ldr	r2, [pc, #204]	@ (800ded4 <USB_SetTurnaroundTime+0x128>)
 800de06:	4293      	cmp	r3, r2
 800de08:	d306      	bcc.n	800de18 <USB_SetTurnaroundTime+0x6c>
 800de0a:	68bb      	ldr	r3, [r7, #8]
 800de0c:	4a32      	ldr	r2, [pc, #200]	@ (800ded8 <USB_SetTurnaroundTime+0x12c>)
 800de0e:	4293      	cmp	r3, r2
 800de10:	d802      	bhi.n	800de18 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800de12:	230c      	movs	r3, #12
 800de14:	617b      	str	r3, [r7, #20]
 800de16:	e041      	b.n	800de9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800de18:	68bb      	ldr	r3, [r7, #8]
 800de1a:	4a2f      	ldr	r2, [pc, #188]	@ (800ded8 <USB_SetTurnaroundTime+0x12c>)
 800de1c:	4293      	cmp	r3, r2
 800de1e:	d906      	bls.n	800de2e <USB_SetTurnaroundTime+0x82>
 800de20:	68bb      	ldr	r3, [r7, #8]
 800de22:	4a2e      	ldr	r2, [pc, #184]	@ (800dedc <USB_SetTurnaroundTime+0x130>)
 800de24:	4293      	cmp	r3, r2
 800de26:	d802      	bhi.n	800de2e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800de28:	230b      	movs	r3, #11
 800de2a:	617b      	str	r3, [r7, #20]
 800de2c:	e036      	b.n	800de9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800de2e:	68bb      	ldr	r3, [r7, #8]
 800de30:	4a2a      	ldr	r2, [pc, #168]	@ (800dedc <USB_SetTurnaroundTime+0x130>)
 800de32:	4293      	cmp	r3, r2
 800de34:	d906      	bls.n	800de44 <USB_SetTurnaroundTime+0x98>
 800de36:	68bb      	ldr	r3, [r7, #8]
 800de38:	4a29      	ldr	r2, [pc, #164]	@ (800dee0 <USB_SetTurnaroundTime+0x134>)
 800de3a:	4293      	cmp	r3, r2
 800de3c:	d802      	bhi.n	800de44 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800de3e:	230a      	movs	r3, #10
 800de40:	617b      	str	r3, [r7, #20]
 800de42:	e02b      	b.n	800de9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800de44:	68bb      	ldr	r3, [r7, #8]
 800de46:	4a26      	ldr	r2, [pc, #152]	@ (800dee0 <USB_SetTurnaroundTime+0x134>)
 800de48:	4293      	cmp	r3, r2
 800de4a:	d906      	bls.n	800de5a <USB_SetTurnaroundTime+0xae>
 800de4c:	68bb      	ldr	r3, [r7, #8]
 800de4e:	4a25      	ldr	r2, [pc, #148]	@ (800dee4 <USB_SetTurnaroundTime+0x138>)
 800de50:	4293      	cmp	r3, r2
 800de52:	d202      	bcs.n	800de5a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800de54:	2309      	movs	r3, #9
 800de56:	617b      	str	r3, [r7, #20]
 800de58:	e020      	b.n	800de9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800de5a:	68bb      	ldr	r3, [r7, #8]
 800de5c:	4a21      	ldr	r2, [pc, #132]	@ (800dee4 <USB_SetTurnaroundTime+0x138>)
 800de5e:	4293      	cmp	r3, r2
 800de60:	d306      	bcc.n	800de70 <USB_SetTurnaroundTime+0xc4>
 800de62:	68bb      	ldr	r3, [r7, #8]
 800de64:	4a20      	ldr	r2, [pc, #128]	@ (800dee8 <USB_SetTurnaroundTime+0x13c>)
 800de66:	4293      	cmp	r3, r2
 800de68:	d802      	bhi.n	800de70 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800de6a:	2308      	movs	r3, #8
 800de6c:	617b      	str	r3, [r7, #20]
 800de6e:	e015      	b.n	800de9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800de70:	68bb      	ldr	r3, [r7, #8]
 800de72:	4a1d      	ldr	r2, [pc, #116]	@ (800dee8 <USB_SetTurnaroundTime+0x13c>)
 800de74:	4293      	cmp	r3, r2
 800de76:	d906      	bls.n	800de86 <USB_SetTurnaroundTime+0xda>
 800de78:	68bb      	ldr	r3, [r7, #8]
 800de7a:	4a1c      	ldr	r2, [pc, #112]	@ (800deec <USB_SetTurnaroundTime+0x140>)
 800de7c:	4293      	cmp	r3, r2
 800de7e:	d202      	bcs.n	800de86 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800de80:	2307      	movs	r3, #7
 800de82:	617b      	str	r3, [r7, #20]
 800de84:	e00a      	b.n	800de9c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800de86:	2306      	movs	r3, #6
 800de88:	617b      	str	r3, [r7, #20]
 800de8a:	e007      	b.n	800de9c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800de8c:	79fb      	ldrb	r3, [r7, #7]
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d102      	bne.n	800de98 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800de92:	2309      	movs	r3, #9
 800de94:	617b      	str	r3, [r7, #20]
 800de96:	e001      	b.n	800de9c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800de98:	2309      	movs	r3, #9
 800de9a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	68db      	ldr	r3, [r3, #12]
 800dea0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	68da      	ldr	r2, [r3, #12]
 800deac:	697b      	ldr	r3, [r7, #20]
 800deae:	029b      	lsls	r3, r3, #10
 800deb0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800deb4:	431a      	orrs	r2, r3
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800deba:	2300      	movs	r3, #0
}
 800debc:	4618      	mov	r0, r3
 800debe:	371c      	adds	r7, #28
 800dec0:	46bd      	mov	sp, r7
 800dec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec6:	4770      	bx	lr
 800dec8:	00d8acbf 	.word	0x00d8acbf
 800decc:	00e4e1c0 	.word	0x00e4e1c0
 800ded0:	00f42400 	.word	0x00f42400
 800ded4:	01067380 	.word	0x01067380
 800ded8:	011a499f 	.word	0x011a499f
 800dedc:	01312cff 	.word	0x01312cff
 800dee0:	014ca43f 	.word	0x014ca43f
 800dee4:	016e3600 	.word	0x016e3600
 800dee8:	01a6ab1f 	.word	0x01a6ab1f
 800deec:	01e84800 	.word	0x01e84800

0800def0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800def0:	b480      	push	{r7}
 800def2:	b083      	sub	sp, #12
 800def4:	af00      	add	r7, sp, #0
 800def6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	689b      	ldr	r3, [r3, #8]
 800defc:	f043 0201 	orr.w	r2, r3, #1
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800df04:	2300      	movs	r3, #0
}
 800df06:	4618      	mov	r0, r3
 800df08:	370c      	adds	r7, #12
 800df0a:	46bd      	mov	sp, r7
 800df0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df10:	4770      	bx	lr

0800df12 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800df12:	b480      	push	{r7}
 800df14:	b083      	sub	sp, #12
 800df16:	af00      	add	r7, sp, #0
 800df18:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	689b      	ldr	r3, [r3, #8]
 800df1e:	f023 0201 	bic.w	r2, r3, #1
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800df26:	2300      	movs	r3, #0
}
 800df28:	4618      	mov	r0, r3
 800df2a:	370c      	adds	r7, #12
 800df2c:	46bd      	mov	sp, r7
 800df2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df32:	4770      	bx	lr

0800df34 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800df34:	b580      	push	{r7, lr}
 800df36:	b084      	sub	sp, #16
 800df38:	af00      	add	r7, sp, #0
 800df3a:	6078      	str	r0, [r7, #4]
 800df3c:	460b      	mov	r3, r1
 800df3e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800df40:	2300      	movs	r3, #0
 800df42:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	68db      	ldr	r3, [r3, #12]
 800df48:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800df50:	78fb      	ldrb	r3, [r7, #3]
 800df52:	2b01      	cmp	r3, #1
 800df54:	d115      	bne.n	800df82 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	68db      	ldr	r3, [r3, #12]
 800df5a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800df62:	200a      	movs	r0, #10
 800df64:	f7f7 f85c 	bl	8005020 <HAL_Delay>
      ms += 10U;
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	330a      	adds	r3, #10
 800df6c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800df6e:	6878      	ldr	r0, [r7, #4]
 800df70:	f001 f93f 	bl	800f1f2 <USB_GetMode>
 800df74:	4603      	mov	r3, r0
 800df76:	2b01      	cmp	r3, #1
 800df78:	d01e      	beq.n	800dfb8 <USB_SetCurrentMode+0x84>
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	2bc7      	cmp	r3, #199	@ 0xc7
 800df7e:	d9f0      	bls.n	800df62 <USB_SetCurrentMode+0x2e>
 800df80:	e01a      	b.n	800dfb8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800df82:	78fb      	ldrb	r3, [r7, #3]
 800df84:	2b00      	cmp	r3, #0
 800df86:	d115      	bne.n	800dfb4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	68db      	ldr	r3, [r3, #12]
 800df8c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800df94:	200a      	movs	r0, #10
 800df96:	f7f7 f843 	bl	8005020 <HAL_Delay>
      ms += 10U;
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	330a      	adds	r3, #10
 800df9e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800dfa0:	6878      	ldr	r0, [r7, #4]
 800dfa2:	f001 f926 	bl	800f1f2 <USB_GetMode>
 800dfa6:	4603      	mov	r3, r0
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d005      	beq.n	800dfb8 <USB_SetCurrentMode+0x84>
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	2bc7      	cmp	r3, #199	@ 0xc7
 800dfb0:	d9f0      	bls.n	800df94 <USB_SetCurrentMode+0x60>
 800dfb2:	e001      	b.n	800dfb8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800dfb4:	2301      	movs	r3, #1
 800dfb6:	e005      	b.n	800dfc4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	2bc8      	cmp	r3, #200	@ 0xc8
 800dfbc:	d101      	bne.n	800dfc2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800dfbe:	2301      	movs	r3, #1
 800dfc0:	e000      	b.n	800dfc4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800dfc2:	2300      	movs	r3, #0
}
 800dfc4:	4618      	mov	r0, r3
 800dfc6:	3710      	adds	r7, #16
 800dfc8:	46bd      	mov	sp, r7
 800dfca:	bd80      	pop	{r7, pc}

0800dfcc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800dfcc:	b084      	sub	sp, #16
 800dfce:	b580      	push	{r7, lr}
 800dfd0:	b086      	sub	sp, #24
 800dfd2:	af00      	add	r7, sp, #0
 800dfd4:	6078      	str	r0, [r7, #4]
 800dfd6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800dfda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800dfde:	2300      	movs	r3, #0
 800dfe0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800dfe6:	2300      	movs	r3, #0
 800dfe8:	613b      	str	r3, [r7, #16]
 800dfea:	e009      	b.n	800e000 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800dfec:	687a      	ldr	r2, [r7, #4]
 800dfee:	693b      	ldr	r3, [r7, #16]
 800dff0:	3340      	adds	r3, #64	@ 0x40
 800dff2:	009b      	lsls	r3, r3, #2
 800dff4:	4413      	add	r3, r2
 800dff6:	2200      	movs	r2, #0
 800dff8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800dffa:	693b      	ldr	r3, [r7, #16]
 800dffc:	3301      	adds	r3, #1
 800dffe:	613b      	str	r3, [r7, #16]
 800e000:	693b      	ldr	r3, [r7, #16]
 800e002:	2b0e      	cmp	r3, #14
 800e004:	d9f2      	bls.n	800dfec <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800e006:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d11c      	bne.n	800e048 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e014:	685b      	ldr	r3, [r3, #4]
 800e016:	68fa      	ldr	r2, [r7, #12]
 800e018:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e01c:	f043 0302 	orr.w	r3, r3, #2
 800e020:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e026:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e032:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e03e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	639a      	str	r2, [r3, #56]	@ 0x38
 800e046:	e00b      	b.n	800e060 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e04c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e058:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800e066:	461a      	mov	r2, r3
 800e068:	2300      	movs	r3, #0
 800e06a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e06c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800e070:	2b01      	cmp	r3, #1
 800e072:	d10d      	bne.n	800e090 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800e074:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d104      	bne.n	800e086 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800e07c:	2100      	movs	r1, #0
 800e07e:	6878      	ldr	r0, [r7, #4]
 800e080:	f000 f968 	bl	800e354 <USB_SetDevSpeed>
 800e084:	e008      	b.n	800e098 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800e086:	2101      	movs	r1, #1
 800e088:	6878      	ldr	r0, [r7, #4]
 800e08a:	f000 f963 	bl	800e354 <USB_SetDevSpeed>
 800e08e:	e003      	b.n	800e098 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800e090:	2103      	movs	r1, #3
 800e092:	6878      	ldr	r0, [r7, #4]
 800e094:	f000 f95e 	bl	800e354 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800e098:	2110      	movs	r1, #16
 800e09a:	6878      	ldr	r0, [r7, #4]
 800e09c:	f000 f8fa 	bl	800e294 <USB_FlushTxFifo>
 800e0a0:	4603      	mov	r3, r0
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d001      	beq.n	800e0aa <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800e0a6:	2301      	movs	r3, #1
 800e0a8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800e0aa:	6878      	ldr	r0, [r7, #4]
 800e0ac:	f000 f924 	bl	800e2f8 <USB_FlushRxFifo>
 800e0b0:	4603      	mov	r3, r0
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d001      	beq.n	800e0ba <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800e0b6:	2301      	movs	r3, #1
 800e0b8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e0c0:	461a      	mov	r2, r3
 800e0c2:	2300      	movs	r3, #0
 800e0c4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e0cc:	461a      	mov	r2, r3
 800e0ce:	2300      	movs	r3, #0
 800e0d0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e0d8:	461a      	mov	r2, r3
 800e0da:	2300      	movs	r3, #0
 800e0dc:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e0de:	2300      	movs	r3, #0
 800e0e0:	613b      	str	r3, [r7, #16]
 800e0e2:	e043      	b.n	800e16c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e0e4:	693b      	ldr	r3, [r7, #16]
 800e0e6:	015a      	lsls	r2, r3, #5
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	4413      	add	r3, r2
 800e0ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e0f6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e0fa:	d118      	bne.n	800e12e <USB_DevInit+0x162>
    {
      if (i == 0U)
 800e0fc:	693b      	ldr	r3, [r7, #16]
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d10a      	bne.n	800e118 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800e102:	693b      	ldr	r3, [r7, #16]
 800e104:	015a      	lsls	r2, r3, #5
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	4413      	add	r3, r2
 800e10a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e10e:	461a      	mov	r2, r3
 800e110:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800e114:	6013      	str	r3, [r2, #0]
 800e116:	e013      	b.n	800e140 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800e118:	693b      	ldr	r3, [r7, #16]
 800e11a:	015a      	lsls	r2, r3, #5
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	4413      	add	r3, r2
 800e120:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e124:	461a      	mov	r2, r3
 800e126:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800e12a:	6013      	str	r3, [r2, #0]
 800e12c:	e008      	b.n	800e140 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800e12e:	693b      	ldr	r3, [r7, #16]
 800e130:	015a      	lsls	r2, r3, #5
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	4413      	add	r3, r2
 800e136:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e13a:	461a      	mov	r2, r3
 800e13c:	2300      	movs	r3, #0
 800e13e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800e140:	693b      	ldr	r3, [r7, #16]
 800e142:	015a      	lsls	r2, r3, #5
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	4413      	add	r3, r2
 800e148:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e14c:	461a      	mov	r2, r3
 800e14e:	2300      	movs	r3, #0
 800e150:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800e152:	693b      	ldr	r3, [r7, #16]
 800e154:	015a      	lsls	r2, r3, #5
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	4413      	add	r3, r2
 800e15a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e15e:	461a      	mov	r2, r3
 800e160:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800e164:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e166:	693b      	ldr	r3, [r7, #16]
 800e168:	3301      	adds	r3, #1
 800e16a:	613b      	str	r3, [r7, #16]
 800e16c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800e170:	461a      	mov	r2, r3
 800e172:	693b      	ldr	r3, [r7, #16]
 800e174:	4293      	cmp	r3, r2
 800e176:	d3b5      	bcc.n	800e0e4 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e178:	2300      	movs	r3, #0
 800e17a:	613b      	str	r3, [r7, #16]
 800e17c:	e043      	b.n	800e206 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e17e:	693b      	ldr	r3, [r7, #16]
 800e180:	015a      	lsls	r2, r3, #5
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	4413      	add	r3, r2
 800e186:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e190:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e194:	d118      	bne.n	800e1c8 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800e196:	693b      	ldr	r3, [r7, #16]
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d10a      	bne.n	800e1b2 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800e19c:	693b      	ldr	r3, [r7, #16]
 800e19e:	015a      	lsls	r2, r3, #5
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	4413      	add	r3, r2
 800e1a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e1a8:	461a      	mov	r2, r3
 800e1aa:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800e1ae:	6013      	str	r3, [r2, #0]
 800e1b0:	e013      	b.n	800e1da <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800e1b2:	693b      	ldr	r3, [r7, #16]
 800e1b4:	015a      	lsls	r2, r3, #5
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	4413      	add	r3, r2
 800e1ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e1be:	461a      	mov	r2, r3
 800e1c0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800e1c4:	6013      	str	r3, [r2, #0]
 800e1c6:	e008      	b.n	800e1da <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800e1c8:	693b      	ldr	r3, [r7, #16]
 800e1ca:	015a      	lsls	r2, r3, #5
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	4413      	add	r3, r2
 800e1d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e1d4:	461a      	mov	r2, r3
 800e1d6:	2300      	movs	r3, #0
 800e1d8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800e1da:	693b      	ldr	r3, [r7, #16]
 800e1dc:	015a      	lsls	r2, r3, #5
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	4413      	add	r3, r2
 800e1e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e1e6:	461a      	mov	r2, r3
 800e1e8:	2300      	movs	r3, #0
 800e1ea:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800e1ec:	693b      	ldr	r3, [r7, #16]
 800e1ee:	015a      	lsls	r2, r3, #5
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	4413      	add	r3, r2
 800e1f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e1f8:	461a      	mov	r2, r3
 800e1fa:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800e1fe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e200:	693b      	ldr	r3, [r7, #16]
 800e202:	3301      	adds	r3, #1
 800e204:	613b      	str	r3, [r7, #16]
 800e206:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800e20a:	461a      	mov	r2, r3
 800e20c:	693b      	ldr	r3, [r7, #16]
 800e20e:	4293      	cmp	r3, r2
 800e210:	d3b5      	bcc.n	800e17e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e218:	691b      	ldr	r3, [r3, #16]
 800e21a:	68fa      	ldr	r2, [r7, #12]
 800e21c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e220:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e224:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	2200      	movs	r2, #0
 800e22a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800e232:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800e234:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d105      	bne.n	800e248 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	699b      	ldr	r3, [r3, #24]
 800e240:	f043 0210 	orr.w	r2, r3, #16
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	699a      	ldr	r2, [r3, #24]
 800e24c:	4b10      	ldr	r3, [pc, #64]	@ (800e290 <USB_DevInit+0x2c4>)
 800e24e:	4313      	orrs	r3, r2
 800e250:	687a      	ldr	r2, [r7, #4]
 800e252:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800e254:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d005      	beq.n	800e268 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	699b      	ldr	r3, [r3, #24]
 800e260:	f043 0208 	orr.w	r2, r3, #8
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800e268:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800e26c:	2b01      	cmp	r3, #1
 800e26e:	d107      	bne.n	800e280 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	699b      	ldr	r3, [r3, #24]
 800e274:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e278:	f043 0304 	orr.w	r3, r3, #4
 800e27c:	687a      	ldr	r2, [r7, #4]
 800e27e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800e280:	7dfb      	ldrb	r3, [r7, #23]
}
 800e282:	4618      	mov	r0, r3
 800e284:	3718      	adds	r7, #24
 800e286:	46bd      	mov	sp, r7
 800e288:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e28c:	b004      	add	sp, #16
 800e28e:	4770      	bx	lr
 800e290:	803c3800 	.word	0x803c3800

0800e294 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800e294:	b480      	push	{r7}
 800e296:	b085      	sub	sp, #20
 800e298:	af00      	add	r7, sp, #0
 800e29a:	6078      	str	r0, [r7, #4]
 800e29c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800e29e:	2300      	movs	r3, #0
 800e2a0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	3301      	adds	r3, #1
 800e2a6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e2ae:	d901      	bls.n	800e2b4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800e2b0:	2303      	movs	r3, #3
 800e2b2:	e01b      	b.n	800e2ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	691b      	ldr	r3, [r3, #16]
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	daf2      	bge.n	800e2a2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800e2bc:	2300      	movs	r3, #0
 800e2be:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800e2c0:	683b      	ldr	r3, [r7, #0]
 800e2c2:	019b      	lsls	r3, r3, #6
 800e2c4:	f043 0220 	orr.w	r2, r3, #32
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	3301      	adds	r3, #1
 800e2d0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e2d8:	d901      	bls.n	800e2de <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800e2da:	2303      	movs	r3, #3
 800e2dc:	e006      	b.n	800e2ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	691b      	ldr	r3, [r3, #16]
 800e2e2:	f003 0320 	and.w	r3, r3, #32
 800e2e6:	2b20      	cmp	r3, #32
 800e2e8:	d0f0      	beq.n	800e2cc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800e2ea:	2300      	movs	r3, #0
}
 800e2ec:	4618      	mov	r0, r3
 800e2ee:	3714      	adds	r7, #20
 800e2f0:	46bd      	mov	sp, r7
 800e2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2f6:	4770      	bx	lr

0800e2f8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800e2f8:	b480      	push	{r7}
 800e2fa:	b085      	sub	sp, #20
 800e2fc:	af00      	add	r7, sp, #0
 800e2fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e300:	2300      	movs	r3, #0
 800e302:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	3301      	adds	r3, #1
 800e308:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e310:	d901      	bls.n	800e316 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800e312:	2303      	movs	r3, #3
 800e314:	e018      	b.n	800e348 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	691b      	ldr	r3, [r3, #16]
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	daf2      	bge.n	800e304 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800e31e:	2300      	movs	r3, #0
 800e320:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	2210      	movs	r2, #16
 800e326:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	3301      	adds	r3, #1
 800e32c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e334:	d901      	bls.n	800e33a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800e336:	2303      	movs	r3, #3
 800e338:	e006      	b.n	800e348 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	691b      	ldr	r3, [r3, #16]
 800e33e:	f003 0310 	and.w	r3, r3, #16
 800e342:	2b10      	cmp	r3, #16
 800e344:	d0f0      	beq.n	800e328 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800e346:	2300      	movs	r3, #0
}
 800e348:	4618      	mov	r0, r3
 800e34a:	3714      	adds	r7, #20
 800e34c:	46bd      	mov	sp, r7
 800e34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e352:	4770      	bx	lr

0800e354 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800e354:	b480      	push	{r7}
 800e356:	b085      	sub	sp, #20
 800e358:	af00      	add	r7, sp, #0
 800e35a:	6078      	str	r0, [r7, #4]
 800e35c:	460b      	mov	r3, r1
 800e35e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e36a:	681a      	ldr	r2, [r3, #0]
 800e36c:	78fb      	ldrb	r3, [r7, #3]
 800e36e:	68f9      	ldr	r1, [r7, #12]
 800e370:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e374:	4313      	orrs	r3, r2
 800e376:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800e378:	2300      	movs	r3, #0
}
 800e37a:	4618      	mov	r0, r3
 800e37c:	3714      	adds	r7, #20
 800e37e:	46bd      	mov	sp, r7
 800e380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e384:	4770      	bx	lr

0800e386 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800e386:	b480      	push	{r7}
 800e388:	b087      	sub	sp, #28
 800e38a:	af00      	add	r7, sp, #0
 800e38c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800e392:	693b      	ldr	r3, [r7, #16]
 800e394:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e398:	689b      	ldr	r3, [r3, #8]
 800e39a:	f003 0306 	and.w	r3, r3, #6
 800e39e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d102      	bne.n	800e3ac <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800e3a6:	2300      	movs	r3, #0
 800e3a8:	75fb      	strb	r3, [r7, #23]
 800e3aa:	e00a      	b.n	800e3c2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	2b02      	cmp	r3, #2
 800e3b0:	d002      	beq.n	800e3b8 <USB_GetDevSpeed+0x32>
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	2b06      	cmp	r3, #6
 800e3b6:	d102      	bne.n	800e3be <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800e3b8:	2302      	movs	r3, #2
 800e3ba:	75fb      	strb	r3, [r7, #23]
 800e3bc:	e001      	b.n	800e3c2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800e3be:	230f      	movs	r3, #15
 800e3c0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800e3c2:	7dfb      	ldrb	r3, [r7, #23]
}
 800e3c4:	4618      	mov	r0, r3
 800e3c6:	371c      	adds	r7, #28
 800e3c8:	46bd      	mov	sp, r7
 800e3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ce:	4770      	bx	lr

0800e3d0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800e3d0:	b480      	push	{r7}
 800e3d2:	b085      	sub	sp, #20
 800e3d4:	af00      	add	r7, sp, #0
 800e3d6:	6078      	str	r0, [r7, #4]
 800e3d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e3de:	683b      	ldr	r3, [r7, #0]
 800e3e0:	781b      	ldrb	r3, [r3, #0]
 800e3e2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e3e4:	683b      	ldr	r3, [r7, #0]
 800e3e6:	785b      	ldrb	r3, [r3, #1]
 800e3e8:	2b01      	cmp	r3, #1
 800e3ea:	d13a      	bne.n	800e462 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e3f2:	69da      	ldr	r2, [r3, #28]
 800e3f4:	683b      	ldr	r3, [r7, #0]
 800e3f6:	781b      	ldrb	r3, [r3, #0]
 800e3f8:	f003 030f 	and.w	r3, r3, #15
 800e3fc:	2101      	movs	r1, #1
 800e3fe:	fa01 f303 	lsl.w	r3, r1, r3
 800e402:	b29b      	uxth	r3, r3
 800e404:	68f9      	ldr	r1, [r7, #12]
 800e406:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e40a:	4313      	orrs	r3, r2
 800e40c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800e40e:	68bb      	ldr	r3, [r7, #8]
 800e410:	015a      	lsls	r2, r3, #5
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	4413      	add	r3, r2
 800e416:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e420:	2b00      	cmp	r3, #0
 800e422:	d155      	bne.n	800e4d0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e424:	68bb      	ldr	r3, [r7, #8]
 800e426:	015a      	lsls	r2, r3, #5
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	4413      	add	r3, r2
 800e42c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e430:	681a      	ldr	r2, [r3, #0]
 800e432:	683b      	ldr	r3, [r7, #0]
 800e434:	689b      	ldr	r3, [r3, #8]
 800e436:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800e43a:	683b      	ldr	r3, [r7, #0]
 800e43c:	791b      	ldrb	r3, [r3, #4]
 800e43e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e440:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800e442:	68bb      	ldr	r3, [r7, #8]
 800e444:	059b      	lsls	r3, r3, #22
 800e446:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e448:	4313      	orrs	r3, r2
 800e44a:	68ba      	ldr	r2, [r7, #8]
 800e44c:	0151      	lsls	r1, r2, #5
 800e44e:	68fa      	ldr	r2, [r7, #12]
 800e450:	440a      	add	r2, r1
 800e452:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e456:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e45a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e45e:	6013      	str	r3, [r2, #0]
 800e460:	e036      	b.n	800e4d0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e468:	69da      	ldr	r2, [r3, #28]
 800e46a:	683b      	ldr	r3, [r7, #0]
 800e46c:	781b      	ldrb	r3, [r3, #0]
 800e46e:	f003 030f 	and.w	r3, r3, #15
 800e472:	2101      	movs	r1, #1
 800e474:	fa01 f303 	lsl.w	r3, r1, r3
 800e478:	041b      	lsls	r3, r3, #16
 800e47a:	68f9      	ldr	r1, [r7, #12]
 800e47c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e480:	4313      	orrs	r3, r2
 800e482:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800e484:	68bb      	ldr	r3, [r7, #8]
 800e486:	015a      	lsls	r2, r3, #5
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	4413      	add	r3, r2
 800e48c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e496:	2b00      	cmp	r3, #0
 800e498:	d11a      	bne.n	800e4d0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800e49a:	68bb      	ldr	r3, [r7, #8]
 800e49c:	015a      	lsls	r2, r3, #5
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	4413      	add	r3, r2
 800e4a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e4a6:	681a      	ldr	r2, [r3, #0]
 800e4a8:	683b      	ldr	r3, [r7, #0]
 800e4aa:	689b      	ldr	r3, [r3, #8]
 800e4ac:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800e4b0:	683b      	ldr	r3, [r7, #0]
 800e4b2:	791b      	ldrb	r3, [r3, #4]
 800e4b4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800e4b6:	430b      	orrs	r3, r1
 800e4b8:	4313      	orrs	r3, r2
 800e4ba:	68ba      	ldr	r2, [r7, #8]
 800e4bc:	0151      	lsls	r1, r2, #5
 800e4be:	68fa      	ldr	r2, [r7, #12]
 800e4c0:	440a      	add	r2, r1
 800e4c2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e4c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e4ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e4ce:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800e4d0:	2300      	movs	r3, #0
}
 800e4d2:	4618      	mov	r0, r3
 800e4d4:	3714      	adds	r7, #20
 800e4d6:	46bd      	mov	sp, r7
 800e4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4dc:	4770      	bx	lr
	...

0800e4e0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800e4e0:	b480      	push	{r7}
 800e4e2:	b085      	sub	sp, #20
 800e4e4:	af00      	add	r7, sp, #0
 800e4e6:	6078      	str	r0, [r7, #4]
 800e4e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e4ee:	683b      	ldr	r3, [r7, #0]
 800e4f0:	781b      	ldrb	r3, [r3, #0]
 800e4f2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800e4f4:	683b      	ldr	r3, [r7, #0]
 800e4f6:	785b      	ldrb	r3, [r3, #1]
 800e4f8:	2b01      	cmp	r3, #1
 800e4fa:	d161      	bne.n	800e5c0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e4fc:	68bb      	ldr	r3, [r7, #8]
 800e4fe:	015a      	lsls	r2, r3, #5
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	4413      	add	r3, r2
 800e504:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e50e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e512:	d11f      	bne.n	800e554 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800e514:	68bb      	ldr	r3, [r7, #8]
 800e516:	015a      	lsls	r2, r3, #5
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	4413      	add	r3, r2
 800e51c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	68ba      	ldr	r2, [r7, #8]
 800e524:	0151      	lsls	r1, r2, #5
 800e526:	68fa      	ldr	r2, [r7, #12]
 800e528:	440a      	add	r2, r1
 800e52a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e52e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800e532:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800e534:	68bb      	ldr	r3, [r7, #8]
 800e536:	015a      	lsls	r2, r3, #5
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	4413      	add	r3, r2
 800e53c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	68ba      	ldr	r2, [r7, #8]
 800e544:	0151      	lsls	r1, r2, #5
 800e546:	68fa      	ldr	r2, [r7, #12]
 800e548:	440a      	add	r2, r1
 800e54a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e54e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e552:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e55a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e55c:	683b      	ldr	r3, [r7, #0]
 800e55e:	781b      	ldrb	r3, [r3, #0]
 800e560:	f003 030f 	and.w	r3, r3, #15
 800e564:	2101      	movs	r1, #1
 800e566:	fa01 f303 	lsl.w	r3, r1, r3
 800e56a:	b29b      	uxth	r3, r3
 800e56c:	43db      	mvns	r3, r3
 800e56e:	68f9      	ldr	r1, [r7, #12]
 800e570:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e574:	4013      	ands	r3, r2
 800e576:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e57e:	69da      	ldr	r2, [r3, #28]
 800e580:	683b      	ldr	r3, [r7, #0]
 800e582:	781b      	ldrb	r3, [r3, #0]
 800e584:	f003 030f 	and.w	r3, r3, #15
 800e588:	2101      	movs	r1, #1
 800e58a:	fa01 f303 	lsl.w	r3, r1, r3
 800e58e:	b29b      	uxth	r3, r3
 800e590:	43db      	mvns	r3, r3
 800e592:	68f9      	ldr	r1, [r7, #12]
 800e594:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e598:	4013      	ands	r3, r2
 800e59a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800e59c:	68bb      	ldr	r3, [r7, #8]
 800e59e:	015a      	lsls	r2, r3, #5
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	4413      	add	r3, r2
 800e5a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e5a8:	681a      	ldr	r2, [r3, #0]
 800e5aa:	68bb      	ldr	r3, [r7, #8]
 800e5ac:	0159      	lsls	r1, r3, #5
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	440b      	add	r3, r1
 800e5b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e5b6:	4619      	mov	r1, r3
 800e5b8:	4b35      	ldr	r3, [pc, #212]	@ (800e690 <USB_DeactivateEndpoint+0x1b0>)
 800e5ba:	4013      	ands	r3, r2
 800e5bc:	600b      	str	r3, [r1, #0]
 800e5be:	e060      	b.n	800e682 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e5c0:	68bb      	ldr	r3, [r7, #8]
 800e5c2:	015a      	lsls	r2, r3, #5
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	4413      	add	r3, r2
 800e5c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e5d2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e5d6:	d11f      	bne.n	800e618 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800e5d8:	68bb      	ldr	r3, [r7, #8]
 800e5da:	015a      	lsls	r2, r3, #5
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	4413      	add	r3, r2
 800e5e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	68ba      	ldr	r2, [r7, #8]
 800e5e8:	0151      	lsls	r1, r2, #5
 800e5ea:	68fa      	ldr	r2, [r7, #12]
 800e5ec:	440a      	add	r2, r1
 800e5ee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e5f2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800e5f6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800e5f8:	68bb      	ldr	r3, [r7, #8]
 800e5fa:	015a      	lsls	r2, r3, #5
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	4413      	add	r3, r2
 800e600:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	68ba      	ldr	r2, [r7, #8]
 800e608:	0151      	lsls	r1, r2, #5
 800e60a:	68fa      	ldr	r2, [r7, #12]
 800e60c:	440a      	add	r2, r1
 800e60e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e612:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e616:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e61e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e620:	683b      	ldr	r3, [r7, #0]
 800e622:	781b      	ldrb	r3, [r3, #0]
 800e624:	f003 030f 	and.w	r3, r3, #15
 800e628:	2101      	movs	r1, #1
 800e62a:	fa01 f303 	lsl.w	r3, r1, r3
 800e62e:	041b      	lsls	r3, r3, #16
 800e630:	43db      	mvns	r3, r3
 800e632:	68f9      	ldr	r1, [r7, #12]
 800e634:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e638:	4013      	ands	r3, r2
 800e63a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e642:	69da      	ldr	r2, [r3, #28]
 800e644:	683b      	ldr	r3, [r7, #0]
 800e646:	781b      	ldrb	r3, [r3, #0]
 800e648:	f003 030f 	and.w	r3, r3, #15
 800e64c:	2101      	movs	r1, #1
 800e64e:	fa01 f303 	lsl.w	r3, r1, r3
 800e652:	041b      	lsls	r3, r3, #16
 800e654:	43db      	mvns	r3, r3
 800e656:	68f9      	ldr	r1, [r7, #12]
 800e658:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e65c:	4013      	ands	r3, r2
 800e65e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800e660:	68bb      	ldr	r3, [r7, #8]
 800e662:	015a      	lsls	r2, r3, #5
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	4413      	add	r3, r2
 800e668:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e66c:	681a      	ldr	r2, [r3, #0]
 800e66e:	68bb      	ldr	r3, [r7, #8]
 800e670:	0159      	lsls	r1, r3, #5
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	440b      	add	r3, r1
 800e676:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e67a:	4619      	mov	r1, r3
 800e67c:	4b05      	ldr	r3, [pc, #20]	@ (800e694 <USB_DeactivateEndpoint+0x1b4>)
 800e67e:	4013      	ands	r3, r2
 800e680:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800e682:	2300      	movs	r3, #0
}
 800e684:	4618      	mov	r0, r3
 800e686:	3714      	adds	r7, #20
 800e688:	46bd      	mov	sp, r7
 800e68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e68e:	4770      	bx	lr
 800e690:	ec337800 	.word	0xec337800
 800e694:	eff37800 	.word	0xeff37800

0800e698 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800e698:	b580      	push	{r7, lr}
 800e69a:	b08a      	sub	sp, #40	@ 0x28
 800e69c:	af02      	add	r7, sp, #8
 800e69e:	60f8      	str	r0, [r7, #12]
 800e6a0:	60b9      	str	r1, [r7, #8]
 800e6a2:	4613      	mov	r3, r2
 800e6a4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800e6aa:	68bb      	ldr	r3, [r7, #8]
 800e6ac:	781b      	ldrb	r3, [r3, #0]
 800e6ae:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e6b0:	68bb      	ldr	r3, [r7, #8]
 800e6b2:	785b      	ldrb	r3, [r3, #1]
 800e6b4:	2b01      	cmp	r3, #1
 800e6b6:	f040 817f 	bne.w	800e9b8 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800e6ba:	68bb      	ldr	r3, [r7, #8]
 800e6bc:	691b      	ldr	r3, [r3, #16]
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d132      	bne.n	800e728 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e6c2:	69bb      	ldr	r3, [r7, #24]
 800e6c4:	015a      	lsls	r2, r3, #5
 800e6c6:	69fb      	ldr	r3, [r7, #28]
 800e6c8:	4413      	add	r3, r2
 800e6ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e6ce:	691b      	ldr	r3, [r3, #16]
 800e6d0:	69ba      	ldr	r2, [r7, #24]
 800e6d2:	0151      	lsls	r1, r2, #5
 800e6d4:	69fa      	ldr	r2, [r7, #28]
 800e6d6:	440a      	add	r2, r1
 800e6d8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e6dc:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800e6e0:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800e6e4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e6e6:	69bb      	ldr	r3, [r7, #24]
 800e6e8:	015a      	lsls	r2, r3, #5
 800e6ea:	69fb      	ldr	r3, [r7, #28]
 800e6ec:	4413      	add	r3, r2
 800e6ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e6f2:	691b      	ldr	r3, [r3, #16]
 800e6f4:	69ba      	ldr	r2, [r7, #24]
 800e6f6:	0151      	lsls	r1, r2, #5
 800e6f8:	69fa      	ldr	r2, [r7, #28]
 800e6fa:	440a      	add	r2, r1
 800e6fc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e700:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e704:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e706:	69bb      	ldr	r3, [r7, #24]
 800e708:	015a      	lsls	r2, r3, #5
 800e70a:	69fb      	ldr	r3, [r7, #28]
 800e70c:	4413      	add	r3, r2
 800e70e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e712:	691b      	ldr	r3, [r3, #16]
 800e714:	69ba      	ldr	r2, [r7, #24]
 800e716:	0151      	lsls	r1, r2, #5
 800e718:	69fa      	ldr	r2, [r7, #28]
 800e71a:	440a      	add	r2, r1
 800e71c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e720:	0cdb      	lsrs	r3, r3, #19
 800e722:	04db      	lsls	r3, r3, #19
 800e724:	6113      	str	r3, [r2, #16]
 800e726:	e097      	b.n	800e858 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e728:	69bb      	ldr	r3, [r7, #24]
 800e72a:	015a      	lsls	r2, r3, #5
 800e72c:	69fb      	ldr	r3, [r7, #28]
 800e72e:	4413      	add	r3, r2
 800e730:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e734:	691b      	ldr	r3, [r3, #16]
 800e736:	69ba      	ldr	r2, [r7, #24]
 800e738:	0151      	lsls	r1, r2, #5
 800e73a:	69fa      	ldr	r2, [r7, #28]
 800e73c:	440a      	add	r2, r1
 800e73e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e742:	0cdb      	lsrs	r3, r3, #19
 800e744:	04db      	lsls	r3, r3, #19
 800e746:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e748:	69bb      	ldr	r3, [r7, #24]
 800e74a:	015a      	lsls	r2, r3, #5
 800e74c:	69fb      	ldr	r3, [r7, #28]
 800e74e:	4413      	add	r3, r2
 800e750:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e754:	691b      	ldr	r3, [r3, #16]
 800e756:	69ba      	ldr	r2, [r7, #24]
 800e758:	0151      	lsls	r1, r2, #5
 800e75a:	69fa      	ldr	r2, [r7, #28]
 800e75c:	440a      	add	r2, r1
 800e75e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e762:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800e766:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800e76a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800e76c:	69bb      	ldr	r3, [r7, #24]
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d11a      	bne.n	800e7a8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800e772:	68bb      	ldr	r3, [r7, #8]
 800e774:	691a      	ldr	r2, [r3, #16]
 800e776:	68bb      	ldr	r3, [r7, #8]
 800e778:	689b      	ldr	r3, [r3, #8]
 800e77a:	429a      	cmp	r2, r3
 800e77c:	d903      	bls.n	800e786 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800e77e:	68bb      	ldr	r3, [r7, #8]
 800e780:	689a      	ldr	r2, [r3, #8]
 800e782:	68bb      	ldr	r3, [r7, #8]
 800e784:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e786:	69bb      	ldr	r3, [r7, #24]
 800e788:	015a      	lsls	r2, r3, #5
 800e78a:	69fb      	ldr	r3, [r7, #28]
 800e78c:	4413      	add	r3, r2
 800e78e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e792:	691b      	ldr	r3, [r3, #16]
 800e794:	69ba      	ldr	r2, [r7, #24]
 800e796:	0151      	lsls	r1, r2, #5
 800e798:	69fa      	ldr	r2, [r7, #28]
 800e79a:	440a      	add	r2, r1
 800e79c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e7a0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e7a4:	6113      	str	r3, [r2, #16]
 800e7a6:	e044      	b.n	800e832 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800e7a8:	68bb      	ldr	r3, [r7, #8]
 800e7aa:	691a      	ldr	r2, [r3, #16]
 800e7ac:	68bb      	ldr	r3, [r7, #8]
 800e7ae:	689b      	ldr	r3, [r3, #8]
 800e7b0:	4413      	add	r3, r2
 800e7b2:	1e5a      	subs	r2, r3, #1
 800e7b4:	68bb      	ldr	r3, [r7, #8]
 800e7b6:	689b      	ldr	r3, [r3, #8]
 800e7b8:	fbb2 f3f3 	udiv	r3, r2, r3
 800e7bc:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 800e7be:	69bb      	ldr	r3, [r7, #24]
 800e7c0:	015a      	lsls	r2, r3, #5
 800e7c2:	69fb      	ldr	r3, [r7, #28]
 800e7c4:	4413      	add	r3, r2
 800e7c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e7ca:	691a      	ldr	r2, [r3, #16]
 800e7cc:	8afb      	ldrh	r3, [r7, #22]
 800e7ce:	04d9      	lsls	r1, r3, #19
 800e7d0:	4ba4      	ldr	r3, [pc, #656]	@ (800ea64 <USB_EPStartXfer+0x3cc>)
 800e7d2:	400b      	ands	r3, r1
 800e7d4:	69b9      	ldr	r1, [r7, #24]
 800e7d6:	0148      	lsls	r0, r1, #5
 800e7d8:	69f9      	ldr	r1, [r7, #28]
 800e7da:	4401      	add	r1, r0
 800e7dc:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800e7e0:	4313      	orrs	r3, r2
 800e7e2:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800e7e4:	68bb      	ldr	r3, [r7, #8]
 800e7e6:	791b      	ldrb	r3, [r3, #4]
 800e7e8:	2b01      	cmp	r3, #1
 800e7ea:	d122      	bne.n	800e832 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800e7ec:	69bb      	ldr	r3, [r7, #24]
 800e7ee:	015a      	lsls	r2, r3, #5
 800e7f0:	69fb      	ldr	r3, [r7, #28]
 800e7f2:	4413      	add	r3, r2
 800e7f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e7f8:	691b      	ldr	r3, [r3, #16]
 800e7fa:	69ba      	ldr	r2, [r7, #24]
 800e7fc:	0151      	lsls	r1, r2, #5
 800e7fe:	69fa      	ldr	r2, [r7, #28]
 800e800:	440a      	add	r2, r1
 800e802:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e806:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800e80a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 800e80c:	69bb      	ldr	r3, [r7, #24]
 800e80e:	015a      	lsls	r2, r3, #5
 800e810:	69fb      	ldr	r3, [r7, #28]
 800e812:	4413      	add	r3, r2
 800e814:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e818:	691a      	ldr	r2, [r3, #16]
 800e81a:	8afb      	ldrh	r3, [r7, #22]
 800e81c:	075b      	lsls	r3, r3, #29
 800e81e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800e822:	69b9      	ldr	r1, [r7, #24]
 800e824:	0148      	lsls	r0, r1, #5
 800e826:	69f9      	ldr	r1, [r7, #28]
 800e828:	4401      	add	r1, r0
 800e82a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800e82e:	4313      	orrs	r3, r2
 800e830:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e832:	69bb      	ldr	r3, [r7, #24]
 800e834:	015a      	lsls	r2, r3, #5
 800e836:	69fb      	ldr	r3, [r7, #28]
 800e838:	4413      	add	r3, r2
 800e83a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e83e:	691a      	ldr	r2, [r3, #16]
 800e840:	68bb      	ldr	r3, [r7, #8]
 800e842:	691b      	ldr	r3, [r3, #16]
 800e844:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e848:	69b9      	ldr	r1, [r7, #24]
 800e84a:	0148      	lsls	r0, r1, #5
 800e84c:	69f9      	ldr	r1, [r7, #28]
 800e84e:	4401      	add	r1, r0
 800e850:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800e854:	4313      	orrs	r3, r2
 800e856:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800e858:	79fb      	ldrb	r3, [r7, #7]
 800e85a:	2b01      	cmp	r3, #1
 800e85c:	d14b      	bne.n	800e8f6 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800e85e:	68bb      	ldr	r3, [r7, #8]
 800e860:	69db      	ldr	r3, [r3, #28]
 800e862:	2b00      	cmp	r3, #0
 800e864:	d009      	beq.n	800e87a <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800e866:	69bb      	ldr	r3, [r7, #24]
 800e868:	015a      	lsls	r2, r3, #5
 800e86a:	69fb      	ldr	r3, [r7, #28]
 800e86c:	4413      	add	r3, r2
 800e86e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e872:	461a      	mov	r2, r3
 800e874:	68bb      	ldr	r3, [r7, #8]
 800e876:	69db      	ldr	r3, [r3, #28]
 800e878:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800e87a:	68bb      	ldr	r3, [r7, #8]
 800e87c:	791b      	ldrb	r3, [r3, #4]
 800e87e:	2b01      	cmp	r3, #1
 800e880:	d128      	bne.n	800e8d4 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e882:	69fb      	ldr	r3, [r7, #28]
 800e884:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e888:	689b      	ldr	r3, [r3, #8]
 800e88a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d110      	bne.n	800e8b4 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e892:	69bb      	ldr	r3, [r7, #24]
 800e894:	015a      	lsls	r2, r3, #5
 800e896:	69fb      	ldr	r3, [r7, #28]
 800e898:	4413      	add	r3, r2
 800e89a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	69ba      	ldr	r2, [r7, #24]
 800e8a2:	0151      	lsls	r1, r2, #5
 800e8a4:	69fa      	ldr	r2, [r7, #28]
 800e8a6:	440a      	add	r2, r1
 800e8a8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e8ac:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800e8b0:	6013      	str	r3, [r2, #0]
 800e8b2:	e00f      	b.n	800e8d4 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e8b4:	69bb      	ldr	r3, [r7, #24]
 800e8b6:	015a      	lsls	r2, r3, #5
 800e8b8:	69fb      	ldr	r3, [r7, #28]
 800e8ba:	4413      	add	r3, r2
 800e8bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	69ba      	ldr	r2, [r7, #24]
 800e8c4:	0151      	lsls	r1, r2, #5
 800e8c6:	69fa      	ldr	r2, [r7, #28]
 800e8c8:	440a      	add	r2, r1
 800e8ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e8ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e8d2:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e8d4:	69bb      	ldr	r3, [r7, #24]
 800e8d6:	015a      	lsls	r2, r3, #5
 800e8d8:	69fb      	ldr	r3, [r7, #28]
 800e8da:	4413      	add	r3, r2
 800e8dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	69ba      	ldr	r2, [r7, #24]
 800e8e4:	0151      	lsls	r1, r2, #5
 800e8e6:	69fa      	ldr	r2, [r7, #28]
 800e8e8:	440a      	add	r2, r1
 800e8ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e8ee:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800e8f2:	6013      	str	r3, [r2, #0]
 800e8f4:	e166      	b.n	800ebc4 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e8f6:	69bb      	ldr	r3, [r7, #24]
 800e8f8:	015a      	lsls	r2, r3, #5
 800e8fa:	69fb      	ldr	r3, [r7, #28]
 800e8fc:	4413      	add	r3, r2
 800e8fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	69ba      	ldr	r2, [r7, #24]
 800e906:	0151      	lsls	r1, r2, #5
 800e908:	69fa      	ldr	r2, [r7, #28]
 800e90a:	440a      	add	r2, r1
 800e90c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e910:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800e914:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800e916:	68bb      	ldr	r3, [r7, #8]
 800e918:	791b      	ldrb	r3, [r3, #4]
 800e91a:	2b01      	cmp	r3, #1
 800e91c:	d015      	beq.n	800e94a <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800e91e:	68bb      	ldr	r3, [r7, #8]
 800e920:	691b      	ldr	r3, [r3, #16]
 800e922:	2b00      	cmp	r3, #0
 800e924:	f000 814e 	beq.w	800ebc4 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800e928:	69fb      	ldr	r3, [r7, #28]
 800e92a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e92e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e930:	68bb      	ldr	r3, [r7, #8]
 800e932:	781b      	ldrb	r3, [r3, #0]
 800e934:	f003 030f 	and.w	r3, r3, #15
 800e938:	2101      	movs	r1, #1
 800e93a:	fa01 f303 	lsl.w	r3, r1, r3
 800e93e:	69f9      	ldr	r1, [r7, #28]
 800e940:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e944:	4313      	orrs	r3, r2
 800e946:	634b      	str	r3, [r1, #52]	@ 0x34
 800e948:	e13c      	b.n	800ebc4 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e94a:	69fb      	ldr	r3, [r7, #28]
 800e94c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e950:	689b      	ldr	r3, [r3, #8]
 800e952:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e956:	2b00      	cmp	r3, #0
 800e958:	d110      	bne.n	800e97c <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e95a:	69bb      	ldr	r3, [r7, #24]
 800e95c:	015a      	lsls	r2, r3, #5
 800e95e:	69fb      	ldr	r3, [r7, #28]
 800e960:	4413      	add	r3, r2
 800e962:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	69ba      	ldr	r2, [r7, #24]
 800e96a:	0151      	lsls	r1, r2, #5
 800e96c:	69fa      	ldr	r2, [r7, #28]
 800e96e:	440a      	add	r2, r1
 800e970:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e974:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800e978:	6013      	str	r3, [r2, #0]
 800e97a:	e00f      	b.n	800e99c <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e97c:	69bb      	ldr	r3, [r7, #24]
 800e97e:	015a      	lsls	r2, r3, #5
 800e980:	69fb      	ldr	r3, [r7, #28]
 800e982:	4413      	add	r3, r2
 800e984:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	69ba      	ldr	r2, [r7, #24]
 800e98c:	0151      	lsls	r1, r2, #5
 800e98e:	69fa      	ldr	r2, [r7, #28]
 800e990:	440a      	add	r2, r1
 800e992:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e996:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e99a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800e99c:	68bb      	ldr	r3, [r7, #8]
 800e99e:	68d9      	ldr	r1, [r3, #12]
 800e9a0:	68bb      	ldr	r3, [r7, #8]
 800e9a2:	781a      	ldrb	r2, [r3, #0]
 800e9a4:	68bb      	ldr	r3, [r7, #8]
 800e9a6:	691b      	ldr	r3, [r3, #16]
 800e9a8:	b298      	uxth	r0, r3
 800e9aa:	79fb      	ldrb	r3, [r7, #7]
 800e9ac:	9300      	str	r3, [sp, #0]
 800e9ae:	4603      	mov	r3, r0
 800e9b0:	68f8      	ldr	r0, [r7, #12]
 800e9b2:	f000 f9b9 	bl	800ed28 <USB_WritePacket>
 800e9b6:	e105      	b.n	800ebc4 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800e9b8:	69bb      	ldr	r3, [r7, #24]
 800e9ba:	015a      	lsls	r2, r3, #5
 800e9bc:	69fb      	ldr	r3, [r7, #28]
 800e9be:	4413      	add	r3, r2
 800e9c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e9c4:	691b      	ldr	r3, [r3, #16]
 800e9c6:	69ba      	ldr	r2, [r7, #24]
 800e9c8:	0151      	lsls	r1, r2, #5
 800e9ca:	69fa      	ldr	r2, [r7, #28]
 800e9cc:	440a      	add	r2, r1
 800e9ce:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e9d2:	0cdb      	lsrs	r3, r3, #19
 800e9d4:	04db      	lsls	r3, r3, #19
 800e9d6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800e9d8:	69bb      	ldr	r3, [r7, #24]
 800e9da:	015a      	lsls	r2, r3, #5
 800e9dc:	69fb      	ldr	r3, [r7, #28]
 800e9de:	4413      	add	r3, r2
 800e9e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e9e4:	691b      	ldr	r3, [r3, #16]
 800e9e6:	69ba      	ldr	r2, [r7, #24]
 800e9e8:	0151      	lsls	r1, r2, #5
 800e9ea:	69fa      	ldr	r2, [r7, #28]
 800e9ec:	440a      	add	r2, r1
 800e9ee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e9f2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800e9f6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800e9fa:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800e9fc:	69bb      	ldr	r3, [r7, #24]
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d132      	bne.n	800ea68 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800ea02:	68bb      	ldr	r3, [r7, #8]
 800ea04:	691b      	ldr	r3, [r3, #16]
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d003      	beq.n	800ea12 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800ea0a:	68bb      	ldr	r3, [r7, #8]
 800ea0c:	689a      	ldr	r2, [r3, #8]
 800ea0e:	68bb      	ldr	r3, [r7, #8]
 800ea10:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800ea12:	68bb      	ldr	r3, [r7, #8]
 800ea14:	689a      	ldr	r2, [r3, #8]
 800ea16:	68bb      	ldr	r3, [r7, #8]
 800ea18:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800ea1a:	69bb      	ldr	r3, [r7, #24]
 800ea1c:	015a      	lsls	r2, r3, #5
 800ea1e:	69fb      	ldr	r3, [r7, #28]
 800ea20:	4413      	add	r3, r2
 800ea22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ea26:	691a      	ldr	r2, [r3, #16]
 800ea28:	68bb      	ldr	r3, [r7, #8]
 800ea2a:	6a1b      	ldr	r3, [r3, #32]
 800ea2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ea30:	69b9      	ldr	r1, [r7, #24]
 800ea32:	0148      	lsls	r0, r1, #5
 800ea34:	69f9      	ldr	r1, [r7, #28]
 800ea36:	4401      	add	r1, r0
 800ea38:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800ea3c:	4313      	orrs	r3, r2
 800ea3e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ea40:	69bb      	ldr	r3, [r7, #24]
 800ea42:	015a      	lsls	r2, r3, #5
 800ea44:	69fb      	ldr	r3, [r7, #28]
 800ea46:	4413      	add	r3, r2
 800ea48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ea4c:	691b      	ldr	r3, [r3, #16]
 800ea4e:	69ba      	ldr	r2, [r7, #24]
 800ea50:	0151      	lsls	r1, r2, #5
 800ea52:	69fa      	ldr	r2, [r7, #28]
 800ea54:	440a      	add	r2, r1
 800ea56:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ea5a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ea5e:	6113      	str	r3, [r2, #16]
 800ea60:	e062      	b.n	800eb28 <USB_EPStartXfer+0x490>
 800ea62:	bf00      	nop
 800ea64:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800ea68:	68bb      	ldr	r3, [r7, #8]
 800ea6a:	691b      	ldr	r3, [r3, #16]
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d123      	bne.n	800eab8 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800ea70:	69bb      	ldr	r3, [r7, #24]
 800ea72:	015a      	lsls	r2, r3, #5
 800ea74:	69fb      	ldr	r3, [r7, #28]
 800ea76:	4413      	add	r3, r2
 800ea78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ea7c:	691a      	ldr	r2, [r3, #16]
 800ea7e:	68bb      	ldr	r3, [r7, #8]
 800ea80:	689b      	ldr	r3, [r3, #8]
 800ea82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ea86:	69b9      	ldr	r1, [r7, #24]
 800ea88:	0148      	lsls	r0, r1, #5
 800ea8a:	69f9      	ldr	r1, [r7, #28]
 800ea8c:	4401      	add	r1, r0
 800ea8e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800ea92:	4313      	orrs	r3, r2
 800ea94:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ea96:	69bb      	ldr	r3, [r7, #24]
 800ea98:	015a      	lsls	r2, r3, #5
 800ea9a:	69fb      	ldr	r3, [r7, #28]
 800ea9c:	4413      	add	r3, r2
 800ea9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eaa2:	691b      	ldr	r3, [r3, #16]
 800eaa4:	69ba      	ldr	r2, [r7, #24]
 800eaa6:	0151      	lsls	r1, r2, #5
 800eaa8:	69fa      	ldr	r2, [r7, #28]
 800eaaa:	440a      	add	r2, r1
 800eaac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800eab0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800eab4:	6113      	str	r3, [r2, #16]
 800eab6:	e037      	b.n	800eb28 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800eab8:	68bb      	ldr	r3, [r7, #8]
 800eaba:	691a      	ldr	r2, [r3, #16]
 800eabc:	68bb      	ldr	r3, [r7, #8]
 800eabe:	689b      	ldr	r3, [r3, #8]
 800eac0:	4413      	add	r3, r2
 800eac2:	1e5a      	subs	r2, r3, #1
 800eac4:	68bb      	ldr	r3, [r7, #8]
 800eac6:	689b      	ldr	r3, [r3, #8]
 800eac8:	fbb2 f3f3 	udiv	r3, r2, r3
 800eacc:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800eace:	68bb      	ldr	r3, [r7, #8]
 800ead0:	689b      	ldr	r3, [r3, #8]
 800ead2:	8afa      	ldrh	r2, [r7, #22]
 800ead4:	fb03 f202 	mul.w	r2, r3, r2
 800ead8:	68bb      	ldr	r3, [r7, #8]
 800eada:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800eadc:	69bb      	ldr	r3, [r7, #24]
 800eade:	015a      	lsls	r2, r3, #5
 800eae0:	69fb      	ldr	r3, [r7, #28]
 800eae2:	4413      	add	r3, r2
 800eae4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eae8:	691a      	ldr	r2, [r3, #16]
 800eaea:	8afb      	ldrh	r3, [r7, #22]
 800eaec:	04d9      	lsls	r1, r3, #19
 800eaee:	4b38      	ldr	r3, [pc, #224]	@ (800ebd0 <USB_EPStartXfer+0x538>)
 800eaf0:	400b      	ands	r3, r1
 800eaf2:	69b9      	ldr	r1, [r7, #24]
 800eaf4:	0148      	lsls	r0, r1, #5
 800eaf6:	69f9      	ldr	r1, [r7, #28]
 800eaf8:	4401      	add	r1, r0
 800eafa:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800eafe:	4313      	orrs	r3, r2
 800eb00:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800eb02:	69bb      	ldr	r3, [r7, #24]
 800eb04:	015a      	lsls	r2, r3, #5
 800eb06:	69fb      	ldr	r3, [r7, #28]
 800eb08:	4413      	add	r3, r2
 800eb0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eb0e:	691a      	ldr	r2, [r3, #16]
 800eb10:	68bb      	ldr	r3, [r7, #8]
 800eb12:	6a1b      	ldr	r3, [r3, #32]
 800eb14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800eb18:	69b9      	ldr	r1, [r7, #24]
 800eb1a:	0148      	lsls	r0, r1, #5
 800eb1c:	69f9      	ldr	r1, [r7, #28]
 800eb1e:	4401      	add	r1, r0
 800eb20:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800eb24:	4313      	orrs	r3, r2
 800eb26:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800eb28:	79fb      	ldrb	r3, [r7, #7]
 800eb2a:	2b01      	cmp	r3, #1
 800eb2c:	d10d      	bne.n	800eb4a <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800eb2e:	68bb      	ldr	r3, [r7, #8]
 800eb30:	68db      	ldr	r3, [r3, #12]
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d009      	beq.n	800eb4a <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800eb36:	68bb      	ldr	r3, [r7, #8]
 800eb38:	68d9      	ldr	r1, [r3, #12]
 800eb3a:	69bb      	ldr	r3, [r7, #24]
 800eb3c:	015a      	lsls	r2, r3, #5
 800eb3e:	69fb      	ldr	r3, [r7, #28]
 800eb40:	4413      	add	r3, r2
 800eb42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eb46:	460a      	mov	r2, r1
 800eb48:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800eb4a:	68bb      	ldr	r3, [r7, #8]
 800eb4c:	791b      	ldrb	r3, [r3, #4]
 800eb4e:	2b01      	cmp	r3, #1
 800eb50:	d128      	bne.n	800eba4 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800eb52:	69fb      	ldr	r3, [r7, #28]
 800eb54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800eb58:	689b      	ldr	r3, [r3, #8]
 800eb5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d110      	bne.n	800eb84 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800eb62:	69bb      	ldr	r3, [r7, #24]
 800eb64:	015a      	lsls	r2, r3, #5
 800eb66:	69fb      	ldr	r3, [r7, #28]
 800eb68:	4413      	add	r3, r2
 800eb6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	69ba      	ldr	r2, [r7, #24]
 800eb72:	0151      	lsls	r1, r2, #5
 800eb74:	69fa      	ldr	r2, [r7, #28]
 800eb76:	440a      	add	r2, r1
 800eb78:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800eb7c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800eb80:	6013      	str	r3, [r2, #0]
 800eb82:	e00f      	b.n	800eba4 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800eb84:	69bb      	ldr	r3, [r7, #24]
 800eb86:	015a      	lsls	r2, r3, #5
 800eb88:	69fb      	ldr	r3, [r7, #28]
 800eb8a:	4413      	add	r3, r2
 800eb8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	69ba      	ldr	r2, [r7, #24]
 800eb94:	0151      	lsls	r1, r2, #5
 800eb96:	69fa      	ldr	r2, [r7, #28]
 800eb98:	440a      	add	r2, r1
 800eb9a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800eb9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800eba2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800eba4:	69bb      	ldr	r3, [r7, #24]
 800eba6:	015a      	lsls	r2, r3, #5
 800eba8:	69fb      	ldr	r3, [r7, #28]
 800ebaa:	4413      	add	r3, r2
 800ebac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	69ba      	ldr	r2, [r7, #24]
 800ebb4:	0151      	lsls	r1, r2, #5
 800ebb6:	69fa      	ldr	r2, [r7, #28]
 800ebb8:	440a      	add	r2, r1
 800ebba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ebbe:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800ebc2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ebc4:	2300      	movs	r3, #0
}
 800ebc6:	4618      	mov	r0, r3
 800ebc8:	3720      	adds	r7, #32
 800ebca:	46bd      	mov	sp, r7
 800ebcc:	bd80      	pop	{r7, pc}
 800ebce:	bf00      	nop
 800ebd0:	1ff80000 	.word	0x1ff80000

0800ebd4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ebd4:	b480      	push	{r7}
 800ebd6:	b087      	sub	sp, #28
 800ebd8:	af00      	add	r7, sp, #0
 800ebda:	6078      	str	r0, [r7, #4]
 800ebdc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ebde:	2300      	movs	r3, #0
 800ebe0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800ebe2:	2300      	movs	r3, #0
 800ebe4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ebea:	683b      	ldr	r3, [r7, #0]
 800ebec:	785b      	ldrb	r3, [r3, #1]
 800ebee:	2b01      	cmp	r3, #1
 800ebf0:	d14a      	bne.n	800ec88 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ebf2:	683b      	ldr	r3, [r7, #0]
 800ebf4:	781b      	ldrb	r3, [r3, #0]
 800ebf6:	015a      	lsls	r2, r3, #5
 800ebf8:	693b      	ldr	r3, [r7, #16]
 800ebfa:	4413      	add	r3, r2
 800ebfc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ec06:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ec0a:	f040 8086 	bne.w	800ed1a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800ec0e:	683b      	ldr	r3, [r7, #0]
 800ec10:	781b      	ldrb	r3, [r3, #0]
 800ec12:	015a      	lsls	r2, r3, #5
 800ec14:	693b      	ldr	r3, [r7, #16]
 800ec16:	4413      	add	r3, r2
 800ec18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	683a      	ldr	r2, [r7, #0]
 800ec20:	7812      	ldrb	r2, [r2, #0]
 800ec22:	0151      	lsls	r1, r2, #5
 800ec24:	693a      	ldr	r2, [r7, #16]
 800ec26:	440a      	add	r2, r1
 800ec28:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ec2c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ec30:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800ec32:	683b      	ldr	r3, [r7, #0]
 800ec34:	781b      	ldrb	r3, [r3, #0]
 800ec36:	015a      	lsls	r2, r3, #5
 800ec38:	693b      	ldr	r3, [r7, #16]
 800ec3a:	4413      	add	r3, r2
 800ec3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	683a      	ldr	r2, [r7, #0]
 800ec44:	7812      	ldrb	r2, [r2, #0]
 800ec46:	0151      	lsls	r1, r2, #5
 800ec48:	693a      	ldr	r2, [r7, #16]
 800ec4a:	440a      	add	r2, r1
 800ec4c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ec50:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ec54:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	3301      	adds	r3, #1
 800ec5a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	f242 7210 	movw	r2, #10000	@ 0x2710
 800ec62:	4293      	cmp	r3, r2
 800ec64:	d902      	bls.n	800ec6c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800ec66:	2301      	movs	r3, #1
 800ec68:	75fb      	strb	r3, [r7, #23]
          break;
 800ec6a:	e056      	b.n	800ed1a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800ec6c:	683b      	ldr	r3, [r7, #0]
 800ec6e:	781b      	ldrb	r3, [r3, #0]
 800ec70:	015a      	lsls	r2, r3, #5
 800ec72:	693b      	ldr	r3, [r7, #16]
 800ec74:	4413      	add	r3, r2
 800ec76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ec80:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ec84:	d0e7      	beq.n	800ec56 <USB_EPStopXfer+0x82>
 800ec86:	e048      	b.n	800ed1a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ec88:	683b      	ldr	r3, [r7, #0]
 800ec8a:	781b      	ldrb	r3, [r3, #0]
 800ec8c:	015a      	lsls	r2, r3, #5
 800ec8e:	693b      	ldr	r3, [r7, #16]
 800ec90:	4413      	add	r3, r2
 800ec92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ec9c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800eca0:	d13b      	bne.n	800ed1a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800eca2:	683b      	ldr	r3, [r7, #0]
 800eca4:	781b      	ldrb	r3, [r3, #0]
 800eca6:	015a      	lsls	r2, r3, #5
 800eca8:	693b      	ldr	r3, [r7, #16]
 800ecaa:	4413      	add	r3, r2
 800ecac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	683a      	ldr	r2, [r7, #0]
 800ecb4:	7812      	ldrb	r2, [r2, #0]
 800ecb6:	0151      	lsls	r1, r2, #5
 800ecb8:	693a      	ldr	r2, [r7, #16]
 800ecba:	440a      	add	r2, r1
 800ecbc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ecc0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ecc4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800ecc6:	683b      	ldr	r3, [r7, #0]
 800ecc8:	781b      	ldrb	r3, [r3, #0]
 800ecca:	015a      	lsls	r2, r3, #5
 800eccc:	693b      	ldr	r3, [r7, #16]
 800ecce:	4413      	add	r3, r2
 800ecd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	683a      	ldr	r2, [r7, #0]
 800ecd8:	7812      	ldrb	r2, [r2, #0]
 800ecda:	0151      	lsls	r1, r2, #5
 800ecdc:	693a      	ldr	r2, [r7, #16]
 800ecde:	440a      	add	r2, r1
 800ece0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ece4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ece8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	3301      	adds	r3, #1
 800ecee:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	f242 7210 	movw	r2, #10000	@ 0x2710
 800ecf6:	4293      	cmp	r3, r2
 800ecf8:	d902      	bls.n	800ed00 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800ecfa:	2301      	movs	r3, #1
 800ecfc:	75fb      	strb	r3, [r7, #23]
          break;
 800ecfe:	e00c      	b.n	800ed1a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800ed00:	683b      	ldr	r3, [r7, #0]
 800ed02:	781b      	ldrb	r3, [r3, #0]
 800ed04:	015a      	lsls	r2, r3, #5
 800ed06:	693b      	ldr	r3, [r7, #16]
 800ed08:	4413      	add	r3, r2
 800ed0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ed14:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ed18:	d0e7      	beq.n	800ecea <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800ed1a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ed1c:	4618      	mov	r0, r3
 800ed1e:	371c      	adds	r7, #28
 800ed20:	46bd      	mov	sp, r7
 800ed22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed26:	4770      	bx	lr

0800ed28 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800ed28:	b480      	push	{r7}
 800ed2a:	b089      	sub	sp, #36	@ 0x24
 800ed2c:	af00      	add	r7, sp, #0
 800ed2e:	60f8      	str	r0, [r7, #12]
 800ed30:	60b9      	str	r1, [r7, #8]
 800ed32:	4611      	mov	r1, r2
 800ed34:	461a      	mov	r2, r3
 800ed36:	460b      	mov	r3, r1
 800ed38:	71fb      	strb	r3, [r7, #7]
 800ed3a:	4613      	mov	r3, r2
 800ed3c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800ed42:	68bb      	ldr	r3, [r7, #8]
 800ed44:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800ed46:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d123      	bne.n	800ed96 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800ed4e:	88bb      	ldrh	r3, [r7, #4]
 800ed50:	3303      	adds	r3, #3
 800ed52:	089b      	lsrs	r3, r3, #2
 800ed54:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800ed56:	2300      	movs	r3, #0
 800ed58:	61bb      	str	r3, [r7, #24]
 800ed5a:	e018      	b.n	800ed8e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800ed5c:	79fb      	ldrb	r3, [r7, #7]
 800ed5e:	031a      	lsls	r2, r3, #12
 800ed60:	697b      	ldr	r3, [r7, #20]
 800ed62:	4413      	add	r3, r2
 800ed64:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ed68:	461a      	mov	r2, r3
 800ed6a:	69fb      	ldr	r3, [r7, #28]
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800ed70:	69fb      	ldr	r3, [r7, #28]
 800ed72:	3301      	adds	r3, #1
 800ed74:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ed76:	69fb      	ldr	r3, [r7, #28]
 800ed78:	3301      	adds	r3, #1
 800ed7a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ed7c:	69fb      	ldr	r3, [r7, #28]
 800ed7e:	3301      	adds	r3, #1
 800ed80:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ed82:	69fb      	ldr	r3, [r7, #28]
 800ed84:	3301      	adds	r3, #1
 800ed86:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800ed88:	69bb      	ldr	r3, [r7, #24]
 800ed8a:	3301      	adds	r3, #1
 800ed8c:	61bb      	str	r3, [r7, #24]
 800ed8e:	69ba      	ldr	r2, [r7, #24]
 800ed90:	693b      	ldr	r3, [r7, #16]
 800ed92:	429a      	cmp	r2, r3
 800ed94:	d3e2      	bcc.n	800ed5c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800ed96:	2300      	movs	r3, #0
}
 800ed98:	4618      	mov	r0, r3
 800ed9a:	3724      	adds	r7, #36	@ 0x24
 800ed9c:	46bd      	mov	sp, r7
 800ed9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eda2:	4770      	bx	lr

0800eda4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800eda4:	b480      	push	{r7}
 800eda6:	b08b      	sub	sp, #44	@ 0x2c
 800eda8:	af00      	add	r7, sp, #0
 800edaa:	60f8      	str	r0, [r7, #12]
 800edac:	60b9      	str	r1, [r7, #8]
 800edae:	4613      	mov	r3, r2
 800edb0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800edb6:	68bb      	ldr	r3, [r7, #8]
 800edb8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800edba:	88fb      	ldrh	r3, [r7, #6]
 800edbc:	089b      	lsrs	r3, r3, #2
 800edbe:	b29b      	uxth	r3, r3
 800edc0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800edc2:	88fb      	ldrh	r3, [r7, #6]
 800edc4:	f003 0303 	and.w	r3, r3, #3
 800edc8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800edca:	2300      	movs	r3, #0
 800edcc:	623b      	str	r3, [r7, #32]
 800edce:	e014      	b.n	800edfa <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800edd0:	69bb      	ldr	r3, [r7, #24]
 800edd2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800edd6:	681a      	ldr	r2, [r3, #0]
 800edd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800edda:	601a      	str	r2, [r3, #0]
    pDest++;
 800eddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800edde:	3301      	adds	r3, #1
 800ede0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800ede2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ede4:	3301      	adds	r3, #1
 800ede6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800ede8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800edea:	3301      	adds	r3, #1
 800edec:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800edee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800edf0:	3301      	adds	r3, #1
 800edf2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800edf4:	6a3b      	ldr	r3, [r7, #32]
 800edf6:	3301      	adds	r3, #1
 800edf8:	623b      	str	r3, [r7, #32]
 800edfa:	6a3a      	ldr	r2, [r7, #32]
 800edfc:	697b      	ldr	r3, [r7, #20]
 800edfe:	429a      	cmp	r2, r3
 800ee00:	d3e6      	bcc.n	800edd0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800ee02:	8bfb      	ldrh	r3, [r7, #30]
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d01e      	beq.n	800ee46 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800ee08:	2300      	movs	r3, #0
 800ee0a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800ee0c:	69bb      	ldr	r3, [r7, #24]
 800ee0e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ee12:	461a      	mov	r2, r3
 800ee14:	f107 0310 	add.w	r3, r7, #16
 800ee18:	6812      	ldr	r2, [r2, #0]
 800ee1a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800ee1c:	693a      	ldr	r2, [r7, #16]
 800ee1e:	6a3b      	ldr	r3, [r7, #32]
 800ee20:	b2db      	uxtb	r3, r3
 800ee22:	00db      	lsls	r3, r3, #3
 800ee24:	fa22 f303 	lsr.w	r3, r2, r3
 800ee28:	b2da      	uxtb	r2, r3
 800ee2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee2c:	701a      	strb	r2, [r3, #0]
      i++;
 800ee2e:	6a3b      	ldr	r3, [r7, #32]
 800ee30:	3301      	adds	r3, #1
 800ee32:	623b      	str	r3, [r7, #32]
      pDest++;
 800ee34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee36:	3301      	adds	r3, #1
 800ee38:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800ee3a:	8bfb      	ldrh	r3, [r7, #30]
 800ee3c:	3b01      	subs	r3, #1
 800ee3e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800ee40:	8bfb      	ldrh	r3, [r7, #30]
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d1ea      	bne.n	800ee1c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800ee46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ee48:	4618      	mov	r0, r3
 800ee4a:	372c      	adds	r7, #44	@ 0x2c
 800ee4c:	46bd      	mov	sp, r7
 800ee4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee52:	4770      	bx	lr

0800ee54 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800ee54:	b480      	push	{r7}
 800ee56:	b085      	sub	sp, #20
 800ee58:	af00      	add	r7, sp, #0
 800ee5a:	6078      	str	r0, [r7, #4]
 800ee5c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ee62:	683b      	ldr	r3, [r7, #0]
 800ee64:	781b      	ldrb	r3, [r3, #0]
 800ee66:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ee68:	683b      	ldr	r3, [r7, #0]
 800ee6a:	785b      	ldrb	r3, [r3, #1]
 800ee6c:	2b01      	cmp	r3, #1
 800ee6e:	d12c      	bne.n	800eeca <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ee70:	68bb      	ldr	r3, [r7, #8]
 800ee72:	015a      	lsls	r2, r3, #5
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	4413      	add	r3, r2
 800ee78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	db12      	blt.n	800eea8 <USB_EPSetStall+0x54>
 800ee82:	68bb      	ldr	r3, [r7, #8]
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d00f      	beq.n	800eea8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800ee88:	68bb      	ldr	r3, [r7, #8]
 800ee8a:	015a      	lsls	r2, r3, #5
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	4413      	add	r3, r2
 800ee90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	68ba      	ldr	r2, [r7, #8]
 800ee98:	0151      	lsls	r1, r2, #5
 800ee9a:	68fa      	ldr	r2, [r7, #12]
 800ee9c:	440a      	add	r2, r1
 800ee9e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800eea2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800eea6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800eea8:	68bb      	ldr	r3, [r7, #8]
 800eeaa:	015a      	lsls	r2, r3, #5
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	4413      	add	r3, r2
 800eeb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	68ba      	ldr	r2, [r7, #8]
 800eeb8:	0151      	lsls	r1, r2, #5
 800eeba:	68fa      	ldr	r2, [r7, #12]
 800eebc:	440a      	add	r2, r1
 800eebe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800eec2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800eec6:	6013      	str	r3, [r2, #0]
 800eec8:	e02b      	b.n	800ef22 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800eeca:	68bb      	ldr	r3, [r7, #8]
 800eecc:	015a      	lsls	r2, r3, #5
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	4413      	add	r3, r2
 800eed2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	db12      	blt.n	800ef02 <USB_EPSetStall+0xae>
 800eedc:	68bb      	ldr	r3, [r7, #8]
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d00f      	beq.n	800ef02 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800eee2:	68bb      	ldr	r3, [r7, #8]
 800eee4:	015a      	lsls	r2, r3, #5
 800eee6:	68fb      	ldr	r3, [r7, #12]
 800eee8:	4413      	add	r3, r2
 800eeea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	68ba      	ldr	r2, [r7, #8]
 800eef2:	0151      	lsls	r1, r2, #5
 800eef4:	68fa      	ldr	r2, [r7, #12]
 800eef6:	440a      	add	r2, r1
 800eef8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800eefc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800ef00:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800ef02:	68bb      	ldr	r3, [r7, #8]
 800ef04:	015a      	lsls	r2, r3, #5
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	4413      	add	r3, r2
 800ef0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	68ba      	ldr	r2, [r7, #8]
 800ef12:	0151      	lsls	r1, r2, #5
 800ef14:	68fa      	ldr	r2, [r7, #12]
 800ef16:	440a      	add	r2, r1
 800ef18:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ef1c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800ef20:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ef22:	2300      	movs	r3, #0
}
 800ef24:	4618      	mov	r0, r3
 800ef26:	3714      	adds	r7, #20
 800ef28:	46bd      	mov	sp, r7
 800ef2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef2e:	4770      	bx	lr

0800ef30 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800ef30:	b480      	push	{r7}
 800ef32:	b085      	sub	sp, #20
 800ef34:	af00      	add	r7, sp, #0
 800ef36:	6078      	str	r0, [r7, #4]
 800ef38:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ef3e:	683b      	ldr	r3, [r7, #0]
 800ef40:	781b      	ldrb	r3, [r3, #0]
 800ef42:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ef44:	683b      	ldr	r3, [r7, #0]
 800ef46:	785b      	ldrb	r3, [r3, #1]
 800ef48:	2b01      	cmp	r3, #1
 800ef4a:	d128      	bne.n	800ef9e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800ef4c:	68bb      	ldr	r3, [r7, #8]
 800ef4e:	015a      	lsls	r2, r3, #5
 800ef50:	68fb      	ldr	r3, [r7, #12]
 800ef52:	4413      	add	r3, r2
 800ef54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	68ba      	ldr	r2, [r7, #8]
 800ef5c:	0151      	lsls	r1, r2, #5
 800ef5e:	68fa      	ldr	r2, [r7, #12]
 800ef60:	440a      	add	r2, r1
 800ef62:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ef66:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ef6a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ef6c:	683b      	ldr	r3, [r7, #0]
 800ef6e:	791b      	ldrb	r3, [r3, #4]
 800ef70:	2b03      	cmp	r3, #3
 800ef72:	d003      	beq.n	800ef7c <USB_EPClearStall+0x4c>
 800ef74:	683b      	ldr	r3, [r7, #0]
 800ef76:	791b      	ldrb	r3, [r3, #4]
 800ef78:	2b02      	cmp	r3, #2
 800ef7a:	d138      	bne.n	800efee <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ef7c:	68bb      	ldr	r3, [r7, #8]
 800ef7e:	015a      	lsls	r2, r3, #5
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	4413      	add	r3, r2
 800ef84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	68ba      	ldr	r2, [r7, #8]
 800ef8c:	0151      	lsls	r1, r2, #5
 800ef8e:	68fa      	ldr	r2, [r7, #12]
 800ef90:	440a      	add	r2, r1
 800ef92:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ef96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ef9a:	6013      	str	r3, [r2, #0]
 800ef9c:	e027      	b.n	800efee <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800ef9e:	68bb      	ldr	r3, [r7, #8]
 800efa0:	015a      	lsls	r2, r3, #5
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	4413      	add	r3, r2
 800efa6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	68ba      	ldr	r2, [r7, #8]
 800efae:	0151      	lsls	r1, r2, #5
 800efb0:	68fa      	ldr	r2, [r7, #12]
 800efb2:	440a      	add	r2, r1
 800efb4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800efb8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800efbc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800efbe:	683b      	ldr	r3, [r7, #0]
 800efc0:	791b      	ldrb	r3, [r3, #4]
 800efc2:	2b03      	cmp	r3, #3
 800efc4:	d003      	beq.n	800efce <USB_EPClearStall+0x9e>
 800efc6:	683b      	ldr	r3, [r7, #0]
 800efc8:	791b      	ldrb	r3, [r3, #4]
 800efca:	2b02      	cmp	r3, #2
 800efcc:	d10f      	bne.n	800efee <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800efce:	68bb      	ldr	r3, [r7, #8]
 800efd0:	015a      	lsls	r2, r3, #5
 800efd2:	68fb      	ldr	r3, [r7, #12]
 800efd4:	4413      	add	r3, r2
 800efd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	68ba      	ldr	r2, [r7, #8]
 800efde:	0151      	lsls	r1, r2, #5
 800efe0:	68fa      	ldr	r2, [r7, #12]
 800efe2:	440a      	add	r2, r1
 800efe4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800efe8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800efec:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800efee:	2300      	movs	r3, #0
}
 800eff0:	4618      	mov	r0, r3
 800eff2:	3714      	adds	r7, #20
 800eff4:	46bd      	mov	sp, r7
 800eff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800effa:	4770      	bx	lr

0800effc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800effc:	b480      	push	{r7}
 800effe:	b085      	sub	sp, #20
 800f000:	af00      	add	r7, sp, #0
 800f002:	6078      	str	r0, [r7, #4]
 800f004:	460b      	mov	r3, r1
 800f006:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800f00c:	68fb      	ldr	r3, [r7, #12]
 800f00e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	68fa      	ldr	r2, [r7, #12]
 800f016:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f01a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800f01e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f026:	681a      	ldr	r2, [r3, #0]
 800f028:	78fb      	ldrb	r3, [r7, #3]
 800f02a:	011b      	lsls	r3, r3, #4
 800f02c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800f030:	68f9      	ldr	r1, [r7, #12]
 800f032:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800f036:	4313      	orrs	r3, r2
 800f038:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800f03a:	2300      	movs	r3, #0
}
 800f03c:	4618      	mov	r0, r3
 800f03e:	3714      	adds	r7, #20
 800f040:	46bd      	mov	sp, r7
 800f042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f046:	4770      	bx	lr

0800f048 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800f048:	b480      	push	{r7}
 800f04a:	b085      	sub	sp, #20
 800f04c:	af00      	add	r7, sp, #0
 800f04e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	68fa      	ldr	r2, [r7, #12]
 800f05e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800f062:	f023 0303 	bic.w	r3, r3, #3
 800f066:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f06e:	685b      	ldr	r3, [r3, #4]
 800f070:	68fa      	ldr	r2, [r7, #12]
 800f072:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f076:	f023 0302 	bic.w	r3, r3, #2
 800f07a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f07c:	2300      	movs	r3, #0
}
 800f07e:	4618      	mov	r0, r3
 800f080:	3714      	adds	r7, #20
 800f082:	46bd      	mov	sp, r7
 800f084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f088:	4770      	bx	lr

0800f08a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800f08a:	b480      	push	{r7}
 800f08c:	b085      	sub	sp, #20
 800f08e:	af00      	add	r7, sp, #0
 800f090:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	68fa      	ldr	r2, [r7, #12]
 800f0a0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800f0a4:	f023 0303 	bic.w	r3, r3, #3
 800f0a8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f0b0:	685b      	ldr	r3, [r3, #4]
 800f0b2:	68fa      	ldr	r2, [r7, #12]
 800f0b4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f0b8:	f043 0302 	orr.w	r3, r3, #2
 800f0bc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f0be:	2300      	movs	r3, #0
}
 800f0c0:	4618      	mov	r0, r3
 800f0c2:	3714      	adds	r7, #20
 800f0c4:	46bd      	mov	sp, r7
 800f0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ca:	4770      	bx	lr

0800f0cc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800f0cc:	b480      	push	{r7}
 800f0ce:	b085      	sub	sp, #20
 800f0d0:	af00      	add	r7, sp, #0
 800f0d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	695b      	ldr	r3, [r3, #20]
 800f0d8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	699b      	ldr	r3, [r3, #24]
 800f0de:	68fa      	ldr	r2, [r7, #12]
 800f0e0:	4013      	ands	r3, r2
 800f0e2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800f0e4:	68fb      	ldr	r3, [r7, #12]
}
 800f0e6:	4618      	mov	r0, r3
 800f0e8:	3714      	adds	r7, #20
 800f0ea:	46bd      	mov	sp, r7
 800f0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0f0:	4770      	bx	lr

0800f0f2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800f0f2:	b480      	push	{r7}
 800f0f4:	b085      	sub	sp, #20
 800f0f6:	af00      	add	r7, sp, #0
 800f0f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f104:	699b      	ldr	r3, [r3, #24]
 800f106:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f108:	68fb      	ldr	r3, [r7, #12]
 800f10a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f10e:	69db      	ldr	r3, [r3, #28]
 800f110:	68ba      	ldr	r2, [r7, #8]
 800f112:	4013      	ands	r3, r2
 800f114:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800f116:	68bb      	ldr	r3, [r7, #8]
 800f118:	0c1b      	lsrs	r3, r3, #16
}
 800f11a:	4618      	mov	r0, r3
 800f11c:	3714      	adds	r7, #20
 800f11e:	46bd      	mov	sp, r7
 800f120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f124:	4770      	bx	lr

0800f126 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800f126:	b480      	push	{r7}
 800f128:	b085      	sub	sp, #20
 800f12a:	af00      	add	r7, sp, #0
 800f12c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f138:	699b      	ldr	r3, [r3, #24]
 800f13a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f142:	69db      	ldr	r3, [r3, #28]
 800f144:	68ba      	ldr	r2, [r7, #8]
 800f146:	4013      	ands	r3, r2
 800f148:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800f14a:	68bb      	ldr	r3, [r7, #8]
 800f14c:	b29b      	uxth	r3, r3
}
 800f14e:	4618      	mov	r0, r3
 800f150:	3714      	adds	r7, #20
 800f152:	46bd      	mov	sp, r7
 800f154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f158:	4770      	bx	lr

0800f15a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800f15a:	b480      	push	{r7}
 800f15c:	b085      	sub	sp, #20
 800f15e:	af00      	add	r7, sp, #0
 800f160:	6078      	str	r0, [r7, #4]
 800f162:	460b      	mov	r3, r1
 800f164:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800f16a:	78fb      	ldrb	r3, [r7, #3]
 800f16c:	015a      	lsls	r2, r3, #5
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	4413      	add	r3, r2
 800f172:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f176:	689b      	ldr	r3, [r3, #8]
 800f178:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f180:	695b      	ldr	r3, [r3, #20]
 800f182:	68ba      	ldr	r2, [r7, #8]
 800f184:	4013      	ands	r3, r2
 800f186:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800f188:	68bb      	ldr	r3, [r7, #8]
}
 800f18a:	4618      	mov	r0, r3
 800f18c:	3714      	adds	r7, #20
 800f18e:	46bd      	mov	sp, r7
 800f190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f194:	4770      	bx	lr

0800f196 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800f196:	b480      	push	{r7}
 800f198:	b087      	sub	sp, #28
 800f19a:	af00      	add	r7, sp, #0
 800f19c:	6078      	str	r0, [r7, #4]
 800f19e:	460b      	mov	r3, r1
 800f1a0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800f1a6:	697b      	ldr	r3, [r7, #20]
 800f1a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f1ac:	691b      	ldr	r3, [r3, #16]
 800f1ae:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800f1b0:	697b      	ldr	r3, [r7, #20]
 800f1b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f1b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f1b8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800f1ba:	78fb      	ldrb	r3, [r7, #3]
 800f1bc:	f003 030f 	and.w	r3, r3, #15
 800f1c0:	68fa      	ldr	r2, [r7, #12]
 800f1c2:	fa22 f303 	lsr.w	r3, r2, r3
 800f1c6:	01db      	lsls	r3, r3, #7
 800f1c8:	b2db      	uxtb	r3, r3
 800f1ca:	693a      	ldr	r2, [r7, #16]
 800f1cc:	4313      	orrs	r3, r2
 800f1ce:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800f1d0:	78fb      	ldrb	r3, [r7, #3]
 800f1d2:	015a      	lsls	r2, r3, #5
 800f1d4:	697b      	ldr	r3, [r7, #20]
 800f1d6:	4413      	add	r3, r2
 800f1d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f1dc:	689b      	ldr	r3, [r3, #8]
 800f1de:	693a      	ldr	r2, [r7, #16]
 800f1e0:	4013      	ands	r3, r2
 800f1e2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800f1e4:	68bb      	ldr	r3, [r7, #8]
}
 800f1e6:	4618      	mov	r0, r3
 800f1e8:	371c      	adds	r7, #28
 800f1ea:	46bd      	mov	sp, r7
 800f1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1f0:	4770      	bx	lr

0800f1f2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800f1f2:	b480      	push	{r7}
 800f1f4:	b083      	sub	sp, #12
 800f1f6:	af00      	add	r7, sp, #0
 800f1f8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	695b      	ldr	r3, [r3, #20]
 800f1fe:	f003 0301 	and.w	r3, r3, #1
}
 800f202:	4618      	mov	r0, r3
 800f204:	370c      	adds	r7, #12
 800f206:	46bd      	mov	sp, r7
 800f208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f20c:	4770      	bx	lr

0800f20e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800f20e:	b480      	push	{r7}
 800f210:	b085      	sub	sp, #20
 800f212:	af00      	add	r7, sp, #0
 800f214:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	68fa      	ldr	r2, [r7, #12]
 800f224:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f228:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800f22c:	f023 0307 	bic.w	r3, r3, #7
 800f230:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f238:	685b      	ldr	r3, [r3, #4]
 800f23a:	68fa      	ldr	r2, [r7, #12]
 800f23c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f240:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f244:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f246:	2300      	movs	r3, #0
}
 800f248:	4618      	mov	r0, r3
 800f24a:	3714      	adds	r7, #20
 800f24c:	46bd      	mov	sp, r7
 800f24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f252:	4770      	bx	lr

0800f254 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800f254:	b480      	push	{r7}
 800f256:	b087      	sub	sp, #28
 800f258:	af00      	add	r7, sp, #0
 800f25a:	60f8      	str	r0, [r7, #12]
 800f25c:	460b      	mov	r3, r1
 800f25e:	607a      	str	r2, [r7, #4]
 800f260:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f262:	68fb      	ldr	r3, [r7, #12]
 800f264:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	333c      	adds	r3, #60	@ 0x3c
 800f26a:	3304      	adds	r3, #4
 800f26c:	681b      	ldr	r3, [r3, #0]
 800f26e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800f270:	693b      	ldr	r3, [r7, #16]
 800f272:	4a26      	ldr	r2, [pc, #152]	@ (800f30c <USB_EP0_OutStart+0xb8>)
 800f274:	4293      	cmp	r3, r2
 800f276:	d90a      	bls.n	800f28e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f278:	697b      	ldr	r3, [r7, #20]
 800f27a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f284:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f288:	d101      	bne.n	800f28e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800f28a:	2300      	movs	r3, #0
 800f28c:	e037      	b.n	800f2fe <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800f28e:	697b      	ldr	r3, [r7, #20]
 800f290:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f294:	461a      	mov	r2, r3
 800f296:	2300      	movs	r3, #0
 800f298:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f29a:	697b      	ldr	r3, [r7, #20]
 800f29c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f2a0:	691b      	ldr	r3, [r3, #16]
 800f2a2:	697a      	ldr	r2, [r7, #20]
 800f2a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f2a8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800f2ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800f2ae:	697b      	ldr	r3, [r7, #20]
 800f2b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f2b4:	691b      	ldr	r3, [r3, #16]
 800f2b6:	697a      	ldr	r2, [r7, #20]
 800f2b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f2bc:	f043 0318 	orr.w	r3, r3, #24
 800f2c0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800f2c2:	697b      	ldr	r3, [r7, #20]
 800f2c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f2c8:	691b      	ldr	r3, [r3, #16]
 800f2ca:	697a      	ldr	r2, [r7, #20]
 800f2cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f2d0:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800f2d4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800f2d6:	7afb      	ldrb	r3, [r7, #11]
 800f2d8:	2b01      	cmp	r3, #1
 800f2da:	d10f      	bne.n	800f2fc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800f2dc:	697b      	ldr	r3, [r7, #20]
 800f2de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f2e2:	461a      	mov	r2, r3
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800f2e8:	697b      	ldr	r3, [r7, #20]
 800f2ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	697a      	ldr	r2, [r7, #20]
 800f2f2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f2f6:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800f2fa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f2fc:	2300      	movs	r3, #0
}
 800f2fe:	4618      	mov	r0, r3
 800f300:	371c      	adds	r7, #28
 800f302:	46bd      	mov	sp, r7
 800f304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f308:	4770      	bx	lr
 800f30a:	bf00      	nop
 800f30c:	4f54300a 	.word	0x4f54300a

0800f310 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800f310:	b480      	push	{r7}
 800f312:	b085      	sub	sp, #20
 800f314:	af00      	add	r7, sp, #0
 800f316:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f318:	2300      	movs	r3, #0
 800f31a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	3301      	adds	r3, #1
 800f320:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800f322:	68fb      	ldr	r3, [r7, #12]
 800f324:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800f328:	d901      	bls.n	800f32e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800f32a:	2303      	movs	r3, #3
 800f32c:	e01b      	b.n	800f366 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	691b      	ldr	r3, [r3, #16]
 800f332:	2b00      	cmp	r3, #0
 800f334:	daf2      	bge.n	800f31c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800f336:	2300      	movs	r3, #0
 800f338:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	691b      	ldr	r3, [r3, #16]
 800f33e:	f043 0201 	orr.w	r2, r3, #1
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800f346:	68fb      	ldr	r3, [r7, #12]
 800f348:	3301      	adds	r3, #1
 800f34a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800f352:	d901      	bls.n	800f358 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800f354:	2303      	movs	r3, #3
 800f356:	e006      	b.n	800f366 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	691b      	ldr	r3, [r3, #16]
 800f35c:	f003 0301 	and.w	r3, r3, #1
 800f360:	2b01      	cmp	r3, #1
 800f362:	d0f0      	beq.n	800f346 <USB_CoreReset+0x36>

  return HAL_OK;
 800f364:	2300      	movs	r3, #0
}
 800f366:	4618      	mov	r0, r3
 800f368:	3714      	adds	r7, #20
 800f36a:	46bd      	mov	sp, r7
 800f36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f370:	4770      	bx	lr
	...

0800f374 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f374:	b580      	push	{r7, lr}
 800f376:	b084      	sub	sp, #16
 800f378:	af00      	add	r7, sp, #0
 800f37a:	6078      	str	r0, [r7, #4]
 800f37c:	460b      	mov	r3, r1
 800f37e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800f380:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800f384:	f002 fd00 	bl	8011d88 <USBD_static_malloc>
 800f388:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800f38a:	68fb      	ldr	r3, [r7, #12]
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d109      	bne.n	800f3a4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	32b0      	adds	r2, #176	@ 0xb0
 800f39a:	2100      	movs	r1, #0
 800f39c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800f3a0:	2302      	movs	r3, #2
 800f3a2:	e0d4      	b.n	800f54e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800f3a4:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800f3a8:	2100      	movs	r1, #0
 800f3aa:	68f8      	ldr	r0, [r7, #12]
 800f3ac:	f002 fdae 	bl	8011f0c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	32b0      	adds	r2, #176	@ 0xb0
 800f3ba:	68f9      	ldr	r1, [r7, #12]
 800f3bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	32b0      	adds	r2, #176	@ 0xb0
 800f3ca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	7c1b      	ldrb	r3, [r3, #16]
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d138      	bne.n	800f44e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800f3dc:	4b5e      	ldr	r3, [pc, #376]	@ (800f558 <USBD_CDC_Init+0x1e4>)
 800f3de:	7819      	ldrb	r1, [r3, #0]
 800f3e0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f3e4:	2202      	movs	r2, #2
 800f3e6:	6878      	ldr	r0, [r7, #4]
 800f3e8:	f002 fbab 	bl	8011b42 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800f3ec:	4b5a      	ldr	r3, [pc, #360]	@ (800f558 <USBD_CDC_Init+0x1e4>)
 800f3ee:	781b      	ldrb	r3, [r3, #0]
 800f3f0:	f003 020f 	and.w	r2, r3, #15
 800f3f4:	6879      	ldr	r1, [r7, #4]
 800f3f6:	4613      	mov	r3, r2
 800f3f8:	009b      	lsls	r3, r3, #2
 800f3fa:	4413      	add	r3, r2
 800f3fc:	009b      	lsls	r3, r3, #2
 800f3fe:	440b      	add	r3, r1
 800f400:	3324      	adds	r3, #36	@ 0x24
 800f402:	2201      	movs	r2, #1
 800f404:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800f406:	4b55      	ldr	r3, [pc, #340]	@ (800f55c <USBD_CDC_Init+0x1e8>)
 800f408:	7819      	ldrb	r1, [r3, #0]
 800f40a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f40e:	2202      	movs	r2, #2
 800f410:	6878      	ldr	r0, [r7, #4]
 800f412:	f002 fb96 	bl	8011b42 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800f416:	4b51      	ldr	r3, [pc, #324]	@ (800f55c <USBD_CDC_Init+0x1e8>)
 800f418:	781b      	ldrb	r3, [r3, #0]
 800f41a:	f003 020f 	and.w	r2, r3, #15
 800f41e:	6879      	ldr	r1, [r7, #4]
 800f420:	4613      	mov	r3, r2
 800f422:	009b      	lsls	r3, r3, #2
 800f424:	4413      	add	r3, r2
 800f426:	009b      	lsls	r3, r3, #2
 800f428:	440b      	add	r3, r1
 800f42a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f42e:	2201      	movs	r2, #1
 800f430:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800f432:	4b4b      	ldr	r3, [pc, #300]	@ (800f560 <USBD_CDC_Init+0x1ec>)
 800f434:	781b      	ldrb	r3, [r3, #0]
 800f436:	f003 020f 	and.w	r2, r3, #15
 800f43a:	6879      	ldr	r1, [r7, #4]
 800f43c:	4613      	mov	r3, r2
 800f43e:	009b      	lsls	r3, r3, #2
 800f440:	4413      	add	r3, r2
 800f442:	009b      	lsls	r3, r3, #2
 800f444:	440b      	add	r3, r1
 800f446:	3326      	adds	r3, #38	@ 0x26
 800f448:	2210      	movs	r2, #16
 800f44a:	801a      	strh	r2, [r3, #0]
 800f44c:	e035      	b.n	800f4ba <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800f44e:	4b42      	ldr	r3, [pc, #264]	@ (800f558 <USBD_CDC_Init+0x1e4>)
 800f450:	7819      	ldrb	r1, [r3, #0]
 800f452:	2340      	movs	r3, #64	@ 0x40
 800f454:	2202      	movs	r2, #2
 800f456:	6878      	ldr	r0, [r7, #4]
 800f458:	f002 fb73 	bl	8011b42 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800f45c:	4b3e      	ldr	r3, [pc, #248]	@ (800f558 <USBD_CDC_Init+0x1e4>)
 800f45e:	781b      	ldrb	r3, [r3, #0]
 800f460:	f003 020f 	and.w	r2, r3, #15
 800f464:	6879      	ldr	r1, [r7, #4]
 800f466:	4613      	mov	r3, r2
 800f468:	009b      	lsls	r3, r3, #2
 800f46a:	4413      	add	r3, r2
 800f46c:	009b      	lsls	r3, r3, #2
 800f46e:	440b      	add	r3, r1
 800f470:	3324      	adds	r3, #36	@ 0x24
 800f472:	2201      	movs	r2, #1
 800f474:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800f476:	4b39      	ldr	r3, [pc, #228]	@ (800f55c <USBD_CDC_Init+0x1e8>)
 800f478:	7819      	ldrb	r1, [r3, #0]
 800f47a:	2340      	movs	r3, #64	@ 0x40
 800f47c:	2202      	movs	r2, #2
 800f47e:	6878      	ldr	r0, [r7, #4]
 800f480:	f002 fb5f 	bl	8011b42 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800f484:	4b35      	ldr	r3, [pc, #212]	@ (800f55c <USBD_CDC_Init+0x1e8>)
 800f486:	781b      	ldrb	r3, [r3, #0]
 800f488:	f003 020f 	and.w	r2, r3, #15
 800f48c:	6879      	ldr	r1, [r7, #4]
 800f48e:	4613      	mov	r3, r2
 800f490:	009b      	lsls	r3, r3, #2
 800f492:	4413      	add	r3, r2
 800f494:	009b      	lsls	r3, r3, #2
 800f496:	440b      	add	r3, r1
 800f498:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f49c:	2201      	movs	r2, #1
 800f49e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800f4a0:	4b2f      	ldr	r3, [pc, #188]	@ (800f560 <USBD_CDC_Init+0x1ec>)
 800f4a2:	781b      	ldrb	r3, [r3, #0]
 800f4a4:	f003 020f 	and.w	r2, r3, #15
 800f4a8:	6879      	ldr	r1, [r7, #4]
 800f4aa:	4613      	mov	r3, r2
 800f4ac:	009b      	lsls	r3, r3, #2
 800f4ae:	4413      	add	r3, r2
 800f4b0:	009b      	lsls	r3, r3, #2
 800f4b2:	440b      	add	r3, r1
 800f4b4:	3326      	adds	r3, #38	@ 0x26
 800f4b6:	2210      	movs	r2, #16
 800f4b8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800f4ba:	4b29      	ldr	r3, [pc, #164]	@ (800f560 <USBD_CDC_Init+0x1ec>)
 800f4bc:	7819      	ldrb	r1, [r3, #0]
 800f4be:	2308      	movs	r3, #8
 800f4c0:	2203      	movs	r2, #3
 800f4c2:	6878      	ldr	r0, [r7, #4]
 800f4c4:	f002 fb3d 	bl	8011b42 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800f4c8:	4b25      	ldr	r3, [pc, #148]	@ (800f560 <USBD_CDC_Init+0x1ec>)
 800f4ca:	781b      	ldrb	r3, [r3, #0]
 800f4cc:	f003 020f 	and.w	r2, r3, #15
 800f4d0:	6879      	ldr	r1, [r7, #4]
 800f4d2:	4613      	mov	r3, r2
 800f4d4:	009b      	lsls	r3, r3, #2
 800f4d6:	4413      	add	r3, r2
 800f4d8:	009b      	lsls	r3, r3, #2
 800f4da:	440b      	add	r3, r1
 800f4dc:	3324      	adds	r3, #36	@ 0x24
 800f4de:	2201      	movs	r2, #1
 800f4e0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800f4e2:	68fb      	ldr	r3, [r7, #12]
 800f4e4:	2200      	movs	r2, #0
 800f4e6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f4f0:	687a      	ldr	r2, [r7, #4]
 800f4f2:	33b0      	adds	r3, #176	@ 0xb0
 800f4f4:	009b      	lsls	r3, r3, #2
 800f4f6:	4413      	add	r3, r2
 800f4f8:	685b      	ldr	r3, [r3, #4]
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800f4fe:	68fb      	ldr	r3, [r7, #12]
 800f500:	2200      	movs	r2, #0
 800f502:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800f506:	68fb      	ldr	r3, [r7, #12]
 800f508:	2200      	movs	r2, #0
 800f50a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800f50e:	68fb      	ldr	r3, [r7, #12]
 800f510:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800f514:	2b00      	cmp	r3, #0
 800f516:	d101      	bne.n	800f51c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800f518:	2302      	movs	r3, #2
 800f51a:	e018      	b.n	800f54e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	7c1b      	ldrb	r3, [r3, #16]
 800f520:	2b00      	cmp	r3, #0
 800f522:	d10a      	bne.n	800f53a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800f524:	4b0d      	ldr	r3, [pc, #52]	@ (800f55c <USBD_CDC_Init+0x1e8>)
 800f526:	7819      	ldrb	r1, [r3, #0]
 800f528:	68fb      	ldr	r3, [r7, #12]
 800f52a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800f52e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f532:	6878      	ldr	r0, [r7, #4]
 800f534:	f002 fbf4 	bl	8011d20 <USBD_LL_PrepareReceive>
 800f538:	e008      	b.n	800f54c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800f53a:	4b08      	ldr	r3, [pc, #32]	@ (800f55c <USBD_CDC_Init+0x1e8>)
 800f53c:	7819      	ldrb	r1, [r3, #0]
 800f53e:	68fb      	ldr	r3, [r7, #12]
 800f540:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800f544:	2340      	movs	r3, #64	@ 0x40
 800f546:	6878      	ldr	r0, [r7, #4]
 800f548:	f002 fbea 	bl	8011d20 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800f54c:	2300      	movs	r3, #0
}
 800f54e:	4618      	mov	r0, r3
 800f550:	3710      	adds	r7, #16
 800f552:	46bd      	mov	sp, r7
 800f554:	bd80      	pop	{r7, pc}
 800f556:	bf00      	nop
 800f558:	200000a7 	.word	0x200000a7
 800f55c:	200000a8 	.word	0x200000a8
 800f560:	200000a9 	.word	0x200000a9

0800f564 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f564:	b580      	push	{r7, lr}
 800f566:	b082      	sub	sp, #8
 800f568:	af00      	add	r7, sp, #0
 800f56a:	6078      	str	r0, [r7, #4]
 800f56c:	460b      	mov	r3, r1
 800f56e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800f570:	4b3a      	ldr	r3, [pc, #232]	@ (800f65c <USBD_CDC_DeInit+0xf8>)
 800f572:	781b      	ldrb	r3, [r3, #0]
 800f574:	4619      	mov	r1, r3
 800f576:	6878      	ldr	r0, [r7, #4]
 800f578:	f002 fb09 	bl	8011b8e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800f57c:	4b37      	ldr	r3, [pc, #220]	@ (800f65c <USBD_CDC_DeInit+0xf8>)
 800f57e:	781b      	ldrb	r3, [r3, #0]
 800f580:	f003 020f 	and.w	r2, r3, #15
 800f584:	6879      	ldr	r1, [r7, #4]
 800f586:	4613      	mov	r3, r2
 800f588:	009b      	lsls	r3, r3, #2
 800f58a:	4413      	add	r3, r2
 800f58c:	009b      	lsls	r3, r3, #2
 800f58e:	440b      	add	r3, r1
 800f590:	3324      	adds	r3, #36	@ 0x24
 800f592:	2200      	movs	r2, #0
 800f594:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800f596:	4b32      	ldr	r3, [pc, #200]	@ (800f660 <USBD_CDC_DeInit+0xfc>)
 800f598:	781b      	ldrb	r3, [r3, #0]
 800f59a:	4619      	mov	r1, r3
 800f59c:	6878      	ldr	r0, [r7, #4]
 800f59e:	f002 faf6 	bl	8011b8e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800f5a2:	4b2f      	ldr	r3, [pc, #188]	@ (800f660 <USBD_CDC_DeInit+0xfc>)
 800f5a4:	781b      	ldrb	r3, [r3, #0]
 800f5a6:	f003 020f 	and.w	r2, r3, #15
 800f5aa:	6879      	ldr	r1, [r7, #4]
 800f5ac:	4613      	mov	r3, r2
 800f5ae:	009b      	lsls	r3, r3, #2
 800f5b0:	4413      	add	r3, r2
 800f5b2:	009b      	lsls	r3, r3, #2
 800f5b4:	440b      	add	r3, r1
 800f5b6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f5ba:	2200      	movs	r2, #0
 800f5bc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800f5be:	4b29      	ldr	r3, [pc, #164]	@ (800f664 <USBD_CDC_DeInit+0x100>)
 800f5c0:	781b      	ldrb	r3, [r3, #0]
 800f5c2:	4619      	mov	r1, r3
 800f5c4:	6878      	ldr	r0, [r7, #4]
 800f5c6:	f002 fae2 	bl	8011b8e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800f5ca:	4b26      	ldr	r3, [pc, #152]	@ (800f664 <USBD_CDC_DeInit+0x100>)
 800f5cc:	781b      	ldrb	r3, [r3, #0]
 800f5ce:	f003 020f 	and.w	r2, r3, #15
 800f5d2:	6879      	ldr	r1, [r7, #4]
 800f5d4:	4613      	mov	r3, r2
 800f5d6:	009b      	lsls	r3, r3, #2
 800f5d8:	4413      	add	r3, r2
 800f5da:	009b      	lsls	r3, r3, #2
 800f5dc:	440b      	add	r3, r1
 800f5de:	3324      	adds	r3, #36	@ 0x24
 800f5e0:	2200      	movs	r2, #0
 800f5e2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800f5e4:	4b1f      	ldr	r3, [pc, #124]	@ (800f664 <USBD_CDC_DeInit+0x100>)
 800f5e6:	781b      	ldrb	r3, [r3, #0]
 800f5e8:	f003 020f 	and.w	r2, r3, #15
 800f5ec:	6879      	ldr	r1, [r7, #4]
 800f5ee:	4613      	mov	r3, r2
 800f5f0:	009b      	lsls	r3, r3, #2
 800f5f2:	4413      	add	r3, r2
 800f5f4:	009b      	lsls	r3, r3, #2
 800f5f6:	440b      	add	r3, r1
 800f5f8:	3326      	adds	r3, #38	@ 0x26
 800f5fa:	2200      	movs	r2, #0
 800f5fc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	32b0      	adds	r2, #176	@ 0xb0
 800f608:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d01f      	beq.n	800f650 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f616:	687a      	ldr	r2, [r7, #4]
 800f618:	33b0      	adds	r3, #176	@ 0xb0
 800f61a:	009b      	lsls	r3, r3, #2
 800f61c:	4413      	add	r3, r2
 800f61e:	685b      	ldr	r3, [r3, #4]
 800f620:	685b      	ldr	r3, [r3, #4]
 800f622:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	32b0      	adds	r2, #176	@ 0xb0
 800f62e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f632:	4618      	mov	r0, r3
 800f634:	f002 fbb6 	bl	8011da4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	32b0      	adds	r2, #176	@ 0xb0
 800f642:	2100      	movs	r1, #0
 800f644:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	2200      	movs	r2, #0
 800f64c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800f650:	2300      	movs	r3, #0
}
 800f652:	4618      	mov	r0, r3
 800f654:	3708      	adds	r7, #8
 800f656:	46bd      	mov	sp, r7
 800f658:	bd80      	pop	{r7, pc}
 800f65a:	bf00      	nop
 800f65c:	200000a7 	.word	0x200000a7
 800f660:	200000a8 	.word	0x200000a8
 800f664:	200000a9 	.word	0x200000a9

0800f668 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800f668:	b580      	push	{r7, lr}
 800f66a:	b086      	sub	sp, #24
 800f66c:	af00      	add	r7, sp, #0
 800f66e:	6078      	str	r0, [r7, #4]
 800f670:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	32b0      	adds	r2, #176	@ 0xb0
 800f67c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f680:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800f682:	2300      	movs	r3, #0
 800f684:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800f686:	2300      	movs	r3, #0
 800f688:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800f68a:	2300      	movs	r3, #0
 800f68c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800f68e:	693b      	ldr	r3, [r7, #16]
 800f690:	2b00      	cmp	r3, #0
 800f692:	d101      	bne.n	800f698 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800f694:	2303      	movs	r3, #3
 800f696:	e0bf      	b.n	800f818 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f698:	683b      	ldr	r3, [r7, #0]
 800f69a:	781b      	ldrb	r3, [r3, #0]
 800f69c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	d050      	beq.n	800f746 <USBD_CDC_Setup+0xde>
 800f6a4:	2b20      	cmp	r3, #32
 800f6a6:	f040 80af 	bne.w	800f808 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800f6aa:	683b      	ldr	r3, [r7, #0]
 800f6ac:	88db      	ldrh	r3, [r3, #6]
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	d03a      	beq.n	800f728 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800f6b2:	683b      	ldr	r3, [r7, #0]
 800f6b4:	781b      	ldrb	r3, [r3, #0]
 800f6b6:	b25b      	sxtb	r3, r3
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	da1b      	bge.n	800f6f4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f6c2:	687a      	ldr	r2, [r7, #4]
 800f6c4:	33b0      	adds	r3, #176	@ 0xb0
 800f6c6:	009b      	lsls	r3, r3, #2
 800f6c8:	4413      	add	r3, r2
 800f6ca:	685b      	ldr	r3, [r3, #4]
 800f6cc:	689b      	ldr	r3, [r3, #8]
 800f6ce:	683a      	ldr	r2, [r7, #0]
 800f6d0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800f6d2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800f6d4:	683a      	ldr	r2, [r7, #0]
 800f6d6:	88d2      	ldrh	r2, [r2, #6]
 800f6d8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800f6da:	683b      	ldr	r3, [r7, #0]
 800f6dc:	88db      	ldrh	r3, [r3, #6]
 800f6de:	2b07      	cmp	r3, #7
 800f6e0:	bf28      	it	cs
 800f6e2:	2307      	movcs	r3, #7
 800f6e4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800f6e6:	693b      	ldr	r3, [r7, #16]
 800f6e8:	89fa      	ldrh	r2, [r7, #14]
 800f6ea:	4619      	mov	r1, r3
 800f6ec:	6878      	ldr	r0, [r7, #4]
 800f6ee:	f001 fd93 	bl	8011218 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800f6f2:	e090      	b.n	800f816 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800f6f4:	683b      	ldr	r3, [r7, #0]
 800f6f6:	785a      	ldrb	r2, [r3, #1]
 800f6f8:	693b      	ldr	r3, [r7, #16]
 800f6fa:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800f6fe:	683b      	ldr	r3, [r7, #0]
 800f700:	88db      	ldrh	r3, [r3, #6]
 800f702:	2b3f      	cmp	r3, #63	@ 0x3f
 800f704:	d803      	bhi.n	800f70e <USBD_CDC_Setup+0xa6>
 800f706:	683b      	ldr	r3, [r7, #0]
 800f708:	88db      	ldrh	r3, [r3, #6]
 800f70a:	b2da      	uxtb	r2, r3
 800f70c:	e000      	b.n	800f710 <USBD_CDC_Setup+0xa8>
 800f70e:	2240      	movs	r2, #64	@ 0x40
 800f710:	693b      	ldr	r3, [r7, #16]
 800f712:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800f716:	6939      	ldr	r1, [r7, #16]
 800f718:	693b      	ldr	r3, [r7, #16]
 800f71a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800f71e:	461a      	mov	r2, r3
 800f720:	6878      	ldr	r0, [r7, #4]
 800f722:	f001 fda5 	bl	8011270 <USBD_CtlPrepareRx>
      break;
 800f726:	e076      	b.n	800f816 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f72e:	687a      	ldr	r2, [r7, #4]
 800f730:	33b0      	adds	r3, #176	@ 0xb0
 800f732:	009b      	lsls	r3, r3, #2
 800f734:	4413      	add	r3, r2
 800f736:	685b      	ldr	r3, [r3, #4]
 800f738:	689b      	ldr	r3, [r3, #8]
 800f73a:	683a      	ldr	r2, [r7, #0]
 800f73c:	7850      	ldrb	r0, [r2, #1]
 800f73e:	2200      	movs	r2, #0
 800f740:	6839      	ldr	r1, [r7, #0]
 800f742:	4798      	blx	r3
      break;
 800f744:	e067      	b.n	800f816 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f746:	683b      	ldr	r3, [r7, #0]
 800f748:	785b      	ldrb	r3, [r3, #1]
 800f74a:	2b0b      	cmp	r3, #11
 800f74c:	d851      	bhi.n	800f7f2 <USBD_CDC_Setup+0x18a>
 800f74e:	a201      	add	r2, pc, #4	@ (adr r2, 800f754 <USBD_CDC_Setup+0xec>)
 800f750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f754:	0800f785 	.word	0x0800f785
 800f758:	0800f801 	.word	0x0800f801
 800f75c:	0800f7f3 	.word	0x0800f7f3
 800f760:	0800f7f3 	.word	0x0800f7f3
 800f764:	0800f7f3 	.word	0x0800f7f3
 800f768:	0800f7f3 	.word	0x0800f7f3
 800f76c:	0800f7f3 	.word	0x0800f7f3
 800f770:	0800f7f3 	.word	0x0800f7f3
 800f774:	0800f7f3 	.word	0x0800f7f3
 800f778:	0800f7f3 	.word	0x0800f7f3
 800f77c:	0800f7af 	.word	0x0800f7af
 800f780:	0800f7d9 	.word	0x0800f7d9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f78a:	b2db      	uxtb	r3, r3
 800f78c:	2b03      	cmp	r3, #3
 800f78e:	d107      	bne.n	800f7a0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800f790:	f107 030a 	add.w	r3, r7, #10
 800f794:	2202      	movs	r2, #2
 800f796:	4619      	mov	r1, r3
 800f798:	6878      	ldr	r0, [r7, #4]
 800f79a:	f001 fd3d 	bl	8011218 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f79e:	e032      	b.n	800f806 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800f7a0:	6839      	ldr	r1, [r7, #0]
 800f7a2:	6878      	ldr	r0, [r7, #4]
 800f7a4:	f001 fcbb 	bl	801111e <USBD_CtlError>
            ret = USBD_FAIL;
 800f7a8:	2303      	movs	r3, #3
 800f7aa:	75fb      	strb	r3, [r7, #23]
          break;
 800f7ac:	e02b      	b.n	800f806 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f7b4:	b2db      	uxtb	r3, r3
 800f7b6:	2b03      	cmp	r3, #3
 800f7b8:	d107      	bne.n	800f7ca <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800f7ba:	f107 030d 	add.w	r3, r7, #13
 800f7be:	2201      	movs	r2, #1
 800f7c0:	4619      	mov	r1, r3
 800f7c2:	6878      	ldr	r0, [r7, #4]
 800f7c4:	f001 fd28 	bl	8011218 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f7c8:	e01d      	b.n	800f806 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800f7ca:	6839      	ldr	r1, [r7, #0]
 800f7cc:	6878      	ldr	r0, [r7, #4]
 800f7ce:	f001 fca6 	bl	801111e <USBD_CtlError>
            ret = USBD_FAIL;
 800f7d2:	2303      	movs	r3, #3
 800f7d4:	75fb      	strb	r3, [r7, #23]
          break;
 800f7d6:	e016      	b.n	800f806 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f7de:	b2db      	uxtb	r3, r3
 800f7e0:	2b03      	cmp	r3, #3
 800f7e2:	d00f      	beq.n	800f804 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800f7e4:	6839      	ldr	r1, [r7, #0]
 800f7e6:	6878      	ldr	r0, [r7, #4]
 800f7e8:	f001 fc99 	bl	801111e <USBD_CtlError>
            ret = USBD_FAIL;
 800f7ec:	2303      	movs	r3, #3
 800f7ee:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800f7f0:	e008      	b.n	800f804 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800f7f2:	6839      	ldr	r1, [r7, #0]
 800f7f4:	6878      	ldr	r0, [r7, #4]
 800f7f6:	f001 fc92 	bl	801111e <USBD_CtlError>
          ret = USBD_FAIL;
 800f7fa:	2303      	movs	r3, #3
 800f7fc:	75fb      	strb	r3, [r7, #23]
          break;
 800f7fe:	e002      	b.n	800f806 <USBD_CDC_Setup+0x19e>
          break;
 800f800:	bf00      	nop
 800f802:	e008      	b.n	800f816 <USBD_CDC_Setup+0x1ae>
          break;
 800f804:	bf00      	nop
      }
      break;
 800f806:	e006      	b.n	800f816 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800f808:	6839      	ldr	r1, [r7, #0]
 800f80a:	6878      	ldr	r0, [r7, #4]
 800f80c:	f001 fc87 	bl	801111e <USBD_CtlError>
      ret = USBD_FAIL;
 800f810:	2303      	movs	r3, #3
 800f812:	75fb      	strb	r3, [r7, #23]
      break;
 800f814:	bf00      	nop
  }

  return (uint8_t)ret;
 800f816:	7dfb      	ldrb	r3, [r7, #23]
}
 800f818:	4618      	mov	r0, r3
 800f81a:	3718      	adds	r7, #24
 800f81c:	46bd      	mov	sp, r7
 800f81e:	bd80      	pop	{r7, pc}

0800f820 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f820:	b580      	push	{r7, lr}
 800f822:	b084      	sub	sp, #16
 800f824:	af00      	add	r7, sp, #0
 800f826:	6078      	str	r0, [r7, #4]
 800f828:	460b      	mov	r3, r1
 800f82a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f832:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	32b0      	adds	r2, #176	@ 0xb0
 800f83e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f842:	2b00      	cmp	r3, #0
 800f844:	d101      	bne.n	800f84a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800f846:	2303      	movs	r3, #3
 800f848:	e065      	b.n	800f916 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	32b0      	adds	r2, #176	@ 0xb0
 800f854:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f858:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800f85a:	78fb      	ldrb	r3, [r7, #3]
 800f85c:	f003 020f 	and.w	r2, r3, #15
 800f860:	6879      	ldr	r1, [r7, #4]
 800f862:	4613      	mov	r3, r2
 800f864:	009b      	lsls	r3, r3, #2
 800f866:	4413      	add	r3, r2
 800f868:	009b      	lsls	r3, r3, #2
 800f86a:	440b      	add	r3, r1
 800f86c:	3318      	adds	r3, #24
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	2b00      	cmp	r3, #0
 800f872:	d02f      	beq.n	800f8d4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800f874:	78fb      	ldrb	r3, [r7, #3]
 800f876:	f003 020f 	and.w	r2, r3, #15
 800f87a:	6879      	ldr	r1, [r7, #4]
 800f87c:	4613      	mov	r3, r2
 800f87e:	009b      	lsls	r3, r3, #2
 800f880:	4413      	add	r3, r2
 800f882:	009b      	lsls	r3, r3, #2
 800f884:	440b      	add	r3, r1
 800f886:	3318      	adds	r3, #24
 800f888:	681a      	ldr	r2, [r3, #0]
 800f88a:	78fb      	ldrb	r3, [r7, #3]
 800f88c:	f003 010f 	and.w	r1, r3, #15
 800f890:	68f8      	ldr	r0, [r7, #12]
 800f892:	460b      	mov	r3, r1
 800f894:	00db      	lsls	r3, r3, #3
 800f896:	440b      	add	r3, r1
 800f898:	009b      	lsls	r3, r3, #2
 800f89a:	4403      	add	r3, r0
 800f89c:	331c      	adds	r3, #28
 800f89e:	681b      	ldr	r3, [r3, #0]
 800f8a0:	fbb2 f1f3 	udiv	r1, r2, r3
 800f8a4:	fb01 f303 	mul.w	r3, r1, r3
 800f8a8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d112      	bne.n	800f8d4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800f8ae:	78fb      	ldrb	r3, [r7, #3]
 800f8b0:	f003 020f 	and.w	r2, r3, #15
 800f8b4:	6879      	ldr	r1, [r7, #4]
 800f8b6:	4613      	mov	r3, r2
 800f8b8:	009b      	lsls	r3, r3, #2
 800f8ba:	4413      	add	r3, r2
 800f8bc:	009b      	lsls	r3, r3, #2
 800f8be:	440b      	add	r3, r1
 800f8c0:	3318      	adds	r3, #24
 800f8c2:	2200      	movs	r2, #0
 800f8c4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800f8c6:	78f9      	ldrb	r1, [r7, #3]
 800f8c8:	2300      	movs	r3, #0
 800f8ca:	2200      	movs	r2, #0
 800f8cc:	6878      	ldr	r0, [r7, #4]
 800f8ce:	f002 fa06 	bl	8011cde <USBD_LL_Transmit>
 800f8d2:	e01f      	b.n	800f914 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800f8d4:	68bb      	ldr	r3, [r7, #8]
 800f8d6:	2200      	movs	r2, #0
 800f8d8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f8e2:	687a      	ldr	r2, [r7, #4]
 800f8e4:	33b0      	adds	r3, #176	@ 0xb0
 800f8e6:	009b      	lsls	r3, r3, #2
 800f8e8:	4413      	add	r3, r2
 800f8ea:	685b      	ldr	r3, [r3, #4]
 800f8ec:	691b      	ldr	r3, [r3, #16]
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	d010      	beq.n	800f914 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f8f8:	687a      	ldr	r2, [r7, #4]
 800f8fa:	33b0      	adds	r3, #176	@ 0xb0
 800f8fc:	009b      	lsls	r3, r3, #2
 800f8fe:	4413      	add	r3, r2
 800f900:	685b      	ldr	r3, [r3, #4]
 800f902:	691b      	ldr	r3, [r3, #16]
 800f904:	68ba      	ldr	r2, [r7, #8]
 800f906:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800f90a:	68ba      	ldr	r2, [r7, #8]
 800f90c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800f910:	78fa      	ldrb	r2, [r7, #3]
 800f912:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800f914:	2300      	movs	r3, #0
}
 800f916:	4618      	mov	r0, r3
 800f918:	3710      	adds	r7, #16
 800f91a:	46bd      	mov	sp, r7
 800f91c:	bd80      	pop	{r7, pc}

0800f91e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f91e:	b580      	push	{r7, lr}
 800f920:	b084      	sub	sp, #16
 800f922:	af00      	add	r7, sp, #0
 800f924:	6078      	str	r0, [r7, #4]
 800f926:	460b      	mov	r3, r1
 800f928:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	32b0      	adds	r2, #176	@ 0xb0
 800f934:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f938:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	32b0      	adds	r2, #176	@ 0xb0
 800f944:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d101      	bne.n	800f950 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800f94c:	2303      	movs	r3, #3
 800f94e:	e01a      	b.n	800f986 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800f950:	78fb      	ldrb	r3, [r7, #3]
 800f952:	4619      	mov	r1, r3
 800f954:	6878      	ldr	r0, [r7, #4]
 800f956:	f002 fa04 	bl	8011d62 <USBD_LL_GetRxDataSize>
 800f95a:	4602      	mov	r2, r0
 800f95c:	68fb      	ldr	r3, [r7, #12]
 800f95e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f968:	687a      	ldr	r2, [r7, #4]
 800f96a:	33b0      	adds	r3, #176	@ 0xb0
 800f96c:	009b      	lsls	r3, r3, #2
 800f96e:	4413      	add	r3, r2
 800f970:	685b      	ldr	r3, [r3, #4]
 800f972:	68db      	ldr	r3, [r3, #12]
 800f974:	68fa      	ldr	r2, [r7, #12]
 800f976:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800f97a:	68fa      	ldr	r2, [r7, #12]
 800f97c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800f980:	4611      	mov	r1, r2
 800f982:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800f984:	2300      	movs	r3, #0
}
 800f986:	4618      	mov	r0, r3
 800f988:	3710      	adds	r7, #16
 800f98a:	46bd      	mov	sp, r7
 800f98c:	bd80      	pop	{r7, pc}

0800f98e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800f98e:	b580      	push	{r7, lr}
 800f990:	b084      	sub	sp, #16
 800f992:	af00      	add	r7, sp, #0
 800f994:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	32b0      	adds	r2, #176	@ 0xb0
 800f9a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f9a4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800f9a6:	68fb      	ldr	r3, [r7, #12]
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	d101      	bne.n	800f9b0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800f9ac:	2303      	movs	r3, #3
 800f9ae:	e024      	b.n	800f9fa <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f9b6:	687a      	ldr	r2, [r7, #4]
 800f9b8:	33b0      	adds	r3, #176	@ 0xb0
 800f9ba:	009b      	lsls	r3, r3, #2
 800f9bc:	4413      	add	r3, r2
 800f9be:	685b      	ldr	r3, [r3, #4]
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d019      	beq.n	800f9f8 <USBD_CDC_EP0_RxReady+0x6a>
 800f9c4:	68fb      	ldr	r3, [r7, #12]
 800f9c6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800f9ca:	2bff      	cmp	r3, #255	@ 0xff
 800f9cc:	d014      	beq.n	800f9f8 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f9d4:	687a      	ldr	r2, [r7, #4]
 800f9d6:	33b0      	adds	r3, #176	@ 0xb0
 800f9d8:	009b      	lsls	r3, r3, #2
 800f9da:	4413      	add	r3, r2
 800f9dc:	685b      	ldr	r3, [r3, #4]
 800f9de:	689b      	ldr	r3, [r3, #8]
 800f9e0:	68fa      	ldr	r2, [r7, #12]
 800f9e2:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800f9e6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800f9e8:	68fa      	ldr	r2, [r7, #12]
 800f9ea:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800f9ee:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800f9f0:	68fb      	ldr	r3, [r7, #12]
 800f9f2:	22ff      	movs	r2, #255	@ 0xff
 800f9f4:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800f9f8:	2300      	movs	r3, #0
}
 800f9fa:	4618      	mov	r0, r3
 800f9fc:	3710      	adds	r7, #16
 800f9fe:	46bd      	mov	sp, r7
 800fa00:	bd80      	pop	{r7, pc}
	...

0800fa04 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800fa04:	b580      	push	{r7, lr}
 800fa06:	b086      	sub	sp, #24
 800fa08:	af00      	add	r7, sp, #0
 800fa0a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800fa0c:	2182      	movs	r1, #130	@ 0x82
 800fa0e:	4818      	ldr	r0, [pc, #96]	@ (800fa70 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800fa10:	f000 fd4f 	bl	80104b2 <USBD_GetEpDesc>
 800fa14:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800fa16:	2101      	movs	r1, #1
 800fa18:	4815      	ldr	r0, [pc, #84]	@ (800fa70 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800fa1a:	f000 fd4a 	bl	80104b2 <USBD_GetEpDesc>
 800fa1e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800fa20:	2181      	movs	r1, #129	@ 0x81
 800fa22:	4813      	ldr	r0, [pc, #76]	@ (800fa70 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800fa24:	f000 fd45 	bl	80104b2 <USBD_GetEpDesc>
 800fa28:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800fa2a:	697b      	ldr	r3, [r7, #20]
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d002      	beq.n	800fa36 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800fa30:	697b      	ldr	r3, [r7, #20]
 800fa32:	2210      	movs	r2, #16
 800fa34:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800fa36:	693b      	ldr	r3, [r7, #16]
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d006      	beq.n	800fa4a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800fa3c:	693b      	ldr	r3, [r7, #16]
 800fa3e:	2200      	movs	r2, #0
 800fa40:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800fa44:	711a      	strb	r2, [r3, #4]
 800fa46:	2200      	movs	r2, #0
 800fa48:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800fa4a:	68fb      	ldr	r3, [r7, #12]
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d006      	beq.n	800fa5e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800fa50:	68fb      	ldr	r3, [r7, #12]
 800fa52:	2200      	movs	r2, #0
 800fa54:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800fa58:	711a      	strb	r2, [r3, #4]
 800fa5a:	2200      	movs	r2, #0
 800fa5c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	2243      	movs	r2, #67	@ 0x43
 800fa62:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800fa64:	4b02      	ldr	r3, [pc, #8]	@ (800fa70 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800fa66:	4618      	mov	r0, r3
 800fa68:	3718      	adds	r7, #24
 800fa6a:	46bd      	mov	sp, r7
 800fa6c:	bd80      	pop	{r7, pc}
 800fa6e:	bf00      	nop
 800fa70:	20000064 	.word	0x20000064

0800fa74 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800fa74:	b580      	push	{r7, lr}
 800fa76:	b086      	sub	sp, #24
 800fa78:	af00      	add	r7, sp, #0
 800fa7a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800fa7c:	2182      	movs	r1, #130	@ 0x82
 800fa7e:	4818      	ldr	r0, [pc, #96]	@ (800fae0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800fa80:	f000 fd17 	bl	80104b2 <USBD_GetEpDesc>
 800fa84:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800fa86:	2101      	movs	r1, #1
 800fa88:	4815      	ldr	r0, [pc, #84]	@ (800fae0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800fa8a:	f000 fd12 	bl	80104b2 <USBD_GetEpDesc>
 800fa8e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800fa90:	2181      	movs	r1, #129	@ 0x81
 800fa92:	4813      	ldr	r0, [pc, #76]	@ (800fae0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800fa94:	f000 fd0d 	bl	80104b2 <USBD_GetEpDesc>
 800fa98:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800fa9a:	697b      	ldr	r3, [r7, #20]
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d002      	beq.n	800faa6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800faa0:	697b      	ldr	r3, [r7, #20]
 800faa2:	2210      	movs	r2, #16
 800faa4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800faa6:	693b      	ldr	r3, [r7, #16]
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d006      	beq.n	800faba <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800faac:	693b      	ldr	r3, [r7, #16]
 800faae:	2200      	movs	r2, #0
 800fab0:	711a      	strb	r2, [r3, #4]
 800fab2:	2200      	movs	r2, #0
 800fab4:	f042 0202 	orr.w	r2, r2, #2
 800fab8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800faba:	68fb      	ldr	r3, [r7, #12]
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d006      	beq.n	800face <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800fac0:	68fb      	ldr	r3, [r7, #12]
 800fac2:	2200      	movs	r2, #0
 800fac4:	711a      	strb	r2, [r3, #4]
 800fac6:	2200      	movs	r2, #0
 800fac8:	f042 0202 	orr.w	r2, r2, #2
 800facc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	2243      	movs	r2, #67	@ 0x43
 800fad2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800fad4:	4b02      	ldr	r3, [pc, #8]	@ (800fae0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800fad6:	4618      	mov	r0, r3
 800fad8:	3718      	adds	r7, #24
 800fada:	46bd      	mov	sp, r7
 800fadc:	bd80      	pop	{r7, pc}
 800fade:	bf00      	nop
 800fae0:	20000064 	.word	0x20000064

0800fae4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800fae4:	b580      	push	{r7, lr}
 800fae6:	b086      	sub	sp, #24
 800fae8:	af00      	add	r7, sp, #0
 800faea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800faec:	2182      	movs	r1, #130	@ 0x82
 800faee:	4818      	ldr	r0, [pc, #96]	@ (800fb50 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800faf0:	f000 fcdf 	bl	80104b2 <USBD_GetEpDesc>
 800faf4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800faf6:	2101      	movs	r1, #1
 800faf8:	4815      	ldr	r0, [pc, #84]	@ (800fb50 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800fafa:	f000 fcda 	bl	80104b2 <USBD_GetEpDesc>
 800fafe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800fb00:	2181      	movs	r1, #129	@ 0x81
 800fb02:	4813      	ldr	r0, [pc, #76]	@ (800fb50 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800fb04:	f000 fcd5 	bl	80104b2 <USBD_GetEpDesc>
 800fb08:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800fb0a:	697b      	ldr	r3, [r7, #20]
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d002      	beq.n	800fb16 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800fb10:	697b      	ldr	r3, [r7, #20]
 800fb12:	2210      	movs	r2, #16
 800fb14:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800fb16:	693b      	ldr	r3, [r7, #16]
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d006      	beq.n	800fb2a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800fb1c:	693b      	ldr	r3, [r7, #16]
 800fb1e:	2200      	movs	r2, #0
 800fb20:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800fb24:	711a      	strb	r2, [r3, #4]
 800fb26:	2200      	movs	r2, #0
 800fb28:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800fb2a:	68fb      	ldr	r3, [r7, #12]
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d006      	beq.n	800fb3e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800fb30:	68fb      	ldr	r3, [r7, #12]
 800fb32:	2200      	movs	r2, #0
 800fb34:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800fb38:	711a      	strb	r2, [r3, #4]
 800fb3a:	2200      	movs	r2, #0
 800fb3c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	2243      	movs	r2, #67	@ 0x43
 800fb42:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800fb44:	4b02      	ldr	r3, [pc, #8]	@ (800fb50 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800fb46:	4618      	mov	r0, r3
 800fb48:	3718      	adds	r7, #24
 800fb4a:	46bd      	mov	sp, r7
 800fb4c:	bd80      	pop	{r7, pc}
 800fb4e:	bf00      	nop
 800fb50:	20000064 	.word	0x20000064

0800fb54 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800fb54:	b480      	push	{r7}
 800fb56:	b083      	sub	sp, #12
 800fb58:	af00      	add	r7, sp, #0
 800fb5a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	220a      	movs	r2, #10
 800fb60:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800fb62:	4b03      	ldr	r3, [pc, #12]	@ (800fb70 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800fb64:	4618      	mov	r0, r3
 800fb66:	370c      	adds	r7, #12
 800fb68:	46bd      	mov	sp, r7
 800fb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb6e:	4770      	bx	lr
 800fb70:	20000020 	.word	0x20000020

0800fb74 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800fb74:	b480      	push	{r7}
 800fb76:	b083      	sub	sp, #12
 800fb78:	af00      	add	r7, sp, #0
 800fb7a:	6078      	str	r0, [r7, #4]
 800fb7c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800fb7e:	683b      	ldr	r3, [r7, #0]
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d101      	bne.n	800fb88 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800fb84:	2303      	movs	r3, #3
 800fb86:	e009      	b.n	800fb9c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800fb8e:	687a      	ldr	r2, [r7, #4]
 800fb90:	33b0      	adds	r3, #176	@ 0xb0
 800fb92:	009b      	lsls	r3, r3, #2
 800fb94:	4413      	add	r3, r2
 800fb96:	683a      	ldr	r2, [r7, #0]
 800fb98:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800fb9a:	2300      	movs	r3, #0
}
 800fb9c:	4618      	mov	r0, r3
 800fb9e:	370c      	adds	r7, #12
 800fba0:	46bd      	mov	sp, r7
 800fba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fba6:	4770      	bx	lr

0800fba8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800fba8:	b480      	push	{r7}
 800fbaa:	b087      	sub	sp, #28
 800fbac:	af00      	add	r7, sp, #0
 800fbae:	60f8      	str	r0, [r7, #12]
 800fbb0:	60b9      	str	r1, [r7, #8]
 800fbb2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fbb4:	68fb      	ldr	r3, [r7, #12]
 800fbb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fbba:	68fb      	ldr	r3, [r7, #12]
 800fbbc:	32b0      	adds	r2, #176	@ 0xb0
 800fbbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fbc2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800fbc4:	697b      	ldr	r3, [r7, #20]
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	d101      	bne.n	800fbce <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800fbca:	2303      	movs	r3, #3
 800fbcc:	e008      	b.n	800fbe0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800fbce:	697b      	ldr	r3, [r7, #20]
 800fbd0:	68ba      	ldr	r2, [r7, #8]
 800fbd2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800fbd6:	697b      	ldr	r3, [r7, #20]
 800fbd8:	687a      	ldr	r2, [r7, #4]
 800fbda:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800fbde:	2300      	movs	r3, #0
}
 800fbe0:	4618      	mov	r0, r3
 800fbe2:	371c      	adds	r7, #28
 800fbe4:	46bd      	mov	sp, r7
 800fbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbea:	4770      	bx	lr

0800fbec <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800fbec:	b480      	push	{r7}
 800fbee:	b085      	sub	sp, #20
 800fbf0:	af00      	add	r7, sp, #0
 800fbf2:	6078      	str	r0, [r7, #4]
 800fbf4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	32b0      	adds	r2, #176	@ 0xb0
 800fc00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fc04:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800fc06:	68fb      	ldr	r3, [r7, #12]
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d101      	bne.n	800fc10 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800fc0c:	2303      	movs	r3, #3
 800fc0e:	e004      	b.n	800fc1a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800fc10:	68fb      	ldr	r3, [r7, #12]
 800fc12:	683a      	ldr	r2, [r7, #0]
 800fc14:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800fc18:	2300      	movs	r3, #0
}
 800fc1a:	4618      	mov	r0, r3
 800fc1c:	3714      	adds	r7, #20
 800fc1e:	46bd      	mov	sp, r7
 800fc20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc24:	4770      	bx	lr
	...

0800fc28 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800fc28:	b580      	push	{r7, lr}
 800fc2a:	b084      	sub	sp, #16
 800fc2c:	af00      	add	r7, sp, #0
 800fc2e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	32b0      	adds	r2, #176	@ 0xb0
 800fc3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fc3e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800fc40:	2301      	movs	r3, #1
 800fc42:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800fc44:	68bb      	ldr	r3, [r7, #8]
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	d101      	bne.n	800fc4e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800fc4a:	2303      	movs	r3, #3
 800fc4c:	e025      	b.n	800fc9a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800fc4e:	68bb      	ldr	r3, [r7, #8]
 800fc50:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	d11f      	bne.n	800fc98 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800fc58:	68bb      	ldr	r3, [r7, #8]
 800fc5a:	2201      	movs	r2, #1
 800fc5c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800fc60:	4b10      	ldr	r3, [pc, #64]	@ (800fca4 <USBD_CDC_TransmitPacket+0x7c>)
 800fc62:	781b      	ldrb	r3, [r3, #0]
 800fc64:	f003 020f 	and.w	r2, r3, #15
 800fc68:	68bb      	ldr	r3, [r7, #8]
 800fc6a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800fc6e:	6878      	ldr	r0, [r7, #4]
 800fc70:	4613      	mov	r3, r2
 800fc72:	009b      	lsls	r3, r3, #2
 800fc74:	4413      	add	r3, r2
 800fc76:	009b      	lsls	r3, r3, #2
 800fc78:	4403      	add	r3, r0
 800fc7a:	3318      	adds	r3, #24
 800fc7c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800fc7e:	4b09      	ldr	r3, [pc, #36]	@ (800fca4 <USBD_CDC_TransmitPacket+0x7c>)
 800fc80:	7819      	ldrb	r1, [r3, #0]
 800fc82:	68bb      	ldr	r3, [r7, #8]
 800fc84:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800fc88:	68bb      	ldr	r3, [r7, #8]
 800fc8a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800fc8e:	6878      	ldr	r0, [r7, #4]
 800fc90:	f002 f825 	bl	8011cde <USBD_LL_Transmit>

    ret = USBD_OK;
 800fc94:	2300      	movs	r3, #0
 800fc96:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800fc98:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc9a:	4618      	mov	r0, r3
 800fc9c:	3710      	adds	r7, #16
 800fc9e:	46bd      	mov	sp, r7
 800fca0:	bd80      	pop	{r7, pc}
 800fca2:	bf00      	nop
 800fca4:	200000a7 	.word	0x200000a7

0800fca8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800fca8:	b580      	push	{r7, lr}
 800fcaa:	b084      	sub	sp, #16
 800fcac:	af00      	add	r7, sp, #0
 800fcae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	32b0      	adds	r2, #176	@ 0xb0
 800fcba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fcbe:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	32b0      	adds	r2, #176	@ 0xb0
 800fcca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	d101      	bne.n	800fcd6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800fcd2:	2303      	movs	r3, #3
 800fcd4:	e018      	b.n	800fd08 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	7c1b      	ldrb	r3, [r3, #16]
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d10a      	bne.n	800fcf4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800fcde:	4b0c      	ldr	r3, [pc, #48]	@ (800fd10 <USBD_CDC_ReceivePacket+0x68>)
 800fce0:	7819      	ldrb	r1, [r3, #0]
 800fce2:	68fb      	ldr	r3, [r7, #12]
 800fce4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800fce8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800fcec:	6878      	ldr	r0, [r7, #4]
 800fcee:	f002 f817 	bl	8011d20 <USBD_LL_PrepareReceive>
 800fcf2:	e008      	b.n	800fd06 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800fcf4:	4b06      	ldr	r3, [pc, #24]	@ (800fd10 <USBD_CDC_ReceivePacket+0x68>)
 800fcf6:	7819      	ldrb	r1, [r3, #0]
 800fcf8:	68fb      	ldr	r3, [r7, #12]
 800fcfa:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800fcfe:	2340      	movs	r3, #64	@ 0x40
 800fd00:	6878      	ldr	r0, [r7, #4]
 800fd02:	f002 f80d 	bl	8011d20 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800fd06:	2300      	movs	r3, #0
}
 800fd08:	4618      	mov	r0, r3
 800fd0a:	3710      	adds	r7, #16
 800fd0c:	46bd      	mov	sp, r7
 800fd0e:	bd80      	pop	{r7, pc}
 800fd10:	200000a8 	.word	0x200000a8

0800fd14 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800fd14:	b580      	push	{r7, lr}
 800fd16:	b086      	sub	sp, #24
 800fd18:	af00      	add	r7, sp, #0
 800fd1a:	60f8      	str	r0, [r7, #12]
 800fd1c:	60b9      	str	r1, [r7, #8]
 800fd1e:	4613      	mov	r3, r2
 800fd20:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800fd22:	68fb      	ldr	r3, [r7, #12]
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	d101      	bne.n	800fd2c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800fd28:	2303      	movs	r3, #3
 800fd2a:	e01f      	b.n	800fd6c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800fd2c:	68fb      	ldr	r3, [r7, #12]
 800fd2e:	2200      	movs	r2, #0
 800fd30:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800fd34:	68fb      	ldr	r3, [r7, #12]
 800fd36:	2200      	movs	r2, #0
 800fd38:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800fd3c:	68fb      	ldr	r3, [r7, #12]
 800fd3e:	2200      	movs	r2, #0
 800fd40:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800fd44:	68bb      	ldr	r3, [r7, #8]
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	d003      	beq.n	800fd52 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800fd4a:	68fb      	ldr	r3, [r7, #12]
 800fd4c:	68ba      	ldr	r2, [r7, #8]
 800fd4e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800fd52:	68fb      	ldr	r3, [r7, #12]
 800fd54:	2201      	movs	r2, #1
 800fd56:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800fd5a:	68fb      	ldr	r3, [r7, #12]
 800fd5c:	79fa      	ldrb	r2, [r7, #7]
 800fd5e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800fd60:	68f8      	ldr	r0, [r7, #12]
 800fd62:	f001 fe87 	bl	8011a74 <USBD_LL_Init>
 800fd66:	4603      	mov	r3, r0
 800fd68:	75fb      	strb	r3, [r7, #23]

  return ret;
 800fd6a:	7dfb      	ldrb	r3, [r7, #23]
}
 800fd6c:	4618      	mov	r0, r3
 800fd6e:	3718      	adds	r7, #24
 800fd70:	46bd      	mov	sp, r7
 800fd72:	bd80      	pop	{r7, pc}

0800fd74 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800fd74:	b580      	push	{r7, lr}
 800fd76:	b084      	sub	sp, #16
 800fd78:	af00      	add	r7, sp, #0
 800fd7a:	6078      	str	r0, [r7, #4]
 800fd7c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800fd7e:	2300      	movs	r3, #0
 800fd80:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800fd82:	683b      	ldr	r3, [r7, #0]
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d101      	bne.n	800fd8c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800fd88:	2303      	movs	r3, #3
 800fd8a:	e025      	b.n	800fdd8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	683a      	ldr	r2, [r7, #0]
 800fd90:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	32ae      	adds	r2, #174	@ 0xae
 800fd9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fda2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	d00f      	beq.n	800fdc8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	32ae      	adds	r2, #174	@ 0xae
 800fdb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fdb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fdb8:	f107 020e 	add.w	r2, r7, #14
 800fdbc:	4610      	mov	r0, r2
 800fdbe:	4798      	blx	r3
 800fdc0:	4602      	mov	r2, r0
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800fdce:	1c5a      	adds	r2, r3, #1
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800fdd6:	2300      	movs	r3, #0
}
 800fdd8:	4618      	mov	r0, r3
 800fdda:	3710      	adds	r7, #16
 800fddc:	46bd      	mov	sp, r7
 800fdde:	bd80      	pop	{r7, pc}

0800fde0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800fde0:	b580      	push	{r7, lr}
 800fde2:	b082      	sub	sp, #8
 800fde4:	af00      	add	r7, sp, #0
 800fde6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800fde8:	6878      	ldr	r0, [r7, #4]
 800fdea:	f001 fe8f 	bl	8011b0c <USBD_LL_Start>
 800fdee:	4603      	mov	r3, r0
}
 800fdf0:	4618      	mov	r0, r3
 800fdf2:	3708      	adds	r7, #8
 800fdf4:	46bd      	mov	sp, r7
 800fdf6:	bd80      	pop	{r7, pc}

0800fdf8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800fdf8:	b480      	push	{r7}
 800fdfa:	b083      	sub	sp, #12
 800fdfc:	af00      	add	r7, sp, #0
 800fdfe:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800fe00:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800fe02:	4618      	mov	r0, r3
 800fe04:	370c      	adds	r7, #12
 800fe06:	46bd      	mov	sp, r7
 800fe08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe0c:	4770      	bx	lr

0800fe0e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fe0e:	b580      	push	{r7, lr}
 800fe10:	b084      	sub	sp, #16
 800fe12:	af00      	add	r7, sp, #0
 800fe14:	6078      	str	r0, [r7, #4]
 800fe16:	460b      	mov	r3, r1
 800fe18:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800fe1a:	2300      	movs	r3, #0
 800fe1c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	d009      	beq.n	800fe3c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	78fa      	ldrb	r2, [r7, #3]
 800fe32:	4611      	mov	r1, r2
 800fe34:	6878      	ldr	r0, [r7, #4]
 800fe36:	4798      	blx	r3
 800fe38:	4603      	mov	r3, r0
 800fe3a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800fe3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe3e:	4618      	mov	r0, r3
 800fe40:	3710      	adds	r7, #16
 800fe42:	46bd      	mov	sp, r7
 800fe44:	bd80      	pop	{r7, pc}

0800fe46 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fe46:	b580      	push	{r7, lr}
 800fe48:	b084      	sub	sp, #16
 800fe4a:	af00      	add	r7, sp, #0
 800fe4c:	6078      	str	r0, [r7, #4]
 800fe4e:	460b      	mov	r3, r1
 800fe50:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800fe52:	2300      	movs	r3, #0
 800fe54:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fe5c:	685b      	ldr	r3, [r3, #4]
 800fe5e:	78fa      	ldrb	r2, [r7, #3]
 800fe60:	4611      	mov	r1, r2
 800fe62:	6878      	ldr	r0, [r7, #4]
 800fe64:	4798      	blx	r3
 800fe66:	4603      	mov	r3, r0
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d001      	beq.n	800fe70 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800fe6c:	2303      	movs	r3, #3
 800fe6e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800fe70:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe72:	4618      	mov	r0, r3
 800fe74:	3710      	adds	r7, #16
 800fe76:	46bd      	mov	sp, r7
 800fe78:	bd80      	pop	{r7, pc}

0800fe7a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800fe7a:	b580      	push	{r7, lr}
 800fe7c:	b084      	sub	sp, #16
 800fe7e:	af00      	add	r7, sp, #0
 800fe80:	6078      	str	r0, [r7, #4]
 800fe82:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800fe8a:	6839      	ldr	r1, [r7, #0]
 800fe8c:	4618      	mov	r0, r3
 800fe8e:	f001 f90c 	bl	80110aa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	2201      	movs	r2, #1
 800fe96:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800fea0:	461a      	mov	r2, r3
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800feae:	f003 031f 	and.w	r3, r3, #31
 800feb2:	2b02      	cmp	r3, #2
 800feb4:	d01a      	beq.n	800feec <USBD_LL_SetupStage+0x72>
 800feb6:	2b02      	cmp	r3, #2
 800feb8:	d822      	bhi.n	800ff00 <USBD_LL_SetupStage+0x86>
 800feba:	2b00      	cmp	r3, #0
 800febc:	d002      	beq.n	800fec4 <USBD_LL_SetupStage+0x4a>
 800febe:	2b01      	cmp	r3, #1
 800fec0:	d00a      	beq.n	800fed8 <USBD_LL_SetupStage+0x5e>
 800fec2:	e01d      	b.n	800ff00 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800feca:	4619      	mov	r1, r3
 800fecc:	6878      	ldr	r0, [r7, #4]
 800fece:	f000 fb63 	bl	8010598 <USBD_StdDevReq>
 800fed2:	4603      	mov	r3, r0
 800fed4:	73fb      	strb	r3, [r7, #15]
      break;
 800fed6:	e020      	b.n	800ff1a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800fede:	4619      	mov	r1, r3
 800fee0:	6878      	ldr	r0, [r7, #4]
 800fee2:	f000 fbcb 	bl	801067c <USBD_StdItfReq>
 800fee6:	4603      	mov	r3, r0
 800fee8:	73fb      	strb	r3, [r7, #15]
      break;
 800feea:	e016      	b.n	800ff1a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800fef2:	4619      	mov	r1, r3
 800fef4:	6878      	ldr	r0, [r7, #4]
 800fef6:	f000 fc2d 	bl	8010754 <USBD_StdEPReq>
 800fefa:	4603      	mov	r3, r0
 800fefc:	73fb      	strb	r3, [r7, #15]
      break;
 800fefe:	e00c      	b.n	800ff1a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ff06:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800ff0a:	b2db      	uxtb	r3, r3
 800ff0c:	4619      	mov	r1, r3
 800ff0e:	6878      	ldr	r0, [r7, #4]
 800ff10:	f001 fe5c 	bl	8011bcc <USBD_LL_StallEP>
 800ff14:	4603      	mov	r3, r0
 800ff16:	73fb      	strb	r3, [r7, #15]
      break;
 800ff18:	bf00      	nop
  }

  return ret;
 800ff1a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff1c:	4618      	mov	r0, r3
 800ff1e:	3710      	adds	r7, #16
 800ff20:	46bd      	mov	sp, r7
 800ff22:	bd80      	pop	{r7, pc}

0800ff24 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ff24:	b580      	push	{r7, lr}
 800ff26:	b086      	sub	sp, #24
 800ff28:	af00      	add	r7, sp, #0
 800ff2a:	60f8      	str	r0, [r7, #12]
 800ff2c:	460b      	mov	r3, r1
 800ff2e:	607a      	str	r2, [r7, #4]
 800ff30:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800ff32:	2300      	movs	r3, #0
 800ff34:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800ff36:	7afb      	ldrb	r3, [r7, #11]
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	d16e      	bne.n	801001a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800ff3c:	68fb      	ldr	r3, [r7, #12]
 800ff3e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800ff42:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ff44:	68fb      	ldr	r3, [r7, #12]
 800ff46:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ff4a:	2b03      	cmp	r3, #3
 800ff4c:	f040 8098 	bne.w	8010080 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800ff50:	693b      	ldr	r3, [r7, #16]
 800ff52:	689a      	ldr	r2, [r3, #8]
 800ff54:	693b      	ldr	r3, [r7, #16]
 800ff56:	68db      	ldr	r3, [r3, #12]
 800ff58:	429a      	cmp	r2, r3
 800ff5a:	d913      	bls.n	800ff84 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800ff5c:	693b      	ldr	r3, [r7, #16]
 800ff5e:	689a      	ldr	r2, [r3, #8]
 800ff60:	693b      	ldr	r3, [r7, #16]
 800ff62:	68db      	ldr	r3, [r3, #12]
 800ff64:	1ad2      	subs	r2, r2, r3
 800ff66:	693b      	ldr	r3, [r7, #16]
 800ff68:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ff6a:	693b      	ldr	r3, [r7, #16]
 800ff6c:	68da      	ldr	r2, [r3, #12]
 800ff6e:	693b      	ldr	r3, [r7, #16]
 800ff70:	689b      	ldr	r3, [r3, #8]
 800ff72:	4293      	cmp	r3, r2
 800ff74:	bf28      	it	cs
 800ff76:	4613      	movcs	r3, r2
 800ff78:	461a      	mov	r2, r3
 800ff7a:	6879      	ldr	r1, [r7, #4]
 800ff7c:	68f8      	ldr	r0, [r7, #12]
 800ff7e:	f001 f994 	bl	80112aa <USBD_CtlContinueRx>
 800ff82:	e07d      	b.n	8010080 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800ff84:	68fb      	ldr	r3, [r7, #12]
 800ff86:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ff8a:	f003 031f 	and.w	r3, r3, #31
 800ff8e:	2b02      	cmp	r3, #2
 800ff90:	d014      	beq.n	800ffbc <USBD_LL_DataOutStage+0x98>
 800ff92:	2b02      	cmp	r3, #2
 800ff94:	d81d      	bhi.n	800ffd2 <USBD_LL_DataOutStage+0xae>
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	d002      	beq.n	800ffa0 <USBD_LL_DataOutStage+0x7c>
 800ff9a:	2b01      	cmp	r3, #1
 800ff9c:	d003      	beq.n	800ffa6 <USBD_LL_DataOutStage+0x82>
 800ff9e:	e018      	b.n	800ffd2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800ffa0:	2300      	movs	r3, #0
 800ffa2:	75bb      	strb	r3, [r7, #22]
            break;
 800ffa4:	e018      	b.n	800ffd8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800ffa6:	68fb      	ldr	r3, [r7, #12]
 800ffa8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800ffac:	b2db      	uxtb	r3, r3
 800ffae:	4619      	mov	r1, r3
 800ffb0:	68f8      	ldr	r0, [r7, #12]
 800ffb2:	f000 fa64 	bl	801047e <USBD_CoreFindIF>
 800ffb6:	4603      	mov	r3, r0
 800ffb8:	75bb      	strb	r3, [r7, #22]
            break;
 800ffba:	e00d      	b.n	800ffd8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800ffbc:	68fb      	ldr	r3, [r7, #12]
 800ffbe:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800ffc2:	b2db      	uxtb	r3, r3
 800ffc4:	4619      	mov	r1, r3
 800ffc6:	68f8      	ldr	r0, [r7, #12]
 800ffc8:	f000 fa66 	bl	8010498 <USBD_CoreFindEP>
 800ffcc:	4603      	mov	r3, r0
 800ffce:	75bb      	strb	r3, [r7, #22]
            break;
 800ffd0:	e002      	b.n	800ffd8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800ffd2:	2300      	movs	r3, #0
 800ffd4:	75bb      	strb	r3, [r7, #22]
            break;
 800ffd6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800ffd8:	7dbb      	ldrb	r3, [r7, #22]
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d119      	bne.n	8010012 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ffde:	68fb      	ldr	r3, [r7, #12]
 800ffe0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ffe4:	b2db      	uxtb	r3, r3
 800ffe6:	2b03      	cmp	r3, #3
 800ffe8:	d113      	bne.n	8010012 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800ffea:	7dba      	ldrb	r2, [r7, #22]
 800ffec:	68fb      	ldr	r3, [r7, #12]
 800ffee:	32ae      	adds	r2, #174	@ 0xae
 800fff0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fff4:	691b      	ldr	r3, [r3, #16]
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	d00b      	beq.n	8010012 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800fffa:	7dba      	ldrb	r2, [r7, #22]
 800fffc:	68fb      	ldr	r3, [r7, #12]
 800fffe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8010002:	7dba      	ldrb	r2, [r7, #22]
 8010004:	68fb      	ldr	r3, [r7, #12]
 8010006:	32ae      	adds	r2, #174	@ 0xae
 8010008:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801000c:	691b      	ldr	r3, [r3, #16]
 801000e:	68f8      	ldr	r0, [r7, #12]
 8010010:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8010012:	68f8      	ldr	r0, [r7, #12]
 8010014:	f001 f95a 	bl	80112cc <USBD_CtlSendStatus>
 8010018:	e032      	b.n	8010080 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 801001a:	7afb      	ldrb	r3, [r7, #11]
 801001c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010020:	b2db      	uxtb	r3, r3
 8010022:	4619      	mov	r1, r3
 8010024:	68f8      	ldr	r0, [r7, #12]
 8010026:	f000 fa37 	bl	8010498 <USBD_CoreFindEP>
 801002a:	4603      	mov	r3, r0
 801002c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801002e:	7dbb      	ldrb	r3, [r7, #22]
 8010030:	2bff      	cmp	r3, #255	@ 0xff
 8010032:	d025      	beq.n	8010080 <USBD_LL_DataOutStage+0x15c>
 8010034:	7dbb      	ldrb	r3, [r7, #22]
 8010036:	2b00      	cmp	r3, #0
 8010038:	d122      	bne.n	8010080 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801003a:	68fb      	ldr	r3, [r7, #12]
 801003c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010040:	b2db      	uxtb	r3, r3
 8010042:	2b03      	cmp	r3, #3
 8010044:	d117      	bne.n	8010076 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8010046:	7dba      	ldrb	r2, [r7, #22]
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	32ae      	adds	r2, #174	@ 0xae
 801004c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010050:	699b      	ldr	r3, [r3, #24]
 8010052:	2b00      	cmp	r3, #0
 8010054:	d00f      	beq.n	8010076 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8010056:	7dba      	ldrb	r2, [r7, #22]
 8010058:	68fb      	ldr	r3, [r7, #12]
 801005a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 801005e:	7dba      	ldrb	r2, [r7, #22]
 8010060:	68fb      	ldr	r3, [r7, #12]
 8010062:	32ae      	adds	r2, #174	@ 0xae
 8010064:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010068:	699b      	ldr	r3, [r3, #24]
 801006a:	7afa      	ldrb	r2, [r7, #11]
 801006c:	4611      	mov	r1, r2
 801006e:	68f8      	ldr	r0, [r7, #12]
 8010070:	4798      	blx	r3
 8010072:	4603      	mov	r3, r0
 8010074:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8010076:	7dfb      	ldrb	r3, [r7, #23]
 8010078:	2b00      	cmp	r3, #0
 801007a:	d001      	beq.n	8010080 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 801007c:	7dfb      	ldrb	r3, [r7, #23]
 801007e:	e000      	b.n	8010082 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8010080:	2300      	movs	r3, #0
}
 8010082:	4618      	mov	r0, r3
 8010084:	3718      	adds	r7, #24
 8010086:	46bd      	mov	sp, r7
 8010088:	bd80      	pop	{r7, pc}

0801008a <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801008a:	b580      	push	{r7, lr}
 801008c:	b086      	sub	sp, #24
 801008e:	af00      	add	r7, sp, #0
 8010090:	60f8      	str	r0, [r7, #12]
 8010092:	460b      	mov	r3, r1
 8010094:	607a      	str	r2, [r7, #4]
 8010096:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8010098:	7afb      	ldrb	r3, [r7, #11]
 801009a:	2b00      	cmp	r3, #0
 801009c:	d16f      	bne.n	801017e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 801009e:	68fb      	ldr	r3, [r7, #12]
 80100a0:	3314      	adds	r3, #20
 80100a2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80100a4:	68fb      	ldr	r3, [r7, #12]
 80100a6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80100aa:	2b02      	cmp	r3, #2
 80100ac:	d15a      	bne.n	8010164 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80100ae:	693b      	ldr	r3, [r7, #16]
 80100b0:	689a      	ldr	r2, [r3, #8]
 80100b2:	693b      	ldr	r3, [r7, #16]
 80100b4:	68db      	ldr	r3, [r3, #12]
 80100b6:	429a      	cmp	r2, r3
 80100b8:	d914      	bls.n	80100e4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80100ba:	693b      	ldr	r3, [r7, #16]
 80100bc:	689a      	ldr	r2, [r3, #8]
 80100be:	693b      	ldr	r3, [r7, #16]
 80100c0:	68db      	ldr	r3, [r3, #12]
 80100c2:	1ad2      	subs	r2, r2, r3
 80100c4:	693b      	ldr	r3, [r7, #16]
 80100c6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80100c8:	693b      	ldr	r3, [r7, #16]
 80100ca:	689b      	ldr	r3, [r3, #8]
 80100cc:	461a      	mov	r2, r3
 80100ce:	6879      	ldr	r1, [r7, #4]
 80100d0:	68f8      	ldr	r0, [r7, #12]
 80100d2:	f001 f8bc 	bl	801124e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80100d6:	2300      	movs	r3, #0
 80100d8:	2200      	movs	r2, #0
 80100da:	2100      	movs	r1, #0
 80100dc:	68f8      	ldr	r0, [r7, #12]
 80100de:	f001 fe1f 	bl	8011d20 <USBD_LL_PrepareReceive>
 80100e2:	e03f      	b.n	8010164 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80100e4:	693b      	ldr	r3, [r7, #16]
 80100e6:	68da      	ldr	r2, [r3, #12]
 80100e8:	693b      	ldr	r3, [r7, #16]
 80100ea:	689b      	ldr	r3, [r3, #8]
 80100ec:	429a      	cmp	r2, r3
 80100ee:	d11c      	bne.n	801012a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80100f0:	693b      	ldr	r3, [r7, #16]
 80100f2:	685a      	ldr	r2, [r3, #4]
 80100f4:	693b      	ldr	r3, [r7, #16]
 80100f6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80100f8:	429a      	cmp	r2, r3
 80100fa:	d316      	bcc.n	801012a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80100fc:	693b      	ldr	r3, [r7, #16]
 80100fe:	685a      	ldr	r2, [r3, #4]
 8010100:	68fb      	ldr	r3, [r7, #12]
 8010102:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8010106:	429a      	cmp	r2, r3
 8010108:	d20f      	bcs.n	801012a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801010a:	2200      	movs	r2, #0
 801010c:	2100      	movs	r1, #0
 801010e:	68f8      	ldr	r0, [r7, #12]
 8010110:	f001 f89d 	bl	801124e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8010114:	68fb      	ldr	r3, [r7, #12]
 8010116:	2200      	movs	r2, #0
 8010118:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801011c:	2300      	movs	r3, #0
 801011e:	2200      	movs	r2, #0
 8010120:	2100      	movs	r1, #0
 8010122:	68f8      	ldr	r0, [r7, #12]
 8010124:	f001 fdfc 	bl	8011d20 <USBD_LL_PrepareReceive>
 8010128:	e01c      	b.n	8010164 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801012a:	68fb      	ldr	r3, [r7, #12]
 801012c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010130:	b2db      	uxtb	r3, r3
 8010132:	2b03      	cmp	r3, #3
 8010134:	d10f      	bne.n	8010156 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8010136:	68fb      	ldr	r3, [r7, #12]
 8010138:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801013c:	68db      	ldr	r3, [r3, #12]
 801013e:	2b00      	cmp	r3, #0
 8010140:	d009      	beq.n	8010156 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8010142:	68fb      	ldr	r3, [r7, #12]
 8010144:	2200      	movs	r2, #0
 8010146:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 801014a:	68fb      	ldr	r3, [r7, #12]
 801014c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010150:	68db      	ldr	r3, [r3, #12]
 8010152:	68f8      	ldr	r0, [r7, #12]
 8010154:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8010156:	2180      	movs	r1, #128	@ 0x80
 8010158:	68f8      	ldr	r0, [r7, #12]
 801015a:	f001 fd37 	bl	8011bcc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 801015e:	68f8      	ldr	r0, [r7, #12]
 8010160:	f001 f8c7 	bl	80112f2 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8010164:	68fb      	ldr	r3, [r7, #12]
 8010166:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 801016a:	2b00      	cmp	r3, #0
 801016c:	d03a      	beq.n	80101e4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 801016e:	68f8      	ldr	r0, [r7, #12]
 8010170:	f7ff fe42 	bl	800fdf8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8010174:	68fb      	ldr	r3, [r7, #12]
 8010176:	2200      	movs	r2, #0
 8010178:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 801017c:	e032      	b.n	80101e4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 801017e:	7afb      	ldrb	r3, [r7, #11]
 8010180:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8010184:	b2db      	uxtb	r3, r3
 8010186:	4619      	mov	r1, r3
 8010188:	68f8      	ldr	r0, [r7, #12]
 801018a:	f000 f985 	bl	8010498 <USBD_CoreFindEP>
 801018e:	4603      	mov	r3, r0
 8010190:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010192:	7dfb      	ldrb	r3, [r7, #23]
 8010194:	2bff      	cmp	r3, #255	@ 0xff
 8010196:	d025      	beq.n	80101e4 <USBD_LL_DataInStage+0x15a>
 8010198:	7dfb      	ldrb	r3, [r7, #23]
 801019a:	2b00      	cmp	r3, #0
 801019c:	d122      	bne.n	80101e4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801019e:	68fb      	ldr	r3, [r7, #12]
 80101a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80101a4:	b2db      	uxtb	r3, r3
 80101a6:	2b03      	cmp	r3, #3
 80101a8:	d11c      	bne.n	80101e4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80101aa:	7dfa      	ldrb	r2, [r7, #23]
 80101ac:	68fb      	ldr	r3, [r7, #12]
 80101ae:	32ae      	adds	r2, #174	@ 0xae
 80101b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80101b4:	695b      	ldr	r3, [r3, #20]
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d014      	beq.n	80101e4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80101ba:	7dfa      	ldrb	r2, [r7, #23]
 80101bc:	68fb      	ldr	r3, [r7, #12]
 80101be:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80101c2:	7dfa      	ldrb	r2, [r7, #23]
 80101c4:	68fb      	ldr	r3, [r7, #12]
 80101c6:	32ae      	adds	r2, #174	@ 0xae
 80101c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80101cc:	695b      	ldr	r3, [r3, #20]
 80101ce:	7afa      	ldrb	r2, [r7, #11]
 80101d0:	4611      	mov	r1, r2
 80101d2:	68f8      	ldr	r0, [r7, #12]
 80101d4:	4798      	blx	r3
 80101d6:	4603      	mov	r3, r0
 80101d8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80101da:	7dbb      	ldrb	r3, [r7, #22]
 80101dc:	2b00      	cmp	r3, #0
 80101de:	d001      	beq.n	80101e4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80101e0:	7dbb      	ldrb	r3, [r7, #22]
 80101e2:	e000      	b.n	80101e6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80101e4:	2300      	movs	r3, #0
}
 80101e6:	4618      	mov	r0, r3
 80101e8:	3718      	adds	r7, #24
 80101ea:	46bd      	mov	sp, r7
 80101ec:	bd80      	pop	{r7, pc}

080101ee <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80101ee:	b580      	push	{r7, lr}
 80101f0:	b084      	sub	sp, #16
 80101f2:	af00      	add	r7, sp, #0
 80101f4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80101f6:	2300      	movs	r3, #0
 80101f8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	2201      	movs	r2, #1
 80101fe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	2200      	movs	r2, #0
 8010206:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	2200      	movs	r2, #0
 801020e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	2200      	movs	r2, #0
 8010214:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	2200      	movs	r2, #0
 801021c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010226:	2b00      	cmp	r3, #0
 8010228:	d014      	beq.n	8010254 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010230:	685b      	ldr	r3, [r3, #4]
 8010232:	2b00      	cmp	r3, #0
 8010234:	d00e      	beq.n	8010254 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801023c:	685b      	ldr	r3, [r3, #4]
 801023e:	687a      	ldr	r2, [r7, #4]
 8010240:	6852      	ldr	r2, [r2, #4]
 8010242:	b2d2      	uxtb	r2, r2
 8010244:	4611      	mov	r1, r2
 8010246:	6878      	ldr	r0, [r7, #4]
 8010248:	4798      	blx	r3
 801024a:	4603      	mov	r3, r0
 801024c:	2b00      	cmp	r3, #0
 801024e:	d001      	beq.n	8010254 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8010250:	2303      	movs	r3, #3
 8010252:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010254:	2340      	movs	r3, #64	@ 0x40
 8010256:	2200      	movs	r2, #0
 8010258:	2100      	movs	r1, #0
 801025a:	6878      	ldr	r0, [r7, #4]
 801025c:	f001 fc71 	bl	8011b42 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	2201      	movs	r2, #1
 8010264:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	2240      	movs	r2, #64	@ 0x40
 801026c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010270:	2340      	movs	r3, #64	@ 0x40
 8010272:	2200      	movs	r2, #0
 8010274:	2180      	movs	r1, #128	@ 0x80
 8010276:	6878      	ldr	r0, [r7, #4]
 8010278:	f001 fc63 	bl	8011b42 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	2201      	movs	r2, #1
 8010280:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	2240      	movs	r2, #64	@ 0x40
 8010286:	621a      	str	r2, [r3, #32]

  return ret;
 8010288:	7bfb      	ldrb	r3, [r7, #15]
}
 801028a:	4618      	mov	r0, r3
 801028c:	3710      	adds	r7, #16
 801028e:	46bd      	mov	sp, r7
 8010290:	bd80      	pop	{r7, pc}

08010292 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8010292:	b480      	push	{r7}
 8010294:	b083      	sub	sp, #12
 8010296:	af00      	add	r7, sp, #0
 8010298:	6078      	str	r0, [r7, #4]
 801029a:	460b      	mov	r3, r1
 801029c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	78fa      	ldrb	r2, [r7, #3]
 80102a2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80102a4:	2300      	movs	r3, #0
}
 80102a6:	4618      	mov	r0, r3
 80102a8:	370c      	adds	r7, #12
 80102aa:	46bd      	mov	sp, r7
 80102ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102b0:	4770      	bx	lr

080102b2 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80102b2:	b480      	push	{r7}
 80102b4:	b083      	sub	sp, #12
 80102b6:	af00      	add	r7, sp, #0
 80102b8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80102c0:	b2db      	uxtb	r3, r3
 80102c2:	2b04      	cmp	r3, #4
 80102c4:	d006      	beq.n	80102d4 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80102cc:	b2da      	uxtb	r2, r3
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	2204      	movs	r2, #4
 80102d8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80102dc:	2300      	movs	r3, #0
}
 80102de:	4618      	mov	r0, r3
 80102e0:	370c      	adds	r7, #12
 80102e2:	46bd      	mov	sp, r7
 80102e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102e8:	4770      	bx	lr

080102ea <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80102ea:	b480      	push	{r7}
 80102ec:	b083      	sub	sp, #12
 80102ee:	af00      	add	r7, sp, #0
 80102f0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80102f8:	b2db      	uxtb	r3, r3
 80102fa:	2b04      	cmp	r3, #4
 80102fc:	d106      	bne.n	801030c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8010304:	b2da      	uxtb	r2, r3
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 801030c:	2300      	movs	r3, #0
}
 801030e:	4618      	mov	r0, r3
 8010310:	370c      	adds	r7, #12
 8010312:	46bd      	mov	sp, r7
 8010314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010318:	4770      	bx	lr

0801031a <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801031a:	b580      	push	{r7, lr}
 801031c:	b082      	sub	sp, #8
 801031e:	af00      	add	r7, sp, #0
 8010320:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010328:	b2db      	uxtb	r3, r3
 801032a:	2b03      	cmp	r3, #3
 801032c:	d110      	bne.n	8010350 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010334:	2b00      	cmp	r3, #0
 8010336:	d00b      	beq.n	8010350 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801033e:	69db      	ldr	r3, [r3, #28]
 8010340:	2b00      	cmp	r3, #0
 8010342:	d005      	beq.n	8010350 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801034a:	69db      	ldr	r3, [r3, #28]
 801034c:	6878      	ldr	r0, [r7, #4]
 801034e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8010350:	2300      	movs	r3, #0
}
 8010352:	4618      	mov	r0, r3
 8010354:	3708      	adds	r7, #8
 8010356:	46bd      	mov	sp, r7
 8010358:	bd80      	pop	{r7, pc}

0801035a <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 801035a:	b580      	push	{r7, lr}
 801035c:	b082      	sub	sp, #8
 801035e:	af00      	add	r7, sp, #0
 8010360:	6078      	str	r0, [r7, #4]
 8010362:	460b      	mov	r3, r1
 8010364:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	32ae      	adds	r2, #174	@ 0xae
 8010370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010374:	2b00      	cmp	r3, #0
 8010376:	d101      	bne.n	801037c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8010378:	2303      	movs	r3, #3
 801037a:	e01c      	b.n	80103b6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010382:	b2db      	uxtb	r3, r3
 8010384:	2b03      	cmp	r3, #3
 8010386:	d115      	bne.n	80103b4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	32ae      	adds	r2, #174	@ 0xae
 8010392:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010396:	6a1b      	ldr	r3, [r3, #32]
 8010398:	2b00      	cmp	r3, #0
 801039a:	d00b      	beq.n	80103b4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	32ae      	adds	r2, #174	@ 0xae
 80103a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80103aa:	6a1b      	ldr	r3, [r3, #32]
 80103ac:	78fa      	ldrb	r2, [r7, #3]
 80103ae:	4611      	mov	r1, r2
 80103b0:	6878      	ldr	r0, [r7, #4]
 80103b2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80103b4:	2300      	movs	r3, #0
}
 80103b6:	4618      	mov	r0, r3
 80103b8:	3708      	adds	r7, #8
 80103ba:	46bd      	mov	sp, r7
 80103bc:	bd80      	pop	{r7, pc}

080103be <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80103be:	b580      	push	{r7, lr}
 80103c0:	b082      	sub	sp, #8
 80103c2:	af00      	add	r7, sp, #0
 80103c4:	6078      	str	r0, [r7, #4]
 80103c6:	460b      	mov	r3, r1
 80103c8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	32ae      	adds	r2, #174	@ 0xae
 80103d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80103d8:	2b00      	cmp	r3, #0
 80103da:	d101      	bne.n	80103e0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80103dc:	2303      	movs	r3, #3
 80103de:	e01c      	b.n	801041a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80103e6:	b2db      	uxtb	r3, r3
 80103e8:	2b03      	cmp	r3, #3
 80103ea:	d115      	bne.n	8010418 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	32ae      	adds	r2, #174	@ 0xae
 80103f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80103fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d00b      	beq.n	8010418 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	32ae      	adds	r2, #174	@ 0xae
 801040a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801040e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010410:	78fa      	ldrb	r2, [r7, #3]
 8010412:	4611      	mov	r1, r2
 8010414:	6878      	ldr	r0, [r7, #4]
 8010416:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8010418:	2300      	movs	r3, #0
}
 801041a:	4618      	mov	r0, r3
 801041c:	3708      	adds	r7, #8
 801041e:	46bd      	mov	sp, r7
 8010420:	bd80      	pop	{r7, pc}

08010422 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8010422:	b480      	push	{r7}
 8010424:	b083      	sub	sp, #12
 8010426:	af00      	add	r7, sp, #0
 8010428:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801042a:	2300      	movs	r3, #0
}
 801042c:	4618      	mov	r0, r3
 801042e:	370c      	adds	r7, #12
 8010430:	46bd      	mov	sp, r7
 8010432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010436:	4770      	bx	lr

08010438 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8010438:	b580      	push	{r7, lr}
 801043a:	b084      	sub	sp, #16
 801043c:	af00      	add	r7, sp, #0
 801043e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8010440:	2300      	movs	r3, #0
 8010442:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	2201      	movs	r2, #1
 8010448:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010452:	2b00      	cmp	r3, #0
 8010454:	d00e      	beq.n	8010474 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801045c:	685b      	ldr	r3, [r3, #4]
 801045e:	687a      	ldr	r2, [r7, #4]
 8010460:	6852      	ldr	r2, [r2, #4]
 8010462:	b2d2      	uxtb	r2, r2
 8010464:	4611      	mov	r1, r2
 8010466:	6878      	ldr	r0, [r7, #4]
 8010468:	4798      	blx	r3
 801046a:	4603      	mov	r3, r0
 801046c:	2b00      	cmp	r3, #0
 801046e:	d001      	beq.n	8010474 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8010470:	2303      	movs	r3, #3
 8010472:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8010474:	7bfb      	ldrb	r3, [r7, #15]
}
 8010476:	4618      	mov	r0, r3
 8010478:	3710      	adds	r7, #16
 801047a:	46bd      	mov	sp, r7
 801047c:	bd80      	pop	{r7, pc}

0801047e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801047e:	b480      	push	{r7}
 8010480:	b083      	sub	sp, #12
 8010482:	af00      	add	r7, sp, #0
 8010484:	6078      	str	r0, [r7, #4]
 8010486:	460b      	mov	r3, r1
 8010488:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 801048a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801048c:	4618      	mov	r0, r3
 801048e:	370c      	adds	r7, #12
 8010490:	46bd      	mov	sp, r7
 8010492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010496:	4770      	bx	lr

08010498 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8010498:	b480      	push	{r7}
 801049a:	b083      	sub	sp, #12
 801049c:	af00      	add	r7, sp, #0
 801049e:	6078      	str	r0, [r7, #4]
 80104a0:	460b      	mov	r3, r1
 80104a2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80104a4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80104a6:	4618      	mov	r0, r3
 80104a8:	370c      	adds	r7, #12
 80104aa:	46bd      	mov	sp, r7
 80104ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104b0:	4770      	bx	lr

080104b2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80104b2:	b580      	push	{r7, lr}
 80104b4:	b086      	sub	sp, #24
 80104b6:	af00      	add	r7, sp, #0
 80104b8:	6078      	str	r0, [r7, #4]
 80104ba:	460b      	mov	r3, r1
 80104bc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80104c6:	2300      	movs	r3, #0
 80104c8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80104ca:	68fb      	ldr	r3, [r7, #12]
 80104cc:	885b      	ldrh	r3, [r3, #2]
 80104ce:	b29b      	uxth	r3, r3
 80104d0:	68fa      	ldr	r2, [r7, #12]
 80104d2:	7812      	ldrb	r2, [r2, #0]
 80104d4:	4293      	cmp	r3, r2
 80104d6:	d91f      	bls.n	8010518 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80104d8:	68fb      	ldr	r3, [r7, #12]
 80104da:	781b      	ldrb	r3, [r3, #0]
 80104dc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80104de:	e013      	b.n	8010508 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80104e0:	f107 030a 	add.w	r3, r7, #10
 80104e4:	4619      	mov	r1, r3
 80104e6:	6978      	ldr	r0, [r7, #20]
 80104e8:	f000 f81b 	bl	8010522 <USBD_GetNextDesc>
 80104ec:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80104ee:	697b      	ldr	r3, [r7, #20]
 80104f0:	785b      	ldrb	r3, [r3, #1]
 80104f2:	2b05      	cmp	r3, #5
 80104f4:	d108      	bne.n	8010508 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80104f6:	697b      	ldr	r3, [r7, #20]
 80104f8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80104fa:	693b      	ldr	r3, [r7, #16]
 80104fc:	789b      	ldrb	r3, [r3, #2]
 80104fe:	78fa      	ldrb	r2, [r7, #3]
 8010500:	429a      	cmp	r2, r3
 8010502:	d008      	beq.n	8010516 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8010504:	2300      	movs	r3, #0
 8010506:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8010508:	68fb      	ldr	r3, [r7, #12]
 801050a:	885b      	ldrh	r3, [r3, #2]
 801050c:	b29a      	uxth	r2, r3
 801050e:	897b      	ldrh	r3, [r7, #10]
 8010510:	429a      	cmp	r2, r3
 8010512:	d8e5      	bhi.n	80104e0 <USBD_GetEpDesc+0x2e>
 8010514:	e000      	b.n	8010518 <USBD_GetEpDesc+0x66>
          break;
 8010516:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8010518:	693b      	ldr	r3, [r7, #16]
}
 801051a:	4618      	mov	r0, r3
 801051c:	3718      	adds	r7, #24
 801051e:	46bd      	mov	sp, r7
 8010520:	bd80      	pop	{r7, pc}

08010522 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8010522:	b480      	push	{r7}
 8010524:	b085      	sub	sp, #20
 8010526:	af00      	add	r7, sp, #0
 8010528:	6078      	str	r0, [r7, #4]
 801052a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8010530:	683b      	ldr	r3, [r7, #0]
 8010532:	881b      	ldrh	r3, [r3, #0]
 8010534:	68fa      	ldr	r2, [r7, #12]
 8010536:	7812      	ldrb	r2, [r2, #0]
 8010538:	4413      	add	r3, r2
 801053a:	b29a      	uxth	r2, r3
 801053c:	683b      	ldr	r3, [r7, #0]
 801053e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8010540:	68fb      	ldr	r3, [r7, #12]
 8010542:	781b      	ldrb	r3, [r3, #0]
 8010544:	461a      	mov	r2, r3
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	4413      	add	r3, r2
 801054a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 801054c:	68fb      	ldr	r3, [r7, #12]
}
 801054e:	4618      	mov	r0, r3
 8010550:	3714      	adds	r7, #20
 8010552:	46bd      	mov	sp, r7
 8010554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010558:	4770      	bx	lr

0801055a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 801055a:	b480      	push	{r7}
 801055c:	b087      	sub	sp, #28
 801055e:	af00      	add	r7, sp, #0
 8010560:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8010566:	697b      	ldr	r3, [r7, #20]
 8010568:	781b      	ldrb	r3, [r3, #0]
 801056a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 801056c:	697b      	ldr	r3, [r7, #20]
 801056e:	3301      	adds	r3, #1
 8010570:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8010572:	697b      	ldr	r3, [r7, #20]
 8010574:	781b      	ldrb	r3, [r3, #0]
 8010576:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8010578:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 801057c:	021b      	lsls	r3, r3, #8
 801057e:	b21a      	sxth	r2, r3
 8010580:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010584:	4313      	orrs	r3, r2
 8010586:	b21b      	sxth	r3, r3
 8010588:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 801058a:	89fb      	ldrh	r3, [r7, #14]
}
 801058c:	4618      	mov	r0, r3
 801058e:	371c      	adds	r7, #28
 8010590:	46bd      	mov	sp, r7
 8010592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010596:	4770      	bx	lr

08010598 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010598:	b580      	push	{r7, lr}
 801059a:	b084      	sub	sp, #16
 801059c:	af00      	add	r7, sp, #0
 801059e:	6078      	str	r0, [r7, #4]
 80105a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80105a2:	2300      	movs	r3, #0
 80105a4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80105a6:	683b      	ldr	r3, [r7, #0]
 80105a8:	781b      	ldrb	r3, [r3, #0]
 80105aa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80105ae:	2b40      	cmp	r3, #64	@ 0x40
 80105b0:	d005      	beq.n	80105be <USBD_StdDevReq+0x26>
 80105b2:	2b40      	cmp	r3, #64	@ 0x40
 80105b4:	d857      	bhi.n	8010666 <USBD_StdDevReq+0xce>
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	d00f      	beq.n	80105da <USBD_StdDevReq+0x42>
 80105ba:	2b20      	cmp	r3, #32
 80105bc:	d153      	bne.n	8010666 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	32ae      	adds	r2, #174	@ 0xae
 80105c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80105cc:	689b      	ldr	r3, [r3, #8]
 80105ce:	6839      	ldr	r1, [r7, #0]
 80105d0:	6878      	ldr	r0, [r7, #4]
 80105d2:	4798      	blx	r3
 80105d4:	4603      	mov	r3, r0
 80105d6:	73fb      	strb	r3, [r7, #15]
      break;
 80105d8:	e04a      	b.n	8010670 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80105da:	683b      	ldr	r3, [r7, #0]
 80105dc:	785b      	ldrb	r3, [r3, #1]
 80105de:	2b09      	cmp	r3, #9
 80105e0:	d83b      	bhi.n	801065a <USBD_StdDevReq+0xc2>
 80105e2:	a201      	add	r2, pc, #4	@ (adr r2, 80105e8 <USBD_StdDevReq+0x50>)
 80105e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80105e8:	0801063d 	.word	0x0801063d
 80105ec:	08010651 	.word	0x08010651
 80105f0:	0801065b 	.word	0x0801065b
 80105f4:	08010647 	.word	0x08010647
 80105f8:	0801065b 	.word	0x0801065b
 80105fc:	0801061b 	.word	0x0801061b
 8010600:	08010611 	.word	0x08010611
 8010604:	0801065b 	.word	0x0801065b
 8010608:	08010633 	.word	0x08010633
 801060c:	08010625 	.word	0x08010625
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8010610:	6839      	ldr	r1, [r7, #0]
 8010612:	6878      	ldr	r0, [r7, #4]
 8010614:	f000 fa3c 	bl	8010a90 <USBD_GetDescriptor>
          break;
 8010618:	e024      	b.n	8010664 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801061a:	6839      	ldr	r1, [r7, #0]
 801061c:	6878      	ldr	r0, [r7, #4]
 801061e:	f000 fba1 	bl	8010d64 <USBD_SetAddress>
          break;
 8010622:	e01f      	b.n	8010664 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8010624:	6839      	ldr	r1, [r7, #0]
 8010626:	6878      	ldr	r0, [r7, #4]
 8010628:	f000 fbe0 	bl	8010dec <USBD_SetConfig>
 801062c:	4603      	mov	r3, r0
 801062e:	73fb      	strb	r3, [r7, #15]
          break;
 8010630:	e018      	b.n	8010664 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8010632:	6839      	ldr	r1, [r7, #0]
 8010634:	6878      	ldr	r0, [r7, #4]
 8010636:	f000 fc83 	bl	8010f40 <USBD_GetConfig>
          break;
 801063a:	e013      	b.n	8010664 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801063c:	6839      	ldr	r1, [r7, #0]
 801063e:	6878      	ldr	r0, [r7, #4]
 8010640:	f000 fcb4 	bl	8010fac <USBD_GetStatus>
          break;
 8010644:	e00e      	b.n	8010664 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8010646:	6839      	ldr	r1, [r7, #0]
 8010648:	6878      	ldr	r0, [r7, #4]
 801064a:	f000 fce3 	bl	8011014 <USBD_SetFeature>
          break;
 801064e:	e009      	b.n	8010664 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8010650:	6839      	ldr	r1, [r7, #0]
 8010652:	6878      	ldr	r0, [r7, #4]
 8010654:	f000 fd07 	bl	8011066 <USBD_ClrFeature>
          break;
 8010658:	e004      	b.n	8010664 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 801065a:	6839      	ldr	r1, [r7, #0]
 801065c:	6878      	ldr	r0, [r7, #4]
 801065e:	f000 fd5e 	bl	801111e <USBD_CtlError>
          break;
 8010662:	bf00      	nop
      }
      break;
 8010664:	e004      	b.n	8010670 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8010666:	6839      	ldr	r1, [r7, #0]
 8010668:	6878      	ldr	r0, [r7, #4]
 801066a:	f000 fd58 	bl	801111e <USBD_CtlError>
      break;
 801066e:	bf00      	nop
  }

  return ret;
 8010670:	7bfb      	ldrb	r3, [r7, #15]
}
 8010672:	4618      	mov	r0, r3
 8010674:	3710      	adds	r7, #16
 8010676:	46bd      	mov	sp, r7
 8010678:	bd80      	pop	{r7, pc}
 801067a:	bf00      	nop

0801067c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801067c:	b580      	push	{r7, lr}
 801067e:	b084      	sub	sp, #16
 8010680:	af00      	add	r7, sp, #0
 8010682:	6078      	str	r0, [r7, #4]
 8010684:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010686:	2300      	movs	r3, #0
 8010688:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801068a:	683b      	ldr	r3, [r7, #0]
 801068c:	781b      	ldrb	r3, [r3, #0]
 801068e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8010692:	2b40      	cmp	r3, #64	@ 0x40
 8010694:	d005      	beq.n	80106a2 <USBD_StdItfReq+0x26>
 8010696:	2b40      	cmp	r3, #64	@ 0x40
 8010698:	d852      	bhi.n	8010740 <USBD_StdItfReq+0xc4>
 801069a:	2b00      	cmp	r3, #0
 801069c:	d001      	beq.n	80106a2 <USBD_StdItfReq+0x26>
 801069e:	2b20      	cmp	r3, #32
 80106a0:	d14e      	bne.n	8010740 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80106a8:	b2db      	uxtb	r3, r3
 80106aa:	3b01      	subs	r3, #1
 80106ac:	2b02      	cmp	r3, #2
 80106ae:	d840      	bhi.n	8010732 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80106b0:	683b      	ldr	r3, [r7, #0]
 80106b2:	889b      	ldrh	r3, [r3, #4]
 80106b4:	b2db      	uxtb	r3, r3
 80106b6:	2b01      	cmp	r3, #1
 80106b8:	d836      	bhi.n	8010728 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80106ba:	683b      	ldr	r3, [r7, #0]
 80106bc:	889b      	ldrh	r3, [r3, #4]
 80106be:	b2db      	uxtb	r3, r3
 80106c0:	4619      	mov	r1, r3
 80106c2:	6878      	ldr	r0, [r7, #4]
 80106c4:	f7ff fedb 	bl	801047e <USBD_CoreFindIF>
 80106c8:	4603      	mov	r3, r0
 80106ca:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80106cc:	7bbb      	ldrb	r3, [r7, #14]
 80106ce:	2bff      	cmp	r3, #255	@ 0xff
 80106d0:	d01d      	beq.n	801070e <USBD_StdItfReq+0x92>
 80106d2:	7bbb      	ldrb	r3, [r7, #14]
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d11a      	bne.n	801070e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80106d8:	7bba      	ldrb	r2, [r7, #14]
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	32ae      	adds	r2, #174	@ 0xae
 80106de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80106e2:	689b      	ldr	r3, [r3, #8]
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	d00f      	beq.n	8010708 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80106e8:	7bba      	ldrb	r2, [r7, #14]
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80106f0:	7bba      	ldrb	r2, [r7, #14]
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	32ae      	adds	r2, #174	@ 0xae
 80106f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80106fa:	689b      	ldr	r3, [r3, #8]
 80106fc:	6839      	ldr	r1, [r7, #0]
 80106fe:	6878      	ldr	r0, [r7, #4]
 8010700:	4798      	blx	r3
 8010702:	4603      	mov	r3, r0
 8010704:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8010706:	e004      	b.n	8010712 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8010708:	2303      	movs	r3, #3
 801070a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 801070c:	e001      	b.n	8010712 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 801070e:	2303      	movs	r3, #3
 8010710:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8010712:	683b      	ldr	r3, [r7, #0]
 8010714:	88db      	ldrh	r3, [r3, #6]
 8010716:	2b00      	cmp	r3, #0
 8010718:	d110      	bne.n	801073c <USBD_StdItfReq+0xc0>
 801071a:	7bfb      	ldrb	r3, [r7, #15]
 801071c:	2b00      	cmp	r3, #0
 801071e:	d10d      	bne.n	801073c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8010720:	6878      	ldr	r0, [r7, #4]
 8010722:	f000 fdd3 	bl	80112cc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8010726:	e009      	b.n	801073c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8010728:	6839      	ldr	r1, [r7, #0]
 801072a:	6878      	ldr	r0, [r7, #4]
 801072c:	f000 fcf7 	bl	801111e <USBD_CtlError>
          break;
 8010730:	e004      	b.n	801073c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8010732:	6839      	ldr	r1, [r7, #0]
 8010734:	6878      	ldr	r0, [r7, #4]
 8010736:	f000 fcf2 	bl	801111e <USBD_CtlError>
          break;
 801073a:	e000      	b.n	801073e <USBD_StdItfReq+0xc2>
          break;
 801073c:	bf00      	nop
      }
      break;
 801073e:	e004      	b.n	801074a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8010740:	6839      	ldr	r1, [r7, #0]
 8010742:	6878      	ldr	r0, [r7, #4]
 8010744:	f000 fceb 	bl	801111e <USBD_CtlError>
      break;
 8010748:	bf00      	nop
  }

  return ret;
 801074a:	7bfb      	ldrb	r3, [r7, #15]
}
 801074c:	4618      	mov	r0, r3
 801074e:	3710      	adds	r7, #16
 8010750:	46bd      	mov	sp, r7
 8010752:	bd80      	pop	{r7, pc}

08010754 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010754:	b580      	push	{r7, lr}
 8010756:	b084      	sub	sp, #16
 8010758:	af00      	add	r7, sp, #0
 801075a:	6078      	str	r0, [r7, #4]
 801075c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 801075e:	2300      	movs	r3, #0
 8010760:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8010762:	683b      	ldr	r3, [r7, #0]
 8010764:	889b      	ldrh	r3, [r3, #4]
 8010766:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010768:	683b      	ldr	r3, [r7, #0]
 801076a:	781b      	ldrb	r3, [r3, #0]
 801076c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8010770:	2b40      	cmp	r3, #64	@ 0x40
 8010772:	d007      	beq.n	8010784 <USBD_StdEPReq+0x30>
 8010774:	2b40      	cmp	r3, #64	@ 0x40
 8010776:	f200 817f 	bhi.w	8010a78 <USBD_StdEPReq+0x324>
 801077a:	2b00      	cmp	r3, #0
 801077c:	d02a      	beq.n	80107d4 <USBD_StdEPReq+0x80>
 801077e:	2b20      	cmp	r3, #32
 8010780:	f040 817a 	bne.w	8010a78 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8010784:	7bbb      	ldrb	r3, [r7, #14]
 8010786:	4619      	mov	r1, r3
 8010788:	6878      	ldr	r0, [r7, #4]
 801078a:	f7ff fe85 	bl	8010498 <USBD_CoreFindEP>
 801078e:	4603      	mov	r3, r0
 8010790:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010792:	7b7b      	ldrb	r3, [r7, #13]
 8010794:	2bff      	cmp	r3, #255	@ 0xff
 8010796:	f000 8174 	beq.w	8010a82 <USBD_StdEPReq+0x32e>
 801079a:	7b7b      	ldrb	r3, [r7, #13]
 801079c:	2b00      	cmp	r3, #0
 801079e:	f040 8170 	bne.w	8010a82 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80107a2:	7b7a      	ldrb	r2, [r7, #13]
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80107aa:	7b7a      	ldrb	r2, [r7, #13]
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	32ae      	adds	r2, #174	@ 0xae
 80107b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80107b4:	689b      	ldr	r3, [r3, #8]
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	f000 8163 	beq.w	8010a82 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80107bc:	7b7a      	ldrb	r2, [r7, #13]
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	32ae      	adds	r2, #174	@ 0xae
 80107c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80107c6:	689b      	ldr	r3, [r3, #8]
 80107c8:	6839      	ldr	r1, [r7, #0]
 80107ca:	6878      	ldr	r0, [r7, #4]
 80107cc:	4798      	blx	r3
 80107ce:	4603      	mov	r3, r0
 80107d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80107d2:	e156      	b.n	8010a82 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80107d4:	683b      	ldr	r3, [r7, #0]
 80107d6:	785b      	ldrb	r3, [r3, #1]
 80107d8:	2b03      	cmp	r3, #3
 80107da:	d008      	beq.n	80107ee <USBD_StdEPReq+0x9a>
 80107dc:	2b03      	cmp	r3, #3
 80107de:	f300 8145 	bgt.w	8010a6c <USBD_StdEPReq+0x318>
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	f000 809b 	beq.w	801091e <USBD_StdEPReq+0x1ca>
 80107e8:	2b01      	cmp	r3, #1
 80107ea:	d03c      	beq.n	8010866 <USBD_StdEPReq+0x112>
 80107ec:	e13e      	b.n	8010a6c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80107f4:	b2db      	uxtb	r3, r3
 80107f6:	2b02      	cmp	r3, #2
 80107f8:	d002      	beq.n	8010800 <USBD_StdEPReq+0xac>
 80107fa:	2b03      	cmp	r3, #3
 80107fc:	d016      	beq.n	801082c <USBD_StdEPReq+0xd8>
 80107fe:	e02c      	b.n	801085a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010800:	7bbb      	ldrb	r3, [r7, #14]
 8010802:	2b00      	cmp	r3, #0
 8010804:	d00d      	beq.n	8010822 <USBD_StdEPReq+0xce>
 8010806:	7bbb      	ldrb	r3, [r7, #14]
 8010808:	2b80      	cmp	r3, #128	@ 0x80
 801080a:	d00a      	beq.n	8010822 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801080c:	7bbb      	ldrb	r3, [r7, #14]
 801080e:	4619      	mov	r1, r3
 8010810:	6878      	ldr	r0, [r7, #4]
 8010812:	f001 f9db 	bl	8011bcc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8010816:	2180      	movs	r1, #128	@ 0x80
 8010818:	6878      	ldr	r0, [r7, #4]
 801081a:	f001 f9d7 	bl	8011bcc <USBD_LL_StallEP>
 801081e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8010820:	e020      	b.n	8010864 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8010822:	6839      	ldr	r1, [r7, #0]
 8010824:	6878      	ldr	r0, [r7, #4]
 8010826:	f000 fc7a 	bl	801111e <USBD_CtlError>
              break;
 801082a:	e01b      	b.n	8010864 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801082c:	683b      	ldr	r3, [r7, #0]
 801082e:	885b      	ldrh	r3, [r3, #2]
 8010830:	2b00      	cmp	r3, #0
 8010832:	d10e      	bne.n	8010852 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8010834:	7bbb      	ldrb	r3, [r7, #14]
 8010836:	2b00      	cmp	r3, #0
 8010838:	d00b      	beq.n	8010852 <USBD_StdEPReq+0xfe>
 801083a:	7bbb      	ldrb	r3, [r7, #14]
 801083c:	2b80      	cmp	r3, #128	@ 0x80
 801083e:	d008      	beq.n	8010852 <USBD_StdEPReq+0xfe>
 8010840:	683b      	ldr	r3, [r7, #0]
 8010842:	88db      	ldrh	r3, [r3, #6]
 8010844:	2b00      	cmp	r3, #0
 8010846:	d104      	bne.n	8010852 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8010848:	7bbb      	ldrb	r3, [r7, #14]
 801084a:	4619      	mov	r1, r3
 801084c:	6878      	ldr	r0, [r7, #4]
 801084e:	f001 f9bd 	bl	8011bcc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8010852:	6878      	ldr	r0, [r7, #4]
 8010854:	f000 fd3a 	bl	80112cc <USBD_CtlSendStatus>

              break;
 8010858:	e004      	b.n	8010864 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 801085a:	6839      	ldr	r1, [r7, #0]
 801085c:	6878      	ldr	r0, [r7, #4]
 801085e:	f000 fc5e 	bl	801111e <USBD_CtlError>
              break;
 8010862:	bf00      	nop
          }
          break;
 8010864:	e107      	b.n	8010a76 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801086c:	b2db      	uxtb	r3, r3
 801086e:	2b02      	cmp	r3, #2
 8010870:	d002      	beq.n	8010878 <USBD_StdEPReq+0x124>
 8010872:	2b03      	cmp	r3, #3
 8010874:	d016      	beq.n	80108a4 <USBD_StdEPReq+0x150>
 8010876:	e04b      	b.n	8010910 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010878:	7bbb      	ldrb	r3, [r7, #14]
 801087a:	2b00      	cmp	r3, #0
 801087c:	d00d      	beq.n	801089a <USBD_StdEPReq+0x146>
 801087e:	7bbb      	ldrb	r3, [r7, #14]
 8010880:	2b80      	cmp	r3, #128	@ 0x80
 8010882:	d00a      	beq.n	801089a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8010884:	7bbb      	ldrb	r3, [r7, #14]
 8010886:	4619      	mov	r1, r3
 8010888:	6878      	ldr	r0, [r7, #4]
 801088a:	f001 f99f 	bl	8011bcc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801088e:	2180      	movs	r1, #128	@ 0x80
 8010890:	6878      	ldr	r0, [r7, #4]
 8010892:	f001 f99b 	bl	8011bcc <USBD_LL_StallEP>
 8010896:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8010898:	e040      	b.n	801091c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 801089a:	6839      	ldr	r1, [r7, #0]
 801089c:	6878      	ldr	r0, [r7, #4]
 801089e:	f000 fc3e 	bl	801111e <USBD_CtlError>
              break;
 80108a2:	e03b      	b.n	801091c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80108a4:	683b      	ldr	r3, [r7, #0]
 80108a6:	885b      	ldrh	r3, [r3, #2]
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	d136      	bne.n	801091a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80108ac:	7bbb      	ldrb	r3, [r7, #14]
 80108ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	d004      	beq.n	80108c0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80108b6:	7bbb      	ldrb	r3, [r7, #14]
 80108b8:	4619      	mov	r1, r3
 80108ba:	6878      	ldr	r0, [r7, #4]
 80108bc:	f001 f9a5 	bl	8011c0a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80108c0:	6878      	ldr	r0, [r7, #4]
 80108c2:	f000 fd03 	bl	80112cc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80108c6:	7bbb      	ldrb	r3, [r7, #14]
 80108c8:	4619      	mov	r1, r3
 80108ca:	6878      	ldr	r0, [r7, #4]
 80108cc:	f7ff fde4 	bl	8010498 <USBD_CoreFindEP>
 80108d0:	4603      	mov	r3, r0
 80108d2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80108d4:	7b7b      	ldrb	r3, [r7, #13]
 80108d6:	2bff      	cmp	r3, #255	@ 0xff
 80108d8:	d01f      	beq.n	801091a <USBD_StdEPReq+0x1c6>
 80108da:	7b7b      	ldrb	r3, [r7, #13]
 80108dc:	2b00      	cmp	r3, #0
 80108de:	d11c      	bne.n	801091a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80108e0:	7b7a      	ldrb	r2, [r7, #13]
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80108e8:	7b7a      	ldrb	r2, [r7, #13]
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	32ae      	adds	r2, #174	@ 0xae
 80108ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80108f2:	689b      	ldr	r3, [r3, #8]
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d010      	beq.n	801091a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80108f8:	7b7a      	ldrb	r2, [r7, #13]
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	32ae      	adds	r2, #174	@ 0xae
 80108fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010902:	689b      	ldr	r3, [r3, #8]
 8010904:	6839      	ldr	r1, [r7, #0]
 8010906:	6878      	ldr	r0, [r7, #4]
 8010908:	4798      	blx	r3
 801090a:	4603      	mov	r3, r0
 801090c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 801090e:	e004      	b.n	801091a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8010910:	6839      	ldr	r1, [r7, #0]
 8010912:	6878      	ldr	r0, [r7, #4]
 8010914:	f000 fc03 	bl	801111e <USBD_CtlError>
              break;
 8010918:	e000      	b.n	801091c <USBD_StdEPReq+0x1c8>
              break;
 801091a:	bf00      	nop
          }
          break;
 801091c:	e0ab      	b.n	8010a76 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010924:	b2db      	uxtb	r3, r3
 8010926:	2b02      	cmp	r3, #2
 8010928:	d002      	beq.n	8010930 <USBD_StdEPReq+0x1dc>
 801092a:	2b03      	cmp	r3, #3
 801092c:	d032      	beq.n	8010994 <USBD_StdEPReq+0x240>
 801092e:	e097      	b.n	8010a60 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010930:	7bbb      	ldrb	r3, [r7, #14]
 8010932:	2b00      	cmp	r3, #0
 8010934:	d007      	beq.n	8010946 <USBD_StdEPReq+0x1f2>
 8010936:	7bbb      	ldrb	r3, [r7, #14]
 8010938:	2b80      	cmp	r3, #128	@ 0x80
 801093a:	d004      	beq.n	8010946 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 801093c:	6839      	ldr	r1, [r7, #0]
 801093e:	6878      	ldr	r0, [r7, #4]
 8010940:	f000 fbed 	bl	801111e <USBD_CtlError>
                break;
 8010944:	e091      	b.n	8010a6a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010946:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801094a:	2b00      	cmp	r3, #0
 801094c:	da0b      	bge.n	8010966 <USBD_StdEPReq+0x212>
 801094e:	7bbb      	ldrb	r3, [r7, #14]
 8010950:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010954:	4613      	mov	r3, r2
 8010956:	009b      	lsls	r3, r3, #2
 8010958:	4413      	add	r3, r2
 801095a:	009b      	lsls	r3, r3, #2
 801095c:	3310      	adds	r3, #16
 801095e:	687a      	ldr	r2, [r7, #4]
 8010960:	4413      	add	r3, r2
 8010962:	3304      	adds	r3, #4
 8010964:	e00b      	b.n	801097e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8010966:	7bbb      	ldrb	r3, [r7, #14]
 8010968:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801096c:	4613      	mov	r3, r2
 801096e:	009b      	lsls	r3, r3, #2
 8010970:	4413      	add	r3, r2
 8010972:	009b      	lsls	r3, r3, #2
 8010974:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8010978:	687a      	ldr	r2, [r7, #4]
 801097a:	4413      	add	r3, r2
 801097c:	3304      	adds	r3, #4
 801097e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8010980:	68bb      	ldr	r3, [r7, #8]
 8010982:	2200      	movs	r2, #0
 8010984:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010986:	68bb      	ldr	r3, [r7, #8]
 8010988:	2202      	movs	r2, #2
 801098a:	4619      	mov	r1, r3
 801098c:	6878      	ldr	r0, [r7, #4]
 801098e:	f000 fc43 	bl	8011218 <USBD_CtlSendData>
              break;
 8010992:	e06a      	b.n	8010a6a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8010994:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010998:	2b00      	cmp	r3, #0
 801099a:	da11      	bge.n	80109c0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801099c:	7bbb      	ldrb	r3, [r7, #14]
 801099e:	f003 020f 	and.w	r2, r3, #15
 80109a2:	6879      	ldr	r1, [r7, #4]
 80109a4:	4613      	mov	r3, r2
 80109a6:	009b      	lsls	r3, r3, #2
 80109a8:	4413      	add	r3, r2
 80109aa:	009b      	lsls	r3, r3, #2
 80109ac:	440b      	add	r3, r1
 80109ae:	3324      	adds	r3, #36	@ 0x24
 80109b0:	881b      	ldrh	r3, [r3, #0]
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	d117      	bne.n	80109e6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80109b6:	6839      	ldr	r1, [r7, #0]
 80109b8:	6878      	ldr	r0, [r7, #4]
 80109ba:	f000 fbb0 	bl	801111e <USBD_CtlError>
                  break;
 80109be:	e054      	b.n	8010a6a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80109c0:	7bbb      	ldrb	r3, [r7, #14]
 80109c2:	f003 020f 	and.w	r2, r3, #15
 80109c6:	6879      	ldr	r1, [r7, #4]
 80109c8:	4613      	mov	r3, r2
 80109ca:	009b      	lsls	r3, r3, #2
 80109cc:	4413      	add	r3, r2
 80109ce:	009b      	lsls	r3, r3, #2
 80109d0:	440b      	add	r3, r1
 80109d2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80109d6:	881b      	ldrh	r3, [r3, #0]
 80109d8:	2b00      	cmp	r3, #0
 80109da:	d104      	bne.n	80109e6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80109dc:	6839      	ldr	r1, [r7, #0]
 80109de:	6878      	ldr	r0, [r7, #4]
 80109e0:	f000 fb9d 	bl	801111e <USBD_CtlError>
                  break;
 80109e4:	e041      	b.n	8010a6a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80109e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	da0b      	bge.n	8010a06 <USBD_StdEPReq+0x2b2>
 80109ee:	7bbb      	ldrb	r3, [r7, #14]
 80109f0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80109f4:	4613      	mov	r3, r2
 80109f6:	009b      	lsls	r3, r3, #2
 80109f8:	4413      	add	r3, r2
 80109fa:	009b      	lsls	r3, r3, #2
 80109fc:	3310      	adds	r3, #16
 80109fe:	687a      	ldr	r2, [r7, #4]
 8010a00:	4413      	add	r3, r2
 8010a02:	3304      	adds	r3, #4
 8010a04:	e00b      	b.n	8010a1e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8010a06:	7bbb      	ldrb	r3, [r7, #14]
 8010a08:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010a0c:	4613      	mov	r3, r2
 8010a0e:	009b      	lsls	r3, r3, #2
 8010a10:	4413      	add	r3, r2
 8010a12:	009b      	lsls	r3, r3, #2
 8010a14:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8010a18:	687a      	ldr	r2, [r7, #4]
 8010a1a:	4413      	add	r3, r2
 8010a1c:	3304      	adds	r3, #4
 8010a1e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8010a20:	7bbb      	ldrb	r3, [r7, #14]
 8010a22:	2b00      	cmp	r3, #0
 8010a24:	d002      	beq.n	8010a2c <USBD_StdEPReq+0x2d8>
 8010a26:	7bbb      	ldrb	r3, [r7, #14]
 8010a28:	2b80      	cmp	r3, #128	@ 0x80
 8010a2a:	d103      	bne.n	8010a34 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8010a2c:	68bb      	ldr	r3, [r7, #8]
 8010a2e:	2200      	movs	r2, #0
 8010a30:	601a      	str	r2, [r3, #0]
 8010a32:	e00e      	b.n	8010a52 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8010a34:	7bbb      	ldrb	r3, [r7, #14]
 8010a36:	4619      	mov	r1, r3
 8010a38:	6878      	ldr	r0, [r7, #4]
 8010a3a:	f001 f905 	bl	8011c48 <USBD_LL_IsStallEP>
 8010a3e:	4603      	mov	r3, r0
 8010a40:	2b00      	cmp	r3, #0
 8010a42:	d003      	beq.n	8010a4c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8010a44:	68bb      	ldr	r3, [r7, #8]
 8010a46:	2201      	movs	r2, #1
 8010a48:	601a      	str	r2, [r3, #0]
 8010a4a:	e002      	b.n	8010a52 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8010a4c:	68bb      	ldr	r3, [r7, #8]
 8010a4e:	2200      	movs	r2, #0
 8010a50:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010a52:	68bb      	ldr	r3, [r7, #8]
 8010a54:	2202      	movs	r2, #2
 8010a56:	4619      	mov	r1, r3
 8010a58:	6878      	ldr	r0, [r7, #4]
 8010a5a:	f000 fbdd 	bl	8011218 <USBD_CtlSendData>
              break;
 8010a5e:	e004      	b.n	8010a6a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8010a60:	6839      	ldr	r1, [r7, #0]
 8010a62:	6878      	ldr	r0, [r7, #4]
 8010a64:	f000 fb5b 	bl	801111e <USBD_CtlError>
              break;
 8010a68:	bf00      	nop
          }
          break;
 8010a6a:	e004      	b.n	8010a76 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8010a6c:	6839      	ldr	r1, [r7, #0]
 8010a6e:	6878      	ldr	r0, [r7, #4]
 8010a70:	f000 fb55 	bl	801111e <USBD_CtlError>
          break;
 8010a74:	bf00      	nop
      }
      break;
 8010a76:	e005      	b.n	8010a84 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8010a78:	6839      	ldr	r1, [r7, #0]
 8010a7a:	6878      	ldr	r0, [r7, #4]
 8010a7c:	f000 fb4f 	bl	801111e <USBD_CtlError>
      break;
 8010a80:	e000      	b.n	8010a84 <USBD_StdEPReq+0x330>
      break;
 8010a82:	bf00      	nop
  }

  return ret;
 8010a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8010a86:	4618      	mov	r0, r3
 8010a88:	3710      	adds	r7, #16
 8010a8a:	46bd      	mov	sp, r7
 8010a8c:	bd80      	pop	{r7, pc}
	...

08010a90 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010a90:	b580      	push	{r7, lr}
 8010a92:	b084      	sub	sp, #16
 8010a94:	af00      	add	r7, sp, #0
 8010a96:	6078      	str	r0, [r7, #4]
 8010a98:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8010a9a:	2300      	movs	r3, #0
 8010a9c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8010a9e:	2300      	movs	r3, #0
 8010aa0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8010aa2:	2300      	movs	r3, #0
 8010aa4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8010aa6:	683b      	ldr	r3, [r7, #0]
 8010aa8:	885b      	ldrh	r3, [r3, #2]
 8010aaa:	0a1b      	lsrs	r3, r3, #8
 8010aac:	b29b      	uxth	r3, r3
 8010aae:	3b01      	subs	r3, #1
 8010ab0:	2b06      	cmp	r3, #6
 8010ab2:	f200 8128 	bhi.w	8010d06 <USBD_GetDescriptor+0x276>
 8010ab6:	a201      	add	r2, pc, #4	@ (adr r2, 8010abc <USBD_GetDescriptor+0x2c>)
 8010ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010abc:	08010ad9 	.word	0x08010ad9
 8010ac0:	08010af1 	.word	0x08010af1
 8010ac4:	08010b31 	.word	0x08010b31
 8010ac8:	08010d07 	.word	0x08010d07
 8010acc:	08010d07 	.word	0x08010d07
 8010ad0:	08010ca7 	.word	0x08010ca7
 8010ad4:	08010cd3 	.word	0x08010cd3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010ade:	681b      	ldr	r3, [r3, #0]
 8010ae0:	687a      	ldr	r2, [r7, #4]
 8010ae2:	7c12      	ldrb	r2, [r2, #16]
 8010ae4:	f107 0108 	add.w	r1, r7, #8
 8010ae8:	4610      	mov	r0, r2
 8010aea:	4798      	blx	r3
 8010aec:	60f8      	str	r0, [r7, #12]
      break;
 8010aee:	e112      	b.n	8010d16 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	7c1b      	ldrb	r3, [r3, #16]
 8010af4:	2b00      	cmp	r3, #0
 8010af6:	d10d      	bne.n	8010b14 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010afe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010b00:	f107 0208 	add.w	r2, r7, #8
 8010b04:	4610      	mov	r0, r2
 8010b06:	4798      	blx	r3
 8010b08:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010b0a:	68fb      	ldr	r3, [r7, #12]
 8010b0c:	3301      	adds	r3, #1
 8010b0e:	2202      	movs	r2, #2
 8010b10:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8010b12:	e100      	b.n	8010d16 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010b1c:	f107 0208 	add.w	r2, r7, #8
 8010b20:	4610      	mov	r0, r2
 8010b22:	4798      	blx	r3
 8010b24:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010b26:	68fb      	ldr	r3, [r7, #12]
 8010b28:	3301      	adds	r3, #1
 8010b2a:	2202      	movs	r2, #2
 8010b2c:	701a      	strb	r2, [r3, #0]
      break;
 8010b2e:	e0f2      	b.n	8010d16 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8010b30:	683b      	ldr	r3, [r7, #0]
 8010b32:	885b      	ldrh	r3, [r3, #2]
 8010b34:	b2db      	uxtb	r3, r3
 8010b36:	2b05      	cmp	r3, #5
 8010b38:	f200 80ac 	bhi.w	8010c94 <USBD_GetDescriptor+0x204>
 8010b3c:	a201      	add	r2, pc, #4	@ (adr r2, 8010b44 <USBD_GetDescriptor+0xb4>)
 8010b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b42:	bf00      	nop
 8010b44:	08010b5d 	.word	0x08010b5d
 8010b48:	08010b91 	.word	0x08010b91
 8010b4c:	08010bc5 	.word	0x08010bc5
 8010b50:	08010bf9 	.word	0x08010bf9
 8010b54:	08010c2d 	.word	0x08010c2d
 8010b58:	08010c61 	.word	0x08010c61
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010b62:	685b      	ldr	r3, [r3, #4]
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	d00b      	beq.n	8010b80 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010b6e:	685b      	ldr	r3, [r3, #4]
 8010b70:	687a      	ldr	r2, [r7, #4]
 8010b72:	7c12      	ldrb	r2, [r2, #16]
 8010b74:	f107 0108 	add.w	r1, r7, #8
 8010b78:	4610      	mov	r0, r2
 8010b7a:	4798      	blx	r3
 8010b7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010b7e:	e091      	b.n	8010ca4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010b80:	6839      	ldr	r1, [r7, #0]
 8010b82:	6878      	ldr	r0, [r7, #4]
 8010b84:	f000 facb 	bl	801111e <USBD_CtlError>
            err++;
 8010b88:	7afb      	ldrb	r3, [r7, #11]
 8010b8a:	3301      	adds	r3, #1
 8010b8c:	72fb      	strb	r3, [r7, #11]
          break;
 8010b8e:	e089      	b.n	8010ca4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010b96:	689b      	ldr	r3, [r3, #8]
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	d00b      	beq.n	8010bb4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010ba2:	689b      	ldr	r3, [r3, #8]
 8010ba4:	687a      	ldr	r2, [r7, #4]
 8010ba6:	7c12      	ldrb	r2, [r2, #16]
 8010ba8:	f107 0108 	add.w	r1, r7, #8
 8010bac:	4610      	mov	r0, r2
 8010bae:	4798      	blx	r3
 8010bb0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010bb2:	e077      	b.n	8010ca4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010bb4:	6839      	ldr	r1, [r7, #0]
 8010bb6:	6878      	ldr	r0, [r7, #4]
 8010bb8:	f000 fab1 	bl	801111e <USBD_CtlError>
            err++;
 8010bbc:	7afb      	ldrb	r3, [r7, #11]
 8010bbe:	3301      	adds	r3, #1
 8010bc0:	72fb      	strb	r3, [r7, #11]
          break;
 8010bc2:	e06f      	b.n	8010ca4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010bca:	68db      	ldr	r3, [r3, #12]
 8010bcc:	2b00      	cmp	r3, #0
 8010bce:	d00b      	beq.n	8010be8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010bd6:	68db      	ldr	r3, [r3, #12]
 8010bd8:	687a      	ldr	r2, [r7, #4]
 8010bda:	7c12      	ldrb	r2, [r2, #16]
 8010bdc:	f107 0108 	add.w	r1, r7, #8
 8010be0:	4610      	mov	r0, r2
 8010be2:	4798      	blx	r3
 8010be4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010be6:	e05d      	b.n	8010ca4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010be8:	6839      	ldr	r1, [r7, #0]
 8010bea:	6878      	ldr	r0, [r7, #4]
 8010bec:	f000 fa97 	bl	801111e <USBD_CtlError>
            err++;
 8010bf0:	7afb      	ldrb	r3, [r7, #11]
 8010bf2:	3301      	adds	r3, #1
 8010bf4:	72fb      	strb	r3, [r7, #11]
          break;
 8010bf6:	e055      	b.n	8010ca4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010bfe:	691b      	ldr	r3, [r3, #16]
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	d00b      	beq.n	8010c1c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010c0a:	691b      	ldr	r3, [r3, #16]
 8010c0c:	687a      	ldr	r2, [r7, #4]
 8010c0e:	7c12      	ldrb	r2, [r2, #16]
 8010c10:	f107 0108 	add.w	r1, r7, #8
 8010c14:	4610      	mov	r0, r2
 8010c16:	4798      	blx	r3
 8010c18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010c1a:	e043      	b.n	8010ca4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010c1c:	6839      	ldr	r1, [r7, #0]
 8010c1e:	6878      	ldr	r0, [r7, #4]
 8010c20:	f000 fa7d 	bl	801111e <USBD_CtlError>
            err++;
 8010c24:	7afb      	ldrb	r3, [r7, #11]
 8010c26:	3301      	adds	r3, #1
 8010c28:	72fb      	strb	r3, [r7, #11]
          break;
 8010c2a:	e03b      	b.n	8010ca4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010c32:	695b      	ldr	r3, [r3, #20]
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d00b      	beq.n	8010c50 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010c3e:	695b      	ldr	r3, [r3, #20]
 8010c40:	687a      	ldr	r2, [r7, #4]
 8010c42:	7c12      	ldrb	r2, [r2, #16]
 8010c44:	f107 0108 	add.w	r1, r7, #8
 8010c48:	4610      	mov	r0, r2
 8010c4a:	4798      	blx	r3
 8010c4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010c4e:	e029      	b.n	8010ca4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010c50:	6839      	ldr	r1, [r7, #0]
 8010c52:	6878      	ldr	r0, [r7, #4]
 8010c54:	f000 fa63 	bl	801111e <USBD_CtlError>
            err++;
 8010c58:	7afb      	ldrb	r3, [r7, #11]
 8010c5a:	3301      	adds	r3, #1
 8010c5c:	72fb      	strb	r3, [r7, #11]
          break;
 8010c5e:	e021      	b.n	8010ca4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010c66:	699b      	ldr	r3, [r3, #24]
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	d00b      	beq.n	8010c84 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010c72:	699b      	ldr	r3, [r3, #24]
 8010c74:	687a      	ldr	r2, [r7, #4]
 8010c76:	7c12      	ldrb	r2, [r2, #16]
 8010c78:	f107 0108 	add.w	r1, r7, #8
 8010c7c:	4610      	mov	r0, r2
 8010c7e:	4798      	blx	r3
 8010c80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010c82:	e00f      	b.n	8010ca4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010c84:	6839      	ldr	r1, [r7, #0]
 8010c86:	6878      	ldr	r0, [r7, #4]
 8010c88:	f000 fa49 	bl	801111e <USBD_CtlError>
            err++;
 8010c8c:	7afb      	ldrb	r3, [r7, #11]
 8010c8e:	3301      	adds	r3, #1
 8010c90:	72fb      	strb	r3, [r7, #11]
          break;
 8010c92:	e007      	b.n	8010ca4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8010c94:	6839      	ldr	r1, [r7, #0]
 8010c96:	6878      	ldr	r0, [r7, #4]
 8010c98:	f000 fa41 	bl	801111e <USBD_CtlError>
          err++;
 8010c9c:	7afb      	ldrb	r3, [r7, #11]
 8010c9e:	3301      	adds	r3, #1
 8010ca0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8010ca2:	bf00      	nop
      }
      break;
 8010ca4:	e037      	b.n	8010d16 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	7c1b      	ldrb	r3, [r3, #16]
 8010caa:	2b00      	cmp	r3, #0
 8010cac:	d109      	bne.n	8010cc2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010cb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010cb6:	f107 0208 	add.w	r2, r7, #8
 8010cba:	4610      	mov	r0, r2
 8010cbc:	4798      	blx	r3
 8010cbe:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010cc0:	e029      	b.n	8010d16 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8010cc2:	6839      	ldr	r1, [r7, #0]
 8010cc4:	6878      	ldr	r0, [r7, #4]
 8010cc6:	f000 fa2a 	bl	801111e <USBD_CtlError>
        err++;
 8010cca:	7afb      	ldrb	r3, [r7, #11]
 8010ccc:	3301      	adds	r3, #1
 8010cce:	72fb      	strb	r3, [r7, #11]
      break;
 8010cd0:	e021      	b.n	8010d16 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	7c1b      	ldrb	r3, [r3, #16]
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	d10d      	bne.n	8010cf6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010ce2:	f107 0208 	add.w	r2, r7, #8
 8010ce6:	4610      	mov	r0, r2
 8010ce8:	4798      	blx	r3
 8010cea:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8010cec:	68fb      	ldr	r3, [r7, #12]
 8010cee:	3301      	adds	r3, #1
 8010cf0:	2207      	movs	r2, #7
 8010cf2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010cf4:	e00f      	b.n	8010d16 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8010cf6:	6839      	ldr	r1, [r7, #0]
 8010cf8:	6878      	ldr	r0, [r7, #4]
 8010cfa:	f000 fa10 	bl	801111e <USBD_CtlError>
        err++;
 8010cfe:	7afb      	ldrb	r3, [r7, #11]
 8010d00:	3301      	adds	r3, #1
 8010d02:	72fb      	strb	r3, [r7, #11]
      break;
 8010d04:	e007      	b.n	8010d16 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8010d06:	6839      	ldr	r1, [r7, #0]
 8010d08:	6878      	ldr	r0, [r7, #4]
 8010d0a:	f000 fa08 	bl	801111e <USBD_CtlError>
      err++;
 8010d0e:	7afb      	ldrb	r3, [r7, #11]
 8010d10:	3301      	adds	r3, #1
 8010d12:	72fb      	strb	r3, [r7, #11]
      break;
 8010d14:	bf00      	nop
  }

  if (err != 0U)
 8010d16:	7afb      	ldrb	r3, [r7, #11]
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	d11e      	bne.n	8010d5a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8010d1c:	683b      	ldr	r3, [r7, #0]
 8010d1e:	88db      	ldrh	r3, [r3, #6]
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	d016      	beq.n	8010d52 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8010d24:	893b      	ldrh	r3, [r7, #8]
 8010d26:	2b00      	cmp	r3, #0
 8010d28:	d00e      	beq.n	8010d48 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8010d2a:	683b      	ldr	r3, [r7, #0]
 8010d2c:	88da      	ldrh	r2, [r3, #6]
 8010d2e:	893b      	ldrh	r3, [r7, #8]
 8010d30:	4293      	cmp	r3, r2
 8010d32:	bf28      	it	cs
 8010d34:	4613      	movcs	r3, r2
 8010d36:	b29b      	uxth	r3, r3
 8010d38:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8010d3a:	893b      	ldrh	r3, [r7, #8]
 8010d3c:	461a      	mov	r2, r3
 8010d3e:	68f9      	ldr	r1, [r7, #12]
 8010d40:	6878      	ldr	r0, [r7, #4]
 8010d42:	f000 fa69 	bl	8011218 <USBD_CtlSendData>
 8010d46:	e009      	b.n	8010d5c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8010d48:	6839      	ldr	r1, [r7, #0]
 8010d4a:	6878      	ldr	r0, [r7, #4]
 8010d4c:	f000 f9e7 	bl	801111e <USBD_CtlError>
 8010d50:	e004      	b.n	8010d5c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8010d52:	6878      	ldr	r0, [r7, #4]
 8010d54:	f000 faba 	bl	80112cc <USBD_CtlSendStatus>
 8010d58:	e000      	b.n	8010d5c <USBD_GetDescriptor+0x2cc>
    return;
 8010d5a:	bf00      	nop
  }
}
 8010d5c:	3710      	adds	r7, #16
 8010d5e:	46bd      	mov	sp, r7
 8010d60:	bd80      	pop	{r7, pc}
 8010d62:	bf00      	nop

08010d64 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010d64:	b580      	push	{r7, lr}
 8010d66:	b084      	sub	sp, #16
 8010d68:	af00      	add	r7, sp, #0
 8010d6a:	6078      	str	r0, [r7, #4]
 8010d6c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8010d6e:	683b      	ldr	r3, [r7, #0]
 8010d70:	889b      	ldrh	r3, [r3, #4]
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	d131      	bne.n	8010dda <USBD_SetAddress+0x76>
 8010d76:	683b      	ldr	r3, [r7, #0]
 8010d78:	88db      	ldrh	r3, [r3, #6]
 8010d7a:	2b00      	cmp	r3, #0
 8010d7c:	d12d      	bne.n	8010dda <USBD_SetAddress+0x76>
 8010d7e:	683b      	ldr	r3, [r7, #0]
 8010d80:	885b      	ldrh	r3, [r3, #2]
 8010d82:	2b7f      	cmp	r3, #127	@ 0x7f
 8010d84:	d829      	bhi.n	8010dda <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8010d86:	683b      	ldr	r3, [r7, #0]
 8010d88:	885b      	ldrh	r3, [r3, #2]
 8010d8a:	b2db      	uxtb	r3, r3
 8010d8c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010d90:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010d98:	b2db      	uxtb	r3, r3
 8010d9a:	2b03      	cmp	r3, #3
 8010d9c:	d104      	bne.n	8010da8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8010d9e:	6839      	ldr	r1, [r7, #0]
 8010da0:	6878      	ldr	r0, [r7, #4]
 8010da2:	f000 f9bc 	bl	801111e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010da6:	e01d      	b.n	8010de4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	7bfa      	ldrb	r2, [r7, #15]
 8010dac:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8010db0:	7bfb      	ldrb	r3, [r7, #15]
 8010db2:	4619      	mov	r1, r3
 8010db4:	6878      	ldr	r0, [r7, #4]
 8010db6:	f000 ff73 	bl	8011ca0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8010dba:	6878      	ldr	r0, [r7, #4]
 8010dbc:	f000 fa86 	bl	80112cc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8010dc0:	7bfb      	ldrb	r3, [r7, #15]
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	d004      	beq.n	8010dd0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	2202      	movs	r2, #2
 8010dca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010dce:	e009      	b.n	8010de4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	2201      	movs	r2, #1
 8010dd4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010dd8:	e004      	b.n	8010de4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8010dda:	6839      	ldr	r1, [r7, #0]
 8010ddc:	6878      	ldr	r0, [r7, #4]
 8010dde:	f000 f99e 	bl	801111e <USBD_CtlError>
  }
}
 8010de2:	bf00      	nop
 8010de4:	bf00      	nop
 8010de6:	3710      	adds	r7, #16
 8010de8:	46bd      	mov	sp, r7
 8010dea:	bd80      	pop	{r7, pc}

08010dec <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010dec:	b580      	push	{r7, lr}
 8010dee:	b084      	sub	sp, #16
 8010df0:	af00      	add	r7, sp, #0
 8010df2:	6078      	str	r0, [r7, #4]
 8010df4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010df6:	2300      	movs	r3, #0
 8010df8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8010dfa:	683b      	ldr	r3, [r7, #0]
 8010dfc:	885b      	ldrh	r3, [r3, #2]
 8010dfe:	b2da      	uxtb	r2, r3
 8010e00:	4b4e      	ldr	r3, [pc, #312]	@ (8010f3c <USBD_SetConfig+0x150>)
 8010e02:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8010e04:	4b4d      	ldr	r3, [pc, #308]	@ (8010f3c <USBD_SetConfig+0x150>)
 8010e06:	781b      	ldrb	r3, [r3, #0]
 8010e08:	2b01      	cmp	r3, #1
 8010e0a:	d905      	bls.n	8010e18 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8010e0c:	6839      	ldr	r1, [r7, #0]
 8010e0e:	6878      	ldr	r0, [r7, #4]
 8010e10:	f000 f985 	bl	801111e <USBD_CtlError>
    return USBD_FAIL;
 8010e14:	2303      	movs	r3, #3
 8010e16:	e08c      	b.n	8010f32 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010e1e:	b2db      	uxtb	r3, r3
 8010e20:	2b02      	cmp	r3, #2
 8010e22:	d002      	beq.n	8010e2a <USBD_SetConfig+0x3e>
 8010e24:	2b03      	cmp	r3, #3
 8010e26:	d029      	beq.n	8010e7c <USBD_SetConfig+0x90>
 8010e28:	e075      	b.n	8010f16 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8010e2a:	4b44      	ldr	r3, [pc, #272]	@ (8010f3c <USBD_SetConfig+0x150>)
 8010e2c:	781b      	ldrb	r3, [r3, #0]
 8010e2e:	2b00      	cmp	r3, #0
 8010e30:	d020      	beq.n	8010e74 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8010e32:	4b42      	ldr	r3, [pc, #264]	@ (8010f3c <USBD_SetConfig+0x150>)
 8010e34:	781b      	ldrb	r3, [r3, #0]
 8010e36:	461a      	mov	r2, r3
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8010e3c:	4b3f      	ldr	r3, [pc, #252]	@ (8010f3c <USBD_SetConfig+0x150>)
 8010e3e:	781b      	ldrb	r3, [r3, #0]
 8010e40:	4619      	mov	r1, r3
 8010e42:	6878      	ldr	r0, [r7, #4]
 8010e44:	f7fe ffe3 	bl	800fe0e <USBD_SetClassConfig>
 8010e48:	4603      	mov	r3, r0
 8010e4a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8010e4c:	7bfb      	ldrb	r3, [r7, #15]
 8010e4e:	2b00      	cmp	r3, #0
 8010e50:	d008      	beq.n	8010e64 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8010e52:	6839      	ldr	r1, [r7, #0]
 8010e54:	6878      	ldr	r0, [r7, #4]
 8010e56:	f000 f962 	bl	801111e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	2202      	movs	r2, #2
 8010e5e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8010e62:	e065      	b.n	8010f30 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8010e64:	6878      	ldr	r0, [r7, #4]
 8010e66:	f000 fa31 	bl	80112cc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	2203      	movs	r2, #3
 8010e6e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8010e72:	e05d      	b.n	8010f30 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8010e74:	6878      	ldr	r0, [r7, #4]
 8010e76:	f000 fa29 	bl	80112cc <USBD_CtlSendStatus>
      break;
 8010e7a:	e059      	b.n	8010f30 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8010e7c:	4b2f      	ldr	r3, [pc, #188]	@ (8010f3c <USBD_SetConfig+0x150>)
 8010e7e:	781b      	ldrb	r3, [r3, #0]
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	d112      	bne.n	8010eaa <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	2202      	movs	r2, #2
 8010e88:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8010e8c:	4b2b      	ldr	r3, [pc, #172]	@ (8010f3c <USBD_SetConfig+0x150>)
 8010e8e:	781b      	ldrb	r3, [r3, #0]
 8010e90:	461a      	mov	r2, r3
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8010e96:	4b29      	ldr	r3, [pc, #164]	@ (8010f3c <USBD_SetConfig+0x150>)
 8010e98:	781b      	ldrb	r3, [r3, #0]
 8010e9a:	4619      	mov	r1, r3
 8010e9c:	6878      	ldr	r0, [r7, #4]
 8010e9e:	f7fe ffd2 	bl	800fe46 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8010ea2:	6878      	ldr	r0, [r7, #4]
 8010ea4:	f000 fa12 	bl	80112cc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8010ea8:	e042      	b.n	8010f30 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8010eaa:	4b24      	ldr	r3, [pc, #144]	@ (8010f3c <USBD_SetConfig+0x150>)
 8010eac:	781b      	ldrb	r3, [r3, #0]
 8010eae:	461a      	mov	r2, r3
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	685b      	ldr	r3, [r3, #4]
 8010eb4:	429a      	cmp	r2, r3
 8010eb6:	d02a      	beq.n	8010f0e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	685b      	ldr	r3, [r3, #4]
 8010ebc:	b2db      	uxtb	r3, r3
 8010ebe:	4619      	mov	r1, r3
 8010ec0:	6878      	ldr	r0, [r7, #4]
 8010ec2:	f7fe ffc0 	bl	800fe46 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8010ec6:	4b1d      	ldr	r3, [pc, #116]	@ (8010f3c <USBD_SetConfig+0x150>)
 8010ec8:	781b      	ldrb	r3, [r3, #0]
 8010eca:	461a      	mov	r2, r3
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8010ed0:	4b1a      	ldr	r3, [pc, #104]	@ (8010f3c <USBD_SetConfig+0x150>)
 8010ed2:	781b      	ldrb	r3, [r3, #0]
 8010ed4:	4619      	mov	r1, r3
 8010ed6:	6878      	ldr	r0, [r7, #4]
 8010ed8:	f7fe ff99 	bl	800fe0e <USBD_SetClassConfig>
 8010edc:	4603      	mov	r3, r0
 8010ede:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8010ee0:	7bfb      	ldrb	r3, [r7, #15]
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d00f      	beq.n	8010f06 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8010ee6:	6839      	ldr	r1, [r7, #0]
 8010ee8:	6878      	ldr	r0, [r7, #4]
 8010eea:	f000 f918 	bl	801111e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	685b      	ldr	r3, [r3, #4]
 8010ef2:	b2db      	uxtb	r3, r3
 8010ef4:	4619      	mov	r1, r3
 8010ef6:	6878      	ldr	r0, [r7, #4]
 8010ef8:	f7fe ffa5 	bl	800fe46 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	2202      	movs	r2, #2
 8010f00:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8010f04:	e014      	b.n	8010f30 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8010f06:	6878      	ldr	r0, [r7, #4]
 8010f08:	f000 f9e0 	bl	80112cc <USBD_CtlSendStatus>
      break;
 8010f0c:	e010      	b.n	8010f30 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8010f0e:	6878      	ldr	r0, [r7, #4]
 8010f10:	f000 f9dc 	bl	80112cc <USBD_CtlSendStatus>
      break;
 8010f14:	e00c      	b.n	8010f30 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8010f16:	6839      	ldr	r1, [r7, #0]
 8010f18:	6878      	ldr	r0, [r7, #4]
 8010f1a:	f000 f900 	bl	801111e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8010f1e:	4b07      	ldr	r3, [pc, #28]	@ (8010f3c <USBD_SetConfig+0x150>)
 8010f20:	781b      	ldrb	r3, [r3, #0]
 8010f22:	4619      	mov	r1, r3
 8010f24:	6878      	ldr	r0, [r7, #4]
 8010f26:	f7fe ff8e 	bl	800fe46 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8010f2a:	2303      	movs	r3, #3
 8010f2c:	73fb      	strb	r3, [r7, #15]
      break;
 8010f2e:	bf00      	nop
  }

  return ret;
 8010f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f32:	4618      	mov	r0, r3
 8010f34:	3710      	adds	r7, #16
 8010f36:	46bd      	mov	sp, r7
 8010f38:	bd80      	pop	{r7, pc}
 8010f3a:	bf00      	nop
 8010f3c:	200017e8 	.word	0x200017e8

08010f40 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010f40:	b580      	push	{r7, lr}
 8010f42:	b082      	sub	sp, #8
 8010f44:	af00      	add	r7, sp, #0
 8010f46:	6078      	str	r0, [r7, #4]
 8010f48:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8010f4a:	683b      	ldr	r3, [r7, #0]
 8010f4c:	88db      	ldrh	r3, [r3, #6]
 8010f4e:	2b01      	cmp	r3, #1
 8010f50:	d004      	beq.n	8010f5c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8010f52:	6839      	ldr	r1, [r7, #0]
 8010f54:	6878      	ldr	r0, [r7, #4]
 8010f56:	f000 f8e2 	bl	801111e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8010f5a:	e023      	b.n	8010fa4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010f62:	b2db      	uxtb	r3, r3
 8010f64:	2b02      	cmp	r3, #2
 8010f66:	dc02      	bgt.n	8010f6e <USBD_GetConfig+0x2e>
 8010f68:	2b00      	cmp	r3, #0
 8010f6a:	dc03      	bgt.n	8010f74 <USBD_GetConfig+0x34>
 8010f6c:	e015      	b.n	8010f9a <USBD_GetConfig+0x5a>
 8010f6e:	2b03      	cmp	r3, #3
 8010f70:	d00b      	beq.n	8010f8a <USBD_GetConfig+0x4a>
 8010f72:	e012      	b.n	8010f9a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	2200      	movs	r2, #0
 8010f78:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	3308      	adds	r3, #8
 8010f7e:	2201      	movs	r2, #1
 8010f80:	4619      	mov	r1, r3
 8010f82:	6878      	ldr	r0, [r7, #4]
 8010f84:	f000 f948 	bl	8011218 <USBD_CtlSendData>
        break;
 8010f88:	e00c      	b.n	8010fa4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	3304      	adds	r3, #4
 8010f8e:	2201      	movs	r2, #1
 8010f90:	4619      	mov	r1, r3
 8010f92:	6878      	ldr	r0, [r7, #4]
 8010f94:	f000 f940 	bl	8011218 <USBD_CtlSendData>
        break;
 8010f98:	e004      	b.n	8010fa4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8010f9a:	6839      	ldr	r1, [r7, #0]
 8010f9c:	6878      	ldr	r0, [r7, #4]
 8010f9e:	f000 f8be 	bl	801111e <USBD_CtlError>
        break;
 8010fa2:	bf00      	nop
}
 8010fa4:	bf00      	nop
 8010fa6:	3708      	adds	r7, #8
 8010fa8:	46bd      	mov	sp, r7
 8010faa:	bd80      	pop	{r7, pc}

08010fac <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010fac:	b580      	push	{r7, lr}
 8010fae:	b082      	sub	sp, #8
 8010fb0:	af00      	add	r7, sp, #0
 8010fb2:	6078      	str	r0, [r7, #4]
 8010fb4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010fbc:	b2db      	uxtb	r3, r3
 8010fbe:	3b01      	subs	r3, #1
 8010fc0:	2b02      	cmp	r3, #2
 8010fc2:	d81e      	bhi.n	8011002 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8010fc4:	683b      	ldr	r3, [r7, #0]
 8010fc6:	88db      	ldrh	r3, [r3, #6]
 8010fc8:	2b02      	cmp	r3, #2
 8010fca:	d004      	beq.n	8010fd6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8010fcc:	6839      	ldr	r1, [r7, #0]
 8010fce:	6878      	ldr	r0, [r7, #4]
 8010fd0:	f000 f8a5 	bl	801111e <USBD_CtlError>
        break;
 8010fd4:	e01a      	b.n	801100c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	2201      	movs	r2, #1
 8010fda:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	d005      	beq.n	8010ff2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	68db      	ldr	r3, [r3, #12]
 8010fea:	f043 0202 	orr.w	r2, r3, #2
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	330c      	adds	r3, #12
 8010ff6:	2202      	movs	r2, #2
 8010ff8:	4619      	mov	r1, r3
 8010ffa:	6878      	ldr	r0, [r7, #4]
 8010ffc:	f000 f90c 	bl	8011218 <USBD_CtlSendData>
      break;
 8011000:	e004      	b.n	801100c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8011002:	6839      	ldr	r1, [r7, #0]
 8011004:	6878      	ldr	r0, [r7, #4]
 8011006:	f000 f88a 	bl	801111e <USBD_CtlError>
      break;
 801100a:	bf00      	nop
  }
}
 801100c:	bf00      	nop
 801100e:	3708      	adds	r7, #8
 8011010:	46bd      	mov	sp, r7
 8011012:	bd80      	pop	{r7, pc}

08011014 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011014:	b580      	push	{r7, lr}
 8011016:	b082      	sub	sp, #8
 8011018:	af00      	add	r7, sp, #0
 801101a:	6078      	str	r0, [r7, #4]
 801101c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801101e:	683b      	ldr	r3, [r7, #0]
 8011020:	885b      	ldrh	r3, [r3, #2]
 8011022:	2b01      	cmp	r3, #1
 8011024:	d107      	bne.n	8011036 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	2201      	movs	r2, #1
 801102a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801102e:	6878      	ldr	r0, [r7, #4]
 8011030:	f000 f94c 	bl	80112cc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8011034:	e013      	b.n	801105e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8011036:	683b      	ldr	r3, [r7, #0]
 8011038:	885b      	ldrh	r3, [r3, #2]
 801103a:	2b02      	cmp	r3, #2
 801103c:	d10b      	bne.n	8011056 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 801103e:	683b      	ldr	r3, [r7, #0]
 8011040:	889b      	ldrh	r3, [r3, #4]
 8011042:	0a1b      	lsrs	r3, r3, #8
 8011044:	b29b      	uxth	r3, r3
 8011046:	b2da      	uxtb	r2, r3
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 801104e:	6878      	ldr	r0, [r7, #4]
 8011050:	f000 f93c 	bl	80112cc <USBD_CtlSendStatus>
}
 8011054:	e003      	b.n	801105e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8011056:	6839      	ldr	r1, [r7, #0]
 8011058:	6878      	ldr	r0, [r7, #4]
 801105a:	f000 f860 	bl	801111e <USBD_CtlError>
}
 801105e:	bf00      	nop
 8011060:	3708      	adds	r7, #8
 8011062:	46bd      	mov	sp, r7
 8011064:	bd80      	pop	{r7, pc}

08011066 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011066:	b580      	push	{r7, lr}
 8011068:	b082      	sub	sp, #8
 801106a:	af00      	add	r7, sp, #0
 801106c:	6078      	str	r0, [r7, #4]
 801106e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011076:	b2db      	uxtb	r3, r3
 8011078:	3b01      	subs	r3, #1
 801107a:	2b02      	cmp	r3, #2
 801107c:	d80b      	bhi.n	8011096 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801107e:	683b      	ldr	r3, [r7, #0]
 8011080:	885b      	ldrh	r3, [r3, #2]
 8011082:	2b01      	cmp	r3, #1
 8011084:	d10c      	bne.n	80110a0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	2200      	movs	r2, #0
 801108a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801108e:	6878      	ldr	r0, [r7, #4]
 8011090:	f000 f91c 	bl	80112cc <USBD_CtlSendStatus>
      }
      break;
 8011094:	e004      	b.n	80110a0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8011096:	6839      	ldr	r1, [r7, #0]
 8011098:	6878      	ldr	r0, [r7, #4]
 801109a:	f000 f840 	bl	801111e <USBD_CtlError>
      break;
 801109e:	e000      	b.n	80110a2 <USBD_ClrFeature+0x3c>
      break;
 80110a0:	bf00      	nop
  }
}
 80110a2:	bf00      	nop
 80110a4:	3708      	adds	r7, #8
 80110a6:	46bd      	mov	sp, r7
 80110a8:	bd80      	pop	{r7, pc}

080110aa <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80110aa:	b580      	push	{r7, lr}
 80110ac:	b084      	sub	sp, #16
 80110ae:	af00      	add	r7, sp, #0
 80110b0:	6078      	str	r0, [r7, #4]
 80110b2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80110b4:	683b      	ldr	r3, [r7, #0]
 80110b6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80110b8:	68fb      	ldr	r3, [r7, #12]
 80110ba:	781a      	ldrb	r2, [r3, #0]
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80110c0:	68fb      	ldr	r3, [r7, #12]
 80110c2:	3301      	adds	r3, #1
 80110c4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80110c6:	68fb      	ldr	r3, [r7, #12]
 80110c8:	781a      	ldrb	r2, [r3, #0]
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80110ce:	68fb      	ldr	r3, [r7, #12]
 80110d0:	3301      	adds	r3, #1
 80110d2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80110d4:	68f8      	ldr	r0, [r7, #12]
 80110d6:	f7ff fa40 	bl	801055a <SWAPBYTE>
 80110da:	4603      	mov	r3, r0
 80110dc:	461a      	mov	r2, r3
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80110e2:	68fb      	ldr	r3, [r7, #12]
 80110e4:	3301      	adds	r3, #1
 80110e6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80110e8:	68fb      	ldr	r3, [r7, #12]
 80110ea:	3301      	adds	r3, #1
 80110ec:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80110ee:	68f8      	ldr	r0, [r7, #12]
 80110f0:	f7ff fa33 	bl	801055a <SWAPBYTE>
 80110f4:	4603      	mov	r3, r0
 80110f6:	461a      	mov	r2, r3
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80110fc:	68fb      	ldr	r3, [r7, #12]
 80110fe:	3301      	adds	r3, #1
 8011100:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8011102:	68fb      	ldr	r3, [r7, #12]
 8011104:	3301      	adds	r3, #1
 8011106:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8011108:	68f8      	ldr	r0, [r7, #12]
 801110a:	f7ff fa26 	bl	801055a <SWAPBYTE>
 801110e:	4603      	mov	r3, r0
 8011110:	461a      	mov	r2, r3
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	80da      	strh	r2, [r3, #6]
}
 8011116:	bf00      	nop
 8011118:	3710      	adds	r7, #16
 801111a:	46bd      	mov	sp, r7
 801111c:	bd80      	pop	{r7, pc}

0801111e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801111e:	b580      	push	{r7, lr}
 8011120:	b082      	sub	sp, #8
 8011122:	af00      	add	r7, sp, #0
 8011124:	6078      	str	r0, [r7, #4]
 8011126:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8011128:	2180      	movs	r1, #128	@ 0x80
 801112a:	6878      	ldr	r0, [r7, #4]
 801112c:	f000 fd4e 	bl	8011bcc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8011130:	2100      	movs	r1, #0
 8011132:	6878      	ldr	r0, [r7, #4]
 8011134:	f000 fd4a 	bl	8011bcc <USBD_LL_StallEP>
}
 8011138:	bf00      	nop
 801113a:	3708      	adds	r7, #8
 801113c:	46bd      	mov	sp, r7
 801113e:	bd80      	pop	{r7, pc}

08011140 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8011140:	b580      	push	{r7, lr}
 8011142:	b086      	sub	sp, #24
 8011144:	af00      	add	r7, sp, #0
 8011146:	60f8      	str	r0, [r7, #12]
 8011148:	60b9      	str	r1, [r7, #8]
 801114a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801114c:	2300      	movs	r3, #0
 801114e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8011150:	68fb      	ldr	r3, [r7, #12]
 8011152:	2b00      	cmp	r3, #0
 8011154:	d042      	beq.n	80111dc <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8011156:	68fb      	ldr	r3, [r7, #12]
 8011158:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 801115a:	6938      	ldr	r0, [r7, #16]
 801115c:	f000 f842 	bl	80111e4 <USBD_GetLen>
 8011160:	4603      	mov	r3, r0
 8011162:	3301      	adds	r3, #1
 8011164:	005b      	lsls	r3, r3, #1
 8011166:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801116a:	d808      	bhi.n	801117e <USBD_GetString+0x3e>
 801116c:	6938      	ldr	r0, [r7, #16]
 801116e:	f000 f839 	bl	80111e4 <USBD_GetLen>
 8011172:	4603      	mov	r3, r0
 8011174:	3301      	adds	r3, #1
 8011176:	b29b      	uxth	r3, r3
 8011178:	005b      	lsls	r3, r3, #1
 801117a:	b29a      	uxth	r2, r3
 801117c:	e001      	b.n	8011182 <USBD_GetString+0x42>
 801117e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8011186:	7dfb      	ldrb	r3, [r7, #23]
 8011188:	68ba      	ldr	r2, [r7, #8]
 801118a:	4413      	add	r3, r2
 801118c:	687a      	ldr	r2, [r7, #4]
 801118e:	7812      	ldrb	r2, [r2, #0]
 8011190:	701a      	strb	r2, [r3, #0]
  idx++;
 8011192:	7dfb      	ldrb	r3, [r7, #23]
 8011194:	3301      	adds	r3, #1
 8011196:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8011198:	7dfb      	ldrb	r3, [r7, #23]
 801119a:	68ba      	ldr	r2, [r7, #8]
 801119c:	4413      	add	r3, r2
 801119e:	2203      	movs	r2, #3
 80111a0:	701a      	strb	r2, [r3, #0]
  idx++;
 80111a2:	7dfb      	ldrb	r3, [r7, #23]
 80111a4:	3301      	adds	r3, #1
 80111a6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80111a8:	e013      	b.n	80111d2 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 80111aa:	7dfb      	ldrb	r3, [r7, #23]
 80111ac:	68ba      	ldr	r2, [r7, #8]
 80111ae:	4413      	add	r3, r2
 80111b0:	693a      	ldr	r2, [r7, #16]
 80111b2:	7812      	ldrb	r2, [r2, #0]
 80111b4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80111b6:	693b      	ldr	r3, [r7, #16]
 80111b8:	3301      	adds	r3, #1
 80111ba:	613b      	str	r3, [r7, #16]
    idx++;
 80111bc:	7dfb      	ldrb	r3, [r7, #23]
 80111be:	3301      	adds	r3, #1
 80111c0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80111c2:	7dfb      	ldrb	r3, [r7, #23]
 80111c4:	68ba      	ldr	r2, [r7, #8]
 80111c6:	4413      	add	r3, r2
 80111c8:	2200      	movs	r2, #0
 80111ca:	701a      	strb	r2, [r3, #0]
    idx++;
 80111cc:	7dfb      	ldrb	r3, [r7, #23]
 80111ce:	3301      	adds	r3, #1
 80111d0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80111d2:	693b      	ldr	r3, [r7, #16]
 80111d4:	781b      	ldrb	r3, [r3, #0]
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	d1e7      	bne.n	80111aa <USBD_GetString+0x6a>
 80111da:	e000      	b.n	80111de <USBD_GetString+0x9e>
    return;
 80111dc:	bf00      	nop
  }
}
 80111de:	3718      	adds	r7, #24
 80111e0:	46bd      	mov	sp, r7
 80111e2:	bd80      	pop	{r7, pc}

080111e4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80111e4:	b480      	push	{r7}
 80111e6:	b085      	sub	sp, #20
 80111e8:	af00      	add	r7, sp, #0
 80111ea:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80111ec:	2300      	movs	r3, #0
 80111ee:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80111f4:	e005      	b.n	8011202 <USBD_GetLen+0x1e>
  {
    len++;
 80111f6:	7bfb      	ldrb	r3, [r7, #15]
 80111f8:	3301      	adds	r3, #1
 80111fa:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80111fc:	68bb      	ldr	r3, [r7, #8]
 80111fe:	3301      	adds	r3, #1
 8011200:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8011202:	68bb      	ldr	r3, [r7, #8]
 8011204:	781b      	ldrb	r3, [r3, #0]
 8011206:	2b00      	cmp	r3, #0
 8011208:	d1f5      	bne.n	80111f6 <USBD_GetLen+0x12>
  }

  return len;
 801120a:	7bfb      	ldrb	r3, [r7, #15]
}
 801120c:	4618      	mov	r0, r3
 801120e:	3714      	adds	r7, #20
 8011210:	46bd      	mov	sp, r7
 8011212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011216:	4770      	bx	lr

08011218 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8011218:	b580      	push	{r7, lr}
 801121a:	b084      	sub	sp, #16
 801121c:	af00      	add	r7, sp, #0
 801121e:	60f8      	str	r0, [r7, #12]
 8011220:	60b9      	str	r1, [r7, #8]
 8011222:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8011224:	68fb      	ldr	r3, [r7, #12]
 8011226:	2202      	movs	r2, #2
 8011228:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 801122c:	68fb      	ldr	r3, [r7, #12]
 801122e:	687a      	ldr	r2, [r7, #4]
 8011230:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8011232:	68fb      	ldr	r3, [r7, #12]
 8011234:	687a      	ldr	r2, [r7, #4]
 8011236:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	68ba      	ldr	r2, [r7, #8]
 801123c:	2100      	movs	r1, #0
 801123e:	68f8      	ldr	r0, [r7, #12]
 8011240:	f000 fd4d 	bl	8011cde <USBD_LL_Transmit>

  return USBD_OK;
 8011244:	2300      	movs	r3, #0
}
 8011246:	4618      	mov	r0, r3
 8011248:	3710      	adds	r7, #16
 801124a:	46bd      	mov	sp, r7
 801124c:	bd80      	pop	{r7, pc}

0801124e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801124e:	b580      	push	{r7, lr}
 8011250:	b084      	sub	sp, #16
 8011252:	af00      	add	r7, sp, #0
 8011254:	60f8      	str	r0, [r7, #12]
 8011256:	60b9      	str	r1, [r7, #8]
 8011258:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	68ba      	ldr	r2, [r7, #8]
 801125e:	2100      	movs	r1, #0
 8011260:	68f8      	ldr	r0, [r7, #12]
 8011262:	f000 fd3c 	bl	8011cde <USBD_LL_Transmit>

  return USBD_OK;
 8011266:	2300      	movs	r3, #0
}
 8011268:	4618      	mov	r0, r3
 801126a:	3710      	adds	r7, #16
 801126c:	46bd      	mov	sp, r7
 801126e:	bd80      	pop	{r7, pc}

08011270 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8011270:	b580      	push	{r7, lr}
 8011272:	b084      	sub	sp, #16
 8011274:	af00      	add	r7, sp, #0
 8011276:	60f8      	str	r0, [r7, #12]
 8011278:	60b9      	str	r1, [r7, #8]
 801127a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801127c:	68fb      	ldr	r3, [r7, #12]
 801127e:	2203      	movs	r2, #3
 8011280:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8011284:	68fb      	ldr	r3, [r7, #12]
 8011286:	687a      	ldr	r2, [r7, #4]
 8011288:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 801128c:	68fb      	ldr	r3, [r7, #12]
 801128e:	687a      	ldr	r2, [r7, #4]
 8011290:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	68ba      	ldr	r2, [r7, #8]
 8011298:	2100      	movs	r1, #0
 801129a:	68f8      	ldr	r0, [r7, #12]
 801129c:	f000 fd40 	bl	8011d20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80112a0:	2300      	movs	r3, #0
}
 80112a2:	4618      	mov	r0, r3
 80112a4:	3710      	adds	r7, #16
 80112a6:	46bd      	mov	sp, r7
 80112a8:	bd80      	pop	{r7, pc}

080112aa <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80112aa:	b580      	push	{r7, lr}
 80112ac:	b084      	sub	sp, #16
 80112ae:	af00      	add	r7, sp, #0
 80112b0:	60f8      	str	r0, [r7, #12]
 80112b2:	60b9      	str	r1, [r7, #8]
 80112b4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	68ba      	ldr	r2, [r7, #8]
 80112ba:	2100      	movs	r1, #0
 80112bc:	68f8      	ldr	r0, [r7, #12]
 80112be:	f000 fd2f 	bl	8011d20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80112c2:	2300      	movs	r3, #0
}
 80112c4:	4618      	mov	r0, r3
 80112c6:	3710      	adds	r7, #16
 80112c8:	46bd      	mov	sp, r7
 80112ca:	bd80      	pop	{r7, pc}

080112cc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80112cc:	b580      	push	{r7, lr}
 80112ce:	b082      	sub	sp, #8
 80112d0:	af00      	add	r7, sp, #0
 80112d2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	2204      	movs	r2, #4
 80112d8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80112dc:	2300      	movs	r3, #0
 80112de:	2200      	movs	r2, #0
 80112e0:	2100      	movs	r1, #0
 80112e2:	6878      	ldr	r0, [r7, #4]
 80112e4:	f000 fcfb 	bl	8011cde <USBD_LL_Transmit>

  return USBD_OK;
 80112e8:	2300      	movs	r3, #0
}
 80112ea:	4618      	mov	r0, r3
 80112ec:	3708      	adds	r7, #8
 80112ee:	46bd      	mov	sp, r7
 80112f0:	bd80      	pop	{r7, pc}

080112f2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80112f2:	b580      	push	{r7, lr}
 80112f4:	b082      	sub	sp, #8
 80112f6:	af00      	add	r7, sp, #0
 80112f8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	2205      	movs	r2, #5
 80112fe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011302:	2300      	movs	r3, #0
 8011304:	2200      	movs	r2, #0
 8011306:	2100      	movs	r1, #0
 8011308:	6878      	ldr	r0, [r7, #4]
 801130a:	f000 fd09 	bl	8011d20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801130e:	2300      	movs	r3, #0
}
 8011310:	4618      	mov	r0, r3
 8011312:	3708      	adds	r7, #8
 8011314:	46bd      	mov	sp, r7
 8011316:	bd80      	pop	{r7, pc}

08011318 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8011318:	b580      	push	{r7, lr}
 801131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801131c:	2200      	movs	r2, #0
 801131e:	4912      	ldr	r1, [pc, #72]	@ (8011368 <MX_USB_DEVICE_Init+0x50>)
 8011320:	4812      	ldr	r0, [pc, #72]	@ (801136c <MX_USB_DEVICE_Init+0x54>)
 8011322:	f7fe fcf7 	bl	800fd14 <USBD_Init>
 8011326:	4603      	mov	r3, r0
 8011328:	2b00      	cmp	r3, #0
 801132a:	d001      	beq.n	8011330 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801132c:	f7f3 fa88 	bl	8004840 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8011330:	490f      	ldr	r1, [pc, #60]	@ (8011370 <MX_USB_DEVICE_Init+0x58>)
 8011332:	480e      	ldr	r0, [pc, #56]	@ (801136c <MX_USB_DEVICE_Init+0x54>)
 8011334:	f7fe fd1e 	bl	800fd74 <USBD_RegisterClass>
 8011338:	4603      	mov	r3, r0
 801133a:	2b00      	cmp	r3, #0
 801133c:	d001      	beq.n	8011342 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801133e:	f7f3 fa7f 	bl	8004840 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8011342:	490c      	ldr	r1, [pc, #48]	@ (8011374 <MX_USB_DEVICE_Init+0x5c>)
 8011344:	4809      	ldr	r0, [pc, #36]	@ (801136c <MX_USB_DEVICE_Init+0x54>)
 8011346:	f7fe fc15 	bl	800fb74 <USBD_CDC_RegisterInterface>
 801134a:	4603      	mov	r3, r0
 801134c:	2b00      	cmp	r3, #0
 801134e:	d001      	beq.n	8011354 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8011350:	f7f3 fa76 	bl	8004840 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8011354:	4805      	ldr	r0, [pc, #20]	@ (801136c <MX_USB_DEVICE_Init+0x54>)
 8011356:	f7fe fd43 	bl	800fde0 <USBD_Start>
 801135a:	4603      	mov	r3, r0
 801135c:	2b00      	cmp	r3, #0
 801135e:	d001      	beq.n	8011364 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8011360:	f7f3 fa6e 	bl	8004840 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8011364:	bf00      	nop
 8011366:	bd80      	pop	{r7, pc}
 8011368:	200000c8 	.word	0x200000c8
 801136c:	200017ec 	.word	0x200017ec
 8011370:	2000002c 	.word	0x2000002c
 8011374:	200000b4 	.word	0x200000b4

08011378 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8011378:	b580      	push	{r7, lr}
 801137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801137c:	2200      	movs	r2, #0
 801137e:	4905      	ldr	r1, [pc, #20]	@ (8011394 <CDC_Init_FS+0x1c>)
 8011380:	4805      	ldr	r0, [pc, #20]	@ (8011398 <CDC_Init_FS+0x20>)
 8011382:	f7fe fc11 	bl	800fba8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8011386:	4905      	ldr	r1, [pc, #20]	@ (801139c <CDC_Init_FS+0x24>)
 8011388:	4803      	ldr	r0, [pc, #12]	@ (8011398 <CDC_Init_FS+0x20>)
 801138a:	f7fe fc2f 	bl	800fbec <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801138e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8011390:	4618      	mov	r0, r3
 8011392:	bd80      	pop	{r7, pc}
 8011394:	20001cc8 	.word	0x20001cc8
 8011398:	200017ec 	.word	0x200017ec
 801139c:	20001ac8 	.word	0x20001ac8

080113a0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80113a0:	b480      	push	{r7}
 80113a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80113a4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80113a6:	4618      	mov	r0, r3
 80113a8:	46bd      	mov	sp, r7
 80113aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113ae:	4770      	bx	lr

080113b0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80113b0:	b480      	push	{r7}
 80113b2:	b083      	sub	sp, #12
 80113b4:	af00      	add	r7, sp, #0
 80113b6:	4603      	mov	r3, r0
 80113b8:	6039      	str	r1, [r7, #0]
 80113ba:	71fb      	strb	r3, [r7, #7]
 80113bc:	4613      	mov	r3, r2
 80113be:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80113c0:	79fb      	ldrb	r3, [r7, #7]
 80113c2:	2b23      	cmp	r3, #35	@ 0x23
 80113c4:	f200 8097 	bhi.w	80114f6 <CDC_Control_FS+0x146>
 80113c8:	a201      	add	r2, pc, #4	@ (adr r2, 80113d0 <CDC_Control_FS+0x20>)
 80113ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113ce:	bf00      	nop
 80113d0:	080114f7 	.word	0x080114f7
 80113d4:	080114f7 	.word	0x080114f7
 80113d8:	080114f7 	.word	0x080114f7
 80113dc:	080114f7 	.word	0x080114f7
 80113e0:	080114f7 	.word	0x080114f7
 80113e4:	080114f7 	.word	0x080114f7
 80113e8:	080114f7 	.word	0x080114f7
 80113ec:	080114f7 	.word	0x080114f7
 80113f0:	080114f7 	.word	0x080114f7
 80113f4:	080114f7 	.word	0x080114f7
 80113f8:	080114f7 	.word	0x080114f7
 80113fc:	080114f7 	.word	0x080114f7
 8011400:	080114f7 	.word	0x080114f7
 8011404:	080114f7 	.word	0x080114f7
 8011408:	080114f7 	.word	0x080114f7
 801140c:	080114f7 	.word	0x080114f7
 8011410:	080114f7 	.word	0x080114f7
 8011414:	080114f7 	.word	0x080114f7
 8011418:	080114f7 	.word	0x080114f7
 801141c:	080114f7 	.word	0x080114f7
 8011420:	080114f7 	.word	0x080114f7
 8011424:	080114f7 	.word	0x080114f7
 8011428:	080114f7 	.word	0x080114f7
 801142c:	080114f7 	.word	0x080114f7
 8011430:	080114f7 	.word	0x080114f7
 8011434:	080114f7 	.word	0x080114f7
 8011438:	080114f7 	.word	0x080114f7
 801143c:	080114f7 	.word	0x080114f7
 8011440:	080114f7 	.word	0x080114f7
 8011444:	080114f7 	.word	0x080114f7
 8011448:	080114f7 	.word	0x080114f7
 801144c:	080114f7 	.word	0x080114f7
 8011450:	08011461 	.word	0x08011461
 8011454:	080114a3 	.word	0x080114a3
 8011458:	080114f7 	.word	0x080114f7
 801145c:	080114f7 	.word	0x080114f7
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	LineCoding.bitrate = (uint32_t)(pbuf[0]) | (pbuf[1] << 8) | (pbuf[2] << 16) | (pbuf[3] << 24);
 8011460:	683b      	ldr	r3, [r7, #0]
 8011462:	781b      	ldrb	r3, [r3, #0]
 8011464:	461a      	mov	r2, r3
 8011466:	683b      	ldr	r3, [r7, #0]
 8011468:	3301      	adds	r3, #1
 801146a:	781b      	ldrb	r3, [r3, #0]
 801146c:	021b      	lsls	r3, r3, #8
 801146e:	431a      	orrs	r2, r3
 8011470:	683b      	ldr	r3, [r7, #0]
 8011472:	3302      	adds	r3, #2
 8011474:	781b      	ldrb	r3, [r3, #0]
 8011476:	041b      	lsls	r3, r3, #16
 8011478:	431a      	orrs	r2, r3
 801147a:	683b      	ldr	r3, [r7, #0]
 801147c:	3303      	adds	r3, #3
 801147e:	781b      	ldrb	r3, [r3, #0]
 8011480:	061b      	lsls	r3, r3, #24
 8011482:	4313      	orrs	r3, r2
 8011484:	4a20      	ldr	r2, [pc, #128]	@ (8011508 <CDC_Control_FS+0x158>)
 8011486:	6013      	str	r3, [r2, #0]
		LineCoding.format = pbuf[4];
 8011488:	683b      	ldr	r3, [r7, #0]
 801148a:	791a      	ldrb	r2, [r3, #4]
 801148c:	4b1e      	ldr	r3, [pc, #120]	@ (8011508 <CDC_Control_FS+0x158>)
 801148e:	711a      	strb	r2, [r3, #4]
		LineCoding.paritytype = pbuf[5];
 8011490:	683b      	ldr	r3, [r7, #0]
 8011492:	795a      	ldrb	r2, [r3, #5]
 8011494:	4b1c      	ldr	r3, [pc, #112]	@ (8011508 <CDC_Control_FS+0x158>)
 8011496:	715a      	strb	r2, [r3, #5]
		LineCoding.datatype = pbuf[6];
 8011498:	683b      	ldr	r3, [r7, #0]
 801149a:	799a      	ldrb	r2, [r3, #6]
 801149c:	4b1a      	ldr	r3, [pc, #104]	@ (8011508 <CDC_Control_FS+0x158>)
 801149e:	719a      	strb	r2, [r3, #6]
    break;
 80114a0:	e02a      	b.n	80114f8 <CDC_Control_FS+0x148>

    case CDC_GET_LINE_CODING:
    	pbuf[0] = (uint8_t)(LineCoding.bitrate);
 80114a2:	4b19      	ldr	r3, [pc, #100]	@ (8011508 <CDC_Control_FS+0x158>)
 80114a4:	681b      	ldr	r3, [r3, #0]
 80114a6:	b2da      	uxtb	r2, r3
 80114a8:	683b      	ldr	r3, [r7, #0]
 80114aa:	701a      	strb	r2, [r3, #0]
    	pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 80114ac:	4b16      	ldr	r3, [pc, #88]	@ (8011508 <CDC_Control_FS+0x158>)
 80114ae:	681b      	ldr	r3, [r3, #0]
 80114b0:	0a1a      	lsrs	r2, r3, #8
 80114b2:	683b      	ldr	r3, [r7, #0]
 80114b4:	3301      	adds	r3, #1
 80114b6:	b2d2      	uxtb	r2, r2
 80114b8:	701a      	strb	r2, [r3, #0]
    	pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 80114ba:	4b13      	ldr	r3, [pc, #76]	@ (8011508 <CDC_Control_FS+0x158>)
 80114bc:	681b      	ldr	r3, [r3, #0]
 80114be:	0c1a      	lsrs	r2, r3, #16
 80114c0:	683b      	ldr	r3, [r7, #0]
 80114c2:	3302      	adds	r3, #2
 80114c4:	b2d2      	uxtb	r2, r2
 80114c6:	701a      	strb	r2, [r3, #0]
    	pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 80114c8:	4b0f      	ldr	r3, [pc, #60]	@ (8011508 <CDC_Control_FS+0x158>)
 80114ca:	681b      	ldr	r3, [r3, #0]
 80114cc:	0e1a      	lsrs	r2, r3, #24
 80114ce:	683b      	ldr	r3, [r7, #0]
 80114d0:	3303      	adds	r3, #3
 80114d2:	b2d2      	uxtb	r2, r2
 80114d4:	701a      	strb	r2, [r3, #0]
    	pbuf[4] = LineCoding.format;
 80114d6:	683b      	ldr	r3, [r7, #0]
 80114d8:	3304      	adds	r3, #4
 80114da:	4a0b      	ldr	r2, [pc, #44]	@ (8011508 <CDC_Control_FS+0x158>)
 80114dc:	7912      	ldrb	r2, [r2, #4]
 80114de:	701a      	strb	r2, [r3, #0]
    	pbuf[5] = LineCoding.paritytype;
 80114e0:	683b      	ldr	r3, [r7, #0]
 80114e2:	3305      	adds	r3, #5
 80114e4:	4a08      	ldr	r2, [pc, #32]	@ (8011508 <CDC_Control_FS+0x158>)
 80114e6:	7952      	ldrb	r2, [r2, #5]
 80114e8:	701a      	strb	r2, [r3, #0]
    	pbuf[6] = LineCoding.datatype;
 80114ea:	683b      	ldr	r3, [r7, #0]
 80114ec:	3306      	adds	r3, #6
 80114ee:	4a06      	ldr	r2, [pc, #24]	@ (8011508 <CDC_Control_FS+0x158>)
 80114f0:	7992      	ldrb	r2, [r2, #6]
 80114f2:	701a      	strb	r2, [r3, #0]
	break;
 80114f4:	e000      	b.n	80114f8 <CDC_Control_FS+0x148>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80114f6:	bf00      	nop
  }

  return (USBD_OK);
 80114f8:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80114fa:	4618      	mov	r0, r3
 80114fc:	370c      	adds	r7, #12
 80114fe:	46bd      	mov	sp, r7
 8011500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011504:	4770      	bx	lr
 8011506:	bf00      	nop
 8011508:	200000ac 	.word	0x200000ac

0801150c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801150c:	b580      	push	{r7, lr}
 801150e:	b082      	sub	sp, #8
 8011510:	af00      	add	r7, sp, #0
 8011512:	6078      	str	r0, [r7, #4]
 8011514:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	if(dataOnRx != NULL){
 8011516:	4b0b      	ldr	r3, [pc, #44]	@ (8011544 <CDC_Receive_FS+0x38>)
 8011518:	681b      	ldr	r3, [r3, #0]
 801151a:	2b00      	cmp	r3, #0
 801151c:	d006      	beq.n	801152c <CDC_Receive_FS+0x20>
		dataOnRx(Buf, *Len);
 801151e:	4b09      	ldr	r3, [pc, #36]	@ (8011544 <CDC_Receive_FS+0x38>)
 8011520:	681b      	ldr	r3, [r3, #0]
 8011522:	683a      	ldr	r2, [r7, #0]
 8011524:	6812      	ldr	r2, [r2, #0]
 8011526:	4611      	mov	r1, r2
 8011528:	6878      	ldr	r0, [r7, #4]
 801152a:	4798      	blx	r3
	}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801152c:	6879      	ldr	r1, [r7, #4]
 801152e:	4806      	ldr	r0, [pc, #24]	@ (8011548 <CDC_Receive_FS+0x3c>)
 8011530:	f7fe fb5c 	bl	800fbec <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8011534:	4804      	ldr	r0, [pc, #16]	@ (8011548 <CDC_Receive_FS+0x3c>)
 8011536:	f7fe fbb7 	bl	800fca8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 801153a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801153c:	4618      	mov	r0, r3
 801153e:	3708      	adds	r7, #8
 8011540:	46bd      	mov	sp, r7
 8011542:	bd80      	pop	{r7, pc}
 8011544:	20001ec8 	.word	0x20001ec8
 8011548:	200017ec 	.word	0x200017ec

0801154c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801154c:	b580      	push	{r7, lr}
 801154e:	b084      	sub	sp, #16
 8011550:	af00      	add	r7, sp, #0
 8011552:	6078      	str	r0, [r7, #4]
 8011554:	460b      	mov	r3, r1
 8011556:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8011558:	2300      	movs	r3, #0
 801155a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 801155c:	4b0d      	ldr	r3, [pc, #52]	@ (8011594 <CDC_Transmit_FS+0x48>)
 801155e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8011562:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8011564:	68bb      	ldr	r3, [r7, #8]
 8011566:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 801156a:	2b00      	cmp	r3, #0
 801156c:	d001      	beq.n	8011572 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 801156e:	2301      	movs	r3, #1
 8011570:	e00b      	b.n	801158a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8011572:	887b      	ldrh	r3, [r7, #2]
 8011574:	461a      	mov	r2, r3
 8011576:	6879      	ldr	r1, [r7, #4]
 8011578:	4806      	ldr	r0, [pc, #24]	@ (8011594 <CDC_Transmit_FS+0x48>)
 801157a:	f7fe fb15 	bl	800fba8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801157e:	4805      	ldr	r0, [pc, #20]	@ (8011594 <CDC_Transmit_FS+0x48>)
 8011580:	f7fe fb52 	bl	800fc28 <USBD_CDC_TransmitPacket>
 8011584:	4603      	mov	r3, r0
 8011586:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8011588:	7bfb      	ldrb	r3, [r7, #15]
}
 801158a:	4618      	mov	r0, r3
 801158c:	3710      	adds	r7, #16
 801158e:	46bd      	mov	sp, r7
 8011590:	bd80      	pop	{r7, pc}
 8011592:	bf00      	nop
 8011594:	200017ec 	.word	0x200017ec

08011598 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8011598:	b480      	push	{r7}
 801159a:	b087      	sub	sp, #28
 801159c:	af00      	add	r7, sp, #0
 801159e:	60f8      	str	r0, [r7, #12]
 80115a0:	60b9      	str	r1, [r7, #8]
 80115a2:	4613      	mov	r3, r2
 80115a4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80115a6:	2300      	movs	r3, #0
 80115a8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80115aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80115ae:	4618      	mov	r0, r3
 80115b0:	371c      	adds	r7, #28
 80115b2:	46bd      	mov	sp, r7
 80115b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115b8:	4770      	bx	lr
	...

080115bc <CDC_Attach_Rx>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void CDC_Attach_Rx(void (*RxData)(uint8_t* buf, uint32_t len)){
 80115bc:	b480      	push	{r7}
 80115be:	b083      	sub	sp, #12
 80115c0:	af00      	add	r7, sp, #0
 80115c2:	6078      	str	r0, [r7, #4]
	dataOnRx = RxData;
 80115c4:	4a04      	ldr	r2, [pc, #16]	@ (80115d8 <CDC_Attach_Rx+0x1c>)
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	6013      	str	r3, [r2, #0]
}
 80115ca:	bf00      	nop
 80115cc:	370c      	adds	r7, #12
 80115ce:	46bd      	mov	sp, r7
 80115d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115d4:	4770      	bx	lr
 80115d6:	bf00      	nop
 80115d8:	20001ec8 	.word	0x20001ec8

080115dc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80115dc:	b480      	push	{r7}
 80115de:	b083      	sub	sp, #12
 80115e0:	af00      	add	r7, sp, #0
 80115e2:	4603      	mov	r3, r0
 80115e4:	6039      	str	r1, [r7, #0]
 80115e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80115e8:	683b      	ldr	r3, [r7, #0]
 80115ea:	2212      	movs	r2, #18
 80115ec:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80115ee:	4b03      	ldr	r3, [pc, #12]	@ (80115fc <USBD_FS_DeviceDescriptor+0x20>)
}
 80115f0:	4618      	mov	r0, r3
 80115f2:	370c      	adds	r7, #12
 80115f4:	46bd      	mov	sp, r7
 80115f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115fa:	4770      	bx	lr
 80115fc:	200000e4 	.word	0x200000e4

08011600 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011600:	b480      	push	{r7}
 8011602:	b083      	sub	sp, #12
 8011604:	af00      	add	r7, sp, #0
 8011606:	4603      	mov	r3, r0
 8011608:	6039      	str	r1, [r7, #0]
 801160a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801160c:	683b      	ldr	r3, [r7, #0]
 801160e:	2204      	movs	r2, #4
 8011610:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8011612:	4b03      	ldr	r3, [pc, #12]	@ (8011620 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8011614:	4618      	mov	r0, r3
 8011616:	370c      	adds	r7, #12
 8011618:	46bd      	mov	sp, r7
 801161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801161e:	4770      	bx	lr
 8011620:	200000f8 	.word	0x200000f8

08011624 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011624:	b580      	push	{r7, lr}
 8011626:	b082      	sub	sp, #8
 8011628:	af00      	add	r7, sp, #0
 801162a:	4603      	mov	r3, r0
 801162c:	6039      	str	r1, [r7, #0]
 801162e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011630:	79fb      	ldrb	r3, [r7, #7]
 8011632:	2b00      	cmp	r3, #0
 8011634:	d105      	bne.n	8011642 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8011636:	683a      	ldr	r2, [r7, #0]
 8011638:	4907      	ldr	r1, [pc, #28]	@ (8011658 <USBD_FS_ProductStrDescriptor+0x34>)
 801163a:	4808      	ldr	r0, [pc, #32]	@ (801165c <USBD_FS_ProductStrDescriptor+0x38>)
 801163c:	f7ff fd80 	bl	8011140 <USBD_GetString>
 8011640:	e004      	b.n	801164c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8011642:	683a      	ldr	r2, [r7, #0]
 8011644:	4904      	ldr	r1, [pc, #16]	@ (8011658 <USBD_FS_ProductStrDescriptor+0x34>)
 8011646:	4805      	ldr	r0, [pc, #20]	@ (801165c <USBD_FS_ProductStrDescriptor+0x38>)
 8011648:	f7ff fd7a 	bl	8011140 <USBD_GetString>
  }
  return USBD_StrDesc;
 801164c:	4b02      	ldr	r3, [pc, #8]	@ (8011658 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801164e:	4618      	mov	r0, r3
 8011650:	3708      	adds	r7, #8
 8011652:	46bd      	mov	sp, r7
 8011654:	bd80      	pop	{r7, pc}
 8011656:	bf00      	nop
 8011658:	20001ecc 	.word	0x20001ecc
 801165c:	08012c38 	.word	0x08012c38

08011660 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011660:	b580      	push	{r7, lr}
 8011662:	b082      	sub	sp, #8
 8011664:	af00      	add	r7, sp, #0
 8011666:	4603      	mov	r3, r0
 8011668:	6039      	str	r1, [r7, #0]
 801166a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801166c:	683a      	ldr	r2, [r7, #0]
 801166e:	4904      	ldr	r1, [pc, #16]	@ (8011680 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8011670:	4804      	ldr	r0, [pc, #16]	@ (8011684 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8011672:	f7ff fd65 	bl	8011140 <USBD_GetString>
  return USBD_StrDesc;
 8011676:	4b02      	ldr	r3, [pc, #8]	@ (8011680 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8011678:	4618      	mov	r0, r3
 801167a:	3708      	adds	r7, #8
 801167c:	46bd      	mov	sp, r7
 801167e:	bd80      	pop	{r7, pc}
 8011680:	20001ecc 	.word	0x20001ecc
 8011684:	08012c50 	.word	0x08012c50

08011688 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011688:	b580      	push	{r7, lr}
 801168a:	b082      	sub	sp, #8
 801168c:	af00      	add	r7, sp, #0
 801168e:	4603      	mov	r3, r0
 8011690:	6039      	str	r1, [r7, #0]
 8011692:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8011694:	683b      	ldr	r3, [r7, #0]
 8011696:	221a      	movs	r2, #26
 8011698:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801169a:	f000 f843 	bl	8011724 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801169e:	4b02      	ldr	r3, [pc, #8]	@ (80116a8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80116a0:	4618      	mov	r0, r3
 80116a2:	3708      	adds	r7, #8
 80116a4:	46bd      	mov	sp, r7
 80116a6:	bd80      	pop	{r7, pc}
 80116a8:	200000fc 	.word	0x200000fc

080116ac <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80116ac:	b580      	push	{r7, lr}
 80116ae:	b082      	sub	sp, #8
 80116b0:	af00      	add	r7, sp, #0
 80116b2:	4603      	mov	r3, r0
 80116b4:	6039      	str	r1, [r7, #0]
 80116b6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80116b8:	79fb      	ldrb	r3, [r7, #7]
 80116ba:	2b00      	cmp	r3, #0
 80116bc:	d105      	bne.n	80116ca <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80116be:	683a      	ldr	r2, [r7, #0]
 80116c0:	4907      	ldr	r1, [pc, #28]	@ (80116e0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80116c2:	4808      	ldr	r0, [pc, #32]	@ (80116e4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80116c4:	f7ff fd3c 	bl	8011140 <USBD_GetString>
 80116c8:	e004      	b.n	80116d4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80116ca:	683a      	ldr	r2, [r7, #0]
 80116cc:	4904      	ldr	r1, [pc, #16]	@ (80116e0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80116ce:	4805      	ldr	r0, [pc, #20]	@ (80116e4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80116d0:	f7ff fd36 	bl	8011140 <USBD_GetString>
  }
  return USBD_StrDesc;
 80116d4:	4b02      	ldr	r3, [pc, #8]	@ (80116e0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80116d6:	4618      	mov	r0, r3
 80116d8:	3708      	adds	r7, #8
 80116da:	46bd      	mov	sp, r7
 80116dc:	bd80      	pop	{r7, pc}
 80116de:	bf00      	nop
 80116e0:	20001ecc 	.word	0x20001ecc
 80116e4:	08012c64 	.word	0x08012c64

080116e8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80116e8:	b580      	push	{r7, lr}
 80116ea:	b082      	sub	sp, #8
 80116ec:	af00      	add	r7, sp, #0
 80116ee:	4603      	mov	r3, r0
 80116f0:	6039      	str	r1, [r7, #0]
 80116f2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80116f4:	79fb      	ldrb	r3, [r7, #7]
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	d105      	bne.n	8011706 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80116fa:	683a      	ldr	r2, [r7, #0]
 80116fc:	4907      	ldr	r1, [pc, #28]	@ (801171c <USBD_FS_InterfaceStrDescriptor+0x34>)
 80116fe:	4808      	ldr	r0, [pc, #32]	@ (8011720 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8011700:	f7ff fd1e 	bl	8011140 <USBD_GetString>
 8011704:	e004      	b.n	8011710 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8011706:	683a      	ldr	r2, [r7, #0]
 8011708:	4904      	ldr	r1, [pc, #16]	@ (801171c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801170a:	4805      	ldr	r0, [pc, #20]	@ (8011720 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801170c:	f7ff fd18 	bl	8011140 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011710:	4b02      	ldr	r3, [pc, #8]	@ (801171c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8011712:	4618      	mov	r0, r3
 8011714:	3708      	adds	r7, #8
 8011716:	46bd      	mov	sp, r7
 8011718:	bd80      	pop	{r7, pc}
 801171a:	bf00      	nop
 801171c:	20001ecc 	.word	0x20001ecc
 8011720:	08012c70 	.word	0x08012c70

08011724 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8011724:	b580      	push	{r7, lr}
 8011726:	b084      	sub	sp, #16
 8011728:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801172a:	4b0f      	ldr	r3, [pc, #60]	@ (8011768 <Get_SerialNum+0x44>)
 801172c:	681b      	ldr	r3, [r3, #0]
 801172e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8011730:	4b0e      	ldr	r3, [pc, #56]	@ (801176c <Get_SerialNum+0x48>)
 8011732:	681b      	ldr	r3, [r3, #0]
 8011734:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8011736:	4b0e      	ldr	r3, [pc, #56]	@ (8011770 <Get_SerialNum+0x4c>)
 8011738:	681b      	ldr	r3, [r3, #0]
 801173a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801173c:	68fa      	ldr	r2, [r7, #12]
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	4413      	add	r3, r2
 8011742:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8011744:	68fb      	ldr	r3, [r7, #12]
 8011746:	2b00      	cmp	r3, #0
 8011748:	d009      	beq.n	801175e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801174a:	2208      	movs	r2, #8
 801174c:	4909      	ldr	r1, [pc, #36]	@ (8011774 <Get_SerialNum+0x50>)
 801174e:	68f8      	ldr	r0, [r7, #12]
 8011750:	f000 f814 	bl	801177c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8011754:	2204      	movs	r2, #4
 8011756:	4908      	ldr	r1, [pc, #32]	@ (8011778 <Get_SerialNum+0x54>)
 8011758:	68b8      	ldr	r0, [r7, #8]
 801175a:	f000 f80f 	bl	801177c <IntToUnicode>
  }
}
 801175e:	bf00      	nop
 8011760:	3710      	adds	r7, #16
 8011762:	46bd      	mov	sp, r7
 8011764:	bd80      	pop	{r7, pc}
 8011766:	bf00      	nop
 8011768:	1fff7a10 	.word	0x1fff7a10
 801176c:	1fff7a14 	.word	0x1fff7a14
 8011770:	1fff7a18 	.word	0x1fff7a18
 8011774:	200000fe 	.word	0x200000fe
 8011778:	2000010e 	.word	0x2000010e

0801177c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801177c:	b480      	push	{r7}
 801177e:	b087      	sub	sp, #28
 8011780:	af00      	add	r7, sp, #0
 8011782:	60f8      	str	r0, [r7, #12]
 8011784:	60b9      	str	r1, [r7, #8]
 8011786:	4613      	mov	r3, r2
 8011788:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801178a:	2300      	movs	r3, #0
 801178c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801178e:	2300      	movs	r3, #0
 8011790:	75fb      	strb	r3, [r7, #23]
 8011792:	e027      	b.n	80117e4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8011794:	68fb      	ldr	r3, [r7, #12]
 8011796:	0f1b      	lsrs	r3, r3, #28
 8011798:	2b09      	cmp	r3, #9
 801179a:	d80b      	bhi.n	80117b4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801179c:	68fb      	ldr	r3, [r7, #12]
 801179e:	0f1b      	lsrs	r3, r3, #28
 80117a0:	b2da      	uxtb	r2, r3
 80117a2:	7dfb      	ldrb	r3, [r7, #23]
 80117a4:	005b      	lsls	r3, r3, #1
 80117a6:	4619      	mov	r1, r3
 80117a8:	68bb      	ldr	r3, [r7, #8]
 80117aa:	440b      	add	r3, r1
 80117ac:	3230      	adds	r2, #48	@ 0x30
 80117ae:	b2d2      	uxtb	r2, r2
 80117b0:	701a      	strb	r2, [r3, #0]
 80117b2:	e00a      	b.n	80117ca <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80117b4:	68fb      	ldr	r3, [r7, #12]
 80117b6:	0f1b      	lsrs	r3, r3, #28
 80117b8:	b2da      	uxtb	r2, r3
 80117ba:	7dfb      	ldrb	r3, [r7, #23]
 80117bc:	005b      	lsls	r3, r3, #1
 80117be:	4619      	mov	r1, r3
 80117c0:	68bb      	ldr	r3, [r7, #8]
 80117c2:	440b      	add	r3, r1
 80117c4:	3237      	adds	r2, #55	@ 0x37
 80117c6:	b2d2      	uxtb	r2, r2
 80117c8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80117ca:	68fb      	ldr	r3, [r7, #12]
 80117cc:	011b      	lsls	r3, r3, #4
 80117ce:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80117d0:	7dfb      	ldrb	r3, [r7, #23]
 80117d2:	005b      	lsls	r3, r3, #1
 80117d4:	3301      	adds	r3, #1
 80117d6:	68ba      	ldr	r2, [r7, #8]
 80117d8:	4413      	add	r3, r2
 80117da:	2200      	movs	r2, #0
 80117dc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80117de:	7dfb      	ldrb	r3, [r7, #23]
 80117e0:	3301      	adds	r3, #1
 80117e2:	75fb      	strb	r3, [r7, #23]
 80117e4:	7dfa      	ldrb	r2, [r7, #23]
 80117e6:	79fb      	ldrb	r3, [r7, #7]
 80117e8:	429a      	cmp	r2, r3
 80117ea:	d3d3      	bcc.n	8011794 <IntToUnicode+0x18>
  }
}
 80117ec:	bf00      	nop
 80117ee:	bf00      	nop
 80117f0:	371c      	adds	r7, #28
 80117f2:	46bd      	mov	sp, r7
 80117f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117f8:	4770      	bx	lr
	...

080117fc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80117fc:	b580      	push	{r7, lr}
 80117fe:	b08a      	sub	sp, #40	@ 0x28
 8011800:	af00      	add	r7, sp, #0
 8011802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011804:	f107 0314 	add.w	r3, r7, #20
 8011808:	2200      	movs	r2, #0
 801180a:	601a      	str	r2, [r3, #0]
 801180c:	605a      	str	r2, [r3, #4]
 801180e:	609a      	str	r2, [r3, #8]
 8011810:	60da      	str	r2, [r3, #12]
 8011812:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	681b      	ldr	r3, [r3, #0]
 8011818:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801181c:	d13a      	bne.n	8011894 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801181e:	2300      	movs	r3, #0
 8011820:	613b      	str	r3, [r7, #16]
 8011822:	4b1e      	ldr	r3, [pc, #120]	@ (801189c <HAL_PCD_MspInit+0xa0>)
 8011824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011826:	4a1d      	ldr	r2, [pc, #116]	@ (801189c <HAL_PCD_MspInit+0xa0>)
 8011828:	f043 0301 	orr.w	r3, r3, #1
 801182c:	6313      	str	r3, [r2, #48]	@ 0x30
 801182e:	4b1b      	ldr	r3, [pc, #108]	@ (801189c <HAL_PCD_MspInit+0xa0>)
 8011830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011832:	f003 0301 	and.w	r3, r3, #1
 8011836:	613b      	str	r3, [r7, #16]
 8011838:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801183a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 801183e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011840:	2302      	movs	r3, #2
 8011842:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011844:	2300      	movs	r3, #0
 8011846:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011848:	2303      	movs	r3, #3
 801184a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801184c:	230a      	movs	r3, #10
 801184e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011850:	f107 0314 	add.w	r3, r7, #20
 8011854:	4619      	mov	r1, r3
 8011856:	4812      	ldr	r0, [pc, #72]	@ (80118a0 <HAL_PCD_MspInit+0xa4>)
 8011858:	f7f4 fe50 	bl	80064fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801185c:	4b0f      	ldr	r3, [pc, #60]	@ (801189c <HAL_PCD_MspInit+0xa0>)
 801185e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011860:	4a0e      	ldr	r2, [pc, #56]	@ (801189c <HAL_PCD_MspInit+0xa0>)
 8011862:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011866:	6353      	str	r3, [r2, #52]	@ 0x34
 8011868:	2300      	movs	r3, #0
 801186a:	60fb      	str	r3, [r7, #12]
 801186c:	4b0b      	ldr	r3, [pc, #44]	@ (801189c <HAL_PCD_MspInit+0xa0>)
 801186e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011870:	4a0a      	ldr	r2, [pc, #40]	@ (801189c <HAL_PCD_MspInit+0xa0>)
 8011872:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8011876:	6453      	str	r3, [r2, #68]	@ 0x44
 8011878:	4b08      	ldr	r3, [pc, #32]	@ (801189c <HAL_PCD_MspInit+0xa0>)
 801187a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801187c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8011880:	60fb      	str	r3, [r7, #12]
 8011882:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8011884:	2200      	movs	r2, #0
 8011886:	2100      	movs	r1, #0
 8011888:	2043      	movs	r0, #67	@ 0x43
 801188a:	f7f4 f9e4 	bl	8005c56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801188e:	2043      	movs	r0, #67	@ 0x43
 8011890:	f7f4 f9fd 	bl	8005c8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8011894:	bf00      	nop
 8011896:	3728      	adds	r7, #40	@ 0x28
 8011898:	46bd      	mov	sp, r7
 801189a:	bd80      	pop	{r7, pc}
 801189c:	40023800 	.word	0x40023800
 80118a0:	40020000 	.word	0x40020000

080118a4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80118a4:	b580      	push	{r7, lr}
 80118a6:	b082      	sub	sp, #8
 80118a8:	af00      	add	r7, sp, #0
 80118aa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80118b8:	4619      	mov	r1, r3
 80118ba:	4610      	mov	r0, r2
 80118bc:	f7fe fadd 	bl	800fe7a <USBD_LL_SetupStage>
}
 80118c0:	bf00      	nop
 80118c2:	3708      	adds	r7, #8
 80118c4:	46bd      	mov	sp, r7
 80118c6:	bd80      	pop	{r7, pc}

080118c8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80118c8:	b580      	push	{r7, lr}
 80118ca:	b082      	sub	sp, #8
 80118cc:	af00      	add	r7, sp, #0
 80118ce:	6078      	str	r0, [r7, #4]
 80118d0:	460b      	mov	r3, r1
 80118d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80118da:	78fa      	ldrb	r2, [r7, #3]
 80118dc:	6879      	ldr	r1, [r7, #4]
 80118de:	4613      	mov	r3, r2
 80118e0:	00db      	lsls	r3, r3, #3
 80118e2:	4413      	add	r3, r2
 80118e4:	009b      	lsls	r3, r3, #2
 80118e6:	440b      	add	r3, r1
 80118e8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80118ec:	681a      	ldr	r2, [r3, #0]
 80118ee:	78fb      	ldrb	r3, [r7, #3]
 80118f0:	4619      	mov	r1, r3
 80118f2:	f7fe fb17 	bl	800ff24 <USBD_LL_DataOutStage>
}
 80118f6:	bf00      	nop
 80118f8:	3708      	adds	r7, #8
 80118fa:	46bd      	mov	sp, r7
 80118fc:	bd80      	pop	{r7, pc}

080118fe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80118fe:	b580      	push	{r7, lr}
 8011900:	b082      	sub	sp, #8
 8011902:	af00      	add	r7, sp, #0
 8011904:	6078      	str	r0, [r7, #4]
 8011906:	460b      	mov	r3, r1
 8011908:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8011910:	78fa      	ldrb	r2, [r7, #3]
 8011912:	6879      	ldr	r1, [r7, #4]
 8011914:	4613      	mov	r3, r2
 8011916:	00db      	lsls	r3, r3, #3
 8011918:	4413      	add	r3, r2
 801191a:	009b      	lsls	r3, r3, #2
 801191c:	440b      	add	r3, r1
 801191e:	3320      	adds	r3, #32
 8011920:	681a      	ldr	r2, [r3, #0]
 8011922:	78fb      	ldrb	r3, [r7, #3]
 8011924:	4619      	mov	r1, r3
 8011926:	f7fe fbb0 	bl	801008a <USBD_LL_DataInStage>
}
 801192a:	bf00      	nop
 801192c:	3708      	adds	r7, #8
 801192e:	46bd      	mov	sp, r7
 8011930:	bd80      	pop	{r7, pc}

08011932 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011932:	b580      	push	{r7, lr}
 8011934:	b082      	sub	sp, #8
 8011936:	af00      	add	r7, sp, #0
 8011938:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011940:	4618      	mov	r0, r3
 8011942:	f7fe fcea 	bl	801031a <USBD_LL_SOF>
}
 8011946:	bf00      	nop
 8011948:	3708      	adds	r7, #8
 801194a:	46bd      	mov	sp, r7
 801194c:	bd80      	pop	{r7, pc}

0801194e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801194e:	b580      	push	{r7, lr}
 8011950:	b084      	sub	sp, #16
 8011952:	af00      	add	r7, sp, #0
 8011954:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8011956:	2301      	movs	r3, #1
 8011958:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	79db      	ldrb	r3, [r3, #7]
 801195e:	2b02      	cmp	r3, #2
 8011960:	d001      	beq.n	8011966 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8011962:	f7f2 ff6d 	bl	8004840 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801196c:	7bfa      	ldrb	r2, [r7, #15]
 801196e:	4611      	mov	r1, r2
 8011970:	4618      	mov	r0, r3
 8011972:	f7fe fc8e 	bl	8010292 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801197c:	4618      	mov	r0, r3
 801197e:	f7fe fc36 	bl	80101ee <USBD_LL_Reset>
}
 8011982:	bf00      	nop
 8011984:	3710      	adds	r7, #16
 8011986:	46bd      	mov	sp, r7
 8011988:	bd80      	pop	{r7, pc}
	...

0801198c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801198c:	b580      	push	{r7, lr}
 801198e:	b082      	sub	sp, #8
 8011990:	af00      	add	r7, sp, #0
 8011992:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801199a:	4618      	mov	r0, r3
 801199c:	f7fe fc89 	bl	80102b2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	681b      	ldr	r3, [r3, #0]
 80119a4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80119a8:	681b      	ldr	r3, [r3, #0]
 80119aa:	687a      	ldr	r2, [r7, #4]
 80119ac:	6812      	ldr	r2, [r2, #0]
 80119ae:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80119b2:	f043 0301 	orr.w	r3, r3, #1
 80119b6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	7adb      	ldrb	r3, [r3, #11]
 80119bc:	2b00      	cmp	r3, #0
 80119be:	d005      	beq.n	80119cc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80119c0:	4b04      	ldr	r3, [pc, #16]	@ (80119d4 <HAL_PCD_SuspendCallback+0x48>)
 80119c2:	691b      	ldr	r3, [r3, #16]
 80119c4:	4a03      	ldr	r2, [pc, #12]	@ (80119d4 <HAL_PCD_SuspendCallback+0x48>)
 80119c6:	f043 0306 	orr.w	r3, r3, #6
 80119ca:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80119cc:	bf00      	nop
 80119ce:	3708      	adds	r7, #8
 80119d0:	46bd      	mov	sp, r7
 80119d2:	bd80      	pop	{r7, pc}
 80119d4:	e000ed00 	.word	0xe000ed00

080119d8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80119d8:	b580      	push	{r7, lr}
 80119da:	b082      	sub	sp, #8
 80119dc:	af00      	add	r7, sp, #0
 80119de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80119e6:	4618      	mov	r0, r3
 80119e8:	f7fe fc7f 	bl	80102ea <USBD_LL_Resume>
}
 80119ec:	bf00      	nop
 80119ee:	3708      	adds	r7, #8
 80119f0:	46bd      	mov	sp, r7
 80119f2:	bd80      	pop	{r7, pc}

080119f4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80119f4:	b580      	push	{r7, lr}
 80119f6:	b082      	sub	sp, #8
 80119f8:	af00      	add	r7, sp, #0
 80119fa:	6078      	str	r0, [r7, #4]
 80119fc:	460b      	mov	r3, r1
 80119fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011a06:	78fa      	ldrb	r2, [r7, #3]
 8011a08:	4611      	mov	r1, r2
 8011a0a:	4618      	mov	r0, r3
 8011a0c:	f7fe fcd7 	bl	80103be <USBD_LL_IsoOUTIncomplete>
}
 8011a10:	bf00      	nop
 8011a12:	3708      	adds	r7, #8
 8011a14:	46bd      	mov	sp, r7
 8011a16:	bd80      	pop	{r7, pc}

08011a18 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011a18:	b580      	push	{r7, lr}
 8011a1a:	b082      	sub	sp, #8
 8011a1c:	af00      	add	r7, sp, #0
 8011a1e:	6078      	str	r0, [r7, #4]
 8011a20:	460b      	mov	r3, r1
 8011a22:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011a2a:	78fa      	ldrb	r2, [r7, #3]
 8011a2c:	4611      	mov	r1, r2
 8011a2e:	4618      	mov	r0, r3
 8011a30:	f7fe fc93 	bl	801035a <USBD_LL_IsoINIncomplete>
}
 8011a34:	bf00      	nop
 8011a36:	3708      	adds	r7, #8
 8011a38:	46bd      	mov	sp, r7
 8011a3a:	bd80      	pop	{r7, pc}

08011a3c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011a3c:	b580      	push	{r7, lr}
 8011a3e:	b082      	sub	sp, #8
 8011a40:	af00      	add	r7, sp, #0
 8011a42:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011a4a:	4618      	mov	r0, r3
 8011a4c:	f7fe fce9 	bl	8010422 <USBD_LL_DevConnected>
}
 8011a50:	bf00      	nop
 8011a52:	3708      	adds	r7, #8
 8011a54:	46bd      	mov	sp, r7
 8011a56:	bd80      	pop	{r7, pc}

08011a58 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011a58:	b580      	push	{r7, lr}
 8011a5a:	b082      	sub	sp, #8
 8011a5c:	af00      	add	r7, sp, #0
 8011a5e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011a66:	4618      	mov	r0, r3
 8011a68:	f7fe fce6 	bl	8010438 <USBD_LL_DevDisconnected>
}
 8011a6c:	bf00      	nop
 8011a6e:	3708      	adds	r7, #8
 8011a70:	46bd      	mov	sp, r7
 8011a72:	bd80      	pop	{r7, pc}

08011a74 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8011a74:	b580      	push	{r7, lr}
 8011a76:	b082      	sub	sp, #8
 8011a78:	af00      	add	r7, sp, #0
 8011a7a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	781b      	ldrb	r3, [r3, #0]
 8011a80:	2b00      	cmp	r3, #0
 8011a82:	d13c      	bne.n	8011afe <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8011a84:	4a20      	ldr	r2, [pc, #128]	@ (8011b08 <USBD_LL_Init+0x94>)
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	4a1e      	ldr	r2, [pc, #120]	@ (8011b08 <USBD_LL_Init+0x94>)
 8011a90:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8011a94:	4b1c      	ldr	r3, [pc, #112]	@ (8011b08 <USBD_LL_Init+0x94>)
 8011a96:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8011a9a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8011a9c:	4b1a      	ldr	r3, [pc, #104]	@ (8011b08 <USBD_LL_Init+0x94>)
 8011a9e:	2204      	movs	r2, #4
 8011aa0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8011aa2:	4b19      	ldr	r3, [pc, #100]	@ (8011b08 <USBD_LL_Init+0x94>)
 8011aa4:	2202      	movs	r2, #2
 8011aa6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8011aa8:	4b17      	ldr	r3, [pc, #92]	@ (8011b08 <USBD_LL_Init+0x94>)
 8011aaa:	2200      	movs	r2, #0
 8011aac:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8011aae:	4b16      	ldr	r3, [pc, #88]	@ (8011b08 <USBD_LL_Init+0x94>)
 8011ab0:	2202      	movs	r2, #2
 8011ab2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8011ab4:	4b14      	ldr	r3, [pc, #80]	@ (8011b08 <USBD_LL_Init+0x94>)
 8011ab6:	2200      	movs	r2, #0
 8011ab8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8011aba:	4b13      	ldr	r3, [pc, #76]	@ (8011b08 <USBD_LL_Init+0x94>)
 8011abc:	2200      	movs	r2, #0
 8011abe:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8011ac0:	4b11      	ldr	r3, [pc, #68]	@ (8011b08 <USBD_LL_Init+0x94>)
 8011ac2:	2200      	movs	r2, #0
 8011ac4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8011ac6:	4b10      	ldr	r3, [pc, #64]	@ (8011b08 <USBD_LL_Init+0x94>)
 8011ac8:	2200      	movs	r2, #0
 8011aca:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8011acc:	4b0e      	ldr	r3, [pc, #56]	@ (8011b08 <USBD_LL_Init+0x94>)
 8011ace:	2200      	movs	r2, #0
 8011ad0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8011ad2:	480d      	ldr	r0, [pc, #52]	@ (8011b08 <USBD_LL_Init+0x94>)
 8011ad4:	f7f8 fad3 	bl	800a07e <HAL_PCD_Init>
 8011ad8:	4603      	mov	r3, r0
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	d001      	beq.n	8011ae2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8011ade:	f7f2 feaf 	bl	8004840 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8011ae2:	2180      	movs	r1, #128	@ 0x80
 8011ae4:	4808      	ldr	r0, [pc, #32]	@ (8011b08 <USBD_LL_Init+0x94>)
 8011ae6:	f7f9 fd00 	bl	800b4ea <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8011aea:	2240      	movs	r2, #64	@ 0x40
 8011aec:	2100      	movs	r1, #0
 8011aee:	4806      	ldr	r0, [pc, #24]	@ (8011b08 <USBD_LL_Init+0x94>)
 8011af0:	f7f9 fcb4 	bl	800b45c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8011af4:	2280      	movs	r2, #128	@ 0x80
 8011af6:	2101      	movs	r1, #1
 8011af8:	4803      	ldr	r0, [pc, #12]	@ (8011b08 <USBD_LL_Init+0x94>)
 8011afa:	f7f9 fcaf 	bl	800b45c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8011afe:	2300      	movs	r3, #0
}
 8011b00:	4618      	mov	r0, r3
 8011b02:	3708      	adds	r7, #8
 8011b04:	46bd      	mov	sp, r7
 8011b06:	bd80      	pop	{r7, pc}
 8011b08:	200020cc 	.word	0x200020cc

08011b0c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8011b0c:	b580      	push	{r7, lr}
 8011b0e:	b084      	sub	sp, #16
 8011b10:	af00      	add	r7, sp, #0
 8011b12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011b14:	2300      	movs	r3, #0
 8011b16:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011b18:	2300      	movs	r3, #0
 8011b1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011b22:	4618      	mov	r0, r3
 8011b24:	f7f8 fbba 	bl	800a29c <HAL_PCD_Start>
 8011b28:	4603      	mov	r3, r0
 8011b2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011b2c:	7bfb      	ldrb	r3, [r7, #15]
 8011b2e:	4618      	mov	r0, r3
 8011b30:	f000 f942 	bl	8011db8 <USBD_Get_USB_Status>
 8011b34:	4603      	mov	r3, r0
 8011b36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011b38:	7bbb      	ldrb	r3, [r7, #14]
}
 8011b3a:	4618      	mov	r0, r3
 8011b3c:	3710      	adds	r7, #16
 8011b3e:	46bd      	mov	sp, r7
 8011b40:	bd80      	pop	{r7, pc}

08011b42 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8011b42:	b580      	push	{r7, lr}
 8011b44:	b084      	sub	sp, #16
 8011b46:	af00      	add	r7, sp, #0
 8011b48:	6078      	str	r0, [r7, #4]
 8011b4a:	4608      	mov	r0, r1
 8011b4c:	4611      	mov	r1, r2
 8011b4e:	461a      	mov	r2, r3
 8011b50:	4603      	mov	r3, r0
 8011b52:	70fb      	strb	r3, [r7, #3]
 8011b54:	460b      	mov	r3, r1
 8011b56:	70bb      	strb	r3, [r7, #2]
 8011b58:	4613      	mov	r3, r2
 8011b5a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011b5c:	2300      	movs	r3, #0
 8011b5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011b60:	2300      	movs	r3, #0
 8011b62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8011b6a:	78bb      	ldrb	r3, [r7, #2]
 8011b6c:	883a      	ldrh	r2, [r7, #0]
 8011b6e:	78f9      	ldrb	r1, [r7, #3]
 8011b70:	f7f9 f88e 	bl	800ac90 <HAL_PCD_EP_Open>
 8011b74:	4603      	mov	r3, r0
 8011b76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011b78:	7bfb      	ldrb	r3, [r7, #15]
 8011b7a:	4618      	mov	r0, r3
 8011b7c:	f000 f91c 	bl	8011db8 <USBD_Get_USB_Status>
 8011b80:	4603      	mov	r3, r0
 8011b82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011b84:	7bbb      	ldrb	r3, [r7, #14]
}
 8011b86:	4618      	mov	r0, r3
 8011b88:	3710      	adds	r7, #16
 8011b8a:	46bd      	mov	sp, r7
 8011b8c:	bd80      	pop	{r7, pc}

08011b8e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011b8e:	b580      	push	{r7, lr}
 8011b90:	b084      	sub	sp, #16
 8011b92:	af00      	add	r7, sp, #0
 8011b94:	6078      	str	r0, [r7, #4]
 8011b96:	460b      	mov	r3, r1
 8011b98:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011b9a:	2300      	movs	r3, #0
 8011b9c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011b9e:	2300      	movs	r3, #0
 8011ba0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011ba8:	78fa      	ldrb	r2, [r7, #3]
 8011baa:	4611      	mov	r1, r2
 8011bac:	4618      	mov	r0, r3
 8011bae:	f7f9 f8d9 	bl	800ad64 <HAL_PCD_EP_Close>
 8011bb2:	4603      	mov	r3, r0
 8011bb4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011bb6:	7bfb      	ldrb	r3, [r7, #15]
 8011bb8:	4618      	mov	r0, r3
 8011bba:	f000 f8fd 	bl	8011db8 <USBD_Get_USB_Status>
 8011bbe:	4603      	mov	r3, r0
 8011bc0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011bc2:	7bbb      	ldrb	r3, [r7, #14]
}
 8011bc4:	4618      	mov	r0, r3
 8011bc6:	3710      	adds	r7, #16
 8011bc8:	46bd      	mov	sp, r7
 8011bca:	bd80      	pop	{r7, pc}

08011bcc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011bcc:	b580      	push	{r7, lr}
 8011bce:	b084      	sub	sp, #16
 8011bd0:	af00      	add	r7, sp, #0
 8011bd2:	6078      	str	r0, [r7, #4]
 8011bd4:	460b      	mov	r3, r1
 8011bd6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011bd8:	2300      	movs	r3, #0
 8011bda:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011bdc:	2300      	movs	r3, #0
 8011bde:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011be6:	78fa      	ldrb	r2, [r7, #3]
 8011be8:	4611      	mov	r1, r2
 8011bea:	4618      	mov	r0, r3
 8011bec:	f7f9 f991 	bl	800af12 <HAL_PCD_EP_SetStall>
 8011bf0:	4603      	mov	r3, r0
 8011bf2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011bf4:	7bfb      	ldrb	r3, [r7, #15]
 8011bf6:	4618      	mov	r0, r3
 8011bf8:	f000 f8de 	bl	8011db8 <USBD_Get_USB_Status>
 8011bfc:	4603      	mov	r3, r0
 8011bfe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011c00:	7bbb      	ldrb	r3, [r7, #14]
}
 8011c02:	4618      	mov	r0, r3
 8011c04:	3710      	adds	r7, #16
 8011c06:	46bd      	mov	sp, r7
 8011c08:	bd80      	pop	{r7, pc}

08011c0a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011c0a:	b580      	push	{r7, lr}
 8011c0c:	b084      	sub	sp, #16
 8011c0e:	af00      	add	r7, sp, #0
 8011c10:	6078      	str	r0, [r7, #4]
 8011c12:	460b      	mov	r3, r1
 8011c14:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011c16:	2300      	movs	r3, #0
 8011c18:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011c1a:	2300      	movs	r3, #0
 8011c1c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011c24:	78fa      	ldrb	r2, [r7, #3]
 8011c26:	4611      	mov	r1, r2
 8011c28:	4618      	mov	r0, r3
 8011c2a:	f7f9 f9d5 	bl	800afd8 <HAL_PCD_EP_ClrStall>
 8011c2e:	4603      	mov	r3, r0
 8011c30:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011c32:	7bfb      	ldrb	r3, [r7, #15]
 8011c34:	4618      	mov	r0, r3
 8011c36:	f000 f8bf 	bl	8011db8 <USBD_Get_USB_Status>
 8011c3a:	4603      	mov	r3, r0
 8011c3c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011c3e:	7bbb      	ldrb	r3, [r7, #14]
}
 8011c40:	4618      	mov	r0, r3
 8011c42:	3710      	adds	r7, #16
 8011c44:	46bd      	mov	sp, r7
 8011c46:	bd80      	pop	{r7, pc}

08011c48 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011c48:	b480      	push	{r7}
 8011c4a:	b085      	sub	sp, #20
 8011c4c:	af00      	add	r7, sp, #0
 8011c4e:	6078      	str	r0, [r7, #4]
 8011c50:	460b      	mov	r3, r1
 8011c52:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011c5a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8011c5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	da0b      	bge.n	8011c7c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8011c64:	78fb      	ldrb	r3, [r7, #3]
 8011c66:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011c6a:	68f9      	ldr	r1, [r7, #12]
 8011c6c:	4613      	mov	r3, r2
 8011c6e:	00db      	lsls	r3, r3, #3
 8011c70:	4413      	add	r3, r2
 8011c72:	009b      	lsls	r3, r3, #2
 8011c74:	440b      	add	r3, r1
 8011c76:	3316      	adds	r3, #22
 8011c78:	781b      	ldrb	r3, [r3, #0]
 8011c7a:	e00b      	b.n	8011c94 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8011c7c:	78fb      	ldrb	r3, [r7, #3]
 8011c7e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011c82:	68f9      	ldr	r1, [r7, #12]
 8011c84:	4613      	mov	r3, r2
 8011c86:	00db      	lsls	r3, r3, #3
 8011c88:	4413      	add	r3, r2
 8011c8a:	009b      	lsls	r3, r3, #2
 8011c8c:	440b      	add	r3, r1
 8011c8e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8011c92:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011c94:	4618      	mov	r0, r3
 8011c96:	3714      	adds	r7, #20
 8011c98:	46bd      	mov	sp, r7
 8011c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c9e:	4770      	bx	lr

08011ca0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8011ca0:	b580      	push	{r7, lr}
 8011ca2:	b084      	sub	sp, #16
 8011ca4:	af00      	add	r7, sp, #0
 8011ca6:	6078      	str	r0, [r7, #4]
 8011ca8:	460b      	mov	r3, r1
 8011caa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011cac:	2300      	movs	r3, #0
 8011cae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011cb0:	2300      	movs	r3, #0
 8011cb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011cba:	78fa      	ldrb	r2, [r7, #3]
 8011cbc:	4611      	mov	r1, r2
 8011cbe:	4618      	mov	r0, r3
 8011cc0:	f7f8 ffc2 	bl	800ac48 <HAL_PCD_SetAddress>
 8011cc4:	4603      	mov	r3, r0
 8011cc6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011cc8:	7bfb      	ldrb	r3, [r7, #15]
 8011cca:	4618      	mov	r0, r3
 8011ccc:	f000 f874 	bl	8011db8 <USBD_Get_USB_Status>
 8011cd0:	4603      	mov	r3, r0
 8011cd2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011cd4:	7bbb      	ldrb	r3, [r7, #14]
}
 8011cd6:	4618      	mov	r0, r3
 8011cd8:	3710      	adds	r7, #16
 8011cda:	46bd      	mov	sp, r7
 8011cdc:	bd80      	pop	{r7, pc}

08011cde <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011cde:	b580      	push	{r7, lr}
 8011ce0:	b086      	sub	sp, #24
 8011ce2:	af00      	add	r7, sp, #0
 8011ce4:	60f8      	str	r0, [r7, #12]
 8011ce6:	607a      	str	r2, [r7, #4]
 8011ce8:	603b      	str	r3, [r7, #0]
 8011cea:	460b      	mov	r3, r1
 8011cec:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011cee:	2300      	movs	r3, #0
 8011cf0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011cf2:	2300      	movs	r3, #0
 8011cf4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8011cf6:	68fb      	ldr	r3, [r7, #12]
 8011cf8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8011cfc:	7af9      	ldrb	r1, [r7, #11]
 8011cfe:	683b      	ldr	r3, [r7, #0]
 8011d00:	687a      	ldr	r2, [r7, #4]
 8011d02:	f7f9 f8cc 	bl	800ae9e <HAL_PCD_EP_Transmit>
 8011d06:	4603      	mov	r3, r0
 8011d08:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011d0a:	7dfb      	ldrb	r3, [r7, #23]
 8011d0c:	4618      	mov	r0, r3
 8011d0e:	f000 f853 	bl	8011db8 <USBD_Get_USB_Status>
 8011d12:	4603      	mov	r3, r0
 8011d14:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011d16:	7dbb      	ldrb	r3, [r7, #22]
}
 8011d18:	4618      	mov	r0, r3
 8011d1a:	3718      	adds	r7, #24
 8011d1c:	46bd      	mov	sp, r7
 8011d1e:	bd80      	pop	{r7, pc}

08011d20 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011d20:	b580      	push	{r7, lr}
 8011d22:	b086      	sub	sp, #24
 8011d24:	af00      	add	r7, sp, #0
 8011d26:	60f8      	str	r0, [r7, #12]
 8011d28:	607a      	str	r2, [r7, #4]
 8011d2a:	603b      	str	r3, [r7, #0]
 8011d2c:	460b      	mov	r3, r1
 8011d2e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011d30:	2300      	movs	r3, #0
 8011d32:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011d34:	2300      	movs	r3, #0
 8011d36:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8011d38:	68fb      	ldr	r3, [r7, #12]
 8011d3a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8011d3e:	7af9      	ldrb	r1, [r7, #11]
 8011d40:	683b      	ldr	r3, [r7, #0]
 8011d42:	687a      	ldr	r2, [r7, #4]
 8011d44:	f7f9 f858 	bl	800adf8 <HAL_PCD_EP_Receive>
 8011d48:	4603      	mov	r3, r0
 8011d4a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011d4c:	7dfb      	ldrb	r3, [r7, #23]
 8011d4e:	4618      	mov	r0, r3
 8011d50:	f000 f832 	bl	8011db8 <USBD_Get_USB_Status>
 8011d54:	4603      	mov	r3, r0
 8011d56:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011d58:	7dbb      	ldrb	r3, [r7, #22]
}
 8011d5a:	4618      	mov	r0, r3
 8011d5c:	3718      	adds	r7, #24
 8011d5e:	46bd      	mov	sp, r7
 8011d60:	bd80      	pop	{r7, pc}

08011d62 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011d62:	b580      	push	{r7, lr}
 8011d64:	b082      	sub	sp, #8
 8011d66:	af00      	add	r7, sp, #0
 8011d68:	6078      	str	r0, [r7, #4]
 8011d6a:	460b      	mov	r3, r1
 8011d6c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011d74:	78fa      	ldrb	r2, [r7, #3]
 8011d76:	4611      	mov	r1, r2
 8011d78:	4618      	mov	r0, r3
 8011d7a:	f7f9 f878 	bl	800ae6e <HAL_PCD_EP_GetRxCount>
 8011d7e:	4603      	mov	r3, r0
}
 8011d80:	4618      	mov	r0, r3
 8011d82:	3708      	adds	r7, #8
 8011d84:	46bd      	mov	sp, r7
 8011d86:	bd80      	pop	{r7, pc}

08011d88 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8011d88:	b480      	push	{r7}
 8011d8a:	b083      	sub	sp, #12
 8011d8c:	af00      	add	r7, sp, #0
 8011d8e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8011d90:	4b03      	ldr	r3, [pc, #12]	@ (8011da0 <USBD_static_malloc+0x18>)
}
 8011d92:	4618      	mov	r0, r3
 8011d94:	370c      	adds	r7, #12
 8011d96:	46bd      	mov	sp, r7
 8011d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d9c:	4770      	bx	lr
 8011d9e:	bf00      	nop
 8011da0:	200025b0 	.word	0x200025b0

08011da4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8011da4:	b480      	push	{r7}
 8011da6:	b083      	sub	sp, #12
 8011da8:	af00      	add	r7, sp, #0
 8011daa:	6078      	str	r0, [r7, #4]

}
 8011dac:	bf00      	nop
 8011dae:	370c      	adds	r7, #12
 8011db0:	46bd      	mov	sp, r7
 8011db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011db6:	4770      	bx	lr

08011db8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011db8:	b480      	push	{r7}
 8011dba:	b085      	sub	sp, #20
 8011dbc:	af00      	add	r7, sp, #0
 8011dbe:	4603      	mov	r3, r0
 8011dc0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011dc2:	2300      	movs	r3, #0
 8011dc4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8011dc6:	79fb      	ldrb	r3, [r7, #7]
 8011dc8:	2b03      	cmp	r3, #3
 8011dca:	d817      	bhi.n	8011dfc <USBD_Get_USB_Status+0x44>
 8011dcc:	a201      	add	r2, pc, #4	@ (adr r2, 8011dd4 <USBD_Get_USB_Status+0x1c>)
 8011dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011dd2:	bf00      	nop
 8011dd4:	08011de5 	.word	0x08011de5
 8011dd8:	08011deb 	.word	0x08011deb
 8011ddc:	08011df1 	.word	0x08011df1
 8011de0:	08011df7 	.word	0x08011df7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8011de4:	2300      	movs	r3, #0
 8011de6:	73fb      	strb	r3, [r7, #15]
    break;
 8011de8:	e00b      	b.n	8011e02 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011dea:	2303      	movs	r3, #3
 8011dec:	73fb      	strb	r3, [r7, #15]
    break;
 8011dee:	e008      	b.n	8011e02 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011df0:	2301      	movs	r3, #1
 8011df2:	73fb      	strb	r3, [r7, #15]
    break;
 8011df4:	e005      	b.n	8011e02 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011df6:	2303      	movs	r3, #3
 8011df8:	73fb      	strb	r3, [r7, #15]
    break;
 8011dfa:	e002      	b.n	8011e02 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8011dfc:	2303      	movs	r3, #3
 8011dfe:	73fb      	strb	r3, [r7, #15]
    break;
 8011e00:	bf00      	nop
  }
  return usb_status;
 8011e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8011e04:	4618      	mov	r0, r3
 8011e06:	3714      	adds	r7, #20
 8011e08:	46bd      	mov	sp, r7
 8011e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e0e:	4770      	bx	lr

08011e10 <__itoa>:
 8011e10:	1e93      	subs	r3, r2, #2
 8011e12:	2b22      	cmp	r3, #34	@ 0x22
 8011e14:	b510      	push	{r4, lr}
 8011e16:	460c      	mov	r4, r1
 8011e18:	d904      	bls.n	8011e24 <__itoa+0x14>
 8011e1a:	2300      	movs	r3, #0
 8011e1c:	700b      	strb	r3, [r1, #0]
 8011e1e:	461c      	mov	r4, r3
 8011e20:	4620      	mov	r0, r4
 8011e22:	bd10      	pop	{r4, pc}
 8011e24:	2a0a      	cmp	r2, #10
 8011e26:	d109      	bne.n	8011e3c <__itoa+0x2c>
 8011e28:	2800      	cmp	r0, #0
 8011e2a:	da07      	bge.n	8011e3c <__itoa+0x2c>
 8011e2c:	232d      	movs	r3, #45	@ 0x2d
 8011e2e:	700b      	strb	r3, [r1, #0]
 8011e30:	4240      	negs	r0, r0
 8011e32:	2101      	movs	r1, #1
 8011e34:	4421      	add	r1, r4
 8011e36:	f000 f805 	bl	8011e44 <__utoa>
 8011e3a:	e7f1      	b.n	8011e20 <__itoa+0x10>
 8011e3c:	2100      	movs	r1, #0
 8011e3e:	e7f9      	b.n	8011e34 <__itoa+0x24>

08011e40 <itoa>:
 8011e40:	f7ff bfe6 	b.w	8011e10 <__itoa>

08011e44 <__utoa>:
 8011e44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011e46:	4c1f      	ldr	r4, [pc, #124]	@ (8011ec4 <__utoa+0x80>)
 8011e48:	b08b      	sub	sp, #44	@ 0x2c
 8011e4a:	4605      	mov	r5, r0
 8011e4c:	460b      	mov	r3, r1
 8011e4e:	466e      	mov	r6, sp
 8011e50:	f104 0c20 	add.w	ip, r4, #32
 8011e54:	6820      	ldr	r0, [r4, #0]
 8011e56:	6861      	ldr	r1, [r4, #4]
 8011e58:	4637      	mov	r7, r6
 8011e5a:	c703      	stmia	r7!, {r0, r1}
 8011e5c:	3408      	adds	r4, #8
 8011e5e:	4564      	cmp	r4, ip
 8011e60:	463e      	mov	r6, r7
 8011e62:	d1f7      	bne.n	8011e54 <__utoa+0x10>
 8011e64:	7921      	ldrb	r1, [r4, #4]
 8011e66:	7139      	strb	r1, [r7, #4]
 8011e68:	1e91      	subs	r1, r2, #2
 8011e6a:	6820      	ldr	r0, [r4, #0]
 8011e6c:	6038      	str	r0, [r7, #0]
 8011e6e:	2922      	cmp	r1, #34	@ 0x22
 8011e70:	f04f 0100 	mov.w	r1, #0
 8011e74:	d904      	bls.n	8011e80 <__utoa+0x3c>
 8011e76:	7019      	strb	r1, [r3, #0]
 8011e78:	460b      	mov	r3, r1
 8011e7a:	4618      	mov	r0, r3
 8011e7c:	b00b      	add	sp, #44	@ 0x2c
 8011e7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011e80:	1e58      	subs	r0, r3, #1
 8011e82:	4684      	mov	ip, r0
 8011e84:	fbb5 f7f2 	udiv	r7, r5, r2
 8011e88:	fb02 5617 	mls	r6, r2, r7, r5
 8011e8c:	3628      	adds	r6, #40	@ 0x28
 8011e8e:	446e      	add	r6, sp
 8011e90:	460c      	mov	r4, r1
 8011e92:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8011e96:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8011e9a:	462e      	mov	r6, r5
 8011e9c:	42b2      	cmp	r2, r6
 8011e9e:	f101 0101 	add.w	r1, r1, #1
 8011ea2:	463d      	mov	r5, r7
 8011ea4:	d9ee      	bls.n	8011e84 <__utoa+0x40>
 8011ea6:	2200      	movs	r2, #0
 8011ea8:	545a      	strb	r2, [r3, r1]
 8011eaa:	1919      	adds	r1, r3, r4
 8011eac:	1aa5      	subs	r5, r4, r2
 8011eae:	42aa      	cmp	r2, r5
 8011eb0:	dae3      	bge.n	8011e7a <__utoa+0x36>
 8011eb2:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8011eb6:	780e      	ldrb	r6, [r1, #0]
 8011eb8:	7006      	strb	r6, [r0, #0]
 8011eba:	3201      	adds	r2, #1
 8011ebc:	f801 5901 	strb.w	r5, [r1], #-1
 8011ec0:	e7f4      	b.n	8011eac <__utoa+0x68>
 8011ec2:	bf00      	nop
 8011ec4:	08013f38 	.word	0x08013f38

08011ec8 <siprintf>:
 8011ec8:	b40e      	push	{r1, r2, r3}
 8011eca:	b510      	push	{r4, lr}
 8011ecc:	b09d      	sub	sp, #116	@ 0x74
 8011ece:	ab1f      	add	r3, sp, #124	@ 0x7c
 8011ed0:	9002      	str	r0, [sp, #8]
 8011ed2:	9006      	str	r0, [sp, #24]
 8011ed4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8011ed8:	480a      	ldr	r0, [pc, #40]	@ (8011f04 <siprintf+0x3c>)
 8011eda:	9107      	str	r1, [sp, #28]
 8011edc:	9104      	str	r1, [sp, #16]
 8011ede:	490a      	ldr	r1, [pc, #40]	@ (8011f08 <siprintf+0x40>)
 8011ee0:	f853 2b04 	ldr.w	r2, [r3], #4
 8011ee4:	9105      	str	r1, [sp, #20]
 8011ee6:	2400      	movs	r4, #0
 8011ee8:	a902      	add	r1, sp, #8
 8011eea:	6800      	ldr	r0, [r0, #0]
 8011eec:	9301      	str	r3, [sp, #4]
 8011eee:	941b      	str	r4, [sp, #108]	@ 0x6c
 8011ef0:	f000 f9b6 	bl	8012260 <_svfiprintf_r>
 8011ef4:	9b02      	ldr	r3, [sp, #8]
 8011ef6:	701c      	strb	r4, [r3, #0]
 8011ef8:	b01d      	add	sp, #116	@ 0x74
 8011efa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011efe:	b003      	add	sp, #12
 8011f00:	4770      	bx	lr
 8011f02:	bf00      	nop
 8011f04:	20000118 	.word	0x20000118
 8011f08:	ffff0208 	.word	0xffff0208

08011f0c <memset>:
 8011f0c:	4402      	add	r2, r0
 8011f0e:	4603      	mov	r3, r0
 8011f10:	4293      	cmp	r3, r2
 8011f12:	d100      	bne.n	8011f16 <memset+0xa>
 8011f14:	4770      	bx	lr
 8011f16:	f803 1b01 	strb.w	r1, [r3], #1
 8011f1a:	e7f9      	b.n	8011f10 <memset+0x4>

08011f1c <strncpy>:
 8011f1c:	b510      	push	{r4, lr}
 8011f1e:	3901      	subs	r1, #1
 8011f20:	4603      	mov	r3, r0
 8011f22:	b132      	cbz	r2, 8011f32 <strncpy+0x16>
 8011f24:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8011f28:	f803 4b01 	strb.w	r4, [r3], #1
 8011f2c:	3a01      	subs	r2, #1
 8011f2e:	2c00      	cmp	r4, #0
 8011f30:	d1f7      	bne.n	8011f22 <strncpy+0x6>
 8011f32:	441a      	add	r2, r3
 8011f34:	2100      	movs	r1, #0
 8011f36:	4293      	cmp	r3, r2
 8011f38:	d100      	bne.n	8011f3c <strncpy+0x20>
 8011f3a:	bd10      	pop	{r4, pc}
 8011f3c:	f803 1b01 	strb.w	r1, [r3], #1
 8011f40:	e7f9      	b.n	8011f36 <strncpy+0x1a>
	...

08011f44 <__errno>:
 8011f44:	4b01      	ldr	r3, [pc, #4]	@ (8011f4c <__errno+0x8>)
 8011f46:	6818      	ldr	r0, [r3, #0]
 8011f48:	4770      	bx	lr
 8011f4a:	bf00      	nop
 8011f4c:	20000118 	.word	0x20000118

08011f50 <__libc_init_array>:
 8011f50:	b570      	push	{r4, r5, r6, lr}
 8011f52:	4d0d      	ldr	r5, [pc, #52]	@ (8011f88 <__libc_init_array+0x38>)
 8011f54:	4c0d      	ldr	r4, [pc, #52]	@ (8011f8c <__libc_init_array+0x3c>)
 8011f56:	1b64      	subs	r4, r4, r5
 8011f58:	10a4      	asrs	r4, r4, #2
 8011f5a:	2600      	movs	r6, #0
 8011f5c:	42a6      	cmp	r6, r4
 8011f5e:	d109      	bne.n	8011f74 <__libc_init_array+0x24>
 8011f60:	4d0b      	ldr	r5, [pc, #44]	@ (8011f90 <__libc_init_array+0x40>)
 8011f62:	4c0c      	ldr	r4, [pc, #48]	@ (8011f94 <__libc_init_array+0x44>)
 8011f64:	f000 fc64 	bl	8012830 <_init>
 8011f68:	1b64      	subs	r4, r4, r5
 8011f6a:	10a4      	asrs	r4, r4, #2
 8011f6c:	2600      	movs	r6, #0
 8011f6e:	42a6      	cmp	r6, r4
 8011f70:	d105      	bne.n	8011f7e <__libc_init_array+0x2e>
 8011f72:	bd70      	pop	{r4, r5, r6, pc}
 8011f74:	f855 3b04 	ldr.w	r3, [r5], #4
 8011f78:	4798      	blx	r3
 8011f7a:	3601      	adds	r6, #1
 8011f7c:	e7ee      	b.n	8011f5c <__libc_init_array+0xc>
 8011f7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8011f82:	4798      	blx	r3
 8011f84:	3601      	adds	r6, #1
 8011f86:	e7f2      	b.n	8011f6e <__libc_init_array+0x1e>
 8011f88:	08013f98 	.word	0x08013f98
 8011f8c:	08013f98 	.word	0x08013f98
 8011f90:	08013f98 	.word	0x08013f98
 8011f94:	08013f9c 	.word	0x08013f9c

08011f98 <__retarget_lock_acquire_recursive>:
 8011f98:	4770      	bx	lr

08011f9a <__retarget_lock_release_recursive>:
 8011f9a:	4770      	bx	lr

08011f9c <memcpy>:
 8011f9c:	440a      	add	r2, r1
 8011f9e:	4291      	cmp	r1, r2
 8011fa0:	f100 33ff 	add.w	r3, r0, #4294967295
 8011fa4:	d100      	bne.n	8011fa8 <memcpy+0xc>
 8011fa6:	4770      	bx	lr
 8011fa8:	b510      	push	{r4, lr}
 8011faa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011fae:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011fb2:	4291      	cmp	r1, r2
 8011fb4:	d1f9      	bne.n	8011faa <memcpy+0xe>
 8011fb6:	bd10      	pop	{r4, pc}

08011fb8 <_free_r>:
 8011fb8:	b538      	push	{r3, r4, r5, lr}
 8011fba:	4605      	mov	r5, r0
 8011fbc:	2900      	cmp	r1, #0
 8011fbe:	d041      	beq.n	8012044 <_free_r+0x8c>
 8011fc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011fc4:	1f0c      	subs	r4, r1, #4
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	bfb8      	it	lt
 8011fca:	18e4      	addlt	r4, r4, r3
 8011fcc:	f000 f8e0 	bl	8012190 <__malloc_lock>
 8011fd0:	4a1d      	ldr	r2, [pc, #116]	@ (8012048 <_free_r+0x90>)
 8011fd2:	6813      	ldr	r3, [r2, #0]
 8011fd4:	b933      	cbnz	r3, 8011fe4 <_free_r+0x2c>
 8011fd6:	6063      	str	r3, [r4, #4]
 8011fd8:	6014      	str	r4, [r2, #0]
 8011fda:	4628      	mov	r0, r5
 8011fdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011fe0:	f000 b8dc 	b.w	801219c <__malloc_unlock>
 8011fe4:	42a3      	cmp	r3, r4
 8011fe6:	d908      	bls.n	8011ffa <_free_r+0x42>
 8011fe8:	6820      	ldr	r0, [r4, #0]
 8011fea:	1821      	adds	r1, r4, r0
 8011fec:	428b      	cmp	r3, r1
 8011fee:	bf01      	itttt	eq
 8011ff0:	6819      	ldreq	r1, [r3, #0]
 8011ff2:	685b      	ldreq	r3, [r3, #4]
 8011ff4:	1809      	addeq	r1, r1, r0
 8011ff6:	6021      	streq	r1, [r4, #0]
 8011ff8:	e7ed      	b.n	8011fd6 <_free_r+0x1e>
 8011ffa:	461a      	mov	r2, r3
 8011ffc:	685b      	ldr	r3, [r3, #4]
 8011ffe:	b10b      	cbz	r3, 8012004 <_free_r+0x4c>
 8012000:	42a3      	cmp	r3, r4
 8012002:	d9fa      	bls.n	8011ffa <_free_r+0x42>
 8012004:	6811      	ldr	r1, [r2, #0]
 8012006:	1850      	adds	r0, r2, r1
 8012008:	42a0      	cmp	r0, r4
 801200a:	d10b      	bne.n	8012024 <_free_r+0x6c>
 801200c:	6820      	ldr	r0, [r4, #0]
 801200e:	4401      	add	r1, r0
 8012010:	1850      	adds	r0, r2, r1
 8012012:	4283      	cmp	r3, r0
 8012014:	6011      	str	r1, [r2, #0]
 8012016:	d1e0      	bne.n	8011fda <_free_r+0x22>
 8012018:	6818      	ldr	r0, [r3, #0]
 801201a:	685b      	ldr	r3, [r3, #4]
 801201c:	6053      	str	r3, [r2, #4]
 801201e:	4408      	add	r0, r1
 8012020:	6010      	str	r0, [r2, #0]
 8012022:	e7da      	b.n	8011fda <_free_r+0x22>
 8012024:	d902      	bls.n	801202c <_free_r+0x74>
 8012026:	230c      	movs	r3, #12
 8012028:	602b      	str	r3, [r5, #0]
 801202a:	e7d6      	b.n	8011fda <_free_r+0x22>
 801202c:	6820      	ldr	r0, [r4, #0]
 801202e:	1821      	adds	r1, r4, r0
 8012030:	428b      	cmp	r3, r1
 8012032:	bf04      	itt	eq
 8012034:	6819      	ldreq	r1, [r3, #0]
 8012036:	685b      	ldreq	r3, [r3, #4]
 8012038:	6063      	str	r3, [r4, #4]
 801203a:	bf04      	itt	eq
 801203c:	1809      	addeq	r1, r1, r0
 801203e:	6021      	streq	r1, [r4, #0]
 8012040:	6054      	str	r4, [r2, #4]
 8012042:	e7ca      	b.n	8011fda <_free_r+0x22>
 8012044:	bd38      	pop	{r3, r4, r5, pc}
 8012046:	bf00      	nop
 8012048:	20002914 	.word	0x20002914

0801204c <sbrk_aligned>:
 801204c:	b570      	push	{r4, r5, r6, lr}
 801204e:	4e0f      	ldr	r6, [pc, #60]	@ (801208c <sbrk_aligned+0x40>)
 8012050:	460c      	mov	r4, r1
 8012052:	6831      	ldr	r1, [r6, #0]
 8012054:	4605      	mov	r5, r0
 8012056:	b911      	cbnz	r1, 801205e <sbrk_aligned+0x12>
 8012058:	f000 fba4 	bl	80127a4 <_sbrk_r>
 801205c:	6030      	str	r0, [r6, #0]
 801205e:	4621      	mov	r1, r4
 8012060:	4628      	mov	r0, r5
 8012062:	f000 fb9f 	bl	80127a4 <_sbrk_r>
 8012066:	1c43      	adds	r3, r0, #1
 8012068:	d103      	bne.n	8012072 <sbrk_aligned+0x26>
 801206a:	f04f 34ff 	mov.w	r4, #4294967295
 801206e:	4620      	mov	r0, r4
 8012070:	bd70      	pop	{r4, r5, r6, pc}
 8012072:	1cc4      	adds	r4, r0, #3
 8012074:	f024 0403 	bic.w	r4, r4, #3
 8012078:	42a0      	cmp	r0, r4
 801207a:	d0f8      	beq.n	801206e <sbrk_aligned+0x22>
 801207c:	1a21      	subs	r1, r4, r0
 801207e:	4628      	mov	r0, r5
 8012080:	f000 fb90 	bl	80127a4 <_sbrk_r>
 8012084:	3001      	adds	r0, #1
 8012086:	d1f2      	bne.n	801206e <sbrk_aligned+0x22>
 8012088:	e7ef      	b.n	801206a <sbrk_aligned+0x1e>
 801208a:	bf00      	nop
 801208c:	20002910 	.word	0x20002910

08012090 <_malloc_r>:
 8012090:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012094:	1ccd      	adds	r5, r1, #3
 8012096:	f025 0503 	bic.w	r5, r5, #3
 801209a:	3508      	adds	r5, #8
 801209c:	2d0c      	cmp	r5, #12
 801209e:	bf38      	it	cc
 80120a0:	250c      	movcc	r5, #12
 80120a2:	2d00      	cmp	r5, #0
 80120a4:	4606      	mov	r6, r0
 80120a6:	db01      	blt.n	80120ac <_malloc_r+0x1c>
 80120a8:	42a9      	cmp	r1, r5
 80120aa:	d904      	bls.n	80120b6 <_malloc_r+0x26>
 80120ac:	230c      	movs	r3, #12
 80120ae:	6033      	str	r3, [r6, #0]
 80120b0:	2000      	movs	r0, #0
 80120b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80120b6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801218c <_malloc_r+0xfc>
 80120ba:	f000 f869 	bl	8012190 <__malloc_lock>
 80120be:	f8d8 3000 	ldr.w	r3, [r8]
 80120c2:	461c      	mov	r4, r3
 80120c4:	bb44      	cbnz	r4, 8012118 <_malloc_r+0x88>
 80120c6:	4629      	mov	r1, r5
 80120c8:	4630      	mov	r0, r6
 80120ca:	f7ff ffbf 	bl	801204c <sbrk_aligned>
 80120ce:	1c43      	adds	r3, r0, #1
 80120d0:	4604      	mov	r4, r0
 80120d2:	d158      	bne.n	8012186 <_malloc_r+0xf6>
 80120d4:	f8d8 4000 	ldr.w	r4, [r8]
 80120d8:	4627      	mov	r7, r4
 80120da:	2f00      	cmp	r7, #0
 80120dc:	d143      	bne.n	8012166 <_malloc_r+0xd6>
 80120de:	2c00      	cmp	r4, #0
 80120e0:	d04b      	beq.n	801217a <_malloc_r+0xea>
 80120e2:	6823      	ldr	r3, [r4, #0]
 80120e4:	4639      	mov	r1, r7
 80120e6:	4630      	mov	r0, r6
 80120e8:	eb04 0903 	add.w	r9, r4, r3
 80120ec:	f000 fb5a 	bl	80127a4 <_sbrk_r>
 80120f0:	4581      	cmp	r9, r0
 80120f2:	d142      	bne.n	801217a <_malloc_r+0xea>
 80120f4:	6821      	ldr	r1, [r4, #0]
 80120f6:	1a6d      	subs	r5, r5, r1
 80120f8:	4629      	mov	r1, r5
 80120fa:	4630      	mov	r0, r6
 80120fc:	f7ff ffa6 	bl	801204c <sbrk_aligned>
 8012100:	3001      	adds	r0, #1
 8012102:	d03a      	beq.n	801217a <_malloc_r+0xea>
 8012104:	6823      	ldr	r3, [r4, #0]
 8012106:	442b      	add	r3, r5
 8012108:	6023      	str	r3, [r4, #0]
 801210a:	f8d8 3000 	ldr.w	r3, [r8]
 801210e:	685a      	ldr	r2, [r3, #4]
 8012110:	bb62      	cbnz	r2, 801216c <_malloc_r+0xdc>
 8012112:	f8c8 7000 	str.w	r7, [r8]
 8012116:	e00f      	b.n	8012138 <_malloc_r+0xa8>
 8012118:	6822      	ldr	r2, [r4, #0]
 801211a:	1b52      	subs	r2, r2, r5
 801211c:	d420      	bmi.n	8012160 <_malloc_r+0xd0>
 801211e:	2a0b      	cmp	r2, #11
 8012120:	d917      	bls.n	8012152 <_malloc_r+0xc2>
 8012122:	1961      	adds	r1, r4, r5
 8012124:	42a3      	cmp	r3, r4
 8012126:	6025      	str	r5, [r4, #0]
 8012128:	bf18      	it	ne
 801212a:	6059      	strne	r1, [r3, #4]
 801212c:	6863      	ldr	r3, [r4, #4]
 801212e:	bf08      	it	eq
 8012130:	f8c8 1000 	streq.w	r1, [r8]
 8012134:	5162      	str	r2, [r4, r5]
 8012136:	604b      	str	r3, [r1, #4]
 8012138:	4630      	mov	r0, r6
 801213a:	f000 f82f 	bl	801219c <__malloc_unlock>
 801213e:	f104 000b 	add.w	r0, r4, #11
 8012142:	1d23      	adds	r3, r4, #4
 8012144:	f020 0007 	bic.w	r0, r0, #7
 8012148:	1ac2      	subs	r2, r0, r3
 801214a:	bf1c      	itt	ne
 801214c:	1a1b      	subne	r3, r3, r0
 801214e:	50a3      	strne	r3, [r4, r2]
 8012150:	e7af      	b.n	80120b2 <_malloc_r+0x22>
 8012152:	6862      	ldr	r2, [r4, #4]
 8012154:	42a3      	cmp	r3, r4
 8012156:	bf0c      	ite	eq
 8012158:	f8c8 2000 	streq.w	r2, [r8]
 801215c:	605a      	strne	r2, [r3, #4]
 801215e:	e7eb      	b.n	8012138 <_malloc_r+0xa8>
 8012160:	4623      	mov	r3, r4
 8012162:	6864      	ldr	r4, [r4, #4]
 8012164:	e7ae      	b.n	80120c4 <_malloc_r+0x34>
 8012166:	463c      	mov	r4, r7
 8012168:	687f      	ldr	r7, [r7, #4]
 801216a:	e7b6      	b.n	80120da <_malloc_r+0x4a>
 801216c:	461a      	mov	r2, r3
 801216e:	685b      	ldr	r3, [r3, #4]
 8012170:	42a3      	cmp	r3, r4
 8012172:	d1fb      	bne.n	801216c <_malloc_r+0xdc>
 8012174:	2300      	movs	r3, #0
 8012176:	6053      	str	r3, [r2, #4]
 8012178:	e7de      	b.n	8012138 <_malloc_r+0xa8>
 801217a:	230c      	movs	r3, #12
 801217c:	6033      	str	r3, [r6, #0]
 801217e:	4630      	mov	r0, r6
 8012180:	f000 f80c 	bl	801219c <__malloc_unlock>
 8012184:	e794      	b.n	80120b0 <_malloc_r+0x20>
 8012186:	6005      	str	r5, [r0, #0]
 8012188:	e7d6      	b.n	8012138 <_malloc_r+0xa8>
 801218a:	bf00      	nop
 801218c:	20002914 	.word	0x20002914

08012190 <__malloc_lock>:
 8012190:	4801      	ldr	r0, [pc, #4]	@ (8012198 <__malloc_lock+0x8>)
 8012192:	f7ff bf01 	b.w	8011f98 <__retarget_lock_acquire_recursive>
 8012196:	bf00      	nop
 8012198:	2000290c 	.word	0x2000290c

0801219c <__malloc_unlock>:
 801219c:	4801      	ldr	r0, [pc, #4]	@ (80121a4 <__malloc_unlock+0x8>)
 801219e:	f7ff befc 	b.w	8011f9a <__retarget_lock_release_recursive>
 80121a2:	bf00      	nop
 80121a4:	2000290c 	.word	0x2000290c

080121a8 <__ssputs_r>:
 80121a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80121ac:	688e      	ldr	r6, [r1, #8]
 80121ae:	461f      	mov	r7, r3
 80121b0:	42be      	cmp	r6, r7
 80121b2:	680b      	ldr	r3, [r1, #0]
 80121b4:	4682      	mov	sl, r0
 80121b6:	460c      	mov	r4, r1
 80121b8:	4690      	mov	r8, r2
 80121ba:	d82d      	bhi.n	8012218 <__ssputs_r+0x70>
 80121bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80121c0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80121c4:	d026      	beq.n	8012214 <__ssputs_r+0x6c>
 80121c6:	6965      	ldr	r5, [r4, #20]
 80121c8:	6909      	ldr	r1, [r1, #16]
 80121ca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80121ce:	eba3 0901 	sub.w	r9, r3, r1
 80121d2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80121d6:	1c7b      	adds	r3, r7, #1
 80121d8:	444b      	add	r3, r9
 80121da:	106d      	asrs	r5, r5, #1
 80121dc:	429d      	cmp	r5, r3
 80121de:	bf38      	it	cc
 80121e0:	461d      	movcc	r5, r3
 80121e2:	0553      	lsls	r3, r2, #21
 80121e4:	d527      	bpl.n	8012236 <__ssputs_r+0x8e>
 80121e6:	4629      	mov	r1, r5
 80121e8:	f7ff ff52 	bl	8012090 <_malloc_r>
 80121ec:	4606      	mov	r6, r0
 80121ee:	b360      	cbz	r0, 801224a <__ssputs_r+0xa2>
 80121f0:	6921      	ldr	r1, [r4, #16]
 80121f2:	464a      	mov	r2, r9
 80121f4:	f7ff fed2 	bl	8011f9c <memcpy>
 80121f8:	89a3      	ldrh	r3, [r4, #12]
 80121fa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80121fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012202:	81a3      	strh	r3, [r4, #12]
 8012204:	6126      	str	r6, [r4, #16]
 8012206:	6165      	str	r5, [r4, #20]
 8012208:	444e      	add	r6, r9
 801220a:	eba5 0509 	sub.w	r5, r5, r9
 801220e:	6026      	str	r6, [r4, #0]
 8012210:	60a5      	str	r5, [r4, #8]
 8012212:	463e      	mov	r6, r7
 8012214:	42be      	cmp	r6, r7
 8012216:	d900      	bls.n	801221a <__ssputs_r+0x72>
 8012218:	463e      	mov	r6, r7
 801221a:	6820      	ldr	r0, [r4, #0]
 801221c:	4632      	mov	r2, r6
 801221e:	4641      	mov	r1, r8
 8012220:	f000 faa6 	bl	8012770 <memmove>
 8012224:	68a3      	ldr	r3, [r4, #8]
 8012226:	1b9b      	subs	r3, r3, r6
 8012228:	60a3      	str	r3, [r4, #8]
 801222a:	6823      	ldr	r3, [r4, #0]
 801222c:	4433      	add	r3, r6
 801222e:	6023      	str	r3, [r4, #0]
 8012230:	2000      	movs	r0, #0
 8012232:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012236:	462a      	mov	r2, r5
 8012238:	f000 fac4 	bl	80127c4 <_realloc_r>
 801223c:	4606      	mov	r6, r0
 801223e:	2800      	cmp	r0, #0
 8012240:	d1e0      	bne.n	8012204 <__ssputs_r+0x5c>
 8012242:	6921      	ldr	r1, [r4, #16]
 8012244:	4650      	mov	r0, sl
 8012246:	f7ff feb7 	bl	8011fb8 <_free_r>
 801224a:	230c      	movs	r3, #12
 801224c:	f8ca 3000 	str.w	r3, [sl]
 8012250:	89a3      	ldrh	r3, [r4, #12]
 8012252:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012256:	81a3      	strh	r3, [r4, #12]
 8012258:	f04f 30ff 	mov.w	r0, #4294967295
 801225c:	e7e9      	b.n	8012232 <__ssputs_r+0x8a>
	...

08012260 <_svfiprintf_r>:
 8012260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012264:	4698      	mov	r8, r3
 8012266:	898b      	ldrh	r3, [r1, #12]
 8012268:	061b      	lsls	r3, r3, #24
 801226a:	b09d      	sub	sp, #116	@ 0x74
 801226c:	4607      	mov	r7, r0
 801226e:	460d      	mov	r5, r1
 8012270:	4614      	mov	r4, r2
 8012272:	d510      	bpl.n	8012296 <_svfiprintf_r+0x36>
 8012274:	690b      	ldr	r3, [r1, #16]
 8012276:	b973      	cbnz	r3, 8012296 <_svfiprintf_r+0x36>
 8012278:	2140      	movs	r1, #64	@ 0x40
 801227a:	f7ff ff09 	bl	8012090 <_malloc_r>
 801227e:	6028      	str	r0, [r5, #0]
 8012280:	6128      	str	r0, [r5, #16]
 8012282:	b930      	cbnz	r0, 8012292 <_svfiprintf_r+0x32>
 8012284:	230c      	movs	r3, #12
 8012286:	603b      	str	r3, [r7, #0]
 8012288:	f04f 30ff 	mov.w	r0, #4294967295
 801228c:	b01d      	add	sp, #116	@ 0x74
 801228e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012292:	2340      	movs	r3, #64	@ 0x40
 8012294:	616b      	str	r3, [r5, #20]
 8012296:	2300      	movs	r3, #0
 8012298:	9309      	str	r3, [sp, #36]	@ 0x24
 801229a:	2320      	movs	r3, #32
 801229c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80122a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80122a4:	2330      	movs	r3, #48	@ 0x30
 80122a6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8012444 <_svfiprintf_r+0x1e4>
 80122aa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80122ae:	f04f 0901 	mov.w	r9, #1
 80122b2:	4623      	mov	r3, r4
 80122b4:	469a      	mov	sl, r3
 80122b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80122ba:	b10a      	cbz	r2, 80122c0 <_svfiprintf_r+0x60>
 80122bc:	2a25      	cmp	r2, #37	@ 0x25
 80122be:	d1f9      	bne.n	80122b4 <_svfiprintf_r+0x54>
 80122c0:	ebba 0b04 	subs.w	fp, sl, r4
 80122c4:	d00b      	beq.n	80122de <_svfiprintf_r+0x7e>
 80122c6:	465b      	mov	r3, fp
 80122c8:	4622      	mov	r2, r4
 80122ca:	4629      	mov	r1, r5
 80122cc:	4638      	mov	r0, r7
 80122ce:	f7ff ff6b 	bl	80121a8 <__ssputs_r>
 80122d2:	3001      	adds	r0, #1
 80122d4:	f000 80a7 	beq.w	8012426 <_svfiprintf_r+0x1c6>
 80122d8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80122da:	445a      	add	r2, fp
 80122dc:	9209      	str	r2, [sp, #36]	@ 0x24
 80122de:	f89a 3000 	ldrb.w	r3, [sl]
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	f000 809f 	beq.w	8012426 <_svfiprintf_r+0x1c6>
 80122e8:	2300      	movs	r3, #0
 80122ea:	f04f 32ff 	mov.w	r2, #4294967295
 80122ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80122f2:	f10a 0a01 	add.w	sl, sl, #1
 80122f6:	9304      	str	r3, [sp, #16]
 80122f8:	9307      	str	r3, [sp, #28]
 80122fa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80122fe:	931a      	str	r3, [sp, #104]	@ 0x68
 8012300:	4654      	mov	r4, sl
 8012302:	2205      	movs	r2, #5
 8012304:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012308:	484e      	ldr	r0, [pc, #312]	@ (8012444 <_svfiprintf_r+0x1e4>)
 801230a:	f7ed ff71 	bl	80001f0 <memchr>
 801230e:	9a04      	ldr	r2, [sp, #16]
 8012310:	b9d8      	cbnz	r0, 801234a <_svfiprintf_r+0xea>
 8012312:	06d0      	lsls	r0, r2, #27
 8012314:	bf44      	itt	mi
 8012316:	2320      	movmi	r3, #32
 8012318:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801231c:	0711      	lsls	r1, r2, #28
 801231e:	bf44      	itt	mi
 8012320:	232b      	movmi	r3, #43	@ 0x2b
 8012322:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012326:	f89a 3000 	ldrb.w	r3, [sl]
 801232a:	2b2a      	cmp	r3, #42	@ 0x2a
 801232c:	d015      	beq.n	801235a <_svfiprintf_r+0xfa>
 801232e:	9a07      	ldr	r2, [sp, #28]
 8012330:	4654      	mov	r4, sl
 8012332:	2000      	movs	r0, #0
 8012334:	f04f 0c0a 	mov.w	ip, #10
 8012338:	4621      	mov	r1, r4
 801233a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801233e:	3b30      	subs	r3, #48	@ 0x30
 8012340:	2b09      	cmp	r3, #9
 8012342:	d94b      	bls.n	80123dc <_svfiprintf_r+0x17c>
 8012344:	b1b0      	cbz	r0, 8012374 <_svfiprintf_r+0x114>
 8012346:	9207      	str	r2, [sp, #28]
 8012348:	e014      	b.n	8012374 <_svfiprintf_r+0x114>
 801234a:	eba0 0308 	sub.w	r3, r0, r8
 801234e:	fa09 f303 	lsl.w	r3, r9, r3
 8012352:	4313      	orrs	r3, r2
 8012354:	9304      	str	r3, [sp, #16]
 8012356:	46a2      	mov	sl, r4
 8012358:	e7d2      	b.n	8012300 <_svfiprintf_r+0xa0>
 801235a:	9b03      	ldr	r3, [sp, #12]
 801235c:	1d19      	adds	r1, r3, #4
 801235e:	681b      	ldr	r3, [r3, #0]
 8012360:	9103      	str	r1, [sp, #12]
 8012362:	2b00      	cmp	r3, #0
 8012364:	bfbb      	ittet	lt
 8012366:	425b      	neglt	r3, r3
 8012368:	f042 0202 	orrlt.w	r2, r2, #2
 801236c:	9307      	strge	r3, [sp, #28]
 801236e:	9307      	strlt	r3, [sp, #28]
 8012370:	bfb8      	it	lt
 8012372:	9204      	strlt	r2, [sp, #16]
 8012374:	7823      	ldrb	r3, [r4, #0]
 8012376:	2b2e      	cmp	r3, #46	@ 0x2e
 8012378:	d10a      	bne.n	8012390 <_svfiprintf_r+0x130>
 801237a:	7863      	ldrb	r3, [r4, #1]
 801237c:	2b2a      	cmp	r3, #42	@ 0x2a
 801237e:	d132      	bne.n	80123e6 <_svfiprintf_r+0x186>
 8012380:	9b03      	ldr	r3, [sp, #12]
 8012382:	1d1a      	adds	r2, r3, #4
 8012384:	681b      	ldr	r3, [r3, #0]
 8012386:	9203      	str	r2, [sp, #12]
 8012388:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801238c:	3402      	adds	r4, #2
 801238e:	9305      	str	r3, [sp, #20]
 8012390:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8012454 <_svfiprintf_r+0x1f4>
 8012394:	7821      	ldrb	r1, [r4, #0]
 8012396:	2203      	movs	r2, #3
 8012398:	4650      	mov	r0, sl
 801239a:	f7ed ff29 	bl	80001f0 <memchr>
 801239e:	b138      	cbz	r0, 80123b0 <_svfiprintf_r+0x150>
 80123a0:	9b04      	ldr	r3, [sp, #16]
 80123a2:	eba0 000a 	sub.w	r0, r0, sl
 80123a6:	2240      	movs	r2, #64	@ 0x40
 80123a8:	4082      	lsls	r2, r0
 80123aa:	4313      	orrs	r3, r2
 80123ac:	3401      	adds	r4, #1
 80123ae:	9304      	str	r3, [sp, #16]
 80123b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80123b4:	4824      	ldr	r0, [pc, #144]	@ (8012448 <_svfiprintf_r+0x1e8>)
 80123b6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80123ba:	2206      	movs	r2, #6
 80123bc:	f7ed ff18 	bl	80001f0 <memchr>
 80123c0:	2800      	cmp	r0, #0
 80123c2:	d036      	beq.n	8012432 <_svfiprintf_r+0x1d2>
 80123c4:	4b21      	ldr	r3, [pc, #132]	@ (801244c <_svfiprintf_r+0x1ec>)
 80123c6:	bb1b      	cbnz	r3, 8012410 <_svfiprintf_r+0x1b0>
 80123c8:	9b03      	ldr	r3, [sp, #12]
 80123ca:	3307      	adds	r3, #7
 80123cc:	f023 0307 	bic.w	r3, r3, #7
 80123d0:	3308      	adds	r3, #8
 80123d2:	9303      	str	r3, [sp, #12]
 80123d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80123d6:	4433      	add	r3, r6
 80123d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80123da:	e76a      	b.n	80122b2 <_svfiprintf_r+0x52>
 80123dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80123e0:	460c      	mov	r4, r1
 80123e2:	2001      	movs	r0, #1
 80123e4:	e7a8      	b.n	8012338 <_svfiprintf_r+0xd8>
 80123e6:	2300      	movs	r3, #0
 80123e8:	3401      	adds	r4, #1
 80123ea:	9305      	str	r3, [sp, #20]
 80123ec:	4619      	mov	r1, r3
 80123ee:	f04f 0c0a 	mov.w	ip, #10
 80123f2:	4620      	mov	r0, r4
 80123f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80123f8:	3a30      	subs	r2, #48	@ 0x30
 80123fa:	2a09      	cmp	r2, #9
 80123fc:	d903      	bls.n	8012406 <_svfiprintf_r+0x1a6>
 80123fe:	2b00      	cmp	r3, #0
 8012400:	d0c6      	beq.n	8012390 <_svfiprintf_r+0x130>
 8012402:	9105      	str	r1, [sp, #20]
 8012404:	e7c4      	b.n	8012390 <_svfiprintf_r+0x130>
 8012406:	fb0c 2101 	mla	r1, ip, r1, r2
 801240a:	4604      	mov	r4, r0
 801240c:	2301      	movs	r3, #1
 801240e:	e7f0      	b.n	80123f2 <_svfiprintf_r+0x192>
 8012410:	ab03      	add	r3, sp, #12
 8012412:	9300      	str	r3, [sp, #0]
 8012414:	462a      	mov	r2, r5
 8012416:	4b0e      	ldr	r3, [pc, #56]	@ (8012450 <_svfiprintf_r+0x1f0>)
 8012418:	a904      	add	r1, sp, #16
 801241a:	4638      	mov	r0, r7
 801241c:	f3af 8000 	nop.w
 8012420:	1c42      	adds	r2, r0, #1
 8012422:	4606      	mov	r6, r0
 8012424:	d1d6      	bne.n	80123d4 <_svfiprintf_r+0x174>
 8012426:	89ab      	ldrh	r3, [r5, #12]
 8012428:	065b      	lsls	r3, r3, #25
 801242a:	f53f af2d 	bmi.w	8012288 <_svfiprintf_r+0x28>
 801242e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012430:	e72c      	b.n	801228c <_svfiprintf_r+0x2c>
 8012432:	ab03      	add	r3, sp, #12
 8012434:	9300      	str	r3, [sp, #0]
 8012436:	462a      	mov	r2, r5
 8012438:	4b05      	ldr	r3, [pc, #20]	@ (8012450 <_svfiprintf_r+0x1f0>)
 801243a:	a904      	add	r1, sp, #16
 801243c:	4638      	mov	r0, r7
 801243e:	f000 f879 	bl	8012534 <_printf_i>
 8012442:	e7ed      	b.n	8012420 <_svfiprintf_r+0x1c0>
 8012444:	08013f5d 	.word	0x08013f5d
 8012448:	08013f67 	.word	0x08013f67
 801244c:	00000000 	.word	0x00000000
 8012450:	080121a9 	.word	0x080121a9
 8012454:	08013f63 	.word	0x08013f63

08012458 <_printf_common>:
 8012458:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801245c:	4616      	mov	r6, r2
 801245e:	4698      	mov	r8, r3
 8012460:	688a      	ldr	r2, [r1, #8]
 8012462:	690b      	ldr	r3, [r1, #16]
 8012464:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012468:	4293      	cmp	r3, r2
 801246a:	bfb8      	it	lt
 801246c:	4613      	movlt	r3, r2
 801246e:	6033      	str	r3, [r6, #0]
 8012470:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8012474:	4607      	mov	r7, r0
 8012476:	460c      	mov	r4, r1
 8012478:	b10a      	cbz	r2, 801247e <_printf_common+0x26>
 801247a:	3301      	adds	r3, #1
 801247c:	6033      	str	r3, [r6, #0]
 801247e:	6823      	ldr	r3, [r4, #0]
 8012480:	0699      	lsls	r1, r3, #26
 8012482:	bf42      	ittt	mi
 8012484:	6833      	ldrmi	r3, [r6, #0]
 8012486:	3302      	addmi	r3, #2
 8012488:	6033      	strmi	r3, [r6, #0]
 801248a:	6825      	ldr	r5, [r4, #0]
 801248c:	f015 0506 	ands.w	r5, r5, #6
 8012490:	d106      	bne.n	80124a0 <_printf_common+0x48>
 8012492:	f104 0a19 	add.w	sl, r4, #25
 8012496:	68e3      	ldr	r3, [r4, #12]
 8012498:	6832      	ldr	r2, [r6, #0]
 801249a:	1a9b      	subs	r3, r3, r2
 801249c:	42ab      	cmp	r3, r5
 801249e:	dc26      	bgt.n	80124ee <_printf_common+0x96>
 80124a0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80124a4:	6822      	ldr	r2, [r4, #0]
 80124a6:	3b00      	subs	r3, #0
 80124a8:	bf18      	it	ne
 80124aa:	2301      	movne	r3, #1
 80124ac:	0692      	lsls	r2, r2, #26
 80124ae:	d42b      	bmi.n	8012508 <_printf_common+0xb0>
 80124b0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80124b4:	4641      	mov	r1, r8
 80124b6:	4638      	mov	r0, r7
 80124b8:	47c8      	blx	r9
 80124ba:	3001      	adds	r0, #1
 80124bc:	d01e      	beq.n	80124fc <_printf_common+0xa4>
 80124be:	6823      	ldr	r3, [r4, #0]
 80124c0:	6922      	ldr	r2, [r4, #16]
 80124c2:	f003 0306 	and.w	r3, r3, #6
 80124c6:	2b04      	cmp	r3, #4
 80124c8:	bf02      	ittt	eq
 80124ca:	68e5      	ldreq	r5, [r4, #12]
 80124cc:	6833      	ldreq	r3, [r6, #0]
 80124ce:	1aed      	subeq	r5, r5, r3
 80124d0:	68a3      	ldr	r3, [r4, #8]
 80124d2:	bf0c      	ite	eq
 80124d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80124d8:	2500      	movne	r5, #0
 80124da:	4293      	cmp	r3, r2
 80124dc:	bfc4      	itt	gt
 80124de:	1a9b      	subgt	r3, r3, r2
 80124e0:	18ed      	addgt	r5, r5, r3
 80124e2:	2600      	movs	r6, #0
 80124e4:	341a      	adds	r4, #26
 80124e6:	42b5      	cmp	r5, r6
 80124e8:	d11a      	bne.n	8012520 <_printf_common+0xc8>
 80124ea:	2000      	movs	r0, #0
 80124ec:	e008      	b.n	8012500 <_printf_common+0xa8>
 80124ee:	2301      	movs	r3, #1
 80124f0:	4652      	mov	r2, sl
 80124f2:	4641      	mov	r1, r8
 80124f4:	4638      	mov	r0, r7
 80124f6:	47c8      	blx	r9
 80124f8:	3001      	adds	r0, #1
 80124fa:	d103      	bne.n	8012504 <_printf_common+0xac>
 80124fc:	f04f 30ff 	mov.w	r0, #4294967295
 8012500:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012504:	3501      	adds	r5, #1
 8012506:	e7c6      	b.n	8012496 <_printf_common+0x3e>
 8012508:	18e1      	adds	r1, r4, r3
 801250a:	1c5a      	adds	r2, r3, #1
 801250c:	2030      	movs	r0, #48	@ 0x30
 801250e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8012512:	4422      	add	r2, r4
 8012514:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8012518:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801251c:	3302      	adds	r3, #2
 801251e:	e7c7      	b.n	80124b0 <_printf_common+0x58>
 8012520:	2301      	movs	r3, #1
 8012522:	4622      	mov	r2, r4
 8012524:	4641      	mov	r1, r8
 8012526:	4638      	mov	r0, r7
 8012528:	47c8      	blx	r9
 801252a:	3001      	adds	r0, #1
 801252c:	d0e6      	beq.n	80124fc <_printf_common+0xa4>
 801252e:	3601      	adds	r6, #1
 8012530:	e7d9      	b.n	80124e6 <_printf_common+0x8e>
	...

08012534 <_printf_i>:
 8012534:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012538:	7e0f      	ldrb	r7, [r1, #24]
 801253a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801253c:	2f78      	cmp	r7, #120	@ 0x78
 801253e:	4691      	mov	r9, r2
 8012540:	4680      	mov	r8, r0
 8012542:	460c      	mov	r4, r1
 8012544:	469a      	mov	sl, r3
 8012546:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801254a:	d807      	bhi.n	801255c <_printf_i+0x28>
 801254c:	2f62      	cmp	r7, #98	@ 0x62
 801254e:	d80a      	bhi.n	8012566 <_printf_i+0x32>
 8012550:	2f00      	cmp	r7, #0
 8012552:	f000 80d1 	beq.w	80126f8 <_printf_i+0x1c4>
 8012556:	2f58      	cmp	r7, #88	@ 0x58
 8012558:	f000 80b8 	beq.w	80126cc <_printf_i+0x198>
 801255c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012560:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8012564:	e03a      	b.n	80125dc <_printf_i+0xa8>
 8012566:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801256a:	2b15      	cmp	r3, #21
 801256c:	d8f6      	bhi.n	801255c <_printf_i+0x28>
 801256e:	a101      	add	r1, pc, #4	@ (adr r1, 8012574 <_printf_i+0x40>)
 8012570:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012574:	080125cd 	.word	0x080125cd
 8012578:	080125e1 	.word	0x080125e1
 801257c:	0801255d 	.word	0x0801255d
 8012580:	0801255d 	.word	0x0801255d
 8012584:	0801255d 	.word	0x0801255d
 8012588:	0801255d 	.word	0x0801255d
 801258c:	080125e1 	.word	0x080125e1
 8012590:	0801255d 	.word	0x0801255d
 8012594:	0801255d 	.word	0x0801255d
 8012598:	0801255d 	.word	0x0801255d
 801259c:	0801255d 	.word	0x0801255d
 80125a0:	080126df 	.word	0x080126df
 80125a4:	0801260b 	.word	0x0801260b
 80125a8:	08012699 	.word	0x08012699
 80125ac:	0801255d 	.word	0x0801255d
 80125b0:	0801255d 	.word	0x0801255d
 80125b4:	08012701 	.word	0x08012701
 80125b8:	0801255d 	.word	0x0801255d
 80125bc:	0801260b 	.word	0x0801260b
 80125c0:	0801255d 	.word	0x0801255d
 80125c4:	0801255d 	.word	0x0801255d
 80125c8:	080126a1 	.word	0x080126a1
 80125cc:	6833      	ldr	r3, [r6, #0]
 80125ce:	1d1a      	adds	r2, r3, #4
 80125d0:	681b      	ldr	r3, [r3, #0]
 80125d2:	6032      	str	r2, [r6, #0]
 80125d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80125d8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80125dc:	2301      	movs	r3, #1
 80125de:	e09c      	b.n	801271a <_printf_i+0x1e6>
 80125e0:	6833      	ldr	r3, [r6, #0]
 80125e2:	6820      	ldr	r0, [r4, #0]
 80125e4:	1d19      	adds	r1, r3, #4
 80125e6:	6031      	str	r1, [r6, #0]
 80125e8:	0606      	lsls	r6, r0, #24
 80125ea:	d501      	bpl.n	80125f0 <_printf_i+0xbc>
 80125ec:	681d      	ldr	r5, [r3, #0]
 80125ee:	e003      	b.n	80125f8 <_printf_i+0xc4>
 80125f0:	0645      	lsls	r5, r0, #25
 80125f2:	d5fb      	bpl.n	80125ec <_printf_i+0xb8>
 80125f4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80125f8:	2d00      	cmp	r5, #0
 80125fa:	da03      	bge.n	8012604 <_printf_i+0xd0>
 80125fc:	232d      	movs	r3, #45	@ 0x2d
 80125fe:	426d      	negs	r5, r5
 8012600:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012604:	4858      	ldr	r0, [pc, #352]	@ (8012768 <_printf_i+0x234>)
 8012606:	230a      	movs	r3, #10
 8012608:	e011      	b.n	801262e <_printf_i+0xfa>
 801260a:	6821      	ldr	r1, [r4, #0]
 801260c:	6833      	ldr	r3, [r6, #0]
 801260e:	0608      	lsls	r0, r1, #24
 8012610:	f853 5b04 	ldr.w	r5, [r3], #4
 8012614:	d402      	bmi.n	801261c <_printf_i+0xe8>
 8012616:	0649      	lsls	r1, r1, #25
 8012618:	bf48      	it	mi
 801261a:	b2ad      	uxthmi	r5, r5
 801261c:	2f6f      	cmp	r7, #111	@ 0x6f
 801261e:	4852      	ldr	r0, [pc, #328]	@ (8012768 <_printf_i+0x234>)
 8012620:	6033      	str	r3, [r6, #0]
 8012622:	bf14      	ite	ne
 8012624:	230a      	movne	r3, #10
 8012626:	2308      	moveq	r3, #8
 8012628:	2100      	movs	r1, #0
 801262a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801262e:	6866      	ldr	r6, [r4, #4]
 8012630:	60a6      	str	r6, [r4, #8]
 8012632:	2e00      	cmp	r6, #0
 8012634:	db05      	blt.n	8012642 <_printf_i+0x10e>
 8012636:	6821      	ldr	r1, [r4, #0]
 8012638:	432e      	orrs	r6, r5
 801263a:	f021 0104 	bic.w	r1, r1, #4
 801263e:	6021      	str	r1, [r4, #0]
 8012640:	d04b      	beq.n	80126da <_printf_i+0x1a6>
 8012642:	4616      	mov	r6, r2
 8012644:	fbb5 f1f3 	udiv	r1, r5, r3
 8012648:	fb03 5711 	mls	r7, r3, r1, r5
 801264c:	5dc7      	ldrb	r7, [r0, r7]
 801264e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012652:	462f      	mov	r7, r5
 8012654:	42bb      	cmp	r3, r7
 8012656:	460d      	mov	r5, r1
 8012658:	d9f4      	bls.n	8012644 <_printf_i+0x110>
 801265a:	2b08      	cmp	r3, #8
 801265c:	d10b      	bne.n	8012676 <_printf_i+0x142>
 801265e:	6823      	ldr	r3, [r4, #0]
 8012660:	07df      	lsls	r7, r3, #31
 8012662:	d508      	bpl.n	8012676 <_printf_i+0x142>
 8012664:	6923      	ldr	r3, [r4, #16]
 8012666:	6861      	ldr	r1, [r4, #4]
 8012668:	4299      	cmp	r1, r3
 801266a:	bfde      	ittt	le
 801266c:	2330      	movle	r3, #48	@ 0x30
 801266e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012672:	f106 36ff 	addle.w	r6, r6, #4294967295
 8012676:	1b92      	subs	r2, r2, r6
 8012678:	6122      	str	r2, [r4, #16]
 801267a:	f8cd a000 	str.w	sl, [sp]
 801267e:	464b      	mov	r3, r9
 8012680:	aa03      	add	r2, sp, #12
 8012682:	4621      	mov	r1, r4
 8012684:	4640      	mov	r0, r8
 8012686:	f7ff fee7 	bl	8012458 <_printf_common>
 801268a:	3001      	adds	r0, #1
 801268c:	d14a      	bne.n	8012724 <_printf_i+0x1f0>
 801268e:	f04f 30ff 	mov.w	r0, #4294967295
 8012692:	b004      	add	sp, #16
 8012694:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012698:	6823      	ldr	r3, [r4, #0]
 801269a:	f043 0320 	orr.w	r3, r3, #32
 801269e:	6023      	str	r3, [r4, #0]
 80126a0:	4832      	ldr	r0, [pc, #200]	@ (801276c <_printf_i+0x238>)
 80126a2:	2778      	movs	r7, #120	@ 0x78
 80126a4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80126a8:	6823      	ldr	r3, [r4, #0]
 80126aa:	6831      	ldr	r1, [r6, #0]
 80126ac:	061f      	lsls	r7, r3, #24
 80126ae:	f851 5b04 	ldr.w	r5, [r1], #4
 80126b2:	d402      	bmi.n	80126ba <_printf_i+0x186>
 80126b4:	065f      	lsls	r7, r3, #25
 80126b6:	bf48      	it	mi
 80126b8:	b2ad      	uxthmi	r5, r5
 80126ba:	6031      	str	r1, [r6, #0]
 80126bc:	07d9      	lsls	r1, r3, #31
 80126be:	bf44      	itt	mi
 80126c0:	f043 0320 	orrmi.w	r3, r3, #32
 80126c4:	6023      	strmi	r3, [r4, #0]
 80126c6:	b11d      	cbz	r5, 80126d0 <_printf_i+0x19c>
 80126c8:	2310      	movs	r3, #16
 80126ca:	e7ad      	b.n	8012628 <_printf_i+0xf4>
 80126cc:	4826      	ldr	r0, [pc, #152]	@ (8012768 <_printf_i+0x234>)
 80126ce:	e7e9      	b.n	80126a4 <_printf_i+0x170>
 80126d0:	6823      	ldr	r3, [r4, #0]
 80126d2:	f023 0320 	bic.w	r3, r3, #32
 80126d6:	6023      	str	r3, [r4, #0]
 80126d8:	e7f6      	b.n	80126c8 <_printf_i+0x194>
 80126da:	4616      	mov	r6, r2
 80126dc:	e7bd      	b.n	801265a <_printf_i+0x126>
 80126de:	6833      	ldr	r3, [r6, #0]
 80126e0:	6825      	ldr	r5, [r4, #0]
 80126e2:	6961      	ldr	r1, [r4, #20]
 80126e4:	1d18      	adds	r0, r3, #4
 80126e6:	6030      	str	r0, [r6, #0]
 80126e8:	062e      	lsls	r6, r5, #24
 80126ea:	681b      	ldr	r3, [r3, #0]
 80126ec:	d501      	bpl.n	80126f2 <_printf_i+0x1be>
 80126ee:	6019      	str	r1, [r3, #0]
 80126f0:	e002      	b.n	80126f8 <_printf_i+0x1c4>
 80126f2:	0668      	lsls	r0, r5, #25
 80126f4:	d5fb      	bpl.n	80126ee <_printf_i+0x1ba>
 80126f6:	8019      	strh	r1, [r3, #0]
 80126f8:	2300      	movs	r3, #0
 80126fa:	6123      	str	r3, [r4, #16]
 80126fc:	4616      	mov	r6, r2
 80126fe:	e7bc      	b.n	801267a <_printf_i+0x146>
 8012700:	6833      	ldr	r3, [r6, #0]
 8012702:	1d1a      	adds	r2, r3, #4
 8012704:	6032      	str	r2, [r6, #0]
 8012706:	681e      	ldr	r6, [r3, #0]
 8012708:	6862      	ldr	r2, [r4, #4]
 801270a:	2100      	movs	r1, #0
 801270c:	4630      	mov	r0, r6
 801270e:	f7ed fd6f 	bl	80001f0 <memchr>
 8012712:	b108      	cbz	r0, 8012718 <_printf_i+0x1e4>
 8012714:	1b80      	subs	r0, r0, r6
 8012716:	6060      	str	r0, [r4, #4]
 8012718:	6863      	ldr	r3, [r4, #4]
 801271a:	6123      	str	r3, [r4, #16]
 801271c:	2300      	movs	r3, #0
 801271e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012722:	e7aa      	b.n	801267a <_printf_i+0x146>
 8012724:	6923      	ldr	r3, [r4, #16]
 8012726:	4632      	mov	r2, r6
 8012728:	4649      	mov	r1, r9
 801272a:	4640      	mov	r0, r8
 801272c:	47d0      	blx	sl
 801272e:	3001      	adds	r0, #1
 8012730:	d0ad      	beq.n	801268e <_printf_i+0x15a>
 8012732:	6823      	ldr	r3, [r4, #0]
 8012734:	079b      	lsls	r3, r3, #30
 8012736:	d413      	bmi.n	8012760 <_printf_i+0x22c>
 8012738:	68e0      	ldr	r0, [r4, #12]
 801273a:	9b03      	ldr	r3, [sp, #12]
 801273c:	4298      	cmp	r0, r3
 801273e:	bfb8      	it	lt
 8012740:	4618      	movlt	r0, r3
 8012742:	e7a6      	b.n	8012692 <_printf_i+0x15e>
 8012744:	2301      	movs	r3, #1
 8012746:	4632      	mov	r2, r6
 8012748:	4649      	mov	r1, r9
 801274a:	4640      	mov	r0, r8
 801274c:	47d0      	blx	sl
 801274e:	3001      	adds	r0, #1
 8012750:	d09d      	beq.n	801268e <_printf_i+0x15a>
 8012752:	3501      	adds	r5, #1
 8012754:	68e3      	ldr	r3, [r4, #12]
 8012756:	9903      	ldr	r1, [sp, #12]
 8012758:	1a5b      	subs	r3, r3, r1
 801275a:	42ab      	cmp	r3, r5
 801275c:	dcf2      	bgt.n	8012744 <_printf_i+0x210>
 801275e:	e7eb      	b.n	8012738 <_printf_i+0x204>
 8012760:	2500      	movs	r5, #0
 8012762:	f104 0619 	add.w	r6, r4, #25
 8012766:	e7f5      	b.n	8012754 <_printf_i+0x220>
 8012768:	08013f6e 	.word	0x08013f6e
 801276c:	08013f7f 	.word	0x08013f7f

08012770 <memmove>:
 8012770:	4288      	cmp	r0, r1
 8012772:	b510      	push	{r4, lr}
 8012774:	eb01 0402 	add.w	r4, r1, r2
 8012778:	d902      	bls.n	8012780 <memmove+0x10>
 801277a:	4284      	cmp	r4, r0
 801277c:	4623      	mov	r3, r4
 801277e:	d807      	bhi.n	8012790 <memmove+0x20>
 8012780:	1e43      	subs	r3, r0, #1
 8012782:	42a1      	cmp	r1, r4
 8012784:	d008      	beq.n	8012798 <memmove+0x28>
 8012786:	f811 2b01 	ldrb.w	r2, [r1], #1
 801278a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801278e:	e7f8      	b.n	8012782 <memmove+0x12>
 8012790:	4402      	add	r2, r0
 8012792:	4601      	mov	r1, r0
 8012794:	428a      	cmp	r2, r1
 8012796:	d100      	bne.n	801279a <memmove+0x2a>
 8012798:	bd10      	pop	{r4, pc}
 801279a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801279e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80127a2:	e7f7      	b.n	8012794 <memmove+0x24>

080127a4 <_sbrk_r>:
 80127a4:	b538      	push	{r3, r4, r5, lr}
 80127a6:	4d06      	ldr	r5, [pc, #24]	@ (80127c0 <_sbrk_r+0x1c>)
 80127a8:	2300      	movs	r3, #0
 80127aa:	4604      	mov	r4, r0
 80127ac:	4608      	mov	r0, r1
 80127ae:	602b      	str	r3, [r5, #0]
 80127b0:	f7f2 fb52 	bl	8004e58 <_sbrk>
 80127b4:	1c43      	adds	r3, r0, #1
 80127b6:	d102      	bne.n	80127be <_sbrk_r+0x1a>
 80127b8:	682b      	ldr	r3, [r5, #0]
 80127ba:	b103      	cbz	r3, 80127be <_sbrk_r+0x1a>
 80127bc:	6023      	str	r3, [r4, #0]
 80127be:	bd38      	pop	{r3, r4, r5, pc}
 80127c0:	20002908 	.word	0x20002908

080127c4 <_realloc_r>:
 80127c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80127c8:	4607      	mov	r7, r0
 80127ca:	4614      	mov	r4, r2
 80127cc:	460d      	mov	r5, r1
 80127ce:	b921      	cbnz	r1, 80127da <_realloc_r+0x16>
 80127d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80127d4:	4611      	mov	r1, r2
 80127d6:	f7ff bc5b 	b.w	8012090 <_malloc_r>
 80127da:	b92a      	cbnz	r2, 80127e8 <_realloc_r+0x24>
 80127dc:	f7ff fbec 	bl	8011fb8 <_free_r>
 80127e0:	4625      	mov	r5, r4
 80127e2:	4628      	mov	r0, r5
 80127e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80127e8:	f000 f81a 	bl	8012820 <_malloc_usable_size_r>
 80127ec:	4284      	cmp	r4, r0
 80127ee:	4606      	mov	r6, r0
 80127f0:	d802      	bhi.n	80127f8 <_realloc_r+0x34>
 80127f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80127f6:	d8f4      	bhi.n	80127e2 <_realloc_r+0x1e>
 80127f8:	4621      	mov	r1, r4
 80127fa:	4638      	mov	r0, r7
 80127fc:	f7ff fc48 	bl	8012090 <_malloc_r>
 8012800:	4680      	mov	r8, r0
 8012802:	b908      	cbnz	r0, 8012808 <_realloc_r+0x44>
 8012804:	4645      	mov	r5, r8
 8012806:	e7ec      	b.n	80127e2 <_realloc_r+0x1e>
 8012808:	42b4      	cmp	r4, r6
 801280a:	4622      	mov	r2, r4
 801280c:	4629      	mov	r1, r5
 801280e:	bf28      	it	cs
 8012810:	4632      	movcs	r2, r6
 8012812:	f7ff fbc3 	bl	8011f9c <memcpy>
 8012816:	4629      	mov	r1, r5
 8012818:	4638      	mov	r0, r7
 801281a:	f7ff fbcd 	bl	8011fb8 <_free_r>
 801281e:	e7f1      	b.n	8012804 <_realloc_r+0x40>

08012820 <_malloc_usable_size_r>:
 8012820:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012824:	1f18      	subs	r0, r3, #4
 8012826:	2b00      	cmp	r3, #0
 8012828:	bfbc      	itt	lt
 801282a:	580b      	ldrlt	r3, [r1, r0]
 801282c:	18c0      	addlt	r0, r0, r3
 801282e:	4770      	bx	lr

08012830 <_init>:
 8012830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012832:	bf00      	nop
 8012834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012836:	bc08      	pop	{r3}
 8012838:	469e      	mov	lr, r3
 801283a:	4770      	bx	lr

0801283c <_fini>:
 801283c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801283e:	bf00      	nop
 8012840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012842:	bc08      	pop	{r3}
 8012844:	469e      	mov	lr, r3
 8012846:	4770      	bx	lr
