
BlackPill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013174  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001894  08013314  08013314  00014314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014ba8  08014ba8  00016164  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08014ba8  08014ba8  00015ba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014bb0  08014bb0  00016164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014bb0  08014bb0  00015bb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08014bb4  08014bb4  00015bb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000164  20000000  08014bb8  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000026f8  20000164  08014d1c  00016164  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000285c  08014d1c  0001685c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00016164  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fd89  00000000  00000000  00016194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004e0b  00000000  00000000  00035f1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c30  00000000  00000000  0003ad28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000015cb  00000000  00000000  0003c958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c87a  00000000  00000000  0003df23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000250ac  00000000  00000000  0005a79d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a3802  00000000  00000000  0007f849  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012304b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007cc0  00000000  00000000  00123090  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009b  00000000  00000000  0012ad50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000164 	.word	0x20000164
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080132fc 	.word	0x080132fc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000168 	.word	0x20000168
 80001dc:	080132fc 	.word	0x080132fc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2iz>:
 8000a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a34:	d215      	bcs.n	8000a62 <__aeabi_d2iz+0x36>
 8000a36:	d511      	bpl.n	8000a5c <__aeabi_d2iz+0x30>
 8000a38:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d912      	bls.n	8000a68 <__aeabi_d2iz+0x3c>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a52:	fa23 f002 	lsr.w	r0, r3, r2
 8000a56:	bf18      	it	ne
 8000a58:	4240      	negne	r0, r0
 8000a5a:	4770      	bx	lr
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a66:	d105      	bne.n	8000a74 <__aeabi_d2iz+0x48>
 8000a68:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a6c:	bf08      	it	eq
 8000a6e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <__aeabi_uldivmod>:
 8000a7c:	b953      	cbnz	r3, 8000a94 <__aeabi_uldivmod+0x18>
 8000a7e:	b94a      	cbnz	r2, 8000a94 <__aeabi_uldivmod+0x18>
 8000a80:	2900      	cmp	r1, #0
 8000a82:	bf08      	it	eq
 8000a84:	2800      	cmpeq	r0, #0
 8000a86:	bf1c      	itt	ne
 8000a88:	f04f 31ff 	movne.w	r1, #4294967295
 8000a8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a90:	f000 b988 	b.w	8000da4 <__aeabi_idiv0>
 8000a94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a9c:	f000 f806 	bl	8000aac <__udivmoddi4>
 8000aa0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aa8:	b004      	add	sp, #16
 8000aaa:	4770      	bx	lr

08000aac <__udivmoddi4>:
 8000aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab0:	9d08      	ldr	r5, [sp, #32]
 8000ab2:	468e      	mov	lr, r1
 8000ab4:	4604      	mov	r4, r0
 8000ab6:	4688      	mov	r8, r1
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d14a      	bne.n	8000b52 <__udivmoddi4+0xa6>
 8000abc:	428a      	cmp	r2, r1
 8000abe:	4617      	mov	r7, r2
 8000ac0:	d962      	bls.n	8000b88 <__udivmoddi4+0xdc>
 8000ac2:	fab2 f682 	clz	r6, r2
 8000ac6:	b14e      	cbz	r6, 8000adc <__udivmoddi4+0x30>
 8000ac8:	f1c6 0320 	rsb	r3, r6, #32
 8000acc:	fa01 f806 	lsl.w	r8, r1, r6
 8000ad0:	fa20 f303 	lsr.w	r3, r0, r3
 8000ad4:	40b7      	lsls	r7, r6
 8000ad6:	ea43 0808 	orr.w	r8, r3, r8
 8000ada:	40b4      	lsls	r4, r6
 8000adc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ae0:	fa1f fc87 	uxth.w	ip, r7
 8000ae4:	fbb8 f1fe 	udiv	r1, r8, lr
 8000ae8:	0c23      	lsrs	r3, r4, #16
 8000aea:	fb0e 8811 	mls	r8, lr, r1, r8
 8000aee:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000af2:	fb01 f20c 	mul.w	r2, r1, ip
 8000af6:	429a      	cmp	r2, r3
 8000af8:	d909      	bls.n	8000b0e <__udivmoddi4+0x62>
 8000afa:	18fb      	adds	r3, r7, r3
 8000afc:	f101 30ff 	add.w	r0, r1, #4294967295
 8000b00:	f080 80ea 	bcs.w	8000cd8 <__udivmoddi4+0x22c>
 8000b04:	429a      	cmp	r2, r3
 8000b06:	f240 80e7 	bls.w	8000cd8 <__udivmoddi4+0x22c>
 8000b0a:	3902      	subs	r1, #2
 8000b0c:	443b      	add	r3, r7
 8000b0e:	1a9a      	subs	r2, r3, r2
 8000b10:	b2a3      	uxth	r3, r4
 8000b12:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b16:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b1e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b22:	459c      	cmp	ip, r3
 8000b24:	d909      	bls.n	8000b3a <__udivmoddi4+0x8e>
 8000b26:	18fb      	adds	r3, r7, r3
 8000b28:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b2c:	f080 80d6 	bcs.w	8000cdc <__udivmoddi4+0x230>
 8000b30:	459c      	cmp	ip, r3
 8000b32:	f240 80d3 	bls.w	8000cdc <__udivmoddi4+0x230>
 8000b36:	443b      	add	r3, r7
 8000b38:	3802      	subs	r0, #2
 8000b3a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b3e:	eba3 030c 	sub.w	r3, r3, ip
 8000b42:	2100      	movs	r1, #0
 8000b44:	b11d      	cbz	r5, 8000b4e <__udivmoddi4+0xa2>
 8000b46:	40f3      	lsrs	r3, r6
 8000b48:	2200      	movs	r2, #0
 8000b4a:	e9c5 3200 	strd	r3, r2, [r5]
 8000b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b52:	428b      	cmp	r3, r1
 8000b54:	d905      	bls.n	8000b62 <__udivmoddi4+0xb6>
 8000b56:	b10d      	cbz	r5, 8000b5c <__udivmoddi4+0xb0>
 8000b58:	e9c5 0100 	strd	r0, r1, [r5]
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	4608      	mov	r0, r1
 8000b60:	e7f5      	b.n	8000b4e <__udivmoddi4+0xa2>
 8000b62:	fab3 f183 	clz	r1, r3
 8000b66:	2900      	cmp	r1, #0
 8000b68:	d146      	bne.n	8000bf8 <__udivmoddi4+0x14c>
 8000b6a:	4573      	cmp	r3, lr
 8000b6c:	d302      	bcc.n	8000b74 <__udivmoddi4+0xc8>
 8000b6e:	4282      	cmp	r2, r0
 8000b70:	f200 8105 	bhi.w	8000d7e <__udivmoddi4+0x2d2>
 8000b74:	1a84      	subs	r4, r0, r2
 8000b76:	eb6e 0203 	sbc.w	r2, lr, r3
 8000b7a:	2001      	movs	r0, #1
 8000b7c:	4690      	mov	r8, r2
 8000b7e:	2d00      	cmp	r5, #0
 8000b80:	d0e5      	beq.n	8000b4e <__udivmoddi4+0xa2>
 8000b82:	e9c5 4800 	strd	r4, r8, [r5]
 8000b86:	e7e2      	b.n	8000b4e <__udivmoddi4+0xa2>
 8000b88:	2a00      	cmp	r2, #0
 8000b8a:	f000 8090 	beq.w	8000cae <__udivmoddi4+0x202>
 8000b8e:	fab2 f682 	clz	r6, r2
 8000b92:	2e00      	cmp	r6, #0
 8000b94:	f040 80a4 	bne.w	8000ce0 <__udivmoddi4+0x234>
 8000b98:	1a8a      	subs	r2, r1, r2
 8000b9a:	0c03      	lsrs	r3, r0, #16
 8000b9c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ba0:	b280      	uxth	r0, r0
 8000ba2:	b2bc      	uxth	r4, r7
 8000ba4:	2101      	movs	r1, #1
 8000ba6:	fbb2 fcfe 	udiv	ip, r2, lr
 8000baa:	fb0e 221c 	mls	r2, lr, ip, r2
 8000bae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000bb2:	fb04 f20c 	mul.w	r2, r4, ip
 8000bb6:	429a      	cmp	r2, r3
 8000bb8:	d907      	bls.n	8000bca <__udivmoddi4+0x11e>
 8000bba:	18fb      	adds	r3, r7, r3
 8000bbc:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000bc0:	d202      	bcs.n	8000bc8 <__udivmoddi4+0x11c>
 8000bc2:	429a      	cmp	r2, r3
 8000bc4:	f200 80e0 	bhi.w	8000d88 <__udivmoddi4+0x2dc>
 8000bc8:	46c4      	mov	ip, r8
 8000bca:	1a9b      	subs	r3, r3, r2
 8000bcc:	fbb3 f2fe 	udiv	r2, r3, lr
 8000bd0:	fb0e 3312 	mls	r3, lr, r2, r3
 8000bd4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000bd8:	fb02 f404 	mul.w	r4, r2, r4
 8000bdc:	429c      	cmp	r4, r3
 8000bde:	d907      	bls.n	8000bf0 <__udivmoddi4+0x144>
 8000be0:	18fb      	adds	r3, r7, r3
 8000be2:	f102 30ff 	add.w	r0, r2, #4294967295
 8000be6:	d202      	bcs.n	8000bee <__udivmoddi4+0x142>
 8000be8:	429c      	cmp	r4, r3
 8000bea:	f200 80ca 	bhi.w	8000d82 <__udivmoddi4+0x2d6>
 8000bee:	4602      	mov	r2, r0
 8000bf0:	1b1b      	subs	r3, r3, r4
 8000bf2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000bf6:	e7a5      	b.n	8000b44 <__udivmoddi4+0x98>
 8000bf8:	f1c1 0620 	rsb	r6, r1, #32
 8000bfc:	408b      	lsls	r3, r1
 8000bfe:	fa22 f706 	lsr.w	r7, r2, r6
 8000c02:	431f      	orrs	r7, r3
 8000c04:	fa0e f401 	lsl.w	r4, lr, r1
 8000c08:	fa20 f306 	lsr.w	r3, r0, r6
 8000c0c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000c10:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000c14:	4323      	orrs	r3, r4
 8000c16:	fa00 f801 	lsl.w	r8, r0, r1
 8000c1a:	fa1f fc87 	uxth.w	ip, r7
 8000c1e:	fbbe f0f9 	udiv	r0, lr, r9
 8000c22:	0c1c      	lsrs	r4, r3, #16
 8000c24:	fb09 ee10 	mls	lr, r9, r0, lr
 8000c28:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000c2c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000c30:	45a6      	cmp	lr, r4
 8000c32:	fa02 f201 	lsl.w	r2, r2, r1
 8000c36:	d909      	bls.n	8000c4c <__udivmoddi4+0x1a0>
 8000c38:	193c      	adds	r4, r7, r4
 8000c3a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000c3e:	f080 809c 	bcs.w	8000d7a <__udivmoddi4+0x2ce>
 8000c42:	45a6      	cmp	lr, r4
 8000c44:	f240 8099 	bls.w	8000d7a <__udivmoddi4+0x2ce>
 8000c48:	3802      	subs	r0, #2
 8000c4a:	443c      	add	r4, r7
 8000c4c:	eba4 040e 	sub.w	r4, r4, lr
 8000c50:	fa1f fe83 	uxth.w	lr, r3
 8000c54:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c58:	fb09 4413 	mls	r4, r9, r3, r4
 8000c5c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000c60:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c64:	45a4      	cmp	ip, r4
 8000c66:	d908      	bls.n	8000c7a <__udivmoddi4+0x1ce>
 8000c68:	193c      	adds	r4, r7, r4
 8000c6a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000c6e:	f080 8082 	bcs.w	8000d76 <__udivmoddi4+0x2ca>
 8000c72:	45a4      	cmp	ip, r4
 8000c74:	d97f      	bls.n	8000d76 <__udivmoddi4+0x2ca>
 8000c76:	3b02      	subs	r3, #2
 8000c78:	443c      	add	r4, r7
 8000c7a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c7e:	eba4 040c 	sub.w	r4, r4, ip
 8000c82:	fba0 ec02 	umull	lr, ip, r0, r2
 8000c86:	4564      	cmp	r4, ip
 8000c88:	4673      	mov	r3, lr
 8000c8a:	46e1      	mov	r9, ip
 8000c8c:	d362      	bcc.n	8000d54 <__udivmoddi4+0x2a8>
 8000c8e:	d05f      	beq.n	8000d50 <__udivmoddi4+0x2a4>
 8000c90:	b15d      	cbz	r5, 8000caa <__udivmoddi4+0x1fe>
 8000c92:	ebb8 0203 	subs.w	r2, r8, r3
 8000c96:	eb64 0409 	sbc.w	r4, r4, r9
 8000c9a:	fa04 f606 	lsl.w	r6, r4, r6
 8000c9e:	fa22 f301 	lsr.w	r3, r2, r1
 8000ca2:	431e      	orrs	r6, r3
 8000ca4:	40cc      	lsrs	r4, r1
 8000ca6:	e9c5 6400 	strd	r6, r4, [r5]
 8000caa:	2100      	movs	r1, #0
 8000cac:	e74f      	b.n	8000b4e <__udivmoddi4+0xa2>
 8000cae:	fbb1 fcf2 	udiv	ip, r1, r2
 8000cb2:	0c01      	lsrs	r1, r0, #16
 8000cb4:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000cb8:	b280      	uxth	r0, r0
 8000cba:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000cbe:	463b      	mov	r3, r7
 8000cc0:	4638      	mov	r0, r7
 8000cc2:	463c      	mov	r4, r7
 8000cc4:	46b8      	mov	r8, r7
 8000cc6:	46be      	mov	lr, r7
 8000cc8:	2620      	movs	r6, #32
 8000cca:	fbb1 f1f7 	udiv	r1, r1, r7
 8000cce:	eba2 0208 	sub.w	r2, r2, r8
 8000cd2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000cd6:	e766      	b.n	8000ba6 <__udivmoddi4+0xfa>
 8000cd8:	4601      	mov	r1, r0
 8000cda:	e718      	b.n	8000b0e <__udivmoddi4+0x62>
 8000cdc:	4610      	mov	r0, r2
 8000cde:	e72c      	b.n	8000b3a <__udivmoddi4+0x8e>
 8000ce0:	f1c6 0220 	rsb	r2, r6, #32
 8000ce4:	fa2e f302 	lsr.w	r3, lr, r2
 8000ce8:	40b7      	lsls	r7, r6
 8000cea:	40b1      	lsls	r1, r6
 8000cec:	fa20 f202 	lsr.w	r2, r0, r2
 8000cf0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cf4:	430a      	orrs	r2, r1
 8000cf6:	fbb3 f8fe 	udiv	r8, r3, lr
 8000cfa:	b2bc      	uxth	r4, r7
 8000cfc:	fb0e 3318 	mls	r3, lr, r8, r3
 8000d00:	0c11      	lsrs	r1, r2, #16
 8000d02:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d06:	fb08 f904 	mul.w	r9, r8, r4
 8000d0a:	40b0      	lsls	r0, r6
 8000d0c:	4589      	cmp	r9, r1
 8000d0e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000d12:	b280      	uxth	r0, r0
 8000d14:	d93e      	bls.n	8000d94 <__udivmoddi4+0x2e8>
 8000d16:	1879      	adds	r1, r7, r1
 8000d18:	f108 3cff 	add.w	ip, r8, #4294967295
 8000d1c:	d201      	bcs.n	8000d22 <__udivmoddi4+0x276>
 8000d1e:	4589      	cmp	r9, r1
 8000d20:	d81f      	bhi.n	8000d62 <__udivmoddi4+0x2b6>
 8000d22:	eba1 0109 	sub.w	r1, r1, r9
 8000d26:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d2a:	fb09 f804 	mul.w	r8, r9, r4
 8000d2e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d32:	b292      	uxth	r2, r2
 8000d34:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d38:	4542      	cmp	r2, r8
 8000d3a:	d229      	bcs.n	8000d90 <__udivmoddi4+0x2e4>
 8000d3c:	18ba      	adds	r2, r7, r2
 8000d3e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000d42:	d2c4      	bcs.n	8000cce <__udivmoddi4+0x222>
 8000d44:	4542      	cmp	r2, r8
 8000d46:	d2c2      	bcs.n	8000cce <__udivmoddi4+0x222>
 8000d48:	f1a9 0102 	sub.w	r1, r9, #2
 8000d4c:	443a      	add	r2, r7
 8000d4e:	e7be      	b.n	8000cce <__udivmoddi4+0x222>
 8000d50:	45f0      	cmp	r8, lr
 8000d52:	d29d      	bcs.n	8000c90 <__udivmoddi4+0x1e4>
 8000d54:	ebbe 0302 	subs.w	r3, lr, r2
 8000d58:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000d5c:	3801      	subs	r0, #1
 8000d5e:	46e1      	mov	r9, ip
 8000d60:	e796      	b.n	8000c90 <__udivmoddi4+0x1e4>
 8000d62:	eba7 0909 	sub.w	r9, r7, r9
 8000d66:	4449      	add	r1, r9
 8000d68:	f1a8 0c02 	sub.w	ip, r8, #2
 8000d6c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d70:	fb09 f804 	mul.w	r8, r9, r4
 8000d74:	e7db      	b.n	8000d2e <__udivmoddi4+0x282>
 8000d76:	4673      	mov	r3, lr
 8000d78:	e77f      	b.n	8000c7a <__udivmoddi4+0x1ce>
 8000d7a:	4650      	mov	r0, sl
 8000d7c:	e766      	b.n	8000c4c <__udivmoddi4+0x1a0>
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e6fd      	b.n	8000b7e <__udivmoddi4+0xd2>
 8000d82:	443b      	add	r3, r7
 8000d84:	3a02      	subs	r2, #2
 8000d86:	e733      	b.n	8000bf0 <__udivmoddi4+0x144>
 8000d88:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d8c:	443b      	add	r3, r7
 8000d8e:	e71c      	b.n	8000bca <__udivmoddi4+0x11e>
 8000d90:	4649      	mov	r1, r9
 8000d92:	e79c      	b.n	8000cce <__udivmoddi4+0x222>
 8000d94:	eba1 0109 	sub.w	r1, r1, r9
 8000d98:	46c4      	mov	ip, r8
 8000d9a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d9e:	fb09 f804 	mul.w	r8, r9, r4
 8000da2:	e7c4      	b.n	8000d2e <__udivmoddi4+0x282>

08000da4 <__aeabi_idiv0>:
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop

08000da8 <ADC_Conversion_Cplt>:
static uint16_t mediaBuffer[ADC_MEDIA_SIZE][ADC_NUM_SENSORS] = {0};
static uint16_t sumData[ADC_NUM_SENSORS]= {0};
static uint8_t index = 0;


void ADC_Conversion_Cplt(uint16_t *rawData, uint16_t *filtredData){
 8000da8:	b490      	push	{r4, r7}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
 8000db0:	6039      	str	r1, [r7, #0]
	for(uint8_t channel = 0; channel < ADC_NUM_SENSORS; channel++){
 8000db2:	2300      	movs	r3, #0
 8000db4:	73fb      	strb	r3, [r7, #15]
 8000db6:	e042      	b.n	8000e3e <ADC_Conversion_Cplt+0x96>
		sumData[channel] -= mediaBuffer[index][channel];
 8000db8:	7bfb      	ldrb	r3, [r7, #15]
 8000dba:	4a2b      	ldr	r2, [pc, #172]	@ (8000e68 <ADC_Conversion_Cplt+0xc0>)
 8000dbc:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000dc0:	4b2a      	ldr	r3, [pc, #168]	@ (8000e6c <ADC_Conversion_Cplt+0xc4>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	461c      	mov	r4, r3
 8000dc6:	7bfa      	ldrb	r2, [r7, #15]
 8000dc8:	4829      	ldr	r0, [pc, #164]	@ (8000e70 <ADC_Conversion_Cplt+0xc8>)
 8000dca:	4623      	mov	r3, r4
 8000dcc:	00db      	lsls	r3, r3, #3
 8000dce:	4423      	add	r3, r4
 8000dd0:	4413      	add	r3, r2
 8000dd2:	f830 2013 	ldrh.w	r2, [r0, r3, lsl #1]
 8000dd6:	7bfb      	ldrb	r3, [r7, #15]
 8000dd8:	1a8a      	subs	r2, r1, r2
 8000dda:	b291      	uxth	r1, r2
 8000ddc:	4a22      	ldr	r2, [pc, #136]	@ (8000e68 <ADC_Conversion_Cplt+0xc0>)
 8000dde:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		sumData[channel] += rawData[channel];
 8000de2:	7bfb      	ldrb	r3, [r7, #15]
 8000de4:	4a20      	ldr	r2, [pc, #128]	@ (8000e68 <ADC_Conversion_Cplt+0xc0>)
 8000de6:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000dea:	7bfb      	ldrb	r3, [r7, #15]
 8000dec:	005b      	lsls	r3, r3, #1
 8000dee:	687a      	ldr	r2, [r7, #4]
 8000df0:	4413      	add	r3, r2
 8000df2:	881a      	ldrh	r2, [r3, #0]
 8000df4:	7bfb      	ldrb	r3, [r7, #15]
 8000df6:	440a      	add	r2, r1
 8000df8:	b291      	uxth	r1, r2
 8000dfa:	4a1b      	ldr	r2, [pc, #108]	@ (8000e68 <ADC_Conversion_Cplt+0xc0>)
 8000dfc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		mediaBuffer[index][channel] = rawData[channel];
 8000e00:	7bfb      	ldrb	r3, [r7, #15]
 8000e02:	005b      	lsls	r3, r3, #1
 8000e04:	687a      	ldr	r2, [r7, #4]
 8000e06:	4413      	add	r3, r2
 8000e08:	4a18      	ldr	r2, [pc, #96]	@ (8000e6c <ADC_Conversion_Cplt+0xc4>)
 8000e0a:	7812      	ldrb	r2, [r2, #0]
 8000e0c:	4610      	mov	r0, r2
 8000e0e:	7bfa      	ldrb	r2, [r7, #15]
 8000e10:	881c      	ldrh	r4, [r3, #0]
 8000e12:	4917      	ldr	r1, [pc, #92]	@ (8000e70 <ADC_Conversion_Cplt+0xc8>)
 8000e14:	4603      	mov	r3, r0
 8000e16:	00db      	lsls	r3, r3, #3
 8000e18:	4403      	add	r3, r0
 8000e1a:	4413      	add	r3, r2
 8000e1c:	4622      	mov	r2, r4
 8000e1e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		filtredData[channel] = (sumData[channel] >> ADC_DESPLAZAMIENTOS);
 8000e22:	7bfb      	ldrb	r3, [r7, #15]
 8000e24:	4a10      	ldr	r2, [pc, #64]	@ (8000e68 <ADC_Conversion_Cplt+0xc0>)
 8000e26:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000e2a:	7bfb      	ldrb	r3, [r7, #15]
 8000e2c:	005b      	lsls	r3, r3, #1
 8000e2e:	6839      	ldr	r1, [r7, #0]
 8000e30:	440b      	add	r3, r1
 8000e32:	0952      	lsrs	r2, r2, #5
 8000e34:	b292      	uxth	r2, r2
 8000e36:	801a      	strh	r2, [r3, #0]
	for(uint8_t channel = 0; channel < ADC_NUM_SENSORS; channel++){
 8000e38:	7bfb      	ldrb	r3, [r7, #15]
 8000e3a:	3301      	adds	r3, #1
 8000e3c:	73fb      	strb	r3, [r7, #15]
 8000e3e:	7bfb      	ldrb	r3, [r7, #15]
 8000e40:	2b08      	cmp	r3, #8
 8000e42:	d9b9      	bls.n	8000db8 <ADC_Conversion_Cplt+0x10>
	}
	index++;
 8000e44:	4b09      	ldr	r3, [pc, #36]	@ (8000e6c <ADC_Conversion_Cplt+0xc4>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	3301      	adds	r3, #1
 8000e4a:	b2da      	uxtb	r2, r3
 8000e4c:	4b07      	ldr	r3, [pc, #28]	@ (8000e6c <ADC_Conversion_Cplt+0xc4>)
 8000e4e:	701a      	strb	r2, [r3, #0]
	index &= (ADC_MEDIA_SIZE - 1);
 8000e50:	4b06      	ldr	r3, [pc, #24]	@ (8000e6c <ADC_Conversion_Cplt+0xc4>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	f003 031f 	and.w	r3, r3, #31
 8000e58:	b2da      	uxtb	r2, r3
 8000e5a:	4b04      	ldr	r3, [pc, #16]	@ (8000e6c <ADC_Conversion_Cplt+0xc4>)
 8000e5c:	701a      	strb	r2, [r3, #0]
}
 8000e5e:	bf00      	nop
 8000e60:	3710      	adds	r7, #16
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bc90      	pop	{r4, r7}
 8000e66:	4770      	bx	lr
 8000e68:	200003c0 	.word	0x200003c0
 8000e6c:	200003d2 	.word	0x200003d2
 8000e70:	20000180 	.word	0x20000180

08000e74 <inputState>:
#include "utilities.h"

s_Input debouncerBuff[MAX_INPUTS_DEBOUNCED];
uint8_t	inputIndex = 0;

void inputState(s_Input *stateInput){
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
	switch(stateInput->state){
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	785b      	ldrb	r3, [r3, #1]
 8000e80:	2b03      	cmp	r3, #3
 8000e82:	d849      	bhi.n	8000f18 <inputState+0xa4>
 8000e84:	a201      	add	r2, pc, #4	@ (adr r2, 8000e8c <inputState+0x18>)
 8000e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e8a:	bf00      	nop
 8000e8c:	08000ead 	.word	0x08000ead
 8000e90:	08000e9d 	.word	0x08000e9d
 8000e94:	08000eeb 	.word	0x08000eeb
 8000e98:	08000ebd 	.word	0x08000ebd
		case UP:
			if(stateInput->value == DOWN)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d13d      	bne.n	8000f20 <inputState+0xac>
				stateInput->state = FALLING;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2202      	movs	r2, #2
 8000ea8:	705a      	strb	r2, [r3, #1]
		break;
 8000eaa:	e039      	b.n	8000f20 <inputState+0xac>
		case DOWN:
			if(stateInput->value == UP)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	2b01      	cmp	r3, #1
 8000eb2:	d137      	bne.n	8000f24 <inputState+0xb0>
				stateInput->state = RISING;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2203      	movs	r2, #3
 8000eb8:	705a      	strb	r2, [r3, #1]
		break;
 8000eba:	e033      	b.n	8000f24 <inputState+0xb0>
		case RISING:
			if(stateInput->value == UP){
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d10e      	bne.n	8000ee2 <inputState+0x6e>
				stateInput->state = UP;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	705a      	strb	r2, [r3, #1]
				/*------------------------------*/
				stateInput->val = UP;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2201      	movs	r2, #1
 8000ece:	709a      	strb	r2, [r3, #2]
				if(stateInput->stateChanged != NULL)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d027      	beq.n	8000f28 <inputState+0xb4>
					stateInput->stateChanged(RISING);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	2003      	movs	r0, #3
 8000ede:	4798      	blx	r3
				/*------------------------------*/
			}else{
				stateInput->state = DOWN;
			}
		break;
 8000ee0:	e022      	b.n	8000f28 <inputState+0xb4>
				stateInput->state = DOWN;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	705a      	strb	r2, [r3, #1]
		break;
 8000ee8:	e01e      	b.n	8000f28 <inputState+0xb4>
		case FALLING:
			if(stateInput->value == DOWN){
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d10e      	bne.n	8000f10 <inputState+0x9c>
				stateInput->state = DOWN;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	705a      	strb	r2, [r3, #1]
				/*------------------------------*/
				stateInput->val = DOWN;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2200      	movs	r2, #0
 8000efc:	709a      	strb	r2, [r3, #2]
				if(stateInput->stateChanged != NULL)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d012      	beq.n	8000f2c <inputState+0xb8>
					stateInput->stateChanged(FALLING);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	2002      	movs	r0, #2
 8000f0c:	4798      	blx	r3
				/*------------------------------*/
			}else{
				stateInput->state = UP;
			}
		break;
 8000f0e:	e00d      	b.n	8000f2c <inputState+0xb8>
				stateInput->state = UP;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2201      	movs	r2, #1
 8000f14:	705a      	strb	r2, [r3, #1]
		break;
 8000f16:	e009      	b.n	8000f2c <inputState+0xb8>
		default:
		stateInput->state = UP;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	705a      	strb	r2, [r3, #1]
	}
}
 8000f1e:	e006      	b.n	8000f2e <inputState+0xba>
		break;
 8000f20:	bf00      	nop
 8000f22:	e004      	b.n	8000f2e <inputState+0xba>
		break;
 8000f24:	bf00      	nop
 8000f26:	e002      	b.n	8000f2e <inputState+0xba>
		break;
 8000f28:	bf00      	nop
 8000f2a:	e000      	b.n	8000f2e <inputState+0xba>
		break;
 8000f2c:	bf00      	nop
}
 8000f2e:	bf00      	nop
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop

08000f38 <Debounce_Init>:

void Debounce_Init(){
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
	for(inputIndex=0; inputIndex<MAX_INPUTS_DEBOUNCED; inputIndex++){
 8000f3c:	4b16      	ldr	r3, [pc, #88]	@ (8000f98 <Debounce_Init+0x60>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	701a      	strb	r2, [r3, #0]
 8000f42:	e01d      	b.n	8000f80 <Debounce_Init+0x48>
		debouncerBuff[inputIndex].getInputState = NULL;
 8000f44:	4b14      	ldr	r3, [pc, #80]	@ (8000f98 <Debounce_Init+0x60>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4a14      	ldr	r2, [pc, #80]	@ (8000f9c <Debounce_Init+0x64>)
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	005b      	lsls	r3, r3, #1
 8000f50:	440b      	add	r3, r1
 8000f52:	009b      	lsls	r3, r3, #2
 8000f54:	4413      	add	r3, r2
 8000f56:	3308      	adds	r3, #8
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
		debouncerBuff[inputIndex].stateChanged = NULL;
 8000f5c:	4b0e      	ldr	r3, [pc, #56]	@ (8000f98 <Debounce_Init+0x60>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	4619      	mov	r1, r3
 8000f62:	4a0e      	ldr	r2, [pc, #56]	@ (8000f9c <Debounce_Init+0x64>)
 8000f64:	460b      	mov	r3, r1
 8000f66:	005b      	lsls	r3, r3, #1
 8000f68:	440b      	add	r3, r1
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	4413      	add	r3, r2
 8000f6e:	3304      	adds	r3, #4
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
	for(inputIndex=0; inputIndex<MAX_INPUTS_DEBOUNCED; inputIndex++){
 8000f74:	4b08      	ldr	r3, [pc, #32]	@ (8000f98 <Debounce_Init+0x60>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	3301      	adds	r3, #1
 8000f7a:	b2da      	uxtb	r2, r3
 8000f7c:	4b06      	ldr	r3, [pc, #24]	@ (8000f98 <Debounce_Init+0x60>)
 8000f7e:	701a      	strb	r2, [r3, #0]
 8000f80:	4b05      	ldr	r3, [pc, #20]	@ (8000f98 <Debounce_Init+0x60>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d0dd      	beq.n	8000f44 <Debounce_Init+0xc>
	}
	inputIndex = 0;
 8000f88:	4b03      	ldr	r3, [pc, #12]	@ (8000f98 <Debounce_Init+0x60>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	701a      	strb	r2, [r3, #0]
}
 8000f8e:	bf00      	nop
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr
 8000f98:	200003e0 	.word	0x200003e0
 8000f9c:	200003d4 	.word	0x200003d4

08000fa0 <Debounce_Add>:

uint8_t Debounce_Add(uint8_t (*AbstHard)(), void (*STATECHANGED)(e_Estados estado)){
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	6039      	str	r1, [r7, #0]
	if(inputIndex >= MAX_INPUTS_DEBOUNCED)
 8000faa:	4b15      	ldr	r3, [pc, #84]	@ (8001000 <Debounce_Add+0x60>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <Debounce_Add+0x16>
		return 0;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	e01d      	b.n	8000ff2 <Debounce_Add+0x52>
	debouncerBuff[inputIndex].getInputState = AbstHard;
 8000fb6:	4b12      	ldr	r3, [pc, #72]	@ (8001000 <Debounce_Add+0x60>)
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4a11      	ldr	r2, [pc, #68]	@ (8001004 <Debounce_Add+0x64>)
 8000fbe:	460b      	mov	r3, r1
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	440b      	add	r3, r1
 8000fc4:	009b      	lsls	r3, r3, #2
 8000fc6:	4413      	add	r3, r2
 8000fc8:	3308      	adds	r3, #8
 8000fca:	687a      	ldr	r2, [r7, #4]
 8000fcc:	601a      	str	r2, [r3, #0]
	debouncerBuff[inputIndex].stateChanged = STATECHANGED;
 8000fce:	4b0c      	ldr	r3, [pc, #48]	@ (8001000 <Debounce_Add+0x60>)
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4a0b      	ldr	r2, [pc, #44]	@ (8001004 <Debounce_Add+0x64>)
 8000fd6:	460b      	mov	r3, r1
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	440b      	add	r3, r1
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	4413      	add	r3, r2
 8000fe0:	3304      	adds	r3, #4
 8000fe2:	683a      	ldr	r2, [r7, #0]
 8000fe4:	601a      	str	r2, [r3, #0]
	return inputIndex++;
 8000fe6:	4b06      	ldr	r3, [pc, #24]	@ (8001000 <Debounce_Add+0x60>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	1c5a      	adds	r2, r3, #1
 8000fec:	b2d1      	uxtb	r1, r2
 8000fee:	4a04      	ldr	r2, [pc, #16]	@ (8001000 <Debounce_Add+0x60>)
 8000ff0:	7011      	strb	r1, [r2, #0]
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	370c      	adds	r7, #12
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	200003e0 	.word	0x200003e0
 8001004:	200003d4 	.word	0x200003d4

08001008 <Debouncer_Task>:

void Debouncer_Task(){
 8001008:	b590      	push	{r4, r7, lr}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < MAX_INPUTS_DEBOUNCED; i++){
 800100e:	2300      	movs	r3, #0
 8001010:	71fb      	strb	r3, [r7, #7]
 8001012:	e021      	b.n	8001058 <Debouncer_Task+0x50>
		debouncerBuff[i].value = debouncerBuff[i].getInputState();
 8001014:	79fa      	ldrb	r2, [r7, #7]
 8001016:	4914      	ldr	r1, [pc, #80]	@ (8001068 <Debouncer_Task+0x60>)
 8001018:	4613      	mov	r3, r2
 800101a:	005b      	lsls	r3, r3, #1
 800101c:	4413      	add	r3, r2
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	440b      	add	r3, r1
 8001022:	3308      	adds	r3, #8
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	79fc      	ldrb	r4, [r7, #7]
 8001028:	4798      	blx	r3
 800102a:	4603      	mov	r3, r0
 800102c:	4619      	mov	r1, r3
 800102e:	4a0e      	ldr	r2, [pc, #56]	@ (8001068 <Debouncer_Task+0x60>)
 8001030:	4623      	mov	r3, r4
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	4423      	add	r3, r4
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	4413      	add	r3, r2
 800103a:	460a      	mov	r2, r1
 800103c:	701a      	strb	r2, [r3, #0]
		inputState(&debouncerBuff[i]);
 800103e:	79fa      	ldrb	r2, [r7, #7]
 8001040:	4613      	mov	r3, r2
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	4413      	add	r3, r2
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	4a07      	ldr	r2, [pc, #28]	@ (8001068 <Debouncer_Task+0x60>)
 800104a:	4413      	add	r3, r2
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff ff11 	bl	8000e74 <inputState>
	for(uint8_t i = 0; i < MAX_INPUTS_DEBOUNCED; i++){
 8001052:	79fb      	ldrb	r3, [r7, #7]
 8001054:	3301      	adds	r3, #1
 8001056:	71fb      	strb	r3, [r7, #7]
 8001058:	79fb      	ldrb	r3, [r7, #7]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d0da      	beq.n	8001014 <Debouncer_Task+0xc>
	}
}
 800105e:	bf00      	nop
 8001060:	bf00      	nop
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	bd90      	pop	{r4, r7, pc}
 8001068:	200003d4 	.word	0x200003d4

0800106c <MPU6050_Set_I2C_Communication>:
static e_system (*I2C_Mem_Read)(uint16_t Dev_Address, uint8_t Mem_Adress, uint8_t Mem_AddSize, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout);


void MPU6050_Set_I2C_Communication(
		e_system (*Mem_Write_Blocking)(uint16_t Dev_Address, uint8_t Mem_Adress, uint8_t Mem_AddSize, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout),
		e_system (*Mem_Read_Blocking)(uint16_t Dev_Address, uint8_t Mem_Adress, uint8_t Mem_AddSize, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout)){
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	6039      	str	r1, [r7, #0]
	I2C_Master_Transmit_Blocking = Mem_Write_Blocking;
 8001076:	4a06      	ldr	r2, [pc, #24]	@ (8001090 <MPU6050_Set_I2C_Communication+0x24>)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6013      	str	r3, [r2, #0]
	I2C_Mem_Read = Mem_Read_Blocking;
 800107c:	4a05      	ldr	r2, [pc, #20]	@ (8001094 <MPU6050_Set_I2C_Communication+0x28>)
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	6013      	str	r3, [r2, #0]
}
 8001082:	bf00      	nop
 8001084:	370c      	adds	r7, #12
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	200003e4 	.word	0x200003e4
 8001094:	200003e8 	.word	0x200003e8

08001098 <MPU6050_Init>:

e_system MPU6050_Init(s_MPU *mpu){
 8001098:	b590      	push	{r4, r7, lr}
 800109a:	b0b7      	sub	sp, #220	@ 0xdc
 800109c:	af02      	add	r7, sp, #8
 800109e:	6078      	str	r0, [r7, #4]
	uint8_t data = 0;
 80010a0:	2300      	movs	r3, #0
 80010a2:	f887 30ce 	strb.w	r3, [r7, #206]	@ 0xce
	e_system status = SYS_OK;
 80010a6:	2300      	movs	r3, #0
 80010a8:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf
	status += I2C_Mem_Read(MPU6050_ADDR, WHO_AM_I_MPU6050, 1, &data, 1, MPU_TIMEOUT);
 80010ac:	4b51      	ldr	r3, [pc, #324]	@ (80011f4 <MPU6050_Init+0x15c>)
 80010ae:	681c      	ldr	r4, [r3, #0]
 80010b0:	f107 03ce 	add.w	r3, r7, #206	@ 0xce
 80010b4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80010b8:	9201      	str	r2, [sp, #4]
 80010ba:	2201      	movs	r2, #1
 80010bc:	9200      	str	r2, [sp, #0]
 80010be:	2201      	movs	r2, #1
 80010c0:	2175      	movs	r1, #117	@ 0x75
 80010c2:	20d0      	movs	r0, #208	@ 0xd0
 80010c4:	47a0      	blx	r4
 80010c6:	4603      	mov	r3, r0
 80010c8:	461a      	mov	r2, r3
 80010ca:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 80010ce:	4413      	add	r3, r2
 80010d0:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf
	if(data == WHO_AM_I_DEFAULT_VALUE){
 80010d4:	f897 30ce 	ldrb.w	r3, [r7, #206]	@ 0xce
 80010d8:	2b68      	cmp	r3, #104	@ 0x68
 80010da:	f040 8084 	bne.w	80011e6 <MPU6050_Init+0x14e>
		data = 0x00;
 80010de:	2300      	movs	r3, #0
 80010e0:	f887 30ce 	strb.w	r3, [r7, #206]	@ 0xce
		status += I2C_Master_Transmit_Blocking(MPU6050_ADDR, POWER_MANAGEMENT_REG, 1, &data, 1, MPU_TIMEOUT);
 80010e4:	4b44      	ldr	r3, [pc, #272]	@ (80011f8 <MPU6050_Init+0x160>)
 80010e6:	681c      	ldr	r4, [r3, #0]
 80010e8:	f107 03ce 	add.w	r3, r7, #206	@ 0xce
 80010ec:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80010f0:	9201      	str	r2, [sp, #4]
 80010f2:	2201      	movs	r2, #1
 80010f4:	9200      	str	r2, [sp, #0]
 80010f6:	2201      	movs	r2, #1
 80010f8:	216b      	movs	r1, #107	@ 0x6b
 80010fa:	20d0      	movs	r0, #208	@ 0xd0
 80010fc:	47a0      	blx	r4
 80010fe:	4603      	mov	r3, r0
 8001100:	461a      	mov	r2, r3
 8001102:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 8001106:	4413      	add	r3, r2
 8001108:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf

		// Set data rate of 1 KHz (default)
		data = 0x07;
 800110c:	2307      	movs	r3, #7
 800110e:	f887 30ce 	strb.w	r3, [r7, #206]	@ 0xce
		status +=I2C_Master_Transmit_Blocking(MPU6050_ADDR, SMPLRT_DIV_REG, 1, &data, 1, MPU_TIMEOUT);
 8001112:	4b39      	ldr	r3, [pc, #228]	@ (80011f8 <MPU6050_Init+0x160>)
 8001114:	681c      	ldr	r4, [r3, #0]
 8001116:	f107 03ce 	add.w	r3, r7, #206	@ 0xce
 800111a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800111e:	9201      	str	r2, [sp, #4]
 8001120:	2201      	movs	r2, #1
 8001122:	9200      	str	r2, [sp, #0]
 8001124:	2201      	movs	r2, #1
 8001126:	2119      	movs	r1, #25
 8001128:	20d0      	movs	r0, #208	@ 0xd0
 800112a:	47a0      	blx	r4
 800112c:	4603      	mov	r3, r0
 800112e:	461a      	mov	r2, r3
 8001130:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 8001134:	4413      	add	r3, r2
 8001136:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf

		// Set accelerometer range of +/- 2g (default)
		data = 0x00;
 800113a:	2300      	movs	r3, #0
 800113c:	f887 30ce 	strb.w	r3, [r7, #206]	@ 0xce
		status += I2C_Master_Transmit_Blocking(MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &data, 1, MPU_TIMEOUT);
 8001140:	4b2d      	ldr	r3, [pc, #180]	@ (80011f8 <MPU6050_Init+0x160>)
 8001142:	681c      	ldr	r4, [r3, #0]
 8001144:	f107 03ce 	add.w	r3, r7, #206	@ 0xce
 8001148:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800114c:	9201      	str	r2, [sp, #4]
 800114e:	2201      	movs	r2, #1
 8001150:	9200      	str	r2, [sp, #0]
 8001152:	2201      	movs	r2, #1
 8001154:	211c      	movs	r1, #28
 8001156:	20d0      	movs	r0, #208	@ 0xd0
 8001158:	47a0      	blx	r4
 800115a:	4603      	mov	r3, r0
 800115c:	461a      	mov	r2, r3
 800115e:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 8001162:	4413      	add	r3, r2
 8001164:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf

		// Set gyroscope range of +/- 250 degree/s (default)
		data = 0x00;
 8001168:	2300      	movs	r3, #0
 800116a:	f887 30ce 	strb.w	r3, [r7, #206]	@ 0xce
		status += I2C_Master_Transmit_Blocking(MPU6050_ADDR, GYRO_CONFIG_REG, 1, &data, 1, MPU_TIMEOUT);
 800116e:	4b22      	ldr	r3, [pc, #136]	@ (80011f8 <MPU6050_Init+0x160>)
 8001170:	681c      	ldr	r4, [r3, #0]
 8001172:	f107 03ce 	add.w	r3, r7, #206	@ 0xce
 8001176:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800117a:	9201      	str	r2, [sp, #4]
 800117c:	2201      	movs	r2, #1
 800117e:	9200      	str	r2, [sp, #0]
 8001180:	2201      	movs	r2, #1
 8001182:	211b      	movs	r1, #27
 8001184:	20d0      	movs	r0, #208	@ 0xd0
 8001186:	47a0      	blx	r4
 8001188:	4603      	mov	r3, r0
 800118a:	461a      	mov	r2, r3
 800118c:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 8001190:	4413      	add	r3, r2
 8001192:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf

		// Set Digital Low Pass Filter
		data = 0x03;
 8001196:	2303      	movs	r3, #3
 8001198:	f887 30ce 	strb.w	r3, [r7, #206]	@ 0xce
		status += I2C_Master_Transmit_Blocking(MPU6050_ADDR, CONFIG, 1, &data, 1, MPU_TIMEOUT);
 800119c:	4b16      	ldr	r3, [pc, #88]	@ (80011f8 <MPU6050_Init+0x160>)
 800119e:	681c      	ldr	r4, [r3, #0]
 80011a0:	f107 03ce 	add.w	r3, r7, #206	@ 0xce
 80011a4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80011a8:	9201      	str	r2, [sp, #4]
 80011aa:	2201      	movs	r2, #1
 80011ac:	9200      	str	r2, [sp, #0]
 80011ae:	2201      	movs	r2, #1
 80011b0:	211a      	movs	r1, #26
 80011b2:	20d0      	movs	r0, #208	@ 0xd0
 80011b4:	47a0      	blx	r4
 80011b6:	4603      	mov	r3, r0
 80011b8:	461a      	mov	r2, r3
 80011ba:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 80011be:	4413      	add	r3, r2
 80011c0:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf
		I2C_Master_Transmit_Blocking(MPU6050_ADDR, INT_PIN_CFG, 1, &data, 1, MPU_TIMEOUT);

		data = 0x01;
		I2C_Master_Transmit_Blocking(MPU6050_ADDR, INT_ENABLE, 1, &data, 1, MPU_TIMEOUT);
		 */
		*mpu = (s_MPU){
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	4618      	mov	r0, r3
 80011c8:	23c4      	movs	r3, #196	@ 0xc4
 80011ca:	461a      	mov	r2, r3
 80011cc:	2100      	movs	r1, #0
 80011ce:	f011 fc03 	bl	80129d8 <memset>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2201      	movs	r2, #1
 80011d6:	f883 20c2 	strb.w	r2, [r3, #194]	@ 0xc2
		    },
		    .bit_data = {0},
		    .isInit = 1
		};

		if(status != SYS_OK){
 80011da:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d003      	beq.n	80011ea <MPU6050_Init+0x152>
			return SYS_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e002      	b.n	80011ec <MPU6050_Init+0x154>
		}

	}else{
		return SYS_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e000      	b.n	80011ec <MPU6050_Init+0x154>
	}
	return SYS_OK;
 80011ea:	2300      	movs	r3, #0
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	37d4      	adds	r7, #212	@ 0xd4
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd90      	pop	{r4, r7, pc}
 80011f4:	200003e8 	.word	0x200003e8
 80011f8:	200003e4 	.word	0x200003e4

080011fc <MPU6050_Calibrate>:

void MPU6050_Calibrate(s_MPU *mpu){
 80011fc:	b590      	push	{r4, r7, lr}
 80011fe:	b08d      	sub	sp, #52	@ 0x34
 8001200:	af02      	add	r7, sp, #8
 8001202:	6078      	str	r0, [r7, #4]
	int32_t temp_raw[6] = {0};
 8001204:	f107 030c 	add.w	r3, r7, #12
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	605a      	str	r2, [r3, #4]
 800120e:	609a      	str	r2, [r3, #8]
 8001210:	60da      	str	r2, [r3, #12]
 8001212:	611a      	str	r2, [r3, #16]
 8001214:	615a      	str	r2, [r3, #20]
	for (uint16_t i=0; i < NUM_SAMPLES; i++){
 8001216:	2300      	movs	r3, #0
 8001218:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800121a:	e069      	b.n	80012f0 <MPU6050_Calibrate+0xf4>
		I2C_Mem_Read(MPU6050_ADDR, ACCEL_XOUT_REG, 1, mpu->bit_data, 14, MPU_TIMEOUT);
 800121c:	4b49      	ldr	r3, [pc, #292]	@ (8001344 <MPU6050_Calibrate+0x148>)
 800121e:	681c      	ldr	r4, [r3, #0]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	33b4      	adds	r3, #180	@ 0xb4
 8001224:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001228:	9201      	str	r2, [sp, #4]
 800122a:	220e      	movs	r2, #14
 800122c:	9200      	str	r2, [sp, #0]
 800122e:	2201      	movs	r2, #1
 8001230:	213b      	movs	r1, #59	@ 0x3b
 8001232:	20d0      	movs	r0, #208	@ 0xd0
 8001234:	47a0      	blx	r4
		temp_raw[0] += (int16_t)((mpu->bit_data[0] << 8) | mpu->bit_data[1]);
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	687a      	ldr	r2, [r7, #4]
 800123a:	f892 20b4 	ldrb.w	r2, [r2, #180]	@ 0xb4
 800123e:	b212      	sxth	r2, r2
 8001240:	0212      	lsls	r2, r2, #8
 8001242:	b211      	sxth	r1, r2
 8001244:	687a      	ldr	r2, [r7, #4]
 8001246:	f892 20b5 	ldrb.w	r2, [r2, #181]	@ 0xb5
 800124a:	b212      	sxth	r2, r2
 800124c:	430a      	orrs	r2, r1
 800124e:	b212      	sxth	r2, r2
 8001250:	4413      	add	r3, r2
 8001252:	60fb      	str	r3, [r7, #12]
		temp_raw[1] += (int16_t)((mpu->bit_data[2] << 8) | mpu->bit_data[3]);
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	687a      	ldr	r2, [r7, #4]
 8001258:	f892 20b6 	ldrb.w	r2, [r2, #182]	@ 0xb6
 800125c:	b212      	sxth	r2, r2
 800125e:	0212      	lsls	r2, r2, #8
 8001260:	b211      	sxth	r1, r2
 8001262:	687a      	ldr	r2, [r7, #4]
 8001264:	f892 20b7 	ldrb.w	r2, [r2, #183]	@ 0xb7
 8001268:	b212      	sxth	r2, r2
 800126a:	430a      	orrs	r2, r1
 800126c:	b212      	sxth	r2, r2
 800126e:	4413      	add	r3, r2
 8001270:	613b      	str	r3, [r7, #16]
		temp_raw[2] += (int16_t)((mpu->bit_data[4] << 8) | mpu->bit_data[5]);
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	687a      	ldr	r2, [r7, #4]
 8001276:	f892 20b8 	ldrb.w	r2, [r2, #184]	@ 0xb8
 800127a:	b212      	sxth	r2, r2
 800127c:	0212      	lsls	r2, r2, #8
 800127e:	b211      	sxth	r1, r2
 8001280:	687a      	ldr	r2, [r7, #4]
 8001282:	f892 20b9 	ldrb.w	r2, [r2, #185]	@ 0xb9
 8001286:	b212      	sxth	r2, r2
 8001288:	430a      	orrs	r2, r1
 800128a:	b212      	sxth	r2, r2
 800128c:	4413      	add	r3, r2
 800128e:	617b      	str	r3, [r7, #20]

		temp_raw[3] += (int16_t)((mpu->bit_data[8 ] << 8) | mpu->bit_data[9 ]);
 8001290:	69bb      	ldr	r3, [r7, #24]
 8001292:	687a      	ldr	r2, [r7, #4]
 8001294:	f892 20bc 	ldrb.w	r2, [r2, #188]	@ 0xbc
 8001298:	b212      	sxth	r2, r2
 800129a:	0212      	lsls	r2, r2, #8
 800129c:	b211      	sxth	r1, r2
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	f892 20bd 	ldrb.w	r2, [r2, #189]	@ 0xbd
 80012a4:	b212      	sxth	r2, r2
 80012a6:	430a      	orrs	r2, r1
 80012a8:	b212      	sxth	r2, r2
 80012aa:	4413      	add	r3, r2
 80012ac:	61bb      	str	r3, [r7, #24]
		temp_raw[4] += (int16_t)((mpu->bit_data[10] << 8) | mpu->bit_data[11]);
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	687a      	ldr	r2, [r7, #4]
 80012b2:	f892 20be 	ldrb.w	r2, [r2, #190]	@ 0xbe
 80012b6:	b212      	sxth	r2, r2
 80012b8:	0212      	lsls	r2, r2, #8
 80012ba:	b211      	sxth	r1, r2
 80012bc:	687a      	ldr	r2, [r7, #4]
 80012be:	f892 20bf 	ldrb.w	r2, [r2, #191]	@ 0xbf
 80012c2:	b212      	sxth	r2, r2
 80012c4:	430a      	orrs	r2, r1
 80012c6:	b212      	sxth	r2, r2
 80012c8:	4413      	add	r3, r2
 80012ca:	61fb      	str	r3, [r7, #28]
		temp_raw[5] += (int16_t)((mpu->bit_data[12] << 8) | mpu->bit_data[13]);
 80012cc:	6a3b      	ldr	r3, [r7, #32]
 80012ce:	687a      	ldr	r2, [r7, #4]
 80012d0:	f892 20c0 	ldrb.w	r2, [r2, #192]	@ 0xc0
 80012d4:	b212      	sxth	r2, r2
 80012d6:	0212      	lsls	r2, r2, #8
 80012d8:	b211      	sxth	r1, r2
 80012da:	687a      	ldr	r2, [r7, #4]
 80012dc:	f892 20c1 	ldrb.w	r2, [r2, #193]	@ 0xc1
 80012e0:	b212      	sxth	r2, r2
 80012e2:	430a      	orrs	r2, r1
 80012e4:	b212      	sxth	r2, r2
 80012e6:	4413      	add	r3, r2
 80012e8:	623b      	str	r3, [r7, #32]
	for (uint16_t i=0; i < NUM_SAMPLES; i++){
 80012ea:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80012ec:	3301      	adds	r3, #1
 80012ee:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80012f0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80012f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80012f6:	d391      	bcc.n	800121c <MPU6050_Calibrate+0x20>
	}
    mpu->Acc.offset.x = (int16_t)(temp_raw[0] >> NUM_SAMPLES_BITS);
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	131b      	asrs	r3, r3, #12
 80012fc:	b21a      	sxth	r2, r3
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	80da      	strh	r2, [r3, #6]
    mpu->Acc.offset.y = (int16_t)(temp_raw[1] >> NUM_SAMPLES_BITS);
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	131b      	asrs	r3, r3, #12
 8001306:	b21a      	sxth	r2, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	811a      	strh	r2, [r3, #8]
    mpu->Acc.offset.z = (int16_t)(temp_raw[2] >> NUM_SAMPLES_BITS) - SCALE_FACTOR;
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	131b      	asrs	r3, r3, #12
 8001310:	b29b      	uxth	r3, r3
 8001312:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8001316:	b29b      	uxth	r3, r3
 8001318:	b21a      	sxth	r2, r3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	815a      	strh	r2, [r3, #10]

    mpu->Gyro.offset.x = (int16_t)(temp_raw[3] >> NUM_SAMPLES_BITS);
 800131e:	69bb      	ldr	r3, [r7, #24]
 8001320:	131b      	asrs	r3, r3, #12
 8001322:	b21a      	sxth	r2, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	825a      	strh	r2, [r3, #18]
	mpu->Gyro.offset.y = (int16_t)(temp_raw[4] >> NUM_SAMPLES_BITS);
 8001328:	69fb      	ldr	r3, [r7, #28]
 800132a:	131b      	asrs	r3, r3, #12
 800132c:	b21a      	sxth	r2, r3
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	829a      	strh	r2, [r3, #20]
	mpu->Gyro.offset.z = (int16_t)(temp_raw[5] >> NUM_SAMPLES_BITS);
 8001332:	6a3b      	ldr	r3, [r7, #32]
 8001334:	131b      	asrs	r3, r3, #12
 8001336:	b21a      	sxth	r2, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	82da      	strh	r2, [r3, #22]

	//mpu->Angle.pitch = atan2f(mpu->Acc.offset.y, sqrtf(mpu->Acc.offset.x * mpu->Acc.offset.x + mpu->Acc.offset.z * mpu->Acc.offset.z)) * 180.0f / M_PI;
	//mpu->Angle.roll  = atan2f(-mpu->Acc.offset.x, mpu->Acc.offset.z) * 180.0f / M_PI;
}
 800133c:	bf00      	nop
 800133e:	372c      	adds	r7, #44	@ 0x2c
 8001340:	46bd      	mov	sp, r7
 8001342:	bd90      	pop	{r4, r7, pc}
 8001344:	200003e8 	.word	0x200003e8

08001348 <MPU6050_I2C_DMA_Cplt>:

void MPU6050_I2C_DMA_Cplt(s_MPU *mpu){
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
	// ACC: GET RAW INFORMATION
	mpu->MAF.rawData[0] = (((mpu->bit_data[0] << 8) | mpu->bit_data[1]));
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 8001356:	b21b      	sxth	r3, r3
 8001358:	021b      	lsls	r3, r3, #8
 800135a:	b21a      	sxth	r2, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	f893 30b5 	ldrb.w	r3, [r3, #181]	@ 0xb5
 8001362:	b21b      	sxth	r3, r3
 8001364:	4313      	orrs	r3, r2
 8001366:	b21a      	sxth	r2, r3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	f8a3 2098 	strh.w	r2, [r3, #152]	@ 0x98
	mpu->MAF.rawData[1] = (((mpu->bit_data[2] << 8) | mpu->bit_data[3]));
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	f893 30b6 	ldrb.w	r3, [r3, #182]	@ 0xb6
 8001374:	b21b      	sxth	r3, r3
 8001376:	021b      	lsls	r3, r3, #8
 8001378:	b21a      	sxth	r2, r3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	f893 30b7 	ldrb.w	r3, [r3, #183]	@ 0xb7
 8001380:	b21b      	sxth	r3, r3
 8001382:	4313      	orrs	r3, r2
 8001384:	b21a      	sxth	r2, r3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
	mpu->MAF.rawData[2] = (((mpu->bit_data[4] << 8) | mpu->bit_data[5]));
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	f893 30b8 	ldrb.w	r3, [r3, #184]	@ 0xb8
 8001392:	b21b      	sxth	r3, r3
 8001394:	021b      	lsls	r3, r3, #8
 8001396:	b21a      	sxth	r2, r3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f893 30b9 	ldrb.w	r3, [r3, #185]	@ 0xb9
 800139e:	b21b      	sxth	r3, r3
 80013a0:	4313      	orrs	r3, r2
 80013a2:	b21a      	sxth	r2, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
	// GYR: GET RAW INFORMATION
	mpu->MAF.rawData[3] = (((mpu->bit_data[8 ] << 8) | mpu->bit_data[9 ]));
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	f893 30bc 	ldrb.w	r3, [r3, #188]	@ 0xbc
 80013b0:	b21b      	sxth	r3, r3
 80013b2:	021b      	lsls	r3, r3, #8
 80013b4:	b21a      	sxth	r2, r3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	f893 30bd 	ldrb.w	r3, [r3, #189]	@ 0xbd
 80013bc:	b21b      	sxth	r3, r3
 80013be:	4313      	orrs	r3, r2
 80013c0:	b21a      	sxth	r2, r3
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	f8a3 209e 	strh.w	r2, [r3, #158]	@ 0x9e
	mpu->MAF.rawData[4] = (((mpu->bit_data[10] << 8) | mpu->bit_data[11]));
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	f893 30be 	ldrb.w	r3, [r3, #190]	@ 0xbe
 80013ce:	b21b      	sxth	r3, r3
 80013d0:	021b      	lsls	r3, r3, #8
 80013d2:	b21a      	sxth	r2, r3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f893 30bf 	ldrb.w	r3, [r3, #191]	@ 0xbf
 80013da:	b21b      	sxth	r3, r3
 80013dc:	4313      	orrs	r3, r2
 80013de:	b21a      	sxth	r2, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
	mpu->MAF.rawData[5] = (((mpu->bit_data[12] << 8) | mpu->bit_data[13]));
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 80013ec:	b21b      	sxth	r3, r3
 80013ee:	021b      	lsls	r3, r3, #8
 80013f0:	b21a      	sxth	r2, r3
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 80013f8:	b21b      	sxth	r3, r3
 80013fa:	4313      	orrs	r3, r2
 80013fc:	b21a      	sxth	r2, r3
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	f8a3 20a2 	strh.w	r2, [r3, #162]	@ 0xa2
	mpu->MAF.isOn = TRUE;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2201      	movs	r2, #1
 8001408:	f883 20b1 	strb.w	r2, [r3, #177]	@ 0xb1
}
 800140c:	bf00      	nop
 800140e:	370c      	adds	r7, #12
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr

08001418 <MPU6050_MAF>:

void MPU6050_MAF(s_MPU *mpu){ //Moving Average Filter
 8001418:	b490      	push	{r4, r7}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
	if(mpu->MAF.isOn){
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f893 30b1 	ldrb.w	r3, [r3, #177]	@ 0xb1
 8001426:	2b00      	cmp	r3, #0
 8001428:	f000 80b8 	beq.w	800159c <MPU6050_MAF+0x184>
		mpu->MAF.isOn = FALSE;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2200      	movs	r2, #0
 8001430:	f883 20b1 	strb.w	r2, [r3, #177]	@ 0xb1
		for(uint8_t axis = 0; axis < NUM_AXIS; axis++){
 8001434:	2300      	movs	r3, #0
 8001436:	73fb      	strb	r3, [r7, #15]
 8001438:	e04e      	b.n	80014d8 <MPU6050_MAF+0xc0>
			mpu->MAF.sumData[axis] -= mpu->MAF.mediaBuffer[mpu->MAF.index][axis];
 800143a:	7bfa      	ldrb	r2, [r7, #15]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	3208      	adds	r2, #8
 8001440:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 800144a:	461c      	mov	r4, r3
 800144c:	7bf8      	ldrb	r0, [r7, #15]
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	4623      	mov	r3, r4
 8001452:	005b      	lsls	r3, r3, #1
 8001454:	4423      	add	r3, r4
 8001456:	005b      	lsls	r3, r3, #1
 8001458:	4403      	add	r3, r0
 800145a:	331c      	adds	r3, #28
 800145c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001460:	7bfa      	ldrb	r2, [r7, #15]
 8001462:	1ac9      	subs	r1, r1, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	3208      	adds	r2, #8
 8001468:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			mpu->MAF.sumData[axis] += mpu->MAF.rawData[axis];
 800146c:	7bfa      	ldrb	r2, [r7, #15]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	3208      	adds	r2, #8
 8001472:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001476:	7bf9      	ldrb	r1, [r7, #15]
 8001478:	687a      	ldr	r2, [r7, #4]
 800147a:	314c      	adds	r1, #76	@ 0x4c
 800147c:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8001480:	4611      	mov	r1, r2
 8001482:	7bfa      	ldrb	r2, [r7, #15]
 8001484:	4419      	add	r1, r3
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	3208      	adds	r2, #8
 800148a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			mpu->MAF.mediaBuffer[mpu->MAF.index][axis] = mpu->MAF.rawData[axis];
 800148e:	7bfa      	ldrb	r2, [r7, #15]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 8001496:	4618      	mov	r0, r3
 8001498:	7bf9      	ldrb	r1, [r7, #15]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	324c      	adds	r2, #76	@ 0x4c
 800149e:	f933 4012 	ldrsh.w	r4, [r3, r2, lsl #1]
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	4603      	mov	r3, r0
 80014a6:	005b      	lsls	r3, r3, #1
 80014a8:	4403      	add	r3, r0
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	440b      	add	r3, r1
 80014ae:	331c      	adds	r3, #28
 80014b0:	4621      	mov	r1, r4
 80014b2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			mpu->MAF.filtredData[axis] = (mpu->MAF.sumData[axis] >> NUM_MAF_BITS);
 80014b6:	7bfa      	ldrb	r2, [r7, #15]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	3208      	adds	r2, #8
 80014bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014c0:	10da      	asrs	r2, r3, #3
 80014c2:	7bfb      	ldrb	r3, [r7, #15]
 80014c4:	b211      	sxth	r1, r2
 80014c6:	687a      	ldr	r2, [r7, #4]
 80014c8:	3350      	adds	r3, #80	@ 0x50
 80014ca:	005b      	lsls	r3, r3, #1
 80014cc:	4413      	add	r3, r2
 80014ce:	460a      	mov	r2, r1
 80014d0:	809a      	strh	r2, [r3, #4]
		for(uint8_t axis = 0; axis < NUM_AXIS; axis++){
 80014d2:	7bfb      	ldrb	r3, [r7, #15]
 80014d4:	3301      	adds	r3, #1
 80014d6:	73fb      	strb	r3, [r7, #15]
 80014d8:	7bfb      	ldrb	r3, [r7, #15]
 80014da:	2b05      	cmp	r3, #5
 80014dc:	d9ad      	bls.n	800143a <MPU6050_MAF+0x22>
		}
		mpu->MAF.index++;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 80014e4:	3301      	adds	r3, #1
 80014e6:	b2da      	uxtb	r2, r3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0
		mpu->MAF.index &= (NUM_MAF - 1);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 80014f4:	f003 0307 	and.w	r3, r3, #7
 80014f8:	b2da      	uxtb	r2, r3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0

		// ACC: CALCULATE TRUE ACCELERATION
		mpu->Acc.x = mpu->MAF.filtredData[0] - mpu->Acc.offset.x;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	f9b3 30a4 	ldrsh.w	r3, [r3, #164]	@ 0xa4
 8001506:	b29a      	uxth	r2, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800150e:	b29b      	uxth	r3, r3
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	b29b      	uxth	r3, r3
 8001514:	b21a      	sxth	r2, r3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	801a      	strh	r2, [r3, #0]
		mpu->Acc.y = mpu->MAF.filtredData[1] - mpu->Acc.offset.y;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	f9b3 30a6 	ldrsh.w	r3, [r3, #166]	@ 0xa6
 8001520:	b29a      	uxth	r2, r3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001528:	b29b      	uxth	r3, r3
 800152a:	1ad3      	subs	r3, r2, r3
 800152c:	b29b      	uxth	r3, r3
 800152e:	b21a      	sxth	r2, r3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	805a      	strh	r2, [r3, #2]
		mpu->Acc.z = mpu->MAF.filtredData[2] - mpu->Acc.offset.z;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	f9b3 30a8 	ldrsh.w	r3, [r3, #168]	@ 0xa8
 800153a:	b29a      	uxth	r2, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001542:	b29b      	uxth	r3, r3
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	b29b      	uxth	r3, r3
 8001548:	b21a      	sxth	r2, r3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	809a      	strh	r2, [r3, #4]
		// GYR: CALCULATE TRUE ACCELERATION
		mpu->Gyro.x = mpu->MAF.filtredData[3] - mpu->Gyro.offset.x;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	f9b3 30aa 	ldrsh.w	r3, [r3, #170]	@ 0xaa
 8001554:	b29a      	uxth	r2, r3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800155c:	b29b      	uxth	r3, r3
 800155e:	1ad3      	subs	r3, r2, r3
 8001560:	b29b      	uxth	r3, r3
 8001562:	b21a      	sxth	r2, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	819a      	strh	r2, [r3, #12]
		mpu->Gyro.y = mpu->MAF.filtredData[4] - mpu->Gyro.offset.y;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	f9b3 30ac 	ldrsh.w	r3, [r3, #172]	@ 0xac
 800156e:	b29a      	uxth	r2, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001576:	b29b      	uxth	r3, r3
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	b29b      	uxth	r3, r3
 800157c:	b21a      	sxth	r2, r3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	81da      	strh	r2, [r3, #14]
		mpu->Gyro.z = mpu->MAF.filtredData[5] - mpu->Gyro.offset.z;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	f9b3 30ae 	ldrsh.w	r3, [r3, #174]	@ 0xae
 8001588:	b29a      	uxth	r2, r3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001590:	b29b      	uxth	r3, r3
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	b29b      	uxth	r3, r3
 8001596:	b21a      	sxth	r2, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	821a      	strh	r2, [r3, #16]
	}
}
 800159c:	bf00      	nop
 800159e:	3710      	adds	r7, #16
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bc90      	pop	{r4, r7}
 80015a4:	4770      	bx	lr
	...

080015a8 <Display_Set_I2C_Master_Transmit>:
	uint8_t PageData[6];
}Update;

void Display_Set_I2C_Master_Transmit(
		e_system (*Master_Transmit)(uint16_t DevAddress, uint8_t reg, uint8_t *pData, uint16_t Size),
		e_system (*Master_Transmit_Blocking)(uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)){
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	6039      	str	r1, [r7, #0]
	I2C_Master_Transmit = Master_Transmit;
 80015b2:	4a06      	ldr	r2, [pc, #24]	@ (80015cc <Display_Set_I2C_Master_Transmit+0x24>)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6013      	str	r3, [r2, #0]
	I2C_Master_Transmit_Blocking = Master_Transmit_Blocking;
 80015b8:	4a05      	ldr	r2, [pc, #20]	@ (80015d0 <Display_Set_I2C_Master_Transmit+0x28>)
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	6013      	str	r3, [r2, #0]
}
 80015be:	bf00      	nop
 80015c0:	370c      	adds	r7, #12
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	200003f4 	.word	0x200003f4
 80015d0:	200003f8 	.word	0x200003f8

080015d4 <Display_Init>:

e_system Display_Init(){
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 80015da:	2300      	movs	r3, #0
 80015dc:	71fb      	strb	r3, [r7, #7]

    status += SSD1306_WRITECOMMAND(0xAE);   // Display off
 80015de:	22ae      	movs	r2, #174	@ 0xae
 80015e0:	2100      	movs	r1, #0
 80015e2:	2078      	movs	r0, #120	@ 0x78
 80015e4:	f000 f94a 	bl	800187c <ssd1306_I2C_Write>
 80015e8:	4603      	mov	r3, r0
 80015ea:	461a      	mov	r2, r3
 80015ec:	79fb      	ldrb	r3, [r7, #7]
 80015ee:	4413      	add	r3, r2
 80015f0:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x20);   // Set Memory Addressing Mode
 80015f2:	2220      	movs	r2, #32
 80015f4:	2100      	movs	r1, #0
 80015f6:	2078      	movs	r0, #120	@ 0x78
 80015f8:	f000 f940 	bl	800187c <ssd1306_I2C_Write>
 80015fc:	4603      	mov	r3, r0
 80015fe:	461a      	mov	r2, r3
 8001600:	79fb      	ldrb	r3, [r7, #7]
 8001602:	4413      	add	r3, r2
 8001604:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x10);   // 00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001606:	2210      	movs	r2, #16
 8001608:	2100      	movs	r1, #0
 800160a:	2078      	movs	r0, #120	@ 0x78
 800160c:	f000 f936 	bl	800187c <ssd1306_I2C_Write>
 8001610:	4603      	mov	r3, r0
 8001612:	461a      	mov	r2, r3
 8001614:	79fb      	ldrb	r3, [r7, #7]
 8001616:	4413      	add	r3, r2
 8001618:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xB0);   // Set Page Start Address for Page Addressing Mode,0-7
 800161a:	22b0      	movs	r2, #176	@ 0xb0
 800161c:	2100      	movs	r1, #0
 800161e:	2078      	movs	r0, #120	@ 0x78
 8001620:	f000 f92c 	bl	800187c <ssd1306_I2C_Write>
 8001624:	4603      	mov	r3, r0
 8001626:	461a      	mov	r2, r3
 8001628:	79fb      	ldrb	r3, [r7, #7]
 800162a:	4413      	add	r3, r2
 800162c:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xC8);   // Set COM Output Scan Direction
 800162e:	22c8      	movs	r2, #200	@ 0xc8
 8001630:	2100      	movs	r1, #0
 8001632:	2078      	movs	r0, #120	@ 0x78
 8001634:	f000 f922 	bl	800187c <ssd1306_I2C_Write>
 8001638:	4603      	mov	r3, r0
 800163a:	461a      	mov	r2, r3
 800163c:	79fb      	ldrb	r3, [r7, #7]
 800163e:	4413      	add	r3, r2
 8001640:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x00);   // Set low column address
 8001642:	2200      	movs	r2, #0
 8001644:	2100      	movs	r1, #0
 8001646:	2078      	movs	r0, #120	@ 0x78
 8001648:	f000 f918 	bl	800187c <ssd1306_I2C_Write>
 800164c:	4603      	mov	r3, r0
 800164e:	461a      	mov	r2, r3
 8001650:	79fb      	ldrb	r3, [r7, #7]
 8001652:	4413      	add	r3, r2
 8001654:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x10);   // Set high column address
 8001656:	2210      	movs	r2, #16
 8001658:	2100      	movs	r1, #0
 800165a:	2078      	movs	r0, #120	@ 0x78
 800165c:	f000 f90e 	bl	800187c <ssd1306_I2C_Write>
 8001660:	4603      	mov	r3, r0
 8001662:	461a      	mov	r2, r3
 8001664:	79fb      	ldrb	r3, [r7, #7]
 8001666:	4413      	add	r3, r2
 8001668:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x40);   // Set start line address
 800166a:	2240      	movs	r2, #64	@ 0x40
 800166c:	2100      	movs	r1, #0
 800166e:	2078      	movs	r0, #120	@ 0x78
 8001670:	f000 f904 	bl	800187c <ssd1306_I2C_Write>
 8001674:	4603      	mov	r3, r0
 8001676:	461a      	mov	r2, r3
 8001678:	79fb      	ldrb	r3, [r7, #7]
 800167a:	4413      	add	r3, r2
 800167c:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x81);   // set contrast control register
 800167e:	2281      	movs	r2, #129	@ 0x81
 8001680:	2100      	movs	r1, #0
 8001682:	2078      	movs	r0, #120	@ 0x78
 8001684:	f000 f8fa 	bl	800187c <ssd1306_I2C_Write>
 8001688:	4603      	mov	r3, r0
 800168a:	461a      	mov	r2, r3
 800168c:	79fb      	ldrb	r3, [r7, #7]
 800168e:	4413      	add	r3, r2
 8001690:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xFF);
 8001692:	22ff      	movs	r2, #255	@ 0xff
 8001694:	2100      	movs	r1, #0
 8001696:	2078      	movs	r0, #120	@ 0x78
 8001698:	f000 f8f0 	bl	800187c <ssd1306_I2C_Write>
 800169c:	4603      	mov	r3, r0
 800169e:	461a      	mov	r2, r3
 80016a0:	79fb      	ldrb	r3, [r7, #7]
 80016a2:	4413      	add	r3, r2
 80016a4:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xA1);   // Set segment re-map 0 to 127
 80016a6:	22a1      	movs	r2, #161	@ 0xa1
 80016a8:	2100      	movs	r1, #0
 80016aa:	2078      	movs	r0, #120	@ 0x78
 80016ac:	f000 f8e6 	bl	800187c <ssd1306_I2C_Write>
 80016b0:	4603      	mov	r3, r0
 80016b2:	461a      	mov	r2, r3
 80016b4:	79fb      	ldrb	r3, [r7, #7]
 80016b6:	4413      	add	r3, r2
 80016b8:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xA6);   // Set normal display
 80016ba:	22a6      	movs	r2, #166	@ 0xa6
 80016bc:	2100      	movs	r1, #0
 80016be:	2078      	movs	r0, #120	@ 0x78
 80016c0:	f000 f8dc 	bl	800187c <ssd1306_I2C_Write>
 80016c4:	4603      	mov	r3, r0
 80016c6:	461a      	mov	r2, r3
 80016c8:	79fb      	ldrb	r3, [r7, #7]
 80016ca:	4413      	add	r3, r2
 80016cc:	71fb      	strb	r3, [r7, #7]

    status += SSD1306_WRITECOMMAND(0xA8);   // Set multiplex ratio(1 to 64)
 80016ce:	22a8      	movs	r2, #168	@ 0xa8
 80016d0:	2100      	movs	r1, #0
 80016d2:	2078      	movs	r0, #120	@ 0x78
 80016d4:	f000 f8d2 	bl	800187c <ssd1306_I2C_Write>
 80016d8:	4603      	mov	r3, r0
 80016da:	461a      	mov	r2, r3
 80016dc:	79fb      	ldrb	r3, [r7, #7]
 80016de:	4413      	add	r3, r2
 80016e0:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(SSD1306_HEIGHT - 1);
 80016e2:	223f      	movs	r2, #63	@ 0x3f
 80016e4:	2100      	movs	r1, #0
 80016e6:	2078      	movs	r0, #120	@ 0x78
 80016e8:	f000 f8c8 	bl	800187c <ssd1306_I2C_Write>
 80016ec:	4603      	mov	r3, r0
 80016ee:	461a      	mov	r2, r3
 80016f0:	79fb      	ldrb	r3, [r7, #7]
 80016f2:	4413      	add	r3, r2
 80016f4:	71fb      	strb	r3, [r7, #7]

    status += SSD1306_WRITECOMMAND(0xA4);   // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80016f6:	22a4      	movs	r2, #164	@ 0xa4
 80016f8:	2100      	movs	r1, #0
 80016fa:	2078      	movs	r0, #120	@ 0x78
 80016fc:	f000 f8be 	bl	800187c <ssd1306_I2C_Write>
 8001700:	4603      	mov	r3, r0
 8001702:	461a      	mov	r2, r3
 8001704:	79fb      	ldrb	r3, [r7, #7]
 8001706:	4413      	add	r3, r2
 8001708:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xD3);   // Set display offset
 800170a:	22d3      	movs	r2, #211	@ 0xd3
 800170c:	2100      	movs	r1, #0
 800170e:	2078      	movs	r0, #120	@ 0x78
 8001710:	f000 f8b4 	bl	800187c <ssd1306_I2C_Write>
 8001714:	4603      	mov	r3, r0
 8001716:	461a      	mov	r2, r3
 8001718:	79fb      	ldrb	r3, [r7, #7]
 800171a:	4413      	add	r3, r2
 800171c:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x00);   // No offset
 800171e:	2200      	movs	r2, #0
 8001720:	2100      	movs	r1, #0
 8001722:	2078      	movs	r0, #120	@ 0x78
 8001724:	f000 f8aa 	bl	800187c <ssd1306_I2C_Write>
 8001728:	4603      	mov	r3, r0
 800172a:	461a      	mov	r2, r3
 800172c:	79fb      	ldrb	r3, [r7, #7]
 800172e:	4413      	add	r3, r2
 8001730:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xD5);   // Set display clock divide ratio/oscillator frequency
 8001732:	22d5      	movs	r2, #213	@ 0xd5
 8001734:	2100      	movs	r1, #0
 8001736:	2078      	movs	r0, #120	@ 0x78
 8001738:	f000 f8a0 	bl	800187c <ssd1306_I2C_Write>
 800173c:	4603      	mov	r3, r0
 800173e:	461a      	mov	r2, r3
 8001740:	79fb      	ldrb	r3, [r7, #7]
 8001742:	4413      	add	r3, r2
 8001744:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xF0);   // Set divide ratio
 8001746:	22f0      	movs	r2, #240	@ 0xf0
 8001748:	2100      	movs	r1, #0
 800174a:	2078      	movs	r0, #120	@ 0x78
 800174c:	f000 f896 	bl	800187c <ssd1306_I2C_Write>
 8001750:	4603      	mov	r3, r0
 8001752:	461a      	mov	r2, r3
 8001754:	79fb      	ldrb	r3, [r7, #7]
 8001756:	4413      	add	r3, r2
 8001758:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xD9);   // Set pre-charge period
 800175a:	22d9      	movs	r2, #217	@ 0xd9
 800175c:	2100      	movs	r1, #0
 800175e:	2078      	movs	r0, #120	@ 0x78
 8001760:	f000 f88c 	bl	800187c <ssd1306_I2C_Write>
 8001764:	4603      	mov	r3, r0
 8001766:	461a      	mov	r2, r3
 8001768:	79fb      	ldrb	r3, [r7, #7]
 800176a:	4413      	add	r3, r2
 800176c:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x22);
 800176e:	2222      	movs	r2, #34	@ 0x22
 8001770:	2100      	movs	r1, #0
 8001772:	2078      	movs	r0, #120	@ 0x78
 8001774:	f000 f882 	bl	800187c <ssd1306_I2C_Write>
 8001778:	4603      	mov	r3, r0
 800177a:	461a      	mov	r2, r3
 800177c:	79fb      	ldrb	r3, [r7, #7]
 800177e:	4413      	add	r3, r2
 8001780:	71fb      	strb	r3, [r7, #7]

    status += SSD1306_WRITECOMMAND(0xDA);   // Set com pins hardware configuration
 8001782:	22da      	movs	r2, #218	@ 0xda
 8001784:	2100      	movs	r1, #0
 8001786:	2078      	movs	r0, #120	@ 0x78
 8001788:	f000 f878 	bl	800187c <ssd1306_I2C_Write>
 800178c:	4603      	mov	r3, r0
 800178e:	461a      	mov	r2, r3
 8001790:	79fb      	ldrb	r3, [r7, #7]
 8001792:	4413      	add	r3, r2
 8001794:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(Display_COM_LR_REMAP << 5 | Display_COM_ALTERNATIVE_PIN_CONFIG << 4 | 0x02);
 8001796:	2212      	movs	r2, #18
 8001798:	2100      	movs	r1, #0
 800179a:	2078      	movs	r0, #120	@ 0x78
 800179c:	f000 f86e 	bl	800187c <ssd1306_I2C_Write>
 80017a0:	4603      	mov	r3, r0
 80017a2:	461a      	mov	r2, r3
 80017a4:	79fb      	ldrb	r3, [r7, #7]
 80017a6:	4413      	add	r3, r2
 80017a8:	71fb      	strb	r3, [r7, #7]

    status += SSD1306_WRITECOMMAND(0xDB);   // Set vcomh
 80017aa:	22db      	movs	r2, #219	@ 0xdb
 80017ac:	2100      	movs	r1, #0
 80017ae:	2078      	movs	r0, #120	@ 0x78
 80017b0:	f000 f864 	bl	800187c <ssd1306_I2C_Write>
 80017b4:	4603      	mov	r3, r0
 80017b6:	461a      	mov	r2, r3
 80017b8:	79fb      	ldrb	r3, [r7, #7]
 80017ba:	4413      	add	r3, r2
 80017bc:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x20);   // 0x20,0.77xVcc
 80017be:	2220      	movs	r2, #32
 80017c0:	2100      	movs	r1, #0
 80017c2:	2078      	movs	r0, #120	@ 0x78
 80017c4:	f000 f85a 	bl	800187c <ssd1306_I2C_Write>
 80017c8:	4603      	mov	r3, r0
 80017ca:	461a      	mov	r2, r3
 80017cc:	79fb      	ldrb	r3, [r7, #7]
 80017ce:	4413      	add	r3, r2
 80017d0:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x8D);   // Set DC-DC enable
 80017d2:	228d      	movs	r2, #141	@ 0x8d
 80017d4:	2100      	movs	r1, #0
 80017d6:	2078      	movs	r0, #120	@ 0x78
 80017d8:	f000 f850 	bl	800187c <ssd1306_I2C_Write>
 80017dc:	4603      	mov	r3, r0
 80017de:	461a      	mov	r2, r3
 80017e0:	79fb      	ldrb	r3, [r7, #7]
 80017e2:	4413      	add	r3, r2
 80017e4:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x14);   //
 80017e6:	2214      	movs	r2, #20
 80017e8:	2100      	movs	r1, #0
 80017ea:	2078      	movs	r0, #120	@ 0x78
 80017ec:	f000 f846 	bl	800187c <ssd1306_I2C_Write>
 80017f0:	4603      	mov	r3, r0
 80017f2:	461a      	mov	r2, r3
 80017f4:	79fb      	ldrb	r3, [r7, #7]
 80017f6:	4413      	add	r3, r2
 80017f8:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xAF);   // Turn on Display panel
 80017fa:	22af      	movs	r2, #175	@ 0xaf
 80017fc:	2100      	movs	r1, #0
 80017fe:	2078      	movs	r0, #120	@ 0x78
 8001800:	f000 f83c 	bl	800187c <ssd1306_I2C_Write>
 8001804:	4603      	mov	r3, r0
 8001806:	461a      	mov	r2, r3
 8001808:	79fb      	ldrb	r3, [r7, #7]
 800180a:	4413      	add	r3, r2
 800180c:	71fb      	strb	r3, [r7, #7]

	status += SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800180e:	222e      	movs	r2, #46	@ 0x2e
 8001810:	2100      	movs	r1, #0
 8001812:	2078      	movs	r0, #120	@ 0x78
 8001814:	f000 f832 	bl	800187c <ssd1306_I2C_Write>
 8001818:	4603      	mov	r3, r0
 800181a:	461a      	mov	r2, r3
 800181c:	79fb      	ldrb	r3, [r7, #7]
 800181e:	4413      	add	r3, r2
 8001820:	71fb      	strb	r3, [r7, #7]

	/* Clear screen */
	Display_Fill(SSD1306_COLOR_BLACK);
 8001822:	2000      	movs	r0, #0
 8001824:	f000 f8e8 	bl	80019f8 <Display_Fill>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8001828:	4b12      	ldr	r3, [pc, #72]	@ (8001874 <Display_Init+0x2a0>)
 800182a:	2200      	movs	r2, #0
 800182c:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800182e:	4b11      	ldr	r3, [pc, #68]	@ (8001874 <Display_Init+0x2a0>)
 8001830:	2200      	movs	r2, #0
 8001832:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = TRUE;
 8001834:	4b0f      	ldr	r3, [pc, #60]	@ (8001874 <Display_Init+0x2a0>)
 8001836:	2201      	movs	r2, #1
 8001838:	715a      	strb	r2, [r3, #5]

	Update.state = PAGE;
 800183a:	4b0f      	ldr	r3, [pc, #60]	@ (8001878 <Display_Init+0x2a4>)
 800183c:	2200      	movs	r2, #0
 800183e:	70da      	strb	r2, [r3, #3]
	Update.Page = 0;
 8001840:	4b0d      	ldr	r3, [pc, #52]	@ (8001878 <Display_Init+0x2a4>)
 8001842:	2200      	movs	r2, #0
 8001844:	709a      	strb	r2, [r3, #2]
	Update.Ready_DMA = TRUE;
 8001846:	4b0c      	ldr	r3, [pc, #48]	@ (8001878 <Display_Init+0x2a4>)
 8001848:	2201      	movs	r2, #1
 800184a:	705a      	strb	r2, [r3, #1]
	Update.Ready_To_Refresh = FALSE;
 800184c:	4b0a      	ldr	r3, [pc, #40]	@ (8001878 <Display_Init+0x2a4>)
 800184e:	2200      	movs	r2, #0
 8001850:	701a      	strb	r2, [r3, #0]

	Update.PageData[0] = 0xB0 + Update.Page;
 8001852:	4b09      	ldr	r3, [pc, #36]	@ (8001878 <Display_Init+0x2a4>)
 8001854:	789b      	ldrb	r3, [r3, #2]
 8001856:	3b50      	subs	r3, #80	@ 0x50
 8001858:	b2da      	uxtb	r2, r3
 800185a:	4b07      	ldr	r3, [pc, #28]	@ (8001878 <Display_Init+0x2a4>)
 800185c:	711a      	strb	r2, [r3, #4]
	Update.PageData[1] = 0x00; //< acá seleccionamos Lower start
 800185e:	4b06      	ldr	r3, [pc, #24]	@ (8001878 <Display_Init+0x2a4>)
 8001860:	2200      	movs	r2, #0
 8001862:	715a      	strb	r2, [r3, #5]
	Update.PageData[2] = 0x10; //< y acá upper start
 8001864:	4b04      	ldr	r3, [pc, #16]	@ (8001878 <Display_Init+0x2a4>)
 8001866:	2210      	movs	r2, #16
 8001868:	719a      	strb	r2, [r3, #6]

	/* Return OK */
	return status;
 800186a:	79fb      	ldrb	r3, [r7, #7]
}
 800186c:	4618      	mov	r0, r3
 800186e:	3708      	adds	r7, #8
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	200003ec 	.word	0x200003ec
 8001878:	200007fc 	.word	0x200007fc

0800187c <ssd1306_I2C_Write>:

e_system ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data){
 800187c:	b590      	push	{r4, r7, lr}
 800187e:	b085      	sub	sp, #20
 8001880:	af00      	add	r7, sp, #0
 8001882:	4603      	mov	r3, r0
 8001884:	71fb      	strb	r3, [r7, #7]
 8001886:	460b      	mov	r3, r1
 8001888:	71bb      	strb	r3, [r7, #6]
 800188a:	4613      	mov	r3, r2
 800188c:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800188e:	79bb      	ldrb	r3, [r7, #6]
 8001890:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001892:	797b      	ldrb	r3, [r7, #5]
 8001894:	737b      	strb	r3, [r7, #13]
	return I2C_Master_Transmit_Blocking(address, dt, 2, 10);
 8001896:	4b07      	ldr	r3, [pc, #28]	@ (80018b4 <ssd1306_I2C_Write+0x38>)
 8001898:	681c      	ldr	r4, [r3, #0]
 800189a:	79fb      	ldrb	r3, [r7, #7]
 800189c:	b298      	uxth	r0, r3
 800189e:	f107 010c 	add.w	r1, r7, #12
 80018a2:	230a      	movs	r3, #10
 80018a4:	2202      	movs	r2, #2
 80018a6:	47a0      	blx	r4
 80018a8:	4603      	mov	r3, r0
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3714      	adds	r7, #20
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd90      	pop	{r4, r7, pc}
 80018b2:	bf00      	nop
 80018b4:	200003f8 	.word	0x200003f8

080018b8 <Display_UpdateScreen_Task>:

e_system Display_UpdateScreen_Task() {
 80018b8:	b598      	push	{r3, r4, r7, lr}
 80018ba:	af00      	add	r7, sp, #0
	if(Update.Ready_To_Refresh && Update.Ready_DMA && SSD1306.Initialized){
 80018bc:	4b2d      	ldr	r3, [pc, #180]	@ (8001974 <Display_UpdateScreen_Task+0xbc>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d054      	beq.n	800196e <Display_UpdateScreen_Task+0xb6>
 80018c4:	4b2b      	ldr	r3, [pc, #172]	@ (8001974 <Display_UpdateScreen_Task+0xbc>)
 80018c6:	785b      	ldrb	r3, [r3, #1]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d050      	beq.n	800196e <Display_UpdateScreen_Task+0xb6>
 80018cc:	4b2a      	ldr	r3, [pc, #168]	@ (8001978 <Display_UpdateScreen_Task+0xc0>)
 80018ce:	795b      	ldrb	r3, [r3, #5]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d04c      	beq.n	800196e <Display_UpdateScreen_Task+0xb6>

		switch(Update.state){
 80018d4:	4b27      	ldr	r3, [pc, #156]	@ (8001974 <Display_UpdateScreen_Task+0xbc>)
 80018d6:	78db      	ldrb	r3, [r3, #3]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d002      	beq.n	80018e2 <Display_UpdateScreen_Task+0x2a>
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d01c      	beq.n	800191a <Display_UpdateScreen_Task+0x62>
 80018e0:	e038      	b.n	8001954 <Display_UpdateScreen_Task+0x9c>
		case PAGE:
			Update.PageData[0] = 0xB0 + Update.Page;     // Set Page
 80018e2:	4b24      	ldr	r3, [pc, #144]	@ (8001974 <Display_UpdateScreen_Task+0xbc>)
 80018e4:	789b      	ldrb	r3, [r3, #2]
 80018e6:	3b50      	subs	r3, #80	@ 0x50
 80018e8:	b2da      	uxtb	r2, r3
 80018ea:	4b22      	ldr	r3, [pc, #136]	@ (8001974 <Display_UpdateScreen_Task+0xbc>)
 80018ec:	711a      	strb	r2, [r3, #4]
			Update.PageData[1] = 0x00;                   // Lower Column
 80018ee:	4b21      	ldr	r3, [pc, #132]	@ (8001974 <Display_UpdateScreen_Task+0xbc>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	715a      	strb	r2, [r3, #5]
			Update.PageData[2] = 0x10;                   // Upper Column
 80018f4:	4b1f      	ldr	r3, [pc, #124]	@ (8001974 <Display_UpdateScreen_Task+0xbc>)
 80018f6:	2210      	movs	r2, #16
 80018f8:	719a      	strb	r2, [r3, #6]
			if(I2C_Master_Transmit(SSD1306_I2C_ADDR, 0x00, Update.PageData, 3)		== SYS_OK){
 80018fa:	4b20      	ldr	r3, [pc, #128]	@ (800197c <Display_UpdateScreen_Task+0xc4>)
 80018fc:	681c      	ldr	r4, [r3, #0]
 80018fe:	2303      	movs	r3, #3
 8001900:	4a1f      	ldr	r2, [pc, #124]	@ (8001980 <Display_UpdateScreen_Task+0xc8>)
 8001902:	2100      	movs	r1, #0
 8001904:	2078      	movs	r0, #120	@ 0x78
 8001906:	47a0      	blx	r4
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d103      	bne.n	8001916 <Display_UpdateScreen_Task+0x5e>
				Update.state = DATA;
 800190e:	4b19      	ldr	r3, [pc, #100]	@ (8001974 <Display_UpdateScreen_Task+0xbc>)
 8001910:	2201      	movs	r2, #1
 8001912:	70da      	strb	r2, [r3, #3]
				//Update.Ready_DMA = FALSE;     //< LO DESACTIVO PARA QUE PAGE Y DATA SE HAGA DE UNA SOLA PASADA
			}else{
				return SYS_ERROR;
			}
			break;
 8001914:	e021      	b.n	800195a <Display_UpdateScreen_Task+0xa2>
				return SYS_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e02a      	b.n	8001970 <Display_UpdateScreen_Task+0xb8>
		case DATA:
			if(I2C_Master_Transmit(	SSD1306_I2C_ADDR, 0x40,
 800191a:	4b18      	ldr	r3, [pc, #96]	@ (800197c <Display_UpdateScreen_Task+0xc4>)
 800191c:	681c      	ldr	r4, [r3, #0]
									&OLED_DMA_BUFFER[SSD1306_WIDTH * Update.Page],
 800191e:	4b15      	ldr	r3, [pc, #84]	@ (8001974 <Display_UpdateScreen_Task+0xbc>)
 8001920:	789b      	ldrb	r3, [r3, #2]
 8001922:	01db      	lsls	r3, r3, #7
			if(I2C_Master_Transmit(	SSD1306_I2C_ADDR, 0x40,
 8001924:	4a17      	ldr	r2, [pc, #92]	@ (8001984 <Display_UpdateScreen_Task+0xcc>)
 8001926:	441a      	add	r2, r3
 8001928:	2380      	movs	r3, #128	@ 0x80
 800192a:	2140      	movs	r1, #64	@ 0x40
 800192c:	2078      	movs	r0, #120	@ 0x78
 800192e:	47a0      	blx	r4
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d10c      	bne.n	8001950 <Display_UpdateScreen_Task+0x98>
									SSD1306_WIDTH) 									== SYS_OK){
				Update.Page++;
 8001936:	4b0f      	ldr	r3, [pc, #60]	@ (8001974 <Display_UpdateScreen_Task+0xbc>)
 8001938:	789b      	ldrb	r3, [r3, #2]
 800193a:	3301      	adds	r3, #1
 800193c:	b2da      	uxtb	r2, r3
 800193e:	4b0d      	ldr	r3, [pc, #52]	@ (8001974 <Display_UpdateScreen_Task+0xbc>)
 8001940:	709a      	strb	r2, [r3, #2]
				Update.state = PAGE;
 8001942:	4b0c      	ldr	r3, [pc, #48]	@ (8001974 <Display_UpdateScreen_Task+0xbc>)
 8001944:	2200      	movs	r2, #0
 8001946:	70da      	strb	r2, [r3, #3]
				Update.Ready_DMA = FALSE;
 8001948:	4b0a      	ldr	r3, [pc, #40]	@ (8001974 <Display_UpdateScreen_Task+0xbc>)
 800194a:	2200      	movs	r2, #0
 800194c:	705a      	strb	r2, [r3, #1]
			}else{
				return SYS_ERROR;
			}
			break;
 800194e:	e004      	b.n	800195a <Display_UpdateScreen_Task+0xa2>
				return SYS_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e00d      	b.n	8001970 <Display_UpdateScreen_Task+0xb8>
		default:
			Update.Page = 8; //!< fuerzo el if de abajo para reiniciar el sistema
 8001954:	4b07      	ldr	r3, [pc, #28]	@ (8001974 <Display_UpdateScreen_Task+0xbc>)
 8001956:	2208      	movs	r2, #8
 8001958:	709a      	strb	r2, [r3, #2]
		}
		if(Update.Page > 7){
 800195a:	4b06      	ldr	r3, [pc, #24]	@ (8001974 <Display_UpdateScreen_Task+0xbc>)
 800195c:	789b      	ldrb	r3, [r3, #2]
 800195e:	2b07      	cmp	r3, #7
 8001960:	d905      	bls.n	800196e <Display_UpdateScreen_Task+0xb6>
			Update.Page = 0;
 8001962:	4b04      	ldr	r3, [pc, #16]	@ (8001974 <Display_UpdateScreen_Task+0xbc>)
 8001964:	2200      	movs	r2, #0
 8001966:	709a      	strb	r2, [r3, #2]
			Update.Ready_To_Refresh = FALSE;
 8001968:	4b02      	ldr	r3, [pc, #8]	@ (8001974 <Display_UpdateScreen_Task+0xbc>)
 800196a:	2200      	movs	r2, #0
 800196c:	701a      	strb	r2, [r3, #0]
		}
	}

	return SYS_OK;
 800196e:	2300      	movs	r3, #0
}
 8001970:	4618      	mov	r0, r3
 8001972:	bd98      	pop	{r3, r4, r7, pc}
 8001974:	200007fc 	.word	0x200007fc
 8001978:	200003ec 	.word	0x200003ec
 800197c:	200003f4 	.word	0x200003f4
 8001980:	20000800 	.word	0x20000800
 8001984:	200003fc 	.word	0x200003fc

08001988 <Display_I2C_DMA_Ready>:

void Display_I2C_DMA_Ready(uint8_t val){
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	4603      	mov	r3, r0
 8001990:	71fb      	strb	r3, [r7, #7]
	Update.Ready_DMA = val;
 8001992:	4a04      	ldr	r2, [pc, #16]	@ (80019a4 <Display_I2C_DMA_Ready+0x1c>)
 8001994:	79fb      	ldrb	r3, [r7, #7]
 8001996:	7053      	strb	r3, [r2, #1]
}
 8001998:	bf00      	nop
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr
 80019a4:	200007fc 	.word	0x200007fc

080019a8 <Display_I2C_Refresh_Ready>:

void Display_I2C_Refresh_Ready(uint8_t val){
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	4603      	mov	r3, r0
 80019b0:	71fb      	strb	r3, [r7, #7]
	Update.Ready_To_Refresh = val;
 80019b2:	4a04      	ldr	r2, [pc, #16]	@ (80019c4 <Display_I2C_Refresh_Ready+0x1c>)
 80019b4:	79fb      	ldrb	r3, [r7, #7]
 80019b6:	7013      	strb	r3, [r2, #0]
}
 80019b8:	bf00      	nop
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr
 80019c4:	200007fc 	.word	0x200007fc

080019c8 <Display_SetCursor>:

/**
 * SET CURSOR POSITION
 */
void Display_SetCursor(uint8_t x, uint8_t y)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4603      	mov	r3, r0
 80019d0:	460a      	mov	r2, r1
 80019d2:	71fb      	strb	r3, [r7, #7]
 80019d4:	4613      	mov	r3, r2
 80019d6:	71bb      	strb	r3, [r7, #6]
	SSD1306.CurrentX = x;
 80019d8:	79fb      	ldrb	r3, [r7, #7]
 80019da:	b29a      	uxth	r2, r3
 80019dc:	4b05      	ldr	r3, [pc, #20]	@ (80019f4 <Display_SetCursor+0x2c>)
 80019de:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 80019e0:	79bb      	ldrb	r3, [r7, #6]
 80019e2:	b29a      	uxth	r2, r3
 80019e4:	4b03      	ldr	r3, [pc, #12]	@ (80019f4 <Display_SetCursor+0x2c>)
 80019e6:	805a      	strh	r2, [r3, #2]
}
 80019e8:	bf00      	nop
 80019ea:	370c      	adds	r7, #12
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr
 80019f4:	200003ec 	.word	0x200003ec

080019f8 <Display_Fill>:

void Display_Fill(SSD1306_COLOR_t color) {
 80019f8:	b480      	push	{r7}
 80019fa:	b085      	sub	sp, #20
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	4603      	mov	r3, r0
 8001a00:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	//memset(OLED_DMA_BUFFER, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, 1024);
	uint32_t i;

	for(i = 0; i < sizeof(OLED_DMA_BUFFER); i++)	// Fill screenbuffer with a constant value (color)
 8001a02:	2300      	movs	r3, #0
 8001a04:	60fb      	str	r3, [r7, #12]
 8001a06:	e00d      	b.n	8001a24 <Display_Fill+0x2c>
	{
		OLED_DMA_BUFFER[i] = (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF;
 8001a08:	79fb      	ldrb	r3, [r7, #7]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d101      	bne.n	8001a12 <Display_Fill+0x1a>
 8001a0e:	2100      	movs	r1, #0
 8001a10:	e000      	b.n	8001a14 <Display_Fill+0x1c>
 8001a12:	21ff      	movs	r1, #255	@ 0xff
 8001a14:	4a09      	ldr	r2, [pc, #36]	@ (8001a3c <Display_Fill+0x44>)
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	4413      	add	r3, r2
 8001a1a:	460a      	mov	r2, r1
 8001a1c:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < sizeof(OLED_DMA_BUFFER); i++)	// Fill screenbuffer with a constant value (color)
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	3301      	adds	r3, #1
 8001a22:	60fb      	str	r3, [r7, #12]
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a2a:	d3ed      	bcc.n	8001a08 <Display_Fill+0x10>
	}
}
 8001a2c:	bf00      	nop
 8001a2e:	bf00      	nop
 8001a30:	3714      	adds	r7, #20
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	200003fc 	.word	0x200003fc

08001a40 <Display_DrawPixel>:

void Display_Clear (void){
	Display_Fill (0);
}

void Display_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	4603      	mov	r3, r0
 8001a48:	80fb      	strh	r3, [r7, #6]
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	80bb      	strh	r3, [r7, #4]
 8001a4e:	4613      	mov	r3, r2
 8001a50:	70fb      	strb	r3, [r7, #3]
	if (
 8001a52:	88fb      	ldrh	r3, [r7, #6]
 8001a54:	2b7f      	cmp	r3, #127	@ 0x7f
 8001a56:	d848      	bhi.n	8001aea <Display_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001a58:	88bb      	ldrh	r3, [r7, #4]
 8001a5a:	2b3f      	cmp	r3, #63	@ 0x3f
 8001a5c:	d845      	bhi.n	8001aea <Display_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001a5e:	4b26      	ldr	r3, [pc, #152]	@ (8001af8 <Display_DrawPixel+0xb8>)
 8001a60:	791b      	ldrb	r3, [r3, #4]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d006      	beq.n	8001a74 <Display_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001a66:	78fb      	ldrb	r3, [r7, #3]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	bf0c      	ite	eq
 8001a6c:	2301      	moveq	r3, #1
 8001a6e:	2300      	movne	r3, #0
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001a74:	78fb      	ldrb	r3, [r7, #3]
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d11a      	bne.n	8001ab0 <Display_DrawPixel+0x70>
		OLED_DMA_BUFFER[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001a7a:	88fa      	ldrh	r2, [r7, #6]
 8001a7c:	88bb      	ldrh	r3, [r7, #4]
 8001a7e:	08db      	lsrs	r3, r3, #3
 8001a80:	b298      	uxth	r0, r3
 8001a82:	4603      	mov	r3, r0
 8001a84:	01db      	lsls	r3, r3, #7
 8001a86:	4413      	add	r3, r2
 8001a88:	4a1c      	ldr	r2, [pc, #112]	@ (8001afc <Display_DrawPixel+0xbc>)
 8001a8a:	5cd3      	ldrb	r3, [r2, r3]
 8001a8c:	b25a      	sxtb	r2, r3
 8001a8e:	88bb      	ldrh	r3, [r7, #4]
 8001a90:	f003 0307 	and.w	r3, r3, #7
 8001a94:	2101      	movs	r1, #1
 8001a96:	fa01 f303 	lsl.w	r3, r1, r3
 8001a9a:	b25b      	sxtb	r3, r3
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	b259      	sxtb	r1, r3
 8001aa0:	88fa      	ldrh	r2, [r7, #6]
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	01db      	lsls	r3, r3, #7
 8001aa6:	4413      	add	r3, r2
 8001aa8:	b2c9      	uxtb	r1, r1
 8001aaa:	4a14      	ldr	r2, [pc, #80]	@ (8001afc <Display_DrawPixel+0xbc>)
 8001aac:	54d1      	strb	r1, [r2, r3]
 8001aae:	e01d      	b.n	8001aec <Display_DrawPixel+0xac>
	} else {
		OLED_DMA_BUFFER[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001ab0:	88fa      	ldrh	r2, [r7, #6]
 8001ab2:	88bb      	ldrh	r3, [r7, #4]
 8001ab4:	08db      	lsrs	r3, r3, #3
 8001ab6:	b298      	uxth	r0, r3
 8001ab8:	4603      	mov	r3, r0
 8001aba:	01db      	lsls	r3, r3, #7
 8001abc:	4413      	add	r3, r2
 8001abe:	4a0f      	ldr	r2, [pc, #60]	@ (8001afc <Display_DrawPixel+0xbc>)
 8001ac0:	5cd3      	ldrb	r3, [r2, r3]
 8001ac2:	b25a      	sxtb	r2, r3
 8001ac4:	88bb      	ldrh	r3, [r7, #4]
 8001ac6:	f003 0307 	and.w	r3, r3, #7
 8001aca:	2101      	movs	r1, #1
 8001acc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad0:	b25b      	sxtb	r3, r3
 8001ad2:	43db      	mvns	r3, r3
 8001ad4:	b25b      	sxtb	r3, r3
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	b259      	sxtb	r1, r3
 8001ada:	88fa      	ldrh	r2, [r7, #6]
 8001adc:	4603      	mov	r3, r0
 8001ade:	01db      	lsls	r3, r3, #7
 8001ae0:	4413      	add	r3, r2
 8001ae2:	b2c9      	uxtb	r1, r1
 8001ae4:	4a05      	ldr	r2, [pc, #20]	@ (8001afc <Display_DrawPixel+0xbc>)
 8001ae6:	54d1      	strb	r1, [r2, r3]
 8001ae8:	e000      	b.n	8001aec <Display_DrawPixel+0xac>
		return;
 8001aea:	bf00      	nop
	}
}
 8001aec:	370c      	adds	r7, #12
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	200003ec 	.word	0x200003ec
 8001afc:	200003fc 	.word	0x200003fc

08001b00 <Display_DrawBitmap>:

void Display_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b086      	sub	sp, #24
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	60ba      	str	r2, [r7, #8]
 8001b08:	461a      	mov	r2, r3
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	81fb      	strh	r3, [r7, #14]
 8001b0e:	460b      	mov	r3, r1
 8001b10:	81bb      	strh	r3, [r7, #12]
 8001b12:	4613      	mov	r3, r2
 8001b14:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8001b16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b1a:	3307      	adds	r3, #7
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	da00      	bge.n	8001b22 <Display_DrawBitmap+0x22>
 8001b20:	3307      	adds	r3, #7
 8001b22:	10db      	asrs	r3, r3, #3
 8001b24:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 8001b26:	2300      	movs	r3, #0
 8001b28:	75fb      	strb	r3, [r7, #23]

    //memcpy(&OLED_DMA_BUFFER[OFFSET_DATA], bitmap, 1024);
	/*for(uint16_t i = 0; i<1024; i++){
		OLED_DMA_BUFFER[i] = bitmap[i];
	}*/
    for(int16_t j=0; j<h; j++, y++)
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	82bb      	strh	r3, [r7, #20]
 8001b2e:	e044      	b.n	8001bba <Display_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 8001b30:	2300      	movs	r3, #0
 8001b32:	827b      	strh	r3, [r7, #18]
 8001b34:	e02f      	b.n	8001b96 <Display_DrawBitmap+0x96>
        {
            if(i & 7)
 8001b36:	8a7b      	ldrh	r3, [r7, #18]
 8001b38:	f003 0307 	and.w	r3, r3, #7
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d003      	beq.n	8001b48 <Display_DrawBitmap+0x48>
            {
               byte <<= 1;
 8001b40:	7dfb      	ldrb	r3, [r7, #23]
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	75fb      	strb	r3, [r7, #23]
 8001b46:	e012      	b.n	8001b6e <Display_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8001b48:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001b4c:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001b50:	fb03 f202 	mul.w	r2, r3, r2
 8001b54:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	da00      	bge.n	8001b5e <Display_DrawBitmap+0x5e>
 8001b5c:	3307      	adds	r3, #7
 8001b5e:	10db      	asrs	r3, r3, #3
 8001b60:	b21b      	sxth	r3, r3
 8001b62:	4413      	add	r3, r2
 8001b64:	461a      	mov	r2, r3
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	4413      	add	r3, r2
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) Display_DrawPixel(x+i, y, color);
 8001b6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	da09      	bge.n	8001b8a <Display_DrawBitmap+0x8a>
 8001b76:	89fa      	ldrh	r2, [r7, #14]
 8001b78:	8a7b      	ldrh	r3, [r7, #18]
 8001b7a:	4413      	add	r3, r2
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	89b9      	ldrh	r1, [r7, #12]
 8001b80:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001b82:	b2d2      	uxtb	r2, r2
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff ff5b 	bl	8001a40 <Display_DrawPixel>
        for(int16_t i=0; i<w; i++)
 8001b8a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	3301      	adds	r3, #1
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	827b      	strh	r3, [r7, #18]
 8001b96:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001b9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	dbc9      	blt.n	8001b36 <Display_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 8001ba2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001ba6:	b29b      	uxth	r3, r3
 8001ba8:	3301      	adds	r3, #1
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	82bb      	strh	r3, [r7, #20]
 8001bae:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001bb2:	b29b      	uxth	r3, r3
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	b29b      	uxth	r3, r3
 8001bb8:	81bb      	strh	r3, [r7, #12]
 8001bba:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001bbe:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	dbb4      	blt.n	8001b30 <Display_DrawBitmap+0x30>
        }
    }
}
 8001bc6:	bf00      	nop
 8001bc8:	bf00      	nop
 8001bca:	3718      	adds	r7, #24
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <Display_WriteChar>:

/**
 * WRITE A CHAR INTO THE DISPLAY BUFFER
 */
char Display_WriteChar(char ch, FontDef_t Font, SSD1306_COLOR_t color)
{
 8001bd0:	b590      	push	{r4, r7, lr}
 8001bd2:	b089      	sub	sp, #36	@ 0x24
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	4604      	mov	r4, r0
 8001bd8:	1d38      	adds	r0, r7, #4
 8001bda:	e880 0006 	stmia.w	r0, {r1, r2}
 8001bde:	461a      	mov	r2, r3
 8001be0:	4623      	mov	r3, r4
 8001be2:	73fb      	strb	r3, [r7, #15]
 8001be4:	4613      	mov	r3, r2
 8001be6:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8001be8:	4b36      	ldr	r3, [pc, #216]	@ (8001cc4 <Display_WriteChar+0xf4>)
 8001bea:	881b      	ldrh	r3, [r3, #0]
 8001bec:	461a      	mov	r2, r3
 8001bee:	793b      	ldrb	r3, [r7, #4]
 8001bf0:	4413      	add	r3, r2
 8001bf2:	2b7f      	cmp	r3, #127	@ 0x7f
 8001bf4:	dc06      	bgt.n	8001c04 <Display_WriteChar+0x34>
    		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8001bf6:	4b33      	ldr	r3, [pc, #204]	@ (8001cc4 <Display_WriteChar+0xf4>)
 8001bf8:	885b      	ldrh	r3, [r3, #2]
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	797b      	ldrb	r3, [r7, #5]
 8001bfe:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8001c00:	2b3f      	cmp	r3, #63	@ 0x3f
 8001c02:	dd01      	ble.n	8001c08 <Display_WriteChar+0x38>
    {

        return 0;	// Not enough space on current line
 8001c04:	2300      	movs	r3, #0
 8001c06:	e058      	b.n	8001cba <Display_WriteChar+0xea>
    }

    for (i = 0; i < Font.FontHeight; i++)	// Translate font to screenbuffer
 8001c08:	2300      	movs	r3, #0
 8001c0a:	61fb      	str	r3, [r7, #28]
 8001c0c:	e048      	b.n	8001ca0 <Display_WriteChar+0xd0>
    {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001c0e:	68ba      	ldr	r2, [r7, #8]
 8001c10:	7bfb      	ldrb	r3, [r7, #15]
 8001c12:	3b20      	subs	r3, #32
 8001c14:	7979      	ldrb	r1, [r7, #5]
 8001c16:	fb01 f303 	mul.w	r3, r1, r3
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	440b      	add	r3, r1
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	4413      	add	r3, r2
 8001c24:	881b      	ldrh	r3, [r3, #0]
 8001c26:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++)
 8001c28:	2300      	movs	r3, #0
 8001c2a:	61bb      	str	r3, [r7, #24]
 8001c2c:	e030      	b.n	8001c90 <Display_WriteChar+0xc0>
        {
            if ((b << j) & 0x8000)
 8001c2e:	697a      	ldr	r2, [r7, #20]
 8001c30:	69bb      	ldr	r3, [r7, #24]
 8001c32:	fa02 f303 	lsl.w	r3, r2, r3
 8001c36:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d010      	beq.n	8001c60 <Display_WriteChar+0x90>
                Display_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001c3e:	4b21      	ldr	r3, [pc, #132]	@ (8001cc4 <Display_WriteChar+0xf4>)
 8001c40:	881a      	ldrh	r2, [r3, #0]
 8001c42:	69bb      	ldr	r3, [r7, #24]
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	4413      	add	r3, r2
 8001c48:	b298      	uxth	r0, r3
 8001c4a:	4b1e      	ldr	r3, [pc, #120]	@ (8001cc4 <Display_WriteChar+0xf4>)
 8001c4c:	885a      	ldrh	r2, [r3, #2]
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	4413      	add	r3, r2
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	7bba      	ldrb	r2, [r7, #14]
 8001c58:	4619      	mov	r1, r3
 8001c5a:	f7ff fef1 	bl	8001a40 <Display_DrawPixel>
 8001c5e:	e014      	b.n	8001c8a <Display_WriteChar+0xba>
            else
                Display_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001c60:	4b18      	ldr	r3, [pc, #96]	@ (8001cc4 <Display_WriteChar+0xf4>)
 8001c62:	881a      	ldrh	r2, [r3, #0]
 8001c64:	69bb      	ldr	r3, [r7, #24]
 8001c66:	b29b      	uxth	r3, r3
 8001c68:	4413      	add	r3, r2
 8001c6a:	b298      	uxth	r0, r3
 8001c6c:	4b15      	ldr	r3, [pc, #84]	@ (8001cc4 <Display_WriteChar+0xf4>)
 8001c6e:	885a      	ldrh	r2, [r3, #2]
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	b29b      	uxth	r3, r3
 8001c74:	4413      	add	r3, r2
 8001c76:	b299      	uxth	r1, r3
 8001c78:	7bbb      	ldrb	r3, [r7, #14]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	bf0c      	ite	eq
 8001c7e:	2301      	moveq	r3, #1
 8001c80:	2300      	movne	r3, #0
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	461a      	mov	r2, r3
 8001c86:	f7ff fedb 	bl	8001a40 <Display_DrawPixel>
        for (j = 0; j < Font.FontWidth; j++)
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	61bb      	str	r3, [r7, #24]
 8001c90:	793b      	ldrb	r3, [r7, #4]
 8001c92:	461a      	mov	r2, r3
 8001c94:	69bb      	ldr	r3, [r7, #24]
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d3c9      	bcc.n	8001c2e <Display_WriteChar+0x5e>
    for (i = 0; i < Font.FontHeight; i++)	// Translate font to screenbuffer
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	61fb      	str	r3, [r7, #28]
 8001ca0:	797b      	ldrb	r3, [r7, #5]
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d3b1      	bcc.n	8001c0e <Display_WriteChar+0x3e>
        }
    }
    SSD1306.CurrentX += Font.FontWidth;	// The current space is now taken
 8001caa:	4b06      	ldr	r3, [pc, #24]	@ (8001cc4 <Display_WriteChar+0xf4>)
 8001cac:	881b      	ldrh	r3, [r3, #0]
 8001cae:	793a      	ldrb	r2, [r7, #4]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	b29a      	uxth	r2, r3
 8001cb4:	4b03      	ldr	r3, [pc, #12]	@ (8001cc4 <Display_WriteChar+0xf4>)
 8001cb6:	801a      	strh	r2, [r3, #0]

    return ch;	// Return written char for validation
 8001cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3724      	adds	r7, #36	@ 0x24
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd90      	pop	{r4, r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	200003ec 	.word	0x200003ec

08001cc8 <Display_WriteString>:

/**
 * WRITE STRING INTO THE DISPLAY BUFFER
 */
char Display_WriteString(char* str, FontDef_t Font, SSD1306_COLOR_t color)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	60f8      	str	r0, [r7, #12]
 8001cd0:	1d38      	adds	r0, r7, #4
 8001cd2:	e880 0006 	stmia.w	r0, {r1, r2}
 8001cd6:	70fb      	strb	r3, [r7, #3]
    while (*str){
 8001cd8:	e012      	b.n	8001d00 <Display_WriteString+0x38>
        if (Display_WriteChar(*str, Font, color) != *str)	// Write until null-byte
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	7818      	ldrb	r0, [r3, #0]
 8001cde:	78fb      	ldrb	r3, [r7, #3]
 8001ce0:	1d3a      	adds	r2, r7, #4
 8001ce2:	ca06      	ldmia	r2, {r1, r2}
 8001ce4:	f7ff ff74 	bl	8001bd0 <Display_WriteChar>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	461a      	mov	r2, r3
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d002      	beq.n	8001cfa <Display_WriteString+0x32>
        	return *str;	// Char could not be written
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	e008      	b.n	8001d0c <Display_WriteString+0x44>

        str++;	// Next char
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	60fb      	str	r3, [r7, #12]
    while (*str){
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d1e8      	bne.n	8001cda <Display_WriteString+0x12>
    }
    return *str;	// Everything ok
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	781b      	ldrb	r3, [r3, #0]
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3710      	adds	r7, #16
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <Display_DrawLine>:

void Display_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 8001d14:	b590      	push	{r4, r7, lr}
 8001d16:	b085      	sub	sp, #20
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	4604      	mov	r4, r0
 8001d1c:	4608      	mov	r0, r1
 8001d1e:	4611      	mov	r1, r2
 8001d20:	461a      	mov	r2, r3
 8001d22:	4623      	mov	r3, r4
 8001d24:	80fb      	strh	r3, [r7, #6]
 8001d26:	4603      	mov	r3, r0
 8001d28:	80bb      	strh	r3, [r7, #4]
 8001d2a:	460b      	mov	r3, r1
 8001d2c:	807b      	strh	r3, [r7, #2]
 8001d2e:	4613      	mov	r3, r2
 8001d30:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, i, tmp;

	if(x0 != x1 && y0 != y1)
 8001d32:	88fa      	ldrh	r2, [r7, #6]
 8001d34:	887b      	ldrh	r3, [r7, #2]
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d004      	beq.n	8001d44 <Display_DrawLine+0x30>
 8001d3a:	88ba      	ldrh	r2, [r7, #4]
 8001d3c:	883b      	ldrh	r3, [r7, #0]
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	f040 8090 	bne.w	8001e64 <Display_DrawLine+0x150>
		return;

	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 8001d44:	88fb      	ldrh	r3, [r7, #6]
 8001d46:	2b7f      	cmp	r3, #127	@ 0x7f
 8001d48:	d901      	bls.n	8001d4e <Display_DrawLine+0x3a>
		x0 = SSD1306_WIDTH - 1;
 8001d4a:	237f      	movs	r3, #127	@ 0x7f
 8001d4c:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= SSD1306_WIDTH) {
 8001d4e:	887b      	ldrh	r3, [r7, #2]
 8001d50:	2b7f      	cmp	r3, #127	@ 0x7f
 8001d52:	d901      	bls.n	8001d58 <Display_DrawLine+0x44>
		x1 = SSD1306_WIDTH - 1;
 8001d54:	237f      	movs	r3, #127	@ 0x7f
 8001d56:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= SSD1306_HEIGHT) {
 8001d58:	88bb      	ldrh	r3, [r7, #4]
 8001d5a:	2b3f      	cmp	r3, #63	@ 0x3f
 8001d5c:	d901      	bls.n	8001d62 <Display_DrawLine+0x4e>
		y0 = SSD1306_HEIGHT - 1;
 8001d5e:	233f      	movs	r3, #63	@ 0x3f
 8001d60:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= SSD1306_HEIGHT) {
 8001d62:	883b      	ldrh	r3, [r7, #0]
 8001d64:	2b3f      	cmp	r3, #63	@ 0x3f
 8001d66:	d901      	bls.n	8001d6c <Display_DrawLine+0x58>
		y1 = SSD1306_HEIGHT - 1;
 8001d68:	233f      	movs	r3, #63	@ 0x3f
 8001d6a:	803b      	strh	r3, [r7, #0]
	}

	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1);
 8001d6c:	88fa      	ldrh	r2, [r7, #6]
 8001d6e:	887b      	ldrh	r3, [r7, #2]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d205      	bcs.n	8001d80 <Display_DrawLine+0x6c>
 8001d74:	887a      	ldrh	r2, [r7, #2]
 8001d76:	88fb      	ldrh	r3, [r7, #6]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	b21b      	sxth	r3, r3
 8001d7e:	e004      	b.n	8001d8a <Display_DrawLine+0x76>
 8001d80:	88fa      	ldrh	r2, [r7, #6]
 8001d82:	887b      	ldrh	r3, [r7, #2]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	b29b      	uxth	r3, r3
 8001d88:	b21b      	sxth	r3, r3
 8001d8a:	81bb      	strh	r3, [r7, #12]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1);
 8001d8c:	88ba      	ldrh	r2, [r7, #4]
 8001d8e:	883b      	ldrh	r3, [r7, #0]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d205      	bcs.n	8001da0 <Display_DrawLine+0x8c>
 8001d94:	883a      	ldrh	r2, [r7, #0]
 8001d96:	88bb      	ldrh	r3, [r7, #4]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	b21b      	sxth	r3, r3
 8001d9e:	e004      	b.n	8001daa <Display_DrawLine+0x96>
 8001da0:	88ba      	ldrh	r2, [r7, #4]
 8001da2:	883b      	ldrh	r3, [r7, #0]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	b21b      	sxth	r3, r3
 8001daa:	817b      	strh	r3, [r7, #10]

	if (dx == 0) {
 8001dac:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d129      	bne.n	8001e08 <Display_DrawLine+0xf4>
		if (y1 < y0) {
 8001db4:	883a      	ldrh	r2, [r7, #0]
 8001db6:	88bb      	ldrh	r3, [r7, #4]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d205      	bcs.n	8001dc8 <Display_DrawLine+0xb4>
			tmp = y1;
 8001dbc:	883b      	ldrh	r3, [r7, #0]
 8001dbe:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8001dc0:	88bb      	ldrh	r3, [r7, #4]
 8001dc2:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8001dc4:	893b      	ldrh	r3, [r7, #8]
 8001dc6:	80bb      	strh	r3, [r7, #4]
		}

		if (x1 < x0) {
 8001dc8:	887a      	ldrh	r2, [r7, #2]
 8001dca:	88fb      	ldrh	r3, [r7, #6]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d205      	bcs.n	8001ddc <Display_DrawLine+0xc8>
			tmp = x1;
 8001dd0:	887b      	ldrh	r3, [r7, #2]
 8001dd2:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8001dd4:	88fb      	ldrh	r3, [r7, #6]
 8001dd6:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8001dd8:	893b      	ldrh	r3, [r7, #8]
 8001dda:	80fb      	strh	r3, [r7, #6]
		}

		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 8001ddc:	88bb      	ldrh	r3, [r7, #4]
 8001dde:	81fb      	strh	r3, [r7, #14]
 8001de0:	e00c      	b.n	8001dfc <Display_DrawLine+0xe8>
			Display_DrawPixel(x0, i, c);
 8001de2:	89f9      	ldrh	r1, [r7, #14]
 8001de4:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001de8:	88fb      	ldrh	r3, [r7, #6]
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7ff fe28 	bl	8001a40 <Display_DrawPixel>
		for (i = y0; i <= y1; i++) {
 8001df0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001df4:	b29b      	uxth	r3, r3
 8001df6:	3301      	adds	r3, #1
 8001df8:	b29b      	uxth	r3, r3
 8001dfa:	81fb      	strh	r3, [r7, #14]
 8001dfc:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001e00:	883b      	ldrh	r3, [r7, #0]
 8001e02:	429a      	cmp	r2, r3
 8001e04:	dded      	ble.n	8001de2 <Display_DrawLine+0xce>
		}

		/* Return from function */
		return;
 8001e06:	e030      	b.n	8001e6a <Display_DrawLine+0x156>
	}

	if (dy == 0) {
 8001e08:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d12b      	bne.n	8001e68 <Display_DrawLine+0x154>
		if (y1 < y0) {
 8001e10:	883a      	ldrh	r2, [r7, #0]
 8001e12:	88bb      	ldrh	r3, [r7, #4]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d205      	bcs.n	8001e24 <Display_DrawLine+0x110>
			tmp = y1;
 8001e18:	883b      	ldrh	r3, [r7, #0]
 8001e1a:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8001e1c:	88bb      	ldrh	r3, [r7, #4]
 8001e1e:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8001e20:	893b      	ldrh	r3, [r7, #8]
 8001e22:	80bb      	strh	r3, [r7, #4]
		}

		if (x1 < x0) {
 8001e24:	887a      	ldrh	r2, [r7, #2]
 8001e26:	88fb      	ldrh	r3, [r7, #6]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d205      	bcs.n	8001e38 <Display_DrawLine+0x124>
			tmp = x1;
 8001e2c:	887b      	ldrh	r3, [r7, #2]
 8001e2e:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8001e30:	88fb      	ldrh	r3, [r7, #6]
 8001e32:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8001e34:	893b      	ldrh	r3, [r7, #8]
 8001e36:	80fb      	strh	r3, [r7, #6]
		}

		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 8001e38:	88fb      	ldrh	r3, [r7, #6]
 8001e3a:	81fb      	strh	r3, [r7, #14]
 8001e3c:	e00c      	b.n	8001e58 <Display_DrawLine+0x144>
			Display_DrawPixel(i, y0, c);
 8001e3e:	89fb      	ldrh	r3, [r7, #14]
 8001e40:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001e44:	88b9      	ldrh	r1, [r7, #4]
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7ff fdfa 	bl	8001a40 <Display_DrawPixel>
		for (i = x0; i <= x1; i++) {
 8001e4c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001e50:	b29b      	uxth	r3, r3
 8001e52:	3301      	adds	r3, #1
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	81fb      	strh	r3, [r7, #14]
 8001e58:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001e5c:	887b      	ldrh	r3, [r7, #2]
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	dded      	ble.n	8001e3e <Display_DrawLine+0x12a>
		}
	}
	return;
 8001e62:	e001      	b.n	8001e68 <Display_DrawLine+0x154>
		return;
 8001e64:	bf00      	nop
 8001e66:	e000      	b.n	8001e6a <Display_DrawLine+0x156>
	return;
 8001e68:	bf00      	nop
}
 8001e6a:	3714      	adds	r7, #20
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd90      	pop	{r4, r7, pc}

08001e70 <Display_DrawFilledRectangle>:
	Display_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
	Display_DrawLine(x, y, x, y + h, c);         /* Left line */
	Display_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
}

void Display_DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 8001e70:	b590      	push	{r4, r7, lr}
 8001e72:	b087      	sub	sp, #28
 8001e74:	af02      	add	r7, sp, #8
 8001e76:	4604      	mov	r4, r0
 8001e78:	4608      	mov	r0, r1
 8001e7a:	4611      	mov	r1, r2
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	4623      	mov	r3, r4
 8001e80:	80fb      	strh	r3, [r7, #6]
 8001e82:	4603      	mov	r3, r0
 8001e84:	80bb      	strh	r3, [r7, #4]
 8001e86:	460b      	mov	r3, r1
 8001e88:	807b      	strh	r3, [r7, #2]
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	803b      	strh	r3, [r7, #0]
	uint8_t i;

	/* Check input parameters */
	if (
 8001e8e:	88fb      	ldrh	r3, [r7, #6]
 8001e90:	2b7f      	cmp	r3, #127	@ 0x7f
 8001e92:	d836      	bhi.n	8001f02 <Display_DrawFilledRectangle+0x92>
		x >= SSD1306_WIDTH ||
 8001e94:	88bb      	ldrh	r3, [r7, #4]
 8001e96:	2b3f      	cmp	r3, #63	@ 0x3f
 8001e98:	d833      	bhi.n	8001f02 <Display_DrawFilledRectangle+0x92>
		/* Return error */
		return;
	}

	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 8001e9a:	88fa      	ldrh	r2, [r7, #6]
 8001e9c:	887b      	ldrh	r3, [r7, #2]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	2b7f      	cmp	r3, #127	@ 0x7f
 8001ea2:	dd03      	ble.n	8001eac <Display_DrawFilledRectangle+0x3c>
		w = SSD1306_WIDTH - x;
 8001ea4:	88fb      	ldrh	r3, [r7, #6]
 8001ea6:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8001eaa:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 8001eac:	88ba      	ldrh	r2, [r7, #4]
 8001eae:	883b      	ldrh	r3, [r7, #0]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	2b3f      	cmp	r3, #63	@ 0x3f
 8001eb4:	dd03      	ble.n	8001ebe <Display_DrawFilledRectangle+0x4e>
		h = SSD1306_HEIGHT - y;
 8001eb6:	88bb      	ldrh	r3, [r7, #4]
 8001eb8:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8001ebc:	803b      	strh	r3, [r7, #0]
	}

	/* Draw lines */
	for (i = 0; i <= h; i++) {
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	73fb      	strb	r3, [r7, #15]
 8001ec2:	e018      	b.n	8001ef6 <Display_DrawFilledRectangle+0x86>
		/* Draw lines */
		Display_DrawLine(x, y + i, x + w, y + i, c);
 8001ec4:	7bfb      	ldrb	r3, [r7, #15]
 8001ec6:	b29a      	uxth	r2, r3
 8001ec8:	88bb      	ldrh	r3, [r7, #4]
 8001eca:	4413      	add	r3, r2
 8001ecc:	b299      	uxth	r1, r3
 8001ece:	88fa      	ldrh	r2, [r7, #6]
 8001ed0:	887b      	ldrh	r3, [r7, #2]
 8001ed2:	4413      	add	r3, r2
 8001ed4:	b29c      	uxth	r4, r3
 8001ed6:	7bfb      	ldrb	r3, [r7, #15]
 8001ed8:	b29a      	uxth	r2, r3
 8001eda:	88bb      	ldrh	r3, [r7, #4]
 8001edc:	4413      	add	r3, r2
 8001ede:	b29a      	uxth	r2, r3
 8001ee0:	88f8      	ldrh	r0, [r7, #6]
 8001ee2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001ee6:	9300      	str	r3, [sp, #0]
 8001ee8:	4613      	mov	r3, r2
 8001eea:	4622      	mov	r2, r4
 8001eec:	f7ff ff12 	bl	8001d14 <Display_DrawLine>
	for (i = 0; i <= h; i++) {
 8001ef0:	7bfb      	ldrb	r3, [r7, #15]
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	73fb      	strb	r3, [r7, #15]
 8001ef6:	7bfb      	ldrb	r3, [r7, #15]
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	883a      	ldrh	r2, [r7, #0]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d2e1      	bcs.n	8001ec4 <Display_DrawFilledRectangle+0x54>
 8001f00:	e000      	b.n	8001f04 <Display_DrawFilledRectangle+0x94>
		return;
 8001f02:	bf00      	nop
	}
}
 8001f04:	3714      	adds	r7, #20
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd90      	pop	{r4, r7, pc}

08001f0a <Encoder_Init>:
 *      Author: Agustín Alejandro Mayer
 */

#include "Motors/encoder.h"

void Encoder_Init(s_encoder *enc, uint8_t reset){
 8001f0a:	b480      	push	{r7}
 8001f0c:	b083      	sub	sp, #12
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
 8001f12:	460b      	mov	r3, r1
 8001f14:	70fb      	strb	r3, [r7, #3]
	enc->pulses = 0;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	809a      	strh	r2, [r3, #4]
	enc->resetBase = reset;
 8001f1c:	78fb      	ldrb	r3, [r7, #3]
 8001f1e:	b29a      	uxth	r2, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	801a      	strh	r2, [r3, #0]
	enc->timeReset = reset;
 8001f24:	78fb      	ldrb	r3, [r7, #3]
 8001f26:	b29a      	uxth	r2, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	805a      	strh	r2, [r3, #2]
	enc->counter1s = 1000 / reset;
 8001f2c:	78fb      	ldrb	r3, [r7, #3]
 8001f2e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001f32:	fb92 f3f3 	sdiv	r3, r2, r3
 8001f36:	b2da      	uxtb	r2, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	729a      	strb	r2, [r3, #10]
}
 8001f3c:	bf00      	nop
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <Encoder_Task>:

void Encoder_Task(s_encoder *enc){
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
	enc->timeReset--;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	885b      	ldrh	r3, [r3, #2]
 8001f54:	3b01      	subs	r3, #1
 8001f56:	b29a      	uxth	r2, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	805a      	strh	r2, [r3, #2]
	if(!enc->timeReset){
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	885b      	ldrh	r3, [r3, #2]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d10e      	bne.n	8001f82 <Encoder_Task+0x3a>

		enc->fastPPS += enc->pulses;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	88da      	ldrh	r2, [r3, #6]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	889b      	ldrh	r3, [r3, #4]
 8001f6c:	4413      	add	r3, r2
 8001f6e:	b29a      	uxth	r2, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	80da      	strh	r2, [r3, #6]

		enc->timeReset = enc->resetBase;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	881a      	ldrh	r2, [r3, #0]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	805a      	strh	r2, [r3, #2]
		enc->pulses = 0;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	809a      	strh	r2, [r3, #4]
	}
	enc->counter1s--;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	7a9b      	ldrb	r3, [r3, #10]
 8001f86:	3b01      	subs	r3, #1
 8001f88:	b2da      	uxtb	r2, r3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	729a      	strb	r2, [r3, #10]
	if(!enc->counter1s){
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	7a9b      	ldrb	r3, [r3, #10]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d102      	bne.n	8001f9c <Encoder_Task+0x54>
		enc->pps = 0;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	811a      	strh	r2, [r3, #8]
	}
}
 8001f9c:	bf00      	nop
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr

08001fa8 <Encoder_Add_Pulse>:

void Encoder_Add_Pulse(s_encoder *enc){
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
	enc->pulses++;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	889b      	ldrh	r3, [r3, #4]
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	b29a      	uxth	r2, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	809a      	strh	r2, [r3, #4]
}
 8001fbc:	bf00      	nop
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <Encoder_1s_Elapsed>:

void Encoder_1s_Elapsed(s_encoder *enc){
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
	enc->pps = enc->fastPPS;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	88da      	ldrh	r2, [r3, #6]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	811a      	strh	r2, [r3, #8]
	enc->fastPPS=0;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	80da      	strh	r2, [r3, #6]
}
 8001fde:	bf00      	nop
 8001fe0:	370c      	adds	r7, #12
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
	...

08001fec <Motor_Init>:
 */
#include "Motors/motors.h"
#include <stddef.h>

void Motor_Init(s_motor *motor, void (*PWM_set)(uint16_t dCycle),
		void (*PIN_set)(uint8_t A, uint8_t B), uint16_t max_value){
 8001fec:	b480      	push	{r7}
 8001fee:	b085      	sub	sp, #20
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	60f8      	str	r0, [r7, #12]
 8001ff4:	60b9      	str	r1, [r7, #8]
 8001ff6:	607a      	str	r2, [r7, #4]
 8001ff8:	807b      	strh	r3, [r7, #2]

	motor->direction = NO_INIT;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	701a      	strb	r2, [r3, #0]
	motor->setPins = PIN_set;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	611a      	str	r2, [r3, #16]
	motor->setPWM = PWM_set;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	68ba      	ldr	r2, [r7, #8]
 800200a:	615a      	str	r2, [r3, #20]
	motor->maxValue = max_value / 100;
 800200c:	887b      	ldrh	r3, [r7, #2]
 800200e:	4a0a      	ldr	r2, [pc, #40]	@ (8002038 <Motor_Init+0x4c>)
 8002010:	fba2 2303 	umull	r2, r3, r2, r3
 8002014:	095b      	lsrs	r3, r3, #5
 8002016:	b29b      	uxth	r3, r3
 8002018:	461a      	mov	r2, r3
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	605a      	str	r2, [r3, #4]
	motor->vel = 0;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2200      	movs	r2, #0
 8002022:	609a      	str	r2, [r3, #8]
	motor->brakeTimeout = 0;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2200      	movs	r2, #0
 8002028:	819a      	strh	r2, [r3, #12]
}
 800202a:	bf00      	nop
 800202c:	3714      	adds	r7, #20
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	51eb851f 	.word	0x51eb851f

0800203c <Motor_Set_Speed>:

void Motor_Set_Speed(s_motor *motor, int8_t speed){
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	460b      	mov	r3, r1
 8002046:	70fb      	strb	r3, [r7, #3]
	if(motor->setPWM == NULL)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	695b      	ldr	r3, [r3, #20]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d04f      	beq.n	80020f0 <Motor_Set_Speed+0xb4>
		return;
	if(speed > 100)
 8002050:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002054:	2b64      	cmp	r3, #100	@ 0x64
 8002056:	dd01      	ble.n	800205c <Motor_Set_Speed+0x20>
		speed = 100;
 8002058:	2364      	movs	r3, #100	@ 0x64
 800205a:	70fb      	strb	r3, [r7, #3]
	if(speed < -100)
 800205c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002060:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 8002064:	da01      	bge.n	800206a <Motor_Set_Speed+0x2e>
		speed = -100;
 8002066:	239c      	movs	r3, #156	@ 0x9c
 8002068:	70fb      	strb	r3, [r7, #3]
	if(speed == motor->vel)
 800206a:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	429a      	cmp	r2, r3
 8002074:	d03e      	beq.n	80020f4 <Motor_Set_Speed+0xb8>
		return;

	motor->vel = speed * motor->maxValue;
 8002076:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	6852      	ldr	r2, [r2, #4]
 800207e:	fb02 f303 	mul.w	r3, r2, r3
 8002082:	461a      	mov	r2, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	609a      	str	r2, [r3, #8]

	if(speed > 0){
 8002088:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800208c:	2b00      	cmp	r3, #0
 800208e:	dd0e      	ble.n	80020ae <Motor_Set_Speed+0x72>
		motor->direction = FORWARD;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2202      	movs	r2, #2
 8002094:	701a      	strb	r2, [r3, #0]
		Motor_Set_Direction(motor, FORWARD);
 8002096:	2102      	movs	r1, #2
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f000 f82f 	bl	80020fc <Motor_Set_Direction>
		motor->setPWM((uint16_t)motor->vel);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	695b      	ldr	r3, [r3, #20]
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	6892      	ldr	r2, [r2, #8]
 80020a6:	b292      	uxth	r2, r2
 80020a8:	4610      	mov	r0, r2
 80020aa:	4798      	blx	r3
 80020ac:	e023      	b.n	80020f6 <Motor_Set_Speed+0xba>
	}else if(speed < 0){
 80020ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	da10      	bge.n	80020d8 <Motor_Set_Speed+0x9c>
		motor->direction = BACKWARD;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2203      	movs	r2, #3
 80020ba:	701a      	strb	r2, [r3, #0]
		Motor_Set_Direction(motor, BACKWARD);
 80020bc:	2103      	movs	r1, #3
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f000 f81c 	bl	80020fc <Motor_Set_Direction>
		motor->setPWM((uint16_t)(motor->vel * -1));
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	695b      	ldr	r3, [r3, #20]
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	6892      	ldr	r2, [r2, #8]
 80020cc:	b292      	uxth	r2, r2
 80020ce:	4252      	negs	r2, r2
 80020d0:	b292      	uxth	r2, r2
 80020d2:	4610      	mov	r0, r2
 80020d4:	4798      	blx	r3
 80020d6:	e00e      	b.n	80020f6 <Motor_Set_Speed+0xba>
	}else{
		motor->direction = FREE_WHEEL;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2201      	movs	r2, #1
 80020dc:	701a      	strb	r2, [r3, #0]
		Motor_Set_Direction(motor, FREE_WHEEL);
 80020de:	2101      	movs	r1, #1
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f000 f80b 	bl	80020fc <Motor_Set_Direction>
		motor->setPWM(0);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	695b      	ldr	r3, [r3, #20]
 80020ea:	2000      	movs	r0, #0
 80020ec:	4798      	blx	r3
 80020ee:	e002      	b.n	80020f6 <Motor_Set_Speed+0xba>
		return;
 80020f0:	bf00      	nop
 80020f2:	e000      	b.n	80020f6 <Motor_Set_Speed+0xba>
		return;
 80020f4:	bf00      	nop
	}
}
 80020f6:	3708      	adds	r7, #8
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}

080020fc <Motor_Set_Direction>:

void Motor_Set_Direction(s_motor *motor, e_direction direction){
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	460b      	mov	r3, r1
 8002106:	70fb      	strb	r3, [r7, #3]
	if(motor->setPins == NULL)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	691b      	ldr	r3, [r3, #16]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d027      	beq.n	8002160 <Motor_Set_Direction+0x64>
		return;
	switch(direction){
 8002110:	78fb      	ldrb	r3, [r7, #3]
 8002112:	2b04      	cmp	r3, #4
 8002114:	d825      	bhi.n	8002162 <Motor_Set_Direction+0x66>
 8002116:	a201      	add	r2, pc, #4	@ (adr r2, 800211c <Motor_Set_Direction+0x20>)
 8002118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800211c:	08002163 	.word	0x08002163
 8002120:	08002131 	.word	0x08002131
 8002124:	0800213d 	.word	0x0800213d
 8002128:	08002149 	.word	0x08002149
 800212c:	08002155 	.word	0x08002155
		case NO_INIT:
			break;
		case FREE_WHEEL:
			motor->setPins(0, 0);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	691b      	ldr	r3, [r3, #16]
 8002134:	2100      	movs	r1, #0
 8002136:	2000      	movs	r0, #0
 8002138:	4798      	blx	r3
			break;
 800213a:	e012      	b.n	8002162 <Motor_Set_Direction+0x66>
		case FORWARD:
			motor->setPins(1, 0);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	691b      	ldr	r3, [r3, #16]
 8002140:	2100      	movs	r1, #0
 8002142:	2001      	movs	r0, #1
 8002144:	4798      	blx	r3
			break;
 8002146:	e00c      	b.n	8002162 <Motor_Set_Direction+0x66>
		case BACKWARD:
			motor->setPins(0, 1);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	691b      	ldr	r3, [r3, #16]
 800214c:	2101      	movs	r1, #1
 800214e:	2000      	movs	r0, #0
 8002150:	4798      	blx	r3
			break;
 8002152:	e006      	b.n	8002162 <Motor_Set_Direction+0x66>
		case BRAKE:
			motor->setPins(1, 1);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	691b      	ldr	r3, [r3, #16]
 8002158:	2101      	movs	r1, #1
 800215a:	2001      	movs	r0, #1
 800215c:	4798      	blx	r3
			break;
 800215e:	e000      	b.n	8002162 <Motor_Set_Direction+0x66>
		return;
 8002160:	bf00      	nop
	}
}
 8002162:	3708      	adds	r7, #8
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}

08002168 <Motor_Break_Timeout>:
	motor->direction = BRAKE;
	Motor_Set_Direction(motor, BRAKE);

}

void Motor_Break_Timeout(s_motor *motor){
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
	if(motor->direction == BRAKE){
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	2b04      	cmp	r3, #4
 8002176:	d10c      	bne.n	8002192 <Motor_Break_Timeout+0x2a>
		motor->brakeTimeout--;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	899b      	ldrh	r3, [r3, #12]
 800217c:	3b01      	subs	r3, #1
 800217e:	b29a      	uxth	r2, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	819a      	strh	r2, [r3, #12]
		if(!motor->brakeTimeout)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	899b      	ldrh	r3, [r3, #12]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d102      	bne.n	8002192 <Motor_Break_Timeout+0x2a>
			motor->direction = FREE_WHEEL;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2201      	movs	r2, #1
 8002190:	701a      	strb	r2, [r3, #0]
	}
}
 8002192:	bf00      	nop
 8002194:	370c      	adds	r7, #12
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
	...

080021a0 <Motor_Set_MaxValue>:

void Motor_Set_MaxValue(s_motor *motor, uint32_t value){
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	6039      	str	r1, [r7, #0]
	motor->maxValue = value / 100;
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	4a05      	ldr	r2, [pc, #20]	@ (80021c4 <Motor_Set_MaxValue+0x24>)
 80021ae:	fba2 2303 	umull	r2, r3, r2, r3
 80021b2:	095a      	lsrs	r2, r3, #5
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	605a      	str	r2, [r3, #4]
}
 80021b8:	bf00      	nop
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr
 80021c4:	51eb851f 	.word	0x51eb851f

080021c8 <Comm_Init>:
static uint8_t TxAuxBuffer[30];
static uint8_t indexStart;
static uint8_t indexStartValue;
static uint8_t checksum;

void Comm_Init(s_commData* comm, void (*dataD)(s_commData *comm), void (*dataW)(s_commData *comm)){
 80021c8:	b480      	push	{r7}
 80021ca:	b085      	sub	sp, #20
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	60f8      	str	r0, [r7, #12]
 80021d0:	60b9      	str	r1, [r7, #8]
 80021d2:	607a      	str	r2, [r7, #4]
	comm->dataDecoder = dataD;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	68ba      	ldr	r2, [r7, #8]
 80021d8:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
	comm->dataWriter = dataW;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
	comm->timeOut = 0;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2200      	movs	r2, #0
 80021e8:	701a      	strb	r2, [r3, #0]
	comm->indexStart = 0;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2200      	movs	r2, #0
 80021ee:	705a      	strb	r2, [r3, #1]
	comm->checksumRx = 0;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2200      	movs	r2, #0
 80021f4:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
	comm->Tx.write=0;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2200      	movs	r2, #0
 80021fc:	70da      	strb	r2, [r3, #3]
	comm->Tx.read=0;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2200      	movs	r2, #0
 8002202:	709a      	strb	r2, [r3, #2]
	comm->Rx.write=0;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2200      	movs	r2, #0
 8002208:	f883 2105 	strb.w	r2, [r3, #261]	@ 0x105
	comm->Rx.read=0;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2200      	movs	r2, #0
 8002210:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
	comm->isESP01 = 0;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2200      	movs	r2, #0
 8002218:	f883 222f 	strb.w	r2, [r3, #559]	@ 0x22f
	comm->protocolState = START;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2200      	movs	r2, #0
 8002220:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
}
 8002224:	bf00      	nop
 8002226:	3714      	adds	r7, #20
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr

08002230 <Comm_Task>:

void Comm_Task(s_commData* comm){
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
	if(comm->Rx.read != comm->Rx.write){
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f893 2104 	ldrb.w	r2, [r3, #260]	@ 0x104
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 8002244:	429a      	cmp	r2, r3
 8002246:	d002      	beq.n	800224e <Comm_Task+0x1e>
		decodeProtocol(comm);
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f000 f815 	bl	8002278 <decodeProtocol>
	}
	if (comm->Tx.read != comm->Tx.write) {
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	789a      	ldrb	r2, [r3, #2]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	78db      	ldrb	r3, [r3, #3]
 8002256:	429a      	cmp	r2, r3
 8002258:	d009      	beq.n	800226e <Comm_Task+0x3e>
		if(comm->dataWriter != NULL)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8002260:	2b00      	cmp	r3, #0
 8002262:	d004      	beq.n	800226e <Comm_Task+0x3e>
			comm->dataWriter(comm);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	4798      	blx	r3
	}
}
 800226e:	bf00      	nop
 8002270:	3708      	adds	r7, #8
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
	...

08002278 <decodeProtocol>:

void decodeProtocol(s_commData *datosCom){
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
	static uint8_t nBytes=0;
	uint8_t indexWriteRxCopy = datosCom->Rx.write;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 8002286:	73fb      	strb	r3, [r7, #15]

	while (datosCom->Rx.read != indexWriteRxCopy){
 8002288:	e11b      	b.n	80024c2 <decodeProtocol+0x24a>
		switch(datosCom->protocolState){
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	f893 322e 	ldrb.w	r3, [r3, #558]	@ 0x22e
 8002290:	2b06      	cmp	r3, #6
 8002292:	f200 810e 	bhi.w	80024b2 <decodeProtocol+0x23a>
 8002296:	a201      	add	r2, pc, #4	@ (adr r2, 800229c <decodeProtocol+0x24>)
 8002298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800229c:	080022b9 	.word	0x080022b9
 80022a0:	080022eb 	.word	0x080022eb
 80022a4:	0800232d 	.word	0x0800232d
 80022a8:	0800236f 	.word	0x0800236f
 80022ac:	080023b1 	.word	0x080023b1
 80022b0:	080023e3 	.word	0x080023e3
 80022b4:	08002435 	.word	0x08002435
		case START:
			if (datosCom->Rx.buffer[datosCom->Rx.read++] == 'U'){
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 80022be:	1c5a      	adds	r2, r3, #1
 80022c0:	b2d1      	uxtb	r1, r2
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	f882 1104 	strb.w	r1, [r2, #260]	@ 0x104
 80022c8:	461a      	mov	r2, r3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4413      	add	r3, r2
 80022ce:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 80022d2:	2b55      	cmp	r3, #85	@ 0x55
 80022d4:	f040 80f2 	bne.w	80024bc <decodeProtocol+0x244>
				datosCom->protocolState = HEADER_1;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2201      	movs	r2, #1
 80022dc:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
				datosCom->checksumRx = 0;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2200      	movs	r2, #0
 80022e4:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
			}
			break;
 80022e8:	e0e8      	b.n	80024bc <decodeProtocol+0x244>
		case HEADER_1:
			if (datosCom->Rx.buffer[datosCom->Rx.read++] == 'N')
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 80022f0:	1c5a      	adds	r2, r3, #1
 80022f2:	b2d1      	uxtb	r1, r2
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	f882 1104 	strb.w	r1, [r2, #260]	@ 0x104
 80022fa:	461a      	mov	r2, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	4413      	add	r3, r2
 8002300:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8002304:	2b4e      	cmp	r3, #78	@ 0x4e
 8002306:	d104      	bne.n	8002312 <decodeProtocol+0x9a>
				datosCom->protocolState = HEADER_2;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2202      	movs	r2, #2
 800230c:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			else{
				datosCom->Rx.read--;
				datosCom->protocolState = START;
			}
			break;
 8002310:	e0d7      	b.n	80024c2 <decodeProtocol+0x24a>
				datosCom->Rx.read--;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8002318:	3b01      	subs	r3, #1
 800231a:	b2da      	uxtb	r2, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
				datosCom->protocolState = START;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			break;
 800232a:	e0ca      	b.n	80024c2 <decodeProtocol+0x24a>
		case HEADER_2:
			if (datosCom->Rx.buffer[datosCom->Rx.read++] == 'E')
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8002332:	1c5a      	adds	r2, r3, #1
 8002334:	b2d1      	uxtb	r1, r2
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	f882 1104 	strb.w	r1, [r2, #260]	@ 0x104
 800233c:	461a      	mov	r2, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4413      	add	r3, r2
 8002342:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8002346:	2b45      	cmp	r3, #69	@ 0x45
 8002348:	d104      	bne.n	8002354 <decodeProtocol+0xdc>
				datosCom->protocolState = HEADER_3;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2203      	movs	r2, #3
 800234e:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			else{
				datosCom->Rx.read--;
				datosCom->protocolState = START;
			}
			break;
 8002352:	e0b6      	b.n	80024c2 <decodeProtocol+0x24a>
				datosCom->Rx.read--;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800235a:	3b01      	subs	r3, #1
 800235c:	b2da      	uxtb	r2, r3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
				datosCom->protocolState = START;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			break;
 800236c:	e0a9      	b.n	80024c2 <decodeProtocol+0x24a>
		case HEADER_3:
			if (datosCom->Rx.buffer[datosCom->Rx.read++] == 'R')
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8002374:	1c5a      	adds	r2, r3, #1
 8002376:	b2d1      	uxtb	r1, r2
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	f882 1104 	strb.w	r1, [r2, #260]	@ 0x104
 800237e:	461a      	mov	r2, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	4413      	add	r3, r2
 8002384:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8002388:	2b52      	cmp	r3, #82	@ 0x52
 800238a:	d104      	bne.n	8002396 <decodeProtocol+0x11e>
				datosCom->protocolState = NBYTES;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2204      	movs	r2, #4
 8002390:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			else{
				datosCom->Rx.read--;
				datosCom->protocolState = START;
			}
			break;
 8002394:	e095      	b.n	80024c2 <decodeProtocol+0x24a>
				datosCom->Rx.read--;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800239c:	3b01      	subs	r3, #1
 800239e:	b2da      	uxtb	r2, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
				datosCom->protocolState = START;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2200      	movs	r2, #0
 80023aa:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			break;
 80023ae:	e088      	b.n	80024c2 <decodeProtocol+0x24a>
		case NBYTES:
			datosCom->indexStart = datosCom->Rx.read;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f893 2104 	ldrb.w	r2, [r3, #260]	@ 0x104
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	705a      	strb	r2, [r3, #1]
			nBytes = datosCom->Rx.buffer[datosCom->Rx.read++];
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 80023c0:	1c5a      	adds	r2, r3, #1
 80023c2:	b2d1      	uxtb	r1, r2
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	f882 1104 	strb.w	r1, [r2, #260]	@ 0x104
 80023ca:	461a      	mov	r2, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	4413      	add	r3, r2
 80023d0:	f893 2106 	ldrb.w	r2, [r3, #262]	@ 0x106
 80023d4:	4b41      	ldr	r3, [pc, #260]	@ (80024dc <decodeProtocol+0x264>)
 80023d6:	701a      	strb	r2, [r3, #0]
			datosCom->protocolState = TOKEN;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2205      	movs	r2, #5
 80023dc:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			break;
 80023e0:	e06f      	b.n	80024c2 <decodeProtocol+0x24a>
		case TOKEN:
			if (datosCom->Rx.buffer[datosCom->Rx.read++] == ':'){
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 80023e8:	1c5a      	adds	r2, r3, #1
 80023ea:	b2d1      	uxtb	r1, r2
 80023ec:	687a      	ldr	r2, [r7, #4]
 80023ee:	f882 1104 	strb.w	r1, [r2, #260]	@ 0x104
 80023f2:	461a      	mov	r2, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	4413      	add	r3, r2
 80023f8:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 80023fc:	2b3a      	cmp	r3, #58	@ 0x3a
 80023fe:	d10c      	bne.n	800241a <decodeProtocol+0x1a2>
				datosCom->protocolState = PAYLOAD;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2206      	movs	r2, #6
 8002404:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
				datosCom->checksumRx ='U' ^ 'N' ^ 'E' ^ 'R' ^ nBytes ^ ':';
 8002408:	4b34      	ldr	r3, [pc, #208]	@ (80024dc <decodeProtocol+0x264>)
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	f083 0336 	eor.w	r3, r3, #54	@ 0x36
 8002410:	b2da      	uxtb	r2, r3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
			}
			else{
				datosCom->Rx.read--;
				datosCom->protocolState = START;
			}
			break;
 8002418:	e053      	b.n	80024c2 <decodeProtocol+0x24a>
				datosCom->Rx.read--;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8002420:	3b01      	subs	r3, #1
 8002422:	b2da      	uxtb	r2, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
				datosCom->protocolState = START;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			break;
 8002432:	e046      	b.n	80024c2 <decodeProtocol+0x24a>
		case PAYLOAD:
			if (nBytes > 1){
 8002434:	4b29      	ldr	r3, [pc, #164]	@ (80024dc <decodeProtocol+0x264>)
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	2b01      	cmp	r3, #1
 800243a:	d914      	bls.n	8002466 <decodeProtocol+0x1ee>
				datosCom->checksumRx ^= datosCom->Rx.buffer[datosCom->Rx.read++];
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8002442:	1c5a      	adds	r2, r3, #1
 8002444:	b2d1      	uxtb	r1, r2
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	f882 1104 	strb.w	r1, [r2, #260]	@ 0x104
 800244c:	461a      	mov	r2, r3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4413      	add	r3, r2
 8002452:	f893 2106 	ldrb.w	r2, [r3, #262]	@ 0x106
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 800245c:	4053      	eors	r3, r2
 800245e:	b2da      	uxtb	r2, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
			}
			nBytes--;
 8002466:	4b1d      	ldr	r3, [pc, #116]	@ (80024dc <decodeProtocol+0x264>)
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	3b01      	subs	r3, #1
 800246c:	b2da      	uxtb	r2, r3
 800246e:	4b1b      	ldr	r3, [pc, #108]	@ (80024dc <decodeProtocol+0x264>)
 8002470:	701a      	strb	r2, [r3, #0]
			if(nBytes<=0){
 8002472:	4b1a      	ldr	r3, [pc, #104]	@ (80024dc <decodeProtocol+0x264>)
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d122      	bne.n	80024c0 <decodeProtocol+0x248>
				datosCom->protocolState = START;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
				if(datosCom->checksumRx == datosCom->Rx.buffer[datosCom->Rx.read]){
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f893 2206 	ldrb.w	r2, [r3, #518]	@ 0x206
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800248e:	4619      	mov	r1, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	440b      	add	r3, r1
 8002494:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8002498:	429a      	cmp	r2, r3
 800249a:	d111      	bne.n	80024c0 <decodeProtocol+0x248>
					if(datosCom->dataDecoder != NULL)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d00c      	beq.n	80024c0 <decodeProtocol+0x248>
						datosCom->dataDecoder(datosCom);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	4798      	blx	r3
				}
			}
			break;
 80024b0:	e006      	b.n	80024c0 <decodeProtocol+0x248>
		default:
			datosCom->protocolState = START;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			break;
 80024ba:	e002      	b.n	80024c2 <decodeProtocol+0x24a>
			break;
 80024bc:	bf00      	nop
 80024be:	e000      	b.n	80024c2 <decodeProtocol+0x24a>
			break;
 80024c0:	bf00      	nop
	while (datosCom->Rx.read != indexWriteRxCopy){
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 80024c8:	7bfa      	ldrb	r2, [r7, #15]
 80024ca:	429a      	cmp	r2, r3
 80024cc:	f47f aedd 	bne.w	800228a <decodeProtocol+0x12>
		}
	}
}
 80024d0:	bf00      	nop
 80024d2:	bf00      	nop
 80024d4:	3710      	adds	r7, #16
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	20000829 	.word	0x20000829

080024e0 <comm_sendCMD>:

void comm_sendCMD(s_commData *datosCom, _eID cmd, uint8_t *str, uint8_t len){
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	607a      	str	r2, [r7, #4]
 80024ea:	461a      	mov	r2, r3
 80024ec:	460b      	mov	r3, r1
 80024ee:	72fb      	strb	r3, [r7, #11]
 80024f0:	4613      	mov	r3, r2
 80024f2:	72bb      	strb	r3, [r7, #10]
    i = 0;
 80024f4:	4b62      	ldr	r3, [pc, #392]	@ (8002680 <comm_sendCMD+0x1a0>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	701a      	strb	r2, [r3, #0]
    auxIndex = 0;
 80024fa:	4b62      	ldr	r3, [pc, #392]	@ (8002684 <comm_sendCMD+0x1a4>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	701a      	strb	r2, [r3, #0]

    // Cabecera
    TxAuxBuffer[auxIndex++] = 'U'; // Start
 8002500:	4b60      	ldr	r3, [pc, #384]	@ (8002684 <comm_sendCMD+0x1a4>)
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	1c5a      	adds	r2, r3, #1
 8002506:	b2d1      	uxtb	r1, r2
 8002508:	4a5e      	ldr	r2, [pc, #376]	@ (8002684 <comm_sendCMD+0x1a4>)
 800250a:	7011      	strb	r1, [r2, #0]
 800250c:	461a      	mov	r2, r3
 800250e:	4b5e      	ldr	r3, [pc, #376]	@ (8002688 <comm_sendCMD+0x1a8>)
 8002510:	2155      	movs	r1, #85	@ 0x55
 8002512:	5499      	strb	r1, [r3, r2]
    TxAuxBuffer[auxIndex++] = 'N'; // Header 1
 8002514:	4b5b      	ldr	r3, [pc, #364]	@ (8002684 <comm_sendCMD+0x1a4>)
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	1c5a      	adds	r2, r3, #1
 800251a:	b2d1      	uxtb	r1, r2
 800251c:	4a59      	ldr	r2, [pc, #356]	@ (8002684 <comm_sendCMD+0x1a4>)
 800251e:	7011      	strb	r1, [r2, #0]
 8002520:	461a      	mov	r2, r3
 8002522:	4b59      	ldr	r3, [pc, #356]	@ (8002688 <comm_sendCMD+0x1a8>)
 8002524:	214e      	movs	r1, #78	@ 0x4e
 8002526:	5499      	strb	r1, [r3, r2]
    TxAuxBuffer[auxIndex++] = 'E'; // Header 2
 8002528:	4b56      	ldr	r3, [pc, #344]	@ (8002684 <comm_sendCMD+0x1a4>)
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	1c5a      	adds	r2, r3, #1
 800252e:	b2d1      	uxtb	r1, r2
 8002530:	4a54      	ldr	r2, [pc, #336]	@ (8002684 <comm_sendCMD+0x1a4>)
 8002532:	7011      	strb	r1, [r2, #0]
 8002534:	461a      	mov	r2, r3
 8002536:	4b54      	ldr	r3, [pc, #336]	@ (8002688 <comm_sendCMD+0x1a8>)
 8002538:	2145      	movs	r1, #69	@ 0x45
 800253a:	5499      	strb	r1, [r3, r2]
    TxAuxBuffer[auxIndex++] = 'R'; // Header 3
 800253c:	4b51      	ldr	r3, [pc, #324]	@ (8002684 <comm_sendCMD+0x1a4>)
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	1c5a      	adds	r2, r3, #1
 8002542:	b2d1      	uxtb	r1, r2
 8002544:	4a4f      	ldr	r2, [pc, #316]	@ (8002684 <comm_sendCMD+0x1a4>)
 8002546:	7011      	strb	r1, [r2, #0]
 8002548:	461a      	mov	r2, r3
 800254a:	4b4f      	ldr	r3, [pc, #316]	@ (8002688 <comm_sendCMD+0x1a8>)
 800254c:	2152      	movs	r1, #82	@ 0x52
 800254e:	5499      	strb	r1, [r3, r2]

    indexStart = auxIndex; // Se guarda la posición del primer dato del mensaje (cmd)
 8002550:	4b4c      	ldr	r3, [pc, #304]	@ (8002684 <comm_sendCMD+0x1a4>)
 8002552:	781a      	ldrb	r2, [r3, #0]
 8002554:	4b4d      	ldr	r3, [pc, #308]	@ (800268c <comm_sendCMD+0x1ac>)
 8002556:	701a      	strb	r2, [r3, #0]
    TxAuxBuffer[auxIndex++] = 0;   // Placeholder del indexStart, se sobrescribirá después
 8002558:	4b4a      	ldr	r3, [pc, #296]	@ (8002684 <comm_sendCMD+0x1a4>)
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	1c5a      	adds	r2, r3, #1
 800255e:	b2d1      	uxtb	r1, r2
 8002560:	4a48      	ldr	r2, [pc, #288]	@ (8002684 <comm_sendCMD+0x1a4>)
 8002562:	7011      	strb	r1, [r2, #0]
 8002564:	461a      	mov	r2, r3
 8002566:	4b48      	ldr	r3, [pc, #288]	@ (8002688 <comm_sendCMD+0x1a8>)
 8002568:	2100      	movs	r1, #0
 800256a:	5499      	strb	r1, [r3, r2]

    TxAuxBuffer[auxIndex++] = ':'; // Token
 800256c:	4b45      	ldr	r3, [pc, #276]	@ (8002684 <comm_sendCMD+0x1a4>)
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	1c5a      	adds	r2, r3, #1
 8002572:	b2d1      	uxtb	r1, r2
 8002574:	4a43      	ldr	r2, [pc, #268]	@ (8002684 <comm_sendCMD+0x1a4>)
 8002576:	7011      	strb	r1, [r2, #0]
 8002578:	461a      	mov	r2, r3
 800257a:	4b43      	ldr	r3, [pc, #268]	@ (8002688 <comm_sendCMD+0x1a8>)
 800257c:	213a      	movs	r1, #58	@ 0x3a
 800257e:	5499      	strb	r1, [r3, r2]
    TxAuxBuffer[auxIndex++] = cmd; // Comando
 8002580:	4b40      	ldr	r3, [pc, #256]	@ (8002684 <comm_sendCMD+0x1a4>)
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	1c5a      	adds	r2, r3, #1
 8002586:	b2d1      	uxtb	r1, r2
 8002588:	4a3e      	ldr	r2, [pc, #248]	@ (8002684 <comm_sendCMD+0x1a4>)
 800258a:	7011      	strb	r1, [r2, #0]
 800258c:	4619      	mov	r1, r3
 800258e:	4a3e      	ldr	r2, [pc, #248]	@ (8002688 <comm_sendCMD+0x1a8>)
 8002590:	7afb      	ldrb	r3, [r7, #11]
 8002592:	5453      	strb	r3, [r2, r1]

    if(cmd == USERTEXT || cmd == SYSERROR)
 8002594:	7afb      	ldrb	r3, [r7, #11]
 8002596:	2bb1      	cmp	r3, #177	@ 0xb1
 8002598:	d002      	beq.n	80025a0 <comm_sendCMD+0xc0>
 800259a:	7afb      	ldrb	r3, [r7, #11]
 800259c:	2bee      	cmp	r3, #238	@ 0xee
 800259e:	d109      	bne.n	80025b4 <comm_sendCMD+0xd4>
    	TxAuxBuffer[auxIndex++] = len;
 80025a0:	4b38      	ldr	r3, [pc, #224]	@ (8002684 <comm_sendCMD+0x1a4>)
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	1c5a      	adds	r2, r3, #1
 80025a6:	b2d1      	uxtb	r1, r2
 80025a8:	4a36      	ldr	r2, [pc, #216]	@ (8002684 <comm_sendCMD+0x1a4>)
 80025aa:	7011      	strb	r1, [r2, #0]
 80025ac:	4619      	mov	r1, r3
 80025ae:	4a36      	ldr	r2, [pc, #216]	@ (8002688 <comm_sendCMD+0x1a8>)
 80025b0:	7abb      	ldrb	r3, [r7, #10]
 80025b2:	5453      	strb	r3, [r2, r1]

    // Copia de datos si hay
    if (str != NULL && len > 0) {
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d013      	beq.n	80025e2 <comm_sendCMD+0x102>
 80025ba:	7abb      	ldrb	r3, [r7, #10]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d010      	beq.n	80025e2 <comm_sendCMD+0x102>
        memcpy(&TxAuxBuffer[auxIndex], str, len);
 80025c0:	4b30      	ldr	r3, [pc, #192]	@ (8002684 <comm_sendCMD+0x1a4>)
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	461a      	mov	r2, r3
 80025c6:	4b30      	ldr	r3, [pc, #192]	@ (8002688 <comm_sendCMD+0x1a8>)
 80025c8:	4413      	add	r3, r2
 80025ca:	7aba      	ldrb	r2, [r7, #10]
 80025cc:	6879      	ldr	r1, [r7, #4]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f010 fa4a 	bl	8012a68 <memcpy>
        auxIndex += len;
 80025d4:	4b2b      	ldr	r3, [pc, #172]	@ (8002684 <comm_sendCMD+0x1a4>)
 80025d6:	781a      	ldrb	r2, [r3, #0]
 80025d8:	7abb      	ldrb	r3, [r7, #10]
 80025da:	4413      	add	r3, r2
 80025dc:	b2da      	uxtb	r2, r3
 80025de:	4b29      	ldr	r3, [pc, #164]	@ (8002684 <comm_sendCMD+0x1a4>)
 80025e0:	701a      	strb	r2, [r3, #0]
    }

    indexStartValue = auxIndex - indexStart - 1; // Cantidad de datos desde cmd hasta checksum
 80025e2:	4b28      	ldr	r3, [pc, #160]	@ (8002684 <comm_sendCMD+0x1a4>)
 80025e4:	781a      	ldrb	r2, [r3, #0]
 80025e6:	4b29      	ldr	r3, [pc, #164]	@ (800268c <comm_sendCMD+0x1ac>)
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	3b01      	subs	r3, #1
 80025f0:	b2da      	uxtb	r2, r3
 80025f2:	4b27      	ldr	r3, [pc, #156]	@ (8002690 <comm_sendCMD+0x1b0>)
 80025f4:	701a      	strb	r2, [r3, #0]
    TxAuxBuffer[indexStart] = indexStartValue;
 80025f6:	4b25      	ldr	r3, [pc, #148]	@ (800268c <comm_sendCMD+0x1ac>)
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	461a      	mov	r2, r3
 80025fc:	4b24      	ldr	r3, [pc, #144]	@ (8002690 <comm_sendCMD+0x1b0>)
 80025fe:	7819      	ldrb	r1, [r3, #0]
 8002600:	4b21      	ldr	r3, [pc, #132]	@ (8002688 <comm_sendCMD+0x1a8>)
 8002602:	5499      	strb	r1, [r3, r2]

    // Checksum
    checksum = 0;
 8002604:	4b23      	ldr	r3, [pc, #140]	@ (8002694 <comm_sendCMD+0x1b4>)
 8002606:	2200      	movs	r2, #0
 8002608:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < auxIndex; i++) {
 800260a:	4b1d      	ldr	r3, [pc, #116]	@ (8002680 <comm_sendCMD+0x1a0>)
 800260c:	2200      	movs	r2, #0
 800260e:	701a      	strb	r2, [r3, #0]
 8002610:	e01f      	b.n	8002652 <comm_sendCMD+0x172>
        checksum ^= TxAuxBuffer[i];
 8002612:	4b1b      	ldr	r3, [pc, #108]	@ (8002680 <comm_sendCMD+0x1a0>)
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	461a      	mov	r2, r3
 8002618:	4b1b      	ldr	r3, [pc, #108]	@ (8002688 <comm_sendCMD+0x1a8>)
 800261a:	5c9a      	ldrb	r2, [r3, r2]
 800261c:	4b1d      	ldr	r3, [pc, #116]	@ (8002694 <comm_sendCMD+0x1b4>)
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	4053      	eors	r3, r2
 8002622:	b2da      	uxtb	r2, r3
 8002624:	4b1b      	ldr	r3, [pc, #108]	@ (8002694 <comm_sendCMD+0x1b4>)
 8002626:	701a      	strb	r2, [r3, #0]
        datosCom->Tx.buffer[datosCom->Tx.write++] = TxAuxBuffer[i];
 8002628:	4b15      	ldr	r3, [pc, #84]	@ (8002680 <comm_sendCMD+0x1a0>)
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	4618      	mov	r0, r3
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	78db      	ldrb	r3, [r3, #3]
 8002632:	1c5a      	adds	r2, r3, #1
 8002634:	b2d1      	uxtb	r1, r2
 8002636:	68fa      	ldr	r2, [r7, #12]
 8002638:	70d1      	strb	r1, [r2, #3]
 800263a:	4619      	mov	r1, r3
 800263c:	4b12      	ldr	r3, [pc, #72]	@ (8002688 <comm_sendCMD+0x1a8>)
 800263e:	5c1a      	ldrb	r2, [r3, r0]
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	440b      	add	r3, r1
 8002644:	711a      	strb	r2, [r3, #4]
    for (i = 0; i < auxIndex; i++) {
 8002646:	4b0e      	ldr	r3, [pc, #56]	@ (8002680 <comm_sendCMD+0x1a0>)
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	3301      	adds	r3, #1
 800264c:	b2da      	uxtb	r2, r3
 800264e:	4b0c      	ldr	r3, [pc, #48]	@ (8002680 <comm_sendCMD+0x1a0>)
 8002650:	701a      	strb	r2, [r3, #0]
 8002652:	4b0b      	ldr	r3, [pc, #44]	@ (8002680 <comm_sendCMD+0x1a0>)
 8002654:	781a      	ldrb	r2, [r3, #0]
 8002656:	4b0b      	ldr	r3, [pc, #44]	@ (8002684 <comm_sendCMD+0x1a4>)
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	429a      	cmp	r2, r3
 800265c:	d3d9      	bcc.n	8002612 <comm_sendCMD+0x132>
    }

    datosCom->Tx.buffer[datosCom->Tx.write++] = checksum;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	78db      	ldrb	r3, [r3, #3]
 8002662:	1c5a      	adds	r2, r3, #1
 8002664:	b2d1      	uxtb	r1, r2
 8002666:	68fa      	ldr	r2, [r7, #12]
 8002668:	70d1      	strb	r1, [r2, #3]
 800266a:	4619      	mov	r1, r3
 800266c:	4b09      	ldr	r3, [pc, #36]	@ (8002694 <comm_sendCMD+0x1b4>)
 800266e:	781a      	ldrb	r2, [r3, #0]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	440b      	add	r3, r1
 8002674:	711a      	strb	r2, [r3, #4]
}
 8002676:	bf00      	nop
 8002678:	3710      	adds	r7, #16
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	20000806 	.word	0x20000806
 8002684:	20000807 	.word	0x20000807
 8002688:	20000808 	.word	0x20000808
 800268c:	20000826 	.word	0x20000826
 8002690:	20000827 	.word	0x20000827
 8002694:	20000828 	.word	0x20000828

08002698 <ESP01_SetWIFI>:
//const char CIFSRAPMAC[] = "+CIFSR:APMAC\r";
//const char CIFSRSTAIP[] = "+CIFSR:STAIP\r";
//const char CIFSRSTAMAC[] = "+CIFSR:STAMAC\r";


void ESP01_SetWIFI(const char *ssid, const char *password){
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	6039      	str	r1, [r7, #0]
	esp01ATSate = ESP01ATIDLE;
 80026a2:	4b12      	ldr	r3, [pc, #72]	@ (80026ec <ESP01_SetWIFI+0x54>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	701a      	strb	r2, [r3, #0]
	esp01Flags.byte = 0;
 80026a8:	4b11      	ldr	r3, [pc, #68]	@ (80026f0 <ESP01_SetWIFI+0x58>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	701a      	strb	r2, [r3, #0]

	strncpy(esp01SSID, ssid, 64);
 80026ae:	2240      	movs	r2, #64	@ 0x40
 80026b0:	6879      	ldr	r1, [r7, #4]
 80026b2:	4810      	ldr	r0, [pc, #64]	@ (80026f4 <ESP01_SetWIFI+0x5c>)
 80026b4:	f010 f998 	bl	80129e8 <strncpy>
	esp01SSID[63] = '\0';
 80026b8:	4b0e      	ldr	r3, [pc, #56]	@ (80026f4 <ESP01_SetWIFI+0x5c>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
	strncpy(esp01PASSWORD, password, 32);
 80026c0:	2220      	movs	r2, #32
 80026c2:	6839      	ldr	r1, [r7, #0]
 80026c4:	480c      	ldr	r0, [pc, #48]	@ (80026f8 <ESP01_SetWIFI+0x60>)
 80026c6:	f010 f98f 	bl	80129e8 <strncpy>
	esp01PASSWORD[31] = '\0';
 80026ca:	4b0b      	ldr	r3, [pc, #44]	@ (80026f8 <ESP01_SetWIFI+0x60>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	77da      	strb	r2, [r3, #31]

	esp01TimeoutTask = 50;
 80026d0:	4b0a      	ldr	r3, [pc, #40]	@ (80026fc <ESP01_SetWIFI+0x64>)
 80026d2:	2232      	movs	r2, #50	@ 0x32
 80026d4:	601a      	str	r2, [r3, #0]
	esp01ATSate = ESP01ATHARDRST0;
 80026d6:	4b05      	ldr	r3, [pc, #20]	@ (80026ec <ESP01_SetWIFI+0x54>)
 80026d8:	2217      	movs	r2, #23
 80026da:	701a      	strb	r2, [r3, #0]

	esp01TriesAT = 0;
 80026dc:	4b08      	ldr	r3, [pc, #32]	@ (8002700 <ESP01_SetWIFI+0x68>)
 80026de:	2200      	movs	r2, #0
 80026e0:	701a      	strb	r2, [r3, #0]

}
 80026e2:	bf00      	nop
 80026e4:	3708      	adds	r7, #8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	2000082a 	.word	0x2000082a
 80026f0:	2000082c 	.word	0x2000082c
 80026f4:	20000844 	.word	0x20000844
 80026f8:	20000884 	.word	0x20000884
 80026fc:	20000830 	.word	0x20000830
 8002700:	20000a60 	.word	0x20000a60

08002704 <ESP01_StartUDP>:


_eESP01STATUS ESP01_StartUDP(const char *RemoteIP, uint16_t RemotePORT, uint16_t LocalPORT){
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	460b      	mov	r3, r1
 800270e:	807b      	strh	r3, [r7, #2]
 8002710:	4613      	mov	r3, r2
 8002712:	803b      	strh	r3, [r7, #0]
	if(esp01Handle.WriteUSARTByte == NULL)
 8002714:	4b1d      	ldr	r3, [pc, #116]	@ (800278c <ESP01_StartUDP+0x88>)
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d102      	bne.n	8002722 <ESP01_StartUDP+0x1e>
		return ESP01_NOT_INIT;
 800271c:	f04f 33ff 	mov.w	r3, #4294967295
 8002720:	e02f      	b.n	8002782 <ESP01_StartUDP+0x7e>

	if(LocalPORT == 0)
 8002722:	883b      	ldrh	r3, [r7, #0]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d102      	bne.n	800272e <ESP01_StartUDP+0x2a>
		LocalPORT = 30000;
 8002728:	f247 5330 	movw	r3, #30000	@ 0x7530
 800272c:	803b      	strh	r3, [r7, #0]

	strcpy(esp01PROTO, "UDP");
 800272e:	4b18      	ldr	r3, [pc, #96]	@ (8002790 <ESP01_StartUDP+0x8c>)
 8002730:	4a18      	ldr	r2, [pc, #96]	@ (8002794 <ESP01_StartUDP+0x90>)
 8002732:	601a      	str	r2, [r3, #0]

	strncpy(esp01RemoteIP, RemoteIP, 15);
 8002734:	220f      	movs	r2, #15
 8002736:	6879      	ldr	r1, [r7, #4]
 8002738:	4817      	ldr	r0, [pc, #92]	@ (8002798 <ESP01_StartUDP+0x94>)
 800273a:	f010 f955 	bl	80129e8 <strncpy>
	esp01RemoteIP[15] = '\0';
 800273e:	4b16      	ldr	r3, [pc, #88]	@ (8002798 <ESP01_StartUDP+0x94>)
 8002740:	2200      	movs	r2, #0
 8002742:	73da      	strb	r2, [r3, #15]

	itoa(RemotePORT, esp01RemotePORT, 10);
 8002744:	887b      	ldrh	r3, [r7, #2]
 8002746:	220a      	movs	r2, #10
 8002748:	4914      	ldr	r1, [pc, #80]	@ (800279c <ESP01_StartUDP+0x98>)
 800274a:	4618      	mov	r0, r3
 800274c:	f010 f8de 	bl	801290c <itoa>
	itoa(LocalPORT, esp01LocalPORT, 10);
 8002750:	883b      	ldrh	r3, [r7, #0]
 8002752:	220a      	movs	r2, #10
 8002754:	4912      	ldr	r1, [pc, #72]	@ (80027a0 <ESP01_StartUDP+0x9c>)
 8002756:	4618      	mov	r0, r3
 8002758:	f010 f8d8 	bl	801290c <itoa>

	if(esp01SSID[0] == '\0')
 800275c:	4b11      	ldr	r3, [pc, #68]	@ (80027a4 <ESP01_StartUDP+0xa0>)
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d101      	bne.n	8002768 <ESP01_StartUDP+0x64>
		return ESP01_WIFI_NOT_SETED;
 8002764:	2301      	movs	r3, #1
 8002766:	e00c      	b.n	8002782 <ESP01_StartUDP+0x7e>

	if(esp01Flags.bit.WIFICONNECTED == 0)
 8002768:	4b0f      	ldr	r3, [pc, #60]	@ (80027a8 <ESP01_StartUDP+0xa4>)
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	f003 0302 	and.w	r3, r3, #2
 8002770:	b2db      	uxtb	r3, r3
 8002772:	2b00      	cmp	r3, #0
 8002774:	d101      	bne.n	800277a <ESP01_StartUDP+0x76>
		return ESP01_WIFI_DISCONNECTED;
 8002776:	2300      	movs	r3, #0
 8002778:	e003      	b.n	8002782 <ESP01_StartUDP+0x7e>

	esp01ATSate = ESP01ATCIPCLOSE;
 800277a:	4b0c      	ldr	r3, [pc, #48]	@ (80027ac <ESP01_StartUDP+0xa8>)
 800277c:	220a      	movs	r2, #10
 800277e:	701a      	strb	r2, [r3, #0]

	return ESP01_UDPTCP_CONNECTING;
 8002780:	2306      	movs	r3, #6
}
 8002782:	4618      	mov	r0, r3
 8002784:	3708      	adds	r7, #8
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	20000a64 	.word	0x20000a64
 8002790:	20000008 	.word	0x20000008
 8002794:	00504455 	.word	0x00504455
 8002798:	200008a4 	.word	0x200008a4
 800279c:	200008b4 	.word	0x200008b4
 80027a0:	200008cc 	.word	0x200008cc
 80027a4:	20000844 	.word	0x20000844
 80027a8:	2000082c 	.word	0x2000082c
 80027ac:	2000082a 	.word	0x2000082a

080027b0 <ESP01_WriteRX>:
	else
		return ESP01_UDPTCP_DISCONNECTED;
}


void ESP01_WriteRX(uint8_t value){
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	4603      	mov	r3, r0
 80027b8:	71fb      	strb	r3, [r7, #7]
//	if(esp01Handle.bufRX == NULL)
//		return;
	esp01RXATBuf[esp01iwRXAT++] = value;
 80027ba:	4b0b      	ldr	r3, [pc, #44]	@ (80027e8 <ESP01_WriteRX+0x38>)
 80027bc:	881b      	ldrh	r3, [r3, #0]
 80027be:	1c5a      	adds	r2, r3, #1
 80027c0:	b291      	uxth	r1, r2
 80027c2:	4a09      	ldr	r2, [pc, #36]	@ (80027e8 <ESP01_WriteRX+0x38>)
 80027c4:	8011      	strh	r1, [r2, #0]
 80027c6:	4619      	mov	r1, r3
 80027c8:	4a08      	ldr	r2, [pc, #32]	@ (80027ec <ESP01_WriteRX+0x3c>)
 80027ca:	79fb      	ldrb	r3, [r7, #7]
 80027cc:	5453      	strb	r3, [r2, r1]
	if(esp01iwRXAT == ESP01RXBUFAT)
 80027ce:	4b06      	ldr	r3, [pc, #24]	@ (80027e8 <ESP01_WriteRX+0x38>)
 80027d0:	881b      	ldrh	r3, [r3, #0]
 80027d2:	2b80      	cmp	r3, #128	@ 0x80
 80027d4:	d102      	bne.n	80027dc <ESP01_WriteRX+0x2c>
		esp01iwRXAT = 0;
 80027d6:	4b04      	ldr	r3, [pc, #16]	@ (80027e8 <ESP01_WriteRX+0x38>)
 80027d8:	2200      	movs	r2, #0
 80027da:	801a      	strh	r2, [r3, #0]
}
 80027dc:	bf00      	nop
 80027de:	370c      	adds	r7, #12
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr
 80027e8:	20000a58 	.word	0x20000a58
 80027ec:	200008d8 	.word	0x200008d8

080027f0 <ESP01_Send>:

_eESP01STATUS ESP01_Send(uint8_t *buf, uint16_t irRingBuf, uint16_t length, uint16_t sizeRingBuf){
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b088      	sub	sp, #32
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	60f8      	str	r0, [r7, #12]
 80027f8:	4608      	mov	r0, r1
 80027fa:	4611      	mov	r1, r2
 80027fc:	461a      	mov	r2, r3
 80027fe:	4603      	mov	r3, r0
 8002800:	817b      	strh	r3, [r7, #10]
 8002802:	460b      	mov	r3, r1
 8002804:	813b      	strh	r3, [r7, #8]
 8002806:	4613      	mov	r3, r2
 8002808:	80fb      	strh	r3, [r7, #6]
	if(esp01Handle.WriteUSARTByte == NULL)
 800280a:	4b46      	ldr	r3, [pc, #280]	@ (8002924 <ESP01_Send+0x134>)
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d102      	bne.n	8002818 <ESP01_Send+0x28>
		return ESP01_NOT_INIT;
 8002812:	f04f 33ff 	mov.w	r3, #4294967295
 8002816:	e081      	b.n	800291c <ESP01_Send+0x12c>

	if(esp01Flags.bit.UDPTCPCONNECTED == 0)
 8002818:	4b43      	ldr	r3, [pc, #268]	@ (8002928 <ESP01_Send+0x138>)
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002820:	b2db      	uxtb	r3, r3
 8002822:	2b00      	cmp	r3, #0
 8002824:	d101      	bne.n	800282a <ESP01_Send+0x3a>
		return ESP01_UDPTCP_DISCONNECTED;
 8002826:	2305      	movs	r3, #5
 8002828:	e078      	b.n	800291c <ESP01_Send+0x12c>

	if(esp01Flags.bit.SENDINGDATA == 0){
 800282a:	4b3f      	ldr	r3, [pc, #252]	@ (8002928 <ESP01_Send+0x138>)
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	f003 0308 	and.w	r3, r3, #8
 8002832:	b2db      	uxtb	r3, r3
 8002834:	2b00      	cmp	r3, #0
 8002836:	d168      	bne.n	800290a <ESP01_Send+0x11a>
		char strInt[10];
		uint8_t l = 0;
 8002838:	2300      	movs	r3, #0
 800283a:	777b      	strb	r3, [r7, #29]

		itoa(length, strInt, 10);
 800283c:	893b      	ldrh	r3, [r7, #8]
 800283e:	f107 0110 	add.w	r1, r7, #16
 8002842:	220a      	movs	r2, #10
 8002844:	4618      	mov	r0, r3
 8002846:	f010 f861 	bl	801290c <itoa>
		l = strlen(strInt);
 800284a:	f107 0310 	add.w	r3, r7, #16
 800284e:	4618      	mov	r0, r3
 8002850:	f7fd fcc6 	bl	80001e0 <strlen>
 8002854:	4603      	mov	r3, r0
 8002856:	777b      	strb	r3, [r7, #29]
		if(l>4 || l==0)
 8002858:	7f7b      	ldrb	r3, [r7, #29]
 800285a:	2b04      	cmp	r3, #4
 800285c:	d802      	bhi.n	8002864 <ESP01_Send+0x74>
 800285e:	7f7b      	ldrb	r3, [r7, #29]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d101      	bne.n	8002868 <ESP01_Send+0x78>
			return ESP01_SEND_ERROR;
 8002864:	230b      	movs	r3, #11
 8002866:	e059      	b.n	800291c <ESP01_Send+0x12c>
		ESP01StrToBufTX(ATCIPSEND);
 8002868:	4830      	ldr	r0, [pc, #192]	@ (800292c <ESP01_Send+0x13c>)
 800286a:	f001 f8fb 	bl	8003a64 <ESP01StrToBufTX>
		ESP01StrToBufTX(strInt);
 800286e:	f107 0310 	add.w	r3, r7, #16
 8002872:	4618      	mov	r0, r3
 8002874:	f001 f8f6 	bl	8003a64 <ESP01StrToBufTX>
		ESP01StrToBufTX("\r>");
 8002878:	482d      	ldr	r0, [pc, #180]	@ (8002930 <ESP01_Send+0x140>)
 800287a:	f001 f8f3 	bl	8003a64 <ESP01StrToBufTX>
		for(uint16_t i=0; i<length; i++){
 800287e:	2300      	movs	r3, #0
 8002880:	83fb      	strh	r3, [r7, #30]
 8002882:	e020      	b.n	80028c6 <ESP01_Send+0xd6>
			esp01TXATBuf[esp01iwTX++] = buf[irRingBuf++];
 8002884:	897b      	ldrh	r3, [r7, #10]
 8002886:	1c5a      	adds	r2, r3, #1
 8002888:	817a      	strh	r2, [r7, #10]
 800288a:	461a      	mov	r2, r3
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	441a      	add	r2, r3
 8002890:	4b28      	ldr	r3, [pc, #160]	@ (8002934 <ESP01_Send+0x144>)
 8002892:	881b      	ldrh	r3, [r3, #0]
 8002894:	1c59      	adds	r1, r3, #1
 8002896:	b288      	uxth	r0, r1
 8002898:	4926      	ldr	r1, [pc, #152]	@ (8002934 <ESP01_Send+0x144>)
 800289a:	8008      	strh	r0, [r1, #0]
 800289c:	4619      	mov	r1, r3
 800289e:	7812      	ldrb	r2, [r2, #0]
 80028a0:	4b25      	ldr	r3, [pc, #148]	@ (8002938 <ESP01_Send+0x148>)
 80028a2:	545a      	strb	r2, [r3, r1]
			if(esp01iwTX == ESP01TXBUFAT)
 80028a4:	4b23      	ldr	r3, [pc, #140]	@ (8002934 <ESP01_Send+0x144>)
 80028a6:	881b      	ldrh	r3, [r3, #0]
 80028a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80028ac:	d102      	bne.n	80028b4 <ESP01_Send+0xc4>
				esp01iwTX = 0;
 80028ae:	4b21      	ldr	r3, [pc, #132]	@ (8002934 <ESP01_Send+0x144>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	801a      	strh	r2, [r3, #0]
			if(irRingBuf == sizeRingBuf)
 80028b4:	897a      	ldrh	r2, [r7, #10]
 80028b6:	88fb      	ldrh	r3, [r7, #6]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d101      	bne.n	80028c0 <ESP01_Send+0xd0>
				irRingBuf = 0;
 80028bc:	2300      	movs	r3, #0
 80028be:	817b      	strh	r3, [r7, #10]
		for(uint16_t i=0; i<length; i++){
 80028c0:	8bfb      	ldrh	r3, [r7, #30]
 80028c2:	3301      	adds	r3, #1
 80028c4:	83fb      	strh	r3, [r7, #30]
 80028c6:	8bfa      	ldrh	r2, [r7, #30]
 80028c8:	893b      	ldrh	r3, [r7, #8]
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d3da      	bcc.n	8002884 <ESP01_Send+0x94>
		}
		esp01Flags.bit.TXCIPSEND = 1;
 80028ce:	4a16      	ldr	r2, [pc, #88]	@ (8002928 <ESP01_Send+0x138>)
 80028d0:	7813      	ldrb	r3, [r2, #0]
 80028d2:	f043 0304 	orr.w	r3, r3, #4
 80028d6:	7013      	strb	r3, [r2, #0]
		esp01Flags.bit.SENDINGDATA = 1;
 80028d8:	4a13      	ldr	r2, [pc, #76]	@ (8002928 <ESP01_Send+0x138>)
 80028da:	7813      	ldrb	r3, [r2, #0]
 80028dc:	f043 0308 	orr.w	r3, r3, #8
 80028e0:	7013      	strb	r3, [r2, #0]
		if(ESP01DbgStr != NULL){
 80028e2:	4b16      	ldr	r3, [pc, #88]	@ (800293c <ESP01_Send+0x14c>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d00d      	beq.n	8002906 <ESP01_Send+0x116>
			ESP01DbgStr("+&DBGSENDING DATA ");
 80028ea:	4b14      	ldr	r3, [pc, #80]	@ (800293c <ESP01_Send+0x14c>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4814      	ldr	r0, [pc, #80]	@ (8002940 <ESP01_Send+0x150>)
 80028f0:	4798      	blx	r3
			ESP01DbgStr(strInt);
 80028f2:	4b12      	ldr	r3, [pc, #72]	@ (800293c <ESP01_Send+0x14c>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f107 0210 	add.w	r2, r7, #16
 80028fa:	4610      	mov	r0, r2
 80028fc:	4798      	blx	r3
			ESP01DbgStr("\n");
 80028fe:	4b0f      	ldr	r3, [pc, #60]	@ (800293c <ESP01_Send+0x14c>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4810      	ldr	r0, [pc, #64]	@ (8002944 <ESP01_Send+0x154>)
 8002904:	4798      	blx	r3
		}
		return ESP01_SEND_READY;
 8002906:	2309      	movs	r3, #9
 8002908:	e008      	b.n	800291c <ESP01_Send+0x12c>
	}
	if(ESP01DbgStr != NULL)
 800290a:	4b0c      	ldr	r3, [pc, #48]	@ (800293c <ESP01_Send+0x14c>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d003      	beq.n	800291a <ESP01_Send+0x12a>
		ESP01DbgStr("+&DBGSENDING DATA BUSY\n");
 8002912:	4b0a      	ldr	r3, [pc, #40]	@ (800293c <ESP01_Send+0x14c>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	480c      	ldr	r0, [pc, #48]	@ (8002948 <ESP01_Send+0x158>)
 8002918:	4798      	blx	r3
	return ESP01_SEND_BUSY;
 800291a:	2308      	movs	r3, #8
}
 800291c:	4618      	mov	r0, r3
 800291e:	3720      	adds	r7, #32
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	20000a64 	.word	0x20000a64
 8002928:	2000082c 	.word	0x2000082c
 800292c:	08014894 	.word	0x08014894
 8002930:	08013314 	.word	0x08013314
 8002934:	20000a5e 	.word	0x20000a5e
 8002938:	20000958 	.word	0x20000958
 800293c:	20000840 	.word	0x20000840
 8002940:	08013318 	.word	0x08013318
 8002944:	0801332c 	.word	0x0801332c
 8002948:	08013330 	.word	0x08013330

0800294c <ESP01_Init>:


void ESP01_Init(_sESP01Handle *hESP01){
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]

	memcpy(&esp01Handle, hESP01, sizeof(_sESP01Handle));
 8002954:	220c      	movs	r2, #12
 8002956:	6879      	ldr	r1, [r7, #4]
 8002958:	4810      	ldr	r0, [pc, #64]	@ (800299c <ESP01_Init+0x50>)
 800295a:	f010 f885 	bl	8012a68 <memcpy>

	esp01ATSate = ESP01ATIDLE;
 800295e:	4b10      	ldr	r3, [pc, #64]	@ (80029a0 <ESP01_Init+0x54>)
 8002960:	2200      	movs	r2, #0
 8002962:	701a      	strb	r2, [r3, #0]
	esp01HState = 0;
 8002964:	4b0f      	ldr	r3, [pc, #60]	@ (80029a4 <ESP01_Init+0x58>)
 8002966:	2200      	movs	r2, #0
 8002968:	701a      	strb	r2, [r3, #0]
	esp01irTX = 0;
 800296a:	4b0f      	ldr	r3, [pc, #60]	@ (80029a8 <ESP01_Init+0x5c>)
 800296c:	2200      	movs	r2, #0
 800296e:	801a      	strh	r2, [r3, #0]
	esp01iwTX = 0;
 8002970:	4b0e      	ldr	r3, [pc, #56]	@ (80029ac <ESP01_Init+0x60>)
 8002972:	2200      	movs	r2, #0
 8002974:	801a      	strh	r2, [r3, #0]
	esp01irRXAT = 0;
 8002976:	4b0e      	ldr	r3, [pc, #56]	@ (80029b0 <ESP01_Init+0x64>)
 8002978:	2200      	movs	r2, #0
 800297a:	801a      	strh	r2, [r3, #0]
	esp01iwRXAT = 0;
 800297c:	4b0d      	ldr	r3, [pc, #52]	@ (80029b4 <ESP01_Init+0x68>)
 800297e:	2200      	movs	r2, #0
 8002980:	801a      	strh	r2, [r3, #0]
	esp01Flags.byte = 0;
 8002982:	4b0d      	ldr	r3, [pc, #52]	@ (80029b8 <ESP01_Init+0x6c>)
 8002984:	2200      	movs	r2, #0
 8002986:	701a      	strb	r2, [r3, #0]
	ESP01ChangeState = NULL;
 8002988:	4b0c      	ldr	r3, [pc, #48]	@ (80029bc <ESP01_Init+0x70>)
 800298a:	2200      	movs	r2, #0
 800298c:	601a      	str	r2, [r3, #0]
	ESP01DbgStr = NULL;
 800298e:	4b0c      	ldr	r3, [pc, #48]	@ (80029c0 <ESP01_Init+0x74>)
 8002990:	2200      	movs	r2, #0
 8002992:	601a      	str	r2, [r3, #0]
}
 8002994:	bf00      	nop
 8002996:	3708      	adds	r7, #8
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}
 800299c:	20000a64 	.word	0x20000a64
 80029a0:	2000082a 	.word	0x2000082a
 80029a4:	200008d2 	.word	0x200008d2
 80029a8:	20000a5c 	.word	0x20000a5c
 80029ac:	20000a5e 	.word	0x20000a5e
 80029b0:	20000a5a 	.word	0x20000a5a
 80029b4:	20000a58 	.word	0x20000a58
 80029b8:	2000082c 	.word	0x2000082c
 80029bc:	2000083c 	.word	0x2000083c
 80029c0:	20000840 	.word	0x20000840

080029c4 <ESP01_Timeout10ms>:


void ESP01_Timeout10ms(){
 80029c4:	b480      	push	{r7}
 80029c6:	af00      	add	r7, sp, #0
	if(esp01TimeoutTask)
 80029c8:	4b13      	ldr	r3, [pc, #76]	@ (8002a18 <ESP01_Timeout10ms+0x54>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d004      	beq.n	80029da <ESP01_Timeout10ms+0x16>
		esp01TimeoutTask--;
 80029d0:	4b11      	ldr	r3, [pc, #68]	@ (8002a18 <ESP01_Timeout10ms+0x54>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	3b01      	subs	r3, #1
 80029d6:	4a10      	ldr	r2, [pc, #64]	@ (8002a18 <ESP01_Timeout10ms+0x54>)
 80029d8:	6013      	str	r3, [r2, #0]

	if(esp01TimeoutDataRx){
 80029da:	4b10      	ldr	r3, [pc, #64]	@ (8002a1c <ESP01_Timeout10ms+0x58>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d00b      	beq.n	80029fa <ESP01_Timeout10ms+0x36>
		esp01TimeoutDataRx--;
 80029e2:	4b0e      	ldr	r3, [pc, #56]	@ (8002a1c <ESP01_Timeout10ms+0x58>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	3b01      	subs	r3, #1
 80029e8:	4a0c      	ldr	r2, [pc, #48]	@ (8002a1c <ESP01_Timeout10ms+0x58>)
 80029ea:	6013      	str	r3, [r2, #0]
		if(!esp01TimeoutDataRx)
 80029ec:	4b0b      	ldr	r3, [pc, #44]	@ (8002a1c <ESP01_Timeout10ms+0x58>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d102      	bne.n	80029fa <ESP01_Timeout10ms+0x36>
			esp01HState = 0;
 80029f4:	4b0a      	ldr	r3, [pc, #40]	@ (8002a20 <ESP01_Timeout10ms+0x5c>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	701a      	strb	r2, [r3, #0]
	}

	if(esp01TimeoutTxSymbol)
 80029fa:	4b0a      	ldr	r3, [pc, #40]	@ (8002a24 <ESP01_Timeout10ms+0x60>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d004      	beq.n	8002a0c <ESP01_Timeout10ms+0x48>
		esp01TimeoutTxSymbol--;
 8002a02:	4b08      	ldr	r3, [pc, #32]	@ (8002a24 <ESP01_Timeout10ms+0x60>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	3b01      	subs	r3, #1
 8002a08:	4a06      	ldr	r2, [pc, #24]	@ (8002a24 <ESP01_Timeout10ms+0x60>)
 8002a0a:	6013      	str	r3, [r2, #0]
}
 8002a0c:	bf00      	nop
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr
 8002a16:	bf00      	nop
 8002a18:	20000830 	.word	0x20000830
 8002a1c:	20000834 	.word	0x20000834
 8002a20:	200008d2 	.word	0x200008d2
 8002a24:	20000838 	.word	0x20000838

08002a28 <ESP01_Task>:

void ESP01_Task(){
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	af00      	add	r7, sp, #0
	if(esp01irRXAT != esp01iwRXAT)
 8002a2c:	4b08      	ldr	r3, [pc, #32]	@ (8002a50 <ESP01_Task+0x28>)
 8002a2e:	881a      	ldrh	r2, [r3, #0]
 8002a30:	4b08      	ldr	r3, [pc, #32]	@ (8002a54 <ESP01_Task+0x2c>)
 8002a32:	881b      	ldrh	r3, [r3, #0]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d001      	beq.n	8002a3c <ESP01_Task+0x14>
		ESP01ATDecode();
 8002a38:	f000 f820 	bl	8002a7c <ESP01ATDecode>

	if(!esp01TimeoutTask)
 8002a3c:	4b06      	ldr	r3, [pc, #24]	@ (8002a58 <ESP01_Task+0x30>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d101      	bne.n	8002a48 <ESP01_Task+0x20>
		ESP01DOConnection();
 8002a44:	f000 fc5a 	bl	80032fc <ESP01DOConnection>

	ESP01SENDData();
 8002a48:	f000 ff90 	bl	800396c <ESP01SENDData>
}
 8002a4c:	bf00      	nop
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	20000a5a 	.word	0x20000a5a
 8002a54:	20000a58 	.word	0x20000a58
 8002a58:	20000830 	.word	0x20000830

08002a5c <ESP01_AttachDebugStr>:

void ESP01_AttachChangeState(void (*aESP01ChangeState)(_eESP01STATUS esp01State)){
	ESP01ChangeState = aESP01ChangeState;
}

void ESP01_AttachDebugStr(void (*aESP01DbgStr)(const char *dbgStr)){
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
	ESP01DbgStr = aESP01DbgStr;
 8002a64:	4a04      	ldr	r2, [pc, #16]	@ (8002a78 <ESP01_AttachDebugStr+0x1c>)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6013      	str	r3, [r2, #0]
}
 8002a6a:	bf00      	nop
 8002a6c:	370c      	adds	r7, #12
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop
 8002a78:	20000840 	.word	0x20000840

08002a7c <ESP01ATDecode>:
		return 1;
	return 0;
}

/* Private Functions */
static void ESP01ATDecode(){
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
	uint16_t i;
	uint8_t value;
	if(esp01ATSate==ESP01ATHARDRST0 || esp01ATSate==ESP01ATHARDRST1 ||
 8002a82:	4b89      	ldr	r3, [pc, #548]	@ (8002ca8 <ESP01ATDecode+0x22c>)
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	2b17      	cmp	r3, #23
 8002a88:	d007      	beq.n	8002a9a <ESP01ATDecode+0x1e>
 8002a8a:	4b87      	ldr	r3, [pc, #540]	@ (8002ca8 <ESP01ATDecode+0x22c>)
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	2b18      	cmp	r3, #24
 8002a90:	d003      	beq.n	8002a9a <ESP01ATDecode+0x1e>
	   esp01ATSate==ESP01ATHARDRSTSTOP){
 8002a92:	4b85      	ldr	r3, [pc, #532]	@ (8002ca8 <ESP01ATDecode+0x22c>)
 8002a94:	781b      	ldrb	r3, [r3, #0]
	if(esp01ATSate==ESP01ATHARDRST0 || esp01ATSate==ESP01ATHARDRST1 ||
 8002a96:	2b19      	cmp	r3, #25
 8002a98:	d105      	bne.n	8002aa6 <ESP01ATDecode+0x2a>
		esp01irRXAT = esp01iwRXAT;
 8002a9a:	4b84      	ldr	r3, [pc, #528]	@ (8002cac <ESP01ATDecode+0x230>)
 8002a9c:	881a      	ldrh	r2, [r3, #0]
 8002a9e:	4b84      	ldr	r3, [pc, #528]	@ (8002cb0 <ESP01ATDecode+0x234>)
 8002aa0:	801a      	strh	r2, [r3, #0]
		return;
 8002aa2:	f000 bc13 	b.w	80032cc <ESP01ATDecode+0x850>
	}
	i = esp01iwRXAT;
 8002aa6:	4b81      	ldr	r3, [pc, #516]	@ (8002cac <ESP01ATDecode+0x230>)
 8002aa8:	881b      	ldrh	r3, [r3, #0]
 8002aaa:	80fb      	strh	r3, [r7, #6]
	esp01TimeoutDataRx = 2;
 8002aac:	4b81      	ldr	r3, [pc, #516]	@ (8002cb4 <ESP01ATDecode+0x238>)
 8002aae:	2202      	movs	r2, #2
 8002ab0:	601a      	str	r2, [r3, #0]
	while(esp01irRXAT != i){
 8002ab2:	f000 bc05 	b.w	80032c0 <ESP01ATDecode+0x844>
		value = esp01RXATBuf[esp01irRXAT];
 8002ab6:	4b7e      	ldr	r3, [pc, #504]	@ (8002cb0 <ESP01ATDecode+0x234>)
 8002ab8:	881b      	ldrh	r3, [r3, #0]
 8002aba:	461a      	mov	r2, r3
 8002abc:	4b7e      	ldr	r3, [pc, #504]	@ (8002cb8 <ESP01ATDecode+0x23c>)
 8002abe:	5c9b      	ldrb	r3, [r3, r2]
 8002ac0:	717b      	strb	r3, [r7, #5]
		switch(esp01HState){
 8002ac2:	4b7e      	ldr	r3, [pc, #504]	@ (8002cbc <ESP01ATDecode+0x240>)
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	2b15      	cmp	r3, #21
 8002ac8:	f200 83db 	bhi.w	8003282 <ESP01ATDecode+0x806>
 8002acc:	a201      	add	r2, pc, #4	@ (adr r2, 8002ad4 <ESP01ATDecode+0x58>)
 8002ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ad2:	bf00      	nop
 8002ad4:	08002b2d 	.word	0x08002b2d
 8002ad8:	08002c1d 	.word	0x08002c1d
 8002adc:	08002dff 	.word	0x08002dff
 8002ae0:	08003283 	.word	0x08003283
 8002ae4:	08003283 	.word	0x08003283
 8002ae8:	08003007 	.word	0x08003007
 8002aec:	0800304d 	.word	0x0800304d
 8002af0:	08003063 	.word	0x08003063
 8002af4:	0800308f 	.word	0x0800308f
 8002af8:	08003283 	.word	0x08003283
 8002afc:	080030dd 	.word	0x080030dd
 8002b00:	08003105 	.word	0x08003105
 8002b04:	0800315b 	.word	0x0800315b
 8002b08:	08003283 	.word	0x08003283
 8002b0c:	08003283 	.word	0x08003283
 8002b10:	08003283 	.word	0x08003283
 8002b14:	08003283 	.word	0x08003283
 8002b18:	08003283 	.word	0x08003283
 8002b1c:	08003283 	.word	0x08003283
 8002b20:	08003283 	.word	0x08003283
 8002b24:	080031d5 	.word	0x080031d5
 8002b28:	08003229 	.word	0x08003229
		case 0:
            indexResponse = 0;
 8002b2c:	4b64      	ldr	r3, [pc, #400]	@ (8002cc0 <ESP01ATDecode+0x244>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	701a      	strb	r2, [r3, #0]
            indexResponseChar = 4;
 8002b32:	4b64      	ldr	r3, [pc, #400]	@ (8002cc4 <ESP01ATDecode+0x248>)
 8002b34:	2204      	movs	r2, #4
 8002b36:	701a      	strb	r2, [r3, #0]
            while(responses[indexResponse] != NULL){
 8002b38:	e03e      	b.n	8002bb8 <ESP01ATDecode+0x13c>
                if(value == responses[indexResponse][indexResponseChar]){ // todos los ocmandos de respuesta tienen una cabecer
 8002b3a:	4b61      	ldr	r3, [pc, #388]	@ (8002cc0 <ESP01ATDecode+0x244>)
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	461a      	mov	r2, r3
 8002b40:	4b61      	ldr	r3, [pc, #388]	@ (8002cc8 <ESP01ATDecode+0x24c>)
 8002b42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b46:	4a5f      	ldr	r2, [pc, #380]	@ (8002cc4 <ESP01ATDecode+0x248>)
 8002b48:	7812      	ldrb	r2, [r2, #0]
 8002b4a:	4413      	add	r3, r2
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	797a      	ldrb	r2, [r7, #5]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d12b      	bne.n	8002bac <ESP01ATDecode+0x130>
                    esp01nBytes = (responses[indexResponse][0] - '0');			// aca saca los primeros dos numero que guarda la cantidad de bytes de la cabecera hace el *10 pq pone el primer byte en las decenas  y al otro lo suma así nomas
 8002b54:	4b5a      	ldr	r3, [pc, #360]	@ (8002cc0 <ESP01ATDecode+0x244>)
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	461a      	mov	r2, r3
 8002b5a:	4b5b      	ldr	r3, [pc, #364]	@ (8002cc8 <ESP01ATDecode+0x24c>)
 8002b5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	3b30      	subs	r3, #48	@ 0x30
 8002b64:	b29a      	uxth	r2, r3
 8002b66:	4b59      	ldr	r3, [pc, #356]	@ (8002ccc <ESP01ATDecode+0x250>)
 8002b68:	801a      	strh	r2, [r3, #0]
                    esp01nBytes *= 10;
 8002b6a:	4b58      	ldr	r3, [pc, #352]	@ (8002ccc <ESP01ATDecode+0x250>)
 8002b6c:	881b      	ldrh	r3, [r3, #0]
 8002b6e:	461a      	mov	r2, r3
 8002b70:	0092      	lsls	r2, r2, #2
 8002b72:	4413      	add	r3, r2
 8002b74:	005b      	lsls	r3, r3, #1
 8002b76:	b29a      	uxth	r2, r3
 8002b78:	4b54      	ldr	r3, [pc, #336]	@ (8002ccc <ESP01ATDecode+0x250>)
 8002b7a:	801a      	strh	r2, [r3, #0]
                    esp01nBytes += (responses[indexResponse][1] - '0');
 8002b7c:	4b50      	ldr	r3, [pc, #320]	@ (8002cc0 <ESP01ATDecode+0x244>)
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	461a      	mov	r2, r3
 8002b82:	4b51      	ldr	r3, [pc, #324]	@ (8002cc8 <ESP01ATDecode+0x24c>)
 8002b84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b88:	3301      	adds	r3, #1
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	4b4f      	ldr	r3, [pc, #316]	@ (8002ccc <ESP01ATDecode+0x250>)
 8002b90:	881b      	ldrh	r3, [r3, #0]
 8002b92:	4413      	add	r3, r2
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	3b30      	subs	r3, #48	@ 0x30
 8002b98:	b29a      	uxth	r2, r3
 8002b9a:	4b4c      	ldr	r3, [pc, #304]	@ (8002ccc <ESP01ATDecode+0x250>)
 8002b9c:	801a      	strh	r2, [r3, #0]
                    esp01nBytes--;
 8002b9e:	4b4b      	ldr	r3, [pc, #300]	@ (8002ccc <ESP01ATDecode+0x250>)
 8002ba0:	881b      	ldrh	r3, [r3, #0]
 8002ba2:	3b01      	subs	r3, #1
 8002ba4:	b29a      	uxth	r2, r3
 8002ba6:	4b49      	ldr	r3, [pc, #292]	@ (8002ccc <ESP01ATDecode+0x250>)
 8002ba8:	801a      	strh	r2, [r3, #0]
                    break;
 8002baa:	e00d      	b.n	8002bc8 <ESP01ATDecode+0x14c>
                }
                indexResponse++;
 8002bac:	4b44      	ldr	r3, [pc, #272]	@ (8002cc0 <ESP01ATDecode+0x244>)
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	b2da      	uxtb	r2, r3
 8002bb4:	4b42      	ldr	r3, [pc, #264]	@ (8002cc0 <ESP01ATDecode+0x244>)
 8002bb6:	701a      	strb	r2, [r3, #0]
            while(responses[indexResponse] != NULL){
 8002bb8:	4b41      	ldr	r3, [pc, #260]	@ (8002cc0 <ESP01ATDecode+0x244>)
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	4b42      	ldr	r3, [pc, #264]	@ (8002cc8 <ESP01ATDecode+0x24c>)
 8002bc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d1b8      	bne.n	8002b3a <ESP01ATDecode+0xbe>
            }
            if(responses[indexResponse] != NULL){
 8002bc8:	4b3d      	ldr	r3, [pc, #244]	@ (8002cc0 <ESP01ATDecode+0x244>)
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	461a      	mov	r2, r3
 8002bce:	4b3e      	ldr	r3, [pc, #248]	@ (8002cc8 <ESP01ATDecode+0x24c>)
 8002bd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d009      	beq.n	8002bec <ESP01ATDecode+0x170>
                esp01HState = 1;
 8002bd8:	4b38      	ldr	r3, [pc, #224]	@ (8002cbc <ESP01ATDecode+0x240>)
 8002bda:	2201      	movs	r2, #1
 8002bdc:	701a      	strb	r2, [r3, #0]
                indexResponseChar++;
 8002bde:	4b39      	ldr	r3, [pc, #228]	@ (8002cc4 <ESP01ATDecode+0x248>)
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	3301      	adds	r3, #1
 8002be4:	b2da      	uxtb	r2, r3
 8002be6:	4b37      	ldr	r3, [pc, #220]	@ (8002cc4 <ESP01ATDecode+0x248>)
 8002be8:	701a      	strb	r2, [r3, #0]
						esp01Flags.bit.WAITINGSYMBOL = 0;
						esp01TimeoutTxSymbol = 0;
					}
				}
			}
			break;
 8002bea:	e351      	b.n	8003290 <ESP01ATDecode+0x814>
				esp01TimeoutDataRx = 0;
 8002bec:	4b31      	ldr	r3, [pc, #196]	@ (8002cb4 <ESP01ATDecode+0x238>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	601a      	str	r2, [r3, #0]
				if(esp01Flags.bit.WAITINGSYMBOL){
 8002bf2:	4b37      	ldr	r3, [pc, #220]	@ (8002cd0 <ESP01ATDecode+0x254>)
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	f003 0301 	and.w	r3, r3, #1
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	f000 8347 	beq.w	8003290 <ESP01ATDecode+0x814>
					if(value == '>'){
 8002c02:	797b      	ldrb	r3, [r7, #5]
 8002c04:	2b3e      	cmp	r3, #62	@ 0x3e
 8002c06:	f040 8343 	bne.w	8003290 <ESP01ATDecode+0x814>
						esp01Flags.bit.WAITINGSYMBOL = 0;
 8002c0a:	4a31      	ldr	r2, [pc, #196]	@ (8002cd0 <ESP01ATDecode+0x254>)
 8002c0c:	7813      	ldrb	r3, [r2, #0]
 8002c0e:	f023 0301 	bic.w	r3, r3, #1
 8002c12:	7013      	strb	r3, [r2, #0]
						esp01TimeoutTxSymbol = 0;
 8002c14:	4b2f      	ldr	r3, [pc, #188]	@ (8002cd4 <ESP01ATDecode+0x258>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	601a      	str	r2, [r3, #0]
			break;
 8002c1a:	e339      	b.n	8003290 <ESP01ATDecode+0x814>
		case 1:
            if(value == responses[indexResponse][indexResponseChar]){
 8002c1c:	4b28      	ldr	r3, [pc, #160]	@ (8002cc0 <ESP01ATDecode+0x244>)
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	461a      	mov	r2, r3
 8002c22:	4b29      	ldr	r3, [pc, #164]	@ (8002cc8 <ESP01ATDecode+0x24c>)
 8002c24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c28:	4a26      	ldr	r2, [pc, #152]	@ (8002cc4 <ESP01ATDecode+0x248>)
 8002c2a:	7812      	ldrb	r2, [r2, #0]
 8002c2c:	4413      	add	r3, r2
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	797a      	ldrb	r2, [r7, #5]
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d133      	bne.n	8002c9e <ESP01ATDecode+0x222>
                esp01nBytes--;
 8002c36:	4b25      	ldr	r3, [pc, #148]	@ (8002ccc <ESP01ATDecode+0x250>)
 8002c38:	881b      	ldrh	r3, [r3, #0]
 8002c3a:	3b01      	subs	r3, #1
 8002c3c:	b29a      	uxth	r2, r3
 8002c3e:	4b23      	ldr	r3, [pc, #140]	@ (8002ccc <ESP01ATDecode+0x250>)
 8002c40:	801a      	strh	r2, [r3, #0]
                if(!esp01nBytes || value=='\r'){
 8002c42:	4b22      	ldr	r3, [pc, #136]	@ (8002ccc <ESP01ATDecode+0x250>)
 8002c44:	881b      	ldrh	r3, [r3, #0]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d003      	beq.n	8002c52 <ESP01ATDecode+0x1d6>
 8002c4a:	797b      	ldrb	r3, [r7, #5]
 8002c4c:	2b0d      	cmp	r3, #13
 8002c4e:	f040 80cf 	bne.w	8002df0 <ESP01ATDecode+0x374>
                    esp01HState = (responses[indexResponse][2] - '0');
 8002c52:	4b1b      	ldr	r3, [pc, #108]	@ (8002cc0 <ESP01ATDecode+0x244>)
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	461a      	mov	r2, r3
 8002c58:	4b1b      	ldr	r3, [pc, #108]	@ (8002cc8 <ESP01ATDecode+0x24c>)
 8002c5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c5e:	3302      	adds	r3, #2
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	3b30      	subs	r3, #48	@ 0x30
 8002c64:	b2da      	uxtb	r2, r3
 8002c66:	4b15      	ldr	r3, [pc, #84]	@ (8002cbc <ESP01ATDecode+0x240>)
 8002c68:	701a      	strb	r2, [r3, #0]
                    esp01HState *= 10;
 8002c6a:	4b14      	ldr	r3, [pc, #80]	@ (8002cbc <ESP01ATDecode+0x240>)
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	461a      	mov	r2, r3
 8002c70:	0092      	lsls	r2, r2, #2
 8002c72:	4413      	add	r3, r2
 8002c74:	005b      	lsls	r3, r3, #1
 8002c76:	b2da      	uxtb	r2, r3
 8002c78:	4b10      	ldr	r3, [pc, #64]	@ (8002cbc <ESP01ATDecode+0x240>)
 8002c7a:	701a      	strb	r2, [r3, #0]
                    esp01HState += (responses[indexResponse][3] - '0');
 8002c7c:	4b10      	ldr	r3, [pc, #64]	@ (8002cc0 <ESP01ATDecode+0x244>)
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	461a      	mov	r2, r3
 8002c82:	4b11      	ldr	r3, [pc, #68]	@ (8002cc8 <ESP01ATDecode+0x24c>)
 8002c84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c88:	3303      	adds	r3, #3
 8002c8a:	781a      	ldrb	r2, [r3, #0]
 8002c8c:	4b0b      	ldr	r3, [pc, #44]	@ (8002cbc <ESP01ATDecode+0x240>)
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	4413      	add	r3, r2
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	3b30      	subs	r3, #48	@ 0x30
 8002c96:	b2da      	uxtb	r2, r3
 8002c98:	4b08      	ldr	r3, [pc, #32]	@ (8002cbc <ESP01ATDecode+0x240>)
 8002c9a:	701a      	strb	r2, [r3, #0]
                    break;
 8002c9c:	e303      	b.n	80032a6 <ESP01ATDecode+0x82a>
                }
            }
            else{
                indexResponse = 0;
 8002c9e:	4b08      	ldr	r3, [pc, #32]	@ (8002cc0 <ESP01ATDecode+0x244>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	701a      	strb	r2, [r3, #0]
                while(responses[indexResponse] != NULL){
 8002ca4:	e088      	b.n	8002db8 <ESP01ATDecode+0x33c>
 8002ca6:	bf00      	nop
 8002ca8:	2000082a 	.word	0x2000082a
 8002cac:	20000a58 	.word	0x20000a58
 8002cb0:	20000a5a 	.word	0x20000a5a
 8002cb4:	20000834 	.word	0x20000834
 8002cb8:	200008d8 	.word	0x200008d8
 8002cbc:	200008d2 	.word	0x200008d2
 8002cc0:	20000a70 	.word	0x20000a70
 8002cc4:	20000a71 	.word	0x20000a71
 8002cc8:	08014adc 	.word	0x08014adc
 8002ccc:	200008d4 	.word	0x200008d4
 8002cd0:	2000082c 	.word	0x2000082c
 8002cd4:	20000838 	.word	0x20000838
                    esp01nBytes = (responses[indexResponse][0] - '0');
 8002cd8:	4b99      	ldr	r3, [pc, #612]	@ (8002f40 <ESP01ATDecode+0x4c4>)
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	461a      	mov	r2, r3
 8002cde:	4b99      	ldr	r3, [pc, #612]	@ (8002f44 <ESP01ATDecode+0x4c8>)
 8002ce0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	3b30      	subs	r3, #48	@ 0x30
 8002ce8:	b29a      	uxth	r2, r3
 8002cea:	4b97      	ldr	r3, [pc, #604]	@ (8002f48 <ESP01ATDecode+0x4cc>)
 8002cec:	801a      	strh	r2, [r3, #0]
                    esp01nBytes *= 10;
 8002cee:	4b96      	ldr	r3, [pc, #600]	@ (8002f48 <ESP01ATDecode+0x4cc>)
 8002cf0:	881b      	ldrh	r3, [r3, #0]
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	0092      	lsls	r2, r2, #2
 8002cf6:	4413      	add	r3, r2
 8002cf8:	005b      	lsls	r3, r3, #1
 8002cfa:	b29a      	uxth	r2, r3
 8002cfc:	4b92      	ldr	r3, [pc, #584]	@ (8002f48 <ESP01ATDecode+0x4cc>)
 8002cfe:	801a      	strh	r2, [r3, #0]
                    esp01nBytes += (responses[indexResponse][1] - '0');
 8002d00:	4b8f      	ldr	r3, [pc, #572]	@ (8002f40 <ESP01ATDecode+0x4c4>)
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	461a      	mov	r2, r3
 8002d06:	4b8f      	ldr	r3, [pc, #572]	@ (8002f44 <ESP01ATDecode+0x4c8>)
 8002d08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	461a      	mov	r2, r3
 8002d12:	4b8d      	ldr	r3, [pc, #564]	@ (8002f48 <ESP01ATDecode+0x4cc>)
 8002d14:	881b      	ldrh	r3, [r3, #0]
 8002d16:	4413      	add	r3, r2
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	3b30      	subs	r3, #48	@ 0x30
 8002d1c:	b29a      	uxth	r2, r3
 8002d1e:	4b8a      	ldr	r3, [pc, #552]	@ (8002f48 <ESP01ATDecode+0x4cc>)
 8002d20:	801a      	strh	r2, [r3, #0]
                    esp01nBytes -= (indexResponseChar-3);
 8002d22:	4b89      	ldr	r3, [pc, #548]	@ (8002f48 <ESP01ATDecode+0x4cc>)
 8002d24:	881b      	ldrh	r3, [r3, #0]
 8002d26:	4a89      	ldr	r2, [pc, #548]	@ (8002f4c <ESP01ATDecode+0x4d0>)
 8002d28:	7812      	ldrb	r2, [r2, #0]
 8002d2a:	1a9b      	subs	r3, r3, r2
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	3303      	adds	r3, #3
 8002d30:	b29a      	uxth	r2, r3
 8002d32:	4b85      	ldr	r3, [pc, #532]	@ (8002f48 <ESP01ATDecode+0x4cc>)
 8002d34:	801a      	strh	r2, [r3, #0]
                    if(esp01nBytes<128 && value==responses[indexResponse][indexResponseChar]){
 8002d36:	4b84      	ldr	r3, [pc, #528]	@ (8002f48 <ESP01ATDecode+0x4cc>)
 8002d38:	881b      	ldrh	r3, [r3, #0]
 8002d3a:	2b7f      	cmp	r3, #127	@ 0x7f
 8002d3c:	d836      	bhi.n	8002dac <ESP01ATDecode+0x330>
 8002d3e:	4b80      	ldr	r3, [pc, #512]	@ (8002f40 <ESP01ATDecode+0x4c4>)
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	461a      	mov	r2, r3
 8002d44:	4b7f      	ldr	r3, [pc, #508]	@ (8002f44 <ESP01ATDecode+0x4c8>)
 8002d46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d4a:	4a80      	ldr	r2, [pc, #512]	@ (8002f4c <ESP01ATDecode+0x4d0>)
 8002d4c:	7812      	ldrb	r2, [r2, #0]
 8002d4e:	4413      	add	r3, r2
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	797a      	ldrb	r2, [r7, #5]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d129      	bne.n	8002dac <ESP01ATDecode+0x330>
                        if(esp01nBytes == 0){
 8002d58:	4b7b      	ldr	r3, [pc, #492]	@ (8002f48 <ESP01ATDecode+0x4cc>)
 8002d5a:	881b      	ldrh	r3, [r3, #0]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d134      	bne.n	8002dca <ESP01ATDecode+0x34e>
                            esp01HState = (responses[indexResponse][2] - '0');
 8002d60:	4b77      	ldr	r3, [pc, #476]	@ (8002f40 <ESP01ATDecode+0x4c4>)
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	461a      	mov	r2, r3
 8002d66:	4b77      	ldr	r3, [pc, #476]	@ (8002f44 <ESP01ATDecode+0x4c8>)
 8002d68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d6c:	3302      	adds	r3, #2
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	3b30      	subs	r3, #48	@ 0x30
 8002d72:	b2da      	uxtb	r2, r3
 8002d74:	4b76      	ldr	r3, [pc, #472]	@ (8002f50 <ESP01ATDecode+0x4d4>)
 8002d76:	701a      	strb	r2, [r3, #0]
                            esp01HState *= 10;
 8002d78:	4b75      	ldr	r3, [pc, #468]	@ (8002f50 <ESP01ATDecode+0x4d4>)
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	0092      	lsls	r2, r2, #2
 8002d80:	4413      	add	r3, r2
 8002d82:	005b      	lsls	r3, r3, #1
 8002d84:	b2da      	uxtb	r2, r3
 8002d86:	4b72      	ldr	r3, [pc, #456]	@ (8002f50 <ESP01ATDecode+0x4d4>)
 8002d88:	701a      	strb	r2, [r3, #0]
                            esp01HState += (responses[indexResponse][3] - '0');
 8002d8a:	4b6d      	ldr	r3, [pc, #436]	@ (8002f40 <ESP01ATDecode+0x4c4>)
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	461a      	mov	r2, r3
 8002d90:	4b6c      	ldr	r3, [pc, #432]	@ (8002f44 <ESP01ATDecode+0x4c8>)
 8002d92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d96:	3303      	adds	r3, #3
 8002d98:	781a      	ldrb	r2, [r3, #0]
 8002d9a:	4b6d      	ldr	r3, [pc, #436]	@ (8002f50 <ESP01ATDecode+0x4d4>)
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	4413      	add	r3, r2
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	3b30      	subs	r3, #48	@ 0x30
 8002da4:	b2da      	uxtb	r2, r3
 8002da6:	4b6a      	ldr	r3, [pc, #424]	@ (8002f50 <ESP01ATDecode+0x4d4>)
 8002da8:	701a      	strb	r2, [r3, #0]
                        }
                        break;
 8002daa:	e00e      	b.n	8002dca <ESP01ATDecode+0x34e>
                    }
                    indexResponse++;
 8002dac:	4b64      	ldr	r3, [pc, #400]	@ (8002f40 <ESP01ATDecode+0x4c4>)
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	3301      	adds	r3, #1
 8002db2:	b2da      	uxtb	r2, r3
 8002db4:	4b62      	ldr	r3, [pc, #392]	@ (8002f40 <ESP01ATDecode+0x4c4>)
 8002db6:	701a      	strb	r2, [r3, #0]
                while(responses[indexResponse] != NULL){
 8002db8:	4b61      	ldr	r3, [pc, #388]	@ (8002f40 <ESP01ATDecode+0x4c4>)
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	4b61      	ldr	r3, [pc, #388]	@ (8002f44 <ESP01ATDecode+0x4c8>)
 8002dc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d187      	bne.n	8002cd8 <ESP01ATDecode+0x25c>
 8002dc8:	e000      	b.n	8002dcc <ESP01ATDecode+0x350>
                        break;
 8002dca:	bf00      	nop
                }
                if(responses[indexResponse] == NULL){
 8002dcc:	4b5c      	ldr	r3, [pc, #368]	@ (8002f40 <ESP01ATDecode+0x4c4>)
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	4b5c      	ldr	r3, [pc, #368]	@ (8002f44 <ESP01ATDecode+0x4c8>)
 8002dd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d109      	bne.n	8002df0 <ESP01ATDecode+0x374>
                    esp01HState = 0;
 8002ddc:	4b5c      	ldr	r3, [pc, #368]	@ (8002f50 <ESP01ATDecode+0x4d4>)
 8002dde:	2200      	movs	r2, #0
 8002de0:	701a      	strb	r2, [r3, #0]
                    esp01irRXAT--;
 8002de2:	4b5c      	ldr	r3, [pc, #368]	@ (8002f54 <ESP01ATDecode+0x4d8>)
 8002de4:	881b      	ldrh	r3, [r3, #0]
 8002de6:	3b01      	subs	r3, #1
 8002de8:	b29a      	uxth	r2, r3
 8002dea:	4b5a      	ldr	r3, [pc, #360]	@ (8002f54 <ESP01ATDecode+0x4d8>)
 8002dec:	801a      	strh	r2, [r3, #0]
                    break;
 8002dee:	e25a      	b.n	80032a6 <ESP01ATDecode+0x82a>
                }
            }
			indexResponseChar++;
 8002df0:	4b56      	ldr	r3, [pc, #344]	@ (8002f4c <ESP01ATDecode+0x4d0>)
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	3301      	adds	r3, #1
 8002df6:	b2da      	uxtb	r2, r3
 8002df8:	4b54      	ldr	r3, [pc, #336]	@ (8002f4c <ESP01ATDecode+0x4d0>)
 8002dfa:	701a      	strb	r2, [r3, #0]
			break;
 8002dfc:	e253      	b.n	80032a6 <ESP01ATDecode+0x82a>
		case 2:
			if(value == '\n'){
 8002dfe:	797b      	ldrb	r3, [r7, #5]
 8002e00:	2b0a      	cmp	r3, #10
 8002e02:	f040 8247 	bne.w	8003294 <ESP01ATDecode+0x818>
				esp01HState = 0;
 8002e06:	4b52      	ldr	r3, [pc, #328]	@ (8002f50 <ESP01ATDecode+0x4d4>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	701a      	strb	r2, [r3, #0]
				switch(indexResponse){
 8002e0c:	4b4c      	ldr	r3, [pc, #304]	@ (8002f40 <ESP01ATDecode+0x4c4>)
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	2b11      	cmp	r3, #17
 8002e12:	f200 823f 	bhi.w	8003294 <ESP01ATDecode+0x818>
 8002e16:	a201      	add	r2, pc, #4	@ (adr r2, 8002e1c <ESP01ATDecode+0x3a0>)
 8002e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e1c:	08002feb 	.word	0x08002feb
 8002e20:	08002feb 	.word	0x08002feb
 8002e24:	08002e65 	.word	0x08002e65
 8002e28:	08002e81 	.word	0x08002e81
 8002e2c:	08002eaf 	.word	0x08002eaf
 8002e30:	08002feb 	.word	0x08002feb
 8002e34:	08002ee5 	.word	0x08002ee5
 8002e38:	08002ee5 	.word	0x08002ee5
 8002e3c:	08002f19 	.word	0x08002f19
 8002e40:	08002f25 	.word	0x08002f25
 8002e44:	08002f71 	.word	0x08002f71
 8002e48:	08002fad 	.word	0x08002fad
 8002e4c:	08003295 	.word	0x08003295
 8002e50:	08002fb9 	.word	0x08002fb9
 8002e54:	08003295 	.word	0x08003295
 8002e58:	08002fcf 	.word	0x08002fcf
 8002e5c:	08002feb 	.word	0x08002feb
 8002e60:	08002feb 	.word	0x08002feb
				case 0://AT
				case 1:
					break;
				case 2://OK
					if(esp01ATSate == ESP01ATRESPONSE){
 8002e64:	4b3c      	ldr	r3, [pc, #240]	@ (8002f58 <ESP01ATDecode+0x4dc>)
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	2b02      	cmp	r3, #2
 8002e6a:	f040 80c0 	bne.w	8002fee <ESP01ATDecode+0x572>
						esp01TimeoutTask = 0;
 8002e6e:	4b3b      	ldr	r3, [pc, #236]	@ (8002f5c <ESP01ATDecode+0x4e0>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	601a      	str	r2, [r3, #0]
						esp01Flags.bit.ATRESPONSEOK = 1;
 8002e74:	4a3a      	ldr	r2, [pc, #232]	@ (8002f60 <ESP01ATDecode+0x4e4>)
 8002e76:	7813      	ldrb	r3, [r2, #0]
 8002e78:	f043 0320 	orr.w	r3, r3, #32
 8002e7c:	7013      	strb	r3, [r2, #0]
					}
					break;
 8002e7e:	e0b6      	b.n	8002fee <ESP01ATDecode+0x572>
				case 3://ERROR
					if(esp01Flags.bit.SENDINGDATA){
 8002e80:	4b37      	ldr	r3, [pc, #220]	@ (8002f60 <ESP01ATDecode+0x4e4>)
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	f003 0308 	and.w	r3, r3, #8
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	f000 80b1 	beq.w	8002ff2 <ESP01ATDecode+0x576>
						esp01Flags.bit.SENDINGDATA = 0;
 8002e90:	4a33      	ldr	r2, [pc, #204]	@ (8002f60 <ESP01ATDecode+0x4e4>)
 8002e92:	7813      	ldrb	r3, [r2, #0]
 8002e94:	f023 0308 	bic.w	r3, r3, #8
 8002e98:	7013      	strb	r3, [r2, #0]
						esp01Flags.bit.UDPTCPCONNECTED = 0;
 8002e9a:	4a31      	ldr	r2, [pc, #196]	@ (8002f60 <ESP01ATDecode+0x4e4>)
 8002e9c:	7813      	ldrb	r3, [r2, #0]
 8002e9e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002ea2:	7013      	strb	r3, [r2, #0]
						esp01irTX = esp01iwTX;
 8002ea4:	4b2f      	ldr	r3, [pc, #188]	@ (8002f64 <ESP01ATDecode+0x4e8>)
 8002ea6:	881a      	ldrh	r2, [r3, #0]
 8002ea8:	4b2f      	ldr	r3, [pc, #188]	@ (8002f68 <ESP01ATDecode+0x4ec>)
 8002eaa:	801a      	strh	r2, [r3, #0]
					}
					break;
 8002eac:	e0a1      	b.n	8002ff2 <ESP01ATDecode+0x576>
				case 4://WIFI GOT IP
					esp01TimeoutTask = 0;
 8002eae:	4b2b      	ldr	r3, [pc, #172]	@ (8002f5c <ESP01ATDecode+0x4e0>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	601a      	str	r2, [r3, #0]
					if(esp01ATSate == ESP01CWJAPRESPONSE)
 8002eb4:	4b28      	ldr	r3, [pc, #160]	@ (8002f58 <ESP01ATDecode+0x4dc>)
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	2b07      	cmp	r3, #7
 8002eba:	d104      	bne.n	8002ec6 <ESP01ATDecode+0x44a>
						esp01Flags.bit.ATRESPONSEOK = 1;
 8002ebc:	4a28      	ldr	r2, [pc, #160]	@ (8002f60 <ESP01ATDecode+0x4e4>)
 8002ebe:	7813      	ldrb	r3, [r2, #0]
 8002ec0:	f043 0320 	orr.w	r3, r3, #32
 8002ec4:	7013      	strb	r3, [r2, #0]
					esp01Flags.bit.WIFICONNECTED = 1;
 8002ec6:	4a26      	ldr	r2, [pc, #152]	@ (8002f60 <ESP01ATDecode+0x4e4>)
 8002ec8:	7813      	ldrb	r3, [r2, #0]
 8002eca:	f043 0302 	orr.w	r3, r3, #2
 8002ece:	7013      	strb	r3, [r2, #0]
					if(ESP01ChangeState != NULL)
 8002ed0:	4b26      	ldr	r3, [pc, #152]	@ (8002f6c <ESP01ATDecode+0x4f0>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	f000 808e 	beq.w	8002ff6 <ESP01ATDecode+0x57a>
						ESP01ChangeState(ESP01_WIFI_CONNECTED);
 8002eda:	4b24      	ldr	r3, [pc, #144]	@ (8002f6c <ESP01ATDecode+0x4f0>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2003      	movs	r0, #3
 8002ee0:	4798      	blx	r3
					break;
 8002ee2:	e088      	b.n	8002ff6 <ESP01ATDecode+0x57a>
				case 5://WIFI CONNECTED
					break;
				case 6://WIFI DISCONNECT
				case 7://WIFI DISCONNECTED
					esp01Flags.bit.UDPTCPCONNECTED = 0;
 8002ee4:	4a1e      	ldr	r2, [pc, #120]	@ (8002f60 <ESP01ATDecode+0x4e4>)
 8002ee6:	7813      	ldrb	r3, [r2, #0]
 8002ee8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002eec:	7013      	strb	r3, [r2, #0]
					esp01Flags.bit.WIFICONNECTED = 0;
 8002eee:	4a1c      	ldr	r2, [pc, #112]	@ (8002f60 <ESP01ATDecode+0x4e4>)
 8002ef0:	7813      	ldrb	r3, [r2, #0]
 8002ef2:	f023 0302 	bic.w	r3, r3, #2
 8002ef6:	7013      	strb	r3, [r2, #0]
					if(ESP01ChangeState != NULL)
 8002ef8:	4b1c      	ldr	r3, [pc, #112]	@ (8002f6c <ESP01ATDecode+0x4f0>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d003      	beq.n	8002f08 <ESP01ATDecode+0x48c>
						ESP01ChangeState(ESP01_WIFI_DISCONNECTED);
 8002f00:	4b1a      	ldr	r3, [pc, #104]	@ (8002f6c <ESP01ATDecode+0x4f0>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2000      	movs	r0, #0
 8002f06:	4798      	blx	r3
					if(esp01ATSate == ESP01CWJAPRESPONSE)
 8002f08:	4b13      	ldr	r3, [pc, #76]	@ (8002f58 <ESP01ATDecode+0x4dc>)
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	2b07      	cmp	r3, #7
 8002f0e:	d074      	beq.n	8002ffa <ESP01ATDecode+0x57e>
						break;
					esp01ATSate = ESP01ATHARDRSTSTOP;
 8002f10:	4b11      	ldr	r3, [pc, #68]	@ (8002f58 <ESP01ATDecode+0x4dc>)
 8002f12:	2219      	movs	r2, #25
 8002f14:	701a      	strb	r2, [r3, #0]
					break;
 8002f16:	e075      	b.n	8003004 <ESP01ATDecode+0x588>
				case 8://DISCONNECTED
					esp01Flags.bit.UDPTCPCONNECTED = 0;
 8002f18:	4a11      	ldr	r2, [pc, #68]	@ (8002f60 <ESP01ATDecode+0x4e4>)
 8002f1a:	7813      	ldrb	r3, [r2, #0]
 8002f1c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002f20:	7013      	strb	r3, [r2, #0]
					break;
 8002f22:	e06f      	b.n	8003004 <ESP01ATDecode+0x588>
				case 9://SEND OK
					esp01Flags.bit.SENDINGDATA = 0;
 8002f24:	4a0e      	ldr	r2, [pc, #56]	@ (8002f60 <ESP01ATDecode+0x4e4>)
 8002f26:	7813      	ldrb	r3, [r2, #0]
 8002f28:	f023 0308 	bic.w	r3, r3, #8
 8002f2c:	7013      	strb	r3, [r2, #0]
					if(ESP01ChangeState != NULL)
 8002f2e:	4b0f      	ldr	r3, [pc, #60]	@ (8002f6c <ESP01ATDecode+0x4f0>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d063      	beq.n	8002ffe <ESP01ATDecode+0x582>
						ESP01ChangeState(ESP01_SEND_OK);
 8002f36:	4b0d      	ldr	r3, [pc, #52]	@ (8002f6c <ESP01ATDecode+0x4f0>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	200a      	movs	r0, #10
 8002f3c:	4798      	blx	r3
					break;
 8002f3e:	e05e      	b.n	8002ffe <ESP01ATDecode+0x582>
 8002f40:	20000a70 	.word	0x20000a70
 8002f44:	08014adc 	.word	0x08014adc
 8002f48:	200008d4 	.word	0x200008d4
 8002f4c:	20000a71 	.word	0x20000a71
 8002f50:	200008d2 	.word	0x200008d2
 8002f54:	20000a5a 	.word	0x20000a5a
 8002f58:	2000082a 	.word	0x2000082a
 8002f5c:	20000830 	.word	0x20000830
 8002f60:	2000082c 	.word	0x2000082c
 8002f64:	20000a5e 	.word	0x20000a5e
 8002f68:	20000a5c 	.word	0x20000a5c
 8002f6c:	2000083c 	.word	0x2000083c
				case 10://CONNECT
					esp01TimeoutTask = 0;
 8002f70:	4b8a      	ldr	r3, [pc, #552]	@ (800319c <ESP01ATDecode+0x720>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	601a      	str	r2, [r3, #0]
					esp01Flags.bit.ATRESPONSEOK = 1;
 8002f76:	4a8a      	ldr	r2, [pc, #552]	@ (80031a0 <ESP01ATDecode+0x724>)
 8002f78:	7813      	ldrb	r3, [r2, #0]
 8002f7a:	f043 0320 	orr.w	r3, r3, #32
 8002f7e:	7013      	strb	r3, [r2, #0]
					esp01Flags.bit.UDPTCPCONNECTED = 1;
 8002f80:	4a87      	ldr	r2, [pc, #540]	@ (80031a0 <ESP01ATDecode+0x724>)
 8002f82:	7813      	ldrb	r3, [r2, #0]
 8002f84:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002f88:	7013      	strb	r3, [r2, #0]
					if(ESP01DbgStr != NULL)
 8002f8a:	4b86      	ldr	r3, [pc, #536]	@ (80031a4 <ESP01ATDecode+0x728>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d003      	beq.n	8002f9a <ESP01ATDecode+0x51e>
							ESP01DbgStr("+&UDPTCPCONNECTED=1\n");
 8002f92:	4b84      	ldr	r3, [pc, #528]	@ (80031a4 <ESP01ATDecode+0x728>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4884      	ldr	r0, [pc, #528]	@ (80031a8 <ESP01ATDecode+0x72c>)
 8002f98:	4798      	blx	r3
					if(ESP01ChangeState != NULL)
 8002f9a:	4b84      	ldr	r3, [pc, #528]	@ (80031ac <ESP01ATDecode+0x730>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d02f      	beq.n	8003002 <ESP01ATDecode+0x586>
						ESP01ChangeState(ESP01_UDPTCP_CONNECTED);
 8002fa2:	4b82      	ldr	r3, [pc, #520]	@ (80031ac <ESP01ATDecode+0x730>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2007      	movs	r0, #7
 8002fa8:	4798      	blx	r3
					break;
 8002faa:	e02a      	b.n	8003002 <ESP01ATDecode+0x586>
				case 11://CLOSED
					esp01Flags.bit.UDPTCPCONNECTED = 0;
 8002fac:	4a7c      	ldr	r2, [pc, #496]	@ (80031a0 <ESP01ATDecode+0x724>)
 8002fae:	7813      	ldrb	r3, [r2, #0]
 8002fb0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002fb4:	7013      	strb	r3, [r2, #0]
					break;
 8002fb6:	e025      	b.n	8003004 <ESP01ATDecode+0x588>
				case 13://busy
					esp01Flags.bit.UDPTCPCONNECTED = 0;
 8002fb8:	4a79      	ldr	r2, [pc, #484]	@ (80031a0 <ESP01ATDecode+0x724>)
 8002fba:	7813      	ldrb	r3, [r2, #0]
 8002fbc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002fc0:	7013      	strb	r3, [r2, #0]
					esp01Flags.bit.WIFICONNECTED = 0;
 8002fc2:	4a77      	ldr	r2, [pc, #476]	@ (80031a0 <ESP01ATDecode+0x724>)
 8002fc4:	7813      	ldrb	r3, [r2, #0]
 8002fc6:	f023 0302 	bic.w	r3, r3, #2
 8002fca:	7013      	strb	r3, [r2, #0]
					break;
 8002fcc:	e01a      	b.n	8003004 <ESP01ATDecode+0x588>
				case 15://ready
					esp01Flags.bit.UDPTCPCONNECTED = 0;
 8002fce:	4a74      	ldr	r2, [pc, #464]	@ (80031a0 <ESP01ATDecode+0x724>)
 8002fd0:	7813      	ldrb	r3, [r2, #0]
 8002fd2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002fd6:	7013      	strb	r3, [r2, #0]
					esp01Flags.bit.WIFICONNECTED = 0;
 8002fd8:	4a71      	ldr	r2, [pc, #452]	@ (80031a0 <ESP01ATDecode+0x724>)
 8002fda:	7813      	ldrb	r3, [r2, #0]
 8002fdc:	f023 0302 	bic.w	r3, r3, #2
 8002fe0:	7013      	strb	r3, [r2, #0]
					esp01ATSate = ESP01ATHARDRSTSTOP;
 8002fe2:	4b73      	ldr	r3, [pc, #460]	@ (80031b0 <ESP01ATDecode+0x734>)
 8002fe4:	2219      	movs	r2, #25
 8002fe6:	701a      	strb	r2, [r3, #0]
					break;
 8002fe8:	e00c      	b.n	8003004 <ESP01ATDecode+0x588>
					break;
 8002fea:	bf00      	nop
 8002fec:	e152      	b.n	8003294 <ESP01ATDecode+0x818>
					break;
 8002fee:	bf00      	nop
 8002ff0:	e150      	b.n	8003294 <ESP01ATDecode+0x818>
					break;
 8002ff2:	bf00      	nop
 8002ff4:	e14e      	b.n	8003294 <ESP01ATDecode+0x818>
					break;
 8002ff6:	bf00      	nop
 8002ff8:	e14c      	b.n	8003294 <ESP01ATDecode+0x818>
						break;
 8002ffa:	bf00      	nop
 8002ffc:	e14a      	b.n	8003294 <ESP01ATDecode+0x818>
					break;
 8002ffe:	bf00      	nop
 8003000:	e148      	b.n	8003294 <ESP01ATDecode+0x818>
					break;
 8003002:	bf00      	nop
					break;
				case 17://busy s
					break;
				}
			}
			break;
 8003004:	e146      	b.n	8003294 <ESP01ATDecode+0x818>
		case 5://CIFR,STAIP
			if(value == ','){
 8003006:	797b      	ldrb	r3, [r7, #5]
 8003008:	2b2c      	cmp	r3, #44	@ 0x2c
 800300a:	d10c      	bne.n	8003026 <ESP01ATDecode+0x5aa>
				esp01HState = 6;
 800300c:	4b69      	ldr	r3, [pc, #420]	@ (80031b4 <ESP01ATDecode+0x738>)
 800300e:	2206      	movs	r2, #6
 8003010:	701a      	strb	r2, [r3, #0]
				if(ESP01DbgStr != NULL)
 8003012:	4b64      	ldr	r3, [pc, #400]	@ (80031a4 <ESP01ATDecode+0x728>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	2b00      	cmp	r3, #0
 8003018:	f000 813e 	beq.w	8003298 <ESP01ATDecode+0x81c>
					ESP01DbgStr("+&DBGRESPONSE CIFSR\n");
 800301c:	4b61      	ldr	r3, [pc, #388]	@ (80031a4 <ESP01ATDecode+0x728>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4865      	ldr	r0, [pc, #404]	@ (80031b8 <ESP01ATDecode+0x73c>)
 8003022:	4798      	blx	r3
				esp01HState = 0;
				esp01irRXAT--;
				if(ESP01DbgStr != NULL)
					ESP01DbgStr("+&DBGERROR CIFSR 5\n");
			}
			break;
 8003024:	e138      	b.n	8003298 <ESP01ATDecode+0x81c>
				esp01HState = 0;
 8003026:	4b63      	ldr	r3, [pc, #396]	@ (80031b4 <ESP01ATDecode+0x738>)
 8003028:	2200      	movs	r2, #0
 800302a:	701a      	strb	r2, [r3, #0]
				esp01irRXAT--;
 800302c:	4b63      	ldr	r3, [pc, #396]	@ (80031bc <ESP01ATDecode+0x740>)
 800302e:	881b      	ldrh	r3, [r3, #0]
 8003030:	3b01      	subs	r3, #1
 8003032:	b29a      	uxth	r2, r3
 8003034:	4b61      	ldr	r3, [pc, #388]	@ (80031bc <ESP01ATDecode+0x740>)
 8003036:	801a      	strh	r2, [r3, #0]
				if(ESP01DbgStr != NULL)
 8003038:	4b5a      	ldr	r3, [pc, #360]	@ (80031a4 <ESP01ATDecode+0x728>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2b00      	cmp	r3, #0
 800303e:	f000 812b 	beq.w	8003298 <ESP01ATDecode+0x81c>
					ESP01DbgStr("+&DBGERROR CIFSR 5\n");
 8003042:	4b58      	ldr	r3, [pc, #352]	@ (80031a4 <ESP01ATDecode+0x728>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	485e      	ldr	r0, [pc, #376]	@ (80031c0 <ESP01ATDecode+0x744>)
 8003048:	4798      	blx	r3
			break;
 800304a:	e125      	b.n	8003298 <ESP01ATDecode+0x81c>
		case 6:
			if(value == '\"'){
 800304c:	797b      	ldrb	r3, [r7, #5]
 800304e:	2b22      	cmp	r3, #34	@ 0x22
 8003050:	f040 8124 	bne.w	800329c <ESP01ATDecode+0x820>
				esp01HState = 7;
 8003054:	4b57      	ldr	r3, [pc, #348]	@ (80031b4 <ESP01ATDecode+0x738>)
 8003056:	2207      	movs	r2, #7
 8003058:	701a      	strb	r2, [r3, #0]
				esp01nBytes = 0;
 800305a:	4b5a      	ldr	r3, [pc, #360]	@ (80031c4 <ESP01ATDecode+0x748>)
 800305c:	2200      	movs	r2, #0
 800305e:	801a      	strh	r2, [r3, #0]
			}
			break;
 8003060:	e11c      	b.n	800329c <ESP01ATDecode+0x820>
		case 7:
			if(value == '\"' || esp01nBytes==16)
 8003062:	797b      	ldrb	r3, [r7, #5]
 8003064:	2b22      	cmp	r3, #34	@ 0x22
 8003066:	d003      	beq.n	8003070 <ESP01ATDecode+0x5f4>
 8003068:	4b56      	ldr	r3, [pc, #344]	@ (80031c4 <ESP01ATDecode+0x748>)
 800306a:	881b      	ldrh	r3, [r3, #0]
 800306c:	2b10      	cmp	r3, #16
 800306e:	d103      	bne.n	8003078 <ESP01ATDecode+0x5fc>
				esp01HState = 8;
 8003070:	4b50      	ldr	r3, [pc, #320]	@ (80031b4 <ESP01ATDecode+0x738>)
 8003072:	2208      	movs	r2, #8
 8003074:	701a      	strb	r2, [r3, #0]
			else
				esp01LocalIP[esp01nBytes++] = value;
			break;
 8003076:	e116      	b.n	80032a6 <ESP01ATDecode+0x82a>
				esp01LocalIP[esp01nBytes++] = value;
 8003078:	4b52      	ldr	r3, [pc, #328]	@ (80031c4 <ESP01ATDecode+0x748>)
 800307a:	881b      	ldrh	r3, [r3, #0]
 800307c:	1c5a      	adds	r2, r3, #1
 800307e:	b291      	uxth	r1, r2
 8003080:	4a50      	ldr	r2, [pc, #320]	@ (80031c4 <ESP01ATDecode+0x748>)
 8003082:	8011      	strh	r1, [r2, #0]
 8003084:	4619      	mov	r1, r3
 8003086:	4a50      	ldr	r2, [pc, #320]	@ (80031c8 <ESP01ATDecode+0x74c>)
 8003088:	797b      	ldrb	r3, [r7, #5]
 800308a:	5453      	strb	r3, [r2, r1]
			break;
 800308c:	e10b      	b.n	80032a6 <ESP01ATDecode+0x82a>
		case 8:
			if(value == '\n'){
 800308e:	797b      	ldrb	r3, [r7, #5]
 8003090:	2b0a      	cmp	r3, #10
 8003092:	f040 8105 	bne.w	80032a0 <ESP01ATDecode+0x824>
				esp01HState = 0;
 8003096:	4b47      	ldr	r3, [pc, #284]	@ (80031b4 <ESP01ATDecode+0x738>)
 8003098:	2200      	movs	r2, #0
 800309a:	701a      	strb	r2, [r3, #0]
				if(esp01nBytes < 16){
 800309c:	4b49      	ldr	r3, [pc, #292]	@ (80031c4 <ESP01ATDecode+0x748>)
 800309e:	881b      	ldrh	r3, [r3, #0]
 80030a0:	2b0f      	cmp	r3, #15
 80030a2:	d80e      	bhi.n	80030c2 <ESP01ATDecode+0x646>
					esp01LocalIP[esp01nBytes] = '\0';
 80030a4:	4b47      	ldr	r3, [pc, #284]	@ (80031c4 <ESP01ATDecode+0x748>)
 80030a6:	881b      	ldrh	r3, [r3, #0]
 80030a8:	461a      	mov	r2, r3
 80030aa:	4b47      	ldr	r3, [pc, #284]	@ (80031c8 <ESP01ATDecode+0x74c>)
 80030ac:	2100      	movs	r1, #0
 80030ae:	5499      	strb	r1, [r3, r2]
					esp01Flags.bit.ATRESPONSEOK = 1;
 80030b0:	4a3b      	ldr	r2, [pc, #236]	@ (80031a0 <ESP01ATDecode+0x724>)
 80030b2:	7813      	ldrb	r3, [r2, #0]
 80030b4:	f043 0320 	orr.w	r3, r3, #32
 80030b8:	7013      	strb	r3, [r2, #0]
					esp01TimeoutTask = 0;
 80030ba:	4b38      	ldr	r3, [pc, #224]	@ (800319c <ESP01ATDecode+0x720>)
 80030bc:	2200      	movs	r2, #0
 80030be:	601a      	str	r2, [r3, #0]
 80030c0:	e002      	b.n	80030c8 <ESP01ATDecode+0x64c>
				}
				else
					esp01LocalIP[0] = '\0';
 80030c2:	4b41      	ldr	r3, [pc, #260]	@ (80031c8 <ESP01ATDecode+0x74c>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	701a      	strb	r2, [r3, #0]
				if(ESP01ChangeState != NULL)
 80030c8:	4b38      	ldr	r3, [pc, #224]	@ (80031ac <ESP01ATDecode+0x730>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	f000 80e7 	beq.w	80032a0 <ESP01ATDecode+0x824>
					ESP01ChangeState(ESP01_WIFI_NEW_IP);
 80030d2:	4b36      	ldr	r3, [pc, #216]	@ (80031ac <ESP01ATDecode+0x730>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	2004      	movs	r0, #4
 80030d8:	4798      	blx	r3
			}
			break;
 80030da:	e0e1      	b.n	80032a0 <ESP01ATDecode+0x824>
		case 10://IPD
			if(value == ','){
 80030dc:	797b      	ldrb	r3, [r7, #5]
 80030de:	2b2c      	cmp	r3, #44	@ 0x2c
 80030e0:	d106      	bne.n	80030f0 <ESP01ATDecode+0x674>
				esp01HState = 11;
 80030e2:	4b34      	ldr	r3, [pc, #208]	@ (80031b4 <ESP01ATDecode+0x738>)
 80030e4:	220b      	movs	r2, #11
 80030e6:	701a      	strb	r2, [r3, #0]
				esp01nBytes = 0;
 80030e8:	4b36      	ldr	r3, [pc, #216]	@ (80031c4 <ESP01ATDecode+0x748>)
 80030ea:	2200      	movs	r2, #0
 80030ec:	801a      	strh	r2, [r3, #0]
			}
			else{
				esp01HState = 0;
				esp01irRXAT--;
			}
			break;
 80030ee:	e0da      	b.n	80032a6 <ESP01ATDecode+0x82a>
				esp01HState = 0;
 80030f0:	4b30      	ldr	r3, [pc, #192]	@ (80031b4 <ESP01ATDecode+0x738>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	701a      	strb	r2, [r3, #0]
				esp01irRXAT--;
 80030f6:	4b31      	ldr	r3, [pc, #196]	@ (80031bc <ESP01ATDecode+0x740>)
 80030f8:	881b      	ldrh	r3, [r3, #0]
 80030fa:	3b01      	subs	r3, #1
 80030fc:	b29a      	uxth	r2, r3
 80030fe:	4b2f      	ldr	r3, [pc, #188]	@ (80031bc <ESP01ATDecode+0x740>)
 8003100:	801a      	strh	r2, [r3, #0]
			break;
 8003102:	e0d0      	b.n	80032a6 <ESP01ATDecode+0x82a>
		case 11:
			if(value == ':')
 8003104:	797b      	ldrb	r3, [r7, #5]
 8003106:	2b3a      	cmp	r3, #58	@ 0x3a
 8003108:	d103      	bne.n	8003112 <ESP01ATDecode+0x696>
				esp01HState = 12;
 800310a:	4b2a      	ldr	r3, [pc, #168]	@ (80031b4 <ESP01ATDecode+0x738>)
 800310c:	220c      	movs	r2, #12
 800310e:	701a      	strb	r2, [r3, #0]
				else{
					esp01nBytes *= 10;
					esp01nBytes += (value - '0');
				}
			}
			break;
 8003110:	e0c9      	b.n	80032a6 <ESP01ATDecode+0x82a>
				if(value<'0' || value>'9'){
 8003112:	797b      	ldrb	r3, [r7, #5]
 8003114:	2b2f      	cmp	r3, #47	@ 0x2f
 8003116:	d902      	bls.n	800311e <ESP01ATDecode+0x6a2>
 8003118:	797b      	ldrb	r3, [r7, #5]
 800311a:	2b39      	cmp	r3, #57	@ 0x39
 800311c:	d909      	bls.n	8003132 <ESP01ATDecode+0x6b6>
					esp01HState = 0;
 800311e:	4b25      	ldr	r3, [pc, #148]	@ (80031b4 <ESP01ATDecode+0x738>)
 8003120:	2200      	movs	r2, #0
 8003122:	701a      	strb	r2, [r3, #0]
					esp01irRXAT--;
 8003124:	4b25      	ldr	r3, [pc, #148]	@ (80031bc <ESP01ATDecode+0x740>)
 8003126:	881b      	ldrh	r3, [r3, #0]
 8003128:	3b01      	subs	r3, #1
 800312a:	b29a      	uxth	r2, r3
 800312c:	4b23      	ldr	r3, [pc, #140]	@ (80031bc <ESP01ATDecode+0x740>)
 800312e:	801a      	strh	r2, [r3, #0]
			break;
 8003130:	e0b9      	b.n	80032a6 <ESP01ATDecode+0x82a>
					esp01nBytes *= 10;
 8003132:	4b24      	ldr	r3, [pc, #144]	@ (80031c4 <ESP01ATDecode+0x748>)
 8003134:	881b      	ldrh	r3, [r3, #0]
 8003136:	461a      	mov	r2, r3
 8003138:	0092      	lsls	r2, r2, #2
 800313a:	4413      	add	r3, r2
 800313c:	005b      	lsls	r3, r3, #1
 800313e:	b29a      	uxth	r2, r3
 8003140:	4b20      	ldr	r3, [pc, #128]	@ (80031c4 <ESP01ATDecode+0x748>)
 8003142:	801a      	strh	r2, [r3, #0]
					esp01nBytes += (value - '0');
 8003144:	797b      	ldrb	r3, [r7, #5]
 8003146:	b29a      	uxth	r2, r3
 8003148:	4b1e      	ldr	r3, [pc, #120]	@ (80031c4 <ESP01ATDecode+0x748>)
 800314a:	881b      	ldrh	r3, [r3, #0]
 800314c:	4413      	add	r3, r2
 800314e:	b29b      	uxth	r3, r3
 8003150:	3b30      	subs	r3, #48	@ 0x30
 8003152:	b29a      	uxth	r2, r3
 8003154:	4b1b      	ldr	r3, [pc, #108]	@ (80031c4 <ESP01ATDecode+0x748>)
 8003156:	801a      	strh	r2, [r3, #0]
			break;
 8003158:	e0a5      	b.n	80032a6 <ESP01ATDecode+0x82a>
		case 12:
			if(esp01Handle.WriteByteToBufRX != NULL)
 800315a:	4b1c      	ldr	r3, [pc, #112]	@ (80031cc <ESP01ATDecode+0x750>)
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d004      	beq.n	800316c <ESP01ATDecode+0x6f0>
				esp01Handle.WriteByteToBufRX(value);
 8003162:	4b1a      	ldr	r3, [pc, #104]	@ (80031cc <ESP01ATDecode+0x750>)
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	797a      	ldrb	r2, [r7, #5]
 8003168:	4610      	mov	r0, r2
 800316a:	4798      	blx	r3
			esp01nBytes--;
 800316c:	4b15      	ldr	r3, [pc, #84]	@ (80031c4 <ESP01ATDecode+0x748>)
 800316e:	881b      	ldrh	r3, [r3, #0]
 8003170:	3b01      	subs	r3, #1
 8003172:	b29a      	uxth	r2, r3
 8003174:	4b13      	ldr	r3, [pc, #76]	@ (80031c4 <ESP01ATDecode+0x748>)
 8003176:	801a      	strh	r2, [r3, #0]
			if(!esp01nBytes){
 8003178:	4b12      	ldr	r3, [pc, #72]	@ (80031c4 <ESP01ATDecode+0x748>)
 800317a:	881b      	ldrh	r3, [r3, #0]
 800317c:	2b00      	cmp	r3, #0
 800317e:	f040 8091 	bne.w	80032a4 <ESP01ATDecode+0x828>
				esp01HState = 0;
 8003182:	4b0c      	ldr	r3, [pc, #48]	@ (80031b4 <ESP01ATDecode+0x738>)
 8003184:	2200      	movs	r2, #0
 8003186:	701a      	strb	r2, [r3, #0]
				if(ESP01DbgStr != NULL)
 8003188:	4b06      	ldr	r3, [pc, #24]	@ (80031a4 <ESP01ATDecode+0x728>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2b00      	cmp	r3, #0
 800318e:	f000 8089 	beq.w	80032a4 <ESP01ATDecode+0x828>
					ESP01DbgStr("+&DBGRESPONSE IPD\n");
 8003192:	4b04      	ldr	r3, [pc, #16]	@ (80031a4 <ESP01ATDecode+0x728>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	480e      	ldr	r0, [pc, #56]	@ (80031d0 <ESP01ATDecode+0x754>)
 8003198:	4798      	blx	r3
			}
			break;
 800319a:	e083      	b.n	80032a4 <ESP01ATDecode+0x828>
 800319c:	20000830 	.word	0x20000830
 80031a0:	2000082c 	.word	0x2000082c
 80031a4:	20000840 	.word	0x20000840
 80031a8:	08013348 	.word	0x08013348
 80031ac:	2000083c 	.word	0x2000083c
 80031b0:	2000082a 	.word	0x2000082a
 80031b4:	200008d2 	.word	0x200008d2
 80031b8:	08013360 	.word	0x08013360
 80031bc:	20000a5a 	.word	0x20000a5a
 80031c0:	08013378 	.word	0x08013378
 80031c4:	200008d4 	.word	0x200008d4
 80031c8:	200008bc 	.word	0x200008bc
 80031cc:	20000a64 	.word	0x20000a64
 80031d0:	0801338c 	.word	0x0801338c
		case 20:
			if (value == '&' || value == '\r' || ssid_idx >= MAX_SSID_LEN-1) {
 80031d4:	797b      	ldrb	r3, [r7, #5]
 80031d6:	2b26      	cmp	r3, #38	@ 0x26
 80031d8:	d006      	beq.n	80031e8 <ESP01ATDecode+0x76c>
 80031da:	797b      	ldrb	r3, [r7, #5]
 80031dc:	2b0d      	cmp	r3, #13
 80031de:	d003      	beq.n	80031e8 <ESP01ATDecode+0x76c>
 80031e0:	4b3c      	ldr	r3, [pc, #240]	@ (80032d4 <ESP01ATDecode+0x858>)
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	2b1e      	cmp	r3, #30
 80031e6:	d914      	bls.n	8003212 <ESP01ATDecode+0x796>
				// fin de SSID
				ssid_buffer[ssid_idx] = '\0';
 80031e8:	4b3a      	ldr	r3, [pc, #232]	@ (80032d4 <ESP01ATDecode+0x858>)
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	461a      	mov	r2, r3
 80031ee:	4b3a      	ldr	r3, [pc, #232]	@ (80032d8 <ESP01ATDecode+0x85c>)
 80031f0:	2100      	movs	r1, #0
 80031f2:	5499      	strb	r1, [r3, r2]
				ssid_idx = 0;
 80031f4:	4b37      	ldr	r3, [pc, #220]	@ (80032d4 <ESP01ATDecode+0x858>)
 80031f6:	2200      	movs	r2, #0
 80031f8:	701a      	strb	r2, [r3, #0]
				esp01HState = 0;          // volvemos a buscar respuestas
 80031fa:	4b38      	ldr	r3, [pc, #224]	@ (80032dc <ESP01ATDecode+0x860>)
 80031fc:	2200      	movs	r2, #0
 80031fe:	701a      	strb	r2, [r3, #0]
				// aquí puedes, por ejemplo:
				ESP01DbgStr("SSID:");
 8003200:	4b37      	ldr	r3, [pc, #220]	@ (80032e0 <ESP01ATDecode+0x864>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4837      	ldr	r0, [pc, #220]	@ (80032e4 <ESP01ATDecode+0x868>)
 8003206:	4798      	blx	r3
				ESP01DbgStr(&ssid_buffer[0]);
 8003208:	4b35      	ldr	r3, [pc, #212]	@ (80032e0 <ESP01ATDecode+0x864>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4832      	ldr	r0, [pc, #200]	@ (80032d8 <ESP01ATDecode+0x85c>)
 800320e:	4798      	blx	r3
			} else {
				ssid_buffer[ssid_idx++] = value;
			}
			break;
 8003210:	e049      	b.n	80032a6 <ESP01ATDecode+0x82a>
				ssid_buffer[ssid_idx++] = value;
 8003212:	4b30      	ldr	r3, [pc, #192]	@ (80032d4 <ESP01ATDecode+0x858>)
 8003214:	781b      	ldrb	r3, [r3, #0]
 8003216:	1c5a      	adds	r2, r3, #1
 8003218:	b2d1      	uxtb	r1, r2
 800321a:	4a2e      	ldr	r2, [pc, #184]	@ (80032d4 <ESP01ATDecode+0x858>)
 800321c:	7011      	strb	r1, [r2, #0]
 800321e:	4619      	mov	r1, r3
 8003220:	4a2d      	ldr	r2, [pc, #180]	@ (80032d8 <ESP01ATDecode+0x85c>)
 8003222:	797b      	ldrb	r3, [r7, #5]
 8003224:	5453      	strb	r3, [r2, r1]
			break;
 8003226:	e03e      	b.n	80032a6 <ESP01ATDecode+0x82a>
		case 21:
			if (value == '&' || value == ' ' || value == '\r' || pass_idx >= MAX_PASS_LEN-1) {
 8003228:	797b      	ldrb	r3, [r7, #5]
 800322a:	2b26      	cmp	r3, #38	@ 0x26
 800322c:	d009      	beq.n	8003242 <ESP01ATDecode+0x7c6>
 800322e:	797b      	ldrb	r3, [r7, #5]
 8003230:	2b20      	cmp	r3, #32
 8003232:	d006      	beq.n	8003242 <ESP01ATDecode+0x7c6>
 8003234:	797b      	ldrb	r3, [r7, #5]
 8003236:	2b0d      	cmp	r3, #13
 8003238:	d003      	beq.n	8003242 <ESP01ATDecode+0x7c6>
 800323a:	4b2b      	ldr	r3, [pc, #172]	@ (80032e8 <ESP01ATDecode+0x86c>)
 800323c:	781b      	ldrb	r3, [r3, #0]
 800323e:	2b1e      	cmp	r3, #30
 8003240:	d914      	bls.n	800326c <ESP01ATDecode+0x7f0>
				// fin de PASS
				pass_buffer[pass_idx] = '\0';
 8003242:	4b29      	ldr	r3, [pc, #164]	@ (80032e8 <ESP01ATDecode+0x86c>)
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	461a      	mov	r2, r3
 8003248:	4b28      	ldr	r3, [pc, #160]	@ (80032ec <ESP01ATDecode+0x870>)
 800324a:	2100      	movs	r1, #0
 800324c:	5499      	strb	r1, [r3, r2]
				pass_idx = 0;
 800324e:	4b26      	ldr	r3, [pc, #152]	@ (80032e8 <ESP01ATDecode+0x86c>)
 8003250:	2200      	movs	r2, #0
 8003252:	701a      	strb	r2, [r3, #0]
				esp01HState = 0;          // volvemos a buscar respuestas
 8003254:	4b21      	ldr	r3, [pc, #132]	@ (80032dc <ESP01ATDecode+0x860>)
 8003256:	2200      	movs	r2, #0
 8003258:	701a      	strb	r2, [r3, #0]
				ESP01DbgStr("PASS:");
 800325a:	4b21      	ldr	r3, [pc, #132]	@ (80032e0 <ESP01ATDecode+0x864>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4824      	ldr	r0, [pc, #144]	@ (80032f0 <ESP01ATDecode+0x874>)
 8003260:	4798      	blx	r3
				ESP01DbgStr(&pass_buffer[0]);
 8003262:	4b1f      	ldr	r3, [pc, #124]	@ (80032e0 <ESP01ATDecode+0x864>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4821      	ldr	r0, [pc, #132]	@ (80032ec <ESP01ATDecode+0x870>)
 8003268:	4798      	blx	r3
			} else {
				pass_buffer[pass_idx++] = value;
			}
			break;
 800326a:	e01c      	b.n	80032a6 <ESP01ATDecode+0x82a>
				pass_buffer[pass_idx++] = value;
 800326c:	4b1e      	ldr	r3, [pc, #120]	@ (80032e8 <ESP01ATDecode+0x86c>)
 800326e:	781b      	ldrb	r3, [r3, #0]
 8003270:	1c5a      	adds	r2, r3, #1
 8003272:	b2d1      	uxtb	r1, r2
 8003274:	4a1c      	ldr	r2, [pc, #112]	@ (80032e8 <ESP01ATDecode+0x86c>)
 8003276:	7011      	strb	r1, [r2, #0]
 8003278:	4619      	mov	r1, r3
 800327a:	4a1c      	ldr	r2, [pc, #112]	@ (80032ec <ESP01ATDecode+0x870>)
 800327c:	797b      	ldrb	r3, [r7, #5]
 800327e:	5453      	strb	r3, [r2, r1]
			break;
 8003280:	e011      	b.n	80032a6 <ESP01ATDecode+0x82a>
		default:
			esp01HState = 0;
 8003282:	4b16      	ldr	r3, [pc, #88]	@ (80032dc <ESP01ATDecode+0x860>)
 8003284:	2200      	movs	r2, #0
 8003286:	701a      	strb	r2, [r3, #0]
			esp01TimeoutDataRx = 0;
 8003288:	4b1a      	ldr	r3, [pc, #104]	@ (80032f4 <ESP01ATDecode+0x878>)
 800328a:	2200      	movs	r2, #0
 800328c:	601a      	str	r2, [r3, #0]
 800328e:	e00a      	b.n	80032a6 <ESP01ATDecode+0x82a>
			break;
 8003290:	bf00      	nop
 8003292:	e008      	b.n	80032a6 <ESP01ATDecode+0x82a>
			break;
 8003294:	bf00      	nop
 8003296:	e006      	b.n	80032a6 <ESP01ATDecode+0x82a>
			break;
 8003298:	bf00      	nop
 800329a:	e004      	b.n	80032a6 <ESP01ATDecode+0x82a>
			break;
 800329c:	bf00      	nop
 800329e:	e002      	b.n	80032a6 <ESP01ATDecode+0x82a>
			break;
 80032a0:	bf00      	nop
 80032a2:	e000      	b.n	80032a6 <ESP01ATDecode+0x82a>
			break;
 80032a4:	bf00      	nop
		}

		esp01irRXAT++;
 80032a6:	4b14      	ldr	r3, [pc, #80]	@ (80032f8 <ESP01ATDecode+0x87c>)
 80032a8:	881b      	ldrh	r3, [r3, #0]
 80032aa:	3301      	adds	r3, #1
 80032ac:	b29a      	uxth	r2, r3
 80032ae:	4b12      	ldr	r3, [pc, #72]	@ (80032f8 <ESP01ATDecode+0x87c>)
 80032b0:	801a      	strh	r2, [r3, #0]
		if(esp01irRXAT == ESP01RXBUFAT)
 80032b2:	4b11      	ldr	r3, [pc, #68]	@ (80032f8 <ESP01ATDecode+0x87c>)
 80032b4:	881b      	ldrh	r3, [r3, #0]
 80032b6:	2b80      	cmp	r3, #128	@ 0x80
 80032b8:	d102      	bne.n	80032c0 <ESP01ATDecode+0x844>
			esp01irRXAT = 0;
 80032ba:	4b0f      	ldr	r3, [pc, #60]	@ (80032f8 <ESP01ATDecode+0x87c>)
 80032bc:	2200      	movs	r2, #0
 80032be:	801a      	strh	r2, [r3, #0]
	while(esp01irRXAT != i){
 80032c0:	4b0d      	ldr	r3, [pc, #52]	@ (80032f8 <ESP01ATDecode+0x87c>)
 80032c2:	881b      	ldrh	r3, [r3, #0]
 80032c4:	88fa      	ldrh	r2, [r7, #6]
 80032c6:	429a      	cmp	r2, r3
 80032c8:	f47f abf5 	bne.w	8002ab6 <ESP01ATDecode+0x3a>
	}
}
 80032cc:	3708      	adds	r7, #8
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	20000ab4 	.word	0x20000ab4
 80032d8:	20000a74 	.word	0x20000a74
 80032dc:	200008d2 	.word	0x200008d2
 80032e0:	20000840 	.word	0x20000840
 80032e4:	080133a0 	.word	0x080133a0
 80032e8:	20000ab5 	.word	0x20000ab5
 80032ec:	20000a94 	.word	0x20000a94
 80032f0:	080133a8 	.word	0x080133a8
 80032f4:	20000834 	.word	0x20000834
 80032f8:	20000a5a 	.word	0x20000a5a

080032fc <ESP01DOConnection>:

static void ESP01DOConnection(){
 80032fc:	b580      	push	{r7, lr}
 80032fe:	af00      	add	r7, sp, #0
	esp01TimeoutTask = 100;
 8003300:	4b9f      	ldr	r3, [pc, #636]	@ (8003580 <ESP01DOConnection+0x284>)
 8003302:	2264      	movs	r2, #100	@ 0x64
 8003304:	601a      	str	r2, [r3, #0]
	switch(esp01ATSate){
 8003306:	4b9f      	ldr	r3, [pc, #636]	@ (8003584 <ESP01DOConnection+0x288>)
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	2b19      	cmp	r3, #25
 800330c:	f200 8307 	bhi.w	800391e <ESP01DOConnection+0x622>
 8003310:	a201      	add	r2, pc, #4	@ (adr r2, 8003318 <ESP01DOConnection+0x1c>)
 8003312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003316:	bf00      	nop
 8003318:	08003381 	.word	0x08003381
 800331c:	080033df 	.word	0x080033df
 8003320:	08003431 	.word	0x08003431
 8003324:	0800344f 	.word	0x0800344f
 8003328:	0800347d 	.word	0x0800347d
 800332c:	0800349b 	.word	0x0800349b
 8003330:	080034d7 	.word	0x080034d7
 8003334:	0800355d 	.word	0x0800355d
 8003338:	080035dd 	.word	0x080035dd
 800333c:	0800360b 	.word	0x0800360b
 8003340:	08003645 	.word	0x08003645
 8003344:	0800366d 	.word	0x0800366d
 8003348:	08003701 	.word	0x08003701
 800334c:	0800371f 	.word	0x0800371f
 8003350:	08003753 	.word	0x08003753
 8003354:	08003777 	.word	0x08003777
 8003358:	0800379d 	.word	0x0800379d
 800335c:	080037bb 	.word	0x080037bb
 8003360:	080037e1 	.word	0x080037e1
 8003364:	08003811 	.word	0x08003811
 8003368:	08003891 	.word	0x08003891
 800336c:	080038df 	.word	0x080038df
 8003370:	08003911 	.word	0x08003911
 8003374:	08003389 	.word	0x08003389
 8003378:	080033a9 	.word	0x080033a9
 800337c:	080033d1 	.word	0x080033d1
	case ESP01ATIDLE:
		esp01TimeoutTask = 0;
 8003380:	4b7f      	ldr	r3, [pc, #508]	@ (8003580 <ESP01DOConnection+0x284>)
 8003382:	2200      	movs	r2, #0
 8003384:	601a      	str	r2, [r3, #0]
		break;
 8003386:	e2ca      	b.n	800391e <ESP01DOConnection+0x622>
	case ESP01ATHARDRST0:
		esp01Handle.DoCHPD(0);
 8003388:	4b7f      	ldr	r3, [pc, #508]	@ (8003588 <ESP01DOConnection+0x28c>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	2000      	movs	r0, #0
 800338e:	4798      	blx	r3
		if(ESP01DbgStr != NULL)
 8003390:	4b7e      	ldr	r3, [pc, #504]	@ (800358c <ESP01DOConnection+0x290>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d003      	beq.n	80033a0 <ESP01DOConnection+0xa4>
			ESP01DbgStr("+&DBGESP01HARDRESET0\n");
 8003398:	4b7c      	ldr	r3, [pc, #496]	@ (800358c <ESP01DOConnection+0x290>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	487c      	ldr	r0, [pc, #496]	@ (8003590 <ESP01DOConnection+0x294>)
 800339e:	4798      	blx	r3
		esp01ATSate = ESP01ATHARDRST1;
 80033a0:	4b78      	ldr	r3, [pc, #480]	@ (8003584 <ESP01DOConnection+0x288>)
 80033a2:	2218      	movs	r2, #24
 80033a4:	701a      	strb	r2, [r3, #0]
		break;
 80033a6:	e2ba      	b.n	800391e <ESP01DOConnection+0x622>
	case ESP01ATHARDRST1:
		esp01Handle.DoCHPD(1);
 80033a8:	4b77      	ldr	r3, [pc, #476]	@ (8003588 <ESP01DOConnection+0x28c>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	2001      	movs	r0, #1
 80033ae:	4798      	blx	r3
		if(ESP01DbgStr != NULL)
 80033b0:	4b76      	ldr	r3, [pc, #472]	@ (800358c <ESP01DOConnection+0x290>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d003      	beq.n	80033c0 <ESP01DOConnection+0xc4>
			ESP01DbgStr("+&DBGESP01HARDRESET1\n");
 80033b8:	4b74      	ldr	r3, [pc, #464]	@ (800358c <ESP01DOConnection+0x290>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4875      	ldr	r0, [pc, #468]	@ (8003594 <ESP01DOConnection+0x298>)
 80033be:	4798      	blx	r3
		esp01ATSate = ESP01ATHARDRSTSTOP;
 80033c0:	4b70      	ldr	r3, [pc, #448]	@ (8003584 <ESP01DOConnection+0x288>)
 80033c2:	2219      	movs	r2, #25
 80033c4:	701a      	strb	r2, [r3, #0]
		esp01TimeoutTask = 500;
 80033c6:	4b6e      	ldr	r3, [pc, #440]	@ (8003580 <ESP01DOConnection+0x284>)
 80033c8:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80033cc:	601a      	str	r2, [r3, #0]
		break;
 80033ce:	e2a6      	b.n	800391e <ESP01DOConnection+0x622>
	case ESP01ATHARDRSTSTOP:
		esp01ATSate = ESP01ATAT;
 80033d0:	4b6c      	ldr	r3, [pc, #432]	@ (8003584 <ESP01DOConnection+0x288>)
 80033d2:	2201      	movs	r2, #1
 80033d4:	701a      	strb	r2, [r3, #0]
		esp01TriesAT = 0;
 80033d6:	4b70      	ldr	r3, [pc, #448]	@ (8003598 <ESP01DOConnection+0x29c>)
 80033d8:	2200      	movs	r2, #0
 80033da:	701a      	strb	r2, [r3, #0]
		break;
 80033dc:	e29f      	b.n	800391e <ESP01DOConnection+0x622>
	case ESP01ATAT:
		if(esp01TriesAT){
 80033de:	4b6e      	ldr	r3, [pc, #440]	@ (8003598 <ESP01DOConnection+0x29c>)
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d00d      	beq.n	8003402 <ESP01DOConnection+0x106>
			esp01TriesAT--;
 80033e6:	4b6c      	ldr	r3, [pc, #432]	@ (8003598 <ESP01DOConnection+0x29c>)
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	3b01      	subs	r3, #1
 80033ec:	b2da      	uxtb	r2, r3
 80033ee:	4b6a      	ldr	r3, [pc, #424]	@ (8003598 <ESP01DOConnection+0x29c>)
 80033f0:	701a      	strb	r2, [r3, #0]
			if(!esp01TriesAT){
 80033f2:	4b69      	ldr	r3, [pc, #420]	@ (8003598 <ESP01DOConnection+0x29c>)
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d106      	bne.n	8003408 <ESP01DOConnection+0x10c>
				esp01ATSate = ESP01ATHARDRST0;
 80033fa:	4b62      	ldr	r3, [pc, #392]	@ (8003584 <ESP01DOConnection+0x288>)
 80033fc:	2217      	movs	r2, #23
 80033fe:	701a      	strb	r2, [r3, #0]
				break;
 8003400:	e28d      	b.n	800391e <ESP01DOConnection+0x622>
			}
		}
		else
			esp01TriesAT = 4;
 8003402:	4b65      	ldr	r3, [pc, #404]	@ (8003598 <ESP01DOConnection+0x29c>)
 8003404:	2204      	movs	r2, #4
 8003406:	701a      	strb	r2, [r3, #0]

		esp01Flags.bit.ATRESPONSEOK = 0;
 8003408:	4a64      	ldr	r2, [pc, #400]	@ (800359c <ESP01DOConnection+0x2a0>)
 800340a:	7813      	ldrb	r3, [r2, #0]
 800340c:	f023 0320 	bic.w	r3, r3, #32
 8003410:	7013      	strb	r3, [r2, #0]
		ESP01StrToBufTX(ATAT);
 8003412:	4863      	ldr	r0, [pc, #396]	@ (80035a0 <ESP01DOConnection+0x2a4>)
 8003414:	f000 fb26 	bl	8003a64 <ESP01StrToBufTX>
		if(ESP01DbgStr != NULL)
 8003418:	4b5c      	ldr	r3, [pc, #368]	@ (800358c <ESP01DOConnection+0x290>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d003      	beq.n	8003428 <ESP01DOConnection+0x12c>
			ESP01DbgStr("+&DBGESP01AT\n");
 8003420:	4b5a      	ldr	r3, [pc, #360]	@ (800358c <ESP01DOConnection+0x290>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	485f      	ldr	r0, [pc, #380]	@ (80035a4 <ESP01DOConnection+0x2a8>)
 8003426:	4798      	blx	r3
		esp01ATSate = ESP01ATRESPONSE;
 8003428:	4b56      	ldr	r3, [pc, #344]	@ (8003584 <ESP01DOConnection+0x288>)
 800342a:	2202      	movs	r2, #2
 800342c:	701a      	strb	r2, [r3, #0]
		break;
 800342e:	e276      	b.n	800391e <ESP01DOConnection+0x622>
	case ESP01ATRESPONSE:
		if(esp01Flags.bit.ATRESPONSEOK)
 8003430:	4b5a      	ldr	r3, [pc, #360]	@ (800359c <ESP01DOConnection+0x2a0>)
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	f003 0320 	and.w	r3, r3, #32
 8003438:	b2db      	uxtb	r3, r3
 800343a:	2b00      	cmp	r3, #0
 800343c:	d003      	beq.n	8003446 <ESP01DOConnection+0x14a>
			esp01ATSate = ESP01ATCWMODE;
 800343e:	4b51      	ldr	r3, [pc, #324]	@ (8003584 <ESP01DOConnection+0x288>)
 8003440:	2203      	movs	r2, #3
 8003442:	701a      	strb	r2, [r3, #0]
		else
			esp01ATSate = ESP01ATAT;
		break;
 8003444:	e26b      	b.n	800391e <ESP01DOConnection+0x622>
			esp01ATSate = ESP01ATAT;
 8003446:	4b4f      	ldr	r3, [pc, #316]	@ (8003584 <ESP01DOConnection+0x288>)
 8003448:	2201      	movs	r2, #1
 800344a:	701a      	strb	r2, [r3, #0]
		break;
 800344c:	e267      	b.n	800391e <ESP01DOConnection+0x622>
	case ESP01ATCWMODE:
		ESP01StrToBufTX(ATCWMODE);
 800344e:	4856      	ldr	r0, [pc, #344]	@ (80035a8 <ESP01DOConnection+0x2ac>)
 8003450:	f000 fb08 	bl	8003a64 <ESP01StrToBufTX>
		if(ESP01DbgStr != NULL)
 8003454:	4b4d      	ldr	r3, [pc, #308]	@ (800358c <ESP01DOConnection+0x290>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d003      	beq.n	8003464 <ESP01DOConnection+0x168>
			ESP01DbgStr("+&DBGESP01ATCWMODE\n");
 800345c:	4b4b      	ldr	r3, [pc, #300]	@ (800358c <ESP01DOConnection+0x290>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4852      	ldr	r0, [pc, #328]	@ (80035ac <ESP01DOConnection+0x2b0>)
 8003462:	4798      	blx	r3

		/* acá separamos de station a soft ap*/
		if(mode == CONNECTWIFI){
 8003464:	4b52      	ldr	r3, [pc, #328]	@ (80035b0 <ESP01DOConnection+0x2b4>)
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d103      	bne.n	8003474 <ESP01DOConnection+0x178>
			esp01ATSate = ESP01ATCIPCLOSESERVER;
 800346c:	4b45      	ldr	r3, [pc, #276]	@ (8003584 <ESP01DOConnection+0x288>)
 800346e:	2204      	movs	r2, #4
 8003470:	701a      	strb	r2, [r3, #0]
		}else{
			esp01ATSate = ESP01ATCIPMUX;
		}

		break;
 8003472:	e254      	b.n	800391e <ESP01DOConnection+0x622>
			esp01ATSate = ESP01ATCIPMUX;
 8003474:	4b43      	ldr	r3, [pc, #268]	@ (8003584 <ESP01DOConnection+0x288>)
 8003476:	2205      	movs	r2, #5
 8003478:	701a      	strb	r2, [r3, #0]
		break;
 800347a:	e250      	b.n	800391e <ESP01DOConnection+0x622>
	case ESP01ATCIPCLOSESERVER:
		ESP01StrToBufTX(ATCIPCLOSESERVER);
 800347c:	484d      	ldr	r0, [pc, #308]	@ (80035b4 <ESP01DOConnection+0x2b8>)
 800347e:	f000 faf1 	bl	8003a64 <ESP01StrToBufTX>
		if(ESP01DbgStr != NULL)
 8003482:	4b42      	ldr	r3, [pc, #264]	@ (800358c <ESP01DOConnection+0x290>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d003      	beq.n	8003492 <ESP01DOConnection+0x196>
			ESP01DbgStr("+&DBGATCLOSESERVER\n");
 800348a:	4b40      	ldr	r3, [pc, #256]	@ (800358c <ESP01DOConnection+0x290>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	484a      	ldr	r0, [pc, #296]	@ (80035b8 <ESP01DOConnection+0x2bc>)
 8003490:	4798      	blx	r3
		esp01ATSate = ESP01ATCIPMUX;
 8003492:	4b3c      	ldr	r3, [pc, #240]	@ (8003584 <ESP01DOConnection+0x288>)
 8003494:	2205      	movs	r2, #5
 8003496:	701a      	strb	r2, [r3, #0]
		break;
 8003498:	e241      	b.n	800391e <ESP01DOConnection+0x622>
	case ESP01ATCIPMUX:
		ESP01StrToBufTX(ATCIPMUX);
 800349a:	4848      	ldr	r0, [pc, #288]	@ (80035bc <ESP01DOConnection+0x2c0>)
 800349c:	f000 fae2 	bl	8003a64 <ESP01StrToBufTX>

		if(mode == CONNECTWIFI){
 80034a0:	4b43      	ldr	r3, [pc, #268]	@ (80035b0 <ESP01DOConnection+0x2b4>)
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d106      	bne.n	80034b6 <ESP01DOConnection+0x1ba>
			ESP01StrToBufTX("0\r\n");
 80034a8:	4845      	ldr	r0, [pc, #276]	@ (80035c0 <ESP01DOConnection+0x2c4>)
 80034aa:	f000 fadb 	bl	8003a64 <ESP01StrToBufTX>
			esp01ATSate = ESP01ATCWJAP;
 80034ae:	4b35      	ldr	r3, [pc, #212]	@ (8003584 <ESP01DOConnection+0x288>)
 80034b0:	2206      	movs	r2, #6
 80034b2:	701a      	strb	r2, [r3, #0]
 80034b4:	e005      	b.n	80034c2 <ESP01DOConnection+0x1c6>
		}else{
			ESP01StrToBufTX("1\r\n");
 80034b6:	4843      	ldr	r0, [pc, #268]	@ (80035c4 <ESP01DOConnection+0x2c8>)
 80034b8:	f000 fad4 	bl	8003a64 <ESP01StrToBufTX>
			esp01ATSate = ESP01ATCWQAP;
 80034bc:	4b31      	ldr	r3, [pc, #196]	@ (8003584 <ESP01DOConnection+0x288>)
 80034be:	220e      	movs	r2, #14
 80034c0:	701a      	strb	r2, [r3, #0]
		}


		//esp01ATSate = ESP01ATCWJAP;//COMENTAR

		if(ESP01DbgStr != NULL)
 80034c2:	4b32      	ldr	r3, [pc, #200]	@ (800358c <ESP01DOConnection+0x290>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	f000 8224 	beq.w	8003914 <ESP01DOConnection+0x618>
			ESP01DbgStr("+&DBGESP01ATCIPMUX\n");
 80034cc:	4b2f      	ldr	r3, [pc, #188]	@ (800358c <ESP01DOConnection+0x290>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	483d      	ldr	r0, [pc, #244]	@ (80035c8 <ESP01DOConnection+0x2cc>)
 80034d2:	4798      	blx	r3
		break;
 80034d4:	e21e      	b.n	8003914 <ESP01DOConnection+0x618>
	case ESP01ATCWJAP:
		if(esp01Flags.bit.WIFICONNECTED){
 80034d6:	4b31      	ldr	r3, [pc, #196]	@ (800359c <ESP01DOConnection+0x2a0>)
 80034d8:	781b      	ldrb	r3, [r3, #0]
 80034da:	f003 0302 	and.w	r3, r3, #2
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d003      	beq.n	80034ec <ESP01DOConnection+0x1f0>
			esp01ATSate = ESP01ATCIFSR;
 80034e4:	4b27      	ldr	r3, [pc, #156]	@ (8003584 <ESP01DOConnection+0x288>)
 80034e6:	2208      	movs	r2, #8
 80034e8:	701a      	strb	r2, [r3, #0]
			break;
 80034ea:	e218      	b.n	800391e <ESP01DOConnection+0x622>
		}
		if(esp01SSID[0] == '\0')
 80034ec:	4b37      	ldr	r3, [pc, #220]	@ (80035cc <ESP01DOConnection+0x2d0>)
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	f000 8211 	beq.w	8003918 <ESP01DOConnection+0x61c>
			break;
		ESP01StrToBufTX(ATCWJAP);
 80034f6:	4836      	ldr	r0, [pc, #216]	@ (80035d0 <ESP01DOConnection+0x2d4>)
 80034f8:	f000 fab4 	bl	8003a64 <ESP01StrToBufTX>
		ESP01ByteToBufTX('\"');
 80034fc:	2022      	movs	r0, #34	@ 0x22
 80034fe:	f000 fae1 	bl	8003ac4 <ESP01ByteToBufTX>
		ESP01StrToBufTX(esp01SSID);
 8003502:	4832      	ldr	r0, [pc, #200]	@ (80035cc <ESP01DOConnection+0x2d0>)
 8003504:	f000 faae 	bl	8003a64 <ESP01StrToBufTX>
		ESP01ByteToBufTX('\"');
 8003508:	2022      	movs	r0, #34	@ 0x22
 800350a:	f000 fadb 	bl	8003ac4 <ESP01ByteToBufTX>
		ESP01ByteToBufTX(',');
 800350e:	202c      	movs	r0, #44	@ 0x2c
 8003510:	f000 fad8 	bl	8003ac4 <ESP01ByteToBufTX>
		ESP01ByteToBufTX('\"');
 8003514:	2022      	movs	r0, #34	@ 0x22
 8003516:	f000 fad5 	bl	8003ac4 <ESP01ByteToBufTX>
		ESP01StrToBufTX(esp01PASSWORD);
 800351a:	482e      	ldr	r0, [pc, #184]	@ (80035d4 <ESP01DOConnection+0x2d8>)
 800351c:	f000 faa2 	bl	8003a64 <ESP01StrToBufTX>
		ESP01ByteToBufTX('\"');
 8003520:	2022      	movs	r0, #34	@ 0x22
 8003522:	f000 facf 	bl	8003ac4 <ESP01ByteToBufTX>
		ESP01ByteToBufTX('\r');
 8003526:	200d      	movs	r0, #13
 8003528:	f000 facc 	bl	8003ac4 <ESP01ByteToBufTX>
		ESP01ByteToBufTX('\n');
 800352c:	200a      	movs	r0, #10
 800352e:	f000 fac9 	bl	8003ac4 <ESP01ByteToBufTX>
		if(ESP01DbgStr != NULL)
 8003532:	4b16      	ldr	r3, [pc, #88]	@ (800358c <ESP01DOConnection+0x290>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d003      	beq.n	8003542 <ESP01DOConnection+0x246>
			ESP01DbgStr("+&DBGESP01ATCWJAP");
 800353a:	4b14      	ldr	r3, [pc, #80]	@ (800358c <ESP01DOConnection+0x290>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4826      	ldr	r0, [pc, #152]	@ (80035d8 <ESP01DOConnection+0x2dc>)
 8003540:	4798      	blx	r3
		esp01Flags.bit.ATRESPONSEOK = 0;
 8003542:	4a16      	ldr	r2, [pc, #88]	@ (800359c <ESP01DOConnection+0x2a0>)
 8003544:	7813      	ldrb	r3, [r2, #0]
 8003546:	f023 0320 	bic.w	r3, r3, #32
 800354a:	7013      	strb	r3, [r2, #0]
		esp01ATSate = ESP01CWJAPRESPONSE;
 800354c:	4b0d      	ldr	r3, [pc, #52]	@ (8003584 <ESP01DOConnection+0x288>)
 800354e:	2207      	movs	r2, #7
 8003550:	701a      	strb	r2, [r3, #0]
		esp01TimeoutTask = 500;
 8003552:	4b0b      	ldr	r3, [pc, #44]	@ (8003580 <ESP01DOConnection+0x284>)
 8003554:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8003558:	601a      	str	r2, [r3, #0]
		break;
 800355a:	e1e0      	b.n	800391e <ESP01DOConnection+0x622>
	case ESP01CWJAPRESPONSE:
		if(esp01Flags.bit.ATRESPONSEOK){
 800355c:	4b0f      	ldr	r3, [pc, #60]	@ (800359c <ESP01DOConnection+0x2a0>)
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	f003 0320 	and.w	r3, r3, #32
 8003564:	b2db      	uxtb	r3, r3
 8003566:	2b00      	cmp	r3, #0
 8003568:	d006      	beq.n	8003578 <ESP01DOConnection+0x27c>
			esp01ATSate = ESP01ATCIFSR;
 800356a:	4b06      	ldr	r3, [pc, #24]	@ (8003584 <ESP01DOConnection+0x288>)
 800356c:	2208      	movs	r2, #8
 800356e:	701a      	strb	r2, [r3, #0]
			esp01TriesAT = 4;
 8003570:	4b09      	ldr	r3, [pc, #36]	@ (8003598 <ESP01DOConnection+0x29c>)
 8003572:	2204      	movs	r2, #4
 8003574:	701a      	strb	r2, [r3, #0]
		}
		else
			esp01ATSate = ESP01ATAT;
		break;
 8003576:	e1d2      	b.n	800391e <ESP01DOConnection+0x622>
			esp01ATSate = ESP01ATAT;
 8003578:	4b02      	ldr	r3, [pc, #8]	@ (8003584 <ESP01DOConnection+0x288>)
 800357a:	2201      	movs	r2, #1
 800357c:	701a      	strb	r2, [r3, #0]
		break;
 800357e:	e1ce      	b.n	800391e <ESP01DOConnection+0x622>
 8003580:	20000830 	.word	0x20000830
 8003584:	2000082a 	.word	0x2000082a
 8003588:	20000a64 	.word	0x20000a64
 800358c:	20000840 	.word	0x20000840
 8003590:	080133b0 	.word	0x080133b0
 8003594:	080133c8 	.word	0x080133c8
 8003598:	20000a60 	.word	0x20000a60
 800359c:	2000082c 	.word	0x2000082c
 80035a0:	08014818 	.word	0x08014818
 80035a4:	080133e0 	.word	0x080133e0
 80035a8:	08014838 	.word	0x08014838
 80035ac:	080133f0 	.word	0x080133f0
 80035b0:	20000a72 	.word	0x20000a72
 80035b4:	08014848 	.word	0x08014848
 80035b8:	08013404 	.word	0x08013404
 80035bc:	08014820 	.word	0x08014820
 80035c0:	08013418 	.word	0x08013418
 80035c4:	0801341c 	.word	0x0801341c
 80035c8:	08013420 	.word	0x08013420
 80035cc:	20000844 	.word	0x20000844
 80035d0:	0801485c 	.word	0x0801485c
 80035d4:	20000884 	.word	0x20000884
 80035d8:	08013434 	.word	0x08013434
	case ESP01ATCIFSR:
		esp01LocalIP[0] = '\0';
 80035dc:	4b94      	ldr	r3, [pc, #592]	@ (8003830 <ESP01DOConnection+0x534>)
 80035de:	2200      	movs	r2, #0
 80035e0:	701a      	strb	r2, [r3, #0]
		ESP01StrToBufTX(ATCIFSR);
 80035e2:	4894      	ldr	r0, [pc, #592]	@ (8003834 <ESP01DOConnection+0x538>)
 80035e4:	f000 fa3e 	bl	8003a64 <ESP01StrToBufTX>
		if(ESP01DbgStr != NULL)
 80035e8:	4b93      	ldr	r3, [pc, #588]	@ (8003838 <ESP01DOConnection+0x53c>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d003      	beq.n	80035f8 <ESP01DOConnection+0x2fc>
			ESP01DbgStr("+&DBGESP01CIFSR");
 80035f0:	4b91      	ldr	r3, [pc, #580]	@ (8003838 <ESP01DOConnection+0x53c>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4891      	ldr	r0, [pc, #580]	@ (800383c <ESP01DOConnection+0x540>)
 80035f6:	4798      	blx	r3
		esp01Flags.bit.ATRESPONSEOK = 0;
 80035f8:	4a91      	ldr	r2, [pc, #580]	@ (8003840 <ESP01DOConnection+0x544>)
 80035fa:	7813      	ldrb	r3, [r2, #0]
 80035fc:	f023 0320 	bic.w	r3, r3, #32
 8003600:	7013      	strb	r3, [r2, #0]
		esp01ATSate = ESP01CIFSRRESPONSE;
 8003602:	4b90      	ldr	r3, [pc, #576]	@ (8003844 <ESP01DOConnection+0x548>)
 8003604:	2209      	movs	r2, #9
 8003606:	701a      	strb	r2, [r3, #0]
		break;
 8003608:	e189      	b.n	800391e <ESP01DOConnection+0x622>
	case ESP01CIFSRRESPONSE:
		if(esp01Flags.bit.ATRESPONSEOK)
 800360a:	4b8d      	ldr	r3, [pc, #564]	@ (8003840 <ESP01DOConnection+0x544>)
 800360c:	781b      	ldrb	r3, [r3, #0]
 800360e:	f003 0320 	and.w	r3, r3, #32
 8003612:	b2db      	uxtb	r3, r3
 8003614:	2b00      	cmp	r3, #0
 8003616:	d003      	beq.n	8003620 <ESP01DOConnection+0x324>
			esp01ATSate = ESP01ATCIPCLOSE;
 8003618:	4b8a      	ldr	r3, [pc, #552]	@ (8003844 <ESP01DOConnection+0x548>)
 800361a:	220a      	movs	r2, #10
 800361c:	701a      	strb	r2, [r3, #0]
				esp01ATSate = ESP01ATAT;
				break;
			}
			esp01ATSate = ESP01ATCIFSR;
		}
		break;
 800361e:	e17e      	b.n	800391e <ESP01DOConnection+0x622>
			esp01TriesAT--;
 8003620:	4b89      	ldr	r3, [pc, #548]	@ (8003848 <ESP01DOConnection+0x54c>)
 8003622:	781b      	ldrb	r3, [r3, #0]
 8003624:	3b01      	subs	r3, #1
 8003626:	b2da      	uxtb	r2, r3
 8003628:	4b87      	ldr	r3, [pc, #540]	@ (8003848 <ESP01DOConnection+0x54c>)
 800362a:	701a      	strb	r2, [r3, #0]
			if(esp01TriesAT == 0){
 800362c:	4b86      	ldr	r3, [pc, #536]	@ (8003848 <ESP01DOConnection+0x54c>)
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d103      	bne.n	800363c <ESP01DOConnection+0x340>
				esp01ATSate = ESP01ATAT;
 8003634:	4b83      	ldr	r3, [pc, #524]	@ (8003844 <ESP01DOConnection+0x548>)
 8003636:	2201      	movs	r2, #1
 8003638:	701a      	strb	r2, [r3, #0]
				break;
 800363a:	e170      	b.n	800391e <ESP01DOConnection+0x622>
			esp01ATSate = ESP01ATCIFSR;
 800363c:	4b81      	ldr	r3, [pc, #516]	@ (8003844 <ESP01DOConnection+0x548>)
 800363e:	2208      	movs	r2, #8
 8003640:	701a      	strb	r2, [r3, #0]
		break;
 8003642:	e16c      	b.n	800391e <ESP01DOConnection+0x622>
	case ESP01ATCIPCLOSE:
		if(esp01RemoteIP[0] == '\0')
 8003644:	4b81      	ldr	r3, [pc, #516]	@ (800384c <ESP01DOConnection+0x550>)
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	2b00      	cmp	r3, #0
 800364a:	f000 8167 	beq.w	800391c <ESP01DOConnection+0x620>
			break;
		ESP01StrToBufTX(ATCIPCLOSE);
 800364e:	4880      	ldr	r0, [pc, #512]	@ (8003850 <ESP01DOConnection+0x554>)
 8003650:	f000 fa08 	bl	8003a64 <ESP01StrToBufTX>
		if(ESP01DbgStr != NULL)
 8003654:	4b78      	ldr	r3, [pc, #480]	@ (8003838 <ESP01DOConnection+0x53c>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d003      	beq.n	8003664 <ESP01DOConnection+0x368>
			ESP01DbgStr("+&DBGESP01ATCIPCLOSE");
 800365c:	4b76      	ldr	r3, [pc, #472]	@ (8003838 <ESP01DOConnection+0x53c>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	487c      	ldr	r0, [pc, #496]	@ (8003854 <ESP01DOConnection+0x558>)
 8003662:	4798      	blx	r3
		esp01ATSate = ESP01ATCIPSTART;
 8003664:	4b77      	ldr	r3, [pc, #476]	@ (8003844 <ESP01DOConnection+0x548>)
 8003666:	220b      	movs	r2, #11
 8003668:	701a      	strb	r2, [r3, #0]
		break;
 800366a:	e158      	b.n	800391e <ESP01DOConnection+0x622>
	case ESP01ATCIPSTART:
		ESP01StrToBufTX(ATCIPSTART);
 800366c:	487a      	ldr	r0, [pc, #488]	@ (8003858 <ESP01DOConnection+0x55c>)
 800366e:	f000 f9f9 	bl	8003a64 <ESP01StrToBufTX>
		ESP01ByteToBufTX('\"');
 8003672:	2022      	movs	r0, #34	@ 0x22
 8003674:	f000 fa26 	bl	8003ac4 <ESP01ByteToBufTX>
		ESP01StrToBufTX(esp01PROTO);
 8003678:	4878      	ldr	r0, [pc, #480]	@ (800385c <ESP01DOConnection+0x560>)
 800367a:	f000 f9f3 	bl	8003a64 <ESP01StrToBufTX>
		ESP01ByteToBufTX('\"');
 800367e:	2022      	movs	r0, #34	@ 0x22
 8003680:	f000 fa20 	bl	8003ac4 <ESP01ByteToBufTX>
		ESP01ByteToBufTX(',');
 8003684:	202c      	movs	r0, #44	@ 0x2c
 8003686:	f000 fa1d 	bl	8003ac4 <ESP01ByteToBufTX>
		ESP01ByteToBufTX('\"');
 800368a:	2022      	movs	r0, #34	@ 0x22
 800368c:	f000 fa1a 	bl	8003ac4 <ESP01ByteToBufTX>
		ESP01StrToBufTX(esp01RemoteIP);
 8003690:	486e      	ldr	r0, [pc, #440]	@ (800384c <ESP01DOConnection+0x550>)
 8003692:	f000 f9e7 	bl	8003a64 <ESP01StrToBufTX>
		ESP01ByteToBufTX('\"');
 8003696:	2022      	movs	r0, #34	@ 0x22
 8003698:	f000 fa14 	bl	8003ac4 <ESP01ByteToBufTX>
		ESP01ByteToBufTX(',');
 800369c:	202c      	movs	r0, #44	@ 0x2c
 800369e:	f000 fa11 	bl	8003ac4 <ESP01ByteToBufTX>
		ESP01StrToBufTX(esp01RemotePORT);
 80036a2:	486f      	ldr	r0, [pc, #444]	@ (8003860 <ESP01DOConnection+0x564>)
 80036a4:	f000 f9de 	bl	8003a64 <ESP01StrToBufTX>
		ESP01ByteToBufTX(',');
 80036a8:	202c      	movs	r0, #44	@ 0x2c
 80036aa:	f000 fa0b 	bl	8003ac4 <ESP01ByteToBufTX>
		ESP01StrToBufTX(esp01LocalPORT);
 80036ae:	486d      	ldr	r0, [pc, #436]	@ (8003864 <ESP01DOConnection+0x568>)
 80036b0:	f000 f9d8 	bl	8003a64 <ESP01StrToBufTX>
		ESP01ByteToBufTX(',');
 80036b4:	202c      	movs	r0, #44	@ 0x2c
 80036b6:	f000 fa05 	bl	8003ac4 <ESP01ByteToBufTX>
		ESP01ByteToBufTX('0');
 80036ba:	2030      	movs	r0, #48	@ 0x30
 80036bc:	f000 fa02 	bl	8003ac4 <ESP01ByteToBufTX>
		ESP01ByteToBufTX('\r');
 80036c0:	200d      	movs	r0, #13
 80036c2:	f000 f9ff 	bl	8003ac4 <ESP01ByteToBufTX>
		ESP01ByteToBufTX('\n');
 80036c6:	200a      	movs	r0, #10
 80036c8:	f000 f9fc 	bl	8003ac4 <ESP01ByteToBufTX>
		if(ESP01DbgStr != NULL)
 80036cc:	4b5a      	ldr	r3, [pc, #360]	@ (8003838 <ESP01DOConnection+0x53c>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d003      	beq.n	80036dc <ESP01DOConnection+0x3e0>
			ESP01DbgStr("+&DBGESP01ATCIPSTART");
 80036d4:	4b58      	ldr	r3, [pc, #352]	@ (8003838 <ESP01DOConnection+0x53c>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4863      	ldr	r0, [pc, #396]	@ (8003868 <ESP01DOConnection+0x56c>)
 80036da:	4798      	blx	r3
		esp01Flags.bit.ATRESPONSEOK = 0;
 80036dc:	4a58      	ldr	r2, [pc, #352]	@ (8003840 <ESP01DOConnection+0x544>)
 80036de:	7813      	ldrb	r3, [r2, #0]
 80036e0:	f023 0320 	bic.w	r3, r3, #32
 80036e4:	7013      	strb	r3, [r2, #0]
		esp01Flags.bit.UDPTCPCONNECTED = 0;
 80036e6:	4a56      	ldr	r2, [pc, #344]	@ (8003840 <ESP01DOConnection+0x544>)
 80036e8:	7813      	ldrb	r3, [r2, #0]
 80036ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80036ee:	7013      	strb	r3, [r2, #0]
		esp01ATSate = ESP01CIPSTARTRESPONSE;
 80036f0:	4b54      	ldr	r3, [pc, #336]	@ (8003844 <ESP01DOConnection+0x548>)
 80036f2:	220c      	movs	r2, #12
 80036f4:	701a      	strb	r2, [r3, #0]
		esp01TimeoutTask = 500;
 80036f6:	4b5d      	ldr	r3, [pc, #372]	@ (800386c <ESP01DOConnection+0x570>)
 80036f8:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80036fc:	601a      	str	r2, [r3, #0]
		break;
 80036fe:	e10e      	b.n	800391e <ESP01DOConnection+0x622>
	case ESP01CIPSTARTRESPONSE:
		if(esp01Flags.bit.ATRESPONSEOK)
 8003700:	4b4f      	ldr	r3, [pc, #316]	@ (8003840 <ESP01DOConnection+0x544>)
 8003702:	781b      	ldrb	r3, [r3, #0]
 8003704:	f003 0320 	and.w	r3, r3, #32
 8003708:	b2db      	uxtb	r3, r3
 800370a:	2b00      	cmp	r3, #0
 800370c:	d003      	beq.n	8003716 <ESP01DOConnection+0x41a>
			esp01ATSate = ESP01ATCONNECTED;
 800370e:	4b4d      	ldr	r3, [pc, #308]	@ (8003844 <ESP01DOConnection+0x548>)
 8003710:	220d      	movs	r2, #13
 8003712:	701a      	strb	r2, [r3, #0]
		else
			esp01ATSate = ESP01ATAT;
		break;
 8003714:	e103      	b.n	800391e <ESP01DOConnection+0x622>
			esp01ATSate = ESP01ATAT;
 8003716:	4b4b      	ldr	r3, [pc, #300]	@ (8003844 <ESP01DOConnection+0x548>)
 8003718:	2201      	movs	r2, #1
 800371a:	701a      	strb	r2, [r3, #0]
		break;
 800371c:	e0ff      	b.n	800391e <ESP01DOConnection+0x622>
	case ESP01ATCONNECTED:
		if(esp01Flags.bit.WIFICONNECTED == 0){
 800371e:	4b48      	ldr	r3, [pc, #288]	@ (8003840 <ESP01DOConnection+0x544>)
 8003720:	781b      	ldrb	r3, [r3, #0]
 8003722:	f003 0302 	and.w	r3, r3, #2
 8003726:	b2db      	uxtb	r3, r3
 8003728:	2b00      	cmp	r3, #0
 800372a:	d103      	bne.n	8003734 <ESP01DOConnection+0x438>
			esp01ATSate = ESP01ATAT;
 800372c:	4b45      	ldr	r3, [pc, #276]	@ (8003844 <ESP01DOConnection+0x548>)
 800372e:	2201      	movs	r2, #1
 8003730:	701a      	strb	r2, [r3, #0]
			break;
 8003732:	e0f4      	b.n	800391e <ESP01DOConnection+0x622>
		}
		if(esp01Flags.bit.UDPTCPCONNECTED == 0){
 8003734:	4b42      	ldr	r3, [pc, #264]	@ (8003840 <ESP01DOConnection+0x544>)
 8003736:	781b      	ldrb	r3, [r3, #0]
 8003738:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800373c:	b2db      	uxtb	r3, r3
 800373e:	2b00      	cmp	r3, #0
 8003740:	d103      	bne.n	800374a <ESP01DOConnection+0x44e>
			esp01ATSate = ESP01ATCIPCLOSE;
 8003742:	4b40      	ldr	r3, [pc, #256]	@ (8003844 <ESP01DOConnection+0x548>)
 8003744:	220a      	movs	r2, #10
 8003746:	701a      	strb	r2, [r3, #0]
			break;
 8003748:	e0e9      	b.n	800391e <ESP01DOConnection+0x622>
		}
		esp01TimeoutTask = 0;
 800374a:	4b48      	ldr	r3, [pc, #288]	@ (800386c <ESP01DOConnection+0x570>)
 800374c:	2200      	movs	r2, #0
 800374e:	601a      	str	r2, [r3, #0]
		break;
 8003750:	e0e5      	b.n	800391e <ESP01DOConnection+0x622>
	/*********** SOFT AP STATES **********/
	case ESP01ATCWQAP:
		ESP01StrToBufTX(ATCWQAP);
 8003752:	4847      	ldr	r0, [pc, #284]	@ (8003870 <ESP01DOConnection+0x574>)
 8003754:	f000 f986 	bl	8003a64 <ESP01StrToBufTX>
		if(ESP01DbgStr != NULL)
 8003758:	4b37      	ldr	r3, [pc, #220]	@ (8003838 <ESP01DOConnection+0x53c>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d003      	beq.n	8003768 <ESP01DOConnection+0x46c>
			ESP01DbgStr("+&DBGESP01CWQAP");
 8003760:	4b35      	ldr	r3, [pc, #212]	@ (8003838 <ESP01DOConnection+0x53c>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4843      	ldr	r0, [pc, #268]	@ (8003874 <ESP01DOConnection+0x578>)
 8003766:	4798      	blx	r3
		esp01ATSate = ESP01ATCWSAP;
 8003768:	4b36      	ldr	r3, [pc, #216]	@ (8003844 <ESP01DOConnection+0x548>)
 800376a:	220f      	movs	r2, #15
 800376c:	701a      	strb	r2, [r3, #0]
		esp01TimeoutTask = 20;
 800376e:	4b3f      	ldr	r3, [pc, #252]	@ (800386c <ESP01DOConnection+0x570>)
 8003770:	2214      	movs	r2, #20
 8003772:	601a      	str	r2, [r3, #0]

		break;
 8003774:	e0d3      	b.n	800391e <ESP01DOConnection+0x622>
	case ESP01ATCWSAP:
		ESP01StrToBufTX(ATCWSAP);
 8003776:	4840      	ldr	r0, [pc, #256]	@ (8003878 <ESP01DOConnection+0x57c>)
 8003778:	f000 f974 	bl	8003a64 <ESP01StrToBufTX>
		if(ESP01DbgStr != NULL)
 800377c:	4b2e      	ldr	r3, [pc, #184]	@ (8003838 <ESP01DOConnection+0x53c>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d003      	beq.n	800378c <ESP01DOConnection+0x490>
			ESP01DbgStr("+&DBGESP01CWSAP");
 8003784:	4b2c      	ldr	r3, [pc, #176]	@ (8003838 <ESP01DOConnection+0x53c>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	483c      	ldr	r0, [pc, #240]	@ (800387c <ESP01DOConnection+0x580>)
 800378a:	4798      	blx	r3
		esp01ATSate = ESP01ATCWDHCP;
 800378c:	4b2d      	ldr	r3, [pc, #180]	@ (8003844 <ESP01DOConnection+0x548>)
 800378e:	2211      	movs	r2, #17
 8003790:	701a      	strb	r2, [r3, #0]
		esp01TimeoutTask = 300;
 8003792:	4b36      	ldr	r3, [pc, #216]	@ (800386c <ESP01DOConnection+0x570>)
 8003794:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003798:	601a      	str	r2, [r3, #0]
		//esp01Flags.bit.ATRESPONSEOK = 0;
		//esp01Flags.bit.ATRESPONSEOK=0;
		//esp01TimeoutTask = 4000;
		break;
 800379a:	e0c0      	b.n	800391e <ESP01DOConnection+0x622>
	case ESP01ATCWSAP_RESPONSE:
		if(esp01Flags.bit.ATRESPONSEOK)
 800379c:	4b28      	ldr	r3, [pc, #160]	@ (8003840 <ESP01DOConnection+0x544>)
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	f003 0320 	and.w	r3, r3, #32
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d003      	beq.n	80037b2 <ESP01DOConnection+0x4b6>
			esp01ATSate = ESP01ATCWDHCP;
 80037aa:	4b26      	ldr	r3, [pc, #152]	@ (8003844 <ESP01DOConnection+0x548>)
 80037ac:	2211      	movs	r2, #17
 80037ae:	701a      	strb	r2, [r3, #0]
		else
			esp01ATSate = ESP01ATAT;
		break;
 80037b0:	e0b5      	b.n	800391e <ESP01DOConnection+0x622>
			esp01ATSate = ESP01ATAT;
 80037b2:	4b24      	ldr	r3, [pc, #144]	@ (8003844 <ESP01DOConnection+0x548>)
 80037b4:	2201      	movs	r2, #1
 80037b6:	701a      	strb	r2, [r3, #0]
		break;
 80037b8:	e0b1      	b.n	800391e <ESP01DOConnection+0x622>
	case ESP01ATCWDHCP:
		ESP01StrToBufTX(ATCWDHCP);
 80037ba:	4831      	ldr	r0, [pc, #196]	@ (8003880 <ESP01DOConnection+0x584>)
 80037bc:	f000 f952 	bl	8003a64 <ESP01StrToBufTX>
		if(ESP01DbgStr != NULL)
 80037c0:	4b1d      	ldr	r3, [pc, #116]	@ (8003838 <ESP01DOConnection+0x53c>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d003      	beq.n	80037d0 <ESP01DOConnection+0x4d4>
			ESP01DbgStr("+&DBGESP01CWDHCP");
 80037c8:	4b1b      	ldr	r3, [pc, #108]	@ (8003838 <ESP01DOConnection+0x53c>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	482d      	ldr	r0, [pc, #180]	@ (8003884 <ESP01DOConnection+0x588>)
 80037ce:	4798      	blx	r3
		esp01ATSate = ESP01ATCIPSERVER;
 80037d0:	4b1c      	ldr	r3, [pc, #112]	@ (8003844 <ESP01DOConnection+0x548>)
 80037d2:	2212      	movs	r2, #18
 80037d4:	701a      	strb	r2, [r3, #0]
		esp01TimeoutTask = 3000;
 80037d6:	4b25      	ldr	r3, [pc, #148]	@ (800386c <ESP01DOConnection+0x570>)
 80037d8:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80037dc:	601a      	str	r2, [r3, #0]
		break;
 80037de:	e09e      	b.n	800391e <ESP01DOConnection+0x622>
	case ESP01ATCIPSERVER:
		ESP01StrToBufTX(ATCIPOPENSERVER);
 80037e0:	4829      	ldr	r0, [pc, #164]	@ (8003888 <ESP01DOConnection+0x58c>)
 80037e2:	f000 f93f 	bl	8003a64 <ESP01StrToBufTX>
		if(ESP01DbgStr != NULL)
 80037e6:	4b14      	ldr	r3, [pc, #80]	@ (8003838 <ESP01DOConnection+0x53c>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d003      	beq.n	80037f6 <ESP01DOConnection+0x4fa>
			ESP01DbgStr("+&DBGESP01CIPSERVER");
 80037ee:	4b12      	ldr	r3, [pc, #72]	@ (8003838 <ESP01DOConnection+0x53c>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4826      	ldr	r0, [pc, #152]	@ (800388c <ESP01DOConnection+0x590>)
 80037f4:	4798      	blx	r3
		esp01ATSate = ESP01ATCONFIGSERVER;
 80037f6:	4b13      	ldr	r3, [pc, #76]	@ (8003844 <ESP01DOConnection+0x548>)
 80037f8:	2214      	movs	r2, #20
 80037fa:	701a      	strb	r2, [r3, #0]
		esp01Flags.bit.ATRESPONSEOK = 0;
 80037fc:	4a10      	ldr	r2, [pc, #64]	@ (8003840 <ESP01DOConnection+0x544>)
 80037fe:	7813      	ldrb	r3, [r2, #0]
 8003800:	f023 0320 	bic.w	r3, r3, #32
 8003804:	7013      	strb	r3, [r2, #0]
		esp01TimeoutTask = 300;
 8003806:	4b19      	ldr	r3, [pc, #100]	@ (800386c <ESP01DOConnection+0x570>)
 8003808:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800380c:	601a      	str	r2, [r3, #0]
		break;
 800380e:	e086      	b.n	800391e <ESP01DOConnection+0x622>
	case ESP01ATCIPSERVER_RESPONSE:
		if(esp01Flags.bit.ATRESPONSEOK)
 8003810:	4b0b      	ldr	r3, [pc, #44]	@ (8003840 <ESP01DOConnection+0x544>)
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	f003 0320 	and.w	r3, r3, #32
 8003818:	b2db      	uxtb	r3, r3
 800381a:	2b00      	cmp	r3, #0
 800381c:	d003      	beq.n	8003826 <ESP01DOConnection+0x52a>
			esp01ATSate = ESP01ATCONFIGSERVER;
 800381e:	4b09      	ldr	r3, [pc, #36]	@ (8003844 <ESP01DOConnection+0x548>)
 8003820:	2214      	movs	r2, #20
 8003822:	701a      	strb	r2, [r3, #0]
		else
			esp01ATSate = ESP01ATAT;
	break;
 8003824:	e07b      	b.n	800391e <ESP01DOConnection+0x622>
			esp01ATSate = ESP01ATAT;
 8003826:	4b07      	ldr	r3, [pc, #28]	@ (8003844 <ESP01DOConnection+0x548>)
 8003828:	2201      	movs	r2, #1
 800382a:	701a      	strb	r2, [r3, #0]
	break;
 800382c:	e077      	b.n	800391e <ESP01DOConnection+0x622>
 800382e:	bf00      	nop
 8003830:	200008bc 	.word	0x200008bc
 8003834:	08014868 	.word	0x08014868
 8003838:	20000840 	.word	0x20000840
 800383c:	08013448 	.word	0x08013448
 8003840:	2000082c 	.word	0x2000082c
 8003844:	2000082a 	.word	0x2000082a
 8003848:	20000a60 	.word	0x20000a60
 800384c:	200008a4 	.word	0x200008a4
 8003850:	08014884 	.word	0x08014884
 8003854:	08013458 	.word	0x08013458
 8003858:	08014874 	.word	0x08014874
 800385c:	20000008 	.word	0x20000008
 8003860:	200008b4 	.word	0x200008b4
 8003864:	200008cc 	.word	0x200008cc
 8003868:	08013470 	.word	0x08013470
 800386c:	20000830 	.word	0x20000830
 8003870:	0801482c 	.word	0x0801482c
 8003874:	08013488 	.word	0x08013488
 8003878:	080148a0 	.word	0x080148a0
 800387c:	08013498 	.word	0x08013498
 8003880:	080148c0 	.word	0x080148c0
 8003884:	080134a8 	.word	0x080134a8
 8003888:	080148d4 	.word	0x080148d4
 800388c:	080134bc 	.word	0x080134bc
	case ESP01ATCONFIGSERVER:
		ESP01StrToBufTX(ATCIPSEND);
 8003890:	4824      	ldr	r0, [pc, #144]	@ (8003924 <ESP01DOConnection+0x628>)
 8003892:	f000 f8e7 	bl	8003a64 <ESP01StrToBufTX>
		ESP01StrToBufTX("0,177");
 8003896:	4824      	ldr	r0, [pc, #144]	@ (8003928 <ESP01DOConnection+0x62c>)
 8003898:	f000 f8e4 	bl	8003a64 <ESP01StrToBufTX>
		ESP01StrToBufTX("\r>");
 800389c:	4823      	ldr	r0, [pc, #140]	@ (800392c <ESP01DOConnection+0x630>)
 800389e:	f000 f8e1 	bl	8003a64 <ESP01StrToBufTX>

		esp01Flags.bit.TXCIPSEND = 1;
 80038a2:	4a23      	ldr	r2, [pc, #140]	@ (8003930 <ESP01DOConnection+0x634>)
 80038a4:	7813      	ldrb	r3, [r2, #0]
 80038a6:	f043 0304 	orr.w	r3, r3, #4
 80038aa:	7013      	strb	r3, [r2, #0]
		esp01Flags.bit.SENDINGDATA = 1;
 80038ac:	4a20      	ldr	r2, [pc, #128]	@ (8003930 <ESP01DOConnection+0x634>)
 80038ae:	7813      	ldrb	r3, [r2, #0]
 80038b0:	f043 0308 	orr.w	r3, r3, #8
 80038b4:	7013      	strb	r3, [r2, #0]

		if(ESP01DbgStr != NULL)
 80038b6:	4b1f      	ldr	r3, [pc, #124]	@ (8003934 <ESP01DOConnection+0x638>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d003      	beq.n	80038c6 <ESP01DOConnection+0x5ca>
			ESP01DbgStr("+&DBGESP01ATESP01ATCONFIGSERVER");
 80038be:	4b1d      	ldr	r3, [pc, #116]	@ (8003934 <ESP01DOConnection+0x638>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	481d      	ldr	r0, [pc, #116]	@ (8003938 <ESP01DOConnection+0x63c>)
 80038c4:	4798      	blx	r3

		esp01ATSate = ESP01ATCONFIGSERVER_RESPONSE;
 80038c6:	4b1d      	ldr	r3, [pc, #116]	@ (800393c <ESP01DOConnection+0x640>)
 80038c8:	2215      	movs	r2, #21
 80038ca:	701a      	strb	r2, [r3, #0]
		esp01Flags.bit.ATRESPONSEOK = 0;
 80038cc:	4a18      	ldr	r2, [pc, #96]	@ (8003930 <ESP01DOConnection+0x634>)
 80038ce:	7813      	ldrb	r3, [r2, #0]
 80038d0:	f023 0320 	bic.w	r3, r3, #32
 80038d4:	7013      	strb	r3, [r2, #0]
		esp01TimeoutTask = 200;
 80038d6:	4b1a      	ldr	r3, [pc, #104]	@ (8003940 <ESP01DOConnection+0x644>)
 80038d8:	22c8      	movs	r2, #200	@ 0xc8
 80038da:	601a      	str	r2, [r3, #0]
	break;
 80038dc:	e01f      	b.n	800391e <ESP01DOConnection+0x622>
	case ESP01ATCONFIGSERVER_RESPONSE:
		if(!esp01Flags.bit.WAITINGSYMBOL){
 80038de:	4b14      	ldr	r3, [pc, #80]	@ (8003930 <ESP01DOConnection+0x634>)
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	f003 0301 	and.w	r3, r3, #1
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d111      	bne.n	8003910 <ESP01DOConnection+0x614>
			ESP01StrToBufTX(CONFIGSERVER);
 80038ec:	4815      	ldr	r0, [pc, #84]	@ (8003944 <ESP01DOConnection+0x648>)
 80038ee:	f000 f8b9 	bl	8003a64 <ESP01StrToBufTX>

			esp01TimeoutTask = 500;
 80038f2:	4b13      	ldr	r3, [pc, #76]	@ (8003940 <ESP01DOConnection+0x644>)
 80038f4:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80038f8:	601a      	str	r2, [r3, #0]

			esp01ATSate = ESP01ATWAITSERVERDATA;
 80038fa:	4b10      	ldr	r3, [pc, #64]	@ (800393c <ESP01DOConnection+0x640>)
 80038fc:	2216      	movs	r2, #22
 80038fe:	701a      	strb	r2, [r3, #0]
			if(ESP01DbgStr != NULL)
 8003900:	4b0c      	ldr	r3, [pc, #48]	@ (8003934 <ESP01DOConnection+0x638>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d003      	beq.n	8003910 <ESP01DOConnection+0x614>
				ESP01DbgStr("+&DBGESP01ATWAITSERVERDATA");
 8003908:	4b0a      	ldr	r3, [pc, #40]	@ (8003934 <ESP01DOConnection+0x638>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	480e      	ldr	r0, [pc, #56]	@ (8003948 <ESP01DOConnection+0x64c>)
 800390e:	4798      	blx	r3
		}
	case ESP01ATWAITSERVERDATA:

	break;
 8003910:	bf00      	nop
 8003912:	e004      	b.n	800391e <ESP01DOConnection+0x622>
		break;
 8003914:	bf00      	nop
 8003916:	e002      	b.n	800391e <ESP01DOConnection+0x622>
			break;
 8003918:	bf00      	nop
 800391a:	e000      	b.n	800391e <ESP01DOConnection+0x622>
			break;
 800391c:	bf00      	nop
	}
}
 800391e:	bf00      	nop
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	08014894 	.word	0x08014894
 8003928:	080134d0 	.word	0x080134d0
 800392c:	08013314 	.word	0x08013314
 8003930:	2000082c 	.word	0x2000082c
 8003934:	20000840 	.word	0x20000840
 8003938:	080134d8 	.word	0x080134d8
 800393c:	2000082a 	.word	0x2000082a
 8003940:	20000830 	.word	0x20000830
 8003944:	080148e8 	.word	0x080148e8
 8003948:	080134f8 	.word	0x080134f8

0800394c <ESP01_setMode>:

void ESP01_setMode(_emode _mode){
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	4603      	mov	r3, r0
 8003954:	71fb      	strb	r3, [r7, #7]
	mode = _mode;
 8003956:	4a04      	ldr	r2, [pc, #16]	@ (8003968 <ESP01_setMode+0x1c>)
 8003958:	79fb      	ldrb	r3, [r7, #7]
 800395a:	7013      	strb	r3, [r2, #0]
}
 800395c:	bf00      	nop
 800395e:	370c      	adds	r7, #12
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr
 8003968:	20000a72 	.word	0x20000a72

0800396c <ESP01SENDData>:

static void ESP01SENDData(){
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
	uint8_t value;
	if(esp01Flags.bit.WAITINGSYMBOL){
 8003972:	4b34      	ldr	r3, [pc, #208]	@ (8003a44 <ESP01SENDData+0xd8>)
 8003974:	781b      	ldrb	r3, [r3, #0]
 8003976:	f003 0301 	and.w	r3, r3, #1
 800397a:	b2db      	uxtb	r3, r3
 800397c:	2b00      	cmp	r3, #0
 800397e:	d013      	beq.n	80039a8 <ESP01SENDData+0x3c>
		if(!esp01TimeoutTxSymbol){
 8003980:	4b31      	ldr	r3, [pc, #196]	@ (8003a48 <ESP01SENDData+0xdc>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d159      	bne.n	8003a3c <ESP01SENDData+0xd0>
			esp01irTX = esp01iwTX;
 8003988:	4b30      	ldr	r3, [pc, #192]	@ (8003a4c <ESP01SENDData+0xe0>)
 800398a:	881a      	ldrh	r2, [r3, #0]
 800398c:	4b30      	ldr	r3, [pc, #192]	@ (8003a50 <ESP01SENDData+0xe4>)
 800398e:	801a      	strh	r2, [r3, #0]
			esp01Flags.bit.WAITINGSYMBOL = 0;
 8003990:	4a2c      	ldr	r2, [pc, #176]	@ (8003a44 <ESP01SENDData+0xd8>)
 8003992:	7813      	ldrb	r3, [r2, #0]
 8003994:	f023 0301 	bic.w	r3, r3, #1
 8003998:	7013      	strb	r3, [r2, #0]
			esp01ATSate = ESP01ATAT;
 800399a:	4b2e      	ldr	r3, [pc, #184]	@ (8003a54 <ESP01SENDData+0xe8>)
 800399c:	2201      	movs	r2, #1
 800399e:	701a      	strb	r2, [r3, #0]
			esp01TimeoutTask = 10;
 80039a0:	4b2d      	ldr	r3, [pc, #180]	@ (8003a58 <ESP01SENDData+0xec>)
 80039a2:	220a      	movs	r2, #10
 80039a4:	601a      	str	r2, [r3, #0]
		}
		return;
 80039a6:	e049      	b.n	8003a3c <ESP01SENDData+0xd0>
	}
	if(esp01irTX != esp01iwTX){
 80039a8:	4b29      	ldr	r3, [pc, #164]	@ (8003a50 <ESP01SENDData+0xe4>)
 80039aa:	881a      	ldrh	r2, [r3, #0]
 80039ac:	4b27      	ldr	r3, [pc, #156]	@ (8003a4c <ESP01SENDData+0xe0>)
 80039ae:	881b      	ldrh	r3, [r3, #0]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d044      	beq.n	8003a3e <ESP01SENDData+0xd2>
		value = esp01TXATBuf[esp01irTX];
 80039b4:	4b26      	ldr	r3, [pc, #152]	@ (8003a50 <ESP01SENDData+0xe4>)
 80039b6:	881b      	ldrh	r3, [r3, #0]
 80039b8:	461a      	mov	r2, r3
 80039ba:	4b28      	ldr	r3, [pc, #160]	@ (8003a5c <ESP01SENDData+0xf0>)
 80039bc:	5c9b      	ldrb	r3, [r3, r2]
 80039be:	71fb      	strb	r3, [r7, #7]
		if(esp01Flags.bit.TXCIPSEND){
 80039c0:	4b20      	ldr	r3, [pc, #128]	@ (8003a44 <ESP01SENDData+0xd8>)
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	f003 0304 	and.w	r3, r3, #4
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d004      	beq.n	80039d8 <ESP01SENDData+0x6c>
			if(value == '>')
 80039ce:	79fb      	ldrb	r3, [r7, #7]
 80039d0:	2b3e      	cmp	r3, #62	@ 0x3e
 80039d2:	d101      	bne.n	80039d8 <ESP01SENDData+0x6c>
				value = '\n';
 80039d4:	230a      	movs	r3, #10
 80039d6:	71fb      	strb	r3, [r7, #7]
		}
		if(esp01Handle.WriteUSARTByte(value)){
 80039d8:	4b21      	ldr	r3, [pc, #132]	@ (8003a60 <ESP01SENDData+0xf4>)
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	79fa      	ldrb	r2, [r7, #7]
 80039de:	4610      	mov	r0, r2
 80039e0:	4798      	blx	r3
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d02a      	beq.n	8003a3e <ESP01SENDData+0xd2>
			if(esp01Flags.bit.TXCIPSEND){
 80039e8:	4b16      	ldr	r3, [pc, #88]	@ (8003a44 <ESP01SENDData+0xd8>)
 80039ea:	781b      	ldrb	r3, [r3, #0]
 80039ec:	f003 0304 	and.w	r3, r3, #4
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d013      	beq.n	8003a1e <ESP01SENDData+0xb2>
				if(esp01TXATBuf[esp01irTX] == '>'){
 80039f6:	4b16      	ldr	r3, [pc, #88]	@ (8003a50 <ESP01SENDData+0xe4>)
 80039f8:	881b      	ldrh	r3, [r3, #0]
 80039fa:	461a      	mov	r2, r3
 80039fc:	4b17      	ldr	r3, [pc, #92]	@ (8003a5c <ESP01SENDData+0xf0>)
 80039fe:	5c9b      	ldrb	r3, [r3, r2]
 8003a00:	2b3e      	cmp	r3, #62	@ 0x3e
 8003a02:	d10c      	bne.n	8003a1e <ESP01SENDData+0xb2>
					esp01Flags.bit.TXCIPSEND = 0;
 8003a04:	4a0f      	ldr	r2, [pc, #60]	@ (8003a44 <ESP01SENDData+0xd8>)
 8003a06:	7813      	ldrb	r3, [r2, #0]
 8003a08:	f023 0304 	bic.w	r3, r3, #4
 8003a0c:	7013      	strb	r3, [r2, #0]
					esp01Flags.bit.WAITINGSYMBOL = 1;
 8003a0e:	4a0d      	ldr	r2, [pc, #52]	@ (8003a44 <ESP01SENDData+0xd8>)
 8003a10:	7813      	ldrb	r3, [r2, #0]
 8003a12:	f043 0301 	orr.w	r3, r3, #1
 8003a16:	7013      	strb	r3, [r2, #0]
					esp01TimeoutTxSymbol = 5;
 8003a18:	4b0b      	ldr	r3, [pc, #44]	@ (8003a48 <ESP01SENDData+0xdc>)
 8003a1a:	2205      	movs	r2, #5
 8003a1c:	601a      	str	r2, [r3, #0]
				}
			}
			esp01irTX++;
 8003a1e:	4b0c      	ldr	r3, [pc, #48]	@ (8003a50 <ESP01SENDData+0xe4>)
 8003a20:	881b      	ldrh	r3, [r3, #0]
 8003a22:	3301      	adds	r3, #1
 8003a24:	b29a      	uxth	r2, r3
 8003a26:	4b0a      	ldr	r3, [pc, #40]	@ (8003a50 <ESP01SENDData+0xe4>)
 8003a28:	801a      	strh	r2, [r3, #0]
			if(esp01irTX == ESP01TXBUFAT)
 8003a2a:	4b09      	ldr	r3, [pc, #36]	@ (8003a50 <ESP01SENDData+0xe4>)
 8003a2c:	881b      	ldrh	r3, [r3, #0]
 8003a2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a32:	d104      	bne.n	8003a3e <ESP01SENDData+0xd2>
				esp01irTX = 0;
 8003a34:	4b06      	ldr	r3, [pc, #24]	@ (8003a50 <ESP01SENDData+0xe4>)
 8003a36:	2200      	movs	r2, #0
 8003a38:	801a      	strh	r2, [r3, #0]
 8003a3a:	e000      	b.n	8003a3e <ESP01SENDData+0xd2>
		return;
 8003a3c:	bf00      	nop
		}
	}
}
 8003a3e:	3708      	adds	r7, #8
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	2000082c 	.word	0x2000082c
 8003a48:	20000838 	.word	0x20000838
 8003a4c:	20000a5e 	.word	0x20000a5e
 8003a50:	20000a5c 	.word	0x20000a5c
 8003a54:	2000082a 	.word	0x2000082a
 8003a58:	20000830 	.word	0x20000830
 8003a5c:	20000958 	.word	0x20000958
 8003a60:	20000a64 	.word	0x20000a64

08003a64 <ESP01StrToBufTX>:

static void ESP01StrToBufTX(const char *str){
 8003a64:	b480      	push	{r7}
 8003a66:	b085      	sub	sp, #20
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
	for(int i=0; str[i]; i++){
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	60fb      	str	r3, [r7, #12]
 8003a70:	e017      	b.n	8003aa2 <ESP01StrToBufTX+0x3e>
		esp01TXATBuf[esp01iwTX++] = str[i];
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	441a      	add	r2, r3
 8003a78:	4b10      	ldr	r3, [pc, #64]	@ (8003abc <ESP01StrToBufTX+0x58>)
 8003a7a:	881b      	ldrh	r3, [r3, #0]
 8003a7c:	1c59      	adds	r1, r3, #1
 8003a7e:	b288      	uxth	r0, r1
 8003a80:	490e      	ldr	r1, [pc, #56]	@ (8003abc <ESP01StrToBufTX+0x58>)
 8003a82:	8008      	strh	r0, [r1, #0]
 8003a84:	4619      	mov	r1, r3
 8003a86:	7812      	ldrb	r2, [r2, #0]
 8003a88:	4b0d      	ldr	r3, [pc, #52]	@ (8003ac0 <ESP01StrToBufTX+0x5c>)
 8003a8a:	545a      	strb	r2, [r3, r1]
		if(esp01iwTX == ESP01TXBUFAT)
 8003a8c:	4b0b      	ldr	r3, [pc, #44]	@ (8003abc <ESP01StrToBufTX+0x58>)
 8003a8e:	881b      	ldrh	r3, [r3, #0]
 8003a90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a94:	d102      	bne.n	8003a9c <ESP01StrToBufTX+0x38>
			esp01iwTX = 0;
 8003a96:	4b09      	ldr	r3, [pc, #36]	@ (8003abc <ESP01StrToBufTX+0x58>)
 8003a98:	2200      	movs	r2, #0
 8003a9a:	801a      	strh	r2, [r3, #0]
	for(int i=0; str[i]; i++){
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	3301      	adds	r3, #1
 8003aa0:	60fb      	str	r3, [r7, #12]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	687a      	ldr	r2, [r7, #4]
 8003aa6:	4413      	add	r3, r2
 8003aa8:	781b      	ldrb	r3, [r3, #0]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d1e1      	bne.n	8003a72 <ESP01StrToBufTX+0xe>
	}
}
 8003aae:	bf00      	nop
 8003ab0:	bf00      	nop
 8003ab2:	3714      	adds	r7, #20
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr
 8003abc:	20000a5e 	.word	0x20000a5e
 8003ac0:	20000958 	.word	0x20000958

08003ac4 <ESP01ByteToBufTX>:

static void ESP01ByteToBufTX(uint8_t value){
 8003ac4:	b480      	push	{r7}
 8003ac6:	b083      	sub	sp, #12
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	4603      	mov	r3, r0
 8003acc:	71fb      	strb	r3, [r7, #7]
	esp01TXATBuf[esp01iwTX++] = value;
 8003ace:	4b0c      	ldr	r3, [pc, #48]	@ (8003b00 <ESP01ByteToBufTX+0x3c>)
 8003ad0:	881b      	ldrh	r3, [r3, #0]
 8003ad2:	1c5a      	adds	r2, r3, #1
 8003ad4:	b291      	uxth	r1, r2
 8003ad6:	4a0a      	ldr	r2, [pc, #40]	@ (8003b00 <ESP01ByteToBufTX+0x3c>)
 8003ad8:	8011      	strh	r1, [r2, #0]
 8003ada:	4619      	mov	r1, r3
 8003adc:	4a09      	ldr	r2, [pc, #36]	@ (8003b04 <ESP01ByteToBufTX+0x40>)
 8003ade:	79fb      	ldrb	r3, [r7, #7]
 8003ae0:	5453      	strb	r3, [r2, r1]
	if(esp01iwTX == ESP01TXBUFAT)
 8003ae2:	4b07      	ldr	r3, [pc, #28]	@ (8003b00 <ESP01ByteToBufTX+0x3c>)
 8003ae4:	881b      	ldrh	r3, [r3, #0]
 8003ae6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003aea:	d102      	bne.n	8003af2 <ESP01ByteToBufTX+0x2e>
		esp01iwTX = 0;
 8003aec:	4b04      	ldr	r3, [pc, #16]	@ (8003b00 <ESP01ByteToBufTX+0x3c>)
 8003aee:	2200      	movs	r2, #0
 8003af0:	801a      	strh	r2, [r3, #0]
}
 8003af2:	bf00      	nop
 8003af4:	370c      	adds	r7, #12
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr
 8003afe:	bf00      	nop
 8003b00:	20000a5e 	.word	0x20000a5e
 8003b04:	20000958 	.word	0x20000958

08003b08 <OLED_Print_Data_Task>:
/************************************ FIN FUNCIONES PARA ABSTRACCIÓN DE HARDWARE ************************************/
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void OLED_Print_Data_Task(){
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af02      	add	r7, sp, #8
	if(Display.isInit){
 8003b0e:	4bbe      	ldr	r3, [pc, #760]	@ (8003e08 <OLED_Print_Data_Task+0x300>)
 8003b10:	781b      	ldrb	r3, [r3, #0]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	f000 816a 	beq.w	8003dec <OLED_Print_Data_Task+0x2e4>
		switch(Display.state){
 8003b18:	4bbb      	ldr	r3, [pc, #748]	@ (8003e08 <OLED_Print_Data_Task+0x300>)
 8003b1a:	f893 3401 	ldrb.w	r3, [r3, #1025]	@ 0x401
 8003b1e:	2b02      	cmp	r3, #2
 8003b20:	d023      	beq.n	8003b6a <OLED_Print_Data_Task+0x62>
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	f300 8162 	bgt.w	8003dec <OLED_Print_Data_Task+0x2e4>
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d001      	beq.n	8003b30 <OLED_Print_Data_Task+0x28>
 8003b2c:	2b01      	cmp	r3, #1
				Display.state = INPUTS;
			}
			break;
		case MENU:

			break;
 8003b2e:	e15d      	b.n	8003dec <OLED_Print_Data_Task+0x2e4>
			if(HAL_GetTick() - Display.timer > 2000){
 8003b30:	f002 f806 	bl	8005b40 <HAL_GetTick>
 8003b34:	4602      	mov	r2, r0
 8003b36:	4bb4      	ldr	r3, [pc, #720]	@ (8003e08 <OLED_Print_Data_Task+0x300>)
 8003b38:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8003b42:	f240 8150 	bls.w	8003de6 <OLED_Print_Data_Task+0x2de>
				Display_Fill(SSD1306_COLOR_BLACK);
 8003b46:	2000      	movs	r0, #0
 8003b48:	f7fd ff56 	bl	80019f8 <Display_Fill>
				Display_DrawBitmap(0, 0, status_screen, 128, 64, SSD1306_COLOR_WHITE);
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	9301      	str	r3, [sp, #4]
 8003b50:	2340      	movs	r3, #64	@ 0x40
 8003b52:	9300      	str	r3, [sp, #0]
 8003b54:	2380      	movs	r3, #128	@ 0x80
 8003b56:	4aad      	ldr	r2, [pc, #692]	@ (8003e0c <OLED_Print_Data_Task+0x304>)
 8003b58:	2100      	movs	r1, #0
 8003b5a:	2000      	movs	r0, #0
 8003b5c:	f7fd ffd0 	bl	8001b00 <Display_DrawBitmap>
				Display.state = INPUTS;
 8003b60:	4ba9      	ldr	r3, [pc, #676]	@ (8003e08 <OLED_Print_Data_Task+0x300>)
 8003b62:	2202      	movs	r2, #2
 8003b64:	f883 2401 	strb.w	r2, [r3, #1025]	@ 0x401
			break;
 8003b68:	e13d      	b.n	8003de6 <OLED_Print_Data_Task+0x2de>
		case INPUTS:
			BateryLevel_Set();
 8003b6a:	f000 f96b 	bl	8003e44 <BateryLevel_Set>

			Display_DrawBitmap(2, 17, ADC_Blackout, 37, 44, SSD1306_COLOR_BLACK);
 8003b6e:	2300      	movs	r3, #0
 8003b70:	9301      	str	r3, [sp, #4]
 8003b72:	232c      	movs	r3, #44	@ 0x2c
 8003b74:	9300      	str	r3, [sp, #0]
 8003b76:	2325      	movs	r3, #37	@ 0x25
 8003b78:	4aa5      	ldr	r2, [pc, #660]	@ (8003e10 <OLED_Print_Data_Task+0x308>)
 8003b7a:	2111      	movs	r1, #17
 8003b7c:	2002      	movs	r0, #2
 8003b7e:	f7fd ffbf 	bl	8001b00 <Display_DrawBitmap>
			for(uint8_t i = 0; i < 8; i++){
 8003b82:	2300      	movs	r3, #0
 8003b84:	71fb      	strb	r3, [r7, #7]
 8003b86:	e05e      	b.n	8003c46 <OLED_Print_Data_Task+0x13e>
				Display.auxYPos = 107 * Analog.value[i] + 170000;
 8003b88:	79fb      	ldrb	r3, [r7, #7]
 8003b8a:	4aa2      	ldr	r2, [pc, #648]	@ (8003e14 <OLED_Print_Data_Task+0x30c>)
 8003b8c:	3308      	adds	r3, #8
 8003b8e:	005b      	lsls	r3, r3, #1
 8003b90:	4413      	add	r3, r2
 8003b92:	885b      	ldrh	r3, [r3, #2]
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	461a      	mov	r2, r3
 8003b98:	0052      	lsls	r2, r2, #1
 8003b9a:	441a      	add	r2, r3
 8003b9c:	4611      	mov	r1, r2
 8003b9e:	00c8      	lsls	r0, r1, #3
 8003ba0:	4611      	mov	r1, r2
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	440a      	add	r2, r1
 8003ba6:	0092      	lsls	r2, r2, #2
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	3310      	adds	r3, #16
 8003bae:	b2da      	uxtb	r2, r3
 8003bb0:	4b95      	ldr	r3, [pc, #596]	@ (8003e08 <OLED_Print_Data_Task+0x300>)
 8003bb2:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
				Display.auxYPos += 5000;
 8003bb6:	4b94      	ldr	r3, [pc, #592]	@ (8003e08 <OLED_Print_Data_Task+0x300>)
 8003bb8:	f893 3415 	ldrb.w	r3, [r3, #1045]	@ 0x415
 8003bbc:	3b78      	subs	r3, #120	@ 0x78
 8003bbe:	b2da      	uxtb	r2, r3
 8003bc0:	4b91      	ldr	r3, [pc, #580]	@ (8003e08 <OLED_Print_Data_Task+0x300>)
 8003bc2:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
				Display.auxYPos /= 10000;
 8003bc6:	4b90      	ldr	r3, [pc, #576]	@ (8003e08 <OLED_Print_Data_Task+0x300>)
 8003bc8:	f893 3415 	ldrb.w	r3, [r3, #1045]	@ 0x415
 8003bcc:	4a92      	ldr	r2, [pc, #584]	@ (8003e18 <OLED_Print_Data_Task+0x310>)
 8003bce:	fb82 1203 	smull	r1, r2, r2, r3
 8003bd2:	1312      	asrs	r2, r2, #12
 8003bd4:	17db      	asrs	r3, r3, #31
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	b2da      	uxtb	r2, r3
 8003bda:	4b8b      	ldr	r3, [pc, #556]	@ (8003e08 <OLED_Print_Data_Task+0x300>)
 8003bdc:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
				Display.auxXPos = 2 + i * 3;
 8003be0:	79fb      	ldrb	r3, [r7, #7]
 8003be2:	461a      	mov	r2, r3
 8003be4:	0052      	lsls	r2, r2, #1
 8003be6:	4413      	add	r3, r2
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	3302      	adds	r3, #2
 8003bec:	b2da      	uxtb	r2, r3
 8003bee:	4b86      	ldr	r3, [pc, #536]	@ (8003e08 <OLED_Print_Data_Task+0x300>)
 8003bf0:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
				Display_DrawLine(Display.auxXPos, 61,  Display.auxXPos, Display.auxYPos, SSD1306_COLOR_WHITE);
 8003bf4:	4b84      	ldr	r3, [pc, #528]	@ (8003e08 <OLED_Print_Data_Task+0x300>)
 8003bf6:	f893 3414 	ldrb.w	r3, [r3, #1044]	@ 0x414
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	4b82      	ldr	r3, [pc, #520]	@ (8003e08 <OLED_Print_Data_Task+0x300>)
 8003bfe:	f893 3414 	ldrb.w	r3, [r3, #1044]	@ 0x414
 8003c02:	461a      	mov	r2, r3
 8003c04:	4b80      	ldr	r3, [pc, #512]	@ (8003e08 <OLED_Print_Data_Task+0x300>)
 8003c06:	f893 3415 	ldrb.w	r3, [r3, #1045]	@ 0x415
 8003c0a:	4619      	mov	r1, r3
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	9300      	str	r3, [sp, #0]
 8003c10:	460b      	mov	r3, r1
 8003c12:	213d      	movs	r1, #61	@ 0x3d
 8003c14:	f7fe f87e 	bl	8001d14 <Display_DrawLine>
				Display_DrawLine(Display.auxXPos+1, 61,  Display.auxXPos+1, Display.auxYPos, SSD1306_COLOR_WHITE);
 8003c18:	4b7b      	ldr	r3, [pc, #492]	@ (8003e08 <OLED_Print_Data_Task+0x300>)
 8003c1a:	f893 3414 	ldrb.w	r3, [r3, #1044]	@ 0x414
 8003c1e:	3301      	adds	r3, #1
 8003c20:	b298      	uxth	r0, r3
 8003c22:	4b79      	ldr	r3, [pc, #484]	@ (8003e08 <OLED_Print_Data_Task+0x300>)
 8003c24:	f893 3414 	ldrb.w	r3, [r3, #1044]	@ 0x414
 8003c28:	3301      	adds	r3, #1
 8003c2a:	b29a      	uxth	r2, r3
 8003c2c:	4b76      	ldr	r3, [pc, #472]	@ (8003e08 <OLED_Print_Data_Task+0x300>)
 8003c2e:	f893 3415 	ldrb.w	r3, [r3, #1045]	@ 0x415
 8003c32:	4619      	mov	r1, r3
 8003c34:	2301      	movs	r3, #1
 8003c36:	9300      	str	r3, [sp, #0]
 8003c38:	460b      	mov	r3, r1
 8003c3a:	213d      	movs	r1, #61	@ 0x3d
 8003c3c:	f7fe f86a 	bl	8001d14 <Display_DrawLine>
			for(uint8_t i = 0; i < 8; i++){
 8003c40:	79fb      	ldrb	r3, [r7, #7]
 8003c42:	3301      	adds	r3, #1
 8003c44:	71fb      	strb	r3, [r7, #7]
 8003c46:	79fb      	ldrb	r3, [r7, #7]
 8003c48:	2b07      	cmp	r3, #7
 8003c4a:	d99d      	bls.n	8003b88 <OLED_Print_Data_Task+0x80>
			}

			if(MPU6050.isInit){
 8003c4c:	4b73      	ldr	r3, [pc, #460]	@ (8003e1c <OLED_Print_Data_Task+0x314>)
 8003c4e:	f893 30c2 	ldrb.w	r3, [r3, #194]	@ 0xc2
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	f000 80c9 	beq.w	8003dea <OLED_Print_Data_Task+0x2e2>
				MPU6050.Acc.x = (MPU6050.Acc.x / 16384.0) * 9.8f;
 8003c58:	4b70      	ldr	r3, [pc, #448]	@ (8003e1c <OLED_Print_Data_Task+0x314>)
 8003c5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f7fc fc68 	bl	8000534 <__aeabi_i2d>
 8003c64:	f04f 0200 	mov.w	r2, #0
 8003c68:	4b6d      	ldr	r3, [pc, #436]	@ (8003e20 <OLED_Print_Data_Task+0x318>)
 8003c6a:	f7fc fdf7 	bl	800085c <__aeabi_ddiv>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	460b      	mov	r3, r1
 8003c72:	4610      	mov	r0, r2
 8003c74:	4619      	mov	r1, r3
 8003c76:	a362      	add	r3, pc, #392	@ (adr r3, 8003e00 <OLED_Print_Data_Task+0x2f8>)
 8003c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c7c:	f7fc fcc4 	bl	8000608 <__aeabi_dmul>
 8003c80:	4602      	mov	r2, r0
 8003c82:	460b      	mov	r3, r1
 8003c84:	4610      	mov	r0, r2
 8003c86:	4619      	mov	r1, r3
 8003c88:	f7fc fed0 	bl	8000a2c <__aeabi_d2iz>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	b21a      	sxth	r2, r3
 8003c90:	4b62      	ldr	r3, [pc, #392]	@ (8003e1c <OLED_Print_Data_Task+0x314>)
 8003c92:	801a      	strh	r2, [r3, #0]
				MPU6050.Acc.y = (MPU6050.Acc.y / 16384.0) * 9.8f;
 8003c94:	4b61      	ldr	r3, [pc, #388]	@ (8003e1c <OLED_Print_Data_Task+0x314>)
 8003c96:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f7fc fc4a 	bl	8000534 <__aeabi_i2d>
 8003ca0:	f04f 0200 	mov.w	r2, #0
 8003ca4:	4b5e      	ldr	r3, [pc, #376]	@ (8003e20 <OLED_Print_Data_Task+0x318>)
 8003ca6:	f7fc fdd9 	bl	800085c <__aeabi_ddiv>
 8003caa:	4602      	mov	r2, r0
 8003cac:	460b      	mov	r3, r1
 8003cae:	4610      	mov	r0, r2
 8003cb0:	4619      	mov	r1, r3
 8003cb2:	a353      	add	r3, pc, #332	@ (adr r3, 8003e00 <OLED_Print_Data_Task+0x2f8>)
 8003cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cb8:	f7fc fca6 	bl	8000608 <__aeabi_dmul>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	460b      	mov	r3, r1
 8003cc0:	4610      	mov	r0, r2
 8003cc2:	4619      	mov	r1, r3
 8003cc4:	f7fc feb2 	bl	8000a2c <__aeabi_d2iz>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	b21a      	sxth	r2, r3
 8003ccc:	4b53      	ldr	r3, [pc, #332]	@ (8003e1c <OLED_Print_Data_Task+0x314>)
 8003cce:	805a      	strh	r2, [r3, #2]
				MPU6050.Acc.z = (MPU6050.Acc.z / 16384.0) * 9.8f;
 8003cd0:	4b52      	ldr	r3, [pc, #328]	@ (8003e1c <OLED_Print_Data_Task+0x314>)
 8003cd2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f7fc fc2c 	bl	8000534 <__aeabi_i2d>
 8003cdc:	f04f 0200 	mov.w	r2, #0
 8003ce0:	4b4f      	ldr	r3, [pc, #316]	@ (8003e20 <OLED_Print_Data_Task+0x318>)
 8003ce2:	f7fc fdbb 	bl	800085c <__aeabi_ddiv>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	460b      	mov	r3, r1
 8003cea:	4610      	mov	r0, r2
 8003cec:	4619      	mov	r1, r3
 8003cee:	a344      	add	r3, pc, #272	@ (adr r3, 8003e00 <OLED_Print_Data_Task+0x2f8>)
 8003cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cf4:	f7fc fc88 	bl	8000608 <__aeabi_dmul>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	460b      	mov	r3, r1
 8003cfc:	4610      	mov	r0, r2
 8003cfe:	4619      	mov	r1, r3
 8003d00:	f7fc fe94 	bl	8000a2c <__aeabi_d2iz>
 8003d04:	4603      	mov	r3, r0
 8003d06:	b21a      	sxth	r2, r3
 8003d08:	4b44      	ldr	r3, [pc, #272]	@ (8003e1c <OLED_Print_Data_Task+0x314>)
 8003d0a:	809a      	strh	r2, [r3, #4]
				sprintf((char*)Display.auxString, "Ax:%d", MPU6050.Acc.x);
 8003d0c:	4b43      	ldr	r3, [pc, #268]	@ (8003e1c <OLED_Print_Data_Task+0x314>)
 8003d0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d12:	461a      	mov	r2, r3
 8003d14:	4943      	ldr	r1, [pc, #268]	@ (8003e24 <OLED_Print_Data_Task+0x31c>)
 8003d16:	4844      	ldr	r0, [pc, #272]	@ (8003e28 <OLED_Print_Data_Task+0x320>)
 8003d18:	f00e fe3c 	bl	8012994 <siprintf>
				Display_SetCursor(25, 17);
 8003d1c:	2111      	movs	r1, #17
 8003d1e:	2019      	movs	r0, #25
 8003d20:	f7fd fe52 	bl	80019c8 <Display_SetCursor>
				Display_WriteString((char*)Display.auxString, Font_7x10, SSD1306_COLOR_WHITE);
 8003d24:	4a41      	ldr	r2, [pc, #260]	@ (8003e2c <OLED_Print_Data_Task+0x324>)
 8003d26:	2301      	movs	r3, #1
 8003d28:	ca06      	ldmia	r2, {r1, r2}
 8003d2a:	483f      	ldr	r0, [pc, #252]	@ (8003e28 <OLED_Print_Data_Task+0x320>)
 8003d2c:	f7fd ffcc 	bl	8001cc8 <Display_WriteString>
				sprintf((char*)Display.auxString, "Ay:%d", MPU6050.Acc.y);
 8003d30:	4b3a      	ldr	r3, [pc, #232]	@ (8003e1c <OLED_Print_Data_Task+0x314>)
 8003d32:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003d36:	461a      	mov	r2, r3
 8003d38:	493d      	ldr	r1, [pc, #244]	@ (8003e30 <OLED_Print_Data_Task+0x328>)
 8003d3a:	483b      	ldr	r0, [pc, #236]	@ (8003e28 <OLED_Print_Data_Task+0x320>)
 8003d3c:	f00e fe2a 	bl	8012994 <siprintf>
				Display_SetCursor(25, 34);
 8003d40:	2122      	movs	r1, #34	@ 0x22
 8003d42:	2019      	movs	r0, #25
 8003d44:	f7fd fe40 	bl	80019c8 <Display_SetCursor>
				Display_WriteString((char*)Display.auxString, Font_7x10, SSD1306_COLOR_WHITE);
 8003d48:	4a38      	ldr	r2, [pc, #224]	@ (8003e2c <OLED_Print_Data_Task+0x324>)
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	ca06      	ldmia	r2, {r1, r2}
 8003d4e:	4836      	ldr	r0, [pc, #216]	@ (8003e28 <OLED_Print_Data_Task+0x320>)
 8003d50:	f7fd ffba 	bl	8001cc8 <Display_WriteString>
				sprintf((char*)Display.auxString, "Az:%d", MPU6050.Acc.z);
 8003d54:	4b31      	ldr	r3, [pc, #196]	@ (8003e1c <OLED_Print_Data_Task+0x314>)
 8003d56:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	4935      	ldr	r1, [pc, #212]	@ (8003e34 <OLED_Print_Data_Task+0x32c>)
 8003d5e:	4832      	ldr	r0, [pc, #200]	@ (8003e28 <OLED_Print_Data_Task+0x320>)
 8003d60:	f00e fe18 	bl	8012994 <siprintf>
				Display_SetCursor(25, 51);
 8003d64:	2133      	movs	r1, #51	@ 0x33
 8003d66:	2019      	movs	r0, #25
 8003d68:	f7fd fe2e 	bl	80019c8 <Display_SetCursor>
				Display_WriteString((char*)Display.auxString, Font_7x10, SSD1306_COLOR_WHITE);
 8003d6c:	4a2f      	ldr	r2, [pc, #188]	@ (8003e2c <OLED_Print_Data_Task+0x324>)
 8003d6e:	2301      	movs	r3, #1
 8003d70:	ca06      	ldmia	r2, {r1, r2}
 8003d72:	482d      	ldr	r0, [pc, #180]	@ (8003e28 <OLED_Print_Data_Task+0x320>)
 8003d74:	f7fd ffa8 	bl	8001cc8 <Display_WriteString>
				sprintf((char*)Display.auxString, "Gx:%d", MPU6050.Gyro.x);
 8003d78:	4b28      	ldr	r3, [pc, #160]	@ (8003e1c <OLED_Print_Data_Task+0x314>)
 8003d7a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003d7e:	461a      	mov	r2, r3
 8003d80:	492d      	ldr	r1, [pc, #180]	@ (8003e38 <OLED_Print_Data_Task+0x330>)
 8003d82:	4829      	ldr	r0, [pc, #164]	@ (8003e28 <OLED_Print_Data_Task+0x320>)
 8003d84:	f00e fe06 	bl	8012994 <siprintf>
				Display_SetCursor(73, 17);
 8003d88:	2111      	movs	r1, #17
 8003d8a:	2049      	movs	r0, #73	@ 0x49
 8003d8c:	f7fd fe1c 	bl	80019c8 <Display_SetCursor>
				Display_WriteString((char*)Display.auxString, Font_7x10, SSD1306_COLOR_WHITE);
 8003d90:	4a26      	ldr	r2, [pc, #152]	@ (8003e2c <OLED_Print_Data_Task+0x324>)
 8003d92:	2301      	movs	r3, #1
 8003d94:	ca06      	ldmia	r2, {r1, r2}
 8003d96:	4824      	ldr	r0, [pc, #144]	@ (8003e28 <OLED_Print_Data_Task+0x320>)
 8003d98:	f7fd ff96 	bl	8001cc8 <Display_WriteString>
				sprintf((char*)Display.auxString, "Gy:%d", MPU6050.Gyro.y);
 8003d9c:	4b1f      	ldr	r3, [pc, #124]	@ (8003e1c <OLED_Print_Data_Task+0x314>)
 8003d9e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003da2:	461a      	mov	r2, r3
 8003da4:	4925      	ldr	r1, [pc, #148]	@ (8003e3c <OLED_Print_Data_Task+0x334>)
 8003da6:	4820      	ldr	r0, [pc, #128]	@ (8003e28 <OLED_Print_Data_Task+0x320>)
 8003da8:	f00e fdf4 	bl	8012994 <siprintf>
				Display_SetCursor(73, 34);
 8003dac:	2122      	movs	r1, #34	@ 0x22
 8003dae:	2049      	movs	r0, #73	@ 0x49
 8003db0:	f7fd fe0a 	bl	80019c8 <Display_SetCursor>
				Display_WriteString((char*)Display.auxString, Font_7x10, SSD1306_COLOR_WHITE);
 8003db4:	4a1d      	ldr	r2, [pc, #116]	@ (8003e2c <OLED_Print_Data_Task+0x324>)
 8003db6:	2301      	movs	r3, #1
 8003db8:	ca06      	ldmia	r2, {r1, r2}
 8003dba:	481b      	ldr	r0, [pc, #108]	@ (8003e28 <OLED_Print_Data_Task+0x320>)
 8003dbc:	f7fd ff84 	bl	8001cc8 <Display_WriteString>
				sprintf((char*)Display.auxString, "Gz:%d", MPU6050.Gyro.z);
 8003dc0:	4b16      	ldr	r3, [pc, #88]	@ (8003e1c <OLED_Print_Data_Task+0x314>)
 8003dc2:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	491d      	ldr	r1, [pc, #116]	@ (8003e40 <OLED_Print_Data_Task+0x338>)
 8003dca:	4817      	ldr	r0, [pc, #92]	@ (8003e28 <OLED_Print_Data_Task+0x320>)
 8003dcc:	f00e fde2 	bl	8012994 <siprintf>
				Display_SetCursor(73, 51);
 8003dd0:	2133      	movs	r1, #51	@ 0x33
 8003dd2:	2049      	movs	r0, #73	@ 0x49
 8003dd4:	f7fd fdf8 	bl	80019c8 <Display_SetCursor>
				Display_WriteString((char*)Display.auxString, Font_7x10, SSD1306_COLOR_WHITE);
 8003dd8:	4a14      	ldr	r2, [pc, #80]	@ (8003e2c <OLED_Print_Data_Task+0x324>)
 8003dda:	2301      	movs	r3, #1
 8003ddc:	ca06      	ldmia	r2, {r1, r2}
 8003dde:	4812      	ldr	r0, [pc, #72]	@ (8003e28 <OLED_Print_Data_Task+0x320>)
 8003de0:	f7fd ff72 	bl	8001cc8 <Display_WriteString>
			}
			break;
 8003de4:	e001      	b.n	8003dea <OLED_Print_Data_Task+0x2e2>
			break;
 8003de6:	bf00      	nop
 8003de8:	e000      	b.n	8003dec <OLED_Print_Data_Task+0x2e4>
			break;
 8003dea:	bf00      	nop
		}
	}

	Display_I2C_Refresh_Ready(TRUE);
 8003dec:	2001      	movs	r0, #1
 8003dee:	f7fd fddb 	bl	80019a8 <Display_I2C_Refresh_Ready>
}
 8003df2:	bf00      	nop
 8003df4:	3708      	adds	r7, #8
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	f3af 8000 	nop.w
 8003e00:	a0000000 	.word	0xa0000000
 8003e04:	40239999 	.word	0x40239999
 8003e08:	20000e64 	.word	0x20000e64
 8003e0c:	08013bd0 	.word	0x08013bd0
 8003e10:	08013fd0 	.word	0x08013fd0
 8003e14:	2000127c 	.word	0x2000127c
 8003e18:	68db8bad 	.word	0x68db8bad
 8003e1c:	20000da0 	.word	0x20000da0
 8003e20:	40d00000 	.word	0x40d00000
 8003e24:	08013514 	.word	0x08013514
 8003e28:	2000126c 	.word	0x2000126c
 8003e2c:	20000000 	.word	0x20000000
 8003e30:	0801351c 	.word	0x0801351c
 8003e34:	08013524 	.word	0x08013524
 8003e38:	0801352c 	.word	0x0801352c
 8003e3c:	08013534 	.word	0x08013534
 8003e40:	0801353c 	.word	0x0801353c

08003e44 <BateryLevel_Set>:

void BateryLevel_Set(){
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b082      	sub	sp, #8
 8003e48:	af02      	add	r7, sp, #8
	Display_DrawFilledRectangle(3, 4, 6, 9, SSD1306_COLOR_BLACK);
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	9300      	str	r3, [sp, #0]
 8003e4e:	2309      	movs	r3, #9
 8003e50:	2206      	movs	r2, #6
 8003e52:	2104      	movs	r1, #4
 8003e54:	2003      	movs	r0, #3
 8003e56:	f7fe f80b 	bl	8001e70 <Display_DrawFilledRectangle>
	if(Analog.value[8] >= 3900){
 8003e5a:	4b1f      	ldr	r3, [pc, #124]	@ (8003ed8 <BateryLevel_Set+0x94>)
 8003e5c:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8003e5e:	f640 723b 	movw	r2, #3899	@ 0xf3b
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d908      	bls.n	8003e78 <BateryLevel_Set+0x34>
		Display_DrawFilledRectangle(3, 4, 6, 9, SSD1306_COLOR_WHITE);
 8003e66:	2301      	movs	r3, #1
 8003e68:	9300      	str	r3, [sp, #0]
 8003e6a:	2309      	movs	r3, #9
 8003e6c:	2206      	movs	r2, #6
 8003e6e:	2104      	movs	r1, #4
 8003e70:	2003      	movs	r0, #3
 8003e72:	f7fd fffd 	bl	8001e70 <Display_DrawFilledRectangle>
	}else if(Analog.value[8] >= 2047){
		Display_DrawFilledRectangle(3, 8, 6, 5, SSD1306_COLOR_WHITE);
	}else if(Analog.value[8] >= 1023){
		Display_DrawFilledRectangle(3, 11, 6, 2, SSD1306_COLOR_WHITE);
	}
}
 8003e76:	e02b      	b.n	8003ed0 <BateryLevel_Set+0x8c>
	}else if(Analog.value[8] >= 3000){
 8003e78:	4b17      	ldr	r3, [pc, #92]	@ (8003ed8 <BateryLevel_Set+0x94>)
 8003e7a:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8003e7c:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d908      	bls.n	8003e96 <BateryLevel_Set+0x52>
		Display_DrawFilledRectangle(3, 6, 6, 7, SSD1306_COLOR_WHITE);
 8003e84:	2301      	movs	r3, #1
 8003e86:	9300      	str	r3, [sp, #0]
 8003e88:	2307      	movs	r3, #7
 8003e8a:	2206      	movs	r2, #6
 8003e8c:	2106      	movs	r1, #6
 8003e8e:	2003      	movs	r0, #3
 8003e90:	f7fd ffee 	bl	8001e70 <Display_DrawFilledRectangle>
}
 8003e94:	e01c      	b.n	8003ed0 <BateryLevel_Set+0x8c>
	}else if(Analog.value[8] >= 2047){
 8003e96:	4b10      	ldr	r3, [pc, #64]	@ (8003ed8 <BateryLevel_Set+0x94>)
 8003e98:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8003e9a:	f240 72fe 	movw	r2, #2046	@ 0x7fe
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d908      	bls.n	8003eb4 <BateryLevel_Set+0x70>
		Display_DrawFilledRectangle(3, 8, 6, 5, SSD1306_COLOR_WHITE);
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	9300      	str	r3, [sp, #0]
 8003ea6:	2305      	movs	r3, #5
 8003ea8:	2206      	movs	r2, #6
 8003eaa:	2108      	movs	r1, #8
 8003eac:	2003      	movs	r0, #3
 8003eae:	f7fd ffdf 	bl	8001e70 <Display_DrawFilledRectangle>
}
 8003eb2:	e00d      	b.n	8003ed0 <BateryLevel_Set+0x8c>
	}else if(Analog.value[8] >= 1023){
 8003eb4:	4b08      	ldr	r3, [pc, #32]	@ (8003ed8 <BateryLevel_Set+0x94>)
 8003eb6:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8003eb8:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d907      	bls.n	8003ed0 <BateryLevel_Set+0x8c>
		Display_DrawFilledRectangle(3, 11, 6, 2, SSD1306_COLOR_WHITE);
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	9300      	str	r3, [sp, #0]
 8003ec4:	2302      	movs	r3, #2
 8003ec6:	2206      	movs	r2, #6
 8003ec8:	210b      	movs	r1, #11
 8003eca:	2003      	movs	r0, #3
 8003ecc:	f7fd ffd0 	bl	8001e70 <Display_DrawFilledRectangle>
}
 8003ed0:	bf00      	nop
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	2000127c 	.word	0x2000127c

08003edc <decodeOn_USB>:

void decodeOn_USB(s_commData *data){
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b084      	sub	sp, #16
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
	switch(RXBUF[RXCMD]){
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	785b      	ldrb	r3, [r3, #1]
 8003ee8:	3302      	adds	r3, #2
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	4413      	add	r3, r2
 8003eee:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8003ef2:	2bf1      	cmp	r3, #241	@ 0xf1
 8003ef4:	f000 81c8 	beq.w	8004288 <decodeOn_USB+0x3ac>
 8003ef8:	2bf1      	cmp	r3, #241	@ 0xf1
 8003efa:	f300 81be 	bgt.w	800427a <decodeOn_USB+0x39e>
 8003efe:	2bf0      	cmp	r3, #240	@ 0xf0
 8003f00:	d036      	beq.n	8003f70 <decodeOn_USB+0x94>
 8003f02:	2bf0      	cmp	r3, #240	@ 0xf0
 8003f04:	f300 81b9 	bgt.w	800427a <decodeOn_USB+0x39e>
 8003f08:	2bb1      	cmp	r3, #177	@ 0xb1
 8003f0a:	dc2d      	bgt.n	8003f68 <decodeOn_USB+0x8c>
 8003f0c:	2ba0      	cmp	r3, #160	@ 0xa0
 8003f0e:	f2c0 81b4 	blt.w	800427a <decodeOn_USB+0x39e>
 8003f12:	3ba0      	subs	r3, #160	@ 0xa0
 8003f14:	2b11      	cmp	r3, #17
 8003f16:	f200 81b0 	bhi.w	800427a <decodeOn_USB+0x39e>
 8003f1a:	a201      	add	r2, pc, #4	@ (adr r2, 8003f20 <decodeOn_USB+0x44>)
 8003f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f20:	08003f8b 	.word	0x08003f8b
 8003f24:	08004001 	.word	0x08004001
 8003f28:	0800405b 	.word	0x0800405b
 8003f2c:	080040ef 	.word	0x080040ef
 8003f30:	080041b5 	.word	0x080041b5
 8003f34:	0800427b 	.word	0x0800427b
 8003f38:	0800427b 	.word	0x0800427b
 8003f3c:	0800427b 	.word	0x0800427b
 8003f40:	0800427b 	.word	0x0800427b
 8003f44:	0800427b 	.word	0x0800427b
 8003f48:	0800427b 	.word	0x0800427b
 8003f4c:	0800427b 	.word	0x0800427b
 8003f50:	0800427b 	.word	0x0800427b
 8003f54:	0800427b 	.word	0x0800427b
 8003f58:	0800427b 	.word	0x0800427b
 8003f5c:	0800427b 	.word	0x0800427b
 8003f60:	0800427b 	.word	0x0800427b
 8003f64:	0800428d 	.word	0x0800428d
 8003f68:	2bde      	cmp	r3, #222	@ 0xde
 8003f6a:	f000 8191 	beq.w	8004290 <decodeOn_USB+0x3b4>
 8003f6e:	e184      	b.n	800427a <decodeOn_USB+0x39e>
	case GETALIVE:
		data->auxBuffer[0] = ACK;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	220d      	movs	r2, #13
 8003f74:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
		comm_sendCMD(data, GETALIVE, &data->auxBuffer[0], 1);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 8003f7e:	2301      	movs	r3, #1
 8003f80:	21f0      	movs	r1, #240	@ 0xf0
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f7fe faac 	bl	80024e0 <comm_sendCMD>
		break;
 8003f88:	e183      	b.n	8004292 <decodeOn_USB+0x3b6>
	case FIRMWARE:
		break;
	case USERTEXT:
		break;
	case ADCSINGLE:
		if(RXBUF[RXCMD + 1] <= 8 && RXBUF[RXCMD + 1] >= 0){
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	785b      	ldrb	r3, [r3, #1]
 8003f8e:	3303      	adds	r3, #3
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	4413      	add	r3, r2
 8003f94:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8003f98:	2b08      	cmp	r3, #8
 8003f9a:	d82a      	bhi.n	8003ff2 <decodeOn_USB+0x116>
			decom.ui16[0] = Analog.value[RXBUF[RXCMD + 1]];
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	785b      	ldrb	r3, [r3, #1]
 8003fa0:	3303      	adds	r3, #3
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	4413      	add	r3, r2
 8003fa6:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8003faa:	4a78      	ldr	r2, [pc, #480]	@ (800418c <decodeOn_USB+0x2b0>)
 8003fac:	3308      	adds	r3, #8
 8003fae:	005b      	lsls	r3, r3, #1
 8003fb0:	4413      	add	r3, r2
 8003fb2:	885a      	ldrh	r2, [r3, #2]
 8003fb4:	4b76      	ldr	r3, [pc, #472]	@ (8004190 <decodeOn_USB+0x2b4>)
 8003fb6:	801a      	strh	r2, [r3, #0]
			data->auxBuffer[0] = RXBUF[RXCMD + 1];
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	785b      	ldrb	r3, [r3, #1]
 8003fbc:	3303      	adds	r3, #3
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	4413      	add	r3, r2
 8003fc2:	f893 2106 	ldrb.w	r2, [r3, #262]	@ 0x106
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
			data->auxBuffer[1] = decom.ui8[0];
 8003fcc:	4b70      	ldr	r3, [pc, #448]	@ (8004190 <decodeOn_USB+0x2b4>)
 8003fce:	781a      	ldrb	r2, [r3, #0]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	f883 2211 	strb.w	r2, [r3, #529]	@ 0x211
			data->auxBuffer[2] = decom.ui8[1];
 8003fd6:	4b6e      	ldr	r3, [pc, #440]	@ (8004190 <decodeOn_USB+0x2b4>)
 8003fd8:	785a      	ldrb	r2, [r3, #1]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f883 2212 	strb.w	r2, [r3, #530]	@ 0x212
			comm_sendCMD(data, ADCSINGLE, &data->auxBuffer[0], 3);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	21a0      	movs	r1, #160	@ 0xa0
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f7fe fa78 	bl	80024e0 <comm_sendCMD>
		}else{
			comm_sendCMD(data, SYSWARNING, (uint8_t*)"NO ADC", 6);
		}
		break;
 8003ff0:	e14f      	b.n	8004292 <decodeOn_USB+0x3b6>
			comm_sendCMD(data, SYSWARNING, (uint8_t*)"NO ADC", 6);
 8003ff2:	2306      	movs	r3, #6
 8003ff4:	4a67      	ldr	r2, [pc, #412]	@ (8004194 <decodeOn_USB+0x2b8>)
 8003ff6:	21ef      	movs	r1, #239	@ 0xef
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f7fe fa71 	bl	80024e0 <comm_sendCMD>
		break;
 8003ffe:	e148      	b.n	8004292 <decodeOn_USB+0x3b6>
	case ADCBLOCK:
		for(uint8_t i = 0; i < ADC_NUM_SENSORS; i++){
 8004000:	2300      	movs	r3, #0
 8004002:	73fb      	strb	r3, [r7, #15]
 8004004:	e01d      	b.n	8004042 <decodeOn_USB+0x166>
			decom.ui16[0] = Analog.value[i];
 8004006:	7bfb      	ldrb	r3, [r7, #15]
 8004008:	4a60      	ldr	r2, [pc, #384]	@ (800418c <decodeOn_USB+0x2b0>)
 800400a:	3308      	adds	r3, #8
 800400c:	005b      	lsls	r3, r3, #1
 800400e:	4413      	add	r3, r2
 8004010:	885a      	ldrh	r2, [r3, #2]
 8004012:	4b5f      	ldr	r3, [pc, #380]	@ (8004190 <decodeOn_USB+0x2b4>)
 8004014:	801a      	strh	r2, [r3, #0]
			data->auxBuffer[i*2] = decom.ui8[0];
 8004016:	7bfb      	ldrb	r3, [r7, #15]
 8004018:	005b      	lsls	r3, r3, #1
 800401a:	4a5d      	ldr	r2, [pc, #372]	@ (8004190 <decodeOn_USB+0x2b4>)
 800401c:	7811      	ldrb	r1, [r2, #0]
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	4413      	add	r3, r2
 8004022:	460a      	mov	r2, r1
 8004024:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
			data->auxBuffer[i*2+1] = decom.ui8[1];
 8004028:	7bfb      	ldrb	r3, [r7, #15]
 800402a:	005b      	lsls	r3, r3, #1
 800402c:	3301      	adds	r3, #1
 800402e:	4a58      	ldr	r2, [pc, #352]	@ (8004190 <decodeOn_USB+0x2b4>)
 8004030:	7851      	ldrb	r1, [r2, #1]
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	4413      	add	r3, r2
 8004036:	460a      	mov	r2, r1
 8004038:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
		for(uint8_t i = 0; i < ADC_NUM_SENSORS; i++){
 800403c:	7bfb      	ldrb	r3, [r7, #15]
 800403e:	3301      	adds	r3, #1
 8004040:	73fb      	strb	r3, [r7, #15]
 8004042:	7bfb      	ldrb	r3, [r7, #15]
 8004044:	2b08      	cmp	r3, #8
 8004046:	d9de      	bls.n	8004006 <decodeOn_USB+0x12a>
		}
		comm_sendCMD(data, ADCBLOCK, data->auxBuffer, 17);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 800404e:	2311      	movs	r3, #17
 8004050:	21a1      	movs	r1, #161	@ 0xa1
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f7fe fa44 	bl	80024e0 <comm_sendCMD>
		break;
 8004058:	e11b      	b.n	8004292 <decodeOn_USB+0x3b6>
	case DEBUGER:

		break;
	case SETMOTOR:
		if(RXBUF[RXCMD + 1] == MOTOR_L){
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	785b      	ldrb	r3, [r3, #1]
 800405e:	3303      	adds	r3, #3
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	4413      	add	r3, r2
 8004064:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8004068:	2b00      	cmp	r3, #0
 800406a:	d117      	bne.n	800409c <decodeOn_USB+0x1c0>
			Motor_Set_Speed(&MotorL, RXBUF[RXCMD + 2]);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	785b      	ldrb	r3, [r3, #1]
 8004070:	3304      	adds	r3, #4
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	4413      	add	r3, r2
 8004076:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 800407a:	b25b      	sxtb	r3, r3
 800407c:	4619      	mov	r1, r3
 800407e:	4846      	ldr	r0, [pc, #280]	@ (8004198 <decodeOn_USB+0x2bc>)
 8004080:	f7fd ffdc 	bl	800203c <Motor_Set_Speed>
			USB.data.auxBuffer[0] = ACK;
 8004084:	4b45      	ldr	r3, [pc, #276]	@ (800419c <decodeOn_USB+0x2c0>)
 8004086:	220d      	movs	r2, #13
 8004088:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
			comm_sendCMD(data, SETMOTOR, data->auxBuffer, 1);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 8004092:	2301      	movs	r3, #1
 8004094:	21a2      	movs	r1, #162	@ 0xa2
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f7fe fa22 	bl	80024e0 <comm_sendCMD>
		}
		if(RXBUF[RXCMD + 1] == MOTOR_R){
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	785b      	ldrb	r3, [r3, #1]
 80040a0:	3303      	adds	r3, #3
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	4413      	add	r3, r2
 80040a6:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d118      	bne.n	80040e0 <decodeOn_USB+0x204>
			Motor_Set_Speed(&MotorR, RXBUF[RXCMD + 2]);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	785b      	ldrb	r3, [r3, #1]
 80040b2:	3304      	adds	r3, #4
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	4413      	add	r3, r2
 80040b8:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 80040bc:	b25b      	sxtb	r3, r3
 80040be:	4619      	mov	r1, r3
 80040c0:	4837      	ldr	r0, [pc, #220]	@ (80041a0 <decodeOn_USB+0x2c4>)
 80040c2:	f7fd ffbb 	bl	800203c <Motor_Set_Speed>
			USB.data.auxBuffer[0] = ACK;
 80040c6:	4b35      	ldr	r3, [pc, #212]	@ (800419c <decodeOn_USB+0x2c0>)
 80040c8:	220d      	movs	r2, #13
 80040ca:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
			comm_sendCMD(data, SETMOTOR, data->auxBuffer, 1);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 80040d4:	2301      	movs	r3, #1
 80040d6:	21a2      	movs	r1, #162	@ 0xa2
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f7fe fa01 	bl	80024e0 <comm_sendCMD>
		}else{
			comm_sendCMD(data, SYSWARNING, (uint8_t*)"NO MOTOR", 8);
		}
		break;
 80040de:	e0d8      	b.n	8004292 <decodeOn_USB+0x3b6>
			comm_sendCMD(data, SYSWARNING, (uint8_t*)"NO MOTOR", 8);
 80040e0:	2308      	movs	r3, #8
 80040e2:	4a30      	ldr	r2, [pc, #192]	@ (80041a4 <decodeOn_USB+0x2c8>)
 80040e4:	21ef      	movs	r1, #239	@ 0xef
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f7fe f9fa 	bl	80024e0 <comm_sendCMD>
		break;
 80040ec:	e0d1      	b.n	8004292 <decodeOn_USB+0x3b6>
	case GET_ENCODER:
		if(RXBUF[RXCMD + 1] == ENCODER_L){
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	785b      	ldrb	r3, [r3, #1]
 80040f2:	3303      	adds	r3, #3
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	4413      	add	r3, r2
 80040f8:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d11a      	bne.n	8004136 <decodeOn_USB+0x25a>
			decom.ui16[0] = EncoderL.pps;
 8004100:	4b29      	ldr	r3, [pc, #164]	@ (80041a8 <decodeOn_USB+0x2cc>)
 8004102:	891a      	ldrh	r2, [r3, #8]
 8004104:	4b22      	ldr	r3, [pc, #136]	@ (8004190 <decodeOn_USB+0x2b4>)
 8004106:	801a      	strh	r2, [r3, #0]
			data->auxBuffer[0] = ENCODER_L;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2200      	movs	r2, #0
 800410c:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
			data->auxBuffer[1] = decom.ui8[0];
 8004110:	4b1f      	ldr	r3, [pc, #124]	@ (8004190 <decodeOn_USB+0x2b4>)
 8004112:	781a      	ldrb	r2, [r3, #0]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	f883 2211 	strb.w	r2, [r3, #529]	@ 0x211
			data->auxBuffer[2] = decom.ui8[1];
 800411a:	4b1d      	ldr	r3, [pc, #116]	@ (8004190 <decodeOn_USB+0x2b4>)
 800411c:	785a      	ldrb	r2, [r3, #1]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f883 2212 	strb.w	r2, [r3, #530]	@ 0x212
			comm_sendCMD(data, GET_ENCODER, &data->auxBuffer[0], 3);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 800412a:	2303      	movs	r3, #3
 800412c:	21a3      	movs	r1, #163	@ 0xa3
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f7fe f9d6 	bl	80024e0 <comm_sendCMD>
			data->auxBuffer[2] = decom.ui8[1];
			comm_sendCMD(data, GET_ENCODER, &data->auxBuffer[0], 3);
		}else{
			comm_sendCMD(data, SYSWARNING, (uint8_t*)"NO ENCODER", 10);
		}
		break;
 8004134:	e0ad      	b.n	8004292 <decodeOn_USB+0x3b6>
		}else if(RXBUF[RXCMD + 1] == ENCODER_R){
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	785b      	ldrb	r3, [r3, #1]
 800413a:	3303      	adds	r3, #3
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	4413      	add	r3, r2
 8004140:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8004144:	2b01      	cmp	r3, #1
 8004146:	d11a      	bne.n	800417e <decodeOn_USB+0x2a2>
			decom.ui16[0] = EncoderR.pps;
 8004148:	4b18      	ldr	r3, [pc, #96]	@ (80041ac <decodeOn_USB+0x2d0>)
 800414a:	891a      	ldrh	r2, [r3, #8]
 800414c:	4b10      	ldr	r3, [pc, #64]	@ (8004190 <decodeOn_USB+0x2b4>)
 800414e:	801a      	strh	r2, [r3, #0]
			data->auxBuffer[0] = ENCODER_R;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2201      	movs	r2, #1
 8004154:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
			data->auxBuffer[1] = decom.ui8[0];
 8004158:	4b0d      	ldr	r3, [pc, #52]	@ (8004190 <decodeOn_USB+0x2b4>)
 800415a:	781a      	ldrb	r2, [r3, #0]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f883 2211 	strb.w	r2, [r3, #529]	@ 0x211
			data->auxBuffer[2] = decom.ui8[1];
 8004162:	4b0b      	ldr	r3, [pc, #44]	@ (8004190 <decodeOn_USB+0x2b4>)
 8004164:	785a      	ldrb	r2, [r3, #1]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f883 2212 	strb.w	r2, [r3, #530]	@ 0x212
			comm_sendCMD(data, GET_ENCODER, &data->auxBuffer[0], 3);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 8004172:	2303      	movs	r3, #3
 8004174:	21a3      	movs	r1, #163	@ 0xa3
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f7fe f9b2 	bl	80024e0 <comm_sendCMD>
		break;
 800417c:	e089      	b.n	8004292 <decodeOn_USB+0x3b6>
			comm_sendCMD(data, SYSWARNING, (uint8_t*)"NO ENCODER", 10);
 800417e:	230a      	movs	r3, #10
 8004180:	4a0b      	ldr	r2, [pc, #44]	@ (80041b0 <decodeOn_USB+0x2d4>)
 8004182:	21ef      	movs	r1, #239	@ 0xef
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	f7fe f9ab 	bl	80024e0 <comm_sendCMD>
		break;
 800418a:	e082      	b.n	8004292 <decodeOn_USB+0x3b6>
 800418c:	2000127c 	.word	0x2000127c
 8004190:	20000d50 	.word	0x20000d50
 8004194:	08013544 	.word	0x08013544
 8004198:	20000d58 	.word	0x20000d58
 800419c:	200012a0 	.word	0x200012a0
 80041a0:	20000d70 	.word	0x20000d70
 80041a4:	0801354c 	.word	0x0801354c
 80041a8:	20000d88 	.word	0x20000d88
 80041ac:	20000d94 	.word	0x20000d94
 80041b0:	08013558 	.word	0x08013558
	case MPUBLOCK:
		decom.i16[0] = MPU6050.Acc.x;
 80041b4:	4b39      	ldr	r3, [pc, #228]	@ (800429c <decodeOn_USB+0x3c0>)
 80041b6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80041ba:	4b39      	ldr	r3, [pc, #228]	@ (80042a0 <decodeOn_USB+0x3c4>)
 80041bc:	801a      	strh	r2, [r3, #0]
		data->auxBuffer[0] = decom.ui8[0];
 80041be:	4b38      	ldr	r3, [pc, #224]	@ (80042a0 <decodeOn_USB+0x3c4>)
 80041c0:	781a      	ldrb	r2, [r3, #0]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
		data->auxBuffer[1] = decom.ui8[1];
 80041c8:	4b35      	ldr	r3, [pc, #212]	@ (80042a0 <decodeOn_USB+0x3c4>)
 80041ca:	785a      	ldrb	r2, [r3, #1]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f883 2211 	strb.w	r2, [r3, #529]	@ 0x211
		decom.i16[0] = MPU6050.Acc.y;
 80041d2:	4b32      	ldr	r3, [pc, #200]	@ (800429c <decodeOn_USB+0x3c0>)
 80041d4:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80041d8:	4b31      	ldr	r3, [pc, #196]	@ (80042a0 <decodeOn_USB+0x3c4>)
 80041da:	801a      	strh	r2, [r3, #0]
		data->auxBuffer[2] = decom.ui8[0];
 80041dc:	4b30      	ldr	r3, [pc, #192]	@ (80042a0 <decodeOn_USB+0x3c4>)
 80041de:	781a      	ldrb	r2, [r3, #0]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f883 2212 	strb.w	r2, [r3, #530]	@ 0x212
		data->auxBuffer[3] = decom.ui8[1];
 80041e6:	4b2e      	ldr	r3, [pc, #184]	@ (80042a0 <decodeOn_USB+0x3c4>)
 80041e8:	785a      	ldrb	r2, [r3, #1]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f883 2213 	strb.w	r2, [r3, #531]	@ 0x213
		decom.i16[0] = MPU6050.Acc.z;
 80041f0:	4b2a      	ldr	r3, [pc, #168]	@ (800429c <decodeOn_USB+0x3c0>)
 80041f2:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80041f6:	4b2a      	ldr	r3, [pc, #168]	@ (80042a0 <decodeOn_USB+0x3c4>)
 80041f8:	801a      	strh	r2, [r3, #0]
		data->auxBuffer[4] = decom.ui8[0];
 80041fa:	4b29      	ldr	r3, [pc, #164]	@ (80042a0 <decodeOn_USB+0x3c4>)
 80041fc:	781a      	ldrb	r2, [r3, #0]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f883 2214 	strb.w	r2, [r3, #532]	@ 0x214
		data->auxBuffer[5] = decom.ui8[1];
 8004204:	4b26      	ldr	r3, [pc, #152]	@ (80042a0 <decodeOn_USB+0x3c4>)
 8004206:	785a      	ldrb	r2, [r3, #1]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f883 2215 	strb.w	r2, [r3, #533]	@ 0x215
		decom.i16[0] = MPU6050.Gyro.x;
 800420e:	4b23      	ldr	r3, [pc, #140]	@ (800429c <decodeOn_USB+0x3c0>)
 8004210:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8004214:	4b22      	ldr	r3, [pc, #136]	@ (80042a0 <decodeOn_USB+0x3c4>)
 8004216:	801a      	strh	r2, [r3, #0]
		data->auxBuffer[6] = decom.ui8[0];
 8004218:	4b21      	ldr	r3, [pc, #132]	@ (80042a0 <decodeOn_USB+0x3c4>)
 800421a:	781a      	ldrb	r2, [r3, #0]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f883 2216 	strb.w	r2, [r3, #534]	@ 0x216
		data->auxBuffer[7] = decom.ui8[1];
 8004222:	4b1f      	ldr	r3, [pc, #124]	@ (80042a0 <decodeOn_USB+0x3c4>)
 8004224:	785a      	ldrb	r2, [r3, #1]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f883 2217 	strb.w	r2, [r3, #535]	@ 0x217
		decom.i16[0] = MPU6050.Gyro.y;
 800422c:	4b1b      	ldr	r3, [pc, #108]	@ (800429c <decodeOn_USB+0x3c0>)
 800422e:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8004232:	4b1b      	ldr	r3, [pc, #108]	@ (80042a0 <decodeOn_USB+0x3c4>)
 8004234:	801a      	strh	r2, [r3, #0]
		data->auxBuffer[8] = decom.ui8[0];
 8004236:	4b1a      	ldr	r3, [pc, #104]	@ (80042a0 <decodeOn_USB+0x3c4>)
 8004238:	781a      	ldrb	r2, [r3, #0]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	f883 2218 	strb.w	r2, [r3, #536]	@ 0x218
		data->auxBuffer[9] = decom.ui8[1];
 8004240:	4b17      	ldr	r3, [pc, #92]	@ (80042a0 <decodeOn_USB+0x3c4>)
 8004242:	785a      	ldrb	r2, [r3, #1]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f883 2219 	strb.w	r2, [r3, #537]	@ 0x219
		decom.i16[0] = MPU6050.Gyro.z;
 800424a:	4b14      	ldr	r3, [pc, #80]	@ (800429c <decodeOn_USB+0x3c0>)
 800424c:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8004250:	4b13      	ldr	r3, [pc, #76]	@ (80042a0 <decodeOn_USB+0x3c4>)
 8004252:	801a      	strh	r2, [r3, #0]
		data->auxBuffer[10] = decom.ui8[0];
 8004254:	4b12      	ldr	r3, [pc, #72]	@ (80042a0 <decodeOn_USB+0x3c4>)
 8004256:	781a      	ldrb	r2, [r3, #0]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	f883 221a 	strb.w	r2, [r3, #538]	@ 0x21a
		data->auxBuffer[11] = decom.ui8[1];
 800425e:	4b10      	ldr	r3, [pc, #64]	@ (80042a0 <decodeOn_USB+0x3c4>)
 8004260:	785a      	ldrb	r2, [r3, #1]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f883 221b 	strb.w	r2, [r3, #539]	@ 0x21b
		comm_sendCMD(data, MPUBLOCK, data->auxBuffer, 12);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 800426e:	230c      	movs	r3, #12
 8004270:	21a4      	movs	r1, #164	@ 0xa4
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f7fe f934 	bl	80024e0 <comm_sendCMD>
		break;
 8004278:	e00b      	b.n	8004292 <decodeOn_USB+0x3b6>
	default:
		comm_sendCMD(data, SYSWARNING, (uint8_t*)"NO CMD", 6);
 800427a:	2306      	movs	r3, #6
 800427c:	4a09      	ldr	r2, [pc, #36]	@ (80042a4 <decodeOn_USB+0x3c8>)
 800427e:	21ef      	movs	r1, #239	@ 0xef
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f7fe f92d 	bl	80024e0 <comm_sendCMD>
		break;
 8004286:	e004      	b.n	8004292 <decodeOn_USB+0x3b6>
		break;
 8004288:	bf00      	nop
 800428a:	e002      	b.n	8004292 <decodeOn_USB+0x3b6>
		break;
 800428c:	bf00      	nop
 800428e:	e000      	b.n	8004292 <decodeOn_USB+0x3b6>
		break;
 8004290:	bf00      	nop
	}
}
 8004292:	bf00      	nop
 8004294:	3710      	adds	r7, #16
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop
 800429c:	20000da0 	.word	0x20000da0
 80042a0:	20000d50 	.word	0x20000d50
 80042a4:	08013564 	.word	0x08013564

080042a8 <onKeyChangeState>:

void onKeyChangeState(e_Estados value){
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	4603      	mov	r3, r0
 80042b0:	71fb      	strb	r3, [r7, #7]

}
 80042b2:	bf00      	nop
 80042b4:	370c      	adds	r7, #12
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr
	...

080042c0 <onESP01Debug>:

    // Cast explícito también aplicado aquí
    comm_sendCMD(&USB.data, USERTEXT, USB.data.auxBuffer, strlen((char*)USB.data.auxBuffer));
}

void onESP01Debug(const char *dbgStr) {
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b082      	sub	sp, #8
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
    comm_sendCMD(&USB.data, USERTEXT, (uint8_t *)dbgStr, strlen(dbgStr));
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	f7fb ff89 	bl	80001e0 <strlen>
 80042ce:	4603      	mov	r3, r0
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	21b1      	movs	r1, #177	@ 0xb1
 80042d6:	4803      	ldr	r0, [pc, #12]	@ (80042e4 <onESP01Debug+0x24>)
 80042d8:	f7fe f902 	bl	80024e0 <comm_sendCMD>
}
 80042dc:	bf00      	nop
 80042de:	3708      	adds	r7, #8
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}
 80042e4:	200012a0 	.word	0x200012a0

080042e8 <task_10ms>:

void task_10ms(){
 80042e8:	b580      	push	{r7, lr}
 80042ea:	af00      	add	r7, sp, #0
	IS10MS = FALSE;
 80042ec:	4a39      	ldr	r2, [pc, #228]	@ (80043d4 <task_10ms+0xec>)
 80042ee:	7813      	ldrb	r3, [r2, #0]
 80042f0:	f023 0301 	bic.w	r3, r3, #1
 80042f4:	7013      	strb	r3, [r2, #0]

	is100ms1--;
 80042f6:	4b38      	ldr	r3, [pc, #224]	@ (80043d8 <task_10ms+0xf0>)
 80042f8:	781b      	ldrb	r3, [r3, #0]
 80042fa:	3b01      	subs	r3, #1
 80042fc:	b2da      	uxtb	r2, r3
 80042fe:	4b36      	ldr	r3, [pc, #216]	@ (80043d8 <task_10ms+0xf0>)
 8004300:	701a      	strb	r2, [r3, #0]
	if(!is100ms1){
 8004302:	4b35      	ldr	r3, [pc, #212]	@ (80043d8 <task_10ms+0xf0>)
 8004304:	781b      	ldrb	r3, [r3, #0]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d13d      	bne.n	8004386 <task_10ms+0x9e>
		is100ms1 = 10;
 800430a:	4b33      	ldr	r3, [pc, #204]	@ (80043d8 <task_10ms+0xf0>)
 800430c:	220a      	movs	r2, #10
 800430e:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8004310:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004314:	4831      	ldr	r0, [pc, #196]	@ (80043dc <task_10ms+0xf4>)
 8004316:	f003 f842 	bl	800739e <HAL_GPIO_TogglePin>
		is1s--;
 800431a:	4b31      	ldr	r3, [pc, #196]	@ (80043e0 <task_10ms+0xf8>)
 800431c:	781b      	ldrb	r3, [r3, #0]
 800431e:	3b01      	subs	r3, #1
 8004320:	b2da      	uxtb	r2, r3
 8004322:	4b2f      	ldr	r3, [pc, #188]	@ (80043e0 <task_10ms+0xf8>)
 8004324:	701a      	strb	r2, [r3, #0]
		if(!is1s){
 8004326:	4b2e      	ldr	r3, [pc, #184]	@ (80043e0 <task_10ms+0xf8>)
 8004328:	781b      	ldrb	r3, [r3, #0]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d12b      	bne.n	8004386 <task_10ms+0x9e>
			is1s = 10;
 800432e:	4b2c      	ldr	r3, [pc, #176]	@ (80043e0 <task_10ms+0xf8>)
 8004330:	220a      	movs	r2, #10
 8004332:	701a      	strb	r2, [r3, #0]
			Encoder_1s_Elapsed(&EncoderL);
 8004334:	482b      	ldr	r0, [pc, #172]	@ (80043e4 <task_10ms+0xfc>)
 8004336:	f7fd fe47 	bl	8001fc8 <Encoder_1s_Elapsed>
			Encoder_1s_Elapsed(&EncoderR);
 800433a:	482b      	ldr	r0, [pc, #172]	@ (80043e8 <task_10ms+0x100>)
 800433c:	f7fd fe44 	bl	8001fc8 <Encoder_1s_Elapsed>

			/* ESTABILIZACIÓN DE PWM */
			Motor_Set_MaxValue(&MotorR, (3026/Analog.value[9]));//<! Usamos esto para independizar la salida PWM de la carga de las baterias
 8004340:	4b2a      	ldr	r3, [pc, #168]	@ (80043ec <task_10ms+0x104>)
 8004342:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004344:	461a      	mov	r2, r3
 8004346:	f640 33d2 	movw	r3, #3026	@ 0xbd2
 800434a:	fb93 f3f2 	sdiv	r3, r3, r2
 800434e:	4619      	mov	r1, r3
 8004350:	4827      	ldr	r0, [pc, #156]	@ (80043f0 <task_10ms+0x108>)
 8004352:	f7fd ff25 	bl	80021a0 <Motor_Set_MaxValue>
			Motor_Set_MaxValue(&MotorL, (3026/Analog.value[9]));
 8004356:	4b25      	ldr	r3, [pc, #148]	@ (80043ec <task_10ms+0x104>)
 8004358:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800435a:	461a      	mov	r2, r3
 800435c:	f640 33d2 	movw	r3, #3026	@ 0xbd2
 8004360:	fb93 f3f2 	sdiv	r3, r3, r2
 8004364:	4619      	mov	r1, r3
 8004366:	4823      	ldr	r0, [pc, #140]	@ (80043f4 <task_10ms+0x10c>)
 8004368:	f7fd ff1a 	bl	80021a0 <Motor_Set_MaxValue>
			/* END ESTABILIZACIÓN DE PWM */

			is20s--;
 800436c:	4b22      	ldr	r3, [pc, #136]	@ (80043f8 <task_10ms+0x110>)
 800436e:	781b      	ldrb	r3, [r3, #0]
 8004370:	3b01      	subs	r3, #1
 8004372:	b2da      	uxtb	r2, r3
 8004374:	4b20      	ldr	r3, [pc, #128]	@ (80043f8 <task_10ms+0x110>)
 8004376:	701a      	strb	r2, [r3, #0]
			if(!is20s){
 8004378:	4b1f      	ldr	r3, [pc, #124]	@ (80043f8 <task_10ms+0x110>)
 800437a:	781b      	ldrb	r3, [r3, #0]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d102      	bne.n	8004386 <task_10ms+0x9e>
				is20s = 10;
 8004380:	4b1d      	ldr	r3, [pc, #116]	@ (80043f8 <task_10ms+0x110>)
 8004382:	220a      	movs	r2, #10
 8004384:	701a      	strb	r2, [r3, #0]
				//comm_sendCMD(&ESP.data, GETALIVE, NULL, 0);
			}
		}
	}

	Display.refreshCounter_10ms--;
 8004386:	4b1d      	ldr	r3, [pc, #116]	@ (80043fc <task_10ms+0x114>)
 8004388:	f893 3413 	ldrb.w	r3, [r3, #1043]	@ 0x413
 800438c:	3b01      	subs	r3, #1
 800438e:	b2da      	uxtb	r2, r3
 8004390:	4b1a      	ldr	r3, [pc, #104]	@ (80043fc <task_10ms+0x114>)
 8004392:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
	if(!Display.refreshCounter_10ms){ 							//Tasa de refresco variable
 8004396:	4b19      	ldr	r3, [pc, #100]	@ (80043fc <task_10ms+0x114>)
 8004398:	f893 3413 	ldrb.w	r3, [r3, #1043]	@ 0x413
 800439c:	2b00      	cmp	r3, #0
 800439e:	d107      	bne.n	80043b0 <task_10ms+0xc8>
		Display.refreshCounter_10ms = Display.refreshRate_10ms;
 80043a0:	4b16      	ldr	r3, [pc, #88]	@ (80043fc <task_10ms+0x114>)
 80043a2:	f893 2412 	ldrb.w	r2, [r3, #1042]	@ 0x412
 80043a6:	4b15      	ldr	r3, [pc, #84]	@ (80043fc <task_10ms+0x114>)
 80043a8:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
		OLED_Print_Data_Task();
 80043ac:	f7ff fbac 	bl	8003b08 <OLED_Print_Data_Task>
	}

	ESP01_Timeout10ms();
 80043b0:	f7fe fb08 	bl	80029c4 <ESP01_Timeout10ms>

	Debouncer_Task();
 80043b4:	f7fc fe28 	bl	8001008 <Debouncer_Task>

	Motor_Break_Timeout(&MotorL);
 80043b8:	480e      	ldr	r0, [pc, #56]	@ (80043f4 <task_10ms+0x10c>)
 80043ba:	f7fd fed5 	bl	8002168 <Motor_Break_Timeout>
	Motor_Break_Timeout(&MotorR);
 80043be:	480c      	ldr	r0, [pc, #48]	@ (80043f0 <task_10ms+0x108>)
 80043c0:	f7fd fed2 	bl	8002168 <Motor_Break_Timeout>
	Encoder_Task(&EncoderL);
 80043c4:	4807      	ldr	r0, [pc, #28]	@ (80043e4 <task_10ms+0xfc>)
 80043c6:	f7fd fdbf 	bl	8001f48 <Encoder_Task>
	Encoder_Task(&EncoderR);
 80043ca:	4807      	ldr	r0, [pc, #28]	@ (80043e8 <task_10ms+0x100>)
 80043cc:	f7fd fdbc 	bl	8001f48 <Encoder_Task>
}
 80043d0:	bf00      	nop
 80043d2:	bd80      	pop	{r7, pc}
 80043d4:	20000d4c 	.word	0x20000d4c
 80043d8:	2000000c 	.word	0x2000000c
 80043dc:	40020800 	.word	0x40020800
 80043e0:	2000000d 	.word	0x2000000d
 80043e4:	20000d88 	.word	0x20000d88
 80043e8:	20000d94 	.word	0x20000d94
 80043ec:	2000127c 	.word	0x2000127c
 80043f0:	20000d70 	.word	0x20000d70
 80043f4:	20000d58 	.word	0x20000d58
 80043f8:	2000000f 	.word	0x2000000f
 80043fc:	20000e64 	.word	0x20000e64

08004400 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004404:	f001 fb36 	bl	8005a74 <HAL_Init>

  /* USER CODE BEGIN Init */
  MPU6050.isInit = FALSE;
 8004408:	4b3b      	ldr	r3, [pc, #236]	@ (80044f8 <main+0xf8>)
 800440a:	2200      	movs	r2, #0
 800440c:	f883 20c2 	strb.w	r2, [r3, #194]	@ 0xc2
  Display.isInit = FALSE;
 8004410:	4b3a      	ldr	r3, [pc, #232]	@ (80044fc <main+0xfc>)
 8004412:	2200      	movs	r2, #0
 8004414:	701a      	strb	r2, [r3, #0]
  Display.state = INIT;
 8004416:	4b39      	ldr	r3, [pc, #228]	@ (80044fc <main+0xfc>)
 8004418:	2200      	movs	r2, #0
 800441a:	f883 2401 	strb.w	r2, [r3, #1025]	@ 0x401
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800441e:	f000 f895 	bl	800454c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004422:	f000 fb27 	bl	8004a74 <MX_GPIO_Init>
  MX_DMA_Init();
 8004426:	f000 fae7 	bl	80049f8 <MX_DMA_Init>
  MX_ADC1_Init();
 800442a:	f000 f8f9 	bl	8004620 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 800442e:	f00d fcd9 	bl	8011de4 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 8004432:	f000 f9e5 	bl	8004800 <MX_TIM1_Init>
  MX_I2C1_Init();
 8004436:	f000 f9b5 	bl	80047a4 <MX_I2C1_Init>
  MX_TIM3_Init();
 800443a:	f000 fa31 	bl	80048a0 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 800443e:	f000 fab1 	bl	80049a4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  /* INICIALIZACIÓN DE PROTOCOLO MEDIANTE USB */
  Comm_Init(&USB.data, &decodeOn_USB, &writeOn_USB);
 8004442:	4a2f      	ldr	r2, [pc, #188]	@ (8004500 <main+0x100>)
 8004444:	492f      	ldr	r1, [pc, #188]	@ (8004504 <main+0x104>)
 8004446:	4830      	ldr	r0, [pc, #192]	@ (8004508 <main+0x108>)
 8004448:	f7fd febe 	bl	80021c8 <Comm_Init>
  CDC_Attach_Rx(&dataRxOn_USB);
 800444c:	482f      	ldr	r0, [pc, #188]	@ (800450c <main+0x10c>)
 800444e:	f00d fe1b 	bl	8012088 <CDC_Attach_Rx>
  /* FIN INICIALIZACIÓN DE PROTOCOLO MEDIANTE USB */

  /* INICIALIZACIÓN DE USER KEY Y DEBOUNCE */
  Debounce_Init();
 8004452:	f7fc fd71 	bl	8000f38 <Debounce_Init>
  key = Debounce_Add(&KEY_Read_Value, &onKeyChangeState);
 8004456:	492e      	ldr	r1, [pc, #184]	@ (8004510 <main+0x110>)
 8004458:	482e      	ldr	r0, [pc, #184]	@ (8004514 <main+0x114>)
 800445a:	f7fc fda1 	bl	8000fa0 <Debounce_Add>
 800445e:	4603      	mov	r3, r0
 8004460:	461a      	mov	r2, r3
 8004462:	4b2d      	ldr	r3, [pc, #180]	@ (8004518 <main+0x118>)
 8004464:	701a      	strb	r2, [r3, #0]
  /* FIN INICIALIZACIÓN DE USER KEY Y DEBOUNCE */

  /* INICIALIZACIÓN DE MPU6050 */
  Init_MPU6050();
 8004466:	f000 fc25 	bl	8004cb4 <Init_MPU6050>
  /* FIN INICIALIZACIÓN DE MPU6050 */

  /* INICIALIZACIÓN DISPLAY*/
  Init_Display();
 800446a:	f000 fc5b 	bl	8004d24 <Init_Display>
  /* FIN INICIALIZACIÓN DISPLAY */

  /* INICIALIZACIÓN DE MOTORES Y ENCODERS */
  Motor_Init(&MotorL, &Motor_Left_SetPWM , &Motor_Left_SetPins , htim3.Instance->ARR);
 800446e:	4b2b      	ldr	r3, [pc, #172]	@ (800451c <main+0x11c>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004474:	b29b      	uxth	r3, r3
 8004476:	4a2a      	ldr	r2, [pc, #168]	@ (8004520 <main+0x120>)
 8004478:	492a      	ldr	r1, [pc, #168]	@ (8004524 <main+0x124>)
 800447a:	482b      	ldr	r0, [pc, #172]	@ (8004528 <main+0x128>)
 800447c:	f7fd fdb6 	bl	8001fec <Motor_Init>
  Motor_Init(&MotorR, &Motor_Right_SetPWM, &Motor_Right_SetPins, htim3.Instance->ARR);
 8004480:	4b26      	ldr	r3, [pc, #152]	@ (800451c <main+0x11c>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004486:	b29b      	uxth	r3, r3
 8004488:	4a28      	ldr	r2, [pc, #160]	@ (800452c <main+0x12c>)
 800448a:	4929      	ldr	r1, [pc, #164]	@ (8004530 <main+0x130>)
 800448c:	4829      	ldr	r0, [pc, #164]	@ (8004534 <main+0x134>)
 800448e:	f7fd fdad 	bl	8001fec <Motor_Init>

  Encoder_Init(&EncoderL, ENCODER_FASTPPS_COUNTER_10MS);
 8004492:	210a      	movs	r1, #10
 8004494:	4828      	ldr	r0, [pc, #160]	@ (8004538 <main+0x138>)
 8004496:	f7fd fd38 	bl	8001f0a <Encoder_Init>
  Encoder_Init(&EncoderR, ENCODER_FASTPPS_COUNTER_10MS);
 800449a:	210a      	movs	r1, #10
 800449c:	4827      	ldr	r0, [pc, #156]	@ (800453c <main+0x13c>)
 800449e:	f7fd fd34 	bl	8001f0a <Encoder_Init>
  /* FIN INICIALIZACIÓN DE MOTORES Y ENCODERS */

  /* ESP01 INITIALIZATION */
  Init_WiFi();
 80044a2:	f000 fc91 	bl	8004dc8 <Init_WiFi>
  /* END ESP01 INITIALIZATION */
  Car.state = IDLE;
 80044a6:	4b26      	ldr	r3, [pc, #152]	@ (8004540 <main+0x140>)
 80044a8:	2200      	movs	r2, #0
 80044aa:	701a      	strb	r2, [r3, #0]

  Init_Timing();
 80044ac:	f000 fbbe 	bl	8004c2c <Init_Timing>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  /* USER TASK */
	Comm_Task(&USB.data);
 80044b0:	4815      	ldr	r0, [pc, #84]	@ (8004508 <main+0x108>)
 80044b2:	f7fd febd 	bl	8002230 <Comm_Task>
	Comm_Task(&ESP.data);
 80044b6:	4823      	ldr	r0, [pc, #140]	@ (8004544 <main+0x144>)
 80044b8:	f7fd feba 	bl	8002230 <Comm_Task>
	Display_UpdateScreen_Task();
 80044bc:	f7fd f9fc 	bl	80018b8 <Display_UpdateScreen_Task>
	MPU6050_MAF(&MPU6050);
 80044c0:	480d      	ldr	r0, [pc, #52]	@ (80044f8 <main+0xf8>)
 80044c2:	f7fc ffa9 	bl	8001418 <MPU6050_MAF>
	ESP01_Task();
 80044c6:	f7fe faaf 	bl	8002a28 <ESP01_Task>
	/* END USER TASK */

	if(IS10MS){
 80044ca:	4b1f      	ldr	r3, [pc, #124]	@ (8004548 <main+0x148>)
 80044cc:	781b      	ldrb	r3, [r3, #0]
 80044ce:	f003 0301 	and.w	r3, r3, #1
 80044d2:	b2db      	uxtb	r3, r3
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d001      	beq.n	80044dc <main+0xdc>
		task_10ms();
 80044d8:	f7ff ff06 	bl	80042e8 <task_10ms>
	}

	switch(Car.state){
 80044dc:	4b18      	ldr	r3, [pc, #96]	@ (8004540 <main+0x140>)
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	2b02      	cmp	r3, #2
 80044e2:	d005      	beq.n	80044f0 <main+0xf0>
 80044e4:	2b02      	cmp	r3, #2
 80044e6:	dce3      	bgt.n	80044b0 <main+0xb0>
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d003      	beq.n	80044f4 <main+0xf4>
 80044ec:	2b01      	cmp	r3, #1
	case IDLE:

		break;
	case FOLLOW_LINE:

		break;
 80044ee:	e002      	b.n	80044f6 <main+0xf6>
	case GO_FROM_TO:

		break;
 80044f0:	bf00      	nop
 80044f2:	e7dd      	b.n	80044b0 <main+0xb0>
		break;
 80044f4:	bf00      	nop
	Comm_Task(&USB.data);
 80044f6:	e7db      	b.n	80044b0 <main+0xb0>
 80044f8:	20000da0 	.word	0x20000da0
 80044fc:	20000e64 	.word	0x20000e64
 8004500:	080051f1 	.word	0x080051f1
 8004504:	08003edd 	.word	0x08003edd
 8004508:	200012a0 	.word	0x200012a0
 800450c:	08005265 	.word	0x08005265
 8004510:	080042a9 	.word	0x080042a9
 8004514:	080051d9 	.word	0x080051d9
 8004518:	20000d54 	.word	0x20000d54
 800451c:	20000cbc 	.word	0x20000cbc
 8004520:	080052bd 	.word	0x080052bd
 8004524:	08005331 	.word	0x08005331
 8004528:	20000d58 	.word	0x20000d58
 800452c:	080052f5 	.word	0x080052f5
 8004530:	08005355 	.word	0x08005355
 8004534:	20000d70 	.word	0x20000d70
 8004538:	20000d88 	.word	0x20000d88
 800453c:	20000d94 	.word	0x20000d94
 8004540:	20001720 	.word	0x20001720
 8004544:	200014ec 	.word	0x200014ec
 8004548:	20000d4c 	.word	0x20000d4c

0800454c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b094      	sub	sp, #80	@ 0x50
 8004550:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004552:	f107 0320 	add.w	r3, r7, #32
 8004556:	2230      	movs	r2, #48	@ 0x30
 8004558:	2100      	movs	r1, #0
 800455a:	4618      	mov	r0, r3
 800455c:	f00e fa3c 	bl	80129d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004560:	f107 030c 	add.w	r3, r7, #12
 8004564:	2200      	movs	r2, #0
 8004566:	601a      	str	r2, [r3, #0]
 8004568:	605a      	str	r2, [r3, #4]
 800456a:	609a      	str	r2, [r3, #8]
 800456c:	60da      	str	r2, [r3, #12]
 800456e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004570:	2300      	movs	r3, #0
 8004572:	60bb      	str	r3, [r7, #8]
 8004574:	4b28      	ldr	r3, [pc, #160]	@ (8004618 <SystemClock_Config+0xcc>)
 8004576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004578:	4a27      	ldr	r2, [pc, #156]	@ (8004618 <SystemClock_Config+0xcc>)
 800457a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800457e:	6413      	str	r3, [r2, #64]	@ 0x40
 8004580:	4b25      	ldr	r3, [pc, #148]	@ (8004618 <SystemClock_Config+0xcc>)
 8004582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004584:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004588:	60bb      	str	r3, [r7, #8]
 800458a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800458c:	2300      	movs	r3, #0
 800458e:	607b      	str	r3, [r7, #4]
 8004590:	4b22      	ldr	r3, [pc, #136]	@ (800461c <SystemClock_Config+0xd0>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a21      	ldr	r2, [pc, #132]	@ (800461c <SystemClock_Config+0xd0>)
 8004596:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800459a:	6013      	str	r3, [r2, #0]
 800459c:	4b1f      	ldr	r3, [pc, #124]	@ (800461c <SystemClock_Config+0xd0>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80045a4:	607b      	str	r3, [r7, #4]
 80045a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80045a8:	2301      	movs	r3, #1
 80045aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80045ac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80045b0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80045b2:	2302      	movs	r3, #2
 80045b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80045b6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80045ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80045bc:	2319      	movs	r3, #25
 80045be:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80045c0:	23c0      	movs	r3, #192	@ 0xc0
 80045c2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80045c4:	2302      	movs	r3, #2
 80045c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80045c8:	2304      	movs	r3, #4
 80045ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80045cc:	f107 0320 	add.w	r3, r7, #32
 80045d0:	4618      	mov	r0, r3
 80045d2:	f007 fd43 	bl	800c05c <HAL_RCC_OscConfig>
 80045d6:	4603      	mov	r3, r0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d001      	beq.n	80045e0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80045dc:	f000 fecc 	bl	8005378 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80045e0:	230f      	movs	r3, #15
 80045e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80045e4:	2302      	movs	r3, #2
 80045e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80045e8:	2300      	movs	r3, #0
 80045ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80045ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80045f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80045f2:	2300      	movs	r3, #0
 80045f4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80045f6:	f107 030c 	add.w	r3, r7, #12
 80045fa:	2103      	movs	r1, #3
 80045fc:	4618      	mov	r0, r3
 80045fe:	f007 ffa5 	bl	800c54c <HAL_RCC_ClockConfig>
 8004602:	4603      	mov	r3, r0
 8004604:	2b00      	cmp	r3, #0
 8004606:	d001      	beq.n	800460c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8004608:	f000 feb6 	bl	8005378 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800460c:	f008 f884 	bl	800c718 <HAL_RCC_EnableCSS>
}
 8004610:	bf00      	nop
 8004612:	3750      	adds	r7, #80	@ 0x50
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}
 8004618:	40023800 	.word	0x40023800
 800461c:	40007000 	.word	0x40007000

08004620 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b084      	sub	sp, #16
 8004624:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004626:	463b      	mov	r3, r7
 8004628:	2200      	movs	r2, #0
 800462a:	601a      	str	r2, [r3, #0]
 800462c:	605a      	str	r2, [r3, #4]
 800462e:	609a      	str	r2, [r3, #8]
 8004630:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8004632:	4b59      	ldr	r3, [pc, #356]	@ (8004798 <MX_ADC1_Init+0x178>)
 8004634:	4a59      	ldr	r2, [pc, #356]	@ (800479c <MX_ADC1_Init+0x17c>)
 8004636:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004638:	4b57      	ldr	r3, [pc, #348]	@ (8004798 <MX_ADC1_Init+0x178>)
 800463a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800463e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004640:	4b55      	ldr	r3, [pc, #340]	@ (8004798 <MX_ADC1_Init+0x178>)
 8004642:	2200      	movs	r2, #0
 8004644:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8004646:	4b54      	ldr	r3, [pc, #336]	@ (8004798 <MX_ADC1_Init+0x178>)
 8004648:	2201      	movs	r2, #1
 800464a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800464c:	4b52      	ldr	r3, [pc, #328]	@ (8004798 <MX_ADC1_Init+0x178>)
 800464e:	2200      	movs	r2, #0
 8004650:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004652:	4b51      	ldr	r3, [pc, #324]	@ (8004798 <MX_ADC1_Init+0x178>)
 8004654:	2200      	movs	r2, #0
 8004656:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800465a:	4b4f      	ldr	r3, [pc, #316]	@ (8004798 <MX_ADC1_Init+0x178>)
 800465c:	2200      	movs	r2, #0
 800465e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004660:	4b4d      	ldr	r3, [pc, #308]	@ (8004798 <MX_ADC1_Init+0x178>)
 8004662:	4a4f      	ldr	r2, [pc, #316]	@ (80047a0 <MX_ADC1_Init+0x180>)
 8004664:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004666:	4b4c      	ldr	r3, [pc, #304]	@ (8004798 <MX_ADC1_Init+0x178>)
 8004668:	2200      	movs	r2, #0
 800466a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 9;
 800466c:	4b4a      	ldr	r3, [pc, #296]	@ (8004798 <MX_ADC1_Init+0x178>)
 800466e:	2209      	movs	r2, #9
 8004670:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8004672:	4b49      	ldr	r3, [pc, #292]	@ (8004798 <MX_ADC1_Init+0x178>)
 8004674:	2200      	movs	r2, #0
 8004676:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800467a:	4b47      	ldr	r3, [pc, #284]	@ (8004798 <MX_ADC1_Init+0x178>)
 800467c:	2201      	movs	r2, #1
 800467e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004680:	4845      	ldr	r0, [pc, #276]	@ (8004798 <MX_ADC1_Init+0x178>)
 8004682:	f001 fa8d 	bl	8005ba0 <HAL_ADC_Init>
 8004686:	4603      	mov	r3, r0
 8004688:	2b00      	cmp	r3, #0
 800468a:	d001      	beq.n	8004690 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800468c:	f000 fe74 	bl	8005378 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8004690:	2301      	movs	r3, #1
 8004692:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8004694:	2301      	movs	r3, #1
 8004696:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8004698:	2303      	movs	r3, #3
 800469a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800469c:	463b      	mov	r3, r7
 800469e:	4619      	mov	r1, r3
 80046a0:	483d      	ldr	r0, [pc, #244]	@ (8004798 <MX_ADC1_Init+0x178>)
 80046a2:	f001 fcdf 	bl	8006064 <HAL_ADC_ConfigChannel>
 80046a6:	4603      	mov	r3, r0
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d001      	beq.n	80046b0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80046ac:	f000 fe64 	bl	8005378 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80046b0:	2302      	movs	r3, #2
 80046b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80046b4:	2302      	movs	r3, #2
 80046b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80046b8:	463b      	mov	r3, r7
 80046ba:	4619      	mov	r1, r3
 80046bc:	4836      	ldr	r0, [pc, #216]	@ (8004798 <MX_ADC1_Init+0x178>)
 80046be:	f001 fcd1 	bl	8006064 <HAL_ADC_ConfigChannel>
 80046c2:	4603      	mov	r3, r0
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d001      	beq.n	80046cc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80046c8:	f000 fe56 	bl	8005378 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80046cc:	2303      	movs	r3, #3
 80046ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80046d0:	2303      	movs	r3, #3
 80046d2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80046d4:	463b      	mov	r3, r7
 80046d6:	4619      	mov	r1, r3
 80046d8:	482f      	ldr	r0, [pc, #188]	@ (8004798 <MX_ADC1_Init+0x178>)
 80046da:	f001 fcc3 	bl	8006064 <HAL_ADC_ConfigChannel>
 80046de:	4603      	mov	r3, r0
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d001      	beq.n	80046e8 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80046e4:	f000 fe48 	bl	8005378 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80046e8:	2304      	movs	r3, #4
 80046ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80046ec:	2304      	movs	r3, #4
 80046ee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80046f0:	463b      	mov	r3, r7
 80046f2:	4619      	mov	r1, r3
 80046f4:	4828      	ldr	r0, [pc, #160]	@ (8004798 <MX_ADC1_Init+0x178>)
 80046f6:	f001 fcb5 	bl	8006064 <HAL_ADC_ConfigChannel>
 80046fa:	4603      	mov	r3, r0
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d001      	beq.n	8004704 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8004700:	f000 fe3a 	bl	8005378 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8004704:	2305      	movs	r3, #5
 8004706:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8004708:	2305      	movs	r3, #5
 800470a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800470c:	463b      	mov	r3, r7
 800470e:	4619      	mov	r1, r3
 8004710:	4821      	ldr	r0, [pc, #132]	@ (8004798 <MX_ADC1_Init+0x178>)
 8004712:	f001 fca7 	bl	8006064 <HAL_ADC_ConfigChannel>
 8004716:	4603      	mov	r3, r0
 8004718:	2b00      	cmp	r3, #0
 800471a:	d001      	beq.n	8004720 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 800471c:	f000 fe2c 	bl	8005378 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8004720:	2306      	movs	r3, #6
 8004722:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8004724:	2306      	movs	r3, #6
 8004726:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004728:	463b      	mov	r3, r7
 800472a:	4619      	mov	r1, r3
 800472c:	481a      	ldr	r0, [pc, #104]	@ (8004798 <MX_ADC1_Init+0x178>)
 800472e:	f001 fc99 	bl	8006064 <HAL_ADC_ConfigChannel>
 8004732:	4603      	mov	r3, r0
 8004734:	2b00      	cmp	r3, #0
 8004736:	d001      	beq.n	800473c <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8004738:	f000 fe1e 	bl	8005378 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800473c:	2307      	movs	r3, #7
 800473e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8004740:	2307      	movs	r3, #7
 8004742:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004744:	463b      	mov	r3, r7
 8004746:	4619      	mov	r1, r3
 8004748:	4813      	ldr	r0, [pc, #76]	@ (8004798 <MX_ADC1_Init+0x178>)
 800474a:	f001 fc8b 	bl	8006064 <HAL_ADC_ConfigChannel>
 800474e:	4603      	mov	r3, r0
 8004750:	2b00      	cmp	r3, #0
 8004752:	d001      	beq.n	8004758 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8004754:	f000 fe10 	bl	8005378 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8004758:	2308      	movs	r3, #8
 800475a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 800475c:	2308      	movs	r3, #8
 800475e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004760:	463b      	mov	r3, r7
 8004762:	4619      	mov	r1, r3
 8004764:	480c      	ldr	r0, [pc, #48]	@ (8004798 <MX_ADC1_Init+0x178>)
 8004766:	f001 fc7d 	bl	8006064 <HAL_ADC_ConfigChannel>
 800476a:	4603      	mov	r3, r0
 800476c:	2b00      	cmp	r3, #0
 800476e:	d001      	beq.n	8004774 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8004770:	f000 fe02 	bl	8005378 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8004774:	2309      	movs	r3, #9
 8004776:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8004778:	2309      	movs	r3, #9
 800477a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800477c:	463b      	mov	r3, r7
 800477e:	4619      	mov	r1, r3
 8004780:	4805      	ldr	r0, [pc, #20]	@ (8004798 <MX_ADC1_Init+0x178>)
 8004782:	f001 fc6f 	bl	8006064 <HAL_ADC_ConfigChannel>
 8004786:	4603      	mov	r3, r0
 8004788:	2b00      	cmp	r3, #0
 800478a:	d001      	beq.n	8004790 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 800478c:	f000 fdf4 	bl	8005378 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004790:	bf00      	nop
 8004792:	3710      	adds	r7, #16
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}
 8004798:	20000ab8 	.word	0x20000ab8
 800479c:	40012000 	.word	0x40012000
 80047a0:	0f000001 	.word	0x0f000001

080047a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80047a8:	4b12      	ldr	r3, [pc, #72]	@ (80047f4 <MX_I2C1_Init+0x50>)
 80047aa:	4a13      	ldr	r2, [pc, #76]	@ (80047f8 <MX_I2C1_Init+0x54>)
 80047ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80047ae:	4b11      	ldr	r3, [pc, #68]	@ (80047f4 <MX_I2C1_Init+0x50>)
 80047b0:	4a12      	ldr	r2, [pc, #72]	@ (80047fc <MX_I2C1_Init+0x58>)
 80047b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80047b4:	4b0f      	ldr	r3, [pc, #60]	@ (80047f4 <MX_I2C1_Init+0x50>)
 80047b6:	2200      	movs	r2, #0
 80047b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80047ba:	4b0e      	ldr	r3, [pc, #56]	@ (80047f4 <MX_I2C1_Init+0x50>)
 80047bc:	2200      	movs	r2, #0
 80047be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80047c0:	4b0c      	ldr	r3, [pc, #48]	@ (80047f4 <MX_I2C1_Init+0x50>)
 80047c2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80047c6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80047c8:	4b0a      	ldr	r3, [pc, #40]	@ (80047f4 <MX_I2C1_Init+0x50>)
 80047ca:	2200      	movs	r2, #0
 80047cc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80047ce:	4b09      	ldr	r3, [pc, #36]	@ (80047f4 <MX_I2C1_Init+0x50>)
 80047d0:	2200      	movs	r2, #0
 80047d2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80047d4:	4b07      	ldr	r3, [pc, #28]	@ (80047f4 <MX_I2C1_Init+0x50>)
 80047d6:	2200      	movs	r2, #0
 80047d8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80047da:	4b06      	ldr	r3, [pc, #24]	@ (80047f4 <MX_I2C1_Init+0x50>)
 80047dc:	2200      	movs	r2, #0
 80047de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80047e0:	4804      	ldr	r0, [pc, #16]	@ (80047f4 <MX_I2C1_Init+0x50>)
 80047e2:	f002 fe0f 	bl	8007404 <HAL_I2C_Init>
 80047e6:	4603      	mov	r3, r0
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d001      	beq.n	80047f0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80047ec:	f000 fdc4 	bl	8005378 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80047f0:	bf00      	nop
 80047f2:	bd80      	pop	{r7, pc}
 80047f4:	20000b60 	.word	0x20000b60
 80047f8:	40005400 	.word	0x40005400
 80047fc:	00061a80 	.word	0x00061a80

08004800 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b086      	sub	sp, #24
 8004804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004806:	f107 0308 	add.w	r3, r7, #8
 800480a:	2200      	movs	r2, #0
 800480c:	601a      	str	r2, [r3, #0]
 800480e:	605a      	str	r2, [r3, #4]
 8004810:	609a      	str	r2, [r3, #8]
 8004812:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004814:	463b      	mov	r3, r7
 8004816:	2200      	movs	r2, #0
 8004818:	601a      	str	r2, [r3, #0]
 800481a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800481c:	4b1e      	ldr	r3, [pc, #120]	@ (8004898 <MX_TIM1_Init+0x98>)
 800481e:	4a1f      	ldr	r2, [pc, #124]	@ (800489c <MX_TIM1_Init+0x9c>)
 8004820:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8004822:	4b1d      	ldr	r3, [pc, #116]	@ (8004898 <MX_TIM1_Init+0x98>)
 8004824:	2200      	movs	r2, #0
 8004826:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004828:	4b1b      	ldr	r3, [pc, #108]	@ (8004898 <MX_TIM1_Init+0x98>)
 800482a:	2200      	movs	r2, #0
 800482c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 23999;
 800482e:	4b1a      	ldr	r3, [pc, #104]	@ (8004898 <MX_TIM1_Init+0x98>)
 8004830:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 8004834:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004836:	4b18      	ldr	r3, [pc, #96]	@ (8004898 <MX_TIM1_Init+0x98>)
 8004838:	2200      	movs	r2, #0
 800483a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800483c:	4b16      	ldr	r3, [pc, #88]	@ (8004898 <MX_TIM1_Init+0x98>)
 800483e:	2200      	movs	r2, #0
 8004840:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004842:	4b15      	ldr	r3, [pc, #84]	@ (8004898 <MX_TIM1_Init+0x98>)
 8004844:	2200      	movs	r2, #0
 8004846:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004848:	4813      	ldr	r0, [pc, #76]	@ (8004898 <MX_TIM1_Init+0x98>)
 800484a:	f008 f886 	bl	800c95a <HAL_TIM_Base_Init>
 800484e:	4603      	mov	r3, r0
 8004850:	2b00      	cmp	r3, #0
 8004852:	d001      	beq.n	8004858 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8004854:	f000 fd90 	bl	8005378 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004858:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800485c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800485e:	f107 0308 	add.w	r3, r7, #8
 8004862:	4619      	mov	r1, r3
 8004864:	480c      	ldr	r0, [pc, #48]	@ (8004898 <MX_TIM1_Init+0x98>)
 8004866:	f008 fbe5 	bl	800d034 <HAL_TIM_ConfigClockSource>
 800486a:	4603      	mov	r3, r0
 800486c:	2b00      	cmp	r3, #0
 800486e:	d001      	beq.n	8004874 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8004870:	f000 fd82 	bl	8005378 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004874:	2300      	movs	r3, #0
 8004876:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004878:	2300      	movs	r3, #0
 800487a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800487c:	463b      	mov	r3, r7
 800487e:	4619      	mov	r1, r3
 8004880:	4805      	ldr	r0, [pc, #20]	@ (8004898 <MX_TIM1_Init+0x98>)
 8004882:	f008 ff9f 	bl	800d7c4 <HAL_TIMEx_MasterConfigSynchronization>
 8004886:	4603      	mov	r3, r0
 8004888:	2b00      	cmp	r3, #0
 800488a:	d001      	beq.n	8004890 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800488c:	f000 fd74 	bl	8005378 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8004890:	bf00      	nop
 8004892:	3718      	adds	r7, #24
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}
 8004898:	20000c74 	.word	0x20000c74
 800489c:	40010000 	.word	0x40010000

080048a0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b08e      	sub	sp, #56	@ 0x38
 80048a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80048a6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80048aa:	2200      	movs	r2, #0
 80048ac:	601a      	str	r2, [r3, #0]
 80048ae:	605a      	str	r2, [r3, #4]
 80048b0:	609a      	str	r2, [r3, #8]
 80048b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80048b4:	f107 0320 	add.w	r3, r7, #32
 80048b8:	2200      	movs	r2, #0
 80048ba:	601a      	str	r2, [r3, #0]
 80048bc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80048be:	1d3b      	adds	r3, r7, #4
 80048c0:	2200      	movs	r2, #0
 80048c2:	601a      	str	r2, [r3, #0]
 80048c4:	605a      	str	r2, [r3, #4]
 80048c6:	609a      	str	r2, [r3, #8]
 80048c8:	60da      	str	r2, [r3, #12]
 80048ca:	611a      	str	r2, [r3, #16]
 80048cc:	615a      	str	r2, [r3, #20]
 80048ce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80048d0:	4b32      	ldr	r3, [pc, #200]	@ (800499c <MX_TIM3_Init+0xfc>)
 80048d2:	4a33      	ldr	r2, [pc, #204]	@ (80049a0 <MX_TIM3_Init+0x100>)
 80048d4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15;
 80048d6:	4b31      	ldr	r3, [pc, #196]	@ (800499c <MX_TIM3_Init+0xfc>)
 80048d8:	220f      	movs	r2, #15
 80048da:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80048dc:	4b2f      	ldr	r3, [pc, #188]	@ (800499c <MX_TIM3_Init+0xfc>)
 80048de:	2200      	movs	r2, #0
 80048e0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 59999;
 80048e2:	4b2e      	ldr	r3, [pc, #184]	@ (800499c <MX_TIM3_Init+0xfc>)
 80048e4:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 80048e8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80048ea:	4b2c      	ldr	r3, [pc, #176]	@ (800499c <MX_TIM3_Init+0xfc>)
 80048ec:	2200      	movs	r2, #0
 80048ee:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80048f0:	4b2a      	ldr	r3, [pc, #168]	@ (800499c <MX_TIM3_Init+0xfc>)
 80048f2:	2200      	movs	r2, #0
 80048f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80048f6:	4829      	ldr	r0, [pc, #164]	@ (800499c <MX_TIM3_Init+0xfc>)
 80048f8:	f008 f82f 	bl	800c95a <HAL_TIM_Base_Init>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d001      	beq.n	8004906 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8004902:	f000 fd39 	bl	8005378 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004906:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800490a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800490c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004910:	4619      	mov	r1, r3
 8004912:	4822      	ldr	r0, [pc, #136]	@ (800499c <MX_TIM3_Init+0xfc>)
 8004914:	f008 fb8e 	bl	800d034 <HAL_TIM_ConfigClockSource>
 8004918:	4603      	mov	r3, r0
 800491a:	2b00      	cmp	r3, #0
 800491c:	d001      	beq.n	8004922 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800491e:	f000 fd2b 	bl	8005378 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004922:	481e      	ldr	r0, [pc, #120]	@ (800499c <MX_TIM3_Init+0xfc>)
 8004924:	f008 f8ca 	bl	800cabc <HAL_TIM_PWM_Init>
 8004928:	4603      	mov	r3, r0
 800492a:	2b00      	cmp	r3, #0
 800492c:	d001      	beq.n	8004932 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800492e:	f000 fd23 	bl	8005378 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004932:	2300      	movs	r3, #0
 8004934:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004936:	2300      	movs	r3, #0
 8004938:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800493a:	f107 0320 	add.w	r3, r7, #32
 800493e:	4619      	mov	r1, r3
 8004940:	4816      	ldr	r0, [pc, #88]	@ (800499c <MX_TIM3_Init+0xfc>)
 8004942:	f008 ff3f 	bl	800d7c4 <HAL_TIMEx_MasterConfigSynchronization>
 8004946:	4603      	mov	r3, r0
 8004948:	2b00      	cmp	r3, #0
 800494a:	d001      	beq.n	8004950 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800494c:	f000 fd14 	bl	8005378 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004950:	2360      	movs	r3, #96	@ 0x60
 8004952:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004954:	2300      	movs	r3, #0
 8004956:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004958:	2300      	movs	r3, #0
 800495a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800495c:	2300      	movs	r3, #0
 800495e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004960:	1d3b      	adds	r3, r7, #4
 8004962:	2200      	movs	r2, #0
 8004964:	4619      	mov	r1, r3
 8004966:	480d      	ldr	r0, [pc, #52]	@ (800499c <MX_TIM3_Init+0xfc>)
 8004968:	f008 faa2 	bl	800ceb0 <HAL_TIM_PWM_ConfigChannel>
 800496c:	4603      	mov	r3, r0
 800496e:	2b00      	cmp	r3, #0
 8004970:	d001      	beq.n	8004976 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8004972:	f000 fd01 	bl	8005378 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004976:	1d3b      	adds	r3, r7, #4
 8004978:	2204      	movs	r2, #4
 800497a:	4619      	mov	r1, r3
 800497c:	4807      	ldr	r0, [pc, #28]	@ (800499c <MX_TIM3_Init+0xfc>)
 800497e:	f008 fa97 	bl	800ceb0 <HAL_TIM_PWM_ConfigChannel>
 8004982:	4603      	mov	r3, r0
 8004984:	2b00      	cmp	r3, #0
 8004986:	d001      	beq.n	800498c <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8004988:	f000 fcf6 	bl	8005378 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800498c:	4803      	ldr	r0, [pc, #12]	@ (800499c <MX_TIM3_Init+0xfc>)
 800498e:	f000 fec7 	bl	8005720 <HAL_TIM_MspPostInit>

}
 8004992:	bf00      	nop
 8004994:	3738      	adds	r7, #56	@ 0x38
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}
 800499a:	bf00      	nop
 800499c:	20000cbc 	.word	0x20000cbc
 80049a0:	40000400 	.word	0x40000400

080049a4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80049a8:	4b11      	ldr	r3, [pc, #68]	@ (80049f0 <MX_USART1_UART_Init+0x4c>)
 80049aa:	4a12      	ldr	r2, [pc, #72]	@ (80049f4 <MX_USART1_UART_Init+0x50>)
 80049ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80049ae:	4b10      	ldr	r3, [pc, #64]	@ (80049f0 <MX_USART1_UART_Init+0x4c>)
 80049b0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80049b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80049b6:	4b0e      	ldr	r3, [pc, #56]	@ (80049f0 <MX_USART1_UART_Init+0x4c>)
 80049b8:	2200      	movs	r2, #0
 80049ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80049bc:	4b0c      	ldr	r3, [pc, #48]	@ (80049f0 <MX_USART1_UART_Init+0x4c>)
 80049be:	2200      	movs	r2, #0
 80049c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80049c2:	4b0b      	ldr	r3, [pc, #44]	@ (80049f0 <MX_USART1_UART_Init+0x4c>)
 80049c4:	2200      	movs	r2, #0
 80049c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80049c8:	4b09      	ldr	r3, [pc, #36]	@ (80049f0 <MX_USART1_UART_Init+0x4c>)
 80049ca:	220c      	movs	r2, #12
 80049cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80049ce:	4b08      	ldr	r3, [pc, #32]	@ (80049f0 <MX_USART1_UART_Init+0x4c>)
 80049d0:	2200      	movs	r2, #0
 80049d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80049d4:	4b06      	ldr	r3, [pc, #24]	@ (80049f0 <MX_USART1_UART_Init+0x4c>)
 80049d6:	2200      	movs	r2, #0
 80049d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80049da:	4805      	ldr	r0, [pc, #20]	@ (80049f0 <MX_USART1_UART_Init+0x4c>)
 80049dc:	f008 ff74 	bl	800d8c8 <HAL_UART_Init>
 80049e0:	4603      	mov	r3, r0
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d001      	beq.n	80049ea <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80049e6:	f000 fcc7 	bl	8005378 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80049ea:	bf00      	nop
 80049ec:	bd80      	pop	{r7, pc}
 80049ee:	bf00      	nop
 80049f0:	20000d04 	.word	0x20000d04
 80049f4:	40011000 	.word	0x40011000

080049f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b082      	sub	sp, #8
 80049fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80049fe:	2300      	movs	r3, #0
 8004a00:	607b      	str	r3, [r7, #4]
 8004a02:	4b1b      	ldr	r3, [pc, #108]	@ (8004a70 <MX_DMA_Init+0x78>)
 8004a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a06:	4a1a      	ldr	r2, [pc, #104]	@ (8004a70 <MX_DMA_Init+0x78>)
 8004a08:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004a0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a0e:	4b18      	ldr	r3, [pc, #96]	@ (8004a70 <MX_DMA_Init+0x78>)
 8004a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a16:	607b      	str	r3, [r7, #4]
 8004a18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	603b      	str	r3, [r7, #0]
 8004a1e:	4b14      	ldr	r3, [pc, #80]	@ (8004a70 <MX_DMA_Init+0x78>)
 8004a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a22:	4a13      	ldr	r2, [pc, #76]	@ (8004a70 <MX_DMA_Init+0x78>)
 8004a24:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004a28:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a2a:	4b11      	ldr	r3, [pc, #68]	@ (8004a70 <MX_DMA_Init+0x78>)
 8004a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a2e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004a32:	603b      	str	r3, [r7, #0]
 8004a34:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8004a36:	2200      	movs	r2, #0
 8004a38:	2100      	movs	r1, #0
 8004a3a:	200b      	movs	r0, #11
 8004a3c:	f001 fea7 	bl	800678e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8004a40:	200b      	movs	r0, #11
 8004a42:	f001 fec0 	bl	80067c6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8004a46:	2200      	movs	r2, #0
 8004a48:	2100      	movs	r1, #0
 8004a4a:	200c      	movs	r0, #12
 8004a4c:	f001 fe9f 	bl	800678e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8004a50:	200c      	movs	r0, #12
 8004a52:	f001 feb8 	bl	80067c6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8004a56:	2200      	movs	r2, #0
 8004a58:	2100      	movs	r1, #0
 8004a5a:	2038      	movs	r0, #56	@ 0x38
 8004a5c:	f001 fe97 	bl	800678e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8004a60:	2038      	movs	r0, #56	@ 0x38
 8004a62:	f001 feb0 	bl	80067c6 <HAL_NVIC_EnableIRQ>

}
 8004a66:	bf00      	nop
 8004a68:	3708      	adds	r7, #8
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	bf00      	nop
 8004a70:	40023800 	.word	0x40023800

08004a74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b08a      	sub	sp, #40	@ 0x28
 8004a78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a7a:	f107 0314 	add.w	r3, r7, #20
 8004a7e:	2200      	movs	r2, #0
 8004a80:	601a      	str	r2, [r3, #0]
 8004a82:	605a      	str	r2, [r3, #4]
 8004a84:	609a      	str	r2, [r3, #8]
 8004a86:	60da      	str	r2, [r3, #12]
 8004a88:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	613b      	str	r3, [r7, #16]
 8004a8e:	4b63      	ldr	r3, [pc, #396]	@ (8004c1c <MX_GPIO_Init+0x1a8>)
 8004a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a92:	4a62      	ldr	r2, [pc, #392]	@ (8004c1c <MX_GPIO_Init+0x1a8>)
 8004a94:	f043 0304 	orr.w	r3, r3, #4
 8004a98:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a9a:	4b60      	ldr	r3, [pc, #384]	@ (8004c1c <MX_GPIO_Init+0x1a8>)
 8004a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a9e:	f003 0304 	and.w	r3, r3, #4
 8004aa2:	613b      	str	r3, [r7, #16]
 8004aa4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	60fb      	str	r3, [r7, #12]
 8004aaa:	4b5c      	ldr	r3, [pc, #368]	@ (8004c1c <MX_GPIO_Init+0x1a8>)
 8004aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aae:	4a5b      	ldr	r2, [pc, #364]	@ (8004c1c <MX_GPIO_Init+0x1a8>)
 8004ab0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ab4:	6313      	str	r3, [r2, #48]	@ 0x30
 8004ab6:	4b59      	ldr	r3, [pc, #356]	@ (8004c1c <MX_GPIO_Init+0x1a8>)
 8004ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004abe:	60fb      	str	r3, [r7, #12]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	60bb      	str	r3, [r7, #8]
 8004ac6:	4b55      	ldr	r3, [pc, #340]	@ (8004c1c <MX_GPIO_Init+0x1a8>)
 8004ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aca:	4a54      	ldr	r2, [pc, #336]	@ (8004c1c <MX_GPIO_Init+0x1a8>)
 8004acc:	f043 0301 	orr.w	r3, r3, #1
 8004ad0:	6313      	str	r3, [r2, #48]	@ 0x30
 8004ad2:	4b52      	ldr	r3, [pc, #328]	@ (8004c1c <MX_GPIO_Init+0x1a8>)
 8004ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ad6:	f003 0301 	and.w	r3, r3, #1
 8004ada:	60bb      	str	r3, [r7, #8]
 8004adc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ade:	2300      	movs	r3, #0
 8004ae0:	607b      	str	r3, [r7, #4]
 8004ae2:	4b4e      	ldr	r3, [pc, #312]	@ (8004c1c <MX_GPIO_Init+0x1a8>)
 8004ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ae6:	4a4d      	ldr	r2, [pc, #308]	@ (8004c1c <MX_GPIO_Init+0x1a8>)
 8004ae8:	f043 0302 	orr.w	r3, r3, #2
 8004aec:	6313      	str	r3, [r2, #48]	@ 0x30
 8004aee:	4b4b      	ldr	r3, [pc, #300]	@ (8004c1c <MX_GPIO_Init+0x1a8>)
 8004af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004af2:	f003 0302 	and.w	r3, r3, #2
 8004af6:	607b      	str	r3, [r7, #4]
 8004af8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8004afa:	2200      	movs	r2, #0
 8004afc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004b00:	4847      	ldr	r0, [pc, #284]	@ (8004c20 <MX_GPIO_Init+0x1ac>)
 8004b02:	f002 fc33 	bl	800736c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP_EN_GPIO_Port, ESP_EN_Pin, GPIO_PIN_SET);
 8004b06:	2201      	movs	r2, #1
 8004b08:	2104      	movs	r1, #4
 8004b0a:	4846      	ldr	r0, [pc, #280]	@ (8004c24 <MX_GPIO_Init+0x1b0>)
 8004b0c:	f002 fc2e 	bl	800736c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LedStatus_2_Pin|M2_IN2_Pin, GPIO_PIN_RESET);
 8004b10:	2200      	movs	r2, #0
 8004b12:	f44f 6181 	mov.w	r1, #1032	@ 0x408
 8004b16:	4843      	ldr	r0, [pc, #268]	@ (8004c24 <MX_GPIO_Init+0x1b0>)
 8004b18:	f002 fc28 	bl	800736c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, M1_IN1_Pin|M1_IN2_Pin|M2_IN1_Pin, GPIO_PIN_RESET);
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f44f 4106 	mov.w	r1, #34304	@ 0x8600
 8004b22:	4841      	ldr	r0, [pc, #260]	@ (8004c28 <MX_GPIO_Init+0x1b4>)
 8004b24:	f002 fc22 	bl	800736c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8004b28:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004b2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b32:	2300      	movs	r3, #0
 8004b34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b36:	2300      	movs	r3, #0
 8004b38:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8004b3a:	f107 0314 	add.w	r3, r7, #20
 8004b3e:	4619      	mov	r1, r3
 8004b40:	4837      	ldr	r0, [pc, #220]	@ (8004c20 <MX_GPIO_Init+0x1ac>)
 8004b42:	f002 fa77 	bl	8007034 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY_Pin */
  GPIO_InitStruct.Pin = KEY_Pin;
 8004b46:	2301      	movs	r3, #1
 8004b48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 8004b52:	f107 0314 	add.w	r3, r7, #20
 8004b56:	4619      	mov	r1, r3
 8004b58:	4833      	ldr	r0, [pc, #204]	@ (8004c28 <MX_GPIO_Init+0x1b4>)
 8004b5a:	f002 fa6b 	bl	8007034 <HAL_GPIO_Init>

  /*Configure GPIO pins : ESP_EN_Pin LedStatus_2_Pin M2_IN2_Pin */
  GPIO_InitStruct.Pin = ESP_EN_Pin|LedStatus_2_Pin|M2_IN2_Pin;
 8004b5e:	f240 430c 	movw	r3, #1036	@ 0x40c
 8004b62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b64:	2301      	movs	r3, #1
 8004b66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b70:	f107 0314 	add.w	r3, r7, #20
 8004b74:	4619      	mov	r1, r3
 8004b76:	482b      	ldr	r0, [pc, #172]	@ (8004c24 <MX_GPIO_Init+0x1b0>)
 8004b78:	f002 fa5c 	bl	8007034 <HAL_GPIO_Init>

  /*Configure GPIO pin : M1_ENC_A_Pin */
  GPIO_InitStruct.Pin = M1_ENC_A_Pin;
 8004b7c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004b80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004b82:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004b86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(M1_ENC_A_GPIO_Port, &GPIO_InitStruct);
 8004b8c:	f107 0314 	add.w	r3, r7, #20
 8004b90:	4619      	mov	r1, r3
 8004b92:	4824      	ldr	r0, [pc, #144]	@ (8004c24 <MX_GPIO_Init+0x1b0>)
 8004b94:	f002 fa4e 	bl	8007034 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8004b98:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8004b9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b9e:	2302      	movs	r3, #2
 8004ba0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ba6:	2303      	movs	r3, #3
 8004ba8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004baa:	2305      	movs	r3, #5
 8004bac:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004bae:	f107 0314 	add.w	r3, r7, #20
 8004bb2:	4619      	mov	r1, r3
 8004bb4:	481b      	ldr	r0, [pc, #108]	@ (8004c24 <MX_GPIO_Init+0x1b0>)
 8004bb6:	f002 fa3d 	bl	8007034 <HAL_GPIO_Init>

  /*Configure GPIO pin : M2_ENC_A_Pin */
  GPIO_InitStruct.Pin = M2_ENC_A_Pin;
 8004bba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004bbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004bc0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004bc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(M2_ENC_A_GPIO_Port, &GPIO_InitStruct);
 8004bca:	f107 0314 	add.w	r3, r7, #20
 8004bce:	4619      	mov	r1, r3
 8004bd0:	4815      	ldr	r0, [pc, #84]	@ (8004c28 <MX_GPIO_Init+0x1b4>)
 8004bd2:	f002 fa2f 	bl	8007034 <HAL_GPIO_Init>

  /*Configure GPIO pins : M1_IN1_Pin M1_IN2_Pin M2_IN1_Pin */
  GPIO_InitStruct.Pin = M1_IN1_Pin|M1_IN2_Pin|M2_IN1_Pin;
 8004bd6:	f44f 4306 	mov.w	r3, #34304	@ 0x8600
 8004bda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004be0:	2300      	movs	r3, #0
 8004be2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004be4:	2300      	movs	r3, #0
 8004be6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004be8:	f107 0314 	add.w	r3, r7, #20
 8004bec:	4619      	mov	r1, r3
 8004bee:	480e      	ldr	r0, [pc, #56]	@ (8004c28 <MX_GPIO_Init+0x1b4>)
 8004bf0:	f002 fa20 	bl	8007034 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	2100      	movs	r1, #0
 8004bf8:	2017      	movs	r0, #23
 8004bfa:	f001 fdc8 	bl	800678e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004bfe:	2017      	movs	r0, #23
 8004c00:	f001 fde1 	bl	80067c6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004c04:	2200      	movs	r2, #0
 8004c06:	2100      	movs	r1, #0
 8004c08:	2028      	movs	r0, #40	@ 0x28
 8004c0a:	f001 fdc0 	bl	800678e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004c0e:	2028      	movs	r0, #40	@ 0x28
 8004c10:	f001 fdd9 	bl	80067c6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8004c14:	bf00      	nop
 8004c16:	3728      	adds	r7, #40	@ 0x28
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}
 8004c1c:	40023800 	.word	0x40023800
 8004c20:	40020800 	.word	0x40020800
 8004c24:	40020400 	.word	0x40020400
 8004c28:	40020000 	.word	0x40020000

08004c2c <Init_Timing>:

/* USER CODE BEGIN 4 */
/************************************ USER INIT FUNCTIONS ****************************************/
/* INICIALIZACIÓN DE TIMERS Y PWM*/
void Init_Timing(){
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	af00      	add	r7, sp, #0
	  if(HAL_TIM_Base_Start_IT(&htim1) != HAL_OK){
 8004c30:	4819      	ldr	r0, [pc, #100]	@ (8004c98 <Init_Timing+0x6c>)
 8004c32:	f007 fee1 	bl	800c9f8 <HAL_TIM_Base_Start_IT>
 8004c36:	4603      	mov	r3, r0
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d005      	beq.n	8004c48 <Init_Timing+0x1c>
		  comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"TIM1 INIT", 9);
 8004c3c:	2309      	movs	r3, #9
 8004c3e:	4a17      	ldr	r2, [pc, #92]	@ (8004c9c <Init_Timing+0x70>)
 8004c40:	21ee      	movs	r1, #238	@ 0xee
 8004c42:	4817      	ldr	r0, [pc, #92]	@ (8004ca0 <Init_Timing+0x74>)
 8004c44:	f7fd fc4c 	bl	80024e0 <comm_sendCMD>
	  }
	  if(HAL_TIM_Base_Start_IT(&htim3) != HAL_OK){
 8004c48:	4816      	ldr	r0, [pc, #88]	@ (8004ca4 <Init_Timing+0x78>)
 8004c4a:	f007 fed5 	bl	800c9f8 <HAL_TIM_Base_Start_IT>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d005      	beq.n	8004c60 <Init_Timing+0x34>
	  	  comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"TIM3 INIT BASE", 14);
 8004c54:	230e      	movs	r3, #14
 8004c56:	4a14      	ldr	r2, [pc, #80]	@ (8004ca8 <Init_Timing+0x7c>)
 8004c58:	21ee      	movs	r1, #238	@ 0xee
 8004c5a:	4811      	ldr	r0, [pc, #68]	@ (8004ca0 <Init_Timing+0x74>)
 8004c5c:	f7fd fc40 	bl	80024e0 <comm_sendCMD>
	  }
	  if(HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1) != HAL_OK){
 8004c60:	2100      	movs	r1, #0
 8004c62:	4810      	ldr	r0, [pc, #64]	@ (8004ca4 <Init_Timing+0x78>)
 8004c64:	f007 ff84 	bl	800cb70 <HAL_TIM_PWM_Start>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d005      	beq.n	8004c7a <Init_Timing+0x4e>
		  comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"TIM3 INIT PWM1", 14);
 8004c6e:	230e      	movs	r3, #14
 8004c70:	4a0e      	ldr	r2, [pc, #56]	@ (8004cac <Init_Timing+0x80>)
 8004c72:	21ee      	movs	r1, #238	@ 0xee
 8004c74:	480a      	ldr	r0, [pc, #40]	@ (8004ca0 <Init_Timing+0x74>)
 8004c76:	f7fd fc33 	bl	80024e0 <comm_sendCMD>
	  }
	  if(HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2) != HAL_OK){
 8004c7a:	2104      	movs	r1, #4
 8004c7c:	4809      	ldr	r0, [pc, #36]	@ (8004ca4 <Init_Timing+0x78>)
 8004c7e:	f007 ff77 	bl	800cb70 <HAL_TIM_PWM_Start>
 8004c82:	4603      	mov	r3, r0
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d005      	beq.n	8004c94 <Init_Timing+0x68>
		  comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"TIM3 INIT PWM2", 14);
 8004c88:	230e      	movs	r3, #14
 8004c8a:	4a09      	ldr	r2, [pc, #36]	@ (8004cb0 <Init_Timing+0x84>)
 8004c8c:	21ee      	movs	r1, #238	@ 0xee
 8004c8e:	4804      	ldr	r0, [pc, #16]	@ (8004ca0 <Init_Timing+0x74>)
 8004c90:	f7fd fc26 	bl	80024e0 <comm_sendCMD>
	  }
}
 8004c94:	bf00      	nop
 8004c96:	bd80      	pop	{r7, pc}
 8004c98:	20000c74 	.word	0x20000c74
 8004c9c:	080136e4 	.word	0x080136e4
 8004ca0:	200012a0 	.word	0x200012a0
 8004ca4:	20000cbc 	.word	0x20000cbc
 8004ca8:	080136f0 	.word	0x080136f0
 8004cac:	08013700 	.word	0x08013700
 8004cb0:	08013710 	.word	0x08013710

08004cb4 <Init_MPU6050>:
/* FIN INICIALIZACIÓN DE TIMERS Y PWM*/
/* INICIALIZACIÓN DE MPU6050 */
void Init_MPU6050(){
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	af00      	add	r7, sp, #0
	if(HAL_I2C_IsDeviceReady(&hi2c1, MPU6050_ADDR, 1, 10000) != HAL_OK){
 8004cb8:	f242 7310 	movw	r3, #10000	@ 0x2710
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	21d0      	movs	r1, #208	@ 0xd0
 8004cc0:	4811      	ldr	r0, [pc, #68]	@ (8004d08 <Init_MPU6050+0x54>)
 8004cc2:	f003 fc11 	bl	80084e8 <HAL_I2C_IsDeviceReady>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d006      	beq.n	8004cda <Init_MPU6050+0x26>
		comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"MPU6050 READY", 13);
 8004ccc:	230d      	movs	r3, #13
 8004cce:	4a0f      	ldr	r2, [pc, #60]	@ (8004d0c <Init_MPU6050+0x58>)
 8004cd0:	21ee      	movs	r1, #238	@ 0xee
 8004cd2:	480f      	ldr	r0, [pc, #60]	@ (8004d10 <Init_MPU6050+0x5c>)
 8004cd4:	f7fd fc04 	bl	80024e0 <comm_sendCMD>
			comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"MPU6050 INIT", 12);
		}else{
			MPU6050_Calibrate(&MPU6050);
		}
	}
}
 8004cd8:	e013      	b.n	8004d02 <Init_MPU6050+0x4e>
		MPU6050_Set_I2C_Communication(&I2C1_Mem_Write, &I2C1_Mem_Read);
 8004cda:	490e      	ldr	r1, [pc, #56]	@ (8004d14 <Init_MPU6050+0x60>)
 8004cdc:	480e      	ldr	r0, [pc, #56]	@ (8004d18 <Init_MPU6050+0x64>)
 8004cde:	f7fc f9c5 	bl	800106c <MPU6050_Set_I2C_Communication>
		if(MPU6050_Init(&MPU6050) != SYS_OK){
 8004ce2:	480e      	ldr	r0, [pc, #56]	@ (8004d1c <Init_MPU6050+0x68>)
 8004ce4:	f7fc f9d8 	bl	8001098 <MPU6050_Init>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d006      	beq.n	8004cfc <Init_MPU6050+0x48>
			comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"MPU6050 INIT", 12);
 8004cee:	230c      	movs	r3, #12
 8004cf0:	4a0b      	ldr	r2, [pc, #44]	@ (8004d20 <Init_MPU6050+0x6c>)
 8004cf2:	21ee      	movs	r1, #238	@ 0xee
 8004cf4:	4806      	ldr	r0, [pc, #24]	@ (8004d10 <Init_MPU6050+0x5c>)
 8004cf6:	f7fd fbf3 	bl	80024e0 <comm_sendCMD>
}
 8004cfa:	e002      	b.n	8004d02 <Init_MPU6050+0x4e>
			MPU6050_Calibrate(&MPU6050);
 8004cfc:	4807      	ldr	r0, [pc, #28]	@ (8004d1c <Init_MPU6050+0x68>)
 8004cfe:	f7fc fa7d 	bl	80011fc <MPU6050_Calibrate>
}
 8004d02:	bf00      	nop
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	bf00      	nop
 8004d08:	20000b60 	.word	0x20000b60
 8004d0c:	08013720 	.word	0x08013720
 8004d10:	200012a0 	.word	0x200012a0
 8004d14:	08005175 	.word	0x08005175
 8004d18:	08005135 	.word	0x08005135
 8004d1c:	20000da0 	.word	0x20000da0
 8004d20:	08013730 	.word	0x08013730

08004d24 <Init_Display>:
/* FIN INICIALIZACIÓN DE MPU6050 */

/* INICIALIZACIÓN DISPLAY*/
void Init_Display(){
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b082      	sub	sp, #8
 8004d28:	af02      	add	r7, sp, #8
	Display.refreshCounter_10ms = DISPLAY_MEDIUM_REFRESH_RATE_10MS;
 8004d2a:	4b1f      	ldr	r3, [pc, #124]	@ (8004da8 <Init_Display+0x84>)
 8004d2c:	2214      	movs	r2, #20
 8004d2e:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
	Display.refreshRate_10ms = DISPLAY_MEDIUM_REFRESH_RATE_10MS;
 8004d32:	4b1d      	ldr	r3, [pc, #116]	@ (8004da8 <Init_Display+0x84>)
 8004d34:	2214      	movs	r2, #20
 8004d36:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412

	if(HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 10000) != HAL_OK){
 8004d3a:	f242 7310 	movw	r3, #10000	@ 0x2710
 8004d3e:	2201      	movs	r2, #1
 8004d40:	2178      	movs	r1, #120	@ 0x78
 8004d42:	481a      	ldr	r0, [pc, #104]	@ (8004dac <Init_Display+0x88>)
 8004d44:	f003 fbd0 	bl	80084e8 <HAL_I2C_IsDeviceReady>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d006      	beq.n	8004d5c <Init_Display+0x38>
		comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"OLED READY", 10);
 8004d4e:	230a      	movs	r3, #10
 8004d50:	4a17      	ldr	r2, [pc, #92]	@ (8004db0 <Init_Display+0x8c>)
 8004d52:	21ee      	movs	r1, #238	@ 0xee
 8004d54:	4817      	ldr	r0, [pc, #92]	@ (8004db4 <Init_Display+0x90>)
 8004d56:	f7fd fbc3 	bl	80024e0 <comm_sendCMD>
			Display_DrawBitmap(0,0, uner_logo, 128, 64, 1);
			Display.isInit = TRUE;
			Display.timer = HAL_GetTick();
		}
	}
}
 8004d5a:	e022      	b.n	8004da2 <Init_Display+0x7e>
		Display_Set_I2C_Master_Transmit(&I2C1_DMA_Mem_Write, &I2C1_Master_Transmit);
 8004d5c:	4916      	ldr	r1, [pc, #88]	@ (8004db8 <Init_Display+0x94>)
 8004d5e:	4817      	ldr	r0, [pc, #92]	@ (8004dbc <Init_Display+0x98>)
 8004d60:	f7fc fc22 	bl	80015a8 <Display_Set_I2C_Master_Transmit>
		if(Display_Init() != SYS_OK){
 8004d64:	f7fc fc36 	bl	80015d4 <Display_Init>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d006      	beq.n	8004d7c <Init_Display+0x58>
			comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"OLED INIT", 9);
 8004d6e:	2309      	movs	r3, #9
 8004d70:	4a13      	ldr	r2, [pc, #76]	@ (8004dc0 <Init_Display+0x9c>)
 8004d72:	21ee      	movs	r1, #238	@ 0xee
 8004d74:	480f      	ldr	r0, [pc, #60]	@ (8004db4 <Init_Display+0x90>)
 8004d76:	f7fd fbb3 	bl	80024e0 <comm_sendCMD>
}
 8004d7a:	e012      	b.n	8004da2 <Init_Display+0x7e>
			Display_DrawBitmap(0,0, uner_logo, 128, 64, 1);
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	9301      	str	r3, [sp, #4]
 8004d80:	2340      	movs	r3, #64	@ 0x40
 8004d82:	9300      	str	r3, [sp, #0]
 8004d84:	2380      	movs	r3, #128	@ 0x80
 8004d86:	4a0f      	ldr	r2, [pc, #60]	@ (8004dc4 <Init_Display+0xa0>)
 8004d88:	2100      	movs	r1, #0
 8004d8a:	2000      	movs	r0, #0
 8004d8c:	f7fc feb8 	bl	8001b00 <Display_DrawBitmap>
			Display.isInit = TRUE;
 8004d90:	4b05      	ldr	r3, [pc, #20]	@ (8004da8 <Init_Display+0x84>)
 8004d92:	2201      	movs	r2, #1
 8004d94:	701a      	strb	r2, [r3, #0]
			Display.timer = HAL_GetTick();
 8004d96:	f000 fed3 	bl	8005b40 <HAL_GetTick>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	4a02      	ldr	r2, [pc, #8]	@ (8004da8 <Init_Display+0x84>)
 8004d9e:	f8c2 3404 	str.w	r3, [r2, #1028]	@ 0x404
}
 8004da2:	bf00      	nop
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}
 8004da8:	20000e64 	.word	0x20000e64
 8004dac:	20000b60 	.word	0x20000b60
 8004db0:	08013740 	.word	0x08013740
 8004db4:	200012a0 	.word	0x200012a0
 8004db8:	08005101 	.word	0x08005101
 8004dbc:	080050c5 	.word	0x080050c5
 8004dc0:	0801374c 	.word	0x0801374c
 8004dc4:	080137d0 	.word	0x080137d0

08004dc8 <Init_WiFi>:
/* FIN INICIALIZACIÓN DISPLAY */

/* INICIALIZACIÓN WIFI */
void Init_WiFi(){
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	af00      	add	r7, sp, #0
	ESP.password = 	"wlan412877";
 8004dcc:	4b1c      	ldr	r3, [pc, #112]	@ (8004e40 <Init_WiFi+0x78>)
 8004dce:	4a1d      	ldr	r2, [pc, #116]	@ (8004e44 <Init_WiFi+0x7c>)
 8004dd0:	611a      	str	r2, [r3, #16]
	ESP.ssid = 		"InternetPlus_bed788";
 8004dd2:	4b1b      	ldr	r3, [pc, #108]	@ (8004e40 <Init_WiFi+0x78>)
 8004dd4:	4a1c      	ldr	r2, [pc, #112]	@ (8004e48 <Init_WiFi+0x80>)
 8004dd6:	60da      	str	r2, [r3, #12]
	ESP.IP = 		"192.168.1.10";
 8004dd8:	4b19      	ldr	r3, [pc, #100]	@ (8004e40 <Init_WiFi+0x78>)
 8004dda:	4a1c      	ldr	r2, [pc, #112]	@ (8004e4c <Init_WiFi+0x84>)
 8004ddc:	615a      	str	r2, [r3, #20]

	Comm_Init(&ESP.data, &decodeOn_USB, &writeOn_ESP);
 8004dde:	4a1c      	ldr	r2, [pc, #112]	@ (8004e50 <Init_WiFi+0x88>)
 8004de0:	491c      	ldr	r1, [pc, #112]	@ (8004e54 <Init_WiFi+0x8c>)
 8004de2:	481d      	ldr	r0, [pc, #116]	@ (8004e58 <Init_WiFi+0x90>)
 8004de4:	f7fd f9f0 	bl	80021c8 <Comm_Init>
	ESP.data.isESP01 = TRUE;
 8004de8:	4b15      	ldr	r3, [pc, #84]	@ (8004e40 <Init_WiFi+0x78>)
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 2247 	strb.w	r2, [r3, #583]	@ 0x247
	HAL_UART_Receive_IT(&huart1, &ESP.AT_Rx_data, 1);
 8004df0:	2201      	movs	r2, #1
 8004df2:	491a      	ldr	r1, [pc, #104]	@ (8004e5c <Init_WiFi+0x94>)
 8004df4:	481a      	ldr	r0, [pc, #104]	@ (8004e60 <Init_WiFi+0x98>)
 8004df6:	f008 fdb7 	bl	800d968 <HAL_UART_Receive_IT>

	ESP.Config.DoCHPD = setESP01_CHPD;
 8004dfa:	4b11      	ldr	r3, [pc, #68]	@ (8004e40 <Init_WiFi+0x78>)
 8004dfc:	4a19      	ldr	r2, [pc, #100]	@ (8004e64 <Init_WiFi+0x9c>)
 8004dfe:	601a      	str	r2, [r3, #0]
	ESP.Config.WriteUSARTByte = ESP01_UART_Transmit;
 8004e00:	4b0f      	ldr	r3, [pc, #60]	@ (8004e40 <Init_WiFi+0x78>)
 8004e02:	4a19      	ldr	r2, [pc, #100]	@ (8004e68 <Init_WiFi+0xa0>)
 8004e04:	605a      	str	r2, [r3, #4]
	ESP.Config.WriteByteToBufRX = ESP01_Data_Recived;
 8004e06:	4b0e      	ldr	r3, [pc, #56]	@ (8004e40 <Init_WiFi+0x78>)
 8004e08:	4a18      	ldr	r2, [pc, #96]	@ (8004e6c <Init_WiFi+0xa4>)
 8004e0a:	609a      	str	r2, [r3, #8]

	ESP01_Init(&ESP.Config);
 8004e0c:	480c      	ldr	r0, [pc, #48]	@ (8004e40 <Init_WiFi+0x78>)
 8004e0e:	f7fd fd9d 	bl	800294c <ESP01_Init>
	ESP01_SetWIFI(ESP.ssid, ESP.password);
 8004e12:	4b0b      	ldr	r3, [pc, #44]	@ (8004e40 <Init_WiFi+0x78>)
 8004e14:	68db      	ldr	r3, [r3, #12]
 8004e16:	4a0a      	ldr	r2, [pc, #40]	@ (8004e40 <Init_WiFi+0x78>)
 8004e18:	6912      	ldr	r2, [r2, #16]
 8004e1a:	4611      	mov	r1, r2
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f7fd fc3b 	bl	8002698 <ESP01_SetWIFI>
	ESP01_StartUDP("192.168.1.10", 30010, 30000);
 8004e22:	f247 5230 	movw	r2, #30000	@ 0x7530
 8004e26:	f247 513a 	movw	r1, #30010	@ 0x753a
 8004e2a:	4808      	ldr	r0, [pc, #32]	@ (8004e4c <Init_WiFi+0x84>)
 8004e2c:	f7fd fc6a 	bl	8002704 <ESP01_StartUDP>
	//ESP01_AttachChangeState(&onESP01ChangeState);
	ESP01_AttachDebugStr(&onESP01Debug);
 8004e30:	480f      	ldr	r0, [pc, #60]	@ (8004e70 <Init_WiFi+0xa8>)
 8004e32:	f7fd fe13 	bl	8002a5c <ESP01_AttachDebugStr>

	ESP01_setMode(CREATEWIFI);
 8004e36:	2001      	movs	r0, #1
 8004e38:	f7fe fd88 	bl	800394c <ESP01_setMode>
}
 8004e3c:	bf00      	nop
 8004e3e:	bd80      	pop	{r7, pc}
 8004e40:	200014d4 	.word	0x200014d4
 8004e44:	08013758 	.word	0x08013758
 8004e48:	08013764 	.word	0x08013764
 8004e4c:	08013778 	.word	0x08013778
 8004e50:	0800506d 	.word	0x0800506d
 8004e54:	08003edd 	.word	0x08003edd
 8004e58:	200014ec 	.word	0x200014ec
 8004e5c:	2000171c 	.word	0x2000171c
 8004e60:	20000d04 	.word	0x20000d04
 8004e64:	080051b5 	.word	0x080051b5
 8004e68:	08004ffd 	.word	0x08004ffd
 8004e6c:	08005035 	.word	0x08005035
 8004e70:	080042c1 	.word	0x080042c1

08004e74 <HAL_TIM_PeriodElapsedCallback>:
/* END INICIALIZACIÓN WIFI */

/************************************ END USER INIT FUNCTIONS ****************************************/
/***************************************** HAL CALLBACKS *********************************************/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){ //								1/4000s
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b084      	sub	sp, #16
 8004e78:	af02      	add	r7, sp, #8
 8004e7a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1){
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a1a      	ldr	r2, [pc, #104]	@ (8004eec <HAL_TIM_PeriodElapsedCallback+0x78>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d123      	bne.n	8004ece <HAL_TIM_PeriodElapsedCallback+0x5a>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&Analog.raw, ADC_NUM_SENSORS);
 8004e86:	2209      	movs	r2, #9
 8004e88:	4919      	ldr	r1, [pc, #100]	@ (8004ef0 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8004e8a:	481a      	ldr	r0, [pc, #104]	@ (8004ef4 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8004e8c:	f000 ffdc 	bl	8005e48 <HAL_ADC_Start_DMA>
		is5ms--;
 8004e90:	4b19      	ldr	r3, [pc, #100]	@ (8004ef8 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8004e92:	781b      	ldrb	r3, [r3, #0]
 8004e94:	3b01      	subs	r3, #1
 8004e96:	b2da      	uxtb	r2, r3
 8004e98:	4b17      	ldr	r3, [pc, #92]	@ (8004ef8 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8004e9a:	701a      	strb	r2, [r3, #0]
		if(!is5ms){
 8004e9c:	4b16      	ldr	r3, [pc, #88]	@ (8004ef8 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8004e9e:	781b      	ldrb	r3, [r3, #0]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d114      	bne.n	8004ece <HAL_TIM_PeriodElapsedCallback+0x5a>
			is5ms = 20;
 8004ea4:	4b14      	ldr	r3, [pc, #80]	@ (8004ef8 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8004ea6:	2214      	movs	r2, #20
 8004ea8:	701a      	strb	r2, [r3, #0]
			if(MPU6050.isInit){
 8004eaa:	4b14      	ldr	r3, [pc, #80]	@ (8004efc <HAL_TIM_PeriodElapsedCallback+0x88>)
 8004eac:	f893 30c2 	ldrb.w	r3, [r3, #194]	@ 0xc2
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d00c      	beq.n	8004ece <HAL_TIM_PeriodElapsedCallback+0x5a>
				HAL_I2C_Mem_Read_DMA(&hi2c1, MPU6050_ADDR, ACCEL_XOUT_REG, 1, MPU6050.bit_data, 14);
 8004eb4:	230e      	movs	r3, #14
 8004eb6:	9301      	str	r3, [sp, #4]
 8004eb8:	4b11      	ldr	r3, [pc, #68]	@ (8004f00 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8004eba:	9300      	str	r3, [sp, #0]
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	223b      	movs	r2, #59	@ 0x3b
 8004ec0:	21d0      	movs	r1, #208	@ 0xd0
 8004ec2:	4810      	ldr	r0, [pc, #64]	@ (8004f04 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8004ec4:	f003 f980 	bl	80081c8 <HAL_I2C_Mem_Read_DMA>
				Display_I2C_DMA_Ready(FALSE);
 8004ec8:	2000      	movs	r0, #0
 8004eca:	f7fc fd5d 	bl	8001988 <Display_I2C_DMA_Ready>
			}
		}
	}
	if(htim->Instance == TIM3){
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a0d      	ldr	r2, [pc, #52]	@ (8004f08 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d104      	bne.n	8004ee2 <HAL_TIM_PeriodElapsedCallback+0x6e>
		IS10MS = TRUE;
 8004ed8:	4a0c      	ldr	r2, [pc, #48]	@ (8004f0c <HAL_TIM_PeriodElapsedCallback+0x98>)
 8004eda:	7813      	ldrb	r3, [r2, #0]
 8004edc:	f043 0301 	orr.w	r3, r3, #1
 8004ee0:	7013      	strb	r3, [r2, #0]
	}
}
 8004ee2:	bf00      	nop
 8004ee4:	3708      	adds	r7, #8
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}
 8004eea:	bf00      	nop
 8004eec:	40010000 	.word	0x40010000
 8004ef0:	2000127c 	.word	0x2000127c
 8004ef4:	20000ab8 	.word	0x20000ab8
 8004ef8:	2000000e 	.word	0x2000000e
 8004efc:	20000da0 	.word	0x20000da0
 8004f00:	20000e54 	.word	0x20000e54
 8004f04:	20000b60 	.word	0x20000b60
 8004f08:	40000400 	.word	0x40000400
 8004f0c:	20000d4c 	.word	0x20000d4c

08004f10 <HAL_I2C_MemTxCpltCallback>:

void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c){
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b082      	sub	sp, #8
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
	if(hi2c->Devaddress == SSD1306_I2C_ADDR){
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f1c:	2b78      	cmp	r3, #120	@ 0x78
 8004f1e:	d107      	bne.n	8004f30 <HAL_I2C_MemTxCpltCallback+0x20>
		if(!MPU6050.isInit){
 8004f20:	4b05      	ldr	r3, [pc, #20]	@ (8004f38 <HAL_I2C_MemTxCpltCallback+0x28>)
 8004f22:	f893 30c2 	ldrb.w	r3, [r3, #194]	@ 0xc2
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d102      	bne.n	8004f30 <HAL_I2C_MemTxCpltCallback+0x20>
			Display_I2C_DMA_Ready(TRUE);
 8004f2a:	2001      	movs	r0, #1
 8004f2c:	f7fc fd2c 	bl	8001988 <Display_I2C_DMA_Ready>
		}
	}
}
 8004f30:	bf00      	nop
 8004f32:	3708      	adds	r7, #8
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}
 8004f38:	20000da0 	.word	0x20000da0

08004f3c <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b082      	sub	sp, #8
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
	if(hi2c->Devaddress == MPU6050_ADDR){
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f48:	2bd0      	cmp	r3, #208	@ 0xd0
 8004f4a:	d105      	bne.n	8004f58 <HAL_I2C_MemRxCpltCallback+0x1c>
		MPU6050_I2C_DMA_Cplt(&MPU6050);
 8004f4c:	4804      	ldr	r0, [pc, #16]	@ (8004f60 <HAL_I2C_MemRxCpltCallback+0x24>)
 8004f4e:	f7fc f9fb 	bl	8001348 <MPU6050_I2C_DMA_Cplt>
		Display_I2C_DMA_Ready(TRUE);
 8004f52:	2001      	movs	r0, #1
 8004f54:	f7fc fd18 	bl	8001988 <Display_I2C_DMA_Ready>
	}
}
 8004f58:	bf00      	nop
 8004f5a:	3708      	adds	r7, #8
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}
 8004f60:	20000da0 	.word	0x20000da0

08004f64 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b082      	sub	sp, #8
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
	ADC_Conversion_Cplt(Analog.raw, Analog.value);
 8004f6c:	4903      	ldr	r1, [pc, #12]	@ (8004f7c <HAL_ADC_ConvCpltCallback+0x18>)
 8004f6e:	4804      	ldr	r0, [pc, #16]	@ (8004f80 <HAL_ADC_ConvCpltCallback+0x1c>)
 8004f70:	f7fb ff1a 	bl	8000da8 <ADC_Conversion_Cplt>
}
 8004f74:	bf00      	nop
 8004f76:	3708      	adds	r7, #8
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}
 8004f7c:	2000128e 	.word	0x2000128e
 8004f80:	2000127c 	.word	0x2000127c

08004f84 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b082      	sub	sp, #8
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == M1_ENC_A_Pin){
 8004f8e:	88fb      	ldrh	r3, [r7, #6]
 8004f90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f94:	d102      	bne.n	8004f9c <HAL_GPIO_EXTI_Callback+0x18>
    	Encoder_Add_Pulse(&EncoderL);
 8004f96:	4807      	ldr	r0, [pc, #28]	@ (8004fb4 <HAL_GPIO_EXTI_Callback+0x30>)
 8004f98:	f7fd f806 	bl	8001fa8 <Encoder_Add_Pulse>
    }
    if (GPIO_Pin == M2_ENC_A_Pin){
 8004f9c:	88fb      	ldrh	r3, [r7, #6]
 8004f9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004fa2:	d102      	bne.n	8004faa <HAL_GPIO_EXTI_Callback+0x26>
    	Encoder_Add_Pulse(&EncoderR);
 8004fa4:	4804      	ldr	r0, [pc, #16]	@ (8004fb8 <HAL_GPIO_EXTI_Callback+0x34>)
 8004fa6:	f7fc ffff 	bl	8001fa8 <Encoder_Add_Pulse>
	}
}
 8004faa:	bf00      	nop
 8004fac:	3708      	adds	r7, #8
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}
 8004fb2:	bf00      	nop
 8004fb4:	20000d88 	.word	0x20000d88
 8004fb8:	20000d94 	.word	0x20000d94

08004fbc <HAL_UART_RxCpltCallback>:
/**************************************** END HAL CALLBACKS ***************************************/

/******************************************** ESP ***********************************************/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b082      	sub	sp, #8
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a08      	ldr	r2, [pc, #32]	@ (8004fec <HAL_UART_RxCpltCallback+0x30>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d10a      	bne.n	8004fe4 <HAL_UART_RxCpltCallback+0x28>
		ESP01_WriteRX(ESP.AT_Rx_data);
 8004fce:	4b08      	ldr	r3, [pc, #32]	@ (8004ff0 <HAL_UART_RxCpltCallback+0x34>)
 8004fd0:	f893 3248 	ldrb.w	r3, [r3, #584]	@ 0x248
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f7fd fbeb 	bl	80027b0 <ESP01_WriteRX>
		HAL_UART_Receive_IT(&huart1, &ESP.AT_Rx_data, 1);
 8004fda:	2201      	movs	r2, #1
 8004fdc:	4905      	ldr	r1, [pc, #20]	@ (8004ff4 <HAL_UART_RxCpltCallback+0x38>)
 8004fde:	4806      	ldr	r0, [pc, #24]	@ (8004ff8 <HAL_UART_RxCpltCallback+0x3c>)
 8004fe0:	f008 fcc2 	bl	800d968 <HAL_UART_Receive_IT>
	}
}
 8004fe4:	bf00      	nop
 8004fe6:	3708      	adds	r7, #8
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}
 8004fec:	40011000 	.word	0x40011000
 8004ff0:	200014d4 	.word	0x200014d4
 8004ff4:	2000171c 	.word	0x2000171c
 8004ff8:	20000d04 	.word	0x20000d04

08004ffc <ESP01_UART_Transmit>:

int ESP01_UART_Transmit(uint8_t val){
 8004ffc:	b480      	push	{r7}
 8004ffe:	b083      	sub	sp, #12
 8005000:	af00      	add	r7, sp, #0
 8005002:	4603      	mov	r3, r0
 8005004:	71fb      	strb	r3, [r7, #7]
	if(__HAL_UART_GET_FLAG(&huart1, UART_FLAG_TXE)){
 8005006:	4b09      	ldr	r3, [pc, #36]	@ (800502c <ESP01_UART_Transmit+0x30>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005010:	2b80      	cmp	r3, #128	@ 0x80
 8005012:	d104      	bne.n	800501e <ESP01_UART_Transmit+0x22>
		USART1->DR = val;
 8005014:	4a06      	ldr	r2, [pc, #24]	@ (8005030 <ESP01_UART_Transmit+0x34>)
 8005016:	79fb      	ldrb	r3, [r7, #7]
 8005018:	6053      	str	r3, [r2, #4]
		return 1;
 800501a:	2301      	movs	r3, #1
 800501c:	e000      	b.n	8005020 <ESP01_UART_Transmit+0x24>
	}
	return 0;
 800501e:	2300      	movs	r3, #0
}
 8005020:	4618      	mov	r0, r3
 8005022:	370c      	adds	r7, #12
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr
 800502c:	20000d04 	.word	0x20000d04
 8005030:	40011000 	.word	0x40011000

08005034 <ESP01_Data_Recived>:

void ESP01_Data_Recived(uint8_t value){
 8005034:	b480      	push	{r7}
 8005036:	b083      	sub	sp, #12
 8005038:	af00      	add	r7, sp, #0
 800503a:	4603      	mov	r3, r0
 800503c:	71fb      	strb	r3, [r7, #7]
	ESP.data.Rx.buffer[ESP.data.Rx.write++] = value;
 800503e:	4b0a      	ldr	r3, [pc, #40]	@ (8005068 <ESP01_Data_Recived+0x34>)
 8005040:	f893 311d 	ldrb.w	r3, [r3, #285]	@ 0x11d
 8005044:	1c5a      	adds	r2, r3, #1
 8005046:	b2d1      	uxtb	r1, r2
 8005048:	4a07      	ldr	r2, [pc, #28]	@ (8005068 <ESP01_Data_Recived+0x34>)
 800504a:	f882 111d 	strb.w	r1, [r2, #285]	@ 0x11d
 800504e:	461a      	mov	r2, r3
 8005050:	4b05      	ldr	r3, [pc, #20]	@ (8005068 <ESP01_Data_Recived+0x34>)
 8005052:	4413      	add	r3, r2
 8005054:	79fa      	ldrb	r2, [r7, #7]
 8005056:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
}
 800505a:	bf00      	nop
 800505c:	370c      	adds	r7, #12
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr
 8005066:	bf00      	nop
 8005068:	200014d4 	.word	0x200014d4

0800506c <writeOn_ESP>:

void writeOn_ESP(s_commData *data){
 800506c:	b580      	push	{r7, lr}
 800506e:	b082      	sub	sp, #8
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
	ESP.bytesToTx = data->Tx.write - data->Tx.read;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	78da      	ldrb	r2, [r3, #3]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	789b      	ldrb	r3, [r3, #2]
 800507c:	1ad3      	subs	r3, r2, r3
 800507e:	b2da      	uxtb	r2, r3
 8005080:	4b0f      	ldr	r3, [pc, #60]	@ (80050c0 <writeOn_ESP+0x54>)
 8005082:	f883 2249 	strb.w	r2, [r3, #585]	@ 0x249
	if(ESP01_Send(data->Tx.buffer,  data->Tx.read,  ESP.bytesToTx,  RINGBUFFLENGTH) == ESP01_SEND_READY){
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	1d18      	adds	r0, r3, #4
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	789b      	ldrb	r3, [r3, #2]
 800508e:	4619      	mov	r1, r3
 8005090:	4b0b      	ldr	r3, [pc, #44]	@ (80050c0 <writeOn_ESP+0x54>)
 8005092:	f893 3249 	ldrb.w	r3, [r3, #585]	@ 0x249
 8005096:	461a      	mov	r2, r3
 8005098:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800509c:	f7fd fba8 	bl	80027f0 <ESP01_Send>
 80050a0:	4603      	mov	r3, r0
 80050a2:	2b09      	cmp	r3, #9
 80050a4:	d108      	bne.n	80050b8 <writeOn_ESP+0x4c>
		data->Tx.read += ESP.bytesToTx;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	789a      	ldrb	r2, [r3, #2]
 80050aa:	4b05      	ldr	r3, [pc, #20]	@ (80050c0 <writeOn_ESP+0x54>)
 80050ac:	f893 3249 	ldrb.w	r3, [r3, #585]	@ 0x249
 80050b0:	4413      	add	r3, r2
 80050b2:	b2da      	uxtb	r2, r3
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	709a      	strb	r2, [r3, #2]
	}
}
 80050b8:	bf00      	nop
 80050ba:	3708      	adds	r7, #8
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}
 80050c0:	200014d4 	.word	0x200014d4

080050c4 <I2C1_DMA_Mem_Write>:
/******************************************** END ESP ***********************************************/

/*************************************** HARDWARE ABSTRACTION ************************************/
e_system I2C1_DMA_Mem_Write(uint16_t Dev_Address, uint8_t reg, uint8_t *p_Data, uint16_t _Size){
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b086      	sub	sp, #24
 80050c8:	af02      	add	r7, sp, #8
 80050ca:	60ba      	str	r2, [r7, #8]
 80050cc:	461a      	mov	r2, r3
 80050ce:	4603      	mov	r3, r0
 80050d0:	81fb      	strh	r3, [r7, #14]
 80050d2:	460b      	mov	r3, r1
 80050d4:	737b      	strb	r3, [r7, #13]
 80050d6:	4613      	mov	r3, r2
 80050d8:	80fb      	strh	r3, [r7, #6]
	return (e_system)HAL_I2C_Mem_Write_DMA(&hi2c1, Dev_Address, reg, 1, p_Data, _Size);
 80050da:	7b7b      	ldrb	r3, [r7, #13]
 80050dc:	b29a      	uxth	r2, r3
 80050de:	89f9      	ldrh	r1, [r7, #14]
 80050e0:	88fb      	ldrh	r3, [r7, #6]
 80050e2:	9301      	str	r3, [sp, #4]
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	9300      	str	r3, [sp, #0]
 80050e8:	2301      	movs	r3, #1
 80050ea:	4804      	ldr	r0, [pc, #16]	@ (80050fc <I2C1_DMA_Mem_Write+0x38>)
 80050ec:	f002 ff0e 	bl	8007f0c <HAL_I2C_Mem_Write_DMA>
 80050f0:	4603      	mov	r3, r0
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3710      	adds	r7, #16
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
 80050fa:	bf00      	nop
 80050fc:	20000b60 	.word	0x20000b60

08005100 <I2C1_Master_Transmit>:

e_system I2C1_Master_Transmit(uint16_t Dev_Address, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout){
 8005100:	b580      	push	{r7, lr}
 8005102:	b086      	sub	sp, #24
 8005104:	af02      	add	r7, sp, #8
 8005106:	60b9      	str	r1, [r7, #8]
 8005108:	607b      	str	r3, [r7, #4]
 800510a:	4603      	mov	r3, r0
 800510c:	81fb      	strh	r3, [r7, #14]
 800510e:	4613      	mov	r3, r2
 8005110:	81bb      	strh	r3, [r7, #12]
	return (e_system)HAL_I2C_Master_Transmit(&hi2c1, Dev_Address, p_Data, _Size, _Timeout);
 8005112:	89ba      	ldrh	r2, [r7, #12]
 8005114:	89f9      	ldrh	r1, [r7, #14]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	9300      	str	r3, [sp, #0]
 800511a:	4613      	mov	r3, r2
 800511c:	68ba      	ldr	r2, [r7, #8]
 800511e:	4804      	ldr	r0, [pc, #16]	@ (8005130 <I2C1_Master_Transmit+0x30>)
 8005120:	f002 faca 	bl	80076b8 <HAL_I2C_Master_Transmit>
 8005124:	4603      	mov	r3, r0
}
 8005126:	4618      	mov	r0, r3
 8005128:	3710      	adds	r7, #16
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}
 800512e:	bf00      	nop
 8005130:	20000b60 	.word	0x20000b60

08005134 <I2C1_Mem_Write>:

e_system I2C1_Mem_Write(uint16_t Dev_Address, uint8_t Mem_Adress, uint8_t Mem_AddSize, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout){
 8005134:	b580      	push	{r7, lr}
 8005136:	b086      	sub	sp, #24
 8005138:	af04      	add	r7, sp, #16
 800513a:	603b      	str	r3, [r7, #0]
 800513c:	4603      	mov	r3, r0
 800513e:	80fb      	strh	r3, [r7, #6]
 8005140:	460b      	mov	r3, r1
 8005142:	717b      	strb	r3, [r7, #5]
 8005144:	4613      	mov	r3, r2
 8005146:	713b      	strb	r3, [r7, #4]
	return HAL_I2C_Mem_Write(&hi2c1, Dev_Address, Mem_Adress, Mem_AddSize, p_Data, _Size, _Timeout);
 8005148:	797b      	ldrb	r3, [r7, #5]
 800514a:	b29a      	uxth	r2, r3
 800514c:	793b      	ldrb	r3, [r7, #4]
 800514e:	b298      	uxth	r0, r3
 8005150:	88f9      	ldrh	r1, [r7, #6]
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	9302      	str	r3, [sp, #8]
 8005156:	8a3b      	ldrh	r3, [r7, #16]
 8005158:	9301      	str	r3, [sp, #4]
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	9300      	str	r3, [sp, #0]
 800515e:	4603      	mov	r3, r0
 8005160:	4803      	ldr	r0, [pc, #12]	@ (8005170 <I2C1_Mem_Write+0x3c>)
 8005162:	f002 fba7 	bl	80078b4 <HAL_I2C_Mem_Write>
 8005166:	4603      	mov	r3, r0
}
 8005168:	4618      	mov	r0, r3
 800516a:	3708      	adds	r7, #8
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}
 8005170:	20000b60 	.word	0x20000b60

08005174 <I2C1_Mem_Read>:

e_system I2C1_Mem_Read(uint16_t Dev_Address, uint8_t Mem_Adress, uint8_t Mem_AddSize, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout){
 8005174:	b580      	push	{r7, lr}
 8005176:	b086      	sub	sp, #24
 8005178:	af04      	add	r7, sp, #16
 800517a:	603b      	str	r3, [r7, #0]
 800517c:	4603      	mov	r3, r0
 800517e:	80fb      	strh	r3, [r7, #6]
 8005180:	460b      	mov	r3, r1
 8005182:	717b      	strb	r3, [r7, #5]
 8005184:	4613      	mov	r3, r2
 8005186:	713b      	strb	r3, [r7, #4]
	return HAL_I2C_Mem_Read(&hi2c1, Dev_Address, Mem_Adress, Mem_AddSize, p_Data, _Size, _Timeout);
 8005188:	797b      	ldrb	r3, [r7, #5]
 800518a:	b29a      	uxth	r2, r3
 800518c:	793b      	ldrb	r3, [r7, #4]
 800518e:	b298      	uxth	r0, r3
 8005190:	88f9      	ldrh	r1, [r7, #6]
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	9302      	str	r3, [sp, #8]
 8005196:	8a3b      	ldrh	r3, [r7, #16]
 8005198:	9301      	str	r3, [sp, #4]
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	9300      	str	r3, [sp, #0]
 800519e:	4603      	mov	r3, r0
 80051a0:	4803      	ldr	r0, [pc, #12]	@ (80051b0 <I2C1_Mem_Read+0x3c>)
 80051a2:	f002 fc81 	bl	8007aa8 <HAL_I2C_Mem_Read>
 80051a6:	4603      	mov	r3, r0
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	3708      	adds	r7, #8
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}
 80051b0:	20000b60 	.word	0x20000b60

080051b4 <setESP01_CHPD>:

void setESP01_CHPD(uint8_t val){
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b082      	sub	sp, #8
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	4603      	mov	r3, r0
 80051bc:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ESP_EN_GPIO_Port, ESP_EN_Pin, val);
 80051be:	79fb      	ldrb	r3, [r7, #7]
 80051c0:	461a      	mov	r2, r3
 80051c2:	2104      	movs	r1, #4
 80051c4:	4803      	ldr	r0, [pc, #12]	@ (80051d4 <setESP01_CHPD+0x20>)
 80051c6:	f002 f8d1 	bl	800736c <HAL_GPIO_WritePin>
}
 80051ca:	bf00      	nop
 80051cc:	3708      	adds	r7, #8
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}
 80051d2:	bf00      	nop
 80051d4:	40020400 	.word	0x40020400

080051d8 <KEY_Read_Value>:

uint8_t KEY_Read_Value(){
 80051d8:	b580      	push	{r7, lr}
 80051da:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin);
 80051dc:	2101      	movs	r1, #1
 80051de:	4803      	ldr	r0, [pc, #12]	@ (80051ec <KEY_Read_Value+0x14>)
 80051e0:	f002 f8ac 	bl	800733c <HAL_GPIO_ReadPin>
 80051e4:	4603      	mov	r3, r0
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	bd80      	pop	{r7, pc}
 80051ea:	bf00      	nop
 80051ec:	40020000 	.word	0x40020000

080051f0 <writeOn_USB>:

void writeOn_USB(s_commData *data){
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b082      	sub	sp, #8
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
	if(USB.data.Tx.write > USB.data.Tx.read){
 80051f8:	4b19      	ldr	r3, [pc, #100]	@ (8005260 <writeOn_USB+0x70>)
 80051fa:	78da      	ldrb	r2, [r3, #3]
 80051fc:	4b18      	ldr	r3, [pc, #96]	@ (8005260 <writeOn_USB+0x70>)
 80051fe:	789b      	ldrb	r3, [r3, #2]
 8005200:	429a      	cmp	r2, r3
 8005202:	d909      	bls.n	8005218 <writeOn_USB+0x28>
		USB.bytesToTx = USB.data.Tx.write - USB.data.Tx.read;
 8005204:	4b16      	ldr	r3, [pc, #88]	@ (8005260 <writeOn_USB+0x70>)
 8005206:	78da      	ldrb	r2, [r3, #3]
 8005208:	4b15      	ldr	r3, [pc, #84]	@ (8005260 <writeOn_USB+0x70>)
 800520a:	789b      	ldrb	r3, [r3, #2]
 800520c:	1ad3      	subs	r3, r2, r3
 800520e:	b2da      	uxtb	r2, r3
 8005210:	4b13      	ldr	r3, [pc, #76]	@ (8005260 <writeOn_USB+0x70>)
 8005212:	f883 2230 	strb.w	r2, [r3, #560]	@ 0x230
 8005216:	e006      	b.n	8005226 <writeOn_USB+0x36>
	}else{
		USB.bytesToTx = RINGBUFFLENGTH - USB.data.Tx.read;
 8005218:	4b11      	ldr	r3, [pc, #68]	@ (8005260 <writeOn_USB+0x70>)
 800521a:	789b      	ldrb	r3, [r3, #2]
 800521c:	425b      	negs	r3, r3
 800521e:	b2da      	uxtb	r2, r3
 8005220:	4b0f      	ldr	r3, [pc, #60]	@ (8005260 <writeOn_USB+0x70>)
 8005222:	f883 2230 	strb.w	r2, [r3, #560]	@ 0x230
	}
	if(CDC_Transmit_FS(&USB.data.Tx.buffer[USB.data.Tx.read], USB.bytesToTx) == USBD_OK){
 8005226:	4b0e      	ldr	r3, [pc, #56]	@ (8005260 <writeOn_USB+0x70>)
 8005228:	789b      	ldrb	r3, [r3, #2]
 800522a:	461a      	mov	r2, r3
 800522c:	4b0c      	ldr	r3, [pc, #48]	@ (8005260 <writeOn_USB+0x70>)
 800522e:	4413      	add	r3, r2
 8005230:	3304      	adds	r3, #4
 8005232:	4a0b      	ldr	r2, [pc, #44]	@ (8005260 <writeOn_USB+0x70>)
 8005234:	f892 2230 	ldrb.w	r2, [r2, #560]	@ 0x230
 8005238:	4611      	mov	r1, r2
 800523a:	4618      	mov	r0, r3
 800523c:	f00c feec 	bl	8012018 <CDC_Transmit_FS>
 8005240:	4603      	mov	r3, r0
 8005242:	2b00      	cmp	r3, #0
 8005244:	d108      	bne.n	8005258 <writeOn_USB+0x68>
		USB.data.Tx.read += USB.bytesToTx;
 8005246:	4b06      	ldr	r3, [pc, #24]	@ (8005260 <writeOn_USB+0x70>)
 8005248:	789a      	ldrb	r2, [r3, #2]
 800524a:	4b05      	ldr	r3, [pc, #20]	@ (8005260 <writeOn_USB+0x70>)
 800524c:	f893 3230 	ldrb.w	r3, [r3, #560]	@ 0x230
 8005250:	4413      	add	r3, r2
 8005252:	b2da      	uxtb	r2, r3
 8005254:	4b02      	ldr	r3, [pc, #8]	@ (8005260 <writeOn_USB+0x70>)
 8005256:	709a      	strb	r2, [r3, #2]
	}
}
 8005258:	bf00      	nop
 800525a:	3708      	adds	r7, #8
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}
 8005260:	200012a0 	.word	0x200012a0

08005264 <dataRxOn_USB>:

void dataRxOn_USB(uint8_t *buff, uint32_t len){
 8005264:	b480      	push	{r7}
 8005266:	b085      	sub	sp, #20
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	6039      	str	r1, [r7, #0]
	if(buff != NULL){
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d01a      	beq.n	80052aa <dataRxOn_USB+0x46>
		for(uint16_t i = 0; i < len; i++){
 8005274:	2300      	movs	r3, #0
 8005276:	81fb      	strh	r3, [r7, #14]
 8005278:	e013      	b.n	80052a2 <dataRxOn_USB+0x3e>
			USB.data.Rx.buffer[USB.data.Rx.write++] = buff[i];
 800527a:	89fb      	ldrh	r3, [r7, #14]
 800527c:	687a      	ldr	r2, [r7, #4]
 800527e:	441a      	add	r2, r3
 8005280:	4b0d      	ldr	r3, [pc, #52]	@ (80052b8 <dataRxOn_USB+0x54>)
 8005282:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 8005286:	1c59      	adds	r1, r3, #1
 8005288:	b2c8      	uxtb	r0, r1
 800528a:	490b      	ldr	r1, [pc, #44]	@ (80052b8 <dataRxOn_USB+0x54>)
 800528c:	f881 0105 	strb.w	r0, [r1, #261]	@ 0x105
 8005290:	4619      	mov	r1, r3
 8005292:	7812      	ldrb	r2, [r2, #0]
 8005294:	4b08      	ldr	r3, [pc, #32]	@ (80052b8 <dataRxOn_USB+0x54>)
 8005296:	440b      	add	r3, r1
 8005298:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
		for(uint16_t i = 0; i < len; i++){
 800529c:	89fb      	ldrh	r3, [r7, #14]
 800529e:	3301      	adds	r3, #1
 80052a0:	81fb      	strh	r3, [r7, #14]
 80052a2:	89fb      	ldrh	r3, [r7, #14]
 80052a4:	683a      	ldr	r2, [r7, #0]
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d8e7      	bhi.n	800527a <dataRxOn_USB+0x16>
		}
	}
}
 80052aa:	bf00      	nop
 80052ac:	3714      	adds	r7, #20
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr
 80052b6:	bf00      	nop
 80052b8:	200012a0 	.word	0x200012a0

080052bc <Motor_Left_SetPins>:

void Motor_Left_SetPins(uint8_t pinA, uint8_t pinB){
 80052bc:	b580      	push	{r7, lr}
 80052be:	b082      	sub	sp, #8
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	4603      	mov	r3, r0
 80052c4:	460a      	mov	r2, r1
 80052c6:	71fb      	strb	r3, [r7, #7]
 80052c8:	4613      	mov	r3, r2
 80052ca:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(M1_IN1_GPIO_Port, M1_IN1_Pin, pinA);
 80052cc:	79fb      	ldrb	r3, [r7, #7]
 80052ce:	461a      	mov	r2, r3
 80052d0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80052d4:	4806      	ldr	r0, [pc, #24]	@ (80052f0 <Motor_Left_SetPins+0x34>)
 80052d6:	f002 f849 	bl	800736c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(M1_IN2_GPIO_Port, M1_IN2_Pin, pinB);
 80052da:	79bb      	ldrb	r3, [r7, #6]
 80052dc:	461a      	mov	r2, r3
 80052de:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80052e2:	4803      	ldr	r0, [pc, #12]	@ (80052f0 <Motor_Left_SetPins+0x34>)
 80052e4:	f002 f842 	bl	800736c <HAL_GPIO_WritePin>
}
 80052e8:	bf00      	nop
 80052ea:	3708      	adds	r7, #8
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}
 80052f0:	40020000 	.word	0x40020000

080052f4 <Motor_Right_SetPins>:

void Motor_Right_SetPins(uint8_t pinA, uint8_t pinB){
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b082      	sub	sp, #8
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	4603      	mov	r3, r0
 80052fc:	460a      	mov	r2, r1
 80052fe:	71fb      	strb	r3, [r7, #7]
 8005300:	4613      	mov	r3, r2
 8005302:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(M2_IN1_GPIO_Port, M2_IN1_Pin, pinA);
 8005304:	79fb      	ldrb	r3, [r7, #7]
 8005306:	461a      	mov	r2, r3
 8005308:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800530c:	4806      	ldr	r0, [pc, #24]	@ (8005328 <Motor_Right_SetPins+0x34>)
 800530e:	f002 f82d 	bl	800736c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(M2_IN2_GPIO_Port, M2_IN2_Pin, pinB);
 8005312:	79bb      	ldrb	r3, [r7, #6]
 8005314:	461a      	mov	r2, r3
 8005316:	2108      	movs	r1, #8
 8005318:	4804      	ldr	r0, [pc, #16]	@ (800532c <Motor_Right_SetPins+0x38>)
 800531a:	f002 f827 	bl	800736c <HAL_GPIO_WritePin>
}
 800531e:	bf00      	nop
 8005320:	3708      	adds	r7, #8
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}
 8005326:	bf00      	nop
 8005328:	40020000 	.word	0x40020000
 800532c:	40020400 	.word	0x40020400

08005330 <Motor_Left_SetPWM>:

void Motor_Left_SetPWM(uint16_t dCycle){
 8005330:	b480      	push	{r7}
 8005332:	b083      	sub	sp, #12
 8005334:	af00      	add	r7, sp, #0
 8005336:	4603      	mov	r3, r0
 8005338:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, dCycle);
 800533a:	4b05      	ldr	r3, [pc, #20]	@ (8005350 <Motor_Left_SetPWM+0x20>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	88fa      	ldrh	r2, [r7, #6]
 8005340:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8005342:	bf00      	nop
 8005344:	370c      	adds	r7, #12
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr
 800534e:	bf00      	nop
 8005350:	20000cbc 	.word	0x20000cbc

08005354 <Motor_Right_SetPWM>:

void Motor_Right_SetPWM(uint16_t dCycle){
 8005354:	b480      	push	{r7}
 8005356:	b083      	sub	sp, #12
 8005358:	af00      	add	r7, sp, #0
 800535a:	4603      	mov	r3, r0
 800535c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, dCycle);
 800535e:	4b05      	ldr	r3, [pc, #20]	@ (8005374 <Motor_Right_SetPWM+0x20>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	88fa      	ldrh	r2, [r7, #6]
 8005364:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8005366:	bf00      	nop
 8005368:	370c      	adds	r7, #12
 800536a:	46bd      	mov	sp, r7
 800536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005370:	4770      	bx	lr
 8005372:	bf00      	nop
 8005374:	20000cbc 	.word	0x20000cbc

08005378 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005378:	b480      	push	{r7}
 800537a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800537c:	b672      	cpsid	i
}
 800537e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005380:	bf00      	nop
 8005382:	e7fd      	b.n	8005380 <Error_Handler+0x8>

08005384 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b082      	sub	sp, #8
 8005388:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800538a:	2300      	movs	r3, #0
 800538c:	607b      	str	r3, [r7, #4]
 800538e:	4b13      	ldr	r3, [pc, #76]	@ (80053dc <HAL_MspInit+0x58>)
 8005390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005392:	4a12      	ldr	r2, [pc, #72]	@ (80053dc <HAL_MspInit+0x58>)
 8005394:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005398:	6453      	str	r3, [r2, #68]	@ 0x44
 800539a:	4b10      	ldr	r3, [pc, #64]	@ (80053dc <HAL_MspInit+0x58>)
 800539c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800539e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80053a2:	607b      	str	r3, [r7, #4]
 80053a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80053a6:	2300      	movs	r3, #0
 80053a8:	603b      	str	r3, [r7, #0]
 80053aa:	4b0c      	ldr	r3, [pc, #48]	@ (80053dc <HAL_MspInit+0x58>)
 80053ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053ae:	4a0b      	ldr	r2, [pc, #44]	@ (80053dc <HAL_MspInit+0x58>)
 80053b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80053b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80053b6:	4b09      	ldr	r3, [pc, #36]	@ (80053dc <HAL_MspInit+0x58>)
 80053b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053be:	603b      	str	r3, [r7, #0]
 80053c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 0, 0);
 80053c2:	2200      	movs	r2, #0
 80053c4:	2100      	movs	r1, #0
 80053c6:	2051      	movs	r0, #81	@ 0x51
 80053c8:	f001 f9e1 	bl	800678e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 80053cc:	2051      	movs	r0, #81	@ 0x51
 80053ce:	f001 f9fa 	bl	80067c6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80053d2:	bf00      	nop
 80053d4:	3708      	adds	r7, #8
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}
 80053da:	bf00      	nop
 80053dc:	40023800 	.word	0x40023800

080053e0 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b08a      	sub	sp, #40	@ 0x28
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053e8:	f107 0314 	add.w	r3, r7, #20
 80053ec:	2200      	movs	r2, #0
 80053ee:	601a      	str	r2, [r3, #0]
 80053f0:	605a      	str	r2, [r3, #4]
 80053f2:	609a      	str	r2, [r3, #8]
 80053f4:	60da      	str	r2, [r3, #12]
 80053f6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a40      	ldr	r2, [pc, #256]	@ (8005500 <HAL_ADC_MspInit+0x120>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d179      	bne.n	80054f6 <HAL_ADC_MspInit+0x116>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005402:	2300      	movs	r3, #0
 8005404:	613b      	str	r3, [r7, #16]
 8005406:	4b3f      	ldr	r3, [pc, #252]	@ (8005504 <HAL_ADC_MspInit+0x124>)
 8005408:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800540a:	4a3e      	ldr	r2, [pc, #248]	@ (8005504 <HAL_ADC_MspInit+0x124>)
 800540c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005410:	6453      	str	r3, [r2, #68]	@ 0x44
 8005412:	4b3c      	ldr	r3, [pc, #240]	@ (8005504 <HAL_ADC_MspInit+0x124>)
 8005414:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005416:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800541a:	613b      	str	r3, [r7, #16]
 800541c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800541e:	2300      	movs	r3, #0
 8005420:	60fb      	str	r3, [r7, #12]
 8005422:	4b38      	ldr	r3, [pc, #224]	@ (8005504 <HAL_ADC_MspInit+0x124>)
 8005424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005426:	4a37      	ldr	r2, [pc, #220]	@ (8005504 <HAL_ADC_MspInit+0x124>)
 8005428:	f043 0301 	orr.w	r3, r3, #1
 800542c:	6313      	str	r3, [r2, #48]	@ 0x30
 800542e:	4b35      	ldr	r3, [pc, #212]	@ (8005504 <HAL_ADC_MspInit+0x124>)
 8005430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005432:	f003 0301 	and.w	r3, r3, #1
 8005436:	60fb      	str	r3, [r7, #12]
 8005438:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800543a:	2300      	movs	r3, #0
 800543c:	60bb      	str	r3, [r7, #8]
 800543e:	4b31      	ldr	r3, [pc, #196]	@ (8005504 <HAL_ADC_MspInit+0x124>)
 8005440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005442:	4a30      	ldr	r2, [pc, #192]	@ (8005504 <HAL_ADC_MspInit+0x124>)
 8005444:	f043 0302 	orr.w	r3, r3, #2
 8005448:	6313      	str	r3, [r2, #48]	@ 0x30
 800544a:	4b2e      	ldr	r3, [pc, #184]	@ (8005504 <HAL_ADC_MspInit+0x124>)
 800544c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800544e:	f003 0302 	and.w	r3, r3, #2
 8005452:	60bb      	str	r3, [r7, #8]
 8005454:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = LF1_Pin|LF2_Pin|LF3_Pin|LF4_Pin
 8005456:	23fe      	movs	r3, #254	@ 0xfe
 8005458:	617b      	str	r3, [r7, #20]
                          |WD1_Pin|WD2_Pin|WD3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800545a:	2303      	movs	r3, #3
 800545c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800545e:	2300      	movs	r3, #0
 8005460:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005462:	f107 0314 	add.w	r3, r7, #20
 8005466:	4619      	mov	r1, r3
 8005468:	4827      	ldr	r0, [pc, #156]	@ (8005508 <HAL_ADC_MspInit+0x128>)
 800546a:	f001 fde3 	bl	8007034 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = WD4_Pin|BAT_LVL_Pin;
 800546e:	2303      	movs	r3, #3
 8005470:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005472:	2303      	movs	r3, #3
 8005474:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005476:	2300      	movs	r3, #0
 8005478:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800547a:	f107 0314 	add.w	r3, r7, #20
 800547e:	4619      	mov	r1, r3
 8005480:	4822      	ldr	r0, [pc, #136]	@ (800550c <HAL_ADC_MspInit+0x12c>)
 8005482:	f001 fdd7 	bl	8007034 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8005486:	4b22      	ldr	r3, [pc, #136]	@ (8005510 <HAL_ADC_MspInit+0x130>)
 8005488:	4a22      	ldr	r2, [pc, #136]	@ (8005514 <HAL_ADC_MspInit+0x134>)
 800548a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800548c:	4b20      	ldr	r3, [pc, #128]	@ (8005510 <HAL_ADC_MspInit+0x130>)
 800548e:	2200      	movs	r2, #0
 8005490:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005492:	4b1f      	ldr	r3, [pc, #124]	@ (8005510 <HAL_ADC_MspInit+0x130>)
 8005494:	2200      	movs	r2, #0
 8005496:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005498:	4b1d      	ldr	r3, [pc, #116]	@ (8005510 <HAL_ADC_MspInit+0x130>)
 800549a:	2200      	movs	r2, #0
 800549c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800549e:	4b1c      	ldr	r3, [pc, #112]	@ (8005510 <HAL_ADC_MspInit+0x130>)
 80054a0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80054a4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80054a6:	4b1a      	ldr	r3, [pc, #104]	@ (8005510 <HAL_ADC_MspInit+0x130>)
 80054a8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80054ac:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80054ae:	4b18      	ldr	r3, [pc, #96]	@ (8005510 <HAL_ADC_MspInit+0x130>)
 80054b0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80054b4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80054b6:	4b16      	ldr	r3, [pc, #88]	@ (8005510 <HAL_ADC_MspInit+0x130>)
 80054b8:	2200      	movs	r2, #0
 80054ba:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80054bc:	4b14      	ldr	r3, [pc, #80]	@ (8005510 <HAL_ADC_MspInit+0x130>)
 80054be:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80054c2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80054c4:	4b12      	ldr	r3, [pc, #72]	@ (8005510 <HAL_ADC_MspInit+0x130>)
 80054c6:	2200      	movs	r2, #0
 80054c8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80054ca:	4811      	ldr	r0, [pc, #68]	@ (8005510 <HAL_ADC_MspInit+0x130>)
 80054cc:	f001 f996 	bl	80067fc <HAL_DMA_Init>
 80054d0:	4603      	mov	r3, r0
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d001      	beq.n	80054da <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 80054d6:	f7ff ff4f 	bl	8005378 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	4a0c      	ldr	r2, [pc, #48]	@ (8005510 <HAL_ADC_MspInit+0x130>)
 80054de:	639a      	str	r2, [r3, #56]	@ 0x38
 80054e0:	4a0b      	ldr	r2, [pc, #44]	@ (8005510 <HAL_ADC_MspInit+0x130>)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80054e6:	2200      	movs	r2, #0
 80054e8:	2100      	movs	r1, #0
 80054ea:	2012      	movs	r0, #18
 80054ec:	f001 f94f 	bl	800678e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80054f0:	2012      	movs	r0, #18
 80054f2:	f001 f968 	bl	80067c6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80054f6:	bf00      	nop
 80054f8:	3728      	adds	r7, #40	@ 0x28
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}
 80054fe:	bf00      	nop
 8005500:	40012000 	.word	0x40012000
 8005504:	40023800 	.word	0x40023800
 8005508:	40020000 	.word	0x40020000
 800550c:	40020400 	.word	0x40020400
 8005510:	20000b00 	.word	0x20000b00
 8005514:	40026410 	.word	0x40026410

08005518 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b08a      	sub	sp, #40	@ 0x28
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005520:	f107 0314 	add.w	r3, r7, #20
 8005524:	2200      	movs	r2, #0
 8005526:	601a      	str	r2, [r3, #0]
 8005528:	605a      	str	r2, [r3, #4]
 800552a:	609a      	str	r2, [r3, #8]
 800552c:	60da      	str	r2, [r3, #12]
 800552e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a50      	ldr	r2, [pc, #320]	@ (8005678 <HAL_I2C_MspInit+0x160>)
 8005536:	4293      	cmp	r3, r2
 8005538:	f040 8099 	bne.w	800566e <HAL_I2C_MspInit+0x156>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800553c:	2300      	movs	r3, #0
 800553e:	613b      	str	r3, [r7, #16]
 8005540:	4b4e      	ldr	r3, [pc, #312]	@ (800567c <HAL_I2C_MspInit+0x164>)
 8005542:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005544:	4a4d      	ldr	r2, [pc, #308]	@ (800567c <HAL_I2C_MspInit+0x164>)
 8005546:	f043 0302 	orr.w	r3, r3, #2
 800554a:	6313      	str	r3, [r2, #48]	@ 0x30
 800554c:	4b4b      	ldr	r3, [pc, #300]	@ (800567c <HAL_I2C_MspInit+0x164>)
 800554e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005550:	f003 0302 	and.w	r3, r3, #2
 8005554:	613b      	str	r3, [r7, #16]
 8005556:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 8005558:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800555c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800555e:	2312      	movs	r3, #18
 8005560:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005562:	2300      	movs	r3, #0
 8005564:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005566:	2303      	movs	r3, #3
 8005568:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800556a:	2304      	movs	r3, #4
 800556c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800556e:	f107 0314 	add.w	r3, r7, #20
 8005572:	4619      	mov	r1, r3
 8005574:	4842      	ldr	r0, [pc, #264]	@ (8005680 <HAL_I2C_MspInit+0x168>)
 8005576:	f001 fd5d 	bl	8007034 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800557a:	2300      	movs	r3, #0
 800557c:	60fb      	str	r3, [r7, #12]
 800557e:	4b3f      	ldr	r3, [pc, #252]	@ (800567c <HAL_I2C_MspInit+0x164>)
 8005580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005582:	4a3e      	ldr	r2, [pc, #248]	@ (800567c <HAL_I2C_MspInit+0x164>)
 8005584:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005588:	6413      	str	r3, [r2, #64]	@ 0x40
 800558a:	4b3c      	ldr	r3, [pc, #240]	@ (800567c <HAL_I2C_MspInit+0x164>)
 800558c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800558e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005592:	60fb      	str	r3, [r7, #12]
 8005594:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 8005596:	4b3b      	ldr	r3, [pc, #236]	@ (8005684 <HAL_I2C_MspInit+0x16c>)
 8005598:	4a3b      	ldr	r2, [pc, #236]	@ (8005688 <HAL_I2C_MspInit+0x170>)
 800559a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 800559c:	4b39      	ldr	r3, [pc, #228]	@ (8005684 <HAL_I2C_MspInit+0x16c>)
 800559e:	2200      	movs	r2, #0
 80055a0:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80055a2:	4b38      	ldr	r3, [pc, #224]	@ (8005684 <HAL_I2C_MspInit+0x16c>)
 80055a4:	2240      	movs	r2, #64	@ 0x40
 80055a6:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80055a8:	4b36      	ldr	r3, [pc, #216]	@ (8005684 <HAL_I2C_MspInit+0x16c>)
 80055aa:	2200      	movs	r2, #0
 80055ac:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80055ae:	4b35      	ldr	r3, [pc, #212]	@ (8005684 <HAL_I2C_MspInit+0x16c>)
 80055b0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80055b4:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80055b6:	4b33      	ldr	r3, [pc, #204]	@ (8005684 <HAL_I2C_MspInit+0x16c>)
 80055b8:	2200      	movs	r2, #0
 80055ba:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80055bc:	4b31      	ldr	r3, [pc, #196]	@ (8005684 <HAL_I2C_MspInit+0x16c>)
 80055be:	2200      	movs	r2, #0
 80055c0:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80055c2:	4b30      	ldr	r3, [pc, #192]	@ (8005684 <HAL_I2C_MspInit+0x16c>)
 80055c4:	2200      	movs	r2, #0
 80055c6:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80055c8:	4b2e      	ldr	r3, [pc, #184]	@ (8005684 <HAL_I2C_MspInit+0x16c>)
 80055ca:	2200      	movs	r2, #0
 80055cc:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80055ce:	4b2d      	ldr	r3, [pc, #180]	@ (8005684 <HAL_I2C_MspInit+0x16c>)
 80055d0:	2200      	movs	r2, #0
 80055d2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80055d4:	482b      	ldr	r0, [pc, #172]	@ (8005684 <HAL_I2C_MspInit+0x16c>)
 80055d6:	f001 f911 	bl	80067fc <HAL_DMA_Init>
 80055da:	4603      	mov	r3, r0
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d001      	beq.n	80055e4 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 80055e0:	f7ff feca 	bl	8005378 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	4a27      	ldr	r2, [pc, #156]	@ (8005684 <HAL_I2C_MspInit+0x16c>)
 80055e8:	635a      	str	r2, [r3, #52]	@ 0x34
 80055ea:	4a26      	ldr	r2, [pc, #152]	@ (8005684 <HAL_I2C_MspInit+0x16c>)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80055f0:	4b26      	ldr	r3, [pc, #152]	@ (800568c <HAL_I2C_MspInit+0x174>)
 80055f2:	4a27      	ldr	r2, [pc, #156]	@ (8005690 <HAL_I2C_MspInit+0x178>)
 80055f4:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80055f6:	4b25      	ldr	r3, [pc, #148]	@ (800568c <HAL_I2C_MspInit+0x174>)
 80055f8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80055fc:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80055fe:	4b23      	ldr	r3, [pc, #140]	@ (800568c <HAL_I2C_MspInit+0x174>)
 8005600:	2200      	movs	r2, #0
 8005602:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005604:	4b21      	ldr	r3, [pc, #132]	@ (800568c <HAL_I2C_MspInit+0x174>)
 8005606:	2200      	movs	r2, #0
 8005608:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800560a:	4b20      	ldr	r3, [pc, #128]	@ (800568c <HAL_I2C_MspInit+0x174>)
 800560c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005610:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005612:	4b1e      	ldr	r3, [pc, #120]	@ (800568c <HAL_I2C_MspInit+0x174>)
 8005614:	2200      	movs	r2, #0
 8005616:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005618:	4b1c      	ldr	r3, [pc, #112]	@ (800568c <HAL_I2C_MspInit+0x174>)
 800561a:	2200      	movs	r2, #0
 800561c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800561e:	4b1b      	ldr	r3, [pc, #108]	@ (800568c <HAL_I2C_MspInit+0x174>)
 8005620:	2200      	movs	r2, #0
 8005622:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8005624:	4b19      	ldr	r3, [pc, #100]	@ (800568c <HAL_I2C_MspInit+0x174>)
 8005626:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800562a:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800562c:	4b17      	ldr	r3, [pc, #92]	@ (800568c <HAL_I2C_MspInit+0x174>)
 800562e:	2200      	movs	r2, #0
 8005630:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8005632:	4816      	ldr	r0, [pc, #88]	@ (800568c <HAL_I2C_MspInit+0x174>)
 8005634:	f001 f8e2 	bl	80067fc <HAL_DMA_Init>
 8005638:	4603      	mov	r3, r0
 800563a:	2b00      	cmp	r3, #0
 800563c:	d001      	beq.n	8005642 <HAL_I2C_MspInit+0x12a>
    {
      Error_Handler();
 800563e:	f7ff fe9b 	bl	8005378 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	4a11      	ldr	r2, [pc, #68]	@ (800568c <HAL_I2C_MspInit+0x174>)
 8005646:	639a      	str	r2, [r3, #56]	@ 0x38
 8005648:	4a10      	ldr	r2, [pc, #64]	@ (800568c <HAL_I2C_MspInit+0x174>)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800564e:	2200      	movs	r2, #0
 8005650:	2100      	movs	r1, #0
 8005652:	201f      	movs	r0, #31
 8005654:	f001 f89b 	bl	800678e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8005658:	201f      	movs	r0, #31
 800565a:	f001 f8b4 	bl	80067c6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800565e:	2200      	movs	r2, #0
 8005660:	2100      	movs	r1, #0
 8005662:	2020      	movs	r0, #32
 8005664:	f001 f893 	bl	800678e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8005668:	2020      	movs	r0, #32
 800566a:	f001 f8ac 	bl	80067c6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800566e:	bf00      	nop
 8005670:	3728      	adds	r7, #40	@ 0x28
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}
 8005676:	bf00      	nop
 8005678:	40005400 	.word	0x40005400
 800567c:	40023800 	.word	0x40023800
 8005680:	40020400 	.word	0x40020400
 8005684:	20000bb4 	.word	0x20000bb4
 8005688:	40026028 	.word	0x40026028
 800568c:	20000c14 	.word	0x20000c14
 8005690:	40026010 	.word	0x40026010

08005694 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b084      	sub	sp, #16
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a1c      	ldr	r2, [pc, #112]	@ (8005714 <HAL_TIM_Base_MspInit+0x80>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d116      	bne.n	80056d4 <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80056a6:	2300      	movs	r3, #0
 80056a8:	60fb      	str	r3, [r7, #12]
 80056aa:	4b1b      	ldr	r3, [pc, #108]	@ (8005718 <HAL_TIM_Base_MspInit+0x84>)
 80056ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056ae:	4a1a      	ldr	r2, [pc, #104]	@ (8005718 <HAL_TIM_Base_MspInit+0x84>)
 80056b0:	f043 0301 	orr.w	r3, r3, #1
 80056b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80056b6:	4b18      	ldr	r3, [pc, #96]	@ (8005718 <HAL_TIM_Base_MspInit+0x84>)
 80056b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056ba:	f003 0301 	and.w	r3, r3, #1
 80056be:	60fb      	str	r3, [r7, #12]
 80056c0:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80056c2:	2200      	movs	r2, #0
 80056c4:	2100      	movs	r1, #0
 80056c6:	2019      	movs	r0, #25
 80056c8:	f001 f861 	bl	800678e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80056cc:	2019      	movs	r0, #25
 80056ce:	f001 f87a 	bl	80067c6 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 80056d2:	e01a      	b.n	800570a <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a10      	ldr	r2, [pc, #64]	@ (800571c <HAL_TIM_Base_MspInit+0x88>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d115      	bne.n	800570a <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80056de:	2300      	movs	r3, #0
 80056e0:	60bb      	str	r3, [r7, #8]
 80056e2:	4b0d      	ldr	r3, [pc, #52]	@ (8005718 <HAL_TIM_Base_MspInit+0x84>)
 80056e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056e6:	4a0c      	ldr	r2, [pc, #48]	@ (8005718 <HAL_TIM_Base_MspInit+0x84>)
 80056e8:	f043 0302 	orr.w	r3, r3, #2
 80056ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80056ee:	4b0a      	ldr	r3, [pc, #40]	@ (8005718 <HAL_TIM_Base_MspInit+0x84>)
 80056f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056f2:	f003 0302 	and.w	r3, r3, #2
 80056f6:	60bb      	str	r3, [r7, #8]
 80056f8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80056fa:	2200      	movs	r2, #0
 80056fc:	2100      	movs	r1, #0
 80056fe:	201d      	movs	r0, #29
 8005700:	f001 f845 	bl	800678e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005704:	201d      	movs	r0, #29
 8005706:	f001 f85e 	bl	80067c6 <HAL_NVIC_EnableIRQ>
}
 800570a:	bf00      	nop
 800570c:	3710      	adds	r7, #16
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}
 8005712:	bf00      	nop
 8005714:	40010000 	.word	0x40010000
 8005718:	40023800 	.word	0x40023800
 800571c:	40000400 	.word	0x40000400

08005720 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b088      	sub	sp, #32
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005728:	f107 030c 	add.w	r3, r7, #12
 800572c:	2200      	movs	r2, #0
 800572e:	601a      	str	r2, [r3, #0]
 8005730:	605a      	str	r2, [r3, #4]
 8005732:	609a      	str	r2, [r3, #8]
 8005734:	60da      	str	r2, [r3, #12]
 8005736:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a12      	ldr	r2, [pc, #72]	@ (8005788 <HAL_TIM_MspPostInit+0x68>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d11d      	bne.n	800577e <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005742:	2300      	movs	r3, #0
 8005744:	60bb      	str	r3, [r7, #8]
 8005746:	4b11      	ldr	r3, [pc, #68]	@ (800578c <HAL_TIM_MspPostInit+0x6c>)
 8005748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800574a:	4a10      	ldr	r2, [pc, #64]	@ (800578c <HAL_TIM_MspPostInit+0x6c>)
 800574c:	f043 0302 	orr.w	r3, r3, #2
 8005750:	6313      	str	r3, [r2, #48]	@ 0x30
 8005752:	4b0e      	ldr	r3, [pc, #56]	@ (800578c <HAL_TIM_MspPostInit+0x6c>)
 8005754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005756:	f003 0302 	and.w	r3, r3, #2
 800575a:	60bb      	str	r3, [r7, #8]
 800575c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = M1_PWM_Pin|M2_PWM_Pin;
 800575e:	2330      	movs	r3, #48	@ 0x30
 8005760:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005762:	2302      	movs	r3, #2
 8005764:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005766:	2300      	movs	r3, #0
 8005768:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800576a:	2300      	movs	r3, #0
 800576c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800576e:	2302      	movs	r3, #2
 8005770:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005772:	f107 030c 	add.w	r3, r7, #12
 8005776:	4619      	mov	r1, r3
 8005778:	4805      	ldr	r0, [pc, #20]	@ (8005790 <HAL_TIM_MspPostInit+0x70>)
 800577a:	f001 fc5b 	bl	8007034 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800577e:	bf00      	nop
 8005780:	3720      	adds	r7, #32
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}
 8005786:	bf00      	nop
 8005788:	40000400 	.word	0x40000400
 800578c:	40023800 	.word	0x40023800
 8005790:	40020400 	.word	0x40020400

08005794 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b08a      	sub	sp, #40	@ 0x28
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800579c:	f107 0314 	add.w	r3, r7, #20
 80057a0:	2200      	movs	r2, #0
 80057a2:	601a      	str	r2, [r3, #0]
 80057a4:	605a      	str	r2, [r3, #4]
 80057a6:	609a      	str	r2, [r3, #8]
 80057a8:	60da      	str	r2, [r3, #12]
 80057aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a1d      	ldr	r2, [pc, #116]	@ (8005828 <HAL_UART_MspInit+0x94>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d133      	bne.n	800581e <HAL_UART_MspInit+0x8a>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80057b6:	2300      	movs	r3, #0
 80057b8:	613b      	str	r3, [r7, #16]
 80057ba:	4b1c      	ldr	r3, [pc, #112]	@ (800582c <HAL_UART_MspInit+0x98>)
 80057bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057be:	4a1b      	ldr	r2, [pc, #108]	@ (800582c <HAL_UART_MspInit+0x98>)
 80057c0:	f043 0310 	orr.w	r3, r3, #16
 80057c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80057c6:	4b19      	ldr	r3, [pc, #100]	@ (800582c <HAL_UART_MspInit+0x98>)
 80057c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057ca:	f003 0310 	and.w	r3, r3, #16
 80057ce:	613b      	str	r3, [r7, #16]
 80057d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80057d2:	2300      	movs	r3, #0
 80057d4:	60fb      	str	r3, [r7, #12]
 80057d6:	4b15      	ldr	r3, [pc, #84]	@ (800582c <HAL_UART_MspInit+0x98>)
 80057d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057da:	4a14      	ldr	r2, [pc, #80]	@ (800582c <HAL_UART_MspInit+0x98>)
 80057dc:	f043 0302 	orr.w	r3, r3, #2
 80057e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80057e2:	4b12      	ldr	r3, [pc, #72]	@ (800582c <HAL_UART_MspInit+0x98>)
 80057e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057e6:	f003 0302 	and.w	r3, r3, #2
 80057ea:	60fb      	str	r3, [r7, #12]
 80057ec:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ESP_RX_Pin|ESP_TX_Pin;
 80057ee:	23c0      	movs	r3, #192	@ 0xc0
 80057f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057f2:	2302      	movs	r3, #2
 80057f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057f6:	2300      	movs	r3, #0
 80057f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80057fa:	2303      	movs	r3, #3
 80057fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80057fe:	2307      	movs	r3, #7
 8005800:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005802:	f107 0314 	add.w	r3, r7, #20
 8005806:	4619      	mov	r1, r3
 8005808:	4809      	ldr	r0, [pc, #36]	@ (8005830 <HAL_UART_MspInit+0x9c>)
 800580a:	f001 fc13 	bl	8007034 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800580e:	2200      	movs	r2, #0
 8005810:	2100      	movs	r1, #0
 8005812:	2025      	movs	r0, #37	@ 0x25
 8005814:	f000 ffbb 	bl	800678e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005818:	2025      	movs	r0, #37	@ 0x25
 800581a:	f000 ffd4 	bl	80067c6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 800581e:	bf00      	nop
 8005820:	3728      	adds	r7, #40	@ 0x28
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}
 8005826:	bf00      	nop
 8005828:	40011000 	.word	0x40011000
 800582c:	40023800 	.word	0x40023800
 8005830:	40020400 	.word	0x40020400

08005834 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8005838:	f007 f874 	bl	800c924 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800583c:	bf00      	nop
 800583e:	e7fd      	b.n	800583c <NMI_Handler+0x8>

08005840 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005840:	b480      	push	{r7}
 8005842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005844:	bf00      	nop
 8005846:	e7fd      	b.n	8005844 <HardFault_Handler+0x4>

08005848 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005848:	b480      	push	{r7}
 800584a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800584c:	bf00      	nop
 800584e:	e7fd      	b.n	800584c <MemManage_Handler+0x4>

08005850 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005850:	b480      	push	{r7}
 8005852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005854:	bf00      	nop
 8005856:	e7fd      	b.n	8005854 <BusFault_Handler+0x4>

08005858 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005858:	b480      	push	{r7}
 800585a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800585c:	bf00      	nop
 800585e:	e7fd      	b.n	800585c <UsageFault_Handler+0x4>

08005860 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005860:	b480      	push	{r7}
 8005862:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005864:	bf00      	nop
 8005866:	46bd      	mov	sp, r7
 8005868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586c:	4770      	bx	lr

0800586e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800586e:	b480      	push	{r7}
 8005870:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005872:	bf00      	nop
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr

0800587c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800587c:	b480      	push	{r7}
 800587e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005880:	bf00      	nop
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr

0800588a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800588a:	b580      	push	{r7, lr}
 800588c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800588e:	f000 f943 	bl	8005b18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005892:	bf00      	nop
 8005894:	bd80      	pop	{r7, pc}
	...

08005898 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800589c:	4802      	ldr	r0, [pc, #8]	@ (80058a8 <DMA1_Stream0_IRQHandler+0x10>)
 800589e:	f001 f945 	bl	8006b2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80058a2:	bf00      	nop
 80058a4:	bd80      	pop	{r7, pc}
 80058a6:	bf00      	nop
 80058a8:	20000c14 	.word	0x20000c14

080058ac <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80058b0:	4802      	ldr	r0, [pc, #8]	@ (80058bc <DMA1_Stream1_IRQHandler+0x10>)
 80058b2:	f001 f93b 	bl	8006b2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80058b6:	bf00      	nop
 80058b8:	bd80      	pop	{r7, pc}
 80058ba:	bf00      	nop
 80058bc:	20000bb4 	.word	0x20000bb4

080058c0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80058c4:	4802      	ldr	r0, [pc, #8]	@ (80058d0 <ADC_IRQHandler+0x10>)
 80058c6:	f000 f9ae 	bl	8005c26 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80058ca:	bf00      	nop
 80058cc:	bd80      	pop	{r7, pc}
 80058ce:	bf00      	nop
 80058d0:	20000ab8 	.word	0x20000ab8

080058d4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(M2_ENC_A_Pin);
 80058d8:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80058dc:	f001 fd7a 	bl	80073d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80058e0:	bf00      	nop
 80058e2:	bd80      	pop	{r7, pc}

080058e4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80058e8:	4802      	ldr	r0, [pc, #8]	@ (80058f4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80058ea:	f007 f9f1 	bl	800ccd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80058ee:	bf00      	nop
 80058f0:	bd80      	pop	{r7, pc}
 80058f2:	bf00      	nop
 80058f4:	20000c74 	.word	0x20000c74

080058f8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80058fc:	4802      	ldr	r0, [pc, #8]	@ (8005908 <TIM3_IRQHandler+0x10>)
 80058fe:	f007 f9e7 	bl	800ccd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8005902:	bf00      	nop
 8005904:	bd80      	pop	{r7, pc}
 8005906:	bf00      	nop
 8005908:	20000cbc 	.word	0x20000cbc

0800590c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8005910:	4802      	ldr	r0, [pc, #8]	@ (800591c <I2C1_EV_IRQHandler+0x10>)
 8005912:	f002 ff17 	bl	8008744 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8005916:	bf00      	nop
 8005918:	bd80      	pop	{r7, pc}
 800591a:	bf00      	nop
 800591c:	20000b60 	.word	0x20000b60

08005920 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8005924:	4802      	ldr	r0, [pc, #8]	@ (8005930 <I2C1_ER_IRQHandler+0x10>)
 8005926:	f003 f87e 	bl	8008a26 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800592a:	bf00      	nop
 800592c:	bd80      	pop	{r7, pc}
 800592e:	bf00      	nop
 8005930:	20000b60 	.word	0x20000b60

08005934 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005938:	4802      	ldr	r0, [pc, #8]	@ (8005944 <USART1_IRQHandler+0x10>)
 800593a:	f008 f83b 	bl	800d9b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800593e:	bf00      	nop
 8005940:	bd80      	pop	{r7, pc}
 8005942:	bf00      	nop
 8005944:	20000d04 	.word	0x20000d04

08005948 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(M1_ENC_A_Pin);
 800594c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8005950:	f001 fd40 	bl	80073d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005954:	bf00      	nop
 8005956:	bd80      	pop	{r7, pc}

08005958 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800595c:	4802      	ldr	r0, [pc, #8]	@ (8005968 <DMA2_Stream0_IRQHandler+0x10>)
 800595e:	f001 f8e5 	bl	8006b2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8005962:	bf00      	nop
 8005964:	bd80      	pop	{r7, pc}
 8005966:	bf00      	nop
 8005968:	20000b00 	.word	0x20000b00

0800596c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8005970:	4802      	ldr	r0, [pc, #8]	@ (800597c <OTG_FS_IRQHandler+0x10>)
 8005972:	f005 fa64 	bl	800ae3e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8005976:	bf00      	nop
 8005978:	bd80      	pop	{r7, pc}
 800597a:	bf00      	nop
 800597c:	20002010 	.word	0x20002010

08005980 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 8005980:	b480      	push	{r7}
 8005982:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 8005984:	bf00      	nop
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr
	...

08005990 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b086      	sub	sp, #24
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005998:	4a14      	ldr	r2, [pc, #80]	@ (80059ec <_sbrk+0x5c>)
 800599a:	4b15      	ldr	r3, [pc, #84]	@ (80059f0 <_sbrk+0x60>)
 800599c:	1ad3      	subs	r3, r2, r3
 800599e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80059a4:	4b13      	ldr	r3, [pc, #76]	@ (80059f4 <_sbrk+0x64>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d102      	bne.n	80059b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80059ac:	4b11      	ldr	r3, [pc, #68]	@ (80059f4 <_sbrk+0x64>)
 80059ae:	4a12      	ldr	r2, [pc, #72]	@ (80059f8 <_sbrk+0x68>)
 80059b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80059b2:	4b10      	ldr	r3, [pc, #64]	@ (80059f4 <_sbrk+0x64>)
 80059b4:	681a      	ldr	r2, [r3, #0]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	4413      	add	r3, r2
 80059ba:	693a      	ldr	r2, [r7, #16]
 80059bc:	429a      	cmp	r2, r3
 80059be:	d207      	bcs.n	80059d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80059c0:	f00d f826 	bl	8012a10 <__errno>
 80059c4:	4603      	mov	r3, r0
 80059c6:	220c      	movs	r2, #12
 80059c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80059ca:	f04f 33ff 	mov.w	r3, #4294967295
 80059ce:	e009      	b.n	80059e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80059d0:	4b08      	ldr	r3, [pc, #32]	@ (80059f4 <_sbrk+0x64>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80059d6:	4b07      	ldr	r3, [pc, #28]	@ (80059f4 <_sbrk+0x64>)
 80059d8:	681a      	ldr	r2, [r3, #0]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	4413      	add	r3, r2
 80059de:	4a05      	ldr	r2, [pc, #20]	@ (80059f4 <_sbrk+0x64>)
 80059e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80059e2:	68fb      	ldr	r3, [r7, #12]
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	3718      	adds	r7, #24
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}
 80059ec:	20020000 	.word	0x20020000
 80059f0:	00000400 	.word	0x00000400
 80059f4:	20001724 	.word	0x20001724
 80059f8:	20002860 	.word	0x20002860

080059fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80059fc:	b480      	push	{r7}
 80059fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005a00:	4b06      	ldr	r3, [pc, #24]	@ (8005a1c <SystemInit+0x20>)
 8005a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a06:	4a05      	ldr	r2, [pc, #20]	@ (8005a1c <SystemInit+0x20>)
 8005a08:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005a0c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005a10:	bf00      	nop
 8005a12:	46bd      	mov	sp, r7
 8005a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a18:	4770      	bx	lr
 8005a1a:	bf00      	nop
 8005a1c:	e000ed00 	.word	0xe000ed00

08005a20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8005a20:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005a58 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005a24:	f7ff ffea 	bl	80059fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005a28:	480c      	ldr	r0, [pc, #48]	@ (8005a5c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005a2a:	490d      	ldr	r1, [pc, #52]	@ (8005a60 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005a2c:	4a0d      	ldr	r2, [pc, #52]	@ (8005a64 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005a2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005a30:	e002      	b.n	8005a38 <LoopCopyDataInit>

08005a32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005a32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005a34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005a36:	3304      	adds	r3, #4

08005a38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005a38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005a3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005a3c:	d3f9      	bcc.n	8005a32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005a3e:	4a0a      	ldr	r2, [pc, #40]	@ (8005a68 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005a40:	4c0a      	ldr	r4, [pc, #40]	@ (8005a6c <LoopFillZerobss+0x22>)
  movs r3, #0
 8005a42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005a44:	e001      	b.n	8005a4a <LoopFillZerobss>

08005a46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005a46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005a48:	3204      	adds	r2, #4

08005a4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005a4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005a4c:	d3fb      	bcc.n	8005a46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005a4e:	f00c ffe5 	bl	8012a1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005a52:	f7fe fcd5 	bl	8004400 <main>
  bx  lr    
 8005a56:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8005a58:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005a5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005a60:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 8005a64:	08014bb8 	.word	0x08014bb8
  ldr r2, =_sbss
 8005a68:	20000164 	.word	0x20000164
  ldr r4, =_ebss
 8005a6c:	2000285c 	.word	0x2000285c

08005a70 <DMA1_Stream2_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005a70:	e7fe      	b.n	8005a70 <DMA1_Stream2_IRQHandler>
	...

08005a74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005a78:	4b0e      	ldr	r3, [pc, #56]	@ (8005ab4 <HAL_Init+0x40>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a0d      	ldr	r2, [pc, #52]	@ (8005ab4 <HAL_Init+0x40>)
 8005a7e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005a82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005a84:	4b0b      	ldr	r3, [pc, #44]	@ (8005ab4 <HAL_Init+0x40>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a0a      	ldr	r2, [pc, #40]	@ (8005ab4 <HAL_Init+0x40>)
 8005a8a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005a8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005a90:	4b08      	ldr	r3, [pc, #32]	@ (8005ab4 <HAL_Init+0x40>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a07      	ldr	r2, [pc, #28]	@ (8005ab4 <HAL_Init+0x40>)
 8005a96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005a9c:	2003      	movs	r0, #3
 8005a9e:	f000 fe6b 	bl	8006778 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005aa2:	200f      	movs	r0, #15
 8005aa4:	f000 f808 	bl	8005ab8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005aa8:	f7ff fc6c 	bl	8005384 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005aac:	2300      	movs	r3, #0
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	bd80      	pop	{r7, pc}
 8005ab2:	bf00      	nop
 8005ab4:	40023c00 	.word	0x40023c00

08005ab8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b082      	sub	sp, #8
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005ac0:	4b12      	ldr	r3, [pc, #72]	@ (8005b0c <HAL_InitTick+0x54>)
 8005ac2:	681a      	ldr	r2, [r3, #0]
 8005ac4:	4b12      	ldr	r3, [pc, #72]	@ (8005b10 <HAL_InitTick+0x58>)
 8005ac6:	781b      	ldrb	r3, [r3, #0]
 8005ac8:	4619      	mov	r1, r3
 8005aca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005ace:	fbb3 f3f1 	udiv	r3, r3, r1
 8005ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f000 fe83 	bl	80067e2 <HAL_SYSTICK_Config>
 8005adc:	4603      	mov	r3, r0
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d001      	beq.n	8005ae6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	e00e      	b.n	8005b04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2b0f      	cmp	r3, #15
 8005aea:	d80a      	bhi.n	8005b02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005aec:	2200      	movs	r2, #0
 8005aee:	6879      	ldr	r1, [r7, #4]
 8005af0:	f04f 30ff 	mov.w	r0, #4294967295
 8005af4:	f000 fe4b 	bl	800678e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005af8:	4a06      	ldr	r2, [pc, #24]	@ (8005b14 <HAL_InitTick+0x5c>)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005afe:	2300      	movs	r3, #0
 8005b00:	e000      	b.n	8005b04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3708      	adds	r7, #8
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}
 8005b0c:	20000010 	.word	0x20000010
 8005b10:	20000018 	.word	0x20000018
 8005b14:	20000014 	.word	0x20000014

08005b18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005b1c:	4b06      	ldr	r3, [pc, #24]	@ (8005b38 <HAL_IncTick+0x20>)
 8005b1e:	781b      	ldrb	r3, [r3, #0]
 8005b20:	461a      	mov	r2, r3
 8005b22:	4b06      	ldr	r3, [pc, #24]	@ (8005b3c <HAL_IncTick+0x24>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4413      	add	r3, r2
 8005b28:	4a04      	ldr	r2, [pc, #16]	@ (8005b3c <HAL_IncTick+0x24>)
 8005b2a:	6013      	str	r3, [r2, #0]
}
 8005b2c:	bf00      	nop
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b34:	4770      	bx	lr
 8005b36:	bf00      	nop
 8005b38:	20000018 	.word	0x20000018
 8005b3c:	20001728 	.word	0x20001728

08005b40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005b40:	b480      	push	{r7}
 8005b42:	af00      	add	r7, sp, #0
  return uwTick;
 8005b44:	4b03      	ldr	r3, [pc, #12]	@ (8005b54 <HAL_GetTick+0x14>)
 8005b46:	681b      	ldr	r3, [r3, #0]
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr
 8005b52:	bf00      	nop
 8005b54:	20001728 	.word	0x20001728

08005b58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b084      	sub	sp, #16
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005b60:	f7ff ffee 	bl	8005b40 <HAL_GetTick>
 8005b64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b70:	d005      	beq.n	8005b7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005b72:	4b0a      	ldr	r3, [pc, #40]	@ (8005b9c <HAL_Delay+0x44>)
 8005b74:	781b      	ldrb	r3, [r3, #0]
 8005b76:	461a      	mov	r2, r3
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	4413      	add	r3, r2
 8005b7c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005b7e:	bf00      	nop
 8005b80:	f7ff ffde 	bl	8005b40 <HAL_GetTick>
 8005b84:	4602      	mov	r2, r0
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	1ad3      	subs	r3, r2, r3
 8005b8a:	68fa      	ldr	r2, [r7, #12]
 8005b8c:	429a      	cmp	r2, r3
 8005b8e:	d8f7      	bhi.n	8005b80 <HAL_Delay+0x28>
  {
  }
}
 8005b90:	bf00      	nop
 8005b92:	bf00      	nop
 8005b94:	3710      	adds	r7, #16
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}
 8005b9a:	bf00      	nop
 8005b9c:	20000018 	.word	0x20000018

08005ba0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b084      	sub	sp, #16
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005ba8:	2300      	movs	r3, #0
 8005baa:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d101      	bne.n	8005bb6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	e033      	b.n	8005c1e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d109      	bne.n	8005bd2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f7ff fc0e 	bl	80053e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bd6:	f003 0310 	and.w	r3, r3, #16
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d118      	bne.n	8005c10 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005be2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005be6:	f023 0302 	bic.w	r3, r3, #2
 8005bea:	f043 0202 	orr.w	r2, r3, #2
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f000 fb68 	bl	80062c8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c02:	f023 0303 	bic.w	r3, r3, #3
 8005c06:	f043 0201 	orr.w	r2, r3, #1
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	641a      	str	r2, [r3, #64]	@ 0x40
 8005c0e:	e001      	b.n	8005c14 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005c10:	2301      	movs	r3, #1
 8005c12:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2200      	movs	r2, #0
 8005c18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3710      	adds	r7, #16
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}

08005c26 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8005c26:	b580      	push	{r7, lr}
 8005c28:	b086      	sub	sp, #24
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	617b      	str	r3, [r7, #20]
 8005c32:	2300      	movs	r3, #0
 8005c34:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	f003 0302 	and.w	r3, r3, #2
 8005c4c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	f003 0320 	and.w	r3, r3, #32
 8005c54:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d049      	beq.n	8005cf0 <HAL_ADC_IRQHandler+0xca>
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d046      	beq.n	8005cf0 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c66:	f003 0310 	and.w	r3, r3, #16
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d105      	bne.n	8005c7a <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c72:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d12b      	bne.n	8005ce0 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d127      	bne.n	8005ce0 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c96:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d006      	beq.n	8005cac <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d119      	bne.n	8005ce0 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	685a      	ldr	r2, [r3, #4]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f022 0220 	bic.w	r2, r2, #32
 8005cba:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cc0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ccc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d105      	bne.n	8005ce0 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cd8:	f043 0201 	orr.w	r2, r3, #1
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f7ff f93f 	bl	8004f64 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f06f 0212 	mvn.w	r2, #18
 8005cee:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	f003 0304 	and.w	r3, r3, #4
 8005cf6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cfe:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d057      	beq.n	8005db6 <HAL_ADC_IRQHandler+0x190>
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d054      	beq.n	8005db6 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d10:	f003 0310 	and.w	r3, r3, #16
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d105      	bne.n	8005d24 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d1c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d139      	bne.n	8005da6 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d38:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d006      	beq.n	8005d4e <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d12b      	bne.n	8005da6 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d124      	bne.n	8005da6 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	689b      	ldr	r3, [r3, #8]
 8005d62:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d11d      	bne.n	8005da6 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d119      	bne.n	8005da6 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	685a      	ldr	r2, [r3, #4]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005d80:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d86:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d105      	bne.n	8005da6 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d9e:	f043 0201 	orr.w	r2, r3, #1
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f000 fc0c 	bl	80065c4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f06f 020c 	mvn.w	r2, #12
 8005db4:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	f003 0301 	and.w	r3, r3, #1
 8005dbc:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dc4:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d017      	beq.n	8005dfc <HAL_ADC_IRQHandler+0x1d6>
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d014      	beq.n	8005dfc <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f003 0301 	and.w	r3, r3, #1
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d10d      	bne.n	8005dfc <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005de4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	f000 f925 	bl	800603c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f06f 0201 	mvn.w	r2, #1
 8005dfa:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f003 0320 	and.w	r3, r3, #32
 8005e02:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005e0a:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d015      	beq.n	8005e3e <HAL_ADC_IRQHandler+0x218>
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d012      	beq.n	8005e3e <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e1c:	f043 0202 	orr.w	r2, r3, #2
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f06f 0220 	mvn.w	r2, #32
 8005e2c:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f000 f90e 	bl	8006050 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f06f 0220 	mvn.w	r2, #32
 8005e3c:	601a      	str	r2, [r3, #0]
  }
}
 8005e3e:	bf00      	nop
 8005e40:	3718      	adds	r7, #24
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}
	...

08005e48 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b086      	sub	sp, #24
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	60f8      	str	r0, [r7, #12]
 8005e50:	60b9      	str	r1, [r7, #8]
 8005e52:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8005e54:	2300      	movs	r3, #0
 8005e56:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e5e:	2b01      	cmp	r3, #1
 8005e60:	d101      	bne.n	8005e66 <HAL_ADC_Start_DMA+0x1e>
 8005e62:	2302      	movs	r3, #2
 8005e64:	e0ce      	b.n	8006004 <HAL_ADC_Start_DMA+0x1bc>
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2201      	movs	r2, #1
 8005e6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	f003 0301 	and.w	r3, r3, #1
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d018      	beq.n	8005eae <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	689a      	ldr	r2, [r3, #8]
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f042 0201 	orr.w	r2, r2, #1
 8005e8a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005e8c:	4b5f      	ldr	r3, [pc, #380]	@ (800600c <HAL_ADC_Start_DMA+0x1c4>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a5f      	ldr	r2, [pc, #380]	@ (8006010 <HAL_ADC_Start_DMA+0x1c8>)
 8005e92:	fba2 2303 	umull	r2, r3, r2, r3
 8005e96:	0c9a      	lsrs	r2, r3, #18
 8005e98:	4613      	mov	r3, r2
 8005e9a:	005b      	lsls	r3, r3, #1
 8005e9c:	4413      	add	r3, r2
 8005e9e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8005ea0:	e002      	b.n	8005ea8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	3b01      	subs	r3, #1
 8005ea6:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d1f9      	bne.n	8005ea2 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005eb8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ebc:	d107      	bne.n	8005ece <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	689a      	ldr	r2, [r3, #8]
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005ecc:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	f003 0301 	and.w	r3, r3, #1
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	f040 8086 	bne.w	8005fea <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ee2:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8005ee6:	f023 0301 	bic.w	r3, r3, #1
 8005eea:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d007      	beq.n	8005f10 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f04:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8005f08:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f14:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005f18:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f1c:	d106      	bne.n	8005f2c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f22:	f023 0206 	bic.w	r2, r3, #6
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	645a      	str	r2, [r3, #68]	@ 0x44
 8005f2a:	e002      	b.n	8005f32 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2200      	movs	r2, #0
 8005f36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005f3a:	4b36      	ldr	r3, [pc, #216]	@ (8006014 <HAL_ADC_Start_DMA+0x1cc>)
 8005f3c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f42:	4a35      	ldr	r2, [pc, #212]	@ (8006018 <HAL_ADC_Start_DMA+0x1d0>)
 8005f44:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f4a:	4a34      	ldr	r2, [pc, #208]	@ (800601c <HAL_ADC_Start_DMA+0x1d4>)
 8005f4c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f52:	4a33      	ldr	r2, [pc, #204]	@ (8006020 <HAL_ADC_Start_DMA+0x1d8>)
 8005f54:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8005f5e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	685a      	ldr	r2, [r3, #4]
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8005f6e:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	689a      	ldr	r2, [r3, #8]
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005f7e:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	334c      	adds	r3, #76	@ 0x4c
 8005f8a:	4619      	mov	r1, r3
 8005f8c:	68ba      	ldr	r2, [r7, #8]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f000 fce2 	bl	8006958 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	f003 031f 	and.w	r3, r3, #31
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d10f      	bne.n	8005fc0 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	689b      	ldr	r3, [r3, #8]
 8005fa6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d129      	bne.n	8006002 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	689a      	ldr	r2, [r3, #8]
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8005fbc:	609a      	str	r2, [r3, #8]
 8005fbe:	e020      	b.n	8006002 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a17      	ldr	r2, [pc, #92]	@ (8006024 <HAL_ADC_Start_DMA+0x1dc>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d11b      	bne.n	8006002 <HAL_ADC_Start_DMA+0x1ba>
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	689b      	ldr	r3, [r3, #8]
 8005fd0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d114      	bne.n	8006002 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	689a      	ldr	r2, [r3, #8]
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8005fe6:	609a      	str	r2, [r3, #8]
 8005fe8:	e00b      	b.n	8006002 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fee:	f043 0210 	orr.w	r2, r3, #16
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ffa:	f043 0201 	orr.w	r2, r3, #1
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8006002:	2300      	movs	r3, #0
}
 8006004:	4618      	mov	r0, r3
 8006006:	3718      	adds	r7, #24
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}
 800600c:	20000010 	.word	0x20000010
 8006010:	431bde83 	.word	0x431bde83
 8006014:	40012300 	.word	0x40012300
 8006018:	080064c1 	.word	0x080064c1
 800601c:	0800657b 	.word	0x0800657b
 8006020:	08006597 	.word	0x08006597
 8006024:	40012000 	.word	0x40012000

08006028 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006028:	b480      	push	{r7}
 800602a:	b083      	sub	sp, #12
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8006030:	bf00      	nop
 8006032:	370c      	adds	r7, #12
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr

0800603c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800603c:	b480      	push	{r7}
 800603e:	b083      	sub	sp, #12
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8006044:	bf00      	nop
 8006046:	370c      	adds	r7, #12
 8006048:	46bd      	mov	sp, r7
 800604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604e:	4770      	bx	lr

08006050 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006050:	b480      	push	{r7}
 8006052:	b083      	sub	sp, #12
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8006058:	bf00      	nop
 800605a:	370c      	adds	r7, #12
 800605c:	46bd      	mov	sp, r7
 800605e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006062:	4770      	bx	lr

08006064 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8006064:	b480      	push	{r7}
 8006066:	b085      	sub	sp, #20
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
 800606c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800606e:	2300      	movs	r3, #0
 8006070:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006078:	2b01      	cmp	r3, #1
 800607a:	d101      	bne.n	8006080 <HAL_ADC_ConfigChannel+0x1c>
 800607c:	2302      	movs	r3, #2
 800607e:	e113      	b.n	80062a8 <HAL_ADC_ConfigChannel+0x244>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2201      	movs	r2, #1
 8006084:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	2b09      	cmp	r3, #9
 800608e:	d925      	bls.n	80060dc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	68d9      	ldr	r1, [r3, #12]
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	b29b      	uxth	r3, r3
 800609c:	461a      	mov	r2, r3
 800609e:	4613      	mov	r3, r2
 80060a0:	005b      	lsls	r3, r3, #1
 80060a2:	4413      	add	r3, r2
 80060a4:	3b1e      	subs	r3, #30
 80060a6:	2207      	movs	r2, #7
 80060a8:	fa02 f303 	lsl.w	r3, r2, r3
 80060ac:	43da      	mvns	r2, r3
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	400a      	ands	r2, r1
 80060b4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	68d9      	ldr	r1, [r3, #12]
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	689a      	ldr	r2, [r3, #8]
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	b29b      	uxth	r3, r3
 80060c6:	4618      	mov	r0, r3
 80060c8:	4603      	mov	r3, r0
 80060ca:	005b      	lsls	r3, r3, #1
 80060cc:	4403      	add	r3, r0
 80060ce:	3b1e      	subs	r3, #30
 80060d0:	409a      	lsls	r2, r3
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	430a      	orrs	r2, r1
 80060d8:	60da      	str	r2, [r3, #12]
 80060da:	e022      	b.n	8006122 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	6919      	ldr	r1, [r3, #16]
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	461a      	mov	r2, r3
 80060ea:	4613      	mov	r3, r2
 80060ec:	005b      	lsls	r3, r3, #1
 80060ee:	4413      	add	r3, r2
 80060f0:	2207      	movs	r2, #7
 80060f2:	fa02 f303 	lsl.w	r3, r2, r3
 80060f6:	43da      	mvns	r2, r3
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	400a      	ands	r2, r1
 80060fe:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	6919      	ldr	r1, [r3, #16]
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	689a      	ldr	r2, [r3, #8]
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	b29b      	uxth	r3, r3
 8006110:	4618      	mov	r0, r3
 8006112:	4603      	mov	r3, r0
 8006114:	005b      	lsls	r3, r3, #1
 8006116:	4403      	add	r3, r0
 8006118:	409a      	lsls	r2, r3
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	430a      	orrs	r2, r1
 8006120:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	685b      	ldr	r3, [r3, #4]
 8006126:	2b06      	cmp	r3, #6
 8006128:	d824      	bhi.n	8006174 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	685a      	ldr	r2, [r3, #4]
 8006134:	4613      	mov	r3, r2
 8006136:	009b      	lsls	r3, r3, #2
 8006138:	4413      	add	r3, r2
 800613a:	3b05      	subs	r3, #5
 800613c:	221f      	movs	r2, #31
 800613e:	fa02 f303 	lsl.w	r3, r2, r3
 8006142:	43da      	mvns	r2, r3
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	400a      	ands	r2, r1
 800614a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	b29b      	uxth	r3, r3
 8006158:	4618      	mov	r0, r3
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	685a      	ldr	r2, [r3, #4]
 800615e:	4613      	mov	r3, r2
 8006160:	009b      	lsls	r3, r3, #2
 8006162:	4413      	add	r3, r2
 8006164:	3b05      	subs	r3, #5
 8006166:	fa00 f203 	lsl.w	r2, r0, r3
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	430a      	orrs	r2, r1
 8006170:	635a      	str	r2, [r3, #52]	@ 0x34
 8006172:	e04c      	b.n	800620e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	2b0c      	cmp	r3, #12
 800617a:	d824      	bhi.n	80061c6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	685a      	ldr	r2, [r3, #4]
 8006186:	4613      	mov	r3, r2
 8006188:	009b      	lsls	r3, r3, #2
 800618a:	4413      	add	r3, r2
 800618c:	3b23      	subs	r3, #35	@ 0x23
 800618e:	221f      	movs	r2, #31
 8006190:	fa02 f303 	lsl.w	r3, r2, r3
 8006194:	43da      	mvns	r2, r3
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	400a      	ands	r2, r1
 800619c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	b29b      	uxth	r3, r3
 80061aa:	4618      	mov	r0, r3
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	685a      	ldr	r2, [r3, #4]
 80061b0:	4613      	mov	r3, r2
 80061b2:	009b      	lsls	r3, r3, #2
 80061b4:	4413      	add	r3, r2
 80061b6:	3b23      	subs	r3, #35	@ 0x23
 80061b8:	fa00 f203 	lsl.w	r2, r0, r3
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	430a      	orrs	r2, r1
 80061c2:	631a      	str	r2, [r3, #48]	@ 0x30
 80061c4:	e023      	b.n	800620e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	685a      	ldr	r2, [r3, #4]
 80061d0:	4613      	mov	r3, r2
 80061d2:	009b      	lsls	r3, r3, #2
 80061d4:	4413      	add	r3, r2
 80061d6:	3b41      	subs	r3, #65	@ 0x41
 80061d8:	221f      	movs	r2, #31
 80061da:	fa02 f303 	lsl.w	r3, r2, r3
 80061de:	43da      	mvns	r2, r3
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	400a      	ands	r2, r1
 80061e6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	4618      	mov	r0, r3
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	685a      	ldr	r2, [r3, #4]
 80061fa:	4613      	mov	r3, r2
 80061fc:	009b      	lsls	r3, r3, #2
 80061fe:	4413      	add	r3, r2
 8006200:	3b41      	subs	r3, #65	@ 0x41
 8006202:	fa00 f203 	lsl.w	r2, r0, r3
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	430a      	orrs	r2, r1
 800620c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800620e:	4b29      	ldr	r3, [pc, #164]	@ (80062b4 <HAL_ADC_ConfigChannel+0x250>)
 8006210:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a28      	ldr	r2, [pc, #160]	@ (80062b8 <HAL_ADC_ConfigChannel+0x254>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d10f      	bne.n	800623c <HAL_ADC_ConfigChannel+0x1d8>
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	2b12      	cmp	r3, #18
 8006222:	d10b      	bne.n	800623c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a1d      	ldr	r2, [pc, #116]	@ (80062b8 <HAL_ADC_ConfigChannel+0x254>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d12b      	bne.n	800629e <HAL_ADC_ConfigChannel+0x23a>
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a1c      	ldr	r2, [pc, #112]	@ (80062bc <HAL_ADC_ConfigChannel+0x258>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d003      	beq.n	8006258 <HAL_ADC_ConfigChannel+0x1f4>
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	2b11      	cmp	r3, #17
 8006256:	d122      	bne.n	800629e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a11      	ldr	r2, [pc, #68]	@ (80062bc <HAL_ADC_ConfigChannel+0x258>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d111      	bne.n	800629e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800627a:	4b11      	ldr	r3, [pc, #68]	@ (80062c0 <HAL_ADC_ConfigChannel+0x25c>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a11      	ldr	r2, [pc, #68]	@ (80062c4 <HAL_ADC_ConfigChannel+0x260>)
 8006280:	fba2 2303 	umull	r2, r3, r2, r3
 8006284:	0c9a      	lsrs	r2, r3, #18
 8006286:	4613      	mov	r3, r2
 8006288:	009b      	lsls	r3, r3, #2
 800628a:	4413      	add	r3, r2
 800628c:	005b      	lsls	r3, r3, #1
 800628e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8006290:	e002      	b.n	8006298 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	3b01      	subs	r3, #1
 8006296:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d1f9      	bne.n	8006292 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2200      	movs	r2, #0
 80062a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80062a6:	2300      	movs	r3, #0
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	3714      	adds	r7, #20
 80062ac:	46bd      	mov	sp, r7
 80062ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b2:	4770      	bx	lr
 80062b4:	40012300 	.word	0x40012300
 80062b8:	40012000 	.word	0x40012000
 80062bc:	10000012 	.word	0x10000012
 80062c0:	20000010 	.word	0x20000010
 80062c4:	431bde83 	.word	0x431bde83

080062c8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b085      	sub	sp, #20
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80062d0:	4b79      	ldr	r3, [pc, #484]	@ (80064b8 <ADC_Init+0x1f0>)
 80062d2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	685a      	ldr	r2, [r3, #4]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	431a      	orrs	r2, r3
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	685a      	ldr	r2, [r3, #4]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80062fc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	6859      	ldr	r1, [r3, #4]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	691b      	ldr	r3, [r3, #16]
 8006308:	021a      	lsls	r2, r3, #8
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	430a      	orrs	r2, r1
 8006310:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	685a      	ldr	r2, [r3, #4]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8006320:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	6859      	ldr	r1, [r3, #4]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	689a      	ldr	r2, [r3, #8]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	430a      	orrs	r2, r1
 8006332:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	689a      	ldr	r2, [r3, #8]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006342:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	6899      	ldr	r1, [r3, #8]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	68da      	ldr	r2, [r3, #12]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	430a      	orrs	r2, r1
 8006354:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800635a:	4a58      	ldr	r2, [pc, #352]	@ (80064bc <ADC_Init+0x1f4>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d022      	beq.n	80063a6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	689a      	ldr	r2, [r3, #8]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800636e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	6899      	ldr	r1, [r3, #8]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	430a      	orrs	r2, r1
 8006380:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	689a      	ldr	r2, [r3, #8]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006390:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	6899      	ldr	r1, [r3, #8]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	430a      	orrs	r2, r1
 80063a2:	609a      	str	r2, [r3, #8]
 80063a4:	e00f      	b.n	80063c6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	689a      	ldr	r2, [r3, #8]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80063b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	689a      	ldr	r2, [r3, #8]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80063c4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	689a      	ldr	r2, [r3, #8]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f022 0202 	bic.w	r2, r2, #2
 80063d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	6899      	ldr	r1, [r3, #8]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	7e1b      	ldrb	r3, [r3, #24]
 80063e0:	005a      	lsls	r2, r3, #1
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	430a      	orrs	r2, r1
 80063e8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d01b      	beq.n	800642c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	685a      	ldr	r2, [r3, #4]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006402:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	685a      	ldr	r2, [r3, #4]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8006412:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	6859      	ldr	r1, [r3, #4]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800641e:	3b01      	subs	r3, #1
 8006420:	035a      	lsls	r2, r3, #13
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	430a      	orrs	r2, r1
 8006428:	605a      	str	r2, [r3, #4]
 800642a:	e007      	b.n	800643c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	685a      	ldr	r2, [r3, #4]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800643a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800644a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	69db      	ldr	r3, [r3, #28]
 8006456:	3b01      	subs	r3, #1
 8006458:	051a      	lsls	r2, r3, #20
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	430a      	orrs	r2, r1
 8006460:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	689a      	ldr	r2, [r3, #8]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8006470:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	6899      	ldr	r1, [r3, #8]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800647e:	025a      	lsls	r2, r3, #9
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	430a      	orrs	r2, r1
 8006486:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	689a      	ldr	r2, [r3, #8]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006496:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	6899      	ldr	r1, [r3, #8]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	695b      	ldr	r3, [r3, #20]
 80064a2:	029a      	lsls	r2, r3, #10
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	430a      	orrs	r2, r1
 80064aa:	609a      	str	r2, [r3, #8]
}
 80064ac:	bf00      	nop
 80064ae:	3714      	adds	r7, #20
 80064b0:	46bd      	mov	sp, r7
 80064b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b6:	4770      	bx	lr
 80064b8:	40012300 	.word	0x40012300
 80064bc:	0f000001 	.word	0x0f000001

080064c0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b084      	sub	sp, #16
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064cc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064d2:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d13c      	bne.n	8006554 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064de:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	689b      	ldr	r3, [r3, #8]
 80064ec:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d12b      	bne.n	800654c <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d127      	bne.n	800654c <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006502:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006506:	2b00      	cmp	r3, #0
 8006508:	d006      	beq.n	8006518 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	689b      	ldr	r3, [r3, #8]
 8006510:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8006514:	2b00      	cmp	r3, #0
 8006516:	d119      	bne.n	800654c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	685a      	ldr	r2, [r3, #4]
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f022 0220 	bic.w	r2, r2, #32
 8006526:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800652c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006538:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800653c:	2b00      	cmp	r3, #0
 800653e:	d105      	bne.n	800654c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006544:	f043 0201 	orr.w	r2, r3, #1
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800654c:	68f8      	ldr	r0, [r7, #12]
 800654e:	f7fe fd09 	bl	8004f64 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006552:	e00e      	b.n	8006572 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006558:	f003 0310 	and.w	r3, r3, #16
 800655c:	2b00      	cmp	r3, #0
 800655e:	d003      	beq.n	8006568 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8006560:	68f8      	ldr	r0, [r7, #12]
 8006562:	f7ff fd75 	bl	8006050 <HAL_ADC_ErrorCallback>
}
 8006566:	e004      	b.n	8006572 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800656c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	4798      	blx	r3
}
 8006572:	bf00      	nop
 8006574:	3710      	adds	r7, #16
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}

0800657a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800657a:	b580      	push	{r7, lr}
 800657c:	b084      	sub	sp, #16
 800657e:	af00      	add	r7, sp, #0
 8006580:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006586:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006588:	68f8      	ldr	r0, [r7, #12]
 800658a:	f7ff fd4d 	bl	8006028 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800658e:	bf00      	nop
 8006590:	3710      	adds	r7, #16
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}

08006596 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8006596:	b580      	push	{r7, lr}
 8006598:	b084      	sub	sp, #16
 800659a:	af00      	add	r7, sp, #0
 800659c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065a2:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	2240      	movs	r2, #64	@ 0x40
 80065a8:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065ae:	f043 0204 	orr.w	r2, r3, #4
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80065b6:	68f8      	ldr	r0, [r7, #12]
 80065b8:	f7ff fd4a 	bl	8006050 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80065bc:	bf00      	nop
 80065be:	3710      	adds	r7, #16
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}

080065c4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b083      	sub	sp, #12
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80065cc:	bf00      	nop
 80065ce:	370c      	adds	r7, #12
 80065d0:	46bd      	mov	sp, r7
 80065d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d6:	4770      	bx	lr

080065d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80065d8:	b480      	push	{r7}
 80065da:	b085      	sub	sp, #20
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f003 0307 	and.w	r3, r3, #7
 80065e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80065e8:	4b0c      	ldr	r3, [pc, #48]	@ (800661c <__NVIC_SetPriorityGrouping+0x44>)
 80065ea:	68db      	ldr	r3, [r3, #12]
 80065ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80065ee:	68ba      	ldr	r2, [r7, #8]
 80065f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80065f4:	4013      	ands	r3, r2
 80065f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006600:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006604:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006608:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800660a:	4a04      	ldr	r2, [pc, #16]	@ (800661c <__NVIC_SetPriorityGrouping+0x44>)
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	60d3      	str	r3, [r2, #12]
}
 8006610:	bf00      	nop
 8006612:	3714      	adds	r7, #20
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr
 800661c:	e000ed00 	.word	0xe000ed00

08006620 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006620:	b480      	push	{r7}
 8006622:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006624:	4b04      	ldr	r3, [pc, #16]	@ (8006638 <__NVIC_GetPriorityGrouping+0x18>)
 8006626:	68db      	ldr	r3, [r3, #12]
 8006628:	0a1b      	lsrs	r3, r3, #8
 800662a:	f003 0307 	and.w	r3, r3, #7
}
 800662e:	4618      	mov	r0, r3
 8006630:	46bd      	mov	sp, r7
 8006632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006636:	4770      	bx	lr
 8006638:	e000ed00 	.word	0xe000ed00

0800663c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800663c:	b480      	push	{r7}
 800663e:	b083      	sub	sp, #12
 8006640:	af00      	add	r7, sp, #0
 8006642:	4603      	mov	r3, r0
 8006644:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800664a:	2b00      	cmp	r3, #0
 800664c:	db0b      	blt.n	8006666 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800664e:	79fb      	ldrb	r3, [r7, #7]
 8006650:	f003 021f 	and.w	r2, r3, #31
 8006654:	4907      	ldr	r1, [pc, #28]	@ (8006674 <__NVIC_EnableIRQ+0x38>)
 8006656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800665a:	095b      	lsrs	r3, r3, #5
 800665c:	2001      	movs	r0, #1
 800665e:	fa00 f202 	lsl.w	r2, r0, r2
 8006662:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006666:	bf00      	nop
 8006668:	370c      	adds	r7, #12
 800666a:	46bd      	mov	sp, r7
 800666c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006670:	4770      	bx	lr
 8006672:	bf00      	nop
 8006674:	e000e100 	.word	0xe000e100

08006678 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006678:	b480      	push	{r7}
 800667a:	b083      	sub	sp, #12
 800667c:	af00      	add	r7, sp, #0
 800667e:	4603      	mov	r3, r0
 8006680:	6039      	str	r1, [r7, #0]
 8006682:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006684:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006688:	2b00      	cmp	r3, #0
 800668a:	db0a      	blt.n	80066a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	b2da      	uxtb	r2, r3
 8006690:	490c      	ldr	r1, [pc, #48]	@ (80066c4 <__NVIC_SetPriority+0x4c>)
 8006692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006696:	0112      	lsls	r2, r2, #4
 8006698:	b2d2      	uxtb	r2, r2
 800669a:	440b      	add	r3, r1
 800669c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80066a0:	e00a      	b.n	80066b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	b2da      	uxtb	r2, r3
 80066a6:	4908      	ldr	r1, [pc, #32]	@ (80066c8 <__NVIC_SetPriority+0x50>)
 80066a8:	79fb      	ldrb	r3, [r7, #7]
 80066aa:	f003 030f 	and.w	r3, r3, #15
 80066ae:	3b04      	subs	r3, #4
 80066b0:	0112      	lsls	r2, r2, #4
 80066b2:	b2d2      	uxtb	r2, r2
 80066b4:	440b      	add	r3, r1
 80066b6:	761a      	strb	r2, [r3, #24]
}
 80066b8:	bf00      	nop
 80066ba:	370c      	adds	r7, #12
 80066bc:	46bd      	mov	sp, r7
 80066be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c2:	4770      	bx	lr
 80066c4:	e000e100 	.word	0xe000e100
 80066c8:	e000ed00 	.word	0xe000ed00

080066cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b089      	sub	sp, #36	@ 0x24
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	60f8      	str	r0, [r7, #12]
 80066d4:	60b9      	str	r1, [r7, #8]
 80066d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	f003 0307 	and.w	r3, r3, #7
 80066de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80066e0:	69fb      	ldr	r3, [r7, #28]
 80066e2:	f1c3 0307 	rsb	r3, r3, #7
 80066e6:	2b04      	cmp	r3, #4
 80066e8:	bf28      	it	cs
 80066ea:	2304      	movcs	r3, #4
 80066ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80066ee:	69fb      	ldr	r3, [r7, #28]
 80066f0:	3304      	adds	r3, #4
 80066f2:	2b06      	cmp	r3, #6
 80066f4:	d902      	bls.n	80066fc <NVIC_EncodePriority+0x30>
 80066f6:	69fb      	ldr	r3, [r7, #28]
 80066f8:	3b03      	subs	r3, #3
 80066fa:	e000      	b.n	80066fe <NVIC_EncodePriority+0x32>
 80066fc:	2300      	movs	r3, #0
 80066fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006700:	f04f 32ff 	mov.w	r2, #4294967295
 8006704:	69bb      	ldr	r3, [r7, #24]
 8006706:	fa02 f303 	lsl.w	r3, r2, r3
 800670a:	43da      	mvns	r2, r3
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	401a      	ands	r2, r3
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006714:	f04f 31ff 	mov.w	r1, #4294967295
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	fa01 f303 	lsl.w	r3, r1, r3
 800671e:	43d9      	mvns	r1, r3
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006724:	4313      	orrs	r3, r2
         );
}
 8006726:	4618      	mov	r0, r3
 8006728:	3724      	adds	r7, #36	@ 0x24
 800672a:	46bd      	mov	sp, r7
 800672c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006730:	4770      	bx	lr
	...

08006734 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b082      	sub	sp, #8
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	3b01      	subs	r3, #1
 8006740:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006744:	d301      	bcc.n	800674a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006746:	2301      	movs	r3, #1
 8006748:	e00f      	b.n	800676a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800674a:	4a0a      	ldr	r2, [pc, #40]	@ (8006774 <SysTick_Config+0x40>)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	3b01      	subs	r3, #1
 8006750:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006752:	210f      	movs	r1, #15
 8006754:	f04f 30ff 	mov.w	r0, #4294967295
 8006758:	f7ff ff8e 	bl	8006678 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800675c:	4b05      	ldr	r3, [pc, #20]	@ (8006774 <SysTick_Config+0x40>)
 800675e:	2200      	movs	r2, #0
 8006760:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006762:	4b04      	ldr	r3, [pc, #16]	@ (8006774 <SysTick_Config+0x40>)
 8006764:	2207      	movs	r2, #7
 8006766:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006768:	2300      	movs	r3, #0
}
 800676a:	4618      	mov	r0, r3
 800676c:	3708      	adds	r7, #8
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}
 8006772:	bf00      	nop
 8006774:	e000e010 	.word	0xe000e010

08006778 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b082      	sub	sp, #8
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	f7ff ff29 	bl	80065d8 <__NVIC_SetPriorityGrouping>
}
 8006786:	bf00      	nop
 8006788:	3708      	adds	r7, #8
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}

0800678e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800678e:	b580      	push	{r7, lr}
 8006790:	b086      	sub	sp, #24
 8006792:	af00      	add	r7, sp, #0
 8006794:	4603      	mov	r3, r0
 8006796:	60b9      	str	r1, [r7, #8]
 8006798:	607a      	str	r2, [r7, #4]
 800679a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800679c:	2300      	movs	r3, #0
 800679e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80067a0:	f7ff ff3e 	bl	8006620 <__NVIC_GetPriorityGrouping>
 80067a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80067a6:	687a      	ldr	r2, [r7, #4]
 80067a8:	68b9      	ldr	r1, [r7, #8]
 80067aa:	6978      	ldr	r0, [r7, #20]
 80067ac:	f7ff ff8e 	bl	80066cc <NVIC_EncodePriority>
 80067b0:	4602      	mov	r2, r0
 80067b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80067b6:	4611      	mov	r1, r2
 80067b8:	4618      	mov	r0, r3
 80067ba:	f7ff ff5d 	bl	8006678 <__NVIC_SetPriority>
}
 80067be:	bf00      	nop
 80067c0:	3718      	adds	r7, #24
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}

080067c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80067c6:	b580      	push	{r7, lr}
 80067c8:	b082      	sub	sp, #8
 80067ca:	af00      	add	r7, sp, #0
 80067cc:	4603      	mov	r3, r0
 80067ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80067d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067d4:	4618      	mov	r0, r3
 80067d6:	f7ff ff31 	bl	800663c <__NVIC_EnableIRQ>
}
 80067da:	bf00      	nop
 80067dc:	3708      	adds	r7, #8
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}

080067e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80067e2:	b580      	push	{r7, lr}
 80067e4:	b082      	sub	sp, #8
 80067e6:	af00      	add	r7, sp, #0
 80067e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f7ff ffa2 	bl	8006734 <SysTick_Config>
 80067f0:	4603      	mov	r3, r0
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3708      	adds	r7, #8
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}
	...

080067fc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b086      	sub	sp, #24
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006804:	2300      	movs	r3, #0
 8006806:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006808:	f7ff f99a 	bl	8005b40 <HAL_GetTick>
 800680c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d101      	bne.n	8006818 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006814:	2301      	movs	r3, #1
 8006816:	e099      	b.n	800694c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2202      	movs	r2, #2
 800681c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2200      	movs	r2, #0
 8006824:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	681a      	ldr	r2, [r3, #0]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f022 0201 	bic.w	r2, r2, #1
 8006836:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006838:	e00f      	b.n	800685a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800683a:	f7ff f981 	bl	8005b40 <HAL_GetTick>
 800683e:	4602      	mov	r2, r0
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	1ad3      	subs	r3, r2, r3
 8006844:	2b05      	cmp	r3, #5
 8006846:	d908      	bls.n	800685a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2220      	movs	r2, #32
 800684c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2203      	movs	r2, #3
 8006852:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8006856:	2303      	movs	r3, #3
 8006858:	e078      	b.n	800694c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f003 0301 	and.w	r3, r3, #1
 8006864:	2b00      	cmp	r3, #0
 8006866:	d1e8      	bne.n	800683a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006870:	697a      	ldr	r2, [r7, #20]
 8006872:	4b38      	ldr	r3, [pc, #224]	@ (8006954 <HAL_DMA_Init+0x158>)
 8006874:	4013      	ands	r3, r2
 8006876:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	685a      	ldr	r2, [r3, #4]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	689b      	ldr	r3, [r3, #8]
 8006880:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006886:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	691b      	ldr	r3, [r3, #16]
 800688c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006892:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	699b      	ldr	r3, [r3, #24]
 8006898:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800689e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6a1b      	ldr	r3, [r3, #32]
 80068a4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80068a6:	697a      	ldr	r2, [r7, #20]
 80068a8:	4313      	orrs	r3, r2
 80068aa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068b0:	2b04      	cmp	r3, #4
 80068b2:	d107      	bne.n	80068c4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068bc:	4313      	orrs	r3, r2
 80068be:	697a      	ldr	r2, [r7, #20]
 80068c0:	4313      	orrs	r3, r2
 80068c2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	697a      	ldr	r2, [r7, #20]
 80068ca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	695b      	ldr	r3, [r3, #20]
 80068d2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	f023 0307 	bic.w	r3, r3, #7
 80068da:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068e0:	697a      	ldr	r2, [r7, #20]
 80068e2:	4313      	orrs	r3, r2
 80068e4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068ea:	2b04      	cmp	r3, #4
 80068ec:	d117      	bne.n	800691e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068f2:	697a      	ldr	r2, [r7, #20]
 80068f4:	4313      	orrs	r3, r2
 80068f6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d00e      	beq.n	800691e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f000 fb1b 	bl	8006f3c <DMA_CheckFifoParam>
 8006906:	4603      	mov	r3, r0
 8006908:	2b00      	cmp	r3, #0
 800690a:	d008      	beq.n	800691e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2240      	movs	r2, #64	@ 0x40
 8006910:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2201      	movs	r2, #1
 8006916:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800691a:	2301      	movs	r3, #1
 800691c:	e016      	b.n	800694c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	697a      	ldr	r2, [r7, #20]
 8006924:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f000 fad2 	bl	8006ed0 <DMA_CalcBaseAndBitshift>
 800692c:	4603      	mov	r3, r0
 800692e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006934:	223f      	movs	r2, #63	@ 0x3f
 8006936:	409a      	lsls	r2, r3
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2200      	movs	r2, #0
 8006940:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2201      	movs	r2, #1
 8006946:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800694a:	2300      	movs	r3, #0
}
 800694c:	4618      	mov	r0, r3
 800694e:	3718      	adds	r7, #24
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}
 8006954:	f010803f 	.word	0xf010803f

08006958 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b086      	sub	sp, #24
 800695c:	af00      	add	r7, sp, #0
 800695e:	60f8      	str	r0, [r7, #12]
 8006960:	60b9      	str	r1, [r7, #8]
 8006962:	607a      	str	r2, [r7, #4]
 8006964:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006966:	2300      	movs	r3, #0
 8006968:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800696e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006976:	2b01      	cmp	r3, #1
 8006978:	d101      	bne.n	800697e <HAL_DMA_Start_IT+0x26>
 800697a:	2302      	movs	r3, #2
 800697c:	e040      	b.n	8006a00 <HAL_DMA_Start_IT+0xa8>
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2201      	movs	r2, #1
 8006982:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800698c:	b2db      	uxtb	r3, r3
 800698e:	2b01      	cmp	r3, #1
 8006990:	d12f      	bne.n	80069f2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2202      	movs	r2, #2
 8006996:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	2200      	movs	r2, #0
 800699e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	687a      	ldr	r2, [r7, #4]
 80069a4:	68b9      	ldr	r1, [r7, #8]
 80069a6:	68f8      	ldr	r0, [r7, #12]
 80069a8:	f000 fa64 	bl	8006e74 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069b0:	223f      	movs	r2, #63	@ 0x3f
 80069b2:	409a      	lsls	r2, r3
 80069b4:	693b      	ldr	r3, [r7, #16]
 80069b6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	681a      	ldr	r2, [r3, #0]
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f042 0216 	orr.w	r2, r2, #22
 80069c6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d007      	beq.n	80069e0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	681a      	ldr	r2, [r3, #0]
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f042 0208 	orr.w	r2, r2, #8
 80069de:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	681a      	ldr	r2, [r3, #0]
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f042 0201 	orr.w	r2, r2, #1
 80069ee:	601a      	str	r2, [r3, #0]
 80069f0:	e005      	b.n	80069fe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2200      	movs	r2, #0
 80069f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80069fa:	2302      	movs	r3, #2
 80069fc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80069fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	3718      	adds	r7, #24
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}

08006a08 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b084      	sub	sp, #16
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a14:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006a16:	f7ff f893 	bl	8005b40 <HAL_GetTick>
 8006a1a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006a22:	b2db      	uxtb	r3, r3
 8006a24:	2b02      	cmp	r3, #2
 8006a26:	d008      	beq.n	8006a3a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2280      	movs	r2, #128	@ 0x80
 8006a2c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2200      	movs	r2, #0
 8006a32:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8006a36:	2301      	movs	r3, #1
 8006a38:	e052      	b.n	8006ae0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	681a      	ldr	r2, [r3, #0]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f022 0216 	bic.w	r2, r2, #22
 8006a48:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	695a      	ldr	r2, [r3, #20]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006a58:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d103      	bne.n	8006a6a <HAL_DMA_Abort+0x62>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d007      	beq.n	8006a7a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	681a      	ldr	r2, [r3, #0]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f022 0208 	bic.w	r2, r2, #8
 8006a78:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	681a      	ldr	r2, [r3, #0]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f022 0201 	bic.w	r2, r2, #1
 8006a88:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006a8a:	e013      	b.n	8006ab4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006a8c:	f7ff f858 	bl	8005b40 <HAL_GetTick>
 8006a90:	4602      	mov	r2, r0
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	1ad3      	subs	r3, r2, r3
 8006a96:	2b05      	cmp	r3, #5
 8006a98:	d90c      	bls.n	8006ab4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2220      	movs	r2, #32
 8006a9e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2203      	movs	r2, #3
 8006aa4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8006ab0:	2303      	movs	r3, #3
 8006ab2:	e015      	b.n	8006ae0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f003 0301 	and.w	r3, r3, #1
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d1e4      	bne.n	8006a8c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ac6:	223f      	movs	r2, #63	@ 0x3f
 8006ac8:	409a      	lsls	r2, r3
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2201      	movs	r2, #1
 8006ad2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8006ade:	2300      	movs	r3, #0
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3710      	adds	r7, #16
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}

08006ae8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b083      	sub	sp, #12
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006af6:	b2db      	uxtb	r3, r3
 8006af8:	2b02      	cmp	r3, #2
 8006afa:	d004      	beq.n	8006b06 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2280      	movs	r2, #128	@ 0x80
 8006b00:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8006b02:	2301      	movs	r3, #1
 8006b04:	e00c      	b.n	8006b20 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2205      	movs	r2, #5
 8006b0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	681a      	ldr	r2, [r3, #0]
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f022 0201 	bic.w	r2, r2, #1
 8006b1c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006b1e:	2300      	movs	r3, #0
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	370c      	adds	r7, #12
 8006b24:	46bd      	mov	sp, r7
 8006b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2a:	4770      	bx	lr

08006b2c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b086      	sub	sp, #24
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006b34:	2300      	movs	r3, #0
 8006b36:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006b38:	4b8e      	ldr	r3, [pc, #568]	@ (8006d74 <HAL_DMA_IRQHandler+0x248>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a8e      	ldr	r2, [pc, #568]	@ (8006d78 <HAL_DMA_IRQHandler+0x24c>)
 8006b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8006b42:	0a9b      	lsrs	r3, r3, #10
 8006b44:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b4a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006b4c:	693b      	ldr	r3, [r7, #16]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b56:	2208      	movs	r2, #8
 8006b58:	409a      	lsls	r2, r3
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	4013      	ands	r3, r2
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d01a      	beq.n	8006b98 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f003 0304 	and.w	r3, r3, #4
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d013      	beq.n	8006b98 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	681a      	ldr	r2, [r3, #0]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f022 0204 	bic.w	r2, r2, #4
 8006b7e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b84:	2208      	movs	r2, #8
 8006b86:	409a      	lsls	r2, r3
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b90:	f043 0201 	orr.w	r2, r3, #1
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b9c:	2201      	movs	r2, #1
 8006b9e:	409a      	lsls	r2, r3
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	4013      	ands	r3, r2
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d012      	beq.n	8006bce <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	695b      	ldr	r3, [r3, #20]
 8006bae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d00b      	beq.n	8006bce <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006bba:	2201      	movs	r2, #1
 8006bbc:	409a      	lsls	r2, r3
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bc6:	f043 0202 	orr.w	r2, r3, #2
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006bd2:	2204      	movs	r2, #4
 8006bd4:	409a      	lsls	r2, r3
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	4013      	ands	r3, r2
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d012      	beq.n	8006c04 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f003 0302 	and.w	r3, r3, #2
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d00b      	beq.n	8006c04 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006bf0:	2204      	movs	r2, #4
 8006bf2:	409a      	lsls	r2, r3
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bfc:	f043 0204 	orr.w	r2, r3, #4
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c08:	2210      	movs	r2, #16
 8006c0a:	409a      	lsls	r2, r3
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	4013      	ands	r3, r2
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d043      	beq.n	8006c9c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f003 0308 	and.w	r3, r3, #8
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d03c      	beq.n	8006c9c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c26:	2210      	movs	r2, #16
 8006c28:	409a      	lsls	r2, r3
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d018      	beq.n	8006c6e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d108      	bne.n	8006c5c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d024      	beq.n	8006c9c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	4798      	blx	r3
 8006c5a:	e01f      	b.n	8006c9c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d01b      	beq.n	8006c9c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	4798      	blx	r3
 8006c6c:	e016      	b.n	8006c9c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d107      	bne.n	8006c8c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	681a      	ldr	r2, [r3, #0]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f022 0208 	bic.w	r2, r2, #8
 8006c8a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d003      	beq.n	8006c9c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ca0:	2220      	movs	r2, #32
 8006ca2:	409a      	lsls	r2, r3
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	4013      	ands	r3, r2
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	f000 808f 	beq.w	8006dcc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f003 0310 	and.w	r3, r3, #16
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	f000 8087 	beq.w	8006dcc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006cc2:	2220      	movs	r2, #32
 8006cc4:	409a      	lsls	r2, r3
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006cd0:	b2db      	uxtb	r3, r3
 8006cd2:	2b05      	cmp	r3, #5
 8006cd4:	d136      	bne.n	8006d44 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	681a      	ldr	r2, [r3, #0]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f022 0216 	bic.w	r2, r2, #22
 8006ce4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	695a      	ldr	r2, [r3, #20]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006cf4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d103      	bne.n	8006d06 <HAL_DMA_IRQHandler+0x1da>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d007      	beq.n	8006d16 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	681a      	ldr	r2, [r3, #0]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f022 0208 	bic.w	r2, r2, #8
 8006d14:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d1a:	223f      	movs	r2, #63	@ 0x3f
 8006d1c:	409a      	lsls	r2, r3
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2201      	movs	r2, #1
 8006d26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d07e      	beq.n	8006e38 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	4798      	blx	r3
        }
        return;
 8006d42:	e079      	b.n	8006e38 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d01d      	beq.n	8006d8e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d10d      	bne.n	8006d7c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d031      	beq.n	8006dcc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	4798      	blx	r3
 8006d70:	e02c      	b.n	8006dcc <HAL_DMA_IRQHandler+0x2a0>
 8006d72:	bf00      	nop
 8006d74:	20000010 	.word	0x20000010
 8006d78:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d023      	beq.n	8006dcc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	4798      	blx	r3
 8006d8c:	e01e      	b.n	8006dcc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d10f      	bne.n	8006dbc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	681a      	ldr	r2, [r3, #0]
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f022 0210 	bic.w	r2, r2, #16
 8006daa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2201      	movs	r2, #1
 8006db0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2200      	movs	r2, #0
 8006db8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d003      	beq.n	8006dcc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d032      	beq.n	8006e3a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006dd8:	f003 0301 	and.w	r3, r3, #1
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d022      	beq.n	8006e26 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2205      	movs	r2, #5
 8006de4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	681a      	ldr	r2, [r3, #0]
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f022 0201 	bic.w	r2, r2, #1
 8006df6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	3301      	adds	r3, #1
 8006dfc:	60bb      	str	r3, [r7, #8]
 8006dfe:	697a      	ldr	r2, [r7, #20]
 8006e00:	429a      	cmp	r2, r3
 8006e02:	d307      	bcc.n	8006e14 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f003 0301 	and.w	r3, r3, #1
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d1f2      	bne.n	8006df8 <HAL_DMA_IRQHandler+0x2cc>
 8006e12:	e000      	b.n	8006e16 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006e14:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2201      	movs	r2, #1
 8006e1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2200      	movs	r2, #0
 8006e22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d005      	beq.n	8006e3a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	4798      	blx	r3
 8006e36:	e000      	b.n	8006e3a <HAL_DMA_IRQHandler+0x30e>
        return;
 8006e38:	bf00      	nop
    }
  }
}
 8006e3a:	3718      	adds	r7, #24
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}

08006e40 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8006e40:	b480      	push	{r7}
 8006e42:	b083      	sub	sp, #12
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006e4e:	b2db      	uxtb	r3, r3
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	370c      	adds	r7, #12
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr

08006e5c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b083      	sub	sp, #12
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	370c      	adds	r7, #12
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e72:	4770      	bx	lr

08006e74 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006e74:	b480      	push	{r7}
 8006e76:	b085      	sub	sp, #20
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	60f8      	str	r0, [r7, #12]
 8006e7c:	60b9      	str	r1, [r7, #8]
 8006e7e:	607a      	str	r2, [r7, #4]
 8006e80:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	681a      	ldr	r2, [r3, #0]
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006e90:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	683a      	ldr	r2, [r7, #0]
 8006e98:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	689b      	ldr	r3, [r3, #8]
 8006e9e:	2b40      	cmp	r3, #64	@ 0x40
 8006ea0:	d108      	bne.n	8006eb4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	687a      	ldr	r2, [r7, #4]
 8006ea8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	68ba      	ldr	r2, [r7, #8]
 8006eb0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006eb2:	e007      	b.n	8006ec4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	68ba      	ldr	r2, [r7, #8]
 8006eba:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	687a      	ldr	r2, [r7, #4]
 8006ec2:	60da      	str	r2, [r3, #12]
}
 8006ec4:	bf00      	nop
 8006ec6:	3714      	adds	r7, #20
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ece:	4770      	bx	lr

08006ed0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b085      	sub	sp, #20
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	b2db      	uxtb	r3, r3
 8006ede:	3b10      	subs	r3, #16
 8006ee0:	4a14      	ldr	r2, [pc, #80]	@ (8006f34 <DMA_CalcBaseAndBitshift+0x64>)
 8006ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ee6:	091b      	lsrs	r3, r3, #4
 8006ee8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006eea:	4a13      	ldr	r2, [pc, #76]	@ (8006f38 <DMA_CalcBaseAndBitshift+0x68>)
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	4413      	add	r3, r2
 8006ef0:	781b      	ldrb	r3, [r3, #0]
 8006ef2:	461a      	mov	r2, r3
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2b03      	cmp	r3, #3
 8006efc:	d909      	bls.n	8006f12 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8006f06:	f023 0303 	bic.w	r3, r3, #3
 8006f0a:	1d1a      	adds	r2, r3, #4
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	659a      	str	r2, [r3, #88]	@ 0x58
 8006f10:	e007      	b.n	8006f22 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8006f1a:	f023 0303 	bic.w	r3, r3, #3
 8006f1e:	687a      	ldr	r2, [r7, #4]
 8006f20:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3714      	adds	r7, #20
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f30:	4770      	bx	lr
 8006f32:	bf00      	nop
 8006f34:	aaaaaaab 	.word	0xaaaaaaab
 8006f38:	08014b48 	.word	0x08014b48

08006f3c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b085      	sub	sp, #20
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f44:	2300      	movs	r3, #0
 8006f46:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f4c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	699b      	ldr	r3, [r3, #24]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d11f      	bne.n	8006f96 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	2b03      	cmp	r3, #3
 8006f5a:	d856      	bhi.n	800700a <DMA_CheckFifoParam+0xce>
 8006f5c:	a201      	add	r2, pc, #4	@ (adr r2, 8006f64 <DMA_CheckFifoParam+0x28>)
 8006f5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f62:	bf00      	nop
 8006f64:	08006f75 	.word	0x08006f75
 8006f68:	08006f87 	.word	0x08006f87
 8006f6c:	08006f75 	.word	0x08006f75
 8006f70:	0800700b 	.word	0x0800700b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f78:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d046      	beq.n	800700e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006f80:	2301      	movs	r3, #1
 8006f82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006f84:	e043      	b.n	800700e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f8a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006f8e:	d140      	bne.n	8007012 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006f90:	2301      	movs	r3, #1
 8006f92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006f94:	e03d      	b.n	8007012 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	699b      	ldr	r3, [r3, #24]
 8006f9a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006f9e:	d121      	bne.n	8006fe4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	2b03      	cmp	r3, #3
 8006fa4:	d837      	bhi.n	8007016 <DMA_CheckFifoParam+0xda>
 8006fa6:	a201      	add	r2, pc, #4	@ (adr r2, 8006fac <DMA_CheckFifoParam+0x70>)
 8006fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fac:	08006fbd 	.word	0x08006fbd
 8006fb0:	08006fc3 	.word	0x08006fc3
 8006fb4:	08006fbd 	.word	0x08006fbd
 8006fb8:	08006fd5 	.word	0x08006fd5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	73fb      	strb	r3, [r7, #15]
      break;
 8006fc0:	e030      	b.n	8007024 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fc6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d025      	beq.n	800701a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006fce:	2301      	movs	r3, #1
 8006fd0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006fd2:	e022      	b.n	800701a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fd8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006fdc:	d11f      	bne.n	800701e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006fde:	2301      	movs	r3, #1
 8006fe0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006fe2:	e01c      	b.n	800701e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	2b02      	cmp	r3, #2
 8006fe8:	d903      	bls.n	8006ff2 <DMA_CheckFifoParam+0xb6>
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	2b03      	cmp	r3, #3
 8006fee:	d003      	beq.n	8006ff8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006ff0:	e018      	b.n	8007024 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	73fb      	strb	r3, [r7, #15]
      break;
 8006ff6:	e015      	b.n	8007024 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ffc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007000:	2b00      	cmp	r3, #0
 8007002:	d00e      	beq.n	8007022 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007004:	2301      	movs	r3, #1
 8007006:	73fb      	strb	r3, [r7, #15]
      break;
 8007008:	e00b      	b.n	8007022 <DMA_CheckFifoParam+0xe6>
      break;
 800700a:	bf00      	nop
 800700c:	e00a      	b.n	8007024 <DMA_CheckFifoParam+0xe8>
      break;
 800700e:	bf00      	nop
 8007010:	e008      	b.n	8007024 <DMA_CheckFifoParam+0xe8>
      break;
 8007012:	bf00      	nop
 8007014:	e006      	b.n	8007024 <DMA_CheckFifoParam+0xe8>
      break;
 8007016:	bf00      	nop
 8007018:	e004      	b.n	8007024 <DMA_CheckFifoParam+0xe8>
      break;
 800701a:	bf00      	nop
 800701c:	e002      	b.n	8007024 <DMA_CheckFifoParam+0xe8>
      break;   
 800701e:	bf00      	nop
 8007020:	e000      	b.n	8007024 <DMA_CheckFifoParam+0xe8>
      break;
 8007022:	bf00      	nop
    }
  } 
  
  return status; 
 8007024:	7bfb      	ldrb	r3, [r7, #15]
}
 8007026:	4618      	mov	r0, r3
 8007028:	3714      	adds	r7, #20
 800702a:	46bd      	mov	sp, r7
 800702c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007030:	4770      	bx	lr
 8007032:	bf00      	nop

08007034 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007034:	b480      	push	{r7}
 8007036:	b089      	sub	sp, #36	@ 0x24
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
 800703c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800703e:	2300      	movs	r3, #0
 8007040:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007042:	2300      	movs	r3, #0
 8007044:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007046:	2300      	movs	r3, #0
 8007048:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800704a:	2300      	movs	r3, #0
 800704c:	61fb      	str	r3, [r7, #28]
 800704e:	e159      	b.n	8007304 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007050:	2201      	movs	r2, #1
 8007052:	69fb      	ldr	r3, [r7, #28]
 8007054:	fa02 f303 	lsl.w	r3, r2, r3
 8007058:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	697a      	ldr	r2, [r7, #20]
 8007060:	4013      	ands	r3, r2
 8007062:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007064:	693a      	ldr	r2, [r7, #16]
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	429a      	cmp	r2, r3
 800706a:	f040 8148 	bne.w	80072fe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	f003 0303 	and.w	r3, r3, #3
 8007076:	2b01      	cmp	r3, #1
 8007078:	d005      	beq.n	8007086 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	685b      	ldr	r3, [r3, #4]
 800707e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007082:	2b02      	cmp	r3, #2
 8007084:	d130      	bne.n	80070e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	689b      	ldr	r3, [r3, #8]
 800708a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800708c:	69fb      	ldr	r3, [r7, #28]
 800708e:	005b      	lsls	r3, r3, #1
 8007090:	2203      	movs	r2, #3
 8007092:	fa02 f303 	lsl.w	r3, r2, r3
 8007096:	43db      	mvns	r3, r3
 8007098:	69ba      	ldr	r2, [r7, #24]
 800709a:	4013      	ands	r3, r2
 800709c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	68da      	ldr	r2, [r3, #12]
 80070a2:	69fb      	ldr	r3, [r7, #28]
 80070a4:	005b      	lsls	r3, r3, #1
 80070a6:	fa02 f303 	lsl.w	r3, r2, r3
 80070aa:	69ba      	ldr	r2, [r7, #24]
 80070ac:	4313      	orrs	r3, r2
 80070ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	69ba      	ldr	r2, [r7, #24]
 80070b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	685b      	ldr	r3, [r3, #4]
 80070ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80070bc:	2201      	movs	r2, #1
 80070be:	69fb      	ldr	r3, [r7, #28]
 80070c0:	fa02 f303 	lsl.w	r3, r2, r3
 80070c4:	43db      	mvns	r3, r3
 80070c6:	69ba      	ldr	r2, [r7, #24]
 80070c8:	4013      	ands	r3, r2
 80070ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	685b      	ldr	r3, [r3, #4]
 80070d0:	091b      	lsrs	r3, r3, #4
 80070d2:	f003 0201 	and.w	r2, r3, #1
 80070d6:	69fb      	ldr	r3, [r7, #28]
 80070d8:	fa02 f303 	lsl.w	r3, r2, r3
 80070dc:	69ba      	ldr	r2, [r7, #24]
 80070de:	4313      	orrs	r3, r2
 80070e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	69ba      	ldr	r2, [r7, #24]
 80070e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	f003 0303 	and.w	r3, r3, #3
 80070f0:	2b03      	cmp	r3, #3
 80070f2:	d017      	beq.n	8007124 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	68db      	ldr	r3, [r3, #12]
 80070f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80070fa:	69fb      	ldr	r3, [r7, #28]
 80070fc:	005b      	lsls	r3, r3, #1
 80070fe:	2203      	movs	r2, #3
 8007100:	fa02 f303 	lsl.w	r3, r2, r3
 8007104:	43db      	mvns	r3, r3
 8007106:	69ba      	ldr	r2, [r7, #24]
 8007108:	4013      	ands	r3, r2
 800710a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	689a      	ldr	r2, [r3, #8]
 8007110:	69fb      	ldr	r3, [r7, #28]
 8007112:	005b      	lsls	r3, r3, #1
 8007114:	fa02 f303 	lsl.w	r3, r2, r3
 8007118:	69ba      	ldr	r2, [r7, #24]
 800711a:	4313      	orrs	r3, r2
 800711c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	69ba      	ldr	r2, [r7, #24]
 8007122:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	f003 0303 	and.w	r3, r3, #3
 800712c:	2b02      	cmp	r3, #2
 800712e:	d123      	bne.n	8007178 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007130:	69fb      	ldr	r3, [r7, #28]
 8007132:	08da      	lsrs	r2, r3, #3
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	3208      	adds	r2, #8
 8007138:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800713c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800713e:	69fb      	ldr	r3, [r7, #28]
 8007140:	f003 0307 	and.w	r3, r3, #7
 8007144:	009b      	lsls	r3, r3, #2
 8007146:	220f      	movs	r2, #15
 8007148:	fa02 f303 	lsl.w	r3, r2, r3
 800714c:	43db      	mvns	r3, r3
 800714e:	69ba      	ldr	r2, [r7, #24]
 8007150:	4013      	ands	r3, r2
 8007152:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	691a      	ldr	r2, [r3, #16]
 8007158:	69fb      	ldr	r3, [r7, #28]
 800715a:	f003 0307 	and.w	r3, r3, #7
 800715e:	009b      	lsls	r3, r3, #2
 8007160:	fa02 f303 	lsl.w	r3, r2, r3
 8007164:	69ba      	ldr	r2, [r7, #24]
 8007166:	4313      	orrs	r3, r2
 8007168:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800716a:	69fb      	ldr	r3, [r7, #28]
 800716c:	08da      	lsrs	r2, r3, #3
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	3208      	adds	r2, #8
 8007172:	69b9      	ldr	r1, [r7, #24]
 8007174:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800717e:	69fb      	ldr	r3, [r7, #28]
 8007180:	005b      	lsls	r3, r3, #1
 8007182:	2203      	movs	r2, #3
 8007184:	fa02 f303 	lsl.w	r3, r2, r3
 8007188:	43db      	mvns	r3, r3
 800718a:	69ba      	ldr	r2, [r7, #24]
 800718c:	4013      	ands	r3, r2
 800718e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	685b      	ldr	r3, [r3, #4]
 8007194:	f003 0203 	and.w	r2, r3, #3
 8007198:	69fb      	ldr	r3, [r7, #28]
 800719a:	005b      	lsls	r3, r3, #1
 800719c:	fa02 f303 	lsl.w	r3, r2, r3
 80071a0:	69ba      	ldr	r2, [r7, #24]
 80071a2:	4313      	orrs	r3, r2
 80071a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	69ba      	ldr	r2, [r7, #24]
 80071aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	685b      	ldr	r3, [r3, #4]
 80071b0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	f000 80a2 	beq.w	80072fe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80071ba:	2300      	movs	r3, #0
 80071bc:	60fb      	str	r3, [r7, #12]
 80071be:	4b57      	ldr	r3, [pc, #348]	@ (800731c <HAL_GPIO_Init+0x2e8>)
 80071c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071c2:	4a56      	ldr	r2, [pc, #344]	@ (800731c <HAL_GPIO_Init+0x2e8>)
 80071c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80071c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80071ca:	4b54      	ldr	r3, [pc, #336]	@ (800731c <HAL_GPIO_Init+0x2e8>)
 80071cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80071d2:	60fb      	str	r3, [r7, #12]
 80071d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80071d6:	4a52      	ldr	r2, [pc, #328]	@ (8007320 <HAL_GPIO_Init+0x2ec>)
 80071d8:	69fb      	ldr	r3, [r7, #28]
 80071da:	089b      	lsrs	r3, r3, #2
 80071dc:	3302      	adds	r3, #2
 80071de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80071e4:	69fb      	ldr	r3, [r7, #28]
 80071e6:	f003 0303 	and.w	r3, r3, #3
 80071ea:	009b      	lsls	r3, r3, #2
 80071ec:	220f      	movs	r2, #15
 80071ee:	fa02 f303 	lsl.w	r3, r2, r3
 80071f2:	43db      	mvns	r3, r3
 80071f4:	69ba      	ldr	r2, [r7, #24]
 80071f6:	4013      	ands	r3, r2
 80071f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	4a49      	ldr	r2, [pc, #292]	@ (8007324 <HAL_GPIO_Init+0x2f0>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d019      	beq.n	8007236 <HAL_GPIO_Init+0x202>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	4a48      	ldr	r2, [pc, #288]	@ (8007328 <HAL_GPIO_Init+0x2f4>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d013      	beq.n	8007232 <HAL_GPIO_Init+0x1fe>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	4a47      	ldr	r2, [pc, #284]	@ (800732c <HAL_GPIO_Init+0x2f8>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d00d      	beq.n	800722e <HAL_GPIO_Init+0x1fa>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	4a46      	ldr	r2, [pc, #280]	@ (8007330 <HAL_GPIO_Init+0x2fc>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d007      	beq.n	800722a <HAL_GPIO_Init+0x1f6>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	4a45      	ldr	r2, [pc, #276]	@ (8007334 <HAL_GPIO_Init+0x300>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d101      	bne.n	8007226 <HAL_GPIO_Init+0x1f2>
 8007222:	2304      	movs	r3, #4
 8007224:	e008      	b.n	8007238 <HAL_GPIO_Init+0x204>
 8007226:	2307      	movs	r3, #7
 8007228:	e006      	b.n	8007238 <HAL_GPIO_Init+0x204>
 800722a:	2303      	movs	r3, #3
 800722c:	e004      	b.n	8007238 <HAL_GPIO_Init+0x204>
 800722e:	2302      	movs	r3, #2
 8007230:	e002      	b.n	8007238 <HAL_GPIO_Init+0x204>
 8007232:	2301      	movs	r3, #1
 8007234:	e000      	b.n	8007238 <HAL_GPIO_Init+0x204>
 8007236:	2300      	movs	r3, #0
 8007238:	69fa      	ldr	r2, [r7, #28]
 800723a:	f002 0203 	and.w	r2, r2, #3
 800723e:	0092      	lsls	r2, r2, #2
 8007240:	4093      	lsls	r3, r2
 8007242:	69ba      	ldr	r2, [r7, #24]
 8007244:	4313      	orrs	r3, r2
 8007246:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007248:	4935      	ldr	r1, [pc, #212]	@ (8007320 <HAL_GPIO_Init+0x2ec>)
 800724a:	69fb      	ldr	r3, [r7, #28]
 800724c:	089b      	lsrs	r3, r3, #2
 800724e:	3302      	adds	r3, #2
 8007250:	69ba      	ldr	r2, [r7, #24]
 8007252:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007256:	4b38      	ldr	r3, [pc, #224]	@ (8007338 <HAL_GPIO_Init+0x304>)
 8007258:	689b      	ldr	r3, [r3, #8]
 800725a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800725c:	693b      	ldr	r3, [r7, #16]
 800725e:	43db      	mvns	r3, r3
 8007260:	69ba      	ldr	r2, [r7, #24]
 8007262:	4013      	ands	r3, r2
 8007264:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	685b      	ldr	r3, [r3, #4]
 800726a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800726e:	2b00      	cmp	r3, #0
 8007270:	d003      	beq.n	800727a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8007272:	69ba      	ldr	r2, [r7, #24]
 8007274:	693b      	ldr	r3, [r7, #16]
 8007276:	4313      	orrs	r3, r2
 8007278:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800727a:	4a2f      	ldr	r2, [pc, #188]	@ (8007338 <HAL_GPIO_Init+0x304>)
 800727c:	69bb      	ldr	r3, [r7, #24]
 800727e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007280:	4b2d      	ldr	r3, [pc, #180]	@ (8007338 <HAL_GPIO_Init+0x304>)
 8007282:	68db      	ldr	r3, [r3, #12]
 8007284:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	43db      	mvns	r3, r3
 800728a:	69ba      	ldr	r2, [r7, #24]
 800728c:	4013      	ands	r3, r2
 800728e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	685b      	ldr	r3, [r3, #4]
 8007294:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007298:	2b00      	cmp	r3, #0
 800729a:	d003      	beq.n	80072a4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800729c:	69ba      	ldr	r2, [r7, #24]
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	4313      	orrs	r3, r2
 80072a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80072a4:	4a24      	ldr	r2, [pc, #144]	@ (8007338 <HAL_GPIO_Init+0x304>)
 80072a6:	69bb      	ldr	r3, [r7, #24]
 80072a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80072aa:	4b23      	ldr	r3, [pc, #140]	@ (8007338 <HAL_GPIO_Init+0x304>)
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	43db      	mvns	r3, r3
 80072b4:	69ba      	ldr	r2, [r7, #24]
 80072b6:	4013      	ands	r3, r2
 80072b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	685b      	ldr	r3, [r3, #4]
 80072be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d003      	beq.n	80072ce <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80072c6:	69ba      	ldr	r2, [r7, #24]
 80072c8:	693b      	ldr	r3, [r7, #16]
 80072ca:	4313      	orrs	r3, r2
 80072cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80072ce:	4a1a      	ldr	r2, [pc, #104]	@ (8007338 <HAL_GPIO_Init+0x304>)
 80072d0:	69bb      	ldr	r3, [r7, #24]
 80072d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80072d4:	4b18      	ldr	r3, [pc, #96]	@ (8007338 <HAL_GPIO_Init+0x304>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	43db      	mvns	r3, r3
 80072de:	69ba      	ldr	r2, [r7, #24]
 80072e0:	4013      	ands	r3, r2
 80072e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d003      	beq.n	80072f8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80072f0:	69ba      	ldr	r2, [r7, #24]
 80072f2:	693b      	ldr	r3, [r7, #16]
 80072f4:	4313      	orrs	r3, r2
 80072f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80072f8:	4a0f      	ldr	r2, [pc, #60]	@ (8007338 <HAL_GPIO_Init+0x304>)
 80072fa:	69bb      	ldr	r3, [r7, #24]
 80072fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80072fe:	69fb      	ldr	r3, [r7, #28]
 8007300:	3301      	adds	r3, #1
 8007302:	61fb      	str	r3, [r7, #28]
 8007304:	69fb      	ldr	r3, [r7, #28]
 8007306:	2b0f      	cmp	r3, #15
 8007308:	f67f aea2 	bls.w	8007050 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800730c:	bf00      	nop
 800730e:	bf00      	nop
 8007310:	3724      	adds	r7, #36	@ 0x24
 8007312:	46bd      	mov	sp, r7
 8007314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007318:	4770      	bx	lr
 800731a:	bf00      	nop
 800731c:	40023800 	.word	0x40023800
 8007320:	40013800 	.word	0x40013800
 8007324:	40020000 	.word	0x40020000
 8007328:	40020400 	.word	0x40020400
 800732c:	40020800 	.word	0x40020800
 8007330:	40020c00 	.word	0x40020c00
 8007334:	40021000 	.word	0x40021000
 8007338:	40013c00 	.word	0x40013c00

0800733c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800733c:	b480      	push	{r7}
 800733e:	b085      	sub	sp, #20
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
 8007344:	460b      	mov	r3, r1
 8007346:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	691a      	ldr	r2, [r3, #16]
 800734c:	887b      	ldrh	r3, [r7, #2]
 800734e:	4013      	ands	r3, r2
 8007350:	2b00      	cmp	r3, #0
 8007352:	d002      	beq.n	800735a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007354:	2301      	movs	r3, #1
 8007356:	73fb      	strb	r3, [r7, #15]
 8007358:	e001      	b.n	800735e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800735a:	2300      	movs	r3, #0
 800735c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800735e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007360:	4618      	mov	r0, r3
 8007362:	3714      	adds	r7, #20
 8007364:	46bd      	mov	sp, r7
 8007366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736a:	4770      	bx	lr

0800736c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800736c:	b480      	push	{r7}
 800736e:	b083      	sub	sp, #12
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
 8007374:	460b      	mov	r3, r1
 8007376:	807b      	strh	r3, [r7, #2]
 8007378:	4613      	mov	r3, r2
 800737a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800737c:	787b      	ldrb	r3, [r7, #1]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d003      	beq.n	800738a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007382:	887a      	ldrh	r2, [r7, #2]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007388:	e003      	b.n	8007392 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800738a:	887b      	ldrh	r3, [r7, #2]
 800738c:	041a      	lsls	r2, r3, #16
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	619a      	str	r2, [r3, #24]
}
 8007392:	bf00      	nop
 8007394:	370c      	adds	r7, #12
 8007396:	46bd      	mov	sp, r7
 8007398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739c:	4770      	bx	lr

0800739e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800739e:	b480      	push	{r7}
 80073a0:	b085      	sub	sp, #20
 80073a2:	af00      	add	r7, sp, #0
 80073a4:	6078      	str	r0, [r7, #4]
 80073a6:	460b      	mov	r3, r1
 80073a8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	695b      	ldr	r3, [r3, #20]
 80073ae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80073b0:	887a      	ldrh	r2, [r7, #2]
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	4013      	ands	r3, r2
 80073b6:	041a      	lsls	r2, r3, #16
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	43d9      	mvns	r1, r3
 80073bc:	887b      	ldrh	r3, [r7, #2]
 80073be:	400b      	ands	r3, r1
 80073c0:	431a      	orrs	r2, r3
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	619a      	str	r2, [r3, #24]
}
 80073c6:	bf00      	nop
 80073c8:	3714      	adds	r7, #20
 80073ca:	46bd      	mov	sp, r7
 80073cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d0:	4770      	bx	lr
	...

080073d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b082      	sub	sp, #8
 80073d8:	af00      	add	r7, sp, #0
 80073da:	4603      	mov	r3, r0
 80073dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80073de:	4b08      	ldr	r3, [pc, #32]	@ (8007400 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80073e0:	695a      	ldr	r2, [r3, #20]
 80073e2:	88fb      	ldrh	r3, [r7, #6]
 80073e4:	4013      	ands	r3, r2
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d006      	beq.n	80073f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80073ea:	4a05      	ldr	r2, [pc, #20]	@ (8007400 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80073ec:	88fb      	ldrh	r3, [r7, #6]
 80073ee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80073f0:	88fb      	ldrh	r3, [r7, #6]
 80073f2:	4618      	mov	r0, r3
 80073f4:	f7fd fdc6 	bl	8004f84 <HAL_GPIO_EXTI_Callback>
  }
}
 80073f8:	bf00      	nop
 80073fa:	3708      	adds	r7, #8
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}
 8007400:	40013c00 	.word	0x40013c00

08007404 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b084      	sub	sp, #16
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d101      	bne.n	8007416 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007412:	2301      	movs	r3, #1
 8007414:	e12b      	b.n	800766e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800741c:	b2db      	uxtb	r3, r3
 800741e:	2b00      	cmp	r3, #0
 8007420:	d106      	bne.n	8007430 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2200      	movs	r2, #0
 8007426:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	f7fe f874 	bl	8005518 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2224      	movs	r2, #36	@ 0x24
 8007434:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	681a      	ldr	r2, [r3, #0]
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f022 0201 	bic.w	r2, r2, #1
 8007446:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	681a      	ldr	r2, [r3, #0]
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007456:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	681a      	ldr	r2, [r3, #0]
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007466:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007468:	f005 fa34 	bl	800c8d4 <HAL_RCC_GetPCLK1Freq>
 800746c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	685b      	ldr	r3, [r3, #4]
 8007472:	4a81      	ldr	r2, [pc, #516]	@ (8007678 <HAL_I2C_Init+0x274>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d807      	bhi.n	8007488 <HAL_I2C_Init+0x84>
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	4a80      	ldr	r2, [pc, #512]	@ (800767c <HAL_I2C_Init+0x278>)
 800747c:	4293      	cmp	r3, r2
 800747e:	bf94      	ite	ls
 8007480:	2301      	movls	r3, #1
 8007482:	2300      	movhi	r3, #0
 8007484:	b2db      	uxtb	r3, r3
 8007486:	e006      	b.n	8007496 <HAL_I2C_Init+0x92>
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	4a7d      	ldr	r2, [pc, #500]	@ (8007680 <HAL_I2C_Init+0x27c>)
 800748c:	4293      	cmp	r3, r2
 800748e:	bf94      	ite	ls
 8007490:	2301      	movls	r3, #1
 8007492:	2300      	movhi	r3, #0
 8007494:	b2db      	uxtb	r3, r3
 8007496:	2b00      	cmp	r3, #0
 8007498:	d001      	beq.n	800749e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800749a:	2301      	movs	r3, #1
 800749c:	e0e7      	b.n	800766e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	4a78      	ldr	r2, [pc, #480]	@ (8007684 <HAL_I2C_Init+0x280>)
 80074a2:	fba2 2303 	umull	r2, r3, r2, r3
 80074a6:	0c9b      	lsrs	r3, r3, #18
 80074a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	685b      	ldr	r3, [r3, #4]
 80074b0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	68ba      	ldr	r2, [r7, #8]
 80074ba:	430a      	orrs	r2, r1
 80074bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	6a1b      	ldr	r3, [r3, #32]
 80074c4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	685b      	ldr	r3, [r3, #4]
 80074cc:	4a6a      	ldr	r2, [pc, #424]	@ (8007678 <HAL_I2C_Init+0x274>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d802      	bhi.n	80074d8 <HAL_I2C_Init+0xd4>
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	3301      	adds	r3, #1
 80074d6:	e009      	b.n	80074ec <HAL_I2C_Init+0xe8>
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80074de:	fb02 f303 	mul.w	r3, r2, r3
 80074e2:	4a69      	ldr	r2, [pc, #420]	@ (8007688 <HAL_I2C_Init+0x284>)
 80074e4:	fba2 2303 	umull	r2, r3, r2, r3
 80074e8:	099b      	lsrs	r3, r3, #6
 80074ea:	3301      	adds	r3, #1
 80074ec:	687a      	ldr	r2, [r7, #4]
 80074ee:	6812      	ldr	r2, [r2, #0]
 80074f0:	430b      	orrs	r3, r1
 80074f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	69db      	ldr	r3, [r3, #28]
 80074fa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80074fe:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	685b      	ldr	r3, [r3, #4]
 8007506:	495c      	ldr	r1, [pc, #368]	@ (8007678 <HAL_I2C_Init+0x274>)
 8007508:	428b      	cmp	r3, r1
 800750a:	d819      	bhi.n	8007540 <HAL_I2C_Init+0x13c>
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	1e59      	subs	r1, r3, #1
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	685b      	ldr	r3, [r3, #4]
 8007514:	005b      	lsls	r3, r3, #1
 8007516:	fbb1 f3f3 	udiv	r3, r1, r3
 800751a:	1c59      	adds	r1, r3, #1
 800751c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8007520:	400b      	ands	r3, r1
 8007522:	2b00      	cmp	r3, #0
 8007524:	d00a      	beq.n	800753c <HAL_I2C_Init+0x138>
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	1e59      	subs	r1, r3, #1
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	685b      	ldr	r3, [r3, #4]
 800752e:	005b      	lsls	r3, r3, #1
 8007530:	fbb1 f3f3 	udiv	r3, r1, r3
 8007534:	3301      	adds	r3, #1
 8007536:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800753a:	e051      	b.n	80075e0 <HAL_I2C_Init+0x1dc>
 800753c:	2304      	movs	r3, #4
 800753e:	e04f      	b.n	80075e0 <HAL_I2C_Init+0x1dc>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	689b      	ldr	r3, [r3, #8]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d111      	bne.n	800756c <HAL_I2C_Init+0x168>
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	1e58      	subs	r0, r3, #1
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6859      	ldr	r1, [r3, #4]
 8007550:	460b      	mov	r3, r1
 8007552:	005b      	lsls	r3, r3, #1
 8007554:	440b      	add	r3, r1
 8007556:	fbb0 f3f3 	udiv	r3, r0, r3
 800755a:	3301      	adds	r3, #1
 800755c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007560:	2b00      	cmp	r3, #0
 8007562:	bf0c      	ite	eq
 8007564:	2301      	moveq	r3, #1
 8007566:	2300      	movne	r3, #0
 8007568:	b2db      	uxtb	r3, r3
 800756a:	e012      	b.n	8007592 <HAL_I2C_Init+0x18e>
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	1e58      	subs	r0, r3, #1
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6859      	ldr	r1, [r3, #4]
 8007574:	460b      	mov	r3, r1
 8007576:	009b      	lsls	r3, r3, #2
 8007578:	440b      	add	r3, r1
 800757a:	0099      	lsls	r1, r3, #2
 800757c:	440b      	add	r3, r1
 800757e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007582:	3301      	adds	r3, #1
 8007584:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007588:	2b00      	cmp	r3, #0
 800758a:	bf0c      	ite	eq
 800758c:	2301      	moveq	r3, #1
 800758e:	2300      	movne	r3, #0
 8007590:	b2db      	uxtb	r3, r3
 8007592:	2b00      	cmp	r3, #0
 8007594:	d001      	beq.n	800759a <HAL_I2C_Init+0x196>
 8007596:	2301      	movs	r3, #1
 8007598:	e022      	b.n	80075e0 <HAL_I2C_Init+0x1dc>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	689b      	ldr	r3, [r3, #8]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d10e      	bne.n	80075c0 <HAL_I2C_Init+0x1bc>
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	1e58      	subs	r0, r3, #1
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6859      	ldr	r1, [r3, #4]
 80075aa:	460b      	mov	r3, r1
 80075ac:	005b      	lsls	r3, r3, #1
 80075ae:	440b      	add	r3, r1
 80075b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80075b4:	3301      	adds	r3, #1
 80075b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80075ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80075be:	e00f      	b.n	80075e0 <HAL_I2C_Init+0x1dc>
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	1e58      	subs	r0, r3, #1
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6859      	ldr	r1, [r3, #4]
 80075c8:	460b      	mov	r3, r1
 80075ca:	009b      	lsls	r3, r3, #2
 80075cc:	440b      	add	r3, r1
 80075ce:	0099      	lsls	r1, r3, #2
 80075d0:	440b      	add	r3, r1
 80075d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80075d6:	3301      	adds	r3, #1
 80075d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80075dc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80075e0:	6879      	ldr	r1, [r7, #4]
 80075e2:	6809      	ldr	r1, [r1, #0]
 80075e4:	4313      	orrs	r3, r2
 80075e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	69da      	ldr	r2, [r3, #28]
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6a1b      	ldr	r3, [r3, #32]
 80075fa:	431a      	orrs	r2, r3
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	430a      	orrs	r2, r1
 8007602:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	689b      	ldr	r3, [r3, #8]
 800760a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800760e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8007612:	687a      	ldr	r2, [r7, #4]
 8007614:	6911      	ldr	r1, [r2, #16]
 8007616:	687a      	ldr	r2, [r7, #4]
 8007618:	68d2      	ldr	r2, [r2, #12]
 800761a:	4311      	orrs	r1, r2
 800761c:	687a      	ldr	r2, [r7, #4]
 800761e:	6812      	ldr	r2, [r2, #0]
 8007620:	430b      	orrs	r3, r1
 8007622:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	68db      	ldr	r3, [r3, #12]
 800762a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	695a      	ldr	r2, [r3, #20]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	699b      	ldr	r3, [r3, #24]
 8007636:	431a      	orrs	r2, r3
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	430a      	orrs	r2, r1
 800763e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	681a      	ldr	r2, [r3, #0]
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f042 0201 	orr.w	r2, r2, #1
 800764e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2200      	movs	r2, #0
 8007654:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2220      	movs	r2, #32
 800765a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2200      	movs	r2, #0
 8007662:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2200      	movs	r2, #0
 8007668:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800766c:	2300      	movs	r3, #0
}
 800766e:	4618      	mov	r0, r3
 8007670:	3710      	adds	r7, #16
 8007672:	46bd      	mov	sp, r7
 8007674:	bd80      	pop	{r7, pc}
 8007676:	bf00      	nop
 8007678:	000186a0 	.word	0x000186a0
 800767c:	001e847f 	.word	0x001e847f
 8007680:	003d08ff 	.word	0x003d08ff
 8007684:	431bde83 	.word	0x431bde83
 8007688:	10624dd3 	.word	0x10624dd3

0800768c <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 800768c:	b480      	push	{r7}
 800768e:	b083      	sub	sp, #12
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	695b      	ldr	r3, [r3, #20]
 800769a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800769e:	2b80      	cmp	r3, #128	@ 0x80
 80076a0:	d103      	bne.n	80076aa <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	2200      	movs	r2, #0
 80076a8:	611a      	str	r2, [r3, #16]
  }
}
 80076aa:	bf00      	nop
 80076ac:	370c      	adds	r7, #12
 80076ae:	46bd      	mov	sp, r7
 80076b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b4:	4770      	bx	lr
	...

080076b8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b088      	sub	sp, #32
 80076bc:	af02      	add	r7, sp, #8
 80076be:	60f8      	str	r0, [r7, #12]
 80076c0:	607a      	str	r2, [r7, #4]
 80076c2:	461a      	mov	r2, r3
 80076c4:	460b      	mov	r3, r1
 80076c6:	817b      	strh	r3, [r7, #10]
 80076c8:	4613      	mov	r3, r2
 80076ca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80076cc:	f7fe fa38 	bl	8005b40 <HAL_GetTick>
 80076d0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80076d8:	b2db      	uxtb	r3, r3
 80076da:	2b20      	cmp	r3, #32
 80076dc:	f040 80e0 	bne.w	80078a0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	9300      	str	r3, [sp, #0]
 80076e4:	2319      	movs	r3, #25
 80076e6:	2201      	movs	r2, #1
 80076e8:	4970      	ldr	r1, [pc, #448]	@ (80078ac <HAL_I2C_Master_Transmit+0x1f4>)
 80076ea:	68f8      	ldr	r0, [r7, #12]
 80076ec:	f002 ffe0 	bl	800a6b0 <I2C_WaitOnFlagUntilTimeout>
 80076f0:	4603      	mov	r3, r0
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d001      	beq.n	80076fa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80076f6:	2302      	movs	r3, #2
 80076f8:	e0d3      	b.n	80078a2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007700:	2b01      	cmp	r3, #1
 8007702:	d101      	bne.n	8007708 <HAL_I2C_Master_Transmit+0x50>
 8007704:	2302      	movs	r3, #2
 8007706:	e0cc      	b.n	80078a2 <HAL_I2C_Master_Transmit+0x1ea>
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	2201      	movs	r2, #1
 800770c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f003 0301 	and.w	r3, r3, #1
 800771a:	2b01      	cmp	r3, #1
 800771c:	d007      	beq.n	800772e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	681a      	ldr	r2, [r3, #0]
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f042 0201 	orr.w	r2, r2, #1
 800772c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	681a      	ldr	r2, [r3, #0]
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800773c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	2221      	movs	r2, #33	@ 0x21
 8007742:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	2210      	movs	r2, #16
 800774a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	2200      	movs	r2, #0
 8007752:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	687a      	ldr	r2, [r7, #4]
 8007758:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	893a      	ldrh	r2, [r7, #8]
 800775e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007764:	b29a      	uxth	r2, r3
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	4a50      	ldr	r2, [pc, #320]	@ (80078b0 <HAL_I2C_Master_Transmit+0x1f8>)
 800776e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007770:	8979      	ldrh	r1, [r7, #10]
 8007772:	697b      	ldr	r3, [r7, #20]
 8007774:	6a3a      	ldr	r2, [r7, #32]
 8007776:	68f8      	ldr	r0, [r7, #12]
 8007778:	f002 fbd6 	bl	8009f28 <I2C_MasterRequestWrite>
 800777c:	4603      	mov	r3, r0
 800777e:	2b00      	cmp	r3, #0
 8007780:	d001      	beq.n	8007786 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8007782:	2301      	movs	r3, #1
 8007784:	e08d      	b.n	80078a2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007786:	2300      	movs	r3, #0
 8007788:	613b      	str	r3, [r7, #16]
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	695b      	ldr	r3, [r3, #20]
 8007790:	613b      	str	r3, [r7, #16]
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	699b      	ldr	r3, [r3, #24]
 8007798:	613b      	str	r3, [r7, #16]
 800779a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800779c:	e066      	b.n	800786c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800779e:	697a      	ldr	r2, [r7, #20]
 80077a0:	6a39      	ldr	r1, [r7, #32]
 80077a2:	68f8      	ldr	r0, [r7, #12]
 80077a4:	f003 f89e 	bl	800a8e4 <I2C_WaitOnTXEFlagUntilTimeout>
 80077a8:	4603      	mov	r3, r0
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d00d      	beq.n	80077ca <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077b2:	2b04      	cmp	r3, #4
 80077b4:	d107      	bne.n	80077c6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	681a      	ldr	r2, [r3, #0]
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80077c4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80077c6:	2301      	movs	r3, #1
 80077c8:	e06b      	b.n	80078a2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077ce:	781a      	ldrb	r2, [r3, #0]
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077da:	1c5a      	adds	r2, r3, #1
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80077e4:	b29b      	uxth	r3, r3
 80077e6:	3b01      	subs	r3, #1
 80077e8:	b29a      	uxth	r2, r3
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80077f2:	3b01      	subs	r3, #1
 80077f4:	b29a      	uxth	r2, r3
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	695b      	ldr	r3, [r3, #20]
 8007800:	f003 0304 	and.w	r3, r3, #4
 8007804:	2b04      	cmp	r3, #4
 8007806:	d11b      	bne.n	8007840 <HAL_I2C_Master_Transmit+0x188>
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800780c:	2b00      	cmp	r3, #0
 800780e:	d017      	beq.n	8007840 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007814:	781a      	ldrb	r2, [r3, #0]
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007820:	1c5a      	adds	r2, r3, #1
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800782a:	b29b      	uxth	r3, r3
 800782c:	3b01      	subs	r3, #1
 800782e:	b29a      	uxth	r2, r3
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007838:	3b01      	subs	r3, #1
 800783a:	b29a      	uxth	r2, r3
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007840:	697a      	ldr	r2, [r7, #20]
 8007842:	6a39      	ldr	r1, [r7, #32]
 8007844:	68f8      	ldr	r0, [r7, #12]
 8007846:	f003 f895 	bl	800a974 <I2C_WaitOnBTFFlagUntilTimeout>
 800784a:	4603      	mov	r3, r0
 800784c:	2b00      	cmp	r3, #0
 800784e:	d00d      	beq.n	800786c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007854:	2b04      	cmp	r3, #4
 8007856:	d107      	bne.n	8007868 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	681a      	ldr	r2, [r3, #0]
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007866:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007868:	2301      	movs	r3, #1
 800786a:	e01a      	b.n	80078a2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007870:	2b00      	cmp	r3, #0
 8007872:	d194      	bne.n	800779e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	681a      	ldr	r2, [r3, #0]
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007882:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	2220      	movs	r2, #32
 8007888:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	2200      	movs	r2, #0
 8007890:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	2200      	movs	r2, #0
 8007898:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800789c:	2300      	movs	r3, #0
 800789e:	e000      	b.n	80078a2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80078a0:	2302      	movs	r3, #2
  }
}
 80078a2:	4618      	mov	r0, r3
 80078a4:	3718      	adds	r7, #24
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}
 80078aa:	bf00      	nop
 80078ac:	00100002 	.word	0x00100002
 80078b0:	ffff0000 	.word	0xffff0000

080078b4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b088      	sub	sp, #32
 80078b8:	af02      	add	r7, sp, #8
 80078ba:	60f8      	str	r0, [r7, #12]
 80078bc:	4608      	mov	r0, r1
 80078be:	4611      	mov	r1, r2
 80078c0:	461a      	mov	r2, r3
 80078c2:	4603      	mov	r3, r0
 80078c4:	817b      	strh	r3, [r7, #10]
 80078c6:	460b      	mov	r3, r1
 80078c8:	813b      	strh	r3, [r7, #8]
 80078ca:	4613      	mov	r3, r2
 80078cc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80078ce:	f7fe f937 	bl	8005b40 <HAL_GetTick>
 80078d2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80078da:	b2db      	uxtb	r3, r3
 80078dc:	2b20      	cmp	r3, #32
 80078de:	f040 80d9 	bne.w	8007a94 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80078e2:	697b      	ldr	r3, [r7, #20]
 80078e4:	9300      	str	r3, [sp, #0]
 80078e6:	2319      	movs	r3, #25
 80078e8:	2201      	movs	r2, #1
 80078ea:	496d      	ldr	r1, [pc, #436]	@ (8007aa0 <HAL_I2C_Mem_Write+0x1ec>)
 80078ec:	68f8      	ldr	r0, [r7, #12]
 80078ee:	f002 fedf 	bl	800a6b0 <I2C_WaitOnFlagUntilTimeout>
 80078f2:	4603      	mov	r3, r0
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d001      	beq.n	80078fc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80078f8:	2302      	movs	r3, #2
 80078fa:	e0cc      	b.n	8007a96 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007902:	2b01      	cmp	r3, #1
 8007904:	d101      	bne.n	800790a <HAL_I2C_Mem_Write+0x56>
 8007906:	2302      	movs	r3, #2
 8007908:	e0c5      	b.n	8007a96 <HAL_I2C_Mem_Write+0x1e2>
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	2201      	movs	r2, #1
 800790e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f003 0301 	and.w	r3, r3, #1
 800791c:	2b01      	cmp	r3, #1
 800791e:	d007      	beq.n	8007930 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	681a      	ldr	r2, [r3, #0]
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f042 0201 	orr.w	r2, r2, #1
 800792e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	681a      	ldr	r2, [r3, #0]
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800793e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	2221      	movs	r2, #33	@ 0x21
 8007944:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	2240      	movs	r2, #64	@ 0x40
 800794c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	2200      	movs	r2, #0
 8007954:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	6a3a      	ldr	r2, [r7, #32]
 800795a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007960:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007966:	b29a      	uxth	r2, r3
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	4a4d      	ldr	r2, [pc, #308]	@ (8007aa4 <HAL_I2C_Mem_Write+0x1f0>)
 8007970:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007972:	88f8      	ldrh	r0, [r7, #6]
 8007974:	893a      	ldrh	r2, [r7, #8]
 8007976:	8979      	ldrh	r1, [r7, #10]
 8007978:	697b      	ldr	r3, [r7, #20]
 800797a:	9301      	str	r3, [sp, #4]
 800797c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800797e:	9300      	str	r3, [sp, #0]
 8007980:	4603      	mov	r3, r0
 8007982:	68f8      	ldr	r0, [r7, #12]
 8007984:	f002 fb52 	bl	800a02c <I2C_RequestMemoryWrite>
 8007988:	4603      	mov	r3, r0
 800798a:	2b00      	cmp	r3, #0
 800798c:	d052      	beq.n	8007a34 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800798e:	2301      	movs	r3, #1
 8007990:	e081      	b.n	8007a96 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007992:	697a      	ldr	r2, [r7, #20]
 8007994:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007996:	68f8      	ldr	r0, [r7, #12]
 8007998:	f002 ffa4 	bl	800a8e4 <I2C_WaitOnTXEFlagUntilTimeout>
 800799c:	4603      	mov	r3, r0
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d00d      	beq.n	80079be <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079a6:	2b04      	cmp	r3, #4
 80079a8:	d107      	bne.n	80079ba <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	681a      	ldr	r2, [r3, #0]
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80079b8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80079ba:	2301      	movs	r3, #1
 80079bc:	e06b      	b.n	8007a96 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079c2:	781a      	ldrb	r2, [r3, #0]
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079ce:	1c5a      	adds	r2, r3, #1
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80079d8:	3b01      	subs	r3, #1
 80079da:	b29a      	uxth	r2, r3
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80079e4:	b29b      	uxth	r3, r3
 80079e6:	3b01      	subs	r3, #1
 80079e8:	b29a      	uxth	r2, r3
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	695b      	ldr	r3, [r3, #20]
 80079f4:	f003 0304 	and.w	r3, r3, #4
 80079f8:	2b04      	cmp	r3, #4
 80079fa:	d11b      	bne.n	8007a34 <HAL_I2C_Mem_Write+0x180>
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d017      	beq.n	8007a34 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a08:	781a      	ldrb	r2, [r3, #0]
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a14:	1c5a      	adds	r2, r3, #1
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a1e:	3b01      	subs	r3, #1
 8007a20:	b29a      	uxth	r2, r3
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a2a:	b29b      	uxth	r3, r3
 8007a2c:	3b01      	subs	r3, #1
 8007a2e:	b29a      	uxth	r2, r3
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d1aa      	bne.n	8007992 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007a3c:	697a      	ldr	r2, [r7, #20]
 8007a3e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007a40:	68f8      	ldr	r0, [r7, #12]
 8007a42:	f002 ff97 	bl	800a974 <I2C_WaitOnBTFFlagUntilTimeout>
 8007a46:	4603      	mov	r3, r0
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d00d      	beq.n	8007a68 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a50:	2b04      	cmp	r3, #4
 8007a52:	d107      	bne.n	8007a64 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	681a      	ldr	r2, [r3, #0]
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007a62:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007a64:	2301      	movs	r3, #1
 8007a66:	e016      	b.n	8007a96 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	681a      	ldr	r2, [r3, #0]
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007a76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	2220      	movs	r2, #32
 8007a7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	2200      	movs	r2, #0
 8007a84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007a90:	2300      	movs	r3, #0
 8007a92:	e000      	b.n	8007a96 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007a94:	2302      	movs	r3, #2
  }
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	3718      	adds	r7, #24
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}
 8007a9e:	bf00      	nop
 8007aa0:	00100002 	.word	0x00100002
 8007aa4:	ffff0000 	.word	0xffff0000

08007aa8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b08c      	sub	sp, #48	@ 0x30
 8007aac:	af02      	add	r7, sp, #8
 8007aae:	60f8      	str	r0, [r7, #12]
 8007ab0:	4608      	mov	r0, r1
 8007ab2:	4611      	mov	r1, r2
 8007ab4:	461a      	mov	r2, r3
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	817b      	strh	r3, [r7, #10]
 8007aba:	460b      	mov	r3, r1
 8007abc:	813b      	strh	r3, [r7, #8]
 8007abe:	4613      	mov	r3, r2
 8007ac0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007ac2:	f7fe f83d 	bl	8005b40 <HAL_GetTick>
 8007ac6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ace:	b2db      	uxtb	r3, r3
 8007ad0:	2b20      	cmp	r3, #32
 8007ad2:	f040 8214 	bne.w	8007efe <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ad8:	9300      	str	r3, [sp, #0]
 8007ada:	2319      	movs	r3, #25
 8007adc:	2201      	movs	r2, #1
 8007ade:	497b      	ldr	r1, [pc, #492]	@ (8007ccc <HAL_I2C_Mem_Read+0x224>)
 8007ae0:	68f8      	ldr	r0, [r7, #12]
 8007ae2:	f002 fde5 	bl	800a6b0 <I2C_WaitOnFlagUntilTimeout>
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d001      	beq.n	8007af0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8007aec:	2302      	movs	r3, #2
 8007aee:	e207      	b.n	8007f00 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007af6:	2b01      	cmp	r3, #1
 8007af8:	d101      	bne.n	8007afe <HAL_I2C_Mem_Read+0x56>
 8007afa:	2302      	movs	r3, #2
 8007afc:	e200      	b.n	8007f00 <HAL_I2C_Mem_Read+0x458>
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	2201      	movs	r2, #1
 8007b02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f003 0301 	and.w	r3, r3, #1
 8007b10:	2b01      	cmp	r3, #1
 8007b12:	d007      	beq.n	8007b24 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	681a      	ldr	r2, [r3, #0]
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f042 0201 	orr.w	r2, r2, #1
 8007b22:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	681a      	ldr	r2, [r3, #0]
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007b32:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	2222      	movs	r2, #34	@ 0x22
 8007b38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	2240      	movs	r2, #64	@ 0x40
 8007b40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	2200      	movs	r2, #0
 8007b48:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b4e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8007b54:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b5a:	b29a      	uxth	r2, r3
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	4a5b      	ldr	r2, [pc, #364]	@ (8007cd0 <HAL_I2C_Mem_Read+0x228>)
 8007b64:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007b66:	88f8      	ldrh	r0, [r7, #6]
 8007b68:	893a      	ldrh	r2, [r7, #8]
 8007b6a:	8979      	ldrh	r1, [r7, #10]
 8007b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b6e:	9301      	str	r3, [sp, #4]
 8007b70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b72:	9300      	str	r3, [sp, #0]
 8007b74:	4603      	mov	r3, r0
 8007b76:	68f8      	ldr	r0, [r7, #12]
 8007b78:	f002 faee 	bl	800a158 <I2C_RequestMemoryRead>
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d001      	beq.n	8007b86 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8007b82:	2301      	movs	r3, #1
 8007b84:	e1bc      	b.n	8007f00 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d113      	bne.n	8007bb6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b8e:	2300      	movs	r3, #0
 8007b90:	623b      	str	r3, [r7, #32]
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	695b      	ldr	r3, [r3, #20]
 8007b98:	623b      	str	r3, [r7, #32]
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	699b      	ldr	r3, [r3, #24]
 8007ba0:	623b      	str	r3, [r7, #32]
 8007ba2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	681a      	ldr	r2, [r3, #0]
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007bb2:	601a      	str	r2, [r3, #0]
 8007bb4:	e190      	b.n	8007ed8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007bba:	2b01      	cmp	r3, #1
 8007bbc:	d11b      	bne.n	8007bf6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	681a      	ldr	r2, [r3, #0]
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007bcc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007bce:	2300      	movs	r3, #0
 8007bd0:	61fb      	str	r3, [r7, #28]
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	695b      	ldr	r3, [r3, #20]
 8007bd8:	61fb      	str	r3, [r7, #28]
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	699b      	ldr	r3, [r3, #24]
 8007be0:	61fb      	str	r3, [r7, #28]
 8007be2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	681a      	ldr	r2, [r3, #0]
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007bf2:	601a      	str	r2, [r3, #0]
 8007bf4:	e170      	b.n	8007ed8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007bfa:	2b02      	cmp	r3, #2
 8007bfc:	d11b      	bne.n	8007c36 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	681a      	ldr	r2, [r3, #0]
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007c0c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	681a      	ldr	r2, [r3, #0]
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007c1c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c1e:	2300      	movs	r3, #0
 8007c20:	61bb      	str	r3, [r7, #24]
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	695b      	ldr	r3, [r3, #20]
 8007c28:	61bb      	str	r3, [r7, #24]
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	699b      	ldr	r3, [r3, #24]
 8007c30:	61bb      	str	r3, [r7, #24]
 8007c32:	69bb      	ldr	r3, [r7, #24]
 8007c34:	e150      	b.n	8007ed8 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c36:	2300      	movs	r3, #0
 8007c38:	617b      	str	r3, [r7, #20]
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	695b      	ldr	r3, [r3, #20]
 8007c40:	617b      	str	r3, [r7, #20]
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	699b      	ldr	r3, [r3, #24]
 8007c48:	617b      	str	r3, [r7, #20]
 8007c4a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007c4c:	e144      	b.n	8007ed8 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c52:	2b03      	cmp	r3, #3
 8007c54:	f200 80f1 	bhi.w	8007e3a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c5c:	2b01      	cmp	r3, #1
 8007c5e:	d123      	bne.n	8007ca8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007c60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c62:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007c64:	68f8      	ldr	r0, [r7, #12]
 8007c66:	f002 feff 	bl	800aa68 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d001      	beq.n	8007c74 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8007c70:	2301      	movs	r3, #1
 8007c72:	e145      	b.n	8007f00 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	691a      	ldr	r2, [r3, #16]
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c7e:	b2d2      	uxtb	r2, r2
 8007c80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c86:	1c5a      	adds	r2, r3, #1
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c90:	3b01      	subs	r3, #1
 8007c92:	b29a      	uxth	r2, r3
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c9c:	b29b      	uxth	r3, r3
 8007c9e:	3b01      	subs	r3, #1
 8007ca0:	b29a      	uxth	r2, r3
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007ca6:	e117      	b.n	8007ed8 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007cac:	2b02      	cmp	r3, #2
 8007cae:	d14e      	bne.n	8007d4e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cb2:	9300      	str	r3, [sp, #0]
 8007cb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	4906      	ldr	r1, [pc, #24]	@ (8007cd4 <HAL_I2C_Mem_Read+0x22c>)
 8007cba:	68f8      	ldr	r0, [r7, #12]
 8007cbc:	f002 fcf8 	bl	800a6b0 <I2C_WaitOnFlagUntilTimeout>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d008      	beq.n	8007cd8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	e11a      	b.n	8007f00 <HAL_I2C_Mem_Read+0x458>
 8007cca:	bf00      	nop
 8007ccc:	00100002 	.word	0x00100002
 8007cd0:	ffff0000 	.word	0xffff0000
 8007cd4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	681a      	ldr	r2, [r3, #0]
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007ce6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	691a      	ldr	r2, [r3, #16]
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cf2:	b2d2      	uxtb	r2, r2
 8007cf4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cfa:	1c5a      	adds	r2, r3, #1
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d04:	3b01      	subs	r3, #1
 8007d06:	b29a      	uxth	r2, r3
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d10:	b29b      	uxth	r3, r3
 8007d12:	3b01      	subs	r3, #1
 8007d14:	b29a      	uxth	r2, r3
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	691a      	ldr	r2, [r3, #16]
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d24:	b2d2      	uxtb	r2, r2
 8007d26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d2c:	1c5a      	adds	r2, r3, #1
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d36:	3b01      	subs	r3, #1
 8007d38:	b29a      	uxth	r2, r3
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d42:	b29b      	uxth	r3, r3
 8007d44:	3b01      	subs	r3, #1
 8007d46:	b29a      	uxth	r2, r3
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007d4c:	e0c4      	b.n	8007ed8 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d50:	9300      	str	r3, [sp, #0]
 8007d52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d54:	2200      	movs	r2, #0
 8007d56:	496c      	ldr	r1, [pc, #432]	@ (8007f08 <HAL_I2C_Mem_Read+0x460>)
 8007d58:	68f8      	ldr	r0, [r7, #12]
 8007d5a:	f002 fca9 	bl	800a6b0 <I2C_WaitOnFlagUntilTimeout>
 8007d5e:	4603      	mov	r3, r0
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d001      	beq.n	8007d68 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8007d64:	2301      	movs	r3, #1
 8007d66:	e0cb      	b.n	8007f00 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	681a      	ldr	r2, [r3, #0]
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007d76:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	691a      	ldr	r2, [r3, #16]
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d82:	b2d2      	uxtb	r2, r2
 8007d84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d8a:	1c5a      	adds	r2, r3, #1
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d94:	3b01      	subs	r3, #1
 8007d96:	b29a      	uxth	r2, r3
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007da0:	b29b      	uxth	r3, r3
 8007da2:	3b01      	subs	r3, #1
 8007da4:	b29a      	uxth	r2, r3
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dac:	9300      	str	r3, [sp, #0]
 8007dae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007db0:	2200      	movs	r2, #0
 8007db2:	4955      	ldr	r1, [pc, #340]	@ (8007f08 <HAL_I2C_Mem_Read+0x460>)
 8007db4:	68f8      	ldr	r0, [r7, #12]
 8007db6:	f002 fc7b 	bl	800a6b0 <I2C_WaitOnFlagUntilTimeout>
 8007dba:	4603      	mov	r3, r0
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d001      	beq.n	8007dc4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	e09d      	b.n	8007f00 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	681a      	ldr	r2, [r3, #0]
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007dd2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	691a      	ldr	r2, [r3, #16]
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dde:	b2d2      	uxtb	r2, r2
 8007de0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007de6:	1c5a      	adds	r2, r3, #1
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007df0:	3b01      	subs	r3, #1
 8007df2:	b29a      	uxth	r2, r3
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007dfc:	b29b      	uxth	r3, r3
 8007dfe:	3b01      	subs	r3, #1
 8007e00:	b29a      	uxth	r2, r3
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	691a      	ldr	r2, [r3, #16]
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e10:	b2d2      	uxtb	r2, r2
 8007e12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e18:	1c5a      	adds	r2, r3, #1
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007e22:	3b01      	subs	r3, #1
 8007e24:	b29a      	uxth	r2, r3
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e2e:	b29b      	uxth	r3, r3
 8007e30:	3b01      	subs	r3, #1
 8007e32:	b29a      	uxth	r2, r3
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007e38:	e04e      	b.n	8007ed8 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007e3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e3c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007e3e:	68f8      	ldr	r0, [r7, #12]
 8007e40:	f002 fe12 	bl	800aa68 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007e44:	4603      	mov	r3, r0
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d001      	beq.n	8007e4e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	e058      	b.n	8007f00 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	691a      	ldr	r2, [r3, #16]
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e58:	b2d2      	uxtb	r2, r2
 8007e5a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e60:	1c5a      	adds	r2, r3, #1
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007e6a:	3b01      	subs	r3, #1
 8007e6c:	b29a      	uxth	r2, r3
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e76:	b29b      	uxth	r3, r3
 8007e78:	3b01      	subs	r3, #1
 8007e7a:	b29a      	uxth	r2, r3
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	695b      	ldr	r3, [r3, #20]
 8007e86:	f003 0304 	and.w	r3, r3, #4
 8007e8a:	2b04      	cmp	r3, #4
 8007e8c:	d124      	bne.n	8007ed8 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007e92:	2b03      	cmp	r3, #3
 8007e94:	d107      	bne.n	8007ea6 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	681a      	ldr	r2, [r3, #0]
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007ea4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	691a      	ldr	r2, [r3, #16]
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007eb0:	b2d2      	uxtb	r2, r2
 8007eb2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007eb8:	1c5a      	adds	r2, r3, #1
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ec2:	3b01      	subs	r3, #1
 8007ec4:	b29a      	uxth	r2, r3
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ece:	b29b      	uxth	r3, r3
 8007ed0:	3b01      	subs	r3, #1
 8007ed2:	b29a      	uxth	r2, r3
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	f47f aeb6 	bne.w	8007c4e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	2220      	movs	r2, #32
 8007ee6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	2200      	movs	r2, #0
 8007eee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007efa:	2300      	movs	r3, #0
 8007efc:	e000      	b.n	8007f00 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8007efe:	2302      	movs	r3, #2
  }
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	3728      	adds	r7, #40	@ 0x28
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}
 8007f08:	00010004 	.word	0x00010004

08007f0c <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b08a      	sub	sp, #40	@ 0x28
 8007f10:	af02      	add	r7, sp, #8
 8007f12:	60f8      	str	r0, [r7, #12]
 8007f14:	4608      	mov	r0, r1
 8007f16:	4611      	mov	r1, r2
 8007f18:	461a      	mov	r2, r3
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	817b      	strh	r3, [r7, #10]
 8007f1e:	460b      	mov	r3, r1
 8007f20:	813b      	strh	r3, [r7, #8]
 8007f22:	4613      	mov	r3, r2
 8007f24:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8007f26:	2300      	movs	r3, #0
 8007f28:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007f2a:	f7fd fe09 	bl	8005b40 <HAL_GetTick>
 8007f2e:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007f36:	b2db      	uxtb	r3, r3
 8007f38:	2b20      	cmp	r3, #32
 8007f3a:	f040 8136 	bne.w	80081aa <HAL_I2C_Mem_Write_DMA+0x29e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8007f3e:	4b9d      	ldr	r3, [pc, #628]	@ (80081b4 <HAL_I2C_Mem_Write_DMA+0x2a8>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	08db      	lsrs	r3, r3, #3
 8007f44:	4a9c      	ldr	r2, [pc, #624]	@ (80081b8 <HAL_I2C_Mem_Write_DMA+0x2ac>)
 8007f46:	fba2 2303 	umull	r2, r3, r2, r3
 8007f4a:	0a1a      	lsrs	r2, r3, #8
 8007f4c:	4613      	mov	r3, r2
 8007f4e:	009b      	lsls	r3, r3, #2
 8007f50:	4413      	add	r3, r2
 8007f52:	009a      	lsls	r2, r3, #2
 8007f54:	4413      	add	r3, r2
 8007f56:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8007f58:	697b      	ldr	r3, [r7, #20]
 8007f5a:	3b01      	subs	r3, #1
 8007f5c:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8007f5e:	697b      	ldr	r3, [r7, #20]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d112      	bne.n	8007f8a <HAL_I2C_Mem_Write_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	2200      	movs	r2, #0
 8007f68:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	2220      	movs	r2, #32
 8007f6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	2200      	movs	r2, #0
 8007f76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f7e:	f043 0220 	orr.w	r2, r3, #32
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8007f86:	2302      	movs	r3, #2
 8007f88:	e110      	b.n	80081ac <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	699b      	ldr	r3, [r3, #24]
 8007f90:	f003 0302 	and.w	r3, r3, #2
 8007f94:	2b02      	cmp	r3, #2
 8007f96:	d0df      	beq.n	8007f58 <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007f9e:	2b01      	cmp	r3, #1
 8007fa0:	d101      	bne.n	8007fa6 <HAL_I2C_Mem_Write_DMA+0x9a>
 8007fa2:	2302      	movs	r3, #2
 8007fa4:	e102      	b.n	80081ac <HAL_I2C_Mem_Write_DMA+0x2a0>
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	2201      	movs	r2, #1
 8007faa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f003 0301 	and.w	r3, r3, #1
 8007fb8:	2b01      	cmp	r3, #1
 8007fba:	d007      	beq.n	8007fcc <HAL_I2C_Mem_Write_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	681a      	ldr	r2, [r3, #0]
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f042 0201 	orr.w	r2, r2, #1
 8007fca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	681a      	ldr	r2, [r3, #0]
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007fda:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	2221      	movs	r2, #33	@ 0x21
 8007fe0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	2240      	movs	r2, #64	@ 0x40
 8007fe8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	2200      	movs	r2, #0
 8007ff0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007ff6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8007ffc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008002:	b29a      	uxth	r2, r3
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	4a6c      	ldr	r2, [pc, #432]	@ (80081bc <HAL_I2C_Mem_Write_DMA+0x2b0>)
 800800c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 800800e:	897a      	ldrh	r2, [r7, #10]
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8008014:	893a      	ldrh	r2, [r7, #8]
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 800801a:	88fa      	ldrh	r2, [r7, #6]
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	2200      	movs	r2, #0
 8008024:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800802a:	2b00      	cmp	r3, #0
 800802c:	f000 80a9 	beq.w	8008182 <HAL_I2C_Mem_Write_DMA+0x276>
    {
      if (hi2c->hdmatx != NULL)
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008034:	2b00      	cmp	r3, #0
 8008036:	d02a      	beq.n	800808e <HAL_I2C_Mem_Write_DMA+0x182>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800803c:	4a60      	ldr	r2, [pc, #384]	@ (80081c0 <HAL_I2C_Mem_Write_DMA+0x2b4>)
 800803e:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008044:	4a5f      	ldr	r2, [pc, #380]	@ (80081c4 <HAL_I2C_Mem_Write_DMA+0x2b8>)
 8008046:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800804c:	2200      	movs	r2, #0
 800804e:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008054:	2200      	movs	r2, #0
 8008056:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800805c:	2200      	movs	r2, #0
 800805e:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008064:	2200      	movs	r2, #0
 8008066:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008070:	4619      	mov	r1, r3
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	3310      	adds	r3, #16
 8008078:	461a      	mov	r2, r3
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800807e:	f7fe fc6b 	bl	8006958 <HAL_DMA_Start_IT>
 8008082:	4603      	mov	r3, r0
 8008084:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8008086:	7efb      	ldrb	r3, [r7, #27]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d166      	bne.n	800815a <HAL_I2C_Mem_Write_DMA+0x24e>
 800808c:	e013      	b.n	80080b6 <HAL_I2C_Mem_Write_DMA+0x1aa>
        hi2c->State     = HAL_I2C_STATE_READY;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	2220      	movs	r2, #32
 8008092:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	2200      	movs	r2, #0
 800809a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080a2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	2200      	movs	r2, #0
 80080ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 80080b2:	2301      	movs	r3, #1
 80080b4:	e07a      	b.n	80081ac <HAL_I2C_Mem_Write_DMA+0x2a0>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80080b6:	88f8      	ldrh	r0, [r7, #6]
 80080b8:	893a      	ldrh	r2, [r7, #8]
 80080ba:	8979      	ldrh	r1, [r7, #10]
 80080bc:	69fb      	ldr	r3, [r7, #28]
 80080be:	9301      	str	r3, [sp, #4]
 80080c0:	2323      	movs	r3, #35	@ 0x23
 80080c2:	9300      	str	r3, [sp, #0]
 80080c4:	4603      	mov	r3, r0
 80080c6:	68f8      	ldr	r0, [r7, #12]
 80080c8:	f001 ffb0 	bl	800a02c <I2C_RequestMemoryWrite>
 80080cc:	4603      	mov	r3, r0
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d022      	beq.n	8008118 <HAL_I2C_Mem_Write_DMA+0x20c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080d6:	4618      	mov	r0, r3
 80080d8:	f7fe fd06 	bl	8006ae8 <HAL_DMA_Abort_IT>
 80080dc:	4603      	mov	r3, r0
 80080de:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080e4:	2200      	movs	r2, #0
 80080e6:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	681a      	ldr	r2, [r3, #0]
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80080f6:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	2200      	movs	r2, #0
 80080fc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	2200      	movs	r2, #0
 8008102:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	681a      	ldr	r2, [r3, #0]
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f022 0201 	bic.w	r2, r2, #1
 8008112:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8008114:	2301      	movs	r3, #1
 8008116:	e049      	b.n	80081ac <HAL_I2C_Mem_Write_DMA+0x2a0>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008118:	2300      	movs	r3, #0
 800811a:	613b      	str	r3, [r7, #16]
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	695b      	ldr	r3, [r3, #20]
 8008122:	613b      	str	r3, [r7, #16]
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	699b      	ldr	r3, [r3, #24]
 800812a:	613b      	str	r3, [r7, #16]
 800812c:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	2200      	movs	r2, #0
 8008132:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	685a      	ldr	r2, [r3, #4]
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008144:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	685a      	ldr	r2, [r3, #4]
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008154:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 8008156:	2300      	movs	r3, #0
 8008158:	e028      	b.n	80081ac <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	2220      	movs	r2, #32
 800815e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	2200      	movs	r2, #0
 8008166:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800816e:	f043 0210 	orr.w	r2, r3, #16
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	2200      	movs	r2, #0
 800817a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800817e:	2301      	movs	r3, #1
 8008180:	e014      	b.n	80081ac <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	2220      	movs	r2, #32
 8008186:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	2200      	movs	r2, #0
 800818e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008196:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	2200      	movs	r2, #0
 80081a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80081a6:	2301      	movs	r3, #1
 80081a8:	e000      	b.n	80081ac <HAL_I2C_Mem_Write_DMA+0x2a0>
    }
  }
  else
  {
    return HAL_BUSY;
 80081aa:	2302      	movs	r3, #2
  }
}
 80081ac:	4618      	mov	r0, r3
 80081ae:	3720      	adds	r7, #32
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}
 80081b4:	20000010 	.word	0x20000010
 80081b8:	14f8b589 	.word	0x14f8b589
 80081bc:	ffff0000 	.word	0xffff0000
 80081c0:	0800a329 	.word	0x0800a329
 80081c4:	0800a4e7 	.word	0x0800a4e7

080081c8 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b08c      	sub	sp, #48	@ 0x30
 80081cc:	af02      	add	r7, sp, #8
 80081ce:	60f8      	str	r0, [r7, #12]
 80081d0:	4608      	mov	r0, r1
 80081d2:	4611      	mov	r1, r2
 80081d4:	461a      	mov	r2, r3
 80081d6:	4603      	mov	r3, r0
 80081d8:	817b      	strh	r3, [r7, #10]
 80081da:	460b      	mov	r3, r1
 80081dc:	813b      	strh	r3, [r7, #8]
 80081de:	4613      	mov	r3, r2
 80081e0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80081e2:	f7fd fcad 	bl	8005b40 <HAL_GetTick>
 80081e6:	6278      	str	r0, [r7, #36]	@ 0x24
  __IO uint32_t count = 0U;
 80081e8:	2300      	movs	r3, #0
 80081ea:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80081f2:	b2db      	uxtb	r3, r3
 80081f4:	2b20      	cmp	r3, #32
 80081f6:	f040 8172 	bne.w	80084de <HAL_I2C_Mem_Read_DMA+0x316>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80081fa:	4b93      	ldr	r3, [pc, #588]	@ (8008448 <HAL_I2C_Mem_Read_DMA+0x280>)
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	08db      	lsrs	r3, r3, #3
 8008200:	4a92      	ldr	r2, [pc, #584]	@ (800844c <HAL_I2C_Mem_Read_DMA+0x284>)
 8008202:	fba2 2303 	umull	r2, r3, r2, r3
 8008206:	0a1a      	lsrs	r2, r3, #8
 8008208:	4613      	mov	r3, r2
 800820a:	009b      	lsls	r3, r3, #2
 800820c:	4413      	add	r3, r2
 800820e:	009a      	lsls	r2, r3, #2
 8008210:	4413      	add	r3, r2
 8008212:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8008214:	69fb      	ldr	r3, [r7, #28]
 8008216:	3b01      	subs	r3, #1
 8008218:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 800821a:	69fb      	ldr	r3, [r7, #28]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d112      	bne.n	8008246 <HAL_I2C_Mem_Read_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	2200      	movs	r2, #0
 8008224:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	2220      	movs	r2, #32
 800822a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	2200      	movs	r2, #0
 8008232:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800823a:	f043 0220 	orr.w	r2, r3, #32
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8008242:	2302      	movs	r3, #2
 8008244:	e14c      	b.n	80084e0 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	699b      	ldr	r3, [r3, #24]
 800824c:	f003 0302 	and.w	r3, r3, #2
 8008250:	2b02      	cmp	r3, #2
 8008252:	d0df      	beq.n	8008214 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800825a:	2b01      	cmp	r3, #1
 800825c:	d101      	bne.n	8008262 <HAL_I2C_Mem_Read_DMA+0x9a>
 800825e:	2302      	movs	r3, #2
 8008260:	e13e      	b.n	80084e0 <HAL_I2C_Mem_Read_DMA+0x318>
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	2201      	movs	r2, #1
 8008266:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f003 0301 	and.w	r3, r3, #1
 8008274:	2b01      	cmp	r3, #1
 8008276:	d007      	beq.n	8008288 <HAL_I2C_Mem_Read_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	681a      	ldr	r2, [r3, #0]
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f042 0201 	orr.w	r2, r2, #1
 8008286:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	681a      	ldr	r2, [r3, #0]
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008296:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	2222      	movs	r2, #34	@ 0x22
 800829c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	2240      	movs	r2, #64	@ 0x40
 80082a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	2200      	movs	r2, #0
 80082ac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80082b2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80082b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80082be:	b29a      	uxth	r2, r3
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	4a62      	ldr	r2, [pc, #392]	@ (8008450 <HAL_I2C_Mem_Read_DMA+0x288>)
 80082c8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 80082ca:	897a      	ldrh	r2, [r7, #10]
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 80082d0:	893a      	ldrh	r2, [r7, #8]
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 80082d6:	88fa      	ldrh	r2, [r7, #6]
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	2200      	movs	r2, #0
 80082e0:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	f000 80cc 	beq.w	8008484 <HAL_I2C_Mem_Read_DMA+0x2bc>
    {
      if (hi2c->hdmarx != NULL)
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d02d      	beq.n	8008350 <HAL_I2C_Mem_Read_DMA+0x188>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082f8:	4a56      	ldr	r2, [pc, #344]	@ (8008454 <HAL_I2C_Mem_Read_DMA+0x28c>)
 80082fa:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008300:	4a55      	ldr	r2, [pc, #340]	@ (8008458 <HAL_I2C_Mem_Read_DMA+0x290>)
 8008302:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008308:	2200      	movs	r2, #0
 800830a:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008310:	2200      	movs	r2, #0
 8008312:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008318:	2200      	movs	r2, #0
 800831a:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008320:	2200      	movs	r2, #0
 8008322:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	3310      	adds	r3, #16
 800832e:	4619      	mov	r1, r3
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008334:	461a      	mov	r2, r3
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800833a:	f7fe fb0d 	bl	8006958 <HAL_DMA_Start_IT>
 800833e:	4603      	mov	r3, r0
 8008340:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8008344:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008348:	2b00      	cmp	r3, #0
 800834a:	f040 8087 	bne.w	800845c <HAL_I2C_Mem_Read_DMA+0x294>
 800834e:	e013      	b.n	8008378 <HAL_I2C_Mem_Read_DMA+0x1b0>
        hi2c->State     = HAL_I2C_STATE_READY;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	2220      	movs	r2, #32
 8008354:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	2200      	movs	r2, #0
 800835c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008364:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	2200      	movs	r2, #0
 8008370:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8008374:	2301      	movs	r3, #1
 8008376:	e0b3      	b.n	80084e0 <HAL_I2C_Mem_Read_DMA+0x318>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8008378:	88f8      	ldrh	r0, [r7, #6]
 800837a:	893a      	ldrh	r2, [r7, #8]
 800837c:	8979      	ldrh	r1, [r7, #10]
 800837e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008380:	9301      	str	r3, [sp, #4]
 8008382:	2323      	movs	r3, #35	@ 0x23
 8008384:	9300      	str	r3, [sp, #0]
 8008386:	4603      	mov	r3, r0
 8008388:	68f8      	ldr	r0, [r7, #12]
 800838a:	f001 fee5 	bl	800a158 <I2C_RequestMemoryRead>
 800838e:	4603      	mov	r3, r0
 8008390:	2b00      	cmp	r3, #0
 8008392:	d023      	beq.n	80083dc <HAL_I2C_Mem_Read_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008398:	4618      	mov	r0, r3
 800839a:	f7fe fba5 	bl	8006ae8 <HAL_DMA_Abort_IT>
 800839e:	4603      	mov	r3, r0
 80083a0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083a8:	2200      	movs	r2, #0
 80083aa:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	681a      	ldr	r2, [r3, #0]
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80083ba:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	2200      	movs	r2, #0
 80083c0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	2200      	movs	r2, #0
 80083c6:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	681a      	ldr	r2, [r3, #0]
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f022 0201 	bic.w	r2, r2, #1
 80083d6:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 80083d8:	2301      	movs	r3, #1
 80083da:	e081      	b.n	80084e0 <HAL_I2C_Mem_Read_DMA+0x318>
        }

        if (hi2c->XferSize == 1U)
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80083e0:	2b01      	cmp	r3, #1
 80083e2:	d108      	bne.n	80083f6 <HAL_I2C_Mem_Read_DMA+0x22e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	681a      	ldr	r2, [r3, #0]
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80083f2:	601a      	str	r2, [r3, #0]
 80083f4:	e007      	b.n	8008406 <HAL_I2C_Mem_Read_DMA+0x23e>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	685a      	ldr	r2, [r3, #4]
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008404:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008406:	2300      	movs	r3, #0
 8008408:	61bb      	str	r3, [r7, #24]
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	695b      	ldr	r3, [r3, #20]
 8008410:	61bb      	str	r3, [r7, #24]
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	699b      	ldr	r3, [r3, #24]
 8008418:	61bb      	str	r3, [r7, #24]
 800841a:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	2200      	movs	r2, #0
 8008420:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	685a      	ldr	r2, [r3, #4]
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008432:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	685a      	ldr	r2, [r3, #4]
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008442:	605a      	str	r2, [r3, #4]
 8008444:	e049      	b.n	80084da <HAL_I2C_Mem_Read_DMA+0x312>
 8008446:	bf00      	nop
 8008448:	20000010 	.word	0x20000010
 800844c:	14f8b589 	.word	0x14f8b589
 8008450:	ffff0000 	.word	0xffff0000
 8008454:	0800a329 	.word	0x0800a329
 8008458:	0800a4e7 	.word	0x0800a4e7
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	2220      	movs	r2, #32
 8008460:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	2200      	movs	r2, #0
 8008468:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008470:	f043 0210 	orr.w	r2, r3, #16
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	2200      	movs	r2, #0
 800847c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8008480:	2301      	movs	r3, #1
 8008482:	e02d      	b.n	80084e0 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8008484:	88f8      	ldrh	r0, [r7, #6]
 8008486:	893a      	ldrh	r2, [r7, #8]
 8008488:	8979      	ldrh	r1, [r7, #10]
 800848a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800848c:	9301      	str	r3, [sp, #4]
 800848e:	2323      	movs	r3, #35	@ 0x23
 8008490:	9300      	str	r3, [sp, #0]
 8008492:	4603      	mov	r3, r0
 8008494:	68f8      	ldr	r0, [r7, #12]
 8008496:	f001 fe5f 	bl	800a158 <I2C_RequestMemoryRead>
 800849a:	4603      	mov	r3, r0
 800849c:	2b00      	cmp	r3, #0
 800849e:	d001      	beq.n	80084a4 <HAL_I2C_Mem_Read_DMA+0x2dc>
      {
        return HAL_ERROR;
 80084a0:	2301      	movs	r3, #1
 80084a2:	e01d      	b.n	80084e0 <HAL_I2C_Mem_Read_DMA+0x318>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80084a4:	2300      	movs	r3, #0
 80084a6:	617b      	str	r3, [r7, #20]
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	695b      	ldr	r3, [r3, #20]
 80084ae:	617b      	str	r3, [r7, #20]
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	699b      	ldr	r3, [r3, #24]
 80084b6:	617b      	str	r3, [r7, #20]
 80084b8:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	681a      	ldr	r2, [r3, #0]
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80084c8:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	2220      	movs	r2, #32
 80084ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	2200      	movs	r2, #0
 80084d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }

    return HAL_OK;
 80084da:	2300      	movs	r3, #0
 80084dc:	e000      	b.n	80084e0 <HAL_I2C_Mem_Read_DMA+0x318>
  }
  else
  {
    return HAL_BUSY;
 80084de:	2302      	movs	r3, #2
  }
}
 80084e0:	4618      	mov	r0, r3
 80084e2:	3728      	adds	r7, #40	@ 0x28
 80084e4:	46bd      	mov	sp, r7
 80084e6:	bd80      	pop	{r7, pc}

080084e8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b08a      	sub	sp, #40	@ 0x28
 80084ec:	af02      	add	r7, sp, #8
 80084ee:	60f8      	str	r0, [r7, #12]
 80084f0:	607a      	str	r2, [r7, #4]
 80084f2:	603b      	str	r3, [r7, #0]
 80084f4:	460b      	mov	r3, r1
 80084f6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80084f8:	f7fd fb22 	bl	8005b40 <HAL_GetTick>
 80084fc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80084fe:	2300      	movs	r3, #0
 8008500:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008508:	b2db      	uxtb	r3, r3
 800850a:	2b20      	cmp	r3, #32
 800850c:	f040 8111 	bne.w	8008732 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008510:	69fb      	ldr	r3, [r7, #28]
 8008512:	9300      	str	r3, [sp, #0]
 8008514:	2319      	movs	r3, #25
 8008516:	2201      	movs	r2, #1
 8008518:	4988      	ldr	r1, [pc, #544]	@ (800873c <HAL_I2C_IsDeviceReady+0x254>)
 800851a:	68f8      	ldr	r0, [r7, #12]
 800851c:	f002 f8c8 	bl	800a6b0 <I2C_WaitOnFlagUntilTimeout>
 8008520:	4603      	mov	r3, r0
 8008522:	2b00      	cmp	r3, #0
 8008524:	d001      	beq.n	800852a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8008526:	2302      	movs	r3, #2
 8008528:	e104      	b.n	8008734 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008530:	2b01      	cmp	r3, #1
 8008532:	d101      	bne.n	8008538 <HAL_I2C_IsDeviceReady+0x50>
 8008534:	2302      	movs	r3, #2
 8008536:	e0fd      	b.n	8008734 <HAL_I2C_IsDeviceReady+0x24c>
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	2201      	movs	r2, #1
 800853c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f003 0301 	and.w	r3, r3, #1
 800854a:	2b01      	cmp	r3, #1
 800854c:	d007      	beq.n	800855e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	681a      	ldr	r2, [r3, #0]
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f042 0201 	orr.w	r2, r2, #1
 800855c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	681a      	ldr	r2, [r3, #0]
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800856c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	2224      	movs	r2, #36	@ 0x24
 8008572:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	2200      	movs	r2, #0
 800857a:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	4a70      	ldr	r2, [pc, #448]	@ (8008740 <HAL_I2C_IsDeviceReady+0x258>)
 8008580:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	681a      	ldr	r2, [r3, #0]
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008590:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8008592:	69fb      	ldr	r3, [r7, #28]
 8008594:	9300      	str	r3, [sp, #0]
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	2200      	movs	r2, #0
 800859a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800859e:	68f8      	ldr	r0, [r7, #12]
 80085a0:	f002 f886 	bl	800a6b0 <I2C_WaitOnFlagUntilTimeout>
 80085a4:	4603      	mov	r3, r0
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d00d      	beq.n	80085c6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80085b8:	d103      	bne.n	80085c2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80085c0:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80085c2:	2303      	movs	r3, #3
 80085c4:	e0b6      	b.n	8008734 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80085c6:	897b      	ldrh	r3, [r7, #10]
 80085c8:	b2db      	uxtb	r3, r3
 80085ca:	461a      	mov	r2, r3
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80085d4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80085d6:	f7fd fab3 	bl	8005b40 <HAL_GetTick>
 80085da:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	695b      	ldr	r3, [r3, #20]
 80085e2:	f003 0302 	and.w	r3, r3, #2
 80085e6:	2b02      	cmp	r3, #2
 80085e8:	bf0c      	ite	eq
 80085ea:	2301      	moveq	r3, #1
 80085ec:	2300      	movne	r3, #0
 80085ee:	b2db      	uxtb	r3, r3
 80085f0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	695b      	ldr	r3, [r3, #20]
 80085f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80085fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008600:	bf0c      	ite	eq
 8008602:	2301      	moveq	r3, #1
 8008604:	2300      	movne	r3, #0
 8008606:	b2db      	uxtb	r3, r3
 8008608:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800860a:	e025      	b.n	8008658 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800860c:	f7fd fa98 	bl	8005b40 <HAL_GetTick>
 8008610:	4602      	mov	r2, r0
 8008612:	69fb      	ldr	r3, [r7, #28]
 8008614:	1ad3      	subs	r3, r2, r3
 8008616:	683a      	ldr	r2, [r7, #0]
 8008618:	429a      	cmp	r2, r3
 800861a:	d302      	bcc.n	8008622 <HAL_I2C_IsDeviceReady+0x13a>
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d103      	bne.n	800862a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	22a0      	movs	r2, #160	@ 0xa0
 8008626:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	695b      	ldr	r3, [r3, #20]
 8008630:	f003 0302 	and.w	r3, r3, #2
 8008634:	2b02      	cmp	r3, #2
 8008636:	bf0c      	ite	eq
 8008638:	2301      	moveq	r3, #1
 800863a:	2300      	movne	r3, #0
 800863c:	b2db      	uxtb	r3, r3
 800863e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	695b      	ldr	r3, [r3, #20]
 8008646:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800864a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800864e:	bf0c      	ite	eq
 8008650:	2301      	moveq	r3, #1
 8008652:	2300      	movne	r3, #0
 8008654:	b2db      	uxtb	r3, r3
 8008656:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800865e:	b2db      	uxtb	r3, r3
 8008660:	2ba0      	cmp	r3, #160	@ 0xa0
 8008662:	d005      	beq.n	8008670 <HAL_I2C_IsDeviceReady+0x188>
 8008664:	7dfb      	ldrb	r3, [r7, #23]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d102      	bne.n	8008670 <HAL_I2C_IsDeviceReady+0x188>
 800866a:	7dbb      	ldrb	r3, [r7, #22]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d0cd      	beq.n	800860c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	2220      	movs	r2, #32
 8008674:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	695b      	ldr	r3, [r3, #20]
 800867e:	f003 0302 	and.w	r3, r3, #2
 8008682:	2b02      	cmp	r3, #2
 8008684:	d129      	bne.n	80086da <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	681a      	ldr	r2, [r3, #0]
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008694:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008696:	2300      	movs	r3, #0
 8008698:	613b      	str	r3, [r7, #16]
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	695b      	ldr	r3, [r3, #20]
 80086a0:	613b      	str	r3, [r7, #16]
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	699b      	ldr	r3, [r3, #24]
 80086a8:	613b      	str	r3, [r7, #16]
 80086aa:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80086ac:	69fb      	ldr	r3, [r7, #28]
 80086ae:	9300      	str	r3, [sp, #0]
 80086b0:	2319      	movs	r3, #25
 80086b2:	2201      	movs	r2, #1
 80086b4:	4921      	ldr	r1, [pc, #132]	@ (800873c <HAL_I2C_IsDeviceReady+0x254>)
 80086b6:	68f8      	ldr	r0, [r7, #12]
 80086b8:	f001 fffa 	bl	800a6b0 <I2C_WaitOnFlagUntilTimeout>
 80086bc:	4603      	mov	r3, r0
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d001      	beq.n	80086c6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80086c2:	2301      	movs	r3, #1
 80086c4:	e036      	b.n	8008734 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	2220      	movs	r2, #32
 80086ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	2200      	movs	r2, #0
 80086d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80086d6:	2300      	movs	r3, #0
 80086d8:	e02c      	b.n	8008734 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	681a      	ldr	r2, [r3, #0]
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80086e8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80086f2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80086f4:	69fb      	ldr	r3, [r7, #28]
 80086f6:	9300      	str	r3, [sp, #0]
 80086f8:	2319      	movs	r3, #25
 80086fa:	2201      	movs	r2, #1
 80086fc:	490f      	ldr	r1, [pc, #60]	@ (800873c <HAL_I2C_IsDeviceReady+0x254>)
 80086fe:	68f8      	ldr	r0, [r7, #12]
 8008700:	f001 ffd6 	bl	800a6b0 <I2C_WaitOnFlagUntilTimeout>
 8008704:	4603      	mov	r3, r0
 8008706:	2b00      	cmp	r3, #0
 8008708:	d001      	beq.n	800870e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800870a:	2301      	movs	r3, #1
 800870c:	e012      	b.n	8008734 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800870e:	69bb      	ldr	r3, [r7, #24]
 8008710:	3301      	adds	r3, #1
 8008712:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8008714:	69ba      	ldr	r2, [r7, #24]
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	429a      	cmp	r2, r3
 800871a:	f4ff af32 	bcc.w	8008582 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	2220      	movs	r2, #32
 8008722:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	2200      	movs	r2, #0
 800872a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800872e:	2301      	movs	r3, #1
 8008730:	e000      	b.n	8008734 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8008732:	2302      	movs	r3, #2
  }
}
 8008734:	4618      	mov	r0, r3
 8008736:	3720      	adds	r7, #32
 8008738:	46bd      	mov	sp, r7
 800873a:	bd80      	pop	{r7, pc}
 800873c:	00100002 	.word	0x00100002
 8008740:	ffff0000 	.word	0xffff0000

08008744 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b088      	sub	sp, #32
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800874c:	2300      	movs	r3, #0
 800874e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	685b      	ldr	r3, [r3, #4]
 8008756:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800875c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008764:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800876c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800876e:	7bfb      	ldrb	r3, [r7, #15]
 8008770:	2b10      	cmp	r3, #16
 8008772:	d003      	beq.n	800877c <HAL_I2C_EV_IRQHandler+0x38>
 8008774:	7bfb      	ldrb	r3, [r7, #15]
 8008776:	2b40      	cmp	r3, #64	@ 0x40
 8008778:	f040 80c1 	bne.w	80088fe <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	699b      	ldr	r3, [r3, #24]
 8008782:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	695b      	ldr	r3, [r3, #20]
 800878a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800878c:	69fb      	ldr	r3, [r7, #28]
 800878e:	f003 0301 	and.w	r3, r3, #1
 8008792:	2b00      	cmp	r3, #0
 8008794:	d10d      	bne.n	80087b2 <HAL_I2C_EV_IRQHandler+0x6e>
 8008796:	693b      	ldr	r3, [r7, #16]
 8008798:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800879c:	d003      	beq.n	80087a6 <HAL_I2C_EV_IRQHandler+0x62>
 800879e:	693b      	ldr	r3, [r7, #16]
 80087a0:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80087a4:	d101      	bne.n	80087aa <HAL_I2C_EV_IRQHandler+0x66>
 80087a6:	2301      	movs	r3, #1
 80087a8:	e000      	b.n	80087ac <HAL_I2C_EV_IRQHandler+0x68>
 80087aa:	2300      	movs	r3, #0
 80087ac:	2b01      	cmp	r3, #1
 80087ae:	f000 8132 	beq.w	8008a16 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80087b2:	69fb      	ldr	r3, [r7, #28]
 80087b4:	f003 0301 	and.w	r3, r3, #1
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d00c      	beq.n	80087d6 <HAL_I2C_EV_IRQHandler+0x92>
 80087bc:	697b      	ldr	r3, [r7, #20]
 80087be:	0a5b      	lsrs	r3, r3, #9
 80087c0:	f003 0301 	and.w	r3, r3, #1
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d006      	beq.n	80087d6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	f002 f9d9 	bl	800ab80 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f000 fd8b 	bl	80092ea <I2C_Master_SB>
 80087d4:	e092      	b.n	80088fc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80087d6:	69fb      	ldr	r3, [r7, #28]
 80087d8:	08db      	lsrs	r3, r3, #3
 80087da:	f003 0301 	and.w	r3, r3, #1
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d009      	beq.n	80087f6 <HAL_I2C_EV_IRQHandler+0xb2>
 80087e2:	697b      	ldr	r3, [r7, #20]
 80087e4:	0a5b      	lsrs	r3, r3, #9
 80087e6:	f003 0301 	and.w	r3, r3, #1
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d003      	beq.n	80087f6 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f000 fe01 	bl	80093f6 <I2C_Master_ADD10>
 80087f4:	e082      	b.n	80088fc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80087f6:	69fb      	ldr	r3, [r7, #28]
 80087f8:	085b      	lsrs	r3, r3, #1
 80087fa:	f003 0301 	and.w	r3, r3, #1
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d009      	beq.n	8008816 <HAL_I2C_EV_IRQHandler+0xd2>
 8008802:	697b      	ldr	r3, [r7, #20]
 8008804:	0a5b      	lsrs	r3, r3, #9
 8008806:	f003 0301 	and.w	r3, r3, #1
 800880a:	2b00      	cmp	r3, #0
 800880c:	d003      	beq.n	8008816 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	f000 fe1b 	bl	800944a <I2C_Master_ADDR>
 8008814:	e072      	b.n	80088fc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8008816:	69bb      	ldr	r3, [r7, #24]
 8008818:	089b      	lsrs	r3, r3, #2
 800881a:	f003 0301 	and.w	r3, r3, #1
 800881e:	2b00      	cmp	r3, #0
 8008820:	d03b      	beq.n	800889a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	685b      	ldr	r3, [r3, #4]
 8008828:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800882c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008830:	f000 80f3 	beq.w	8008a1a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008834:	69fb      	ldr	r3, [r7, #28]
 8008836:	09db      	lsrs	r3, r3, #7
 8008838:	f003 0301 	and.w	r3, r3, #1
 800883c:	2b00      	cmp	r3, #0
 800883e:	d00f      	beq.n	8008860 <HAL_I2C_EV_IRQHandler+0x11c>
 8008840:	697b      	ldr	r3, [r7, #20]
 8008842:	0a9b      	lsrs	r3, r3, #10
 8008844:	f003 0301 	and.w	r3, r3, #1
 8008848:	2b00      	cmp	r3, #0
 800884a:	d009      	beq.n	8008860 <HAL_I2C_EV_IRQHandler+0x11c>
 800884c:	69fb      	ldr	r3, [r7, #28]
 800884e:	089b      	lsrs	r3, r3, #2
 8008850:	f003 0301 	and.w	r3, r3, #1
 8008854:	2b00      	cmp	r3, #0
 8008856:	d103      	bne.n	8008860 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f000 f9df 	bl	8008c1c <I2C_MasterTransmit_TXE>
 800885e:	e04d      	b.n	80088fc <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008860:	69fb      	ldr	r3, [r7, #28]
 8008862:	089b      	lsrs	r3, r3, #2
 8008864:	f003 0301 	and.w	r3, r3, #1
 8008868:	2b00      	cmp	r3, #0
 800886a:	f000 80d6 	beq.w	8008a1a <HAL_I2C_EV_IRQHandler+0x2d6>
 800886e:	697b      	ldr	r3, [r7, #20]
 8008870:	0a5b      	lsrs	r3, r3, #9
 8008872:	f003 0301 	and.w	r3, r3, #1
 8008876:	2b00      	cmp	r3, #0
 8008878:	f000 80cf 	beq.w	8008a1a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800887c:	7bbb      	ldrb	r3, [r7, #14]
 800887e:	2b21      	cmp	r3, #33	@ 0x21
 8008880:	d103      	bne.n	800888a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f000 fa66 	bl	8008d54 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008888:	e0c7      	b.n	8008a1a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800888a:	7bfb      	ldrb	r3, [r7, #15]
 800888c:	2b40      	cmp	r3, #64	@ 0x40
 800888e:	f040 80c4 	bne.w	8008a1a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f000 fad4 	bl	8008e40 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008898:	e0bf      	b.n	8008a1a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	685b      	ldr	r3, [r3, #4]
 80088a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80088a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80088a8:	f000 80b7 	beq.w	8008a1a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80088ac:	69fb      	ldr	r3, [r7, #28]
 80088ae:	099b      	lsrs	r3, r3, #6
 80088b0:	f003 0301 	and.w	r3, r3, #1
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d00f      	beq.n	80088d8 <HAL_I2C_EV_IRQHandler+0x194>
 80088b8:	697b      	ldr	r3, [r7, #20]
 80088ba:	0a9b      	lsrs	r3, r3, #10
 80088bc:	f003 0301 	and.w	r3, r3, #1
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d009      	beq.n	80088d8 <HAL_I2C_EV_IRQHandler+0x194>
 80088c4:	69fb      	ldr	r3, [r7, #28]
 80088c6:	089b      	lsrs	r3, r3, #2
 80088c8:	f003 0301 	and.w	r3, r3, #1
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d103      	bne.n	80088d8 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	f000 fb4d 	bl	8008f70 <I2C_MasterReceive_RXNE>
 80088d6:	e011      	b.n	80088fc <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80088d8:	69fb      	ldr	r3, [r7, #28]
 80088da:	089b      	lsrs	r3, r3, #2
 80088dc:	f003 0301 	and.w	r3, r3, #1
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	f000 809a 	beq.w	8008a1a <HAL_I2C_EV_IRQHandler+0x2d6>
 80088e6:	697b      	ldr	r3, [r7, #20]
 80088e8:	0a5b      	lsrs	r3, r3, #9
 80088ea:	f003 0301 	and.w	r3, r3, #1
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	f000 8093 	beq.w	8008a1a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80088f4:	6878      	ldr	r0, [r7, #4]
 80088f6:	f000 fc03 	bl	8009100 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80088fa:	e08e      	b.n	8008a1a <HAL_I2C_EV_IRQHandler+0x2d6>
 80088fc:	e08d      	b.n	8008a1a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008902:	2b00      	cmp	r3, #0
 8008904:	d004      	beq.n	8008910 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	695b      	ldr	r3, [r3, #20]
 800890c:	61fb      	str	r3, [r7, #28]
 800890e:	e007      	b.n	8008920 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	699b      	ldr	r3, [r3, #24]
 8008916:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	695b      	ldr	r3, [r3, #20]
 800891e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008920:	69fb      	ldr	r3, [r7, #28]
 8008922:	085b      	lsrs	r3, r3, #1
 8008924:	f003 0301 	and.w	r3, r3, #1
 8008928:	2b00      	cmp	r3, #0
 800892a:	d012      	beq.n	8008952 <HAL_I2C_EV_IRQHandler+0x20e>
 800892c:	697b      	ldr	r3, [r7, #20]
 800892e:	0a5b      	lsrs	r3, r3, #9
 8008930:	f003 0301 	and.w	r3, r3, #1
 8008934:	2b00      	cmp	r3, #0
 8008936:	d00c      	beq.n	8008952 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800893c:	2b00      	cmp	r3, #0
 800893e:	d003      	beq.n	8008948 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	699b      	ldr	r3, [r3, #24]
 8008946:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8008948:	69b9      	ldr	r1, [r7, #24]
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	f000 ffcc 	bl	80098e8 <I2C_Slave_ADDR>
 8008950:	e066      	b.n	8008a20 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008952:	69fb      	ldr	r3, [r7, #28]
 8008954:	091b      	lsrs	r3, r3, #4
 8008956:	f003 0301 	and.w	r3, r3, #1
 800895a:	2b00      	cmp	r3, #0
 800895c:	d009      	beq.n	8008972 <HAL_I2C_EV_IRQHandler+0x22e>
 800895e:	697b      	ldr	r3, [r7, #20]
 8008960:	0a5b      	lsrs	r3, r3, #9
 8008962:	f003 0301 	and.w	r3, r3, #1
 8008966:	2b00      	cmp	r3, #0
 8008968:	d003      	beq.n	8008972 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	f001 f806 	bl	800997c <I2C_Slave_STOPF>
 8008970:	e056      	b.n	8008a20 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008972:	7bbb      	ldrb	r3, [r7, #14]
 8008974:	2b21      	cmp	r3, #33	@ 0x21
 8008976:	d002      	beq.n	800897e <HAL_I2C_EV_IRQHandler+0x23a>
 8008978:	7bbb      	ldrb	r3, [r7, #14]
 800897a:	2b29      	cmp	r3, #41	@ 0x29
 800897c:	d125      	bne.n	80089ca <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800897e:	69fb      	ldr	r3, [r7, #28]
 8008980:	09db      	lsrs	r3, r3, #7
 8008982:	f003 0301 	and.w	r3, r3, #1
 8008986:	2b00      	cmp	r3, #0
 8008988:	d00f      	beq.n	80089aa <HAL_I2C_EV_IRQHandler+0x266>
 800898a:	697b      	ldr	r3, [r7, #20]
 800898c:	0a9b      	lsrs	r3, r3, #10
 800898e:	f003 0301 	and.w	r3, r3, #1
 8008992:	2b00      	cmp	r3, #0
 8008994:	d009      	beq.n	80089aa <HAL_I2C_EV_IRQHandler+0x266>
 8008996:	69fb      	ldr	r3, [r7, #28]
 8008998:	089b      	lsrs	r3, r3, #2
 800899a:	f003 0301 	and.w	r3, r3, #1
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d103      	bne.n	80089aa <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80089a2:	6878      	ldr	r0, [r7, #4]
 80089a4:	f000 fee2 	bl	800976c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80089a8:	e039      	b.n	8008a1e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80089aa:	69fb      	ldr	r3, [r7, #28]
 80089ac:	089b      	lsrs	r3, r3, #2
 80089ae:	f003 0301 	and.w	r3, r3, #1
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d033      	beq.n	8008a1e <HAL_I2C_EV_IRQHandler+0x2da>
 80089b6:	697b      	ldr	r3, [r7, #20]
 80089b8:	0a5b      	lsrs	r3, r3, #9
 80089ba:	f003 0301 	and.w	r3, r3, #1
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d02d      	beq.n	8008a1e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f000 ff0f 	bl	80097e6 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80089c8:	e029      	b.n	8008a1e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80089ca:	69fb      	ldr	r3, [r7, #28]
 80089cc:	099b      	lsrs	r3, r3, #6
 80089ce:	f003 0301 	and.w	r3, r3, #1
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d00f      	beq.n	80089f6 <HAL_I2C_EV_IRQHandler+0x2b2>
 80089d6:	697b      	ldr	r3, [r7, #20]
 80089d8:	0a9b      	lsrs	r3, r3, #10
 80089da:	f003 0301 	and.w	r3, r3, #1
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d009      	beq.n	80089f6 <HAL_I2C_EV_IRQHandler+0x2b2>
 80089e2:	69fb      	ldr	r3, [r7, #28]
 80089e4:	089b      	lsrs	r3, r3, #2
 80089e6:	f003 0301 	and.w	r3, r3, #1
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d103      	bne.n	80089f6 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	f000 ff1a 	bl	8009828 <I2C_SlaveReceive_RXNE>
 80089f4:	e014      	b.n	8008a20 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80089f6:	69fb      	ldr	r3, [r7, #28]
 80089f8:	089b      	lsrs	r3, r3, #2
 80089fa:	f003 0301 	and.w	r3, r3, #1
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d00e      	beq.n	8008a20 <HAL_I2C_EV_IRQHandler+0x2dc>
 8008a02:	697b      	ldr	r3, [r7, #20]
 8008a04:	0a5b      	lsrs	r3, r3, #9
 8008a06:	f003 0301 	and.w	r3, r3, #1
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d008      	beq.n	8008a20 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f000 ff48 	bl	80098a4 <I2C_SlaveReceive_BTF>
 8008a14:	e004      	b.n	8008a20 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8008a16:	bf00      	nop
 8008a18:	e002      	b.n	8008a20 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008a1a:	bf00      	nop
 8008a1c:	e000      	b.n	8008a20 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008a1e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8008a20:	3720      	adds	r7, #32
 8008a22:	46bd      	mov	sp, r7
 8008a24:	bd80      	pop	{r7, pc}

08008a26 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008a26:	b580      	push	{r7, lr}
 8008a28:	b08a      	sub	sp, #40	@ 0x28
 8008a2a:	af00      	add	r7, sp, #0
 8008a2c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	695b      	ldr	r3, [r3, #20]
 8008a34:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	685b      	ldr	r3, [r3, #4]
 8008a3c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8008a3e:	2300      	movs	r3, #0
 8008a40:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008a48:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8008a4a:	6a3b      	ldr	r3, [r7, #32]
 8008a4c:	0a1b      	lsrs	r3, r3, #8
 8008a4e:	f003 0301 	and.w	r3, r3, #1
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d00e      	beq.n	8008a74 <HAL_I2C_ER_IRQHandler+0x4e>
 8008a56:	69fb      	ldr	r3, [r7, #28]
 8008a58:	0a1b      	lsrs	r3, r3, #8
 8008a5a:	f003 0301 	and.w	r3, r3, #1
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d008      	beq.n	8008a74 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8008a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a64:	f043 0301 	orr.w	r3, r3, #1
 8008a68:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008a72:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8008a74:	6a3b      	ldr	r3, [r7, #32]
 8008a76:	0a5b      	lsrs	r3, r3, #9
 8008a78:	f003 0301 	and.w	r3, r3, #1
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d00e      	beq.n	8008a9e <HAL_I2C_ER_IRQHandler+0x78>
 8008a80:	69fb      	ldr	r3, [r7, #28]
 8008a82:	0a1b      	lsrs	r3, r3, #8
 8008a84:	f003 0301 	and.w	r3, r3, #1
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d008      	beq.n	8008a9e <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8008a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a8e:	f043 0302 	orr.w	r3, r3, #2
 8008a92:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8008a9c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8008a9e:	6a3b      	ldr	r3, [r7, #32]
 8008aa0:	0a9b      	lsrs	r3, r3, #10
 8008aa2:	f003 0301 	and.w	r3, r3, #1
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d03f      	beq.n	8008b2a <HAL_I2C_ER_IRQHandler+0x104>
 8008aaa:	69fb      	ldr	r3, [r7, #28]
 8008aac:	0a1b      	lsrs	r3, r3, #8
 8008aae:	f003 0301 	and.w	r3, r3, #1
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d039      	beq.n	8008b2a <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8008ab6:	7efb      	ldrb	r3, [r7, #27]
 8008ab8:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008abe:	b29b      	uxth	r3, r3
 8008ac0:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008ac8:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ace:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8008ad0:	7ebb      	ldrb	r3, [r7, #26]
 8008ad2:	2b20      	cmp	r3, #32
 8008ad4:	d112      	bne.n	8008afc <HAL_I2C_ER_IRQHandler+0xd6>
 8008ad6:	697b      	ldr	r3, [r7, #20]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d10f      	bne.n	8008afc <HAL_I2C_ER_IRQHandler+0xd6>
 8008adc:	7cfb      	ldrb	r3, [r7, #19]
 8008ade:	2b21      	cmp	r3, #33	@ 0x21
 8008ae0:	d008      	beq.n	8008af4 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8008ae2:	7cfb      	ldrb	r3, [r7, #19]
 8008ae4:	2b29      	cmp	r3, #41	@ 0x29
 8008ae6:	d005      	beq.n	8008af4 <HAL_I2C_ER_IRQHandler+0xce>
 8008ae8:	7cfb      	ldrb	r3, [r7, #19]
 8008aea:	2b28      	cmp	r3, #40	@ 0x28
 8008aec:	d106      	bne.n	8008afc <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	2b21      	cmp	r3, #33	@ 0x21
 8008af2:	d103      	bne.n	8008afc <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8008af4:	6878      	ldr	r0, [r7, #4]
 8008af6:	f001 f871 	bl	8009bdc <I2C_Slave_AF>
 8008afa:	e016      	b.n	8008b2a <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008b04:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8008b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b08:	f043 0304 	orr.w	r3, r3, #4
 8008b0c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8008b0e:	7efb      	ldrb	r3, [r7, #27]
 8008b10:	2b10      	cmp	r3, #16
 8008b12:	d002      	beq.n	8008b1a <HAL_I2C_ER_IRQHandler+0xf4>
 8008b14:	7efb      	ldrb	r3, [r7, #27]
 8008b16:	2b40      	cmp	r3, #64	@ 0x40
 8008b18:	d107      	bne.n	8008b2a <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	681a      	ldr	r2, [r3, #0]
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008b28:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8008b2a:	6a3b      	ldr	r3, [r7, #32]
 8008b2c:	0adb      	lsrs	r3, r3, #11
 8008b2e:	f003 0301 	and.w	r3, r3, #1
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d00e      	beq.n	8008b54 <HAL_I2C_ER_IRQHandler+0x12e>
 8008b36:	69fb      	ldr	r3, [r7, #28]
 8008b38:	0a1b      	lsrs	r3, r3, #8
 8008b3a:	f003 0301 	and.w	r3, r3, #1
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d008      	beq.n	8008b54 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8008b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b44:	f043 0308 	orr.w	r3, r3, #8
 8008b48:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8008b52:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8008b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d008      	beq.n	8008b6c <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b60:	431a      	orrs	r2, r3
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8008b66:	6878      	ldr	r0, [r7, #4]
 8008b68:	f001 f8ac 	bl	8009cc4 <I2C_ITError>
  }
}
 8008b6c:	bf00      	nop
 8008b6e:	3728      	adds	r7, #40	@ 0x28
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bd80      	pop	{r7, pc}

08008b74 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008b74:	b480      	push	{r7}
 8008b76:	b083      	sub	sp, #12
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8008b7c:	bf00      	nop
 8008b7e:	370c      	adds	r7, #12
 8008b80:	46bd      	mov	sp, r7
 8008b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b86:	4770      	bx	lr

08008b88 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008b88:	b480      	push	{r7}
 8008b8a:	b083      	sub	sp, #12
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8008b90:	bf00      	nop
 8008b92:	370c      	adds	r7, #12
 8008b94:	46bd      	mov	sp, r7
 8008b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9a:	4770      	bx	lr

08008b9c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008b9c:	b480      	push	{r7}
 8008b9e:	b083      	sub	sp, #12
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8008ba4:	bf00      	nop
 8008ba6:	370c      	adds	r7, #12
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bae:	4770      	bx	lr

08008bb0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	b083      	sub	sp, #12
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8008bb8:	bf00      	nop
 8008bba:	370c      	adds	r7, #12
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc2:	4770      	bx	lr

08008bc4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8008bc4:	b480      	push	{r7}
 8008bc6:	b083      	sub	sp, #12
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
 8008bcc:	460b      	mov	r3, r1
 8008bce:	70fb      	strb	r3, [r7, #3]
 8008bd0:	4613      	mov	r3, r2
 8008bd2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8008bd4:	bf00      	nop
 8008bd6:	370c      	adds	r7, #12
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bde:	4770      	bx	lr

08008be0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008be0:	b480      	push	{r7}
 8008be2:	b083      	sub	sp, #12
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8008be8:	bf00      	nop
 8008bea:	370c      	adds	r7, #12
 8008bec:	46bd      	mov	sp, r7
 8008bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf2:	4770      	bx	lr

08008bf4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8008bf4:	b480      	push	{r7}
 8008bf6:	b083      	sub	sp, #12
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8008bfc:	bf00      	nop
 8008bfe:	370c      	adds	r7, #12
 8008c00:	46bd      	mov	sp, r7
 8008c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c06:	4770      	bx	lr

08008c08 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008c08:	b480      	push	{r7}
 8008c0a:	b083      	sub	sp, #12
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8008c10:	bf00      	nop
 8008c12:	370c      	adds	r7, #12
 8008c14:	46bd      	mov	sp, r7
 8008c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1a:	4770      	bx	lr

08008c1c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b084      	sub	sp, #16
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008c2a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008c32:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c38:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d150      	bne.n	8008ce4 <I2C_MasterTransmit_TXE+0xc8>
 8008c42:	7bfb      	ldrb	r3, [r7, #15]
 8008c44:	2b21      	cmp	r3, #33	@ 0x21
 8008c46:	d14d      	bne.n	8008ce4 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	2b08      	cmp	r3, #8
 8008c4c:	d01d      	beq.n	8008c8a <I2C_MasterTransmit_TXE+0x6e>
 8008c4e:	68bb      	ldr	r3, [r7, #8]
 8008c50:	2b20      	cmp	r3, #32
 8008c52:	d01a      	beq.n	8008c8a <I2C_MasterTransmit_TXE+0x6e>
 8008c54:	68bb      	ldr	r3, [r7, #8]
 8008c56:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008c5a:	d016      	beq.n	8008c8a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	685a      	ldr	r2, [r3, #4]
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8008c6a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2211      	movs	r2, #17
 8008c70:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2200      	movs	r2, #0
 8008c76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2220      	movs	r2, #32
 8008c7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	f7ff ff76 	bl	8008b74 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008c88:	e060      	b.n	8008d4c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	685a      	ldr	r2, [r3, #4]
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8008c98:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	681a      	ldr	r2, [r3, #0]
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008ca8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2200      	movs	r2, #0
 8008cae:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2220      	movs	r2, #32
 8008cb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008cbe:	b2db      	uxtb	r3, r3
 8008cc0:	2b40      	cmp	r3, #64	@ 0x40
 8008cc2:	d107      	bne.n	8008cd4 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8008ccc:	6878      	ldr	r0, [r7, #4]
 8008cce:	f7fc f91f 	bl	8004f10 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008cd2:	e03b      	b.n	8008d4c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	f7ff ff49 	bl	8008b74 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008ce2:	e033      	b.n	8008d4c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8008ce4:	7bfb      	ldrb	r3, [r7, #15]
 8008ce6:	2b21      	cmp	r3, #33	@ 0x21
 8008ce8:	d005      	beq.n	8008cf6 <I2C_MasterTransmit_TXE+0xda>
 8008cea:	7bbb      	ldrb	r3, [r7, #14]
 8008cec:	2b40      	cmp	r3, #64	@ 0x40
 8008cee:	d12d      	bne.n	8008d4c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8008cf0:	7bfb      	ldrb	r3, [r7, #15]
 8008cf2:	2b22      	cmp	r3, #34	@ 0x22
 8008cf4:	d12a      	bne.n	8008d4c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008cfa:	b29b      	uxth	r3, r3
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d108      	bne.n	8008d12 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	685a      	ldr	r2, [r3, #4]
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008d0e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8008d10:	e01c      	b.n	8008d4c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008d18:	b2db      	uxtb	r3, r3
 8008d1a:	2b40      	cmp	r3, #64	@ 0x40
 8008d1c:	d103      	bne.n	8008d26 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	f000 f88e 	bl	8008e40 <I2C_MemoryTransmit_TXE_BTF>
}
 8008d24:	e012      	b.n	8008d4c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d2a:	781a      	ldrb	r2, [r3, #0]
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d36:	1c5a      	adds	r2, r3, #1
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008d40:	b29b      	uxth	r3, r3
 8008d42:	3b01      	subs	r3, #1
 8008d44:	b29a      	uxth	r2, r3
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8008d4a:	e7ff      	b.n	8008d4c <I2C_MasterTransmit_TXE+0x130>
 8008d4c:	bf00      	nop
 8008d4e:	3710      	adds	r7, #16
 8008d50:	46bd      	mov	sp, r7
 8008d52:	bd80      	pop	{r7, pc}

08008d54 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b084      	sub	sp, #16
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d60:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008d68:	b2db      	uxtb	r3, r3
 8008d6a:	2b21      	cmp	r3, #33	@ 0x21
 8008d6c:	d164      	bne.n	8008e38 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008d72:	b29b      	uxth	r3, r3
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d012      	beq.n	8008d9e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d7c:	781a      	ldrb	r2, [r3, #0]
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d88:	1c5a      	adds	r2, r3, #1
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008d92:	b29b      	uxth	r3, r3
 8008d94:	3b01      	subs	r3, #1
 8008d96:	b29a      	uxth	r2, r3
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8008d9c:	e04c      	b.n	8008e38 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	2b08      	cmp	r3, #8
 8008da2:	d01d      	beq.n	8008de0 <I2C_MasterTransmit_BTF+0x8c>
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	2b20      	cmp	r3, #32
 8008da8:	d01a      	beq.n	8008de0 <I2C_MasterTransmit_BTF+0x8c>
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008db0:	d016      	beq.n	8008de0 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	685a      	ldr	r2, [r3, #4]
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8008dc0:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2211      	movs	r2, #17
 8008dc6:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2200      	movs	r2, #0
 8008dcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2220      	movs	r2, #32
 8008dd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	f7ff fecb 	bl	8008b74 <HAL_I2C_MasterTxCpltCallback>
}
 8008dde:	e02b      	b.n	8008e38 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	685a      	ldr	r2, [r3, #4]
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8008dee:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	681a      	ldr	r2, [r3, #0]
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008dfe:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2200      	movs	r2, #0
 8008e04:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	2220      	movs	r2, #32
 8008e0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008e14:	b2db      	uxtb	r3, r3
 8008e16:	2b40      	cmp	r3, #64	@ 0x40
 8008e18:	d107      	bne.n	8008e2a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8008e22:	6878      	ldr	r0, [r7, #4]
 8008e24:	f7fc f874 	bl	8004f10 <HAL_I2C_MemTxCpltCallback>
}
 8008e28:	e006      	b.n	8008e38 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f7ff fe9e 	bl	8008b74 <HAL_I2C_MasterTxCpltCallback>
}
 8008e38:	bf00      	nop
 8008e3a:	3710      	adds	r7, #16
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	bd80      	pop	{r7, pc}

08008e40 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b084      	sub	sp, #16
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008e4e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d11d      	bne.n	8008e94 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e5c:	2b01      	cmp	r3, #1
 8008e5e:	d10b      	bne.n	8008e78 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008e64:	b2da      	uxtb	r2, r3
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e70:	1c9a      	adds	r2, r3, #2
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8008e76:	e077      	b.n	8008f68 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008e7c:	b29b      	uxth	r3, r3
 8008e7e:	121b      	asrs	r3, r3, #8
 8008e80:	b2da      	uxtb	r2, r3
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e8c:	1c5a      	adds	r2, r3, #1
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8008e92:	e069      	b.n	8008f68 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e98:	2b01      	cmp	r3, #1
 8008e9a:	d10b      	bne.n	8008eb4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008ea0:	b2da      	uxtb	r2, r3
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008eac:	1c5a      	adds	r2, r3, #1
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8008eb2:	e059      	b.n	8008f68 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008eb8:	2b02      	cmp	r3, #2
 8008eba:	d152      	bne.n	8008f62 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8008ebc:	7bfb      	ldrb	r3, [r7, #15]
 8008ebe:	2b22      	cmp	r3, #34	@ 0x22
 8008ec0:	d10d      	bne.n	8008ede <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	681a      	ldr	r2, [r3, #0]
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008ed0:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ed6:	1c5a      	adds	r2, r3, #1
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8008edc:	e044      	b.n	8008f68 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008ee2:	b29b      	uxth	r3, r3
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d015      	beq.n	8008f14 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8008ee8:	7bfb      	ldrb	r3, [r7, #15]
 8008eea:	2b21      	cmp	r3, #33	@ 0x21
 8008eec:	d112      	bne.n	8008f14 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ef2:	781a      	ldrb	r2, [r3, #0]
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008efe:	1c5a      	adds	r2, r3, #1
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008f08:	b29b      	uxth	r3, r3
 8008f0a:	3b01      	subs	r3, #1
 8008f0c:	b29a      	uxth	r2, r3
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8008f12:	e029      	b.n	8008f68 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008f18:	b29b      	uxth	r3, r3
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d124      	bne.n	8008f68 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8008f1e:	7bfb      	ldrb	r3, [r7, #15]
 8008f20:	2b21      	cmp	r3, #33	@ 0x21
 8008f22:	d121      	bne.n	8008f68 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	685a      	ldr	r2, [r3, #4]
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8008f32:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	681a      	ldr	r2, [r3, #0]
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008f42:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2200      	movs	r2, #0
 8008f48:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	2220      	movs	r2, #32
 8008f4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	2200      	movs	r2, #0
 8008f56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8008f5a:	6878      	ldr	r0, [r7, #4]
 8008f5c:	f7fb ffd8 	bl	8004f10 <HAL_I2C_MemTxCpltCallback>
}
 8008f60:	e002      	b.n	8008f68 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8008f62:	6878      	ldr	r0, [r7, #4]
 8008f64:	f7fe fb92 	bl	800768c <I2C_Flush_DR>
}
 8008f68:	bf00      	nop
 8008f6a:	3710      	adds	r7, #16
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	bd80      	pop	{r7, pc}

08008f70 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b084      	sub	sp, #16
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008f7e:	b2db      	uxtb	r3, r3
 8008f80:	2b22      	cmp	r3, #34	@ 0x22
 8008f82:	f040 80b9 	bne.w	80090f8 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f8a:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008f90:	b29b      	uxth	r3, r3
 8008f92:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	2b03      	cmp	r3, #3
 8008f98:	d921      	bls.n	8008fde <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	691a      	ldr	r2, [r3, #16]
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fa4:	b2d2      	uxtb	r2, r2
 8008fa6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fac:	1c5a      	adds	r2, r3, #1
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008fb6:	b29b      	uxth	r3, r3
 8008fb8:	3b01      	subs	r3, #1
 8008fba:	b29a      	uxth	r2, r3
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008fc4:	b29b      	uxth	r3, r3
 8008fc6:	2b03      	cmp	r3, #3
 8008fc8:	f040 8096 	bne.w	80090f8 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	685a      	ldr	r2, [r3, #4]
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008fda:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8008fdc:	e08c      	b.n	80090f8 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fe2:	2b02      	cmp	r3, #2
 8008fe4:	d07f      	beq.n	80090e6 <I2C_MasterReceive_RXNE+0x176>
 8008fe6:	68bb      	ldr	r3, [r7, #8]
 8008fe8:	2b01      	cmp	r3, #1
 8008fea:	d002      	beq.n	8008ff2 <I2C_MasterReceive_RXNE+0x82>
 8008fec:	68bb      	ldr	r3, [r7, #8]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d179      	bne.n	80090e6 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8008ff2:	6878      	ldr	r0, [r7, #4]
 8008ff4:	f001 fd06 	bl	800aa04 <I2C_WaitOnSTOPRequestThroughIT>
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d14c      	bne.n	8009098 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	681a      	ldr	r2, [r3, #0]
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800900c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	685a      	ldr	r2, [r3, #4]
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800901c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	691a      	ldr	r2, [r3, #16]
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009028:	b2d2      	uxtb	r2, r2
 800902a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009030:	1c5a      	adds	r2, r3, #1
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800903a:	b29b      	uxth	r3, r3
 800903c:	3b01      	subs	r3, #1
 800903e:	b29a      	uxth	r2, r3
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2220      	movs	r2, #32
 8009048:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009052:	b2db      	uxtb	r3, r3
 8009054:	2b40      	cmp	r3, #64	@ 0x40
 8009056:	d10a      	bne.n	800906e <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2200      	movs	r2, #0
 800905c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2200      	movs	r2, #0
 8009064:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	f7fb ff68 	bl	8004f3c <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800906c:	e044      	b.n	80090f8 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	2200      	movs	r2, #0
 8009072:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	2b08      	cmp	r3, #8
 800907a:	d002      	beq.n	8009082 <I2C_MasterReceive_RXNE+0x112>
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	2b20      	cmp	r3, #32
 8009080:	d103      	bne.n	800908a <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2200      	movs	r2, #0
 8009086:	631a      	str	r2, [r3, #48]	@ 0x30
 8009088:	e002      	b.n	8009090 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2212      	movs	r2, #18
 800908e:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8009090:	6878      	ldr	r0, [r7, #4]
 8009092:	f7ff fd79 	bl	8008b88 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8009096:	e02f      	b.n	80090f8 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	685a      	ldr	r2, [r3, #4]
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80090a6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	691a      	ldr	r2, [r3, #16]
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090b2:	b2d2      	uxtb	r2, r2
 80090b4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090ba:	1c5a      	adds	r2, r3, #1
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80090c4:	b29b      	uxth	r3, r3
 80090c6:	3b01      	subs	r3, #1
 80090c8:	b29a      	uxth	r2, r3
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	2220      	movs	r2, #32
 80090d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2200      	movs	r2, #0
 80090da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80090de:	6878      	ldr	r0, [r7, #4]
 80090e0:	f7ff fd88 	bl	8008bf4 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80090e4:	e008      	b.n	80090f8 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	685a      	ldr	r2, [r3, #4]
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80090f4:	605a      	str	r2, [r3, #4]
}
 80090f6:	e7ff      	b.n	80090f8 <I2C_MasterReceive_RXNE+0x188>
 80090f8:	bf00      	nop
 80090fa:	3710      	adds	r7, #16
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bd80      	pop	{r7, pc}

08009100 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b084      	sub	sp, #16
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800910c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009112:	b29b      	uxth	r3, r3
 8009114:	2b04      	cmp	r3, #4
 8009116:	d11b      	bne.n	8009150 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	685a      	ldr	r2, [r3, #4]
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009126:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	691a      	ldr	r2, [r3, #16]
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009132:	b2d2      	uxtb	r2, r2
 8009134:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800913a:	1c5a      	adds	r2, r3, #1
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009144:	b29b      	uxth	r3, r3
 8009146:	3b01      	subs	r3, #1
 8009148:	b29a      	uxth	r2, r3
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800914e:	e0c8      	b.n	80092e2 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009154:	b29b      	uxth	r3, r3
 8009156:	2b03      	cmp	r3, #3
 8009158:	d129      	bne.n	80091ae <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	685a      	ldr	r2, [r3, #4]
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009168:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	2b04      	cmp	r3, #4
 800916e:	d00a      	beq.n	8009186 <I2C_MasterReceive_BTF+0x86>
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	2b02      	cmp	r3, #2
 8009174:	d007      	beq.n	8009186 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	681a      	ldr	r2, [r3, #0]
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009184:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	691a      	ldr	r2, [r3, #16]
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009190:	b2d2      	uxtb	r2, r2
 8009192:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009198:	1c5a      	adds	r2, r3, #1
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80091a2:	b29b      	uxth	r3, r3
 80091a4:	3b01      	subs	r3, #1
 80091a6:	b29a      	uxth	r2, r3
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80091ac:	e099      	b.n	80092e2 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80091b2:	b29b      	uxth	r3, r3
 80091b4:	2b02      	cmp	r3, #2
 80091b6:	f040 8081 	bne.w	80092bc <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	2b01      	cmp	r3, #1
 80091be:	d002      	beq.n	80091c6 <I2C_MasterReceive_BTF+0xc6>
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	2b10      	cmp	r3, #16
 80091c4:	d108      	bne.n	80091d8 <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	681a      	ldr	r2, [r3, #0]
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80091d4:	601a      	str	r2, [r3, #0]
 80091d6:	e019      	b.n	800920c <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	2b04      	cmp	r3, #4
 80091dc:	d002      	beq.n	80091e4 <I2C_MasterReceive_BTF+0xe4>
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	2b02      	cmp	r3, #2
 80091e2:	d108      	bne.n	80091f6 <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	681a      	ldr	r2, [r3, #0]
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80091f2:	601a      	str	r2, [r3, #0]
 80091f4:	e00a      	b.n	800920c <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	2b10      	cmp	r3, #16
 80091fa:	d007      	beq.n	800920c <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	681a      	ldr	r2, [r3, #0]
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800920a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	691a      	ldr	r2, [r3, #16]
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009216:	b2d2      	uxtb	r2, r2
 8009218:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800921e:	1c5a      	adds	r2, r3, #1
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009228:	b29b      	uxth	r3, r3
 800922a:	3b01      	subs	r3, #1
 800922c:	b29a      	uxth	r2, r3
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	691a      	ldr	r2, [r3, #16]
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800923c:	b2d2      	uxtb	r2, r2
 800923e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009244:	1c5a      	adds	r2, r3, #1
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800924e:	b29b      	uxth	r3, r3
 8009250:	3b01      	subs	r3, #1
 8009252:	b29a      	uxth	r2, r3
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	685a      	ldr	r2, [r3, #4]
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8009266:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2220      	movs	r2, #32
 800926c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009276:	b2db      	uxtb	r3, r3
 8009278:	2b40      	cmp	r3, #64	@ 0x40
 800927a:	d10a      	bne.n	8009292 <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2200      	movs	r2, #0
 8009280:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2200      	movs	r2, #0
 8009288:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	f7fb fe56 	bl	8004f3c <HAL_I2C_MemRxCpltCallback>
}
 8009290:	e027      	b.n	80092e2 <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	2200      	movs	r2, #0
 8009296:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	2b08      	cmp	r3, #8
 800929e:	d002      	beq.n	80092a6 <I2C_MasterReceive_BTF+0x1a6>
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	2b20      	cmp	r3, #32
 80092a4:	d103      	bne.n	80092ae <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2200      	movs	r2, #0
 80092aa:	631a      	str	r2, [r3, #48]	@ 0x30
 80092ac:	e002      	b.n	80092b4 <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	2212      	movs	r2, #18
 80092b2:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80092b4:	6878      	ldr	r0, [r7, #4]
 80092b6:	f7ff fc67 	bl	8008b88 <HAL_I2C_MasterRxCpltCallback>
}
 80092ba:	e012      	b.n	80092e2 <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	691a      	ldr	r2, [r3, #16]
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092c6:	b2d2      	uxtb	r2, r2
 80092c8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092ce:	1c5a      	adds	r2, r3, #1
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80092d8:	b29b      	uxth	r3, r3
 80092da:	3b01      	subs	r3, #1
 80092dc:	b29a      	uxth	r2, r3
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80092e2:	bf00      	nop
 80092e4:	3710      	adds	r7, #16
 80092e6:	46bd      	mov	sp, r7
 80092e8:	bd80      	pop	{r7, pc}

080092ea <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80092ea:	b480      	push	{r7}
 80092ec:	b083      	sub	sp, #12
 80092ee:	af00      	add	r7, sp, #0
 80092f0:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80092f8:	b2db      	uxtb	r3, r3
 80092fa:	2b40      	cmp	r3, #64	@ 0x40
 80092fc:	d117      	bne.n	800932e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009302:	2b00      	cmp	r3, #0
 8009304:	d109      	bne.n	800931a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800930a:	b2db      	uxtb	r3, r3
 800930c:	461a      	mov	r2, r3
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8009316:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8009318:	e067      	b.n	80093ea <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800931e:	b2db      	uxtb	r3, r3
 8009320:	f043 0301 	orr.w	r3, r3, #1
 8009324:	b2da      	uxtb	r2, r3
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	611a      	str	r2, [r3, #16]
}
 800932c:	e05d      	b.n	80093ea <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	691b      	ldr	r3, [r3, #16]
 8009332:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009336:	d133      	bne.n	80093a0 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800933e:	b2db      	uxtb	r3, r3
 8009340:	2b21      	cmp	r3, #33	@ 0x21
 8009342:	d109      	bne.n	8009358 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009348:	b2db      	uxtb	r3, r3
 800934a:	461a      	mov	r2, r3
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8009354:	611a      	str	r2, [r3, #16]
 8009356:	e008      	b.n	800936a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800935c:	b2db      	uxtb	r3, r3
 800935e:	f043 0301 	orr.w	r3, r3, #1
 8009362:	b2da      	uxtb	r2, r3
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800936e:	2b00      	cmp	r3, #0
 8009370:	d004      	beq.n	800937c <I2C_Master_SB+0x92>
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009376:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009378:	2b00      	cmp	r3, #0
 800937a:	d108      	bne.n	800938e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009380:	2b00      	cmp	r3, #0
 8009382:	d032      	beq.n	80093ea <I2C_Master_SB+0x100>
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009388:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800938a:	2b00      	cmp	r3, #0
 800938c:	d02d      	beq.n	80093ea <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	685a      	ldr	r2, [r3, #4]
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800939c:	605a      	str	r2, [r3, #4]
}
 800939e:	e024      	b.n	80093ea <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d10e      	bne.n	80093c6 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093ac:	b29b      	uxth	r3, r3
 80093ae:	11db      	asrs	r3, r3, #7
 80093b0:	b2db      	uxtb	r3, r3
 80093b2:	f003 0306 	and.w	r3, r3, #6
 80093b6:	b2db      	uxtb	r3, r3
 80093b8:	f063 030f 	orn	r3, r3, #15
 80093bc:	b2da      	uxtb	r2, r3
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	611a      	str	r2, [r3, #16]
}
 80093c4:	e011      	b.n	80093ea <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80093ca:	2b01      	cmp	r3, #1
 80093cc:	d10d      	bne.n	80093ea <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093d2:	b29b      	uxth	r3, r3
 80093d4:	11db      	asrs	r3, r3, #7
 80093d6:	b2db      	uxtb	r3, r3
 80093d8:	f003 0306 	and.w	r3, r3, #6
 80093dc:	b2db      	uxtb	r3, r3
 80093de:	f063 030e 	orn	r3, r3, #14
 80093e2:	b2da      	uxtb	r2, r3
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	611a      	str	r2, [r3, #16]
}
 80093ea:	bf00      	nop
 80093ec:	370c      	adds	r7, #12
 80093ee:	46bd      	mov	sp, r7
 80093f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f4:	4770      	bx	lr

080093f6 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80093f6:	b480      	push	{r7}
 80093f8:	b083      	sub	sp, #12
 80093fa:	af00      	add	r7, sp, #0
 80093fc:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009402:	b2da      	uxtb	r2, r3
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800940e:	2b00      	cmp	r3, #0
 8009410:	d004      	beq.n	800941c <I2C_Master_ADD10+0x26>
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009416:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009418:	2b00      	cmp	r3, #0
 800941a:	d108      	bne.n	800942e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009420:	2b00      	cmp	r3, #0
 8009422:	d00c      	beq.n	800943e <I2C_Master_ADD10+0x48>
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009428:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800942a:	2b00      	cmp	r3, #0
 800942c:	d007      	beq.n	800943e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	685a      	ldr	r2, [r3, #4]
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800943c:	605a      	str	r2, [r3, #4]
  }
}
 800943e:	bf00      	nop
 8009440:	370c      	adds	r7, #12
 8009442:	46bd      	mov	sp, r7
 8009444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009448:	4770      	bx	lr

0800944a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800944a:	b480      	push	{r7}
 800944c:	b091      	sub	sp, #68	@ 0x44
 800944e:	af00      	add	r7, sp, #0
 8009450:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009458:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009460:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009466:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800946e:	b2db      	uxtb	r3, r3
 8009470:	2b22      	cmp	r3, #34	@ 0x22
 8009472:	f040 8169 	bne.w	8009748 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800947a:	2b00      	cmp	r3, #0
 800947c:	d10f      	bne.n	800949e <I2C_Master_ADDR+0x54>
 800947e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009482:	2b40      	cmp	r3, #64	@ 0x40
 8009484:	d10b      	bne.n	800949e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009486:	2300      	movs	r3, #0
 8009488:	633b      	str	r3, [r7, #48]	@ 0x30
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	695b      	ldr	r3, [r3, #20]
 8009490:	633b      	str	r3, [r7, #48]	@ 0x30
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	699b      	ldr	r3, [r3, #24]
 8009498:	633b      	str	r3, [r7, #48]	@ 0x30
 800949a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800949c:	e160      	b.n	8009760 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d11d      	bne.n	80094e2 <I2C_Master_ADDR+0x98>
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	691b      	ldr	r3, [r3, #16]
 80094aa:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80094ae:	d118      	bne.n	80094e2 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80094b0:	2300      	movs	r3, #0
 80094b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	695b      	ldr	r3, [r3, #20]
 80094ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	699b      	ldr	r3, [r3, #24]
 80094c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80094c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	681a      	ldr	r2, [r3, #0]
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80094d4:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80094da:	1c5a      	adds	r2, r3, #1
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	651a      	str	r2, [r3, #80]	@ 0x50
 80094e0:	e13e      	b.n	8009760 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80094e6:	b29b      	uxth	r3, r3
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d113      	bne.n	8009514 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80094ec:	2300      	movs	r3, #0
 80094ee:	62bb      	str	r3, [r7, #40]	@ 0x28
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	695b      	ldr	r3, [r3, #20]
 80094f6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	699b      	ldr	r3, [r3, #24]
 80094fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009500:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	681a      	ldr	r2, [r3, #0]
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009510:	601a      	str	r2, [r3, #0]
 8009512:	e115      	b.n	8009740 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009518:	b29b      	uxth	r3, r3
 800951a:	2b01      	cmp	r3, #1
 800951c:	f040 808a 	bne.w	8009634 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8009520:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009522:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009526:	d137      	bne.n	8009598 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	681a      	ldr	r2, [r3, #0]
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009536:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	685b      	ldr	r3, [r3, #4]
 800953e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009542:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009546:	d113      	bne.n	8009570 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	681a      	ldr	r2, [r3, #0]
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009556:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009558:	2300      	movs	r3, #0
 800955a:	627b      	str	r3, [r7, #36]	@ 0x24
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	695b      	ldr	r3, [r3, #20]
 8009562:	627b      	str	r3, [r7, #36]	@ 0x24
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	699b      	ldr	r3, [r3, #24]
 800956a:	627b      	str	r3, [r7, #36]	@ 0x24
 800956c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800956e:	e0e7      	b.n	8009740 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009570:	2300      	movs	r3, #0
 8009572:	623b      	str	r3, [r7, #32]
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	695b      	ldr	r3, [r3, #20]
 800957a:	623b      	str	r3, [r7, #32]
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	699b      	ldr	r3, [r3, #24]
 8009582:	623b      	str	r3, [r7, #32]
 8009584:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	681a      	ldr	r2, [r3, #0]
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009594:	601a      	str	r2, [r3, #0]
 8009596:	e0d3      	b.n	8009740 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8009598:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800959a:	2b08      	cmp	r3, #8
 800959c:	d02e      	beq.n	80095fc <I2C_Master_ADDR+0x1b2>
 800959e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095a0:	2b20      	cmp	r3, #32
 80095a2:	d02b      	beq.n	80095fc <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80095a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095a6:	2b12      	cmp	r3, #18
 80095a8:	d102      	bne.n	80095b0 <I2C_Master_ADDR+0x166>
 80095aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095ac:	2b01      	cmp	r3, #1
 80095ae:	d125      	bne.n	80095fc <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80095b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095b2:	2b04      	cmp	r3, #4
 80095b4:	d00e      	beq.n	80095d4 <I2C_Master_ADDR+0x18a>
 80095b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095b8:	2b02      	cmp	r3, #2
 80095ba:	d00b      	beq.n	80095d4 <I2C_Master_ADDR+0x18a>
 80095bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095be:	2b10      	cmp	r3, #16
 80095c0:	d008      	beq.n	80095d4 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	681a      	ldr	r2, [r3, #0]
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80095d0:	601a      	str	r2, [r3, #0]
 80095d2:	e007      	b.n	80095e4 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	681a      	ldr	r2, [r3, #0]
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80095e2:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80095e4:	2300      	movs	r3, #0
 80095e6:	61fb      	str	r3, [r7, #28]
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	695b      	ldr	r3, [r3, #20]
 80095ee:	61fb      	str	r3, [r7, #28]
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	699b      	ldr	r3, [r3, #24]
 80095f6:	61fb      	str	r3, [r7, #28]
 80095f8:	69fb      	ldr	r3, [r7, #28]
 80095fa:	e0a1      	b.n	8009740 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	681a      	ldr	r2, [r3, #0]
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800960a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800960c:	2300      	movs	r3, #0
 800960e:	61bb      	str	r3, [r7, #24]
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	695b      	ldr	r3, [r3, #20]
 8009616:	61bb      	str	r3, [r7, #24]
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	699b      	ldr	r3, [r3, #24]
 800961e:	61bb      	str	r3, [r7, #24]
 8009620:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	681a      	ldr	r2, [r3, #0]
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009630:	601a      	str	r2, [r3, #0]
 8009632:	e085      	b.n	8009740 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009638:	b29b      	uxth	r3, r3
 800963a:	2b02      	cmp	r3, #2
 800963c:	d14d      	bne.n	80096da <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800963e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009640:	2b04      	cmp	r3, #4
 8009642:	d016      	beq.n	8009672 <I2C_Master_ADDR+0x228>
 8009644:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009646:	2b02      	cmp	r3, #2
 8009648:	d013      	beq.n	8009672 <I2C_Master_ADDR+0x228>
 800964a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800964c:	2b10      	cmp	r3, #16
 800964e:	d010      	beq.n	8009672 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	681a      	ldr	r2, [r3, #0]
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800965e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	681a      	ldr	r2, [r3, #0]
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800966e:	601a      	str	r2, [r3, #0]
 8009670:	e007      	b.n	8009682 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	681a      	ldr	r2, [r3, #0]
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009680:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	685b      	ldr	r3, [r3, #4]
 8009688:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800968c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009690:	d117      	bne.n	80096c2 <I2C_Master_ADDR+0x278>
 8009692:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009694:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009698:	d00b      	beq.n	80096b2 <I2C_Master_ADDR+0x268>
 800969a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800969c:	2b01      	cmp	r3, #1
 800969e:	d008      	beq.n	80096b2 <I2C_Master_ADDR+0x268>
 80096a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096a2:	2b08      	cmp	r3, #8
 80096a4:	d005      	beq.n	80096b2 <I2C_Master_ADDR+0x268>
 80096a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096a8:	2b10      	cmp	r3, #16
 80096aa:	d002      	beq.n	80096b2 <I2C_Master_ADDR+0x268>
 80096ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096ae:	2b20      	cmp	r3, #32
 80096b0:	d107      	bne.n	80096c2 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	685a      	ldr	r2, [r3, #4]
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80096c0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80096c2:	2300      	movs	r3, #0
 80096c4:	617b      	str	r3, [r7, #20]
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	695b      	ldr	r3, [r3, #20]
 80096cc:	617b      	str	r3, [r7, #20]
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	699b      	ldr	r3, [r3, #24]
 80096d4:	617b      	str	r3, [r7, #20]
 80096d6:	697b      	ldr	r3, [r7, #20]
 80096d8:	e032      	b.n	8009740 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	681a      	ldr	r2, [r3, #0]
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80096e8:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	685b      	ldr	r3, [r3, #4]
 80096f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80096f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80096f8:	d117      	bne.n	800972a <I2C_Master_ADDR+0x2e0>
 80096fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096fc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009700:	d00b      	beq.n	800971a <I2C_Master_ADDR+0x2d0>
 8009702:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009704:	2b01      	cmp	r3, #1
 8009706:	d008      	beq.n	800971a <I2C_Master_ADDR+0x2d0>
 8009708:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800970a:	2b08      	cmp	r3, #8
 800970c:	d005      	beq.n	800971a <I2C_Master_ADDR+0x2d0>
 800970e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009710:	2b10      	cmp	r3, #16
 8009712:	d002      	beq.n	800971a <I2C_Master_ADDR+0x2d0>
 8009714:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009716:	2b20      	cmp	r3, #32
 8009718:	d107      	bne.n	800972a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	685a      	ldr	r2, [r3, #4]
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009728:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800972a:	2300      	movs	r3, #0
 800972c:	613b      	str	r3, [r7, #16]
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	695b      	ldr	r3, [r3, #20]
 8009734:	613b      	str	r3, [r7, #16]
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	699b      	ldr	r3, [r3, #24]
 800973c:	613b      	str	r3, [r7, #16]
 800973e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2200      	movs	r2, #0
 8009744:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8009746:	e00b      	b.n	8009760 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009748:	2300      	movs	r3, #0
 800974a:	60fb      	str	r3, [r7, #12]
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	695b      	ldr	r3, [r3, #20]
 8009752:	60fb      	str	r3, [r7, #12]
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	699b      	ldr	r3, [r3, #24]
 800975a:	60fb      	str	r3, [r7, #12]
 800975c:	68fb      	ldr	r3, [r7, #12]
}
 800975e:	e7ff      	b.n	8009760 <I2C_Master_ADDR+0x316>
 8009760:	bf00      	nop
 8009762:	3744      	adds	r7, #68	@ 0x44
 8009764:	46bd      	mov	sp, r7
 8009766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976a:	4770      	bx	lr

0800976c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b084      	sub	sp, #16
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800977a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009780:	b29b      	uxth	r3, r3
 8009782:	2b00      	cmp	r3, #0
 8009784:	d02b      	beq.n	80097de <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800978a:	781a      	ldrb	r2, [r3, #0]
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009796:	1c5a      	adds	r2, r3, #1
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80097a0:	b29b      	uxth	r3, r3
 80097a2:	3b01      	subs	r3, #1
 80097a4:	b29a      	uxth	r2, r3
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80097ae:	b29b      	uxth	r3, r3
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d114      	bne.n	80097de <I2C_SlaveTransmit_TXE+0x72>
 80097b4:	7bfb      	ldrb	r3, [r7, #15]
 80097b6:	2b29      	cmp	r3, #41	@ 0x29
 80097b8:	d111      	bne.n	80097de <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	685a      	ldr	r2, [r3, #4]
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80097c8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	2221      	movs	r2, #33	@ 0x21
 80097ce:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2228      	movs	r2, #40	@ 0x28
 80097d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80097d8:	6878      	ldr	r0, [r7, #4]
 80097da:	f7ff f9df 	bl	8008b9c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80097de:	bf00      	nop
 80097e0:	3710      	adds	r7, #16
 80097e2:	46bd      	mov	sp, r7
 80097e4:	bd80      	pop	{r7, pc}

080097e6 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80097e6:	b480      	push	{r7}
 80097e8:	b083      	sub	sp, #12
 80097ea:	af00      	add	r7, sp, #0
 80097ec:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80097f2:	b29b      	uxth	r3, r3
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d011      	beq.n	800981c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097fc:	781a      	ldrb	r2, [r3, #0]
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009808:	1c5a      	adds	r2, r3, #1
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009812:	b29b      	uxth	r3, r3
 8009814:	3b01      	subs	r3, #1
 8009816:	b29a      	uxth	r2, r3
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800981c:	bf00      	nop
 800981e:	370c      	adds	r7, #12
 8009820:	46bd      	mov	sp, r7
 8009822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009826:	4770      	bx	lr

08009828 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b084      	sub	sp, #16
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009836:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800983c:	b29b      	uxth	r3, r3
 800983e:	2b00      	cmp	r3, #0
 8009840:	d02c      	beq.n	800989c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	691a      	ldr	r2, [r3, #16]
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800984c:	b2d2      	uxtb	r2, r2
 800984e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009854:	1c5a      	adds	r2, r3, #1
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800985e:	b29b      	uxth	r3, r3
 8009860:	3b01      	subs	r3, #1
 8009862:	b29a      	uxth	r2, r3
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800986c:	b29b      	uxth	r3, r3
 800986e:	2b00      	cmp	r3, #0
 8009870:	d114      	bne.n	800989c <I2C_SlaveReceive_RXNE+0x74>
 8009872:	7bfb      	ldrb	r3, [r7, #15]
 8009874:	2b2a      	cmp	r3, #42	@ 0x2a
 8009876:	d111      	bne.n	800989c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	685a      	ldr	r2, [r3, #4]
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009886:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2222      	movs	r2, #34	@ 0x22
 800988c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	2228      	movs	r2, #40	@ 0x28
 8009892:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009896:	6878      	ldr	r0, [r7, #4]
 8009898:	f7ff f98a 	bl	8008bb0 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800989c:	bf00      	nop
 800989e:	3710      	adds	r7, #16
 80098a0:	46bd      	mov	sp, r7
 80098a2:	bd80      	pop	{r7, pc}

080098a4 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80098a4:	b480      	push	{r7}
 80098a6:	b083      	sub	sp, #12
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80098b0:	b29b      	uxth	r3, r3
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d012      	beq.n	80098dc <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	691a      	ldr	r2, [r3, #16]
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098c0:	b2d2      	uxtb	r2, r2
 80098c2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098c8:	1c5a      	adds	r2, r3, #1
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80098d2:	b29b      	uxth	r3, r3
 80098d4:	3b01      	subs	r3, #1
 80098d6:	b29a      	uxth	r2, r3
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80098dc:	bf00      	nop
 80098de:	370c      	adds	r7, #12
 80098e0:	46bd      	mov	sp, r7
 80098e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e6:	4770      	bx	lr

080098e8 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b084      	sub	sp, #16
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
 80098f0:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80098f2:	2300      	movs	r3, #0
 80098f4:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80098fc:	b2db      	uxtb	r3, r3
 80098fe:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8009902:	2b28      	cmp	r3, #40	@ 0x28
 8009904:	d127      	bne.n	8009956 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	685a      	ldr	r2, [r3, #4]
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009914:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	089b      	lsrs	r3, r3, #2
 800991a:	f003 0301 	and.w	r3, r3, #1
 800991e:	2b00      	cmp	r3, #0
 8009920:	d101      	bne.n	8009926 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8009922:	2301      	movs	r3, #1
 8009924:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	09db      	lsrs	r3, r3, #7
 800992a:	f003 0301 	and.w	r3, r3, #1
 800992e:	2b00      	cmp	r3, #0
 8009930:	d103      	bne.n	800993a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	68db      	ldr	r3, [r3, #12]
 8009936:	81bb      	strh	r3, [r7, #12]
 8009938:	e002      	b.n	8009940 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	699b      	ldr	r3, [r3, #24]
 800993e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	2200      	movs	r2, #0
 8009944:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8009948:	89ba      	ldrh	r2, [r7, #12]
 800994a:	7bfb      	ldrb	r3, [r7, #15]
 800994c:	4619      	mov	r1, r3
 800994e:	6878      	ldr	r0, [r7, #4]
 8009950:	f7ff f938 	bl	8008bc4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8009954:	e00e      	b.n	8009974 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009956:	2300      	movs	r3, #0
 8009958:	60bb      	str	r3, [r7, #8]
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	695b      	ldr	r3, [r3, #20]
 8009960:	60bb      	str	r3, [r7, #8]
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	699b      	ldr	r3, [r3, #24]
 8009968:	60bb      	str	r3, [r7, #8]
 800996a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	2200      	movs	r2, #0
 8009970:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8009974:	bf00      	nop
 8009976:	3710      	adds	r7, #16
 8009978:	46bd      	mov	sp, r7
 800997a:	bd80      	pop	{r7, pc}

0800997c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800997c:	b580      	push	{r7, lr}
 800997e:	b084      	sub	sp, #16
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800998a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	685a      	ldr	r2, [r3, #4]
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800999a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800999c:	2300      	movs	r3, #0
 800999e:	60bb      	str	r3, [r7, #8]
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	695b      	ldr	r3, [r3, #20]
 80099a6:	60bb      	str	r3, [r7, #8]
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	681a      	ldr	r2, [r3, #0]
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	f042 0201 	orr.w	r2, r2, #1
 80099b6:	601a      	str	r2, [r3, #0]
 80099b8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	681a      	ldr	r2, [r3, #0]
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80099c8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	685b      	ldr	r3, [r3, #4]
 80099d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80099d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80099d8:	d172      	bne.n	8009ac0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80099da:	7bfb      	ldrb	r3, [r7, #15]
 80099dc:	2b22      	cmp	r3, #34	@ 0x22
 80099de:	d002      	beq.n	80099e6 <I2C_Slave_STOPF+0x6a>
 80099e0:	7bfb      	ldrb	r3, [r7, #15]
 80099e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80099e4:	d135      	bne.n	8009a52 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	685b      	ldr	r3, [r3, #4]
 80099ee:	b29a      	uxth	r2, r3
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80099f8:	b29b      	uxth	r3, r3
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d005      	beq.n	8009a0a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a02:	f043 0204 	orr.w	r2, r3, #4
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	685a      	ldr	r2, [r3, #4]
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009a18:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a1e:	4618      	mov	r0, r3
 8009a20:	f7fd fa0e 	bl	8006e40 <HAL_DMA_GetState>
 8009a24:	4603      	mov	r3, r0
 8009a26:	2b01      	cmp	r3, #1
 8009a28:	d049      	beq.n	8009abe <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a2e:	4a69      	ldr	r2, [pc, #420]	@ (8009bd4 <I2C_Slave_STOPF+0x258>)
 8009a30:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a36:	4618      	mov	r0, r3
 8009a38:	f7fd f856 	bl	8006ae8 <HAL_DMA_Abort_IT>
 8009a3c:	4603      	mov	r3, r0
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d03d      	beq.n	8009abe <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a48:	687a      	ldr	r2, [r7, #4]
 8009a4a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8009a4c:	4610      	mov	r0, r2
 8009a4e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009a50:	e035      	b.n	8009abe <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	685b      	ldr	r3, [r3, #4]
 8009a5a:	b29a      	uxth	r2, r3
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009a64:	b29b      	uxth	r3, r3
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d005      	beq.n	8009a76 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a6e:	f043 0204 	orr.w	r2, r3, #4
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	685a      	ldr	r2, [r3, #4]
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009a84:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	f7fd f9d8 	bl	8006e40 <HAL_DMA_GetState>
 8009a90:	4603      	mov	r3, r0
 8009a92:	2b01      	cmp	r3, #1
 8009a94:	d014      	beq.n	8009ac0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a9a:	4a4e      	ldr	r2, [pc, #312]	@ (8009bd4 <I2C_Slave_STOPF+0x258>)
 8009a9c:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	f7fd f820 	bl	8006ae8 <HAL_DMA_Abort_IT>
 8009aa8:	4603      	mov	r3, r0
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d008      	beq.n	8009ac0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ab2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ab4:	687a      	ldr	r2, [r7, #4]
 8009ab6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8009ab8:	4610      	mov	r0, r2
 8009aba:	4798      	blx	r3
 8009abc:	e000      	b.n	8009ac0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009abe:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009ac4:	b29b      	uxth	r3, r3
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d03e      	beq.n	8009b48 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	695b      	ldr	r3, [r3, #20]
 8009ad0:	f003 0304 	and.w	r3, r3, #4
 8009ad4:	2b04      	cmp	r3, #4
 8009ad6:	d112      	bne.n	8009afe <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	691a      	ldr	r2, [r3, #16]
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ae2:	b2d2      	uxtb	r2, r2
 8009ae4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009aea:	1c5a      	adds	r2, r3, #1
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009af4:	b29b      	uxth	r3, r3
 8009af6:	3b01      	subs	r3, #1
 8009af8:	b29a      	uxth	r2, r3
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	695b      	ldr	r3, [r3, #20]
 8009b04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b08:	2b40      	cmp	r3, #64	@ 0x40
 8009b0a:	d112      	bne.n	8009b32 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	691a      	ldr	r2, [r3, #16]
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b16:	b2d2      	uxtb	r2, r2
 8009b18:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b1e:	1c5a      	adds	r2, r3, #1
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009b28:	b29b      	uxth	r3, r3
 8009b2a:	3b01      	subs	r3, #1
 8009b2c:	b29a      	uxth	r2, r3
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009b36:	b29b      	uxth	r3, r3
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d005      	beq.n	8009b48 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b40:	f043 0204 	orr.w	r2, r3, #4
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d003      	beq.n	8009b58 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8009b50:	6878      	ldr	r0, [r7, #4]
 8009b52:	f000 f8b7 	bl	8009cc4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8009b56:	e039      	b.n	8009bcc <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8009b58:	7bfb      	ldrb	r3, [r7, #15]
 8009b5a:	2b2a      	cmp	r3, #42	@ 0x2a
 8009b5c:	d109      	bne.n	8009b72 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	2200      	movs	r2, #0
 8009b62:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2228      	movs	r2, #40	@ 0x28
 8009b68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009b6c:	6878      	ldr	r0, [r7, #4]
 8009b6e:	f7ff f81f 	bl	8008bb0 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009b78:	b2db      	uxtb	r3, r3
 8009b7a:	2b28      	cmp	r3, #40	@ 0x28
 8009b7c:	d111      	bne.n	8009ba2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	4a15      	ldr	r2, [pc, #84]	@ (8009bd8 <I2C_Slave_STOPF+0x25c>)
 8009b82:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2200      	movs	r2, #0
 8009b88:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	2220      	movs	r2, #32
 8009b8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	2200      	movs	r2, #0
 8009b96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8009b9a:	6878      	ldr	r0, [r7, #4]
 8009b9c:	f7ff f820 	bl	8008be0 <HAL_I2C_ListenCpltCallback>
}
 8009ba0:	e014      	b.n	8009bcc <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ba6:	2b22      	cmp	r3, #34	@ 0x22
 8009ba8:	d002      	beq.n	8009bb0 <I2C_Slave_STOPF+0x234>
 8009baa:	7bfb      	ldrb	r3, [r7, #15]
 8009bac:	2b22      	cmp	r3, #34	@ 0x22
 8009bae:	d10d      	bne.n	8009bcc <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	2220      	movs	r2, #32
 8009bba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	f7fe fff2 	bl	8008bb0 <HAL_I2C_SlaveRxCpltCallback>
}
 8009bcc:	bf00      	nop
 8009bce:	3710      	adds	r7, #16
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	bd80      	pop	{r7, pc}
 8009bd4:	0800a561 	.word	0x0800a561
 8009bd8:	ffff0000 	.word	0xffff0000

08009bdc <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b084      	sub	sp, #16
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009bea:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bf0:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8009bf2:	68bb      	ldr	r3, [r7, #8]
 8009bf4:	2b08      	cmp	r3, #8
 8009bf6:	d002      	beq.n	8009bfe <I2C_Slave_AF+0x22>
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	2b20      	cmp	r3, #32
 8009bfc:	d129      	bne.n	8009c52 <I2C_Slave_AF+0x76>
 8009bfe:	7bfb      	ldrb	r3, [r7, #15]
 8009c00:	2b28      	cmp	r3, #40	@ 0x28
 8009c02:	d126      	bne.n	8009c52 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	4a2e      	ldr	r2, [pc, #184]	@ (8009cc0 <I2C_Slave_AF+0xe4>)
 8009c08:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	685a      	ldr	r2, [r3, #4]
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8009c18:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8009c22:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	681a      	ldr	r2, [r3, #0]
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009c32:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	2200      	movs	r2, #0
 8009c38:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	2220      	movs	r2, #32
 8009c3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	2200      	movs	r2, #0
 8009c46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8009c4a:	6878      	ldr	r0, [r7, #4]
 8009c4c:	f7fe ffc8 	bl	8008be0 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8009c50:	e031      	b.n	8009cb6 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8009c52:	7bfb      	ldrb	r3, [r7, #15]
 8009c54:	2b21      	cmp	r3, #33	@ 0x21
 8009c56:	d129      	bne.n	8009cac <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	4a19      	ldr	r2, [pc, #100]	@ (8009cc0 <I2C_Slave_AF+0xe4>)
 8009c5c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	2221      	movs	r2, #33	@ 0x21
 8009c62:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	2220      	movs	r2, #32
 8009c68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	2200      	movs	r2, #0
 8009c70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	685a      	ldr	r2, [r3, #4]
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8009c82:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8009c8c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	681a      	ldr	r2, [r3, #0]
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009c9c:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8009c9e:	6878      	ldr	r0, [r7, #4]
 8009ca0:	f7fd fcf4 	bl	800768c <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009ca4:	6878      	ldr	r0, [r7, #4]
 8009ca6:	f7fe ff79 	bl	8008b9c <HAL_I2C_SlaveTxCpltCallback>
}
 8009caa:	e004      	b.n	8009cb6 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8009cb4:	615a      	str	r2, [r3, #20]
}
 8009cb6:	bf00      	nop
 8009cb8:	3710      	adds	r7, #16
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	bd80      	pop	{r7, pc}
 8009cbe:	bf00      	nop
 8009cc0:	ffff0000 	.word	0xffff0000

08009cc4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b084      	sub	sp, #16
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009cd2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009cda:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8009cdc:	7bbb      	ldrb	r3, [r7, #14]
 8009cde:	2b10      	cmp	r3, #16
 8009ce0:	d002      	beq.n	8009ce8 <I2C_ITError+0x24>
 8009ce2:	7bbb      	ldrb	r3, [r7, #14]
 8009ce4:	2b40      	cmp	r3, #64	@ 0x40
 8009ce6:	d10a      	bne.n	8009cfe <I2C_ITError+0x3a>
 8009ce8:	7bfb      	ldrb	r3, [r7, #15]
 8009cea:	2b22      	cmp	r3, #34	@ 0x22
 8009cec:	d107      	bne.n	8009cfe <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	681a      	ldr	r2, [r3, #0]
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009cfc:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009cfe:	7bfb      	ldrb	r3, [r7, #15]
 8009d00:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8009d04:	2b28      	cmp	r3, #40	@ 0x28
 8009d06:	d107      	bne.n	8009d18 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	2228      	movs	r2, #40	@ 0x28
 8009d12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8009d16:	e015      	b.n	8009d44 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	685b      	ldr	r3, [r3, #4]
 8009d1e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009d22:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009d26:	d00a      	beq.n	8009d3e <I2C_ITError+0x7a>
 8009d28:	7bfb      	ldrb	r3, [r7, #15]
 8009d2a:	2b60      	cmp	r3, #96	@ 0x60
 8009d2c:	d007      	beq.n	8009d3e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	2220      	movs	r2, #32
 8009d32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	2200      	movs	r2, #0
 8009d3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	2200      	movs	r2, #0
 8009d42:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	685b      	ldr	r3, [r3, #4]
 8009d4a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009d4e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009d52:	d162      	bne.n	8009e1a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	685a      	ldr	r2, [r3, #4]
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009d62:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d68:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8009d6c:	b2db      	uxtb	r3, r3
 8009d6e:	2b01      	cmp	r3, #1
 8009d70:	d020      	beq.n	8009db4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d76:	4a6a      	ldr	r2, [pc, #424]	@ (8009f20 <I2C_ITError+0x25c>)
 8009d78:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d7e:	4618      	mov	r0, r3
 8009d80:	f7fc feb2 	bl	8006ae8 <HAL_DMA_Abort_IT>
 8009d84:	4603      	mov	r3, r0
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	f000 8089 	beq.w	8009e9e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	681a      	ldr	r2, [r3, #0]
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	f022 0201 	bic.w	r2, r2, #1
 8009d9a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2220      	movs	r2, #32
 8009da0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009da8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009daa:	687a      	ldr	r2, [r7, #4]
 8009dac:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8009dae:	4610      	mov	r0, r2
 8009db0:	4798      	blx	r3
 8009db2:	e074      	b.n	8009e9e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009db8:	4a59      	ldr	r2, [pc, #356]	@ (8009f20 <I2C_ITError+0x25c>)
 8009dba:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	f7fc fe91 	bl	8006ae8 <HAL_DMA_Abort_IT>
 8009dc6:	4603      	mov	r3, r0
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d068      	beq.n	8009e9e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	695b      	ldr	r3, [r3, #20]
 8009dd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009dd6:	2b40      	cmp	r3, #64	@ 0x40
 8009dd8:	d10b      	bne.n	8009df2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	691a      	ldr	r2, [r3, #16]
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009de4:	b2d2      	uxtb	r2, r2
 8009de6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009dec:	1c5a      	adds	r2, r3, #1
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	681a      	ldr	r2, [r3, #0]
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	f022 0201 	bic.w	r2, r2, #1
 8009e00:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2220      	movs	r2, #32
 8009e06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e10:	687a      	ldr	r2, [r7, #4]
 8009e12:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8009e14:	4610      	mov	r0, r2
 8009e16:	4798      	blx	r3
 8009e18:	e041      	b.n	8009e9e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009e20:	b2db      	uxtb	r3, r3
 8009e22:	2b60      	cmp	r3, #96	@ 0x60
 8009e24:	d125      	bne.n	8009e72 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	2220      	movs	r2, #32
 8009e2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	2200      	movs	r2, #0
 8009e32:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	695b      	ldr	r3, [r3, #20]
 8009e3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e3e:	2b40      	cmp	r3, #64	@ 0x40
 8009e40:	d10b      	bne.n	8009e5a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	691a      	ldr	r2, [r3, #16]
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e4c:	b2d2      	uxtb	r2, r2
 8009e4e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e54:	1c5a      	adds	r2, r3, #1
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	681a      	ldr	r2, [r3, #0]
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	f022 0201 	bic.w	r2, r2, #1
 8009e68:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8009e6a:	6878      	ldr	r0, [r7, #4]
 8009e6c:	f7fe fecc 	bl	8008c08 <HAL_I2C_AbortCpltCallback>
 8009e70:	e015      	b.n	8009e9e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	695b      	ldr	r3, [r3, #20]
 8009e78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e7c:	2b40      	cmp	r3, #64	@ 0x40
 8009e7e:	d10b      	bne.n	8009e98 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	691a      	ldr	r2, [r3, #16]
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e8a:	b2d2      	uxtb	r2, r2
 8009e8c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e92:	1c5a      	adds	r2, r3, #1
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8009e98:	6878      	ldr	r0, [r7, #4]
 8009e9a:	f7fe feab 	bl	8008bf4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ea2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8009ea4:	68bb      	ldr	r3, [r7, #8]
 8009ea6:	f003 0301 	and.w	r3, r3, #1
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d10e      	bne.n	8009ecc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8009eae:	68bb      	ldr	r3, [r7, #8]
 8009eb0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d109      	bne.n	8009ecc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8009eb8:	68bb      	ldr	r3, [r7, #8]
 8009eba:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d104      	bne.n	8009ecc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8009ec2:	68bb      	ldr	r3, [r7, #8]
 8009ec4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d007      	beq.n	8009edc <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	685a      	ldr	r2, [r3, #4]
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8009eda:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009ee2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ee8:	f003 0304 	and.w	r3, r3, #4
 8009eec:	2b04      	cmp	r3, #4
 8009eee:	d113      	bne.n	8009f18 <I2C_ITError+0x254>
 8009ef0:	7bfb      	ldrb	r3, [r7, #15]
 8009ef2:	2b28      	cmp	r3, #40	@ 0x28
 8009ef4:	d110      	bne.n	8009f18 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	4a0a      	ldr	r2, [pc, #40]	@ (8009f24 <I2C_ITError+0x260>)
 8009efa:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2200      	movs	r2, #0
 8009f00:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	2220      	movs	r2, #32
 8009f06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8009f12:	6878      	ldr	r0, [r7, #4]
 8009f14:	f7fe fe64 	bl	8008be0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009f18:	bf00      	nop
 8009f1a:	3710      	adds	r7, #16
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	bd80      	pop	{r7, pc}
 8009f20:	0800a561 	.word	0x0800a561
 8009f24:	ffff0000 	.word	0xffff0000

08009f28 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	b088      	sub	sp, #32
 8009f2c:	af02      	add	r7, sp, #8
 8009f2e:	60f8      	str	r0, [r7, #12]
 8009f30:	607a      	str	r2, [r7, #4]
 8009f32:	603b      	str	r3, [r7, #0]
 8009f34:	460b      	mov	r3, r1
 8009f36:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f3c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8009f3e:	697b      	ldr	r3, [r7, #20]
 8009f40:	2b08      	cmp	r3, #8
 8009f42:	d006      	beq.n	8009f52 <I2C_MasterRequestWrite+0x2a>
 8009f44:	697b      	ldr	r3, [r7, #20]
 8009f46:	2b01      	cmp	r3, #1
 8009f48:	d003      	beq.n	8009f52 <I2C_MasterRequestWrite+0x2a>
 8009f4a:	697b      	ldr	r3, [r7, #20]
 8009f4c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009f50:	d108      	bne.n	8009f64 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	681a      	ldr	r2, [r3, #0]
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009f60:	601a      	str	r2, [r3, #0]
 8009f62:	e00b      	b.n	8009f7c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f68:	2b12      	cmp	r3, #18
 8009f6a:	d107      	bne.n	8009f7c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	681a      	ldr	r2, [r3, #0]
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009f7a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	9300      	str	r3, [sp, #0]
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2200      	movs	r2, #0
 8009f84:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009f88:	68f8      	ldr	r0, [r7, #12]
 8009f8a:	f000 fb91 	bl	800a6b0 <I2C_WaitOnFlagUntilTimeout>
 8009f8e:	4603      	mov	r3, r0
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d00d      	beq.n	8009fb0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009f9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009fa2:	d103      	bne.n	8009fac <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009faa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8009fac:	2303      	movs	r3, #3
 8009fae:	e035      	b.n	800a01c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	691b      	ldr	r3, [r3, #16]
 8009fb4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009fb8:	d108      	bne.n	8009fcc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009fba:	897b      	ldrh	r3, [r7, #10]
 8009fbc:	b2db      	uxtb	r3, r3
 8009fbe:	461a      	mov	r2, r3
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8009fc8:	611a      	str	r2, [r3, #16]
 8009fca:	e01b      	b.n	800a004 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009fcc:	897b      	ldrh	r3, [r7, #10]
 8009fce:	11db      	asrs	r3, r3, #7
 8009fd0:	b2db      	uxtb	r3, r3
 8009fd2:	f003 0306 	and.w	r3, r3, #6
 8009fd6:	b2db      	uxtb	r3, r3
 8009fd8:	f063 030f 	orn	r3, r3, #15
 8009fdc:	b2da      	uxtb	r2, r3
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	687a      	ldr	r2, [r7, #4]
 8009fe8:	490e      	ldr	r1, [pc, #56]	@ (800a024 <I2C_MasterRequestWrite+0xfc>)
 8009fea:	68f8      	ldr	r0, [r7, #12]
 8009fec:	f000 fbda 	bl	800a7a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009ff0:	4603      	mov	r3, r0
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d001      	beq.n	8009ffa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8009ff6:	2301      	movs	r3, #1
 8009ff8:	e010      	b.n	800a01c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009ffa:	897b      	ldrh	r3, [r7, #10]
 8009ffc:	b2da      	uxtb	r2, r3
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	687a      	ldr	r2, [r7, #4]
 800a008:	4907      	ldr	r1, [pc, #28]	@ (800a028 <I2C_MasterRequestWrite+0x100>)
 800a00a:	68f8      	ldr	r0, [r7, #12]
 800a00c:	f000 fbca 	bl	800a7a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a010:	4603      	mov	r3, r0
 800a012:	2b00      	cmp	r3, #0
 800a014:	d001      	beq.n	800a01a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800a016:	2301      	movs	r3, #1
 800a018:	e000      	b.n	800a01c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800a01a:	2300      	movs	r3, #0
}
 800a01c:	4618      	mov	r0, r3
 800a01e:	3718      	adds	r7, #24
 800a020:	46bd      	mov	sp, r7
 800a022:	bd80      	pop	{r7, pc}
 800a024:	00010008 	.word	0x00010008
 800a028:	00010002 	.word	0x00010002

0800a02c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b088      	sub	sp, #32
 800a030:	af02      	add	r7, sp, #8
 800a032:	60f8      	str	r0, [r7, #12]
 800a034:	4608      	mov	r0, r1
 800a036:	4611      	mov	r1, r2
 800a038:	461a      	mov	r2, r3
 800a03a:	4603      	mov	r3, r0
 800a03c:	817b      	strh	r3, [r7, #10]
 800a03e:	460b      	mov	r3, r1
 800a040:	813b      	strh	r3, [r7, #8]
 800a042:	4613      	mov	r3, r2
 800a044:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	681a      	ldr	r2, [r3, #0]
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a054:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a058:	9300      	str	r3, [sp, #0]
 800a05a:	6a3b      	ldr	r3, [r7, #32]
 800a05c:	2200      	movs	r2, #0
 800a05e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800a062:	68f8      	ldr	r0, [r7, #12]
 800a064:	f000 fb24 	bl	800a6b0 <I2C_WaitOnFlagUntilTimeout>
 800a068:	4603      	mov	r3, r0
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d00d      	beq.n	800a08a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a078:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a07c:	d103      	bne.n	800a086 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a084:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800a086:	2303      	movs	r3, #3
 800a088:	e05f      	b.n	800a14a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a08a:	897b      	ldrh	r3, [r7, #10]
 800a08c:	b2db      	uxtb	r3, r3
 800a08e:	461a      	mov	r2, r3
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800a098:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a09a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a09c:	6a3a      	ldr	r2, [r7, #32]
 800a09e:	492d      	ldr	r1, [pc, #180]	@ (800a154 <I2C_RequestMemoryWrite+0x128>)
 800a0a0:	68f8      	ldr	r0, [r7, #12]
 800a0a2:	f000 fb7f 	bl	800a7a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d001      	beq.n	800a0b0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800a0ac:	2301      	movs	r3, #1
 800a0ae:	e04c      	b.n	800a14a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	617b      	str	r3, [r7, #20]
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	695b      	ldr	r3, [r3, #20]
 800a0ba:	617b      	str	r3, [r7, #20]
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	699b      	ldr	r3, [r3, #24]
 800a0c2:	617b      	str	r3, [r7, #20]
 800a0c4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a0c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a0c8:	6a39      	ldr	r1, [r7, #32]
 800a0ca:	68f8      	ldr	r0, [r7, #12]
 800a0cc:	f000 fc0a 	bl	800a8e4 <I2C_WaitOnTXEFlagUntilTimeout>
 800a0d0:	4603      	mov	r3, r0
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d00d      	beq.n	800a0f2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0da:	2b04      	cmp	r3, #4
 800a0dc:	d107      	bne.n	800a0ee <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	681a      	ldr	r2, [r3, #0]
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a0ec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a0ee:	2301      	movs	r3, #1
 800a0f0:	e02b      	b.n	800a14a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a0f2:	88fb      	ldrh	r3, [r7, #6]
 800a0f4:	2b01      	cmp	r3, #1
 800a0f6:	d105      	bne.n	800a104 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a0f8:	893b      	ldrh	r3, [r7, #8]
 800a0fa:	b2da      	uxtb	r2, r3
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	611a      	str	r2, [r3, #16]
 800a102:	e021      	b.n	800a148 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a104:	893b      	ldrh	r3, [r7, #8]
 800a106:	0a1b      	lsrs	r3, r3, #8
 800a108:	b29b      	uxth	r3, r3
 800a10a:	b2da      	uxtb	r2, r3
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a112:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a114:	6a39      	ldr	r1, [r7, #32]
 800a116:	68f8      	ldr	r0, [r7, #12]
 800a118:	f000 fbe4 	bl	800a8e4 <I2C_WaitOnTXEFlagUntilTimeout>
 800a11c:	4603      	mov	r3, r0
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d00d      	beq.n	800a13e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a126:	2b04      	cmp	r3, #4
 800a128:	d107      	bne.n	800a13a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	681a      	ldr	r2, [r3, #0]
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a138:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a13a:	2301      	movs	r3, #1
 800a13c:	e005      	b.n	800a14a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a13e:	893b      	ldrh	r3, [r7, #8]
 800a140:	b2da      	uxtb	r2, r3
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800a148:	2300      	movs	r3, #0
}
 800a14a:	4618      	mov	r0, r3
 800a14c:	3718      	adds	r7, #24
 800a14e:	46bd      	mov	sp, r7
 800a150:	bd80      	pop	{r7, pc}
 800a152:	bf00      	nop
 800a154:	00010002 	.word	0x00010002

0800a158 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b088      	sub	sp, #32
 800a15c:	af02      	add	r7, sp, #8
 800a15e:	60f8      	str	r0, [r7, #12]
 800a160:	4608      	mov	r0, r1
 800a162:	4611      	mov	r1, r2
 800a164:	461a      	mov	r2, r3
 800a166:	4603      	mov	r3, r0
 800a168:	817b      	strh	r3, [r7, #10]
 800a16a:	460b      	mov	r3, r1
 800a16c:	813b      	strh	r3, [r7, #8]
 800a16e:	4613      	mov	r3, r2
 800a170:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	681a      	ldr	r2, [r3, #0]
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a180:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	681a      	ldr	r2, [r3, #0]
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a190:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a194:	9300      	str	r3, [sp, #0]
 800a196:	6a3b      	ldr	r3, [r7, #32]
 800a198:	2200      	movs	r2, #0
 800a19a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800a19e:	68f8      	ldr	r0, [r7, #12]
 800a1a0:	f000 fa86 	bl	800a6b0 <I2C_WaitOnFlagUntilTimeout>
 800a1a4:	4603      	mov	r3, r0
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d00d      	beq.n	800a1c6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a1b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a1b8:	d103      	bne.n	800a1c2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a1c0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800a1c2:	2303      	movs	r3, #3
 800a1c4:	e0aa      	b.n	800a31c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a1c6:	897b      	ldrh	r3, [r7, #10]
 800a1c8:	b2db      	uxtb	r3, r3
 800a1ca:	461a      	mov	r2, r3
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800a1d4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a1d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1d8:	6a3a      	ldr	r2, [r7, #32]
 800a1da:	4952      	ldr	r1, [pc, #328]	@ (800a324 <I2C_RequestMemoryRead+0x1cc>)
 800a1dc:	68f8      	ldr	r0, [r7, #12]
 800a1de:	f000 fae1 	bl	800a7a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a1e2:	4603      	mov	r3, r0
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d001      	beq.n	800a1ec <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800a1e8:	2301      	movs	r3, #1
 800a1ea:	e097      	b.n	800a31c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	617b      	str	r3, [r7, #20]
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	695b      	ldr	r3, [r3, #20]
 800a1f6:	617b      	str	r3, [r7, #20]
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	699b      	ldr	r3, [r3, #24]
 800a1fe:	617b      	str	r3, [r7, #20]
 800a200:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a202:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a204:	6a39      	ldr	r1, [r7, #32]
 800a206:	68f8      	ldr	r0, [r7, #12]
 800a208:	f000 fb6c 	bl	800a8e4 <I2C_WaitOnTXEFlagUntilTimeout>
 800a20c:	4603      	mov	r3, r0
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d00d      	beq.n	800a22e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a216:	2b04      	cmp	r3, #4
 800a218:	d107      	bne.n	800a22a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	681a      	ldr	r2, [r3, #0]
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a228:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a22a:	2301      	movs	r3, #1
 800a22c:	e076      	b.n	800a31c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a22e:	88fb      	ldrh	r3, [r7, #6]
 800a230:	2b01      	cmp	r3, #1
 800a232:	d105      	bne.n	800a240 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a234:	893b      	ldrh	r3, [r7, #8]
 800a236:	b2da      	uxtb	r2, r3
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	611a      	str	r2, [r3, #16]
 800a23e:	e021      	b.n	800a284 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a240:	893b      	ldrh	r3, [r7, #8]
 800a242:	0a1b      	lsrs	r3, r3, #8
 800a244:	b29b      	uxth	r3, r3
 800a246:	b2da      	uxtb	r2, r3
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a24e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a250:	6a39      	ldr	r1, [r7, #32]
 800a252:	68f8      	ldr	r0, [r7, #12]
 800a254:	f000 fb46 	bl	800a8e4 <I2C_WaitOnTXEFlagUntilTimeout>
 800a258:	4603      	mov	r3, r0
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d00d      	beq.n	800a27a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a262:	2b04      	cmp	r3, #4
 800a264:	d107      	bne.n	800a276 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	681a      	ldr	r2, [r3, #0]
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a274:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a276:	2301      	movs	r3, #1
 800a278:	e050      	b.n	800a31c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a27a:	893b      	ldrh	r3, [r7, #8]
 800a27c:	b2da      	uxtb	r2, r3
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a284:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a286:	6a39      	ldr	r1, [r7, #32]
 800a288:	68f8      	ldr	r0, [r7, #12]
 800a28a:	f000 fb2b 	bl	800a8e4 <I2C_WaitOnTXEFlagUntilTimeout>
 800a28e:	4603      	mov	r3, r0
 800a290:	2b00      	cmp	r3, #0
 800a292:	d00d      	beq.n	800a2b0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a298:	2b04      	cmp	r3, #4
 800a29a:	d107      	bne.n	800a2ac <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	681a      	ldr	r2, [r3, #0]
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a2aa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a2ac:	2301      	movs	r3, #1
 800a2ae:	e035      	b.n	800a31c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	681a      	ldr	r2, [r3, #0]
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a2be:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a2c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2c2:	9300      	str	r3, [sp, #0]
 800a2c4:	6a3b      	ldr	r3, [r7, #32]
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800a2cc:	68f8      	ldr	r0, [r7, #12]
 800a2ce:	f000 f9ef 	bl	800a6b0 <I2C_WaitOnFlagUntilTimeout>
 800a2d2:	4603      	mov	r3, r0
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d00d      	beq.n	800a2f4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a2e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a2e6:	d103      	bne.n	800a2f0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a2ee:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800a2f0:	2303      	movs	r3, #3
 800a2f2:	e013      	b.n	800a31c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a2f4:	897b      	ldrh	r3, [r7, #10]
 800a2f6:	b2db      	uxtb	r3, r3
 800a2f8:	f043 0301 	orr.w	r3, r3, #1
 800a2fc:	b2da      	uxtb	r2, r3
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a306:	6a3a      	ldr	r2, [r7, #32]
 800a308:	4906      	ldr	r1, [pc, #24]	@ (800a324 <I2C_RequestMemoryRead+0x1cc>)
 800a30a:	68f8      	ldr	r0, [r7, #12]
 800a30c:	f000 fa4a 	bl	800a7a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a310:	4603      	mov	r3, r0
 800a312:	2b00      	cmp	r3, #0
 800a314:	d001      	beq.n	800a31a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800a316:	2301      	movs	r3, #1
 800a318:	e000      	b.n	800a31c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800a31a:	2300      	movs	r3, #0
}
 800a31c:	4618      	mov	r0, r3
 800a31e:	3718      	adds	r7, #24
 800a320:	46bd      	mov	sp, r7
 800a322:	bd80      	pop	{r7, pc}
 800a324:	00010002 	.word	0x00010002

0800a328 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b086      	sub	sp, #24
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a334:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a336:	697b      	ldr	r3, [r7, #20]
 800a338:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a33c:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800a33e:	697b      	ldr	r3, [r7, #20]
 800a340:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a344:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800a346:	697b      	ldr	r3, [r7, #20]
 800a348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a34a:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800a34c:	697b      	ldr	r3, [r7, #20]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	685a      	ldr	r2, [r3, #4]
 800a352:	697b      	ldr	r3, [r7, #20]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800a35a:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800a35c:	697b      	ldr	r3, [r7, #20]
 800a35e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a360:	2b00      	cmp	r3, #0
 800a362:	d003      	beq.n	800a36c <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800a364:	697b      	ldr	r3, [r7, #20]
 800a366:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a368:	2200      	movs	r2, #0
 800a36a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800a36c:	697b      	ldr	r3, [r7, #20]
 800a36e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a370:	2b00      	cmp	r3, #0
 800a372:	d003      	beq.n	800a37c <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800a374:	697b      	ldr	r3, [r7, #20]
 800a376:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a378:	2200      	movs	r2, #0
 800a37a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 800a37c:	7cfb      	ldrb	r3, [r7, #19]
 800a37e:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 800a382:	2b21      	cmp	r3, #33	@ 0x21
 800a384:	d007      	beq.n	800a396 <I2C_DMAXferCplt+0x6e>
 800a386:	7cfb      	ldrb	r3, [r7, #19]
 800a388:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 800a38c:	2b22      	cmp	r3, #34	@ 0x22
 800a38e:	d131      	bne.n	800a3f4 <I2C_DMAXferCplt+0xcc>
 800a390:	7cbb      	ldrb	r3, [r7, #18]
 800a392:	2b20      	cmp	r3, #32
 800a394:	d12e      	bne.n	800a3f4 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800a396:	697b      	ldr	r3, [r7, #20]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	685a      	ldr	r2, [r3, #4]
 800a39c:	697b      	ldr	r3, [r7, #20]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a3a4:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 800a3a6:	697b      	ldr	r3, [r7, #20]
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800a3ac:	7cfb      	ldrb	r3, [r7, #19]
 800a3ae:	2b29      	cmp	r3, #41	@ 0x29
 800a3b0:	d10a      	bne.n	800a3c8 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800a3b2:	697b      	ldr	r3, [r7, #20]
 800a3b4:	2221      	movs	r2, #33	@ 0x21
 800a3b6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800a3b8:	697b      	ldr	r3, [r7, #20]
 800a3ba:	2228      	movs	r2, #40	@ 0x28
 800a3bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800a3c0:	6978      	ldr	r0, [r7, #20]
 800a3c2:	f7fe fbeb 	bl	8008b9c <HAL_I2C_SlaveTxCpltCallback>
 800a3c6:	e00c      	b.n	800a3e2 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800a3c8:	7cfb      	ldrb	r3, [r7, #19]
 800a3ca:	2b2a      	cmp	r3, #42	@ 0x2a
 800a3cc:	d109      	bne.n	800a3e2 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800a3ce:	697b      	ldr	r3, [r7, #20]
 800a3d0:	2222      	movs	r2, #34	@ 0x22
 800a3d2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800a3d4:	697b      	ldr	r3, [r7, #20]
 800a3d6:	2228      	movs	r2, #40	@ 0x28
 800a3d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800a3dc:	6978      	ldr	r0, [r7, #20]
 800a3de:	f7fe fbe7 	bl	8008bb0 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800a3e2:	697b      	ldr	r3, [r7, #20]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	685a      	ldr	r2, [r3, #4]
 800a3e8:	697b      	ldr	r3, [r7, #20]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800a3f0:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800a3f2:	e074      	b.n	800a4de <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 800a3f4:	697b      	ldr	r3, [r7, #20]
 800a3f6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a3fa:	b2db      	uxtb	r3, r3
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d06e      	beq.n	800a4de <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 800a400:	697b      	ldr	r3, [r7, #20]
 800a402:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a404:	b29b      	uxth	r3, r3
 800a406:	2b01      	cmp	r3, #1
 800a408:	d107      	bne.n	800a41a <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a40a:	697b      	ldr	r3, [r7, #20]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	681a      	ldr	r2, [r3, #0]
 800a410:	697b      	ldr	r3, [r7, #20]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a418:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800a41a:	697b      	ldr	r3, [r7, #20]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	685a      	ldr	r2, [r3, #4]
 800a420:	697b      	ldr	r3, [r7, #20]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800a428:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800a430:	d009      	beq.n	800a446 <I2C_DMAXferCplt+0x11e>
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	2b08      	cmp	r3, #8
 800a436:	d006      	beq.n	800a446 <I2C_DMAXferCplt+0x11e>
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800a43e:	d002      	beq.n	800a446 <I2C_DMAXferCplt+0x11e>
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	2b20      	cmp	r3, #32
 800a444:	d107      	bne.n	800a456 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a446:	697b      	ldr	r3, [r7, #20]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	681a      	ldr	r2, [r3, #0]
 800a44c:	697b      	ldr	r3, [r7, #20]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a454:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800a456:	697b      	ldr	r3, [r7, #20]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	685a      	ldr	r2, [r3, #4]
 800a45c:	697b      	ldr	r3, [r7, #20]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800a464:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800a466:	697b      	ldr	r3, [r7, #20]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	685a      	ldr	r2, [r3, #4]
 800a46c:	697b      	ldr	r3, [r7, #20]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a474:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 800a476:	697b      	ldr	r3, [r7, #20]
 800a478:	2200      	movs	r2, #0
 800a47a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800a47c:	697b      	ldr	r3, [r7, #20]
 800a47e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a480:	2b00      	cmp	r3, #0
 800a482:	d003      	beq.n	800a48c <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 800a484:	6978      	ldr	r0, [r7, #20]
 800a486:	f7fe fbb5 	bl	8008bf4 <HAL_I2C_ErrorCallback>
}
 800a48a:	e028      	b.n	800a4de <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 800a48c:	697b      	ldr	r3, [r7, #20]
 800a48e:	2220      	movs	r2, #32
 800a490:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a494:	697b      	ldr	r3, [r7, #20]
 800a496:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a49a:	b2db      	uxtb	r3, r3
 800a49c:	2b40      	cmp	r3, #64	@ 0x40
 800a49e:	d10a      	bne.n	800a4b6 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a4a0:	697b      	ldr	r3, [r7, #20]
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 800a4a8:	697b      	ldr	r3, [r7, #20]
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 800a4ae:	6978      	ldr	r0, [r7, #20]
 800a4b0:	f7fa fd44 	bl	8004f3c <HAL_I2C_MemRxCpltCallback>
}
 800a4b4:	e013      	b.n	800a4de <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a4b6:	697b      	ldr	r3, [r7, #20]
 800a4b8:	2200      	movs	r2, #0
 800a4ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	2b08      	cmp	r3, #8
 800a4c2:	d002      	beq.n	800a4ca <I2C_DMAXferCplt+0x1a2>
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	2b20      	cmp	r3, #32
 800a4c8:	d103      	bne.n	800a4d2 <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 800a4ca:	697b      	ldr	r3, [r7, #20]
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	631a      	str	r2, [r3, #48]	@ 0x30
 800a4d0:	e002      	b.n	800a4d8 <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800a4d2:	697b      	ldr	r3, [r7, #20]
 800a4d4:	2212      	movs	r2, #18
 800a4d6:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 800a4d8:	6978      	ldr	r0, [r7, #20]
 800a4da:	f7fe fb55 	bl	8008b88 <HAL_I2C_MasterRxCpltCallback>
}
 800a4de:	bf00      	nop
 800a4e0:	3718      	adds	r7, #24
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	bd80      	pop	{r7, pc}

0800a4e6 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800a4e6:	b580      	push	{r7, lr}
 800a4e8:	b084      	sub	sp, #16
 800a4ea:	af00      	add	r7, sp, #0
 800a4ec:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4f2:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d003      	beq.n	800a504 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a500:	2200      	movs	r2, #0
 800a502:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d003      	beq.n	800a514 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a510:	2200      	movs	r2, #0
 800a512:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800a514:	6878      	ldr	r0, [r7, #4]
 800a516:	f7fc fca1 	bl	8006e5c <HAL_DMA_GetError>
 800a51a:	4603      	mov	r3, r0
 800a51c:	2b02      	cmp	r3, #2
 800a51e:	d01b      	beq.n	800a558 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	681a      	ldr	r2, [r3, #0]
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a52e:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	2200      	movs	r2, #0
 800a534:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	2220      	movs	r2, #32
 800a53a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	2200      	movs	r2, #0
 800a542:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a54a:	f043 0210 	orr.w	r2, r3, #16
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800a552:	68f8      	ldr	r0, [r7, #12]
 800a554:	f7fe fb4e 	bl	8008bf4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a558:	bf00      	nop
 800a55a:	3710      	adds	r7, #16
 800a55c:	46bd      	mov	sp, r7
 800a55e:	bd80      	pop	{r7, pc}

0800a560 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800a560:	b580      	push	{r7, lr}
 800a562:	b086      	sub	sp, #24
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a568:	2300      	movs	r3, #0
 800a56a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a570:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a572:	697b      	ldr	r3, [r7, #20]
 800a574:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a578:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800a57a:	4b4b      	ldr	r3, [pc, #300]	@ (800a6a8 <I2C_DMAAbort+0x148>)
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	08db      	lsrs	r3, r3, #3
 800a580:	4a4a      	ldr	r2, [pc, #296]	@ (800a6ac <I2C_DMAAbort+0x14c>)
 800a582:	fba2 2303 	umull	r2, r3, r2, r3
 800a586:	0a1a      	lsrs	r2, r3, #8
 800a588:	4613      	mov	r3, r2
 800a58a:	009b      	lsls	r3, r3, #2
 800a58c:	4413      	add	r3, r2
 800a58e:	00da      	lsls	r2, r3, #3
 800a590:	1ad3      	subs	r3, r2, r3
 800a592:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d106      	bne.n	800a5a8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a59a:	697b      	ldr	r3, [r7, #20]
 800a59c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a59e:	f043 0220 	orr.w	r2, r3, #32
 800a5a2:	697b      	ldr	r3, [r7, #20]
 800a5a4:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 800a5a6:	e00a      	b.n	800a5be <I2C_DMAAbort+0x5e>
    }
    count--;
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	3b01      	subs	r3, #1
 800a5ac:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800a5ae:	697b      	ldr	r3, [r7, #20]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a5b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a5bc:	d0ea      	beq.n	800a594 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800a5be:	697b      	ldr	r3, [r7, #20]
 800a5c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d003      	beq.n	800a5ce <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800a5c6:	697b      	ldr	r3, [r7, #20]
 800a5c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800a5ce:	697b      	ldr	r3, [r7, #20]
 800a5d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d003      	beq.n	800a5de <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800a5d6:	697b      	ldr	r3, [r7, #20]
 800a5d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5da:	2200      	movs	r2, #0
 800a5dc:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a5de:	697b      	ldr	r3, [r7, #20]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	681a      	ldr	r2, [r3, #0]
 800a5e4:	697b      	ldr	r3, [r7, #20]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a5ec:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800a5ee:	697b      	ldr	r3, [r7, #20]
 800a5f0:	2200      	movs	r2, #0
 800a5f2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800a5f4:	697b      	ldr	r3, [r7, #20]
 800a5f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d003      	beq.n	800a604 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800a5fc:	697b      	ldr	r3, [r7, #20]
 800a5fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a600:	2200      	movs	r2, #0
 800a602:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 800a604:	697b      	ldr	r3, [r7, #20]
 800a606:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d003      	beq.n	800a614 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800a60c:	697b      	ldr	r3, [r7, #20]
 800a60e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a610:	2200      	movs	r2, #0
 800a612:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800a614:	697b      	ldr	r3, [r7, #20]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	681a      	ldr	r2, [r3, #0]
 800a61a:	697b      	ldr	r3, [r7, #20]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	f022 0201 	bic.w	r2, r2, #1
 800a622:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800a624:	697b      	ldr	r3, [r7, #20]
 800a626:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a62a:	b2db      	uxtb	r3, r3
 800a62c:	2b60      	cmp	r3, #96	@ 0x60
 800a62e:	d10e      	bne.n	800a64e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800a630:	697b      	ldr	r3, [r7, #20]
 800a632:	2220      	movs	r2, #32
 800a634:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a638:	697b      	ldr	r3, [r7, #20]
 800a63a:	2200      	movs	r2, #0
 800a63c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800a640:	697b      	ldr	r3, [r7, #20]
 800a642:	2200      	movs	r2, #0
 800a644:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800a646:	6978      	ldr	r0, [r7, #20]
 800a648:	f7fe fade 	bl	8008c08 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a64c:	e027      	b.n	800a69e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800a64e:	7cfb      	ldrb	r3, [r7, #19]
 800a650:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800a654:	2b28      	cmp	r3, #40	@ 0x28
 800a656:	d117      	bne.n	800a688 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800a658:	697b      	ldr	r3, [r7, #20]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	681a      	ldr	r2, [r3, #0]
 800a65e:	697b      	ldr	r3, [r7, #20]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	f042 0201 	orr.w	r2, r2, #1
 800a666:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a668:	697b      	ldr	r3, [r7, #20]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	681a      	ldr	r2, [r3, #0]
 800a66e:	697b      	ldr	r3, [r7, #20]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a676:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800a678:	697b      	ldr	r3, [r7, #20]
 800a67a:	2200      	movs	r2, #0
 800a67c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800a67e:	697b      	ldr	r3, [r7, #20]
 800a680:	2228      	movs	r2, #40	@ 0x28
 800a682:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800a686:	e007      	b.n	800a698 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800a688:	697b      	ldr	r3, [r7, #20]
 800a68a:	2220      	movs	r2, #32
 800a68c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a690:	697b      	ldr	r3, [r7, #20]
 800a692:	2200      	movs	r2, #0
 800a694:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800a698:	6978      	ldr	r0, [r7, #20]
 800a69a:	f7fe faab 	bl	8008bf4 <HAL_I2C_ErrorCallback>
}
 800a69e:	bf00      	nop
 800a6a0:	3718      	adds	r7, #24
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	bd80      	pop	{r7, pc}
 800a6a6:	bf00      	nop
 800a6a8:	20000010 	.word	0x20000010
 800a6ac:	14f8b589 	.word	0x14f8b589

0800a6b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b084      	sub	sp, #16
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	60f8      	str	r0, [r7, #12]
 800a6b8:	60b9      	str	r1, [r7, #8]
 800a6ba:	603b      	str	r3, [r7, #0]
 800a6bc:	4613      	mov	r3, r2
 800a6be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a6c0:	e048      	b.n	800a754 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a6c2:	683b      	ldr	r3, [r7, #0]
 800a6c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6c8:	d044      	beq.n	800a754 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a6ca:	f7fb fa39 	bl	8005b40 <HAL_GetTick>
 800a6ce:	4602      	mov	r2, r0
 800a6d0:	69bb      	ldr	r3, [r7, #24]
 800a6d2:	1ad3      	subs	r3, r2, r3
 800a6d4:	683a      	ldr	r2, [r7, #0]
 800a6d6:	429a      	cmp	r2, r3
 800a6d8:	d302      	bcc.n	800a6e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a6da:	683b      	ldr	r3, [r7, #0]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d139      	bne.n	800a754 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800a6e0:	68bb      	ldr	r3, [r7, #8]
 800a6e2:	0c1b      	lsrs	r3, r3, #16
 800a6e4:	b2db      	uxtb	r3, r3
 800a6e6:	2b01      	cmp	r3, #1
 800a6e8:	d10d      	bne.n	800a706 <I2C_WaitOnFlagUntilTimeout+0x56>
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	695b      	ldr	r3, [r3, #20]
 800a6f0:	43da      	mvns	r2, r3
 800a6f2:	68bb      	ldr	r3, [r7, #8]
 800a6f4:	4013      	ands	r3, r2
 800a6f6:	b29b      	uxth	r3, r3
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	bf0c      	ite	eq
 800a6fc:	2301      	moveq	r3, #1
 800a6fe:	2300      	movne	r3, #0
 800a700:	b2db      	uxtb	r3, r3
 800a702:	461a      	mov	r2, r3
 800a704:	e00c      	b.n	800a720 <I2C_WaitOnFlagUntilTimeout+0x70>
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	699b      	ldr	r3, [r3, #24]
 800a70c:	43da      	mvns	r2, r3
 800a70e:	68bb      	ldr	r3, [r7, #8]
 800a710:	4013      	ands	r3, r2
 800a712:	b29b      	uxth	r3, r3
 800a714:	2b00      	cmp	r3, #0
 800a716:	bf0c      	ite	eq
 800a718:	2301      	moveq	r3, #1
 800a71a:	2300      	movne	r3, #0
 800a71c:	b2db      	uxtb	r3, r3
 800a71e:	461a      	mov	r2, r3
 800a720:	79fb      	ldrb	r3, [r7, #7]
 800a722:	429a      	cmp	r2, r3
 800a724:	d116      	bne.n	800a754 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	2200      	movs	r2, #0
 800a72a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	2220      	movs	r2, #32
 800a730:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	2200      	movs	r2, #0
 800a738:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a740:	f043 0220 	orr.w	r2, r3, #32
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	2200      	movs	r2, #0
 800a74c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800a750:	2301      	movs	r3, #1
 800a752:	e023      	b.n	800a79c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a754:	68bb      	ldr	r3, [r7, #8]
 800a756:	0c1b      	lsrs	r3, r3, #16
 800a758:	b2db      	uxtb	r3, r3
 800a75a:	2b01      	cmp	r3, #1
 800a75c:	d10d      	bne.n	800a77a <I2C_WaitOnFlagUntilTimeout+0xca>
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	695b      	ldr	r3, [r3, #20]
 800a764:	43da      	mvns	r2, r3
 800a766:	68bb      	ldr	r3, [r7, #8]
 800a768:	4013      	ands	r3, r2
 800a76a:	b29b      	uxth	r3, r3
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	bf0c      	ite	eq
 800a770:	2301      	moveq	r3, #1
 800a772:	2300      	movne	r3, #0
 800a774:	b2db      	uxtb	r3, r3
 800a776:	461a      	mov	r2, r3
 800a778:	e00c      	b.n	800a794 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	699b      	ldr	r3, [r3, #24]
 800a780:	43da      	mvns	r2, r3
 800a782:	68bb      	ldr	r3, [r7, #8]
 800a784:	4013      	ands	r3, r2
 800a786:	b29b      	uxth	r3, r3
 800a788:	2b00      	cmp	r3, #0
 800a78a:	bf0c      	ite	eq
 800a78c:	2301      	moveq	r3, #1
 800a78e:	2300      	movne	r3, #0
 800a790:	b2db      	uxtb	r3, r3
 800a792:	461a      	mov	r2, r3
 800a794:	79fb      	ldrb	r3, [r7, #7]
 800a796:	429a      	cmp	r2, r3
 800a798:	d093      	beq.n	800a6c2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a79a:	2300      	movs	r3, #0
}
 800a79c:	4618      	mov	r0, r3
 800a79e:	3710      	adds	r7, #16
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	bd80      	pop	{r7, pc}

0800a7a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b084      	sub	sp, #16
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	60f8      	str	r0, [r7, #12]
 800a7ac:	60b9      	str	r1, [r7, #8]
 800a7ae:	607a      	str	r2, [r7, #4]
 800a7b0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a7b2:	e071      	b.n	800a898 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	695b      	ldr	r3, [r3, #20]
 800a7ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a7be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a7c2:	d123      	bne.n	800a80c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	681a      	ldr	r2, [r3, #0]
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a7d2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800a7dc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	2220      	movs	r2, #32
 800a7e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7f8:	f043 0204 	orr.w	r2, r3, #4
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	2200      	movs	r2, #0
 800a804:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800a808:	2301      	movs	r3, #1
 800a80a:	e067      	b.n	800a8dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a812:	d041      	beq.n	800a898 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a814:	f7fb f994 	bl	8005b40 <HAL_GetTick>
 800a818:	4602      	mov	r2, r0
 800a81a:	683b      	ldr	r3, [r7, #0]
 800a81c:	1ad3      	subs	r3, r2, r3
 800a81e:	687a      	ldr	r2, [r7, #4]
 800a820:	429a      	cmp	r2, r3
 800a822:	d302      	bcc.n	800a82a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d136      	bne.n	800a898 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800a82a:	68bb      	ldr	r3, [r7, #8]
 800a82c:	0c1b      	lsrs	r3, r3, #16
 800a82e:	b2db      	uxtb	r3, r3
 800a830:	2b01      	cmp	r3, #1
 800a832:	d10c      	bne.n	800a84e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	695b      	ldr	r3, [r3, #20]
 800a83a:	43da      	mvns	r2, r3
 800a83c:	68bb      	ldr	r3, [r7, #8]
 800a83e:	4013      	ands	r3, r2
 800a840:	b29b      	uxth	r3, r3
 800a842:	2b00      	cmp	r3, #0
 800a844:	bf14      	ite	ne
 800a846:	2301      	movne	r3, #1
 800a848:	2300      	moveq	r3, #0
 800a84a:	b2db      	uxtb	r3, r3
 800a84c:	e00b      	b.n	800a866 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	699b      	ldr	r3, [r3, #24]
 800a854:	43da      	mvns	r2, r3
 800a856:	68bb      	ldr	r3, [r7, #8]
 800a858:	4013      	ands	r3, r2
 800a85a:	b29b      	uxth	r3, r3
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	bf14      	ite	ne
 800a860:	2301      	movne	r3, #1
 800a862:	2300      	moveq	r3, #0
 800a864:	b2db      	uxtb	r3, r3
 800a866:	2b00      	cmp	r3, #0
 800a868:	d016      	beq.n	800a898 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	2200      	movs	r2, #0
 800a86e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	2220      	movs	r2, #32
 800a874:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	2200      	movs	r2, #0
 800a87c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a884:	f043 0220 	orr.w	r2, r3, #32
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	2200      	movs	r2, #0
 800a890:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800a894:	2301      	movs	r3, #1
 800a896:	e021      	b.n	800a8dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a898:	68bb      	ldr	r3, [r7, #8]
 800a89a:	0c1b      	lsrs	r3, r3, #16
 800a89c:	b2db      	uxtb	r3, r3
 800a89e:	2b01      	cmp	r3, #1
 800a8a0:	d10c      	bne.n	800a8bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	695b      	ldr	r3, [r3, #20]
 800a8a8:	43da      	mvns	r2, r3
 800a8aa:	68bb      	ldr	r3, [r7, #8]
 800a8ac:	4013      	ands	r3, r2
 800a8ae:	b29b      	uxth	r3, r3
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	bf14      	ite	ne
 800a8b4:	2301      	movne	r3, #1
 800a8b6:	2300      	moveq	r3, #0
 800a8b8:	b2db      	uxtb	r3, r3
 800a8ba:	e00b      	b.n	800a8d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	699b      	ldr	r3, [r3, #24]
 800a8c2:	43da      	mvns	r2, r3
 800a8c4:	68bb      	ldr	r3, [r7, #8]
 800a8c6:	4013      	ands	r3, r2
 800a8c8:	b29b      	uxth	r3, r3
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	bf14      	ite	ne
 800a8ce:	2301      	movne	r3, #1
 800a8d0:	2300      	moveq	r3, #0
 800a8d2:	b2db      	uxtb	r3, r3
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	f47f af6d 	bne.w	800a7b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800a8da:	2300      	movs	r3, #0
}
 800a8dc:	4618      	mov	r0, r3
 800a8de:	3710      	adds	r7, #16
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	bd80      	pop	{r7, pc}

0800a8e4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b084      	sub	sp, #16
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	60f8      	str	r0, [r7, #12]
 800a8ec:	60b9      	str	r1, [r7, #8]
 800a8ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a8f0:	e034      	b.n	800a95c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a8f2:	68f8      	ldr	r0, [r7, #12]
 800a8f4:	f000 f915 	bl	800ab22 <I2C_IsAcknowledgeFailed>
 800a8f8:	4603      	mov	r3, r0
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d001      	beq.n	800a902 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a8fe:	2301      	movs	r3, #1
 800a900:	e034      	b.n	800a96c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a902:	68bb      	ldr	r3, [r7, #8]
 800a904:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a908:	d028      	beq.n	800a95c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a90a:	f7fb f919 	bl	8005b40 <HAL_GetTick>
 800a90e:	4602      	mov	r2, r0
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	1ad3      	subs	r3, r2, r3
 800a914:	68ba      	ldr	r2, [r7, #8]
 800a916:	429a      	cmp	r2, r3
 800a918:	d302      	bcc.n	800a920 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800a91a:	68bb      	ldr	r3, [r7, #8]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d11d      	bne.n	800a95c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	695b      	ldr	r3, [r3, #20]
 800a926:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a92a:	2b80      	cmp	r3, #128	@ 0x80
 800a92c:	d016      	beq.n	800a95c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	2200      	movs	r2, #0
 800a932:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	2220      	movs	r2, #32
 800a938:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	2200      	movs	r2, #0
 800a940:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a948:	f043 0220 	orr.w	r2, r3, #32
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	2200      	movs	r2, #0
 800a954:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800a958:	2301      	movs	r3, #1
 800a95a:	e007      	b.n	800a96c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	695b      	ldr	r3, [r3, #20]
 800a962:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a966:	2b80      	cmp	r3, #128	@ 0x80
 800a968:	d1c3      	bne.n	800a8f2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a96a:	2300      	movs	r3, #0
}
 800a96c:	4618      	mov	r0, r3
 800a96e:	3710      	adds	r7, #16
 800a970:	46bd      	mov	sp, r7
 800a972:	bd80      	pop	{r7, pc}

0800a974 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a974:	b580      	push	{r7, lr}
 800a976:	b084      	sub	sp, #16
 800a978:	af00      	add	r7, sp, #0
 800a97a:	60f8      	str	r0, [r7, #12]
 800a97c:	60b9      	str	r1, [r7, #8]
 800a97e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a980:	e034      	b.n	800a9ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a982:	68f8      	ldr	r0, [r7, #12]
 800a984:	f000 f8cd 	bl	800ab22 <I2C_IsAcknowledgeFailed>
 800a988:	4603      	mov	r3, r0
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d001      	beq.n	800a992 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a98e:	2301      	movs	r3, #1
 800a990:	e034      	b.n	800a9fc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a992:	68bb      	ldr	r3, [r7, #8]
 800a994:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a998:	d028      	beq.n	800a9ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a99a:	f7fb f8d1 	bl	8005b40 <HAL_GetTick>
 800a99e:	4602      	mov	r2, r0
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	1ad3      	subs	r3, r2, r3
 800a9a4:	68ba      	ldr	r2, [r7, #8]
 800a9a6:	429a      	cmp	r2, r3
 800a9a8:	d302      	bcc.n	800a9b0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a9aa:	68bb      	ldr	r3, [r7, #8]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d11d      	bne.n	800a9ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	695b      	ldr	r3, [r3, #20]
 800a9b6:	f003 0304 	and.w	r3, r3, #4
 800a9ba:	2b04      	cmp	r3, #4
 800a9bc:	d016      	beq.n	800a9ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	2220      	movs	r2, #32
 800a9c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9d8:	f043 0220 	orr.w	r2, r3, #32
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800a9e8:	2301      	movs	r3, #1
 800a9ea:	e007      	b.n	800a9fc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	695b      	ldr	r3, [r3, #20]
 800a9f2:	f003 0304 	and.w	r3, r3, #4
 800a9f6:	2b04      	cmp	r3, #4
 800a9f8:	d1c3      	bne.n	800a982 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a9fa:	2300      	movs	r3, #0
}
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	3710      	adds	r7, #16
 800aa00:	46bd      	mov	sp, r7
 800aa02:	bd80      	pop	{r7, pc}

0800aa04 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800aa04:	b480      	push	{r7}
 800aa06:	b085      	sub	sp, #20
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800aa10:	4b13      	ldr	r3, [pc, #76]	@ (800aa60 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	08db      	lsrs	r3, r3, #3
 800aa16:	4a13      	ldr	r2, [pc, #76]	@ (800aa64 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800aa18:	fba2 2303 	umull	r2, r3, r2, r3
 800aa1c:	0a1a      	lsrs	r2, r3, #8
 800aa1e:	4613      	mov	r3, r2
 800aa20:	009b      	lsls	r3, r3, #2
 800aa22:	4413      	add	r3, r2
 800aa24:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	3b01      	subs	r3, #1
 800aa2a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d107      	bne.n	800aa42 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa36:	f043 0220 	orr.w	r2, r3, #32
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800aa3e:	2301      	movs	r3, #1
 800aa40:	e008      	b.n	800aa54 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800aa4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aa50:	d0e9      	beq.n	800aa26 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800aa52:	2300      	movs	r3, #0
}
 800aa54:	4618      	mov	r0, r3
 800aa56:	3714      	adds	r7, #20
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5e:	4770      	bx	lr
 800aa60:	20000010 	.word	0x20000010
 800aa64:	14f8b589 	.word	0x14f8b589

0800aa68 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b084      	sub	sp, #16
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	60f8      	str	r0, [r7, #12]
 800aa70:	60b9      	str	r1, [r7, #8]
 800aa72:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800aa74:	e049      	b.n	800ab0a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	695b      	ldr	r3, [r3, #20]
 800aa7c:	f003 0310 	and.w	r3, r3, #16
 800aa80:	2b10      	cmp	r3, #16
 800aa82:	d119      	bne.n	800aab8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	f06f 0210 	mvn.w	r2, #16
 800aa8c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	2200      	movs	r2, #0
 800aa92:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	2220      	movs	r2, #32
 800aa98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	2200      	movs	r2, #0
 800aab0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800aab4:	2301      	movs	r3, #1
 800aab6:	e030      	b.n	800ab1a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aab8:	f7fb f842 	bl	8005b40 <HAL_GetTick>
 800aabc:	4602      	mov	r2, r0
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	1ad3      	subs	r3, r2, r3
 800aac2:	68ba      	ldr	r2, [r7, #8]
 800aac4:	429a      	cmp	r2, r3
 800aac6:	d302      	bcc.n	800aace <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800aac8:	68bb      	ldr	r3, [r7, #8]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d11d      	bne.n	800ab0a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	695b      	ldr	r3, [r3, #20]
 800aad4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aad8:	2b40      	cmp	r3, #64	@ 0x40
 800aada:	d016      	beq.n	800ab0a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	2200      	movs	r2, #0
 800aae0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	2220      	movs	r2, #32
 800aae6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	2200      	movs	r2, #0
 800aaee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aaf6:	f043 0220 	orr.w	r2, r3, #32
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	2200      	movs	r2, #0
 800ab02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800ab06:	2301      	movs	r3, #1
 800ab08:	e007      	b.n	800ab1a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	695b      	ldr	r3, [r3, #20]
 800ab10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab14:	2b40      	cmp	r3, #64	@ 0x40
 800ab16:	d1ae      	bne.n	800aa76 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800ab18:	2300      	movs	r3, #0
}
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	3710      	adds	r7, #16
 800ab1e:	46bd      	mov	sp, r7
 800ab20:	bd80      	pop	{r7, pc}

0800ab22 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800ab22:	b480      	push	{r7}
 800ab24:	b083      	sub	sp, #12
 800ab26:	af00      	add	r7, sp, #0
 800ab28:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	695b      	ldr	r3, [r3, #20]
 800ab30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ab34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ab38:	d11b      	bne.n	800ab72 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800ab42:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	2200      	movs	r2, #0
 800ab48:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	2220      	movs	r2, #32
 800ab4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	2200      	movs	r2, #0
 800ab56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab5e:	f043 0204 	orr.w	r2, r3, #4
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	2200      	movs	r2, #0
 800ab6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800ab6e:	2301      	movs	r3, #1
 800ab70:	e000      	b.n	800ab74 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800ab72:	2300      	movs	r3, #0
}
 800ab74:	4618      	mov	r0, r3
 800ab76:	370c      	adds	r7, #12
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7e:	4770      	bx	lr

0800ab80 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800ab80:	b480      	push	{r7}
 800ab82:	b083      	sub	sp, #12
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab8c:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800ab90:	d103      	bne.n	800ab9a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	2201      	movs	r2, #1
 800ab96:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800ab98:	e007      	b.n	800abaa <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab9e:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800aba2:	d102      	bne.n	800abaa <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	2208      	movs	r2, #8
 800aba8:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800abaa:	bf00      	nop
 800abac:	370c      	adds	r7, #12
 800abae:	46bd      	mov	sp, r7
 800abb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb4:	4770      	bx	lr

0800abb6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800abb6:	b580      	push	{r7, lr}
 800abb8:	b086      	sub	sp, #24
 800abba:	af02      	add	r7, sp, #8
 800abbc:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d101      	bne.n	800abc8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800abc4:	2301      	movs	r3, #1
 800abc6:	e101      	b.n	800adcc <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800abd4:	b2db      	uxtb	r3, r3
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d106      	bne.n	800abe8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	2200      	movs	r2, #0
 800abde:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800abe2:	6878      	ldr	r0, [r7, #4]
 800abe4:	f007 fb70 	bl	80122c8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	2203      	movs	r2, #3
 800abec:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800abf0:	68bb      	ldr	r3, [r7, #8]
 800abf2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800abf6:	d102      	bne.n	800abfe <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	2200      	movs	r2, #0
 800abfc:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	4618      	mov	r0, r3
 800ac04:	f003 feeb 	bl	800e9de <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	6818      	ldr	r0, [r3, #0]
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	7c1a      	ldrb	r2, [r3, #16]
 800ac10:	f88d 2000 	strb.w	r2, [sp]
 800ac14:	3304      	adds	r3, #4
 800ac16:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ac18:	f003 fdca 	bl	800e7b0 <USB_CoreInit>
 800ac1c:	4603      	mov	r3, r0
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d005      	beq.n	800ac2e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	2202      	movs	r2, #2
 800ac26:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800ac2a:	2301      	movs	r3, #1
 800ac2c:	e0ce      	b.n	800adcc <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	2100      	movs	r1, #0
 800ac34:	4618      	mov	r0, r3
 800ac36:	f003 fee3 	bl	800ea00 <USB_SetCurrentMode>
 800ac3a:	4603      	mov	r3, r0
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d005      	beq.n	800ac4c <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	2202      	movs	r2, #2
 800ac44:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800ac48:	2301      	movs	r3, #1
 800ac4a:	e0bf      	b.n	800adcc <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ac4c:	2300      	movs	r3, #0
 800ac4e:	73fb      	strb	r3, [r7, #15]
 800ac50:	e04a      	b.n	800ace8 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800ac52:	7bfa      	ldrb	r2, [r7, #15]
 800ac54:	6879      	ldr	r1, [r7, #4]
 800ac56:	4613      	mov	r3, r2
 800ac58:	00db      	lsls	r3, r3, #3
 800ac5a:	4413      	add	r3, r2
 800ac5c:	009b      	lsls	r3, r3, #2
 800ac5e:	440b      	add	r3, r1
 800ac60:	3315      	adds	r3, #21
 800ac62:	2201      	movs	r2, #1
 800ac64:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800ac66:	7bfa      	ldrb	r2, [r7, #15]
 800ac68:	6879      	ldr	r1, [r7, #4]
 800ac6a:	4613      	mov	r3, r2
 800ac6c:	00db      	lsls	r3, r3, #3
 800ac6e:	4413      	add	r3, r2
 800ac70:	009b      	lsls	r3, r3, #2
 800ac72:	440b      	add	r3, r1
 800ac74:	3314      	adds	r3, #20
 800ac76:	7bfa      	ldrb	r2, [r7, #15]
 800ac78:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800ac7a:	7bfa      	ldrb	r2, [r7, #15]
 800ac7c:	7bfb      	ldrb	r3, [r7, #15]
 800ac7e:	b298      	uxth	r0, r3
 800ac80:	6879      	ldr	r1, [r7, #4]
 800ac82:	4613      	mov	r3, r2
 800ac84:	00db      	lsls	r3, r3, #3
 800ac86:	4413      	add	r3, r2
 800ac88:	009b      	lsls	r3, r3, #2
 800ac8a:	440b      	add	r3, r1
 800ac8c:	332e      	adds	r3, #46	@ 0x2e
 800ac8e:	4602      	mov	r2, r0
 800ac90:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800ac92:	7bfa      	ldrb	r2, [r7, #15]
 800ac94:	6879      	ldr	r1, [r7, #4]
 800ac96:	4613      	mov	r3, r2
 800ac98:	00db      	lsls	r3, r3, #3
 800ac9a:	4413      	add	r3, r2
 800ac9c:	009b      	lsls	r3, r3, #2
 800ac9e:	440b      	add	r3, r1
 800aca0:	3318      	adds	r3, #24
 800aca2:	2200      	movs	r2, #0
 800aca4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800aca6:	7bfa      	ldrb	r2, [r7, #15]
 800aca8:	6879      	ldr	r1, [r7, #4]
 800acaa:	4613      	mov	r3, r2
 800acac:	00db      	lsls	r3, r3, #3
 800acae:	4413      	add	r3, r2
 800acb0:	009b      	lsls	r3, r3, #2
 800acb2:	440b      	add	r3, r1
 800acb4:	331c      	adds	r3, #28
 800acb6:	2200      	movs	r2, #0
 800acb8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800acba:	7bfa      	ldrb	r2, [r7, #15]
 800acbc:	6879      	ldr	r1, [r7, #4]
 800acbe:	4613      	mov	r3, r2
 800acc0:	00db      	lsls	r3, r3, #3
 800acc2:	4413      	add	r3, r2
 800acc4:	009b      	lsls	r3, r3, #2
 800acc6:	440b      	add	r3, r1
 800acc8:	3320      	adds	r3, #32
 800acca:	2200      	movs	r2, #0
 800accc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800acce:	7bfa      	ldrb	r2, [r7, #15]
 800acd0:	6879      	ldr	r1, [r7, #4]
 800acd2:	4613      	mov	r3, r2
 800acd4:	00db      	lsls	r3, r3, #3
 800acd6:	4413      	add	r3, r2
 800acd8:	009b      	lsls	r3, r3, #2
 800acda:	440b      	add	r3, r1
 800acdc:	3324      	adds	r3, #36	@ 0x24
 800acde:	2200      	movs	r2, #0
 800ace0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ace2:	7bfb      	ldrb	r3, [r7, #15]
 800ace4:	3301      	adds	r3, #1
 800ace6:	73fb      	strb	r3, [r7, #15]
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	791b      	ldrb	r3, [r3, #4]
 800acec:	7bfa      	ldrb	r2, [r7, #15]
 800acee:	429a      	cmp	r2, r3
 800acf0:	d3af      	bcc.n	800ac52 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800acf2:	2300      	movs	r3, #0
 800acf4:	73fb      	strb	r3, [r7, #15]
 800acf6:	e044      	b.n	800ad82 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800acf8:	7bfa      	ldrb	r2, [r7, #15]
 800acfa:	6879      	ldr	r1, [r7, #4]
 800acfc:	4613      	mov	r3, r2
 800acfe:	00db      	lsls	r3, r3, #3
 800ad00:	4413      	add	r3, r2
 800ad02:	009b      	lsls	r3, r3, #2
 800ad04:	440b      	add	r3, r1
 800ad06:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800ad0a:	2200      	movs	r2, #0
 800ad0c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800ad0e:	7bfa      	ldrb	r2, [r7, #15]
 800ad10:	6879      	ldr	r1, [r7, #4]
 800ad12:	4613      	mov	r3, r2
 800ad14:	00db      	lsls	r3, r3, #3
 800ad16:	4413      	add	r3, r2
 800ad18:	009b      	lsls	r3, r3, #2
 800ad1a:	440b      	add	r3, r1
 800ad1c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800ad20:	7bfa      	ldrb	r2, [r7, #15]
 800ad22:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800ad24:	7bfa      	ldrb	r2, [r7, #15]
 800ad26:	6879      	ldr	r1, [r7, #4]
 800ad28:	4613      	mov	r3, r2
 800ad2a:	00db      	lsls	r3, r3, #3
 800ad2c:	4413      	add	r3, r2
 800ad2e:	009b      	lsls	r3, r3, #2
 800ad30:	440b      	add	r3, r1
 800ad32:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800ad36:	2200      	movs	r2, #0
 800ad38:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800ad3a:	7bfa      	ldrb	r2, [r7, #15]
 800ad3c:	6879      	ldr	r1, [r7, #4]
 800ad3e:	4613      	mov	r3, r2
 800ad40:	00db      	lsls	r3, r3, #3
 800ad42:	4413      	add	r3, r2
 800ad44:	009b      	lsls	r3, r3, #2
 800ad46:	440b      	add	r3, r1
 800ad48:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800ad50:	7bfa      	ldrb	r2, [r7, #15]
 800ad52:	6879      	ldr	r1, [r7, #4]
 800ad54:	4613      	mov	r3, r2
 800ad56:	00db      	lsls	r3, r3, #3
 800ad58:	4413      	add	r3, r2
 800ad5a:	009b      	lsls	r3, r3, #2
 800ad5c:	440b      	add	r3, r1
 800ad5e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800ad62:	2200      	movs	r2, #0
 800ad64:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800ad66:	7bfa      	ldrb	r2, [r7, #15]
 800ad68:	6879      	ldr	r1, [r7, #4]
 800ad6a:	4613      	mov	r3, r2
 800ad6c:	00db      	lsls	r3, r3, #3
 800ad6e:	4413      	add	r3, r2
 800ad70:	009b      	lsls	r3, r3, #2
 800ad72:	440b      	add	r3, r1
 800ad74:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800ad78:	2200      	movs	r2, #0
 800ad7a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ad7c:	7bfb      	ldrb	r3, [r7, #15]
 800ad7e:	3301      	adds	r3, #1
 800ad80:	73fb      	strb	r3, [r7, #15]
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	791b      	ldrb	r3, [r3, #4]
 800ad86:	7bfa      	ldrb	r2, [r7, #15]
 800ad88:	429a      	cmp	r2, r3
 800ad8a:	d3b5      	bcc.n	800acf8 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	6818      	ldr	r0, [r3, #0]
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	7c1a      	ldrb	r2, [r3, #16]
 800ad94:	f88d 2000 	strb.w	r2, [sp]
 800ad98:	3304      	adds	r3, #4
 800ad9a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ad9c:	f003 fe7c 	bl	800ea98 <USB_DevInit>
 800ada0:	4603      	mov	r3, r0
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d005      	beq.n	800adb2 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	2202      	movs	r2, #2
 800adaa:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800adae:	2301      	movs	r3, #1
 800adb0:	e00c      	b.n	800adcc <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	2200      	movs	r2, #0
 800adb6:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	2201      	movs	r2, #1
 800adbc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	4618      	mov	r0, r3
 800adc6:	f004 fec6 	bl	800fb56 <USB_DevDisconnect>

  return HAL_OK;
 800adca:	2300      	movs	r3, #0
}
 800adcc:	4618      	mov	r0, r3
 800adce:	3710      	adds	r7, #16
 800add0:	46bd      	mov	sp, r7
 800add2:	bd80      	pop	{r7, pc}

0800add4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800add4:	b580      	push	{r7, lr}
 800add6:	b084      	sub	sp, #16
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800ade8:	2b01      	cmp	r3, #1
 800adea:	d101      	bne.n	800adf0 <HAL_PCD_Start+0x1c>
 800adec:	2302      	movs	r3, #2
 800adee:	e022      	b.n	800ae36 <HAL_PCD_Start+0x62>
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	2201      	movs	r2, #1
 800adf4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	68db      	ldr	r3, [r3, #12]
 800adfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d009      	beq.n	800ae18 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800ae08:	2b01      	cmp	r3, #1
 800ae0a:	d105      	bne.n	800ae18 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae10:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	f003 fdcd 	bl	800e9bc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	4618      	mov	r0, r3
 800ae28:	f004 fe74 	bl	800fb14 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	2200      	movs	r2, #0
 800ae30:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800ae34:	2300      	movs	r3, #0
}
 800ae36:	4618      	mov	r0, r3
 800ae38:	3710      	adds	r7, #16
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	bd80      	pop	{r7, pc}

0800ae3e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800ae3e:	b590      	push	{r4, r7, lr}
 800ae40:	b08d      	sub	sp, #52	@ 0x34
 800ae42:	af00      	add	r7, sp, #0
 800ae44:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae4c:	6a3b      	ldr	r3, [r7, #32]
 800ae4e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	4618      	mov	r0, r3
 800ae56:	f004 ff32 	bl	800fcbe <USB_GetMode>
 800ae5a:	4603      	mov	r3, r0
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	f040 848c 	bne.w	800b77a <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	4618      	mov	r0, r3
 800ae68:	f004 fe96 	bl	800fb98 <USB_ReadInterrupts>
 800ae6c:	4603      	mov	r3, r0
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	f000 8482 	beq.w	800b778 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800ae74:	69fb      	ldr	r3, [r7, #28]
 800ae76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ae7a:	689b      	ldr	r3, [r3, #8]
 800ae7c:	0a1b      	lsrs	r3, r3, #8
 800ae7e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	f004 fe83 	bl	800fb98 <USB_ReadInterrupts>
 800ae92:	4603      	mov	r3, r0
 800ae94:	f003 0302 	and.w	r3, r3, #2
 800ae98:	2b02      	cmp	r3, #2
 800ae9a:	d107      	bne.n	800aeac <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	695a      	ldr	r2, [r3, #20]
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	f002 0202 	and.w	r2, r2, #2
 800aeaa:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	f004 fe71 	bl	800fb98 <USB_ReadInterrupts>
 800aeb6:	4603      	mov	r3, r0
 800aeb8:	f003 0310 	and.w	r3, r3, #16
 800aebc:	2b10      	cmp	r3, #16
 800aebe:	d161      	bne.n	800af84 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	699a      	ldr	r2, [r3, #24]
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	f022 0210 	bic.w	r2, r2, #16
 800aece:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800aed0:	6a3b      	ldr	r3, [r7, #32]
 800aed2:	6a1b      	ldr	r3, [r3, #32]
 800aed4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800aed6:	69bb      	ldr	r3, [r7, #24]
 800aed8:	f003 020f 	and.w	r2, r3, #15
 800aedc:	4613      	mov	r3, r2
 800aede:	00db      	lsls	r3, r3, #3
 800aee0:	4413      	add	r3, r2
 800aee2:	009b      	lsls	r3, r3, #2
 800aee4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800aee8:	687a      	ldr	r2, [r7, #4]
 800aeea:	4413      	add	r3, r2
 800aeec:	3304      	adds	r3, #4
 800aeee:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800aef0:	69bb      	ldr	r3, [r7, #24]
 800aef2:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800aef6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800aefa:	d124      	bne.n	800af46 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800aefc:	69ba      	ldr	r2, [r7, #24]
 800aefe:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800af02:	4013      	ands	r3, r2
 800af04:	2b00      	cmp	r3, #0
 800af06:	d035      	beq.n	800af74 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800af08:	697b      	ldr	r3, [r7, #20]
 800af0a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800af0c:	69bb      	ldr	r3, [r7, #24]
 800af0e:	091b      	lsrs	r3, r3, #4
 800af10:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800af12:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800af16:	b29b      	uxth	r3, r3
 800af18:	461a      	mov	r2, r3
 800af1a:	6a38      	ldr	r0, [r7, #32]
 800af1c:	f004 fca8 	bl	800f870 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800af20:	697b      	ldr	r3, [r7, #20]
 800af22:	68da      	ldr	r2, [r3, #12]
 800af24:	69bb      	ldr	r3, [r7, #24]
 800af26:	091b      	lsrs	r3, r3, #4
 800af28:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800af2c:	441a      	add	r2, r3
 800af2e:	697b      	ldr	r3, [r7, #20]
 800af30:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800af32:	697b      	ldr	r3, [r7, #20]
 800af34:	695a      	ldr	r2, [r3, #20]
 800af36:	69bb      	ldr	r3, [r7, #24]
 800af38:	091b      	lsrs	r3, r3, #4
 800af3a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800af3e:	441a      	add	r2, r3
 800af40:	697b      	ldr	r3, [r7, #20]
 800af42:	615a      	str	r2, [r3, #20]
 800af44:	e016      	b.n	800af74 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800af46:	69bb      	ldr	r3, [r7, #24]
 800af48:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800af4c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800af50:	d110      	bne.n	800af74 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800af58:	2208      	movs	r2, #8
 800af5a:	4619      	mov	r1, r3
 800af5c:	6a38      	ldr	r0, [r7, #32]
 800af5e:	f004 fc87 	bl	800f870 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800af62:	697b      	ldr	r3, [r7, #20]
 800af64:	695a      	ldr	r2, [r3, #20]
 800af66:	69bb      	ldr	r3, [r7, #24]
 800af68:	091b      	lsrs	r3, r3, #4
 800af6a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800af6e:	441a      	add	r2, r3
 800af70:	697b      	ldr	r3, [r7, #20]
 800af72:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	699a      	ldr	r2, [r3, #24]
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	f042 0210 	orr.w	r2, r2, #16
 800af82:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	4618      	mov	r0, r3
 800af8a:	f004 fe05 	bl	800fb98 <USB_ReadInterrupts>
 800af8e:	4603      	mov	r3, r0
 800af90:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800af94:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800af98:	f040 80a7 	bne.w	800b0ea <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800af9c:	2300      	movs	r3, #0
 800af9e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	4618      	mov	r0, r3
 800afa6:	f004 fe0a 	bl	800fbbe <USB_ReadDevAllOutEpInterrupt>
 800afaa:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800afac:	e099      	b.n	800b0e2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800afae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afb0:	f003 0301 	and.w	r3, r3, #1
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	f000 808e 	beq.w	800b0d6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800afc0:	b2d2      	uxtb	r2, r2
 800afc2:	4611      	mov	r1, r2
 800afc4:	4618      	mov	r0, r3
 800afc6:	f004 fe2e 	bl	800fc26 <USB_ReadDevOutEPInterrupt>
 800afca:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800afcc:	693b      	ldr	r3, [r7, #16]
 800afce:	f003 0301 	and.w	r3, r3, #1
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d00c      	beq.n	800aff0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800afd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afd8:	015a      	lsls	r2, r3, #5
 800afda:	69fb      	ldr	r3, [r7, #28]
 800afdc:	4413      	add	r3, r2
 800afde:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800afe2:	461a      	mov	r2, r3
 800afe4:	2301      	movs	r3, #1
 800afe6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800afe8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800afea:	6878      	ldr	r0, [r7, #4]
 800afec:	f000 fea4 	bl	800bd38 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800aff0:	693b      	ldr	r3, [r7, #16]
 800aff2:	f003 0308 	and.w	r3, r3, #8
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d00c      	beq.n	800b014 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800affa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800affc:	015a      	lsls	r2, r3, #5
 800affe:	69fb      	ldr	r3, [r7, #28]
 800b000:	4413      	add	r3, r2
 800b002:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b006:	461a      	mov	r2, r3
 800b008:	2308      	movs	r3, #8
 800b00a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800b00c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b00e:	6878      	ldr	r0, [r7, #4]
 800b010:	f000 ff7a 	bl	800bf08 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800b014:	693b      	ldr	r3, [r7, #16]
 800b016:	f003 0310 	and.w	r3, r3, #16
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d008      	beq.n	800b030 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800b01e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b020:	015a      	lsls	r2, r3, #5
 800b022:	69fb      	ldr	r3, [r7, #28]
 800b024:	4413      	add	r3, r2
 800b026:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b02a:	461a      	mov	r2, r3
 800b02c:	2310      	movs	r3, #16
 800b02e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800b030:	693b      	ldr	r3, [r7, #16]
 800b032:	f003 0302 	and.w	r3, r3, #2
 800b036:	2b00      	cmp	r3, #0
 800b038:	d030      	beq.n	800b09c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800b03a:	6a3b      	ldr	r3, [r7, #32]
 800b03c:	695b      	ldr	r3, [r3, #20]
 800b03e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b042:	2b80      	cmp	r3, #128	@ 0x80
 800b044:	d109      	bne.n	800b05a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800b046:	69fb      	ldr	r3, [r7, #28]
 800b048:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b04c:	685b      	ldr	r3, [r3, #4]
 800b04e:	69fa      	ldr	r2, [r7, #28]
 800b050:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b054:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800b058:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800b05a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b05c:	4613      	mov	r3, r2
 800b05e:	00db      	lsls	r3, r3, #3
 800b060:	4413      	add	r3, r2
 800b062:	009b      	lsls	r3, r3, #2
 800b064:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800b068:	687a      	ldr	r2, [r7, #4]
 800b06a:	4413      	add	r3, r2
 800b06c:	3304      	adds	r3, #4
 800b06e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800b070:	697b      	ldr	r3, [r7, #20]
 800b072:	78db      	ldrb	r3, [r3, #3]
 800b074:	2b01      	cmp	r3, #1
 800b076:	d108      	bne.n	800b08a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800b078:	697b      	ldr	r3, [r7, #20]
 800b07a:	2200      	movs	r2, #0
 800b07c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800b07e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b080:	b2db      	uxtb	r3, r3
 800b082:	4619      	mov	r1, r3
 800b084:	6878      	ldr	r0, [r7, #4]
 800b086:	f007 fa1b 	bl	80124c0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800b08a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b08c:	015a      	lsls	r2, r3, #5
 800b08e:	69fb      	ldr	r3, [r7, #28]
 800b090:	4413      	add	r3, r2
 800b092:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b096:	461a      	mov	r2, r3
 800b098:	2302      	movs	r3, #2
 800b09a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800b09c:	693b      	ldr	r3, [r7, #16]
 800b09e:	f003 0320 	and.w	r3, r3, #32
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d008      	beq.n	800b0b8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800b0a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0a8:	015a      	lsls	r2, r3, #5
 800b0aa:	69fb      	ldr	r3, [r7, #28]
 800b0ac:	4413      	add	r3, r2
 800b0ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b0b2:	461a      	mov	r2, r3
 800b0b4:	2320      	movs	r3, #32
 800b0b6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800b0b8:	693b      	ldr	r3, [r7, #16]
 800b0ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d009      	beq.n	800b0d6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800b0c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0c4:	015a      	lsls	r2, r3, #5
 800b0c6:	69fb      	ldr	r3, [r7, #28]
 800b0c8:	4413      	add	r3, r2
 800b0ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b0ce:	461a      	mov	r2, r3
 800b0d0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b0d4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800b0d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0d8:	3301      	adds	r3, #1
 800b0da:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800b0dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0de:	085b      	lsrs	r3, r3, #1
 800b0e0:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800b0e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	f47f af62 	bne.w	800afae <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	f004 fd52 	bl	800fb98 <USB_ReadInterrupts>
 800b0f4:	4603      	mov	r3, r0
 800b0f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b0fa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b0fe:	f040 80db 	bne.w	800b2b8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	4618      	mov	r0, r3
 800b108:	f004 fd73 	bl	800fbf2 <USB_ReadDevAllInEpInterrupt>
 800b10c:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800b10e:	2300      	movs	r3, #0
 800b110:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800b112:	e0cd      	b.n	800b2b0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800b114:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b116:	f003 0301 	and.w	r3, r3, #1
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	f000 80c2 	beq.w	800b2a4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b126:	b2d2      	uxtb	r2, r2
 800b128:	4611      	mov	r1, r2
 800b12a:	4618      	mov	r0, r3
 800b12c:	f004 fd99 	bl	800fc62 <USB_ReadDevInEPInterrupt>
 800b130:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800b132:	693b      	ldr	r3, [r7, #16]
 800b134:	f003 0301 	and.w	r3, r3, #1
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d057      	beq.n	800b1ec <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800b13c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b13e:	f003 030f 	and.w	r3, r3, #15
 800b142:	2201      	movs	r2, #1
 800b144:	fa02 f303 	lsl.w	r3, r2, r3
 800b148:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800b14a:	69fb      	ldr	r3, [r7, #28]
 800b14c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b150:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	43db      	mvns	r3, r3
 800b156:	69f9      	ldr	r1, [r7, #28]
 800b158:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b15c:	4013      	ands	r3, r2
 800b15e:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800b160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b162:	015a      	lsls	r2, r3, #5
 800b164:	69fb      	ldr	r3, [r7, #28]
 800b166:	4413      	add	r3, r2
 800b168:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b16c:	461a      	mov	r2, r3
 800b16e:	2301      	movs	r3, #1
 800b170:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	799b      	ldrb	r3, [r3, #6]
 800b176:	2b01      	cmp	r3, #1
 800b178:	d132      	bne.n	800b1e0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800b17a:	6879      	ldr	r1, [r7, #4]
 800b17c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b17e:	4613      	mov	r3, r2
 800b180:	00db      	lsls	r3, r3, #3
 800b182:	4413      	add	r3, r2
 800b184:	009b      	lsls	r3, r3, #2
 800b186:	440b      	add	r3, r1
 800b188:	3320      	adds	r3, #32
 800b18a:	6819      	ldr	r1, [r3, #0]
 800b18c:	6878      	ldr	r0, [r7, #4]
 800b18e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b190:	4613      	mov	r3, r2
 800b192:	00db      	lsls	r3, r3, #3
 800b194:	4413      	add	r3, r2
 800b196:	009b      	lsls	r3, r3, #2
 800b198:	4403      	add	r3, r0
 800b19a:	331c      	adds	r3, #28
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	4419      	add	r1, r3
 800b1a0:	6878      	ldr	r0, [r7, #4]
 800b1a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b1a4:	4613      	mov	r3, r2
 800b1a6:	00db      	lsls	r3, r3, #3
 800b1a8:	4413      	add	r3, r2
 800b1aa:	009b      	lsls	r3, r3, #2
 800b1ac:	4403      	add	r3, r0
 800b1ae:	3320      	adds	r3, #32
 800b1b0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800b1b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d113      	bne.n	800b1e0 <HAL_PCD_IRQHandler+0x3a2>
 800b1b8:	6879      	ldr	r1, [r7, #4]
 800b1ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b1bc:	4613      	mov	r3, r2
 800b1be:	00db      	lsls	r3, r3, #3
 800b1c0:	4413      	add	r3, r2
 800b1c2:	009b      	lsls	r3, r3, #2
 800b1c4:	440b      	add	r3, r1
 800b1c6:	3324      	adds	r3, #36	@ 0x24
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d108      	bne.n	800b1e0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	6818      	ldr	r0, [r3, #0]
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800b1d8:	461a      	mov	r2, r3
 800b1da:	2101      	movs	r1, #1
 800b1dc:	f004 fda0 	bl	800fd20 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800b1e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1e2:	b2db      	uxtb	r3, r3
 800b1e4:	4619      	mov	r1, r3
 800b1e6:	6878      	ldr	r0, [r7, #4]
 800b1e8:	f007 f8ef 	bl	80123ca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800b1ec:	693b      	ldr	r3, [r7, #16]
 800b1ee:	f003 0308 	and.w	r3, r3, #8
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d008      	beq.n	800b208 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800b1f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1f8:	015a      	lsls	r2, r3, #5
 800b1fa:	69fb      	ldr	r3, [r7, #28]
 800b1fc:	4413      	add	r3, r2
 800b1fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b202:	461a      	mov	r2, r3
 800b204:	2308      	movs	r3, #8
 800b206:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800b208:	693b      	ldr	r3, [r7, #16]
 800b20a:	f003 0310 	and.w	r3, r3, #16
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d008      	beq.n	800b224 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800b212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b214:	015a      	lsls	r2, r3, #5
 800b216:	69fb      	ldr	r3, [r7, #28]
 800b218:	4413      	add	r3, r2
 800b21a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b21e:	461a      	mov	r2, r3
 800b220:	2310      	movs	r3, #16
 800b222:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800b224:	693b      	ldr	r3, [r7, #16]
 800b226:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d008      	beq.n	800b240 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800b22e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b230:	015a      	lsls	r2, r3, #5
 800b232:	69fb      	ldr	r3, [r7, #28]
 800b234:	4413      	add	r3, r2
 800b236:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b23a:	461a      	mov	r2, r3
 800b23c:	2340      	movs	r3, #64	@ 0x40
 800b23e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800b240:	693b      	ldr	r3, [r7, #16]
 800b242:	f003 0302 	and.w	r3, r3, #2
 800b246:	2b00      	cmp	r3, #0
 800b248:	d023      	beq.n	800b292 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800b24a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b24c:	6a38      	ldr	r0, [r7, #32]
 800b24e:	f003 fd87 	bl	800ed60 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800b252:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b254:	4613      	mov	r3, r2
 800b256:	00db      	lsls	r3, r3, #3
 800b258:	4413      	add	r3, r2
 800b25a:	009b      	lsls	r3, r3, #2
 800b25c:	3310      	adds	r3, #16
 800b25e:	687a      	ldr	r2, [r7, #4]
 800b260:	4413      	add	r3, r2
 800b262:	3304      	adds	r3, #4
 800b264:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800b266:	697b      	ldr	r3, [r7, #20]
 800b268:	78db      	ldrb	r3, [r3, #3]
 800b26a:	2b01      	cmp	r3, #1
 800b26c:	d108      	bne.n	800b280 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800b26e:	697b      	ldr	r3, [r7, #20]
 800b270:	2200      	movs	r2, #0
 800b272:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800b274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b276:	b2db      	uxtb	r3, r3
 800b278:	4619      	mov	r1, r3
 800b27a:	6878      	ldr	r0, [r7, #4]
 800b27c:	f007 f932 	bl	80124e4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800b280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b282:	015a      	lsls	r2, r3, #5
 800b284:	69fb      	ldr	r3, [r7, #28]
 800b286:	4413      	add	r3, r2
 800b288:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b28c:	461a      	mov	r2, r3
 800b28e:	2302      	movs	r3, #2
 800b290:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800b292:	693b      	ldr	r3, [r7, #16]
 800b294:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d003      	beq.n	800b2a4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800b29c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b29e:	6878      	ldr	r0, [r7, #4]
 800b2a0:	f000 fcbd 	bl	800bc1e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800b2a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2a6:	3301      	adds	r3, #1
 800b2a8:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800b2aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2ac:	085b      	lsrs	r3, r3, #1
 800b2ae:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800b2b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	f47f af2e 	bne.w	800b114 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	4618      	mov	r0, r3
 800b2be:	f004 fc6b 	bl	800fb98 <USB_ReadInterrupts>
 800b2c2:	4603      	mov	r3, r0
 800b2c4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b2c8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b2cc:	d122      	bne.n	800b314 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800b2ce:	69fb      	ldr	r3, [r7, #28]
 800b2d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b2d4:	685b      	ldr	r3, [r3, #4]
 800b2d6:	69fa      	ldr	r2, [r7, #28]
 800b2d8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b2dc:	f023 0301 	bic.w	r3, r3, #1
 800b2e0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800b2e8:	2b01      	cmp	r3, #1
 800b2ea:	d108      	bne.n	800b2fe <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	2200      	movs	r2, #0
 800b2f0:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800b2f4:	2100      	movs	r1, #0
 800b2f6:	6878      	ldr	r0, [r7, #4]
 800b2f8:	f000 fea4 	bl	800c044 <HAL_PCDEx_LPM_Callback>
 800b2fc:	e002      	b.n	800b304 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800b2fe:	6878      	ldr	r0, [r7, #4]
 800b300:	f007 f8d0 	bl	80124a4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	695a      	ldr	r2, [r3, #20]
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800b312:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	4618      	mov	r0, r3
 800b31a:	f004 fc3d 	bl	800fb98 <USB_ReadInterrupts>
 800b31e:	4603      	mov	r3, r0
 800b320:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b324:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b328:	d112      	bne.n	800b350 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800b32a:	69fb      	ldr	r3, [r7, #28]
 800b32c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b330:	689b      	ldr	r3, [r3, #8]
 800b332:	f003 0301 	and.w	r3, r3, #1
 800b336:	2b01      	cmp	r3, #1
 800b338:	d102      	bne.n	800b340 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800b33a:	6878      	ldr	r0, [r7, #4]
 800b33c:	f007 f88c 	bl	8012458 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	695a      	ldr	r2, [r3, #20]
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800b34e:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	4618      	mov	r0, r3
 800b356:	f004 fc1f 	bl	800fb98 <USB_ReadInterrupts>
 800b35a:	4603      	mov	r3, r0
 800b35c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b360:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b364:	f040 80b7 	bne.w	800b4d6 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800b368:	69fb      	ldr	r3, [r7, #28]
 800b36a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b36e:	685b      	ldr	r3, [r3, #4]
 800b370:	69fa      	ldr	r2, [r7, #28]
 800b372:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b376:	f023 0301 	bic.w	r3, r3, #1
 800b37a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	2110      	movs	r1, #16
 800b382:	4618      	mov	r0, r3
 800b384:	f003 fcec 	bl	800ed60 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b388:	2300      	movs	r3, #0
 800b38a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b38c:	e046      	b.n	800b41c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800b38e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b390:	015a      	lsls	r2, r3, #5
 800b392:	69fb      	ldr	r3, [r7, #28]
 800b394:	4413      	add	r3, r2
 800b396:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b39a:	461a      	mov	r2, r3
 800b39c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800b3a0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b3a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3a4:	015a      	lsls	r2, r3, #5
 800b3a6:	69fb      	ldr	r3, [r7, #28]
 800b3a8:	4413      	add	r3, r2
 800b3aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b3b2:	0151      	lsls	r1, r2, #5
 800b3b4:	69fa      	ldr	r2, [r7, #28]
 800b3b6:	440a      	add	r2, r1
 800b3b8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b3bc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b3c0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800b3c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3c4:	015a      	lsls	r2, r3, #5
 800b3c6:	69fb      	ldr	r3, [r7, #28]
 800b3c8:	4413      	add	r3, r2
 800b3ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b3ce:	461a      	mov	r2, r3
 800b3d0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800b3d4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b3d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3d8:	015a      	lsls	r2, r3, #5
 800b3da:	69fb      	ldr	r3, [r7, #28]
 800b3dc:	4413      	add	r3, r2
 800b3de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b3e6:	0151      	lsls	r1, r2, #5
 800b3e8:	69fa      	ldr	r2, [r7, #28]
 800b3ea:	440a      	add	r2, r1
 800b3ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b3f0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b3f4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800b3f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3f8:	015a      	lsls	r2, r3, #5
 800b3fa:	69fb      	ldr	r3, [r7, #28]
 800b3fc:	4413      	add	r3, r2
 800b3fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b406:	0151      	lsls	r1, r2, #5
 800b408:	69fa      	ldr	r2, [r7, #28]
 800b40a:	440a      	add	r2, r1
 800b40c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b410:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b414:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b416:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b418:	3301      	adds	r3, #1
 800b41a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	791b      	ldrb	r3, [r3, #4]
 800b420:	461a      	mov	r2, r3
 800b422:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b424:	4293      	cmp	r3, r2
 800b426:	d3b2      	bcc.n	800b38e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800b428:	69fb      	ldr	r3, [r7, #28]
 800b42a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b42e:	69db      	ldr	r3, [r3, #28]
 800b430:	69fa      	ldr	r2, [r7, #28]
 800b432:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b436:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800b43a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	7bdb      	ldrb	r3, [r3, #15]
 800b440:	2b00      	cmp	r3, #0
 800b442:	d016      	beq.n	800b472 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800b444:	69fb      	ldr	r3, [r7, #28]
 800b446:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b44a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b44e:	69fa      	ldr	r2, [r7, #28]
 800b450:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b454:	f043 030b 	orr.w	r3, r3, #11
 800b458:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800b45c:	69fb      	ldr	r3, [r7, #28]
 800b45e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b462:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b464:	69fa      	ldr	r2, [r7, #28]
 800b466:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b46a:	f043 030b 	orr.w	r3, r3, #11
 800b46e:	6453      	str	r3, [r2, #68]	@ 0x44
 800b470:	e015      	b.n	800b49e <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800b472:	69fb      	ldr	r3, [r7, #28]
 800b474:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b478:	695b      	ldr	r3, [r3, #20]
 800b47a:	69fa      	ldr	r2, [r7, #28]
 800b47c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b480:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800b484:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800b488:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800b48a:	69fb      	ldr	r3, [r7, #28]
 800b48c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b490:	691b      	ldr	r3, [r3, #16]
 800b492:	69fa      	ldr	r2, [r7, #28]
 800b494:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b498:	f043 030b 	orr.w	r3, r3, #11
 800b49c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800b49e:	69fb      	ldr	r3, [r7, #28]
 800b4a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	69fa      	ldr	r2, [r7, #28]
 800b4a8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b4ac:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800b4b0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	6818      	ldr	r0, [r3, #0]
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800b4c0:	461a      	mov	r2, r3
 800b4c2:	f004 fc2d 	bl	800fd20 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	695a      	ldr	r2, [r3, #20]
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800b4d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	4618      	mov	r0, r3
 800b4dc:	f004 fb5c 	bl	800fb98 <USB_ReadInterrupts>
 800b4e0:	4603      	mov	r3, r0
 800b4e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b4e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b4ea:	d123      	bne.n	800b534 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	f004 fbf2 	bl	800fcda <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	f003 fca9 	bl	800ee52 <USB_GetDevSpeed>
 800b500:	4603      	mov	r3, r0
 800b502:	461a      	mov	r2, r3
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	681c      	ldr	r4, [r3, #0]
 800b50c:	f001 f9d6 	bl	800c8bc <HAL_RCC_GetHCLKFreq>
 800b510:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800b516:	461a      	mov	r2, r3
 800b518:	4620      	mov	r0, r4
 800b51a:	f003 f9ad 	bl	800e878 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800b51e:	6878      	ldr	r0, [r7, #4]
 800b520:	f006 ff7b 	bl	801241a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	695a      	ldr	r2, [r3, #20]
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800b532:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	4618      	mov	r0, r3
 800b53a:	f004 fb2d 	bl	800fb98 <USB_ReadInterrupts>
 800b53e:	4603      	mov	r3, r0
 800b540:	f003 0308 	and.w	r3, r3, #8
 800b544:	2b08      	cmp	r3, #8
 800b546:	d10a      	bne.n	800b55e <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800b548:	6878      	ldr	r0, [r7, #4]
 800b54a:	f006 ff58 	bl	80123fe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	695a      	ldr	r2, [r3, #20]
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	f002 0208 	and.w	r2, r2, #8
 800b55c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	4618      	mov	r0, r3
 800b564:	f004 fb18 	bl	800fb98 <USB_ReadInterrupts>
 800b568:	4603      	mov	r3, r0
 800b56a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b56e:	2b80      	cmp	r3, #128	@ 0x80
 800b570:	d123      	bne.n	800b5ba <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800b572:	6a3b      	ldr	r3, [r7, #32]
 800b574:	699b      	ldr	r3, [r3, #24]
 800b576:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b57a:	6a3b      	ldr	r3, [r7, #32]
 800b57c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b57e:	2301      	movs	r3, #1
 800b580:	627b      	str	r3, [r7, #36]	@ 0x24
 800b582:	e014      	b.n	800b5ae <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800b584:	6879      	ldr	r1, [r7, #4]
 800b586:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b588:	4613      	mov	r3, r2
 800b58a:	00db      	lsls	r3, r3, #3
 800b58c:	4413      	add	r3, r2
 800b58e:	009b      	lsls	r3, r3, #2
 800b590:	440b      	add	r3, r1
 800b592:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800b596:	781b      	ldrb	r3, [r3, #0]
 800b598:	2b01      	cmp	r3, #1
 800b59a:	d105      	bne.n	800b5a8 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800b59c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b59e:	b2db      	uxtb	r3, r3
 800b5a0:	4619      	mov	r1, r3
 800b5a2:	6878      	ldr	r0, [r7, #4]
 800b5a4:	f000 fb0a 	bl	800bbbc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b5a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5aa:	3301      	adds	r3, #1
 800b5ac:	627b      	str	r3, [r7, #36]	@ 0x24
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	791b      	ldrb	r3, [r3, #4]
 800b5b2:	461a      	mov	r2, r3
 800b5b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5b6:	4293      	cmp	r3, r2
 800b5b8:	d3e4      	bcc.n	800b584 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	4618      	mov	r0, r3
 800b5c0:	f004 faea 	bl	800fb98 <USB_ReadInterrupts>
 800b5c4:	4603      	mov	r3, r0
 800b5c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b5ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b5ce:	d13c      	bne.n	800b64a <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b5d0:	2301      	movs	r3, #1
 800b5d2:	627b      	str	r3, [r7, #36]	@ 0x24
 800b5d4:	e02b      	b.n	800b62e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800b5d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5d8:	015a      	lsls	r2, r3, #5
 800b5da:	69fb      	ldr	r3, [r7, #28]
 800b5dc:	4413      	add	r3, r2
 800b5de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800b5e6:	6879      	ldr	r1, [r7, #4]
 800b5e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b5ea:	4613      	mov	r3, r2
 800b5ec:	00db      	lsls	r3, r3, #3
 800b5ee:	4413      	add	r3, r2
 800b5f0:	009b      	lsls	r3, r3, #2
 800b5f2:	440b      	add	r3, r1
 800b5f4:	3318      	adds	r3, #24
 800b5f6:	781b      	ldrb	r3, [r3, #0]
 800b5f8:	2b01      	cmp	r3, #1
 800b5fa:	d115      	bne.n	800b628 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800b5fc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	da12      	bge.n	800b628 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800b602:	6879      	ldr	r1, [r7, #4]
 800b604:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b606:	4613      	mov	r3, r2
 800b608:	00db      	lsls	r3, r3, #3
 800b60a:	4413      	add	r3, r2
 800b60c:	009b      	lsls	r3, r3, #2
 800b60e:	440b      	add	r3, r1
 800b610:	3317      	adds	r3, #23
 800b612:	2201      	movs	r2, #1
 800b614:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800b616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b618:	b2db      	uxtb	r3, r3
 800b61a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b61e:	b2db      	uxtb	r3, r3
 800b620:	4619      	mov	r1, r3
 800b622:	6878      	ldr	r0, [r7, #4]
 800b624:	f000 faca 	bl	800bbbc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b62a:	3301      	adds	r3, #1
 800b62c:	627b      	str	r3, [r7, #36]	@ 0x24
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	791b      	ldrb	r3, [r3, #4]
 800b632:	461a      	mov	r2, r3
 800b634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b636:	4293      	cmp	r3, r2
 800b638:	d3cd      	bcc.n	800b5d6 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	695a      	ldr	r2, [r3, #20]
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800b648:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	4618      	mov	r0, r3
 800b650:	f004 faa2 	bl	800fb98 <USB_ReadInterrupts>
 800b654:	4603      	mov	r3, r0
 800b656:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b65a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b65e:	d156      	bne.n	800b70e <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b660:	2301      	movs	r3, #1
 800b662:	627b      	str	r3, [r7, #36]	@ 0x24
 800b664:	e045      	b.n	800b6f2 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800b666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b668:	015a      	lsls	r2, r3, #5
 800b66a:	69fb      	ldr	r3, [r7, #28]
 800b66c:	4413      	add	r3, r2
 800b66e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800b676:	6879      	ldr	r1, [r7, #4]
 800b678:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b67a:	4613      	mov	r3, r2
 800b67c:	00db      	lsls	r3, r3, #3
 800b67e:	4413      	add	r3, r2
 800b680:	009b      	lsls	r3, r3, #2
 800b682:	440b      	add	r3, r1
 800b684:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800b688:	781b      	ldrb	r3, [r3, #0]
 800b68a:	2b01      	cmp	r3, #1
 800b68c:	d12e      	bne.n	800b6ec <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800b68e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800b690:	2b00      	cmp	r3, #0
 800b692:	da2b      	bge.n	800b6ec <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800b694:	69bb      	ldr	r3, [r7, #24]
 800b696:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800b6a0:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800b6a4:	429a      	cmp	r2, r3
 800b6a6:	d121      	bne.n	800b6ec <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800b6a8:	6879      	ldr	r1, [r7, #4]
 800b6aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b6ac:	4613      	mov	r3, r2
 800b6ae:	00db      	lsls	r3, r3, #3
 800b6b0:	4413      	add	r3, r2
 800b6b2:	009b      	lsls	r3, r3, #2
 800b6b4:	440b      	add	r3, r1
 800b6b6:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800b6ba:	2201      	movs	r2, #1
 800b6bc:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800b6be:	6a3b      	ldr	r3, [r7, #32]
 800b6c0:	699b      	ldr	r3, [r3, #24]
 800b6c2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800b6c6:	6a3b      	ldr	r3, [r7, #32]
 800b6c8:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800b6ca:	6a3b      	ldr	r3, [r7, #32]
 800b6cc:	695b      	ldr	r3, [r3, #20]
 800b6ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d10a      	bne.n	800b6ec <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800b6d6:	69fb      	ldr	r3, [r7, #28]
 800b6d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b6dc:	685b      	ldr	r3, [r3, #4]
 800b6de:	69fa      	ldr	r2, [r7, #28]
 800b6e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b6e4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800b6e8:	6053      	str	r3, [r2, #4]
            break;
 800b6ea:	e008      	b.n	800b6fe <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b6ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6ee:	3301      	adds	r3, #1
 800b6f0:	627b      	str	r3, [r7, #36]	@ 0x24
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	791b      	ldrb	r3, [r3, #4]
 800b6f6:	461a      	mov	r2, r3
 800b6f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6fa:	4293      	cmp	r3, r2
 800b6fc:	d3b3      	bcc.n	800b666 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	695a      	ldr	r2, [r3, #20]
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800b70c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	4618      	mov	r0, r3
 800b714:	f004 fa40 	bl	800fb98 <USB_ReadInterrupts>
 800b718:	4603      	mov	r3, r0
 800b71a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b71e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b722:	d10a      	bne.n	800b73a <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800b724:	6878      	ldr	r0, [r7, #4]
 800b726:	f006 feef 	bl	8012508 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	695a      	ldr	r2, [r3, #20]
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800b738:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	4618      	mov	r0, r3
 800b740:	f004 fa2a 	bl	800fb98 <USB_ReadInterrupts>
 800b744:	4603      	mov	r3, r0
 800b746:	f003 0304 	and.w	r3, r3, #4
 800b74a:	2b04      	cmp	r3, #4
 800b74c:	d115      	bne.n	800b77a <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	685b      	ldr	r3, [r3, #4]
 800b754:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800b756:	69bb      	ldr	r3, [r7, #24]
 800b758:	f003 0304 	and.w	r3, r3, #4
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d002      	beq.n	800b766 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800b760:	6878      	ldr	r0, [r7, #4]
 800b762:	f006 fedf 	bl	8012524 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	6859      	ldr	r1, [r3, #4]
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	69ba      	ldr	r2, [r7, #24]
 800b772:	430a      	orrs	r2, r1
 800b774:	605a      	str	r2, [r3, #4]
 800b776:	e000      	b.n	800b77a <HAL_PCD_IRQHandler+0x93c>
      return;
 800b778:	bf00      	nop
    }
  }
}
 800b77a:	3734      	adds	r7, #52	@ 0x34
 800b77c:	46bd      	mov	sp, r7
 800b77e:	bd90      	pop	{r4, r7, pc}

0800b780 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800b780:	b580      	push	{r7, lr}
 800b782:	b082      	sub	sp, #8
 800b784:	af00      	add	r7, sp, #0
 800b786:	6078      	str	r0, [r7, #4]
 800b788:	460b      	mov	r3, r1
 800b78a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800b792:	2b01      	cmp	r3, #1
 800b794:	d101      	bne.n	800b79a <HAL_PCD_SetAddress+0x1a>
 800b796:	2302      	movs	r3, #2
 800b798:	e012      	b.n	800b7c0 <HAL_PCD_SetAddress+0x40>
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	2201      	movs	r2, #1
 800b79e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	78fa      	ldrb	r2, [r7, #3]
 800b7a6:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	78fa      	ldrb	r2, [r7, #3]
 800b7ae:	4611      	mov	r1, r2
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	f004 f989 	bl	800fac8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800b7be:	2300      	movs	r3, #0
}
 800b7c0:	4618      	mov	r0, r3
 800b7c2:	3708      	adds	r7, #8
 800b7c4:	46bd      	mov	sp, r7
 800b7c6:	bd80      	pop	{r7, pc}

0800b7c8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	b084      	sub	sp, #16
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	6078      	str	r0, [r7, #4]
 800b7d0:	4608      	mov	r0, r1
 800b7d2:	4611      	mov	r1, r2
 800b7d4:	461a      	mov	r2, r3
 800b7d6:	4603      	mov	r3, r0
 800b7d8:	70fb      	strb	r3, [r7, #3]
 800b7da:	460b      	mov	r3, r1
 800b7dc:	803b      	strh	r3, [r7, #0]
 800b7de:	4613      	mov	r3, r2
 800b7e0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800b7e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	da0f      	bge.n	800b80e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b7ee:	78fb      	ldrb	r3, [r7, #3]
 800b7f0:	f003 020f 	and.w	r2, r3, #15
 800b7f4:	4613      	mov	r3, r2
 800b7f6:	00db      	lsls	r3, r3, #3
 800b7f8:	4413      	add	r3, r2
 800b7fa:	009b      	lsls	r3, r3, #2
 800b7fc:	3310      	adds	r3, #16
 800b7fe:	687a      	ldr	r2, [r7, #4]
 800b800:	4413      	add	r3, r2
 800b802:	3304      	adds	r3, #4
 800b804:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	2201      	movs	r2, #1
 800b80a:	705a      	strb	r2, [r3, #1]
 800b80c:	e00f      	b.n	800b82e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b80e:	78fb      	ldrb	r3, [r7, #3]
 800b810:	f003 020f 	and.w	r2, r3, #15
 800b814:	4613      	mov	r3, r2
 800b816:	00db      	lsls	r3, r3, #3
 800b818:	4413      	add	r3, r2
 800b81a:	009b      	lsls	r3, r3, #2
 800b81c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800b820:	687a      	ldr	r2, [r7, #4]
 800b822:	4413      	add	r3, r2
 800b824:	3304      	adds	r3, #4
 800b826:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	2200      	movs	r2, #0
 800b82c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800b82e:	78fb      	ldrb	r3, [r7, #3]
 800b830:	f003 030f 	and.w	r3, r3, #15
 800b834:	b2da      	uxtb	r2, r3
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800b83a:	883b      	ldrh	r3, [r7, #0]
 800b83c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	78ba      	ldrb	r2, [r7, #2]
 800b848:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	785b      	ldrb	r3, [r3, #1]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d004      	beq.n	800b85c <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	781b      	ldrb	r3, [r3, #0]
 800b856:	461a      	mov	r2, r3
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800b85c:	78bb      	ldrb	r3, [r7, #2]
 800b85e:	2b02      	cmp	r3, #2
 800b860:	d102      	bne.n	800b868 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	2200      	movs	r2, #0
 800b866:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800b86e:	2b01      	cmp	r3, #1
 800b870:	d101      	bne.n	800b876 <HAL_PCD_EP_Open+0xae>
 800b872:	2302      	movs	r3, #2
 800b874:	e00e      	b.n	800b894 <HAL_PCD_EP_Open+0xcc>
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	2201      	movs	r2, #1
 800b87a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	68f9      	ldr	r1, [r7, #12]
 800b884:	4618      	mov	r0, r3
 800b886:	f003 fb09 	bl	800ee9c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	2200      	movs	r2, #0
 800b88e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800b892:	7afb      	ldrb	r3, [r7, #11]
}
 800b894:	4618      	mov	r0, r3
 800b896:	3710      	adds	r7, #16
 800b898:	46bd      	mov	sp, r7
 800b89a:	bd80      	pop	{r7, pc}

0800b89c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b89c:	b580      	push	{r7, lr}
 800b89e:	b084      	sub	sp, #16
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]
 800b8a4:	460b      	mov	r3, r1
 800b8a6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800b8a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	da0f      	bge.n	800b8d0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b8b0:	78fb      	ldrb	r3, [r7, #3]
 800b8b2:	f003 020f 	and.w	r2, r3, #15
 800b8b6:	4613      	mov	r3, r2
 800b8b8:	00db      	lsls	r3, r3, #3
 800b8ba:	4413      	add	r3, r2
 800b8bc:	009b      	lsls	r3, r3, #2
 800b8be:	3310      	adds	r3, #16
 800b8c0:	687a      	ldr	r2, [r7, #4]
 800b8c2:	4413      	add	r3, r2
 800b8c4:	3304      	adds	r3, #4
 800b8c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	2201      	movs	r2, #1
 800b8cc:	705a      	strb	r2, [r3, #1]
 800b8ce:	e00f      	b.n	800b8f0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b8d0:	78fb      	ldrb	r3, [r7, #3]
 800b8d2:	f003 020f 	and.w	r2, r3, #15
 800b8d6:	4613      	mov	r3, r2
 800b8d8:	00db      	lsls	r3, r3, #3
 800b8da:	4413      	add	r3, r2
 800b8dc:	009b      	lsls	r3, r3, #2
 800b8de:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800b8e2:	687a      	ldr	r2, [r7, #4]
 800b8e4:	4413      	add	r3, r2
 800b8e6:	3304      	adds	r3, #4
 800b8e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	2200      	movs	r2, #0
 800b8ee:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800b8f0:	78fb      	ldrb	r3, [r7, #3]
 800b8f2:	f003 030f 	and.w	r3, r3, #15
 800b8f6:	b2da      	uxtb	r2, r3
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800b902:	2b01      	cmp	r3, #1
 800b904:	d101      	bne.n	800b90a <HAL_PCD_EP_Close+0x6e>
 800b906:	2302      	movs	r3, #2
 800b908:	e00e      	b.n	800b928 <HAL_PCD_EP_Close+0x8c>
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	2201      	movs	r2, #1
 800b90e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	68f9      	ldr	r1, [r7, #12]
 800b918:	4618      	mov	r0, r3
 800b91a:	f003 fb47 	bl	800efac <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	2200      	movs	r2, #0
 800b922:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800b926:	2300      	movs	r3, #0
}
 800b928:	4618      	mov	r0, r3
 800b92a:	3710      	adds	r7, #16
 800b92c:	46bd      	mov	sp, r7
 800b92e:	bd80      	pop	{r7, pc}

0800b930 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800b930:	b580      	push	{r7, lr}
 800b932:	b086      	sub	sp, #24
 800b934:	af00      	add	r7, sp, #0
 800b936:	60f8      	str	r0, [r7, #12]
 800b938:	607a      	str	r2, [r7, #4]
 800b93a:	603b      	str	r3, [r7, #0]
 800b93c:	460b      	mov	r3, r1
 800b93e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b940:	7afb      	ldrb	r3, [r7, #11]
 800b942:	f003 020f 	and.w	r2, r3, #15
 800b946:	4613      	mov	r3, r2
 800b948:	00db      	lsls	r3, r3, #3
 800b94a:	4413      	add	r3, r2
 800b94c:	009b      	lsls	r3, r3, #2
 800b94e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800b952:	68fa      	ldr	r2, [r7, #12]
 800b954:	4413      	add	r3, r2
 800b956:	3304      	adds	r3, #4
 800b958:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800b95a:	697b      	ldr	r3, [r7, #20]
 800b95c:	687a      	ldr	r2, [r7, #4]
 800b95e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800b960:	697b      	ldr	r3, [r7, #20]
 800b962:	683a      	ldr	r2, [r7, #0]
 800b964:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800b966:	697b      	ldr	r3, [r7, #20]
 800b968:	2200      	movs	r2, #0
 800b96a:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800b96c:	697b      	ldr	r3, [r7, #20]
 800b96e:	2200      	movs	r2, #0
 800b970:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b972:	7afb      	ldrb	r3, [r7, #11]
 800b974:	f003 030f 	and.w	r3, r3, #15
 800b978:	b2da      	uxtb	r2, r3
 800b97a:	697b      	ldr	r3, [r7, #20]
 800b97c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	799b      	ldrb	r3, [r3, #6]
 800b982:	2b01      	cmp	r3, #1
 800b984:	d102      	bne.n	800b98c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800b986:	687a      	ldr	r2, [r7, #4]
 800b988:	697b      	ldr	r3, [r7, #20]
 800b98a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	6818      	ldr	r0, [r3, #0]
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	799b      	ldrb	r3, [r3, #6]
 800b994:	461a      	mov	r2, r3
 800b996:	6979      	ldr	r1, [r7, #20]
 800b998:	f003 fbe4 	bl	800f164 <USB_EPStartXfer>

  return HAL_OK;
 800b99c:	2300      	movs	r3, #0
}
 800b99e:	4618      	mov	r0, r3
 800b9a0:	3718      	adds	r7, #24
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	bd80      	pop	{r7, pc}

0800b9a6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800b9a6:	b480      	push	{r7}
 800b9a8:	b083      	sub	sp, #12
 800b9aa:	af00      	add	r7, sp, #0
 800b9ac:	6078      	str	r0, [r7, #4]
 800b9ae:	460b      	mov	r3, r1
 800b9b0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800b9b2:	78fb      	ldrb	r3, [r7, #3]
 800b9b4:	f003 020f 	and.w	r2, r3, #15
 800b9b8:	6879      	ldr	r1, [r7, #4]
 800b9ba:	4613      	mov	r3, r2
 800b9bc:	00db      	lsls	r3, r3, #3
 800b9be:	4413      	add	r3, r2
 800b9c0:	009b      	lsls	r3, r3, #2
 800b9c2:	440b      	add	r3, r1
 800b9c4:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800b9c8:	681b      	ldr	r3, [r3, #0]
}
 800b9ca:	4618      	mov	r0, r3
 800b9cc:	370c      	adds	r7, #12
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d4:	4770      	bx	lr

0800b9d6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800b9d6:	b580      	push	{r7, lr}
 800b9d8:	b086      	sub	sp, #24
 800b9da:	af00      	add	r7, sp, #0
 800b9dc:	60f8      	str	r0, [r7, #12]
 800b9de:	607a      	str	r2, [r7, #4]
 800b9e0:	603b      	str	r3, [r7, #0]
 800b9e2:	460b      	mov	r3, r1
 800b9e4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b9e6:	7afb      	ldrb	r3, [r7, #11]
 800b9e8:	f003 020f 	and.w	r2, r3, #15
 800b9ec:	4613      	mov	r3, r2
 800b9ee:	00db      	lsls	r3, r3, #3
 800b9f0:	4413      	add	r3, r2
 800b9f2:	009b      	lsls	r3, r3, #2
 800b9f4:	3310      	adds	r3, #16
 800b9f6:	68fa      	ldr	r2, [r7, #12]
 800b9f8:	4413      	add	r3, r2
 800b9fa:	3304      	adds	r3, #4
 800b9fc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800b9fe:	697b      	ldr	r3, [r7, #20]
 800ba00:	687a      	ldr	r2, [r7, #4]
 800ba02:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800ba04:	697b      	ldr	r3, [r7, #20]
 800ba06:	683a      	ldr	r2, [r7, #0]
 800ba08:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800ba0a:	697b      	ldr	r3, [r7, #20]
 800ba0c:	2200      	movs	r2, #0
 800ba0e:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800ba10:	697b      	ldr	r3, [r7, #20]
 800ba12:	2201      	movs	r2, #1
 800ba14:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ba16:	7afb      	ldrb	r3, [r7, #11]
 800ba18:	f003 030f 	and.w	r3, r3, #15
 800ba1c:	b2da      	uxtb	r2, r3
 800ba1e:	697b      	ldr	r3, [r7, #20]
 800ba20:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	799b      	ldrb	r3, [r3, #6]
 800ba26:	2b01      	cmp	r3, #1
 800ba28:	d102      	bne.n	800ba30 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800ba2a:	687a      	ldr	r2, [r7, #4]
 800ba2c:	697b      	ldr	r3, [r7, #20]
 800ba2e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	6818      	ldr	r0, [r3, #0]
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	799b      	ldrb	r3, [r3, #6]
 800ba38:	461a      	mov	r2, r3
 800ba3a:	6979      	ldr	r1, [r7, #20]
 800ba3c:	f003 fb92 	bl	800f164 <USB_EPStartXfer>

  return HAL_OK;
 800ba40:	2300      	movs	r3, #0
}
 800ba42:	4618      	mov	r0, r3
 800ba44:	3718      	adds	r7, #24
 800ba46:	46bd      	mov	sp, r7
 800ba48:	bd80      	pop	{r7, pc}

0800ba4a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ba4a:	b580      	push	{r7, lr}
 800ba4c:	b084      	sub	sp, #16
 800ba4e:	af00      	add	r7, sp, #0
 800ba50:	6078      	str	r0, [r7, #4]
 800ba52:	460b      	mov	r3, r1
 800ba54:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800ba56:	78fb      	ldrb	r3, [r7, #3]
 800ba58:	f003 030f 	and.w	r3, r3, #15
 800ba5c:	687a      	ldr	r2, [r7, #4]
 800ba5e:	7912      	ldrb	r2, [r2, #4]
 800ba60:	4293      	cmp	r3, r2
 800ba62:	d901      	bls.n	800ba68 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800ba64:	2301      	movs	r3, #1
 800ba66:	e04f      	b.n	800bb08 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800ba68:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	da0f      	bge.n	800ba90 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ba70:	78fb      	ldrb	r3, [r7, #3]
 800ba72:	f003 020f 	and.w	r2, r3, #15
 800ba76:	4613      	mov	r3, r2
 800ba78:	00db      	lsls	r3, r3, #3
 800ba7a:	4413      	add	r3, r2
 800ba7c:	009b      	lsls	r3, r3, #2
 800ba7e:	3310      	adds	r3, #16
 800ba80:	687a      	ldr	r2, [r7, #4]
 800ba82:	4413      	add	r3, r2
 800ba84:	3304      	adds	r3, #4
 800ba86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	2201      	movs	r2, #1
 800ba8c:	705a      	strb	r2, [r3, #1]
 800ba8e:	e00d      	b.n	800baac <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800ba90:	78fa      	ldrb	r2, [r7, #3]
 800ba92:	4613      	mov	r3, r2
 800ba94:	00db      	lsls	r3, r3, #3
 800ba96:	4413      	add	r3, r2
 800ba98:	009b      	lsls	r3, r3, #2
 800ba9a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800ba9e:	687a      	ldr	r2, [r7, #4]
 800baa0:	4413      	add	r3, r2
 800baa2:	3304      	adds	r3, #4
 800baa4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	2200      	movs	r2, #0
 800baaa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	2201      	movs	r2, #1
 800bab0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800bab2:	78fb      	ldrb	r3, [r7, #3]
 800bab4:	f003 030f 	and.w	r3, r3, #15
 800bab8:	b2da      	uxtb	r2, r3
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800bac4:	2b01      	cmp	r3, #1
 800bac6:	d101      	bne.n	800bacc <HAL_PCD_EP_SetStall+0x82>
 800bac8:	2302      	movs	r3, #2
 800baca:	e01d      	b.n	800bb08 <HAL_PCD_EP_SetStall+0xbe>
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	2201      	movs	r2, #1
 800bad0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	68f9      	ldr	r1, [r7, #12]
 800bada:	4618      	mov	r0, r3
 800badc:	f003 ff20 	bl	800f920 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800bae0:	78fb      	ldrb	r3, [r7, #3]
 800bae2:	f003 030f 	and.w	r3, r3, #15
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d109      	bne.n	800bafe <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	6818      	ldr	r0, [r3, #0]
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	7999      	ldrb	r1, [r3, #6]
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800baf8:	461a      	mov	r2, r3
 800bafa:	f004 f911 	bl	800fd20 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	2200      	movs	r2, #0
 800bb02:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800bb06:	2300      	movs	r3, #0
}
 800bb08:	4618      	mov	r0, r3
 800bb0a:	3710      	adds	r7, #16
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	bd80      	pop	{r7, pc}

0800bb10 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800bb10:	b580      	push	{r7, lr}
 800bb12:	b084      	sub	sp, #16
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	6078      	str	r0, [r7, #4]
 800bb18:	460b      	mov	r3, r1
 800bb1a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800bb1c:	78fb      	ldrb	r3, [r7, #3]
 800bb1e:	f003 030f 	and.w	r3, r3, #15
 800bb22:	687a      	ldr	r2, [r7, #4]
 800bb24:	7912      	ldrb	r2, [r2, #4]
 800bb26:	4293      	cmp	r3, r2
 800bb28:	d901      	bls.n	800bb2e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800bb2a:	2301      	movs	r3, #1
 800bb2c:	e042      	b.n	800bbb4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800bb2e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	da0f      	bge.n	800bb56 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800bb36:	78fb      	ldrb	r3, [r7, #3]
 800bb38:	f003 020f 	and.w	r2, r3, #15
 800bb3c:	4613      	mov	r3, r2
 800bb3e:	00db      	lsls	r3, r3, #3
 800bb40:	4413      	add	r3, r2
 800bb42:	009b      	lsls	r3, r3, #2
 800bb44:	3310      	adds	r3, #16
 800bb46:	687a      	ldr	r2, [r7, #4]
 800bb48:	4413      	add	r3, r2
 800bb4a:	3304      	adds	r3, #4
 800bb4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	2201      	movs	r2, #1
 800bb52:	705a      	strb	r2, [r3, #1]
 800bb54:	e00f      	b.n	800bb76 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800bb56:	78fb      	ldrb	r3, [r7, #3]
 800bb58:	f003 020f 	and.w	r2, r3, #15
 800bb5c:	4613      	mov	r3, r2
 800bb5e:	00db      	lsls	r3, r3, #3
 800bb60:	4413      	add	r3, r2
 800bb62:	009b      	lsls	r3, r3, #2
 800bb64:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800bb68:	687a      	ldr	r2, [r7, #4]
 800bb6a:	4413      	add	r3, r2
 800bb6c:	3304      	adds	r3, #4
 800bb6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	2200      	movs	r2, #0
 800bb74:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	2200      	movs	r2, #0
 800bb7a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800bb7c:	78fb      	ldrb	r3, [r7, #3]
 800bb7e:	f003 030f 	and.w	r3, r3, #15
 800bb82:	b2da      	uxtb	r2, r3
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800bb8e:	2b01      	cmp	r3, #1
 800bb90:	d101      	bne.n	800bb96 <HAL_PCD_EP_ClrStall+0x86>
 800bb92:	2302      	movs	r3, #2
 800bb94:	e00e      	b.n	800bbb4 <HAL_PCD_EP_ClrStall+0xa4>
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	2201      	movs	r2, #1
 800bb9a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	68f9      	ldr	r1, [r7, #12]
 800bba4:	4618      	mov	r0, r3
 800bba6:	f003 ff29 	bl	800f9fc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	2200      	movs	r2, #0
 800bbae:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800bbb2:	2300      	movs	r3, #0
}
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	3710      	adds	r7, #16
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	bd80      	pop	{r7, pc}

0800bbbc <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800bbbc:	b580      	push	{r7, lr}
 800bbbe:	b084      	sub	sp, #16
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]
 800bbc4:	460b      	mov	r3, r1
 800bbc6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800bbc8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	da0c      	bge.n	800bbea <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800bbd0:	78fb      	ldrb	r3, [r7, #3]
 800bbd2:	f003 020f 	and.w	r2, r3, #15
 800bbd6:	4613      	mov	r3, r2
 800bbd8:	00db      	lsls	r3, r3, #3
 800bbda:	4413      	add	r3, r2
 800bbdc:	009b      	lsls	r3, r3, #2
 800bbde:	3310      	adds	r3, #16
 800bbe0:	687a      	ldr	r2, [r7, #4]
 800bbe2:	4413      	add	r3, r2
 800bbe4:	3304      	adds	r3, #4
 800bbe6:	60fb      	str	r3, [r7, #12]
 800bbe8:	e00c      	b.n	800bc04 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800bbea:	78fb      	ldrb	r3, [r7, #3]
 800bbec:	f003 020f 	and.w	r2, r3, #15
 800bbf0:	4613      	mov	r3, r2
 800bbf2:	00db      	lsls	r3, r3, #3
 800bbf4:	4413      	add	r3, r2
 800bbf6:	009b      	lsls	r3, r3, #2
 800bbf8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800bbfc:	687a      	ldr	r2, [r7, #4]
 800bbfe:	4413      	add	r3, r2
 800bc00:	3304      	adds	r3, #4
 800bc02:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	68f9      	ldr	r1, [r7, #12]
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	f003 fd48 	bl	800f6a0 <USB_EPStopXfer>
 800bc10:	4603      	mov	r3, r0
 800bc12:	72fb      	strb	r3, [r7, #11]

  return ret;
 800bc14:	7afb      	ldrb	r3, [r7, #11]
}
 800bc16:	4618      	mov	r0, r3
 800bc18:	3710      	adds	r7, #16
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	bd80      	pop	{r7, pc}

0800bc1e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800bc1e:	b580      	push	{r7, lr}
 800bc20:	b08a      	sub	sp, #40	@ 0x28
 800bc22:	af02      	add	r7, sp, #8
 800bc24:	6078      	str	r0, [r7, #4]
 800bc26:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc2e:	697b      	ldr	r3, [r7, #20]
 800bc30:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800bc32:	683a      	ldr	r2, [r7, #0]
 800bc34:	4613      	mov	r3, r2
 800bc36:	00db      	lsls	r3, r3, #3
 800bc38:	4413      	add	r3, r2
 800bc3a:	009b      	lsls	r3, r3, #2
 800bc3c:	3310      	adds	r3, #16
 800bc3e:	687a      	ldr	r2, [r7, #4]
 800bc40:	4413      	add	r3, r2
 800bc42:	3304      	adds	r3, #4
 800bc44:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	695a      	ldr	r2, [r3, #20]
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	691b      	ldr	r3, [r3, #16]
 800bc4e:	429a      	cmp	r2, r3
 800bc50:	d901      	bls.n	800bc56 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800bc52:	2301      	movs	r3, #1
 800bc54:	e06b      	b.n	800bd2e <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	691a      	ldr	r2, [r3, #16]
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	695b      	ldr	r3, [r3, #20]
 800bc5e:	1ad3      	subs	r3, r2, r3
 800bc60:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	689b      	ldr	r3, [r3, #8]
 800bc66:	69fa      	ldr	r2, [r7, #28]
 800bc68:	429a      	cmp	r2, r3
 800bc6a:	d902      	bls.n	800bc72 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	689b      	ldr	r3, [r3, #8]
 800bc70:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800bc72:	69fb      	ldr	r3, [r7, #28]
 800bc74:	3303      	adds	r3, #3
 800bc76:	089b      	lsrs	r3, r3, #2
 800bc78:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800bc7a:	e02a      	b.n	800bcd2 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	691a      	ldr	r2, [r3, #16]
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	695b      	ldr	r3, [r3, #20]
 800bc84:	1ad3      	subs	r3, r2, r3
 800bc86:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	689b      	ldr	r3, [r3, #8]
 800bc8c:	69fa      	ldr	r2, [r7, #28]
 800bc8e:	429a      	cmp	r2, r3
 800bc90:	d902      	bls.n	800bc98 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	689b      	ldr	r3, [r3, #8]
 800bc96:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800bc98:	69fb      	ldr	r3, [r7, #28]
 800bc9a:	3303      	adds	r3, #3
 800bc9c:	089b      	lsrs	r3, r3, #2
 800bc9e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	68d9      	ldr	r1, [r3, #12]
 800bca4:	683b      	ldr	r3, [r7, #0]
 800bca6:	b2da      	uxtb	r2, r3
 800bca8:	69fb      	ldr	r3, [r7, #28]
 800bcaa:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800bcb0:	9300      	str	r3, [sp, #0]
 800bcb2:	4603      	mov	r3, r0
 800bcb4:	6978      	ldr	r0, [r7, #20]
 800bcb6:	f003 fd9d 	bl	800f7f4 <USB_WritePacket>

    ep->xfer_buff  += len;
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	68da      	ldr	r2, [r3, #12]
 800bcbe:	69fb      	ldr	r3, [r7, #28]
 800bcc0:	441a      	add	r2, r3
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	695a      	ldr	r2, [r3, #20]
 800bcca:	69fb      	ldr	r3, [r7, #28]
 800bccc:	441a      	add	r2, r3
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800bcd2:	683b      	ldr	r3, [r7, #0]
 800bcd4:	015a      	lsls	r2, r3, #5
 800bcd6:	693b      	ldr	r3, [r7, #16]
 800bcd8:	4413      	add	r3, r2
 800bcda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bcde:	699b      	ldr	r3, [r3, #24]
 800bce0:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800bce2:	69ba      	ldr	r2, [r7, #24]
 800bce4:	429a      	cmp	r2, r3
 800bce6:	d809      	bhi.n	800bcfc <PCD_WriteEmptyTxFifo+0xde>
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	695a      	ldr	r2, [r3, #20]
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800bcf0:	429a      	cmp	r2, r3
 800bcf2:	d203      	bcs.n	800bcfc <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	691b      	ldr	r3, [r3, #16]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d1bf      	bne.n	800bc7c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	691a      	ldr	r2, [r3, #16]
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	695b      	ldr	r3, [r3, #20]
 800bd04:	429a      	cmp	r2, r3
 800bd06:	d811      	bhi.n	800bd2c <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800bd08:	683b      	ldr	r3, [r7, #0]
 800bd0a:	f003 030f 	and.w	r3, r3, #15
 800bd0e:	2201      	movs	r2, #1
 800bd10:	fa02 f303 	lsl.w	r3, r2, r3
 800bd14:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800bd16:	693b      	ldr	r3, [r7, #16]
 800bd18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bd1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bd1e:	68bb      	ldr	r3, [r7, #8]
 800bd20:	43db      	mvns	r3, r3
 800bd22:	6939      	ldr	r1, [r7, #16]
 800bd24:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800bd28:	4013      	ands	r3, r2
 800bd2a:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800bd2c:	2300      	movs	r3, #0
}
 800bd2e:	4618      	mov	r0, r3
 800bd30:	3720      	adds	r7, #32
 800bd32:	46bd      	mov	sp, r7
 800bd34:	bd80      	pop	{r7, pc}
	...

0800bd38 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800bd38:	b580      	push	{r7, lr}
 800bd3a:	b088      	sub	sp, #32
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	6078      	str	r0, [r7, #4]
 800bd40:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd48:	69fb      	ldr	r3, [r7, #28]
 800bd4a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800bd4c:	69fb      	ldr	r3, [r7, #28]
 800bd4e:	333c      	adds	r3, #60	@ 0x3c
 800bd50:	3304      	adds	r3, #4
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800bd56:	683b      	ldr	r3, [r7, #0]
 800bd58:	015a      	lsls	r2, r3, #5
 800bd5a:	69bb      	ldr	r3, [r7, #24]
 800bd5c:	4413      	add	r3, r2
 800bd5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bd62:	689b      	ldr	r3, [r3, #8]
 800bd64:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	799b      	ldrb	r3, [r3, #6]
 800bd6a:	2b01      	cmp	r3, #1
 800bd6c:	d17b      	bne.n	800be66 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800bd6e:	693b      	ldr	r3, [r7, #16]
 800bd70:	f003 0308 	and.w	r3, r3, #8
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d015      	beq.n	800bda4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bd78:	697b      	ldr	r3, [r7, #20]
 800bd7a:	4a61      	ldr	r2, [pc, #388]	@ (800bf00 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800bd7c:	4293      	cmp	r3, r2
 800bd7e:	f240 80b9 	bls.w	800bef4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800bd82:	693b      	ldr	r3, [r7, #16]
 800bd84:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	f000 80b3 	beq.w	800bef4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800bd8e:	683b      	ldr	r3, [r7, #0]
 800bd90:	015a      	lsls	r2, r3, #5
 800bd92:	69bb      	ldr	r3, [r7, #24]
 800bd94:	4413      	add	r3, r2
 800bd96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bd9a:	461a      	mov	r2, r3
 800bd9c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bda0:	6093      	str	r3, [r2, #8]
 800bda2:	e0a7      	b.n	800bef4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800bda4:	693b      	ldr	r3, [r7, #16]
 800bda6:	f003 0320 	and.w	r3, r3, #32
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d009      	beq.n	800bdc2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800bdae:	683b      	ldr	r3, [r7, #0]
 800bdb0:	015a      	lsls	r2, r3, #5
 800bdb2:	69bb      	ldr	r3, [r7, #24]
 800bdb4:	4413      	add	r3, r2
 800bdb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bdba:	461a      	mov	r2, r3
 800bdbc:	2320      	movs	r3, #32
 800bdbe:	6093      	str	r3, [r2, #8]
 800bdc0:	e098      	b.n	800bef4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800bdc2:	693b      	ldr	r3, [r7, #16]
 800bdc4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	f040 8093 	bne.w	800bef4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bdce:	697b      	ldr	r3, [r7, #20]
 800bdd0:	4a4b      	ldr	r2, [pc, #300]	@ (800bf00 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800bdd2:	4293      	cmp	r3, r2
 800bdd4:	d90f      	bls.n	800bdf6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800bdd6:	693b      	ldr	r3, [r7, #16]
 800bdd8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d00a      	beq.n	800bdf6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800bde0:	683b      	ldr	r3, [r7, #0]
 800bde2:	015a      	lsls	r2, r3, #5
 800bde4:	69bb      	ldr	r3, [r7, #24]
 800bde6:	4413      	add	r3, r2
 800bde8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bdec:	461a      	mov	r2, r3
 800bdee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bdf2:	6093      	str	r3, [r2, #8]
 800bdf4:	e07e      	b.n	800bef4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800bdf6:	683a      	ldr	r2, [r7, #0]
 800bdf8:	4613      	mov	r3, r2
 800bdfa:	00db      	lsls	r3, r3, #3
 800bdfc:	4413      	add	r3, r2
 800bdfe:	009b      	lsls	r3, r3, #2
 800be00:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800be04:	687a      	ldr	r2, [r7, #4]
 800be06:	4413      	add	r3, r2
 800be08:	3304      	adds	r3, #4
 800be0a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	6a1a      	ldr	r2, [r3, #32]
 800be10:	683b      	ldr	r3, [r7, #0]
 800be12:	0159      	lsls	r1, r3, #5
 800be14:	69bb      	ldr	r3, [r7, #24]
 800be16:	440b      	add	r3, r1
 800be18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800be1c:	691b      	ldr	r3, [r3, #16]
 800be1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800be22:	1ad2      	subs	r2, r2, r3
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800be28:	683b      	ldr	r3, [r7, #0]
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d114      	bne.n	800be58 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	691b      	ldr	r3, [r3, #16]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d109      	bne.n	800be4a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	6818      	ldr	r0, [r3, #0]
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800be40:	461a      	mov	r2, r3
 800be42:	2101      	movs	r1, #1
 800be44:	f003 ff6c 	bl	800fd20 <USB_EP0_OutStart>
 800be48:	e006      	b.n	800be58 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	68da      	ldr	r2, [r3, #12]
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	695b      	ldr	r3, [r3, #20]
 800be52:	441a      	add	r2, r3
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800be58:	683b      	ldr	r3, [r7, #0]
 800be5a:	b2db      	uxtb	r3, r3
 800be5c:	4619      	mov	r1, r3
 800be5e:	6878      	ldr	r0, [r7, #4]
 800be60:	f006 fa98 	bl	8012394 <HAL_PCD_DataOutStageCallback>
 800be64:	e046      	b.n	800bef4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800be66:	697b      	ldr	r3, [r7, #20]
 800be68:	4a26      	ldr	r2, [pc, #152]	@ (800bf04 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800be6a:	4293      	cmp	r3, r2
 800be6c:	d124      	bne.n	800beb8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800be6e:	693b      	ldr	r3, [r7, #16]
 800be70:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800be74:	2b00      	cmp	r3, #0
 800be76:	d00a      	beq.n	800be8e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800be78:	683b      	ldr	r3, [r7, #0]
 800be7a:	015a      	lsls	r2, r3, #5
 800be7c:	69bb      	ldr	r3, [r7, #24]
 800be7e:	4413      	add	r3, r2
 800be80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800be84:	461a      	mov	r2, r3
 800be86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800be8a:	6093      	str	r3, [r2, #8]
 800be8c:	e032      	b.n	800bef4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800be8e:	693b      	ldr	r3, [r7, #16]
 800be90:	f003 0320 	and.w	r3, r3, #32
 800be94:	2b00      	cmp	r3, #0
 800be96:	d008      	beq.n	800beaa <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800be98:	683b      	ldr	r3, [r7, #0]
 800be9a:	015a      	lsls	r2, r3, #5
 800be9c:	69bb      	ldr	r3, [r7, #24]
 800be9e:	4413      	add	r3, r2
 800bea0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bea4:	461a      	mov	r2, r3
 800bea6:	2320      	movs	r3, #32
 800bea8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800beaa:	683b      	ldr	r3, [r7, #0]
 800beac:	b2db      	uxtb	r3, r3
 800beae:	4619      	mov	r1, r3
 800beb0:	6878      	ldr	r0, [r7, #4]
 800beb2:	f006 fa6f 	bl	8012394 <HAL_PCD_DataOutStageCallback>
 800beb6:	e01d      	b.n	800bef4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800beb8:	683b      	ldr	r3, [r7, #0]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d114      	bne.n	800bee8 <PCD_EP_OutXfrComplete_int+0x1b0>
 800bebe:	6879      	ldr	r1, [r7, #4]
 800bec0:	683a      	ldr	r2, [r7, #0]
 800bec2:	4613      	mov	r3, r2
 800bec4:	00db      	lsls	r3, r3, #3
 800bec6:	4413      	add	r3, r2
 800bec8:	009b      	lsls	r3, r3, #2
 800beca:	440b      	add	r3, r1
 800becc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d108      	bne.n	800bee8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	6818      	ldr	r0, [r3, #0]
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800bee0:	461a      	mov	r2, r3
 800bee2:	2100      	movs	r1, #0
 800bee4:	f003 ff1c 	bl	800fd20 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800bee8:	683b      	ldr	r3, [r7, #0]
 800beea:	b2db      	uxtb	r3, r3
 800beec:	4619      	mov	r1, r3
 800beee:	6878      	ldr	r0, [r7, #4]
 800bef0:	f006 fa50 	bl	8012394 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800bef4:	2300      	movs	r3, #0
}
 800bef6:	4618      	mov	r0, r3
 800bef8:	3720      	adds	r7, #32
 800befa:	46bd      	mov	sp, r7
 800befc:	bd80      	pop	{r7, pc}
 800befe:	bf00      	nop
 800bf00:	4f54300a 	.word	0x4f54300a
 800bf04:	4f54310a 	.word	0x4f54310a

0800bf08 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b086      	sub	sp, #24
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	6078      	str	r0, [r7, #4]
 800bf10:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf18:	697b      	ldr	r3, [r7, #20]
 800bf1a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800bf1c:	697b      	ldr	r3, [r7, #20]
 800bf1e:	333c      	adds	r3, #60	@ 0x3c
 800bf20:	3304      	adds	r3, #4
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800bf26:	683b      	ldr	r3, [r7, #0]
 800bf28:	015a      	lsls	r2, r3, #5
 800bf2a:	693b      	ldr	r3, [r7, #16]
 800bf2c:	4413      	add	r3, r2
 800bf2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bf32:	689b      	ldr	r3, [r3, #8]
 800bf34:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	4a15      	ldr	r2, [pc, #84]	@ (800bf90 <PCD_EP_OutSetupPacket_int+0x88>)
 800bf3a:	4293      	cmp	r3, r2
 800bf3c:	d90e      	bls.n	800bf5c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800bf3e:	68bb      	ldr	r3, [r7, #8]
 800bf40:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d009      	beq.n	800bf5c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800bf48:	683b      	ldr	r3, [r7, #0]
 800bf4a:	015a      	lsls	r2, r3, #5
 800bf4c:	693b      	ldr	r3, [r7, #16]
 800bf4e:	4413      	add	r3, r2
 800bf50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bf54:	461a      	mov	r2, r3
 800bf56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bf5a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800bf5c:	6878      	ldr	r0, [r7, #4]
 800bf5e:	f006 fa07 	bl	8012370 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	4a0a      	ldr	r2, [pc, #40]	@ (800bf90 <PCD_EP_OutSetupPacket_int+0x88>)
 800bf66:	4293      	cmp	r3, r2
 800bf68:	d90c      	bls.n	800bf84 <PCD_EP_OutSetupPacket_int+0x7c>
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	799b      	ldrb	r3, [r3, #6]
 800bf6e:	2b01      	cmp	r3, #1
 800bf70:	d108      	bne.n	800bf84 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	6818      	ldr	r0, [r3, #0]
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800bf7c:	461a      	mov	r2, r3
 800bf7e:	2101      	movs	r1, #1
 800bf80:	f003 fece 	bl	800fd20 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800bf84:	2300      	movs	r3, #0
}
 800bf86:	4618      	mov	r0, r3
 800bf88:	3718      	adds	r7, #24
 800bf8a:	46bd      	mov	sp, r7
 800bf8c:	bd80      	pop	{r7, pc}
 800bf8e:	bf00      	nop
 800bf90:	4f54300a 	.word	0x4f54300a

0800bf94 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800bf94:	b480      	push	{r7}
 800bf96:	b085      	sub	sp, #20
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	6078      	str	r0, [r7, #4]
 800bf9c:	460b      	mov	r3, r1
 800bf9e:	70fb      	strb	r3, [r7, #3]
 800bfa0:	4613      	mov	r3, r2
 800bfa2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bfaa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800bfac:	78fb      	ldrb	r3, [r7, #3]
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d107      	bne.n	800bfc2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800bfb2:	883b      	ldrh	r3, [r7, #0]
 800bfb4:	0419      	lsls	r1, r3, #16
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	68ba      	ldr	r2, [r7, #8]
 800bfbc:	430a      	orrs	r2, r1
 800bfbe:	629a      	str	r2, [r3, #40]	@ 0x28
 800bfc0:	e028      	b.n	800c014 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bfc8:	0c1b      	lsrs	r3, r3, #16
 800bfca:	68ba      	ldr	r2, [r7, #8]
 800bfcc:	4413      	add	r3, r2
 800bfce:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800bfd0:	2300      	movs	r3, #0
 800bfd2:	73fb      	strb	r3, [r7, #15]
 800bfd4:	e00d      	b.n	800bff2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	681a      	ldr	r2, [r3, #0]
 800bfda:	7bfb      	ldrb	r3, [r7, #15]
 800bfdc:	3340      	adds	r3, #64	@ 0x40
 800bfde:	009b      	lsls	r3, r3, #2
 800bfe0:	4413      	add	r3, r2
 800bfe2:	685b      	ldr	r3, [r3, #4]
 800bfe4:	0c1b      	lsrs	r3, r3, #16
 800bfe6:	68ba      	ldr	r2, [r7, #8]
 800bfe8:	4413      	add	r3, r2
 800bfea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800bfec:	7bfb      	ldrb	r3, [r7, #15]
 800bfee:	3301      	adds	r3, #1
 800bff0:	73fb      	strb	r3, [r7, #15]
 800bff2:	7bfa      	ldrb	r2, [r7, #15]
 800bff4:	78fb      	ldrb	r3, [r7, #3]
 800bff6:	3b01      	subs	r3, #1
 800bff8:	429a      	cmp	r2, r3
 800bffa:	d3ec      	bcc.n	800bfd6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800bffc:	883b      	ldrh	r3, [r7, #0]
 800bffe:	0418      	lsls	r0, r3, #16
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	6819      	ldr	r1, [r3, #0]
 800c004:	78fb      	ldrb	r3, [r7, #3]
 800c006:	3b01      	subs	r3, #1
 800c008:	68ba      	ldr	r2, [r7, #8]
 800c00a:	4302      	orrs	r2, r0
 800c00c:	3340      	adds	r3, #64	@ 0x40
 800c00e:	009b      	lsls	r3, r3, #2
 800c010:	440b      	add	r3, r1
 800c012:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800c014:	2300      	movs	r3, #0
}
 800c016:	4618      	mov	r0, r3
 800c018:	3714      	adds	r7, #20
 800c01a:	46bd      	mov	sp, r7
 800c01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c020:	4770      	bx	lr

0800c022 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800c022:	b480      	push	{r7}
 800c024:	b083      	sub	sp, #12
 800c026:	af00      	add	r7, sp, #0
 800c028:	6078      	str	r0, [r7, #4]
 800c02a:	460b      	mov	r3, r1
 800c02c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	887a      	ldrh	r2, [r7, #2]
 800c034:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800c036:	2300      	movs	r3, #0
}
 800c038:	4618      	mov	r0, r3
 800c03a:	370c      	adds	r7, #12
 800c03c:	46bd      	mov	sp, r7
 800c03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c042:	4770      	bx	lr

0800c044 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800c044:	b480      	push	{r7}
 800c046:	b083      	sub	sp, #12
 800c048:	af00      	add	r7, sp, #0
 800c04a:	6078      	str	r0, [r7, #4]
 800c04c:	460b      	mov	r3, r1
 800c04e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800c050:	bf00      	nop
 800c052:	370c      	adds	r7, #12
 800c054:	46bd      	mov	sp, r7
 800c056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c05a:	4770      	bx	lr

0800c05c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c05c:	b580      	push	{r7, lr}
 800c05e:	b086      	sub	sp, #24
 800c060:	af00      	add	r7, sp, #0
 800c062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	2b00      	cmp	r3, #0
 800c068:	d101      	bne.n	800c06e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c06a:	2301      	movs	r3, #1
 800c06c:	e267      	b.n	800c53e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	f003 0301 	and.w	r3, r3, #1
 800c076:	2b00      	cmp	r3, #0
 800c078:	d075      	beq.n	800c166 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800c07a:	4b88      	ldr	r3, [pc, #544]	@ (800c29c <HAL_RCC_OscConfig+0x240>)
 800c07c:	689b      	ldr	r3, [r3, #8]
 800c07e:	f003 030c 	and.w	r3, r3, #12
 800c082:	2b04      	cmp	r3, #4
 800c084:	d00c      	beq.n	800c0a0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c086:	4b85      	ldr	r3, [pc, #532]	@ (800c29c <HAL_RCC_OscConfig+0x240>)
 800c088:	689b      	ldr	r3, [r3, #8]
 800c08a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800c08e:	2b08      	cmp	r3, #8
 800c090:	d112      	bne.n	800c0b8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c092:	4b82      	ldr	r3, [pc, #520]	@ (800c29c <HAL_RCC_OscConfig+0x240>)
 800c094:	685b      	ldr	r3, [r3, #4]
 800c096:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c09a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c09e:	d10b      	bne.n	800c0b8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c0a0:	4b7e      	ldr	r3, [pc, #504]	@ (800c29c <HAL_RCC_OscConfig+0x240>)
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d05b      	beq.n	800c164 <HAL_RCC_OscConfig+0x108>
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	685b      	ldr	r3, [r3, #4]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d157      	bne.n	800c164 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800c0b4:	2301      	movs	r3, #1
 800c0b6:	e242      	b.n	800c53e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	685b      	ldr	r3, [r3, #4]
 800c0bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c0c0:	d106      	bne.n	800c0d0 <HAL_RCC_OscConfig+0x74>
 800c0c2:	4b76      	ldr	r3, [pc, #472]	@ (800c29c <HAL_RCC_OscConfig+0x240>)
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	4a75      	ldr	r2, [pc, #468]	@ (800c29c <HAL_RCC_OscConfig+0x240>)
 800c0c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c0cc:	6013      	str	r3, [r2, #0]
 800c0ce:	e01d      	b.n	800c10c <HAL_RCC_OscConfig+0xb0>
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	685b      	ldr	r3, [r3, #4]
 800c0d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800c0d8:	d10c      	bne.n	800c0f4 <HAL_RCC_OscConfig+0x98>
 800c0da:	4b70      	ldr	r3, [pc, #448]	@ (800c29c <HAL_RCC_OscConfig+0x240>)
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	4a6f      	ldr	r2, [pc, #444]	@ (800c29c <HAL_RCC_OscConfig+0x240>)
 800c0e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800c0e4:	6013      	str	r3, [r2, #0]
 800c0e6:	4b6d      	ldr	r3, [pc, #436]	@ (800c29c <HAL_RCC_OscConfig+0x240>)
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	4a6c      	ldr	r2, [pc, #432]	@ (800c29c <HAL_RCC_OscConfig+0x240>)
 800c0ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c0f0:	6013      	str	r3, [r2, #0]
 800c0f2:	e00b      	b.n	800c10c <HAL_RCC_OscConfig+0xb0>
 800c0f4:	4b69      	ldr	r3, [pc, #420]	@ (800c29c <HAL_RCC_OscConfig+0x240>)
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	4a68      	ldr	r2, [pc, #416]	@ (800c29c <HAL_RCC_OscConfig+0x240>)
 800c0fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c0fe:	6013      	str	r3, [r2, #0]
 800c100:	4b66      	ldr	r3, [pc, #408]	@ (800c29c <HAL_RCC_OscConfig+0x240>)
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	4a65      	ldr	r2, [pc, #404]	@ (800c29c <HAL_RCC_OscConfig+0x240>)
 800c106:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c10a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	685b      	ldr	r3, [r3, #4]
 800c110:	2b00      	cmp	r3, #0
 800c112:	d013      	beq.n	800c13c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c114:	f7f9 fd14 	bl	8005b40 <HAL_GetTick>
 800c118:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c11a:	e008      	b.n	800c12e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c11c:	f7f9 fd10 	bl	8005b40 <HAL_GetTick>
 800c120:	4602      	mov	r2, r0
 800c122:	693b      	ldr	r3, [r7, #16]
 800c124:	1ad3      	subs	r3, r2, r3
 800c126:	2b64      	cmp	r3, #100	@ 0x64
 800c128:	d901      	bls.n	800c12e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800c12a:	2303      	movs	r3, #3
 800c12c:	e207      	b.n	800c53e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c12e:	4b5b      	ldr	r3, [pc, #364]	@ (800c29c <HAL_RCC_OscConfig+0x240>)
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c136:	2b00      	cmp	r3, #0
 800c138:	d0f0      	beq.n	800c11c <HAL_RCC_OscConfig+0xc0>
 800c13a:	e014      	b.n	800c166 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c13c:	f7f9 fd00 	bl	8005b40 <HAL_GetTick>
 800c140:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c142:	e008      	b.n	800c156 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c144:	f7f9 fcfc 	bl	8005b40 <HAL_GetTick>
 800c148:	4602      	mov	r2, r0
 800c14a:	693b      	ldr	r3, [r7, #16]
 800c14c:	1ad3      	subs	r3, r2, r3
 800c14e:	2b64      	cmp	r3, #100	@ 0x64
 800c150:	d901      	bls.n	800c156 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800c152:	2303      	movs	r3, #3
 800c154:	e1f3      	b.n	800c53e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c156:	4b51      	ldr	r3, [pc, #324]	@ (800c29c <HAL_RCC_OscConfig+0x240>)
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d1f0      	bne.n	800c144 <HAL_RCC_OscConfig+0xe8>
 800c162:	e000      	b.n	800c166 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c164:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	f003 0302 	and.w	r3, r3, #2
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d063      	beq.n	800c23a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800c172:	4b4a      	ldr	r3, [pc, #296]	@ (800c29c <HAL_RCC_OscConfig+0x240>)
 800c174:	689b      	ldr	r3, [r3, #8]
 800c176:	f003 030c 	and.w	r3, r3, #12
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d00b      	beq.n	800c196 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c17e:	4b47      	ldr	r3, [pc, #284]	@ (800c29c <HAL_RCC_OscConfig+0x240>)
 800c180:	689b      	ldr	r3, [r3, #8]
 800c182:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800c186:	2b08      	cmp	r3, #8
 800c188:	d11c      	bne.n	800c1c4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c18a:	4b44      	ldr	r3, [pc, #272]	@ (800c29c <HAL_RCC_OscConfig+0x240>)
 800c18c:	685b      	ldr	r3, [r3, #4]
 800c18e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c192:	2b00      	cmp	r3, #0
 800c194:	d116      	bne.n	800c1c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c196:	4b41      	ldr	r3, [pc, #260]	@ (800c29c <HAL_RCC_OscConfig+0x240>)
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	f003 0302 	and.w	r3, r3, #2
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d005      	beq.n	800c1ae <HAL_RCC_OscConfig+0x152>
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	68db      	ldr	r3, [r3, #12]
 800c1a6:	2b01      	cmp	r3, #1
 800c1a8:	d001      	beq.n	800c1ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800c1aa:	2301      	movs	r3, #1
 800c1ac:	e1c7      	b.n	800c53e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c1ae:	4b3b      	ldr	r3, [pc, #236]	@ (800c29c <HAL_RCC_OscConfig+0x240>)
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	691b      	ldr	r3, [r3, #16]
 800c1ba:	00db      	lsls	r3, r3, #3
 800c1bc:	4937      	ldr	r1, [pc, #220]	@ (800c29c <HAL_RCC_OscConfig+0x240>)
 800c1be:	4313      	orrs	r3, r2
 800c1c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c1c2:	e03a      	b.n	800c23a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	68db      	ldr	r3, [r3, #12]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d020      	beq.n	800c20e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c1cc:	4b34      	ldr	r3, [pc, #208]	@ (800c2a0 <HAL_RCC_OscConfig+0x244>)
 800c1ce:	2201      	movs	r2, #1
 800c1d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c1d2:	f7f9 fcb5 	bl	8005b40 <HAL_GetTick>
 800c1d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c1d8:	e008      	b.n	800c1ec <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c1da:	f7f9 fcb1 	bl	8005b40 <HAL_GetTick>
 800c1de:	4602      	mov	r2, r0
 800c1e0:	693b      	ldr	r3, [r7, #16]
 800c1e2:	1ad3      	subs	r3, r2, r3
 800c1e4:	2b02      	cmp	r3, #2
 800c1e6:	d901      	bls.n	800c1ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800c1e8:	2303      	movs	r3, #3
 800c1ea:	e1a8      	b.n	800c53e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c1ec:	4b2b      	ldr	r3, [pc, #172]	@ (800c29c <HAL_RCC_OscConfig+0x240>)
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	f003 0302 	and.w	r3, r3, #2
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d0f0      	beq.n	800c1da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c1f8:	4b28      	ldr	r3, [pc, #160]	@ (800c29c <HAL_RCC_OscConfig+0x240>)
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	691b      	ldr	r3, [r3, #16]
 800c204:	00db      	lsls	r3, r3, #3
 800c206:	4925      	ldr	r1, [pc, #148]	@ (800c29c <HAL_RCC_OscConfig+0x240>)
 800c208:	4313      	orrs	r3, r2
 800c20a:	600b      	str	r3, [r1, #0]
 800c20c:	e015      	b.n	800c23a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c20e:	4b24      	ldr	r3, [pc, #144]	@ (800c2a0 <HAL_RCC_OscConfig+0x244>)
 800c210:	2200      	movs	r2, #0
 800c212:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c214:	f7f9 fc94 	bl	8005b40 <HAL_GetTick>
 800c218:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c21a:	e008      	b.n	800c22e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c21c:	f7f9 fc90 	bl	8005b40 <HAL_GetTick>
 800c220:	4602      	mov	r2, r0
 800c222:	693b      	ldr	r3, [r7, #16]
 800c224:	1ad3      	subs	r3, r2, r3
 800c226:	2b02      	cmp	r3, #2
 800c228:	d901      	bls.n	800c22e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800c22a:	2303      	movs	r3, #3
 800c22c:	e187      	b.n	800c53e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c22e:	4b1b      	ldr	r3, [pc, #108]	@ (800c29c <HAL_RCC_OscConfig+0x240>)
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	f003 0302 	and.w	r3, r3, #2
 800c236:	2b00      	cmp	r3, #0
 800c238:	d1f0      	bne.n	800c21c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	f003 0308 	and.w	r3, r3, #8
 800c242:	2b00      	cmp	r3, #0
 800c244:	d036      	beq.n	800c2b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	695b      	ldr	r3, [r3, #20]
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d016      	beq.n	800c27c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c24e:	4b15      	ldr	r3, [pc, #84]	@ (800c2a4 <HAL_RCC_OscConfig+0x248>)
 800c250:	2201      	movs	r2, #1
 800c252:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c254:	f7f9 fc74 	bl	8005b40 <HAL_GetTick>
 800c258:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c25a:	e008      	b.n	800c26e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c25c:	f7f9 fc70 	bl	8005b40 <HAL_GetTick>
 800c260:	4602      	mov	r2, r0
 800c262:	693b      	ldr	r3, [r7, #16]
 800c264:	1ad3      	subs	r3, r2, r3
 800c266:	2b02      	cmp	r3, #2
 800c268:	d901      	bls.n	800c26e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800c26a:	2303      	movs	r3, #3
 800c26c:	e167      	b.n	800c53e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c26e:	4b0b      	ldr	r3, [pc, #44]	@ (800c29c <HAL_RCC_OscConfig+0x240>)
 800c270:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c272:	f003 0302 	and.w	r3, r3, #2
 800c276:	2b00      	cmp	r3, #0
 800c278:	d0f0      	beq.n	800c25c <HAL_RCC_OscConfig+0x200>
 800c27a:	e01b      	b.n	800c2b4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c27c:	4b09      	ldr	r3, [pc, #36]	@ (800c2a4 <HAL_RCC_OscConfig+0x248>)
 800c27e:	2200      	movs	r2, #0
 800c280:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c282:	f7f9 fc5d 	bl	8005b40 <HAL_GetTick>
 800c286:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c288:	e00e      	b.n	800c2a8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c28a:	f7f9 fc59 	bl	8005b40 <HAL_GetTick>
 800c28e:	4602      	mov	r2, r0
 800c290:	693b      	ldr	r3, [r7, #16]
 800c292:	1ad3      	subs	r3, r2, r3
 800c294:	2b02      	cmp	r3, #2
 800c296:	d907      	bls.n	800c2a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800c298:	2303      	movs	r3, #3
 800c29a:	e150      	b.n	800c53e <HAL_RCC_OscConfig+0x4e2>
 800c29c:	40023800 	.word	0x40023800
 800c2a0:	42470000 	.word	0x42470000
 800c2a4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c2a8:	4b88      	ldr	r3, [pc, #544]	@ (800c4cc <HAL_RCC_OscConfig+0x470>)
 800c2aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c2ac:	f003 0302 	and.w	r3, r3, #2
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d1ea      	bne.n	800c28a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	f003 0304 	and.w	r3, r3, #4
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	f000 8097 	beq.w	800c3f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c2c6:	4b81      	ldr	r3, [pc, #516]	@ (800c4cc <HAL_RCC_OscConfig+0x470>)
 800c2c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c2ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d10f      	bne.n	800c2f2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	60bb      	str	r3, [r7, #8]
 800c2d6:	4b7d      	ldr	r3, [pc, #500]	@ (800c4cc <HAL_RCC_OscConfig+0x470>)
 800c2d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c2da:	4a7c      	ldr	r2, [pc, #496]	@ (800c4cc <HAL_RCC_OscConfig+0x470>)
 800c2dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c2e0:	6413      	str	r3, [r2, #64]	@ 0x40
 800c2e2:	4b7a      	ldr	r3, [pc, #488]	@ (800c4cc <HAL_RCC_OscConfig+0x470>)
 800c2e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c2e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c2ea:	60bb      	str	r3, [r7, #8]
 800c2ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c2ee:	2301      	movs	r3, #1
 800c2f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c2f2:	4b77      	ldr	r3, [pc, #476]	@ (800c4d0 <HAL_RCC_OscConfig+0x474>)
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d118      	bne.n	800c330 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800c2fe:	4b74      	ldr	r3, [pc, #464]	@ (800c4d0 <HAL_RCC_OscConfig+0x474>)
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	4a73      	ldr	r2, [pc, #460]	@ (800c4d0 <HAL_RCC_OscConfig+0x474>)
 800c304:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c308:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c30a:	f7f9 fc19 	bl	8005b40 <HAL_GetTick>
 800c30e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c310:	e008      	b.n	800c324 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c312:	f7f9 fc15 	bl	8005b40 <HAL_GetTick>
 800c316:	4602      	mov	r2, r0
 800c318:	693b      	ldr	r3, [r7, #16]
 800c31a:	1ad3      	subs	r3, r2, r3
 800c31c:	2b02      	cmp	r3, #2
 800c31e:	d901      	bls.n	800c324 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800c320:	2303      	movs	r3, #3
 800c322:	e10c      	b.n	800c53e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c324:	4b6a      	ldr	r3, [pc, #424]	@ (800c4d0 <HAL_RCC_OscConfig+0x474>)
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d0f0      	beq.n	800c312 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	689b      	ldr	r3, [r3, #8]
 800c334:	2b01      	cmp	r3, #1
 800c336:	d106      	bne.n	800c346 <HAL_RCC_OscConfig+0x2ea>
 800c338:	4b64      	ldr	r3, [pc, #400]	@ (800c4cc <HAL_RCC_OscConfig+0x470>)
 800c33a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c33c:	4a63      	ldr	r2, [pc, #396]	@ (800c4cc <HAL_RCC_OscConfig+0x470>)
 800c33e:	f043 0301 	orr.w	r3, r3, #1
 800c342:	6713      	str	r3, [r2, #112]	@ 0x70
 800c344:	e01c      	b.n	800c380 <HAL_RCC_OscConfig+0x324>
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	689b      	ldr	r3, [r3, #8]
 800c34a:	2b05      	cmp	r3, #5
 800c34c:	d10c      	bne.n	800c368 <HAL_RCC_OscConfig+0x30c>
 800c34e:	4b5f      	ldr	r3, [pc, #380]	@ (800c4cc <HAL_RCC_OscConfig+0x470>)
 800c350:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c352:	4a5e      	ldr	r2, [pc, #376]	@ (800c4cc <HAL_RCC_OscConfig+0x470>)
 800c354:	f043 0304 	orr.w	r3, r3, #4
 800c358:	6713      	str	r3, [r2, #112]	@ 0x70
 800c35a:	4b5c      	ldr	r3, [pc, #368]	@ (800c4cc <HAL_RCC_OscConfig+0x470>)
 800c35c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c35e:	4a5b      	ldr	r2, [pc, #364]	@ (800c4cc <HAL_RCC_OscConfig+0x470>)
 800c360:	f043 0301 	orr.w	r3, r3, #1
 800c364:	6713      	str	r3, [r2, #112]	@ 0x70
 800c366:	e00b      	b.n	800c380 <HAL_RCC_OscConfig+0x324>
 800c368:	4b58      	ldr	r3, [pc, #352]	@ (800c4cc <HAL_RCC_OscConfig+0x470>)
 800c36a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c36c:	4a57      	ldr	r2, [pc, #348]	@ (800c4cc <HAL_RCC_OscConfig+0x470>)
 800c36e:	f023 0301 	bic.w	r3, r3, #1
 800c372:	6713      	str	r3, [r2, #112]	@ 0x70
 800c374:	4b55      	ldr	r3, [pc, #340]	@ (800c4cc <HAL_RCC_OscConfig+0x470>)
 800c376:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c378:	4a54      	ldr	r2, [pc, #336]	@ (800c4cc <HAL_RCC_OscConfig+0x470>)
 800c37a:	f023 0304 	bic.w	r3, r3, #4
 800c37e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	689b      	ldr	r3, [r3, #8]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d015      	beq.n	800c3b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c388:	f7f9 fbda 	bl	8005b40 <HAL_GetTick>
 800c38c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c38e:	e00a      	b.n	800c3a6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c390:	f7f9 fbd6 	bl	8005b40 <HAL_GetTick>
 800c394:	4602      	mov	r2, r0
 800c396:	693b      	ldr	r3, [r7, #16]
 800c398:	1ad3      	subs	r3, r2, r3
 800c39a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c39e:	4293      	cmp	r3, r2
 800c3a0:	d901      	bls.n	800c3a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800c3a2:	2303      	movs	r3, #3
 800c3a4:	e0cb      	b.n	800c53e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c3a6:	4b49      	ldr	r3, [pc, #292]	@ (800c4cc <HAL_RCC_OscConfig+0x470>)
 800c3a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c3aa:	f003 0302 	and.w	r3, r3, #2
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d0ee      	beq.n	800c390 <HAL_RCC_OscConfig+0x334>
 800c3b2:	e014      	b.n	800c3de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c3b4:	f7f9 fbc4 	bl	8005b40 <HAL_GetTick>
 800c3b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c3ba:	e00a      	b.n	800c3d2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c3bc:	f7f9 fbc0 	bl	8005b40 <HAL_GetTick>
 800c3c0:	4602      	mov	r2, r0
 800c3c2:	693b      	ldr	r3, [r7, #16]
 800c3c4:	1ad3      	subs	r3, r2, r3
 800c3c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c3ca:	4293      	cmp	r3, r2
 800c3cc:	d901      	bls.n	800c3d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800c3ce:	2303      	movs	r3, #3
 800c3d0:	e0b5      	b.n	800c53e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c3d2:	4b3e      	ldr	r3, [pc, #248]	@ (800c4cc <HAL_RCC_OscConfig+0x470>)
 800c3d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c3d6:	f003 0302 	and.w	r3, r3, #2
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d1ee      	bne.n	800c3bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800c3de:	7dfb      	ldrb	r3, [r7, #23]
 800c3e0:	2b01      	cmp	r3, #1
 800c3e2:	d105      	bne.n	800c3f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c3e4:	4b39      	ldr	r3, [pc, #228]	@ (800c4cc <HAL_RCC_OscConfig+0x470>)
 800c3e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c3e8:	4a38      	ldr	r2, [pc, #224]	@ (800c4cc <HAL_RCC_OscConfig+0x470>)
 800c3ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c3ee:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	699b      	ldr	r3, [r3, #24]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	f000 80a1 	beq.w	800c53c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800c3fa:	4b34      	ldr	r3, [pc, #208]	@ (800c4cc <HAL_RCC_OscConfig+0x470>)
 800c3fc:	689b      	ldr	r3, [r3, #8]
 800c3fe:	f003 030c 	and.w	r3, r3, #12
 800c402:	2b08      	cmp	r3, #8
 800c404:	d05c      	beq.n	800c4c0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	699b      	ldr	r3, [r3, #24]
 800c40a:	2b02      	cmp	r3, #2
 800c40c:	d141      	bne.n	800c492 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c40e:	4b31      	ldr	r3, [pc, #196]	@ (800c4d4 <HAL_RCC_OscConfig+0x478>)
 800c410:	2200      	movs	r2, #0
 800c412:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c414:	f7f9 fb94 	bl	8005b40 <HAL_GetTick>
 800c418:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c41a:	e008      	b.n	800c42e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c41c:	f7f9 fb90 	bl	8005b40 <HAL_GetTick>
 800c420:	4602      	mov	r2, r0
 800c422:	693b      	ldr	r3, [r7, #16]
 800c424:	1ad3      	subs	r3, r2, r3
 800c426:	2b02      	cmp	r3, #2
 800c428:	d901      	bls.n	800c42e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800c42a:	2303      	movs	r3, #3
 800c42c:	e087      	b.n	800c53e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c42e:	4b27      	ldr	r3, [pc, #156]	@ (800c4cc <HAL_RCC_OscConfig+0x470>)
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c436:	2b00      	cmp	r3, #0
 800c438:	d1f0      	bne.n	800c41c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	69da      	ldr	r2, [r3, #28]
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	6a1b      	ldr	r3, [r3, #32]
 800c442:	431a      	orrs	r2, r3
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c448:	019b      	lsls	r3, r3, #6
 800c44a:	431a      	orrs	r2, r3
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c450:	085b      	lsrs	r3, r3, #1
 800c452:	3b01      	subs	r3, #1
 800c454:	041b      	lsls	r3, r3, #16
 800c456:	431a      	orrs	r2, r3
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c45c:	061b      	lsls	r3, r3, #24
 800c45e:	491b      	ldr	r1, [pc, #108]	@ (800c4cc <HAL_RCC_OscConfig+0x470>)
 800c460:	4313      	orrs	r3, r2
 800c462:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c464:	4b1b      	ldr	r3, [pc, #108]	@ (800c4d4 <HAL_RCC_OscConfig+0x478>)
 800c466:	2201      	movs	r2, #1
 800c468:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c46a:	f7f9 fb69 	bl	8005b40 <HAL_GetTick>
 800c46e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c470:	e008      	b.n	800c484 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c472:	f7f9 fb65 	bl	8005b40 <HAL_GetTick>
 800c476:	4602      	mov	r2, r0
 800c478:	693b      	ldr	r3, [r7, #16]
 800c47a:	1ad3      	subs	r3, r2, r3
 800c47c:	2b02      	cmp	r3, #2
 800c47e:	d901      	bls.n	800c484 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800c480:	2303      	movs	r3, #3
 800c482:	e05c      	b.n	800c53e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c484:	4b11      	ldr	r3, [pc, #68]	@ (800c4cc <HAL_RCC_OscConfig+0x470>)
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d0f0      	beq.n	800c472 <HAL_RCC_OscConfig+0x416>
 800c490:	e054      	b.n	800c53c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c492:	4b10      	ldr	r3, [pc, #64]	@ (800c4d4 <HAL_RCC_OscConfig+0x478>)
 800c494:	2200      	movs	r2, #0
 800c496:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c498:	f7f9 fb52 	bl	8005b40 <HAL_GetTick>
 800c49c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c49e:	e008      	b.n	800c4b2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c4a0:	f7f9 fb4e 	bl	8005b40 <HAL_GetTick>
 800c4a4:	4602      	mov	r2, r0
 800c4a6:	693b      	ldr	r3, [r7, #16]
 800c4a8:	1ad3      	subs	r3, r2, r3
 800c4aa:	2b02      	cmp	r3, #2
 800c4ac:	d901      	bls.n	800c4b2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800c4ae:	2303      	movs	r3, #3
 800c4b0:	e045      	b.n	800c53e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c4b2:	4b06      	ldr	r3, [pc, #24]	@ (800c4cc <HAL_RCC_OscConfig+0x470>)
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d1f0      	bne.n	800c4a0 <HAL_RCC_OscConfig+0x444>
 800c4be:	e03d      	b.n	800c53c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	699b      	ldr	r3, [r3, #24]
 800c4c4:	2b01      	cmp	r3, #1
 800c4c6:	d107      	bne.n	800c4d8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800c4c8:	2301      	movs	r3, #1
 800c4ca:	e038      	b.n	800c53e <HAL_RCC_OscConfig+0x4e2>
 800c4cc:	40023800 	.word	0x40023800
 800c4d0:	40007000 	.word	0x40007000
 800c4d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800c4d8:	4b1b      	ldr	r3, [pc, #108]	@ (800c548 <HAL_RCC_OscConfig+0x4ec>)
 800c4da:	685b      	ldr	r3, [r3, #4]
 800c4dc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	699b      	ldr	r3, [r3, #24]
 800c4e2:	2b01      	cmp	r3, #1
 800c4e4:	d028      	beq.n	800c538 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c4f0:	429a      	cmp	r2, r3
 800c4f2:	d121      	bne.n	800c538 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c4fe:	429a      	cmp	r2, r3
 800c500:	d11a      	bne.n	800c538 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800c502:	68fa      	ldr	r2, [r7, #12]
 800c504:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800c508:	4013      	ands	r3, r2
 800c50a:	687a      	ldr	r2, [r7, #4]
 800c50c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800c50e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800c510:	4293      	cmp	r3, r2
 800c512:	d111      	bne.n	800c538 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c51e:	085b      	lsrs	r3, r3, #1
 800c520:	3b01      	subs	r3, #1
 800c522:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800c524:	429a      	cmp	r2, r3
 800c526:	d107      	bne.n	800c538 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c532:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800c534:	429a      	cmp	r2, r3
 800c536:	d001      	beq.n	800c53c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800c538:	2301      	movs	r3, #1
 800c53a:	e000      	b.n	800c53e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800c53c:	2300      	movs	r3, #0
}
 800c53e:	4618      	mov	r0, r3
 800c540:	3718      	adds	r7, #24
 800c542:	46bd      	mov	sp, r7
 800c544:	bd80      	pop	{r7, pc}
 800c546:	bf00      	nop
 800c548:	40023800 	.word	0x40023800

0800c54c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c54c:	b580      	push	{r7, lr}
 800c54e:	b084      	sub	sp, #16
 800c550:	af00      	add	r7, sp, #0
 800c552:	6078      	str	r0, [r7, #4]
 800c554:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d101      	bne.n	800c560 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c55c:	2301      	movs	r3, #1
 800c55e:	e0cc      	b.n	800c6fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c560:	4b68      	ldr	r3, [pc, #416]	@ (800c704 <HAL_RCC_ClockConfig+0x1b8>)
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	f003 0307 	and.w	r3, r3, #7
 800c568:	683a      	ldr	r2, [r7, #0]
 800c56a:	429a      	cmp	r2, r3
 800c56c:	d90c      	bls.n	800c588 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c56e:	4b65      	ldr	r3, [pc, #404]	@ (800c704 <HAL_RCC_ClockConfig+0x1b8>)
 800c570:	683a      	ldr	r2, [r7, #0]
 800c572:	b2d2      	uxtb	r2, r2
 800c574:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c576:	4b63      	ldr	r3, [pc, #396]	@ (800c704 <HAL_RCC_ClockConfig+0x1b8>)
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	f003 0307 	and.w	r3, r3, #7
 800c57e:	683a      	ldr	r2, [r7, #0]
 800c580:	429a      	cmp	r2, r3
 800c582:	d001      	beq.n	800c588 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800c584:	2301      	movs	r3, #1
 800c586:	e0b8      	b.n	800c6fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	f003 0302 	and.w	r3, r3, #2
 800c590:	2b00      	cmp	r3, #0
 800c592:	d020      	beq.n	800c5d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	f003 0304 	and.w	r3, r3, #4
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d005      	beq.n	800c5ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c5a0:	4b59      	ldr	r3, [pc, #356]	@ (800c708 <HAL_RCC_ClockConfig+0x1bc>)
 800c5a2:	689b      	ldr	r3, [r3, #8]
 800c5a4:	4a58      	ldr	r2, [pc, #352]	@ (800c708 <HAL_RCC_ClockConfig+0x1bc>)
 800c5a6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800c5aa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	f003 0308 	and.w	r3, r3, #8
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d005      	beq.n	800c5c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800c5b8:	4b53      	ldr	r3, [pc, #332]	@ (800c708 <HAL_RCC_ClockConfig+0x1bc>)
 800c5ba:	689b      	ldr	r3, [r3, #8]
 800c5bc:	4a52      	ldr	r2, [pc, #328]	@ (800c708 <HAL_RCC_ClockConfig+0x1bc>)
 800c5be:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800c5c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c5c4:	4b50      	ldr	r3, [pc, #320]	@ (800c708 <HAL_RCC_ClockConfig+0x1bc>)
 800c5c6:	689b      	ldr	r3, [r3, #8]
 800c5c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	689b      	ldr	r3, [r3, #8]
 800c5d0:	494d      	ldr	r1, [pc, #308]	@ (800c708 <HAL_RCC_ClockConfig+0x1bc>)
 800c5d2:	4313      	orrs	r3, r2
 800c5d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	f003 0301 	and.w	r3, r3, #1
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d044      	beq.n	800c66c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	685b      	ldr	r3, [r3, #4]
 800c5e6:	2b01      	cmp	r3, #1
 800c5e8:	d107      	bne.n	800c5fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c5ea:	4b47      	ldr	r3, [pc, #284]	@ (800c708 <HAL_RCC_ClockConfig+0x1bc>)
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d119      	bne.n	800c62a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c5f6:	2301      	movs	r3, #1
 800c5f8:	e07f      	b.n	800c6fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	685b      	ldr	r3, [r3, #4]
 800c5fe:	2b02      	cmp	r3, #2
 800c600:	d003      	beq.n	800c60a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c606:	2b03      	cmp	r3, #3
 800c608:	d107      	bne.n	800c61a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c60a:	4b3f      	ldr	r3, [pc, #252]	@ (800c708 <HAL_RCC_ClockConfig+0x1bc>)
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c612:	2b00      	cmp	r3, #0
 800c614:	d109      	bne.n	800c62a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c616:	2301      	movs	r3, #1
 800c618:	e06f      	b.n	800c6fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c61a:	4b3b      	ldr	r3, [pc, #236]	@ (800c708 <HAL_RCC_ClockConfig+0x1bc>)
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	f003 0302 	and.w	r3, r3, #2
 800c622:	2b00      	cmp	r3, #0
 800c624:	d101      	bne.n	800c62a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c626:	2301      	movs	r3, #1
 800c628:	e067      	b.n	800c6fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c62a:	4b37      	ldr	r3, [pc, #220]	@ (800c708 <HAL_RCC_ClockConfig+0x1bc>)
 800c62c:	689b      	ldr	r3, [r3, #8]
 800c62e:	f023 0203 	bic.w	r2, r3, #3
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	685b      	ldr	r3, [r3, #4]
 800c636:	4934      	ldr	r1, [pc, #208]	@ (800c708 <HAL_RCC_ClockConfig+0x1bc>)
 800c638:	4313      	orrs	r3, r2
 800c63a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800c63c:	f7f9 fa80 	bl	8005b40 <HAL_GetTick>
 800c640:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c642:	e00a      	b.n	800c65a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c644:	f7f9 fa7c 	bl	8005b40 <HAL_GetTick>
 800c648:	4602      	mov	r2, r0
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	1ad3      	subs	r3, r2, r3
 800c64e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c652:	4293      	cmp	r3, r2
 800c654:	d901      	bls.n	800c65a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800c656:	2303      	movs	r3, #3
 800c658:	e04f      	b.n	800c6fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c65a:	4b2b      	ldr	r3, [pc, #172]	@ (800c708 <HAL_RCC_ClockConfig+0x1bc>)
 800c65c:	689b      	ldr	r3, [r3, #8]
 800c65e:	f003 020c 	and.w	r2, r3, #12
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	685b      	ldr	r3, [r3, #4]
 800c666:	009b      	lsls	r3, r3, #2
 800c668:	429a      	cmp	r2, r3
 800c66a:	d1eb      	bne.n	800c644 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800c66c:	4b25      	ldr	r3, [pc, #148]	@ (800c704 <HAL_RCC_ClockConfig+0x1b8>)
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	f003 0307 	and.w	r3, r3, #7
 800c674:	683a      	ldr	r2, [r7, #0]
 800c676:	429a      	cmp	r2, r3
 800c678:	d20c      	bcs.n	800c694 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c67a:	4b22      	ldr	r3, [pc, #136]	@ (800c704 <HAL_RCC_ClockConfig+0x1b8>)
 800c67c:	683a      	ldr	r2, [r7, #0]
 800c67e:	b2d2      	uxtb	r2, r2
 800c680:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c682:	4b20      	ldr	r3, [pc, #128]	@ (800c704 <HAL_RCC_ClockConfig+0x1b8>)
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	f003 0307 	and.w	r3, r3, #7
 800c68a:	683a      	ldr	r2, [r7, #0]
 800c68c:	429a      	cmp	r2, r3
 800c68e:	d001      	beq.n	800c694 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800c690:	2301      	movs	r3, #1
 800c692:	e032      	b.n	800c6fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	f003 0304 	and.w	r3, r3, #4
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d008      	beq.n	800c6b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c6a0:	4b19      	ldr	r3, [pc, #100]	@ (800c708 <HAL_RCC_ClockConfig+0x1bc>)
 800c6a2:	689b      	ldr	r3, [r3, #8]
 800c6a4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	68db      	ldr	r3, [r3, #12]
 800c6ac:	4916      	ldr	r1, [pc, #88]	@ (800c708 <HAL_RCC_ClockConfig+0x1bc>)
 800c6ae:	4313      	orrs	r3, r2
 800c6b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	f003 0308 	and.w	r3, r3, #8
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d009      	beq.n	800c6d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c6be:	4b12      	ldr	r3, [pc, #72]	@ (800c708 <HAL_RCC_ClockConfig+0x1bc>)
 800c6c0:	689b      	ldr	r3, [r3, #8]
 800c6c2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	691b      	ldr	r3, [r3, #16]
 800c6ca:	00db      	lsls	r3, r3, #3
 800c6cc:	490e      	ldr	r1, [pc, #56]	@ (800c708 <HAL_RCC_ClockConfig+0x1bc>)
 800c6ce:	4313      	orrs	r3, r2
 800c6d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800c6d2:	f000 f82d 	bl	800c730 <HAL_RCC_GetSysClockFreq>
 800c6d6:	4602      	mov	r2, r0
 800c6d8:	4b0b      	ldr	r3, [pc, #44]	@ (800c708 <HAL_RCC_ClockConfig+0x1bc>)
 800c6da:	689b      	ldr	r3, [r3, #8]
 800c6dc:	091b      	lsrs	r3, r3, #4
 800c6de:	f003 030f 	and.w	r3, r3, #15
 800c6e2:	490a      	ldr	r1, [pc, #40]	@ (800c70c <HAL_RCC_ClockConfig+0x1c0>)
 800c6e4:	5ccb      	ldrb	r3, [r1, r3]
 800c6e6:	fa22 f303 	lsr.w	r3, r2, r3
 800c6ea:	4a09      	ldr	r2, [pc, #36]	@ (800c710 <HAL_RCC_ClockConfig+0x1c4>)
 800c6ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800c6ee:	4b09      	ldr	r3, [pc, #36]	@ (800c714 <HAL_RCC_ClockConfig+0x1c8>)
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	f7f9 f9e0 	bl	8005ab8 <HAL_InitTick>

  return HAL_OK;
 800c6f8:	2300      	movs	r3, #0
}
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	3710      	adds	r7, #16
 800c6fe:	46bd      	mov	sp, r7
 800c700:	bd80      	pop	{r7, pc}
 800c702:	bf00      	nop
 800c704:	40023c00 	.word	0x40023c00
 800c708:	40023800 	.word	0x40023800
 800c70c:	08014b30 	.word	0x08014b30
 800c710:	20000010 	.word	0x20000010
 800c714:	20000014 	.word	0x20000014

0800c718 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800c718:	b480      	push	{r7}
 800c71a:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 800c71c:	4b03      	ldr	r3, [pc, #12]	@ (800c72c <HAL_RCC_EnableCSS+0x14>)
 800c71e:	2201      	movs	r2, #1
 800c720:	601a      	str	r2, [r3, #0]
}
 800c722:	bf00      	nop
 800c724:	46bd      	mov	sp, r7
 800c726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c72a:	4770      	bx	lr
 800c72c:	4247004c 	.word	0x4247004c

0800c730 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c730:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c734:	b090      	sub	sp, #64	@ 0x40
 800c736:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800c738:	2300      	movs	r3, #0
 800c73a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800c73c:	2300      	movs	r3, #0
 800c73e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800c740:	2300      	movs	r3, #0
 800c742:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800c744:	2300      	movs	r3, #0
 800c746:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c748:	4b59      	ldr	r3, [pc, #356]	@ (800c8b0 <HAL_RCC_GetSysClockFreq+0x180>)
 800c74a:	689b      	ldr	r3, [r3, #8]
 800c74c:	f003 030c 	and.w	r3, r3, #12
 800c750:	2b08      	cmp	r3, #8
 800c752:	d00d      	beq.n	800c770 <HAL_RCC_GetSysClockFreq+0x40>
 800c754:	2b08      	cmp	r3, #8
 800c756:	f200 80a1 	bhi.w	800c89c <HAL_RCC_GetSysClockFreq+0x16c>
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d002      	beq.n	800c764 <HAL_RCC_GetSysClockFreq+0x34>
 800c75e:	2b04      	cmp	r3, #4
 800c760:	d003      	beq.n	800c76a <HAL_RCC_GetSysClockFreq+0x3a>
 800c762:	e09b      	b.n	800c89c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800c764:	4b53      	ldr	r3, [pc, #332]	@ (800c8b4 <HAL_RCC_GetSysClockFreq+0x184>)
 800c766:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800c768:	e09b      	b.n	800c8a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800c76a:	4b53      	ldr	r3, [pc, #332]	@ (800c8b8 <HAL_RCC_GetSysClockFreq+0x188>)
 800c76c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800c76e:	e098      	b.n	800c8a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c770:	4b4f      	ldr	r3, [pc, #316]	@ (800c8b0 <HAL_RCC_GetSysClockFreq+0x180>)
 800c772:	685b      	ldr	r3, [r3, #4]
 800c774:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c778:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800c77a:	4b4d      	ldr	r3, [pc, #308]	@ (800c8b0 <HAL_RCC_GetSysClockFreq+0x180>)
 800c77c:	685b      	ldr	r3, [r3, #4]
 800c77e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c782:	2b00      	cmp	r3, #0
 800c784:	d028      	beq.n	800c7d8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c786:	4b4a      	ldr	r3, [pc, #296]	@ (800c8b0 <HAL_RCC_GetSysClockFreq+0x180>)
 800c788:	685b      	ldr	r3, [r3, #4]
 800c78a:	099b      	lsrs	r3, r3, #6
 800c78c:	2200      	movs	r2, #0
 800c78e:	623b      	str	r3, [r7, #32]
 800c790:	627a      	str	r2, [r7, #36]	@ 0x24
 800c792:	6a3b      	ldr	r3, [r7, #32]
 800c794:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800c798:	2100      	movs	r1, #0
 800c79a:	4b47      	ldr	r3, [pc, #284]	@ (800c8b8 <HAL_RCC_GetSysClockFreq+0x188>)
 800c79c:	fb03 f201 	mul.w	r2, r3, r1
 800c7a0:	2300      	movs	r3, #0
 800c7a2:	fb00 f303 	mul.w	r3, r0, r3
 800c7a6:	4413      	add	r3, r2
 800c7a8:	4a43      	ldr	r2, [pc, #268]	@ (800c8b8 <HAL_RCC_GetSysClockFreq+0x188>)
 800c7aa:	fba0 1202 	umull	r1, r2, r0, r2
 800c7ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c7b0:	460a      	mov	r2, r1
 800c7b2:	62ba      	str	r2, [r7, #40]	@ 0x28
 800c7b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c7b6:	4413      	add	r3, r2
 800c7b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c7ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c7bc:	2200      	movs	r2, #0
 800c7be:	61bb      	str	r3, [r7, #24]
 800c7c0:	61fa      	str	r2, [r7, #28]
 800c7c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c7c6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800c7ca:	f7f4 f957 	bl	8000a7c <__aeabi_uldivmod>
 800c7ce:	4602      	mov	r2, r0
 800c7d0:	460b      	mov	r3, r1
 800c7d2:	4613      	mov	r3, r2
 800c7d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c7d6:	e053      	b.n	800c880 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c7d8:	4b35      	ldr	r3, [pc, #212]	@ (800c8b0 <HAL_RCC_GetSysClockFreq+0x180>)
 800c7da:	685b      	ldr	r3, [r3, #4]
 800c7dc:	099b      	lsrs	r3, r3, #6
 800c7de:	2200      	movs	r2, #0
 800c7e0:	613b      	str	r3, [r7, #16]
 800c7e2:	617a      	str	r2, [r7, #20]
 800c7e4:	693b      	ldr	r3, [r7, #16]
 800c7e6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800c7ea:	f04f 0b00 	mov.w	fp, #0
 800c7ee:	4652      	mov	r2, sl
 800c7f0:	465b      	mov	r3, fp
 800c7f2:	f04f 0000 	mov.w	r0, #0
 800c7f6:	f04f 0100 	mov.w	r1, #0
 800c7fa:	0159      	lsls	r1, r3, #5
 800c7fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c800:	0150      	lsls	r0, r2, #5
 800c802:	4602      	mov	r2, r0
 800c804:	460b      	mov	r3, r1
 800c806:	ebb2 080a 	subs.w	r8, r2, sl
 800c80a:	eb63 090b 	sbc.w	r9, r3, fp
 800c80e:	f04f 0200 	mov.w	r2, #0
 800c812:	f04f 0300 	mov.w	r3, #0
 800c816:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800c81a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800c81e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800c822:	ebb2 0408 	subs.w	r4, r2, r8
 800c826:	eb63 0509 	sbc.w	r5, r3, r9
 800c82a:	f04f 0200 	mov.w	r2, #0
 800c82e:	f04f 0300 	mov.w	r3, #0
 800c832:	00eb      	lsls	r3, r5, #3
 800c834:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c838:	00e2      	lsls	r2, r4, #3
 800c83a:	4614      	mov	r4, r2
 800c83c:	461d      	mov	r5, r3
 800c83e:	eb14 030a 	adds.w	r3, r4, sl
 800c842:	603b      	str	r3, [r7, #0]
 800c844:	eb45 030b 	adc.w	r3, r5, fp
 800c848:	607b      	str	r3, [r7, #4]
 800c84a:	f04f 0200 	mov.w	r2, #0
 800c84e:	f04f 0300 	mov.w	r3, #0
 800c852:	e9d7 4500 	ldrd	r4, r5, [r7]
 800c856:	4629      	mov	r1, r5
 800c858:	028b      	lsls	r3, r1, #10
 800c85a:	4621      	mov	r1, r4
 800c85c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800c860:	4621      	mov	r1, r4
 800c862:	028a      	lsls	r2, r1, #10
 800c864:	4610      	mov	r0, r2
 800c866:	4619      	mov	r1, r3
 800c868:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c86a:	2200      	movs	r2, #0
 800c86c:	60bb      	str	r3, [r7, #8]
 800c86e:	60fa      	str	r2, [r7, #12]
 800c870:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c874:	f7f4 f902 	bl	8000a7c <__aeabi_uldivmod>
 800c878:	4602      	mov	r2, r0
 800c87a:	460b      	mov	r3, r1
 800c87c:	4613      	mov	r3, r2
 800c87e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800c880:	4b0b      	ldr	r3, [pc, #44]	@ (800c8b0 <HAL_RCC_GetSysClockFreq+0x180>)
 800c882:	685b      	ldr	r3, [r3, #4]
 800c884:	0c1b      	lsrs	r3, r3, #16
 800c886:	f003 0303 	and.w	r3, r3, #3
 800c88a:	3301      	adds	r3, #1
 800c88c:	005b      	lsls	r3, r3, #1
 800c88e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800c890:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c894:	fbb2 f3f3 	udiv	r3, r2, r3
 800c898:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800c89a:	e002      	b.n	800c8a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800c89c:	4b05      	ldr	r3, [pc, #20]	@ (800c8b4 <HAL_RCC_GetSysClockFreq+0x184>)
 800c89e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800c8a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c8a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800c8a4:	4618      	mov	r0, r3
 800c8a6:	3740      	adds	r7, #64	@ 0x40
 800c8a8:	46bd      	mov	sp, r7
 800c8aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c8ae:	bf00      	nop
 800c8b0:	40023800 	.word	0x40023800
 800c8b4:	00f42400 	.word	0x00f42400
 800c8b8:	017d7840 	.word	0x017d7840

0800c8bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c8bc:	b480      	push	{r7}
 800c8be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c8c0:	4b03      	ldr	r3, [pc, #12]	@ (800c8d0 <HAL_RCC_GetHCLKFreq+0x14>)
 800c8c2:	681b      	ldr	r3, [r3, #0]
}
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	46bd      	mov	sp, r7
 800c8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8cc:	4770      	bx	lr
 800c8ce:	bf00      	nop
 800c8d0:	20000010 	.word	0x20000010

0800c8d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c8d4:	b580      	push	{r7, lr}
 800c8d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800c8d8:	f7ff fff0 	bl	800c8bc <HAL_RCC_GetHCLKFreq>
 800c8dc:	4602      	mov	r2, r0
 800c8de:	4b05      	ldr	r3, [pc, #20]	@ (800c8f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 800c8e0:	689b      	ldr	r3, [r3, #8]
 800c8e2:	0a9b      	lsrs	r3, r3, #10
 800c8e4:	f003 0307 	and.w	r3, r3, #7
 800c8e8:	4903      	ldr	r1, [pc, #12]	@ (800c8f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c8ea:	5ccb      	ldrb	r3, [r1, r3]
 800c8ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c8f0:	4618      	mov	r0, r3
 800c8f2:	bd80      	pop	{r7, pc}
 800c8f4:	40023800 	.word	0x40023800
 800c8f8:	08014b40 	.word	0x08014b40

0800c8fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c8fc:	b580      	push	{r7, lr}
 800c8fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800c900:	f7ff ffdc 	bl	800c8bc <HAL_RCC_GetHCLKFreq>
 800c904:	4602      	mov	r2, r0
 800c906:	4b05      	ldr	r3, [pc, #20]	@ (800c91c <HAL_RCC_GetPCLK2Freq+0x20>)
 800c908:	689b      	ldr	r3, [r3, #8]
 800c90a:	0b5b      	lsrs	r3, r3, #13
 800c90c:	f003 0307 	and.w	r3, r3, #7
 800c910:	4903      	ldr	r1, [pc, #12]	@ (800c920 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c912:	5ccb      	ldrb	r3, [r1, r3]
 800c914:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c918:	4618      	mov	r0, r3
 800c91a:	bd80      	pop	{r7, pc}
 800c91c:	40023800 	.word	0x40023800
 800c920:	08014b40 	.word	0x08014b40

0800c924 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800c924:	b580      	push	{r7, lr}
 800c926:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 800c928:	4b06      	ldr	r3, [pc, #24]	@ (800c944 <HAL_RCC_NMI_IRQHandler+0x20>)
 800c92a:	68db      	ldr	r3, [r3, #12]
 800c92c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c930:	2b80      	cmp	r3, #128	@ 0x80
 800c932:	d104      	bne.n	800c93e <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800c934:	f000 f80a 	bl	800c94c <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800c938:	4b03      	ldr	r3, [pc, #12]	@ (800c948 <HAL_RCC_NMI_IRQHandler+0x24>)
 800c93a:	2280      	movs	r2, #128	@ 0x80
 800c93c:	701a      	strb	r2, [r3, #0]
  }
}
 800c93e:	bf00      	nop
 800c940:	bd80      	pop	{r7, pc}
 800c942:	bf00      	nop
 800c944:	40023800 	.word	0x40023800
 800c948:	4002380e 	.word	0x4002380e

0800c94c <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800c94c:	b480      	push	{r7}
 800c94e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 800c950:	bf00      	nop
 800c952:	46bd      	mov	sp, r7
 800c954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c958:	4770      	bx	lr

0800c95a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c95a:	b580      	push	{r7, lr}
 800c95c:	b082      	sub	sp, #8
 800c95e:	af00      	add	r7, sp, #0
 800c960:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	2b00      	cmp	r3, #0
 800c966:	d101      	bne.n	800c96c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c968:	2301      	movs	r3, #1
 800c96a:	e041      	b.n	800c9f0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c972:	b2db      	uxtb	r3, r3
 800c974:	2b00      	cmp	r3, #0
 800c976:	d106      	bne.n	800c986 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	2200      	movs	r2, #0
 800c97c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c980:	6878      	ldr	r0, [r7, #4]
 800c982:	f7f8 fe87 	bl	8005694 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	2202      	movs	r2, #2
 800c98a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	681a      	ldr	r2, [r3, #0]
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	3304      	adds	r3, #4
 800c996:	4619      	mov	r1, r3
 800c998:	4610      	mov	r0, r2
 800c99a:	f000 fc3b 	bl	800d214 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	2201      	movs	r2, #1
 800c9a2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	2201      	movs	r2, #1
 800c9aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	2201      	movs	r2, #1
 800c9b2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	2201      	movs	r2, #1
 800c9ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	2201      	movs	r2, #1
 800c9c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	2201      	movs	r2, #1
 800c9ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	2201      	movs	r2, #1
 800c9d2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	2201      	movs	r2, #1
 800c9da:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	2201      	movs	r2, #1
 800c9e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	2201      	movs	r2, #1
 800c9ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c9ee:	2300      	movs	r3, #0
}
 800c9f0:	4618      	mov	r0, r3
 800c9f2:	3708      	adds	r7, #8
 800c9f4:	46bd      	mov	sp, r7
 800c9f6:	bd80      	pop	{r7, pc}

0800c9f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c9f8:	b480      	push	{r7}
 800c9fa:	b085      	sub	sp, #20
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ca06:	b2db      	uxtb	r3, r3
 800ca08:	2b01      	cmp	r3, #1
 800ca0a:	d001      	beq.n	800ca10 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ca0c:	2301      	movs	r3, #1
 800ca0e:	e044      	b.n	800ca9a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	2202      	movs	r2, #2
 800ca14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	68da      	ldr	r2, [r3, #12]
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	f042 0201 	orr.w	r2, r2, #1
 800ca26:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	4a1e      	ldr	r2, [pc, #120]	@ (800caa8 <HAL_TIM_Base_Start_IT+0xb0>)
 800ca2e:	4293      	cmp	r3, r2
 800ca30:	d018      	beq.n	800ca64 <HAL_TIM_Base_Start_IT+0x6c>
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ca3a:	d013      	beq.n	800ca64 <HAL_TIM_Base_Start_IT+0x6c>
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	4a1a      	ldr	r2, [pc, #104]	@ (800caac <HAL_TIM_Base_Start_IT+0xb4>)
 800ca42:	4293      	cmp	r3, r2
 800ca44:	d00e      	beq.n	800ca64 <HAL_TIM_Base_Start_IT+0x6c>
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	4a19      	ldr	r2, [pc, #100]	@ (800cab0 <HAL_TIM_Base_Start_IT+0xb8>)
 800ca4c:	4293      	cmp	r3, r2
 800ca4e:	d009      	beq.n	800ca64 <HAL_TIM_Base_Start_IT+0x6c>
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	4a17      	ldr	r2, [pc, #92]	@ (800cab4 <HAL_TIM_Base_Start_IT+0xbc>)
 800ca56:	4293      	cmp	r3, r2
 800ca58:	d004      	beq.n	800ca64 <HAL_TIM_Base_Start_IT+0x6c>
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	4a16      	ldr	r2, [pc, #88]	@ (800cab8 <HAL_TIM_Base_Start_IT+0xc0>)
 800ca60:	4293      	cmp	r3, r2
 800ca62:	d111      	bne.n	800ca88 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	689b      	ldr	r3, [r3, #8]
 800ca6a:	f003 0307 	and.w	r3, r3, #7
 800ca6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	2b06      	cmp	r3, #6
 800ca74:	d010      	beq.n	800ca98 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	681a      	ldr	r2, [r3, #0]
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	f042 0201 	orr.w	r2, r2, #1
 800ca84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ca86:	e007      	b.n	800ca98 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	681a      	ldr	r2, [r3, #0]
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	f042 0201 	orr.w	r2, r2, #1
 800ca96:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ca98:	2300      	movs	r3, #0
}
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	3714      	adds	r7, #20
 800ca9e:	46bd      	mov	sp, r7
 800caa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa4:	4770      	bx	lr
 800caa6:	bf00      	nop
 800caa8:	40010000 	.word	0x40010000
 800caac:	40000400 	.word	0x40000400
 800cab0:	40000800 	.word	0x40000800
 800cab4:	40000c00 	.word	0x40000c00
 800cab8:	40014000 	.word	0x40014000

0800cabc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800cabc:	b580      	push	{r7, lr}
 800cabe:	b082      	sub	sp, #8
 800cac0:	af00      	add	r7, sp, #0
 800cac2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d101      	bne.n	800cace <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800caca:	2301      	movs	r3, #1
 800cacc:	e041      	b.n	800cb52 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cad4:	b2db      	uxtb	r3, r3
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d106      	bne.n	800cae8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	2200      	movs	r2, #0
 800cade:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800cae2:	6878      	ldr	r0, [r7, #4]
 800cae4:	f000 f839 	bl	800cb5a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	2202      	movs	r2, #2
 800caec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	681a      	ldr	r2, [r3, #0]
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	3304      	adds	r3, #4
 800caf8:	4619      	mov	r1, r3
 800cafa:	4610      	mov	r0, r2
 800cafc:	f000 fb8a 	bl	800d214 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	2201      	movs	r2, #1
 800cb04:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	2201      	movs	r2, #1
 800cb0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	2201      	movs	r2, #1
 800cb14:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	2201      	movs	r2, #1
 800cb1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	2201      	movs	r2, #1
 800cb24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	2201      	movs	r2, #1
 800cb2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	2201      	movs	r2, #1
 800cb34:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	2201      	movs	r2, #1
 800cb3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	2201      	movs	r2, #1
 800cb44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	2201      	movs	r2, #1
 800cb4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800cb50:	2300      	movs	r3, #0
}
 800cb52:	4618      	mov	r0, r3
 800cb54:	3708      	adds	r7, #8
 800cb56:	46bd      	mov	sp, r7
 800cb58:	bd80      	pop	{r7, pc}

0800cb5a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800cb5a:	b480      	push	{r7}
 800cb5c:	b083      	sub	sp, #12
 800cb5e:	af00      	add	r7, sp, #0
 800cb60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800cb62:	bf00      	nop
 800cb64:	370c      	adds	r7, #12
 800cb66:	46bd      	mov	sp, r7
 800cb68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb6c:	4770      	bx	lr
	...

0800cb70 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800cb70:	b580      	push	{r7, lr}
 800cb72:	b084      	sub	sp, #16
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	6078      	str	r0, [r7, #4]
 800cb78:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800cb7a:	683b      	ldr	r3, [r7, #0]
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d109      	bne.n	800cb94 <HAL_TIM_PWM_Start+0x24>
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800cb86:	b2db      	uxtb	r3, r3
 800cb88:	2b01      	cmp	r3, #1
 800cb8a:	bf14      	ite	ne
 800cb8c:	2301      	movne	r3, #1
 800cb8e:	2300      	moveq	r3, #0
 800cb90:	b2db      	uxtb	r3, r3
 800cb92:	e022      	b.n	800cbda <HAL_TIM_PWM_Start+0x6a>
 800cb94:	683b      	ldr	r3, [r7, #0]
 800cb96:	2b04      	cmp	r3, #4
 800cb98:	d109      	bne.n	800cbae <HAL_TIM_PWM_Start+0x3e>
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800cba0:	b2db      	uxtb	r3, r3
 800cba2:	2b01      	cmp	r3, #1
 800cba4:	bf14      	ite	ne
 800cba6:	2301      	movne	r3, #1
 800cba8:	2300      	moveq	r3, #0
 800cbaa:	b2db      	uxtb	r3, r3
 800cbac:	e015      	b.n	800cbda <HAL_TIM_PWM_Start+0x6a>
 800cbae:	683b      	ldr	r3, [r7, #0]
 800cbb0:	2b08      	cmp	r3, #8
 800cbb2:	d109      	bne.n	800cbc8 <HAL_TIM_PWM_Start+0x58>
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800cbba:	b2db      	uxtb	r3, r3
 800cbbc:	2b01      	cmp	r3, #1
 800cbbe:	bf14      	ite	ne
 800cbc0:	2301      	movne	r3, #1
 800cbc2:	2300      	moveq	r3, #0
 800cbc4:	b2db      	uxtb	r3, r3
 800cbc6:	e008      	b.n	800cbda <HAL_TIM_PWM_Start+0x6a>
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cbce:	b2db      	uxtb	r3, r3
 800cbd0:	2b01      	cmp	r3, #1
 800cbd2:	bf14      	ite	ne
 800cbd4:	2301      	movne	r3, #1
 800cbd6:	2300      	moveq	r3, #0
 800cbd8:	b2db      	uxtb	r3, r3
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d001      	beq.n	800cbe2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800cbde:	2301      	movs	r3, #1
 800cbe0:	e068      	b.n	800ccb4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800cbe2:	683b      	ldr	r3, [r7, #0]
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d104      	bne.n	800cbf2 <HAL_TIM_PWM_Start+0x82>
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	2202      	movs	r2, #2
 800cbec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800cbf0:	e013      	b.n	800cc1a <HAL_TIM_PWM_Start+0xaa>
 800cbf2:	683b      	ldr	r3, [r7, #0]
 800cbf4:	2b04      	cmp	r3, #4
 800cbf6:	d104      	bne.n	800cc02 <HAL_TIM_PWM_Start+0x92>
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	2202      	movs	r2, #2
 800cbfc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800cc00:	e00b      	b.n	800cc1a <HAL_TIM_PWM_Start+0xaa>
 800cc02:	683b      	ldr	r3, [r7, #0]
 800cc04:	2b08      	cmp	r3, #8
 800cc06:	d104      	bne.n	800cc12 <HAL_TIM_PWM_Start+0xa2>
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	2202      	movs	r2, #2
 800cc0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800cc10:	e003      	b.n	800cc1a <HAL_TIM_PWM_Start+0xaa>
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	2202      	movs	r2, #2
 800cc16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	2201      	movs	r2, #1
 800cc20:	6839      	ldr	r1, [r7, #0]
 800cc22:	4618      	mov	r0, r3
 800cc24:	f000 fda8 	bl	800d778 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	4a23      	ldr	r2, [pc, #140]	@ (800ccbc <HAL_TIM_PWM_Start+0x14c>)
 800cc2e:	4293      	cmp	r3, r2
 800cc30:	d107      	bne.n	800cc42 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800cc40:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	4a1d      	ldr	r2, [pc, #116]	@ (800ccbc <HAL_TIM_PWM_Start+0x14c>)
 800cc48:	4293      	cmp	r3, r2
 800cc4a:	d018      	beq.n	800cc7e <HAL_TIM_PWM_Start+0x10e>
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cc54:	d013      	beq.n	800cc7e <HAL_TIM_PWM_Start+0x10e>
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	4a19      	ldr	r2, [pc, #100]	@ (800ccc0 <HAL_TIM_PWM_Start+0x150>)
 800cc5c:	4293      	cmp	r3, r2
 800cc5e:	d00e      	beq.n	800cc7e <HAL_TIM_PWM_Start+0x10e>
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	4a17      	ldr	r2, [pc, #92]	@ (800ccc4 <HAL_TIM_PWM_Start+0x154>)
 800cc66:	4293      	cmp	r3, r2
 800cc68:	d009      	beq.n	800cc7e <HAL_TIM_PWM_Start+0x10e>
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	4a16      	ldr	r2, [pc, #88]	@ (800ccc8 <HAL_TIM_PWM_Start+0x158>)
 800cc70:	4293      	cmp	r3, r2
 800cc72:	d004      	beq.n	800cc7e <HAL_TIM_PWM_Start+0x10e>
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	4a14      	ldr	r2, [pc, #80]	@ (800cccc <HAL_TIM_PWM_Start+0x15c>)
 800cc7a:	4293      	cmp	r3, r2
 800cc7c:	d111      	bne.n	800cca2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	689b      	ldr	r3, [r3, #8]
 800cc84:	f003 0307 	and.w	r3, r3, #7
 800cc88:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	2b06      	cmp	r3, #6
 800cc8e:	d010      	beq.n	800ccb2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	681a      	ldr	r2, [r3, #0]
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	f042 0201 	orr.w	r2, r2, #1
 800cc9e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cca0:	e007      	b.n	800ccb2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	681a      	ldr	r2, [r3, #0]
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	f042 0201 	orr.w	r2, r2, #1
 800ccb0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ccb2:	2300      	movs	r3, #0
}
 800ccb4:	4618      	mov	r0, r3
 800ccb6:	3710      	adds	r7, #16
 800ccb8:	46bd      	mov	sp, r7
 800ccba:	bd80      	pop	{r7, pc}
 800ccbc:	40010000 	.word	0x40010000
 800ccc0:	40000400 	.word	0x40000400
 800ccc4:	40000800 	.word	0x40000800
 800ccc8:	40000c00 	.word	0x40000c00
 800cccc:	40014000 	.word	0x40014000

0800ccd0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ccd0:	b580      	push	{r7, lr}
 800ccd2:	b084      	sub	sp, #16
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	68db      	ldr	r3, [r3, #12]
 800ccde:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	691b      	ldr	r3, [r3, #16]
 800cce6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800cce8:	68bb      	ldr	r3, [r7, #8]
 800ccea:	f003 0302 	and.w	r3, r3, #2
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d020      	beq.n	800cd34 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	f003 0302 	and.w	r3, r3, #2
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d01b      	beq.n	800cd34 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	f06f 0202 	mvn.w	r2, #2
 800cd04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	2201      	movs	r2, #1
 800cd0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	699b      	ldr	r3, [r3, #24]
 800cd12:	f003 0303 	and.w	r3, r3, #3
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d003      	beq.n	800cd22 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800cd1a:	6878      	ldr	r0, [r7, #4]
 800cd1c:	f000 fa5b 	bl	800d1d6 <HAL_TIM_IC_CaptureCallback>
 800cd20:	e005      	b.n	800cd2e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800cd22:	6878      	ldr	r0, [r7, #4]
 800cd24:	f000 fa4d 	bl	800d1c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cd28:	6878      	ldr	r0, [r7, #4]
 800cd2a:	f000 fa5e 	bl	800d1ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	2200      	movs	r2, #0
 800cd32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800cd34:	68bb      	ldr	r3, [r7, #8]
 800cd36:	f003 0304 	and.w	r3, r3, #4
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d020      	beq.n	800cd80 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	f003 0304 	and.w	r3, r3, #4
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d01b      	beq.n	800cd80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	f06f 0204 	mvn.w	r2, #4
 800cd50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	2202      	movs	r2, #2
 800cd56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	699b      	ldr	r3, [r3, #24]
 800cd5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d003      	beq.n	800cd6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cd66:	6878      	ldr	r0, [r7, #4]
 800cd68:	f000 fa35 	bl	800d1d6 <HAL_TIM_IC_CaptureCallback>
 800cd6c:	e005      	b.n	800cd7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cd6e:	6878      	ldr	r0, [r7, #4]
 800cd70:	f000 fa27 	bl	800d1c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cd74:	6878      	ldr	r0, [r7, #4]
 800cd76:	f000 fa38 	bl	800d1ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	2200      	movs	r2, #0
 800cd7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800cd80:	68bb      	ldr	r3, [r7, #8]
 800cd82:	f003 0308 	and.w	r3, r3, #8
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d020      	beq.n	800cdcc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	f003 0308 	and.w	r3, r3, #8
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d01b      	beq.n	800cdcc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	f06f 0208 	mvn.w	r2, #8
 800cd9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	2204      	movs	r2, #4
 800cda2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	69db      	ldr	r3, [r3, #28]
 800cdaa:	f003 0303 	and.w	r3, r3, #3
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d003      	beq.n	800cdba <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cdb2:	6878      	ldr	r0, [r7, #4]
 800cdb4:	f000 fa0f 	bl	800d1d6 <HAL_TIM_IC_CaptureCallback>
 800cdb8:	e005      	b.n	800cdc6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cdba:	6878      	ldr	r0, [r7, #4]
 800cdbc:	f000 fa01 	bl	800d1c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cdc0:	6878      	ldr	r0, [r7, #4]
 800cdc2:	f000 fa12 	bl	800d1ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	2200      	movs	r2, #0
 800cdca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800cdcc:	68bb      	ldr	r3, [r7, #8]
 800cdce:	f003 0310 	and.w	r3, r3, #16
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d020      	beq.n	800ce18 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	f003 0310 	and.w	r3, r3, #16
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d01b      	beq.n	800ce18 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	f06f 0210 	mvn.w	r2, #16
 800cde8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	2208      	movs	r2, #8
 800cdee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	69db      	ldr	r3, [r3, #28]
 800cdf6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d003      	beq.n	800ce06 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cdfe:	6878      	ldr	r0, [r7, #4]
 800ce00:	f000 f9e9 	bl	800d1d6 <HAL_TIM_IC_CaptureCallback>
 800ce04:	e005      	b.n	800ce12 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ce06:	6878      	ldr	r0, [r7, #4]
 800ce08:	f000 f9db 	bl	800d1c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ce0c:	6878      	ldr	r0, [r7, #4]
 800ce0e:	f000 f9ec 	bl	800d1ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	2200      	movs	r2, #0
 800ce16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800ce18:	68bb      	ldr	r3, [r7, #8]
 800ce1a:	f003 0301 	and.w	r3, r3, #1
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d00c      	beq.n	800ce3c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	f003 0301 	and.w	r3, r3, #1
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d007      	beq.n	800ce3c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	f06f 0201 	mvn.w	r2, #1
 800ce34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ce36:	6878      	ldr	r0, [r7, #4]
 800ce38:	f7f8 f81c 	bl	8004e74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800ce3c:	68bb      	ldr	r3, [r7, #8]
 800ce3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d00c      	beq.n	800ce60 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d007      	beq.n	800ce60 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800ce58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ce5a:	6878      	ldr	r0, [r7, #4]
 800ce5c:	f000 fd2a 	bl	800d8b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800ce60:	68bb      	ldr	r3, [r7, #8]
 800ce62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d00c      	beq.n	800ce84 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d007      	beq.n	800ce84 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800ce7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ce7e:	6878      	ldr	r0, [r7, #4]
 800ce80:	f000 f9bd 	bl	800d1fe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800ce84:	68bb      	ldr	r3, [r7, #8]
 800ce86:	f003 0320 	and.w	r3, r3, #32
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d00c      	beq.n	800cea8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	f003 0320 	and.w	r3, r3, #32
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d007      	beq.n	800cea8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	f06f 0220 	mvn.w	r2, #32
 800cea0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800cea2:	6878      	ldr	r0, [r7, #4]
 800cea4:	f000 fcfc 	bl	800d8a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800cea8:	bf00      	nop
 800ceaa:	3710      	adds	r7, #16
 800ceac:	46bd      	mov	sp, r7
 800ceae:	bd80      	pop	{r7, pc}

0800ceb0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ceb0:	b580      	push	{r7, lr}
 800ceb2:	b086      	sub	sp, #24
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	60f8      	str	r0, [r7, #12]
 800ceb8:	60b9      	str	r1, [r7, #8]
 800ceba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cebc:	2300      	movs	r3, #0
 800cebe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800cec6:	2b01      	cmp	r3, #1
 800cec8:	d101      	bne.n	800cece <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ceca:	2302      	movs	r3, #2
 800cecc:	e0ae      	b.n	800d02c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	2201      	movs	r2, #1
 800ced2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	2b0c      	cmp	r3, #12
 800ceda:	f200 809f 	bhi.w	800d01c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800cede:	a201      	add	r2, pc, #4	@ (adr r2, 800cee4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800cee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cee4:	0800cf19 	.word	0x0800cf19
 800cee8:	0800d01d 	.word	0x0800d01d
 800ceec:	0800d01d 	.word	0x0800d01d
 800cef0:	0800d01d 	.word	0x0800d01d
 800cef4:	0800cf59 	.word	0x0800cf59
 800cef8:	0800d01d 	.word	0x0800d01d
 800cefc:	0800d01d 	.word	0x0800d01d
 800cf00:	0800d01d 	.word	0x0800d01d
 800cf04:	0800cf9b 	.word	0x0800cf9b
 800cf08:	0800d01d 	.word	0x0800d01d
 800cf0c:	0800d01d 	.word	0x0800d01d
 800cf10:	0800d01d 	.word	0x0800d01d
 800cf14:	0800cfdb 	.word	0x0800cfdb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	68b9      	ldr	r1, [r7, #8]
 800cf1e:	4618      	mov	r0, r3
 800cf20:	f000 fa04 	bl	800d32c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	699a      	ldr	r2, [r3, #24]
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	f042 0208 	orr.w	r2, r2, #8
 800cf32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	699a      	ldr	r2, [r3, #24]
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	f022 0204 	bic.w	r2, r2, #4
 800cf42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	6999      	ldr	r1, [r3, #24]
 800cf4a:	68bb      	ldr	r3, [r7, #8]
 800cf4c:	691a      	ldr	r2, [r3, #16]
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	430a      	orrs	r2, r1
 800cf54:	619a      	str	r2, [r3, #24]
      break;
 800cf56:	e064      	b.n	800d022 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	68b9      	ldr	r1, [r7, #8]
 800cf5e:	4618      	mov	r0, r3
 800cf60:	f000 fa4a 	bl	800d3f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	699a      	ldr	r2, [r3, #24]
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800cf72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	699a      	ldr	r2, [r3, #24]
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800cf82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	6999      	ldr	r1, [r3, #24]
 800cf8a:	68bb      	ldr	r3, [r7, #8]
 800cf8c:	691b      	ldr	r3, [r3, #16]
 800cf8e:	021a      	lsls	r2, r3, #8
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	430a      	orrs	r2, r1
 800cf96:	619a      	str	r2, [r3, #24]
      break;
 800cf98:	e043      	b.n	800d022 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	68b9      	ldr	r1, [r7, #8]
 800cfa0:	4618      	mov	r0, r3
 800cfa2:	f000 fa95 	bl	800d4d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	69da      	ldr	r2, [r3, #28]
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	f042 0208 	orr.w	r2, r2, #8
 800cfb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	69da      	ldr	r2, [r3, #28]
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	f022 0204 	bic.w	r2, r2, #4
 800cfc4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	69d9      	ldr	r1, [r3, #28]
 800cfcc:	68bb      	ldr	r3, [r7, #8]
 800cfce:	691a      	ldr	r2, [r3, #16]
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	430a      	orrs	r2, r1
 800cfd6:	61da      	str	r2, [r3, #28]
      break;
 800cfd8:	e023      	b.n	800d022 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	68b9      	ldr	r1, [r7, #8]
 800cfe0:	4618      	mov	r0, r3
 800cfe2:	f000 fadf 	bl	800d5a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	69da      	ldr	r2, [r3, #28]
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800cff4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	69da      	ldr	r2, [r3, #28]
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d004:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	69d9      	ldr	r1, [r3, #28]
 800d00c:	68bb      	ldr	r3, [r7, #8]
 800d00e:	691b      	ldr	r3, [r3, #16]
 800d010:	021a      	lsls	r2, r3, #8
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	430a      	orrs	r2, r1
 800d018:	61da      	str	r2, [r3, #28]
      break;
 800d01a:	e002      	b.n	800d022 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800d01c:	2301      	movs	r3, #1
 800d01e:	75fb      	strb	r3, [r7, #23]
      break;
 800d020:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	2200      	movs	r2, #0
 800d026:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800d02a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d02c:	4618      	mov	r0, r3
 800d02e:	3718      	adds	r7, #24
 800d030:	46bd      	mov	sp, r7
 800d032:	bd80      	pop	{r7, pc}

0800d034 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d034:	b580      	push	{r7, lr}
 800d036:	b084      	sub	sp, #16
 800d038:	af00      	add	r7, sp, #0
 800d03a:	6078      	str	r0, [r7, #4]
 800d03c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d03e:	2300      	movs	r3, #0
 800d040:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d048:	2b01      	cmp	r3, #1
 800d04a:	d101      	bne.n	800d050 <HAL_TIM_ConfigClockSource+0x1c>
 800d04c:	2302      	movs	r3, #2
 800d04e:	e0b4      	b.n	800d1ba <HAL_TIM_ConfigClockSource+0x186>
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	2201      	movs	r2, #1
 800d054:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	2202      	movs	r2, #2
 800d05c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	689b      	ldr	r3, [r3, #8]
 800d066:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d068:	68bb      	ldr	r3, [r7, #8]
 800d06a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800d06e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d070:	68bb      	ldr	r3, [r7, #8]
 800d072:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d076:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	68ba      	ldr	r2, [r7, #8]
 800d07e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d080:	683b      	ldr	r3, [r7, #0]
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d088:	d03e      	beq.n	800d108 <HAL_TIM_ConfigClockSource+0xd4>
 800d08a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d08e:	f200 8087 	bhi.w	800d1a0 <HAL_TIM_ConfigClockSource+0x16c>
 800d092:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d096:	f000 8086 	beq.w	800d1a6 <HAL_TIM_ConfigClockSource+0x172>
 800d09a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d09e:	d87f      	bhi.n	800d1a0 <HAL_TIM_ConfigClockSource+0x16c>
 800d0a0:	2b70      	cmp	r3, #112	@ 0x70
 800d0a2:	d01a      	beq.n	800d0da <HAL_TIM_ConfigClockSource+0xa6>
 800d0a4:	2b70      	cmp	r3, #112	@ 0x70
 800d0a6:	d87b      	bhi.n	800d1a0 <HAL_TIM_ConfigClockSource+0x16c>
 800d0a8:	2b60      	cmp	r3, #96	@ 0x60
 800d0aa:	d050      	beq.n	800d14e <HAL_TIM_ConfigClockSource+0x11a>
 800d0ac:	2b60      	cmp	r3, #96	@ 0x60
 800d0ae:	d877      	bhi.n	800d1a0 <HAL_TIM_ConfigClockSource+0x16c>
 800d0b0:	2b50      	cmp	r3, #80	@ 0x50
 800d0b2:	d03c      	beq.n	800d12e <HAL_TIM_ConfigClockSource+0xfa>
 800d0b4:	2b50      	cmp	r3, #80	@ 0x50
 800d0b6:	d873      	bhi.n	800d1a0 <HAL_TIM_ConfigClockSource+0x16c>
 800d0b8:	2b40      	cmp	r3, #64	@ 0x40
 800d0ba:	d058      	beq.n	800d16e <HAL_TIM_ConfigClockSource+0x13a>
 800d0bc:	2b40      	cmp	r3, #64	@ 0x40
 800d0be:	d86f      	bhi.n	800d1a0 <HAL_TIM_ConfigClockSource+0x16c>
 800d0c0:	2b30      	cmp	r3, #48	@ 0x30
 800d0c2:	d064      	beq.n	800d18e <HAL_TIM_ConfigClockSource+0x15a>
 800d0c4:	2b30      	cmp	r3, #48	@ 0x30
 800d0c6:	d86b      	bhi.n	800d1a0 <HAL_TIM_ConfigClockSource+0x16c>
 800d0c8:	2b20      	cmp	r3, #32
 800d0ca:	d060      	beq.n	800d18e <HAL_TIM_ConfigClockSource+0x15a>
 800d0cc:	2b20      	cmp	r3, #32
 800d0ce:	d867      	bhi.n	800d1a0 <HAL_TIM_ConfigClockSource+0x16c>
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d05c      	beq.n	800d18e <HAL_TIM_ConfigClockSource+0x15a>
 800d0d4:	2b10      	cmp	r3, #16
 800d0d6:	d05a      	beq.n	800d18e <HAL_TIM_ConfigClockSource+0x15a>
 800d0d8:	e062      	b.n	800d1a0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d0de:	683b      	ldr	r3, [r7, #0]
 800d0e0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d0e2:	683b      	ldr	r3, [r7, #0]
 800d0e4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d0e6:	683b      	ldr	r3, [r7, #0]
 800d0e8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d0ea:	f000 fb25 	bl	800d738 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	689b      	ldr	r3, [r3, #8]
 800d0f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d0f6:	68bb      	ldr	r3, [r7, #8]
 800d0f8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800d0fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	68ba      	ldr	r2, [r7, #8]
 800d104:	609a      	str	r2, [r3, #8]
      break;
 800d106:	e04f      	b.n	800d1a8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d10c:	683b      	ldr	r3, [r7, #0]
 800d10e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d110:	683b      	ldr	r3, [r7, #0]
 800d112:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d114:	683b      	ldr	r3, [r7, #0]
 800d116:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d118:	f000 fb0e 	bl	800d738 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	689a      	ldr	r2, [r3, #8]
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800d12a:	609a      	str	r2, [r3, #8]
      break;
 800d12c:	e03c      	b.n	800d1a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d132:	683b      	ldr	r3, [r7, #0]
 800d134:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d136:	683b      	ldr	r3, [r7, #0]
 800d138:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d13a:	461a      	mov	r2, r3
 800d13c:	f000 fa82 	bl	800d644 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	2150      	movs	r1, #80	@ 0x50
 800d146:	4618      	mov	r0, r3
 800d148:	f000 fadb 	bl	800d702 <TIM_ITRx_SetConfig>
      break;
 800d14c:	e02c      	b.n	800d1a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d152:	683b      	ldr	r3, [r7, #0]
 800d154:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d156:	683b      	ldr	r3, [r7, #0]
 800d158:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d15a:	461a      	mov	r2, r3
 800d15c:	f000 faa1 	bl	800d6a2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	2160      	movs	r1, #96	@ 0x60
 800d166:	4618      	mov	r0, r3
 800d168:	f000 facb 	bl	800d702 <TIM_ITRx_SetConfig>
      break;
 800d16c:	e01c      	b.n	800d1a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d172:	683b      	ldr	r3, [r7, #0]
 800d174:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d176:	683b      	ldr	r3, [r7, #0]
 800d178:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d17a:	461a      	mov	r2, r3
 800d17c:	f000 fa62 	bl	800d644 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	2140      	movs	r1, #64	@ 0x40
 800d186:	4618      	mov	r0, r3
 800d188:	f000 fabb 	bl	800d702 <TIM_ITRx_SetConfig>
      break;
 800d18c:	e00c      	b.n	800d1a8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	681a      	ldr	r2, [r3, #0]
 800d192:	683b      	ldr	r3, [r7, #0]
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	4619      	mov	r1, r3
 800d198:	4610      	mov	r0, r2
 800d19a:	f000 fab2 	bl	800d702 <TIM_ITRx_SetConfig>
      break;
 800d19e:	e003      	b.n	800d1a8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800d1a0:	2301      	movs	r3, #1
 800d1a2:	73fb      	strb	r3, [r7, #15]
      break;
 800d1a4:	e000      	b.n	800d1a8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800d1a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	2201      	movs	r2, #1
 800d1ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	2200      	movs	r2, #0
 800d1b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800d1b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1ba:	4618      	mov	r0, r3
 800d1bc:	3710      	adds	r7, #16
 800d1be:	46bd      	mov	sp, r7
 800d1c0:	bd80      	pop	{r7, pc}

0800d1c2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d1c2:	b480      	push	{r7}
 800d1c4:	b083      	sub	sp, #12
 800d1c6:	af00      	add	r7, sp, #0
 800d1c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d1ca:	bf00      	nop
 800d1cc:	370c      	adds	r7, #12
 800d1ce:	46bd      	mov	sp, r7
 800d1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d4:	4770      	bx	lr

0800d1d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d1d6:	b480      	push	{r7}
 800d1d8:	b083      	sub	sp, #12
 800d1da:	af00      	add	r7, sp, #0
 800d1dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d1de:	bf00      	nop
 800d1e0:	370c      	adds	r7, #12
 800d1e2:	46bd      	mov	sp, r7
 800d1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e8:	4770      	bx	lr

0800d1ea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d1ea:	b480      	push	{r7}
 800d1ec:	b083      	sub	sp, #12
 800d1ee:	af00      	add	r7, sp, #0
 800d1f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d1f2:	bf00      	nop
 800d1f4:	370c      	adds	r7, #12
 800d1f6:	46bd      	mov	sp, r7
 800d1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1fc:	4770      	bx	lr

0800d1fe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d1fe:	b480      	push	{r7}
 800d200:	b083      	sub	sp, #12
 800d202:	af00      	add	r7, sp, #0
 800d204:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d206:	bf00      	nop
 800d208:	370c      	adds	r7, #12
 800d20a:	46bd      	mov	sp, r7
 800d20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d210:	4770      	bx	lr
	...

0800d214 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d214:	b480      	push	{r7}
 800d216:	b085      	sub	sp, #20
 800d218:	af00      	add	r7, sp, #0
 800d21a:	6078      	str	r0, [r7, #4]
 800d21c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	4a3a      	ldr	r2, [pc, #232]	@ (800d310 <TIM_Base_SetConfig+0xfc>)
 800d228:	4293      	cmp	r3, r2
 800d22a:	d00f      	beq.n	800d24c <TIM_Base_SetConfig+0x38>
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d232:	d00b      	beq.n	800d24c <TIM_Base_SetConfig+0x38>
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	4a37      	ldr	r2, [pc, #220]	@ (800d314 <TIM_Base_SetConfig+0x100>)
 800d238:	4293      	cmp	r3, r2
 800d23a:	d007      	beq.n	800d24c <TIM_Base_SetConfig+0x38>
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	4a36      	ldr	r2, [pc, #216]	@ (800d318 <TIM_Base_SetConfig+0x104>)
 800d240:	4293      	cmp	r3, r2
 800d242:	d003      	beq.n	800d24c <TIM_Base_SetConfig+0x38>
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	4a35      	ldr	r2, [pc, #212]	@ (800d31c <TIM_Base_SetConfig+0x108>)
 800d248:	4293      	cmp	r3, r2
 800d24a:	d108      	bne.n	800d25e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d252:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d254:	683b      	ldr	r3, [r7, #0]
 800d256:	685b      	ldr	r3, [r3, #4]
 800d258:	68fa      	ldr	r2, [r7, #12]
 800d25a:	4313      	orrs	r3, r2
 800d25c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	4a2b      	ldr	r2, [pc, #172]	@ (800d310 <TIM_Base_SetConfig+0xfc>)
 800d262:	4293      	cmp	r3, r2
 800d264:	d01b      	beq.n	800d29e <TIM_Base_SetConfig+0x8a>
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d26c:	d017      	beq.n	800d29e <TIM_Base_SetConfig+0x8a>
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	4a28      	ldr	r2, [pc, #160]	@ (800d314 <TIM_Base_SetConfig+0x100>)
 800d272:	4293      	cmp	r3, r2
 800d274:	d013      	beq.n	800d29e <TIM_Base_SetConfig+0x8a>
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	4a27      	ldr	r2, [pc, #156]	@ (800d318 <TIM_Base_SetConfig+0x104>)
 800d27a:	4293      	cmp	r3, r2
 800d27c:	d00f      	beq.n	800d29e <TIM_Base_SetConfig+0x8a>
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	4a26      	ldr	r2, [pc, #152]	@ (800d31c <TIM_Base_SetConfig+0x108>)
 800d282:	4293      	cmp	r3, r2
 800d284:	d00b      	beq.n	800d29e <TIM_Base_SetConfig+0x8a>
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	4a25      	ldr	r2, [pc, #148]	@ (800d320 <TIM_Base_SetConfig+0x10c>)
 800d28a:	4293      	cmp	r3, r2
 800d28c:	d007      	beq.n	800d29e <TIM_Base_SetConfig+0x8a>
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	4a24      	ldr	r2, [pc, #144]	@ (800d324 <TIM_Base_SetConfig+0x110>)
 800d292:	4293      	cmp	r3, r2
 800d294:	d003      	beq.n	800d29e <TIM_Base_SetConfig+0x8a>
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	4a23      	ldr	r2, [pc, #140]	@ (800d328 <TIM_Base_SetConfig+0x114>)
 800d29a:	4293      	cmp	r3, r2
 800d29c:	d108      	bne.n	800d2b0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d2a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d2a6:	683b      	ldr	r3, [r7, #0]
 800d2a8:	68db      	ldr	r3, [r3, #12]
 800d2aa:	68fa      	ldr	r2, [r7, #12]
 800d2ac:	4313      	orrs	r3, r2
 800d2ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800d2b6:	683b      	ldr	r3, [r7, #0]
 800d2b8:	695b      	ldr	r3, [r3, #20]
 800d2ba:	4313      	orrs	r3, r2
 800d2bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	68fa      	ldr	r2, [r7, #12]
 800d2c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d2c4:	683b      	ldr	r3, [r7, #0]
 800d2c6:	689a      	ldr	r2, [r3, #8]
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d2cc:	683b      	ldr	r3, [r7, #0]
 800d2ce:	681a      	ldr	r2, [r3, #0]
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	4a0e      	ldr	r2, [pc, #56]	@ (800d310 <TIM_Base_SetConfig+0xfc>)
 800d2d8:	4293      	cmp	r3, r2
 800d2da:	d103      	bne.n	800d2e4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d2dc:	683b      	ldr	r3, [r7, #0]
 800d2de:	691a      	ldr	r2, [r3, #16]
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	2201      	movs	r2, #1
 800d2e8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	691b      	ldr	r3, [r3, #16]
 800d2ee:	f003 0301 	and.w	r3, r3, #1
 800d2f2:	2b01      	cmp	r3, #1
 800d2f4:	d105      	bne.n	800d302 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	691b      	ldr	r3, [r3, #16]
 800d2fa:	f023 0201 	bic.w	r2, r3, #1
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	611a      	str	r2, [r3, #16]
  }
}
 800d302:	bf00      	nop
 800d304:	3714      	adds	r7, #20
 800d306:	46bd      	mov	sp, r7
 800d308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d30c:	4770      	bx	lr
 800d30e:	bf00      	nop
 800d310:	40010000 	.word	0x40010000
 800d314:	40000400 	.word	0x40000400
 800d318:	40000800 	.word	0x40000800
 800d31c:	40000c00 	.word	0x40000c00
 800d320:	40014000 	.word	0x40014000
 800d324:	40014400 	.word	0x40014400
 800d328:	40014800 	.word	0x40014800

0800d32c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d32c:	b480      	push	{r7}
 800d32e:	b087      	sub	sp, #28
 800d330:	af00      	add	r7, sp, #0
 800d332:	6078      	str	r0, [r7, #4]
 800d334:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	6a1b      	ldr	r3, [r3, #32]
 800d33a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	6a1b      	ldr	r3, [r3, #32]
 800d340:	f023 0201 	bic.w	r2, r3, #1
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	685b      	ldr	r3, [r3, #4]
 800d34c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	699b      	ldr	r3, [r3, #24]
 800d352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d35a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	f023 0303 	bic.w	r3, r3, #3
 800d362:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d364:	683b      	ldr	r3, [r7, #0]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	68fa      	ldr	r2, [r7, #12]
 800d36a:	4313      	orrs	r3, r2
 800d36c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d36e:	697b      	ldr	r3, [r7, #20]
 800d370:	f023 0302 	bic.w	r3, r3, #2
 800d374:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d376:	683b      	ldr	r3, [r7, #0]
 800d378:	689b      	ldr	r3, [r3, #8]
 800d37a:	697a      	ldr	r2, [r7, #20]
 800d37c:	4313      	orrs	r3, r2
 800d37e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	4a1c      	ldr	r2, [pc, #112]	@ (800d3f4 <TIM_OC1_SetConfig+0xc8>)
 800d384:	4293      	cmp	r3, r2
 800d386:	d10c      	bne.n	800d3a2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d388:	697b      	ldr	r3, [r7, #20]
 800d38a:	f023 0308 	bic.w	r3, r3, #8
 800d38e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d390:	683b      	ldr	r3, [r7, #0]
 800d392:	68db      	ldr	r3, [r3, #12]
 800d394:	697a      	ldr	r2, [r7, #20]
 800d396:	4313      	orrs	r3, r2
 800d398:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d39a:	697b      	ldr	r3, [r7, #20]
 800d39c:	f023 0304 	bic.w	r3, r3, #4
 800d3a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	4a13      	ldr	r2, [pc, #76]	@ (800d3f4 <TIM_OC1_SetConfig+0xc8>)
 800d3a6:	4293      	cmp	r3, r2
 800d3a8:	d111      	bne.n	800d3ce <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d3aa:	693b      	ldr	r3, [r7, #16]
 800d3ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d3b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d3b2:	693b      	ldr	r3, [r7, #16]
 800d3b4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800d3b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d3ba:	683b      	ldr	r3, [r7, #0]
 800d3bc:	695b      	ldr	r3, [r3, #20]
 800d3be:	693a      	ldr	r2, [r7, #16]
 800d3c0:	4313      	orrs	r3, r2
 800d3c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d3c4:	683b      	ldr	r3, [r7, #0]
 800d3c6:	699b      	ldr	r3, [r3, #24]
 800d3c8:	693a      	ldr	r2, [r7, #16]
 800d3ca:	4313      	orrs	r3, r2
 800d3cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	693a      	ldr	r2, [r7, #16]
 800d3d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	68fa      	ldr	r2, [r7, #12]
 800d3d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d3da:	683b      	ldr	r3, [r7, #0]
 800d3dc:	685a      	ldr	r2, [r3, #4]
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	697a      	ldr	r2, [r7, #20]
 800d3e6:	621a      	str	r2, [r3, #32]
}
 800d3e8:	bf00      	nop
 800d3ea:	371c      	adds	r7, #28
 800d3ec:	46bd      	mov	sp, r7
 800d3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f2:	4770      	bx	lr
 800d3f4:	40010000 	.word	0x40010000

0800d3f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d3f8:	b480      	push	{r7}
 800d3fa:	b087      	sub	sp, #28
 800d3fc:	af00      	add	r7, sp, #0
 800d3fe:	6078      	str	r0, [r7, #4]
 800d400:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	6a1b      	ldr	r3, [r3, #32]
 800d406:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	6a1b      	ldr	r3, [r3, #32]
 800d40c:	f023 0210 	bic.w	r2, r3, #16
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	685b      	ldr	r3, [r3, #4]
 800d418:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	699b      	ldr	r3, [r3, #24]
 800d41e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d426:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d42e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d430:	683b      	ldr	r3, [r7, #0]
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	021b      	lsls	r3, r3, #8
 800d436:	68fa      	ldr	r2, [r7, #12]
 800d438:	4313      	orrs	r3, r2
 800d43a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d43c:	697b      	ldr	r3, [r7, #20]
 800d43e:	f023 0320 	bic.w	r3, r3, #32
 800d442:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d444:	683b      	ldr	r3, [r7, #0]
 800d446:	689b      	ldr	r3, [r3, #8]
 800d448:	011b      	lsls	r3, r3, #4
 800d44a:	697a      	ldr	r2, [r7, #20]
 800d44c:	4313      	orrs	r3, r2
 800d44e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	4a1e      	ldr	r2, [pc, #120]	@ (800d4cc <TIM_OC2_SetConfig+0xd4>)
 800d454:	4293      	cmp	r3, r2
 800d456:	d10d      	bne.n	800d474 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d458:	697b      	ldr	r3, [r7, #20]
 800d45a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d45e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d460:	683b      	ldr	r3, [r7, #0]
 800d462:	68db      	ldr	r3, [r3, #12]
 800d464:	011b      	lsls	r3, r3, #4
 800d466:	697a      	ldr	r2, [r7, #20]
 800d468:	4313      	orrs	r3, r2
 800d46a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d46c:	697b      	ldr	r3, [r7, #20]
 800d46e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d472:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	4a15      	ldr	r2, [pc, #84]	@ (800d4cc <TIM_OC2_SetConfig+0xd4>)
 800d478:	4293      	cmp	r3, r2
 800d47a:	d113      	bne.n	800d4a4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d47c:	693b      	ldr	r3, [r7, #16]
 800d47e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800d482:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d484:	693b      	ldr	r3, [r7, #16]
 800d486:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d48a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d48c:	683b      	ldr	r3, [r7, #0]
 800d48e:	695b      	ldr	r3, [r3, #20]
 800d490:	009b      	lsls	r3, r3, #2
 800d492:	693a      	ldr	r2, [r7, #16]
 800d494:	4313      	orrs	r3, r2
 800d496:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d498:	683b      	ldr	r3, [r7, #0]
 800d49a:	699b      	ldr	r3, [r3, #24]
 800d49c:	009b      	lsls	r3, r3, #2
 800d49e:	693a      	ldr	r2, [r7, #16]
 800d4a0:	4313      	orrs	r3, r2
 800d4a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	693a      	ldr	r2, [r7, #16]
 800d4a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	68fa      	ldr	r2, [r7, #12]
 800d4ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d4b0:	683b      	ldr	r3, [r7, #0]
 800d4b2:	685a      	ldr	r2, [r3, #4]
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	697a      	ldr	r2, [r7, #20]
 800d4bc:	621a      	str	r2, [r3, #32]
}
 800d4be:	bf00      	nop
 800d4c0:	371c      	adds	r7, #28
 800d4c2:	46bd      	mov	sp, r7
 800d4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c8:	4770      	bx	lr
 800d4ca:	bf00      	nop
 800d4cc:	40010000 	.word	0x40010000

0800d4d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d4d0:	b480      	push	{r7}
 800d4d2:	b087      	sub	sp, #28
 800d4d4:	af00      	add	r7, sp, #0
 800d4d6:	6078      	str	r0, [r7, #4]
 800d4d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	6a1b      	ldr	r3, [r3, #32]
 800d4de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	6a1b      	ldr	r3, [r3, #32]
 800d4e4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	685b      	ldr	r3, [r3, #4]
 800d4f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	69db      	ldr	r3, [r3, #28]
 800d4f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d4fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	f023 0303 	bic.w	r3, r3, #3
 800d506:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d508:	683b      	ldr	r3, [r7, #0]
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	68fa      	ldr	r2, [r7, #12]
 800d50e:	4313      	orrs	r3, r2
 800d510:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d512:	697b      	ldr	r3, [r7, #20]
 800d514:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800d518:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d51a:	683b      	ldr	r3, [r7, #0]
 800d51c:	689b      	ldr	r3, [r3, #8]
 800d51e:	021b      	lsls	r3, r3, #8
 800d520:	697a      	ldr	r2, [r7, #20]
 800d522:	4313      	orrs	r3, r2
 800d524:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	4a1d      	ldr	r2, [pc, #116]	@ (800d5a0 <TIM_OC3_SetConfig+0xd0>)
 800d52a:	4293      	cmp	r3, r2
 800d52c:	d10d      	bne.n	800d54a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d52e:	697b      	ldr	r3, [r7, #20]
 800d530:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d534:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d536:	683b      	ldr	r3, [r7, #0]
 800d538:	68db      	ldr	r3, [r3, #12]
 800d53a:	021b      	lsls	r3, r3, #8
 800d53c:	697a      	ldr	r2, [r7, #20]
 800d53e:	4313      	orrs	r3, r2
 800d540:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d542:	697b      	ldr	r3, [r7, #20]
 800d544:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800d548:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	4a14      	ldr	r2, [pc, #80]	@ (800d5a0 <TIM_OC3_SetConfig+0xd0>)
 800d54e:	4293      	cmp	r3, r2
 800d550:	d113      	bne.n	800d57a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d552:	693b      	ldr	r3, [r7, #16]
 800d554:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d558:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d55a:	693b      	ldr	r3, [r7, #16]
 800d55c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800d560:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d562:	683b      	ldr	r3, [r7, #0]
 800d564:	695b      	ldr	r3, [r3, #20]
 800d566:	011b      	lsls	r3, r3, #4
 800d568:	693a      	ldr	r2, [r7, #16]
 800d56a:	4313      	orrs	r3, r2
 800d56c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d56e:	683b      	ldr	r3, [r7, #0]
 800d570:	699b      	ldr	r3, [r3, #24]
 800d572:	011b      	lsls	r3, r3, #4
 800d574:	693a      	ldr	r2, [r7, #16]
 800d576:	4313      	orrs	r3, r2
 800d578:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	693a      	ldr	r2, [r7, #16]
 800d57e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	68fa      	ldr	r2, [r7, #12]
 800d584:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d586:	683b      	ldr	r3, [r7, #0]
 800d588:	685a      	ldr	r2, [r3, #4]
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	697a      	ldr	r2, [r7, #20]
 800d592:	621a      	str	r2, [r3, #32]
}
 800d594:	bf00      	nop
 800d596:	371c      	adds	r7, #28
 800d598:	46bd      	mov	sp, r7
 800d59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d59e:	4770      	bx	lr
 800d5a0:	40010000 	.word	0x40010000

0800d5a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d5a4:	b480      	push	{r7}
 800d5a6:	b087      	sub	sp, #28
 800d5a8:	af00      	add	r7, sp, #0
 800d5aa:	6078      	str	r0, [r7, #4]
 800d5ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	6a1b      	ldr	r3, [r3, #32]
 800d5b2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	6a1b      	ldr	r3, [r3, #32]
 800d5b8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	685b      	ldr	r3, [r3, #4]
 800d5c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	69db      	ldr	r3, [r3, #28]
 800d5ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d5d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d5da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d5dc:	683b      	ldr	r3, [r7, #0]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	021b      	lsls	r3, r3, #8
 800d5e2:	68fa      	ldr	r2, [r7, #12]
 800d5e4:	4313      	orrs	r3, r2
 800d5e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d5e8:	693b      	ldr	r3, [r7, #16]
 800d5ea:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800d5ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d5f0:	683b      	ldr	r3, [r7, #0]
 800d5f2:	689b      	ldr	r3, [r3, #8]
 800d5f4:	031b      	lsls	r3, r3, #12
 800d5f6:	693a      	ldr	r2, [r7, #16]
 800d5f8:	4313      	orrs	r3, r2
 800d5fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	4a10      	ldr	r2, [pc, #64]	@ (800d640 <TIM_OC4_SetConfig+0x9c>)
 800d600:	4293      	cmp	r3, r2
 800d602:	d109      	bne.n	800d618 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d604:	697b      	ldr	r3, [r7, #20]
 800d606:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d60a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d60c:	683b      	ldr	r3, [r7, #0]
 800d60e:	695b      	ldr	r3, [r3, #20]
 800d610:	019b      	lsls	r3, r3, #6
 800d612:	697a      	ldr	r2, [r7, #20]
 800d614:	4313      	orrs	r3, r2
 800d616:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	697a      	ldr	r2, [r7, #20]
 800d61c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	68fa      	ldr	r2, [r7, #12]
 800d622:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d624:	683b      	ldr	r3, [r7, #0]
 800d626:	685a      	ldr	r2, [r3, #4]
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	693a      	ldr	r2, [r7, #16]
 800d630:	621a      	str	r2, [r3, #32]
}
 800d632:	bf00      	nop
 800d634:	371c      	adds	r7, #28
 800d636:	46bd      	mov	sp, r7
 800d638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d63c:	4770      	bx	lr
 800d63e:	bf00      	nop
 800d640:	40010000 	.word	0x40010000

0800d644 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d644:	b480      	push	{r7}
 800d646:	b087      	sub	sp, #28
 800d648:	af00      	add	r7, sp, #0
 800d64a:	60f8      	str	r0, [r7, #12]
 800d64c:	60b9      	str	r1, [r7, #8]
 800d64e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	6a1b      	ldr	r3, [r3, #32]
 800d654:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	6a1b      	ldr	r3, [r3, #32]
 800d65a:	f023 0201 	bic.w	r2, r3, #1
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	699b      	ldr	r3, [r3, #24]
 800d666:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d668:	693b      	ldr	r3, [r7, #16]
 800d66a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800d66e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	011b      	lsls	r3, r3, #4
 800d674:	693a      	ldr	r2, [r7, #16]
 800d676:	4313      	orrs	r3, r2
 800d678:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d67a:	697b      	ldr	r3, [r7, #20]
 800d67c:	f023 030a 	bic.w	r3, r3, #10
 800d680:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d682:	697a      	ldr	r2, [r7, #20]
 800d684:	68bb      	ldr	r3, [r7, #8]
 800d686:	4313      	orrs	r3, r2
 800d688:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	693a      	ldr	r2, [r7, #16]
 800d68e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	697a      	ldr	r2, [r7, #20]
 800d694:	621a      	str	r2, [r3, #32]
}
 800d696:	bf00      	nop
 800d698:	371c      	adds	r7, #28
 800d69a:	46bd      	mov	sp, r7
 800d69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6a0:	4770      	bx	lr

0800d6a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d6a2:	b480      	push	{r7}
 800d6a4:	b087      	sub	sp, #28
 800d6a6:	af00      	add	r7, sp, #0
 800d6a8:	60f8      	str	r0, [r7, #12]
 800d6aa:	60b9      	str	r1, [r7, #8]
 800d6ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	6a1b      	ldr	r3, [r3, #32]
 800d6b2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	6a1b      	ldr	r3, [r3, #32]
 800d6b8:	f023 0210 	bic.w	r2, r3, #16
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	699b      	ldr	r3, [r3, #24]
 800d6c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d6c6:	693b      	ldr	r3, [r7, #16]
 800d6c8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800d6cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	031b      	lsls	r3, r3, #12
 800d6d2:	693a      	ldr	r2, [r7, #16]
 800d6d4:	4313      	orrs	r3, r2
 800d6d6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d6d8:	697b      	ldr	r3, [r7, #20]
 800d6da:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800d6de:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d6e0:	68bb      	ldr	r3, [r7, #8]
 800d6e2:	011b      	lsls	r3, r3, #4
 800d6e4:	697a      	ldr	r2, [r7, #20]
 800d6e6:	4313      	orrs	r3, r2
 800d6e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	693a      	ldr	r2, [r7, #16]
 800d6ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	697a      	ldr	r2, [r7, #20]
 800d6f4:	621a      	str	r2, [r3, #32]
}
 800d6f6:	bf00      	nop
 800d6f8:	371c      	adds	r7, #28
 800d6fa:	46bd      	mov	sp, r7
 800d6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d700:	4770      	bx	lr

0800d702 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d702:	b480      	push	{r7}
 800d704:	b085      	sub	sp, #20
 800d706:	af00      	add	r7, sp, #0
 800d708:	6078      	str	r0, [r7, #4]
 800d70a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	689b      	ldr	r3, [r3, #8]
 800d710:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d718:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d71a:	683a      	ldr	r2, [r7, #0]
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	4313      	orrs	r3, r2
 800d720:	f043 0307 	orr.w	r3, r3, #7
 800d724:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	68fa      	ldr	r2, [r7, #12]
 800d72a:	609a      	str	r2, [r3, #8]
}
 800d72c:	bf00      	nop
 800d72e:	3714      	adds	r7, #20
 800d730:	46bd      	mov	sp, r7
 800d732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d736:	4770      	bx	lr

0800d738 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d738:	b480      	push	{r7}
 800d73a:	b087      	sub	sp, #28
 800d73c:	af00      	add	r7, sp, #0
 800d73e:	60f8      	str	r0, [r7, #12]
 800d740:	60b9      	str	r1, [r7, #8]
 800d742:	607a      	str	r2, [r7, #4]
 800d744:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	689b      	ldr	r3, [r3, #8]
 800d74a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d74c:	697b      	ldr	r3, [r7, #20]
 800d74e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d752:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d754:	683b      	ldr	r3, [r7, #0]
 800d756:	021a      	lsls	r2, r3, #8
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	431a      	orrs	r2, r3
 800d75c:	68bb      	ldr	r3, [r7, #8]
 800d75e:	4313      	orrs	r3, r2
 800d760:	697a      	ldr	r2, [r7, #20]
 800d762:	4313      	orrs	r3, r2
 800d764:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	697a      	ldr	r2, [r7, #20]
 800d76a:	609a      	str	r2, [r3, #8]
}
 800d76c:	bf00      	nop
 800d76e:	371c      	adds	r7, #28
 800d770:	46bd      	mov	sp, r7
 800d772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d776:	4770      	bx	lr

0800d778 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d778:	b480      	push	{r7}
 800d77a:	b087      	sub	sp, #28
 800d77c:	af00      	add	r7, sp, #0
 800d77e:	60f8      	str	r0, [r7, #12]
 800d780:	60b9      	str	r1, [r7, #8]
 800d782:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d784:	68bb      	ldr	r3, [r7, #8]
 800d786:	f003 031f 	and.w	r3, r3, #31
 800d78a:	2201      	movs	r2, #1
 800d78c:	fa02 f303 	lsl.w	r3, r2, r3
 800d790:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	6a1a      	ldr	r2, [r3, #32]
 800d796:	697b      	ldr	r3, [r7, #20]
 800d798:	43db      	mvns	r3, r3
 800d79a:	401a      	ands	r2, r3
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	6a1a      	ldr	r2, [r3, #32]
 800d7a4:	68bb      	ldr	r3, [r7, #8]
 800d7a6:	f003 031f 	and.w	r3, r3, #31
 800d7aa:	6879      	ldr	r1, [r7, #4]
 800d7ac:	fa01 f303 	lsl.w	r3, r1, r3
 800d7b0:	431a      	orrs	r2, r3
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	621a      	str	r2, [r3, #32]
}
 800d7b6:	bf00      	nop
 800d7b8:	371c      	adds	r7, #28
 800d7ba:	46bd      	mov	sp, r7
 800d7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c0:	4770      	bx	lr
	...

0800d7c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d7c4:	b480      	push	{r7}
 800d7c6:	b085      	sub	sp, #20
 800d7c8:	af00      	add	r7, sp, #0
 800d7ca:	6078      	str	r0, [r7, #4]
 800d7cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d7d4:	2b01      	cmp	r3, #1
 800d7d6:	d101      	bne.n	800d7dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d7d8:	2302      	movs	r3, #2
 800d7da:	e050      	b.n	800d87e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	2201      	movs	r2, #1
 800d7e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	2202      	movs	r2, #2
 800d7e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	685b      	ldr	r3, [r3, #4]
 800d7f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	689b      	ldr	r3, [r3, #8]
 800d7fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d802:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d804:	683b      	ldr	r3, [r7, #0]
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	68fa      	ldr	r2, [r7, #12]
 800d80a:	4313      	orrs	r3, r2
 800d80c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	68fa      	ldr	r2, [r7, #12]
 800d814:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	4a1c      	ldr	r2, [pc, #112]	@ (800d88c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800d81c:	4293      	cmp	r3, r2
 800d81e:	d018      	beq.n	800d852 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d828:	d013      	beq.n	800d852 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	4a18      	ldr	r2, [pc, #96]	@ (800d890 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800d830:	4293      	cmp	r3, r2
 800d832:	d00e      	beq.n	800d852 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	4a16      	ldr	r2, [pc, #88]	@ (800d894 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800d83a:	4293      	cmp	r3, r2
 800d83c:	d009      	beq.n	800d852 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	4a15      	ldr	r2, [pc, #84]	@ (800d898 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800d844:	4293      	cmp	r3, r2
 800d846:	d004      	beq.n	800d852 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	4a13      	ldr	r2, [pc, #76]	@ (800d89c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800d84e:	4293      	cmp	r3, r2
 800d850:	d10c      	bne.n	800d86c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d852:	68bb      	ldr	r3, [r7, #8]
 800d854:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d858:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d85a:	683b      	ldr	r3, [r7, #0]
 800d85c:	685b      	ldr	r3, [r3, #4]
 800d85e:	68ba      	ldr	r2, [r7, #8]
 800d860:	4313      	orrs	r3, r2
 800d862:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	68ba      	ldr	r2, [r7, #8]
 800d86a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	2201      	movs	r2, #1
 800d870:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	2200      	movs	r2, #0
 800d878:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d87c:	2300      	movs	r3, #0
}
 800d87e:	4618      	mov	r0, r3
 800d880:	3714      	adds	r7, #20
 800d882:	46bd      	mov	sp, r7
 800d884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d888:	4770      	bx	lr
 800d88a:	bf00      	nop
 800d88c:	40010000 	.word	0x40010000
 800d890:	40000400 	.word	0x40000400
 800d894:	40000800 	.word	0x40000800
 800d898:	40000c00 	.word	0x40000c00
 800d89c:	40014000 	.word	0x40014000

0800d8a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d8a0:	b480      	push	{r7}
 800d8a2:	b083      	sub	sp, #12
 800d8a4:	af00      	add	r7, sp, #0
 800d8a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d8a8:	bf00      	nop
 800d8aa:	370c      	adds	r7, #12
 800d8ac:	46bd      	mov	sp, r7
 800d8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8b2:	4770      	bx	lr

0800d8b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d8b4:	b480      	push	{r7}
 800d8b6:	b083      	sub	sp, #12
 800d8b8:	af00      	add	r7, sp, #0
 800d8ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d8bc:	bf00      	nop
 800d8be:	370c      	adds	r7, #12
 800d8c0:	46bd      	mov	sp, r7
 800d8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c6:	4770      	bx	lr

0800d8c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d8c8:	b580      	push	{r7, lr}
 800d8ca:	b082      	sub	sp, #8
 800d8cc:	af00      	add	r7, sp, #0
 800d8ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d101      	bne.n	800d8da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d8d6:	2301      	movs	r3, #1
 800d8d8:	e042      	b.n	800d960 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d8e0:	b2db      	uxtb	r3, r3
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d106      	bne.n	800d8f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	2200      	movs	r2, #0
 800d8ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d8ee:	6878      	ldr	r0, [r7, #4]
 800d8f0:	f7f7 ff50 	bl	8005794 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	2224      	movs	r2, #36	@ 0x24
 800d8f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	68da      	ldr	r2, [r3, #12]
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800d90a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800d90c:	6878      	ldr	r0, [r7, #4]
 800d90e:	f000 fcdb 	bl	800e2c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	691a      	ldr	r2, [r3, #16]
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800d920:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	695a      	ldr	r2, [r3, #20]
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800d930:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	68da      	ldr	r2, [r3, #12]
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800d940:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	2200      	movs	r2, #0
 800d946:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	2220      	movs	r2, #32
 800d94c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	2220      	movs	r2, #32
 800d954:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	2200      	movs	r2, #0
 800d95c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800d95e:	2300      	movs	r3, #0
}
 800d960:	4618      	mov	r0, r3
 800d962:	3708      	adds	r7, #8
 800d964:	46bd      	mov	sp, r7
 800d966:	bd80      	pop	{r7, pc}

0800d968 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d968:	b580      	push	{r7, lr}
 800d96a:	b084      	sub	sp, #16
 800d96c:	af00      	add	r7, sp, #0
 800d96e:	60f8      	str	r0, [r7, #12]
 800d970:	60b9      	str	r1, [r7, #8]
 800d972:	4613      	mov	r3, r2
 800d974:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d97c:	b2db      	uxtb	r3, r3
 800d97e:	2b20      	cmp	r3, #32
 800d980:	d112      	bne.n	800d9a8 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800d982:	68bb      	ldr	r3, [r7, #8]
 800d984:	2b00      	cmp	r3, #0
 800d986:	d002      	beq.n	800d98e <HAL_UART_Receive_IT+0x26>
 800d988:	88fb      	ldrh	r3, [r7, #6]
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d101      	bne.n	800d992 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800d98e:	2301      	movs	r3, #1
 800d990:	e00b      	b.n	800d9aa <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	2200      	movs	r2, #0
 800d996:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800d998:	88fb      	ldrh	r3, [r7, #6]
 800d99a:	461a      	mov	r2, r3
 800d99c:	68b9      	ldr	r1, [r7, #8]
 800d99e:	68f8      	ldr	r0, [r7, #12]
 800d9a0:	f000 faba 	bl	800df18 <UART_Start_Receive_IT>
 800d9a4:	4603      	mov	r3, r0
 800d9a6:	e000      	b.n	800d9aa <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800d9a8:	2302      	movs	r3, #2
  }
}
 800d9aa:	4618      	mov	r0, r3
 800d9ac:	3710      	adds	r7, #16
 800d9ae:	46bd      	mov	sp, r7
 800d9b0:	bd80      	pop	{r7, pc}
	...

0800d9b4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d9b4:	b580      	push	{r7, lr}
 800d9b6:	b0ba      	sub	sp, #232	@ 0xe8
 800d9b8:	af00      	add	r7, sp, #0
 800d9ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	68db      	ldr	r3, [r3, #12]
 800d9cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	695b      	ldr	r3, [r3, #20]
 800d9d6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800d9da:	2300      	movs	r3, #0
 800d9dc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800d9e0:	2300      	movs	r3, #0
 800d9e2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800d9e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d9ea:	f003 030f 	and.w	r3, r3, #15
 800d9ee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800d9f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d10f      	bne.n	800da1a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800d9fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d9fe:	f003 0320 	and.w	r3, r3, #32
 800da02:	2b00      	cmp	r3, #0
 800da04:	d009      	beq.n	800da1a <HAL_UART_IRQHandler+0x66>
 800da06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800da0a:	f003 0320 	and.w	r3, r3, #32
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d003      	beq.n	800da1a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800da12:	6878      	ldr	r0, [r7, #4]
 800da14:	f000 fb99 	bl	800e14a <UART_Receive_IT>
      return;
 800da18:	e25b      	b.n	800ded2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800da1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800da1e:	2b00      	cmp	r3, #0
 800da20:	f000 80de 	beq.w	800dbe0 <HAL_UART_IRQHandler+0x22c>
 800da24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800da28:	f003 0301 	and.w	r3, r3, #1
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d106      	bne.n	800da3e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800da30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800da34:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800da38:	2b00      	cmp	r3, #0
 800da3a:	f000 80d1 	beq.w	800dbe0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800da3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800da42:	f003 0301 	and.w	r3, r3, #1
 800da46:	2b00      	cmp	r3, #0
 800da48:	d00b      	beq.n	800da62 <HAL_UART_IRQHandler+0xae>
 800da4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800da4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800da52:	2b00      	cmp	r3, #0
 800da54:	d005      	beq.n	800da62 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800da5a:	f043 0201 	orr.w	r2, r3, #1
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800da62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800da66:	f003 0304 	and.w	r3, r3, #4
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d00b      	beq.n	800da86 <HAL_UART_IRQHandler+0xd2>
 800da6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800da72:	f003 0301 	and.w	r3, r3, #1
 800da76:	2b00      	cmp	r3, #0
 800da78:	d005      	beq.n	800da86 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800da7e:	f043 0202 	orr.w	r2, r3, #2
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800da86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800da8a:	f003 0302 	and.w	r3, r3, #2
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d00b      	beq.n	800daaa <HAL_UART_IRQHandler+0xf6>
 800da92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800da96:	f003 0301 	and.w	r3, r3, #1
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d005      	beq.n	800daaa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800daa2:	f043 0204 	orr.w	r2, r3, #4
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800daaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800daae:	f003 0308 	and.w	r3, r3, #8
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d011      	beq.n	800dada <HAL_UART_IRQHandler+0x126>
 800dab6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800daba:	f003 0320 	and.w	r3, r3, #32
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d105      	bne.n	800dace <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800dac2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800dac6:	f003 0301 	and.w	r3, r3, #1
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d005      	beq.n	800dada <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dad2:	f043 0208 	orr.w	r2, r3, #8
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dade:	2b00      	cmp	r3, #0
 800dae0:	f000 81f2 	beq.w	800dec8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800dae4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dae8:	f003 0320 	and.w	r3, r3, #32
 800daec:	2b00      	cmp	r3, #0
 800daee:	d008      	beq.n	800db02 <HAL_UART_IRQHandler+0x14e>
 800daf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800daf4:	f003 0320 	and.w	r3, r3, #32
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d002      	beq.n	800db02 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800dafc:	6878      	ldr	r0, [r7, #4]
 800dafe:	f000 fb24 	bl	800e14a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	695b      	ldr	r3, [r3, #20]
 800db08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800db0c:	2b40      	cmp	r3, #64	@ 0x40
 800db0e:	bf0c      	ite	eq
 800db10:	2301      	moveq	r3, #1
 800db12:	2300      	movne	r3, #0
 800db14:	b2db      	uxtb	r3, r3
 800db16:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800db1e:	f003 0308 	and.w	r3, r3, #8
 800db22:	2b00      	cmp	r3, #0
 800db24:	d103      	bne.n	800db2e <HAL_UART_IRQHandler+0x17a>
 800db26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d04f      	beq.n	800dbce <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800db2e:	6878      	ldr	r0, [r7, #4]
 800db30:	f000 fa2c 	bl	800df8c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	695b      	ldr	r3, [r3, #20]
 800db3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800db3e:	2b40      	cmp	r3, #64	@ 0x40
 800db40:	d141      	bne.n	800dbc6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	3314      	adds	r3, #20
 800db48:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800db50:	e853 3f00 	ldrex	r3, [r3]
 800db54:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800db58:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800db5c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800db60:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	3314      	adds	r3, #20
 800db6a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800db6e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800db72:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db76:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800db7a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800db7e:	e841 2300 	strex	r3, r2, [r1]
 800db82:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800db86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d1d9      	bne.n	800db42 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800db92:	2b00      	cmp	r3, #0
 800db94:	d013      	beq.n	800dbbe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800db9a:	4a7e      	ldr	r2, [pc, #504]	@ (800dd94 <HAL_UART_IRQHandler+0x3e0>)
 800db9c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dba2:	4618      	mov	r0, r3
 800dba4:	f7f8 ffa0 	bl	8006ae8 <HAL_DMA_Abort_IT>
 800dba8:	4603      	mov	r3, r0
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d016      	beq.n	800dbdc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dbb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dbb4:	687a      	ldr	r2, [r7, #4]
 800dbb6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800dbb8:	4610      	mov	r0, r2
 800dbba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dbbc:	e00e      	b.n	800dbdc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800dbbe:	6878      	ldr	r0, [r7, #4]
 800dbc0:	f000 f994 	bl	800deec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dbc4:	e00a      	b.n	800dbdc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800dbc6:	6878      	ldr	r0, [r7, #4]
 800dbc8:	f000 f990 	bl	800deec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dbcc:	e006      	b.n	800dbdc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800dbce:	6878      	ldr	r0, [r7, #4]
 800dbd0:	f000 f98c 	bl	800deec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	2200      	movs	r2, #0
 800dbd8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800dbda:	e175      	b.n	800dec8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dbdc:	bf00      	nop
    return;
 800dbde:	e173      	b.n	800dec8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dbe4:	2b01      	cmp	r3, #1
 800dbe6:	f040 814f 	bne.w	800de88 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800dbea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dbee:	f003 0310 	and.w	r3, r3, #16
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	f000 8148 	beq.w	800de88 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800dbf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800dbfc:	f003 0310 	and.w	r3, r3, #16
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	f000 8141 	beq.w	800de88 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800dc06:	2300      	movs	r3, #0
 800dc08:	60bb      	str	r3, [r7, #8]
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	60bb      	str	r3, [r7, #8]
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	685b      	ldr	r3, [r3, #4]
 800dc18:	60bb      	str	r3, [r7, #8]
 800dc1a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	695b      	ldr	r3, [r3, #20]
 800dc22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dc26:	2b40      	cmp	r3, #64	@ 0x40
 800dc28:	f040 80b6 	bne.w	800dd98 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	685b      	ldr	r3, [r3, #4]
 800dc34:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800dc38:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	f000 8145 	beq.w	800decc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800dc46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800dc4a:	429a      	cmp	r2, r3
 800dc4c:	f080 813e 	bcs.w	800decc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800dc56:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dc5c:	69db      	ldr	r3, [r3, #28]
 800dc5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800dc62:	f000 8088 	beq.w	800dd76 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	330c      	adds	r3, #12
 800dc6c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc70:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800dc74:	e853 3f00 	ldrex	r3, [r3]
 800dc78:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800dc7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800dc80:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800dc84:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	330c      	adds	r3, #12
 800dc8e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800dc92:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800dc96:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc9a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800dc9e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800dca2:	e841 2300 	strex	r3, r2, [r1]
 800dca6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800dcaa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d1d9      	bne.n	800dc66 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	3314      	adds	r3, #20
 800dcb8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800dcbc:	e853 3f00 	ldrex	r3, [r3]
 800dcc0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800dcc2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800dcc4:	f023 0301 	bic.w	r3, r3, #1
 800dcc8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	3314      	adds	r3, #20
 800dcd2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800dcd6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800dcda:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dcdc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800dcde:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800dce2:	e841 2300 	strex	r3, r2, [r1]
 800dce6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800dce8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d1e1      	bne.n	800dcb2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	3314      	adds	r3, #20
 800dcf4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcf6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800dcf8:	e853 3f00 	ldrex	r3, [r3]
 800dcfc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800dcfe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dd00:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dd04:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	3314      	adds	r3, #20
 800dd0e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800dd12:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800dd14:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd16:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800dd18:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800dd1a:	e841 2300 	strex	r3, r2, [r1]
 800dd1e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800dd20:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d1e3      	bne.n	800dcee <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	2220      	movs	r2, #32
 800dd2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	2200      	movs	r2, #0
 800dd32:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	330c      	adds	r3, #12
 800dd3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dd3e:	e853 3f00 	ldrex	r3, [r3]
 800dd42:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800dd44:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dd46:	f023 0310 	bic.w	r3, r3, #16
 800dd4a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	330c      	adds	r3, #12
 800dd54:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800dd58:	65ba      	str	r2, [r7, #88]	@ 0x58
 800dd5a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd5c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800dd5e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800dd60:	e841 2300 	strex	r3, r2, [r1]
 800dd64:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800dd66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d1e3      	bne.n	800dd34 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dd70:	4618      	mov	r0, r3
 800dd72:	f7f8 fe49 	bl	8006a08 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	2202      	movs	r2, #2
 800dd7a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800dd84:	b29b      	uxth	r3, r3
 800dd86:	1ad3      	subs	r3, r2, r3
 800dd88:	b29b      	uxth	r3, r3
 800dd8a:	4619      	mov	r1, r3
 800dd8c:	6878      	ldr	r0, [r7, #4]
 800dd8e:	f000 f8b7 	bl	800df00 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800dd92:	e09b      	b.n	800decc <HAL_UART_IRQHandler+0x518>
 800dd94:	0800e053 	.word	0x0800e053
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800dda0:	b29b      	uxth	r3, r3
 800dda2:	1ad3      	subs	r3, r2, r3
 800dda4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800ddac:	b29b      	uxth	r3, r3
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	f000 808e 	beq.w	800ded0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800ddb4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	f000 8089 	beq.w	800ded0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	330c      	adds	r3, #12
 800ddc4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ddc8:	e853 3f00 	ldrex	r3, [r3]
 800ddcc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ddce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ddd0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ddd4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	330c      	adds	r3, #12
 800ddde:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800dde2:	647a      	str	r2, [r7, #68]	@ 0x44
 800dde4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dde6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800dde8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ddea:	e841 2300 	strex	r3, r2, [r1]
 800ddee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ddf0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d1e3      	bne.n	800ddbe <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	3314      	adds	r3, #20
 800ddfc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de00:	e853 3f00 	ldrex	r3, [r3]
 800de04:	623b      	str	r3, [r7, #32]
   return(result);
 800de06:	6a3b      	ldr	r3, [r7, #32]
 800de08:	f023 0301 	bic.w	r3, r3, #1
 800de0c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	3314      	adds	r3, #20
 800de16:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800de1a:	633a      	str	r2, [r7, #48]	@ 0x30
 800de1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de1e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800de20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800de22:	e841 2300 	strex	r3, r2, [r1]
 800de26:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800de28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d1e3      	bne.n	800ddf6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	2220      	movs	r2, #32
 800de32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	2200      	movs	r2, #0
 800de3a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	330c      	adds	r3, #12
 800de42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de44:	693b      	ldr	r3, [r7, #16]
 800de46:	e853 3f00 	ldrex	r3, [r3]
 800de4a:	60fb      	str	r3, [r7, #12]
   return(result);
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	f023 0310 	bic.w	r3, r3, #16
 800de52:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	330c      	adds	r3, #12
 800de5c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800de60:	61fa      	str	r2, [r7, #28]
 800de62:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de64:	69b9      	ldr	r1, [r7, #24]
 800de66:	69fa      	ldr	r2, [r7, #28]
 800de68:	e841 2300 	strex	r3, r2, [r1]
 800de6c:	617b      	str	r3, [r7, #20]
   return(result);
 800de6e:	697b      	ldr	r3, [r7, #20]
 800de70:	2b00      	cmp	r3, #0
 800de72:	d1e3      	bne.n	800de3c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	2202      	movs	r2, #2
 800de78:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800de7a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800de7e:	4619      	mov	r1, r3
 800de80:	6878      	ldr	r0, [r7, #4]
 800de82:	f000 f83d 	bl	800df00 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800de86:	e023      	b.n	800ded0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800de88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800de8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800de90:	2b00      	cmp	r3, #0
 800de92:	d009      	beq.n	800dea8 <HAL_UART_IRQHandler+0x4f4>
 800de94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800de98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d003      	beq.n	800dea8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800dea0:	6878      	ldr	r0, [r7, #4]
 800dea2:	f000 f8ea 	bl	800e07a <UART_Transmit_IT>
    return;
 800dea6:	e014      	b.n	800ded2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800dea8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800deac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d00e      	beq.n	800ded2 <HAL_UART_IRQHandler+0x51e>
 800deb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800deb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800debc:	2b00      	cmp	r3, #0
 800debe:	d008      	beq.n	800ded2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800dec0:	6878      	ldr	r0, [r7, #4]
 800dec2:	f000 f92a 	bl	800e11a <UART_EndTransmit_IT>
    return;
 800dec6:	e004      	b.n	800ded2 <HAL_UART_IRQHandler+0x51e>
    return;
 800dec8:	bf00      	nop
 800deca:	e002      	b.n	800ded2 <HAL_UART_IRQHandler+0x51e>
      return;
 800decc:	bf00      	nop
 800dece:	e000      	b.n	800ded2 <HAL_UART_IRQHandler+0x51e>
      return;
 800ded0:	bf00      	nop
  }
}
 800ded2:	37e8      	adds	r7, #232	@ 0xe8
 800ded4:	46bd      	mov	sp, r7
 800ded6:	bd80      	pop	{r7, pc}

0800ded8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ded8:	b480      	push	{r7}
 800deda:	b083      	sub	sp, #12
 800dedc:	af00      	add	r7, sp, #0
 800dede:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800dee0:	bf00      	nop
 800dee2:	370c      	adds	r7, #12
 800dee4:	46bd      	mov	sp, r7
 800dee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deea:	4770      	bx	lr

0800deec <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800deec:	b480      	push	{r7}
 800deee:	b083      	sub	sp, #12
 800def0:	af00      	add	r7, sp, #0
 800def2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800def4:	bf00      	nop
 800def6:	370c      	adds	r7, #12
 800def8:	46bd      	mov	sp, r7
 800defa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800defe:	4770      	bx	lr

0800df00 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800df00:	b480      	push	{r7}
 800df02:	b083      	sub	sp, #12
 800df04:	af00      	add	r7, sp, #0
 800df06:	6078      	str	r0, [r7, #4]
 800df08:	460b      	mov	r3, r1
 800df0a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800df0c:	bf00      	nop
 800df0e:	370c      	adds	r7, #12
 800df10:	46bd      	mov	sp, r7
 800df12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df16:	4770      	bx	lr

0800df18 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800df18:	b480      	push	{r7}
 800df1a:	b085      	sub	sp, #20
 800df1c:	af00      	add	r7, sp, #0
 800df1e:	60f8      	str	r0, [r7, #12]
 800df20:	60b9      	str	r1, [r7, #8]
 800df22:	4613      	mov	r3, r2
 800df24:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	68ba      	ldr	r2, [r7, #8]
 800df2a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	88fa      	ldrh	r2, [r7, #6]
 800df30:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	88fa      	ldrh	r2, [r7, #6]
 800df36:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	2200      	movs	r2, #0
 800df3c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	2222      	movs	r2, #34	@ 0x22
 800df42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	691b      	ldr	r3, [r3, #16]
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d007      	beq.n	800df5e <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	68da      	ldr	r2, [r3, #12]
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800df5c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	695a      	ldr	r2, [r3, #20]
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	f042 0201 	orr.w	r2, r2, #1
 800df6c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	68da      	ldr	r2, [r3, #12]
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	f042 0220 	orr.w	r2, r2, #32
 800df7c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800df7e:	2300      	movs	r3, #0
}
 800df80:	4618      	mov	r0, r3
 800df82:	3714      	adds	r7, #20
 800df84:	46bd      	mov	sp, r7
 800df86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df8a:	4770      	bx	lr

0800df8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800df8c:	b480      	push	{r7}
 800df8e:	b095      	sub	sp, #84	@ 0x54
 800df90:	af00      	add	r7, sp, #0
 800df92:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	330c      	adds	r3, #12
 800df9a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800df9e:	e853 3f00 	ldrex	r3, [r3]
 800dfa2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800dfa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfa6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800dfaa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	330c      	adds	r3, #12
 800dfb2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800dfb4:	643a      	str	r2, [r7, #64]	@ 0x40
 800dfb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfb8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800dfba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800dfbc:	e841 2300 	strex	r3, r2, [r1]
 800dfc0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800dfc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d1e5      	bne.n	800df94 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	3314      	adds	r3, #20
 800dfce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfd0:	6a3b      	ldr	r3, [r7, #32]
 800dfd2:	e853 3f00 	ldrex	r3, [r3]
 800dfd6:	61fb      	str	r3, [r7, #28]
   return(result);
 800dfd8:	69fb      	ldr	r3, [r7, #28]
 800dfda:	f023 0301 	bic.w	r3, r3, #1
 800dfde:	64bb      	str	r3, [r7, #72]	@ 0x48
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	3314      	adds	r3, #20
 800dfe6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800dfe8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800dfea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800dfee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dff0:	e841 2300 	strex	r3, r2, [r1]
 800dff4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800dff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d1e5      	bne.n	800dfc8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e000:	2b01      	cmp	r3, #1
 800e002:	d119      	bne.n	800e038 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	330c      	adds	r3, #12
 800e00a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	e853 3f00 	ldrex	r3, [r3]
 800e012:	60bb      	str	r3, [r7, #8]
   return(result);
 800e014:	68bb      	ldr	r3, [r7, #8]
 800e016:	f023 0310 	bic.w	r3, r3, #16
 800e01a:	647b      	str	r3, [r7, #68]	@ 0x44
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	330c      	adds	r3, #12
 800e022:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e024:	61ba      	str	r2, [r7, #24]
 800e026:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e028:	6979      	ldr	r1, [r7, #20]
 800e02a:	69ba      	ldr	r2, [r7, #24]
 800e02c:	e841 2300 	strex	r3, r2, [r1]
 800e030:	613b      	str	r3, [r7, #16]
   return(result);
 800e032:	693b      	ldr	r3, [r7, #16]
 800e034:	2b00      	cmp	r3, #0
 800e036:	d1e5      	bne.n	800e004 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	2220      	movs	r2, #32
 800e03c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	2200      	movs	r2, #0
 800e044:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800e046:	bf00      	nop
 800e048:	3754      	adds	r7, #84	@ 0x54
 800e04a:	46bd      	mov	sp, r7
 800e04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e050:	4770      	bx	lr

0800e052 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e052:	b580      	push	{r7, lr}
 800e054:	b084      	sub	sp, #16
 800e056:	af00      	add	r7, sp, #0
 800e058:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e05e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	2200      	movs	r2, #0
 800e064:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	2200      	movs	r2, #0
 800e06a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e06c:	68f8      	ldr	r0, [r7, #12]
 800e06e:	f7ff ff3d 	bl	800deec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e072:	bf00      	nop
 800e074:	3710      	adds	r7, #16
 800e076:	46bd      	mov	sp, r7
 800e078:	bd80      	pop	{r7, pc}

0800e07a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800e07a:	b480      	push	{r7}
 800e07c:	b085      	sub	sp, #20
 800e07e:	af00      	add	r7, sp, #0
 800e080:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e088:	b2db      	uxtb	r3, r3
 800e08a:	2b21      	cmp	r3, #33	@ 0x21
 800e08c:	d13e      	bne.n	800e10c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	689b      	ldr	r3, [r3, #8]
 800e092:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e096:	d114      	bne.n	800e0c2 <UART_Transmit_IT+0x48>
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	691b      	ldr	r3, [r3, #16]
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d110      	bne.n	800e0c2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	6a1b      	ldr	r3, [r3, #32]
 800e0a4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	881b      	ldrh	r3, [r3, #0]
 800e0aa:	461a      	mov	r2, r3
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e0b4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	6a1b      	ldr	r3, [r3, #32]
 800e0ba:	1c9a      	adds	r2, r3, #2
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	621a      	str	r2, [r3, #32]
 800e0c0:	e008      	b.n	800e0d4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	6a1b      	ldr	r3, [r3, #32]
 800e0c6:	1c59      	adds	r1, r3, #1
 800e0c8:	687a      	ldr	r2, [r7, #4]
 800e0ca:	6211      	str	r1, [r2, #32]
 800e0cc:	781a      	ldrb	r2, [r3, #0]
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800e0d8:	b29b      	uxth	r3, r3
 800e0da:	3b01      	subs	r3, #1
 800e0dc:	b29b      	uxth	r3, r3
 800e0de:	687a      	ldr	r2, [r7, #4]
 800e0e0:	4619      	mov	r1, r3
 800e0e2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d10f      	bne.n	800e108 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	68da      	ldr	r2, [r3, #12]
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800e0f6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	68da      	ldr	r2, [r3, #12]
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e106:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800e108:	2300      	movs	r3, #0
 800e10a:	e000      	b.n	800e10e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800e10c:	2302      	movs	r3, #2
  }
}
 800e10e:	4618      	mov	r0, r3
 800e110:	3714      	adds	r7, #20
 800e112:	46bd      	mov	sp, r7
 800e114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e118:	4770      	bx	lr

0800e11a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e11a:	b580      	push	{r7, lr}
 800e11c:	b082      	sub	sp, #8
 800e11e:	af00      	add	r7, sp, #0
 800e120:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	68da      	ldr	r2, [r3, #12]
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800e130:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	2220      	movs	r2, #32
 800e136:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e13a:	6878      	ldr	r0, [r7, #4]
 800e13c:	f7ff fecc 	bl	800ded8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800e140:	2300      	movs	r3, #0
}
 800e142:	4618      	mov	r0, r3
 800e144:	3708      	adds	r7, #8
 800e146:	46bd      	mov	sp, r7
 800e148:	bd80      	pop	{r7, pc}

0800e14a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800e14a:	b580      	push	{r7, lr}
 800e14c:	b08c      	sub	sp, #48	@ 0x30
 800e14e:	af00      	add	r7, sp, #0
 800e150:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e158:	b2db      	uxtb	r3, r3
 800e15a:	2b22      	cmp	r3, #34	@ 0x22
 800e15c:	f040 80ae 	bne.w	800e2bc <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	689b      	ldr	r3, [r3, #8]
 800e164:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e168:	d117      	bne.n	800e19a <UART_Receive_IT+0x50>
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	691b      	ldr	r3, [r3, #16]
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d113      	bne.n	800e19a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800e172:	2300      	movs	r3, #0
 800e174:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e17a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	685b      	ldr	r3, [r3, #4]
 800e182:	b29b      	uxth	r3, r3
 800e184:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e188:	b29a      	uxth	r2, r3
 800e18a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e18c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e192:	1c9a      	adds	r2, r3, #2
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	629a      	str	r2, [r3, #40]	@ 0x28
 800e198:	e026      	b.n	800e1e8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e19e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800e1a0:	2300      	movs	r3, #0
 800e1a2:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	689b      	ldr	r3, [r3, #8]
 800e1a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e1ac:	d007      	beq.n	800e1be <UART_Receive_IT+0x74>
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	689b      	ldr	r3, [r3, #8]
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d10a      	bne.n	800e1cc <UART_Receive_IT+0x82>
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	691b      	ldr	r3, [r3, #16]
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d106      	bne.n	800e1cc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	685b      	ldr	r3, [r3, #4]
 800e1c4:	b2da      	uxtb	r2, r3
 800e1c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1c8:	701a      	strb	r2, [r3, #0]
 800e1ca:	e008      	b.n	800e1de <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	685b      	ldr	r3, [r3, #4]
 800e1d2:	b2db      	uxtb	r3, r3
 800e1d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e1d8:	b2da      	uxtb	r2, r3
 800e1da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1dc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e1e2:	1c5a      	adds	r2, r3, #1
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800e1ec:	b29b      	uxth	r3, r3
 800e1ee:	3b01      	subs	r3, #1
 800e1f0:	b29b      	uxth	r3, r3
 800e1f2:	687a      	ldr	r2, [r7, #4]
 800e1f4:	4619      	mov	r1, r3
 800e1f6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d15d      	bne.n	800e2b8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	68da      	ldr	r2, [r3, #12]
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	f022 0220 	bic.w	r2, r2, #32
 800e20a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	68da      	ldr	r2, [r3, #12]
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800e21a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	695a      	ldr	r2, [r3, #20]
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	f022 0201 	bic.w	r2, r2, #1
 800e22a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	2220      	movs	r2, #32
 800e230:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	2200      	movs	r2, #0
 800e238:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e23e:	2b01      	cmp	r3, #1
 800e240:	d135      	bne.n	800e2ae <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	2200      	movs	r2, #0
 800e246:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	330c      	adds	r3, #12
 800e24e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e250:	697b      	ldr	r3, [r7, #20]
 800e252:	e853 3f00 	ldrex	r3, [r3]
 800e256:	613b      	str	r3, [r7, #16]
   return(result);
 800e258:	693b      	ldr	r3, [r7, #16]
 800e25a:	f023 0310 	bic.w	r3, r3, #16
 800e25e:	627b      	str	r3, [r7, #36]	@ 0x24
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	330c      	adds	r3, #12
 800e266:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e268:	623a      	str	r2, [r7, #32]
 800e26a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e26c:	69f9      	ldr	r1, [r7, #28]
 800e26e:	6a3a      	ldr	r2, [r7, #32]
 800e270:	e841 2300 	strex	r3, r2, [r1]
 800e274:	61bb      	str	r3, [r7, #24]
   return(result);
 800e276:	69bb      	ldr	r3, [r7, #24]
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d1e5      	bne.n	800e248 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	f003 0310 	and.w	r3, r3, #16
 800e286:	2b10      	cmp	r3, #16
 800e288:	d10a      	bne.n	800e2a0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800e28a:	2300      	movs	r3, #0
 800e28c:	60fb      	str	r3, [r7, #12]
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	60fb      	str	r3, [r7, #12]
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	685b      	ldr	r3, [r3, #4]
 800e29c:	60fb      	str	r3, [r7, #12]
 800e29e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800e2a4:	4619      	mov	r1, r3
 800e2a6:	6878      	ldr	r0, [r7, #4]
 800e2a8:	f7ff fe2a 	bl	800df00 <HAL_UARTEx_RxEventCallback>
 800e2ac:	e002      	b.n	800e2b4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800e2ae:	6878      	ldr	r0, [r7, #4]
 800e2b0:	f7f6 fe84 	bl	8004fbc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800e2b4:	2300      	movs	r3, #0
 800e2b6:	e002      	b.n	800e2be <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800e2b8:	2300      	movs	r3, #0
 800e2ba:	e000      	b.n	800e2be <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800e2bc:	2302      	movs	r3, #2
  }
}
 800e2be:	4618      	mov	r0, r3
 800e2c0:	3730      	adds	r7, #48	@ 0x30
 800e2c2:	46bd      	mov	sp, r7
 800e2c4:	bd80      	pop	{r7, pc}
	...

0800e2c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e2c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e2cc:	b0c0      	sub	sp, #256	@ 0x100
 800e2ce:	af00      	add	r7, sp, #0
 800e2d0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e2d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	691b      	ldr	r3, [r3, #16]
 800e2dc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800e2e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e2e4:	68d9      	ldr	r1, [r3, #12]
 800e2e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e2ea:	681a      	ldr	r2, [r3, #0]
 800e2ec:	ea40 0301 	orr.w	r3, r0, r1
 800e2f0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800e2f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e2f6:	689a      	ldr	r2, [r3, #8]
 800e2f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e2fc:	691b      	ldr	r3, [r3, #16]
 800e2fe:	431a      	orrs	r2, r3
 800e300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e304:	695b      	ldr	r3, [r3, #20]
 800e306:	431a      	orrs	r2, r3
 800e308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e30c:	69db      	ldr	r3, [r3, #28]
 800e30e:	4313      	orrs	r3, r2
 800e310:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800e314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	68db      	ldr	r3, [r3, #12]
 800e31c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800e320:	f021 010c 	bic.w	r1, r1, #12
 800e324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e328:	681a      	ldr	r2, [r3, #0]
 800e32a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800e32e:	430b      	orrs	r3, r1
 800e330:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800e332:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	695b      	ldr	r3, [r3, #20]
 800e33a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800e33e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e342:	6999      	ldr	r1, [r3, #24]
 800e344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e348:	681a      	ldr	r2, [r3, #0]
 800e34a:	ea40 0301 	orr.w	r3, r0, r1
 800e34e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800e350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e354:	681a      	ldr	r2, [r3, #0]
 800e356:	4b8f      	ldr	r3, [pc, #572]	@ (800e594 <UART_SetConfig+0x2cc>)
 800e358:	429a      	cmp	r2, r3
 800e35a:	d005      	beq.n	800e368 <UART_SetConfig+0xa0>
 800e35c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e360:	681a      	ldr	r2, [r3, #0]
 800e362:	4b8d      	ldr	r3, [pc, #564]	@ (800e598 <UART_SetConfig+0x2d0>)
 800e364:	429a      	cmp	r2, r3
 800e366:	d104      	bne.n	800e372 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800e368:	f7fe fac8 	bl	800c8fc <HAL_RCC_GetPCLK2Freq>
 800e36c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800e370:	e003      	b.n	800e37a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800e372:	f7fe faaf 	bl	800c8d4 <HAL_RCC_GetPCLK1Freq>
 800e376:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e37a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e37e:	69db      	ldr	r3, [r3, #28]
 800e380:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e384:	f040 810c 	bne.w	800e5a0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800e388:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800e38c:	2200      	movs	r2, #0
 800e38e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800e392:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800e396:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800e39a:	4622      	mov	r2, r4
 800e39c:	462b      	mov	r3, r5
 800e39e:	1891      	adds	r1, r2, r2
 800e3a0:	65b9      	str	r1, [r7, #88]	@ 0x58
 800e3a2:	415b      	adcs	r3, r3
 800e3a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e3a6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800e3aa:	4621      	mov	r1, r4
 800e3ac:	eb12 0801 	adds.w	r8, r2, r1
 800e3b0:	4629      	mov	r1, r5
 800e3b2:	eb43 0901 	adc.w	r9, r3, r1
 800e3b6:	f04f 0200 	mov.w	r2, #0
 800e3ba:	f04f 0300 	mov.w	r3, #0
 800e3be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800e3c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800e3c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800e3ca:	4690      	mov	r8, r2
 800e3cc:	4699      	mov	r9, r3
 800e3ce:	4623      	mov	r3, r4
 800e3d0:	eb18 0303 	adds.w	r3, r8, r3
 800e3d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800e3d8:	462b      	mov	r3, r5
 800e3da:	eb49 0303 	adc.w	r3, r9, r3
 800e3de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800e3e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e3e6:	685b      	ldr	r3, [r3, #4]
 800e3e8:	2200      	movs	r2, #0
 800e3ea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800e3ee:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800e3f2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800e3f6:	460b      	mov	r3, r1
 800e3f8:	18db      	adds	r3, r3, r3
 800e3fa:	653b      	str	r3, [r7, #80]	@ 0x50
 800e3fc:	4613      	mov	r3, r2
 800e3fe:	eb42 0303 	adc.w	r3, r2, r3
 800e402:	657b      	str	r3, [r7, #84]	@ 0x54
 800e404:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800e408:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800e40c:	f7f2 fb36 	bl	8000a7c <__aeabi_uldivmod>
 800e410:	4602      	mov	r2, r0
 800e412:	460b      	mov	r3, r1
 800e414:	4b61      	ldr	r3, [pc, #388]	@ (800e59c <UART_SetConfig+0x2d4>)
 800e416:	fba3 2302 	umull	r2, r3, r3, r2
 800e41a:	095b      	lsrs	r3, r3, #5
 800e41c:	011c      	lsls	r4, r3, #4
 800e41e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800e422:	2200      	movs	r2, #0
 800e424:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800e428:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800e42c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800e430:	4642      	mov	r2, r8
 800e432:	464b      	mov	r3, r9
 800e434:	1891      	adds	r1, r2, r2
 800e436:	64b9      	str	r1, [r7, #72]	@ 0x48
 800e438:	415b      	adcs	r3, r3
 800e43a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e43c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800e440:	4641      	mov	r1, r8
 800e442:	eb12 0a01 	adds.w	sl, r2, r1
 800e446:	4649      	mov	r1, r9
 800e448:	eb43 0b01 	adc.w	fp, r3, r1
 800e44c:	f04f 0200 	mov.w	r2, #0
 800e450:	f04f 0300 	mov.w	r3, #0
 800e454:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800e458:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800e45c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e460:	4692      	mov	sl, r2
 800e462:	469b      	mov	fp, r3
 800e464:	4643      	mov	r3, r8
 800e466:	eb1a 0303 	adds.w	r3, sl, r3
 800e46a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800e46e:	464b      	mov	r3, r9
 800e470:	eb4b 0303 	adc.w	r3, fp, r3
 800e474:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800e478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e47c:	685b      	ldr	r3, [r3, #4]
 800e47e:	2200      	movs	r2, #0
 800e480:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800e484:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800e488:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800e48c:	460b      	mov	r3, r1
 800e48e:	18db      	adds	r3, r3, r3
 800e490:	643b      	str	r3, [r7, #64]	@ 0x40
 800e492:	4613      	mov	r3, r2
 800e494:	eb42 0303 	adc.w	r3, r2, r3
 800e498:	647b      	str	r3, [r7, #68]	@ 0x44
 800e49a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800e49e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800e4a2:	f7f2 faeb 	bl	8000a7c <__aeabi_uldivmod>
 800e4a6:	4602      	mov	r2, r0
 800e4a8:	460b      	mov	r3, r1
 800e4aa:	4611      	mov	r1, r2
 800e4ac:	4b3b      	ldr	r3, [pc, #236]	@ (800e59c <UART_SetConfig+0x2d4>)
 800e4ae:	fba3 2301 	umull	r2, r3, r3, r1
 800e4b2:	095b      	lsrs	r3, r3, #5
 800e4b4:	2264      	movs	r2, #100	@ 0x64
 800e4b6:	fb02 f303 	mul.w	r3, r2, r3
 800e4ba:	1acb      	subs	r3, r1, r3
 800e4bc:	00db      	lsls	r3, r3, #3
 800e4be:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800e4c2:	4b36      	ldr	r3, [pc, #216]	@ (800e59c <UART_SetConfig+0x2d4>)
 800e4c4:	fba3 2302 	umull	r2, r3, r3, r2
 800e4c8:	095b      	lsrs	r3, r3, #5
 800e4ca:	005b      	lsls	r3, r3, #1
 800e4cc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800e4d0:	441c      	add	r4, r3
 800e4d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800e4d6:	2200      	movs	r2, #0
 800e4d8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800e4dc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800e4e0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800e4e4:	4642      	mov	r2, r8
 800e4e6:	464b      	mov	r3, r9
 800e4e8:	1891      	adds	r1, r2, r2
 800e4ea:	63b9      	str	r1, [r7, #56]	@ 0x38
 800e4ec:	415b      	adcs	r3, r3
 800e4ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e4f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800e4f4:	4641      	mov	r1, r8
 800e4f6:	1851      	adds	r1, r2, r1
 800e4f8:	6339      	str	r1, [r7, #48]	@ 0x30
 800e4fa:	4649      	mov	r1, r9
 800e4fc:	414b      	adcs	r3, r1
 800e4fe:	637b      	str	r3, [r7, #52]	@ 0x34
 800e500:	f04f 0200 	mov.w	r2, #0
 800e504:	f04f 0300 	mov.w	r3, #0
 800e508:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800e50c:	4659      	mov	r1, fp
 800e50e:	00cb      	lsls	r3, r1, #3
 800e510:	4651      	mov	r1, sl
 800e512:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800e516:	4651      	mov	r1, sl
 800e518:	00ca      	lsls	r2, r1, #3
 800e51a:	4610      	mov	r0, r2
 800e51c:	4619      	mov	r1, r3
 800e51e:	4603      	mov	r3, r0
 800e520:	4642      	mov	r2, r8
 800e522:	189b      	adds	r3, r3, r2
 800e524:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800e528:	464b      	mov	r3, r9
 800e52a:	460a      	mov	r2, r1
 800e52c:	eb42 0303 	adc.w	r3, r2, r3
 800e530:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800e534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e538:	685b      	ldr	r3, [r3, #4]
 800e53a:	2200      	movs	r2, #0
 800e53c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800e540:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800e544:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800e548:	460b      	mov	r3, r1
 800e54a:	18db      	adds	r3, r3, r3
 800e54c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e54e:	4613      	mov	r3, r2
 800e550:	eb42 0303 	adc.w	r3, r2, r3
 800e554:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e556:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800e55a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800e55e:	f7f2 fa8d 	bl	8000a7c <__aeabi_uldivmod>
 800e562:	4602      	mov	r2, r0
 800e564:	460b      	mov	r3, r1
 800e566:	4b0d      	ldr	r3, [pc, #52]	@ (800e59c <UART_SetConfig+0x2d4>)
 800e568:	fba3 1302 	umull	r1, r3, r3, r2
 800e56c:	095b      	lsrs	r3, r3, #5
 800e56e:	2164      	movs	r1, #100	@ 0x64
 800e570:	fb01 f303 	mul.w	r3, r1, r3
 800e574:	1ad3      	subs	r3, r2, r3
 800e576:	00db      	lsls	r3, r3, #3
 800e578:	3332      	adds	r3, #50	@ 0x32
 800e57a:	4a08      	ldr	r2, [pc, #32]	@ (800e59c <UART_SetConfig+0x2d4>)
 800e57c:	fba2 2303 	umull	r2, r3, r2, r3
 800e580:	095b      	lsrs	r3, r3, #5
 800e582:	f003 0207 	and.w	r2, r3, #7
 800e586:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	4422      	add	r2, r4
 800e58e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800e590:	e106      	b.n	800e7a0 <UART_SetConfig+0x4d8>
 800e592:	bf00      	nop
 800e594:	40011000 	.word	0x40011000
 800e598:	40011400 	.word	0x40011400
 800e59c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800e5a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800e5a4:	2200      	movs	r2, #0
 800e5a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800e5aa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800e5ae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800e5b2:	4642      	mov	r2, r8
 800e5b4:	464b      	mov	r3, r9
 800e5b6:	1891      	adds	r1, r2, r2
 800e5b8:	6239      	str	r1, [r7, #32]
 800e5ba:	415b      	adcs	r3, r3
 800e5bc:	627b      	str	r3, [r7, #36]	@ 0x24
 800e5be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800e5c2:	4641      	mov	r1, r8
 800e5c4:	1854      	adds	r4, r2, r1
 800e5c6:	4649      	mov	r1, r9
 800e5c8:	eb43 0501 	adc.w	r5, r3, r1
 800e5cc:	f04f 0200 	mov.w	r2, #0
 800e5d0:	f04f 0300 	mov.w	r3, #0
 800e5d4:	00eb      	lsls	r3, r5, #3
 800e5d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800e5da:	00e2      	lsls	r2, r4, #3
 800e5dc:	4614      	mov	r4, r2
 800e5de:	461d      	mov	r5, r3
 800e5e0:	4643      	mov	r3, r8
 800e5e2:	18e3      	adds	r3, r4, r3
 800e5e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800e5e8:	464b      	mov	r3, r9
 800e5ea:	eb45 0303 	adc.w	r3, r5, r3
 800e5ee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800e5f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e5f6:	685b      	ldr	r3, [r3, #4]
 800e5f8:	2200      	movs	r2, #0
 800e5fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800e5fe:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800e602:	f04f 0200 	mov.w	r2, #0
 800e606:	f04f 0300 	mov.w	r3, #0
 800e60a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800e60e:	4629      	mov	r1, r5
 800e610:	008b      	lsls	r3, r1, #2
 800e612:	4621      	mov	r1, r4
 800e614:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800e618:	4621      	mov	r1, r4
 800e61a:	008a      	lsls	r2, r1, #2
 800e61c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800e620:	f7f2 fa2c 	bl	8000a7c <__aeabi_uldivmod>
 800e624:	4602      	mov	r2, r0
 800e626:	460b      	mov	r3, r1
 800e628:	4b60      	ldr	r3, [pc, #384]	@ (800e7ac <UART_SetConfig+0x4e4>)
 800e62a:	fba3 2302 	umull	r2, r3, r3, r2
 800e62e:	095b      	lsrs	r3, r3, #5
 800e630:	011c      	lsls	r4, r3, #4
 800e632:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800e636:	2200      	movs	r2, #0
 800e638:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800e63c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800e640:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800e644:	4642      	mov	r2, r8
 800e646:	464b      	mov	r3, r9
 800e648:	1891      	adds	r1, r2, r2
 800e64a:	61b9      	str	r1, [r7, #24]
 800e64c:	415b      	adcs	r3, r3
 800e64e:	61fb      	str	r3, [r7, #28]
 800e650:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e654:	4641      	mov	r1, r8
 800e656:	1851      	adds	r1, r2, r1
 800e658:	6139      	str	r1, [r7, #16]
 800e65a:	4649      	mov	r1, r9
 800e65c:	414b      	adcs	r3, r1
 800e65e:	617b      	str	r3, [r7, #20]
 800e660:	f04f 0200 	mov.w	r2, #0
 800e664:	f04f 0300 	mov.w	r3, #0
 800e668:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800e66c:	4659      	mov	r1, fp
 800e66e:	00cb      	lsls	r3, r1, #3
 800e670:	4651      	mov	r1, sl
 800e672:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800e676:	4651      	mov	r1, sl
 800e678:	00ca      	lsls	r2, r1, #3
 800e67a:	4610      	mov	r0, r2
 800e67c:	4619      	mov	r1, r3
 800e67e:	4603      	mov	r3, r0
 800e680:	4642      	mov	r2, r8
 800e682:	189b      	adds	r3, r3, r2
 800e684:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800e688:	464b      	mov	r3, r9
 800e68a:	460a      	mov	r2, r1
 800e68c:	eb42 0303 	adc.w	r3, r2, r3
 800e690:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e698:	685b      	ldr	r3, [r3, #4]
 800e69a:	2200      	movs	r2, #0
 800e69c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800e69e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800e6a0:	f04f 0200 	mov.w	r2, #0
 800e6a4:	f04f 0300 	mov.w	r3, #0
 800e6a8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800e6ac:	4649      	mov	r1, r9
 800e6ae:	008b      	lsls	r3, r1, #2
 800e6b0:	4641      	mov	r1, r8
 800e6b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800e6b6:	4641      	mov	r1, r8
 800e6b8:	008a      	lsls	r2, r1, #2
 800e6ba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800e6be:	f7f2 f9dd 	bl	8000a7c <__aeabi_uldivmod>
 800e6c2:	4602      	mov	r2, r0
 800e6c4:	460b      	mov	r3, r1
 800e6c6:	4611      	mov	r1, r2
 800e6c8:	4b38      	ldr	r3, [pc, #224]	@ (800e7ac <UART_SetConfig+0x4e4>)
 800e6ca:	fba3 2301 	umull	r2, r3, r3, r1
 800e6ce:	095b      	lsrs	r3, r3, #5
 800e6d0:	2264      	movs	r2, #100	@ 0x64
 800e6d2:	fb02 f303 	mul.w	r3, r2, r3
 800e6d6:	1acb      	subs	r3, r1, r3
 800e6d8:	011b      	lsls	r3, r3, #4
 800e6da:	3332      	adds	r3, #50	@ 0x32
 800e6dc:	4a33      	ldr	r2, [pc, #204]	@ (800e7ac <UART_SetConfig+0x4e4>)
 800e6de:	fba2 2303 	umull	r2, r3, r2, r3
 800e6e2:	095b      	lsrs	r3, r3, #5
 800e6e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e6e8:	441c      	add	r4, r3
 800e6ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800e6ee:	2200      	movs	r2, #0
 800e6f0:	673b      	str	r3, [r7, #112]	@ 0x70
 800e6f2:	677a      	str	r2, [r7, #116]	@ 0x74
 800e6f4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800e6f8:	4642      	mov	r2, r8
 800e6fa:	464b      	mov	r3, r9
 800e6fc:	1891      	adds	r1, r2, r2
 800e6fe:	60b9      	str	r1, [r7, #8]
 800e700:	415b      	adcs	r3, r3
 800e702:	60fb      	str	r3, [r7, #12]
 800e704:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e708:	4641      	mov	r1, r8
 800e70a:	1851      	adds	r1, r2, r1
 800e70c:	6039      	str	r1, [r7, #0]
 800e70e:	4649      	mov	r1, r9
 800e710:	414b      	adcs	r3, r1
 800e712:	607b      	str	r3, [r7, #4]
 800e714:	f04f 0200 	mov.w	r2, #0
 800e718:	f04f 0300 	mov.w	r3, #0
 800e71c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800e720:	4659      	mov	r1, fp
 800e722:	00cb      	lsls	r3, r1, #3
 800e724:	4651      	mov	r1, sl
 800e726:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800e72a:	4651      	mov	r1, sl
 800e72c:	00ca      	lsls	r2, r1, #3
 800e72e:	4610      	mov	r0, r2
 800e730:	4619      	mov	r1, r3
 800e732:	4603      	mov	r3, r0
 800e734:	4642      	mov	r2, r8
 800e736:	189b      	adds	r3, r3, r2
 800e738:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e73a:	464b      	mov	r3, r9
 800e73c:	460a      	mov	r2, r1
 800e73e:	eb42 0303 	adc.w	r3, r2, r3
 800e742:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800e744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e748:	685b      	ldr	r3, [r3, #4]
 800e74a:	2200      	movs	r2, #0
 800e74c:	663b      	str	r3, [r7, #96]	@ 0x60
 800e74e:	667a      	str	r2, [r7, #100]	@ 0x64
 800e750:	f04f 0200 	mov.w	r2, #0
 800e754:	f04f 0300 	mov.w	r3, #0
 800e758:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800e75c:	4649      	mov	r1, r9
 800e75e:	008b      	lsls	r3, r1, #2
 800e760:	4641      	mov	r1, r8
 800e762:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800e766:	4641      	mov	r1, r8
 800e768:	008a      	lsls	r2, r1, #2
 800e76a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800e76e:	f7f2 f985 	bl	8000a7c <__aeabi_uldivmod>
 800e772:	4602      	mov	r2, r0
 800e774:	460b      	mov	r3, r1
 800e776:	4b0d      	ldr	r3, [pc, #52]	@ (800e7ac <UART_SetConfig+0x4e4>)
 800e778:	fba3 1302 	umull	r1, r3, r3, r2
 800e77c:	095b      	lsrs	r3, r3, #5
 800e77e:	2164      	movs	r1, #100	@ 0x64
 800e780:	fb01 f303 	mul.w	r3, r1, r3
 800e784:	1ad3      	subs	r3, r2, r3
 800e786:	011b      	lsls	r3, r3, #4
 800e788:	3332      	adds	r3, #50	@ 0x32
 800e78a:	4a08      	ldr	r2, [pc, #32]	@ (800e7ac <UART_SetConfig+0x4e4>)
 800e78c:	fba2 2303 	umull	r2, r3, r2, r3
 800e790:	095b      	lsrs	r3, r3, #5
 800e792:	f003 020f 	and.w	r2, r3, #15
 800e796:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	4422      	add	r2, r4
 800e79e:	609a      	str	r2, [r3, #8]
}
 800e7a0:	bf00      	nop
 800e7a2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800e7a6:	46bd      	mov	sp, r7
 800e7a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e7ac:	51eb851f 	.word	0x51eb851f

0800e7b0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e7b0:	b084      	sub	sp, #16
 800e7b2:	b580      	push	{r7, lr}
 800e7b4:	b084      	sub	sp, #16
 800e7b6:	af00      	add	r7, sp, #0
 800e7b8:	6078      	str	r0, [r7, #4]
 800e7ba:	f107 001c 	add.w	r0, r7, #28
 800e7be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e7c2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800e7c6:	2b01      	cmp	r3, #1
 800e7c8:	d123      	bne.n	800e812 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e7ce:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	68db      	ldr	r3, [r3, #12]
 800e7da:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800e7de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e7e2:	687a      	ldr	r2, [r7, #4]
 800e7e4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	68db      	ldr	r3, [r3, #12]
 800e7ea:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800e7f2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800e7f6:	2b01      	cmp	r3, #1
 800e7f8:	d105      	bne.n	800e806 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	68db      	ldr	r3, [r3, #12]
 800e7fe:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800e806:	6878      	ldr	r0, [r7, #4]
 800e808:	f001 fae8 	bl	800fddc <USB_CoreReset>
 800e80c:	4603      	mov	r3, r0
 800e80e:	73fb      	strb	r3, [r7, #15]
 800e810:	e01b      	b.n	800e84a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	68db      	ldr	r3, [r3, #12]
 800e816:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800e81e:	6878      	ldr	r0, [r7, #4]
 800e820:	f001 fadc 	bl	800fddc <USB_CoreReset>
 800e824:	4603      	mov	r3, r0
 800e826:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800e828:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d106      	bne.n	800e83e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e834:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	639a      	str	r2, [r3, #56]	@ 0x38
 800e83c:	e005      	b.n	800e84a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e842:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800e84a:	7fbb      	ldrb	r3, [r7, #30]
 800e84c:	2b01      	cmp	r3, #1
 800e84e:	d10b      	bne.n	800e868 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	689b      	ldr	r3, [r3, #8]
 800e854:	f043 0206 	orr.w	r2, r3, #6
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	689b      	ldr	r3, [r3, #8]
 800e860:	f043 0220 	orr.w	r2, r3, #32
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800e868:	7bfb      	ldrb	r3, [r7, #15]
}
 800e86a:	4618      	mov	r0, r3
 800e86c:	3710      	adds	r7, #16
 800e86e:	46bd      	mov	sp, r7
 800e870:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e874:	b004      	add	sp, #16
 800e876:	4770      	bx	lr

0800e878 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800e878:	b480      	push	{r7}
 800e87a:	b087      	sub	sp, #28
 800e87c:	af00      	add	r7, sp, #0
 800e87e:	60f8      	str	r0, [r7, #12]
 800e880:	60b9      	str	r1, [r7, #8]
 800e882:	4613      	mov	r3, r2
 800e884:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800e886:	79fb      	ldrb	r3, [r7, #7]
 800e888:	2b02      	cmp	r3, #2
 800e88a:	d165      	bne.n	800e958 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800e88c:	68bb      	ldr	r3, [r7, #8]
 800e88e:	4a41      	ldr	r2, [pc, #260]	@ (800e994 <USB_SetTurnaroundTime+0x11c>)
 800e890:	4293      	cmp	r3, r2
 800e892:	d906      	bls.n	800e8a2 <USB_SetTurnaroundTime+0x2a>
 800e894:	68bb      	ldr	r3, [r7, #8]
 800e896:	4a40      	ldr	r2, [pc, #256]	@ (800e998 <USB_SetTurnaroundTime+0x120>)
 800e898:	4293      	cmp	r3, r2
 800e89a:	d202      	bcs.n	800e8a2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800e89c:	230f      	movs	r3, #15
 800e89e:	617b      	str	r3, [r7, #20]
 800e8a0:	e062      	b.n	800e968 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800e8a2:	68bb      	ldr	r3, [r7, #8]
 800e8a4:	4a3c      	ldr	r2, [pc, #240]	@ (800e998 <USB_SetTurnaroundTime+0x120>)
 800e8a6:	4293      	cmp	r3, r2
 800e8a8:	d306      	bcc.n	800e8b8 <USB_SetTurnaroundTime+0x40>
 800e8aa:	68bb      	ldr	r3, [r7, #8]
 800e8ac:	4a3b      	ldr	r2, [pc, #236]	@ (800e99c <USB_SetTurnaroundTime+0x124>)
 800e8ae:	4293      	cmp	r3, r2
 800e8b0:	d202      	bcs.n	800e8b8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800e8b2:	230e      	movs	r3, #14
 800e8b4:	617b      	str	r3, [r7, #20]
 800e8b6:	e057      	b.n	800e968 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800e8b8:	68bb      	ldr	r3, [r7, #8]
 800e8ba:	4a38      	ldr	r2, [pc, #224]	@ (800e99c <USB_SetTurnaroundTime+0x124>)
 800e8bc:	4293      	cmp	r3, r2
 800e8be:	d306      	bcc.n	800e8ce <USB_SetTurnaroundTime+0x56>
 800e8c0:	68bb      	ldr	r3, [r7, #8]
 800e8c2:	4a37      	ldr	r2, [pc, #220]	@ (800e9a0 <USB_SetTurnaroundTime+0x128>)
 800e8c4:	4293      	cmp	r3, r2
 800e8c6:	d202      	bcs.n	800e8ce <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800e8c8:	230d      	movs	r3, #13
 800e8ca:	617b      	str	r3, [r7, #20]
 800e8cc:	e04c      	b.n	800e968 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800e8ce:	68bb      	ldr	r3, [r7, #8]
 800e8d0:	4a33      	ldr	r2, [pc, #204]	@ (800e9a0 <USB_SetTurnaroundTime+0x128>)
 800e8d2:	4293      	cmp	r3, r2
 800e8d4:	d306      	bcc.n	800e8e4 <USB_SetTurnaroundTime+0x6c>
 800e8d6:	68bb      	ldr	r3, [r7, #8]
 800e8d8:	4a32      	ldr	r2, [pc, #200]	@ (800e9a4 <USB_SetTurnaroundTime+0x12c>)
 800e8da:	4293      	cmp	r3, r2
 800e8dc:	d802      	bhi.n	800e8e4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800e8de:	230c      	movs	r3, #12
 800e8e0:	617b      	str	r3, [r7, #20]
 800e8e2:	e041      	b.n	800e968 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800e8e4:	68bb      	ldr	r3, [r7, #8]
 800e8e6:	4a2f      	ldr	r2, [pc, #188]	@ (800e9a4 <USB_SetTurnaroundTime+0x12c>)
 800e8e8:	4293      	cmp	r3, r2
 800e8ea:	d906      	bls.n	800e8fa <USB_SetTurnaroundTime+0x82>
 800e8ec:	68bb      	ldr	r3, [r7, #8]
 800e8ee:	4a2e      	ldr	r2, [pc, #184]	@ (800e9a8 <USB_SetTurnaroundTime+0x130>)
 800e8f0:	4293      	cmp	r3, r2
 800e8f2:	d802      	bhi.n	800e8fa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800e8f4:	230b      	movs	r3, #11
 800e8f6:	617b      	str	r3, [r7, #20]
 800e8f8:	e036      	b.n	800e968 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800e8fa:	68bb      	ldr	r3, [r7, #8]
 800e8fc:	4a2a      	ldr	r2, [pc, #168]	@ (800e9a8 <USB_SetTurnaroundTime+0x130>)
 800e8fe:	4293      	cmp	r3, r2
 800e900:	d906      	bls.n	800e910 <USB_SetTurnaroundTime+0x98>
 800e902:	68bb      	ldr	r3, [r7, #8]
 800e904:	4a29      	ldr	r2, [pc, #164]	@ (800e9ac <USB_SetTurnaroundTime+0x134>)
 800e906:	4293      	cmp	r3, r2
 800e908:	d802      	bhi.n	800e910 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800e90a:	230a      	movs	r3, #10
 800e90c:	617b      	str	r3, [r7, #20]
 800e90e:	e02b      	b.n	800e968 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800e910:	68bb      	ldr	r3, [r7, #8]
 800e912:	4a26      	ldr	r2, [pc, #152]	@ (800e9ac <USB_SetTurnaroundTime+0x134>)
 800e914:	4293      	cmp	r3, r2
 800e916:	d906      	bls.n	800e926 <USB_SetTurnaroundTime+0xae>
 800e918:	68bb      	ldr	r3, [r7, #8]
 800e91a:	4a25      	ldr	r2, [pc, #148]	@ (800e9b0 <USB_SetTurnaroundTime+0x138>)
 800e91c:	4293      	cmp	r3, r2
 800e91e:	d202      	bcs.n	800e926 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800e920:	2309      	movs	r3, #9
 800e922:	617b      	str	r3, [r7, #20]
 800e924:	e020      	b.n	800e968 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800e926:	68bb      	ldr	r3, [r7, #8]
 800e928:	4a21      	ldr	r2, [pc, #132]	@ (800e9b0 <USB_SetTurnaroundTime+0x138>)
 800e92a:	4293      	cmp	r3, r2
 800e92c:	d306      	bcc.n	800e93c <USB_SetTurnaroundTime+0xc4>
 800e92e:	68bb      	ldr	r3, [r7, #8]
 800e930:	4a20      	ldr	r2, [pc, #128]	@ (800e9b4 <USB_SetTurnaroundTime+0x13c>)
 800e932:	4293      	cmp	r3, r2
 800e934:	d802      	bhi.n	800e93c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800e936:	2308      	movs	r3, #8
 800e938:	617b      	str	r3, [r7, #20]
 800e93a:	e015      	b.n	800e968 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800e93c:	68bb      	ldr	r3, [r7, #8]
 800e93e:	4a1d      	ldr	r2, [pc, #116]	@ (800e9b4 <USB_SetTurnaroundTime+0x13c>)
 800e940:	4293      	cmp	r3, r2
 800e942:	d906      	bls.n	800e952 <USB_SetTurnaroundTime+0xda>
 800e944:	68bb      	ldr	r3, [r7, #8]
 800e946:	4a1c      	ldr	r2, [pc, #112]	@ (800e9b8 <USB_SetTurnaroundTime+0x140>)
 800e948:	4293      	cmp	r3, r2
 800e94a:	d202      	bcs.n	800e952 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800e94c:	2307      	movs	r3, #7
 800e94e:	617b      	str	r3, [r7, #20]
 800e950:	e00a      	b.n	800e968 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800e952:	2306      	movs	r3, #6
 800e954:	617b      	str	r3, [r7, #20]
 800e956:	e007      	b.n	800e968 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800e958:	79fb      	ldrb	r3, [r7, #7]
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d102      	bne.n	800e964 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800e95e:	2309      	movs	r3, #9
 800e960:	617b      	str	r3, [r7, #20]
 800e962:	e001      	b.n	800e968 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800e964:	2309      	movs	r3, #9
 800e966:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	68db      	ldr	r3, [r3, #12]
 800e96c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	68da      	ldr	r2, [r3, #12]
 800e978:	697b      	ldr	r3, [r7, #20]
 800e97a:	029b      	lsls	r3, r3, #10
 800e97c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800e980:	431a      	orrs	r2, r3
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800e986:	2300      	movs	r3, #0
}
 800e988:	4618      	mov	r0, r3
 800e98a:	371c      	adds	r7, #28
 800e98c:	46bd      	mov	sp, r7
 800e98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e992:	4770      	bx	lr
 800e994:	00d8acbf 	.word	0x00d8acbf
 800e998:	00e4e1c0 	.word	0x00e4e1c0
 800e99c:	00f42400 	.word	0x00f42400
 800e9a0:	01067380 	.word	0x01067380
 800e9a4:	011a499f 	.word	0x011a499f
 800e9a8:	01312cff 	.word	0x01312cff
 800e9ac:	014ca43f 	.word	0x014ca43f
 800e9b0:	016e3600 	.word	0x016e3600
 800e9b4:	01a6ab1f 	.word	0x01a6ab1f
 800e9b8:	01e84800 	.word	0x01e84800

0800e9bc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e9bc:	b480      	push	{r7}
 800e9be:	b083      	sub	sp, #12
 800e9c0:	af00      	add	r7, sp, #0
 800e9c2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	689b      	ldr	r3, [r3, #8]
 800e9c8:	f043 0201 	orr.w	r2, r3, #1
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e9d0:	2300      	movs	r3, #0
}
 800e9d2:	4618      	mov	r0, r3
 800e9d4:	370c      	adds	r7, #12
 800e9d6:	46bd      	mov	sp, r7
 800e9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9dc:	4770      	bx	lr

0800e9de <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e9de:	b480      	push	{r7}
 800e9e0:	b083      	sub	sp, #12
 800e9e2:	af00      	add	r7, sp, #0
 800e9e4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	689b      	ldr	r3, [r3, #8]
 800e9ea:	f023 0201 	bic.w	r2, r3, #1
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e9f2:	2300      	movs	r3, #0
}
 800e9f4:	4618      	mov	r0, r3
 800e9f6:	370c      	adds	r7, #12
 800e9f8:	46bd      	mov	sp, r7
 800e9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9fe:	4770      	bx	lr

0800ea00 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800ea00:	b580      	push	{r7, lr}
 800ea02:	b084      	sub	sp, #16
 800ea04:	af00      	add	r7, sp, #0
 800ea06:	6078      	str	r0, [r7, #4]
 800ea08:	460b      	mov	r3, r1
 800ea0a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800ea0c:	2300      	movs	r3, #0
 800ea0e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	68db      	ldr	r3, [r3, #12]
 800ea14:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800ea1c:	78fb      	ldrb	r3, [r7, #3]
 800ea1e:	2b01      	cmp	r3, #1
 800ea20:	d115      	bne.n	800ea4e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	68db      	ldr	r3, [r3, #12]
 800ea26:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800ea2e:	200a      	movs	r0, #10
 800ea30:	f7f7 f892 	bl	8005b58 <HAL_Delay>
      ms += 10U;
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	330a      	adds	r3, #10
 800ea38:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800ea3a:	6878      	ldr	r0, [r7, #4]
 800ea3c:	f001 f93f 	bl	800fcbe <USB_GetMode>
 800ea40:	4603      	mov	r3, r0
 800ea42:	2b01      	cmp	r3, #1
 800ea44:	d01e      	beq.n	800ea84 <USB_SetCurrentMode+0x84>
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	2bc7      	cmp	r3, #199	@ 0xc7
 800ea4a:	d9f0      	bls.n	800ea2e <USB_SetCurrentMode+0x2e>
 800ea4c:	e01a      	b.n	800ea84 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800ea4e:	78fb      	ldrb	r3, [r7, #3]
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d115      	bne.n	800ea80 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	68db      	ldr	r3, [r3, #12]
 800ea58:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800ea60:	200a      	movs	r0, #10
 800ea62:	f7f7 f879 	bl	8005b58 <HAL_Delay>
      ms += 10U;
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	330a      	adds	r3, #10
 800ea6a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800ea6c:	6878      	ldr	r0, [r7, #4]
 800ea6e:	f001 f926 	bl	800fcbe <USB_GetMode>
 800ea72:	4603      	mov	r3, r0
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d005      	beq.n	800ea84 <USB_SetCurrentMode+0x84>
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	2bc7      	cmp	r3, #199	@ 0xc7
 800ea7c:	d9f0      	bls.n	800ea60 <USB_SetCurrentMode+0x60>
 800ea7e:	e001      	b.n	800ea84 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800ea80:	2301      	movs	r3, #1
 800ea82:	e005      	b.n	800ea90 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	2bc8      	cmp	r3, #200	@ 0xc8
 800ea88:	d101      	bne.n	800ea8e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800ea8a:	2301      	movs	r3, #1
 800ea8c:	e000      	b.n	800ea90 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800ea8e:	2300      	movs	r3, #0
}
 800ea90:	4618      	mov	r0, r3
 800ea92:	3710      	adds	r7, #16
 800ea94:	46bd      	mov	sp, r7
 800ea96:	bd80      	pop	{r7, pc}

0800ea98 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ea98:	b084      	sub	sp, #16
 800ea9a:	b580      	push	{r7, lr}
 800ea9c:	b086      	sub	sp, #24
 800ea9e:	af00      	add	r7, sp, #0
 800eaa0:	6078      	str	r0, [r7, #4]
 800eaa2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800eaa6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800eaaa:	2300      	movs	r3, #0
 800eaac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800eab2:	2300      	movs	r3, #0
 800eab4:	613b      	str	r3, [r7, #16]
 800eab6:	e009      	b.n	800eacc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800eab8:	687a      	ldr	r2, [r7, #4]
 800eaba:	693b      	ldr	r3, [r7, #16]
 800eabc:	3340      	adds	r3, #64	@ 0x40
 800eabe:	009b      	lsls	r3, r3, #2
 800eac0:	4413      	add	r3, r2
 800eac2:	2200      	movs	r2, #0
 800eac4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800eac6:	693b      	ldr	r3, [r7, #16]
 800eac8:	3301      	adds	r3, #1
 800eaca:	613b      	str	r3, [r7, #16]
 800eacc:	693b      	ldr	r3, [r7, #16]
 800eace:	2b0e      	cmp	r3, #14
 800ead0:	d9f2      	bls.n	800eab8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800ead2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d11c      	bne.n	800eb14 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800eae0:	685b      	ldr	r3, [r3, #4]
 800eae2:	68fa      	ldr	r2, [r7, #12]
 800eae4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800eae8:	f043 0302 	orr.w	r3, r3, #2
 800eaec:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eaf2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eafe:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eb0a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	639a      	str	r2, [r3, #56]	@ 0x38
 800eb12:	e00b      	b.n	800eb2c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eb18:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eb24:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800eb32:	461a      	mov	r2, r3
 800eb34:	2300      	movs	r3, #0
 800eb36:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800eb38:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800eb3c:	2b01      	cmp	r3, #1
 800eb3e:	d10d      	bne.n	800eb5c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800eb40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d104      	bne.n	800eb52 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800eb48:	2100      	movs	r1, #0
 800eb4a:	6878      	ldr	r0, [r7, #4]
 800eb4c:	f000 f968 	bl	800ee20 <USB_SetDevSpeed>
 800eb50:	e008      	b.n	800eb64 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800eb52:	2101      	movs	r1, #1
 800eb54:	6878      	ldr	r0, [r7, #4]
 800eb56:	f000 f963 	bl	800ee20 <USB_SetDevSpeed>
 800eb5a:	e003      	b.n	800eb64 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800eb5c:	2103      	movs	r1, #3
 800eb5e:	6878      	ldr	r0, [r7, #4]
 800eb60:	f000 f95e 	bl	800ee20 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800eb64:	2110      	movs	r1, #16
 800eb66:	6878      	ldr	r0, [r7, #4]
 800eb68:	f000 f8fa 	bl	800ed60 <USB_FlushTxFifo>
 800eb6c:	4603      	mov	r3, r0
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d001      	beq.n	800eb76 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800eb72:	2301      	movs	r3, #1
 800eb74:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800eb76:	6878      	ldr	r0, [r7, #4]
 800eb78:	f000 f924 	bl	800edc4 <USB_FlushRxFifo>
 800eb7c:	4603      	mov	r3, r0
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d001      	beq.n	800eb86 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800eb82:	2301      	movs	r3, #1
 800eb84:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800eb8c:	461a      	mov	r2, r3
 800eb8e:	2300      	movs	r3, #0
 800eb90:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800eb98:	461a      	mov	r2, r3
 800eb9a:	2300      	movs	r3, #0
 800eb9c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800eba4:	461a      	mov	r2, r3
 800eba6:	2300      	movs	r3, #0
 800eba8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ebaa:	2300      	movs	r3, #0
 800ebac:	613b      	str	r3, [r7, #16]
 800ebae:	e043      	b.n	800ec38 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ebb0:	693b      	ldr	r3, [r7, #16]
 800ebb2:	015a      	lsls	r2, r3, #5
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	4413      	add	r3, r2
 800ebb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ebbc:	681b      	ldr	r3, [r3, #0]
 800ebbe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ebc2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ebc6:	d118      	bne.n	800ebfa <USB_DevInit+0x162>
    {
      if (i == 0U)
 800ebc8:	693b      	ldr	r3, [r7, #16]
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	d10a      	bne.n	800ebe4 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ebce:	693b      	ldr	r3, [r7, #16]
 800ebd0:	015a      	lsls	r2, r3, #5
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	4413      	add	r3, r2
 800ebd6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ebda:	461a      	mov	r2, r3
 800ebdc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800ebe0:	6013      	str	r3, [r2, #0]
 800ebe2:	e013      	b.n	800ec0c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ebe4:	693b      	ldr	r3, [r7, #16]
 800ebe6:	015a      	lsls	r2, r3, #5
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	4413      	add	r3, r2
 800ebec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ebf0:	461a      	mov	r2, r3
 800ebf2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800ebf6:	6013      	str	r3, [r2, #0]
 800ebf8:	e008      	b.n	800ec0c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800ebfa:	693b      	ldr	r3, [r7, #16]
 800ebfc:	015a      	lsls	r2, r3, #5
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	4413      	add	r3, r2
 800ec02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ec06:	461a      	mov	r2, r3
 800ec08:	2300      	movs	r3, #0
 800ec0a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800ec0c:	693b      	ldr	r3, [r7, #16]
 800ec0e:	015a      	lsls	r2, r3, #5
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	4413      	add	r3, r2
 800ec14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ec18:	461a      	mov	r2, r3
 800ec1a:	2300      	movs	r3, #0
 800ec1c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ec1e:	693b      	ldr	r3, [r7, #16]
 800ec20:	015a      	lsls	r2, r3, #5
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	4413      	add	r3, r2
 800ec26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ec2a:	461a      	mov	r2, r3
 800ec2c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800ec30:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ec32:	693b      	ldr	r3, [r7, #16]
 800ec34:	3301      	adds	r3, #1
 800ec36:	613b      	str	r3, [r7, #16]
 800ec38:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800ec3c:	461a      	mov	r2, r3
 800ec3e:	693b      	ldr	r3, [r7, #16]
 800ec40:	4293      	cmp	r3, r2
 800ec42:	d3b5      	bcc.n	800ebb0 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ec44:	2300      	movs	r3, #0
 800ec46:	613b      	str	r3, [r7, #16]
 800ec48:	e043      	b.n	800ecd2 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ec4a:	693b      	ldr	r3, [r7, #16]
 800ec4c:	015a      	lsls	r2, r3, #5
 800ec4e:	68fb      	ldr	r3, [r7, #12]
 800ec50:	4413      	add	r3, r2
 800ec52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ec5c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ec60:	d118      	bne.n	800ec94 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800ec62:	693b      	ldr	r3, [r7, #16]
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d10a      	bne.n	800ec7e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ec68:	693b      	ldr	r3, [r7, #16]
 800ec6a:	015a      	lsls	r2, r3, #5
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	4413      	add	r3, r2
 800ec70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ec74:	461a      	mov	r2, r3
 800ec76:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800ec7a:	6013      	str	r3, [r2, #0]
 800ec7c:	e013      	b.n	800eca6 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ec7e:	693b      	ldr	r3, [r7, #16]
 800ec80:	015a      	lsls	r2, r3, #5
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	4413      	add	r3, r2
 800ec86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ec8a:	461a      	mov	r2, r3
 800ec8c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800ec90:	6013      	str	r3, [r2, #0]
 800ec92:	e008      	b.n	800eca6 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800ec94:	693b      	ldr	r3, [r7, #16]
 800ec96:	015a      	lsls	r2, r3, #5
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	4413      	add	r3, r2
 800ec9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eca0:	461a      	mov	r2, r3
 800eca2:	2300      	movs	r3, #0
 800eca4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800eca6:	693b      	ldr	r3, [r7, #16]
 800eca8:	015a      	lsls	r2, r3, #5
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	4413      	add	r3, r2
 800ecae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ecb2:	461a      	mov	r2, r3
 800ecb4:	2300      	movs	r3, #0
 800ecb6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800ecb8:	693b      	ldr	r3, [r7, #16]
 800ecba:	015a      	lsls	r2, r3, #5
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	4413      	add	r3, r2
 800ecc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ecc4:	461a      	mov	r2, r3
 800ecc6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800ecca:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800eccc:	693b      	ldr	r3, [r7, #16]
 800ecce:	3301      	adds	r3, #1
 800ecd0:	613b      	str	r3, [r7, #16]
 800ecd2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800ecd6:	461a      	mov	r2, r3
 800ecd8:	693b      	ldr	r3, [r7, #16]
 800ecda:	4293      	cmp	r3, r2
 800ecdc:	d3b5      	bcc.n	800ec4a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ece4:	691b      	ldr	r3, [r3, #16]
 800ece6:	68fa      	ldr	r2, [r7, #12]
 800ece8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ecec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ecf0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	2200      	movs	r2, #0
 800ecf6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800ecfe:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ed00:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d105      	bne.n	800ed14 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	699b      	ldr	r3, [r3, #24]
 800ed0c:	f043 0210 	orr.w	r2, r3, #16
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	699a      	ldr	r2, [r3, #24]
 800ed18:	4b10      	ldr	r3, [pc, #64]	@ (800ed5c <USB_DevInit+0x2c4>)
 800ed1a:	4313      	orrs	r3, r2
 800ed1c:	687a      	ldr	r2, [r7, #4]
 800ed1e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800ed20:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d005      	beq.n	800ed34 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	699b      	ldr	r3, [r3, #24]
 800ed2c:	f043 0208 	orr.w	r2, r3, #8
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800ed34:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800ed38:	2b01      	cmp	r3, #1
 800ed3a:	d107      	bne.n	800ed4c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	699b      	ldr	r3, [r3, #24]
 800ed40:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ed44:	f043 0304 	orr.w	r3, r3, #4
 800ed48:	687a      	ldr	r2, [r7, #4]
 800ed4a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800ed4c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ed4e:	4618      	mov	r0, r3
 800ed50:	3718      	adds	r7, #24
 800ed52:	46bd      	mov	sp, r7
 800ed54:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ed58:	b004      	add	sp, #16
 800ed5a:	4770      	bx	lr
 800ed5c:	803c3800 	.word	0x803c3800

0800ed60 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ed60:	b480      	push	{r7}
 800ed62:	b085      	sub	sp, #20
 800ed64:	af00      	add	r7, sp, #0
 800ed66:	6078      	str	r0, [r7, #4]
 800ed68:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ed6a:	2300      	movs	r3, #0
 800ed6c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	3301      	adds	r3, #1
 800ed72:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ed7a:	d901      	bls.n	800ed80 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800ed7c:	2303      	movs	r3, #3
 800ed7e:	e01b      	b.n	800edb8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	691b      	ldr	r3, [r3, #16]
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	daf2      	bge.n	800ed6e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800ed88:	2300      	movs	r3, #0
 800ed8a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ed8c:	683b      	ldr	r3, [r7, #0]
 800ed8e:	019b      	lsls	r3, r3, #6
 800ed90:	f043 0220 	orr.w	r2, r3, #32
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	3301      	adds	r3, #1
 800ed9c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800eda4:	d901      	bls.n	800edaa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800eda6:	2303      	movs	r3, #3
 800eda8:	e006      	b.n	800edb8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	691b      	ldr	r3, [r3, #16]
 800edae:	f003 0320 	and.w	r3, r3, #32
 800edb2:	2b20      	cmp	r3, #32
 800edb4:	d0f0      	beq.n	800ed98 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800edb6:	2300      	movs	r3, #0
}
 800edb8:	4618      	mov	r0, r3
 800edba:	3714      	adds	r7, #20
 800edbc:	46bd      	mov	sp, r7
 800edbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edc2:	4770      	bx	lr

0800edc4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800edc4:	b480      	push	{r7}
 800edc6:	b085      	sub	sp, #20
 800edc8:	af00      	add	r7, sp, #0
 800edca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800edcc:	2300      	movs	r3, #0
 800edce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	3301      	adds	r3, #1
 800edd4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800edd6:	68fb      	ldr	r3, [r7, #12]
 800edd8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800eddc:	d901      	bls.n	800ede2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800edde:	2303      	movs	r3, #3
 800ede0:	e018      	b.n	800ee14 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	691b      	ldr	r3, [r3, #16]
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	daf2      	bge.n	800edd0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800edea:	2300      	movs	r3, #0
 800edec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	2210      	movs	r2, #16
 800edf2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800edf4:	68fb      	ldr	r3, [r7, #12]
 800edf6:	3301      	adds	r3, #1
 800edf8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ee00:	d901      	bls.n	800ee06 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800ee02:	2303      	movs	r3, #3
 800ee04:	e006      	b.n	800ee14 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	691b      	ldr	r3, [r3, #16]
 800ee0a:	f003 0310 	and.w	r3, r3, #16
 800ee0e:	2b10      	cmp	r3, #16
 800ee10:	d0f0      	beq.n	800edf4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800ee12:	2300      	movs	r3, #0
}
 800ee14:	4618      	mov	r0, r3
 800ee16:	3714      	adds	r7, #20
 800ee18:	46bd      	mov	sp, r7
 800ee1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee1e:	4770      	bx	lr

0800ee20 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ee20:	b480      	push	{r7}
 800ee22:	b085      	sub	sp, #20
 800ee24:	af00      	add	r7, sp, #0
 800ee26:	6078      	str	r0, [r7, #4]
 800ee28:	460b      	mov	r3, r1
 800ee2a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ee36:	681a      	ldr	r2, [r3, #0]
 800ee38:	78fb      	ldrb	r3, [r7, #3]
 800ee3a:	68f9      	ldr	r1, [r7, #12]
 800ee3c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ee40:	4313      	orrs	r3, r2
 800ee42:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ee44:	2300      	movs	r3, #0
}
 800ee46:	4618      	mov	r0, r3
 800ee48:	3714      	adds	r7, #20
 800ee4a:	46bd      	mov	sp, r7
 800ee4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee50:	4770      	bx	lr

0800ee52 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800ee52:	b480      	push	{r7}
 800ee54:	b087      	sub	sp, #28
 800ee56:	af00      	add	r7, sp, #0
 800ee58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800ee5e:	693b      	ldr	r3, [r7, #16]
 800ee60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ee64:	689b      	ldr	r3, [r3, #8]
 800ee66:	f003 0306 	and.w	r3, r3, #6
 800ee6a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d102      	bne.n	800ee78 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800ee72:	2300      	movs	r3, #0
 800ee74:	75fb      	strb	r3, [r7, #23]
 800ee76:	e00a      	b.n	800ee8e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	2b02      	cmp	r3, #2
 800ee7c:	d002      	beq.n	800ee84 <USB_GetDevSpeed+0x32>
 800ee7e:	68fb      	ldr	r3, [r7, #12]
 800ee80:	2b06      	cmp	r3, #6
 800ee82:	d102      	bne.n	800ee8a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800ee84:	2302      	movs	r3, #2
 800ee86:	75fb      	strb	r3, [r7, #23]
 800ee88:	e001      	b.n	800ee8e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800ee8a:	230f      	movs	r3, #15
 800ee8c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800ee8e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ee90:	4618      	mov	r0, r3
 800ee92:	371c      	adds	r7, #28
 800ee94:	46bd      	mov	sp, r7
 800ee96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee9a:	4770      	bx	lr

0800ee9c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800ee9c:	b480      	push	{r7}
 800ee9e:	b085      	sub	sp, #20
 800eea0:	af00      	add	r7, sp, #0
 800eea2:	6078      	str	r0, [r7, #4]
 800eea4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800eeaa:	683b      	ldr	r3, [r7, #0]
 800eeac:	781b      	ldrb	r3, [r3, #0]
 800eeae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800eeb0:	683b      	ldr	r3, [r7, #0]
 800eeb2:	785b      	ldrb	r3, [r3, #1]
 800eeb4:	2b01      	cmp	r3, #1
 800eeb6:	d13a      	bne.n	800ef2e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800eeb8:	68fb      	ldr	r3, [r7, #12]
 800eeba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800eebe:	69da      	ldr	r2, [r3, #28]
 800eec0:	683b      	ldr	r3, [r7, #0]
 800eec2:	781b      	ldrb	r3, [r3, #0]
 800eec4:	f003 030f 	and.w	r3, r3, #15
 800eec8:	2101      	movs	r1, #1
 800eeca:	fa01 f303 	lsl.w	r3, r1, r3
 800eece:	b29b      	uxth	r3, r3
 800eed0:	68f9      	ldr	r1, [r7, #12]
 800eed2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800eed6:	4313      	orrs	r3, r2
 800eed8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800eeda:	68bb      	ldr	r3, [r7, #8]
 800eedc:	015a      	lsls	r2, r3, #5
 800eede:	68fb      	ldr	r3, [r7, #12]
 800eee0:	4413      	add	r3, r2
 800eee2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d155      	bne.n	800ef9c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800eef0:	68bb      	ldr	r3, [r7, #8]
 800eef2:	015a      	lsls	r2, r3, #5
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	4413      	add	r3, r2
 800eef8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eefc:	681a      	ldr	r2, [r3, #0]
 800eefe:	683b      	ldr	r3, [r7, #0]
 800ef00:	689b      	ldr	r3, [r3, #8]
 800ef02:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ef06:	683b      	ldr	r3, [r7, #0]
 800ef08:	791b      	ldrb	r3, [r3, #4]
 800ef0a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ef0c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ef0e:	68bb      	ldr	r3, [r7, #8]
 800ef10:	059b      	lsls	r3, r3, #22
 800ef12:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ef14:	4313      	orrs	r3, r2
 800ef16:	68ba      	ldr	r2, [r7, #8]
 800ef18:	0151      	lsls	r1, r2, #5
 800ef1a:	68fa      	ldr	r2, [r7, #12]
 800ef1c:	440a      	add	r2, r1
 800ef1e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ef22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ef26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ef2a:	6013      	str	r3, [r2, #0]
 800ef2c:	e036      	b.n	800ef9c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800ef2e:	68fb      	ldr	r3, [r7, #12]
 800ef30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ef34:	69da      	ldr	r2, [r3, #28]
 800ef36:	683b      	ldr	r3, [r7, #0]
 800ef38:	781b      	ldrb	r3, [r3, #0]
 800ef3a:	f003 030f 	and.w	r3, r3, #15
 800ef3e:	2101      	movs	r1, #1
 800ef40:	fa01 f303 	lsl.w	r3, r1, r3
 800ef44:	041b      	lsls	r3, r3, #16
 800ef46:	68f9      	ldr	r1, [r7, #12]
 800ef48:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ef4c:	4313      	orrs	r3, r2
 800ef4e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800ef50:	68bb      	ldr	r3, [r7, #8]
 800ef52:	015a      	lsls	r2, r3, #5
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	4413      	add	r3, r2
 800ef58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d11a      	bne.n	800ef9c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ef66:	68bb      	ldr	r3, [r7, #8]
 800ef68:	015a      	lsls	r2, r3, #5
 800ef6a:	68fb      	ldr	r3, [r7, #12]
 800ef6c:	4413      	add	r3, r2
 800ef6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ef72:	681a      	ldr	r2, [r3, #0]
 800ef74:	683b      	ldr	r3, [r7, #0]
 800ef76:	689b      	ldr	r3, [r3, #8]
 800ef78:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800ef7c:	683b      	ldr	r3, [r7, #0]
 800ef7e:	791b      	ldrb	r3, [r3, #4]
 800ef80:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ef82:	430b      	orrs	r3, r1
 800ef84:	4313      	orrs	r3, r2
 800ef86:	68ba      	ldr	r2, [r7, #8]
 800ef88:	0151      	lsls	r1, r2, #5
 800ef8a:	68fa      	ldr	r2, [r7, #12]
 800ef8c:	440a      	add	r2, r1
 800ef8e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ef92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ef96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ef9a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800ef9c:	2300      	movs	r3, #0
}
 800ef9e:	4618      	mov	r0, r3
 800efa0:	3714      	adds	r7, #20
 800efa2:	46bd      	mov	sp, r7
 800efa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efa8:	4770      	bx	lr
	...

0800efac <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800efac:	b480      	push	{r7}
 800efae:	b085      	sub	sp, #20
 800efb0:	af00      	add	r7, sp, #0
 800efb2:	6078      	str	r0, [r7, #4]
 800efb4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800efba:	683b      	ldr	r3, [r7, #0]
 800efbc:	781b      	ldrb	r3, [r3, #0]
 800efbe:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800efc0:	683b      	ldr	r3, [r7, #0]
 800efc2:	785b      	ldrb	r3, [r3, #1]
 800efc4:	2b01      	cmp	r3, #1
 800efc6:	d161      	bne.n	800f08c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800efc8:	68bb      	ldr	r3, [r7, #8]
 800efca:	015a      	lsls	r2, r3, #5
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	4413      	add	r3, r2
 800efd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800efda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800efde:	d11f      	bne.n	800f020 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800efe0:	68bb      	ldr	r3, [r7, #8]
 800efe2:	015a      	lsls	r2, r3, #5
 800efe4:	68fb      	ldr	r3, [r7, #12]
 800efe6:	4413      	add	r3, r2
 800efe8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	68ba      	ldr	r2, [r7, #8]
 800eff0:	0151      	lsls	r1, r2, #5
 800eff2:	68fa      	ldr	r2, [r7, #12]
 800eff4:	440a      	add	r2, r1
 800eff6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800effa:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800effe:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800f000:	68bb      	ldr	r3, [r7, #8]
 800f002:	015a      	lsls	r2, r3, #5
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	4413      	add	r3, r2
 800f008:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f00c:	681b      	ldr	r3, [r3, #0]
 800f00e:	68ba      	ldr	r2, [r7, #8]
 800f010:	0151      	lsls	r1, r2, #5
 800f012:	68fa      	ldr	r2, [r7, #12]
 800f014:	440a      	add	r2, r1
 800f016:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f01a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f01e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f026:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800f028:	683b      	ldr	r3, [r7, #0]
 800f02a:	781b      	ldrb	r3, [r3, #0]
 800f02c:	f003 030f 	and.w	r3, r3, #15
 800f030:	2101      	movs	r1, #1
 800f032:	fa01 f303 	lsl.w	r3, r1, r3
 800f036:	b29b      	uxth	r3, r3
 800f038:	43db      	mvns	r3, r3
 800f03a:	68f9      	ldr	r1, [r7, #12]
 800f03c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800f040:	4013      	ands	r3, r2
 800f042:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f04a:	69da      	ldr	r2, [r3, #28]
 800f04c:	683b      	ldr	r3, [r7, #0]
 800f04e:	781b      	ldrb	r3, [r3, #0]
 800f050:	f003 030f 	and.w	r3, r3, #15
 800f054:	2101      	movs	r1, #1
 800f056:	fa01 f303 	lsl.w	r3, r1, r3
 800f05a:	b29b      	uxth	r3, r3
 800f05c:	43db      	mvns	r3, r3
 800f05e:	68f9      	ldr	r1, [r7, #12]
 800f060:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800f064:	4013      	ands	r3, r2
 800f066:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800f068:	68bb      	ldr	r3, [r7, #8]
 800f06a:	015a      	lsls	r2, r3, #5
 800f06c:	68fb      	ldr	r3, [r7, #12]
 800f06e:	4413      	add	r3, r2
 800f070:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f074:	681a      	ldr	r2, [r3, #0]
 800f076:	68bb      	ldr	r3, [r7, #8]
 800f078:	0159      	lsls	r1, r3, #5
 800f07a:	68fb      	ldr	r3, [r7, #12]
 800f07c:	440b      	add	r3, r1
 800f07e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f082:	4619      	mov	r1, r3
 800f084:	4b35      	ldr	r3, [pc, #212]	@ (800f15c <USB_DeactivateEndpoint+0x1b0>)
 800f086:	4013      	ands	r3, r2
 800f088:	600b      	str	r3, [r1, #0]
 800f08a:	e060      	b.n	800f14e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f08c:	68bb      	ldr	r3, [r7, #8]
 800f08e:	015a      	lsls	r2, r3, #5
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	4413      	add	r3, r2
 800f094:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f09e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f0a2:	d11f      	bne.n	800f0e4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800f0a4:	68bb      	ldr	r3, [r7, #8]
 800f0a6:	015a      	lsls	r2, r3, #5
 800f0a8:	68fb      	ldr	r3, [r7, #12]
 800f0aa:	4413      	add	r3, r2
 800f0ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f0b0:	681b      	ldr	r3, [r3, #0]
 800f0b2:	68ba      	ldr	r2, [r7, #8]
 800f0b4:	0151      	lsls	r1, r2, #5
 800f0b6:	68fa      	ldr	r2, [r7, #12]
 800f0b8:	440a      	add	r2, r1
 800f0ba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f0be:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800f0c2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800f0c4:	68bb      	ldr	r3, [r7, #8]
 800f0c6:	015a      	lsls	r2, r3, #5
 800f0c8:	68fb      	ldr	r3, [r7, #12]
 800f0ca:	4413      	add	r3, r2
 800f0cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f0d0:	681b      	ldr	r3, [r3, #0]
 800f0d2:	68ba      	ldr	r2, [r7, #8]
 800f0d4:	0151      	lsls	r1, r2, #5
 800f0d6:	68fa      	ldr	r2, [r7, #12]
 800f0d8:	440a      	add	r2, r1
 800f0da:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f0de:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f0e2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800f0e4:	68fb      	ldr	r3, [r7, #12]
 800f0e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f0ea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800f0ec:	683b      	ldr	r3, [r7, #0]
 800f0ee:	781b      	ldrb	r3, [r3, #0]
 800f0f0:	f003 030f 	and.w	r3, r3, #15
 800f0f4:	2101      	movs	r1, #1
 800f0f6:	fa01 f303 	lsl.w	r3, r1, r3
 800f0fa:	041b      	lsls	r3, r3, #16
 800f0fc:	43db      	mvns	r3, r3
 800f0fe:	68f9      	ldr	r1, [r7, #12]
 800f100:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800f104:	4013      	ands	r3, r2
 800f106:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800f108:	68fb      	ldr	r3, [r7, #12]
 800f10a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f10e:	69da      	ldr	r2, [r3, #28]
 800f110:	683b      	ldr	r3, [r7, #0]
 800f112:	781b      	ldrb	r3, [r3, #0]
 800f114:	f003 030f 	and.w	r3, r3, #15
 800f118:	2101      	movs	r1, #1
 800f11a:	fa01 f303 	lsl.w	r3, r1, r3
 800f11e:	041b      	lsls	r3, r3, #16
 800f120:	43db      	mvns	r3, r3
 800f122:	68f9      	ldr	r1, [r7, #12]
 800f124:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800f128:	4013      	ands	r3, r2
 800f12a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800f12c:	68bb      	ldr	r3, [r7, #8]
 800f12e:	015a      	lsls	r2, r3, #5
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	4413      	add	r3, r2
 800f134:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f138:	681a      	ldr	r2, [r3, #0]
 800f13a:	68bb      	ldr	r3, [r7, #8]
 800f13c:	0159      	lsls	r1, r3, #5
 800f13e:	68fb      	ldr	r3, [r7, #12]
 800f140:	440b      	add	r3, r1
 800f142:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f146:	4619      	mov	r1, r3
 800f148:	4b05      	ldr	r3, [pc, #20]	@ (800f160 <USB_DeactivateEndpoint+0x1b4>)
 800f14a:	4013      	ands	r3, r2
 800f14c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800f14e:	2300      	movs	r3, #0
}
 800f150:	4618      	mov	r0, r3
 800f152:	3714      	adds	r7, #20
 800f154:	46bd      	mov	sp, r7
 800f156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f15a:	4770      	bx	lr
 800f15c:	ec337800 	.word	0xec337800
 800f160:	eff37800 	.word	0xeff37800

0800f164 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800f164:	b580      	push	{r7, lr}
 800f166:	b08a      	sub	sp, #40	@ 0x28
 800f168:	af02      	add	r7, sp, #8
 800f16a:	60f8      	str	r0, [r7, #12]
 800f16c:	60b9      	str	r1, [r7, #8]
 800f16e:	4613      	mov	r3, r2
 800f170:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f172:	68fb      	ldr	r3, [r7, #12]
 800f174:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800f176:	68bb      	ldr	r3, [r7, #8]
 800f178:	781b      	ldrb	r3, [r3, #0]
 800f17a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f17c:	68bb      	ldr	r3, [r7, #8]
 800f17e:	785b      	ldrb	r3, [r3, #1]
 800f180:	2b01      	cmp	r3, #1
 800f182:	f040 817f 	bne.w	800f484 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800f186:	68bb      	ldr	r3, [r7, #8]
 800f188:	691b      	ldr	r3, [r3, #16]
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d132      	bne.n	800f1f4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f18e:	69bb      	ldr	r3, [r7, #24]
 800f190:	015a      	lsls	r2, r3, #5
 800f192:	69fb      	ldr	r3, [r7, #28]
 800f194:	4413      	add	r3, r2
 800f196:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f19a:	691b      	ldr	r3, [r3, #16]
 800f19c:	69ba      	ldr	r2, [r7, #24]
 800f19e:	0151      	lsls	r1, r2, #5
 800f1a0:	69fa      	ldr	r2, [r7, #28]
 800f1a2:	440a      	add	r2, r1
 800f1a4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f1a8:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800f1ac:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800f1b0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f1b2:	69bb      	ldr	r3, [r7, #24]
 800f1b4:	015a      	lsls	r2, r3, #5
 800f1b6:	69fb      	ldr	r3, [r7, #28]
 800f1b8:	4413      	add	r3, r2
 800f1ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f1be:	691b      	ldr	r3, [r3, #16]
 800f1c0:	69ba      	ldr	r2, [r7, #24]
 800f1c2:	0151      	lsls	r1, r2, #5
 800f1c4:	69fa      	ldr	r2, [r7, #28]
 800f1c6:	440a      	add	r2, r1
 800f1c8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f1cc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800f1d0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f1d2:	69bb      	ldr	r3, [r7, #24]
 800f1d4:	015a      	lsls	r2, r3, #5
 800f1d6:	69fb      	ldr	r3, [r7, #28]
 800f1d8:	4413      	add	r3, r2
 800f1da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f1de:	691b      	ldr	r3, [r3, #16]
 800f1e0:	69ba      	ldr	r2, [r7, #24]
 800f1e2:	0151      	lsls	r1, r2, #5
 800f1e4:	69fa      	ldr	r2, [r7, #28]
 800f1e6:	440a      	add	r2, r1
 800f1e8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f1ec:	0cdb      	lsrs	r3, r3, #19
 800f1ee:	04db      	lsls	r3, r3, #19
 800f1f0:	6113      	str	r3, [r2, #16]
 800f1f2:	e097      	b.n	800f324 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f1f4:	69bb      	ldr	r3, [r7, #24]
 800f1f6:	015a      	lsls	r2, r3, #5
 800f1f8:	69fb      	ldr	r3, [r7, #28]
 800f1fa:	4413      	add	r3, r2
 800f1fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f200:	691b      	ldr	r3, [r3, #16]
 800f202:	69ba      	ldr	r2, [r7, #24]
 800f204:	0151      	lsls	r1, r2, #5
 800f206:	69fa      	ldr	r2, [r7, #28]
 800f208:	440a      	add	r2, r1
 800f20a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f20e:	0cdb      	lsrs	r3, r3, #19
 800f210:	04db      	lsls	r3, r3, #19
 800f212:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f214:	69bb      	ldr	r3, [r7, #24]
 800f216:	015a      	lsls	r2, r3, #5
 800f218:	69fb      	ldr	r3, [r7, #28]
 800f21a:	4413      	add	r3, r2
 800f21c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f220:	691b      	ldr	r3, [r3, #16]
 800f222:	69ba      	ldr	r2, [r7, #24]
 800f224:	0151      	lsls	r1, r2, #5
 800f226:	69fa      	ldr	r2, [r7, #28]
 800f228:	440a      	add	r2, r1
 800f22a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f22e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800f232:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800f236:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800f238:	69bb      	ldr	r3, [r7, #24]
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d11a      	bne.n	800f274 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800f23e:	68bb      	ldr	r3, [r7, #8]
 800f240:	691a      	ldr	r2, [r3, #16]
 800f242:	68bb      	ldr	r3, [r7, #8]
 800f244:	689b      	ldr	r3, [r3, #8]
 800f246:	429a      	cmp	r2, r3
 800f248:	d903      	bls.n	800f252 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800f24a:	68bb      	ldr	r3, [r7, #8]
 800f24c:	689a      	ldr	r2, [r3, #8]
 800f24e:	68bb      	ldr	r3, [r7, #8]
 800f250:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f252:	69bb      	ldr	r3, [r7, #24]
 800f254:	015a      	lsls	r2, r3, #5
 800f256:	69fb      	ldr	r3, [r7, #28]
 800f258:	4413      	add	r3, r2
 800f25a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f25e:	691b      	ldr	r3, [r3, #16]
 800f260:	69ba      	ldr	r2, [r7, #24]
 800f262:	0151      	lsls	r1, r2, #5
 800f264:	69fa      	ldr	r2, [r7, #28]
 800f266:	440a      	add	r2, r1
 800f268:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f26c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800f270:	6113      	str	r3, [r2, #16]
 800f272:	e044      	b.n	800f2fe <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800f274:	68bb      	ldr	r3, [r7, #8]
 800f276:	691a      	ldr	r2, [r3, #16]
 800f278:	68bb      	ldr	r3, [r7, #8]
 800f27a:	689b      	ldr	r3, [r3, #8]
 800f27c:	4413      	add	r3, r2
 800f27e:	1e5a      	subs	r2, r3, #1
 800f280:	68bb      	ldr	r3, [r7, #8]
 800f282:	689b      	ldr	r3, [r3, #8]
 800f284:	fbb2 f3f3 	udiv	r3, r2, r3
 800f288:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 800f28a:	69bb      	ldr	r3, [r7, #24]
 800f28c:	015a      	lsls	r2, r3, #5
 800f28e:	69fb      	ldr	r3, [r7, #28]
 800f290:	4413      	add	r3, r2
 800f292:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f296:	691a      	ldr	r2, [r3, #16]
 800f298:	8afb      	ldrh	r3, [r7, #22]
 800f29a:	04d9      	lsls	r1, r3, #19
 800f29c:	4ba4      	ldr	r3, [pc, #656]	@ (800f530 <USB_EPStartXfer+0x3cc>)
 800f29e:	400b      	ands	r3, r1
 800f2a0:	69b9      	ldr	r1, [r7, #24]
 800f2a2:	0148      	lsls	r0, r1, #5
 800f2a4:	69f9      	ldr	r1, [r7, #28]
 800f2a6:	4401      	add	r1, r0
 800f2a8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800f2ac:	4313      	orrs	r3, r2
 800f2ae:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800f2b0:	68bb      	ldr	r3, [r7, #8]
 800f2b2:	791b      	ldrb	r3, [r3, #4]
 800f2b4:	2b01      	cmp	r3, #1
 800f2b6:	d122      	bne.n	800f2fe <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800f2b8:	69bb      	ldr	r3, [r7, #24]
 800f2ba:	015a      	lsls	r2, r3, #5
 800f2bc:	69fb      	ldr	r3, [r7, #28]
 800f2be:	4413      	add	r3, r2
 800f2c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f2c4:	691b      	ldr	r3, [r3, #16]
 800f2c6:	69ba      	ldr	r2, [r7, #24]
 800f2c8:	0151      	lsls	r1, r2, #5
 800f2ca:	69fa      	ldr	r2, [r7, #28]
 800f2cc:	440a      	add	r2, r1
 800f2ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f2d2:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800f2d6:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 800f2d8:	69bb      	ldr	r3, [r7, #24]
 800f2da:	015a      	lsls	r2, r3, #5
 800f2dc:	69fb      	ldr	r3, [r7, #28]
 800f2de:	4413      	add	r3, r2
 800f2e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f2e4:	691a      	ldr	r2, [r3, #16]
 800f2e6:	8afb      	ldrh	r3, [r7, #22]
 800f2e8:	075b      	lsls	r3, r3, #29
 800f2ea:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800f2ee:	69b9      	ldr	r1, [r7, #24]
 800f2f0:	0148      	lsls	r0, r1, #5
 800f2f2:	69f9      	ldr	r1, [r7, #28]
 800f2f4:	4401      	add	r1, r0
 800f2f6:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800f2fa:	4313      	orrs	r3, r2
 800f2fc:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800f2fe:	69bb      	ldr	r3, [r7, #24]
 800f300:	015a      	lsls	r2, r3, #5
 800f302:	69fb      	ldr	r3, [r7, #28]
 800f304:	4413      	add	r3, r2
 800f306:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f30a:	691a      	ldr	r2, [r3, #16]
 800f30c:	68bb      	ldr	r3, [r7, #8]
 800f30e:	691b      	ldr	r3, [r3, #16]
 800f310:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f314:	69b9      	ldr	r1, [r7, #24]
 800f316:	0148      	lsls	r0, r1, #5
 800f318:	69f9      	ldr	r1, [r7, #28]
 800f31a:	4401      	add	r1, r0
 800f31c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800f320:	4313      	orrs	r3, r2
 800f322:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800f324:	79fb      	ldrb	r3, [r7, #7]
 800f326:	2b01      	cmp	r3, #1
 800f328:	d14b      	bne.n	800f3c2 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800f32a:	68bb      	ldr	r3, [r7, #8]
 800f32c:	69db      	ldr	r3, [r3, #28]
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d009      	beq.n	800f346 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800f332:	69bb      	ldr	r3, [r7, #24]
 800f334:	015a      	lsls	r2, r3, #5
 800f336:	69fb      	ldr	r3, [r7, #28]
 800f338:	4413      	add	r3, r2
 800f33a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f33e:	461a      	mov	r2, r3
 800f340:	68bb      	ldr	r3, [r7, #8]
 800f342:	69db      	ldr	r3, [r3, #28]
 800f344:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800f346:	68bb      	ldr	r3, [r7, #8]
 800f348:	791b      	ldrb	r3, [r3, #4]
 800f34a:	2b01      	cmp	r3, #1
 800f34c:	d128      	bne.n	800f3a0 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f34e:	69fb      	ldr	r3, [r7, #28]
 800f350:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f354:	689b      	ldr	r3, [r3, #8]
 800f356:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d110      	bne.n	800f380 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800f35e:	69bb      	ldr	r3, [r7, #24]
 800f360:	015a      	lsls	r2, r3, #5
 800f362:	69fb      	ldr	r3, [r7, #28]
 800f364:	4413      	add	r3, r2
 800f366:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	69ba      	ldr	r2, [r7, #24]
 800f36e:	0151      	lsls	r1, r2, #5
 800f370:	69fa      	ldr	r2, [r7, #28]
 800f372:	440a      	add	r2, r1
 800f374:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f378:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800f37c:	6013      	str	r3, [r2, #0]
 800f37e:	e00f      	b.n	800f3a0 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800f380:	69bb      	ldr	r3, [r7, #24]
 800f382:	015a      	lsls	r2, r3, #5
 800f384:	69fb      	ldr	r3, [r7, #28]
 800f386:	4413      	add	r3, r2
 800f388:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f38c:	681b      	ldr	r3, [r3, #0]
 800f38e:	69ba      	ldr	r2, [r7, #24]
 800f390:	0151      	lsls	r1, r2, #5
 800f392:	69fa      	ldr	r2, [r7, #28]
 800f394:	440a      	add	r2, r1
 800f396:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f39a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f39e:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f3a0:	69bb      	ldr	r3, [r7, #24]
 800f3a2:	015a      	lsls	r2, r3, #5
 800f3a4:	69fb      	ldr	r3, [r7, #28]
 800f3a6:	4413      	add	r3, r2
 800f3a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	69ba      	ldr	r2, [r7, #24]
 800f3b0:	0151      	lsls	r1, r2, #5
 800f3b2:	69fa      	ldr	r2, [r7, #28]
 800f3b4:	440a      	add	r2, r1
 800f3b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f3ba:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800f3be:	6013      	str	r3, [r2, #0]
 800f3c0:	e166      	b.n	800f690 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f3c2:	69bb      	ldr	r3, [r7, #24]
 800f3c4:	015a      	lsls	r2, r3, #5
 800f3c6:	69fb      	ldr	r3, [r7, #28]
 800f3c8:	4413      	add	r3, r2
 800f3ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f3ce:	681b      	ldr	r3, [r3, #0]
 800f3d0:	69ba      	ldr	r2, [r7, #24]
 800f3d2:	0151      	lsls	r1, r2, #5
 800f3d4:	69fa      	ldr	r2, [r7, #28]
 800f3d6:	440a      	add	r2, r1
 800f3d8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f3dc:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800f3e0:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800f3e2:	68bb      	ldr	r3, [r7, #8]
 800f3e4:	791b      	ldrb	r3, [r3, #4]
 800f3e6:	2b01      	cmp	r3, #1
 800f3e8:	d015      	beq.n	800f416 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800f3ea:	68bb      	ldr	r3, [r7, #8]
 800f3ec:	691b      	ldr	r3, [r3, #16]
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	f000 814e 	beq.w	800f690 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800f3f4:	69fb      	ldr	r3, [r7, #28]
 800f3f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f3fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f3fc:	68bb      	ldr	r3, [r7, #8]
 800f3fe:	781b      	ldrb	r3, [r3, #0]
 800f400:	f003 030f 	and.w	r3, r3, #15
 800f404:	2101      	movs	r1, #1
 800f406:	fa01 f303 	lsl.w	r3, r1, r3
 800f40a:	69f9      	ldr	r1, [r7, #28]
 800f40c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800f410:	4313      	orrs	r3, r2
 800f412:	634b      	str	r3, [r1, #52]	@ 0x34
 800f414:	e13c      	b.n	800f690 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f416:	69fb      	ldr	r3, [r7, #28]
 800f418:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f41c:	689b      	ldr	r3, [r3, #8]
 800f41e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f422:	2b00      	cmp	r3, #0
 800f424:	d110      	bne.n	800f448 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800f426:	69bb      	ldr	r3, [r7, #24]
 800f428:	015a      	lsls	r2, r3, #5
 800f42a:	69fb      	ldr	r3, [r7, #28]
 800f42c:	4413      	add	r3, r2
 800f42e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f432:	681b      	ldr	r3, [r3, #0]
 800f434:	69ba      	ldr	r2, [r7, #24]
 800f436:	0151      	lsls	r1, r2, #5
 800f438:	69fa      	ldr	r2, [r7, #28]
 800f43a:	440a      	add	r2, r1
 800f43c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f440:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800f444:	6013      	str	r3, [r2, #0]
 800f446:	e00f      	b.n	800f468 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800f448:	69bb      	ldr	r3, [r7, #24]
 800f44a:	015a      	lsls	r2, r3, #5
 800f44c:	69fb      	ldr	r3, [r7, #28]
 800f44e:	4413      	add	r3, r2
 800f450:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f454:	681b      	ldr	r3, [r3, #0]
 800f456:	69ba      	ldr	r2, [r7, #24]
 800f458:	0151      	lsls	r1, r2, #5
 800f45a:	69fa      	ldr	r2, [r7, #28]
 800f45c:	440a      	add	r2, r1
 800f45e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f462:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f466:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800f468:	68bb      	ldr	r3, [r7, #8]
 800f46a:	68d9      	ldr	r1, [r3, #12]
 800f46c:	68bb      	ldr	r3, [r7, #8]
 800f46e:	781a      	ldrb	r2, [r3, #0]
 800f470:	68bb      	ldr	r3, [r7, #8]
 800f472:	691b      	ldr	r3, [r3, #16]
 800f474:	b298      	uxth	r0, r3
 800f476:	79fb      	ldrb	r3, [r7, #7]
 800f478:	9300      	str	r3, [sp, #0]
 800f47a:	4603      	mov	r3, r0
 800f47c:	68f8      	ldr	r0, [r7, #12]
 800f47e:	f000 f9b9 	bl	800f7f4 <USB_WritePacket>
 800f482:	e105      	b.n	800f690 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800f484:	69bb      	ldr	r3, [r7, #24]
 800f486:	015a      	lsls	r2, r3, #5
 800f488:	69fb      	ldr	r3, [r7, #28]
 800f48a:	4413      	add	r3, r2
 800f48c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f490:	691b      	ldr	r3, [r3, #16]
 800f492:	69ba      	ldr	r2, [r7, #24]
 800f494:	0151      	lsls	r1, r2, #5
 800f496:	69fa      	ldr	r2, [r7, #28]
 800f498:	440a      	add	r2, r1
 800f49a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f49e:	0cdb      	lsrs	r3, r3, #19
 800f4a0:	04db      	lsls	r3, r3, #19
 800f4a2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800f4a4:	69bb      	ldr	r3, [r7, #24]
 800f4a6:	015a      	lsls	r2, r3, #5
 800f4a8:	69fb      	ldr	r3, [r7, #28]
 800f4aa:	4413      	add	r3, r2
 800f4ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f4b0:	691b      	ldr	r3, [r3, #16]
 800f4b2:	69ba      	ldr	r2, [r7, #24]
 800f4b4:	0151      	lsls	r1, r2, #5
 800f4b6:	69fa      	ldr	r2, [r7, #28]
 800f4b8:	440a      	add	r2, r1
 800f4ba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f4be:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800f4c2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800f4c6:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800f4c8:	69bb      	ldr	r3, [r7, #24]
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d132      	bne.n	800f534 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800f4ce:	68bb      	ldr	r3, [r7, #8]
 800f4d0:	691b      	ldr	r3, [r3, #16]
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d003      	beq.n	800f4de <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800f4d6:	68bb      	ldr	r3, [r7, #8]
 800f4d8:	689a      	ldr	r2, [r3, #8]
 800f4da:	68bb      	ldr	r3, [r7, #8]
 800f4dc:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800f4de:	68bb      	ldr	r3, [r7, #8]
 800f4e0:	689a      	ldr	r2, [r3, #8]
 800f4e2:	68bb      	ldr	r3, [r7, #8]
 800f4e4:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800f4e6:	69bb      	ldr	r3, [r7, #24]
 800f4e8:	015a      	lsls	r2, r3, #5
 800f4ea:	69fb      	ldr	r3, [r7, #28]
 800f4ec:	4413      	add	r3, r2
 800f4ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f4f2:	691a      	ldr	r2, [r3, #16]
 800f4f4:	68bb      	ldr	r3, [r7, #8]
 800f4f6:	6a1b      	ldr	r3, [r3, #32]
 800f4f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f4fc:	69b9      	ldr	r1, [r7, #24]
 800f4fe:	0148      	lsls	r0, r1, #5
 800f500:	69f9      	ldr	r1, [r7, #28]
 800f502:	4401      	add	r1, r0
 800f504:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800f508:	4313      	orrs	r3, r2
 800f50a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f50c:	69bb      	ldr	r3, [r7, #24]
 800f50e:	015a      	lsls	r2, r3, #5
 800f510:	69fb      	ldr	r3, [r7, #28]
 800f512:	4413      	add	r3, r2
 800f514:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f518:	691b      	ldr	r3, [r3, #16]
 800f51a:	69ba      	ldr	r2, [r7, #24]
 800f51c:	0151      	lsls	r1, r2, #5
 800f51e:	69fa      	ldr	r2, [r7, #28]
 800f520:	440a      	add	r2, r1
 800f522:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f526:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800f52a:	6113      	str	r3, [r2, #16]
 800f52c:	e062      	b.n	800f5f4 <USB_EPStartXfer+0x490>
 800f52e:	bf00      	nop
 800f530:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800f534:	68bb      	ldr	r3, [r7, #8]
 800f536:	691b      	ldr	r3, [r3, #16]
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d123      	bne.n	800f584 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800f53c:	69bb      	ldr	r3, [r7, #24]
 800f53e:	015a      	lsls	r2, r3, #5
 800f540:	69fb      	ldr	r3, [r7, #28]
 800f542:	4413      	add	r3, r2
 800f544:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f548:	691a      	ldr	r2, [r3, #16]
 800f54a:	68bb      	ldr	r3, [r7, #8]
 800f54c:	689b      	ldr	r3, [r3, #8]
 800f54e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f552:	69b9      	ldr	r1, [r7, #24]
 800f554:	0148      	lsls	r0, r1, #5
 800f556:	69f9      	ldr	r1, [r7, #28]
 800f558:	4401      	add	r1, r0
 800f55a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800f55e:	4313      	orrs	r3, r2
 800f560:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f562:	69bb      	ldr	r3, [r7, #24]
 800f564:	015a      	lsls	r2, r3, #5
 800f566:	69fb      	ldr	r3, [r7, #28]
 800f568:	4413      	add	r3, r2
 800f56a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f56e:	691b      	ldr	r3, [r3, #16]
 800f570:	69ba      	ldr	r2, [r7, #24]
 800f572:	0151      	lsls	r1, r2, #5
 800f574:	69fa      	ldr	r2, [r7, #28]
 800f576:	440a      	add	r2, r1
 800f578:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f57c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800f580:	6113      	str	r3, [r2, #16]
 800f582:	e037      	b.n	800f5f4 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800f584:	68bb      	ldr	r3, [r7, #8]
 800f586:	691a      	ldr	r2, [r3, #16]
 800f588:	68bb      	ldr	r3, [r7, #8]
 800f58a:	689b      	ldr	r3, [r3, #8]
 800f58c:	4413      	add	r3, r2
 800f58e:	1e5a      	subs	r2, r3, #1
 800f590:	68bb      	ldr	r3, [r7, #8]
 800f592:	689b      	ldr	r3, [r3, #8]
 800f594:	fbb2 f3f3 	udiv	r3, r2, r3
 800f598:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800f59a:	68bb      	ldr	r3, [r7, #8]
 800f59c:	689b      	ldr	r3, [r3, #8]
 800f59e:	8afa      	ldrh	r2, [r7, #22]
 800f5a0:	fb03 f202 	mul.w	r2, r3, r2
 800f5a4:	68bb      	ldr	r3, [r7, #8]
 800f5a6:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800f5a8:	69bb      	ldr	r3, [r7, #24]
 800f5aa:	015a      	lsls	r2, r3, #5
 800f5ac:	69fb      	ldr	r3, [r7, #28]
 800f5ae:	4413      	add	r3, r2
 800f5b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f5b4:	691a      	ldr	r2, [r3, #16]
 800f5b6:	8afb      	ldrh	r3, [r7, #22]
 800f5b8:	04d9      	lsls	r1, r3, #19
 800f5ba:	4b38      	ldr	r3, [pc, #224]	@ (800f69c <USB_EPStartXfer+0x538>)
 800f5bc:	400b      	ands	r3, r1
 800f5be:	69b9      	ldr	r1, [r7, #24]
 800f5c0:	0148      	lsls	r0, r1, #5
 800f5c2:	69f9      	ldr	r1, [r7, #28]
 800f5c4:	4401      	add	r1, r0
 800f5c6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800f5ca:	4313      	orrs	r3, r2
 800f5cc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800f5ce:	69bb      	ldr	r3, [r7, #24]
 800f5d0:	015a      	lsls	r2, r3, #5
 800f5d2:	69fb      	ldr	r3, [r7, #28]
 800f5d4:	4413      	add	r3, r2
 800f5d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f5da:	691a      	ldr	r2, [r3, #16]
 800f5dc:	68bb      	ldr	r3, [r7, #8]
 800f5de:	6a1b      	ldr	r3, [r3, #32]
 800f5e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f5e4:	69b9      	ldr	r1, [r7, #24]
 800f5e6:	0148      	lsls	r0, r1, #5
 800f5e8:	69f9      	ldr	r1, [r7, #28]
 800f5ea:	4401      	add	r1, r0
 800f5ec:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800f5f0:	4313      	orrs	r3, r2
 800f5f2:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800f5f4:	79fb      	ldrb	r3, [r7, #7]
 800f5f6:	2b01      	cmp	r3, #1
 800f5f8:	d10d      	bne.n	800f616 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800f5fa:	68bb      	ldr	r3, [r7, #8]
 800f5fc:	68db      	ldr	r3, [r3, #12]
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	d009      	beq.n	800f616 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800f602:	68bb      	ldr	r3, [r7, #8]
 800f604:	68d9      	ldr	r1, [r3, #12]
 800f606:	69bb      	ldr	r3, [r7, #24]
 800f608:	015a      	lsls	r2, r3, #5
 800f60a:	69fb      	ldr	r3, [r7, #28]
 800f60c:	4413      	add	r3, r2
 800f60e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f612:	460a      	mov	r2, r1
 800f614:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800f616:	68bb      	ldr	r3, [r7, #8]
 800f618:	791b      	ldrb	r3, [r3, #4]
 800f61a:	2b01      	cmp	r3, #1
 800f61c:	d128      	bne.n	800f670 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f61e:	69fb      	ldr	r3, [r7, #28]
 800f620:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f624:	689b      	ldr	r3, [r3, #8]
 800f626:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	d110      	bne.n	800f650 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800f62e:	69bb      	ldr	r3, [r7, #24]
 800f630:	015a      	lsls	r2, r3, #5
 800f632:	69fb      	ldr	r3, [r7, #28]
 800f634:	4413      	add	r3, r2
 800f636:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	69ba      	ldr	r2, [r7, #24]
 800f63e:	0151      	lsls	r1, r2, #5
 800f640:	69fa      	ldr	r2, [r7, #28]
 800f642:	440a      	add	r2, r1
 800f644:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f648:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800f64c:	6013      	str	r3, [r2, #0]
 800f64e:	e00f      	b.n	800f670 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800f650:	69bb      	ldr	r3, [r7, #24]
 800f652:	015a      	lsls	r2, r3, #5
 800f654:	69fb      	ldr	r3, [r7, #28]
 800f656:	4413      	add	r3, r2
 800f658:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	69ba      	ldr	r2, [r7, #24]
 800f660:	0151      	lsls	r1, r2, #5
 800f662:	69fa      	ldr	r2, [r7, #28]
 800f664:	440a      	add	r2, r1
 800f666:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f66a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f66e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800f670:	69bb      	ldr	r3, [r7, #24]
 800f672:	015a      	lsls	r2, r3, #5
 800f674:	69fb      	ldr	r3, [r7, #28]
 800f676:	4413      	add	r3, r2
 800f678:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f67c:	681b      	ldr	r3, [r3, #0]
 800f67e:	69ba      	ldr	r2, [r7, #24]
 800f680:	0151      	lsls	r1, r2, #5
 800f682:	69fa      	ldr	r2, [r7, #28]
 800f684:	440a      	add	r2, r1
 800f686:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f68a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800f68e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f690:	2300      	movs	r3, #0
}
 800f692:	4618      	mov	r0, r3
 800f694:	3720      	adds	r7, #32
 800f696:	46bd      	mov	sp, r7
 800f698:	bd80      	pop	{r7, pc}
 800f69a:	bf00      	nop
 800f69c:	1ff80000 	.word	0x1ff80000

0800f6a0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f6a0:	b480      	push	{r7}
 800f6a2:	b087      	sub	sp, #28
 800f6a4:	af00      	add	r7, sp, #0
 800f6a6:	6078      	str	r0, [r7, #4]
 800f6a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800f6aa:	2300      	movs	r3, #0
 800f6ac:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800f6ae:	2300      	movs	r3, #0
 800f6b0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f6b6:	683b      	ldr	r3, [r7, #0]
 800f6b8:	785b      	ldrb	r3, [r3, #1]
 800f6ba:	2b01      	cmp	r3, #1
 800f6bc:	d14a      	bne.n	800f754 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f6be:	683b      	ldr	r3, [r7, #0]
 800f6c0:	781b      	ldrb	r3, [r3, #0]
 800f6c2:	015a      	lsls	r2, r3, #5
 800f6c4:	693b      	ldr	r3, [r7, #16]
 800f6c6:	4413      	add	r3, r2
 800f6c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f6cc:	681b      	ldr	r3, [r3, #0]
 800f6ce:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f6d2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f6d6:	f040 8086 	bne.w	800f7e6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800f6da:	683b      	ldr	r3, [r7, #0]
 800f6dc:	781b      	ldrb	r3, [r3, #0]
 800f6de:	015a      	lsls	r2, r3, #5
 800f6e0:	693b      	ldr	r3, [r7, #16]
 800f6e2:	4413      	add	r3, r2
 800f6e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	683a      	ldr	r2, [r7, #0]
 800f6ec:	7812      	ldrb	r2, [r2, #0]
 800f6ee:	0151      	lsls	r1, r2, #5
 800f6f0:	693a      	ldr	r2, [r7, #16]
 800f6f2:	440a      	add	r2, r1
 800f6f4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f6f8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800f6fc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800f6fe:	683b      	ldr	r3, [r7, #0]
 800f700:	781b      	ldrb	r3, [r3, #0]
 800f702:	015a      	lsls	r2, r3, #5
 800f704:	693b      	ldr	r3, [r7, #16]
 800f706:	4413      	add	r3, r2
 800f708:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f70c:	681b      	ldr	r3, [r3, #0]
 800f70e:	683a      	ldr	r2, [r7, #0]
 800f710:	7812      	ldrb	r2, [r2, #0]
 800f712:	0151      	lsls	r1, r2, #5
 800f714:	693a      	ldr	r2, [r7, #16]
 800f716:	440a      	add	r2, r1
 800f718:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f71c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f720:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800f722:	68fb      	ldr	r3, [r7, #12]
 800f724:	3301      	adds	r3, #1
 800f726:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800f728:	68fb      	ldr	r3, [r7, #12]
 800f72a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800f72e:	4293      	cmp	r3, r2
 800f730:	d902      	bls.n	800f738 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800f732:	2301      	movs	r3, #1
 800f734:	75fb      	strb	r3, [r7, #23]
          break;
 800f736:	e056      	b.n	800f7e6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800f738:	683b      	ldr	r3, [r7, #0]
 800f73a:	781b      	ldrb	r3, [r3, #0]
 800f73c:	015a      	lsls	r2, r3, #5
 800f73e:	693b      	ldr	r3, [r7, #16]
 800f740:	4413      	add	r3, r2
 800f742:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f74c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f750:	d0e7      	beq.n	800f722 <USB_EPStopXfer+0x82>
 800f752:	e048      	b.n	800f7e6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f754:	683b      	ldr	r3, [r7, #0]
 800f756:	781b      	ldrb	r3, [r3, #0]
 800f758:	015a      	lsls	r2, r3, #5
 800f75a:	693b      	ldr	r3, [r7, #16]
 800f75c:	4413      	add	r3, r2
 800f75e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f768:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f76c:	d13b      	bne.n	800f7e6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800f76e:	683b      	ldr	r3, [r7, #0]
 800f770:	781b      	ldrb	r3, [r3, #0]
 800f772:	015a      	lsls	r2, r3, #5
 800f774:	693b      	ldr	r3, [r7, #16]
 800f776:	4413      	add	r3, r2
 800f778:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	683a      	ldr	r2, [r7, #0]
 800f780:	7812      	ldrb	r2, [r2, #0]
 800f782:	0151      	lsls	r1, r2, #5
 800f784:	693a      	ldr	r2, [r7, #16]
 800f786:	440a      	add	r2, r1
 800f788:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f78c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800f790:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800f792:	683b      	ldr	r3, [r7, #0]
 800f794:	781b      	ldrb	r3, [r3, #0]
 800f796:	015a      	lsls	r2, r3, #5
 800f798:	693b      	ldr	r3, [r7, #16]
 800f79a:	4413      	add	r3, r2
 800f79c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	683a      	ldr	r2, [r7, #0]
 800f7a4:	7812      	ldrb	r2, [r2, #0]
 800f7a6:	0151      	lsls	r1, r2, #5
 800f7a8:	693a      	ldr	r2, [r7, #16]
 800f7aa:	440a      	add	r2, r1
 800f7ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f7b0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f7b4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800f7b6:	68fb      	ldr	r3, [r7, #12]
 800f7b8:	3301      	adds	r3, #1
 800f7ba:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800f7bc:	68fb      	ldr	r3, [r7, #12]
 800f7be:	f242 7210 	movw	r2, #10000	@ 0x2710
 800f7c2:	4293      	cmp	r3, r2
 800f7c4:	d902      	bls.n	800f7cc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800f7c6:	2301      	movs	r3, #1
 800f7c8:	75fb      	strb	r3, [r7, #23]
          break;
 800f7ca:	e00c      	b.n	800f7e6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800f7cc:	683b      	ldr	r3, [r7, #0]
 800f7ce:	781b      	ldrb	r3, [r3, #0]
 800f7d0:	015a      	lsls	r2, r3, #5
 800f7d2:	693b      	ldr	r3, [r7, #16]
 800f7d4:	4413      	add	r3, r2
 800f7d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f7da:	681b      	ldr	r3, [r3, #0]
 800f7dc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f7e0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f7e4:	d0e7      	beq.n	800f7b6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800f7e6:	7dfb      	ldrb	r3, [r7, #23]
}
 800f7e8:	4618      	mov	r0, r3
 800f7ea:	371c      	adds	r7, #28
 800f7ec:	46bd      	mov	sp, r7
 800f7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7f2:	4770      	bx	lr

0800f7f4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800f7f4:	b480      	push	{r7}
 800f7f6:	b089      	sub	sp, #36	@ 0x24
 800f7f8:	af00      	add	r7, sp, #0
 800f7fa:	60f8      	str	r0, [r7, #12]
 800f7fc:	60b9      	str	r1, [r7, #8]
 800f7fe:	4611      	mov	r1, r2
 800f800:	461a      	mov	r2, r3
 800f802:	460b      	mov	r3, r1
 800f804:	71fb      	strb	r3, [r7, #7]
 800f806:	4613      	mov	r3, r2
 800f808:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800f80e:	68bb      	ldr	r3, [r7, #8]
 800f810:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800f812:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800f816:	2b00      	cmp	r3, #0
 800f818:	d123      	bne.n	800f862 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800f81a:	88bb      	ldrh	r3, [r7, #4]
 800f81c:	3303      	adds	r3, #3
 800f81e:	089b      	lsrs	r3, r3, #2
 800f820:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800f822:	2300      	movs	r3, #0
 800f824:	61bb      	str	r3, [r7, #24]
 800f826:	e018      	b.n	800f85a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800f828:	79fb      	ldrb	r3, [r7, #7]
 800f82a:	031a      	lsls	r2, r3, #12
 800f82c:	697b      	ldr	r3, [r7, #20]
 800f82e:	4413      	add	r3, r2
 800f830:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800f834:	461a      	mov	r2, r3
 800f836:	69fb      	ldr	r3, [r7, #28]
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800f83c:	69fb      	ldr	r3, [r7, #28]
 800f83e:	3301      	adds	r3, #1
 800f840:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800f842:	69fb      	ldr	r3, [r7, #28]
 800f844:	3301      	adds	r3, #1
 800f846:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800f848:	69fb      	ldr	r3, [r7, #28]
 800f84a:	3301      	adds	r3, #1
 800f84c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800f84e:	69fb      	ldr	r3, [r7, #28]
 800f850:	3301      	adds	r3, #1
 800f852:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800f854:	69bb      	ldr	r3, [r7, #24]
 800f856:	3301      	adds	r3, #1
 800f858:	61bb      	str	r3, [r7, #24]
 800f85a:	69ba      	ldr	r2, [r7, #24]
 800f85c:	693b      	ldr	r3, [r7, #16]
 800f85e:	429a      	cmp	r2, r3
 800f860:	d3e2      	bcc.n	800f828 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800f862:	2300      	movs	r3, #0
}
 800f864:	4618      	mov	r0, r3
 800f866:	3724      	adds	r7, #36	@ 0x24
 800f868:	46bd      	mov	sp, r7
 800f86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f86e:	4770      	bx	lr

0800f870 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800f870:	b480      	push	{r7}
 800f872:	b08b      	sub	sp, #44	@ 0x2c
 800f874:	af00      	add	r7, sp, #0
 800f876:	60f8      	str	r0, [r7, #12]
 800f878:	60b9      	str	r1, [r7, #8]
 800f87a:	4613      	mov	r3, r2
 800f87c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f87e:	68fb      	ldr	r3, [r7, #12]
 800f880:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800f882:	68bb      	ldr	r3, [r7, #8]
 800f884:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800f886:	88fb      	ldrh	r3, [r7, #6]
 800f888:	089b      	lsrs	r3, r3, #2
 800f88a:	b29b      	uxth	r3, r3
 800f88c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800f88e:	88fb      	ldrh	r3, [r7, #6]
 800f890:	f003 0303 	and.w	r3, r3, #3
 800f894:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800f896:	2300      	movs	r3, #0
 800f898:	623b      	str	r3, [r7, #32]
 800f89a:	e014      	b.n	800f8c6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800f89c:	69bb      	ldr	r3, [r7, #24]
 800f89e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800f8a2:	681a      	ldr	r2, [r3, #0]
 800f8a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8a6:	601a      	str	r2, [r3, #0]
    pDest++;
 800f8a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8aa:	3301      	adds	r3, #1
 800f8ac:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800f8ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8b0:	3301      	adds	r3, #1
 800f8b2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800f8b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8b6:	3301      	adds	r3, #1
 800f8b8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800f8ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8bc:	3301      	adds	r3, #1
 800f8be:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800f8c0:	6a3b      	ldr	r3, [r7, #32]
 800f8c2:	3301      	adds	r3, #1
 800f8c4:	623b      	str	r3, [r7, #32]
 800f8c6:	6a3a      	ldr	r2, [r7, #32]
 800f8c8:	697b      	ldr	r3, [r7, #20]
 800f8ca:	429a      	cmp	r2, r3
 800f8cc:	d3e6      	bcc.n	800f89c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800f8ce:	8bfb      	ldrh	r3, [r7, #30]
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	d01e      	beq.n	800f912 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800f8d4:	2300      	movs	r3, #0
 800f8d6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800f8d8:	69bb      	ldr	r3, [r7, #24]
 800f8da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800f8de:	461a      	mov	r2, r3
 800f8e0:	f107 0310 	add.w	r3, r7, #16
 800f8e4:	6812      	ldr	r2, [r2, #0]
 800f8e6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800f8e8:	693a      	ldr	r2, [r7, #16]
 800f8ea:	6a3b      	ldr	r3, [r7, #32]
 800f8ec:	b2db      	uxtb	r3, r3
 800f8ee:	00db      	lsls	r3, r3, #3
 800f8f0:	fa22 f303 	lsr.w	r3, r2, r3
 800f8f4:	b2da      	uxtb	r2, r3
 800f8f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8f8:	701a      	strb	r2, [r3, #0]
      i++;
 800f8fa:	6a3b      	ldr	r3, [r7, #32]
 800f8fc:	3301      	adds	r3, #1
 800f8fe:	623b      	str	r3, [r7, #32]
      pDest++;
 800f900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f902:	3301      	adds	r3, #1
 800f904:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800f906:	8bfb      	ldrh	r3, [r7, #30]
 800f908:	3b01      	subs	r3, #1
 800f90a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800f90c:	8bfb      	ldrh	r3, [r7, #30]
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d1ea      	bne.n	800f8e8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800f912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800f914:	4618      	mov	r0, r3
 800f916:	372c      	adds	r7, #44	@ 0x2c
 800f918:	46bd      	mov	sp, r7
 800f91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f91e:	4770      	bx	lr

0800f920 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800f920:	b480      	push	{r7}
 800f922:	b085      	sub	sp, #20
 800f924:	af00      	add	r7, sp, #0
 800f926:	6078      	str	r0, [r7, #4]
 800f928:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f92e:	683b      	ldr	r3, [r7, #0]
 800f930:	781b      	ldrb	r3, [r3, #0]
 800f932:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f934:	683b      	ldr	r3, [r7, #0]
 800f936:	785b      	ldrb	r3, [r3, #1]
 800f938:	2b01      	cmp	r3, #1
 800f93a:	d12c      	bne.n	800f996 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800f93c:	68bb      	ldr	r3, [r7, #8]
 800f93e:	015a      	lsls	r2, r3, #5
 800f940:	68fb      	ldr	r3, [r7, #12]
 800f942:	4413      	add	r3, r2
 800f944:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f948:	681b      	ldr	r3, [r3, #0]
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	db12      	blt.n	800f974 <USB_EPSetStall+0x54>
 800f94e:	68bb      	ldr	r3, [r7, #8]
 800f950:	2b00      	cmp	r3, #0
 800f952:	d00f      	beq.n	800f974 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800f954:	68bb      	ldr	r3, [r7, #8]
 800f956:	015a      	lsls	r2, r3, #5
 800f958:	68fb      	ldr	r3, [r7, #12]
 800f95a:	4413      	add	r3, r2
 800f95c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	68ba      	ldr	r2, [r7, #8]
 800f964:	0151      	lsls	r1, r2, #5
 800f966:	68fa      	ldr	r2, [r7, #12]
 800f968:	440a      	add	r2, r1
 800f96a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f96e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800f972:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800f974:	68bb      	ldr	r3, [r7, #8]
 800f976:	015a      	lsls	r2, r3, #5
 800f978:	68fb      	ldr	r3, [r7, #12]
 800f97a:	4413      	add	r3, r2
 800f97c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	68ba      	ldr	r2, [r7, #8]
 800f984:	0151      	lsls	r1, r2, #5
 800f986:	68fa      	ldr	r2, [r7, #12]
 800f988:	440a      	add	r2, r1
 800f98a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f98e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800f992:	6013      	str	r3, [r2, #0]
 800f994:	e02b      	b.n	800f9ee <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800f996:	68bb      	ldr	r3, [r7, #8]
 800f998:	015a      	lsls	r2, r3, #5
 800f99a:	68fb      	ldr	r3, [r7, #12]
 800f99c:	4413      	add	r3, r2
 800f99e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f9a2:	681b      	ldr	r3, [r3, #0]
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	db12      	blt.n	800f9ce <USB_EPSetStall+0xae>
 800f9a8:	68bb      	ldr	r3, [r7, #8]
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d00f      	beq.n	800f9ce <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800f9ae:	68bb      	ldr	r3, [r7, #8]
 800f9b0:	015a      	lsls	r2, r3, #5
 800f9b2:	68fb      	ldr	r3, [r7, #12]
 800f9b4:	4413      	add	r3, r2
 800f9b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f9ba:	681b      	ldr	r3, [r3, #0]
 800f9bc:	68ba      	ldr	r2, [r7, #8]
 800f9be:	0151      	lsls	r1, r2, #5
 800f9c0:	68fa      	ldr	r2, [r7, #12]
 800f9c2:	440a      	add	r2, r1
 800f9c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f9c8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800f9cc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800f9ce:	68bb      	ldr	r3, [r7, #8]
 800f9d0:	015a      	lsls	r2, r3, #5
 800f9d2:	68fb      	ldr	r3, [r7, #12]
 800f9d4:	4413      	add	r3, r2
 800f9d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	68ba      	ldr	r2, [r7, #8]
 800f9de:	0151      	lsls	r1, r2, #5
 800f9e0:	68fa      	ldr	r2, [r7, #12]
 800f9e2:	440a      	add	r2, r1
 800f9e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f9e8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800f9ec:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f9ee:	2300      	movs	r3, #0
}
 800f9f0:	4618      	mov	r0, r3
 800f9f2:	3714      	adds	r7, #20
 800f9f4:	46bd      	mov	sp, r7
 800f9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9fa:	4770      	bx	lr

0800f9fc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800f9fc:	b480      	push	{r7}
 800f9fe:	b085      	sub	sp, #20
 800fa00:	af00      	add	r7, sp, #0
 800fa02:	6078      	str	r0, [r7, #4]
 800fa04:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800fa0a:	683b      	ldr	r3, [r7, #0]
 800fa0c:	781b      	ldrb	r3, [r3, #0]
 800fa0e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800fa10:	683b      	ldr	r3, [r7, #0]
 800fa12:	785b      	ldrb	r3, [r3, #1]
 800fa14:	2b01      	cmp	r3, #1
 800fa16:	d128      	bne.n	800fa6a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800fa18:	68bb      	ldr	r3, [r7, #8]
 800fa1a:	015a      	lsls	r2, r3, #5
 800fa1c:	68fb      	ldr	r3, [r7, #12]
 800fa1e:	4413      	add	r3, r2
 800fa20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fa24:	681b      	ldr	r3, [r3, #0]
 800fa26:	68ba      	ldr	r2, [r7, #8]
 800fa28:	0151      	lsls	r1, r2, #5
 800fa2a:	68fa      	ldr	r2, [r7, #12]
 800fa2c:	440a      	add	r2, r1
 800fa2e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800fa32:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800fa36:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800fa38:	683b      	ldr	r3, [r7, #0]
 800fa3a:	791b      	ldrb	r3, [r3, #4]
 800fa3c:	2b03      	cmp	r3, #3
 800fa3e:	d003      	beq.n	800fa48 <USB_EPClearStall+0x4c>
 800fa40:	683b      	ldr	r3, [r7, #0]
 800fa42:	791b      	ldrb	r3, [r3, #4]
 800fa44:	2b02      	cmp	r3, #2
 800fa46:	d138      	bne.n	800faba <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800fa48:	68bb      	ldr	r3, [r7, #8]
 800fa4a:	015a      	lsls	r2, r3, #5
 800fa4c:	68fb      	ldr	r3, [r7, #12]
 800fa4e:	4413      	add	r3, r2
 800fa50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fa54:	681b      	ldr	r3, [r3, #0]
 800fa56:	68ba      	ldr	r2, [r7, #8]
 800fa58:	0151      	lsls	r1, r2, #5
 800fa5a:	68fa      	ldr	r2, [r7, #12]
 800fa5c:	440a      	add	r2, r1
 800fa5e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800fa62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800fa66:	6013      	str	r3, [r2, #0]
 800fa68:	e027      	b.n	800faba <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800fa6a:	68bb      	ldr	r3, [r7, #8]
 800fa6c:	015a      	lsls	r2, r3, #5
 800fa6e:	68fb      	ldr	r3, [r7, #12]
 800fa70:	4413      	add	r3, r2
 800fa72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fa76:	681b      	ldr	r3, [r3, #0]
 800fa78:	68ba      	ldr	r2, [r7, #8]
 800fa7a:	0151      	lsls	r1, r2, #5
 800fa7c:	68fa      	ldr	r2, [r7, #12]
 800fa7e:	440a      	add	r2, r1
 800fa80:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800fa84:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800fa88:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800fa8a:	683b      	ldr	r3, [r7, #0]
 800fa8c:	791b      	ldrb	r3, [r3, #4]
 800fa8e:	2b03      	cmp	r3, #3
 800fa90:	d003      	beq.n	800fa9a <USB_EPClearStall+0x9e>
 800fa92:	683b      	ldr	r3, [r7, #0]
 800fa94:	791b      	ldrb	r3, [r3, #4]
 800fa96:	2b02      	cmp	r3, #2
 800fa98:	d10f      	bne.n	800faba <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800fa9a:	68bb      	ldr	r3, [r7, #8]
 800fa9c:	015a      	lsls	r2, r3, #5
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	4413      	add	r3, r2
 800faa2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	68ba      	ldr	r2, [r7, #8]
 800faaa:	0151      	lsls	r1, r2, #5
 800faac:	68fa      	ldr	r2, [r7, #12]
 800faae:	440a      	add	r2, r1
 800fab0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800fab4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800fab8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800faba:	2300      	movs	r3, #0
}
 800fabc:	4618      	mov	r0, r3
 800fabe:	3714      	adds	r7, #20
 800fac0:	46bd      	mov	sp, r7
 800fac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fac6:	4770      	bx	lr

0800fac8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800fac8:	b480      	push	{r7}
 800faca:	b085      	sub	sp, #20
 800facc:	af00      	add	r7, sp, #0
 800face:	6078      	str	r0, [r7, #4]
 800fad0:	460b      	mov	r3, r1
 800fad2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800fad8:	68fb      	ldr	r3, [r7, #12]
 800fada:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	68fa      	ldr	r2, [r7, #12]
 800fae2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800fae6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800faea:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800faec:	68fb      	ldr	r3, [r7, #12]
 800faee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800faf2:	681a      	ldr	r2, [r3, #0]
 800faf4:	78fb      	ldrb	r3, [r7, #3]
 800faf6:	011b      	lsls	r3, r3, #4
 800faf8:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800fafc:	68f9      	ldr	r1, [r7, #12]
 800fafe:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800fb02:	4313      	orrs	r3, r2
 800fb04:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800fb06:	2300      	movs	r3, #0
}
 800fb08:	4618      	mov	r0, r3
 800fb0a:	3714      	adds	r7, #20
 800fb0c:	46bd      	mov	sp, r7
 800fb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb12:	4770      	bx	lr

0800fb14 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800fb14:	b480      	push	{r7}
 800fb16:	b085      	sub	sp, #20
 800fb18:	af00      	add	r7, sp, #0
 800fb1a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800fb26:	681b      	ldr	r3, [r3, #0]
 800fb28:	68fa      	ldr	r2, [r7, #12]
 800fb2a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800fb2e:	f023 0303 	bic.w	r3, r3, #3
 800fb32:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800fb34:	68fb      	ldr	r3, [r7, #12]
 800fb36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fb3a:	685b      	ldr	r3, [r3, #4]
 800fb3c:	68fa      	ldr	r2, [r7, #12]
 800fb3e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800fb42:	f023 0302 	bic.w	r3, r3, #2
 800fb46:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800fb48:	2300      	movs	r3, #0
}
 800fb4a:	4618      	mov	r0, r3
 800fb4c:	3714      	adds	r7, #20
 800fb4e:	46bd      	mov	sp, r7
 800fb50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb54:	4770      	bx	lr

0800fb56 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800fb56:	b480      	push	{r7}
 800fb58:	b085      	sub	sp, #20
 800fb5a:	af00      	add	r7, sp, #0
 800fb5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800fb62:	68fb      	ldr	r3, [r7, #12]
 800fb64:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	68fa      	ldr	r2, [r7, #12]
 800fb6c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800fb70:	f023 0303 	bic.w	r3, r3, #3
 800fb74:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800fb76:	68fb      	ldr	r3, [r7, #12]
 800fb78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fb7c:	685b      	ldr	r3, [r3, #4]
 800fb7e:	68fa      	ldr	r2, [r7, #12]
 800fb80:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800fb84:	f043 0302 	orr.w	r3, r3, #2
 800fb88:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800fb8a:	2300      	movs	r3, #0
}
 800fb8c:	4618      	mov	r0, r3
 800fb8e:	3714      	adds	r7, #20
 800fb90:	46bd      	mov	sp, r7
 800fb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb96:	4770      	bx	lr

0800fb98 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800fb98:	b480      	push	{r7}
 800fb9a:	b085      	sub	sp, #20
 800fb9c:	af00      	add	r7, sp, #0
 800fb9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	695b      	ldr	r3, [r3, #20]
 800fba4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	699b      	ldr	r3, [r3, #24]
 800fbaa:	68fa      	ldr	r2, [r7, #12]
 800fbac:	4013      	ands	r3, r2
 800fbae:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800fbb0:	68fb      	ldr	r3, [r7, #12]
}
 800fbb2:	4618      	mov	r0, r3
 800fbb4:	3714      	adds	r7, #20
 800fbb6:	46bd      	mov	sp, r7
 800fbb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbbc:	4770      	bx	lr

0800fbbe <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800fbbe:	b480      	push	{r7}
 800fbc0:	b085      	sub	sp, #20
 800fbc2:	af00      	add	r7, sp, #0
 800fbc4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800fbca:	68fb      	ldr	r3, [r7, #12]
 800fbcc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fbd0:	699b      	ldr	r3, [r3, #24]
 800fbd2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800fbd4:	68fb      	ldr	r3, [r7, #12]
 800fbd6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fbda:	69db      	ldr	r3, [r3, #28]
 800fbdc:	68ba      	ldr	r2, [r7, #8]
 800fbde:	4013      	ands	r3, r2
 800fbe0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800fbe2:	68bb      	ldr	r3, [r7, #8]
 800fbe4:	0c1b      	lsrs	r3, r3, #16
}
 800fbe6:	4618      	mov	r0, r3
 800fbe8:	3714      	adds	r7, #20
 800fbea:	46bd      	mov	sp, r7
 800fbec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbf0:	4770      	bx	lr

0800fbf2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800fbf2:	b480      	push	{r7}
 800fbf4:	b085      	sub	sp, #20
 800fbf6:	af00      	add	r7, sp, #0
 800fbf8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800fbfe:	68fb      	ldr	r3, [r7, #12]
 800fc00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fc04:	699b      	ldr	r3, [r3, #24]
 800fc06:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800fc08:	68fb      	ldr	r3, [r7, #12]
 800fc0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fc0e:	69db      	ldr	r3, [r3, #28]
 800fc10:	68ba      	ldr	r2, [r7, #8]
 800fc12:	4013      	ands	r3, r2
 800fc14:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800fc16:	68bb      	ldr	r3, [r7, #8]
 800fc18:	b29b      	uxth	r3, r3
}
 800fc1a:	4618      	mov	r0, r3
 800fc1c:	3714      	adds	r7, #20
 800fc1e:	46bd      	mov	sp, r7
 800fc20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc24:	4770      	bx	lr

0800fc26 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800fc26:	b480      	push	{r7}
 800fc28:	b085      	sub	sp, #20
 800fc2a:	af00      	add	r7, sp, #0
 800fc2c:	6078      	str	r0, [r7, #4]
 800fc2e:	460b      	mov	r3, r1
 800fc30:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800fc36:	78fb      	ldrb	r3, [r7, #3]
 800fc38:	015a      	lsls	r2, r3, #5
 800fc3a:	68fb      	ldr	r3, [r7, #12]
 800fc3c:	4413      	add	r3, r2
 800fc3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fc42:	689b      	ldr	r3, [r3, #8]
 800fc44:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fc4c:	695b      	ldr	r3, [r3, #20]
 800fc4e:	68ba      	ldr	r2, [r7, #8]
 800fc50:	4013      	ands	r3, r2
 800fc52:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800fc54:	68bb      	ldr	r3, [r7, #8]
}
 800fc56:	4618      	mov	r0, r3
 800fc58:	3714      	adds	r7, #20
 800fc5a:	46bd      	mov	sp, r7
 800fc5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc60:	4770      	bx	lr

0800fc62 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800fc62:	b480      	push	{r7}
 800fc64:	b087      	sub	sp, #28
 800fc66:	af00      	add	r7, sp, #0
 800fc68:	6078      	str	r0, [r7, #4]
 800fc6a:	460b      	mov	r3, r1
 800fc6c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800fc72:	697b      	ldr	r3, [r7, #20]
 800fc74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fc78:	691b      	ldr	r3, [r3, #16]
 800fc7a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800fc7c:	697b      	ldr	r3, [r7, #20]
 800fc7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fc82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fc84:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800fc86:	78fb      	ldrb	r3, [r7, #3]
 800fc88:	f003 030f 	and.w	r3, r3, #15
 800fc8c:	68fa      	ldr	r2, [r7, #12]
 800fc8e:	fa22 f303 	lsr.w	r3, r2, r3
 800fc92:	01db      	lsls	r3, r3, #7
 800fc94:	b2db      	uxtb	r3, r3
 800fc96:	693a      	ldr	r2, [r7, #16]
 800fc98:	4313      	orrs	r3, r2
 800fc9a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800fc9c:	78fb      	ldrb	r3, [r7, #3]
 800fc9e:	015a      	lsls	r2, r3, #5
 800fca0:	697b      	ldr	r3, [r7, #20]
 800fca2:	4413      	add	r3, r2
 800fca4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fca8:	689b      	ldr	r3, [r3, #8]
 800fcaa:	693a      	ldr	r2, [r7, #16]
 800fcac:	4013      	ands	r3, r2
 800fcae:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800fcb0:	68bb      	ldr	r3, [r7, #8]
}
 800fcb2:	4618      	mov	r0, r3
 800fcb4:	371c      	adds	r7, #28
 800fcb6:	46bd      	mov	sp, r7
 800fcb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcbc:	4770      	bx	lr

0800fcbe <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800fcbe:	b480      	push	{r7}
 800fcc0:	b083      	sub	sp, #12
 800fcc2:	af00      	add	r7, sp, #0
 800fcc4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	695b      	ldr	r3, [r3, #20]
 800fcca:	f003 0301 	and.w	r3, r3, #1
}
 800fcce:	4618      	mov	r0, r3
 800fcd0:	370c      	adds	r7, #12
 800fcd2:	46bd      	mov	sp, r7
 800fcd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcd8:	4770      	bx	lr

0800fcda <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800fcda:	b480      	push	{r7}
 800fcdc:	b085      	sub	sp, #20
 800fcde:	af00      	add	r7, sp, #0
 800fce0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800fce6:	68fb      	ldr	r3, [r7, #12]
 800fce8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fcec:	681b      	ldr	r3, [r3, #0]
 800fcee:	68fa      	ldr	r2, [r7, #12]
 800fcf0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800fcf4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800fcf8:	f023 0307 	bic.w	r3, r3, #7
 800fcfc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800fcfe:	68fb      	ldr	r3, [r7, #12]
 800fd00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fd04:	685b      	ldr	r3, [r3, #4]
 800fd06:	68fa      	ldr	r2, [r7, #12]
 800fd08:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800fd0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800fd10:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800fd12:	2300      	movs	r3, #0
}
 800fd14:	4618      	mov	r0, r3
 800fd16:	3714      	adds	r7, #20
 800fd18:	46bd      	mov	sp, r7
 800fd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd1e:	4770      	bx	lr

0800fd20 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800fd20:	b480      	push	{r7}
 800fd22:	b087      	sub	sp, #28
 800fd24:	af00      	add	r7, sp, #0
 800fd26:	60f8      	str	r0, [r7, #12]
 800fd28:	460b      	mov	r3, r1
 800fd2a:	607a      	str	r2, [r7, #4]
 800fd2c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fd2e:	68fb      	ldr	r3, [r7, #12]
 800fd30:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800fd32:	68fb      	ldr	r3, [r7, #12]
 800fd34:	333c      	adds	r3, #60	@ 0x3c
 800fd36:	3304      	adds	r3, #4
 800fd38:	681b      	ldr	r3, [r3, #0]
 800fd3a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800fd3c:	693b      	ldr	r3, [r7, #16]
 800fd3e:	4a26      	ldr	r2, [pc, #152]	@ (800fdd8 <USB_EP0_OutStart+0xb8>)
 800fd40:	4293      	cmp	r3, r2
 800fd42:	d90a      	bls.n	800fd5a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800fd44:	697b      	ldr	r3, [r7, #20]
 800fd46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800fd50:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800fd54:	d101      	bne.n	800fd5a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800fd56:	2300      	movs	r3, #0
 800fd58:	e037      	b.n	800fdca <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800fd5a:	697b      	ldr	r3, [r7, #20]
 800fd5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fd60:	461a      	mov	r2, r3
 800fd62:	2300      	movs	r3, #0
 800fd64:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800fd66:	697b      	ldr	r3, [r7, #20]
 800fd68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fd6c:	691b      	ldr	r3, [r3, #16]
 800fd6e:	697a      	ldr	r2, [r7, #20]
 800fd70:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800fd74:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800fd78:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800fd7a:	697b      	ldr	r3, [r7, #20]
 800fd7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fd80:	691b      	ldr	r3, [r3, #16]
 800fd82:	697a      	ldr	r2, [r7, #20]
 800fd84:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800fd88:	f043 0318 	orr.w	r3, r3, #24
 800fd8c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800fd8e:	697b      	ldr	r3, [r7, #20]
 800fd90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fd94:	691b      	ldr	r3, [r3, #16]
 800fd96:	697a      	ldr	r2, [r7, #20]
 800fd98:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800fd9c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800fda0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800fda2:	7afb      	ldrb	r3, [r7, #11]
 800fda4:	2b01      	cmp	r3, #1
 800fda6:	d10f      	bne.n	800fdc8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800fda8:	697b      	ldr	r3, [r7, #20]
 800fdaa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fdae:	461a      	mov	r2, r3
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800fdb4:	697b      	ldr	r3, [r7, #20]
 800fdb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fdba:	681b      	ldr	r3, [r3, #0]
 800fdbc:	697a      	ldr	r2, [r7, #20]
 800fdbe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800fdc2:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800fdc6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800fdc8:	2300      	movs	r3, #0
}
 800fdca:	4618      	mov	r0, r3
 800fdcc:	371c      	adds	r7, #28
 800fdce:	46bd      	mov	sp, r7
 800fdd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdd4:	4770      	bx	lr
 800fdd6:	bf00      	nop
 800fdd8:	4f54300a 	.word	0x4f54300a

0800fddc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800fddc:	b480      	push	{r7}
 800fdde:	b085      	sub	sp, #20
 800fde0:	af00      	add	r7, sp, #0
 800fde2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800fde4:	2300      	movs	r3, #0
 800fde6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800fde8:	68fb      	ldr	r3, [r7, #12]
 800fdea:	3301      	adds	r3, #1
 800fdec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800fdee:	68fb      	ldr	r3, [r7, #12]
 800fdf0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800fdf4:	d901      	bls.n	800fdfa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800fdf6:	2303      	movs	r3, #3
 800fdf8:	e01b      	b.n	800fe32 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	691b      	ldr	r3, [r3, #16]
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	daf2      	bge.n	800fde8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800fe02:	2300      	movs	r3, #0
 800fe04:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	691b      	ldr	r3, [r3, #16]
 800fe0a:	f043 0201 	orr.w	r2, r3, #1
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800fe12:	68fb      	ldr	r3, [r7, #12]
 800fe14:	3301      	adds	r3, #1
 800fe16:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800fe18:	68fb      	ldr	r3, [r7, #12]
 800fe1a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800fe1e:	d901      	bls.n	800fe24 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800fe20:	2303      	movs	r3, #3
 800fe22:	e006      	b.n	800fe32 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	691b      	ldr	r3, [r3, #16]
 800fe28:	f003 0301 	and.w	r3, r3, #1
 800fe2c:	2b01      	cmp	r3, #1
 800fe2e:	d0f0      	beq.n	800fe12 <USB_CoreReset+0x36>

  return HAL_OK;
 800fe30:	2300      	movs	r3, #0
}
 800fe32:	4618      	mov	r0, r3
 800fe34:	3714      	adds	r7, #20
 800fe36:	46bd      	mov	sp, r7
 800fe38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe3c:	4770      	bx	lr
	...

0800fe40 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fe40:	b580      	push	{r7, lr}
 800fe42:	b084      	sub	sp, #16
 800fe44:	af00      	add	r7, sp, #0
 800fe46:	6078      	str	r0, [r7, #4]
 800fe48:	460b      	mov	r3, r1
 800fe4a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800fe4c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800fe50:	f002 fd00 	bl	8012854 <USBD_static_malloc>
 800fe54:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800fe56:	68fb      	ldr	r3, [r7, #12]
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d109      	bne.n	800fe70 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	32b0      	adds	r2, #176	@ 0xb0
 800fe66:	2100      	movs	r1, #0
 800fe68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800fe6c:	2302      	movs	r3, #2
 800fe6e:	e0d4      	b.n	801001a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800fe70:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800fe74:	2100      	movs	r1, #0
 800fe76:	68f8      	ldr	r0, [r7, #12]
 800fe78:	f002 fdae 	bl	80129d8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	32b0      	adds	r2, #176	@ 0xb0
 800fe86:	68f9      	ldr	r1, [r7, #12]
 800fe88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	32b0      	adds	r2, #176	@ 0xb0
 800fe96:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	7c1b      	ldrb	r3, [r3, #16]
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d138      	bne.n	800ff1a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800fea8:	4b5e      	ldr	r3, [pc, #376]	@ (8010024 <USBD_CDC_Init+0x1e4>)
 800feaa:	7819      	ldrb	r1, [r3, #0]
 800feac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800feb0:	2202      	movs	r2, #2
 800feb2:	6878      	ldr	r0, [r7, #4]
 800feb4:	f002 fbab 	bl	801260e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800feb8:	4b5a      	ldr	r3, [pc, #360]	@ (8010024 <USBD_CDC_Init+0x1e4>)
 800feba:	781b      	ldrb	r3, [r3, #0]
 800febc:	f003 020f 	and.w	r2, r3, #15
 800fec0:	6879      	ldr	r1, [r7, #4]
 800fec2:	4613      	mov	r3, r2
 800fec4:	009b      	lsls	r3, r3, #2
 800fec6:	4413      	add	r3, r2
 800fec8:	009b      	lsls	r3, r3, #2
 800feca:	440b      	add	r3, r1
 800fecc:	3324      	adds	r3, #36	@ 0x24
 800fece:	2201      	movs	r2, #1
 800fed0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800fed2:	4b55      	ldr	r3, [pc, #340]	@ (8010028 <USBD_CDC_Init+0x1e8>)
 800fed4:	7819      	ldrb	r1, [r3, #0]
 800fed6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800feda:	2202      	movs	r2, #2
 800fedc:	6878      	ldr	r0, [r7, #4]
 800fede:	f002 fb96 	bl	801260e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800fee2:	4b51      	ldr	r3, [pc, #324]	@ (8010028 <USBD_CDC_Init+0x1e8>)
 800fee4:	781b      	ldrb	r3, [r3, #0]
 800fee6:	f003 020f 	and.w	r2, r3, #15
 800feea:	6879      	ldr	r1, [r7, #4]
 800feec:	4613      	mov	r3, r2
 800feee:	009b      	lsls	r3, r3, #2
 800fef0:	4413      	add	r3, r2
 800fef2:	009b      	lsls	r3, r3, #2
 800fef4:	440b      	add	r3, r1
 800fef6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800fefa:	2201      	movs	r2, #1
 800fefc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800fefe:	4b4b      	ldr	r3, [pc, #300]	@ (801002c <USBD_CDC_Init+0x1ec>)
 800ff00:	781b      	ldrb	r3, [r3, #0]
 800ff02:	f003 020f 	and.w	r2, r3, #15
 800ff06:	6879      	ldr	r1, [r7, #4]
 800ff08:	4613      	mov	r3, r2
 800ff0a:	009b      	lsls	r3, r3, #2
 800ff0c:	4413      	add	r3, r2
 800ff0e:	009b      	lsls	r3, r3, #2
 800ff10:	440b      	add	r3, r1
 800ff12:	3326      	adds	r3, #38	@ 0x26
 800ff14:	2210      	movs	r2, #16
 800ff16:	801a      	strh	r2, [r3, #0]
 800ff18:	e035      	b.n	800ff86 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ff1a:	4b42      	ldr	r3, [pc, #264]	@ (8010024 <USBD_CDC_Init+0x1e4>)
 800ff1c:	7819      	ldrb	r1, [r3, #0]
 800ff1e:	2340      	movs	r3, #64	@ 0x40
 800ff20:	2202      	movs	r2, #2
 800ff22:	6878      	ldr	r0, [r7, #4]
 800ff24:	f002 fb73 	bl	801260e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ff28:	4b3e      	ldr	r3, [pc, #248]	@ (8010024 <USBD_CDC_Init+0x1e4>)
 800ff2a:	781b      	ldrb	r3, [r3, #0]
 800ff2c:	f003 020f 	and.w	r2, r3, #15
 800ff30:	6879      	ldr	r1, [r7, #4]
 800ff32:	4613      	mov	r3, r2
 800ff34:	009b      	lsls	r3, r3, #2
 800ff36:	4413      	add	r3, r2
 800ff38:	009b      	lsls	r3, r3, #2
 800ff3a:	440b      	add	r3, r1
 800ff3c:	3324      	adds	r3, #36	@ 0x24
 800ff3e:	2201      	movs	r2, #1
 800ff40:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ff42:	4b39      	ldr	r3, [pc, #228]	@ (8010028 <USBD_CDC_Init+0x1e8>)
 800ff44:	7819      	ldrb	r1, [r3, #0]
 800ff46:	2340      	movs	r3, #64	@ 0x40
 800ff48:	2202      	movs	r2, #2
 800ff4a:	6878      	ldr	r0, [r7, #4]
 800ff4c:	f002 fb5f 	bl	801260e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ff50:	4b35      	ldr	r3, [pc, #212]	@ (8010028 <USBD_CDC_Init+0x1e8>)
 800ff52:	781b      	ldrb	r3, [r3, #0]
 800ff54:	f003 020f 	and.w	r2, r3, #15
 800ff58:	6879      	ldr	r1, [r7, #4]
 800ff5a:	4613      	mov	r3, r2
 800ff5c:	009b      	lsls	r3, r3, #2
 800ff5e:	4413      	add	r3, r2
 800ff60:	009b      	lsls	r3, r3, #2
 800ff62:	440b      	add	r3, r1
 800ff64:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ff68:	2201      	movs	r2, #1
 800ff6a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800ff6c:	4b2f      	ldr	r3, [pc, #188]	@ (801002c <USBD_CDC_Init+0x1ec>)
 800ff6e:	781b      	ldrb	r3, [r3, #0]
 800ff70:	f003 020f 	and.w	r2, r3, #15
 800ff74:	6879      	ldr	r1, [r7, #4]
 800ff76:	4613      	mov	r3, r2
 800ff78:	009b      	lsls	r3, r3, #2
 800ff7a:	4413      	add	r3, r2
 800ff7c:	009b      	lsls	r3, r3, #2
 800ff7e:	440b      	add	r3, r1
 800ff80:	3326      	adds	r3, #38	@ 0x26
 800ff82:	2210      	movs	r2, #16
 800ff84:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ff86:	4b29      	ldr	r3, [pc, #164]	@ (801002c <USBD_CDC_Init+0x1ec>)
 800ff88:	7819      	ldrb	r1, [r3, #0]
 800ff8a:	2308      	movs	r3, #8
 800ff8c:	2203      	movs	r2, #3
 800ff8e:	6878      	ldr	r0, [r7, #4]
 800ff90:	f002 fb3d 	bl	801260e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800ff94:	4b25      	ldr	r3, [pc, #148]	@ (801002c <USBD_CDC_Init+0x1ec>)
 800ff96:	781b      	ldrb	r3, [r3, #0]
 800ff98:	f003 020f 	and.w	r2, r3, #15
 800ff9c:	6879      	ldr	r1, [r7, #4]
 800ff9e:	4613      	mov	r3, r2
 800ffa0:	009b      	lsls	r3, r3, #2
 800ffa2:	4413      	add	r3, r2
 800ffa4:	009b      	lsls	r3, r3, #2
 800ffa6:	440b      	add	r3, r1
 800ffa8:	3324      	adds	r3, #36	@ 0x24
 800ffaa:	2201      	movs	r2, #1
 800ffac:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800ffae:	68fb      	ldr	r3, [r7, #12]
 800ffb0:	2200      	movs	r2, #0
 800ffb2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ffbc:	687a      	ldr	r2, [r7, #4]
 800ffbe:	33b0      	adds	r3, #176	@ 0xb0
 800ffc0:	009b      	lsls	r3, r3, #2
 800ffc2:	4413      	add	r3, r2
 800ffc4:	685b      	ldr	r3, [r3, #4]
 800ffc6:	681b      	ldr	r3, [r3, #0]
 800ffc8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800ffca:	68fb      	ldr	r3, [r7, #12]
 800ffcc:	2200      	movs	r2, #0
 800ffce:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800ffd2:	68fb      	ldr	r3, [r7, #12]
 800ffd4:	2200      	movs	r2, #0
 800ffd6:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800ffda:	68fb      	ldr	r3, [r7, #12]
 800ffdc:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	d101      	bne.n	800ffe8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800ffe4:	2302      	movs	r3, #2
 800ffe6:	e018      	b.n	801001a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	7c1b      	ldrb	r3, [r3, #16]
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d10a      	bne.n	8010006 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800fff0:	4b0d      	ldr	r3, [pc, #52]	@ (8010028 <USBD_CDC_Init+0x1e8>)
 800fff2:	7819      	ldrb	r1, [r3, #0]
 800fff4:	68fb      	ldr	r3, [r7, #12]
 800fff6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800fffa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800fffe:	6878      	ldr	r0, [r7, #4]
 8010000:	f002 fbf4 	bl	80127ec <USBD_LL_PrepareReceive>
 8010004:	e008      	b.n	8010018 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8010006:	4b08      	ldr	r3, [pc, #32]	@ (8010028 <USBD_CDC_Init+0x1e8>)
 8010008:	7819      	ldrb	r1, [r3, #0]
 801000a:	68fb      	ldr	r3, [r7, #12]
 801000c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8010010:	2340      	movs	r3, #64	@ 0x40
 8010012:	6878      	ldr	r0, [r7, #4]
 8010014:	f002 fbea 	bl	80127ec <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8010018:	2300      	movs	r3, #0
}
 801001a:	4618      	mov	r0, r3
 801001c:	3710      	adds	r7, #16
 801001e:	46bd      	mov	sp, r7
 8010020:	bd80      	pop	{r7, pc}
 8010022:	bf00      	nop
 8010024:	200000a3 	.word	0x200000a3
 8010028:	200000a4 	.word	0x200000a4
 801002c:	200000a5 	.word	0x200000a5

08010030 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010030:	b580      	push	{r7, lr}
 8010032:	b082      	sub	sp, #8
 8010034:	af00      	add	r7, sp, #0
 8010036:	6078      	str	r0, [r7, #4]
 8010038:	460b      	mov	r3, r1
 801003a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 801003c:	4b3a      	ldr	r3, [pc, #232]	@ (8010128 <USBD_CDC_DeInit+0xf8>)
 801003e:	781b      	ldrb	r3, [r3, #0]
 8010040:	4619      	mov	r1, r3
 8010042:	6878      	ldr	r0, [r7, #4]
 8010044:	f002 fb09 	bl	801265a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8010048:	4b37      	ldr	r3, [pc, #220]	@ (8010128 <USBD_CDC_DeInit+0xf8>)
 801004a:	781b      	ldrb	r3, [r3, #0]
 801004c:	f003 020f 	and.w	r2, r3, #15
 8010050:	6879      	ldr	r1, [r7, #4]
 8010052:	4613      	mov	r3, r2
 8010054:	009b      	lsls	r3, r3, #2
 8010056:	4413      	add	r3, r2
 8010058:	009b      	lsls	r3, r3, #2
 801005a:	440b      	add	r3, r1
 801005c:	3324      	adds	r3, #36	@ 0x24
 801005e:	2200      	movs	r2, #0
 8010060:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8010062:	4b32      	ldr	r3, [pc, #200]	@ (801012c <USBD_CDC_DeInit+0xfc>)
 8010064:	781b      	ldrb	r3, [r3, #0]
 8010066:	4619      	mov	r1, r3
 8010068:	6878      	ldr	r0, [r7, #4]
 801006a:	f002 faf6 	bl	801265a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 801006e:	4b2f      	ldr	r3, [pc, #188]	@ (801012c <USBD_CDC_DeInit+0xfc>)
 8010070:	781b      	ldrb	r3, [r3, #0]
 8010072:	f003 020f 	and.w	r2, r3, #15
 8010076:	6879      	ldr	r1, [r7, #4]
 8010078:	4613      	mov	r3, r2
 801007a:	009b      	lsls	r3, r3, #2
 801007c:	4413      	add	r3, r2
 801007e:	009b      	lsls	r3, r3, #2
 8010080:	440b      	add	r3, r1
 8010082:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8010086:	2200      	movs	r2, #0
 8010088:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 801008a:	4b29      	ldr	r3, [pc, #164]	@ (8010130 <USBD_CDC_DeInit+0x100>)
 801008c:	781b      	ldrb	r3, [r3, #0]
 801008e:	4619      	mov	r1, r3
 8010090:	6878      	ldr	r0, [r7, #4]
 8010092:	f002 fae2 	bl	801265a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8010096:	4b26      	ldr	r3, [pc, #152]	@ (8010130 <USBD_CDC_DeInit+0x100>)
 8010098:	781b      	ldrb	r3, [r3, #0]
 801009a:	f003 020f 	and.w	r2, r3, #15
 801009e:	6879      	ldr	r1, [r7, #4]
 80100a0:	4613      	mov	r3, r2
 80100a2:	009b      	lsls	r3, r3, #2
 80100a4:	4413      	add	r3, r2
 80100a6:	009b      	lsls	r3, r3, #2
 80100a8:	440b      	add	r3, r1
 80100aa:	3324      	adds	r3, #36	@ 0x24
 80100ac:	2200      	movs	r2, #0
 80100ae:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80100b0:	4b1f      	ldr	r3, [pc, #124]	@ (8010130 <USBD_CDC_DeInit+0x100>)
 80100b2:	781b      	ldrb	r3, [r3, #0]
 80100b4:	f003 020f 	and.w	r2, r3, #15
 80100b8:	6879      	ldr	r1, [r7, #4]
 80100ba:	4613      	mov	r3, r2
 80100bc:	009b      	lsls	r3, r3, #2
 80100be:	4413      	add	r3, r2
 80100c0:	009b      	lsls	r3, r3, #2
 80100c2:	440b      	add	r3, r1
 80100c4:	3326      	adds	r3, #38	@ 0x26
 80100c6:	2200      	movs	r2, #0
 80100c8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	32b0      	adds	r2, #176	@ 0xb0
 80100d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d01f      	beq.n	801011c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80100e2:	687a      	ldr	r2, [r7, #4]
 80100e4:	33b0      	adds	r3, #176	@ 0xb0
 80100e6:	009b      	lsls	r3, r3, #2
 80100e8:	4413      	add	r3, r2
 80100ea:	685b      	ldr	r3, [r3, #4]
 80100ec:	685b      	ldr	r3, [r3, #4]
 80100ee:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	32b0      	adds	r2, #176	@ 0xb0
 80100fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80100fe:	4618      	mov	r0, r3
 8010100:	f002 fbb6 	bl	8012870 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	32b0      	adds	r2, #176	@ 0xb0
 801010e:	2100      	movs	r1, #0
 8010110:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	2200      	movs	r2, #0
 8010118:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 801011c:	2300      	movs	r3, #0
}
 801011e:	4618      	mov	r0, r3
 8010120:	3708      	adds	r7, #8
 8010122:	46bd      	mov	sp, r7
 8010124:	bd80      	pop	{r7, pc}
 8010126:	bf00      	nop
 8010128:	200000a3 	.word	0x200000a3
 801012c:	200000a4 	.word	0x200000a4
 8010130:	200000a5 	.word	0x200000a5

08010134 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8010134:	b580      	push	{r7, lr}
 8010136:	b086      	sub	sp, #24
 8010138:	af00      	add	r7, sp, #0
 801013a:	6078      	str	r0, [r7, #4]
 801013c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	32b0      	adds	r2, #176	@ 0xb0
 8010148:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801014c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 801014e:	2300      	movs	r3, #0
 8010150:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8010152:	2300      	movs	r3, #0
 8010154:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8010156:	2300      	movs	r3, #0
 8010158:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 801015a:	693b      	ldr	r3, [r7, #16]
 801015c:	2b00      	cmp	r3, #0
 801015e:	d101      	bne.n	8010164 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8010160:	2303      	movs	r3, #3
 8010162:	e0bf      	b.n	80102e4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010164:	683b      	ldr	r3, [r7, #0]
 8010166:	781b      	ldrb	r3, [r3, #0]
 8010168:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801016c:	2b00      	cmp	r3, #0
 801016e:	d050      	beq.n	8010212 <USBD_CDC_Setup+0xde>
 8010170:	2b20      	cmp	r3, #32
 8010172:	f040 80af 	bne.w	80102d4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8010176:	683b      	ldr	r3, [r7, #0]
 8010178:	88db      	ldrh	r3, [r3, #6]
 801017a:	2b00      	cmp	r3, #0
 801017c:	d03a      	beq.n	80101f4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 801017e:	683b      	ldr	r3, [r7, #0]
 8010180:	781b      	ldrb	r3, [r3, #0]
 8010182:	b25b      	sxtb	r3, r3
 8010184:	2b00      	cmp	r3, #0
 8010186:	da1b      	bge.n	80101c0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801018e:	687a      	ldr	r2, [r7, #4]
 8010190:	33b0      	adds	r3, #176	@ 0xb0
 8010192:	009b      	lsls	r3, r3, #2
 8010194:	4413      	add	r3, r2
 8010196:	685b      	ldr	r3, [r3, #4]
 8010198:	689b      	ldr	r3, [r3, #8]
 801019a:	683a      	ldr	r2, [r7, #0]
 801019c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 801019e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80101a0:	683a      	ldr	r2, [r7, #0]
 80101a2:	88d2      	ldrh	r2, [r2, #6]
 80101a4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80101a6:	683b      	ldr	r3, [r7, #0]
 80101a8:	88db      	ldrh	r3, [r3, #6]
 80101aa:	2b07      	cmp	r3, #7
 80101ac:	bf28      	it	cs
 80101ae:	2307      	movcs	r3, #7
 80101b0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80101b2:	693b      	ldr	r3, [r7, #16]
 80101b4:	89fa      	ldrh	r2, [r7, #14]
 80101b6:	4619      	mov	r1, r3
 80101b8:	6878      	ldr	r0, [r7, #4]
 80101ba:	f001 fd93 	bl	8011ce4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80101be:	e090      	b.n	80102e2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80101c0:	683b      	ldr	r3, [r7, #0]
 80101c2:	785a      	ldrb	r2, [r3, #1]
 80101c4:	693b      	ldr	r3, [r7, #16]
 80101c6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80101ca:	683b      	ldr	r3, [r7, #0]
 80101cc:	88db      	ldrh	r3, [r3, #6]
 80101ce:	2b3f      	cmp	r3, #63	@ 0x3f
 80101d0:	d803      	bhi.n	80101da <USBD_CDC_Setup+0xa6>
 80101d2:	683b      	ldr	r3, [r7, #0]
 80101d4:	88db      	ldrh	r3, [r3, #6]
 80101d6:	b2da      	uxtb	r2, r3
 80101d8:	e000      	b.n	80101dc <USBD_CDC_Setup+0xa8>
 80101da:	2240      	movs	r2, #64	@ 0x40
 80101dc:	693b      	ldr	r3, [r7, #16]
 80101de:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80101e2:	6939      	ldr	r1, [r7, #16]
 80101e4:	693b      	ldr	r3, [r7, #16]
 80101e6:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80101ea:	461a      	mov	r2, r3
 80101ec:	6878      	ldr	r0, [r7, #4]
 80101ee:	f001 fda5 	bl	8011d3c <USBD_CtlPrepareRx>
      break;
 80101f2:	e076      	b.n	80102e2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80101fa:	687a      	ldr	r2, [r7, #4]
 80101fc:	33b0      	adds	r3, #176	@ 0xb0
 80101fe:	009b      	lsls	r3, r3, #2
 8010200:	4413      	add	r3, r2
 8010202:	685b      	ldr	r3, [r3, #4]
 8010204:	689b      	ldr	r3, [r3, #8]
 8010206:	683a      	ldr	r2, [r7, #0]
 8010208:	7850      	ldrb	r0, [r2, #1]
 801020a:	2200      	movs	r2, #0
 801020c:	6839      	ldr	r1, [r7, #0]
 801020e:	4798      	blx	r3
      break;
 8010210:	e067      	b.n	80102e2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8010212:	683b      	ldr	r3, [r7, #0]
 8010214:	785b      	ldrb	r3, [r3, #1]
 8010216:	2b0b      	cmp	r3, #11
 8010218:	d851      	bhi.n	80102be <USBD_CDC_Setup+0x18a>
 801021a:	a201      	add	r2, pc, #4	@ (adr r2, 8010220 <USBD_CDC_Setup+0xec>)
 801021c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010220:	08010251 	.word	0x08010251
 8010224:	080102cd 	.word	0x080102cd
 8010228:	080102bf 	.word	0x080102bf
 801022c:	080102bf 	.word	0x080102bf
 8010230:	080102bf 	.word	0x080102bf
 8010234:	080102bf 	.word	0x080102bf
 8010238:	080102bf 	.word	0x080102bf
 801023c:	080102bf 	.word	0x080102bf
 8010240:	080102bf 	.word	0x080102bf
 8010244:	080102bf 	.word	0x080102bf
 8010248:	0801027b 	.word	0x0801027b
 801024c:	080102a5 	.word	0x080102a5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010256:	b2db      	uxtb	r3, r3
 8010258:	2b03      	cmp	r3, #3
 801025a:	d107      	bne.n	801026c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 801025c:	f107 030a 	add.w	r3, r7, #10
 8010260:	2202      	movs	r2, #2
 8010262:	4619      	mov	r1, r3
 8010264:	6878      	ldr	r0, [r7, #4]
 8010266:	f001 fd3d 	bl	8011ce4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801026a:	e032      	b.n	80102d2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 801026c:	6839      	ldr	r1, [r7, #0]
 801026e:	6878      	ldr	r0, [r7, #4]
 8010270:	f001 fcbb 	bl	8011bea <USBD_CtlError>
            ret = USBD_FAIL;
 8010274:	2303      	movs	r3, #3
 8010276:	75fb      	strb	r3, [r7, #23]
          break;
 8010278:	e02b      	b.n	80102d2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010280:	b2db      	uxtb	r3, r3
 8010282:	2b03      	cmp	r3, #3
 8010284:	d107      	bne.n	8010296 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8010286:	f107 030d 	add.w	r3, r7, #13
 801028a:	2201      	movs	r2, #1
 801028c:	4619      	mov	r1, r3
 801028e:	6878      	ldr	r0, [r7, #4]
 8010290:	f001 fd28 	bl	8011ce4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8010294:	e01d      	b.n	80102d2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8010296:	6839      	ldr	r1, [r7, #0]
 8010298:	6878      	ldr	r0, [r7, #4]
 801029a:	f001 fca6 	bl	8011bea <USBD_CtlError>
            ret = USBD_FAIL;
 801029e:	2303      	movs	r3, #3
 80102a0:	75fb      	strb	r3, [r7, #23]
          break;
 80102a2:	e016      	b.n	80102d2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80102aa:	b2db      	uxtb	r3, r3
 80102ac:	2b03      	cmp	r3, #3
 80102ae:	d00f      	beq.n	80102d0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80102b0:	6839      	ldr	r1, [r7, #0]
 80102b2:	6878      	ldr	r0, [r7, #4]
 80102b4:	f001 fc99 	bl	8011bea <USBD_CtlError>
            ret = USBD_FAIL;
 80102b8:	2303      	movs	r3, #3
 80102ba:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80102bc:	e008      	b.n	80102d0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80102be:	6839      	ldr	r1, [r7, #0]
 80102c0:	6878      	ldr	r0, [r7, #4]
 80102c2:	f001 fc92 	bl	8011bea <USBD_CtlError>
          ret = USBD_FAIL;
 80102c6:	2303      	movs	r3, #3
 80102c8:	75fb      	strb	r3, [r7, #23]
          break;
 80102ca:	e002      	b.n	80102d2 <USBD_CDC_Setup+0x19e>
          break;
 80102cc:	bf00      	nop
 80102ce:	e008      	b.n	80102e2 <USBD_CDC_Setup+0x1ae>
          break;
 80102d0:	bf00      	nop
      }
      break;
 80102d2:	e006      	b.n	80102e2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80102d4:	6839      	ldr	r1, [r7, #0]
 80102d6:	6878      	ldr	r0, [r7, #4]
 80102d8:	f001 fc87 	bl	8011bea <USBD_CtlError>
      ret = USBD_FAIL;
 80102dc:	2303      	movs	r3, #3
 80102de:	75fb      	strb	r3, [r7, #23]
      break;
 80102e0:	bf00      	nop
  }

  return (uint8_t)ret;
 80102e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80102e4:	4618      	mov	r0, r3
 80102e6:	3718      	adds	r7, #24
 80102e8:	46bd      	mov	sp, r7
 80102ea:	bd80      	pop	{r7, pc}

080102ec <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80102ec:	b580      	push	{r7, lr}
 80102ee:	b084      	sub	sp, #16
 80102f0:	af00      	add	r7, sp, #0
 80102f2:	6078      	str	r0, [r7, #4]
 80102f4:	460b      	mov	r3, r1
 80102f6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80102fe:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	32b0      	adds	r2, #176	@ 0xb0
 801030a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801030e:	2b00      	cmp	r3, #0
 8010310:	d101      	bne.n	8010316 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8010312:	2303      	movs	r3, #3
 8010314:	e065      	b.n	80103e2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	32b0      	adds	r2, #176	@ 0xb0
 8010320:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010324:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8010326:	78fb      	ldrb	r3, [r7, #3]
 8010328:	f003 020f 	and.w	r2, r3, #15
 801032c:	6879      	ldr	r1, [r7, #4]
 801032e:	4613      	mov	r3, r2
 8010330:	009b      	lsls	r3, r3, #2
 8010332:	4413      	add	r3, r2
 8010334:	009b      	lsls	r3, r3, #2
 8010336:	440b      	add	r3, r1
 8010338:	3318      	adds	r3, #24
 801033a:	681b      	ldr	r3, [r3, #0]
 801033c:	2b00      	cmp	r3, #0
 801033e:	d02f      	beq.n	80103a0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8010340:	78fb      	ldrb	r3, [r7, #3]
 8010342:	f003 020f 	and.w	r2, r3, #15
 8010346:	6879      	ldr	r1, [r7, #4]
 8010348:	4613      	mov	r3, r2
 801034a:	009b      	lsls	r3, r3, #2
 801034c:	4413      	add	r3, r2
 801034e:	009b      	lsls	r3, r3, #2
 8010350:	440b      	add	r3, r1
 8010352:	3318      	adds	r3, #24
 8010354:	681a      	ldr	r2, [r3, #0]
 8010356:	78fb      	ldrb	r3, [r7, #3]
 8010358:	f003 010f 	and.w	r1, r3, #15
 801035c:	68f8      	ldr	r0, [r7, #12]
 801035e:	460b      	mov	r3, r1
 8010360:	00db      	lsls	r3, r3, #3
 8010362:	440b      	add	r3, r1
 8010364:	009b      	lsls	r3, r3, #2
 8010366:	4403      	add	r3, r0
 8010368:	331c      	adds	r3, #28
 801036a:	681b      	ldr	r3, [r3, #0]
 801036c:	fbb2 f1f3 	udiv	r1, r2, r3
 8010370:	fb01 f303 	mul.w	r3, r1, r3
 8010374:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8010376:	2b00      	cmp	r3, #0
 8010378:	d112      	bne.n	80103a0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 801037a:	78fb      	ldrb	r3, [r7, #3]
 801037c:	f003 020f 	and.w	r2, r3, #15
 8010380:	6879      	ldr	r1, [r7, #4]
 8010382:	4613      	mov	r3, r2
 8010384:	009b      	lsls	r3, r3, #2
 8010386:	4413      	add	r3, r2
 8010388:	009b      	lsls	r3, r3, #2
 801038a:	440b      	add	r3, r1
 801038c:	3318      	adds	r3, #24
 801038e:	2200      	movs	r2, #0
 8010390:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8010392:	78f9      	ldrb	r1, [r7, #3]
 8010394:	2300      	movs	r3, #0
 8010396:	2200      	movs	r2, #0
 8010398:	6878      	ldr	r0, [r7, #4]
 801039a:	f002 fa06 	bl	80127aa <USBD_LL_Transmit>
 801039e:	e01f      	b.n	80103e0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80103a0:	68bb      	ldr	r3, [r7, #8]
 80103a2:	2200      	movs	r2, #0
 80103a4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80103ae:	687a      	ldr	r2, [r7, #4]
 80103b0:	33b0      	adds	r3, #176	@ 0xb0
 80103b2:	009b      	lsls	r3, r3, #2
 80103b4:	4413      	add	r3, r2
 80103b6:	685b      	ldr	r3, [r3, #4]
 80103b8:	691b      	ldr	r3, [r3, #16]
 80103ba:	2b00      	cmp	r3, #0
 80103bc:	d010      	beq.n	80103e0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80103c4:	687a      	ldr	r2, [r7, #4]
 80103c6:	33b0      	adds	r3, #176	@ 0xb0
 80103c8:	009b      	lsls	r3, r3, #2
 80103ca:	4413      	add	r3, r2
 80103cc:	685b      	ldr	r3, [r3, #4]
 80103ce:	691b      	ldr	r3, [r3, #16]
 80103d0:	68ba      	ldr	r2, [r7, #8]
 80103d2:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80103d6:	68ba      	ldr	r2, [r7, #8]
 80103d8:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80103dc:	78fa      	ldrb	r2, [r7, #3]
 80103de:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80103e0:	2300      	movs	r3, #0
}
 80103e2:	4618      	mov	r0, r3
 80103e4:	3710      	adds	r7, #16
 80103e6:	46bd      	mov	sp, r7
 80103e8:	bd80      	pop	{r7, pc}

080103ea <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80103ea:	b580      	push	{r7, lr}
 80103ec:	b084      	sub	sp, #16
 80103ee:	af00      	add	r7, sp, #0
 80103f0:	6078      	str	r0, [r7, #4]
 80103f2:	460b      	mov	r3, r1
 80103f4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	32b0      	adds	r2, #176	@ 0xb0
 8010400:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010404:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	32b0      	adds	r2, #176	@ 0xb0
 8010410:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010414:	2b00      	cmp	r3, #0
 8010416:	d101      	bne.n	801041c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8010418:	2303      	movs	r3, #3
 801041a:	e01a      	b.n	8010452 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 801041c:	78fb      	ldrb	r3, [r7, #3]
 801041e:	4619      	mov	r1, r3
 8010420:	6878      	ldr	r0, [r7, #4]
 8010422:	f002 fa04 	bl	801282e <USBD_LL_GetRxDataSize>
 8010426:	4602      	mov	r2, r0
 8010428:	68fb      	ldr	r3, [r7, #12]
 801042a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010434:	687a      	ldr	r2, [r7, #4]
 8010436:	33b0      	adds	r3, #176	@ 0xb0
 8010438:	009b      	lsls	r3, r3, #2
 801043a:	4413      	add	r3, r2
 801043c:	685b      	ldr	r3, [r3, #4]
 801043e:	68db      	ldr	r3, [r3, #12]
 8010440:	68fa      	ldr	r2, [r7, #12]
 8010442:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8010446:	68fa      	ldr	r2, [r7, #12]
 8010448:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 801044c:	4611      	mov	r1, r2
 801044e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8010450:	2300      	movs	r3, #0
}
 8010452:	4618      	mov	r0, r3
 8010454:	3710      	adds	r7, #16
 8010456:	46bd      	mov	sp, r7
 8010458:	bd80      	pop	{r7, pc}

0801045a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 801045a:	b580      	push	{r7, lr}
 801045c:	b084      	sub	sp, #16
 801045e:	af00      	add	r7, sp, #0
 8010460:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	32b0      	adds	r2, #176	@ 0xb0
 801046c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010470:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8010472:	68fb      	ldr	r3, [r7, #12]
 8010474:	2b00      	cmp	r3, #0
 8010476:	d101      	bne.n	801047c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8010478:	2303      	movs	r3, #3
 801047a:	e024      	b.n	80104c6 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010482:	687a      	ldr	r2, [r7, #4]
 8010484:	33b0      	adds	r3, #176	@ 0xb0
 8010486:	009b      	lsls	r3, r3, #2
 8010488:	4413      	add	r3, r2
 801048a:	685b      	ldr	r3, [r3, #4]
 801048c:	2b00      	cmp	r3, #0
 801048e:	d019      	beq.n	80104c4 <USBD_CDC_EP0_RxReady+0x6a>
 8010490:	68fb      	ldr	r3, [r7, #12]
 8010492:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8010496:	2bff      	cmp	r3, #255	@ 0xff
 8010498:	d014      	beq.n	80104c4 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80104a0:	687a      	ldr	r2, [r7, #4]
 80104a2:	33b0      	adds	r3, #176	@ 0xb0
 80104a4:	009b      	lsls	r3, r3, #2
 80104a6:	4413      	add	r3, r2
 80104a8:	685b      	ldr	r3, [r3, #4]
 80104aa:	689b      	ldr	r3, [r3, #8]
 80104ac:	68fa      	ldr	r2, [r7, #12]
 80104ae:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80104b2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80104b4:	68fa      	ldr	r2, [r7, #12]
 80104b6:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80104ba:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80104bc:	68fb      	ldr	r3, [r7, #12]
 80104be:	22ff      	movs	r2, #255	@ 0xff
 80104c0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80104c4:	2300      	movs	r3, #0
}
 80104c6:	4618      	mov	r0, r3
 80104c8:	3710      	adds	r7, #16
 80104ca:	46bd      	mov	sp, r7
 80104cc:	bd80      	pop	{r7, pc}
	...

080104d0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80104d0:	b580      	push	{r7, lr}
 80104d2:	b086      	sub	sp, #24
 80104d4:	af00      	add	r7, sp, #0
 80104d6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80104d8:	2182      	movs	r1, #130	@ 0x82
 80104da:	4818      	ldr	r0, [pc, #96]	@ (801053c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80104dc:	f000 fd4f 	bl	8010f7e <USBD_GetEpDesc>
 80104e0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80104e2:	2101      	movs	r1, #1
 80104e4:	4815      	ldr	r0, [pc, #84]	@ (801053c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80104e6:	f000 fd4a 	bl	8010f7e <USBD_GetEpDesc>
 80104ea:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80104ec:	2181      	movs	r1, #129	@ 0x81
 80104ee:	4813      	ldr	r0, [pc, #76]	@ (801053c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80104f0:	f000 fd45 	bl	8010f7e <USBD_GetEpDesc>
 80104f4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80104f6:	697b      	ldr	r3, [r7, #20]
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	d002      	beq.n	8010502 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80104fc:	697b      	ldr	r3, [r7, #20]
 80104fe:	2210      	movs	r2, #16
 8010500:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8010502:	693b      	ldr	r3, [r7, #16]
 8010504:	2b00      	cmp	r3, #0
 8010506:	d006      	beq.n	8010516 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8010508:	693b      	ldr	r3, [r7, #16]
 801050a:	2200      	movs	r2, #0
 801050c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8010510:	711a      	strb	r2, [r3, #4]
 8010512:	2200      	movs	r2, #0
 8010514:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8010516:	68fb      	ldr	r3, [r7, #12]
 8010518:	2b00      	cmp	r3, #0
 801051a:	d006      	beq.n	801052a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801051c:	68fb      	ldr	r3, [r7, #12]
 801051e:	2200      	movs	r2, #0
 8010520:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8010524:	711a      	strb	r2, [r3, #4]
 8010526:	2200      	movs	r2, #0
 8010528:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	2243      	movs	r2, #67	@ 0x43
 801052e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8010530:	4b02      	ldr	r3, [pc, #8]	@ (801053c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8010532:	4618      	mov	r0, r3
 8010534:	3718      	adds	r7, #24
 8010536:	46bd      	mov	sp, r7
 8010538:	bd80      	pop	{r7, pc}
 801053a:	bf00      	nop
 801053c:	20000060 	.word	0x20000060

08010540 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8010540:	b580      	push	{r7, lr}
 8010542:	b086      	sub	sp, #24
 8010544:	af00      	add	r7, sp, #0
 8010546:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8010548:	2182      	movs	r1, #130	@ 0x82
 801054a:	4818      	ldr	r0, [pc, #96]	@ (80105ac <USBD_CDC_GetHSCfgDesc+0x6c>)
 801054c:	f000 fd17 	bl	8010f7e <USBD_GetEpDesc>
 8010550:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8010552:	2101      	movs	r1, #1
 8010554:	4815      	ldr	r0, [pc, #84]	@ (80105ac <USBD_CDC_GetHSCfgDesc+0x6c>)
 8010556:	f000 fd12 	bl	8010f7e <USBD_GetEpDesc>
 801055a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 801055c:	2181      	movs	r1, #129	@ 0x81
 801055e:	4813      	ldr	r0, [pc, #76]	@ (80105ac <USBD_CDC_GetHSCfgDesc+0x6c>)
 8010560:	f000 fd0d 	bl	8010f7e <USBD_GetEpDesc>
 8010564:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8010566:	697b      	ldr	r3, [r7, #20]
 8010568:	2b00      	cmp	r3, #0
 801056a:	d002      	beq.n	8010572 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 801056c:	697b      	ldr	r3, [r7, #20]
 801056e:	2210      	movs	r2, #16
 8010570:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8010572:	693b      	ldr	r3, [r7, #16]
 8010574:	2b00      	cmp	r3, #0
 8010576:	d006      	beq.n	8010586 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8010578:	693b      	ldr	r3, [r7, #16]
 801057a:	2200      	movs	r2, #0
 801057c:	711a      	strb	r2, [r3, #4]
 801057e:	2200      	movs	r2, #0
 8010580:	f042 0202 	orr.w	r2, r2, #2
 8010584:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8010586:	68fb      	ldr	r3, [r7, #12]
 8010588:	2b00      	cmp	r3, #0
 801058a:	d006      	beq.n	801059a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 801058c:	68fb      	ldr	r3, [r7, #12]
 801058e:	2200      	movs	r2, #0
 8010590:	711a      	strb	r2, [r3, #4]
 8010592:	2200      	movs	r2, #0
 8010594:	f042 0202 	orr.w	r2, r2, #2
 8010598:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	2243      	movs	r2, #67	@ 0x43
 801059e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80105a0:	4b02      	ldr	r3, [pc, #8]	@ (80105ac <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80105a2:	4618      	mov	r0, r3
 80105a4:	3718      	adds	r7, #24
 80105a6:	46bd      	mov	sp, r7
 80105a8:	bd80      	pop	{r7, pc}
 80105aa:	bf00      	nop
 80105ac:	20000060 	.word	0x20000060

080105b0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80105b0:	b580      	push	{r7, lr}
 80105b2:	b086      	sub	sp, #24
 80105b4:	af00      	add	r7, sp, #0
 80105b6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80105b8:	2182      	movs	r1, #130	@ 0x82
 80105ba:	4818      	ldr	r0, [pc, #96]	@ (801061c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80105bc:	f000 fcdf 	bl	8010f7e <USBD_GetEpDesc>
 80105c0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80105c2:	2101      	movs	r1, #1
 80105c4:	4815      	ldr	r0, [pc, #84]	@ (801061c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80105c6:	f000 fcda 	bl	8010f7e <USBD_GetEpDesc>
 80105ca:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80105cc:	2181      	movs	r1, #129	@ 0x81
 80105ce:	4813      	ldr	r0, [pc, #76]	@ (801061c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80105d0:	f000 fcd5 	bl	8010f7e <USBD_GetEpDesc>
 80105d4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80105d6:	697b      	ldr	r3, [r7, #20]
 80105d8:	2b00      	cmp	r3, #0
 80105da:	d002      	beq.n	80105e2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80105dc:	697b      	ldr	r3, [r7, #20]
 80105de:	2210      	movs	r2, #16
 80105e0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80105e2:	693b      	ldr	r3, [r7, #16]
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	d006      	beq.n	80105f6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80105e8:	693b      	ldr	r3, [r7, #16]
 80105ea:	2200      	movs	r2, #0
 80105ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80105f0:	711a      	strb	r2, [r3, #4]
 80105f2:	2200      	movs	r2, #0
 80105f4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80105f6:	68fb      	ldr	r3, [r7, #12]
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	d006      	beq.n	801060a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80105fc:	68fb      	ldr	r3, [r7, #12]
 80105fe:	2200      	movs	r2, #0
 8010600:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8010604:	711a      	strb	r2, [r3, #4]
 8010606:	2200      	movs	r2, #0
 8010608:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	2243      	movs	r2, #67	@ 0x43
 801060e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8010610:	4b02      	ldr	r3, [pc, #8]	@ (801061c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8010612:	4618      	mov	r0, r3
 8010614:	3718      	adds	r7, #24
 8010616:	46bd      	mov	sp, r7
 8010618:	bd80      	pop	{r7, pc}
 801061a:	bf00      	nop
 801061c:	20000060 	.word	0x20000060

08010620 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8010620:	b480      	push	{r7}
 8010622:	b083      	sub	sp, #12
 8010624:	af00      	add	r7, sp, #0
 8010626:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	220a      	movs	r2, #10
 801062c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 801062e:	4b03      	ldr	r3, [pc, #12]	@ (801063c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8010630:	4618      	mov	r0, r3
 8010632:	370c      	adds	r7, #12
 8010634:	46bd      	mov	sp, r7
 8010636:	f85d 7b04 	ldr.w	r7, [sp], #4
 801063a:	4770      	bx	lr
 801063c:	2000001c 	.word	0x2000001c

08010640 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8010640:	b480      	push	{r7}
 8010642:	b083      	sub	sp, #12
 8010644:	af00      	add	r7, sp, #0
 8010646:	6078      	str	r0, [r7, #4]
 8010648:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801064a:	683b      	ldr	r3, [r7, #0]
 801064c:	2b00      	cmp	r3, #0
 801064e:	d101      	bne.n	8010654 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8010650:	2303      	movs	r3, #3
 8010652:	e009      	b.n	8010668 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801065a:	687a      	ldr	r2, [r7, #4]
 801065c:	33b0      	adds	r3, #176	@ 0xb0
 801065e:	009b      	lsls	r3, r3, #2
 8010660:	4413      	add	r3, r2
 8010662:	683a      	ldr	r2, [r7, #0]
 8010664:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8010666:	2300      	movs	r3, #0
}
 8010668:	4618      	mov	r0, r3
 801066a:	370c      	adds	r7, #12
 801066c:	46bd      	mov	sp, r7
 801066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010672:	4770      	bx	lr

08010674 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8010674:	b480      	push	{r7}
 8010676:	b087      	sub	sp, #28
 8010678:	af00      	add	r7, sp, #0
 801067a:	60f8      	str	r0, [r7, #12]
 801067c:	60b9      	str	r1, [r7, #8]
 801067e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010680:	68fb      	ldr	r3, [r7, #12]
 8010682:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010686:	68fb      	ldr	r3, [r7, #12]
 8010688:	32b0      	adds	r2, #176	@ 0xb0
 801068a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801068e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8010690:	697b      	ldr	r3, [r7, #20]
 8010692:	2b00      	cmp	r3, #0
 8010694:	d101      	bne.n	801069a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8010696:	2303      	movs	r3, #3
 8010698:	e008      	b.n	80106ac <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 801069a:	697b      	ldr	r3, [r7, #20]
 801069c:	68ba      	ldr	r2, [r7, #8]
 801069e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80106a2:	697b      	ldr	r3, [r7, #20]
 80106a4:	687a      	ldr	r2, [r7, #4]
 80106a6:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80106aa:	2300      	movs	r3, #0
}
 80106ac:	4618      	mov	r0, r3
 80106ae:	371c      	adds	r7, #28
 80106b0:	46bd      	mov	sp, r7
 80106b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106b6:	4770      	bx	lr

080106b8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80106b8:	b480      	push	{r7}
 80106ba:	b085      	sub	sp, #20
 80106bc:	af00      	add	r7, sp, #0
 80106be:	6078      	str	r0, [r7, #4]
 80106c0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	32b0      	adds	r2, #176	@ 0xb0
 80106cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80106d0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80106d2:	68fb      	ldr	r3, [r7, #12]
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d101      	bne.n	80106dc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80106d8:	2303      	movs	r3, #3
 80106da:	e004      	b.n	80106e6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80106dc:	68fb      	ldr	r3, [r7, #12]
 80106de:	683a      	ldr	r2, [r7, #0]
 80106e0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80106e4:	2300      	movs	r3, #0
}
 80106e6:	4618      	mov	r0, r3
 80106e8:	3714      	adds	r7, #20
 80106ea:	46bd      	mov	sp, r7
 80106ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106f0:	4770      	bx	lr
	...

080106f4 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80106f4:	b580      	push	{r7, lr}
 80106f6:	b084      	sub	sp, #16
 80106f8:	af00      	add	r7, sp, #0
 80106fa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	32b0      	adds	r2, #176	@ 0xb0
 8010706:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801070a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 801070c:	2301      	movs	r3, #1
 801070e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8010710:	68bb      	ldr	r3, [r7, #8]
 8010712:	2b00      	cmp	r3, #0
 8010714:	d101      	bne.n	801071a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8010716:	2303      	movs	r3, #3
 8010718:	e025      	b.n	8010766 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 801071a:	68bb      	ldr	r3, [r7, #8]
 801071c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8010720:	2b00      	cmp	r3, #0
 8010722:	d11f      	bne.n	8010764 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8010724:	68bb      	ldr	r3, [r7, #8]
 8010726:	2201      	movs	r2, #1
 8010728:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 801072c:	4b10      	ldr	r3, [pc, #64]	@ (8010770 <USBD_CDC_TransmitPacket+0x7c>)
 801072e:	781b      	ldrb	r3, [r3, #0]
 8010730:	f003 020f 	and.w	r2, r3, #15
 8010734:	68bb      	ldr	r3, [r7, #8]
 8010736:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 801073a:	6878      	ldr	r0, [r7, #4]
 801073c:	4613      	mov	r3, r2
 801073e:	009b      	lsls	r3, r3, #2
 8010740:	4413      	add	r3, r2
 8010742:	009b      	lsls	r3, r3, #2
 8010744:	4403      	add	r3, r0
 8010746:	3318      	adds	r3, #24
 8010748:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 801074a:	4b09      	ldr	r3, [pc, #36]	@ (8010770 <USBD_CDC_TransmitPacket+0x7c>)
 801074c:	7819      	ldrb	r1, [r3, #0]
 801074e:	68bb      	ldr	r3, [r7, #8]
 8010750:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8010754:	68bb      	ldr	r3, [r7, #8]
 8010756:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 801075a:	6878      	ldr	r0, [r7, #4]
 801075c:	f002 f825 	bl	80127aa <USBD_LL_Transmit>

    ret = USBD_OK;
 8010760:	2300      	movs	r3, #0
 8010762:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8010764:	7bfb      	ldrb	r3, [r7, #15]
}
 8010766:	4618      	mov	r0, r3
 8010768:	3710      	adds	r7, #16
 801076a:	46bd      	mov	sp, r7
 801076c:	bd80      	pop	{r7, pc}
 801076e:	bf00      	nop
 8010770:	200000a3 	.word	0x200000a3

08010774 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8010774:	b580      	push	{r7, lr}
 8010776:	b084      	sub	sp, #16
 8010778:	af00      	add	r7, sp, #0
 801077a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	32b0      	adds	r2, #176	@ 0xb0
 8010786:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801078a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	32b0      	adds	r2, #176	@ 0xb0
 8010796:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801079a:	2b00      	cmp	r3, #0
 801079c:	d101      	bne.n	80107a2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 801079e:	2303      	movs	r3, #3
 80107a0:	e018      	b.n	80107d4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	7c1b      	ldrb	r3, [r3, #16]
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	d10a      	bne.n	80107c0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80107aa:	4b0c      	ldr	r3, [pc, #48]	@ (80107dc <USBD_CDC_ReceivePacket+0x68>)
 80107ac:	7819      	ldrb	r1, [r3, #0]
 80107ae:	68fb      	ldr	r3, [r7, #12]
 80107b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80107b4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80107b8:	6878      	ldr	r0, [r7, #4]
 80107ba:	f002 f817 	bl	80127ec <USBD_LL_PrepareReceive>
 80107be:	e008      	b.n	80107d2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80107c0:	4b06      	ldr	r3, [pc, #24]	@ (80107dc <USBD_CDC_ReceivePacket+0x68>)
 80107c2:	7819      	ldrb	r1, [r3, #0]
 80107c4:	68fb      	ldr	r3, [r7, #12]
 80107c6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80107ca:	2340      	movs	r3, #64	@ 0x40
 80107cc:	6878      	ldr	r0, [r7, #4]
 80107ce:	f002 f80d 	bl	80127ec <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80107d2:	2300      	movs	r3, #0
}
 80107d4:	4618      	mov	r0, r3
 80107d6:	3710      	adds	r7, #16
 80107d8:	46bd      	mov	sp, r7
 80107da:	bd80      	pop	{r7, pc}
 80107dc:	200000a4 	.word	0x200000a4

080107e0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80107e0:	b580      	push	{r7, lr}
 80107e2:	b086      	sub	sp, #24
 80107e4:	af00      	add	r7, sp, #0
 80107e6:	60f8      	str	r0, [r7, #12]
 80107e8:	60b9      	str	r1, [r7, #8]
 80107ea:	4613      	mov	r3, r2
 80107ec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80107ee:	68fb      	ldr	r3, [r7, #12]
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	d101      	bne.n	80107f8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80107f4:	2303      	movs	r3, #3
 80107f6:	e01f      	b.n	8010838 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80107f8:	68fb      	ldr	r3, [r7, #12]
 80107fa:	2200      	movs	r2, #0
 80107fc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8010800:	68fb      	ldr	r3, [r7, #12]
 8010802:	2200      	movs	r2, #0
 8010804:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8010808:	68fb      	ldr	r3, [r7, #12]
 801080a:	2200      	movs	r2, #0
 801080c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8010810:	68bb      	ldr	r3, [r7, #8]
 8010812:	2b00      	cmp	r3, #0
 8010814:	d003      	beq.n	801081e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8010816:	68fb      	ldr	r3, [r7, #12]
 8010818:	68ba      	ldr	r2, [r7, #8]
 801081a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801081e:	68fb      	ldr	r3, [r7, #12]
 8010820:	2201      	movs	r2, #1
 8010822:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8010826:	68fb      	ldr	r3, [r7, #12]
 8010828:	79fa      	ldrb	r2, [r7, #7]
 801082a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 801082c:	68f8      	ldr	r0, [r7, #12]
 801082e:	f001 fe87 	bl	8012540 <USBD_LL_Init>
 8010832:	4603      	mov	r3, r0
 8010834:	75fb      	strb	r3, [r7, #23]

  return ret;
 8010836:	7dfb      	ldrb	r3, [r7, #23]
}
 8010838:	4618      	mov	r0, r3
 801083a:	3718      	adds	r7, #24
 801083c:	46bd      	mov	sp, r7
 801083e:	bd80      	pop	{r7, pc}

08010840 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8010840:	b580      	push	{r7, lr}
 8010842:	b084      	sub	sp, #16
 8010844:	af00      	add	r7, sp, #0
 8010846:	6078      	str	r0, [r7, #4]
 8010848:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801084a:	2300      	movs	r3, #0
 801084c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 801084e:	683b      	ldr	r3, [r7, #0]
 8010850:	2b00      	cmp	r3, #0
 8010852:	d101      	bne.n	8010858 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8010854:	2303      	movs	r3, #3
 8010856:	e025      	b.n	80108a4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	683a      	ldr	r2, [r7, #0]
 801085c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	32ae      	adds	r2, #174	@ 0xae
 801086a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801086e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010870:	2b00      	cmp	r3, #0
 8010872:	d00f      	beq.n	8010894 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	32ae      	adds	r2, #174	@ 0xae
 801087e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010882:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010884:	f107 020e 	add.w	r2, r7, #14
 8010888:	4610      	mov	r0, r2
 801088a:	4798      	blx	r3
 801088c:	4602      	mov	r2, r0
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801089a:	1c5a      	adds	r2, r3, #1
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80108a2:	2300      	movs	r3, #0
}
 80108a4:	4618      	mov	r0, r3
 80108a6:	3710      	adds	r7, #16
 80108a8:	46bd      	mov	sp, r7
 80108aa:	bd80      	pop	{r7, pc}

080108ac <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80108ac:	b580      	push	{r7, lr}
 80108ae:	b082      	sub	sp, #8
 80108b0:	af00      	add	r7, sp, #0
 80108b2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80108b4:	6878      	ldr	r0, [r7, #4]
 80108b6:	f001 fe8f 	bl	80125d8 <USBD_LL_Start>
 80108ba:	4603      	mov	r3, r0
}
 80108bc:	4618      	mov	r0, r3
 80108be:	3708      	adds	r7, #8
 80108c0:	46bd      	mov	sp, r7
 80108c2:	bd80      	pop	{r7, pc}

080108c4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80108c4:	b480      	push	{r7}
 80108c6:	b083      	sub	sp, #12
 80108c8:	af00      	add	r7, sp, #0
 80108ca:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80108cc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80108ce:	4618      	mov	r0, r3
 80108d0:	370c      	adds	r7, #12
 80108d2:	46bd      	mov	sp, r7
 80108d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108d8:	4770      	bx	lr

080108da <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80108da:	b580      	push	{r7, lr}
 80108dc:	b084      	sub	sp, #16
 80108de:	af00      	add	r7, sp, #0
 80108e0:	6078      	str	r0, [r7, #4]
 80108e2:	460b      	mov	r3, r1
 80108e4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80108e6:	2300      	movs	r3, #0
 80108e8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	d009      	beq.n	8010908 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80108fa:	681b      	ldr	r3, [r3, #0]
 80108fc:	78fa      	ldrb	r2, [r7, #3]
 80108fe:	4611      	mov	r1, r2
 8010900:	6878      	ldr	r0, [r7, #4]
 8010902:	4798      	blx	r3
 8010904:	4603      	mov	r3, r0
 8010906:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8010908:	7bfb      	ldrb	r3, [r7, #15]
}
 801090a:	4618      	mov	r0, r3
 801090c:	3710      	adds	r7, #16
 801090e:	46bd      	mov	sp, r7
 8010910:	bd80      	pop	{r7, pc}

08010912 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010912:	b580      	push	{r7, lr}
 8010914:	b084      	sub	sp, #16
 8010916:	af00      	add	r7, sp, #0
 8010918:	6078      	str	r0, [r7, #4]
 801091a:	460b      	mov	r3, r1
 801091c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801091e:	2300      	movs	r3, #0
 8010920:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010928:	685b      	ldr	r3, [r3, #4]
 801092a:	78fa      	ldrb	r2, [r7, #3]
 801092c:	4611      	mov	r1, r2
 801092e:	6878      	ldr	r0, [r7, #4]
 8010930:	4798      	blx	r3
 8010932:	4603      	mov	r3, r0
 8010934:	2b00      	cmp	r3, #0
 8010936:	d001      	beq.n	801093c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8010938:	2303      	movs	r3, #3
 801093a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801093c:	7bfb      	ldrb	r3, [r7, #15]
}
 801093e:	4618      	mov	r0, r3
 8010940:	3710      	adds	r7, #16
 8010942:	46bd      	mov	sp, r7
 8010944:	bd80      	pop	{r7, pc}

08010946 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8010946:	b580      	push	{r7, lr}
 8010948:	b084      	sub	sp, #16
 801094a:	af00      	add	r7, sp, #0
 801094c:	6078      	str	r0, [r7, #4]
 801094e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8010956:	6839      	ldr	r1, [r7, #0]
 8010958:	4618      	mov	r0, r3
 801095a:	f001 f90c 	bl	8011b76 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	2201      	movs	r2, #1
 8010962:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 801096c:	461a      	mov	r2, r3
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 801097a:	f003 031f 	and.w	r3, r3, #31
 801097e:	2b02      	cmp	r3, #2
 8010980:	d01a      	beq.n	80109b8 <USBD_LL_SetupStage+0x72>
 8010982:	2b02      	cmp	r3, #2
 8010984:	d822      	bhi.n	80109cc <USBD_LL_SetupStage+0x86>
 8010986:	2b00      	cmp	r3, #0
 8010988:	d002      	beq.n	8010990 <USBD_LL_SetupStage+0x4a>
 801098a:	2b01      	cmp	r3, #1
 801098c:	d00a      	beq.n	80109a4 <USBD_LL_SetupStage+0x5e>
 801098e:	e01d      	b.n	80109cc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8010996:	4619      	mov	r1, r3
 8010998:	6878      	ldr	r0, [r7, #4]
 801099a:	f000 fb63 	bl	8011064 <USBD_StdDevReq>
 801099e:	4603      	mov	r3, r0
 80109a0:	73fb      	strb	r3, [r7, #15]
      break;
 80109a2:	e020      	b.n	80109e6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80109aa:	4619      	mov	r1, r3
 80109ac:	6878      	ldr	r0, [r7, #4]
 80109ae:	f000 fbcb 	bl	8011148 <USBD_StdItfReq>
 80109b2:	4603      	mov	r3, r0
 80109b4:	73fb      	strb	r3, [r7, #15]
      break;
 80109b6:	e016      	b.n	80109e6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80109be:	4619      	mov	r1, r3
 80109c0:	6878      	ldr	r0, [r7, #4]
 80109c2:	f000 fc2d 	bl	8011220 <USBD_StdEPReq>
 80109c6:	4603      	mov	r3, r0
 80109c8:	73fb      	strb	r3, [r7, #15]
      break;
 80109ca:	e00c      	b.n	80109e6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80109d2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80109d6:	b2db      	uxtb	r3, r3
 80109d8:	4619      	mov	r1, r3
 80109da:	6878      	ldr	r0, [r7, #4]
 80109dc:	f001 fe5c 	bl	8012698 <USBD_LL_StallEP>
 80109e0:	4603      	mov	r3, r0
 80109e2:	73fb      	strb	r3, [r7, #15]
      break;
 80109e4:	bf00      	nop
  }

  return ret;
 80109e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80109e8:	4618      	mov	r0, r3
 80109ea:	3710      	adds	r7, #16
 80109ec:	46bd      	mov	sp, r7
 80109ee:	bd80      	pop	{r7, pc}

080109f0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80109f0:	b580      	push	{r7, lr}
 80109f2:	b086      	sub	sp, #24
 80109f4:	af00      	add	r7, sp, #0
 80109f6:	60f8      	str	r0, [r7, #12]
 80109f8:	460b      	mov	r3, r1
 80109fa:	607a      	str	r2, [r7, #4]
 80109fc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80109fe:	2300      	movs	r3, #0
 8010a00:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8010a02:	7afb      	ldrb	r3, [r7, #11]
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	d16e      	bne.n	8010ae6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8010a08:	68fb      	ldr	r3, [r7, #12]
 8010a0a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8010a0e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8010a10:	68fb      	ldr	r3, [r7, #12]
 8010a12:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8010a16:	2b03      	cmp	r3, #3
 8010a18:	f040 8098 	bne.w	8010b4c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8010a1c:	693b      	ldr	r3, [r7, #16]
 8010a1e:	689a      	ldr	r2, [r3, #8]
 8010a20:	693b      	ldr	r3, [r7, #16]
 8010a22:	68db      	ldr	r3, [r3, #12]
 8010a24:	429a      	cmp	r2, r3
 8010a26:	d913      	bls.n	8010a50 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8010a28:	693b      	ldr	r3, [r7, #16]
 8010a2a:	689a      	ldr	r2, [r3, #8]
 8010a2c:	693b      	ldr	r3, [r7, #16]
 8010a2e:	68db      	ldr	r3, [r3, #12]
 8010a30:	1ad2      	subs	r2, r2, r3
 8010a32:	693b      	ldr	r3, [r7, #16]
 8010a34:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8010a36:	693b      	ldr	r3, [r7, #16]
 8010a38:	68da      	ldr	r2, [r3, #12]
 8010a3a:	693b      	ldr	r3, [r7, #16]
 8010a3c:	689b      	ldr	r3, [r3, #8]
 8010a3e:	4293      	cmp	r3, r2
 8010a40:	bf28      	it	cs
 8010a42:	4613      	movcs	r3, r2
 8010a44:	461a      	mov	r2, r3
 8010a46:	6879      	ldr	r1, [r7, #4]
 8010a48:	68f8      	ldr	r0, [r7, #12]
 8010a4a:	f001 f994 	bl	8011d76 <USBD_CtlContinueRx>
 8010a4e:	e07d      	b.n	8010b4c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8010a50:	68fb      	ldr	r3, [r7, #12]
 8010a52:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8010a56:	f003 031f 	and.w	r3, r3, #31
 8010a5a:	2b02      	cmp	r3, #2
 8010a5c:	d014      	beq.n	8010a88 <USBD_LL_DataOutStage+0x98>
 8010a5e:	2b02      	cmp	r3, #2
 8010a60:	d81d      	bhi.n	8010a9e <USBD_LL_DataOutStage+0xae>
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	d002      	beq.n	8010a6c <USBD_LL_DataOutStage+0x7c>
 8010a66:	2b01      	cmp	r3, #1
 8010a68:	d003      	beq.n	8010a72 <USBD_LL_DataOutStage+0x82>
 8010a6a:	e018      	b.n	8010a9e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8010a6c:	2300      	movs	r3, #0
 8010a6e:	75bb      	strb	r3, [r7, #22]
            break;
 8010a70:	e018      	b.n	8010aa4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8010a72:	68fb      	ldr	r3, [r7, #12]
 8010a74:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8010a78:	b2db      	uxtb	r3, r3
 8010a7a:	4619      	mov	r1, r3
 8010a7c:	68f8      	ldr	r0, [r7, #12]
 8010a7e:	f000 fa64 	bl	8010f4a <USBD_CoreFindIF>
 8010a82:	4603      	mov	r3, r0
 8010a84:	75bb      	strb	r3, [r7, #22]
            break;
 8010a86:	e00d      	b.n	8010aa4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8010a88:	68fb      	ldr	r3, [r7, #12]
 8010a8a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8010a8e:	b2db      	uxtb	r3, r3
 8010a90:	4619      	mov	r1, r3
 8010a92:	68f8      	ldr	r0, [r7, #12]
 8010a94:	f000 fa66 	bl	8010f64 <USBD_CoreFindEP>
 8010a98:	4603      	mov	r3, r0
 8010a9a:	75bb      	strb	r3, [r7, #22]
            break;
 8010a9c:	e002      	b.n	8010aa4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8010a9e:	2300      	movs	r3, #0
 8010aa0:	75bb      	strb	r3, [r7, #22]
            break;
 8010aa2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8010aa4:	7dbb      	ldrb	r3, [r7, #22]
 8010aa6:	2b00      	cmp	r3, #0
 8010aa8:	d119      	bne.n	8010ade <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010aaa:	68fb      	ldr	r3, [r7, #12]
 8010aac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010ab0:	b2db      	uxtb	r3, r3
 8010ab2:	2b03      	cmp	r3, #3
 8010ab4:	d113      	bne.n	8010ade <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8010ab6:	7dba      	ldrb	r2, [r7, #22]
 8010ab8:	68fb      	ldr	r3, [r7, #12]
 8010aba:	32ae      	adds	r2, #174	@ 0xae
 8010abc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010ac0:	691b      	ldr	r3, [r3, #16]
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	d00b      	beq.n	8010ade <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8010ac6:	7dba      	ldrb	r2, [r7, #22]
 8010ac8:	68fb      	ldr	r3, [r7, #12]
 8010aca:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8010ace:	7dba      	ldrb	r2, [r7, #22]
 8010ad0:	68fb      	ldr	r3, [r7, #12]
 8010ad2:	32ae      	adds	r2, #174	@ 0xae
 8010ad4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010ad8:	691b      	ldr	r3, [r3, #16]
 8010ada:	68f8      	ldr	r0, [r7, #12]
 8010adc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8010ade:	68f8      	ldr	r0, [r7, #12]
 8010ae0:	f001 f95a 	bl	8011d98 <USBD_CtlSendStatus>
 8010ae4:	e032      	b.n	8010b4c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8010ae6:	7afb      	ldrb	r3, [r7, #11]
 8010ae8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010aec:	b2db      	uxtb	r3, r3
 8010aee:	4619      	mov	r1, r3
 8010af0:	68f8      	ldr	r0, [r7, #12]
 8010af2:	f000 fa37 	bl	8010f64 <USBD_CoreFindEP>
 8010af6:	4603      	mov	r3, r0
 8010af8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010afa:	7dbb      	ldrb	r3, [r7, #22]
 8010afc:	2bff      	cmp	r3, #255	@ 0xff
 8010afe:	d025      	beq.n	8010b4c <USBD_LL_DataOutStage+0x15c>
 8010b00:	7dbb      	ldrb	r3, [r7, #22]
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	d122      	bne.n	8010b4c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010b06:	68fb      	ldr	r3, [r7, #12]
 8010b08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010b0c:	b2db      	uxtb	r3, r3
 8010b0e:	2b03      	cmp	r3, #3
 8010b10:	d117      	bne.n	8010b42 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8010b12:	7dba      	ldrb	r2, [r7, #22]
 8010b14:	68fb      	ldr	r3, [r7, #12]
 8010b16:	32ae      	adds	r2, #174	@ 0xae
 8010b18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010b1c:	699b      	ldr	r3, [r3, #24]
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	d00f      	beq.n	8010b42 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8010b22:	7dba      	ldrb	r2, [r7, #22]
 8010b24:	68fb      	ldr	r3, [r7, #12]
 8010b26:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8010b2a:	7dba      	ldrb	r2, [r7, #22]
 8010b2c:	68fb      	ldr	r3, [r7, #12]
 8010b2e:	32ae      	adds	r2, #174	@ 0xae
 8010b30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010b34:	699b      	ldr	r3, [r3, #24]
 8010b36:	7afa      	ldrb	r2, [r7, #11]
 8010b38:	4611      	mov	r1, r2
 8010b3a:	68f8      	ldr	r0, [r7, #12]
 8010b3c:	4798      	blx	r3
 8010b3e:	4603      	mov	r3, r0
 8010b40:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8010b42:	7dfb      	ldrb	r3, [r7, #23]
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	d001      	beq.n	8010b4c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8010b48:	7dfb      	ldrb	r3, [r7, #23]
 8010b4a:	e000      	b.n	8010b4e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8010b4c:	2300      	movs	r3, #0
}
 8010b4e:	4618      	mov	r0, r3
 8010b50:	3718      	adds	r7, #24
 8010b52:	46bd      	mov	sp, r7
 8010b54:	bd80      	pop	{r7, pc}

08010b56 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8010b56:	b580      	push	{r7, lr}
 8010b58:	b086      	sub	sp, #24
 8010b5a:	af00      	add	r7, sp, #0
 8010b5c:	60f8      	str	r0, [r7, #12]
 8010b5e:	460b      	mov	r3, r1
 8010b60:	607a      	str	r2, [r7, #4]
 8010b62:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8010b64:	7afb      	ldrb	r3, [r7, #11]
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	d16f      	bne.n	8010c4a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8010b6a:	68fb      	ldr	r3, [r7, #12]
 8010b6c:	3314      	adds	r3, #20
 8010b6e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8010b70:	68fb      	ldr	r3, [r7, #12]
 8010b72:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8010b76:	2b02      	cmp	r3, #2
 8010b78:	d15a      	bne.n	8010c30 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8010b7a:	693b      	ldr	r3, [r7, #16]
 8010b7c:	689a      	ldr	r2, [r3, #8]
 8010b7e:	693b      	ldr	r3, [r7, #16]
 8010b80:	68db      	ldr	r3, [r3, #12]
 8010b82:	429a      	cmp	r2, r3
 8010b84:	d914      	bls.n	8010bb0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8010b86:	693b      	ldr	r3, [r7, #16]
 8010b88:	689a      	ldr	r2, [r3, #8]
 8010b8a:	693b      	ldr	r3, [r7, #16]
 8010b8c:	68db      	ldr	r3, [r3, #12]
 8010b8e:	1ad2      	subs	r2, r2, r3
 8010b90:	693b      	ldr	r3, [r7, #16]
 8010b92:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8010b94:	693b      	ldr	r3, [r7, #16]
 8010b96:	689b      	ldr	r3, [r3, #8]
 8010b98:	461a      	mov	r2, r3
 8010b9a:	6879      	ldr	r1, [r7, #4]
 8010b9c:	68f8      	ldr	r0, [r7, #12]
 8010b9e:	f001 f8bc 	bl	8011d1a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010ba2:	2300      	movs	r3, #0
 8010ba4:	2200      	movs	r2, #0
 8010ba6:	2100      	movs	r1, #0
 8010ba8:	68f8      	ldr	r0, [r7, #12]
 8010baa:	f001 fe1f 	bl	80127ec <USBD_LL_PrepareReceive>
 8010bae:	e03f      	b.n	8010c30 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8010bb0:	693b      	ldr	r3, [r7, #16]
 8010bb2:	68da      	ldr	r2, [r3, #12]
 8010bb4:	693b      	ldr	r3, [r7, #16]
 8010bb6:	689b      	ldr	r3, [r3, #8]
 8010bb8:	429a      	cmp	r2, r3
 8010bba:	d11c      	bne.n	8010bf6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8010bbc:	693b      	ldr	r3, [r7, #16]
 8010bbe:	685a      	ldr	r2, [r3, #4]
 8010bc0:	693b      	ldr	r3, [r7, #16]
 8010bc2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8010bc4:	429a      	cmp	r2, r3
 8010bc6:	d316      	bcc.n	8010bf6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8010bc8:	693b      	ldr	r3, [r7, #16]
 8010bca:	685a      	ldr	r2, [r3, #4]
 8010bcc:	68fb      	ldr	r3, [r7, #12]
 8010bce:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8010bd2:	429a      	cmp	r2, r3
 8010bd4:	d20f      	bcs.n	8010bf6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8010bd6:	2200      	movs	r2, #0
 8010bd8:	2100      	movs	r1, #0
 8010bda:	68f8      	ldr	r0, [r7, #12]
 8010bdc:	f001 f89d 	bl	8011d1a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8010be0:	68fb      	ldr	r3, [r7, #12]
 8010be2:	2200      	movs	r2, #0
 8010be4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010be8:	2300      	movs	r3, #0
 8010bea:	2200      	movs	r2, #0
 8010bec:	2100      	movs	r1, #0
 8010bee:	68f8      	ldr	r0, [r7, #12]
 8010bf0:	f001 fdfc 	bl	80127ec <USBD_LL_PrepareReceive>
 8010bf4:	e01c      	b.n	8010c30 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010bf6:	68fb      	ldr	r3, [r7, #12]
 8010bf8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010bfc:	b2db      	uxtb	r3, r3
 8010bfe:	2b03      	cmp	r3, #3
 8010c00:	d10f      	bne.n	8010c22 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8010c02:	68fb      	ldr	r3, [r7, #12]
 8010c04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010c08:	68db      	ldr	r3, [r3, #12]
 8010c0a:	2b00      	cmp	r3, #0
 8010c0c:	d009      	beq.n	8010c22 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8010c0e:	68fb      	ldr	r3, [r7, #12]
 8010c10:	2200      	movs	r2, #0
 8010c12:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8010c16:	68fb      	ldr	r3, [r7, #12]
 8010c18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010c1c:	68db      	ldr	r3, [r3, #12]
 8010c1e:	68f8      	ldr	r0, [r7, #12]
 8010c20:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8010c22:	2180      	movs	r1, #128	@ 0x80
 8010c24:	68f8      	ldr	r0, [r7, #12]
 8010c26:	f001 fd37 	bl	8012698 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8010c2a:	68f8      	ldr	r0, [r7, #12]
 8010c2c:	f001 f8c7 	bl	8011dbe <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8010c30:	68fb      	ldr	r3, [r7, #12]
 8010c32:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	d03a      	beq.n	8010cb0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8010c3a:	68f8      	ldr	r0, [r7, #12]
 8010c3c:	f7ff fe42 	bl	80108c4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8010c40:	68fb      	ldr	r3, [r7, #12]
 8010c42:	2200      	movs	r2, #0
 8010c44:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8010c48:	e032      	b.n	8010cb0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8010c4a:	7afb      	ldrb	r3, [r7, #11]
 8010c4c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8010c50:	b2db      	uxtb	r3, r3
 8010c52:	4619      	mov	r1, r3
 8010c54:	68f8      	ldr	r0, [r7, #12]
 8010c56:	f000 f985 	bl	8010f64 <USBD_CoreFindEP>
 8010c5a:	4603      	mov	r3, r0
 8010c5c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010c5e:	7dfb      	ldrb	r3, [r7, #23]
 8010c60:	2bff      	cmp	r3, #255	@ 0xff
 8010c62:	d025      	beq.n	8010cb0 <USBD_LL_DataInStage+0x15a>
 8010c64:	7dfb      	ldrb	r3, [r7, #23]
 8010c66:	2b00      	cmp	r3, #0
 8010c68:	d122      	bne.n	8010cb0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010c6a:	68fb      	ldr	r3, [r7, #12]
 8010c6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010c70:	b2db      	uxtb	r3, r3
 8010c72:	2b03      	cmp	r3, #3
 8010c74:	d11c      	bne.n	8010cb0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8010c76:	7dfa      	ldrb	r2, [r7, #23]
 8010c78:	68fb      	ldr	r3, [r7, #12]
 8010c7a:	32ae      	adds	r2, #174	@ 0xae
 8010c7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010c80:	695b      	ldr	r3, [r3, #20]
 8010c82:	2b00      	cmp	r3, #0
 8010c84:	d014      	beq.n	8010cb0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8010c86:	7dfa      	ldrb	r2, [r7, #23]
 8010c88:	68fb      	ldr	r3, [r7, #12]
 8010c8a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8010c8e:	7dfa      	ldrb	r2, [r7, #23]
 8010c90:	68fb      	ldr	r3, [r7, #12]
 8010c92:	32ae      	adds	r2, #174	@ 0xae
 8010c94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010c98:	695b      	ldr	r3, [r3, #20]
 8010c9a:	7afa      	ldrb	r2, [r7, #11]
 8010c9c:	4611      	mov	r1, r2
 8010c9e:	68f8      	ldr	r0, [r7, #12]
 8010ca0:	4798      	blx	r3
 8010ca2:	4603      	mov	r3, r0
 8010ca4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8010ca6:	7dbb      	ldrb	r3, [r7, #22]
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	d001      	beq.n	8010cb0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8010cac:	7dbb      	ldrb	r3, [r7, #22]
 8010cae:	e000      	b.n	8010cb2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8010cb0:	2300      	movs	r3, #0
}
 8010cb2:	4618      	mov	r0, r3
 8010cb4:	3718      	adds	r7, #24
 8010cb6:	46bd      	mov	sp, r7
 8010cb8:	bd80      	pop	{r7, pc}

08010cba <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8010cba:	b580      	push	{r7, lr}
 8010cbc:	b084      	sub	sp, #16
 8010cbe:	af00      	add	r7, sp, #0
 8010cc0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8010cc2:	2300      	movs	r3, #0
 8010cc4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	2201      	movs	r2, #1
 8010cca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	2200      	movs	r2, #0
 8010cd2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	2200      	movs	r2, #0
 8010cda:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	2200      	movs	r2, #0
 8010ce0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	2200      	movs	r2, #0
 8010ce8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	d014      	beq.n	8010d20 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010cfc:	685b      	ldr	r3, [r3, #4]
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	d00e      	beq.n	8010d20 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010d08:	685b      	ldr	r3, [r3, #4]
 8010d0a:	687a      	ldr	r2, [r7, #4]
 8010d0c:	6852      	ldr	r2, [r2, #4]
 8010d0e:	b2d2      	uxtb	r2, r2
 8010d10:	4611      	mov	r1, r2
 8010d12:	6878      	ldr	r0, [r7, #4]
 8010d14:	4798      	blx	r3
 8010d16:	4603      	mov	r3, r0
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	d001      	beq.n	8010d20 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8010d1c:	2303      	movs	r3, #3
 8010d1e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010d20:	2340      	movs	r3, #64	@ 0x40
 8010d22:	2200      	movs	r2, #0
 8010d24:	2100      	movs	r1, #0
 8010d26:	6878      	ldr	r0, [r7, #4]
 8010d28:	f001 fc71 	bl	801260e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	2201      	movs	r2, #1
 8010d30:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	2240      	movs	r2, #64	@ 0x40
 8010d38:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010d3c:	2340      	movs	r3, #64	@ 0x40
 8010d3e:	2200      	movs	r2, #0
 8010d40:	2180      	movs	r1, #128	@ 0x80
 8010d42:	6878      	ldr	r0, [r7, #4]
 8010d44:	f001 fc63 	bl	801260e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	2201      	movs	r2, #1
 8010d4c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	2240      	movs	r2, #64	@ 0x40
 8010d52:	621a      	str	r2, [r3, #32]

  return ret;
 8010d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8010d56:	4618      	mov	r0, r3
 8010d58:	3710      	adds	r7, #16
 8010d5a:	46bd      	mov	sp, r7
 8010d5c:	bd80      	pop	{r7, pc}

08010d5e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8010d5e:	b480      	push	{r7}
 8010d60:	b083      	sub	sp, #12
 8010d62:	af00      	add	r7, sp, #0
 8010d64:	6078      	str	r0, [r7, #4]
 8010d66:	460b      	mov	r3, r1
 8010d68:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	78fa      	ldrb	r2, [r7, #3]
 8010d6e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8010d70:	2300      	movs	r3, #0
}
 8010d72:	4618      	mov	r0, r3
 8010d74:	370c      	adds	r7, #12
 8010d76:	46bd      	mov	sp, r7
 8010d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d7c:	4770      	bx	lr

08010d7e <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8010d7e:	b480      	push	{r7}
 8010d80:	b083      	sub	sp, #12
 8010d82:	af00      	add	r7, sp, #0
 8010d84:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010d8c:	b2db      	uxtb	r3, r3
 8010d8e:	2b04      	cmp	r3, #4
 8010d90:	d006      	beq.n	8010da0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010d98:	b2da      	uxtb	r2, r3
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	2204      	movs	r2, #4
 8010da4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8010da8:	2300      	movs	r3, #0
}
 8010daa:	4618      	mov	r0, r3
 8010dac:	370c      	adds	r7, #12
 8010dae:	46bd      	mov	sp, r7
 8010db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010db4:	4770      	bx	lr

08010db6 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8010db6:	b480      	push	{r7}
 8010db8:	b083      	sub	sp, #12
 8010dba:	af00      	add	r7, sp, #0
 8010dbc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010dc4:	b2db      	uxtb	r3, r3
 8010dc6:	2b04      	cmp	r3, #4
 8010dc8:	d106      	bne.n	8010dd8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8010dd0:	b2da      	uxtb	r2, r3
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8010dd8:	2300      	movs	r3, #0
}
 8010dda:	4618      	mov	r0, r3
 8010ddc:	370c      	adds	r7, #12
 8010dde:	46bd      	mov	sp, r7
 8010de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010de4:	4770      	bx	lr

08010de6 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8010de6:	b580      	push	{r7, lr}
 8010de8:	b082      	sub	sp, #8
 8010dea:	af00      	add	r7, sp, #0
 8010dec:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010df4:	b2db      	uxtb	r3, r3
 8010df6:	2b03      	cmp	r3, #3
 8010df8:	d110      	bne.n	8010e1c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	d00b      	beq.n	8010e1c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010e0a:	69db      	ldr	r3, [r3, #28]
 8010e0c:	2b00      	cmp	r3, #0
 8010e0e:	d005      	beq.n	8010e1c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010e16:	69db      	ldr	r3, [r3, #28]
 8010e18:	6878      	ldr	r0, [r7, #4]
 8010e1a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8010e1c:	2300      	movs	r3, #0
}
 8010e1e:	4618      	mov	r0, r3
 8010e20:	3708      	adds	r7, #8
 8010e22:	46bd      	mov	sp, r7
 8010e24:	bd80      	pop	{r7, pc}

08010e26 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8010e26:	b580      	push	{r7, lr}
 8010e28:	b082      	sub	sp, #8
 8010e2a:	af00      	add	r7, sp, #0
 8010e2c:	6078      	str	r0, [r7, #4]
 8010e2e:	460b      	mov	r3, r1
 8010e30:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	32ae      	adds	r2, #174	@ 0xae
 8010e3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	d101      	bne.n	8010e48 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8010e44:	2303      	movs	r3, #3
 8010e46:	e01c      	b.n	8010e82 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010e4e:	b2db      	uxtb	r3, r3
 8010e50:	2b03      	cmp	r3, #3
 8010e52:	d115      	bne.n	8010e80 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	32ae      	adds	r2, #174	@ 0xae
 8010e5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010e62:	6a1b      	ldr	r3, [r3, #32]
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	d00b      	beq.n	8010e80 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	32ae      	adds	r2, #174	@ 0xae
 8010e72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010e76:	6a1b      	ldr	r3, [r3, #32]
 8010e78:	78fa      	ldrb	r2, [r7, #3]
 8010e7a:	4611      	mov	r1, r2
 8010e7c:	6878      	ldr	r0, [r7, #4]
 8010e7e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8010e80:	2300      	movs	r3, #0
}
 8010e82:	4618      	mov	r0, r3
 8010e84:	3708      	adds	r7, #8
 8010e86:	46bd      	mov	sp, r7
 8010e88:	bd80      	pop	{r7, pc}

08010e8a <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8010e8a:	b580      	push	{r7, lr}
 8010e8c:	b082      	sub	sp, #8
 8010e8e:	af00      	add	r7, sp, #0
 8010e90:	6078      	str	r0, [r7, #4]
 8010e92:	460b      	mov	r3, r1
 8010e94:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	32ae      	adds	r2, #174	@ 0xae
 8010ea0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	d101      	bne.n	8010eac <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8010ea8:	2303      	movs	r3, #3
 8010eaa:	e01c      	b.n	8010ee6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010eb2:	b2db      	uxtb	r3, r3
 8010eb4:	2b03      	cmp	r3, #3
 8010eb6:	d115      	bne.n	8010ee4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	32ae      	adds	r2, #174	@ 0xae
 8010ec2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010ec8:	2b00      	cmp	r3, #0
 8010eca:	d00b      	beq.n	8010ee4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	32ae      	adds	r2, #174	@ 0xae
 8010ed6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010edc:	78fa      	ldrb	r2, [r7, #3]
 8010ede:	4611      	mov	r1, r2
 8010ee0:	6878      	ldr	r0, [r7, #4]
 8010ee2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8010ee4:	2300      	movs	r3, #0
}
 8010ee6:	4618      	mov	r0, r3
 8010ee8:	3708      	adds	r7, #8
 8010eea:	46bd      	mov	sp, r7
 8010eec:	bd80      	pop	{r7, pc}

08010eee <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8010eee:	b480      	push	{r7}
 8010ef0:	b083      	sub	sp, #12
 8010ef2:	af00      	add	r7, sp, #0
 8010ef4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010ef6:	2300      	movs	r3, #0
}
 8010ef8:	4618      	mov	r0, r3
 8010efa:	370c      	adds	r7, #12
 8010efc:	46bd      	mov	sp, r7
 8010efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f02:	4770      	bx	lr

08010f04 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8010f04:	b580      	push	{r7, lr}
 8010f06:	b084      	sub	sp, #16
 8010f08:	af00      	add	r7, sp, #0
 8010f0a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8010f0c:	2300      	movs	r3, #0
 8010f0e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	2201      	movs	r2, #1
 8010f14:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010f1e:	2b00      	cmp	r3, #0
 8010f20:	d00e      	beq.n	8010f40 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010f28:	685b      	ldr	r3, [r3, #4]
 8010f2a:	687a      	ldr	r2, [r7, #4]
 8010f2c:	6852      	ldr	r2, [r2, #4]
 8010f2e:	b2d2      	uxtb	r2, r2
 8010f30:	4611      	mov	r1, r2
 8010f32:	6878      	ldr	r0, [r7, #4]
 8010f34:	4798      	blx	r3
 8010f36:	4603      	mov	r3, r0
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	d001      	beq.n	8010f40 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8010f3c:	2303      	movs	r3, #3
 8010f3e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8010f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f42:	4618      	mov	r0, r3
 8010f44:	3710      	adds	r7, #16
 8010f46:	46bd      	mov	sp, r7
 8010f48:	bd80      	pop	{r7, pc}

08010f4a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8010f4a:	b480      	push	{r7}
 8010f4c:	b083      	sub	sp, #12
 8010f4e:	af00      	add	r7, sp, #0
 8010f50:	6078      	str	r0, [r7, #4]
 8010f52:	460b      	mov	r3, r1
 8010f54:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8010f56:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8010f58:	4618      	mov	r0, r3
 8010f5a:	370c      	adds	r7, #12
 8010f5c:	46bd      	mov	sp, r7
 8010f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f62:	4770      	bx	lr

08010f64 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8010f64:	b480      	push	{r7}
 8010f66:	b083      	sub	sp, #12
 8010f68:	af00      	add	r7, sp, #0
 8010f6a:	6078      	str	r0, [r7, #4]
 8010f6c:	460b      	mov	r3, r1
 8010f6e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8010f70:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8010f72:	4618      	mov	r0, r3
 8010f74:	370c      	adds	r7, #12
 8010f76:	46bd      	mov	sp, r7
 8010f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f7c:	4770      	bx	lr

08010f7e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8010f7e:	b580      	push	{r7, lr}
 8010f80:	b086      	sub	sp, #24
 8010f82:	af00      	add	r7, sp, #0
 8010f84:	6078      	str	r0, [r7, #4]
 8010f86:	460b      	mov	r3, r1
 8010f88:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8010f92:	2300      	movs	r3, #0
 8010f94:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8010f96:	68fb      	ldr	r3, [r7, #12]
 8010f98:	885b      	ldrh	r3, [r3, #2]
 8010f9a:	b29b      	uxth	r3, r3
 8010f9c:	68fa      	ldr	r2, [r7, #12]
 8010f9e:	7812      	ldrb	r2, [r2, #0]
 8010fa0:	4293      	cmp	r3, r2
 8010fa2:	d91f      	bls.n	8010fe4 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8010fa4:	68fb      	ldr	r3, [r7, #12]
 8010fa6:	781b      	ldrb	r3, [r3, #0]
 8010fa8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8010faa:	e013      	b.n	8010fd4 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8010fac:	f107 030a 	add.w	r3, r7, #10
 8010fb0:	4619      	mov	r1, r3
 8010fb2:	6978      	ldr	r0, [r7, #20]
 8010fb4:	f000 f81b 	bl	8010fee <USBD_GetNextDesc>
 8010fb8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8010fba:	697b      	ldr	r3, [r7, #20]
 8010fbc:	785b      	ldrb	r3, [r3, #1]
 8010fbe:	2b05      	cmp	r3, #5
 8010fc0:	d108      	bne.n	8010fd4 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8010fc2:	697b      	ldr	r3, [r7, #20]
 8010fc4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8010fc6:	693b      	ldr	r3, [r7, #16]
 8010fc8:	789b      	ldrb	r3, [r3, #2]
 8010fca:	78fa      	ldrb	r2, [r7, #3]
 8010fcc:	429a      	cmp	r2, r3
 8010fce:	d008      	beq.n	8010fe2 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8010fd0:	2300      	movs	r3, #0
 8010fd2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8010fd4:	68fb      	ldr	r3, [r7, #12]
 8010fd6:	885b      	ldrh	r3, [r3, #2]
 8010fd8:	b29a      	uxth	r2, r3
 8010fda:	897b      	ldrh	r3, [r7, #10]
 8010fdc:	429a      	cmp	r2, r3
 8010fde:	d8e5      	bhi.n	8010fac <USBD_GetEpDesc+0x2e>
 8010fe0:	e000      	b.n	8010fe4 <USBD_GetEpDesc+0x66>
          break;
 8010fe2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8010fe4:	693b      	ldr	r3, [r7, #16]
}
 8010fe6:	4618      	mov	r0, r3
 8010fe8:	3718      	adds	r7, #24
 8010fea:	46bd      	mov	sp, r7
 8010fec:	bd80      	pop	{r7, pc}

08010fee <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8010fee:	b480      	push	{r7}
 8010ff0:	b085      	sub	sp, #20
 8010ff2:	af00      	add	r7, sp, #0
 8010ff4:	6078      	str	r0, [r7, #4]
 8010ff6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8010ffc:	683b      	ldr	r3, [r7, #0]
 8010ffe:	881b      	ldrh	r3, [r3, #0]
 8011000:	68fa      	ldr	r2, [r7, #12]
 8011002:	7812      	ldrb	r2, [r2, #0]
 8011004:	4413      	add	r3, r2
 8011006:	b29a      	uxth	r2, r3
 8011008:	683b      	ldr	r3, [r7, #0]
 801100a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 801100c:	68fb      	ldr	r3, [r7, #12]
 801100e:	781b      	ldrb	r3, [r3, #0]
 8011010:	461a      	mov	r2, r3
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	4413      	add	r3, r2
 8011016:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8011018:	68fb      	ldr	r3, [r7, #12]
}
 801101a:	4618      	mov	r0, r3
 801101c:	3714      	adds	r7, #20
 801101e:	46bd      	mov	sp, r7
 8011020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011024:	4770      	bx	lr

08011026 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8011026:	b480      	push	{r7}
 8011028:	b087      	sub	sp, #28
 801102a:	af00      	add	r7, sp, #0
 801102c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8011032:	697b      	ldr	r3, [r7, #20]
 8011034:	781b      	ldrb	r3, [r3, #0]
 8011036:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8011038:	697b      	ldr	r3, [r7, #20]
 801103a:	3301      	adds	r3, #1
 801103c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 801103e:	697b      	ldr	r3, [r7, #20]
 8011040:	781b      	ldrb	r3, [r3, #0]
 8011042:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8011044:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8011048:	021b      	lsls	r3, r3, #8
 801104a:	b21a      	sxth	r2, r3
 801104c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011050:	4313      	orrs	r3, r2
 8011052:	b21b      	sxth	r3, r3
 8011054:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8011056:	89fb      	ldrh	r3, [r7, #14]
}
 8011058:	4618      	mov	r0, r3
 801105a:	371c      	adds	r7, #28
 801105c:	46bd      	mov	sp, r7
 801105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011062:	4770      	bx	lr

08011064 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011064:	b580      	push	{r7, lr}
 8011066:	b084      	sub	sp, #16
 8011068:	af00      	add	r7, sp, #0
 801106a:	6078      	str	r0, [r7, #4]
 801106c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801106e:	2300      	movs	r3, #0
 8011070:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011072:	683b      	ldr	r3, [r7, #0]
 8011074:	781b      	ldrb	r3, [r3, #0]
 8011076:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801107a:	2b40      	cmp	r3, #64	@ 0x40
 801107c:	d005      	beq.n	801108a <USBD_StdDevReq+0x26>
 801107e:	2b40      	cmp	r3, #64	@ 0x40
 8011080:	d857      	bhi.n	8011132 <USBD_StdDevReq+0xce>
 8011082:	2b00      	cmp	r3, #0
 8011084:	d00f      	beq.n	80110a6 <USBD_StdDevReq+0x42>
 8011086:	2b20      	cmp	r3, #32
 8011088:	d153      	bne.n	8011132 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	32ae      	adds	r2, #174	@ 0xae
 8011094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011098:	689b      	ldr	r3, [r3, #8]
 801109a:	6839      	ldr	r1, [r7, #0]
 801109c:	6878      	ldr	r0, [r7, #4]
 801109e:	4798      	blx	r3
 80110a0:	4603      	mov	r3, r0
 80110a2:	73fb      	strb	r3, [r7, #15]
      break;
 80110a4:	e04a      	b.n	801113c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80110a6:	683b      	ldr	r3, [r7, #0]
 80110a8:	785b      	ldrb	r3, [r3, #1]
 80110aa:	2b09      	cmp	r3, #9
 80110ac:	d83b      	bhi.n	8011126 <USBD_StdDevReq+0xc2>
 80110ae:	a201      	add	r2, pc, #4	@ (adr r2, 80110b4 <USBD_StdDevReq+0x50>)
 80110b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80110b4:	08011109 	.word	0x08011109
 80110b8:	0801111d 	.word	0x0801111d
 80110bc:	08011127 	.word	0x08011127
 80110c0:	08011113 	.word	0x08011113
 80110c4:	08011127 	.word	0x08011127
 80110c8:	080110e7 	.word	0x080110e7
 80110cc:	080110dd 	.word	0x080110dd
 80110d0:	08011127 	.word	0x08011127
 80110d4:	080110ff 	.word	0x080110ff
 80110d8:	080110f1 	.word	0x080110f1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80110dc:	6839      	ldr	r1, [r7, #0]
 80110de:	6878      	ldr	r0, [r7, #4]
 80110e0:	f000 fa3c 	bl	801155c <USBD_GetDescriptor>
          break;
 80110e4:	e024      	b.n	8011130 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80110e6:	6839      	ldr	r1, [r7, #0]
 80110e8:	6878      	ldr	r0, [r7, #4]
 80110ea:	f000 fba1 	bl	8011830 <USBD_SetAddress>
          break;
 80110ee:	e01f      	b.n	8011130 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80110f0:	6839      	ldr	r1, [r7, #0]
 80110f2:	6878      	ldr	r0, [r7, #4]
 80110f4:	f000 fbe0 	bl	80118b8 <USBD_SetConfig>
 80110f8:	4603      	mov	r3, r0
 80110fa:	73fb      	strb	r3, [r7, #15]
          break;
 80110fc:	e018      	b.n	8011130 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80110fe:	6839      	ldr	r1, [r7, #0]
 8011100:	6878      	ldr	r0, [r7, #4]
 8011102:	f000 fc83 	bl	8011a0c <USBD_GetConfig>
          break;
 8011106:	e013      	b.n	8011130 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8011108:	6839      	ldr	r1, [r7, #0]
 801110a:	6878      	ldr	r0, [r7, #4]
 801110c:	f000 fcb4 	bl	8011a78 <USBD_GetStatus>
          break;
 8011110:	e00e      	b.n	8011130 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8011112:	6839      	ldr	r1, [r7, #0]
 8011114:	6878      	ldr	r0, [r7, #4]
 8011116:	f000 fce3 	bl	8011ae0 <USBD_SetFeature>
          break;
 801111a:	e009      	b.n	8011130 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801111c:	6839      	ldr	r1, [r7, #0]
 801111e:	6878      	ldr	r0, [r7, #4]
 8011120:	f000 fd07 	bl	8011b32 <USBD_ClrFeature>
          break;
 8011124:	e004      	b.n	8011130 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8011126:	6839      	ldr	r1, [r7, #0]
 8011128:	6878      	ldr	r0, [r7, #4]
 801112a:	f000 fd5e 	bl	8011bea <USBD_CtlError>
          break;
 801112e:	bf00      	nop
      }
      break;
 8011130:	e004      	b.n	801113c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8011132:	6839      	ldr	r1, [r7, #0]
 8011134:	6878      	ldr	r0, [r7, #4]
 8011136:	f000 fd58 	bl	8011bea <USBD_CtlError>
      break;
 801113a:	bf00      	nop
  }

  return ret;
 801113c:	7bfb      	ldrb	r3, [r7, #15]
}
 801113e:	4618      	mov	r0, r3
 8011140:	3710      	adds	r7, #16
 8011142:	46bd      	mov	sp, r7
 8011144:	bd80      	pop	{r7, pc}
 8011146:	bf00      	nop

08011148 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011148:	b580      	push	{r7, lr}
 801114a:	b084      	sub	sp, #16
 801114c:	af00      	add	r7, sp, #0
 801114e:	6078      	str	r0, [r7, #4]
 8011150:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011152:	2300      	movs	r3, #0
 8011154:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011156:	683b      	ldr	r3, [r7, #0]
 8011158:	781b      	ldrb	r3, [r3, #0]
 801115a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801115e:	2b40      	cmp	r3, #64	@ 0x40
 8011160:	d005      	beq.n	801116e <USBD_StdItfReq+0x26>
 8011162:	2b40      	cmp	r3, #64	@ 0x40
 8011164:	d852      	bhi.n	801120c <USBD_StdItfReq+0xc4>
 8011166:	2b00      	cmp	r3, #0
 8011168:	d001      	beq.n	801116e <USBD_StdItfReq+0x26>
 801116a:	2b20      	cmp	r3, #32
 801116c:	d14e      	bne.n	801120c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011174:	b2db      	uxtb	r3, r3
 8011176:	3b01      	subs	r3, #1
 8011178:	2b02      	cmp	r3, #2
 801117a:	d840      	bhi.n	80111fe <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801117c:	683b      	ldr	r3, [r7, #0]
 801117e:	889b      	ldrh	r3, [r3, #4]
 8011180:	b2db      	uxtb	r3, r3
 8011182:	2b01      	cmp	r3, #1
 8011184:	d836      	bhi.n	80111f4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8011186:	683b      	ldr	r3, [r7, #0]
 8011188:	889b      	ldrh	r3, [r3, #4]
 801118a:	b2db      	uxtb	r3, r3
 801118c:	4619      	mov	r1, r3
 801118e:	6878      	ldr	r0, [r7, #4]
 8011190:	f7ff fedb 	bl	8010f4a <USBD_CoreFindIF>
 8011194:	4603      	mov	r3, r0
 8011196:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011198:	7bbb      	ldrb	r3, [r7, #14]
 801119a:	2bff      	cmp	r3, #255	@ 0xff
 801119c:	d01d      	beq.n	80111da <USBD_StdItfReq+0x92>
 801119e:	7bbb      	ldrb	r3, [r7, #14]
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	d11a      	bne.n	80111da <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80111a4:	7bba      	ldrb	r2, [r7, #14]
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	32ae      	adds	r2, #174	@ 0xae
 80111aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80111ae:	689b      	ldr	r3, [r3, #8]
 80111b0:	2b00      	cmp	r3, #0
 80111b2:	d00f      	beq.n	80111d4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80111b4:	7bba      	ldrb	r2, [r7, #14]
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80111bc:	7bba      	ldrb	r2, [r7, #14]
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	32ae      	adds	r2, #174	@ 0xae
 80111c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80111c6:	689b      	ldr	r3, [r3, #8]
 80111c8:	6839      	ldr	r1, [r7, #0]
 80111ca:	6878      	ldr	r0, [r7, #4]
 80111cc:	4798      	blx	r3
 80111ce:	4603      	mov	r3, r0
 80111d0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80111d2:	e004      	b.n	80111de <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80111d4:	2303      	movs	r3, #3
 80111d6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80111d8:	e001      	b.n	80111de <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80111da:	2303      	movs	r3, #3
 80111dc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80111de:	683b      	ldr	r3, [r7, #0]
 80111e0:	88db      	ldrh	r3, [r3, #6]
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	d110      	bne.n	8011208 <USBD_StdItfReq+0xc0>
 80111e6:	7bfb      	ldrb	r3, [r7, #15]
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	d10d      	bne.n	8011208 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80111ec:	6878      	ldr	r0, [r7, #4]
 80111ee:	f000 fdd3 	bl	8011d98 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80111f2:	e009      	b.n	8011208 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80111f4:	6839      	ldr	r1, [r7, #0]
 80111f6:	6878      	ldr	r0, [r7, #4]
 80111f8:	f000 fcf7 	bl	8011bea <USBD_CtlError>
          break;
 80111fc:	e004      	b.n	8011208 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80111fe:	6839      	ldr	r1, [r7, #0]
 8011200:	6878      	ldr	r0, [r7, #4]
 8011202:	f000 fcf2 	bl	8011bea <USBD_CtlError>
          break;
 8011206:	e000      	b.n	801120a <USBD_StdItfReq+0xc2>
          break;
 8011208:	bf00      	nop
      }
      break;
 801120a:	e004      	b.n	8011216 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 801120c:	6839      	ldr	r1, [r7, #0]
 801120e:	6878      	ldr	r0, [r7, #4]
 8011210:	f000 fceb 	bl	8011bea <USBD_CtlError>
      break;
 8011214:	bf00      	nop
  }

  return ret;
 8011216:	7bfb      	ldrb	r3, [r7, #15]
}
 8011218:	4618      	mov	r0, r3
 801121a:	3710      	adds	r7, #16
 801121c:	46bd      	mov	sp, r7
 801121e:	bd80      	pop	{r7, pc}

08011220 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011220:	b580      	push	{r7, lr}
 8011222:	b084      	sub	sp, #16
 8011224:	af00      	add	r7, sp, #0
 8011226:	6078      	str	r0, [r7, #4]
 8011228:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 801122a:	2300      	movs	r3, #0
 801122c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 801122e:	683b      	ldr	r3, [r7, #0]
 8011230:	889b      	ldrh	r3, [r3, #4]
 8011232:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011234:	683b      	ldr	r3, [r7, #0]
 8011236:	781b      	ldrb	r3, [r3, #0]
 8011238:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801123c:	2b40      	cmp	r3, #64	@ 0x40
 801123e:	d007      	beq.n	8011250 <USBD_StdEPReq+0x30>
 8011240:	2b40      	cmp	r3, #64	@ 0x40
 8011242:	f200 817f 	bhi.w	8011544 <USBD_StdEPReq+0x324>
 8011246:	2b00      	cmp	r3, #0
 8011248:	d02a      	beq.n	80112a0 <USBD_StdEPReq+0x80>
 801124a:	2b20      	cmp	r3, #32
 801124c:	f040 817a 	bne.w	8011544 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8011250:	7bbb      	ldrb	r3, [r7, #14]
 8011252:	4619      	mov	r1, r3
 8011254:	6878      	ldr	r0, [r7, #4]
 8011256:	f7ff fe85 	bl	8010f64 <USBD_CoreFindEP>
 801125a:	4603      	mov	r3, r0
 801125c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801125e:	7b7b      	ldrb	r3, [r7, #13]
 8011260:	2bff      	cmp	r3, #255	@ 0xff
 8011262:	f000 8174 	beq.w	801154e <USBD_StdEPReq+0x32e>
 8011266:	7b7b      	ldrb	r3, [r7, #13]
 8011268:	2b00      	cmp	r3, #0
 801126a:	f040 8170 	bne.w	801154e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 801126e:	7b7a      	ldrb	r2, [r7, #13]
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8011276:	7b7a      	ldrb	r2, [r7, #13]
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	32ae      	adds	r2, #174	@ 0xae
 801127c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011280:	689b      	ldr	r3, [r3, #8]
 8011282:	2b00      	cmp	r3, #0
 8011284:	f000 8163 	beq.w	801154e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8011288:	7b7a      	ldrb	r2, [r7, #13]
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	32ae      	adds	r2, #174	@ 0xae
 801128e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011292:	689b      	ldr	r3, [r3, #8]
 8011294:	6839      	ldr	r1, [r7, #0]
 8011296:	6878      	ldr	r0, [r7, #4]
 8011298:	4798      	blx	r3
 801129a:	4603      	mov	r3, r0
 801129c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 801129e:	e156      	b.n	801154e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80112a0:	683b      	ldr	r3, [r7, #0]
 80112a2:	785b      	ldrb	r3, [r3, #1]
 80112a4:	2b03      	cmp	r3, #3
 80112a6:	d008      	beq.n	80112ba <USBD_StdEPReq+0x9a>
 80112a8:	2b03      	cmp	r3, #3
 80112aa:	f300 8145 	bgt.w	8011538 <USBD_StdEPReq+0x318>
 80112ae:	2b00      	cmp	r3, #0
 80112b0:	f000 809b 	beq.w	80113ea <USBD_StdEPReq+0x1ca>
 80112b4:	2b01      	cmp	r3, #1
 80112b6:	d03c      	beq.n	8011332 <USBD_StdEPReq+0x112>
 80112b8:	e13e      	b.n	8011538 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80112c0:	b2db      	uxtb	r3, r3
 80112c2:	2b02      	cmp	r3, #2
 80112c4:	d002      	beq.n	80112cc <USBD_StdEPReq+0xac>
 80112c6:	2b03      	cmp	r3, #3
 80112c8:	d016      	beq.n	80112f8 <USBD_StdEPReq+0xd8>
 80112ca:	e02c      	b.n	8011326 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80112cc:	7bbb      	ldrb	r3, [r7, #14]
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	d00d      	beq.n	80112ee <USBD_StdEPReq+0xce>
 80112d2:	7bbb      	ldrb	r3, [r7, #14]
 80112d4:	2b80      	cmp	r3, #128	@ 0x80
 80112d6:	d00a      	beq.n	80112ee <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80112d8:	7bbb      	ldrb	r3, [r7, #14]
 80112da:	4619      	mov	r1, r3
 80112dc:	6878      	ldr	r0, [r7, #4]
 80112de:	f001 f9db 	bl	8012698 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80112e2:	2180      	movs	r1, #128	@ 0x80
 80112e4:	6878      	ldr	r0, [r7, #4]
 80112e6:	f001 f9d7 	bl	8012698 <USBD_LL_StallEP>
 80112ea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80112ec:	e020      	b.n	8011330 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80112ee:	6839      	ldr	r1, [r7, #0]
 80112f0:	6878      	ldr	r0, [r7, #4]
 80112f2:	f000 fc7a 	bl	8011bea <USBD_CtlError>
              break;
 80112f6:	e01b      	b.n	8011330 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80112f8:	683b      	ldr	r3, [r7, #0]
 80112fa:	885b      	ldrh	r3, [r3, #2]
 80112fc:	2b00      	cmp	r3, #0
 80112fe:	d10e      	bne.n	801131e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8011300:	7bbb      	ldrb	r3, [r7, #14]
 8011302:	2b00      	cmp	r3, #0
 8011304:	d00b      	beq.n	801131e <USBD_StdEPReq+0xfe>
 8011306:	7bbb      	ldrb	r3, [r7, #14]
 8011308:	2b80      	cmp	r3, #128	@ 0x80
 801130a:	d008      	beq.n	801131e <USBD_StdEPReq+0xfe>
 801130c:	683b      	ldr	r3, [r7, #0]
 801130e:	88db      	ldrh	r3, [r3, #6]
 8011310:	2b00      	cmp	r3, #0
 8011312:	d104      	bne.n	801131e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8011314:	7bbb      	ldrb	r3, [r7, #14]
 8011316:	4619      	mov	r1, r3
 8011318:	6878      	ldr	r0, [r7, #4]
 801131a:	f001 f9bd 	bl	8012698 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801131e:	6878      	ldr	r0, [r7, #4]
 8011320:	f000 fd3a 	bl	8011d98 <USBD_CtlSendStatus>

              break;
 8011324:	e004      	b.n	8011330 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8011326:	6839      	ldr	r1, [r7, #0]
 8011328:	6878      	ldr	r0, [r7, #4]
 801132a:	f000 fc5e 	bl	8011bea <USBD_CtlError>
              break;
 801132e:	bf00      	nop
          }
          break;
 8011330:	e107      	b.n	8011542 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011338:	b2db      	uxtb	r3, r3
 801133a:	2b02      	cmp	r3, #2
 801133c:	d002      	beq.n	8011344 <USBD_StdEPReq+0x124>
 801133e:	2b03      	cmp	r3, #3
 8011340:	d016      	beq.n	8011370 <USBD_StdEPReq+0x150>
 8011342:	e04b      	b.n	80113dc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011344:	7bbb      	ldrb	r3, [r7, #14]
 8011346:	2b00      	cmp	r3, #0
 8011348:	d00d      	beq.n	8011366 <USBD_StdEPReq+0x146>
 801134a:	7bbb      	ldrb	r3, [r7, #14]
 801134c:	2b80      	cmp	r3, #128	@ 0x80
 801134e:	d00a      	beq.n	8011366 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8011350:	7bbb      	ldrb	r3, [r7, #14]
 8011352:	4619      	mov	r1, r3
 8011354:	6878      	ldr	r0, [r7, #4]
 8011356:	f001 f99f 	bl	8012698 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801135a:	2180      	movs	r1, #128	@ 0x80
 801135c:	6878      	ldr	r0, [r7, #4]
 801135e:	f001 f99b 	bl	8012698 <USBD_LL_StallEP>
 8011362:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8011364:	e040      	b.n	80113e8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8011366:	6839      	ldr	r1, [r7, #0]
 8011368:	6878      	ldr	r0, [r7, #4]
 801136a:	f000 fc3e 	bl	8011bea <USBD_CtlError>
              break;
 801136e:	e03b      	b.n	80113e8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8011370:	683b      	ldr	r3, [r7, #0]
 8011372:	885b      	ldrh	r3, [r3, #2]
 8011374:	2b00      	cmp	r3, #0
 8011376:	d136      	bne.n	80113e6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8011378:	7bbb      	ldrb	r3, [r7, #14]
 801137a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801137e:	2b00      	cmp	r3, #0
 8011380:	d004      	beq.n	801138c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8011382:	7bbb      	ldrb	r3, [r7, #14]
 8011384:	4619      	mov	r1, r3
 8011386:	6878      	ldr	r0, [r7, #4]
 8011388:	f001 f9a5 	bl	80126d6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 801138c:	6878      	ldr	r0, [r7, #4]
 801138e:	f000 fd03 	bl	8011d98 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8011392:	7bbb      	ldrb	r3, [r7, #14]
 8011394:	4619      	mov	r1, r3
 8011396:	6878      	ldr	r0, [r7, #4]
 8011398:	f7ff fde4 	bl	8010f64 <USBD_CoreFindEP>
 801139c:	4603      	mov	r3, r0
 801139e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80113a0:	7b7b      	ldrb	r3, [r7, #13]
 80113a2:	2bff      	cmp	r3, #255	@ 0xff
 80113a4:	d01f      	beq.n	80113e6 <USBD_StdEPReq+0x1c6>
 80113a6:	7b7b      	ldrb	r3, [r7, #13]
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	d11c      	bne.n	80113e6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80113ac:	7b7a      	ldrb	r2, [r7, #13]
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80113b4:	7b7a      	ldrb	r2, [r7, #13]
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	32ae      	adds	r2, #174	@ 0xae
 80113ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80113be:	689b      	ldr	r3, [r3, #8]
 80113c0:	2b00      	cmp	r3, #0
 80113c2:	d010      	beq.n	80113e6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80113c4:	7b7a      	ldrb	r2, [r7, #13]
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	32ae      	adds	r2, #174	@ 0xae
 80113ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80113ce:	689b      	ldr	r3, [r3, #8]
 80113d0:	6839      	ldr	r1, [r7, #0]
 80113d2:	6878      	ldr	r0, [r7, #4]
 80113d4:	4798      	blx	r3
 80113d6:	4603      	mov	r3, r0
 80113d8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80113da:	e004      	b.n	80113e6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80113dc:	6839      	ldr	r1, [r7, #0]
 80113de:	6878      	ldr	r0, [r7, #4]
 80113e0:	f000 fc03 	bl	8011bea <USBD_CtlError>
              break;
 80113e4:	e000      	b.n	80113e8 <USBD_StdEPReq+0x1c8>
              break;
 80113e6:	bf00      	nop
          }
          break;
 80113e8:	e0ab      	b.n	8011542 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80113f0:	b2db      	uxtb	r3, r3
 80113f2:	2b02      	cmp	r3, #2
 80113f4:	d002      	beq.n	80113fc <USBD_StdEPReq+0x1dc>
 80113f6:	2b03      	cmp	r3, #3
 80113f8:	d032      	beq.n	8011460 <USBD_StdEPReq+0x240>
 80113fa:	e097      	b.n	801152c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80113fc:	7bbb      	ldrb	r3, [r7, #14]
 80113fe:	2b00      	cmp	r3, #0
 8011400:	d007      	beq.n	8011412 <USBD_StdEPReq+0x1f2>
 8011402:	7bbb      	ldrb	r3, [r7, #14]
 8011404:	2b80      	cmp	r3, #128	@ 0x80
 8011406:	d004      	beq.n	8011412 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8011408:	6839      	ldr	r1, [r7, #0]
 801140a:	6878      	ldr	r0, [r7, #4]
 801140c:	f000 fbed 	bl	8011bea <USBD_CtlError>
                break;
 8011410:	e091      	b.n	8011536 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011412:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011416:	2b00      	cmp	r3, #0
 8011418:	da0b      	bge.n	8011432 <USBD_StdEPReq+0x212>
 801141a:	7bbb      	ldrb	r3, [r7, #14]
 801141c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011420:	4613      	mov	r3, r2
 8011422:	009b      	lsls	r3, r3, #2
 8011424:	4413      	add	r3, r2
 8011426:	009b      	lsls	r3, r3, #2
 8011428:	3310      	adds	r3, #16
 801142a:	687a      	ldr	r2, [r7, #4]
 801142c:	4413      	add	r3, r2
 801142e:	3304      	adds	r3, #4
 8011430:	e00b      	b.n	801144a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8011432:	7bbb      	ldrb	r3, [r7, #14]
 8011434:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011438:	4613      	mov	r3, r2
 801143a:	009b      	lsls	r3, r3, #2
 801143c:	4413      	add	r3, r2
 801143e:	009b      	lsls	r3, r3, #2
 8011440:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8011444:	687a      	ldr	r2, [r7, #4]
 8011446:	4413      	add	r3, r2
 8011448:	3304      	adds	r3, #4
 801144a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801144c:	68bb      	ldr	r3, [r7, #8]
 801144e:	2200      	movs	r2, #0
 8011450:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011452:	68bb      	ldr	r3, [r7, #8]
 8011454:	2202      	movs	r2, #2
 8011456:	4619      	mov	r1, r3
 8011458:	6878      	ldr	r0, [r7, #4]
 801145a:	f000 fc43 	bl	8011ce4 <USBD_CtlSendData>
              break;
 801145e:	e06a      	b.n	8011536 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8011460:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011464:	2b00      	cmp	r3, #0
 8011466:	da11      	bge.n	801148c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8011468:	7bbb      	ldrb	r3, [r7, #14]
 801146a:	f003 020f 	and.w	r2, r3, #15
 801146e:	6879      	ldr	r1, [r7, #4]
 8011470:	4613      	mov	r3, r2
 8011472:	009b      	lsls	r3, r3, #2
 8011474:	4413      	add	r3, r2
 8011476:	009b      	lsls	r3, r3, #2
 8011478:	440b      	add	r3, r1
 801147a:	3324      	adds	r3, #36	@ 0x24
 801147c:	881b      	ldrh	r3, [r3, #0]
 801147e:	2b00      	cmp	r3, #0
 8011480:	d117      	bne.n	80114b2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8011482:	6839      	ldr	r1, [r7, #0]
 8011484:	6878      	ldr	r0, [r7, #4]
 8011486:	f000 fbb0 	bl	8011bea <USBD_CtlError>
                  break;
 801148a:	e054      	b.n	8011536 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801148c:	7bbb      	ldrb	r3, [r7, #14]
 801148e:	f003 020f 	and.w	r2, r3, #15
 8011492:	6879      	ldr	r1, [r7, #4]
 8011494:	4613      	mov	r3, r2
 8011496:	009b      	lsls	r3, r3, #2
 8011498:	4413      	add	r3, r2
 801149a:	009b      	lsls	r3, r3, #2
 801149c:	440b      	add	r3, r1
 801149e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80114a2:	881b      	ldrh	r3, [r3, #0]
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	d104      	bne.n	80114b2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80114a8:	6839      	ldr	r1, [r7, #0]
 80114aa:	6878      	ldr	r0, [r7, #4]
 80114ac:	f000 fb9d 	bl	8011bea <USBD_CtlError>
                  break;
 80114b0:	e041      	b.n	8011536 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80114b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80114b6:	2b00      	cmp	r3, #0
 80114b8:	da0b      	bge.n	80114d2 <USBD_StdEPReq+0x2b2>
 80114ba:	7bbb      	ldrb	r3, [r7, #14]
 80114bc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80114c0:	4613      	mov	r3, r2
 80114c2:	009b      	lsls	r3, r3, #2
 80114c4:	4413      	add	r3, r2
 80114c6:	009b      	lsls	r3, r3, #2
 80114c8:	3310      	adds	r3, #16
 80114ca:	687a      	ldr	r2, [r7, #4]
 80114cc:	4413      	add	r3, r2
 80114ce:	3304      	adds	r3, #4
 80114d0:	e00b      	b.n	80114ea <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80114d2:	7bbb      	ldrb	r3, [r7, #14]
 80114d4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80114d8:	4613      	mov	r3, r2
 80114da:	009b      	lsls	r3, r3, #2
 80114dc:	4413      	add	r3, r2
 80114de:	009b      	lsls	r3, r3, #2
 80114e0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80114e4:	687a      	ldr	r2, [r7, #4]
 80114e6:	4413      	add	r3, r2
 80114e8:	3304      	adds	r3, #4
 80114ea:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80114ec:	7bbb      	ldrb	r3, [r7, #14]
 80114ee:	2b00      	cmp	r3, #0
 80114f0:	d002      	beq.n	80114f8 <USBD_StdEPReq+0x2d8>
 80114f2:	7bbb      	ldrb	r3, [r7, #14]
 80114f4:	2b80      	cmp	r3, #128	@ 0x80
 80114f6:	d103      	bne.n	8011500 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80114f8:	68bb      	ldr	r3, [r7, #8]
 80114fa:	2200      	movs	r2, #0
 80114fc:	601a      	str	r2, [r3, #0]
 80114fe:	e00e      	b.n	801151e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8011500:	7bbb      	ldrb	r3, [r7, #14]
 8011502:	4619      	mov	r1, r3
 8011504:	6878      	ldr	r0, [r7, #4]
 8011506:	f001 f905 	bl	8012714 <USBD_LL_IsStallEP>
 801150a:	4603      	mov	r3, r0
 801150c:	2b00      	cmp	r3, #0
 801150e:	d003      	beq.n	8011518 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8011510:	68bb      	ldr	r3, [r7, #8]
 8011512:	2201      	movs	r2, #1
 8011514:	601a      	str	r2, [r3, #0]
 8011516:	e002      	b.n	801151e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8011518:	68bb      	ldr	r3, [r7, #8]
 801151a:	2200      	movs	r2, #0
 801151c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801151e:	68bb      	ldr	r3, [r7, #8]
 8011520:	2202      	movs	r2, #2
 8011522:	4619      	mov	r1, r3
 8011524:	6878      	ldr	r0, [r7, #4]
 8011526:	f000 fbdd 	bl	8011ce4 <USBD_CtlSendData>
              break;
 801152a:	e004      	b.n	8011536 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 801152c:	6839      	ldr	r1, [r7, #0]
 801152e:	6878      	ldr	r0, [r7, #4]
 8011530:	f000 fb5b 	bl	8011bea <USBD_CtlError>
              break;
 8011534:	bf00      	nop
          }
          break;
 8011536:	e004      	b.n	8011542 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8011538:	6839      	ldr	r1, [r7, #0]
 801153a:	6878      	ldr	r0, [r7, #4]
 801153c:	f000 fb55 	bl	8011bea <USBD_CtlError>
          break;
 8011540:	bf00      	nop
      }
      break;
 8011542:	e005      	b.n	8011550 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8011544:	6839      	ldr	r1, [r7, #0]
 8011546:	6878      	ldr	r0, [r7, #4]
 8011548:	f000 fb4f 	bl	8011bea <USBD_CtlError>
      break;
 801154c:	e000      	b.n	8011550 <USBD_StdEPReq+0x330>
      break;
 801154e:	bf00      	nop
  }

  return ret;
 8011550:	7bfb      	ldrb	r3, [r7, #15]
}
 8011552:	4618      	mov	r0, r3
 8011554:	3710      	adds	r7, #16
 8011556:	46bd      	mov	sp, r7
 8011558:	bd80      	pop	{r7, pc}
	...

0801155c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801155c:	b580      	push	{r7, lr}
 801155e:	b084      	sub	sp, #16
 8011560:	af00      	add	r7, sp, #0
 8011562:	6078      	str	r0, [r7, #4]
 8011564:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8011566:	2300      	movs	r3, #0
 8011568:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801156a:	2300      	movs	r3, #0
 801156c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801156e:	2300      	movs	r3, #0
 8011570:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8011572:	683b      	ldr	r3, [r7, #0]
 8011574:	885b      	ldrh	r3, [r3, #2]
 8011576:	0a1b      	lsrs	r3, r3, #8
 8011578:	b29b      	uxth	r3, r3
 801157a:	3b01      	subs	r3, #1
 801157c:	2b06      	cmp	r3, #6
 801157e:	f200 8128 	bhi.w	80117d2 <USBD_GetDescriptor+0x276>
 8011582:	a201      	add	r2, pc, #4	@ (adr r2, 8011588 <USBD_GetDescriptor+0x2c>)
 8011584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011588:	080115a5 	.word	0x080115a5
 801158c:	080115bd 	.word	0x080115bd
 8011590:	080115fd 	.word	0x080115fd
 8011594:	080117d3 	.word	0x080117d3
 8011598:	080117d3 	.word	0x080117d3
 801159c:	08011773 	.word	0x08011773
 80115a0:	0801179f 	.word	0x0801179f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80115aa:	681b      	ldr	r3, [r3, #0]
 80115ac:	687a      	ldr	r2, [r7, #4]
 80115ae:	7c12      	ldrb	r2, [r2, #16]
 80115b0:	f107 0108 	add.w	r1, r7, #8
 80115b4:	4610      	mov	r0, r2
 80115b6:	4798      	blx	r3
 80115b8:	60f8      	str	r0, [r7, #12]
      break;
 80115ba:	e112      	b.n	80117e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	7c1b      	ldrb	r3, [r3, #16]
 80115c0:	2b00      	cmp	r3, #0
 80115c2:	d10d      	bne.n	80115e0 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80115ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80115cc:	f107 0208 	add.w	r2, r7, #8
 80115d0:	4610      	mov	r0, r2
 80115d2:	4798      	blx	r3
 80115d4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80115d6:	68fb      	ldr	r3, [r7, #12]
 80115d8:	3301      	adds	r3, #1
 80115da:	2202      	movs	r2, #2
 80115dc:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80115de:	e100      	b.n	80117e2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80115e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80115e8:	f107 0208 	add.w	r2, r7, #8
 80115ec:	4610      	mov	r0, r2
 80115ee:	4798      	blx	r3
 80115f0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80115f2:	68fb      	ldr	r3, [r7, #12]
 80115f4:	3301      	adds	r3, #1
 80115f6:	2202      	movs	r2, #2
 80115f8:	701a      	strb	r2, [r3, #0]
      break;
 80115fa:	e0f2      	b.n	80117e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80115fc:	683b      	ldr	r3, [r7, #0]
 80115fe:	885b      	ldrh	r3, [r3, #2]
 8011600:	b2db      	uxtb	r3, r3
 8011602:	2b05      	cmp	r3, #5
 8011604:	f200 80ac 	bhi.w	8011760 <USBD_GetDescriptor+0x204>
 8011608:	a201      	add	r2, pc, #4	@ (adr r2, 8011610 <USBD_GetDescriptor+0xb4>)
 801160a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801160e:	bf00      	nop
 8011610:	08011629 	.word	0x08011629
 8011614:	0801165d 	.word	0x0801165d
 8011618:	08011691 	.word	0x08011691
 801161c:	080116c5 	.word	0x080116c5
 8011620:	080116f9 	.word	0x080116f9
 8011624:	0801172d 	.word	0x0801172d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801162e:	685b      	ldr	r3, [r3, #4]
 8011630:	2b00      	cmp	r3, #0
 8011632:	d00b      	beq.n	801164c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801163a:	685b      	ldr	r3, [r3, #4]
 801163c:	687a      	ldr	r2, [r7, #4]
 801163e:	7c12      	ldrb	r2, [r2, #16]
 8011640:	f107 0108 	add.w	r1, r7, #8
 8011644:	4610      	mov	r0, r2
 8011646:	4798      	blx	r3
 8011648:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801164a:	e091      	b.n	8011770 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801164c:	6839      	ldr	r1, [r7, #0]
 801164e:	6878      	ldr	r0, [r7, #4]
 8011650:	f000 facb 	bl	8011bea <USBD_CtlError>
            err++;
 8011654:	7afb      	ldrb	r3, [r7, #11]
 8011656:	3301      	adds	r3, #1
 8011658:	72fb      	strb	r3, [r7, #11]
          break;
 801165a:	e089      	b.n	8011770 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011662:	689b      	ldr	r3, [r3, #8]
 8011664:	2b00      	cmp	r3, #0
 8011666:	d00b      	beq.n	8011680 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801166e:	689b      	ldr	r3, [r3, #8]
 8011670:	687a      	ldr	r2, [r7, #4]
 8011672:	7c12      	ldrb	r2, [r2, #16]
 8011674:	f107 0108 	add.w	r1, r7, #8
 8011678:	4610      	mov	r0, r2
 801167a:	4798      	blx	r3
 801167c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801167e:	e077      	b.n	8011770 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011680:	6839      	ldr	r1, [r7, #0]
 8011682:	6878      	ldr	r0, [r7, #4]
 8011684:	f000 fab1 	bl	8011bea <USBD_CtlError>
            err++;
 8011688:	7afb      	ldrb	r3, [r7, #11]
 801168a:	3301      	adds	r3, #1
 801168c:	72fb      	strb	r3, [r7, #11]
          break;
 801168e:	e06f      	b.n	8011770 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011696:	68db      	ldr	r3, [r3, #12]
 8011698:	2b00      	cmp	r3, #0
 801169a:	d00b      	beq.n	80116b4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80116a2:	68db      	ldr	r3, [r3, #12]
 80116a4:	687a      	ldr	r2, [r7, #4]
 80116a6:	7c12      	ldrb	r2, [r2, #16]
 80116a8:	f107 0108 	add.w	r1, r7, #8
 80116ac:	4610      	mov	r0, r2
 80116ae:	4798      	blx	r3
 80116b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80116b2:	e05d      	b.n	8011770 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80116b4:	6839      	ldr	r1, [r7, #0]
 80116b6:	6878      	ldr	r0, [r7, #4]
 80116b8:	f000 fa97 	bl	8011bea <USBD_CtlError>
            err++;
 80116bc:	7afb      	ldrb	r3, [r7, #11]
 80116be:	3301      	adds	r3, #1
 80116c0:	72fb      	strb	r3, [r7, #11]
          break;
 80116c2:	e055      	b.n	8011770 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80116ca:	691b      	ldr	r3, [r3, #16]
 80116cc:	2b00      	cmp	r3, #0
 80116ce:	d00b      	beq.n	80116e8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80116d6:	691b      	ldr	r3, [r3, #16]
 80116d8:	687a      	ldr	r2, [r7, #4]
 80116da:	7c12      	ldrb	r2, [r2, #16]
 80116dc:	f107 0108 	add.w	r1, r7, #8
 80116e0:	4610      	mov	r0, r2
 80116e2:	4798      	blx	r3
 80116e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80116e6:	e043      	b.n	8011770 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80116e8:	6839      	ldr	r1, [r7, #0]
 80116ea:	6878      	ldr	r0, [r7, #4]
 80116ec:	f000 fa7d 	bl	8011bea <USBD_CtlError>
            err++;
 80116f0:	7afb      	ldrb	r3, [r7, #11]
 80116f2:	3301      	adds	r3, #1
 80116f4:	72fb      	strb	r3, [r7, #11]
          break;
 80116f6:	e03b      	b.n	8011770 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80116fe:	695b      	ldr	r3, [r3, #20]
 8011700:	2b00      	cmp	r3, #0
 8011702:	d00b      	beq.n	801171c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801170a:	695b      	ldr	r3, [r3, #20]
 801170c:	687a      	ldr	r2, [r7, #4]
 801170e:	7c12      	ldrb	r2, [r2, #16]
 8011710:	f107 0108 	add.w	r1, r7, #8
 8011714:	4610      	mov	r0, r2
 8011716:	4798      	blx	r3
 8011718:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801171a:	e029      	b.n	8011770 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801171c:	6839      	ldr	r1, [r7, #0]
 801171e:	6878      	ldr	r0, [r7, #4]
 8011720:	f000 fa63 	bl	8011bea <USBD_CtlError>
            err++;
 8011724:	7afb      	ldrb	r3, [r7, #11]
 8011726:	3301      	adds	r3, #1
 8011728:	72fb      	strb	r3, [r7, #11]
          break;
 801172a:	e021      	b.n	8011770 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011732:	699b      	ldr	r3, [r3, #24]
 8011734:	2b00      	cmp	r3, #0
 8011736:	d00b      	beq.n	8011750 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801173e:	699b      	ldr	r3, [r3, #24]
 8011740:	687a      	ldr	r2, [r7, #4]
 8011742:	7c12      	ldrb	r2, [r2, #16]
 8011744:	f107 0108 	add.w	r1, r7, #8
 8011748:	4610      	mov	r0, r2
 801174a:	4798      	blx	r3
 801174c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801174e:	e00f      	b.n	8011770 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011750:	6839      	ldr	r1, [r7, #0]
 8011752:	6878      	ldr	r0, [r7, #4]
 8011754:	f000 fa49 	bl	8011bea <USBD_CtlError>
            err++;
 8011758:	7afb      	ldrb	r3, [r7, #11]
 801175a:	3301      	adds	r3, #1
 801175c:	72fb      	strb	r3, [r7, #11]
          break;
 801175e:	e007      	b.n	8011770 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8011760:	6839      	ldr	r1, [r7, #0]
 8011762:	6878      	ldr	r0, [r7, #4]
 8011764:	f000 fa41 	bl	8011bea <USBD_CtlError>
          err++;
 8011768:	7afb      	ldrb	r3, [r7, #11]
 801176a:	3301      	adds	r3, #1
 801176c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 801176e:	bf00      	nop
      }
      break;
 8011770:	e037      	b.n	80117e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	7c1b      	ldrb	r3, [r3, #16]
 8011776:	2b00      	cmp	r3, #0
 8011778:	d109      	bne.n	801178e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011780:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011782:	f107 0208 	add.w	r2, r7, #8
 8011786:	4610      	mov	r0, r2
 8011788:	4798      	blx	r3
 801178a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801178c:	e029      	b.n	80117e2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801178e:	6839      	ldr	r1, [r7, #0]
 8011790:	6878      	ldr	r0, [r7, #4]
 8011792:	f000 fa2a 	bl	8011bea <USBD_CtlError>
        err++;
 8011796:	7afb      	ldrb	r3, [r7, #11]
 8011798:	3301      	adds	r3, #1
 801179a:	72fb      	strb	r3, [r7, #11]
      break;
 801179c:	e021      	b.n	80117e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	7c1b      	ldrb	r3, [r3, #16]
 80117a2:	2b00      	cmp	r3, #0
 80117a4:	d10d      	bne.n	80117c2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80117ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80117ae:	f107 0208 	add.w	r2, r7, #8
 80117b2:	4610      	mov	r0, r2
 80117b4:	4798      	blx	r3
 80117b6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80117b8:	68fb      	ldr	r3, [r7, #12]
 80117ba:	3301      	adds	r3, #1
 80117bc:	2207      	movs	r2, #7
 80117be:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80117c0:	e00f      	b.n	80117e2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80117c2:	6839      	ldr	r1, [r7, #0]
 80117c4:	6878      	ldr	r0, [r7, #4]
 80117c6:	f000 fa10 	bl	8011bea <USBD_CtlError>
        err++;
 80117ca:	7afb      	ldrb	r3, [r7, #11]
 80117cc:	3301      	adds	r3, #1
 80117ce:	72fb      	strb	r3, [r7, #11]
      break;
 80117d0:	e007      	b.n	80117e2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80117d2:	6839      	ldr	r1, [r7, #0]
 80117d4:	6878      	ldr	r0, [r7, #4]
 80117d6:	f000 fa08 	bl	8011bea <USBD_CtlError>
      err++;
 80117da:	7afb      	ldrb	r3, [r7, #11]
 80117dc:	3301      	adds	r3, #1
 80117de:	72fb      	strb	r3, [r7, #11]
      break;
 80117e0:	bf00      	nop
  }

  if (err != 0U)
 80117e2:	7afb      	ldrb	r3, [r7, #11]
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	d11e      	bne.n	8011826 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80117e8:	683b      	ldr	r3, [r7, #0]
 80117ea:	88db      	ldrh	r3, [r3, #6]
 80117ec:	2b00      	cmp	r3, #0
 80117ee:	d016      	beq.n	801181e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80117f0:	893b      	ldrh	r3, [r7, #8]
 80117f2:	2b00      	cmp	r3, #0
 80117f4:	d00e      	beq.n	8011814 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80117f6:	683b      	ldr	r3, [r7, #0]
 80117f8:	88da      	ldrh	r2, [r3, #6]
 80117fa:	893b      	ldrh	r3, [r7, #8]
 80117fc:	4293      	cmp	r3, r2
 80117fe:	bf28      	it	cs
 8011800:	4613      	movcs	r3, r2
 8011802:	b29b      	uxth	r3, r3
 8011804:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8011806:	893b      	ldrh	r3, [r7, #8]
 8011808:	461a      	mov	r2, r3
 801180a:	68f9      	ldr	r1, [r7, #12]
 801180c:	6878      	ldr	r0, [r7, #4]
 801180e:	f000 fa69 	bl	8011ce4 <USBD_CtlSendData>
 8011812:	e009      	b.n	8011828 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8011814:	6839      	ldr	r1, [r7, #0]
 8011816:	6878      	ldr	r0, [r7, #4]
 8011818:	f000 f9e7 	bl	8011bea <USBD_CtlError>
 801181c:	e004      	b.n	8011828 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801181e:	6878      	ldr	r0, [r7, #4]
 8011820:	f000 faba 	bl	8011d98 <USBD_CtlSendStatus>
 8011824:	e000      	b.n	8011828 <USBD_GetDescriptor+0x2cc>
    return;
 8011826:	bf00      	nop
  }
}
 8011828:	3710      	adds	r7, #16
 801182a:	46bd      	mov	sp, r7
 801182c:	bd80      	pop	{r7, pc}
 801182e:	bf00      	nop

08011830 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011830:	b580      	push	{r7, lr}
 8011832:	b084      	sub	sp, #16
 8011834:	af00      	add	r7, sp, #0
 8011836:	6078      	str	r0, [r7, #4]
 8011838:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801183a:	683b      	ldr	r3, [r7, #0]
 801183c:	889b      	ldrh	r3, [r3, #4]
 801183e:	2b00      	cmp	r3, #0
 8011840:	d131      	bne.n	80118a6 <USBD_SetAddress+0x76>
 8011842:	683b      	ldr	r3, [r7, #0]
 8011844:	88db      	ldrh	r3, [r3, #6]
 8011846:	2b00      	cmp	r3, #0
 8011848:	d12d      	bne.n	80118a6 <USBD_SetAddress+0x76>
 801184a:	683b      	ldr	r3, [r7, #0]
 801184c:	885b      	ldrh	r3, [r3, #2]
 801184e:	2b7f      	cmp	r3, #127	@ 0x7f
 8011850:	d829      	bhi.n	80118a6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8011852:	683b      	ldr	r3, [r7, #0]
 8011854:	885b      	ldrh	r3, [r3, #2]
 8011856:	b2db      	uxtb	r3, r3
 8011858:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801185c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011864:	b2db      	uxtb	r3, r3
 8011866:	2b03      	cmp	r3, #3
 8011868:	d104      	bne.n	8011874 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801186a:	6839      	ldr	r1, [r7, #0]
 801186c:	6878      	ldr	r0, [r7, #4]
 801186e:	f000 f9bc 	bl	8011bea <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011872:	e01d      	b.n	80118b0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	7bfa      	ldrb	r2, [r7, #15]
 8011878:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 801187c:	7bfb      	ldrb	r3, [r7, #15]
 801187e:	4619      	mov	r1, r3
 8011880:	6878      	ldr	r0, [r7, #4]
 8011882:	f000 ff73 	bl	801276c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8011886:	6878      	ldr	r0, [r7, #4]
 8011888:	f000 fa86 	bl	8011d98 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801188c:	7bfb      	ldrb	r3, [r7, #15]
 801188e:	2b00      	cmp	r3, #0
 8011890:	d004      	beq.n	801189c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	2202      	movs	r2, #2
 8011896:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801189a:	e009      	b.n	80118b0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	2201      	movs	r2, #1
 80118a0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80118a4:	e004      	b.n	80118b0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80118a6:	6839      	ldr	r1, [r7, #0]
 80118a8:	6878      	ldr	r0, [r7, #4]
 80118aa:	f000 f99e 	bl	8011bea <USBD_CtlError>
  }
}
 80118ae:	bf00      	nop
 80118b0:	bf00      	nop
 80118b2:	3710      	adds	r7, #16
 80118b4:	46bd      	mov	sp, r7
 80118b6:	bd80      	pop	{r7, pc}

080118b8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80118b8:	b580      	push	{r7, lr}
 80118ba:	b084      	sub	sp, #16
 80118bc:	af00      	add	r7, sp, #0
 80118be:	6078      	str	r0, [r7, #4]
 80118c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80118c2:	2300      	movs	r3, #0
 80118c4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80118c6:	683b      	ldr	r3, [r7, #0]
 80118c8:	885b      	ldrh	r3, [r3, #2]
 80118ca:	b2da      	uxtb	r2, r3
 80118cc:	4b4e      	ldr	r3, [pc, #312]	@ (8011a08 <USBD_SetConfig+0x150>)
 80118ce:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80118d0:	4b4d      	ldr	r3, [pc, #308]	@ (8011a08 <USBD_SetConfig+0x150>)
 80118d2:	781b      	ldrb	r3, [r3, #0]
 80118d4:	2b01      	cmp	r3, #1
 80118d6:	d905      	bls.n	80118e4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80118d8:	6839      	ldr	r1, [r7, #0]
 80118da:	6878      	ldr	r0, [r7, #4]
 80118dc:	f000 f985 	bl	8011bea <USBD_CtlError>
    return USBD_FAIL;
 80118e0:	2303      	movs	r3, #3
 80118e2:	e08c      	b.n	80119fe <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80118ea:	b2db      	uxtb	r3, r3
 80118ec:	2b02      	cmp	r3, #2
 80118ee:	d002      	beq.n	80118f6 <USBD_SetConfig+0x3e>
 80118f0:	2b03      	cmp	r3, #3
 80118f2:	d029      	beq.n	8011948 <USBD_SetConfig+0x90>
 80118f4:	e075      	b.n	80119e2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80118f6:	4b44      	ldr	r3, [pc, #272]	@ (8011a08 <USBD_SetConfig+0x150>)
 80118f8:	781b      	ldrb	r3, [r3, #0]
 80118fa:	2b00      	cmp	r3, #0
 80118fc:	d020      	beq.n	8011940 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80118fe:	4b42      	ldr	r3, [pc, #264]	@ (8011a08 <USBD_SetConfig+0x150>)
 8011900:	781b      	ldrb	r3, [r3, #0]
 8011902:	461a      	mov	r2, r3
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8011908:	4b3f      	ldr	r3, [pc, #252]	@ (8011a08 <USBD_SetConfig+0x150>)
 801190a:	781b      	ldrb	r3, [r3, #0]
 801190c:	4619      	mov	r1, r3
 801190e:	6878      	ldr	r0, [r7, #4]
 8011910:	f7fe ffe3 	bl	80108da <USBD_SetClassConfig>
 8011914:	4603      	mov	r3, r0
 8011916:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8011918:	7bfb      	ldrb	r3, [r7, #15]
 801191a:	2b00      	cmp	r3, #0
 801191c:	d008      	beq.n	8011930 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 801191e:	6839      	ldr	r1, [r7, #0]
 8011920:	6878      	ldr	r0, [r7, #4]
 8011922:	f000 f962 	bl	8011bea <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	2202      	movs	r2, #2
 801192a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801192e:	e065      	b.n	80119fc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8011930:	6878      	ldr	r0, [r7, #4]
 8011932:	f000 fa31 	bl	8011d98 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	2203      	movs	r2, #3
 801193a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 801193e:	e05d      	b.n	80119fc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8011940:	6878      	ldr	r0, [r7, #4]
 8011942:	f000 fa29 	bl	8011d98 <USBD_CtlSendStatus>
      break;
 8011946:	e059      	b.n	80119fc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8011948:	4b2f      	ldr	r3, [pc, #188]	@ (8011a08 <USBD_SetConfig+0x150>)
 801194a:	781b      	ldrb	r3, [r3, #0]
 801194c:	2b00      	cmp	r3, #0
 801194e:	d112      	bne.n	8011976 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	2202      	movs	r2, #2
 8011954:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8011958:	4b2b      	ldr	r3, [pc, #172]	@ (8011a08 <USBD_SetConfig+0x150>)
 801195a:	781b      	ldrb	r3, [r3, #0]
 801195c:	461a      	mov	r2, r3
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8011962:	4b29      	ldr	r3, [pc, #164]	@ (8011a08 <USBD_SetConfig+0x150>)
 8011964:	781b      	ldrb	r3, [r3, #0]
 8011966:	4619      	mov	r1, r3
 8011968:	6878      	ldr	r0, [r7, #4]
 801196a:	f7fe ffd2 	bl	8010912 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801196e:	6878      	ldr	r0, [r7, #4]
 8011970:	f000 fa12 	bl	8011d98 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8011974:	e042      	b.n	80119fc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8011976:	4b24      	ldr	r3, [pc, #144]	@ (8011a08 <USBD_SetConfig+0x150>)
 8011978:	781b      	ldrb	r3, [r3, #0]
 801197a:	461a      	mov	r2, r3
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	685b      	ldr	r3, [r3, #4]
 8011980:	429a      	cmp	r2, r3
 8011982:	d02a      	beq.n	80119da <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	685b      	ldr	r3, [r3, #4]
 8011988:	b2db      	uxtb	r3, r3
 801198a:	4619      	mov	r1, r3
 801198c:	6878      	ldr	r0, [r7, #4]
 801198e:	f7fe ffc0 	bl	8010912 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8011992:	4b1d      	ldr	r3, [pc, #116]	@ (8011a08 <USBD_SetConfig+0x150>)
 8011994:	781b      	ldrb	r3, [r3, #0]
 8011996:	461a      	mov	r2, r3
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 801199c:	4b1a      	ldr	r3, [pc, #104]	@ (8011a08 <USBD_SetConfig+0x150>)
 801199e:	781b      	ldrb	r3, [r3, #0]
 80119a0:	4619      	mov	r1, r3
 80119a2:	6878      	ldr	r0, [r7, #4]
 80119a4:	f7fe ff99 	bl	80108da <USBD_SetClassConfig>
 80119a8:	4603      	mov	r3, r0
 80119aa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80119ac:	7bfb      	ldrb	r3, [r7, #15]
 80119ae:	2b00      	cmp	r3, #0
 80119b0:	d00f      	beq.n	80119d2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80119b2:	6839      	ldr	r1, [r7, #0]
 80119b4:	6878      	ldr	r0, [r7, #4]
 80119b6:	f000 f918 	bl	8011bea <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	685b      	ldr	r3, [r3, #4]
 80119be:	b2db      	uxtb	r3, r3
 80119c0:	4619      	mov	r1, r3
 80119c2:	6878      	ldr	r0, [r7, #4]
 80119c4:	f7fe ffa5 	bl	8010912 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	2202      	movs	r2, #2
 80119cc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80119d0:	e014      	b.n	80119fc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80119d2:	6878      	ldr	r0, [r7, #4]
 80119d4:	f000 f9e0 	bl	8011d98 <USBD_CtlSendStatus>
      break;
 80119d8:	e010      	b.n	80119fc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80119da:	6878      	ldr	r0, [r7, #4]
 80119dc:	f000 f9dc 	bl	8011d98 <USBD_CtlSendStatus>
      break;
 80119e0:	e00c      	b.n	80119fc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80119e2:	6839      	ldr	r1, [r7, #0]
 80119e4:	6878      	ldr	r0, [r7, #4]
 80119e6:	f000 f900 	bl	8011bea <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80119ea:	4b07      	ldr	r3, [pc, #28]	@ (8011a08 <USBD_SetConfig+0x150>)
 80119ec:	781b      	ldrb	r3, [r3, #0]
 80119ee:	4619      	mov	r1, r3
 80119f0:	6878      	ldr	r0, [r7, #4]
 80119f2:	f7fe ff8e 	bl	8010912 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80119f6:	2303      	movs	r3, #3
 80119f8:	73fb      	strb	r3, [r7, #15]
      break;
 80119fa:	bf00      	nop
  }

  return ret;
 80119fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80119fe:	4618      	mov	r0, r3
 8011a00:	3710      	adds	r7, #16
 8011a02:	46bd      	mov	sp, r7
 8011a04:	bd80      	pop	{r7, pc}
 8011a06:	bf00      	nop
 8011a08:	2000172c 	.word	0x2000172c

08011a0c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011a0c:	b580      	push	{r7, lr}
 8011a0e:	b082      	sub	sp, #8
 8011a10:	af00      	add	r7, sp, #0
 8011a12:	6078      	str	r0, [r7, #4]
 8011a14:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8011a16:	683b      	ldr	r3, [r7, #0]
 8011a18:	88db      	ldrh	r3, [r3, #6]
 8011a1a:	2b01      	cmp	r3, #1
 8011a1c:	d004      	beq.n	8011a28 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8011a1e:	6839      	ldr	r1, [r7, #0]
 8011a20:	6878      	ldr	r0, [r7, #4]
 8011a22:	f000 f8e2 	bl	8011bea <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8011a26:	e023      	b.n	8011a70 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011a2e:	b2db      	uxtb	r3, r3
 8011a30:	2b02      	cmp	r3, #2
 8011a32:	dc02      	bgt.n	8011a3a <USBD_GetConfig+0x2e>
 8011a34:	2b00      	cmp	r3, #0
 8011a36:	dc03      	bgt.n	8011a40 <USBD_GetConfig+0x34>
 8011a38:	e015      	b.n	8011a66 <USBD_GetConfig+0x5a>
 8011a3a:	2b03      	cmp	r3, #3
 8011a3c:	d00b      	beq.n	8011a56 <USBD_GetConfig+0x4a>
 8011a3e:	e012      	b.n	8011a66 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	2200      	movs	r2, #0
 8011a44:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	3308      	adds	r3, #8
 8011a4a:	2201      	movs	r2, #1
 8011a4c:	4619      	mov	r1, r3
 8011a4e:	6878      	ldr	r0, [r7, #4]
 8011a50:	f000 f948 	bl	8011ce4 <USBD_CtlSendData>
        break;
 8011a54:	e00c      	b.n	8011a70 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	3304      	adds	r3, #4
 8011a5a:	2201      	movs	r2, #1
 8011a5c:	4619      	mov	r1, r3
 8011a5e:	6878      	ldr	r0, [r7, #4]
 8011a60:	f000 f940 	bl	8011ce4 <USBD_CtlSendData>
        break;
 8011a64:	e004      	b.n	8011a70 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8011a66:	6839      	ldr	r1, [r7, #0]
 8011a68:	6878      	ldr	r0, [r7, #4]
 8011a6a:	f000 f8be 	bl	8011bea <USBD_CtlError>
        break;
 8011a6e:	bf00      	nop
}
 8011a70:	bf00      	nop
 8011a72:	3708      	adds	r7, #8
 8011a74:	46bd      	mov	sp, r7
 8011a76:	bd80      	pop	{r7, pc}

08011a78 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011a78:	b580      	push	{r7, lr}
 8011a7a:	b082      	sub	sp, #8
 8011a7c:	af00      	add	r7, sp, #0
 8011a7e:	6078      	str	r0, [r7, #4]
 8011a80:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011a88:	b2db      	uxtb	r3, r3
 8011a8a:	3b01      	subs	r3, #1
 8011a8c:	2b02      	cmp	r3, #2
 8011a8e:	d81e      	bhi.n	8011ace <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8011a90:	683b      	ldr	r3, [r7, #0]
 8011a92:	88db      	ldrh	r3, [r3, #6]
 8011a94:	2b02      	cmp	r3, #2
 8011a96:	d004      	beq.n	8011aa2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8011a98:	6839      	ldr	r1, [r7, #0]
 8011a9a:	6878      	ldr	r0, [r7, #4]
 8011a9c:	f000 f8a5 	bl	8011bea <USBD_CtlError>
        break;
 8011aa0:	e01a      	b.n	8011ad8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	2201      	movs	r2, #1
 8011aa6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8011aae:	2b00      	cmp	r3, #0
 8011ab0:	d005      	beq.n	8011abe <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	68db      	ldr	r3, [r3, #12]
 8011ab6:	f043 0202 	orr.w	r2, r3, #2
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	330c      	adds	r3, #12
 8011ac2:	2202      	movs	r2, #2
 8011ac4:	4619      	mov	r1, r3
 8011ac6:	6878      	ldr	r0, [r7, #4]
 8011ac8:	f000 f90c 	bl	8011ce4 <USBD_CtlSendData>
      break;
 8011acc:	e004      	b.n	8011ad8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8011ace:	6839      	ldr	r1, [r7, #0]
 8011ad0:	6878      	ldr	r0, [r7, #4]
 8011ad2:	f000 f88a 	bl	8011bea <USBD_CtlError>
      break;
 8011ad6:	bf00      	nop
  }
}
 8011ad8:	bf00      	nop
 8011ada:	3708      	adds	r7, #8
 8011adc:	46bd      	mov	sp, r7
 8011ade:	bd80      	pop	{r7, pc}

08011ae0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011ae0:	b580      	push	{r7, lr}
 8011ae2:	b082      	sub	sp, #8
 8011ae4:	af00      	add	r7, sp, #0
 8011ae6:	6078      	str	r0, [r7, #4]
 8011ae8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8011aea:	683b      	ldr	r3, [r7, #0]
 8011aec:	885b      	ldrh	r3, [r3, #2]
 8011aee:	2b01      	cmp	r3, #1
 8011af0:	d107      	bne.n	8011b02 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	2201      	movs	r2, #1
 8011af6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8011afa:	6878      	ldr	r0, [r7, #4]
 8011afc:	f000 f94c 	bl	8011d98 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8011b00:	e013      	b.n	8011b2a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8011b02:	683b      	ldr	r3, [r7, #0]
 8011b04:	885b      	ldrh	r3, [r3, #2]
 8011b06:	2b02      	cmp	r3, #2
 8011b08:	d10b      	bne.n	8011b22 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8011b0a:	683b      	ldr	r3, [r7, #0]
 8011b0c:	889b      	ldrh	r3, [r3, #4]
 8011b0e:	0a1b      	lsrs	r3, r3, #8
 8011b10:	b29b      	uxth	r3, r3
 8011b12:	b2da      	uxtb	r2, r3
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8011b1a:	6878      	ldr	r0, [r7, #4]
 8011b1c:	f000 f93c 	bl	8011d98 <USBD_CtlSendStatus>
}
 8011b20:	e003      	b.n	8011b2a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8011b22:	6839      	ldr	r1, [r7, #0]
 8011b24:	6878      	ldr	r0, [r7, #4]
 8011b26:	f000 f860 	bl	8011bea <USBD_CtlError>
}
 8011b2a:	bf00      	nop
 8011b2c:	3708      	adds	r7, #8
 8011b2e:	46bd      	mov	sp, r7
 8011b30:	bd80      	pop	{r7, pc}

08011b32 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011b32:	b580      	push	{r7, lr}
 8011b34:	b082      	sub	sp, #8
 8011b36:	af00      	add	r7, sp, #0
 8011b38:	6078      	str	r0, [r7, #4]
 8011b3a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011b42:	b2db      	uxtb	r3, r3
 8011b44:	3b01      	subs	r3, #1
 8011b46:	2b02      	cmp	r3, #2
 8011b48:	d80b      	bhi.n	8011b62 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8011b4a:	683b      	ldr	r3, [r7, #0]
 8011b4c:	885b      	ldrh	r3, [r3, #2]
 8011b4e:	2b01      	cmp	r3, #1
 8011b50:	d10c      	bne.n	8011b6c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	2200      	movs	r2, #0
 8011b56:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8011b5a:	6878      	ldr	r0, [r7, #4]
 8011b5c:	f000 f91c 	bl	8011d98 <USBD_CtlSendStatus>
      }
      break;
 8011b60:	e004      	b.n	8011b6c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8011b62:	6839      	ldr	r1, [r7, #0]
 8011b64:	6878      	ldr	r0, [r7, #4]
 8011b66:	f000 f840 	bl	8011bea <USBD_CtlError>
      break;
 8011b6a:	e000      	b.n	8011b6e <USBD_ClrFeature+0x3c>
      break;
 8011b6c:	bf00      	nop
  }
}
 8011b6e:	bf00      	nop
 8011b70:	3708      	adds	r7, #8
 8011b72:	46bd      	mov	sp, r7
 8011b74:	bd80      	pop	{r7, pc}

08011b76 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8011b76:	b580      	push	{r7, lr}
 8011b78:	b084      	sub	sp, #16
 8011b7a:	af00      	add	r7, sp, #0
 8011b7c:	6078      	str	r0, [r7, #4]
 8011b7e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8011b80:	683b      	ldr	r3, [r7, #0]
 8011b82:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8011b84:	68fb      	ldr	r3, [r7, #12]
 8011b86:	781a      	ldrb	r2, [r3, #0]
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8011b8c:	68fb      	ldr	r3, [r7, #12]
 8011b8e:	3301      	adds	r3, #1
 8011b90:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8011b92:	68fb      	ldr	r3, [r7, #12]
 8011b94:	781a      	ldrb	r2, [r3, #0]
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8011b9a:	68fb      	ldr	r3, [r7, #12]
 8011b9c:	3301      	adds	r3, #1
 8011b9e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8011ba0:	68f8      	ldr	r0, [r7, #12]
 8011ba2:	f7ff fa40 	bl	8011026 <SWAPBYTE>
 8011ba6:	4603      	mov	r3, r0
 8011ba8:	461a      	mov	r2, r3
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8011bae:	68fb      	ldr	r3, [r7, #12]
 8011bb0:	3301      	adds	r3, #1
 8011bb2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8011bb4:	68fb      	ldr	r3, [r7, #12]
 8011bb6:	3301      	adds	r3, #1
 8011bb8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8011bba:	68f8      	ldr	r0, [r7, #12]
 8011bbc:	f7ff fa33 	bl	8011026 <SWAPBYTE>
 8011bc0:	4603      	mov	r3, r0
 8011bc2:	461a      	mov	r2, r3
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8011bc8:	68fb      	ldr	r3, [r7, #12]
 8011bca:	3301      	adds	r3, #1
 8011bcc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8011bce:	68fb      	ldr	r3, [r7, #12]
 8011bd0:	3301      	adds	r3, #1
 8011bd2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8011bd4:	68f8      	ldr	r0, [r7, #12]
 8011bd6:	f7ff fa26 	bl	8011026 <SWAPBYTE>
 8011bda:	4603      	mov	r3, r0
 8011bdc:	461a      	mov	r2, r3
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	80da      	strh	r2, [r3, #6]
}
 8011be2:	bf00      	nop
 8011be4:	3710      	adds	r7, #16
 8011be6:	46bd      	mov	sp, r7
 8011be8:	bd80      	pop	{r7, pc}

08011bea <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011bea:	b580      	push	{r7, lr}
 8011bec:	b082      	sub	sp, #8
 8011bee:	af00      	add	r7, sp, #0
 8011bf0:	6078      	str	r0, [r7, #4]
 8011bf2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8011bf4:	2180      	movs	r1, #128	@ 0x80
 8011bf6:	6878      	ldr	r0, [r7, #4]
 8011bf8:	f000 fd4e 	bl	8012698 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8011bfc:	2100      	movs	r1, #0
 8011bfe:	6878      	ldr	r0, [r7, #4]
 8011c00:	f000 fd4a 	bl	8012698 <USBD_LL_StallEP>
}
 8011c04:	bf00      	nop
 8011c06:	3708      	adds	r7, #8
 8011c08:	46bd      	mov	sp, r7
 8011c0a:	bd80      	pop	{r7, pc}

08011c0c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8011c0c:	b580      	push	{r7, lr}
 8011c0e:	b086      	sub	sp, #24
 8011c10:	af00      	add	r7, sp, #0
 8011c12:	60f8      	str	r0, [r7, #12]
 8011c14:	60b9      	str	r1, [r7, #8]
 8011c16:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8011c18:	2300      	movs	r3, #0
 8011c1a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8011c1c:	68fb      	ldr	r3, [r7, #12]
 8011c1e:	2b00      	cmp	r3, #0
 8011c20:	d042      	beq.n	8011ca8 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8011c22:	68fb      	ldr	r3, [r7, #12]
 8011c24:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8011c26:	6938      	ldr	r0, [r7, #16]
 8011c28:	f000 f842 	bl	8011cb0 <USBD_GetLen>
 8011c2c:	4603      	mov	r3, r0
 8011c2e:	3301      	adds	r3, #1
 8011c30:	005b      	lsls	r3, r3, #1
 8011c32:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011c36:	d808      	bhi.n	8011c4a <USBD_GetString+0x3e>
 8011c38:	6938      	ldr	r0, [r7, #16]
 8011c3a:	f000 f839 	bl	8011cb0 <USBD_GetLen>
 8011c3e:	4603      	mov	r3, r0
 8011c40:	3301      	adds	r3, #1
 8011c42:	b29b      	uxth	r3, r3
 8011c44:	005b      	lsls	r3, r3, #1
 8011c46:	b29a      	uxth	r2, r3
 8011c48:	e001      	b.n	8011c4e <USBD_GetString+0x42>
 8011c4a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8011c52:	7dfb      	ldrb	r3, [r7, #23]
 8011c54:	68ba      	ldr	r2, [r7, #8]
 8011c56:	4413      	add	r3, r2
 8011c58:	687a      	ldr	r2, [r7, #4]
 8011c5a:	7812      	ldrb	r2, [r2, #0]
 8011c5c:	701a      	strb	r2, [r3, #0]
  idx++;
 8011c5e:	7dfb      	ldrb	r3, [r7, #23]
 8011c60:	3301      	adds	r3, #1
 8011c62:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8011c64:	7dfb      	ldrb	r3, [r7, #23]
 8011c66:	68ba      	ldr	r2, [r7, #8]
 8011c68:	4413      	add	r3, r2
 8011c6a:	2203      	movs	r2, #3
 8011c6c:	701a      	strb	r2, [r3, #0]
  idx++;
 8011c6e:	7dfb      	ldrb	r3, [r7, #23]
 8011c70:	3301      	adds	r3, #1
 8011c72:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8011c74:	e013      	b.n	8011c9e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8011c76:	7dfb      	ldrb	r3, [r7, #23]
 8011c78:	68ba      	ldr	r2, [r7, #8]
 8011c7a:	4413      	add	r3, r2
 8011c7c:	693a      	ldr	r2, [r7, #16]
 8011c7e:	7812      	ldrb	r2, [r2, #0]
 8011c80:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8011c82:	693b      	ldr	r3, [r7, #16]
 8011c84:	3301      	adds	r3, #1
 8011c86:	613b      	str	r3, [r7, #16]
    idx++;
 8011c88:	7dfb      	ldrb	r3, [r7, #23]
 8011c8a:	3301      	adds	r3, #1
 8011c8c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8011c8e:	7dfb      	ldrb	r3, [r7, #23]
 8011c90:	68ba      	ldr	r2, [r7, #8]
 8011c92:	4413      	add	r3, r2
 8011c94:	2200      	movs	r2, #0
 8011c96:	701a      	strb	r2, [r3, #0]
    idx++;
 8011c98:	7dfb      	ldrb	r3, [r7, #23]
 8011c9a:	3301      	adds	r3, #1
 8011c9c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8011c9e:	693b      	ldr	r3, [r7, #16]
 8011ca0:	781b      	ldrb	r3, [r3, #0]
 8011ca2:	2b00      	cmp	r3, #0
 8011ca4:	d1e7      	bne.n	8011c76 <USBD_GetString+0x6a>
 8011ca6:	e000      	b.n	8011caa <USBD_GetString+0x9e>
    return;
 8011ca8:	bf00      	nop
  }
}
 8011caa:	3718      	adds	r7, #24
 8011cac:	46bd      	mov	sp, r7
 8011cae:	bd80      	pop	{r7, pc}

08011cb0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8011cb0:	b480      	push	{r7}
 8011cb2:	b085      	sub	sp, #20
 8011cb4:	af00      	add	r7, sp, #0
 8011cb6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8011cb8:	2300      	movs	r3, #0
 8011cba:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8011cc0:	e005      	b.n	8011cce <USBD_GetLen+0x1e>
  {
    len++;
 8011cc2:	7bfb      	ldrb	r3, [r7, #15]
 8011cc4:	3301      	adds	r3, #1
 8011cc6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8011cc8:	68bb      	ldr	r3, [r7, #8]
 8011cca:	3301      	adds	r3, #1
 8011ccc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8011cce:	68bb      	ldr	r3, [r7, #8]
 8011cd0:	781b      	ldrb	r3, [r3, #0]
 8011cd2:	2b00      	cmp	r3, #0
 8011cd4:	d1f5      	bne.n	8011cc2 <USBD_GetLen+0x12>
  }

  return len;
 8011cd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8011cd8:	4618      	mov	r0, r3
 8011cda:	3714      	adds	r7, #20
 8011cdc:	46bd      	mov	sp, r7
 8011cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ce2:	4770      	bx	lr

08011ce4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8011ce4:	b580      	push	{r7, lr}
 8011ce6:	b084      	sub	sp, #16
 8011ce8:	af00      	add	r7, sp, #0
 8011cea:	60f8      	str	r0, [r7, #12]
 8011cec:	60b9      	str	r1, [r7, #8]
 8011cee:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8011cf0:	68fb      	ldr	r3, [r7, #12]
 8011cf2:	2202      	movs	r2, #2
 8011cf4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8011cf8:	68fb      	ldr	r3, [r7, #12]
 8011cfa:	687a      	ldr	r2, [r7, #4]
 8011cfc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8011cfe:	68fb      	ldr	r3, [r7, #12]
 8011d00:	687a      	ldr	r2, [r7, #4]
 8011d02:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	68ba      	ldr	r2, [r7, #8]
 8011d08:	2100      	movs	r1, #0
 8011d0a:	68f8      	ldr	r0, [r7, #12]
 8011d0c:	f000 fd4d 	bl	80127aa <USBD_LL_Transmit>

  return USBD_OK;
 8011d10:	2300      	movs	r3, #0
}
 8011d12:	4618      	mov	r0, r3
 8011d14:	3710      	adds	r7, #16
 8011d16:	46bd      	mov	sp, r7
 8011d18:	bd80      	pop	{r7, pc}

08011d1a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8011d1a:	b580      	push	{r7, lr}
 8011d1c:	b084      	sub	sp, #16
 8011d1e:	af00      	add	r7, sp, #0
 8011d20:	60f8      	str	r0, [r7, #12]
 8011d22:	60b9      	str	r1, [r7, #8]
 8011d24:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	68ba      	ldr	r2, [r7, #8]
 8011d2a:	2100      	movs	r1, #0
 8011d2c:	68f8      	ldr	r0, [r7, #12]
 8011d2e:	f000 fd3c 	bl	80127aa <USBD_LL_Transmit>

  return USBD_OK;
 8011d32:	2300      	movs	r3, #0
}
 8011d34:	4618      	mov	r0, r3
 8011d36:	3710      	adds	r7, #16
 8011d38:	46bd      	mov	sp, r7
 8011d3a:	bd80      	pop	{r7, pc}

08011d3c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8011d3c:	b580      	push	{r7, lr}
 8011d3e:	b084      	sub	sp, #16
 8011d40:	af00      	add	r7, sp, #0
 8011d42:	60f8      	str	r0, [r7, #12]
 8011d44:	60b9      	str	r1, [r7, #8]
 8011d46:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8011d48:	68fb      	ldr	r3, [r7, #12]
 8011d4a:	2203      	movs	r2, #3
 8011d4c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8011d50:	68fb      	ldr	r3, [r7, #12]
 8011d52:	687a      	ldr	r2, [r7, #4]
 8011d54:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8011d58:	68fb      	ldr	r3, [r7, #12]
 8011d5a:	687a      	ldr	r2, [r7, #4]
 8011d5c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	68ba      	ldr	r2, [r7, #8]
 8011d64:	2100      	movs	r1, #0
 8011d66:	68f8      	ldr	r0, [r7, #12]
 8011d68:	f000 fd40 	bl	80127ec <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011d6c:	2300      	movs	r3, #0
}
 8011d6e:	4618      	mov	r0, r3
 8011d70:	3710      	adds	r7, #16
 8011d72:	46bd      	mov	sp, r7
 8011d74:	bd80      	pop	{r7, pc}

08011d76 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8011d76:	b580      	push	{r7, lr}
 8011d78:	b084      	sub	sp, #16
 8011d7a:	af00      	add	r7, sp, #0
 8011d7c:	60f8      	str	r0, [r7, #12]
 8011d7e:	60b9      	str	r1, [r7, #8]
 8011d80:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	68ba      	ldr	r2, [r7, #8]
 8011d86:	2100      	movs	r1, #0
 8011d88:	68f8      	ldr	r0, [r7, #12]
 8011d8a:	f000 fd2f 	bl	80127ec <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011d8e:	2300      	movs	r3, #0
}
 8011d90:	4618      	mov	r0, r3
 8011d92:	3710      	adds	r7, #16
 8011d94:	46bd      	mov	sp, r7
 8011d96:	bd80      	pop	{r7, pc}

08011d98 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8011d98:	b580      	push	{r7, lr}
 8011d9a:	b082      	sub	sp, #8
 8011d9c:	af00      	add	r7, sp, #0
 8011d9e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	2204      	movs	r2, #4
 8011da4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8011da8:	2300      	movs	r3, #0
 8011daa:	2200      	movs	r2, #0
 8011dac:	2100      	movs	r1, #0
 8011dae:	6878      	ldr	r0, [r7, #4]
 8011db0:	f000 fcfb 	bl	80127aa <USBD_LL_Transmit>

  return USBD_OK;
 8011db4:	2300      	movs	r3, #0
}
 8011db6:	4618      	mov	r0, r3
 8011db8:	3708      	adds	r7, #8
 8011dba:	46bd      	mov	sp, r7
 8011dbc:	bd80      	pop	{r7, pc}

08011dbe <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8011dbe:	b580      	push	{r7, lr}
 8011dc0:	b082      	sub	sp, #8
 8011dc2:	af00      	add	r7, sp, #0
 8011dc4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	2205      	movs	r2, #5
 8011dca:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011dce:	2300      	movs	r3, #0
 8011dd0:	2200      	movs	r2, #0
 8011dd2:	2100      	movs	r1, #0
 8011dd4:	6878      	ldr	r0, [r7, #4]
 8011dd6:	f000 fd09 	bl	80127ec <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011dda:	2300      	movs	r3, #0
}
 8011ddc:	4618      	mov	r0, r3
 8011dde:	3708      	adds	r7, #8
 8011de0:	46bd      	mov	sp, r7
 8011de2:	bd80      	pop	{r7, pc}

08011de4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8011de4:	b580      	push	{r7, lr}
 8011de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8011de8:	2200      	movs	r2, #0
 8011dea:	4912      	ldr	r1, [pc, #72]	@ (8011e34 <MX_USB_DEVICE_Init+0x50>)
 8011dec:	4812      	ldr	r0, [pc, #72]	@ (8011e38 <MX_USB_DEVICE_Init+0x54>)
 8011dee:	f7fe fcf7 	bl	80107e0 <USBD_Init>
 8011df2:	4603      	mov	r3, r0
 8011df4:	2b00      	cmp	r3, #0
 8011df6:	d001      	beq.n	8011dfc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8011df8:	f7f3 fabe 	bl	8005378 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8011dfc:	490f      	ldr	r1, [pc, #60]	@ (8011e3c <MX_USB_DEVICE_Init+0x58>)
 8011dfe:	480e      	ldr	r0, [pc, #56]	@ (8011e38 <MX_USB_DEVICE_Init+0x54>)
 8011e00:	f7fe fd1e 	bl	8010840 <USBD_RegisterClass>
 8011e04:	4603      	mov	r3, r0
 8011e06:	2b00      	cmp	r3, #0
 8011e08:	d001      	beq.n	8011e0e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8011e0a:	f7f3 fab5 	bl	8005378 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8011e0e:	490c      	ldr	r1, [pc, #48]	@ (8011e40 <MX_USB_DEVICE_Init+0x5c>)
 8011e10:	4809      	ldr	r0, [pc, #36]	@ (8011e38 <MX_USB_DEVICE_Init+0x54>)
 8011e12:	f7fe fc15 	bl	8010640 <USBD_CDC_RegisterInterface>
 8011e16:	4603      	mov	r3, r0
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	d001      	beq.n	8011e20 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8011e1c:	f7f3 faac 	bl	8005378 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8011e20:	4805      	ldr	r0, [pc, #20]	@ (8011e38 <MX_USB_DEVICE_Init+0x54>)
 8011e22:	f7fe fd43 	bl	80108ac <USBD_Start>
 8011e26:	4603      	mov	r3, r0
 8011e28:	2b00      	cmp	r3, #0
 8011e2a:	d001      	beq.n	8011e30 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8011e2c:	f7f3 faa4 	bl	8005378 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8011e30:	bf00      	nop
 8011e32:	bd80      	pop	{r7, pc}
 8011e34:	200000c4 	.word	0x200000c4
 8011e38:	20001730 	.word	0x20001730
 8011e3c:	20000028 	.word	0x20000028
 8011e40:	200000b0 	.word	0x200000b0

08011e44 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8011e44:	b580      	push	{r7, lr}
 8011e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8011e48:	2200      	movs	r2, #0
 8011e4a:	4905      	ldr	r1, [pc, #20]	@ (8011e60 <CDC_Init_FS+0x1c>)
 8011e4c:	4805      	ldr	r0, [pc, #20]	@ (8011e64 <CDC_Init_FS+0x20>)
 8011e4e:	f7fe fc11 	bl	8010674 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8011e52:	4905      	ldr	r1, [pc, #20]	@ (8011e68 <CDC_Init_FS+0x24>)
 8011e54:	4803      	ldr	r0, [pc, #12]	@ (8011e64 <CDC_Init_FS+0x20>)
 8011e56:	f7fe fc2f 	bl	80106b8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8011e5a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8011e5c:	4618      	mov	r0, r3
 8011e5e:	bd80      	pop	{r7, pc}
 8011e60:	20001c0c 	.word	0x20001c0c
 8011e64:	20001730 	.word	0x20001730
 8011e68:	20001a0c 	.word	0x20001a0c

08011e6c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8011e6c:	b480      	push	{r7}
 8011e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8011e70:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8011e72:	4618      	mov	r0, r3
 8011e74:	46bd      	mov	sp, r7
 8011e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e7a:	4770      	bx	lr

08011e7c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8011e7c:	b480      	push	{r7}
 8011e7e:	b083      	sub	sp, #12
 8011e80:	af00      	add	r7, sp, #0
 8011e82:	4603      	mov	r3, r0
 8011e84:	6039      	str	r1, [r7, #0]
 8011e86:	71fb      	strb	r3, [r7, #7]
 8011e88:	4613      	mov	r3, r2
 8011e8a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8011e8c:	79fb      	ldrb	r3, [r7, #7]
 8011e8e:	2b23      	cmp	r3, #35	@ 0x23
 8011e90:	f200 8097 	bhi.w	8011fc2 <CDC_Control_FS+0x146>
 8011e94:	a201      	add	r2, pc, #4	@ (adr r2, 8011e9c <CDC_Control_FS+0x20>)
 8011e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e9a:	bf00      	nop
 8011e9c:	08011fc3 	.word	0x08011fc3
 8011ea0:	08011fc3 	.word	0x08011fc3
 8011ea4:	08011fc3 	.word	0x08011fc3
 8011ea8:	08011fc3 	.word	0x08011fc3
 8011eac:	08011fc3 	.word	0x08011fc3
 8011eb0:	08011fc3 	.word	0x08011fc3
 8011eb4:	08011fc3 	.word	0x08011fc3
 8011eb8:	08011fc3 	.word	0x08011fc3
 8011ebc:	08011fc3 	.word	0x08011fc3
 8011ec0:	08011fc3 	.word	0x08011fc3
 8011ec4:	08011fc3 	.word	0x08011fc3
 8011ec8:	08011fc3 	.word	0x08011fc3
 8011ecc:	08011fc3 	.word	0x08011fc3
 8011ed0:	08011fc3 	.word	0x08011fc3
 8011ed4:	08011fc3 	.word	0x08011fc3
 8011ed8:	08011fc3 	.word	0x08011fc3
 8011edc:	08011fc3 	.word	0x08011fc3
 8011ee0:	08011fc3 	.word	0x08011fc3
 8011ee4:	08011fc3 	.word	0x08011fc3
 8011ee8:	08011fc3 	.word	0x08011fc3
 8011eec:	08011fc3 	.word	0x08011fc3
 8011ef0:	08011fc3 	.word	0x08011fc3
 8011ef4:	08011fc3 	.word	0x08011fc3
 8011ef8:	08011fc3 	.word	0x08011fc3
 8011efc:	08011fc3 	.word	0x08011fc3
 8011f00:	08011fc3 	.word	0x08011fc3
 8011f04:	08011fc3 	.word	0x08011fc3
 8011f08:	08011fc3 	.word	0x08011fc3
 8011f0c:	08011fc3 	.word	0x08011fc3
 8011f10:	08011fc3 	.word	0x08011fc3
 8011f14:	08011fc3 	.word	0x08011fc3
 8011f18:	08011fc3 	.word	0x08011fc3
 8011f1c:	08011f2d 	.word	0x08011f2d
 8011f20:	08011f6f 	.word	0x08011f6f
 8011f24:	08011fc3 	.word	0x08011fc3
 8011f28:	08011fc3 	.word	0x08011fc3
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	LineCoding.bitrate = (uint32_t)(pbuf[0]) | (pbuf[1] << 8) | (pbuf[2] << 16) | (pbuf[3] << 24);
 8011f2c:	683b      	ldr	r3, [r7, #0]
 8011f2e:	781b      	ldrb	r3, [r3, #0]
 8011f30:	461a      	mov	r2, r3
 8011f32:	683b      	ldr	r3, [r7, #0]
 8011f34:	3301      	adds	r3, #1
 8011f36:	781b      	ldrb	r3, [r3, #0]
 8011f38:	021b      	lsls	r3, r3, #8
 8011f3a:	431a      	orrs	r2, r3
 8011f3c:	683b      	ldr	r3, [r7, #0]
 8011f3e:	3302      	adds	r3, #2
 8011f40:	781b      	ldrb	r3, [r3, #0]
 8011f42:	041b      	lsls	r3, r3, #16
 8011f44:	431a      	orrs	r2, r3
 8011f46:	683b      	ldr	r3, [r7, #0]
 8011f48:	3303      	adds	r3, #3
 8011f4a:	781b      	ldrb	r3, [r3, #0]
 8011f4c:	061b      	lsls	r3, r3, #24
 8011f4e:	4313      	orrs	r3, r2
 8011f50:	4a20      	ldr	r2, [pc, #128]	@ (8011fd4 <CDC_Control_FS+0x158>)
 8011f52:	6013      	str	r3, [r2, #0]
		LineCoding.format = pbuf[4];
 8011f54:	683b      	ldr	r3, [r7, #0]
 8011f56:	791a      	ldrb	r2, [r3, #4]
 8011f58:	4b1e      	ldr	r3, [pc, #120]	@ (8011fd4 <CDC_Control_FS+0x158>)
 8011f5a:	711a      	strb	r2, [r3, #4]
		LineCoding.paritytype = pbuf[5];
 8011f5c:	683b      	ldr	r3, [r7, #0]
 8011f5e:	795a      	ldrb	r2, [r3, #5]
 8011f60:	4b1c      	ldr	r3, [pc, #112]	@ (8011fd4 <CDC_Control_FS+0x158>)
 8011f62:	715a      	strb	r2, [r3, #5]
		LineCoding.datatype = pbuf[6];
 8011f64:	683b      	ldr	r3, [r7, #0]
 8011f66:	799a      	ldrb	r2, [r3, #6]
 8011f68:	4b1a      	ldr	r3, [pc, #104]	@ (8011fd4 <CDC_Control_FS+0x158>)
 8011f6a:	719a      	strb	r2, [r3, #6]
    break;
 8011f6c:	e02a      	b.n	8011fc4 <CDC_Control_FS+0x148>

    case CDC_GET_LINE_CODING:
    	pbuf[0] = (uint8_t)(LineCoding.bitrate);
 8011f6e:	4b19      	ldr	r3, [pc, #100]	@ (8011fd4 <CDC_Control_FS+0x158>)
 8011f70:	681b      	ldr	r3, [r3, #0]
 8011f72:	b2da      	uxtb	r2, r3
 8011f74:	683b      	ldr	r3, [r7, #0]
 8011f76:	701a      	strb	r2, [r3, #0]
    	pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 8011f78:	4b16      	ldr	r3, [pc, #88]	@ (8011fd4 <CDC_Control_FS+0x158>)
 8011f7a:	681b      	ldr	r3, [r3, #0]
 8011f7c:	0a1a      	lsrs	r2, r3, #8
 8011f7e:	683b      	ldr	r3, [r7, #0]
 8011f80:	3301      	adds	r3, #1
 8011f82:	b2d2      	uxtb	r2, r2
 8011f84:	701a      	strb	r2, [r3, #0]
    	pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 8011f86:	4b13      	ldr	r3, [pc, #76]	@ (8011fd4 <CDC_Control_FS+0x158>)
 8011f88:	681b      	ldr	r3, [r3, #0]
 8011f8a:	0c1a      	lsrs	r2, r3, #16
 8011f8c:	683b      	ldr	r3, [r7, #0]
 8011f8e:	3302      	adds	r3, #2
 8011f90:	b2d2      	uxtb	r2, r2
 8011f92:	701a      	strb	r2, [r3, #0]
    	pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 8011f94:	4b0f      	ldr	r3, [pc, #60]	@ (8011fd4 <CDC_Control_FS+0x158>)
 8011f96:	681b      	ldr	r3, [r3, #0]
 8011f98:	0e1a      	lsrs	r2, r3, #24
 8011f9a:	683b      	ldr	r3, [r7, #0]
 8011f9c:	3303      	adds	r3, #3
 8011f9e:	b2d2      	uxtb	r2, r2
 8011fa0:	701a      	strb	r2, [r3, #0]
    	pbuf[4] = LineCoding.format;
 8011fa2:	683b      	ldr	r3, [r7, #0]
 8011fa4:	3304      	adds	r3, #4
 8011fa6:	4a0b      	ldr	r2, [pc, #44]	@ (8011fd4 <CDC_Control_FS+0x158>)
 8011fa8:	7912      	ldrb	r2, [r2, #4]
 8011faa:	701a      	strb	r2, [r3, #0]
    	pbuf[5] = LineCoding.paritytype;
 8011fac:	683b      	ldr	r3, [r7, #0]
 8011fae:	3305      	adds	r3, #5
 8011fb0:	4a08      	ldr	r2, [pc, #32]	@ (8011fd4 <CDC_Control_FS+0x158>)
 8011fb2:	7952      	ldrb	r2, [r2, #5]
 8011fb4:	701a      	strb	r2, [r3, #0]
    	pbuf[6] = LineCoding.datatype;
 8011fb6:	683b      	ldr	r3, [r7, #0]
 8011fb8:	3306      	adds	r3, #6
 8011fba:	4a06      	ldr	r2, [pc, #24]	@ (8011fd4 <CDC_Control_FS+0x158>)
 8011fbc:	7992      	ldrb	r2, [r2, #6]
 8011fbe:	701a      	strb	r2, [r3, #0]
	break;
 8011fc0:	e000      	b.n	8011fc4 <CDC_Control_FS+0x148>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8011fc2:	bf00      	nop
  }

  return (USBD_OK);
 8011fc4:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8011fc6:	4618      	mov	r0, r3
 8011fc8:	370c      	adds	r7, #12
 8011fca:	46bd      	mov	sp, r7
 8011fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fd0:	4770      	bx	lr
 8011fd2:	bf00      	nop
 8011fd4:	200000a8 	.word	0x200000a8

08011fd8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8011fd8:	b580      	push	{r7, lr}
 8011fda:	b082      	sub	sp, #8
 8011fdc:	af00      	add	r7, sp, #0
 8011fde:	6078      	str	r0, [r7, #4]
 8011fe0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	if(dataOnRx != NULL){
 8011fe2:	4b0b      	ldr	r3, [pc, #44]	@ (8012010 <CDC_Receive_FS+0x38>)
 8011fe4:	681b      	ldr	r3, [r3, #0]
 8011fe6:	2b00      	cmp	r3, #0
 8011fe8:	d006      	beq.n	8011ff8 <CDC_Receive_FS+0x20>
		dataOnRx(Buf, *Len);
 8011fea:	4b09      	ldr	r3, [pc, #36]	@ (8012010 <CDC_Receive_FS+0x38>)
 8011fec:	681b      	ldr	r3, [r3, #0]
 8011fee:	683a      	ldr	r2, [r7, #0]
 8011ff0:	6812      	ldr	r2, [r2, #0]
 8011ff2:	4611      	mov	r1, r2
 8011ff4:	6878      	ldr	r0, [r7, #4]
 8011ff6:	4798      	blx	r3
	}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8011ff8:	6879      	ldr	r1, [r7, #4]
 8011ffa:	4806      	ldr	r0, [pc, #24]	@ (8012014 <CDC_Receive_FS+0x3c>)
 8011ffc:	f7fe fb5c 	bl	80106b8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8012000:	4804      	ldr	r0, [pc, #16]	@ (8012014 <CDC_Receive_FS+0x3c>)
 8012002:	f7fe fbb7 	bl	8010774 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8012006:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8012008:	4618      	mov	r0, r3
 801200a:	3708      	adds	r7, #8
 801200c:	46bd      	mov	sp, r7
 801200e:	bd80      	pop	{r7, pc}
 8012010:	20001e0c 	.word	0x20001e0c
 8012014:	20001730 	.word	0x20001730

08012018 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8012018:	b580      	push	{r7, lr}
 801201a:	b084      	sub	sp, #16
 801201c:	af00      	add	r7, sp, #0
 801201e:	6078      	str	r0, [r7, #4]
 8012020:	460b      	mov	r3, r1
 8012022:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8012024:	2300      	movs	r3, #0
 8012026:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8012028:	4b0d      	ldr	r3, [pc, #52]	@ (8012060 <CDC_Transmit_FS+0x48>)
 801202a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 801202e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8012030:	68bb      	ldr	r3, [r7, #8]
 8012032:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8012036:	2b00      	cmp	r3, #0
 8012038:	d001      	beq.n	801203e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 801203a:	2301      	movs	r3, #1
 801203c:	e00b      	b.n	8012056 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801203e:	887b      	ldrh	r3, [r7, #2]
 8012040:	461a      	mov	r2, r3
 8012042:	6879      	ldr	r1, [r7, #4]
 8012044:	4806      	ldr	r0, [pc, #24]	@ (8012060 <CDC_Transmit_FS+0x48>)
 8012046:	f7fe fb15 	bl	8010674 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801204a:	4805      	ldr	r0, [pc, #20]	@ (8012060 <CDC_Transmit_FS+0x48>)
 801204c:	f7fe fb52 	bl	80106f4 <USBD_CDC_TransmitPacket>
 8012050:	4603      	mov	r3, r0
 8012052:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8012054:	7bfb      	ldrb	r3, [r7, #15]
}
 8012056:	4618      	mov	r0, r3
 8012058:	3710      	adds	r7, #16
 801205a:	46bd      	mov	sp, r7
 801205c:	bd80      	pop	{r7, pc}
 801205e:	bf00      	nop
 8012060:	20001730 	.word	0x20001730

08012064 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8012064:	b480      	push	{r7}
 8012066:	b087      	sub	sp, #28
 8012068:	af00      	add	r7, sp, #0
 801206a:	60f8      	str	r0, [r7, #12]
 801206c:	60b9      	str	r1, [r7, #8]
 801206e:	4613      	mov	r3, r2
 8012070:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8012072:	2300      	movs	r3, #0
 8012074:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8012076:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801207a:	4618      	mov	r0, r3
 801207c:	371c      	adds	r7, #28
 801207e:	46bd      	mov	sp, r7
 8012080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012084:	4770      	bx	lr
	...

08012088 <CDC_Attach_Rx>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void CDC_Attach_Rx(void (*RxData)(uint8_t* buf, uint32_t len)){
 8012088:	b480      	push	{r7}
 801208a:	b083      	sub	sp, #12
 801208c:	af00      	add	r7, sp, #0
 801208e:	6078      	str	r0, [r7, #4]
	dataOnRx = RxData;
 8012090:	4a04      	ldr	r2, [pc, #16]	@ (80120a4 <CDC_Attach_Rx+0x1c>)
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	6013      	str	r3, [r2, #0]
}
 8012096:	bf00      	nop
 8012098:	370c      	adds	r7, #12
 801209a:	46bd      	mov	sp, r7
 801209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120a0:	4770      	bx	lr
 80120a2:	bf00      	nop
 80120a4:	20001e0c 	.word	0x20001e0c

080120a8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80120a8:	b480      	push	{r7}
 80120aa:	b083      	sub	sp, #12
 80120ac:	af00      	add	r7, sp, #0
 80120ae:	4603      	mov	r3, r0
 80120b0:	6039      	str	r1, [r7, #0]
 80120b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80120b4:	683b      	ldr	r3, [r7, #0]
 80120b6:	2212      	movs	r2, #18
 80120b8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80120ba:	4b03      	ldr	r3, [pc, #12]	@ (80120c8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80120bc:	4618      	mov	r0, r3
 80120be:	370c      	adds	r7, #12
 80120c0:	46bd      	mov	sp, r7
 80120c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120c6:	4770      	bx	lr
 80120c8:	200000e0 	.word	0x200000e0

080120cc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80120cc:	b480      	push	{r7}
 80120ce:	b083      	sub	sp, #12
 80120d0:	af00      	add	r7, sp, #0
 80120d2:	4603      	mov	r3, r0
 80120d4:	6039      	str	r1, [r7, #0]
 80120d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80120d8:	683b      	ldr	r3, [r7, #0]
 80120da:	2204      	movs	r2, #4
 80120dc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80120de:	4b03      	ldr	r3, [pc, #12]	@ (80120ec <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80120e0:	4618      	mov	r0, r3
 80120e2:	370c      	adds	r7, #12
 80120e4:	46bd      	mov	sp, r7
 80120e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120ea:	4770      	bx	lr
 80120ec:	200000f4 	.word	0x200000f4

080120f0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80120f0:	b580      	push	{r7, lr}
 80120f2:	b082      	sub	sp, #8
 80120f4:	af00      	add	r7, sp, #0
 80120f6:	4603      	mov	r3, r0
 80120f8:	6039      	str	r1, [r7, #0]
 80120fa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80120fc:	79fb      	ldrb	r3, [r7, #7]
 80120fe:	2b00      	cmp	r3, #0
 8012100:	d105      	bne.n	801210e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8012102:	683a      	ldr	r2, [r7, #0]
 8012104:	4907      	ldr	r1, [pc, #28]	@ (8012124 <USBD_FS_ProductStrDescriptor+0x34>)
 8012106:	4808      	ldr	r0, [pc, #32]	@ (8012128 <USBD_FS_ProductStrDescriptor+0x38>)
 8012108:	f7ff fd80 	bl	8011c0c <USBD_GetString>
 801210c:	e004      	b.n	8012118 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801210e:	683a      	ldr	r2, [r7, #0]
 8012110:	4904      	ldr	r1, [pc, #16]	@ (8012124 <USBD_FS_ProductStrDescriptor+0x34>)
 8012112:	4805      	ldr	r0, [pc, #20]	@ (8012128 <USBD_FS_ProductStrDescriptor+0x38>)
 8012114:	f7ff fd7a 	bl	8011c0c <USBD_GetString>
  }
  return USBD_StrDesc;
 8012118:	4b02      	ldr	r3, [pc, #8]	@ (8012124 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801211a:	4618      	mov	r0, r3
 801211c:	3708      	adds	r7, #8
 801211e:	46bd      	mov	sp, r7
 8012120:	bd80      	pop	{r7, pc}
 8012122:	bf00      	nop
 8012124:	20001e10 	.word	0x20001e10
 8012128:	08013788 	.word	0x08013788

0801212c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801212c:	b580      	push	{r7, lr}
 801212e:	b082      	sub	sp, #8
 8012130:	af00      	add	r7, sp, #0
 8012132:	4603      	mov	r3, r0
 8012134:	6039      	str	r1, [r7, #0]
 8012136:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8012138:	683a      	ldr	r2, [r7, #0]
 801213a:	4904      	ldr	r1, [pc, #16]	@ (801214c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801213c:	4804      	ldr	r0, [pc, #16]	@ (8012150 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801213e:	f7ff fd65 	bl	8011c0c <USBD_GetString>
  return USBD_StrDesc;
 8012142:	4b02      	ldr	r3, [pc, #8]	@ (801214c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8012144:	4618      	mov	r0, r3
 8012146:	3708      	adds	r7, #8
 8012148:	46bd      	mov	sp, r7
 801214a:	bd80      	pop	{r7, pc}
 801214c:	20001e10 	.word	0x20001e10
 8012150:	080137a0 	.word	0x080137a0

08012154 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012154:	b580      	push	{r7, lr}
 8012156:	b082      	sub	sp, #8
 8012158:	af00      	add	r7, sp, #0
 801215a:	4603      	mov	r3, r0
 801215c:	6039      	str	r1, [r7, #0]
 801215e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8012160:	683b      	ldr	r3, [r7, #0]
 8012162:	221a      	movs	r2, #26
 8012164:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8012166:	f000 f843 	bl	80121f0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801216a:	4b02      	ldr	r3, [pc, #8]	@ (8012174 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801216c:	4618      	mov	r0, r3
 801216e:	3708      	adds	r7, #8
 8012170:	46bd      	mov	sp, r7
 8012172:	bd80      	pop	{r7, pc}
 8012174:	200000f8 	.word	0x200000f8

08012178 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012178:	b580      	push	{r7, lr}
 801217a:	b082      	sub	sp, #8
 801217c:	af00      	add	r7, sp, #0
 801217e:	4603      	mov	r3, r0
 8012180:	6039      	str	r1, [r7, #0]
 8012182:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8012184:	79fb      	ldrb	r3, [r7, #7]
 8012186:	2b00      	cmp	r3, #0
 8012188:	d105      	bne.n	8012196 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801218a:	683a      	ldr	r2, [r7, #0]
 801218c:	4907      	ldr	r1, [pc, #28]	@ (80121ac <USBD_FS_ConfigStrDescriptor+0x34>)
 801218e:	4808      	ldr	r0, [pc, #32]	@ (80121b0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8012190:	f7ff fd3c 	bl	8011c0c <USBD_GetString>
 8012194:	e004      	b.n	80121a0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8012196:	683a      	ldr	r2, [r7, #0]
 8012198:	4904      	ldr	r1, [pc, #16]	@ (80121ac <USBD_FS_ConfigStrDescriptor+0x34>)
 801219a:	4805      	ldr	r0, [pc, #20]	@ (80121b0 <USBD_FS_ConfigStrDescriptor+0x38>)
 801219c:	f7ff fd36 	bl	8011c0c <USBD_GetString>
  }
  return USBD_StrDesc;
 80121a0:	4b02      	ldr	r3, [pc, #8]	@ (80121ac <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80121a2:	4618      	mov	r0, r3
 80121a4:	3708      	adds	r7, #8
 80121a6:	46bd      	mov	sp, r7
 80121a8:	bd80      	pop	{r7, pc}
 80121aa:	bf00      	nop
 80121ac:	20001e10 	.word	0x20001e10
 80121b0:	080137b4 	.word	0x080137b4

080121b4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80121b4:	b580      	push	{r7, lr}
 80121b6:	b082      	sub	sp, #8
 80121b8:	af00      	add	r7, sp, #0
 80121ba:	4603      	mov	r3, r0
 80121bc:	6039      	str	r1, [r7, #0]
 80121be:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80121c0:	79fb      	ldrb	r3, [r7, #7]
 80121c2:	2b00      	cmp	r3, #0
 80121c4:	d105      	bne.n	80121d2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80121c6:	683a      	ldr	r2, [r7, #0]
 80121c8:	4907      	ldr	r1, [pc, #28]	@ (80121e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80121ca:	4808      	ldr	r0, [pc, #32]	@ (80121ec <USBD_FS_InterfaceStrDescriptor+0x38>)
 80121cc:	f7ff fd1e 	bl	8011c0c <USBD_GetString>
 80121d0:	e004      	b.n	80121dc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80121d2:	683a      	ldr	r2, [r7, #0]
 80121d4:	4904      	ldr	r1, [pc, #16]	@ (80121e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80121d6:	4805      	ldr	r0, [pc, #20]	@ (80121ec <USBD_FS_InterfaceStrDescriptor+0x38>)
 80121d8:	f7ff fd18 	bl	8011c0c <USBD_GetString>
  }
  return USBD_StrDesc;
 80121dc:	4b02      	ldr	r3, [pc, #8]	@ (80121e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80121de:	4618      	mov	r0, r3
 80121e0:	3708      	adds	r7, #8
 80121e2:	46bd      	mov	sp, r7
 80121e4:	bd80      	pop	{r7, pc}
 80121e6:	bf00      	nop
 80121e8:	20001e10 	.word	0x20001e10
 80121ec:	080137c0 	.word	0x080137c0

080121f0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80121f0:	b580      	push	{r7, lr}
 80121f2:	b084      	sub	sp, #16
 80121f4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80121f6:	4b0f      	ldr	r3, [pc, #60]	@ (8012234 <Get_SerialNum+0x44>)
 80121f8:	681b      	ldr	r3, [r3, #0]
 80121fa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80121fc:	4b0e      	ldr	r3, [pc, #56]	@ (8012238 <Get_SerialNum+0x48>)
 80121fe:	681b      	ldr	r3, [r3, #0]
 8012200:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8012202:	4b0e      	ldr	r3, [pc, #56]	@ (801223c <Get_SerialNum+0x4c>)
 8012204:	681b      	ldr	r3, [r3, #0]
 8012206:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8012208:	68fa      	ldr	r2, [r7, #12]
 801220a:	687b      	ldr	r3, [r7, #4]
 801220c:	4413      	add	r3, r2
 801220e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8012210:	68fb      	ldr	r3, [r7, #12]
 8012212:	2b00      	cmp	r3, #0
 8012214:	d009      	beq.n	801222a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8012216:	2208      	movs	r2, #8
 8012218:	4909      	ldr	r1, [pc, #36]	@ (8012240 <Get_SerialNum+0x50>)
 801221a:	68f8      	ldr	r0, [r7, #12]
 801221c:	f000 f814 	bl	8012248 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8012220:	2204      	movs	r2, #4
 8012222:	4908      	ldr	r1, [pc, #32]	@ (8012244 <Get_SerialNum+0x54>)
 8012224:	68b8      	ldr	r0, [r7, #8]
 8012226:	f000 f80f 	bl	8012248 <IntToUnicode>
  }
}
 801222a:	bf00      	nop
 801222c:	3710      	adds	r7, #16
 801222e:	46bd      	mov	sp, r7
 8012230:	bd80      	pop	{r7, pc}
 8012232:	bf00      	nop
 8012234:	1fff7a10 	.word	0x1fff7a10
 8012238:	1fff7a14 	.word	0x1fff7a14
 801223c:	1fff7a18 	.word	0x1fff7a18
 8012240:	200000fa 	.word	0x200000fa
 8012244:	2000010a 	.word	0x2000010a

08012248 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8012248:	b480      	push	{r7}
 801224a:	b087      	sub	sp, #28
 801224c:	af00      	add	r7, sp, #0
 801224e:	60f8      	str	r0, [r7, #12]
 8012250:	60b9      	str	r1, [r7, #8]
 8012252:	4613      	mov	r3, r2
 8012254:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8012256:	2300      	movs	r3, #0
 8012258:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801225a:	2300      	movs	r3, #0
 801225c:	75fb      	strb	r3, [r7, #23]
 801225e:	e027      	b.n	80122b0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8012260:	68fb      	ldr	r3, [r7, #12]
 8012262:	0f1b      	lsrs	r3, r3, #28
 8012264:	2b09      	cmp	r3, #9
 8012266:	d80b      	bhi.n	8012280 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8012268:	68fb      	ldr	r3, [r7, #12]
 801226a:	0f1b      	lsrs	r3, r3, #28
 801226c:	b2da      	uxtb	r2, r3
 801226e:	7dfb      	ldrb	r3, [r7, #23]
 8012270:	005b      	lsls	r3, r3, #1
 8012272:	4619      	mov	r1, r3
 8012274:	68bb      	ldr	r3, [r7, #8]
 8012276:	440b      	add	r3, r1
 8012278:	3230      	adds	r2, #48	@ 0x30
 801227a:	b2d2      	uxtb	r2, r2
 801227c:	701a      	strb	r2, [r3, #0]
 801227e:	e00a      	b.n	8012296 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8012280:	68fb      	ldr	r3, [r7, #12]
 8012282:	0f1b      	lsrs	r3, r3, #28
 8012284:	b2da      	uxtb	r2, r3
 8012286:	7dfb      	ldrb	r3, [r7, #23]
 8012288:	005b      	lsls	r3, r3, #1
 801228a:	4619      	mov	r1, r3
 801228c:	68bb      	ldr	r3, [r7, #8]
 801228e:	440b      	add	r3, r1
 8012290:	3237      	adds	r2, #55	@ 0x37
 8012292:	b2d2      	uxtb	r2, r2
 8012294:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8012296:	68fb      	ldr	r3, [r7, #12]
 8012298:	011b      	lsls	r3, r3, #4
 801229a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801229c:	7dfb      	ldrb	r3, [r7, #23]
 801229e:	005b      	lsls	r3, r3, #1
 80122a0:	3301      	adds	r3, #1
 80122a2:	68ba      	ldr	r2, [r7, #8]
 80122a4:	4413      	add	r3, r2
 80122a6:	2200      	movs	r2, #0
 80122a8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80122aa:	7dfb      	ldrb	r3, [r7, #23]
 80122ac:	3301      	adds	r3, #1
 80122ae:	75fb      	strb	r3, [r7, #23]
 80122b0:	7dfa      	ldrb	r2, [r7, #23]
 80122b2:	79fb      	ldrb	r3, [r7, #7]
 80122b4:	429a      	cmp	r2, r3
 80122b6:	d3d3      	bcc.n	8012260 <IntToUnicode+0x18>
  }
}
 80122b8:	bf00      	nop
 80122ba:	bf00      	nop
 80122bc:	371c      	adds	r7, #28
 80122be:	46bd      	mov	sp, r7
 80122c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122c4:	4770      	bx	lr
	...

080122c8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80122c8:	b580      	push	{r7, lr}
 80122ca:	b08a      	sub	sp, #40	@ 0x28
 80122cc:	af00      	add	r7, sp, #0
 80122ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80122d0:	f107 0314 	add.w	r3, r7, #20
 80122d4:	2200      	movs	r2, #0
 80122d6:	601a      	str	r2, [r3, #0]
 80122d8:	605a      	str	r2, [r3, #4]
 80122da:	609a      	str	r2, [r3, #8]
 80122dc:	60da      	str	r2, [r3, #12]
 80122de:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	681b      	ldr	r3, [r3, #0]
 80122e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80122e8:	d13a      	bne.n	8012360 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80122ea:	2300      	movs	r3, #0
 80122ec:	613b      	str	r3, [r7, #16]
 80122ee:	4b1e      	ldr	r3, [pc, #120]	@ (8012368 <HAL_PCD_MspInit+0xa0>)
 80122f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80122f2:	4a1d      	ldr	r2, [pc, #116]	@ (8012368 <HAL_PCD_MspInit+0xa0>)
 80122f4:	f043 0301 	orr.w	r3, r3, #1
 80122f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80122fa:	4b1b      	ldr	r3, [pc, #108]	@ (8012368 <HAL_PCD_MspInit+0xa0>)
 80122fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80122fe:	f003 0301 	and.w	r3, r3, #1
 8012302:	613b      	str	r3, [r7, #16]
 8012304:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8012306:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 801230a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801230c:	2302      	movs	r3, #2
 801230e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012310:	2300      	movs	r3, #0
 8012312:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012314:	2303      	movs	r3, #3
 8012316:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8012318:	230a      	movs	r3, #10
 801231a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801231c:	f107 0314 	add.w	r3, r7, #20
 8012320:	4619      	mov	r1, r3
 8012322:	4812      	ldr	r0, [pc, #72]	@ (801236c <HAL_PCD_MspInit+0xa4>)
 8012324:	f7f4 fe86 	bl	8007034 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8012328:	4b0f      	ldr	r3, [pc, #60]	@ (8012368 <HAL_PCD_MspInit+0xa0>)
 801232a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801232c:	4a0e      	ldr	r2, [pc, #56]	@ (8012368 <HAL_PCD_MspInit+0xa0>)
 801232e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012332:	6353      	str	r3, [r2, #52]	@ 0x34
 8012334:	2300      	movs	r3, #0
 8012336:	60fb      	str	r3, [r7, #12]
 8012338:	4b0b      	ldr	r3, [pc, #44]	@ (8012368 <HAL_PCD_MspInit+0xa0>)
 801233a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801233c:	4a0a      	ldr	r2, [pc, #40]	@ (8012368 <HAL_PCD_MspInit+0xa0>)
 801233e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8012342:	6453      	str	r3, [r2, #68]	@ 0x44
 8012344:	4b08      	ldr	r3, [pc, #32]	@ (8012368 <HAL_PCD_MspInit+0xa0>)
 8012346:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012348:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801234c:	60fb      	str	r3, [r7, #12]
 801234e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8012350:	2200      	movs	r2, #0
 8012352:	2100      	movs	r1, #0
 8012354:	2043      	movs	r0, #67	@ 0x43
 8012356:	f7f4 fa1a 	bl	800678e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801235a:	2043      	movs	r0, #67	@ 0x43
 801235c:	f7f4 fa33 	bl	80067c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8012360:	bf00      	nop
 8012362:	3728      	adds	r7, #40	@ 0x28
 8012364:	46bd      	mov	sp, r7
 8012366:	bd80      	pop	{r7, pc}
 8012368:	40023800 	.word	0x40023800
 801236c:	40020000 	.word	0x40020000

08012370 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012370:	b580      	push	{r7, lr}
 8012372:	b082      	sub	sp, #8
 8012374:	af00      	add	r7, sp, #0
 8012376:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8012384:	4619      	mov	r1, r3
 8012386:	4610      	mov	r0, r2
 8012388:	f7fe fadd 	bl	8010946 <USBD_LL_SetupStage>
}
 801238c:	bf00      	nop
 801238e:	3708      	adds	r7, #8
 8012390:	46bd      	mov	sp, r7
 8012392:	bd80      	pop	{r7, pc}

08012394 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012394:	b580      	push	{r7, lr}
 8012396:	b082      	sub	sp, #8
 8012398:	af00      	add	r7, sp, #0
 801239a:	6078      	str	r0, [r7, #4]
 801239c:	460b      	mov	r3, r1
 801239e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80123a6:	78fa      	ldrb	r2, [r7, #3]
 80123a8:	6879      	ldr	r1, [r7, #4]
 80123aa:	4613      	mov	r3, r2
 80123ac:	00db      	lsls	r3, r3, #3
 80123ae:	4413      	add	r3, r2
 80123b0:	009b      	lsls	r3, r3, #2
 80123b2:	440b      	add	r3, r1
 80123b4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80123b8:	681a      	ldr	r2, [r3, #0]
 80123ba:	78fb      	ldrb	r3, [r7, #3]
 80123bc:	4619      	mov	r1, r3
 80123be:	f7fe fb17 	bl	80109f0 <USBD_LL_DataOutStage>
}
 80123c2:	bf00      	nop
 80123c4:	3708      	adds	r7, #8
 80123c6:	46bd      	mov	sp, r7
 80123c8:	bd80      	pop	{r7, pc}

080123ca <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80123ca:	b580      	push	{r7, lr}
 80123cc:	b082      	sub	sp, #8
 80123ce:	af00      	add	r7, sp, #0
 80123d0:	6078      	str	r0, [r7, #4]
 80123d2:	460b      	mov	r3, r1
 80123d4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80123dc:	78fa      	ldrb	r2, [r7, #3]
 80123de:	6879      	ldr	r1, [r7, #4]
 80123e0:	4613      	mov	r3, r2
 80123e2:	00db      	lsls	r3, r3, #3
 80123e4:	4413      	add	r3, r2
 80123e6:	009b      	lsls	r3, r3, #2
 80123e8:	440b      	add	r3, r1
 80123ea:	3320      	adds	r3, #32
 80123ec:	681a      	ldr	r2, [r3, #0]
 80123ee:	78fb      	ldrb	r3, [r7, #3]
 80123f0:	4619      	mov	r1, r3
 80123f2:	f7fe fbb0 	bl	8010b56 <USBD_LL_DataInStage>
}
 80123f6:	bf00      	nop
 80123f8:	3708      	adds	r7, #8
 80123fa:	46bd      	mov	sp, r7
 80123fc:	bd80      	pop	{r7, pc}

080123fe <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80123fe:	b580      	push	{r7, lr}
 8012400:	b082      	sub	sp, #8
 8012402:	af00      	add	r7, sp, #0
 8012404:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801240c:	4618      	mov	r0, r3
 801240e:	f7fe fcea 	bl	8010de6 <USBD_LL_SOF>
}
 8012412:	bf00      	nop
 8012414:	3708      	adds	r7, #8
 8012416:	46bd      	mov	sp, r7
 8012418:	bd80      	pop	{r7, pc}

0801241a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801241a:	b580      	push	{r7, lr}
 801241c:	b084      	sub	sp, #16
 801241e:	af00      	add	r7, sp, #0
 8012420:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8012422:	2301      	movs	r3, #1
 8012424:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	79db      	ldrb	r3, [r3, #7]
 801242a:	2b02      	cmp	r3, #2
 801242c:	d001      	beq.n	8012432 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 801242e:	f7f2 ffa3 	bl	8005378 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8012438:	7bfa      	ldrb	r2, [r7, #15]
 801243a:	4611      	mov	r1, r2
 801243c:	4618      	mov	r0, r3
 801243e:	f7fe fc8e 	bl	8010d5e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8012448:	4618      	mov	r0, r3
 801244a:	f7fe fc36 	bl	8010cba <USBD_LL_Reset>
}
 801244e:	bf00      	nop
 8012450:	3710      	adds	r7, #16
 8012452:	46bd      	mov	sp, r7
 8012454:	bd80      	pop	{r7, pc}
	...

08012458 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012458:	b580      	push	{r7, lr}
 801245a:	b082      	sub	sp, #8
 801245c:	af00      	add	r7, sp, #0
 801245e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8012466:	4618      	mov	r0, r3
 8012468:	f7fe fc89 	bl	8010d7e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	681b      	ldr	r3, [r3, #0]
 8012470:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8012474:	681b      	ldr	r3, [r3, #0]
 8012476:	687a      	ldr	r2, [r7, #4]
 8012478:	6812      	ldr	r2, [r2, #0]
 801247a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 801247e:	f043 0301 	orr.w	r3, r3, #1
 8012482:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	7adb      	ldrb	r3, [r3, #11]
 8012488:	2b00      	cmp	r3, #0
 801248a:	d005      	beq.n	8012498 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801248c:	4b04      	ldr	r3, [pc, #16]	@ (80124a0 <HAL_PCD_SuspendCallback+0x48>)
 801248e:	691b      	ldr	r3, [r3, #16]
 8012490:	4a03      	ldr	r2, [pc, #12]	@ (80124a0 <HAL_PCD_SuspendCallback+0x48>)
 8012492:	f043 0306 	orr.w	r3, r3, #6
 8012496:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8012498:	bf00      	nop
 801249a:	3708      	adds	r7, #8
 801249c:	46bd      	mov	sp, r7
 801249e:	bd80      	pop	{r7, pc}
 80124a0:	e000ed00 	.word	0xe000ed00

080124a4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80124a4:	b580      	push	{r7, lr}
 80124a6:	b082      	sub	sp, #8
 80124a8:	af00      	add	r7, sp, #0
 80124aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80124b2:	4618      	mov	r0, r3
 80124b4:	f7fe fc7f 	bl	8010db6 <USBD_LL_Resume>
}
 80124b8:	bf00      	nop
 80124ba:	3708      	adds	r7, #8
 80124bc:	46bd      	mov	sp, r7
 80124be:	bd80      	pop	{r7, pc}

080124c0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80124c0:	b580      	push	{r7, lr}
 80124c2:	b082      	sub	sp, #8
 80124c4:	af00      	add	r7, sp, #0
 80124c6:	6078      	str	r0, [r7, #4]
 80124c8:	460b      	mov	r3, r1
 80124ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80124d2:	78fa      	ldrb	r2, [r7, #3]
 80124d4:	4611      	mov	r1, r2
 80124d6:	4618      	mov	r0, r3
 80124d8:	f7fe fcd7 	bl	8010e8a <USBD_LL_IsoOUTIncomplete>
}
 80124dc:	bf00      	nop
 80124de:	3708      	adds	r7, #8
 80124e0:	46bd      	mov	sp, r7
 80124e2:	bd80      	pop	{r7, pc}

080124e4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80124e4:	b580      	push	{r7, lr}
 80124e6:	b082      	sub	sp, #8
 80124e8:	af00      	add	r7, sp, #0
 80124ea:	6078      	str	r0, [r7, #4]
 80124ec:	460b      	mov	r3, r1
 80124ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80124f6:	78fa      	ldrb	r2, [r7, #3]
 80124f8:	4611      	mov	r1, r2
 80124fa:	4618      	mov	r0, r3
 80124fc:	f7fe fc93 	bl	8010e26 <USBD_LL_IsoINIncomplete>
}
 8012500:	bf00      	nop
 8012502:	3708      	adds	r7, #8
 8012504:	46bd      	mov	sp, r7
 8012506:	bd80      	pop	{r7, pc}

08012508 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012508:	b580      	push	{r7, lr}
 801250a:	b082      	sub	sp, #8
 801250c:	af00      	add	r7, sp, #0
 801250e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8012516:	4618      	mov	r0, r3
 8012518:	f7fe fce9 	bl	8010eee <USBD_LL_DevConnected>
}
 801251c:	bf00      	nop
 801251e:	3708      	adds	r7, #8
 8012520:	46bd      	mov	sp, r7
 8012522:	bd80      	pop	{r7, pc}

08012524 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012524:	b580      	push	{r7, lr}
 8012526:	b082      	sub	sp, #8
 8012528:	af00      	add	r7, sp, #0
 801252a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8012532:	4618      	mov	r0, r3
 8012534:	f7fe fce6 	bl	8010f04 <USBD_LL_DevDisconnected>
}
 8012538:	bf00      	nop
 801253a:	3708      	adds	r7, #8
 801253c:	46bd      	mov	sp, r7
 801253e:	bd80      	pop	{r7, pc}

08012540 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8012540:	b580      	push	{r7, lr}
 8012542:	b082      	sub	sp, #8
 8012544:	af00      	add	r7, sp, #0
 8012546:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	781b      	ldrb	r3, [r3, #0]
 801254c:	2b00      	cmp	r3, #0
 801254e:	d13c      	bne.n	80125ca <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8012550:	4a20      	ldr	r2, [pc, #128]	@ (80125d4 <USBD_LL_Init+0x94>)
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8012558:	687b      	ldr	r3, [r7, #4]
 801255a:	4a1e      	ldr	r2, [pc, #120]	@ (80125d4 <USBD_LL_Init+0x94>)
 801255c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8012560:	4b1c      	ldr	r3, [pc, #112]	@ (80125d4 <USBD_LL_Init+0x94>)
 8012562:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8012566:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8012568:	4b1a      	ldr	r3, [pc, #104]	@ (80125d4 <USBD_LL_Init+0x94>)
 801256a:	2204      	movs	r2, #4
 801256c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801256e:	4b19      	ldr	r3, [pc, #100]	@ (80125d4 <USBD_LL_Init+0x94>)
 8012570:	2202      	movs	r2, #2
 8012572:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8012574:	4b17      	ldr	r3, [pc, #92]	@ (80125d4 <USBD_LL_Init+0x94>)
 8012576:	2200      	movs	r2, #0
 8012578:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801257a:	4b16      	ldr	r3, [pc, #88]	@ (80125d4 <USBD_LL_Init+0x94>)
 801257c:	2202      	movs	r2, #2
 801257e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8012580:	4b14      	ldr	r3, [pc, #80]	@ (80125d4 <USBD_LL_Init+0x94>)
 8012582:	2200      	movs	r2, #0
 8012584:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8012586:	4b13      	ldr	r3, [pc, #76]	@ (80125d4 <USBD_LL_Init+0x94>)
 8012588:	2200      	movs	r2, #0
 801258a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801258c:	4b11      	ldr	r3, [pc, #68]	@ (80125d4 <USBD_LL_Init+0x94>)
 801258e:	2200      	movs	r2, #0
 8012590:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8012592:	4b10      	ldr	r3, [pc, #64]	@ (80125d4 <USBD_LL_Init+0x94>)
 8012594:	2200      	movs	r2, #0
 8012596:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8012598:	4b0e      	ldr	r3, [pc, #56]	@ (80125d4 <USBD_LL_Init+0x94>)
 801259a:	2200      	movs	r2, #0
 801259c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801259e:	480d      	ldr	r0, [pc, #52]	@ (80125d4 <USBD_LL_Init+0x94>)
 80125a0:	f7f8 fb09 	bl	800abb6 <HAL_PCD_Init>
 80125a4:	4603      	mov	r3, r0
 80125a6:	2b00      	cmp	r3, #0
 80125a8:	d001      	beq.n	80125ae <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80125aa:	f7f2 fee5 	bl	8005378 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80125ae:	2180      	movs	r1, #128	@ 0x80
 80125b0:	4808      	ldr	r0, [pc, #32]	@ (80125d4 <USBD_LL_Init+0x94>)
 80125b2:	f7f9 fd36 	bl	800c022 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80125b6:	2240      	movs	r2, #64	@ 0x40
 80125b8:	2100      	movs	r1, #0
 80125ba:	4806      	ldr	r0, [pc, #24]	@ (80125d4 <USBD_LL_Init+0x94>)
 80125bc:	f7f9 fcea 	bl	800bf94 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80125c0:	2280      	movs	r2, #128	@ 0x80
 80125c2:	2101      	movs	r1, #1
 80125c4:	4803      	ldr	r0, [pc, #12]	@ (80125d4 <USBD_LL_Init+0x94>)
 80125c6:	f7f9 fce5 	bl	800bf94 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80125ca:	2300      	movs	r3, #0
}
 80125cc:	4618      	mov	r0, r3
 80125ce:	3708      	adds	r7, #8
 80125d0:	46bd      	mov	sp, r7
 80125d2:	bd80      	pop	{r7, pc}
 80125d4:	20002010 	.word	0x20002010

080125d8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80125d8:	b580      	push	{r7, lr}
 80125da:	b084      	sub	sp, #16
 80125dc:	af00      	add	r7, sp, #0
 80125de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80125e0:	2300      	movs	r3, #0
 80125e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80125e4:	2300      	movs	r3, #0
 80125e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80125ee:	4618      	mov	r0, r3
 80125f0:	f7f8 fbf0 	bl	800add4 <HAL_PCD_Start>
 80125f4:	4603      	mov	r3, r0
 80125f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80125f8:	7bfb      	ldrb	r3, [r7, #15]
 80125fa:	4618      	mov	r0, r3
 80125fc:	f000 f942 	bl	8012884 <USBD_Get_USB_Status>
 8012600:	4603      	mov	r3, r0
 8012602:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012604:	7bbb      	ldrb	r3, [r7, #14]
}
 8012606:	4618      	mov	r0, r3
 8012608:	3710      	adds	r7, #16
 801260a:	46bd      	mov	sp, r7
 801260c:	bd80      	pop	{r7, pc}

0801260e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801260e:	b580      	push	{r7, lr}
 8012610:	b084      	sub	sp, #16
 8012612:	af00      	add	r7, sp, #0
 8012614:	6078      	str	r0, [r7, #4]
 8012616:	4608      	mov	r0, r1
 8012618:	4611      	mov	r1, r2
 801261a:	461a      	mov	r2, r3
 801261c:	4603      	mov	r3, r0
 801261e:	70fb      	strb	r3, [r7, #3]
 8012620:	460b      	mov	r3, r1
 8012622:	70bb      	strb	r3, [r7, #2]
 8012624:	4613      	mov	r3, r2
 8012626:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012628:	2300      	movs	r3, #0
 801262a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801262c:	2300      	movs	r3, #0
 801262e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8012636:	78bb      	ldrb	r3, [r7, #2]
 8012638:	883a      	ldrh	r2, [r7, #0]
 801263a:	78f9      	ldrb	r1, [r7, #3]
 801263c:	f7f9 f8c4 	bl	800b7c8 <HAL_PCD_EP_Open>
 8012640:	4603      	mov	r3, r0
 8012642:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012644:	7bfb      	ldrb	r3, [r7, #15]
 8012646:	4618      	mov	r0, r3
 8012648:	f000 f91c 	bl	8012884 <USBD_Get_USB_Status>
 801264c:	4603      	mov	r3, r0
 801264e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012650:	7bbb      	ldrb	r3, [r7, #14]
}
 8012652:	4618      	mov	r0, r3
 8012654:	3710      	adds	r7, #16
 8012656:	46bd      	mov	sp, r7
 8012658:	bd80      	pop	{r7, pc}

0801265a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801265a:	b580      	push	{r7, lr}
 801265c:	b084      	sub	sp, #16
 801265e:	af00      	add	r7, sp, #0
 8012660:	6078      	str	r0, [r7, #4]
 8012662:	460b      	mov	r3, r1
 8012664:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012666:	2300      	movs	r3, #0
 8012668:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801266a:	2300      	movs	r3, #0
 801266c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012674:	78fa      	ldrb	r2, [r7, #3]
 8012676:	4611      	mov	r1, r2
 8012678:	4618      	mov	r0, r3
 801267a:	f7f9 f90f 	bl	800b89c <HAL_PCD_EP_Close>
 801267e:	4603      	mov	r3, r0
 8012680:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012682:	7bfb      	ldrb	r3, [r7, #15]
 8012684:	4618      	mov	r0, r3
 8012686:	f000 f8fd 	bl	8012884 <USBD_Get_USB_Status>
 801268a:	4603      	mov	r3, r0
 801268c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801268e:	7bbb      	ldrb	r3, [r7, #14]
}
 8012690:	4618      	mov	r0, r3
 8012692:	3710      	adds	r7, #16
 8012694:	46bd      	mov	sp, r7
 8012696:	bd80      	pop	{r7, pc}

08012698 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012698:	b580      	push	{r7, lr}
 801269a:	b084      	sub	sp, #16
 801269c:	af00      	add	r7, sp, #0
 801269e:	6078      	str	r0, [r7, #4]
 80126a0:	460b      	mov	r3, r1
 80126a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80126a4:	2300      	movs	r3, #0
 80126a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80126a8:	2300      	movs	r3, #0
 80126aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80126b2:	78fa      	ldrb	r2, [r7, #3]
 80126b4:	4611      	mov	r1, r2
 80126b6:	4618      	mov	r0, r3
 80126b8:	f7f9 f9c7 	bl	800ba4a <HAL_PCD_EP_SetStall>
 80126bc:	4603      	mov	r3, r0
 80126be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80126c0:	7bfb      	ldrb	r3, [r7, #15]
 80126c2:	4618      	mov	r0, r3
 80126c4:	f000 f8de 	bl	8012884 <USBD_Get_USB_Status>
 80126c8:	4603      	mov	r3, r0
 80126ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80126cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80126ce:	4618      	mov	r0, r3
 80126d0:	3710      	adds	r7, #16
 80126d2:	46bd      	mov	sp, r7
 80126d4:	bd80      	pop	{r7, pc}

080126d6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80126d6:	b580      	push	{r7, lr}
 80126d8:	b084      	sub	sp, #16
 80126da:	af00      	add	r7, sp, #0
 80126dc:	6078      	str	r0, [r7, #4]
 80126de:	460b      	mov	r3, r1
 80126e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80126e2:	2300      	movs	r3, #0
 80126e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80126e6:	2300      	movs	r3, #0
 80126e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80126f0:	78fa      	ldrb	r2, [r7, #3]
 80126f2:	4611      	mov	r1, r2
 80126f4:	4618      	mov	r0, r3
 80126f6:	f7f9 fa0b 	bl	800bb10 <HAL_PCD_EP_ClrStall>
 80126fa:	4603      	mov	r3, r0
 80126fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80126fe:	7bfb      	ldrb	r3, [r7, #15]
 8012700:	4618      	mov	r0, r3
 8012702:	f000 f8bf 	bl	8012884 <USBD_Get_USB_Status>
 8012706:	4603      	mov	r3, r0
 8012708:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801270a:	7bbb      	ldrb	r3, [r7, #14]
}
 801270c:	4618      	mov	r0, r3
 801270e:	3710      	adds	r7, #16
 8012710:	46bd      	mov	sp, r7
 8012712:	bd80      	pop	{r7, pc}

08012714 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012714:	b480      	push	{r7}
 8012716:	b085      	sub	sp, #20
 8012718:	af00      	add	r7, sp, #0
 801271a:	6078      	str	r0, [r7, #4]
 801271c:	460b      	mov	r3, r1
 801271e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012726:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8012728:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801272c:	2b00      	cmp	r3, #0
 801272e:	da0b      	bge.n	8012748 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8012730:	78fb      	ldrb	r3, [r7, #3]
 8012732:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8012736:	68f9      	ldr	r1, [r7, #12]
 8012738:	4613      	mov	r3, r2
 801273a:	00db      	lsls	r3, r3, #3
 801273c:	4413      	add	r3, r2
 801273e:	009b      	lsls	r3, r3, #2
 8012740:	440b      	add	r3, r1
 8012742:	3316      	adds	r3, #22
 8012744:	781b      	ldrb	r3, [r3, #0]
 8012746:	e00b      	b.n	8012760 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8012748:	78fb      	ldrb	r3, [r7, #3]
 801274a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801274e:	68f9      	ldr	r1, [r7, #12]
 8012750:	4613      	mov	r3, r2
 8012752:	00db      	lsls	r3, r3, #3
 8012754:	4413      	add	r3, r2
 8012756:	009b      	lsls	r3, r3, #2
 8012758:	440b      	add	r3, r1
 801275a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 801275e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012760:	4618      	mov	r0, r3
 8012762:	3714      	adds	r7, #20
 8012764:	46bd      	mov	sp, r7
 8012766:	f85d 7b04 	ldr.w	r7, [sp], #4
 801276a:	4770      	bx	lr

0801276c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801276c:	b580      	push	{r7, lr}
 801276e:	b084      	sub	sp, #16
 8012770:	af00      	add	r7, sp, #0
 8012772:	6078      	str	r0, [r7, #4]
 8012774:	460b      	mov	r3, r1
 8012776:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012778:	2300      	movs	r3, #0
 801277a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801277c:	2300      	movs	r3, #0
 801277e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012786:	78fa      	ldrb	r2, [r7, #3]
 8012788:	4611      	mov	r1, r2
 801278a:	4618      	mov	r0, r3
 801278c:	f7f8 fff8 	bl	800b780 <HAL_PCD_SetAddress>
 8012790:	4603      	mov	r3, r0
 8012792:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012794:	7bfb      	ldrb	r3, [r7, #15]
 8012796:	4618      	mov	r0, r3
 8012798:	f000 f874 	bl	8012884 <USBD_Get_USB_Status>
 801279c:	4603      	mov	r3, r0
 801279e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80127a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80127a2:	4618      	mov	r0, r3
 80127a4:	3710      	adds	r7, #16
 80127a6:	46bd      	mov	sp, r7
 80127a8:	bd80      	pop	{r7, pc}

080127aa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80127aa:	b580      	push	{r7, lr}
 80127ac:	b086      	sub	sp, #24
 80127ae:	af00      	add	r7, sp, #0
 80127b0:	60f8      	str	r0, [r7, #12]
 80127b2:	607a      	str	r2, [r7, #4]
 80127b4:	603b      	str	r3, [r7, #0]
 80127b6:	460b      	mov	r3, r1
 80127b8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80127ba:	2300      	movs	r3, #0
 80127bc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80127be:	2300      	movs	r3, #0
 80127c0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80127c2:	68fb      	ldr	r3, [r7, #12]
 80127c4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80127c8:	7af9      	ldrb	r1, [r7, #11]
 80127ca:	683b      	ldr	r3, [r7, #0]
 80127cc:	687a      	ldr	r2, [r7, #4]
 80127ce:	f7f9 f902 	bl	800b9d6 <HAL_PCD_EP_Transmit>
 80127d2:	4603      	mov	r3, r0
 80127d4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80127d6:	7dfb      	ldrb	r3, [r7, #23]
 80127d8:	4618      	mov	r0, r3
 80127da:	f000 f853 	bl	8012884 <USBD_Get_USB_Status>
 80127de:	4603      	mov	r3, r0
 80127e0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80127e2:	7dbb      	ldrb	r3, [r7, #22]
}
 80127e4:	4618      	mov	r0, r3
 80127e6:	3718      	adds	r7, #24
 80127e8:	46bd      	mov	sp, r7
 80127ea:	bd80      	pop	{r7, pc}

080127ec <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80127ec:	b580      	push	{r7, lr}
 80127ee:	b086      	sub	sp, #24
 80127f0:	af00      	add	r7, sp, #0
 80127f2:	60f8      	str	r0, [r7, #12]
 80127f4:	607a      	str	r2, [r7, #4]
 80127f6:	603b      	str	r3, [r7, #0]
 80127f8:	460b      	mov	r3, r1
 80127fa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80127fc:	2300      	movs	r3, #0
 80127fe:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012800:	2300      	movs	r3, #0
 8012802:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8012804:	68fb      	ldr	r3, [r7, #12]
 8012806:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801280a:	7af9      	ldrb	r1, [r7, #11]
 801280c:	683b      	ldr	r3, [r7, #0]
 801280e:	687a      	ldr	r2, [r7, #4]
 8012810:	f7f9 f88e 	bl	800b930 <HAL_PCD_EP_Receive>
 8012814:	4603      	mov	r3, r0
 8012816:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012818:	7dfb      	ldrb	r3, [r7, #23]
 801281a:	4618      	mov	r0, r3
 801281c:	f000 f832 	bl	8012884 <USBD_Get_USB_Status>
 8012820:	4603      	mov	r3, r0
 8012822:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8012824:	7dbb      	ldrb	r3, [r7, #22]
}
 8012826:	4618      	mov	r0, r3
 8012828:	3718      	adds	r7, #24
 801282a:	46bd      	mov	sp, r7
 801282c:	bd80      	pop	{r7, pc}

0801282e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801282e:	b580      	push	{r7, lr}
 8012830:	b082      	sub	sp, #8
 8012832:	af00      	add	r7, sp, #0
 8012834:	6078      	str	r0, [r7, #4]
 8012836:	460b      	mov	r3, r1
 8012838:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012840:	78fa      	ldrb	r2, [r7, #3]
 8012842:	4611      	mov	r1, r2
 8012844:	4618      	mov	r0, r3
 8012846:	f7f9 f8ae 	bl	800b9a6 <HAL_PCD_EP_GetRxCount>
 801284a:	4603      	mov	r3, r0
}
 801284c:	4618      	mov	r0, r3
 801284e:	3708      	adds	r7, #8
 8012850:	46bd      	mov	sp, r7
 8012852:	bd80      	pop	{r7, pc}

08012854 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8012854:	b480      	push	{r7}
 8012856:	b083      	sub	sp, #12
 8012858:	af00      	add	r7, sp, #0
 801285a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801285c:	4b03      	ldr	r3, [pc, #12]	@ (801286c <USBD_static_malloc+0x18>)
}
 801285e:	4618      	mov	r0, r3
 8012860:	370c      	adds	r7, #12
 8012862:	46bd      	mov	sp, r7
 8012864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012868:	4770      	bx	lr
 801286a:	bf00      	nop
 801286c:	200024f4 	.word	0x200024f4

08012870 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8012870:	b480      	push	{r7}
 8012872:	b083      	sub	sp, #12
 8012874:	af00      	add	r7, sp, #0
 8012876:	6078      	str	r0, [r7, #4]

}
 8012878:	bf00      	nop
 801287a:	370c      	adds	r7, #12
 801287c:	46bd      	mov	sp, r7
 801287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012882:	4770      	bx	lr

08012884 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8012884:	b480      	push	{r7}
 8012886:	b085      	sub	sp, #20
 8012888:	af00      	add	r7, sp, #0
 801288a:	4603      	mov	r3, r0
 801288c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801288e:	2300      	movs	r3, #0
 8012890:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8012892:	79fb      	ldrb	r3, [r7, #7]
 8012894:	2b03      	cmp	r3, #3
 8012896:	d817      	bhi.n	80128c8 <USBD_Get_USB_Status+0x44>
 8012898:	a201      	add	r2, pc, #4	@ (adr r2, 80128a0 <USBD_Get_USB_Status+0x1c>)
 801289a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801289e:	bf00      	nop
 80128a0:	080128b1 	.word	0x080128b1
 80128a4:	080128b7 	.word	0x080128b7
 80128a8:	080128bd 	.word	0x080128bd
 80128ac:	080128c3 	.word	0x080128c3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80128b0:	2300      	movs	r3, #0
 80128b2:	73fb      	strb	r3, [r7, #15]
    break;
 80128b4:	e00b      	b.n	80128ce <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80128b6:	2303      	movs	r3, #3
 80128b8:	73fb      	strb	r3, [r7, #15]
    break;
 80128ba:	e008      	b.n	80128ce <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80128bc:	2301      	movs	r3, #1
 80128be:	73fb      	strb	r3, [r7, #15]
    break;
 80128c0:	e005      	b.n	80128ce <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80128c2:	2303      	movs	r3, #3
 80128c4:	73fb      	strb	r3, [r7, #15]
    break;
 80128c6:	e002      	b.n	80128ce <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80128c8:	2303      	movs	r3, #3
 80128ca:	73fb      	strb	r3, [r7, #15]
    break;
 80128cc:	bf00      	nop
  }
  return usb_status;
 80128ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80128d0:	4618      	mov	r0, r3
 80128d2:	3714      	adds	r7, #20
 80128d4:	46bd      	mov	sp, r7
 80128d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128da:	4770      	bx	lr

080128dc <__itoa>:
 80128dc:	1e93      	subs	r3, r2, #2
 80128de:	2b22      	cmp	r3, #34	@ 0x22
 80128e0:	b510      	push	{r4, lr}
 80128e2:	460c      	mov	r4, r1
 80128e4:	d904      	bls.n	80128f0 <__itoa+0x14>
 80128e6:	2300      	movs	r3, #0
 80128e8:	700b      	strb	r3, [r1, #0]
 80128ea:	461c      	mov	r4, r3
 80128ec:	4620      	mov	r0, r4
 80128ee:	bd10      	pop	{r4, pc}
 80128f0:	2a0a      	cmp	r2, #10
 80128f2:	d109      	bne.n	8012908 <__itoa+0x2c>
 80128f4:	2800      	cmp	r0, #0
 80128f6:	da07      	bge.n	8012908 <__itoa+0x2c>
 80128f8:	232d      	movs	r3, #45	@ 0x2d
 80128fa:	700b      	strb	r3, [r1, #0]
 80128fc:	4240      	negs	r0, r0
 80128fe:	2101      	movs	r1, #1
 8012900:	4421      	add	r1, r4
 8012902:	f000 f805 	bl	8012910 <__utoa>
 8012906:	e7f1      	b.n	80128ec <__itoa+0x10>
 8012908:	2100      	movs	r1, #0
 801290a:	e7f9      	b.n	8012900 <__itoa+0x24>

0801290c <itoa>:
 801290c:	f7ff bfe6 	b.w	80128dc <__itoa>

08012910 <__utoa>:
 8012910:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012912:	4c1f      	ldr	r4, [pc, #124]	@ (8012990 <__utoa+0x80>)
 8012914:	b08b      	sub	sp, #44	@ 0x2c
 8012916:	4605      	mov	r5, r0
 8012918:	460b      	mov	r3, r1
 801291a:	466e      	mov	r6, sp
 801291c:	f104 0c20 	add.w	ip, r4, #32
 8012920:	6820      	ldr	r0, [r4, #0]
 8012922:	6861      	ldr	r1, [r4, #4]
 8012924:	4637      	mov	r7, r6
 8012926:	c703      	stmia	r7!, {r0, r1}
 8012928:	3408      	adds	r4, #8
 801292a:	4564      	cmp	r4, ip
 801292c:	463e      	mov	r6, r7
 801292e:	d1f7      	bne.n	8012920 <__utoa+0x10>
 8012930:	7921      	ldrb	r1, [r4, #4]
 8012932:	7139      	strb	r1, [r7, #4]
 8012934:	1e91      	subs	r1, r2, #2
 8012936:	6820      	ldr	r0, [r4, #0]
 8012938:	6038      	str	r0, [r7, #0]
 801293a:	2922      	cmp	r1, #34	@ 0x22
 801293c:	f04f 0100 	mov.w	r1, #0
 8012940:	d904      	bls.n	801294c <__utoa+0x3c>
 8012942:	7019      	strb	r1, [r3, #0]
 8012944:	460b      	mov	r3, r1
 8012946:	4618      	mov	r0, r3
 8012948:	b00b      	add	sp, #44	@ 0x2c
 801294a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801294c:	1e58      	subs	r0, r3, #1
 801294e:	4684      	mov	ip, r0
 8012950:	fbb5 f7f2 	udiv	r7, r5, r2
 8012954:	fb02 5617 	mls	r6, r2, r7, r5
 8012958:	3628      	adds	r6, #40	@ 0x28
 801295a:	446e      	add	r6, sp
 801295c:	460c      	mov	r4, r1
 801295e:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8012962:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8012966:	462e      	mov	r6, r5
 8012968:	42b2      	cmp	r2, r6
 801296a:	f101 0101 	add.w	r1, r1, #1
 801296e:	463d      	mov	r5, r7
 8012970:	d9ee      	bls.n	8012950 <__utoa+0x40>
 8012972:	2200      	movs	r2, #0
 8012974:	545a      	strb	r2, [r3, r1]
 8012976:	1919      	adds	r1, r3, r4
 8012978:	1aa5      	subs	r5, r4, r2
 801297a:	42aa      	cmp	r2, r5
 801297c:	dae3      	bge.n	8012946 <__utoa+0x36>
 801297e:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8012982:	780e      	ldrb	r6, [r1, #0]
 8012984:	7006      	strb	r6, [r0, #0]
 8012986:	3201      	adds	r2, #1
 8012988:	f801 5901 	strb.w	r5, [r1], #-1
 801298c:	e7f4      	b.n	8012978 <__utoa+0x68>
 801298e:	bf00      	nop
 8012990:	08014b50 	.word	0x08014b50

08012994 <siprintf>:
 8012994:	b40e      	push	{r1, r2, r3}
 8012996:	b510      	push	{r4, lr}
 8012998:	b09d      	sub	sp, #116	@ 0x74
 801299a:	ab1f      	add	r3, sp, #124	@ 0x7c
 801299c:	9002      	str	r0, [sp, #8]
 801299e:	9006      	str	r0, [sp, #24]
 80129a0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80129a4:	480a      	ldr	r0, [pc, #40]	@ (80129d0 <siprintf+0x3c>)
 80129a6:	9107      	str	r1, [sp, #28]
 80129a8:	9104      	str	r1, [sp, #16]
 80129aa:	490a      	ldr	r1, [pc, #40]	@ (80129d4 <siprintf+0x40>)
 80129ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80129b0:	9105      	str	r1, [sp, #20]
 80129b2:	2400      	movs	r4, #0
 80129b4:	a902      	add	r1, sp, #8
 80129b6:	6800      	ldr	r0, [r0, #0]
 80129b8:	9301      	str	r3, [sp, #4]
 80129ba:	941b      	str	r4, [sp, #108]	@ 0x6c
 80129bc:	f000 f9b6 	bl	8012d2c <_svfiprintf_r>
 80129c0:	9b02      	ldr	r3, [sp, #8]
 80129c2:	701c      	strb	r4, [r3, #0]
 80129c4:	b01d      	add	sp, #116	@ 0x74
 80129c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80129ca:	b003      	add	sp, #12
 80129cc:	4770      	bx	lr
 80129ce:	bf00      	nop
 80129d0:	20000114 	.word	0x20000114
 80129d4:	ffff0208 	.word	0xffff0208

080129d8 <memset>:
 80129d8:	4402      	add	r2, r0
 80129da:	4603      	mov	r3, r0
 80129dc:	4293      	cmp	r3, r2
 80129de:	d100      	bne.n	80129e2 <memset+0xa>
 80129e0:	4770      	bx	lr
 80129e2:	f803 1b01 	strb.w	r1, [r3], #1
 80129e6:	e7f9      	b.n	80129dc <memset+0x4>

080129e8 <strncpy>:
 80129e8:	b510      	push	{r4, lr}
 80129ea:	3901      	subs	r1, #1
 80129ec:	4603      	mov	r3, r0
 80129ee:	b132      	cbz	r2, 80129fe <strncpy+0x16>
 80129f0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80129f4:	f803 4b01 	strb.w	r4, [r3], #1
 80129f8:	3a01      	subs	r2, #1
 80129fa:	2c00      	cmp	r4, #0
 80129fc:	d1f7      	bne.n	80129ee <strncpy+0x6>
 80129fe:	441a      	add	r2, r3
 8012a00:	2100      	movs	r1, #0
 8012a02:	4293      	cmp	r3, r2
 8012a04:	d100      	bne.n	8012a08 <strncpy+0x20>
 8012a06:	bd10      	pop	{r4, pc}
 8012a08:	f803 1b01 	strb.w	r1, [r3], #1
 8012a0c:	e7f9      	b.n	8012a02 <strncpy+0x1a>
	...

08012a10 <__errno>:
 8012a10:	4b01      	ldr	r3, [pc, #4]	@ (8012a18 <__errno+0x8>)
 8012a12:	6818      	ldr	r0, [r3, #0]
 8012a14:	4770      	bx	lr
 8012a16:	bf00      	nop
 8012a18:	20000114 	.word	0x20000114

08012a1c <__libc_init_array>:
 8012a1c:	b570      	push	{r4, r5, r6, lr}
 8012a1e:	4d0d      	ldr	r5, [pc, #52]	@ (8012a54 <__libc_init_array+0x38>)
 8012a20:	4c0d      	ldr	r4, [pc, #52]	@ (8012a58 <__libc_init_array+0x3c>)
 8012a22:	1b64      	subs	r4, r4, r5
 8012a24:	10a4      	asrs	r4, r4, #2
 8012a26:	2600      	movs	r6, #0
 8012a28:	42a6      	cmp	r6, r4
 8012a2a:	d109      	bne.n	8012a40 <__libc_init_array+0x24>
 8012a2c:	4d0b      	ldr	r5, [pc, #44]	@ (8012a5c <__libc_init_array+0x40>)
 8012a2e:	4c0c      	ldr	r4, [pc, #48]	@ (8012a60 <__libc_init_array+0x44>)
 8012a30:	f000 fc64 	bl	80132fc <_init>
 8012a34:	1b64      	subs	r4, r4, r5
 8012a36:	10a4      	asrs	r4, r4, #2
 8012a38:	2600      	movs	r6, #0
 8012a3a:	42a6      	cmp	r6, r4
 8012a3c:	d105      	bne.n	8012a4a <__libc_init_array+0x2e>
 8012a3e:	bd70      	pop	{r4, r5, r6, pc}
 8012a40:	f855 3b04 	ldr.w	r3, [r5], #4
 8012a44:	4798      	blx	r3
 8012a46:	3601      	adds	r6, #1
 8012a48:	e7ee      	b.n	8012a28 <__libc_init_array+0xc>
 8012a4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8012a4e:	4798      	blx	r3
 8012a50:	3601      	adds	r6, #1
 8012a52:	e7f2      	b.n	8012a3a <__libc_init_array+0x1e>
 8012a54:	08014bb0 	.word	0x08014bb0
 8012a58:	08014bb0 	.word	0x08014bb0
 8012a5c:	08014bb0 	.word	0x08014bb0
 8012a60:	08014bb4 	.word	0x08014bb4

08012a64 <__retarget_lock_acquire_recursive>:
 8012a64:	4770      	bx	lr

08012a66 <__retarget_lock_release_recursive>:
 8012a66:	4770      	bx	lr

08012a68 <memcpy>:
 8012a68:	440a      	add	r2, r1
 8012a6a:	4291      	cmp	r1, r2
 8012a6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8012a70:	d100      	bne.n	8012a74 <memcpy+0xc>
 8012a72:	4770      	bx	lr
 8012a74:	b510      	push	{r4, lr}
 8012a76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012a7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012a7e:	4291      	cmp	r1, r2
 8012a80:	d1f9      	bne.n	8012a76 <memcpy+0xe>
 8012a82:	bd10      	pop	{r4, pc}

08012a84 <_free_r>:
 8012a84:	b538      	push	{r3, r4, r5, lr}
 8012a86:	4605      	mov	r5, r0
 8012a88:	2900      	cmp	r1, #0
 8012a8a:	d041      	beq.n	8012b10 <_free_r+0x8c>
 8012a8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012a90:	1f0c      	subs	r4, r1, #4
 8012a92:	2b00      	cmp	r3, #0
 8012a94:	bfb8      	it	lt
 8012a96:	18e4      	addlt	r4, r4, r3
 8012a98:	f000 f8e0 	bl	8012c5c <__malloc_lock>
 8012a9c:	4a1d      	ldr	r2, [pc, #116]	@ (8012b14 <_free_r+0x90>)
 8012a9e:	6813      	ldr	r3, [r2, #0]
 8012aa0:	b933      	cbnz	r3, 8012ab0 <_free_r+0x2c>
 8012aa2:	6063      	str	r3, [r4, #4]
 8012aa4:	6014      	str	r4, [r2, #0]
 8012aa6:	4628      	mov	r0, r5
 8012aa8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012aac:	f000 b8dc 	b.w	8012c68 <__malloc_unlock>
 8012ab0:	42a3      	cmp	r3, r4
 8012ab2:	d908      	bls.n	8012ac6 <_free_r+0x42>
 8012ab4:	6820      	ldr	r0, [r4, #0]
 8012ab6:	1821      	adds	r1, r4, r0
 8012ab8:	428b      	cmp	r3, r1
 8012aba:	bf01      	itttt	eq
 8012abc:	6819      	ldreq	r1, [r3, #0]
 8012abe:	685b      	ldreq	r3, [r3, #4]
 8012ac0:	1809      	addeq	r1, r1, r0
 8012ac2:	6021      	streq	r1, [r4, #0]
 8012ac4:	e7ed      	b.n	8012aa2 <_free_r+0x1e>
 8012ac6:	461a      	mov	r2, r3
 8012ac8:	685b      	ldr	r3, [r3, #4]
 8012aca:	b10b      	cbz	r3, 8012ad0 <_free_r+0x4c>
 8012acc:	42a3      	cmp	r3, r4
 8012ace:	d9fa      	bls.n	8012ac6 <_free_r+0x42>
 8012ad0:	6811      	ldr	r1, [r2, #0]
 8012ad2:	1850      	adds	r0, r2, r1
 8012ad4:	42a0      	cmp	r0, r4
 8012ad6:	d10b      	bne.n	8012af0 <_free_r+0x6c>
 8012ad8:	6820      	ldr	r0, [r4, #0]
 8012ada:	4401      	add	r1, r0
 8012adc:	1850      	adds	r0, r2, r1
 8012ade:	4283      	cmp	r3, r0
 8012ae0:	6011      	str	r1, [r2, #0]
 8012ae2:	d1e0      	bne.n	8012aa6 <_free_r+0x22>
 8012ae4:	6818      	ldr	r0, [r3, #0]
 8012ae6:	685b      	ldr	r3, [r3, #4]
 8012ae8:	6053      	str	r3, [r2, #4]
 8012aea:	4408      	add	r0, r1
 8012aec:	6010      	str	r0, [r2, #0]
 8012aee:	e7da      	b.n	8012aa6 <_free_r+0x22>
 8012af0:	d902      	bls.n	8012af8 <_free_r+0x74>
 8012af2:	230c      	movs	r3, #12
 8012af4:	602b      	str	r3, [r5, #0]
 8012af6:	e7d6      	b.n	8012aa6 <_free_r+0x22>
 8012af8:	6820      	ldr	r0, [r4, #0]
 8012afa:	1821      	adds	r1, r4, r0
 8012afc:	428b      	cmp	r3, r1
 8012afe:	bf04      	itt	eq
 8012b00:	6819      	ldreq	r1, [r3, #0]
 8012b02:	685b      	ldreq	r3, [r3, #4]
 8012b04:	6063      	str	r3, [r4, #4]
 8012b06:	bf04      	itt	eq
 8012b08:	1809      	addeq	r1, r1, r0
 8012b0a:	6021      	streq	r1, [r4, #0]
 8012b0c:	6054      	str	r4, [r2, #4]
 8012b0e:	e7ca      	b.n	8012aa6 <_free_r+0x22>
 8012b10:	bd38      	pop	{r3, r4, r5, pc}
 8012b12:	bf00      	nop
 8012b14:	20002858 	.word	0x20002858

08012b18 <sbrk_aligned>:
 8012b18:	b570      	push	{r4, r5, r6, lr}
 8012b1a:	4e0f      	ldr	r6, [pc, #60]	@ (8012b58 <sbrk_aligned+0x40>)
 8012b1c:	460c      	mov	r4, r1
 8012b1e:	6831      	ldr	r1, [r6, #0]
 8012b20:	4605      	mov	r5, r0
 8012b22:	b911      	cbnz	r1, 8012b2a <sbrk_aligned+0x12>
 8012b24:	f000 fba4 	bl	8013270 <_sbrk_r>
 8012b28:	6030      	str	r0, [r6, #0]
 8012b2a:	4621      	mov	r1, r4
 8012b2c:	4628      	mov	r0, r5
 8012b2e:	f000 fb9f 	bl	8013270 <_sbrk_r>
 8012b32:	1c43      	adds	r3, r0, #1
 8012b34:	d103      	bne.n	8012b3e <sbrk_aligned+0x26>
 8012b36:	f04f 34ff 	mov.w	r4, #4294967295
 8012b3a:	4620      	mov	r0, r4
 8012b3c:	bd70      	pop	{r4, r5, r6, pc}
 8012b3e:	1cc4      	adds	r4, r0, #3
 8012b40:	f024 0403 	bic.w	r4, r4, #3
 8012b44:	42a0      	cmp	r0, r4
 8012b46:	d0f8      	beq.n	8012b3a <sbrk_aligned+0x22>
 8012b48:	1a21      	subs	r1, r4, r0
 8012b4a:	4628      	mov	r0, r5
 8012b4c:	f000 fb90 	bl	8013270 <_sbrk_r>
 8012b50:	3001      	adds	r0, #1
 8012b52:	d1f2      	bne.n	8012b3a <sbrk_aligned+0x22>
 8012b54:	e7ef      	b.n	8012b36 <sbrk_aligned+0x1e>
 8012b56:	bf00      	nop
 8012b58:	20002854 	.word	0x20002854

08012b5c <_malloc_r>:
 8012b5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012b60:	1ccd      	adds	r5, r1, #3
 8012b62:	f025 0503 	bic.w	r5, r5, #3
 8012b66:	3508      	adds	r5, #8
 8012b68:	2d0c      	cmp	r5, #12
 8012b6a:	bf38      	it	cc
 8012b6c:	250c      	movcc	r5, #12
 8012b6e:	2d00      	cmp	r5, #0
 8012b70:	4606      	mov	r6, r0
 8012b72:	db01      	blt.n	8012b78 <_malloc_r+0x1c>
 8012b74:	42a9      	cmp	r1, r5
 8012b76:	d904      	bls.n	8012b82 <_malloc_r+0x26>
 8012b78:	230c      	movs	r3, #12
 8012b7a:	6033      	str	r3, [r6, #0]
 8012b7c:	2000      	movs	r0, #0
 8012b7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012b82:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012c58 <_malloc_r+0xfc>
 8012b86:	f000 f869 	bl	8012c5c <__malloc_lock>
 8012b8a:	f8d8 3000 	ldr.w	r3, [r8]
 8012b8e:	461c      	mov	r4, r3
 8012b90:	bb44      	cbnz	r4, 8012be4 <_malloc_r+0x88>
 8012b92:	4629      	mov	r1, r5
 8012b94:	4630      	mov	r0, r6
 8012b96:	f7ff ffbf 	bl	8012b18 <sbrk_aligned>
 8012b9a:	1c43      	adds	r3, r0, #1
 8012b9c:	4604      	mov	r4, r0
 8012b9e:	d158      	bne.n	8012c52 <_malloc_r+0xf6>
 8012ba0:	f8d8 4000 	ldr.w	r4, [r8]
 8012ba4:	4627      	mov	r7, r4
 8012ba6:	2f00      	cmp	r7, #0
 8012ba8:	d143      	bne.n	8012c32 <_malloc_r+0xd6>
 8012baa:	2c00      	cmp	r4, #0
 8012bac:	d04b      	beq.n	8012c46 <_malloc_r+0xea>
 8012bae:	6823      	ldr	r3, [r4, #0]
 8012bb0:	4639      	mov	r1, r7
 8012bb2:	4630      	mov	r0, r6
 8012bb4:	eb04 0903 	add.w	r9, r4, r3
 8012bb8:	f000 fb5a 	bl	8013270 <_sbrk_r>
 8012bbc:	4581      	cmp	r9, r0
 8012bbe:	d142      	bne.n	8012c46 <_malloc_r+0xea>
 8012bc0:	6821      	ldr	r1, [r4, #0]
 8012bc2:	1a6d      	subs	r5, r5, r1
 8012bc4:	4629      	mov	r1, r5
 8012bc6:	4630      	mov	r0, r6
 8012bc8:	f7ff ffa6 	bl	8012b18 <sbrk_aligned>
 8012bcc:	3001      	adds	r0, #1
 8012bce:	d03a      	beq.n	8012c46 <_malloc_r+0xea>
 8012bd0:	6823      	ldr	r3, [r4, #0]
 8012bd2:	442b      	add	r3, r5
 8012bd4:	6023      	str	r3, [r4, #0]
 8012bd6:	f8d8 3000 	ldr.w	r3, [r8]
 8012bda:	685a      	ldr	r2, [r3, #4]
 8012bdc:	bb62      	cbnz	r2, 8012c38 <_malloc_r+0xdc>
 8012bde:	f8c8 7000 	str.w	r7, [r8]
 8012be2:	e00f      	b.n	8012c04 <_malloc_r+0xa8>
 8012be4:	6822      	ldr	r2, [r4, #0]
 8012be6:	1b52      	subs	r2, r2, r5
 8012be8:	d420      	bmi.n	8012c2c <_malloc_r+0xd0>
 8012bea:	2a0b      	cmp	r2, #11
 8012bec:	d917      	bls.n	8012c1e <_malloc_r+0xc2>
 8012bee:	1961      	adds	r1, r4, r5
 8012bf0:	42a3      	cmp	r3, r4
 8012bf2:	6025      	str	r5, [r4, #0]
 8012bf4:	bf18      	it	ne
 8012bf6:	6059      	strne	r1, [r3, #4]
 8012bf8:	6863      	ldr	r3, [r4, #4]
 8012bfa:	bf08      	it	eq
 8012bfc:	f8c8 1000 	streq.w	r1, [r8]
 8012c00:	5162      	str	r2, [r4, r5]
 8012c02:	604b      	str	r3, [r1, #4]
 8012c04:	4630      	mov	r0, r6
 8012c06:	f000 f82f 	bl	8012c68 <__malloc_unlock>
 8012c0a:	f104 000b 	add.w	r0, r4, #11
 8012c0e:	1d23      	adds	r3, r4, #4
 8012c10:	f020 0007 	bic.w	r0, r0, #7
 8012c14:	1ac2      	subs	r2, r0, r3
 8012c16:	bf1c      	itt	ne
 8012c18:	1a1b      	subne	r3, r3, r0
 8012c1a:	50a3      	strne	r3, [r4, r2]
 8012c1c:	e7af      	b.n	8012b7e <_malloc_r+0x22>
 8012c1e:	6862      	ldr	r2, [r4, #4]
 8012c20:	42a3      	cmp	r3, r4
 8012c22:	bf0c      	ite	eq
 8012c24:	f8c8 2000 	streq.w	r2, [r8]
 8012c28:	605a      	strne	r2, [r3, #4]
 8012c2a:	e7eb      	b.n	8012c04 <_malloc_r+0xa8>
 8012c2c:	4623      	mov	r3, r4
 8012c2e:	6864      	ldr	r4, [r4, #4]
 8012c30:	e7ae      	b.n	8012b90 <_malloc_r+0x34>
 8012c32:	463c      	mov	r4, r7
 8012c34:	687f      	ldr	r7, [r7, #4]
 8012c36:	e7b6      	b.n	8012ba6 <_malloc_r+0x4a>
 8012c38:	461a      	mov	r2, r3
 8012c3a:	685b      	ldr	r3, [r3, #4]
 8012c3c:	42a3      	cmp	r3, r4
 8012c3e:	d1fb      	bne.n	8012c38 <_malloc_r+0xdc>
 8012c40:	2300      	movs	r3, #0
 8012c42:	6053      	str	r3, [r2, #4]
 8012c44:	e7de      	b.n	8012c04 <_malloc_r+0xa8>
 8012c46:	230c      	movs	r3, #12
 8012c48:	6033      	str	r3, [r6, #0]
 8012c4a:	4630      	mov	r0, r6
 8012c4c:	f000 f80c 	bl	8012c68 <__malloc_unlock>
 8012c50:	e794      	b.n	8012b7c <_malloc_r+0x20>
 8012c52:	6005      	str	r5, [r0, #0]
 8012c54:	e7d6      	b.n	8012c04 <_malloc_r+0xa8>
 8012c56:	bf00      	nop
 8012c58:	20002858 	.word	0x20002858

08012c5c <__malloc_lock>:
 8012c5c:	4801      	ldr	r0, [pc, #4]	@ (8012c64 <__malloc_lock+0x8>)
 8012c5e:	f7ff bf01 	b.w	8012a64 <__retarget_lock_acquire_recursive>
 8012c62:	bf00      	nop
 8012c64:	20002850 	.word	0x20002850

08012c68 <__malloc_unlock>:
 8012c68:	4801      	ldr	r0, [pc, #4]	@ (8012c70 <__malloc_unlock+0x8>)
 8012c6a:	f7ff befc 	b.w	8012a66 <__retarget_lock_release_recursive>
 8012c6e:	bf00      	nop
 8012c70:	20002850 	.word	0x20002850

08012c74 <__ssputs_r>:
 8012c74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012c78:	688e      	ldr	r6, [r1, #8]
 8012c7a:	461f      	mov	r7, r3
 8012c7c:	42be      	cmp	r6, r7
 8012c7e:	680b      	ldr	r3, [r1, #0]
 8012c80:	4682      	mov	sl, r0
 8012c82:	460c      	mov	r4, r1
 8012c84:	4690      	mov	r8, r2
 8012c86:	d82d      	bhi.n	8012ce4 <__ssputs_r+0x70>
 8012c88:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012c8c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8012c90:	d026      	beq.n	8012ce0 <__ssputs_r+0x6c>
 8012c92:	6965      	ldr	r5, [r4, #20]
 8012c94:	6909      	ldr	r1, [r1, #16]
 8012c96:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012c9a:	eba3 0901 	sub.w	r9, r3, r1
 8012c9e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012ca2:	1c7b      	adds	r3, r7, #1
 8012ca4:	444b      	add	r3, r9
 8012ca6:	106d      	asrs	r5, r5, #1
 8012ca8:	429d      	cmp	r5, r3
 8012caa:	bf38      	it	cc
 8012cac:	461d      	movcc	r5, r3
 8012cae:	0553      	lsls	r3, r2, #21
 8012cb0:	d527      	bpl.n	8012d02 <__ssputs_r+0x8e>
 8012cb2:	4629      	mov	r1, r5
 8012cb4:	f7ff ff52 	bl	8012b5c <_malloc_r>
 8012cb8:	4606      	mov	r6, r0
 8012cba:	b360      	cbz	r0, 8012d16 <__ssputs_r+0xa2>
 8012cbc:	6921      	ldr	r1, [r4, #16]
 8012cbe:	464a      	mov	r2, r9
 8012cc0:	f7ff fed2 	bl	8012a68 <memcpy>
 8012cc4:	89a3      	ldrh	r3, [r4, #12]
 8012cc6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8012cca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012cce:	81a3      	strh	r3, [r4, #12]
 8012cd0:	6126      	str	r6, [r4, #16]
 8012cd2:	6165      	str	r5, [r4, #20]
 8012cd4:	444e      	add	r6, r9
 8012cd6:	eba5 0509 	sub.w	r5, r5, r9
 8012cda:	6026      	str	r6, [r4, #0]
 8012cdc:	60a5      	str	r5, [r4, #8]
 8012cde:	463e      	mov	r6, r7
 8012ce0:	42be      	cmp	r6, r7
 8012ce2:	d900      	bls.n	8012ce6 <__ssputs_r+0x72>
 8012ce4:	463e      	mov	r6, r7
 8012ce6:	6820      	ldr	r0, [r4, #0]
 8012ce8:	4632      	mov	r2, r6
 8012cea:	4641      	mov	r1, r8
 8012cec:	f000 faa6 	bl	801323c <memmove>
 8012cf0:	68a3      	ldr	r3, [r4, #8]
 8012cf2:	1b9b      	subs	r3, r3, r6
 8012cf4:	60a3      	str	r3, [r4, #8]
 8012cf6:	6823      	ldr	r3, [r4, #0]
 8012cf8:	4433      	add	r3, r6
 8012cfa:	6023      	str	r3, [r4, #0]
 8012cfc:	2000      	movs	r0, #0
 8012cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012d02:	462a      	mov	r2, r5
 8012d04:	f000 fac4 	bl	8013290 <_realloc_r>
 8012d08:	4606      	mov	r6, r0
 8012d0a:	2800      	cmp	r0, #0
 8012d0c:	d1e0      	bne.n	8012cd0 <__ssputs_r+0x5c>
 8012d0e:	6921      	ldr	r1, [r4, #16]
 8012d10:	4650      	mov	r0, sl
 8012d12:	f7ff feb7 	bl	8012a84 <_free_r>
 8012d16:	230c      	movs	r3, #12
 8012d18:	f8ca 3000 	str.w	r3, [sl]
 8012d1c:	89a3      	ldrh	r3, [r4, #12]
 8012d1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012d22:	81a3      	strh	r3, [r4, #12]
 8012d24:	f04f 30ff 	mov.w	r0, #4294967295
 8012d28:	e7e9      	b.n	8012cfe <__ssputs_r+0x8a>
	...

08012d2c <_svfiprintf_r>:
 8012d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d30:	4698      	mov	r8, r3
 8012d32:	898b      	ldrh	r3, [r1, #12]
 8012d34:	061b      	lsls	r3, r3, #24
 8012d36:	b09d      	sub	sp, #116	@ 0x74
 8012d38:	4607      	mov	r7, r0
 8012d3a:	460d      	mov	r5, r1
 8012d3c:	4614      	mov	r4, r2
 8012d3e:	d510      	bpl.n	8012d62 <_svfiprintf_r+0x36>
 8012d40:	690b      	ldr	r3, [r1, #16]
 8012d42:	b973      	cbnz	r3, 8012d62 <_svfiprintf_r+0x36>
 8012d44:	2140      	movs	r1, #64	@ 0x40
 8012d46:	f7ff ff09 	bl	8012b5c <_malloc_r>
 8012d4a:	6028      	str	r0, [r5, #0]
 8012d4c:	6128      	str	r0, [r5, #16]
 8012d4e:	b930      	cbnz	r0, 8012d5e <_svfiprintf_r+0x32>
 8012d50:	230c      	movs	r3, #12
 8012d52:	603b      	str	r3, [r7, #0]
 8012d54:	f04f 30ff 	mov.w	r0, #4294967295
 8012d58:	b01d      	add	sp, #116	@ 0x74
 8012d5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d5e:	2340      	movs	r3, #64	@ 0x40
 8012d60:	616b      	str	r3, [r5, #20]
 8012d62:	2300      	movs	r3, #0
 8012d64:	9309      	str	r3, [sp, #36]	@ 0x24
 8012d66:	2320      	movs	r3, #32
 8012d68:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012d6c:	f8cd 800c 	str.w	r8, [sp, #12]
 8012d70:	2330      	movs	r3, #48	@ 0x30
 8012d72:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8012f10 <_svfiprintf_r+0x1e4>
 8012d76:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012d7a:	f04f 0901 	mov.w	r9, #1
 8012d7e:	4623      	mov	r3, r4
 8012d80:	469a      	mov	sl, r3
 8012d82:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012d86:	b10a      	cbz	r2, 8012d8c <_svfiprintf_r+0x60>
 8012d88:	2a25      	cmp	r2, #37	@ 0x25
 8012d8a:	d1f9      	bne.n	8012d80 <_svfiprintf_r+0x54>
 8012d8c:	ebba 0b04 	subs.w	fp, sl, r4
 8012d90:	d00b      	beq.n	8012daa <_svfiprintf_r+0x7e>
 8012d92:	465b      	mov	r3, fp
 8012d94:	4622      	mov	r2, r4
 8012d96:	4629      	mov	r1, r5
 8012d98:	4638      	mov	r0, r7
 8012d9a:	f7ff ff6b 	bl	8012c74 <__ssputs_r>
 8012d9e:	3001      	adds	r0, #1
 8012da0:	f000 80a7 	beq.w	8012ef2 <_svfiprintf_r+0x1c6>
 8012da4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012da6:	445a      	add	r2, fp
 8012da8:	9209      	str	r2, [sp, #36]	@ 0x24
 8012daa:	f89a 3000 	ldrb.w	r3, [sl]
 8012dae:	2b00      	cmp	r3, #0
 8012db0:	f000 809f 	beq.w	8012ef2 <_svfiprintf_r+0x1c6>
 8012db4:	2300      	movs	r3, #0
 8012db6:	f04f 32ff 	mov.w	r2, #4294967295
 8012dba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012dbe:	f10a 0a01 	add.w	sl, sl, #1
 8012dc2:	9304      	str	r3, [sp, #16]
 8012dc4:	9307      	str	r3, [sp, #28]
 8012dc6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012dca:	931a      	str	r3, [sp, #104]	@ 0x68
 8012dcc:	4654      	mov	r4, sl
 8012dce:	2205      	movs	r2, #5
 8012dd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012dd4:	484e      	ldr	r0, [pc, #312]	@ (8012f10 <_svfiprintf_r+0x1e4>)
 8012dd6:	f7ed fa0b 	bl	80001f0 <memchr>
 8012dda:	9a04      	ldr	r2, [sp, #16]
 8012ddc:	b9d8      	cbnz	r0, 8012e16 <_svfiprintf_r+0xea>
 8012dde:	06d0      	lsls	r0, r2, #27
 8012de0:	bf44      	itt	mi
 8012de2:	2320      	movmi	r3, #32
 8012de4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012de8:	0711      	lsls	r1, r2, #28
 8012dea:	bf44      	itt	mi
 8012dec:	232b      	movmi	r3, #43	@ 0x2b
 8012dee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012df2:	f89a 3000 	ldrb.w	r3, [sl]
 8012df6:	2b2a      	cmp	r3, #42	@ 0x2a
 8012df8:	d015      	beq.n	8012e26 <_svfiprintf_r+0xfa>
 8012dfa:	9a07      	ldr	r2, [sp, #28]
 8012dfc:	4654      	mov	r4, sl
 8012dfe:	2000      	movs	r0, #0
 8012e00:	f04f 0c0a 	mov.w	ip, #10
 8012e04:	4621      	mov	r1, r4
 8012e06:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012e0a:	3b30      	subs	r3, #48	@ 0x30
 8012e0c:	2b09      	cmp	r3, #9
 8012e0e:	d94b      	bls.n	8012ea8 <_svfiprintf_r+0x17c>
 8012e10:	b1b0      	cbz	r0, 8012e40 <_svfiprintf_r+0x114>
 8012e12:	9207      	str	r2, [sp, #28]
 8012e14:	e014      	b.n	8012e40 <_svfiprintf_r+0x114>
 8012e16:	eba0 0308 	sub.w	r3, r0, r8
 8012e1a:	fa09 f303 	lsl.w	r3, r9, r3
 8012e1e:	4313      	orrs	r3, r2
 8012e20:	9304      	str	r3, [sp, #16]
 8012e22:	46a2      	mov	sl, r4
 8012e24:	e7d2      	b.n	8012dcc <_svfiprintf_r+0xa0>
 8012e26:	9b03      	ldr	r3, [sp, #12]
 8012e28:	1d19      	adds	r1, r3, #4
 8012e2a:	681b      	ldr	r3, [r3, #0]
 8012e2c:	9103      	str	r1, [sp, #12]
 8012e2e:	2b00      	cmp	r3, #0
 8012e30:	bfbb      	ittet	lt
 8012e32:	425b      	neglt	r3, r3
 8012e34:	f042 0202 	orrlt.w	r2, r2, #2
 8012e38:	9307      	strge	r3, [sp, #28]
 8012e3a:	9307      	strlt	r3, [sp, #28]
 8012e3c:	bfb8      	it	lt
 8012e3e:	9204      	strlt	r2, [sp, #16]
 8012e40:	7823      	ldrb	r3, [r4, #0]
 8012e42:	2b2e      	cmp	r3, #46	@ 0x2e
 8012e44:	d10a      	bne.n	8012e5c <_svfiprintf_r+0x130>
 8012e46:	7863      	ldrb	r3, [r4, #1]
 8012e48:	2b2a      	cmp	r3, #42	@ 0x2a
 8012e4a:	d132      	bne.n	8012eb2 <_svfiprintf_r+0x186>
 8012e4c:	9b03      	ldr	r3, [sp, #12]
 8012e4e:	1d1a      	adds	r2, r3, #4
 8012e50:	681b      	ldr	r3, [r3, #0]
 8012e52:	9203      	str	r2, [sp, #12]
 8012e54:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012e58:	3402      	adds	r4, #2
 8012e5a:	9305      	str	r3, [sp, #20]
 8012e5c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8012f20 <_svfiprintf_r+0x1f4>
 8012e60:	7821      	ldrb	r1, [r4, #0]
 8012e62:	2203      	movs	r2, #3
 8012e64:	4650      	mov	r0, sl
 8012e66:	f7ed f9c3 	bl	80001f0 <memchr>
 8012e6a:	b138      	cbz	r0, 8012e7c <_svfiprintf_r+0x150>
 8012e6c:	9b04      	ldr	r3, [sp, #16]
 8012e6e:	eba0 000a 	sub.w	r0, r0, sl
 8012e72:	2240      	movs	r2, #64	@ 0x40
 8012e74:	4082      	lsls	r2, r0
 8012e76:	4313      	orrs	r3, r2
 8012e78:	3401      	adds	r4, #1
 8012e7a:	9304      	str	r3, [sp, #16]
 8012e7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012e80:	4824      	ldr	r0, [pc, #144]	@ (8012f14 <_svfiprintf_r+0x1e8>)
 8012e82:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012e86:	2206      	movs	r2, #6
 8012e88:	f7ed f9b2 	bl	80001f0 <memchr>
 8012e8c:	2800      	cmp	r0, #0
 8012e8e:	d036      	beq.n	8012efe <_svfiprintf_r+0x1d2>
 8012e90:	4b21      	ldr	r3, [pc, #132]	@ (8012f18 <_svfiprintf_r+0x1ec>)
 8012e92:	bb1b      	cbnz	r3, 8012edc <_svfiprintf_r+0x1b0>
 8012e94:	9b03      	ldr	r3, [sp, #12]
 8012e96:	3307      	adds	r3, #7
 8012e98:	f023 0307 	bic.w	r3, r3, #7
 8012e9c:	3308      	adds	r3, #8
 8012e9e:	9303      	str	r3, [sp, #12]
 8012ea0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012ea2:	4433      	add	r3, r6
 8012ea4:	9309      	str	r3, [sp, #36]	@ 0x24
 8012ea6:	e76a      	b.n	8012d7e <_svfiprintf_r+0x52>
 8012ea8:	fb0c 3202 	mla	r2, ip, r2, r3
 8012eac:	460c      	mov	r4, r1
 8012eae:	2001      	movs	r0, #1
 8012eb0:	e7a8      	b.n	8012e04 <_svfiprintf_r+0xd8>
 8012eb2:	2300      	movs	r3, #0
 8012eb4:	3401      	adds	r4, #1
 8012eb6:	9305      	str	r3, [sp, #20]
 8012eb8:	4619      	mov	r1, r3
 8012eba:	f04f 0c0a 	mov.w	ip, #10
 8012ebe:	4620      	mov	r0, r4
 8012ec0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012ec4:	3a30      	subs	r2, #48	@ 0x30
 8012ec6:	2a09      	cmp	r2, #9
 8012ec8:	d903      	bls.n	8012ed2 <_svfiprintf_r+0x1a6>
 8012eca:	2b00      	cmp	r3, #0
 8012ecc:	d0c6      	beq.n	8012e5c <_svfiprintf_r+0x130>
 8012ece:	9105      	str	r1, [sp, #20]
 8012ed0:	e7c4      	b.n	8012e5c <_svfiprintf_r+0x130>
 8012ed2:	fb0c 2101 	mla	r1, ip, r1, r2
 8012ed6:	4604      	mov	r4, r0
 8012ed8:	2301      	movs	r3, #1
 8012eda:	e7f0      	b.n	8012ebe <_svfiprintf_r+0x192>
 8012edc:	ab03      	add	r3, sp, #12
 8012ede:	9300      	str	r3, [sp, #0]
 8012ee0:	462a      	mov	r2, r5
 8012ee2:	4b0e      	ldr	r3, [pc, #56]	@ (8012f1c <_svfiprintf_r+0x1f0>)
 8012ee4:	a904      	add	r1, sp, #16
 8012ee6:	4638      	mov	r0, r7
 8012ee8:	f3af 8000 	nop.w
 8012eec:	1c42      	adds	r2, r0, #1
 8012eee:	4606      	mov	r6, r0
 8012ef0:	d1d6      	bne.n	8012ea0 <_svfiprintf_r+0x174>
 8012ef2:	89ab      	ldrh	r3, [r5, #12]
 8012ef4:	065b      	lsls	r3, r3, #25
 8012ef6:	f53f af2d 	bmi.w	8012d54 <_svfiprintf_r+0x28>
 8012efa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012efc:	e72c      	b.n	8012d58 <_svfiprintf_r+0x2c>
 8012efe:	ab03      	add	r3, sp, #12
 8012f00:	9300      	str	r3, [sp, #0]
 8012f02:	462a      	mov	r2, r5
 8012f04:	4b05      	ldr	r3, [pc, #20]	@ (8012f1c <_svfiprintf_r+0x1f0>)
 8012f06:	a904      	add	r1, sp, #16
 8012f08:	4638      	mov	r0, r7
 8012f0a:	f000 f879 	bl	8013000 <_printf_i>
 8012f0e:	e7ed      	b.n	8012eec <_svfiprintf_r+0x1c0>
 8012f10:	08014b75 	.word	0x08014b75
 8012f14:	08014b7f 	.word	0x08014b7f
 8012f18:	00000000 	.word	0x00000000
 8012f1c:	08012c75 	.word	0x08012c75
 8012f20:	08014b7b 	.word	0x08014b7b

08012f24 <_printf_common>:
 8012f24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012f28:	4616      	mov	r6, r2
 8012f2a:	4698      	mov	r8, r3
 8012f2c:	688a      	ldr	r2, [r1, #8]
 8012f2e:	690b      	ldr	r3, [r1, #16]
 8012f30:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012f34:	4293      	cmp	r3, r2
 8012f36:	bfb8      	it	lt
 8012f38:	4613      	movlt	r3, r2
 8012f3a:	6033      	str	r3, [r6, #0]
 8012f3c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8012f40:	4607      	mov	r7, r0
 8012f42:	460c      	mov	r4, r1
 8012f44:	b10a      	cbz	r2, 8012f4a <_printf_common+0x26>
 8012f46:	3301      	adds	r3, #1
 8012f48:	6033      	str	r3, [r6, #0]
 8012f4a:	6823      	ldr	r3, [r4, #0]
 8012f4c:	0699      	lsls	r1, r3, #26
 8012f4e:	bf42      	ittt	mi
 8012f50:	6833      	ldrmi	r3, [r6, #0]
 8012f52:	3302      	addmi	r3, #2
 8012f54:	6033      	strmi	r3, [r6, #0]
 8012f56:	6825      	ldr	r5, [r4, #0]
 8012f58:	f015 0506 	ands.w	r5, r5, #6
 8012f5c:	d106      	bne.n	8012f6c <_printf_common+0x48>
 8012f5e:	f104 0a19 	add.w	sl, r4, #25
 8012f62:	68e3      	ldr	r3, [r4, #12]
 8012f64:	6832      	ldr	r2, [r6, #0]
 8012f66:	1a9b      	subs	r3, r3, r2
 8012f68:	42ab      	cmp	r3, r5
 8012f6a:	dc26      	bgt.n	8012fba <_printf_common+0x96>
 8012f6c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8012f70:	6822      	ldr	r2, [r4, #0]
 8012f72:	3b00      	subs	r3, #0
 8012f74:	bf18      	it	ne
 8012f76:	2301      	movne	r3, #1
 8012f78:	0692      	lsls	r2, r2, #26
 8012f7a:	d42b      	bmi.n	8012fd4 <_printf_common+0xb0>
 8012f7c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8012f80:	4641      	mov	r1, r8
 8012f82:	4638      	mov	r0, r7
 8012f84:	47c8      	blx	r9
 8012f86:	3001      	adds	r0, #1
 8012f88:	d01e      	beq.n	8012fc8 <_printf_common+0xa4>
 8012f8a:	6823      	ldr	r3, [r4, #0]
 8012f8c:	6922      	ldr	r2, [r4, #16]
 8012f8e:	f003 0306 	and.w	r3, r3, #6
 8012f92:	2b04      	cmp	r3, #4
 8012f94:	bf02      	ittt	eq
 8012f96:	68e5      	ldreq	r5, [r4, #12]
 8012f98:	6833      	ldreq	r3, [r6, #0]
 8012f9a:	1aed      	subeq	r5, r5, r3
 8012f9c:	68a3      	ldr	r3, [r4, #8]
 8012f9e:	bf0c      	ite	eq
 8012fa0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012fa4:	2500      	movne	r5, #0
 8012fa6:	4293      	cmp	r3, r2
 8012fa8:	bfc4      	itt	gt
 8012faa:	1a9b      	subgt	r3, r3, r2
 8012fac:	18ed      	addgt	r5, r5, r3
 8012fae:	2600      	movs	r6, #0
 8012fb0:	341a      	adds	r4, #26
 8012fb2:	42b5      	cmp	r5, r6
 8012fb4:	d11a      	bne.n	8012fec <_printf_common+0xc8>
 8012fb6:	2000      	movs	r0, #0
 8012fb8:	e008      	b.n	8012fcc <_printf_common+0xa8>
 8012fba:	2301      	movs	r3, #1
 8012fbc:	4652      	mov	r2, sl
 8012fbe:	4641      	mov	r1, r8
 8012fc0:	4638      	mov	r0, r7
 8012fc2:	47c8      	blx	r9
 8012fc4:	3001      	adds	r0, #1
 8012fc6:	d103      	bne.n	8012fd0 <_printf_common+0xac>
 8012fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8012fcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012fd0:	3501      	adds	r5, #1
 8012fd2:	e7c6      	b.n	8012f62 <_printf_common+0x3e>
 8012fd4:	18e1      	adds	r1, r4, r3
 8012fd6:	1c5a      	adds	r2, r3, #1
 8012fd8:	2030      	movs	r0, #48	@ 0x30
 8012fda:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8012fde:	4422      	add	r2, r4
 8012fe0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8012fe4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8012fe8:	3302      	adds	r3, #2
 8012fea:	e7c7      	b.n	8012f7c <_printf_common+0x58>
 8012fec:	2301      	movs	r3, #1
 8012fee:	4622      	mov	r2, r4
 8012ff0:	4641      	mov	r1, r8
 8012ff2:	4638      	mov	r0, r7
 8012ff4:	47c8      	blx	r9
 8012ff6:	3001      	adds	r0, #1
 8012ff8:	d0e6      	beq.n	8012fc8 <_printf_common+0xa4>
 8012ffa:	3601      	adds	r6, #1
 8012ffc:	e7d9      	b.n	8012fb2 <_printf_common+0x8e>
	...

08013000 <_printf_i>:
 8013000:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013004:	7e0f      	ldrb	r7, [r1, #24]
 8013006:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8013008:	2f78      	cmp	r7, #120	@ 0x78
 801300a:	4691      	mov	r9, r2
 801300c:	4680      	mov	r8, r0
 801300e:	460c      	mov	r4, r1
 8013010:	469a      	mov	sl, r3
 8013012:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8013016:	d807      	bhi.n	8013028 <_printf_i+0x28>
 8013018:	2f62      	cmp	r7, #98	@ 0x62
 801301a:	d80a      	bhi.n	8013032 <_printf_i+0x32>
 801301c:	2f00      	cmp	r7, #0
 801301e:	f000 80d1 	beq.w	80131c4 <_printf_i+0x1c4>
 8013022:	2f58      	cmp	r7, #88	@ 0x58
 8013024:	f000 80b8 	beq.w	8013198 <_printf_i+0x198>
 8013028:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801302c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8013030:	e03a      	b.n	80130a8 <_printf_i+0xa8>
 8013032:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8013036:	2b15      	cmp	r3, #21
 8013038:	d8f6      	bhi.n	8013028 <_printf_i+0x28>
 801303a:	a101      	add	r1, pc, #4	@ (adr r1, 8013040 <_printf_i+0x40>)
 801303c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013040:	08013099 	.word	0x08013099
 8013044:	080130ad 	.word	0x080130ad
 8013048:	08013029 	.word	0x08013029
 801304c:	08013029 	.word	0x08013029
 8013050:	08013029 	.word	0x08013029
 8013054:	08013029 	.word	0x08013029
 8013058:	080130ad 	.word	0x080130ad
 801305c:	08013029 	.word	0x08013029
 8013060:	08013029 	.word	0x08013029
 8013064:	08013029 	.word	0x08013029
 8013068:	08013029 	.word	0x08013029
 801306c:	080131ab 	.word	0x080131ab
 8013070:	080130d7 	.word	0x080130d7
 8013074:	08013165 	.word	0x08013165
 8013078:	08013029 	.word	0x08013029
 801307c:	08013029 	.word	0x08013029
 8013080:	080131cd 	.word	0x080131cd
 8013084:	08013029 	.word	0x08013029
 8013088:	080130d7 	.word	0x080130d7
 801308c:	08013029 	.word	0x08013029
 8013090:	08013029 	.word	0x08013029
 8013094:	0801316d 	.word	0x0801316d
 8013098:	6833      	ldr	r3, [r6, #0]
 801309a:	1d1a      	adds	r2, r3, #4
 801309c:	681b      	ldr	r3, [r3, #0]
 801309e:	6032      	str	r2, [r6, #0]
 80130a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80130a4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80130a8:	2301      	movs	r3, #1
 80130aa:	e09c      	b.n	80131e6 <_printf_i+0x1e6>
 80130ac:	6833      	ldr	r3, [r6, #0]
 80130ae:	6820      	ldr	r0, [r4, #0]
 80130b0:	1d19      	adds	r1, r3, #4
 80130b2:	6031      	str	r1, [r6, #0]
 80130b4:	0606      	lsls	r6, r0, #24
 80130b6:	d501      	bpl.n	80130bc <_printf_i+0xbc>
 80130b8:	681d      	ldr	r5, [r3, #0]
 80130ba:	e003      	b.n	80130c4 <_printf_i+0xc4>
 80130bc:	0645      	lsls	r5, r0, #25
 80130be:	d5fb      	bpl.n	80130b8 <_printf_i+0xb8>
 80130c0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80130c4:	2d00      	cmp	r5, #0
 80130c6:	da03      	bge.n	80130d0 <_printf_i+0xd0>
 80130c8:	232d      	movs	r3, #45	@ 0x2d
 80130ca:	426d      	negs	r5, r5
 80130cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80130d0:	4858      	ldr	r0, [pc, #352]	@ (8013234 <_printf_i+0x234>)
 80130d2:	230a      	movs	r3, #10
 80130d4:	e011      	b.n	80130fa <_printf_i+0xfa>
 80130d6:	6821      	ldr	r1, [r4, #0]
 80130d8:	6833      	ldr	r3, [r6, #0]
 80130da:	0608      	lsls	r0, r1, #24
 80130dc:	f853 5b04 	ldr.w	r5, [r3], #4
 80130e0:	d402      	bmi.n	80130e8 <_printf_i+0xe8>
 80130e2:	0649      	lsls	r1, r1, #25
 80130e4:	bf48      	it	mi
 80130e6:	b2ad      	uxthmi	r5, r5
 80130e8:	2f6f      	cmp	r7, #111	@ 0x6f
 80130ea:	4852      	ldr	r0, [pc, #328]	@ (8013234 <_printf_i+0x234>)
 80130ec:	6033      	str	r3, [r6, #0]
 80130ee:	bf14      	ite	ne
 80130f0:	230a      	movne	r3, #10
 80130f2:	2308      	moveq	r3, #8
 80130f4:	2100      	movs	r1, #0
 80130f6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80130fa:	6866      	ldr	r6, [r4, #4]
 80130fc:	60a6      	str	r6, [r4, #8]
 80130fe:	2e00      	cmp	r6, #0
 8013100:	db05      	blt.n	801310e <_printf_i+0x10e>
 8013102:	6821      	ldr	r1, [r4, #0]
 8013104:	432e      	orrs	r6, r5
 8013106:	f021 0104 	bic.w	r1, r1, #4
 801310a:	6021      	str	r1, [r4, #0]
 801310c:	d04b      	beq.n	80131a6 <_printf_i+0x1a6>
 801310e:	4616      	mov	r6, r2
 8013110:	fbb5 f1f3 	udiv	r1, r5, r3
 8013114:	fb03 5711 	mls	r7, r3, r1, r5
 8013118:	5dc7      	ldrb	r7, [r0, r7]
 801311a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801311e:	462f      	mov	r7, r5
 8013120:	42bb      	cmp	r3, r7
 8013122:	460d      	mov	r5, r1
 8013124:	d9f4      	bls.n	8013110 <_printf_i+0x110>
 8013126:	2b08      	cmp	r3, #8
 8013128:	d10b      	bne.n	8013142 <_printf_i+0x142>
 801312a:	6823      	ldr	r3, [r4, #0]
 801312c:	07df      	lsls	r7, r3, #31
 801312e:	d508      	bpl.n	8013142 <_printf_i+0x142>
 8013130:	6923      	ldr	r3, [r4, #16]
 8013132:	6861      	ldr	r1, [r4, #4]
 8013134:	4299      	cmp	r1, r3
 8013136:	bfde      	ittt	le
 8013138:	2330      	movle	r3, #48	@ 0x30
 801313a:	f806 3c01 	strble.w	r3, [r6, #-1]
 801313e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8013142:	1b92      	subs	r2, r2, r6
 8013144:	6122      	str	r2, [r4, #16]
 8013146:	f8cd a000 	str.w	sl, [sp]
 801314a:	464b      	mov	r3, r9
 801314c:	aa03      	add	r2, sp, #12
 801314e:	4621      	mov	r1, r4
 8013150:	4640      	mov	r0, r8
 8013152:	f7ff fee7 	bl	8012f24 <_printf_common>
 8013156:	3001      	adds	r0, #1
 8013158:	d14a      	bne.n	80131f0 <_printf_i+0x1f0>
 801315a:	f04f 30ff 	mov.w	r0, #4294967295
 801315e:	b004      	add	sp, #16
 8013160:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013164:	6823      	ldr	r3, [r4, #0]
 8013166:	f043 0320 	orr.w	r3, r3, #32
 801316a:	6023      	str	r3, [r4, #0]
 801316c:	4832      	ldr	r0, [pc, #200]	@ (8013238 <_printf_i+0x238>)
 801316e:	2778      	movs	r7, #120	@ 0x78
 8013170:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8013174:	6823      	ldr	r3, [r4, #0]
 8013176:	6831      	ldr	r1, [r6, #0]
 8013178:	061f      	lsls	r7, r3, #24
 801317a:	f851 5b04 	ldr.w	r5, [r1], #4
 801317e:	d402      	bmi.n	8013186 <_printf_i+0x186>
 8013180:	065f      	lsls	r7, r3, #25
 8013182:	bf48      	it	mi
 8013184:	b2ad      	uxthmi	r5, r5
 8013186:	6031      	str	r1, [r6, #0]
 8013188:	07d9      	lsls	r1, r3, #31
 801318a:	bf44      	itt	mi
 801318c:	f043 0320 	orrmi.w	r3, r3, #32
 8013190:	6023      	strmi	r3, [r4, #0]
 8013192:	b11d      	cbz	r5, 801319c <_printf_i+0x19c>
 8013194:	2310      	movs	r3, #16
 8013196:	e7ad      	b.n	80130f4 <_printf_i+0xf4>
 8013198:	4826      	ldr	r0, [pc, #152]	@ (8013234 <_printf_i+0x234>)
 801319a:	e7e9      	b.n	8013170 <_printf_i+0x170>
 801319c:	6823      	ldr	r3, [r4, #0]
 801319e:	f023 0320 	bic.w	r3, r3, #32
 80131a2:	6023      	str	r3, [r4, #0]
 80131a4:	e7f6      	b.n	8013194 <_printf_i+0x194>
 80131a6:	4616      	mov	r6, r2
 80131a8:	e7bd      	b.n	8013126 <_printf_i+0x126>
 80131aa:	6833      	ldr	r3, [r6, #0]
 80131ac:	6825      	ldr	r5, [r4, #0]
 80131ae:	6961      	ldr	r1, [r4, #20]
 80131b0:	1d18      	adds	r0, r3, #4
 80131b2:	6030      	str	r0, [r6, #0]
 80131b4:	062e      	lsls	r6, r5, #24
 80131b6:	681b      	ldr	r3, [r3, #0]
 80131b8:	d501      	bpl.n	80131be <_printf_i+0x1be>
 80131ba:	6019      	str	r1, [r3, #0]
 80131bc:	e002      	b.n	80131c4 <_printf_i+0x1c4>
 80131be:	0668      	lsls	r0, r5, #25
 80131c0:	d5fb      	bpl.n	80131ba <_printf_i+0x1ba>
 80131c2:	8019      	strh	r1, [r3, #0]
 80131c4:	2300      	movs	r3, #0
 80131c6:	6123      	str	r3, [r4, #16]
 80131c8:	4616      	mov	r6, r2
 80131ca:	e7bc      	b.n	8013146 <_printf_i+0x146>
 80131cc:	6833      	ldr	r3, [r6, #0]
 80131ce:	1d1a      	adds	r2, r3, #4
 80131d0:	6032      	str	r2, [r6, #0]
 80131d2:	681e      	ldr	r6, [r3, #0]
 80131d4:	6862      	ldr	r2, [r4, #4]
 80131d6:	2100      	movs	r1, #0
 80131d8:	4630      	mov	r0, r6
 80131da:	f7ed f809 	bl	80001f0 <memchr>
 80131de:	b108      	cbz	r0, 80131e4 <_printf_i+0x1e4>
 80131e0:	1b80      	subs	r0, r0, r6
 80131e2:	6060      	str	r0, [r4, #4]
 80131e4:	6863      	ldr	r3, [r4, #4]
 80131e6:	6123      	str	r3, [r4, #16]
 80131e8:	2300      	movs	r3, #0
 80131ea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80131ee:	e7aa      	b.n	8013146 <_printf_i+0x146>
 80131f0:	6923      	ldr	r3, [r4, #16]
 80131f2:	4632      	mov	r2, r6
 80131f4:	4649      	mov	r1, r9
 80131f6:	4640      	mov	r0, r8
 80131f8:	47d0      	blx	sl
 80131fa:	3001      	adds	r0, #1
 80131fc:	d0ad      	beq.n	801315a <_printf_i+0x15a>
 80131fe:	6823      	ldr	r3, [r4, #0]
 8013200:	079b      	lsls	r3, r3, #30
 8013202:	d413      	bmi.n	801322c <_printf_i+0x22c>
 8013204:	68e0      	ldr	r0, [r4, #12]
 8013206:	9b03      	ldr	r3, [sp, #12]
 8013208:	4298      	cmp	r0, r3
 801320a:	bfb8      	it	lt
 801320c:	4618      	movlt	r0, r3
 801320e:	e7a6      	b.n	801315e <_printf_i+0x15e>
 8013210:	2301      	movs	r3, #1
 8013212:	4632      	mov	r2, r6
 8013214:	4649      	mov	r1, r9
 8013216:	4640      	mov	r0, r8
 8013218:	47d0      	blx	sl
 801321a:	3001      	adds	r0, #1
 801321c:	d09d      	beq.n	801315a <_printf_i+0x15a>
 801321e:	3501      	adds	r5, #1
 8013220:	68e3      	ldr	r3, [r4, #12]
 8013222:	9903      	ldr	r1, [sp, #12]
 8013224:	1a5b      	subs	r3, r3, r1
 8013226:	42ab      	cmp	r3, r5
 8013228:	dcf2      	bgt.n	8013210 <_printf_i+0x210>
 801322a:	e7eb      	b.n	8013204 <_printf_i+0x204>
 801322c:	2500      	movs	r5, #0
 801322e:	f104 0619 	add.w	r6, r4, #25
 8013232:	e7f5      	b.n	8013220 <_printf_i+0x220>
 8013234:	08014b86 	.word	0x08014b86
 8013238:	08014b97 	.word	0x08014b97

0801323c <memmove>:
 801323c:	4288      	cmp	r0, r1
 801323e:	b510      	push	{r4, lr}
 8013240:	eb01 0402 	add.w	r4, r1, r2
 8013244:	d902      	bls.n	801324c <memmove+0x10>
 8013246:	4284      	cmp	r4, r0
 8013248:	4623      	mov	r3, r4
 801324a:	d807      	bhi.n	801325c <memmove+0x20>
 801324c:	1e43      	subs	r3, r0, #1
 801324e:	42a1      	cmp	r1, r4
 8013250:	d008      	beq.n	8013264 <memmove+0x28>
 8013252:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013256:	f803 2f01 	strb.w	r2, [r3, #1]!
 801325a:	e7f8      	b.n	801324e <memmove+0x12>
 801325c:	4402      	add	r2, r0
 801325e:	4601      	mov	r1, r0
 8013260:	428a      	cmp	r2, r1
 8013262:	d100      	bne.n	8013266 <memmove+0x2a>
 8013264:	bd10      	pop	{r4, pc}
 8013266:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801326a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801326e:	e7f7      	b.n	8013260 <memmove+0x24>

08013270 <_sbrk_r>:
 8013270:	b538      	push	{r3, r4, r5, lr}
 8013272:	4d06      	ldr	r5, [pc, #24]	@ (801328c <_sbrk_r+0x1c>)
 8013274:	2300      	movs	r3, #0
 8013276:	4604      	mov	r4, r0
 8013278:	4608      	mov	r0, r1
 801327a:	602b      	str	r3, [r5, #0]
 801327c:	f7f2 fb88 	bl	8005990 <_sbrk>
 8013280:	1c43      	adds	r3, r0, #1
 8013282:	d102      	bne.n	801328a <_sbrk_r+0x1a>
 8013284:	682b      	ldr	r3, [r5, #0]
 8013286:	b103      	cbz	r3, 801328a <_sbrk_r+0x1a>
 8013288:	6023      	str	r3, [r4, #0]
 801328a:	bd38      	pop	{r3, r4, r5, pc}
 801328c:	2000284c 	.word	0x2000284c

08013290 <_realloc_r>:
 8013290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013294:	4607      	mov	r7, r0
 8013296:	4614      	mov	r4, r2
 8013298:	460d      	mov	r5, r1
 801329a:	b921      	cbnz	r1, 80132a6 <_realloc_r+0x16>
 801329c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80132a0:	4611      	mov	r1, r2
 80132a2:	f7ff bc5b 	b.w	8012b5c <_malloc_r>
 80132a6:	b92a      	cbnz	r2, 80132b4 <_realloc_r+0x24>
 80132a8:	f7ff fbec 	bl	8012a84 <_free_r>
 80132ac:	4625      	mov	r5, r4
 80132ae:	4628      	mov	r0, r5
 80132b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80132b4:	f000 f81a 	bl	80132ec <_malloc_usable_size_r>
 80132b8:	4284      	cmp	r4, r0
 80132ba:	4606      	mov	r6, r0
 80132bc:	d802      	bhi.n	80132c4 <_realloc_r+0x34>
 80132be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80132c2:	d8f4      	bhi.n	80132ae <_realloc_r+0x1e>
 80132c4:	4621      	mov	r1, r4
 80132c6:	4638      	mov	r0, r7
 80132c8:	f7ff fc48 	bl	8012b5c <_malloc_r>
 80132cc:	4680      	mov	r8, r0
 80132ce:	b908      	cbnz	r0, 80132d4 <_realloc_r+0x44>
 80132d0:	4645      	mov	r5, r8
 80132d2:	e7ec      	b.n	80132ae <_realloc_r+0x1e>
 80132d4:	42b4      	cmp	r4, r6
 80132d6:	4622      	mov	r2, r4
 80132d8:	4629      	mov	r1, r5
 80132da:	bf28      	it	cs
 80132dc:	4632      	movcs	r2, r6
 80132de:	f7ff fbc3 	bl	8012a68 <memcpy>
 80132e2:	4629      	mov	r1, r5
 80132e4:	4638      	mov	r0, r7
 80132e6:	f7ff fbcd 	bl	8012a84 <_free_r>
 80132ea:	e7f1      	b.n	80132d0 <_realloc_r+0x40>

080132ec <_malloc_usable_size_r>:
 80132ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80132f0:	1f18      	subs	r0, r3, #4
 80132f2:	2b00      	cmp	r3, #0
 80132f4:	bfbc      	itt	lt
 80132f6:	580b      	ldrlt	r3, [r1, r0]
 80132f8:	18c0      	addlt	r0, r0, r3
 80132fa:	4770      	bx	lr

080132fc <_init>:
 80132fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80132fe:	bf00      	nop
 8013300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013302:	bc08      	pop	{r3}
 8013304:	469e      	mov	lr, r3
 8013306:	4770      	bx	lr

08013308 <_fini>:
 8013308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801330a:	bf00      	nop
 801330c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801330e:	bc08      	pop	{r3}
 8013310:	469e      	mov	lr, r3
 8013312:	4770      	bx	lr
