
BlackPill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012f38  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001698  080130d8  080130d8  000140d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014770  08014770  00016164  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08014770  08014770  00015770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014778  08014778  00016164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014778  08014778  00015778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801477c  0801477c  0001577c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000164  20000000  08014780  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000026b4  20000164  080148e4  00016164  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002818  080148e4  00016818  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00016164  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fbb8  00000000  00000000  00016194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004e2b  00000000  00000000  00035d4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c28  00000000  00000000  0003ab78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000015c5  00000000  00000000  0003c7a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c862  00000000  00000000  0003dd65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024f46  00000000  00000000  0005a5c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a36ac  00000000  00000000  0007f50d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00122bb9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007c98  00000000  00000000  00122bfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009b  00000000  00000000  0012a894  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000164 	.word	0x20000164
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080130c0 	.word	0x080130c0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000168 	.word	0x20000168
 80001dc:	080130c0 	.word	0x080130c0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2iz>:
 8000a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a34:	d215      	bcs.n	8000a62 <__aeabi_d2iz+0x36>
 8000a36:	d511      	bpl.n	8000a5c <__aeabi_d2iz+0x30>
 8000a38:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d912      	bls.n	8000a68 <__aeabi_d2iz+0x3c>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a52:	fa23 f002 	lsr.w	r0, r3, r2
 8000a56:	bf18      	it	ne
 8000a58:	4240      	negne	r0, r0
 8000a5a:	4770      	bx	lr
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a66:	d105      	bne.n	8000a74 <__aeabi_d2iz+0x48>
 8000a68:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a6c:	bf08      	it	eq
 8000a6e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <__aeabi_uldivmod>:
 8000a7c:	b953      	cbnz	r3, 8000a94 <__aeabi_uldivmod+0x18>
 8000a7e:	b94a      	cbnz	r2, 8000a94 <__aeabi_uldivmod+0x18>
 8000a80:	2900      	cmp	r1, #0
 8000a82:	bf08      	it	eq
 8000a84:	2800      	cmpeq	r0, #0
 8000a86:	bf1c      	itt	ne
 8000a88:	f04f 31ff 	movne.w	r1, #4294967295
 8000a8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a90:	f000 b988 	b.w	8000da4 <__aeabi_idiv0>
 8000a94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a9c:	f000 f806 	bl	8000aac <__udivmoddi4>
 8000aa0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aa8:	b004      	add	sp, #16
 8000aaa:	4770      	bx	lr

08000aac <__udivmoddi4>:
 8000aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab0:	9d08      	ldr	r5, [sp, #32]
 8000ab2:	468e      	mov	lr, r1
 8000ab4:	4604      	mov	r4, r0
 8000ab6:	4688      	mov	r8, r1
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d14a      	bne.n	8000b52 <__udivmoddi4+0xa6>
 8000abc:	428a      	cmp	r2, r1
 8000abe:	4617      	mov	r7, r2
 8000ac0:	d962      	bls.n	8000b88 <__udivmoddi4+0xdc>
 8000ac2:	fab2 f682 	clz	r6, r2
 8000ac6:	b14e      	cbz	r6, 8000adc <__udivmoddi4+0x30>
 8000ac8:	f1c6 0320 	rsb	r3, r6, #32
 8000acc:	fa01 f806 	lsl.w	r8, r1, r6
 8000ad0:	fa20 f303 	lsr.w	r3, r0, r3
 8000ad4:	40b7      	lsls	r7, r6
 8000ad6:	ea43 0808 	orr.w	r8, r3, r8
 8000ada:	40b4      	lsls	r4, r6
 8000adc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ae0:	fa1f fc87 	uxth.w	ip, r7
 8000ae4:	fbb8 f1fe 	udiv	r1, r8, lr
 8000ae8:	0c23      	lsrs	r3, r4, #16
 8000aea:	fb0e 8811 	mls	r8, lr, r1, r8
 8000aee:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000af2:	fb01 f20c 	mul.w	r2, r1, ip
 8000af6:	429a      	cmp	r2, r3
 8000af8:	d909      	bls.n	8000b0e <__udivmoddi4+0x62>
 8000afa:	18fb      	adds	r3, r7, r3
 8000afc:	f101 30ff 	add.w	r0, r1, #4294967295
 8000b00:	f080 80ea 	bcs.w	8000cd8 <__udivmoddi4+0x22c>
 8000b04:	429a      	cmp	r2, r3
 8000b06:	f240 80e7 	bls.w	8000cd8 <__udivmoddi4+0x22c>
 8000b0a:	3902      	subs	r1, #2
 8000b0c:	443b      	add	r3, r7
 8000b0e:	1a9a      	subs	r2, r3, r2
 8000b10:	b2a3      	uxth	r3, r4
 8000b12:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b16:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b1e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b22:	459c      	cmp	ip, r3
 8000b24:	d909      	bls.n	8000b3a <__udivmoddi4+0x8e>
 8000b26:	18fb      	adds	r3, r7, r3
 8000b28:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b2c:	f080 80d6 	bcs.w	8000cdc <__udivmoddi4+0x230>
 8000b30:	459c      	cmp	ip, r3
 8000b32:	f240 80d3 	bls.w	8000cdc <__udivmoddi4+0x230>
 8000b36:	443b      	add	r3, r7
 8000b38:	3802      	subs	r0, #2
 8000b3a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b3e:	eba3 030c 	sub.w	r3, r3, ip
 8000b42:	2100      	movs	r1, #0
 8000b44:	b11d      	cbz	r5, 8000b4e <__udivmoddi4+0xa2>
 8000b46:	40f3      	lsrs	r3, r6
 8000b48:	2200      	movs	r2, #0
 8000b4a:	e9c5 3200 	strd	r3, r2, [r5]
 8000b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b52:	428b      	cmp	r3, r1
 8000b54:	d905      	bls.n	8000b62 <__udivmoddi4+0xb6>
 8000b56:	b10d      	cbz	r5, 8000b5c <__udivmoddi4+0xb0>
 8000b58:	e9c5 0100 	strd	r0, r1, [r5]
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	4608      	mov	r0, r1
 8000b60:	e7f5      	b.n	8000b4e <__udivmoddi4+0xa2>
 8000b62:	fab3 f183 	clz	r1, r3
 8000b66:	2900      	cmp	r1, #0
 8000b68:	d146      	bne.n	8000bf8 <__udivmoddi4+0x14c>
 8000b6a:	4573      	cmp	r3, lr
 8000b6c:	d302      	bcc.n	8000b74 <__udivmoddi4+0xc8>
 8000b6e:	4282      	cmp	r2, r0
 8000b70:	f200 8105 	bhi.w	8000d7e <__udivmoddi4+0x2d2>
 8000b74:	1a84      	subs	r4, r0, r2
 8000b76:	eb6e 0203 	sbc.w	r2, lr, r3
 8000b7a:	2001      	movs	r0, #1
 8000b7c:	4690      	mov	r8, r2
 8000b7e:	2d00      	cmp	r5, #0
 8000b80:	d0e5      	beq.n	8000b4e <__udivmoddi4+0xa2>
 8000b82:	e9c5 4800 	strd	r4, r8, [r5]
 8000b86:	e7e2      	b.n	8000b4e <__udivmoddi4+0xa2>
 8000b88:	2a00      	cmp	r2, #0
 8000b8a:	f000 8090 	beq.w	8000cae <__udivmoddi4+0x202>
 8000b8e:	fab2 f682 	clz	r6, r2
 8000b92:	2e00      	cmp	r6, #0
 8000b94:	f040 80a4 	bne.w	8000ce0 <__udivmoddi4+0x234>
 8000b98:	1a8a      	subs	r2, r1, r2
 8000b9a:	0c03      	lsrs	r3, r0, #16
 8000b9c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ba0:	b280      	uxth	r0, r0
 8000ba2:	b2bc      	uxth	r4, r7
 8000ba4:	2101      	movs	r1, #1
 8000ba6:	fbb2 fcfe 	udiv	ip, r2, lr
 8000baa:	fb0e 221c 	mls	r2, lr, ip, r2
 8000bae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000bb2:	fb04 f20c 	mul.w	r2, r4, ip
 8000bb6:	429a      	cmp	r2, r3
 8000bb8:	d907      	bls.n	8000bca <__udivmoddi4+0x11e>
 8000bba:	18fb      	adds	r3, r7, r3
 8000bbc:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000bc0:	d202      	bcs.n	8000bc8 <__udivmoddi4+0x11c>
 8000bc2:	429a      	cmp	r2, r3
 8000bc4:	f200 80e0 	bhi.w	8000d88 <__udivmoddi4+0x2dc>
 8000bc8:	46c4      	mov	ip, r8
 8000bca:	1a9b      	subs	r3, r3, r2
 8000bcc:	fbb3 f2fe 	udiv	r2, r3, lr
 8000bd0:	fb0e 3312 	mls	r3, lr, r2, r3
 8000bd4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000bd8:	fb02 f404 	mul.w	r4, r2, r4
 8000bdc:	429c      	cmp	r4, r3
 8000bde:	d907      	bls.n	8000bf0 <__udivmoddi4+0x144>
 8000be0:	18fb      	adds	r3, r7, r3
 8000be2:	f102 30ff 	add.w	r0, r2, #4294967295
 8000be6:	d202      	bcs.n	8000bee <__udivmoddi4+0x142>
 8000be8:	429c      	cmp	r4, r3
 8000bea:	f200 80ca 	bhi.w	8000d82 <__udivmoddi4+0x2d6>
 8000bee:	4602      	mov	r2, r0
 8000bf0:	1b1b      	subs	r3, r3, r4
 8000bf2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000bf6:	e7a5      	b.n	8000b44 <__udivmoddi4+0x98>
 8000bf8:	f1c1 0620 	rsb	r6, r1, #32
 8000bfc:	408b      	lsls	r3, r1
 8000bfe:	fa22 f706 	lsr.w	r7, r2, r6
 8000c02:	431f      	orrs	r7, r3
 8000c04:	fa0e f401 	lsl.w	r4, lr, r1
 8000c08:	fa20 f306 	lsr.w	r3, r0, r6
 8000c0c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000c10:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000c14:	4323      	orrs	r3, r4
 8000c16:	fa00 f801 	lsl.w	r8, r0, r1
 8000c1a:	fa1f fc87 	uxth.w	ip, r7
 8000c1e:	fbbe f0f9 	udiv	r0, lr, r9
 8000c22:	0c1c      	lsrs	r4, r3, #16
 8000c24:	fb09 ee10 	mls	lr, r9, r0, lr
 8000c28:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000c2c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000c30:	45a6      	cmp	lr, r4
 8000c32:	fa02 f201 	lsl.w	r2, r2, r1
 8000c36:	d909      	bls.n	8000c4c <__udivmoddi4+0x1a0>
 8000c38:	193c      	adds	r4, r7, r4
 8000c3a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000c3e:	f080 809c 	bcs.w	8000d7a <__udivmoddi4+0x2ce>
 8000c42:	45a6      	cmp	lr, r4
 8000c44:	f240 8099 	bls.w	8000d7a <__udivmoddi4+0x2ce>
 8000c48:	3802      	subs	r0, #2
 8000c4a:	443c      	add	r4, r7
 8000c4c:	eba4 040e 	sub.w	r4, r4, lr
 8000c50:	fa1f fe83 	uxth.w	lr, r3
 8000c54:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c58:	fb09 4413 	mls	r4, r9, r3, r4
 8000c5c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000c60:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c64:	45a4      	cmp	ip, r4
 8000c66:	d908      	bls.n	8000c7a <__udivmoddi4+0x1ce>
 8000c68:	193c      	adds	r4, r7, r4
 8000c6a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000c6e:	f080 8082 	bcs.w	8000d76 <__udivmoddi4+0x2ca>
 8000c72:	45a4      	cmp	ip, r4
 8000c74:	d97f      	bls.n	8000d76 <__udivmoddi4+0x2ca>
 8000c76:	3b02      	subs	r3, #2
 8000c78:	443c      	add	r4, r7
 8000c7a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c7e:	eba4 040c 	sub.w	r4, r4, ip
 8000c82:	fba0 ec02 	umull	lr, ip, r0, r2
 8000c86:	4564      	cmp	r4, ip
 8000c88:	4673      	mov	r3, lr
 8000c8a:	46e1      	mov	r9, ip
 8000c8c:	d362      	bcc.n	8000d54 <__udivmoddi4+0x2a8>
 8000c8e:	d05f      	beq.n	8000d50 <__udivmoddi4+0x2a4>
 8000c90:	b15d      	cbz	r5, 8000caa <__udivmoddi4+0x1fe>
 8000c92:	ebb8 0203 	subs.w	r2, r8, r3
 8000c96:	eb64 0409 	sbc.w	r4, r4, r9
 8000c9a:	fa04 f606 	lsl.w	r6, r4, r6
 8000c9e:	fa22 f301 	lsr.w	r3, r2, r1
 8000ca2:	431e      	orrs	r6, r3
 8000ca4:	40cc      	lsrs	r4, r1
 8000ca6:	e9c5 6400 	strd	r6, r4, [r5]
 8000caa:	2100      	movs	r1, #0
 8000cac:	e74f      	b.n	8000b4e <__udivmoddi4+0xa2>
 8000cae:	fbb1 fcf2 	udiv	ip, r1, r2
 8000cb2:	0c01      	lsrs	r1, r0, #16
 8000cb4:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000cb8:	b280      	uxth	r0, r0
 8000cba:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000cbe:	463b      	mov	r3, r7
 8000cc0:	4638      	mov	r0, r7
 8000cc2:	463c      	mov	r4, r7
 8000cc4:	46b8      	mov	r8, r7
 8000cc6:	46be      	mov	lr, r7
 8000cc8:	2620      	movs	r6, #32
 8000cca:	fbb1 f1f7 	udiv	r1, r1, r7
 8000cce:	eba2 0208 	sub.w	r2, r2, r8
 8000cd2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000cd6:	e766      	b.n	8000ba6 <__udivmoddi4+0xfa>
 8000cd8:	4601      	mov	r1, r0
 8000cda:	e718      	b.n	8000b0e <__udivmoddi4+0x62>
 8000cdc:	4610      	mov	r0, r2
 8000cde:	e72c      	b.n	8000b3a <__udivmoddi4+0x8e>
 8000ce0:	f1c6 0220 	rsb	r2, r6, #32
 8000ce4:	fa2e f302 	lsr.w	r3, lr, r2
 8000ce8:	40b7      	lsls	r7, r6
 8000cea:	40b1      	lsls	r1, r6
 8000cec:	fa20 f202 	lsr.w	r2, r0, r2
 8000cf0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cf4:	430a      	orrs	r2, r1
 8000cf6:	fbb3 f8fe 	udiv	r8, r3, lr
 8000cfa:	b2bc      	uxth	r4, r7
 8000cfc:	fb0e 3318 	mls	r3, lr, r8, r3
 8000d00:	0c11      	lsrs	r1, r2, #16
 8000d02:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d06:	fb08 f904 	mul.w	r9, r8, r4
 8000d0a:	40b0      	lsls	r0, r6
 8000d0c:	4589      	cmp	r9, r1
 8000d0e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000d12:	b280      	uxth	r0, r0
 8000d14:	d93e      	bls.n	8000d94 <__udivmoddi4+0x2e8>
 8000d16:	1879      	adds	r1, r7, r1
 8000d18:	f108 3cff 	add.w	ip, r8, #4294967295
 8000d1c:	d201      	bcs.n	8000d22 <__udivmoddi4+0x276>
 8000d1e:	4589      	cmp	r9, r1
 8000d20:	d81f      	bhi.n	8000d62 <__udivmoddi4+0x2b6>
 8000d22:	eba1 0109 	sub.w	r1, r1, r9
 8000d26:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d2a:	fb09 f804 	mul.w	r8, r9, r4
 8000d2e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d32:	b292      	uxth	r2, r2
 8000d34:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d38:	4542      	cmp	r2, r8
 8000d3a:	d229      	bcs.n	8000d90 <__udivmoddi4+0x2e4>
 8000d3c:	18ba      	adds	r2, r7, r2
 8000d3e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000d42:	d2c4      	bcs.n	8000cce <__udivmoddi4+0x222>
 8000d44:	4542      	cmp	r2, r8
 8000d46:	d2c2      	bcs.n	8000cce <__udivmoddi4+0x222>
 8000d48:	f1a9 0102 	sub.w	r1, r9, #2
 8000d4c:	443a      	add	r2, r7
 8000d4e:	e7be      	b.n	8000cce <__udivmoddi4+0x222>
 8000d50:	45f0      	cmp	r8, lr
 8000d52:	d29d      	bcs.n	8000c90 <__udivmoddi4+0x1e4>
 8000d54:	ebbe 0302 	subs.w	r3, lr, r2
 8000d58:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000d5c:	3801      	subs	r0, #1
 8000d5e:	46e1      	mov	r9, ip
 8000d60:	e796      	b.n	8000c90 <__udivmoddi4+0x1e4>
 8000d62:	eba7 0909 	sub.w	r9, r7, r9
 8000d66:	4449      	add	r1, r9
 8000d68:	f1a8 0c02 	sub.w	ip, r8, #2
 8000d6c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d70:	fb09 f804 	mul.w	r8, r9, r4
 8000d74:	e7db      	b.n	8000d2e <__udivmoddi4+0x282>
 8000d76:	4673      	mov	r3, lr
 8000d78:	e77f      	b.n	8000c7a <__udivmoddi4+0x1ce>
 8000d7a:	4650      	mov	r0, sl
 8000d7c:	e766      	b.n	8000c4c <__udivmoddi4+0x1a0>
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e6fd      	b.n	8000b7e <__udivmoddi4+0xd2>
 8000d82:	443b      	add	r3, r7
 8000d84:	3a02      	subs	r2, #2
 8000d86:	e733      	b.n	8000bf0 <__udivmoddi4+0x144>
 8000d88:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d8c:	443b      	add	r3, r7
 8000d8e:	e71c      	b.n	8000bca <__udivmoddi4+0x11e>
 8000d90:	4649      	mov	r1, r9
 8000d92:	e79c      	b.n	8000cce <__udivmoddi4+0x222>
 8000d94:	eba1 0109 	sub.w	r1, r1, r9
 8000d98:	46c4      	mov	ip, r8
 8000d9a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d9e:	fb09 f804 	mul.w	r8, r9, r4
 8000da2:	e7c4      	b.n	8000d2e <__udivmoddi4+0x282>

08000da4 <__aeabi_idiv0>:
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop

08000da8 <ADC_Conversion_Cplt>:
static uint16_t mediaBuffer[ADC_MEDIA_SIZE][ADC_NUM_SENSORS] = {0};
static uint16_t sumData[ADC_NUM_SENSORS]= {0};
static uint8_t index = 0;


void ADC_Conversion_Cplt(uint16_t *rawData, uint16_t *filtredData){
 8000da8:	b490      	push	{r4, r7}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
 8000db0:	6039      	str	r1, [r7, #0]
	for(uint8_t channel = 0; channel < ADC_NUM_SENSORS; channel++){
 8000db2:	2300      	movs	r3, #0
 8000db4:	73fb      	strb	r3, [r7, #15]
 8000db6:	e042      	b.n	8000e3e <ADC_Conversion_Cplt+0x96>
		sumData[channel] -= mediaBuffer[index][channel];
 8000db8:	7bfb      	ldrb	r3, [r7, #15]
 8000dba:	4a2b      	ldr	r2, [pc, #172]	@ (8000e68 <ADC_Conversion_Cplt+0xc0>)
 8000dbc:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000dc0:	4b2a      	ldr	r3, [pc, #168]	@ (8000e6c <ADC_Conversion_Cplt+0xc4>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	461c      	mov	r4, r3
 8000dc6:	7bfa      	ldrb	r2, [r7, #15]
 8000dc8:	4829      	ldr	r0, [pc, #164]	@ (8000e70 <ADC_Conversion_Cplt+0xc8>)
 8000dca:	4623      	mov	r3, r4
 8000dcc:	00db      	lsls	r3, r3, #3
 8000dce:	4423      	add	r3, r4
 8000dd0:	4413      	add	r3, r2
 8000dd2:	f830 2013 	ldrh.w	r2, [r0, r3, lsl #1]
 8000dd6:	7bfb      	ldrb	r3, [r7, #15]
 8000dd8:	1a8a      	subs	r2, r1, r2
 8000dda:	b291      	uxth	r1, r2
 8000ddc:	4a22      	ldr	r2, [pc, #136]	@ (8000e68 <ADC_Conversion_Cplt+0xc0>)
 8000dde:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		sumData[channel] += rawData[channel];
 8000de2:	7bfb      	ldrb	r3, [r7, #15]
 8000de4:	4a20      	ldr	r2, [pc, #128]	@ (8000e68 <ADC_Conversion_Cplt+0xc0>)
 8000de6:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000dea:	7bfb      	ldrb	r3, [r7, #15]
 8000dec:	005b      	lsls	r3, r3, #1
 8000dee:	687a      	ldr	r2, [r7, #4]
 8000df0:	4413      	add	r3, r2
 8000df2:	881a      	ldrh	r2, [r3, #0]
 8000df4:	7bfb      	ldrb	r3, [r7, #15]
 8000df6:	440a      	add	r2, r1
 8000df8:	b291      	uxth	r1, r2
 8000dfa:	4a1b      	ldr	r2, [pc, #108]	@ (8000e68 <ADC_Conversion_Cplt+0xc0>)
 8000dfc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		mediaBuffer[index][channel] = rawData[channel];
 8000e00:	7bfb      	ldrb	r3, [r7, #15]
 8000e02:	005b      	lsls	r3, r3, #1
 8000e04:	687a      	ldr	r2, [r7, #4]
 8000e06:	4413      	add	r3, r2
 8000e08:	4a18      	ldr	r2, [pc, #96]	@ (8000e6c <ADC_Conversion_Cplt+0xc4>)
 8000e0a:	7812      	ldrb	r2, [r2, #0]
 8000e0c:	4610      	mov	r0, r2
 8000e0e:	7bfa      	ldrb	r2, [r7, #15]
 8000e10:	881c      	ldrh	r4, [r3, #0]
 8000e12:	4917      	ldr	r1, [pc, #92]	@ (8000e70 <ADC_Conversion_Cplt+0xc8>)
 8000e14:	4603      	mov	r3, r0
 8000e16:	00db      	lsls	r3, r3, #3
 8000e18:	4403      	add	r3, r0
 8000e1a:	4413      	add	r3, r2
 8000e1c:	4622      	mov	r2, r4
 8000e1e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		filtredData[channel] = (sumData[channel] >> ADC_DESPLAZAMIENTOS);
 8000e22:	7bfb      	ldrb	r3, [r7, #15]
 8000e24:	4a10      	ldr	r2, [pc, #64]	@ (8000e68 <ADC_Conversion_Cplt+0xc0>)
 8000e26:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000e2a:	7bfb      	ldrb	r3, [r7, #15]
 8000e2c:	005b      	lsls	r3, r3, #1
 8000e2e:	6839      	ldr	r1, [r7, #0]
 8000e30:	440b      	add	r3, r1
 8000e32:	0952      	lsrs	r2, r2, #5
 8000e34:	b292      	uxth	r2, r2
 8000e36:	801a      	strh	r2, [r3, #0]
	for(uint8_t channel = 0; channel < ADC_NUM_SENSORS; channel++){
 8000e38:	7bfb      	ldrb	r3, [r7, #15]
 8000e3a:	3301      	adds	r3, #1
 8000e3c:	73fb      	strb	r3, [r7, #15]
 8000e3e:	7bfb      	ldrb	r3, [r7, #15]
 8000e40:	2b08      	cmp	r3, #8
 8000e42:	d9b9      	bls.n	8000db8 <ADC_Conversion_Cplt+0x10>
	}
	index++;
 8000e44:	4b09      	ldr	r3, [pc, #36]	@ (8000e6c <ADC_Conversion_Cplt+0xc4>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	3301      	adds	r3, #1
 8000e4a:	b2da      	uxtb	r2, r3
 8000e4c:	4b07      	ldr	r3, [pc, #28]	@ (8000e6c <ADC_Conversion_Cplt+0xc4>)
 8000e4e:	701a      	strb	r2, [r3, #0]
	index &= (ADC_MEDIA_SIZE - 1);
 8000e50:	4b06      	ldr	r3, [pc, #24]	@ (8000e6c <ADC_Conversion_Cplt+0xc4>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	f003 031f 	and.w	r3, r3, #31
 8000e58:	b2da      	uxtb	r2, r3
 8000e5a:	4b04      	ldr	r3, [pc, #16]	@ (8000e6c <ADC_Conversion_Cplt+0xc4>)
 8000e5c:	701a      	strb	r2, [r3, #0]
}
 8000e5e:	bf00      	nop
 8000e60:	3710      	adds	r7, #16
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bc90      	pop	{r4, r7}
 8000e66:	4770      	bx	lr
 8000e68:	200003c0 	.word	0x200003c0
 8000e6c:	200003d2 	.word	0x200003d2
 8000e70:	20000180 	.word	0x20000180

08000e74 <inputState>:
#include "utilities.h"

s_Input debouncerBuff[MAX_INPUTS_DEBOUNCED];
uint8_t	inputIndex = 0;

void inputState(s_Input *stateInput){
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
	switch(stateInput->state){
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	785b      	ldrb	r3, [r3, #1]
 8000e80:	2b03      	cmp	r3, #3
 8000e82:	d849      	bhi.n	8000f18 <inputState+0xa4>
 8000e84:	a201      	add	r2, pc, #4	@ (adr r2, 8000e8c <inputState+0x18>)
 8000e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e8a:	bf00      	nop
 8000e8c:	08000ead 	.word	0x08000ead
 8000e90:	08000e9d 	.word	0x08000e9d
 8000e94:	08000eeb 	.word	0x08000eeb
 8000e98:	08000ebd 	.word	0x08000ebd
		case UP:
			if(stateInput->value == DOWN)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d13d      	bne.n	8000f20 <inputState+0xac>
				stateInput->state = FALLING;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2202      	movs	r2, #2
 8000ea8:	705a      	strb	r2, [r3, #1]
		break;
 8000eaa:	e039      	b.n	8000f20 <inputState+0xac>
		case DOWN:
			if(stateInput->value == UP)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	2b01      	cmp	r3, #1
 8000eb2:	d137      	bne.n	8000f24 <inputState+0xb0>
				stateInput->state = RISING;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2203      	movs	r2, #3
 8000eb8:	705a      	strb	r2, [r3, #1]
		break;
 8000eba:	e033      	b.n	8000f24 <inputState+0xb0>
		case RISING:
			if(stateInput->value == UP){
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d10e      	bne.n	8000ee2 <inputState+0x6e>
				stateInput->state = UP;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	705a      	strb	r2, [r3, #1]
				/*------------------------------*/
				stateInput->val = UP;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2201      	movs	r2, #1
 8000ece:	709a      	strb	r2, [r3, #2]
				if(stateInput->stateChanged != NULL)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d027      	beq.n	8000f28 <inputState+0xb4>
					stateInput->stateChanged(RISING);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	2003      	movs	r0, #3
 8000ede:	4798      	blx	r3
				/*------------------------------*/
			}else{
				stateInput->state = DOWN;
			}
		break;
 8000ee0:	e022      	b.n	8000f28 <inputState+0xb4>
				stateInput->state = DOWN;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	705a      	strb	r2, [r3, #1]
		break;
 8000ee8:	e01e      	b.n	8000f28 <inputState+0xb4>
		case FALLING:
			if(stateInput->value == DOWN){
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d10e      	bne.n	8000f10 <inputState+0x9c>
				stateInput->state = DOWN;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	705a      	strb	r2, [r3, #1]
				/*------------------------------*/
				stateInput->val = DOWN;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2200      	movs	r2, #0
 8000efc:	709a      	strb	r2, [r3, #2]
				if(stateInput->stateChanged != NULL)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d012      	beq.n	8000f2c <inputState+0xb8>
					stateInput->stateChanged(FALLING);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	2002      	movs	r0, #2
 8000f0c:	4798      	blx	r3
				/*------------------------------*/
			}else{
				stateInput->state = UP;
			}
		break;
 8000f0e:	e00d      	b.n	8000f2c <inputState+0xb8>
				stateInput->state = UP;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2201      	movs	r2, #1
 8000f14:	705a      	strb	r2, [r3, #1]
		break;
 8000f16:	e009      	b.n	8000f2c <inputState+0xb8>
		default:
		stateInput->state = UP;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	705a      	strb	r2, [r3, #1]
	}
}
 8000f1e:	e006      	b.n	8000f2e <inputState+0xba>
		break;
 8000f20:	bf00      	nop
 8000f22:	e004      	b.n	8000f2e <inputState+0xba>
		break;
 8000f24:	bf00      	nop
 8000f26:	e002      	b.n	8000f2e <inputState+0xba>
		break;
 8000f28:	bf00      	nop
 8000f2a:	e000      	b.n	8000f2e <inputState+0xba>
		break;
 8000f2c:	bf00      	nop
}
 8000f2e:	bf00      	nop
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop

08000f38 <Debounce_Init>:

void Debounce_Init(){
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
	for(inputIndex=0; inputIndex<MAX_INPUTS_DEBOUNCED; inputIndex++){
 8000f3c:	4b16      	ldr	r3, [pc, #88]	@ (8000f98 <Debounce_Init+0x60>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	701a      	strb	r2, [r3, #0]
 8000f42:	e01d      	b.n	8000f80 <Debounce_Init+0x48>
		debouncerBuff[inputIndex].getInputState = NULL;
 8000f44:	4b14      	ldr	r3, [pc, #80]	@ (8000f98 <Debounce_Init+0x60>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4a14      	ldr	r2, [pc, #80]	@ (8000f9c <Debounce_Init+0x64>)
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	005b      	lsls	r3, r3, #1
 8000f50:	440b      	add	r3, r1
 8000f52:	009b      	lsls	r3, r3, #2
 8000f54:	4413      	add	r3, r2
 8000f56:	3308      	adds	r3, #8
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
		debouncerBuff[inputIndex].stateChanged = NULL;
 8000f5c:	4b0e      	ldr	r3, [pc, #56]	@ (8000f98 <Debounce_Init+0x60>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	4619      	mov	r1, r3
 8000f62:	4a0e      	ldr	r2, [pc, #56]	@ (8000f9c <Debounce_Init+0x64>)
 8000f64:	460b      	mov	r3, r1
 8000f66:	005b      	lsls	r3, r3, #1
 8000f68:	440b      	add	r3, r1
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	4413      	add	r3, r2
 8000f6e:	3304      	adds	r3, #4
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
	for(inputIndex=0; inputIndex<MAX_INPUTS_DEBOUNCED; inputIndex++){
 8000f74:	4b08      	ldr	r3, [pc, #32]	@ (8000f98 <Debounce_Init+0x60>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	3301      	adds	r3, #1
 8000f7a:	b2da      	uxtb	r2, r3
 8000f7c:	4b06      	ldr	r3, [pc, #24]	@ (8000f98 <Debounce_Init+0x60>)
 8000f7e:	701a      	strb	r2, [r3, #0]
 8000f80:	4b05      	ldr	r3, [pc, #20]	@ (8000f98 <Debounce_Init+0x60>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d0dd      	beq.n	8000f44 <Debounce_Init+0xc>
	}
	inputIndex = 0;
 8000f88:	4b03      	ldr	r3, [pc, #12]	@ (8000f98 <Debounce_Init+0x60>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	701a      	strb	r2, [r3, #0]
}
 8000f8e:	bf00      	nop
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr
 8000f98:	200003e0 	.word	0x200003e0
 8000f9c:	200003d4 	.word	0x200003d4

08000fa0 <Debounce_Add>:

uint8_t Debounce_Add(uint8_t (*AbstHard)(), void (*STATECHANGED)(e_Estados estado)){
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	6039      	str	r1, [r7, #0]
	if(inputIndex >= MAX_INPUTS_DEBOUNCED)
 8000faa:	4b15      	ldr	r3, [pc, #84]	@ (8001000 <Debounce_Add+0x60>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <Debounce_Add+0x16>
		return 0;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	e01d      	b.n	8000ff2 <Debounce_Add+0x52>
	debouncerBuff[inputIndex].getInputState = AbstHard;
 8000fb6:	4b12      	ldr	r3, [pc, #72]	@ (8001000 <Debounce_Add+0x60>)
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4a11      	ldr	r2, [pc, #68]	@ (8001004 <Debounce_Add+0x64>)
 8000fbe:	460b      	mov	r3, r1
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	440b      	add	r3, r1
 8000fc4:	009b      	lsls	r3, r3, #2
 8000fc6:	4413      	add	r3, r2
 8000fc8:	3308      	adds	r3, #8
 8000fca:	687a      	ldr	r2, [r7, #4]
 8000fcc:	601a      	str	r2, [r3, #0]
	debouncerBuff[inputIndex].stateChanged = STATECHANGED;
 8000fce:	4b0c      	ldr	r3, [pc, #48]	@ (8001000 <Debounce_Add+0x60>)
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4a0b      	ldr	r2, [pc, #44]	@ (8001004 <Debounce_Add+0x64>)
 8000fd6:	460b      	mov	r3, r1
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	440b      	add	r3, r1
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	4413      	add	r3, r2
 8000fe0:	3304      	adds	r3, #4
 8000fe2:	683a      	ldr	r2, [r7, #0]
 8000fe4:	601a      	str	r2, [r3, #0]
	return inputIndex++;
 8000fe6:	4b06      	ldr	r3, [pc, #24]	@ (8001000 <Debounce_Add+0x60>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	1c5a      	adds	r2, r3, #1
 8000fec:	b2d1      	uxtb	r1, r2
 8000fee:	4a04      	ldr	r2, [pc, #16]	@ (8001000 <Debounce_Add+0x60>)
 8000ff0:	7011      	strb	r1, [r2, #0]
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	370c      	adds	r7, #12
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	200003e0 	.word	0x200003e0
 8001004:	200003d4 	.word	0x200003d4

08001008 <Debouncer_Task>:

void Debouncer_Task(){
 8001008:	b590      	push	{r4, r7, lr}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < MAX_INPUTS_DEBOUNCED; i++){
 800100e:	2300      	movs	r3, #0
 8001010:	71fb      	strb	r3, [r7, #7]
 8001012:	e021      	b.n	8001058 <Debouncer_Task+0x50>
		debouncerBuff[i].value = debouncerBuff[i].getInputState();
 8001014:	79fa      	ldrb	r2, [r7, #7]
 8001016:	4914      	ldr	r1, [pc, #80]	@ (8001068 <Debouncer_Task+0x60>)
 8001018:	4613      	mov	r3, r2
 800101a:	005b      	lsls	r3, r3, #1
 800101c:	4413      	add	r3, r2
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	440b      	add	r3, r1
 8001022:	3308      	adds	r3, #8
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	79fc      	ldrb	r4, [r7, #7]
 8001028:	4798      	blx	r3
 800102a:	4603      	mov	r3, r0
 800102c:	4619      	mov	r1, r3
 800102e:	4a0e      	ldr	r2, [pc, #56]	@ (8001068 <Debouncer_Task+0x60>)
 8001030:	4623      	mov	r3, r4
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	4423      	add	r3, r4
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	4413      	add	r3, r2
 800103a:	460a      	mov	r2, r1
 800103c:	701a      	strb	r2, [r3, #0]
		inputState(&debouncerBuff[i]);
 800103e:	79fa      	ldrb	r2, [r7, #7]
 8001040:	4613      	mov	r3, r2
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	4413      	add	r3, r2
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	4a07      	ldr	r2, [pc, #28]	@ (8001068 <Debouncer_Task+0x60>)
 800104a:	4413      	add	r3, r2
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff ff11 	bl	8000e74 <inputState>
	for(uint8_t i = 0; i < MAX_INPUTS_DEBOUNCED; i++){
 8001052:	79fb      	ldrb	r3, [r7, #7]
 8001054:	3301      	adds	r3, #1
 8001056:	71fb      	strb	r3, [r7, #7]
 8001058:	79fb      	ldrb	r3, [r7, #7]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d0da      	beq.n	8001014 <Debouncer_Task+0xc>
	}
}
 800105e:	bf00      	nop
 8001060:	bf00      	nop
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	bd90      	pop	{r4, r7, pc}
 8001068:	200003d4 	.word	0x200003d4

0800106c <MPU6050_Set_I2C_Communication>:
static e_system (*I2C_Mem_Read)(uint16_t Dev_Address, uint8_t Mem_Adress, uint8_t Mem_AddSize, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout);


void MPU6050_Set_I2C_Communication(
		e_system (*Mem_Write_Blocking)(uint16_t Dev_Address, uint8_t Mem_Adress, uint8_t Mem_AddSize, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout),
		e_system (*Mem_Read_Blocking)(uint16_t Dev_Address, uint8_t Mem_Adress, uint8_t Mem_AddSize, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout)){
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	6039      	str	r1, [r7, #0]
	I2C_Master_Transmit_Blocking = Mem_Write_Blocking;
 8001076:	4a06      	ldr	r2, [pc, #24]	@ (8001090 <MPU6050_Set_I2C_Communication+0x24>)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6013      	str	r3, [r2, #0]
	I2C_Mem_Read = Mem_Read_Blocking;
 800107c:	4a05      	ldr	r2, [pc, #20]	@ (8001094 <MPU6050_Set_I2C_Communication+0x28>)
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	6013      	str	r3, [r2, #0]
}
 8001082:	bf00      	nop
 8001084:	370c      	adds	r7, #12
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	200003e4 	.word	0x200003e4
 8001094:	200003e8 	.word	0x200003e8

08001098 <MPU6050_Init>:

e_system MPU6050_Init(s_MPU *mpu){
 8001098:	b590      	push	{r4, r7, lr}
 800109a:	b0b7      	sub	sp, #220	@ 0xdc
 800109c:	af02      	add	r7, sp, #8
 800109e:	6078      	str	r0, [r7, #4]
	uint8_t data = 0;
 80010a0:	2300      	movs	r3, #0
 80010a2:	f887 30ce 	strb.w	r3, [r7, #206]	@ 0xce
	e_system status = SYS_OK;
 80010a6:	2300      	movs	r3, #0
 80010a8:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf
	status += I2C_Mem_Read(MPU6050_ADDR, WHO_AM_I_MPU6050, 1, &data, 1, MPU_TIMEOUT);
 80010ac:	4b51      	ldr	r3, [pc, #324]	@ (80011f4 <MPU6050_Init+0x15c>)
 80010ae:	681c      	ldr	r4, [r3, #0]
 80010b0:	f107 03ce 	add.w	r3, r7, #206	@ 0xce
 80010b4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80010b8:	9201      	str	r2, [sp, #4]
 80010ba:	2201      	movs	r2, #1
 80010bc:	9200      	str	r2, [sp, #0]
 80010be:	2201      	movs	r2, #1
 80010c0:	2175      	movs	r1, #117	@ 0x75
 80010c2:	20d0      	movs	r0, #208	@ 0xd0
 80010c4:	47a0      	blx	r4
 80010c6:	4603      	mov	r3, r0
 80010c8:	461a      	mov	r2, r3
 80010ca:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 80010ce:	4413      	add	r3, r2
 80010d0:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf
	if(data == WHO_AM_I_DEFAULT_VALUE){
 80010d4:	f897 30ce 	ldrb.w	r3, [r7, #206]	@ 0xce
 80010d8:	2b68      	cmp	r3, #104	@ 0x68
 80010da:	f040 8084 	bne.w	80011e6 <MPU6050_Init+0x14e>
		data = 0x00;
 80010de:	2300      	movs	r3, #0
 80010e0:	f887 30ce 	strb.w	r3, [r7, #206]	@ 0xce
		status += I2C_Master_Transmit_Blocking(MPU6050_ADDR, POWER_MANAGEMENT_REG, 1, &data, 1, MPU_TIMEOUT);
 80010e4:	4b44      	ldr	r3, [pc, #272]	@ (80011f8 <MPU6050_Init+0x160>)
 80010e6:	681c      	ldr	r4, [r3, #0]
 80010e8:	f107 03ce 	add.w	r3, r7, #206	@ 0xce
 80010ec:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80010f0:	9201      	str	r2, [sp, #4]
 80010f2:	2201      	movs	r2, #1
 80010f4:	9200      	str	r2, [sp, #0]
 80010f6:	2201      	movs	r2, #1
 80010f8:	216b      	movs	r1, #107	@ 0x6b
 80010fa:	20d0      	movs	r0, #208	@ 0xd0
 80010fc:	47a0      	blx	r4
 80010fe:	4603      	mov	r3, r0
 8001100:	461a      	mov	r2, r3
 8001102:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 8001106:	4413      	add	r3, r2
 8001108:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf

		// Set data rate of 1 KHz (default)
		data = 0x07;
 800110c:	2307      	movs	r3, #7
 800110e:	f887 30ce 	strb.w	r3, [r7, #206]	@ 0xce
		status +=I2C_Master_Transmit_Blocking(MPU6050_ADDR, SMPLRT_DIV_REG, 1, &data, 1, MPU_TIMEOUT);
 8001112:	4b39      	ldr	r3, [pc, #228]	@ (80011f8 <MPU6050_Init+0x160>)
 8001114:	681c      	ldr	r4, [r3, #0]
 8001116:	f107 03ce 	add.w	r3, r7, #206	@ 0xce
 800111a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800111e:	9201      	str	r2, [sp, #4]
 8001120:	2201      	movs	r2, #1
 8001122:	9200      	str	r2, [sp, #0]
 8001124:	2201      	movs	r2, #1
 8001126:	2119      	movs	r1, #25
 8001128:	20d0      	movs	r0, #208	@ 0xd0
 800112a:	47a0      	blx	r4
 800112c:	4603      	mov	r3, r0
 800112e:	461a      	mov	r2, r3
 8001130:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 8001134:	4413      	add	r3, r2
 8001136:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf

		// Set accelerometer range of +/- 2g (default)
		data = 0x00;
 800113a:	2300      	movs	r3, #0
 800113c:	f887 30ce 	strb.w	r3, [r7, #206]	@ 0xce
		status += I2C_Master_Transmit_Blocking(MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &data, 1, MPU_TIMEOUT);
 8001140:	4b2d      	ldr	r3, [pc, #180]	@ (80011f8 <MPU6050_Init+0x160>)
 8001142:	681c      	ldr	r4, [r3, #0]
 8001144:	f107 03ce 	add.w	r3, r7, #206	@ 0xce
 8001148:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800114c:	9201      	str	r2, [sp, #4]
 800114e:	2201      	movs	r2, #1
 8001150:	9200      	str	r2, [sp, #0]
 8001152:	2201      	movs	r2, #1
 8001154:	211c      	movs	r1, #28
 8001156:	20d0      	movs	r0, #208	@ 0xd0
 8001158:	47a0      	blx	r4
 800115a:	4603      	mov	r3, r0
 800115c:	461a      	mov	r2, r3
 800115e:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 8001162:	4413      	add	r3, r2
 8001164:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf

		// Set gyroscope range of +/- 250 degree/s (default)
		data = 0x00;
 8001168:	2300      	movs	r3, #0
 800116a:	f887 30ce 	strb.w	r3, [r7, #206]	@ 0xce
		status += I2C_Master_Transmit_Blocking(MPU6050_ADDR, GYRO_CONFIG_REG, 1, &data, 1, MPU_TIMEOUT);
 800116e:	4b22      	ldr	r3, [pc, #136]	@ (80011f8 <MPU6050_Init+0x160>)
 8001170:	681c      	ldr	r4, [r3, #0]
 8001172:	f107 03ce 	add.w	r3, r7, #206	@ 0xce
 8001176:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800117a:	9201      	str	r2, [sp, #4]
 800117c:	2201      	movs	r2, #1
 800117e:	9200      	str	r2, [sp, #0]
 8001180:	2201      	movs	r2, #1
 8001182:	211b      	movs	r1, #27
 8001184:	20d0      	movs	r0, #208	@ 0xd0
 8001186:	47a0      	blx	r4
 8001188:	4603      	mov	r3, r0
 800118a:	461a      	mov	r2, r3
 800118c:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 8001190:	4413      	add	r3, r2
 8001192:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf

		// Set Digital Low Pass Filter
		data = 0x03;
 8001196:	2303      	movs	r3, #3
 8001198:	f887 30ce 	strb.w	r3, [r7, #206]	@ 0xce
		status += I2C_Master_Transmit_Blocking(MPU6050_ADDR, CONFIG, 1, &data, 1, MPU_TIMEOUT);
 800119c:	4b16      	ldr	r3, [pc, #88]	@ (80011f8 <MPU6050_Init+0x160>)
 800119e:	681c      	ldr	r4, [r3, #0]
 80011a0:	f107 03ce 	add.w	r3, r7, #206	@ 0xce
 80011a4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80011a8:	9201      	str	r2, [sp, #4]
 80011aa:	2201      	movs	r2, #1
 80011ac:	9200      	str	r2, [sp, #0]
 80011ae:	2201      	movs	r2, #1
 80011b0:	211a      	movs	r1, #26
 80011b2:	20d0      	movs	r0, #208	@ 0xd0
 80011b4:	47a0      	blx	r4
 80011b6:	4603      	mov	r3, r0
 80011b8:	461a      	mov	r2, r3
 80011ba:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 80011be:	4413      	add	r3, r2
 80011c0:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf
		I2C_Master_Transmit_Blocking(MPU6050_ADDR, INT_PIN_CFG, 1, &data, 1, MPU_TIMEOUT);

		data = 0x01;
		I2C_Master_Transmit_Blocking(MPU6050_ADDR, INT_ENABLE, 1, &data, 1, MPU_TIMEOUT);
		 */
		*mpu = (s_MPU){
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	4618      	mov	r0, r3
 80011c8:	23c4      	movs	r3, #196	@ 0xc4
 80011ca:	461a      	mov	r2, r3
 80011cc:	2100      	movs	r1, #0
 80011ce:	f011 fae5 	bl	801279c <memset>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2201      	movs	r2, #1
 80011d6:	f883 20c2 	strb.w	r2, [r3, #194]	@ 0xc2
		    },
		    .bit_data = {0},
		    .isInit = 1
		};

		if(status != SYS_OK){
 80011da:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d003      	beq.n	80011ea <MPU6050_Init+0x152>
			return SYS_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e002      	b.n	80011ec <MPU6050_Init+0x154>
		}

	}else{
		return SYS_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e000      	b.n	80011ec <MPU6050_Init+0x154>
	}
	return SYS_OK;
 80011ea:	2300      	movs	r3, #0
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	37d4      	adds	r7, #212	@ 0xd4
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd90      	pop	{r4, r7, pc}
 80011f4:	200003e8 	.word	0x200003e8
 80011f8:	200003e4 	.word	0x200003e4

080011fc <MPU6050_Calibrate>:

void MPU6050_Calibrate(s_MPU *mpu){
 80011fc:	b590      	push	{r4, r7, lr}
 80011fe:	b08d      	sub	sp, #52	@ 0x34
 8001200:	af02      	add	r7, sp, #8
 8001202:	6078      	str	r0, [r7, #4]
	int32_t temp_raw[6] = {0};
 8001204:	f107 030c 	add.w	r3, r7, #12
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	605a      	str	r2, [r3, #4]
 800120e:	609a      	str	r2, [r3, #8]
 8001210:	60da      	str	r2, [r3, #12]
 8001212:	611a      	str	r2, [r3, #16]
 8001214:	615a      	str	r2, [r3, #20]
	for (uint16_t i=0; i < NUM_SAMPLES; i++){
 8001216:	2300      	movs	r3, #0
 8001218:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800121a:	e069      	b.n	80012f0 <MPU6050_Calibrate+0xf4>
		I2C_Mem_Read(MPU6050_ADDR, ACCEL_XOUT_REG, 1, mpu->bit_data, 14, MPU_TIMEOUT);
 800121c:	4b49      	ldr	r3, [pc, #292]	@ (8001344 <MPU6050_Calibrate+0x148>)
 800121e:	681c      	ldr	r4, [r3, #0]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	33b4      	adds	r3, #180	@ 0xb4
 8001224:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001228:	9201      	str	r2, [sp, #4]
 800122a:	220e      	movs	r2, #14
 800122c:	9200      	str	r2, [sp, #0]
 800122e:	2201      	movs	r2, #1
 8001230:	213b      	movs	r1, #59	@ 0x3b
 8001232:	20d0      	movs	r0, #208	@ 0xd0
 8001234:	47a0      	blx	r4
		temp_raw[0] += (int16_t)((mpu->bit_data[0] << 8) | mpu->bit_data[1]);
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	687a      	ldr	r2, [r7, #4]
 800123a:	f892 20b4 	ldrb.w	r2, [r2, #180]	@ 0xb4
 800123e:	b212      	sxth	r2, r2
 8001240:	0212      	lsls	r2, r2, #8
 8001242:	b211      	sxth	r1, r2
 8001244:	687a      	ldr	r2, [r7, #4]
 8001246:	f892 20b5 	ldrb.w	r2, [r2, #181]	@ 0xb5
 800124a:	b212      	sxth	r2, r2
 800124c:	430a      	orrs	r2, r1
 800124e:	b212      	sxth	r2, r2
 8001250:	4413      	add	r3, r2
 8001252:	60fb      	str	r3, [r7, #12]
		temp_raw[1] += (int16_t)((mpu->bit_data[2] << 8) | mpu->bit_data[3]);
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	687a      	ldr	r2, [r7, #4]
 8001258:	f892 20b6 	ldrb.w	r2, [r2, #182]	@ 0xb6
 800125c:	b212      	sxth	r2, r2
 800125e:	0212      	lsls	r2, r2, #8
 8001260:	b211      	sxth	r1, r2
 8001262:	687a      	ldr	r2, [r7, #4]
 8001264:	f892 20b7 	ldrb.w	r2, [r2, #183]	@ 0xb7
 8001268:	b212      	sxth	r2, r2
 800126a:	430a      	orrs	r2, r1
 800126c:	b212      	sxth	r2, r2
 800126e:	4413      	add	r3, r2
 8001270:	613b      	str	r3, [r7, #16]
		temp_raw[2] += (int16_t)((mpu->bit_data[4] << 8) | mpu->bit_data[5]);
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	687a      	ldr	r2, [r7, #4]
 8001276:	f892 20b8 	ldrb.w	r2, [r2, #184]	@ 0xb8
 800127a:	b212      	sxth	r2, r2
 800127c:	0212      	lsls	r2, r2, #8
 800127e:	b211      	sxth	r1, r2
 8001280:	687a      	ldr	r2, [r7, #4]
 8001282:	f892 20b9 	ldrb.w	r2, [r2, #185]	@ 0xb9
 8001286:	b212      	sxth	r2, r2
 8001288:	430a      	orrs	r2, r1
 800128a:	b212      	sxth	r2, r2
 800128c:	4413      	add	r3, r2
 800128e:	617b      	str	r3, [r7, #20]

		temp_raw[3] += (int16_t)((mpu->bit_data[8 ] << 8) | mpu->bit_data[9 ]);
 8001290:	69bb      	ldr	r3, [r7, #24]
 8001292:	687a      	ldr	r2, [r7, #4]
 8001294:	f892 20bc 	ldrb.w	r2, [r2, #188]	@ 0xbc
 8001298:	b212      	sxth	r2, r2
 800129a:	0212      	lsls	r2, r2, #8
 800129c:	b211      	sxth	r1, r2
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	f892 20bd 	ldrb.w	r2, [r2, #189]	@ 0xbd
 80012a4:	b212      	sxth	r2, r2
 80012a6:	430a      	orrs	r2, r1
 80012a8:	b212      	sxth	r2, r2
 80012aa:	4413      	add	r3, r2
 80012ac:	61bb      	str	r3, [r7, #24]
		temp_raw[4] += (int16_t)((mpu->bit_data[10] << 8) | mpu->bit_data[11]);
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	687a      	ldr	r2, [r7, #4]
 80012b2:	f892 20be 	ldrb.w	r2, [r2, #190]	@ 0xbe
 80012b6:	b212      	sxth	r2, r2
 80012b8:	0212      	lsls	r2, r2, #8
 80012ba:	b211      	sxth	r1, r2
 80012bc:	687a      	ldr	r2, [r7, #4]
 80012be:	f892 20bf 	ldrb.w	r2, [r2, #191]	@ 0xbf
 80012c2:	b212      	sxth	r2, r2
 80012c4:	430a      	orrs	r2, r1
 80012c6:	b212      	sxth	r2, r2
 80012c8:	4413      	add	r3, r2
 80012ca:	61fb      	str	r3, [r7, #28]
		temp_raw[5] += (int16_t)((mpu->bit_data[12] << 8) | mpu->bit_data[13]);
 80012cc:	6a3b      	ldr	r3, [r7, #32]
 80012ce:	687a      	ldr	r2, [r7, #4]
 80012d0:	f892 20c0 	ldrb.w	r2, [r2, #192]	@ 0xc0
 80012d4:	b212      	sxth	r2, r2
 80012d6:	0212      	lsls	r2, r2, #8
 80012d8:	b211      	sxth	r1, r2
 80012da:	687a      	ldr	r2, [r7, #4]
 80012dc:	f892 20c1 	ldrb.w	r2, [r2, #193]	@ 0xc1
 80012e0:	b212      	sxth	r2, r2
 80012e2:	430a      	orrs	r2, r1
 80012e4:	b212      	sxth	r2, r2
 80012e6:	4413      	add	r3, r2
 80012e8:	623b      	str	r3, [r7, #32]
	for (uint16_t i=0; i < NUM_SAMPLES; i++){
 80012ea:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80012ec:	3301      	adds	r3, #1
 80012ee:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80012f0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80012f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80012f6:	d391      	bcc.n	800121c <MPU6050_Calibrate+0x20>
	}
    mpu->Acc.offset.x = (int16_t)(temp_raw[0] >> NUM_SAMPLES_BITS);
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	131b      	asrs	r3, r3, #12
 80012fc:	b21a      	sxth	r2, r3
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	80da      	strh	r2, [r3, #6]
    mpu->Acc.offset.y = (int16_t)(temp_raw[1] >> NUM_SAMPLES_BITS);
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	131b      	asrs	r3, r3, #12
 8001306:	b21a      	sxth	r2, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	811a      	strh	r2, [r3, #8]
    mpu->Acc.offset.z = (int16_t)(temp_raw[2] >> NUM_SAMPLES_BITS) - SCALE_FACTOR;
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	131b      	asrs	r3, r3, #12
 8001310:	b29b      	uxth	r3, r3
 8001312:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8001316:	b29b      	uxth	r3, r3
 8001318:	b21a      	sxth	r2, r3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	815a      	strh	r2, [r3, #10]

    mpu->Gyro.offset.x = (int16_t)(temp_raw[3] >> NUM_SAMPLES_BITS);
 800131e:	69bb      	ldr	r3, [r7, #24]
 8001320:	131b      	asrs	r3, r3, #12
 8001322:	b21a      	sxth	r2, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	825a      	strh	r2, [r3, #18]
	mpu->Gyro.offset.y = (int16_t)(temp_raw[4] >> NUM_SAMPLES_BITS);
 8001328:	69fb      	ldr	r3, [r7, #28]
 800132a:	131b      	asrs	r3, r3, #12
 800132c:	b21a      	sxth	r2, r3
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	829a      	strh	r2, [r3, #20]
	mpu->Gyro.offset.z = (int16_t)(temp_raw[5] >> NUM_SAMPLES_BITS);
 8001332:	6a3b      	ldr	r3, [r7, #32]
 8001334:	131b      	asrs	r3, r3, #12
 8001336:	b21a      	sxth	r2, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	82da      	strh	r2, [r3, #22]

	//mpu->Angle.pitch = atan2f(mpu->Acc.offset.y, sqrtf(mpu->Acc.offset.x * mpu->Acc.offset.x + mpu->Acc.offset.z * mpu->Acc.offset.z)) * 180.0f / M_PI;
	//mpu->Angle.roll  = atan2f(-mpu->Acc.offset.x, mpu->Acc.offset.z) * 180.0f / M_PI;
}
 800133c:	bf00      	nop
 800133e:	372c      	adds	r7, #44	@ 0x2c
 8001340:	46bd      	mov	sp, r7
 8001342:	bd90      	pop	{r4, r7, pc}
 8001344:	200003e8 	.word	0x200003e8

08001348 <MPU6050_I2C_DMA_Cplt>:

void MPU6050_I2C_DMA_Cplt(s_MPU *mpu){
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
	// ACC: GET RAW INFORMATION
	mpu->MAF.rawData[0] = (((mpu->bit_data[0] << 8) | mpu->bit_data[1]));
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 8001356:	b21b      	sxth	r3, r3
 8001358:	021b      	lsls	r3, r3, #8
 800135a:	b21a      	sxth	r2, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	f893 30b5 	ldrb.w	r3, [r3, #181]	@ 0xb5
 8001362:	b21b      	sxth	r3, r3
 8001364:	4313      	orrs	r3, r2
 8001366:	b21a      	sxth	r2, r3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	f8a3 2098 	strh.w	r2, [r3, #152]	@ 0x98
	mpu->MAF.rawData[1] = (((mpu->bit_data[2] << 8) | mpu->bit_data[3]));
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	f893 30b6 	ldrb.w	r3, [r3, #182]	@ 0xb6
 8001374:	b21b      	sxth	r3, r3
 8001376:	021b      	lsls	r3, r3, #8
 8001378:	b21a      	sxth	r2, r3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	f893 30b7 	ldrb.w	r3, [r3, #183]	@ 0xb7
 8001380:	b21b      	sxth	r3, r3
 8001382:	4313      	orrs	r3, r2
 8001384:	b21a      	sxth	r2, r3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
	mpu->MAF.rawData[2] = (((mpu->bit_data[4] << 8) | mpu->bit_data[5]));
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	f893 30b8 	ldrb.w	r3, [r3, #184]	@ 0xb8
 8001392:	b21b      	sxth	r3, r3
 8001394:	021b      	lsls	r3, r3, #8
 8001396:	b21a      	sxth	r2, r3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f893 30b9 	ldrb.w	r3, [r3, #185]	@ 0xb9
 800139e:	b21b      	sxth	r3, r3
 80013a0:	4313      	orrs	r3, r2
 80013a2:	b21a      	sxth	r2, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
	// GYR: GET RAW INFORMATION
	mpu->MAF.rawData[3] = (((mpu->bit_data[8 ] << 8) | mpu->bit_data[9 ]));
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	f893 30bc 	ldrb.w	r3, [r3, #188]	@ 0xbc
 80013b0:	b21b      	sxth	r3, r3
 80013b2:	021b      	lsls	r3, r3, #8
 80013b4:	b21a      	sxth	r2, r3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	f893 30bd 	ldrb.w	r3, [r3, #189]	@ 0xbd
 80013bc:	b21b      	sxth	r3, r3
 80013be:	4313      	orrs	r3, r2
 80013c0:	b21a      	sxth	r2, r3
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	f8a3 209e 	strh.w	r2, [r3, #158]	@ 0x9e
	mpu->MAF.rawData[4] = (((mpu->bit_data[10] << 8) | mpu->bit_data[11]));
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	f893 30be 	ldrb.w	r3, [r3, #190]	@ 0xbe
 80013ce:	b21b      	sxth	r3, r3
 80013d0:	021b      	lsls	r3, r3, #8
 80013d2:	b21a      	sxth	r2, r3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f893 30bf 	ldrb.w	r3, [r3, #191]	@ 0xbf
 80013da:	b21b      	sxth	r3, r3
 80013dc:	4313      	orrs	r3, r2
 80013de:	b21a      	sxth	r2, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
	mpu->MAF.rawData[5] = (((mpu->bit_data[12] << 8) | mpu->bit_data[13]));
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 80013ec:	b21b      	sxth	r3, r3
 80013ee:	021b      	lsls	r3, r3, #8
 80013f0:	b21a      	sxth	r2, r3
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 80013f8:	b21b      	sxth	r3, r3
 80013fa:	4313      	orrs	r3, r2
 80013fc:	b21a      	sxth	r2, r3
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	f8a3 20a2 	strh.w	r2, [r3, #162]	@ 0xa2
	mpu->MAF.isOn = TRUE;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2201      	movs	r2, #1
 8001408:	f883 20b1 	strb.w	r2, [r3, #177]	@ 0xb1
}
 800140c:	bf00      	nop
 800140e:	370c      	adds	r7, #12
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr

08001418 <MPU6050_MAF>:

void MPU6050_MAF(s_MPU *mpu){ //Moving Average Filter
 8001418:	b490      	push	{r4, r7}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
	if(mpu->MAF.isOn){
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f893 30b1 	ldrb.w	r3, [r3, #177]	@ 0xb1
 8001426:	2b00      	cmp	r3, #0
 8001428:	f000 80b8 	beq.w	800159c <MPU6050_MAF+0x184>
		mpu->MAF.isOn = FALSE;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2200      	movs	r2, #0
 8001430:	f883 20b1 	strb.w	r2, [r3, #177]	@ 0xb1
		for(uint8_t axis = 0; axis < NUM_AXIS; axis++){
 8001434:	2300      	movs	r3, #0
 8001436:	73fb      	strb	r3, [r7, #15]
 8001438:	e04e      	b.n	80014d8 <MPU6050_MAF+0xc0>
			mpu->MAF.sumData[axis] -= mpu->MAF.mediaBuffer[mpu->MAF.index][axis];
 800143a:	7bfa      	ldrb	r2, [r7, #15]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	3208      	adds	r2, #8
 8001440:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 800144a:	461c      	mov	r4, r3
 800144c:	7bf8      	ldrb	r0, [r7, #15]
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	4623      	mov	r3, r4
 8001452:	005b      	lsls	r3, r3, #1
 8001454:	4423      	add	r3, r4
 8001456:	005b      	lsls	r3, r3, #1
 8001458:	4403      	add	r3, r0
 800145a:	331c      	adds	r3, #28
 800145c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001460:	7bfa      	ldrb	r2, [r7, #15]
 8001462:	1ac9      	subs	r1, r1, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	3208      	adds	r2, #8
 8001468:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			mpu->MAF.sumData[axis] += mpu->MAF.rawData[axis];
 800146c:	7bfa      	ldrb	r2, [r7, #15]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	3208      	adds	r2, #8
 8001472:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001476:	7bf9      	ldrb	r1, [r7, #15]
 8001478:	687a      	ldr	r2, [r7, #4]
 800147a:	314c      	adds	r1, #76	@ 0x4c
 800147c:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8001480:	4611      	mov	r1, r2
 8001482:	7bfa      	ldrb	r2, [r7, #15]
 8001484:	4419      	add	r1, r3
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	3208      	adds	r2, #8
 800148a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			mpu->MAF.mediaBuffer[mpu->MAF.index][axis] = mpu->MAF.rawData[axis];
 800148e:	7bfa      	ldrb	r2, [r7, #15]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 8001496:	4618      	mov	r0, r3
 8001498:	7bf9      	ldrb	r1, [r7, #15]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	324c      	adds	r2, #76	@ 0x4c
 800149e:	f933 4012 	ldrsh.w	r4, [r3, r2, lsl #1]
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	4603      	mov	r3, r0
 80014a6:	005b      	lsls	r3, r3, #1
 80014a8:	4403      	add	r3, r0
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	440b      	add	r3, r1
 80014ae:	331c      	adds	r3, #28
 80014b0:	4621      	mov	r1, r4
 80014b2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			mpu->MAF.filtredData[axis] = (mpu->MAF.sumData[axis] >> NUM_MAF_BITS);
 80014b6:	7bfa      	ldrb	r2, [r7, #15]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	3208      	adds	r2, #8
 80014bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014c0:	10da      	asrs	r2, r3, #3
 80014c2:	7bfb      	ldrb	r3, [r7, #15]
 80014c4:	b211      	sxth	r1, r2
 80014c6:	687a      	ldr	r2, [r7, #4]
 80014c8:	3350      	adds	r3, #80	@ 0x50
 80014ca:	005b      	lsls	r3, r3, #1
 80014cc:	4413      	add	r3, r2
 80014ce:	460a      	mov	r2, r1
 80014d0:	809a      	strh	r2, [r3, #4]
		for(uint8_t axis = 0; axis < NUM_AXIS; axis++){
 80014d2:	7bfb      	ldrb	r3, [r7, #15]
 80014d4:	3301      	adds	r3, #1
 80014d6:	73fb      	strb	r3, [r7, #15]
 80014d8:	7bfb      	ldrb	r3, [r7, #15]
 80014da:	2b05      	cmp	r3, #5
 80014dc:	d9ad      	bls.n	800143a <MPU6050_MAF+0x22>
		}
		mpu->MAF.index++;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 80014e4:	3301      	adds	r3, #1
 80014e6:	b2da      	uxtb	r2, r3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0
		mpu->MAF.index &= (NUM_MAF - 1);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 80014f4:	f003 0307 	and.w	r3, r3, #7
 80014f8:	b2da      	uxtb	r2, r3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0

		// ACC: CALCULATE TRUE ACCELERATION
		mpu->Acc.x = mpu->MAF.filtredData[0] - mpu->Acc.offset.x;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	f9b3 30a4 	ldrsh.w	r3, [r3, #164]	@ 0xa4
 8001506:	b29a      	uxth	r2, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800150e:	b29b      	uxth	r3, r3
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	b29b      	uxth	r3, r3
 8001514:	b21a      	sxth	r2, r3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	801a      	strh	r2, [r3, #0]
		mpu->Acc.y = mpu->MAF.filtredData[1] - mpu->Acc.offset.y;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	f9b3 30a6 	ldrsh.w	r3, [r3, #166]	@ 0xa6
 8001520:	b29a      	uxth	r2, r3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001528:	b29b      	uxth	r3, r3
 800152a:	1ad3      	subs	r3, r2, r3
 800152c:	b29b      	uxth	r3, r3
 800152e:	b21a      	sxth	r2, r3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	805a      	strh	r2, [r3, #2]
		mpu->Acc.z = mpu->MAF.filtredData[2] - mpu->Acc.offset.z;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	f9b3 30a8 	ldrsh.w	r3, [r3, #168]	@ 0xa8
 800153a:	b29a      	uxth	r2, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001542:	b29b      	uxth	r3, r3
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	b29b      	uxth	r3, r3
 8001548:	b21a      	sxth	r2, r3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	809a      	strh	r2, [r3, #4]
		// GYR: CALCULATE TRUE ACCELERATION
		mpu->Gyro.x = mpu->MAF.filtredData[3] - mpu->Gyro.offset.x;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	f9b3 30aa 	ldrsh.w	r3, [r3, #170]	@ 0xaa
 8001554:	b29a      	uxth	r2, r3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800155c:	b29b      	uxth	r3, r3
 800155e:	1ad3      	subs	r3, r2, r3
 8001560:	b29b      	uxth	r3, r3
 8001562:	b21a      	sxth	r2, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	819a      	strh	r2, [r3, #12]
		mpu->Gyro.y = mpu->MAF.filtredData[4] - mpu->Gyro.offset.y;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	f9b3 30ac 	ldrsh.w	r3, [r3, #172]	@ 0xac
 800156e:	b29a      	uxth	r2, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001576:	b29b      	uxth	r3, r3
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	b29b      	uxth	r3, r3
 800157c:	b21a      	sxth	r2, r3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	81da      	strh	r2, [r3, #14]
		mpu->Gyro.z = mpu->MAF.filtredData[5] - mpu->Gyro.offset.z;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	f9b3 30ae 	ldrsh.w	r3, [r3, #174]	@ 0xae
 8001588:	b29a      	uxth	r2, r3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001590:	b29b      	uxth	r3, r3
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	b29b      	uxth	r3, r3
 8001596:	b21a      	sxth	r2, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	821a      	strh	r2, [r3, #16]
	}
}
 800159c:	bf00      	nop
 800159e:	3710      	adds	r7, #16
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bc90      	pop	{r4, r7}
 80015a4:	4770      	bx	lr
	...

080015a8 <Display_Set_I2C_Master_Transmit>:
	uint8_t PageData[6];
}Update;

void Display_Set_I2C_Master_Transmit(
		e_system (*Master_Transmit)(uint16_t DevAddress, uint8_t reg, uint8_t *pData, uint16_t Size),
		e_system (*Master_Transmit_Blocking)(uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)){
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	6039      	str	r1, [r7, #0]
	I2C_Master_Transmit = Master_Transmit;
 80015b2:	4a06      	ldr	r2, [pc, #24]	@ (80015cc <Display_Set_I2C_Master_Transmit+0x24>)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6013      	str	r3, [r2, #0]
	I2C_Master_Transmit_Blocking = Master_Transmit_Blocking;
 80015b8:	4a05      	ldr	r2, [pc, #20]	@ (80015d0 <Display_Set_I2C_Master_Transmit+0x28>)
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	6013      	str	r3, [r2, #0]
}
 80015be:	bf00      	nop
 80015c0:	370c      	adds	r7, #12
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	200003f4 	.word	0x200003f4
 80015d0:	200003f8 	.word	0x200003f8

080015d4 <Display_Init>:

e_system Display_Init(){
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 80015da:	2300      	movs	r3, #0
 80015dc:	71fb      	strb	r3, [r7, #7]

    status += SSD1306_WRITECOMMAND(0xAE);   // Display off
 80015de:	22ae      	movs	r2, #174	@ 0xae
 80015e0:	2100      	movs	r1, #0
 80015e2:	2078      	movs	r0, #120	@ 0x78
 80015e4:	f000 f94a 	bl	800187c <ssd1306_I2C_Write>
 80015e8:	4603      	mov	r3, r0
 80015ea:	461a      	mov	r2, r3
 80015ec:	79fb      	ldrb	r3, [r7, #7]
 80015ee:	4413      	add	r3, r2
 80015f0:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x20);   // Set Memory Addressing Mode
 80015f2:	2220      	movs	r2, #32
 80015f4:	2100      	movs	r1, #0
 80015f6:	2078      	movs	r0, #120	@ 0x78
 80015f8:	f000 f940 	bl	800187c <ssd1306_I2C_Write>
 80015fc:	4603      	mov	r3, r0
 80015fe:	461a      	mov	r2, r3
 8001600:	79fb      	ldrb	r3, [r7, #7]
 8001602:	4413      	add	r3, r2
 8001604:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x10);   // 00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001606:	2210      	movs	r2, #16
 8001608:	2100      	movs	r1, #0
 800160a:	2078      	movs	r0, #120	@ 0x78
 800160c:	f000 f936 	bl	800187c <ssd1306_I2C_Write>
 8001610:	4603      	mov	r3, r0
 8001612:	461a      	mov	r2, r3
 8001614:	79fb      	ldrb	r3, [r7, #7]
 8001616:	4413      	add	r3, r2
 8001618:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xB0);   // Set Page Start Address for Page Addressing Mode,0-7
 800161a:	22b0      	movs	r2, #176	@ 0xb0
 800161c:	2100      	movs	r1, #0
 800161e:	2078      	movs	r0, #120	@ 0x78
 8001620:	f000 f92c 	bl	800187c <ssd1306_I2C_Write>
 8001624:	4603      	mov	r3, r0
 8001626:	461a      	mov	r2, r3
 8001628:	79fb      	ldrb	r3, [r7, #7]
 800162a:	4413      	add	r3, r2
 800162c:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xC8);   // Set COM Output Scan Direction
 800162e:	22c8      	movs	r2, #200	@ 0xc8
 8001630:	2100      	movs	r1, #0
 8001632:	2078      	movs	r0, #120	@ 0x78
 8001634:	f000 f922 	bl	800187c <ssd1306_I2C_Write>
 8001638:	4603      	mov	r3, r0
 800163a:	461a      	mov	r2, r3
 800163c:	79fb      	ldrb	r3, [r7, #7]
 800163e:	4413      	add	r3, r2
 8001640:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x00);   // Set low column address
 8001642:	2200      	movs	r2, #0
 8001644:	2100      	movs	r1, #0
 8001646:	2078      	movs	r0, #120	@ 0x78
 8001648:	f000 f918 	bl	800187c <ssd1306_I2C_Write>
 800164c:	4603      	mov	r3, r0
 800164e:	461a      	mov	r2, r3
 8001650:	79fb      	ldrb	r3, [r7, #7]
 8001652:	4413      	add	r3, r2
 8001654:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x10);   // Set high column address
 8001656:	2210      	movs	r2, #16
 8001658:	2100      	movs	r1, #0
 800165a:	2078      	movs	r0, #120	@ 0x78
 800165c:	f000 f90e 	bl	800187c <ssd1306_I2C_Write>
 8001660:	4603      	mov	r3, r0
 8001662:	461a      	mov	r2, r3
 8001664:	79fb      	ldrb	r3, [r7, #7]
 8001666:	4413      	add	r3, r2
 8001668:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x40);   // Set start line address
 800166a:	2240      	movs	r2, #64	@ 0x40
 800166c:	2100      	movs	r1, #0
 800166e:	2078      	movs	r0, #120	@ 0x78
 8001670:	f000 f904 	bl	800187c <ssd1306_I2C_Write>
 8001674:	4603      	mov	r3, r0
 8001676:	461a      	mov	r2, r3
 8001678:	79fb      	ldrb	r3, [r7, #7]
 800167a:	4413      	add	r3, r2
 800167c:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x81);   // set contrast control register
 800167e:	2281      	movs	r2, #129	@ 0x81
 8001680:	2100      	movs	r1, #0
 8001682:	2078      	movs	r0, #120	@ 0x78
 8001684:	f000 f8fa 	bl	800187c <ssd1306_I2C_Write>
 8001688:	4603      	mov	r3, r0
 800168a:	461a      	mov	r2, r3
 800168c:	79fb      	ldrb	r3, [r7, #7]
 800168e:	4413      	add	r3, r2
 8001690:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xFF);
 8001692:	22ff      	movs	r2, #255	@ 0xff
 8001694:	2100      	movs	r1, #0
 8001696:	2078      	movs	r0, #120	@ 0x78
 8001698:	f000 f8f0 	bl	800187c <ssd1306_I2C_Write>
 800169c:	4603      	mov	r3, r0
 800169e:	461a      	mov	r2, r3
 80016a0:	79fb      	ldrb	r3, [r7, #7]
 80016a2:	4413      	add	r3, r2
 80016a4:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xA1);   // Set segment re-map 0 to 127
 80016a6:	22a1      	movs	r2, #161	@ 0xa1
 80016a8:	2100      	movs	r1, #0
 80016aa:	2078      	movs	r0, #120	@ 0x78
 80016ac:	f000 f8e6 	bl	800187c <ssd1306_I2C_Write>
 80016b0:	4603      	mov	r3, r0
 80016b2:	461a      	mov	r2, r3
 80016b4:	79fb      	ldrb	r3, [r7, #7]
 80016b6:	4413      	add	r3, r2
 80016b8:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xA6);   // Set normal display
 80016ba:	22a6      	movs	r2, #166	@ 0xa6
 80016bc:	2100      	movs	r1, #0
 80016be:	2078      	movs	r0, #120	@ 0x78
 80016c0:	f000 f8dc 	bl	800187c <ssd1306_I2C_Write>
 80016c4:	4603      	mov	r3, r0
 80016c6:	461a      	mov	r2, r3
 80016c8:	79fb      	ldrb	r3, [r7, #7]
 80016ca:	4413      	add	r3, r2
 80016cc:	71fb      	strb	r3, [r7, #7]

    status += SSD1306_WRITECOMMAND(0xA8);   // Set multiplex ratio(1 to 64)
 80016ce:	22a8      	movs	r2, #168	@ 0xa8
 80016d0:	2100      	movs	r1, #0
 80016d2:	2078      	movs	r0, #120	@ 0x78
 80016d4:	f000 f8d2 	bl	800187c <ssd1306_I2C_Write>
 80016d8:	4603      	mov	r3, r0
 80016da:	461a      	mov	r2, r3
 80016dc:	79fb      	ldrb	r3, [r7, #7]
 80016de:	4413      	add	r3, r2
 80016e0:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(SSD1306_HEIGHT - 1);
 80016e2:	223f      	movs	r2, #63	@ 0x3f
 80016e4:	2100      	movs	r1, #0
 80016e6:	2078      	movs	r0, #120	@ 0x78
 80016e8:	f000 f8c8 	bl	800187c <ssd1306_I2C_Write>
 80016ec:	4603      	mov	r3, r0
 80016ee:	461a      	mov	r2, r3
 80016f0:	79fb      	ldrb	r3, [r7, #7]
 80016f2:	4413      	add	r3, r2
 80016f4:	71fb      	strb	r3, [r7, #7]

    status += SSD1306_WRITECOMMAND(0xA4);   // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80016f6:	22a4      	movs	r2, #164	@ 0xa4
 80016f8:	2100      	movs	r1, #0
 80016fa:	2078      	movs	r0, #120	@ 0x78
 80016fc:	f000 f8be 	bl	800187c <ssd1306_I2C_Write>
 8001700:	4603      	mov	r3, r0
 8001702:	461a      	mov	r2, r3
 8001704:	79fb      	ldrb	r3, [r7, #7]
 8001706:	4413      	add	r3, r2
 8001708:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xD3);   // Set display offset
 800170a:	22d3      	movs	r2, #211	@ 0xd3
 800170c:	2100      	movs	r1, #0
 800170e:	2078      	movs	r0, #120	@ 0x78
 8001710:	f000 f8b4 	bl	800187c <ssd1306_I2C_Write>
 8001714:	4603      	mov	r3, r0
 8001716:	461a      	mov	r2, r3
 8001718:	79fb      	ldrb	r3, [r7, #7]
 800171a:	4413      	add	r3, r2
 800171c:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x00);   // No offset
 800171e:	2200      	movs	r2, #0
 8001720:	2100      	movs	r1, #0
 8001722:	2078      	movs	r0, #120	@ 0x78
 8001724:	f000 f8aa 	bl	800187c <ssd1306_I2C_Write>
 8001728:	4603      	mov	r3, r0
 800172a:	461a      	mov	r2, r3
 800172c:	79fb      	ldrb	r3, [r7, #7]
 800172e:	4413      	add	r3, r2
 8001730:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xD5);   // Set display clock divide ratio/oscillator frequency
 8001732:	22d5      	movs	r2, #213	@ 0xd5
 8001734:	2100      	movs	r1, #0
 8001736:	2078      	movs	r0, #120	@ 0x78
 8001738:	f000 f8a0 	bl	800187c <ssd1306_I2C_Write>
 800173c:	4603      	mov	r3, r0
 800173e:	461a      	mov	r2, r3
 8001740:	79fb      	ldrb	r3, [r7, #7]
 8001742:	4413      	add	r3, r2
 8001744:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xF0);   // Set divide ratio
 8001746:	22f0      	movs	r2, #240	@ 0xf0
 8001748:	2100      	movs	r1, #0
 800174a:	2078      	movs	r0, #120	@ 0x78
 800174c:	f000 f896 	bl	800187c <ssd1306_I2C_Write>
 8001750:	4603      	mov	r3, r0
 8001752:	461a      	mov	r2, r3
 8001754:	79fb      	ldrb	r3, [r7, #7]
 8001756:	4413      	add	r3, r2
 8001758:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xD9);   // Set pre-charge period
 800175a:	22d9      	movs	r2, #217	@ 0xd9
 800175c:	2100      	movs	r1, #0
 800175e:	2078      	movs	r0, #120	@ 0x78
 8001760:	f000 f88c 	bl	800187c <ssd1306_I2C_Write>
 8001764:	4603      	mov	r3, r0
 8001766:	461a      	mov	r2, r3
 8001768:	79fb      	ldrb	r3, [r7, #7]
 800176a:	4413      	add	r3, r2
 800176c:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x22);
 800176e:	2222      	movs	r2, #34	@ 0x22
 8001770:	2100      	movs	r1, #0
 8001772:	2078      	movs	r0, #120	@ 0x78
 8001774:	f000 f882 	bl	800187c <ssd1306_I2C_Write>
 8001778:	4603      	mov	r3, r0
 800177a:	461a      	mov	r2, r3
 800177c:	79fb      	ldrb	r3, [r7, #7]
 800177e:	4413      	add	r3, r2
 8001780:	71fb      	strb	r3, [r7, #7]

    status += SSD1306_WRITECOMMAND(0xDA);   // Set com pins hardware configuration
 8001782:	22da      	movs	r2, #218	@ 0xda
 8001784:	2100      	movs	r1, #0
 8001786:	2078      	movs	r0, #120	@ 0x78
 8001788:	f000 f878 	bl	800187c <ssd1306_I2C_Write>
 800178c:	4603      	mov	r3, r0
 800178e:	461a      	mov	r2, r3
 8001790:	79fb      	ldrb	r3, [r7, #7]
 8001792:	4413      	add	r3, r2
 8001794:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(Display_COM_LR_REMAP << 5 | Display_COM_ALTERNATIVE_PIN_CONFIG << 4 | 0x02);
 8001796:	2212      	movs	r2, #18
 8001798:	2100      	movs	r1, #0
 800179a:	2078      	movs	r0, #120	@ 0x78
 800179c:	f000 f86e 	bl	800187c <ssd1306_I2C_Write>
 80017a0:	4603      	mov	r3, r0
 80017a2:	461a      	mov	r2, r3
 80017a4:	79fb      	ldrb	r3, [r7, #7]
 80017a6:	4413      	add	r3, r2
 80017a8:	71fb      	strb	r3, [r7, #7]

    status += SSD1306_WRITECOMMAND(0xDB);   // Set vcomh
 80017aa:	22db      	movs	r2, #219	@ 0xdb
 80017ac:	2100      	movs	r1, #0
 80017ae:	2078      	movs	r0, #120	@ 0x78
 80017b0:	f000 f864 	bl	800187c <ssd1306_I2C_Write>
 80017b4:	4603      	mov	r3, r0
 80017b6:	461a      	mov	r2, r3
 80017b8:	79fb      	ldrb	r3, [r7, #7]
 80017ba:	4413      	add	r3, r2
 80017bc:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x20);   // 0x20,0.77xVcc
 80017be:	2220      	movs	r2, #32
 80017c0:	2100      	movs	r1, #0
 80017c2:	2078      	movs	r0, #120	@ 0x78
 80017c4:	f000 f85a 	bl	800187c <ssd1306_I2C_Write>
 80017c8:	4603      	mov	r3, r0
 80017ca:	461a      	mov	r2, r3
 80017cc:	79fb      	ldrb	r3, [r7, #7]
 80017ce:	4413      	add	r3, r2
 80017d0:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x8D);   // Set DC-DC enable
 80017d2:	228d      	movs	r2, #141	@ 0x8d
 80017d4:	2100      	movs	r1, #0
 80017d6:	2078      	movs	r0, #120	@ 0x78
 80017d8:	f000 f850 	bl	800187c <ssd1306_I2C_Write>
 80017dc:	4603      	mov	r3, r0
 80017de:	461a      	mov	r2, r3
 80017e0:	79fb      	ldrb	r3, [r7, #7]
 80017e2:	4413      	add	r3, r2
 80017e4:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x14);   //
 80017e6:	2214      	movs	r2, #20
 80017e8:	2100      	movs	r1, #0
 80017ea:	2078      	movs	r0, #120	@ 0x78
 80017ec:	f000 f846 	bl	800187c <ssd1306_I2C_Write>
 80017f0:	4603      	mov	r3, r0
 80017f2:	461a      	mov	r2, r3
 80017f4:	79fb      	ldrb	r3, [r7, #7]
 80017f6:	4413      	add	r3, r2
 80017f8:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xAF);   // Turn on Display panel
 80017fa:	22af      	movs	r2, #175	@ 0xaf
 80017fc:	2100      	movs	r1, #0
 80017fe:	2078      	movs	r0, #120	@ 0x78
 8001800:	f000 f83c 	bl	800187c <ssd1306_I2C_Write>
 8001804:	4603      	mov	r3, r0
 8001806:	461a      	mov	r2, r3
 8001808:	79fb      	ldrb	r3, [r7, #7]
 800180a:	4413      	add	r3, r2
 800180c:	71fb      	strb	r3, [r7, #7]

	status += SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800180e:	222e      	movs	r2, #46	@ 0x2e
 8001810:	2100      	movs	r1, #0
 8001812:	2078      	movs	r0, #120	@ 0x78
 8001814:	f000 f832 	bl	800187c <ssd1306_I2C_Write>
 8001818:	4603      	mov	r3, r0
 800181a:	461a      	mov	r2, r3
 800181c:	79fb      	ldrb	r3, [r7, #7]
 800181e:	4413      	add	r3, r2
 8001820:	71fb      	strb	r3, [r7, #7]

	/* Clear screen */
	Display_Fill(SSD1306_COLOR_BLACK);
 8001822:	2000      	movs	r0, #0
 8001824:	f000 f8e8 	bl	80019f8 <Display_Fill>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8001828:	4b12      	ldr	r3, [pc, #72]	@ (8001874 <Display_Init+0x2a0>)
 800182a:	2200      	movs	r2, #0
 800182c:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800182e:	4b11      	ldr	r3, [pc, #68]	@ (8001874 <Display_Init+0x2a0>)
 8001830:	2200      	movs	r2, #0
 8001832:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = TRUE;
 8001834:	4b0f      	ldr	r3, [pc, #60]	@ (8001874 <Display_Init+0x2a0>)
 8001836:	2201      	movs	r2, #1
 8001838:	715a      	strb	r2, [r3, #5]

	Update.state = PAGE;
 800183a:	4b0f      	ldr	r3, [pc, #60]	@ (8001878 <Display_Init+0x2a4>)
 800183c:	2200      	movs	r2, #0
 800183e:	70da      	strb	r2, [r3, #3]
	Update.Page = 0;
 8001840:	4b0d      	ldr	r3, [pc, #52]	@ (8001878 <Display_Init+0x2a4>)
 8001842:	2200      	movs	r2, #0
 8001844:	709a      	strb	r2, [r3, #2]
	Update.Ready_DMA = TRUE;
 8001846:	4b0c      	ldr	r3, [pc, #48]	@ (8001878 <Display_Init+0x2a4>)
 8001848:	2201      	movs	r2, #1
 800184a:	705a      	strb	r2, [r3, #1]
	Update.Ready_To_Refresh = FALSE;
 800184c:	4b0a      	ldr	r3, [pc, #40]	@ (8001878 <Display_Init+0x2a4>)
 800184e:	2200      	movs	r2, #0
 8001850:	701a      	strb	r2, [r3, #0]

	Update.PageData[0] = 0xB0 + Update.Page;
 8001852:	4b09      	ldr	r3, [pc, #36]	@ (8001878 <Display_Init+0x2a4>)
 8001854:	789b      	ldrb	r3, [r3, #2]
 8001856:	3b50      	subs	r3, #80	@ 0x50
 8001858:	b2da      	uxtb	r2, r3
 800185a:	4b07      	ldr	r3, [pc, #28]	@ (8001878 <Display_Init+0x2a4>)
 800185c:	711a      	strb	r2, [r3, #4]
	Update.PageData[1] = 0x00; //< acá seleccionamos Lower start
 800185e:	4b06      	ldr	r3, [pc, #24]	@ (8001878 <Display_Init+0x2a4>)
 8001860:	2200      	movs	r2, #0
 8001862:	715a      	strb	r2, [r3, #5]
	Update.PageData[2] = 0x10; //< y acá upper start
 8001864:	4b04      	ldr	r3, [pc, #16]	@ (8001878 <Display_Init+0x2a4>)
 8001866:	2210      	movs	r2, #16
 8001868:	719a      	strb	r2, [r3, #6]

	/* Return OK */
	return status;
 800186a:	79fb      	ldrb	r3, [r7, #7]
}
 800186c:	4618      	mov	r0, r3
 800186e:	3708      	adds	r7, #8
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	200003ec 	.word	0x200003ec
 8001878:	200007fc 	.word	0x200007fc

0800187c <ssd1306_I2C_Write>:

e_system ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data){
 800187c:	b590      	push	{r4, r7, lr}
 800187e:	b085      	sub	sp, #20
 8001880:	af00      	add	r7, sp, #0
 8001882:	4603      	mov	r3, r0
 8001884:	71fb      	strb	r3, [r7, #7]
 8001886:	460b      	mov	r3, r1
 8001888:	71bb      	strb	r3, [r7, #6]
 800188a:	4613      	mov	r3, r2
 800188c:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800188e:	79bb      	ldrb	r3, [r7, #6]
 8001890:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001892:	797b      	ldrb	r3, [r7, #5]
 8001894:	737b      	strb	r3, [r7, #13]
	return I2C_Master_Transmit_Blocking(address, dt, 2, 10);
 8001896:	4b07      	ldr	r3, [pc, #28]	@ (80018b4 <ssd1306_I2C_Write+0x38>)
 8001898:	681c      	ldr	r4, [r3, #0]
 800189a:	79fb      	ldrb	r3, [r7, #7]
 800189c:	b298      	uxth	r0, r3
 800189e:	f107 010c 	add.w	r1, r7, #12
 80018a2:	230a      	movs	r3, #10
 80018a4:	2202      	movs	r2, #2
 80018a6:	47a0      	blx	r4
 80018a8:	4603      	mov	r3, r0
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3714      	adds	r7, #20
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd90      	pop	{r4, r7, pc}
 80018b2:	bf00      	nop
 80018b4:	200003f8 	.word	0x200003f8

080018b8 <Display_UpdateScreen_Task>:

e_system Display_UpdateScreen_Task() {
 80018b8:	b598      	push	{r3, r4, r7, lr}
 80018ba:	af00      	add	r7, sp, #0
	if(Update.Ready_To_Refresh && Update.Ready_DMA && SSD1306.Initialized){
 80018bc:	4b2d      	ldr	r3, [pc, #180]	@ (8001974 <Display_UpdateScreen_Task+0xbc>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d054      	beq.n	800196e <Display_UpdateScreen_Task+0xb6>
 80018c4:	4b2b      	ldr	r3, [pc, #172]	@ (8001974 <Display_UpdateScreen_Task+0xbc>)
 80018c6:	785b      	ldrb	r3, [r3, #1]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d050      	beq.n	800196e <Display_UpdateScreen_Task+0xb6>
 80018cc:	4b2a      	ldr	r3, [pc, #168]	@ (8001978 <Display_UpdateScreen_Task+0xc0>)
 80018ce:	795b      	ldrb	r3, [r3, #5]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d04c      	beq.n	800196e <Display_UpdateScreen_Task+0xb6>

		switch(Update.state){
 80018d4:	4b27      	ldr	r3, [pc, #156]	@ (8001974 <Display_UpdateScreen_Task+0xbc>)
 80018d6:	78db      	ldrb	r3, [r3, #3]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d002      	beq.n	80018e2 <Display_UpdateScreen_Task+0x2a>
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d01c      	beq.n	800191a <Display_UpdateScreen_Task+0x62>
 80018e0:	e038      	b.n	8001954 <Display_UpdateScreen_Task+0x9c>
		case PAGE:
			Update.PageData[0] = 0xB0 + Update.Page;     // Set Page
 80018e2:	4b24      	ldr	r3, [pc, #144]	@ (8001974 <Display_UpdateScreen_Task+0xbc>)
 80018e4:	789b      	ldrb	r3, [r3, #2]
 80018e6:	3b50      	subs	r3, #80	@ 0x50
 80018e8:	b2da      	uxtb	r2, r3
 80018ea:	4b22      	ldr	r3, [pc, #136]	@ (8001974 <Display_UpdateScreen_Task+0xbc>)
 80018ec:	711a      	strb	r2, [r3, #4]
			Update.PageData[1] = 0x00;                   // Lower Column
 80018ee:	4b21      	ldr	r3, [pc, #132]	@ (8001974 <Display_UpdateScreen_Task+0xbc>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	715a      	strb	r2, [r3, #5]
			Update.PageData[2] = 0x10;                   // Upper Column
 80018f4:	4b1f      	ldr	r3, [pc, #124]	@ (8001974 <Display_UpdateScreen_Task+0xbc>)
 80018f6:	2210      	movs	r2, #16
 80018f8:	719a      	strb	r2, [r3, #6]
			if(I2C_Master_Transmit(SSD1306_I2C_ADDR, 0x00, Update.PageData, 3)		== SYS_OK){
 80018fa:	4b20      	ldr	r3, [pc, #128]	@ (800197c <Display_UpdateScreen_Task+0xc4>)
 80018fc:	681c      	ldr	r4, [r3, #0]
 80018fe:	2303      	movs	r3, #3
 8001900:	4a1f      	ldr	r2, [pc, #124]	@ (8001980 <Display_UpdateScreen_Task+0xc8>)
 8001902:	2100      	movs	r1, #0
 8001904:	2078      	movs	r0, #120	@ 0x78
 8001906:	47a0      	blx	r4
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d103      	bne.n	8001916 <Display_UpdateScreen_Task+0x5e>
				Update.state = DATA;
 800190e:	4b19      	ldr	r3, [pc, #100]	@ (8001974 <Display_UpdateScreen_Task+0xbc>)
 8001910:	2201      	movs	r2, #1
 8001912:	70da      	strb	r2, [r3, #3]
				//Update.Ready_DMA = FALSE;     //< LO DESACTIVO PARA QUE PAGE Y DATA SE HAGA DE UNA SOLA PASADA
			}else{
				return SYS_ERROR;
			}
			break;
 8001914:	e021      	b.n	800195a <Display_UpdateScreen_Task+0xa2>
				return SYS_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e02a      	b.n	8001970 <Display_UpdateScreen_Task+0xb8>
		case DATA:
			if(I2C_Master_Transmit(	SSD1306_I2C_ADDR, 0x40,
 800191a:	4b18      	ldr	r3, [pc, #96]	@ (800197c <Display_UpdateScreen_Task+0xc4>)
 800191c:	681c      	ldr	r4, [r3, #0]
									&OLED_DMA_BUFFER[SSD1306_WIDTH * Update.Page],
 800191e:	4b15      	ldr	r3, [pc, #84]	@ (8001974 <Display_UpdateScreen_Task+0xbc>)
 8001920:	789b      	ldrb	r3, [r3, #2]
 8001922:	01db      	lsls	r3, r3, #7
			if(I2C_Master_Transmit(	SSD1306_I2C_ADDR, 0x40,
 8001924:	4a17      	ldr	r2, [pc, #92]	@ (8001984 <Display_UpdateScreen_Task+0xcc>)
 8001926:	441a      	add	r2, r3
 8001928:	2380      	movs	r3, #128	@ 0x80
 800192a:	2140      	movs	r1, #64	@ 0x40
 800192c:	2078      	movs	r0, #120	@ 0x78
 800192e:	47a0      	blx	r4
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d10c      	bne.n	8001950 <Display_UpdateScreen_Task+0x98>
									SSD1306_WIDTH) 									== SYS_OK){
				Update.Page++;
 8001936:	4b0f      	ldr	r3, [pc, #60]	@ (8001974 <Display_UpdateScreen_Task+0xbc>)
 8001938:	789b      	ldrb	r3, [r3, #2]
 800193a:	3301      	adds	r3, #1
 800193c:	b2da      	uxtb	r2, r3
 800193e:	4b0d      	ldr	r3, [pc, #52]	@ (8001974 <Display_UpdateScreen_Task+0xbc>)
 8001940:	709a      	strb	r2, [r3, #2]
				Update.state = PAGE;
 8001942:	4b0c      	ldr	r3, [pc, #48]	@ (8001974 <Display_UpdateScreen_Task+0xbc>)
 8001944:	2200      	movs	r2, #0
 8001946:	70da      	strb	r2, [r3, #3]
				Update.Ready_DMA = FALSE;
 8001948:	4b0a      	ldr	r3, [pc, #40]	@ (8001974 <Display_UpdateScreen_Task+0xbc>)
 800194a:	2200      	movs	r2, #0
 800194c:	705a      	strb	r2, [r3, #1]
			}else{
				return SYS_ERROR;
			}
			break;
 800194e:	e004      	b.n	800195a <Display_UpdateScreen_Task+0xa2>
				return SYS_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e00d      	b.n	8001970 <Display_UpdateScreen_Task+0xb8>
		default:
			Update.Page = 8; //!< fuerzo el if de abajo para reiniciar el sistema
 8001954:	4b07      	ldr	r3, [pc, #28]	@ (8001974 <Display_UpdateScreen_Task+0xbc>)
 8001956:	2208      	movs	r2, #8
 8001958:	709a      	strb	r2, [r3, #2]
		}
		if(Update.Page > 7){
 800195a:	4b06      	ldr	r3, [pc, #24]	@ (8001974 <Display_UpdateScreen_Task+0xbc>)
 800195c:	789b      	ldrb	r3, [r3, #2]
 800195e:	2b07      	cmp	r3, #7
 8001960:	d905      	bls.n	800196e <Display_UpdateScreen_Task+0xb6>
			Update.Page = 0;
 8001962:	4b04      	ldr	r3, [pc, #16]	@ (8001974 <Display_UpdateScreen_Task+0xbc>)
 8001964:	2200      	movs	r2, #0
 8001966:	709a      	strb	r2, [r3, #2]
			Update.Ready_To_Refresh = FALSE;
 8001968:	4b02      	ldr	r3, [pc, #8]	@ (8001974 <Display_UpdateScreen_Task+0xbc>)
 800196a:	2200      	movs	r2, #0
 800196c:	701a      	strb	r2, [r3, #0]
		}
	}

	return SYS_OK;
 800196e:	2300      	movs	r3, #0
}
 8001970:	4618      	mov	r0, r3
 8001972:	bd98      	pop	{r3, r4, r7, pc}
 8001974:	200007fc 	.word	0x200007fc
 8001978:	200003ec 	.word	0x200003ec
 800197c:	200003f4 	.word	0x200003f4
 8001980:	20000800 	.word	0x20000800
 8001984:	200003fc 	.word	0x200003fc

08001988 <Display_I2C_DMA_Ready>:

void Display_I2C_DMA_Ready(uint8_t val){
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	4603      	mov	r3, r0
 8001990:	71fb      	strb	r3, [r7, #7]
	Update.Ready_DMA = val;
 8001992:	4a04      	ldr	r2, [pc, #16]	@ (80019a4 <Display_I2C_DMA_Ready+0x1c>)
 8001994:	79fb      	ldrb	r3, [r7, #7]
 8001996:	7053      	strb	r3, [r2, #1]
}
 8001998:	bf00      	nop
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr
 80019a4:	200007fc 	.word	0x200007fc

080019a8 <Display_I2C_Refresh_Ready>:

void Display_I2C_Refresh_Ready(uint8_t val){
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	4603      	mov	r3, r0
 80019b0:	71fb      	strb	r3, [r7, #7]
	Update.Ready_To_Refresh = val;
 80019b2:	4a04      	ldr	r2, [pc, #16]	@ (80019c4 <Display_I2C_Refresh_Ready+0x1c>)
 80019b4:	79fb      	ldrb	r3, [r7, #7]
 80019b6:	7013      	strb	r3, [r2, #0]
}
 80019b8:	bf00      	nop
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr
 80019c4:	200007fc 	.word	0x200007fc

080019c8 <Display_SetCursor>:

/**
 * SET CURSOR POSITION
 */
void Display_SetCursor(uint8_t x, uint8_t y)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4603      	mov	r3, r0
 80019d0:	460a      	mov	r2, r1
 80019d2:	71fb      	strb	r3, [r7, #7]
 80019d4:	4613      	mov	r3, r2
 80019d6:	71bb      	strb	r3, [r7, #6]
	SSD1306.CurrentX = x;
 80019d8:	79fb      	ldrb	r3, [r7, #7]
 80019da:	b29a      	uxth	r2, r3
 80019dc:	4b05      	ldr	r3, [pc, #20]	@ (80019f4 <Display_SetCursor+0x2c>)
 80019de:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 80019e0:	79bb      	ldrb	r3, [r7, #6]
 80019e2:	b29a      	uxth	r2, r3
 80019e4:	4b03      	ldr	r3, [pc, #12]	@ (80019f4 <Display_SetCursor+0x2c>)
 80019e6:	805a      	strh	r2, [r3, #2]
}
 80019e8:	bf00      	nop
 80019ea:	370c      	adds	r7, #12
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr
 80019f4:	200003ec 	.word	0x200003ec

080019f8 <Display_Fill>:

void Display_Fill(SSD1306_COLOR_t color) {
 80019f8:	b480      	push	{r7}
 80019fa:	b085      	sub	sp, #20
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	4603      	mov	r3, r0
 8001a00:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	//memset(OLED_DMA_BUFFER, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, 1024);
	uint32_t i;

	for(i = 0; i < sizeof(OLED_DMA_BUFFER); i++)	// Fill screenbuffer with a constant value (color)
 8001a02:	2300      	movs	r3, #0
 8001a04:	60fb      	str	r3, [r7, #12]
 8001a06:	e00d      	b.n	8001a24 <Display_Fill+0x2c>
	{
		OLED_DMA_BUFFER[i] = (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF;
 8001a08:	79fb      	ldrb	r3, [r7, #7]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d101      	bne.n	8001a12 <Display_Fill+0x1a>
 8001a0e:	2100      	movs	r1, #0
 8001a10:	e000      	b.n	8001a14 <Display_Fill+0x1c>
 8001a12:	21ff      	movs	r1, #255	@ 0xff
 8001a14:	4a09      	ldr	r2, [pc, #36]	@ (8001a3c <Display_Fill+0x44>)
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	4413      	add	r3, r2
 8001a1a:	460a      	mov	r2, r1
 8001a1c:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < sizeof(OLED_DMA_BUFFER); i++)	// Fill screenbuffer with a constant value (color)
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	3301      	adds	r3, #1
 8001a22:	60fb      	str	r3, [r7, #12]
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a2a:	d3ed      	bcc.n	8001a08 <Display_Fill+0x10>
	}
}
 8001a2c:	bf00      	nop
 8001a2e:	bf00      	nop
 8001a30:	3714      	adds	r7, #20
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	200003fc 	.word	0x200003fc

08001a40 <Display_DrawPixel>:

void Display_Clear (void){
	Display_Fill (0);
}

void Display_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	4603      	mov	r3, r0
 8001a48:	80fb      	strh	r3, [r7, #6]
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	80bb      	strh	r3, [r7, #4]
 8001a4e:	4613      	mov	r3, r2
 8001a50:	70fb      	strb	r3, [r7, #3]
	if (
 8001a52:	88fb      	ldrh	r3, [r7, #6]
 8001a54:	2b7f      	cmp	r3, #127	@ 0x7f
 8001a56:	d848      	bhi.n	8001aea <Display_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001a58:	88bb      	ldrh	r3, [r7, #4]
 8001a5a:	2b3f      	cmp	r3, #63	@ 0x3f
 8001a5c:	d845      	bhi.n	8001aea <Display_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001a5e:	4b26      	ldr	r3, [pc, #152]	@ (8001af8 <Display_DrawPixel+0xb8>)
 8001a60:	791b      	ldrb	r3, [r3, #4]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d006      	beq.n	8001a74 <Display_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001a66:	78fb      	ldrb	r3, [r7, #3]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	bf0c      	ite	eq
 8001a6c:	2301      	moveq	r3, #1
 8001a6e:	2300      	movne	r3, #0
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001a74:	78fb      	ldrb	r3, [r7, #3]
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d11a      	bne.n	8001ab0 <Display_DrawPixel+0x70>
		OLED_DMA_BUFFER[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001a7a:	88fa      	ldrh	r2, [r7, #6]
 8001a7c:	88bb      	ldrh	r3, [r7, #4]
 8001a7e:	08db      	lsrs	r3, r3, #3
 8001a80:	b298      	uxth	r0, r3
 8001a82:	4603      	mov	r3, r0
 8001a84:	01db      	lsls	r3, r3, #7
 8001a86:	4413      	add	r3, r2
 8001a88:	4a1c      	ldr	r2, [pc, #112]	@ (8001afc <Display_DrawPixel+0xbc>)
 8001a8a:	5cd3      	ldrb	r3, [r2, r3]
 8001a8c:	b25a      	sxtb	r2, r3
 8001a8e:	88bb      	ldrh	r3, [r7, #4]
 8001a90:	f003 0307 	and.w	r3, r3, #7
 8001a94:	2101      	movs	r1, #1
 8001a96:	fa01 f303 	lsl.w	r3, r1, r3
 8001a9a:	b25b      	sxtb	r3, r3
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	b259      	sxtb	r1, r3
 8001aa0:	88fa      	ldrh	r2, [r7, #6]
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	01db      	lsls	r3, r3, #7
 8001aa6:	4413      	add	r3, r2
 8001aa8:	b2c9      	uxtb	r1, r1
 8001aaa:	4a14      	ldr	r2, [pc, #80]	@ (8001afc <Display_DrawPixel+0xbc>)
 8001aac:	54d1      	strb	r1, [r2, r3]
 8001aae:	e01d      	b.n	8001aec <Display_DrawPixel+0xac>
	} else {
		OLED_DMA_BUFFER[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001ab0:	88fa      	ldrh	r2, [r7, #6]
 8001ab2:	88bb      	ldrh	r3, [r7, #4]
 8001ab4:	08db      	lsrs	r3, r3, #3
 8001ab6:	b298      	uxth	r0, r3
 8001ab8:	4603      	mov	r3, r0
 8001aba:	01db      	lsls	r3, r3, #7
 8001abc:	4413      	add	r3, r2
 8001abe:	4a0f      	ldr	r2, [pc, #60]	@ (8001afc <Display_DrawPixel+0xbc>)
 8001ac0:	5cd3      	ldrb	r3, [r2, r3]
 8001ac2:	b25a      	sxtb	r2, r3
 8001ac4:	88bb      	ldrh	r3, [r7, #4]
 8001ac6:	f003 0307 	and.w	r3, r3, #7
 8001aca:	2101      	movs	r1, #1
 8001acc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad0:	b25b      	sxtb	r3, r3
 8001ad2:	43db      	mvns	r3, r3
 8001ad4:	b25b      	sxtb	r3, r3
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	b259      	sxtb	r1, r3
 8001ada:	88fa      	ldrh	r2, [r7, #6]
 8001adc:	4603      	mov	r3, r0
 8001ade:	01db      	lsls	r3, r3, #7
 8001ae0:	4413      	add	r3, r2
 8001ae2:	b2c9      	uxtb	r1, r1
 8001ae4:	4a05      	ldr	r2, [pc, #20]	@ (8001afc <Display_DrawPixel+0xbc>)
 8001ae6:	54d1      	strb	r1, [r2, r3]
 8001ae8:	e000      	b.n	8001aec <Display_DrawPixel+0xac>
		return;
 8001aea:	bf00      	nop
	}
}
 8001aec:	370c      	adds	r7, #12
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	200003ec 	.word	0x200003ec
 8001afc:	200003fc 	.word	0x200003fc

08001b00 <Display_DrawBitmap>:

void Display_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b086      	sub	sp, #24
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	60ba      	str	r2, [r7, #8]
 8001b08:	461a      	mov	r2, r3
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	81fb      	strh	r3, [r7, #14]
 8001b0e:	460b      	mov	r3, r1
 8001b10:	81bb      	strh	r3, [r7, #12]
 8001b12:	4613      	mov	r3, r2
 8001b14:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8001b16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b1a:	3307      	adds	r3, #7
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	da00      	bge.n	8001b22 <Display_DrawBitmap+0x22>
 8001b20:	3307      	adds	r3, #7
 8001b22:	10db      	asrs	r3, r3, #3
 8001b24:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 8001b26:	2300      	movs	r3, #0
 8001b28:	75fb      	strb	r3, [r7, #23]

    //memcpy(&OLED_DMA_BUFFER[OFFSET_DATA], bitmap, 1024);
	/*for(uint16_t i = 0; i<1024; i++){
		OLED_DMA_BUFFER[i] = bitmap[i];
	}*/
    for(int16_t j=0; j<h; j++, y++)
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	82bb      	strh	r3, [r7, #20]
 8001b2e:	e044      	b.n	8001bba <Display_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 8001b30:	2300      	movs	r3, #0
 8001b32:	827b      	strh	r3, [r7, #18]
 8001b34:	e02f      	b.n	8001b96 <Display_DrawBitmap+0x96>
        {
            if(i & 7)
 8001b36:	8a7b      	ldrh	r3, [r7, #18]
 8001b38:	f003 0307 	and.w	r3, r3, #7
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d003      	beq.n	8001b48 <Display_DrawBitmap+0x48>
            {
               byte <<= 1;
 8001b40:	7dfb      	ldrb	r3, [r7, #23]
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	75fb      	strb	r3, [r7, #23]
 8001b46:	e012      	b.n	8001b6e <Display_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8001b48:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001b4c:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001b50:	fb03 f202 	mul.w	r2, r3, r2
 8001b54:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	da00      	bge.n	8001b5e <Display_DrawBitmap+0x5e>
 8001b5c:	3307      	adds	r3, #7
 8001b5e:	10db      	asrs	r3, r3, #3
 8001b60:	b21b      	sxth	r3, r3
 8001b62:	4413      	add	r3, r2
 8001b64:	461a      	mov	r2, r3
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	4413      	add	r3, r2
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) Display_DrawPixel(x+i, y, color);
 8001b6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	da09      	bge.n	8001b8a <Display_DrawBitmap+0x8a>
 8001b76:	89fa      	ldrh	r2, [r7, #14]
 8001b78:	8a7b      	ldrh	r3, [r7, #18]
 8001b7a:	4413      	add	r3, r2
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	89b9      	ldrh	r1, [r7, #12]
 8001b80:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001b82:	b2d2      	uxtb	r2, r2
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff ff5b 	bl	8001a40 <Display_DrawPixel>
        for(int16_t i=0; i<w; i++)
 8001b8a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	3301      	adds	r3, #1
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	827b      	strh	r3, [r7, #18]
 8001b96:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001b9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	dbc9      	blt.n	8001b36 <Display_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 8001ba2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001ba6:	b29b      	uxth	r3, r3
 8001ba8:	3301      	adds	r3, #1
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	82bb      	strh	r3, [r7, #20]
 8001bae:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001bb2:	b29b      	uxth	r3, r3
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	b29b      	uxth	r3, r3
 8001bb8:	81bb      	strh	r3, [r7, #12]
 8001bba:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001bbe:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	dbb4      	blt.n	8001b30 <Display_DrawBitmap+0x30>
        }
    }
}
 8001bc6:	bf00      	nop
 8001bc8:	bf00      	nop
 8001bca:	3718      	adds	r7, #24
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <Display_WriteChar>:

/**
 * WRITE A CHAR INTO THE DISPLAY BUFFER
 */
char Display_WriteChar(char ch, FontDef_t Font, SSD1306_COLOR_t color)
{
 8001bd0:	b590      	push	{r4, r7, lr}
 8001bd2:	b089      	sub	sp, #36	@ 0x24
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	4604      	mov	r4, r0
 8001bd8:	1d38      	adds	r0, r7, #4
 8001bda:	e880 0006 	stmia.w	r0, {r1, r2}
 8001bde:	461a      	mov	r2, r3
 8001be0:	4623      	mov	r3, r4
 8001be2:	73fb      	strb	r3, [r7, #15]
 8001be4:	4613      	mov	r3, r2
 8001be6:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8001be8:	4b36      	ldr	r3, [pc, #216]	@ (8001cc4 <Display_WriteChar+0xf4>)
 8001bea:	881b      	ldrh	r3, [r3, #0]
 8001bec:	461a      	mov	r2, r3
 8001bee:	793b      	ldrb	r3, [r7, #4]
 8001bf0:	4413      	add	r3, r2
 8001bf2:	2b7f      	cmp	r3, #127	@ 0x7f
 8001bf4:	dc06      	bgt.n	8001c04 <Display_WriteChar+0x34>
    		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8001bf6:	4b33      	ldr	r3, [pc, #204]	@ (8001cc4 <Display_WriteChar+0xf4>)
 8001bf8:	885b      	ldrh	r3, [r3, #2]
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	797b      	ldrb	r3, [r7, #5]
 8001bfe:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8001c00:	2b3f      	cmp	r3, #63	@ 0x3f
 8001c02:	dd01      	ble.n	8001c08 <Display_WriteChar+0x38>
    {

        return 0;	// Not enough space on current line
 8001c04:	2300      	movs	r3, #0
 8001c06:	e058      	b.n	8001cba <Display_WriteChar+0xea>
    }

    for (i = 0; i < Font.FontHeight; i++)	// Translate font to screenbuffer
 8001c08:	2300      	movs	r3, #0
 8001c0a:	61fb      	str	r3, [r7, #28]
 8001c0c:	e048      	b.n	8001ca0 <Display_WriteChar+0xd0>
    {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001c0e:	68ba      	ldr	r2, [r7, #8]
 8001c10:	7bfb      	ldrb	r3, [r7, #15]
 8001c12:	3b20      	subs	r3, #32
 8001c14:	7979      	ldrb	r1, [r7, #5]
 8001c16:	fb01 f303 	mul.w	r3, r1, r3
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	440b      	add	r3, r1
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	4413      	add	r3, r2
 8001c24:	881b      	ldrh	r3, [r3, #0]
 8001c26:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++)
 8001c28:	2300      	movs	r3, #0
 8001c2a:	61bb      	str	r3, [r7, #24]
 8001c2c:	e030      	b.n	8001c90 <Display_WriteChar+0xc0>
        {
            if ((b << j) & 0x8000)
 8001c2e:	697a      	ldr	r2, [r7, #20]
 8001c30:	69bb      	ldr	r3, [r7, #24]
 8001c32:	fa02 f303 	lsl.w	r3, r2, r3
 8001c36:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d010      	beq.n	8001c60 <Display_WriteChar+0x90>
                Display_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001c3e:	4b21      	ldr	r3, [pc, #132]	@ (8001cc4 <Display_WriteChar+0xf4>)
 8001c40:	881a      	ldrh	r2, [r3, #0]
 8001c42:	69bb      	ldr	r3, [r7, #24]
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	4413      	add	r3, r2
 8001c48:	b298      	uxth	r0, r3
 8001c4a:	4b1e      	ldr	r3, [pc, #120]	@ (8001cc4 <Display_WriteChar+0xf4>)
 8001c4c:	885a      	ldrh	r2, [r3, #2]
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	4413      	add	r3, r2
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	7bba      	ldrb	r2, [r7, #14]
 8001c58:	4619      	mov	r1, r3
 8001c5a:	f7ff fef1 	bl	8001a40 <Display_DrawPixel>
 8001c5e:	e014      	b.n	8001c8a <Display_WriteChar+0xba>
            else
                Display_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001c60:	4b18      	ldr	r3, [pc, #96]	@ (8001cc4 <Display_WriteChar+0xf4>)
 8001c62:	881a      	ldrh	r2, [r3, #0]
 8001c64:	69bb      	ldr	r3, [r7, #24]
 8001c66:	b29b      	uxth	r3, r3
 8001c68:	4413      	add	r3, r2
 8001c6a:	b298      	uxth	r0, r3
 8001c6c:	4b15      	ldr	r3, [pc, #84]	@ (8001cc4 <Display_WriteChar+0xf4>)
 8001c6e:	885a      	ldrh	r2, [r3, #2]
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	b29b      	uxth	r3, r3
 8001c74:	4413      	add	r3, r2
 8001c76:	b299      	uxth	r1, r3
 8001c78:	7bbb      	ldrb	r3, [r7, #14]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	bf0c      	ite	eq
 8001c7e:	2301      	moveq	r3, #1
 8001c80:	2300      	movne	r3, #0
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	461a      	mov	r2, r3
 8001c86:	f7ff fedb 	bl	8001a40 <Display_DrawPixel>
        for (j = 0; j < Font.FontWidth; j++)
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	61bb      	str	r3, [r7, #24]
 8001c90:	793b      	ldrb	r3, [r7, #4]
 8001c92:	461a      	mov	r2, r3
 8001c94:	69bb      	ldr	r3, [r7, #24]
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d3c9      	bcc.n	8001c2e <Display_WriteChar+0x5e>
    for (i = 0; i < Font.FontHeight; i++)	// Translate font to screenbuffer
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	61fb      	str	r3, [r7, #28]
 8001ca0:	797b      	ldrb	r3, [r7, #5]
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d3b1      	bcc.n	8001c0e <Display_WriteChar+0x3e>
        }
    }
    SSD1306.CurrentX += Font.FontWidth;	// The current space is now taken
 8001caa:	4b06      	ldr	r3, [pc, #24]	@ (8001cc4 <Display_WriteChar+0xf4>)
 8001cac:	881b      	ldrh	r3, [r3, #0]
 8001cae:	793a      	ldrb	r2, [r7, #4]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	b29a      	uxth	r2, r3
 8001cb4:	4b03      	ldr	r3, [pc, #12]	@ (8001cc4 <Display_WriteChar+0xf4>)
 8001cb6:	801a      	strh	r2, [r3, #0]

    return ch;	// Return written char for validation
 8001cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3724      	adds	r7, #36	@ 0x24
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd90      	pop	{r4, r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	200003ec 	.word	0x200003ec

08001cc8 <Display_WriteString>:

/**
 * WRITE STRING INTO THE DISPLAY BUFFER
 */
char Display_WriteString(char* str, FontDef_t Font, SSD1306_COLOR_t color)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	60f8      	str	r0, [r7, #12]
 8001cd0:	1d38      	adds	r0, r7, #4
 8001cd2:	e880 0006 	stmia.w	r0, {r1, r2}
 8001cd6:	70fb      	strb	r3, [r7, #3]
    while (*str){
 8001cd8:	e012      	b.n	8001d00 <Display_WriteString+0x38>
        if (Display_WriteChar(*str, Font, color) != *str)	// Write until null-byte
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	7818      	ldrb	r0, [r3, #0]
 8001cde:	78fb      	ldrb	r3, [r7, #3]
 8001ce0:	1d3a      	adds	r2, r7, #4
 8001ce2:	ca06      	ldmia	r2, {r1, r2}
 8001ce4:	f7ff ff74 	bl	8001bd0 <Display_WriteChar>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	461a      	mov	r2, r3
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d002      	beq.n	8001cfa <Display_WriteString+0x32>
        	return *str;	// Char could not be written
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	e008      	b.n	8001d0c <Display_WriteString+0x44>

        str++;	// Next char
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	60fb      	str	r3, [r7, #12]
    while (*str){
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d1e8      	bne.n	8001cda <Display_WriteString+0x12>
    }
    return *str;	// Everything ok
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	781b      	ldrb	r3, [r3, #0]
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3710      	adds	r7, #16
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <Display_DrawLine>:

void Display_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 8001d14:	b590      	push	{r4, r7, lr}
 8001d16:	b085      	sub	sp, #20
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	4604      	mov	r4, r0
 8001d1c:	4608      	mov	r0, r1
 8001d1e:	4611      	mov	r1, r2
 8001d20:	461a      	mov	r2, r3
 8001d22:	4623      	mov	r3, r4
 8001d24:	80fb      	strh	r3, [r7, #6]
 8001d26:	4603      	mov	r3, r0
 8001d28:	80bb      	strh	r3, [r7, #4]
 8001d2a:	460b      	mov	r3, r1
 8001d2c:	807b      	strh	r3, [r7, #2]
 8001d2e:	4613      	mov	r3, r2
 8001d30:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, i, tmp;

	if(x0 != x1 && y0 != y1)
 8001d32:	88fa      	ldrh	r2, [r7, #6]
 8001d34:	887b      	ldrh	r3, [r7, #2]
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d004      	beq.n	8001d44 <Display_DrawLine+0x30>
 8001d3a:	88ba      	ldrh	r2, [r7, #4]
 8001d3c:	883b      	ldrh	r3, [r7, #0]
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	f040 8090 	bne.w	8001e64 <Display_DrawLine+0x150>
		return;

	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 8001d44:	88fb      	ldrh	r3, [r7, #6]
 8001d46:	2b7f      	cmp	r3, #127	@ 0x7f
 8001d48:	d901      	bls.n	8001d4e <Display_DrawLine+0x3a>
		x0 = SSD1306_WIDTH - 1;
 8001d4a:	237f      	movs	r3, #127	@ 0x7f
 8001d4c:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= SSD1306_WIDTH) {
 8001d4e:	887b      	ldrh	r3, [r7, #2]
 8001d50:	2b7f      	cmp	r3, #127	@ 0x7f
 8001d52:	d901      	bls.n	8001d58 <Display_DrawLine+0x44>
		x1 = SSD1306_WIDTH - 1;
 8001d54:	237f      	movs	r3, #127	@ 0x7f
 8001d56:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= SSD1306_HEIGHT) {
 8001d58:	88bb      	ldrh	r3, [r7, #4]
 8001d5a:	2b3f      	cmp	r3, #63	@ 0x3f
 8001d5c:	d901      	bls.n	8001d62 <Display_DrawLine+0x4e>
		y0 = SSD1306_HEIGHT - 1;
 8001d5e:	233f      	movs	r3, #63	@ 0x3f
 8001d60:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= SSD1306_HEIGHT) {
 8001d62:	883b      	ldrh	r3, [r7, #0]
 8001d64:	2b3f      	cmp	r3, #63	@ 0x3f
 8001d66:	d901      	bls.n	8001d6c <Display_DrawLine+0x58>
		y1 = SSD1306_HEIGHT - 1;
 8001d68:	233f      	movs	r3, #63	@ 0x3f
 8001d6a:	803b      	strh	r3, [r7, #0]
	}

	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1);
 8001d6c:	88fa      	ldrh	r2, [r7, #6]
 8001d6e:	887b      	ldrh	r3, [r7, #2]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d205      	bcs.n	8001d80 <Display_DrawLine+0x6c>
 8001d74:	887a      	ldrh	r2, [r7, #2]
 8001d76:	88fb      	ldrh	r3, [r7, #6]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	b21b      	sxth	r3, r3
 8001d7e:	e004      	b.n	8001d8a <Display_DrawLine+0x76>
 8001d80:	88fa      	ldrh	r2, [r7, #6]
 8001d82:	887b      	ldrh	r3, [r7, #2]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	b29b      	uxth	r3, r3
 8001d88:	b21b      	sxth	r3, r3
 8001d8a:	81bb      	strh	r3, [r7, #12]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1);
 8001d8c:	88ba      	ldrh	r2, [r7, #4]
 8001d8e:	883b      	ldrh	r3, [r7, #0]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d205      	bcs.n	8001da0 <Display_DrawLine+0x8c>
 8001d94:	883a      	ldrh	r2, [r7, #0]
 8001d96:	88bb      	ldrh	r3, [r7, #4]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	b21b      	sxth	r3, r3
 8001d9e:	e004      	b.n	8001daa <Display_DrawLine+0x96>
 8001da0:	88ba      	ldrh	r2, [r7, #4]
 8001da2:	883b      	ldrh	r3, [r7, #0]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	b21b      	sxth	r3, r3
 8001daa:	817b      	strh	r3, [r7, #10]

	if (dx == 0) {
 8001dac:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d129      	bne.n	8001e08 <Display_DrawLine+0xf4>
		if (y1 < y0) {
 8001db4:	883a      	ldrh	r2, [r7, #0]
 8001db6:	88bb      	ldrh	r3, [r7, #4]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d205      	bcs.n	8001dc8 <Display_DrawLine+0xb4>
			tmp = y1;
 8001dbc:	883b      	ldrh	r3, [r7, #0]
 8001dbe:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8001dc0:	88bb      	ldrh	r3, [r7, #4]
 8001dc2:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8001dc4:	893b      	ldrh	r3, [r7, #8]
 8001dc6:	80bb      	strh	r3, [r7, #4]
		}

		if (x1 < x0) {
 8001dc8:	887a      	ldrh	r2, [r7, #2]
 8001dca:	88fb      	ldrh	r3, [r7, #6]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d205      	bcs.n	8001ddc <Display_DrawLine+0xc8>
			tmp = x1;
 8001dd0:	887b      	ldrh	r3, [r7, #2]
 8001dd2:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8001dd4:	88fb      	ldrh	r3, [r7, #6]
 8001dd6:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8001dd8:	893b      	ldrh	r3, [r7, #8]
 8001dda:	80fb      	strh	r3, [r7, #6]
		}

		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 8001ddc:	88bb      	ldrh	r3, [r7, #4]
 8001dde:	81fb      	strh	r3, [r7, #14]
 8001de0:	e00c      	b.n	8001dfc <Display_DrawLine+0xe8>
			Display_DrawPixel(x0, i, c);
 8001de2:	89f9      	ldrh	r1, [r7, #14]
 8001de4:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001de8:	88fb      	ldrh	r3, [r7, #6]
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7ff fe28 	bl	8001a40 <Display_DrawPixel>
		for (i = y0; i <= y1; i++) {
 8001df0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001df4:	b29b      	uxth	r3, r3
 8001df6:	3301      	adds	r3, #1
 8001df8:	b29b      	uxth	r3, r3
 8001dfa:	81fb      	strh	r3, [r7, #14]
 8001dfc:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001e00:	883b      	ldrh	r3, [r7, #0]
 8001e02:	429a      	cmp	r2, r3
 8001e04:	dded      	ble.n	8001de2 <Display_DrawLine+0xce>
		}

		/* Return from function */
		return;
 8001e06:	e030      	b.n	8001e6a <Display_DrawLine+0x156>
	}

	if (dy == 0) {
 8001e08:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d12b      	bne.n	8001e68 <Display_DrawLine+0x154>
		if (y1 < y0) {
 8001e10:	883a      	ldrh	r2, [r7, #0]
 8001e12:	88bb      	ldrh	r3, [r7, #4]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d205      	bcs.n	8001e24 <Display_DrawLine+0x110>
			tmp = y1;
 8001e18:	883b      	ldrh	r3, [r7, #0]
 8001e1a:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8001e1c:	88bb      	ldrh	r3, [r7, #4]
 8001e1e:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8001e20:	893b      	ldrh	r3, [r7, #8]
 8001e22:	80bb      	strh	r3, [r7, #4]
		}

		if (x1 < x0) {
 8001e24:	887a      	ldrh	r2, [r7, #2]
 8001e26:	88fb      	ldrh	r3, [r7, #6]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d205      	bcs.n	8001e38 <Display_DrawLine+0x124>
			tmp = x1;
 8001e2c:	887b      	ldrh	r3, [r7, #2]
 8001e2e:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8001e30:	88fb      	ldrh	r3, [r7, #6]
 8001e32:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8001e34:	893b      	ldrh	r3, [r7, #8]
 8001e36:	80fb      	strh	r3, [r7, #6]
		}

		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 8001e38:	88fb      	ldrh	r3, [r7, #6]
 8001e3a:	81fb      	strh	r3, [r7, #14]
 8001e3c:	e00c      	b.n	8001e58 <Display_DrawLine+0x144>
			Display_DrawPixel(i, y0, c);
 8001e3e:	89fb      	ldrh	r3, [r7, #14]
 8001e40:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001e44:	88b9      	ldrh	r1, [r7, #4]
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7ff fdfa 	bl	8001a40 <Display_DrawPixel>
		for (i = x0; i <= x1; i++) {
 8001e4c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001e50:	b29b      	uxth	r3, r3
 8001e52:	3301      	adds	r3, #1
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	81fb      	strh	r3, [r7, #14]
 8001e58:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001e5c:	887b      	ldrh	r3, [r7, #2]
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	dded      	ble.n	8001e3e <Display_DrawLine+0x12a>
		}
	}
	return;
 8001e62:	e001      	b.n	8001e68 <Display_DrawLine+0x154>
		return;
 8001e64:	bf00      	nop
 8001e66:	e000      	b.n	8001e6a <Display_DrawLine+0x156>
	return;
 8001e68:	bf00      	nop
}
 8001e6a:	3714      	adds	r7, #20
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd90      	pop	{r4, r7, pc}

08001e70 <Display_DrawFilledRectangle>:
	Display_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
	Display_DrawLine(x, y, x, y + h, c);         /* Left line */
	Display_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
}

void Display_DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 8001e70:	b590      	push	{r4, r7, lr}
 8001e72:	b087      	sub	sp, #28
 8001e74:	af02      	add	r7, sp, #8
 8001e76:	4604      	mov	r4, r0
 8001e78:	4608      	mov	r0, r1
 8001e7a:	4611      	mov	r1, r2
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	4623      	mov	r3, r4
 8001e80:	80fb      	strh	r3, [r7, #6]
 8001e82:	4603      	mov	r3, r0
 8001e84:	80bb      	strh	r3, [r7, #4]
 8001e86:	460b      	mov	r3, r1
 8001e88:	807b      	strh	r3, [r7, #2]
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	803b      	strh	r3, [r7, #0]
	uint8_t i;

	/* Check input parameters */
	if (
 8001e8e:	88fb      	ldrh	r3, [r7, #6]
 8001e90:	2b7f      	cmp	r3, #127	@ 0x7f
 8001e92:	d836      	bhi.n	8001f02 <Display_DrawFilledRectangle+0x92>
		x >= SSD1306_WIDTH ||
 8001e94:	88bb      	ldrh	r3, [r7, #4]
 8001e96:	2b3f      	cmp	r3, #63	@ 0x3f
 8001e98:	d833      	bhi.n	8001f02 <Display_DrawFilledRectangle+0x92>
		/* Return error */
		return;
	}

	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 8001e9a:	88fa      	ldrh	r2, [r7, #6]
 8001e9c:	887b      	ldrh	r3, [r7, #2]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	2b7f      	cmp	r3, #127	@ 0x7f
 8001ea2:	dd03      	ble.n	8001eac <Display_DrawFilledRectangle+0x3c>
		w = SSD1306_WIDTH - x;
 8001ea4:	88fb      	ldrh	r3, [r7, #6]
 8001ea6:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8001eaa:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 8001eac:	88ba      	ldrh	r2, [r7, #4]
 8001eae:	883b      	ldrh	r3, [r7, #0]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	2b3f      	cmp	r3, #63	@ 0x3f
 8001eb4:	dd03      	ble.n	8001ebe <Display_DrawFilledRectangle+0x4e>
		h = SSD1306_HEIGHT - y;
 8001eb6:	88bb      	ldrh	r3, [r7, #4]
 8001eb8:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8001ebc:	803b      	strh	r3, [r7, #0]
	}

	/* Draw lines */
	for (i = 0; i <= h; i++) {
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	73fb      	strb	r3, [r7, #15]
 8001ec2:	e018      	b.n	8001ef6 <Display_DrawFilledRectangle+0x86>
		/* Draw lines */
		Display_DrawLine(x, y + i, x + w, y + i, c);
 8001ec4:	7bfb      	ldrb	r3, [r7, #15]
 8001ec6:	b29a      	uxth	r2, r3
 8001ec8:	88bb      	ldrh	r3, [r7, #4]
 8001eca:	4413      	add	r3, r2
 8001ecc:	b299      	uxth	r1, r3
 8001ece:	88fa      	ldrh	r2, [r7, #6]
 8001ed0:	887b      	ldrh	r3, [r7, #2]
 8001ed2:	4413      	add	r3, r2
 8001ed4:	b29c      	uxth	r4, r3
 8001ed6:	7bfb      	ldrb	r3, [r7, #15]
 8001ed8:	b29a      	uxth	r2, r3
 8001eda:	88bb      	ldrh	r3, [r7, #4]
 8001edc:	4413      	add	r3, r2
 8001ede:	b29a      	uxth	r2, r3
 8001ee0:	88f8      	ldrh	r0, [r7, #6]
 8001ee2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001ee6:	9300      	str	r3, [sp, #0]
 8001ee8:	4613      	mov	r3, r2
 8001eea:	4622      	mov	r2, r4
 8001eec:	f7ff ff12 	bl	8001d14 <Display_DrawLine>
	for (i = 0; i <= h; i++) {
 8001ef0:	7bfb      	ldrb	r3, [r7, #15]
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	73fb      	strb	r3, [r7, #15]
 8001ef6:	7bfb      	ldrb	r3, [r7, #15]
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	883a      	ldrh	r2, [r7, #0]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d2e1      	bcs.n	8001ec4 <Display_DrawFilledRectangle+0x54>
 8001f00:	e000      	b.n	8001f04 <Display_DrawFilledRectangle+0x94>
		return;
 8001f02:	bf00      	nop
	}
}
 8001f04:	3714      	adds	r7, #20
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd90      	pop	{r4, r7, pc}

08001f0a <Encoder_Init>:
 *      Author: Agustín Alejandro Mayer
 */

#include "Motors/encoder.h"

void Encoder_Init(s_encoder *enc, uint8_t reset){
 8001f0a:	b480      	push	{r7}
 8001f0c:	b083      	sub	sp, #12
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
 8001f12:	460b      	mov	r3, r1
 8001f14:	70fb      	strb	r3, [r7, #3]
	enc->pulses = 0;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	809a      	strh	r2, [r3, #4]
	enc->resetBase = reset;
 8001f1c:	78fb      	ldrb	r3, [r7, #3]
 8001f1e:	b29a      	uxth	r2, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	801a      	strh	r2, [r3, #0]
	enc->timeReset = reset;
 8001f24:	78fb      	ldrb	r3, [r7, #3]
 8001f26:	b29a      	uxth	r2, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	805a      	strh	r2, [r3, #2]
	enc->counter1s = 1000 / reset;
 8001f2c:	78fb      	ldrb	r3, [r7, #3]
 8001f2e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001f32:	fb92 f3f3 	sdiv	r3, r2, r3
 8001f36:	b2da      	uxtb	r2, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	729a      	strb	r2, [r3, #10]
}
 8001f3c:	bf00      	nop
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <Encoder_Task>:

void Encoder_Task(s_encoder *enc){
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
	enc->timeReset--;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	885b      	ldrh	r3, [r3, #2]
 8001f54:	3b01      	subs	r3, #1
 8001f56:	b29a      	uxth	r2, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	805a      	strh	r2, [r3, #2]
	if(!enc->timeReset){
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	885b      	ldrh	r3, [r3, #2]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d10e      	bne.n	8001f82 <Encoder_Task+0x3a>

		enc->fastPPS += enc->pulses;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	88da      	ldrh	r2, [r3, #6]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	889b      	ldrh	r3, [r3, #4]
 8001f6c:	4413      	add	r3, r2
 8001f6e:	b29a      	uxth	r2, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	80da      	strh	r2, [r3, #6]

		enc->timeReset = enc->resetBase;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	881a      	ldrh	r2, [r3, #0]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	805a      	strh	r2, [r3, #2]
		enc->pulses = 0;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	809a      	strh	r2, [r3, #4]
	}
	enc->counter1s--;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	7a9b      	ldrb	r3, [r3, #10]
 8001f86:	3b01      	subs	r3, #1
 8001f88:	b2da      	uxtb	r2, r3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	729a      	strb	r2, [r3, #10]
	if(!enc->counter1s){
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	7a9b      	ldrb	r3, [r3, #10]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d102      	bne.n	8001f9c <Encoder_Task+0x54>
		enc->pps = 0;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	811a      	strh	r2, [r3, #8]
	}
}
 8001f9c:	bf00      	nop
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr

08001fa8 <Encoder_Add_Pulse>:

void Encoder_Add_Pulse(s_encoder *enc){
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
	enc->pulses++;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	889b      	ldrh	r3, [r3, #4]
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	b29a      	uxth	r2, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	809a      	strh	r2, [r3, #4]
}
 8001fbc:	bf00      	nop
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <Encoder_1s_Elapsed>:

void Encoder_1s_Elapsed(s_encoder *enc){
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
	enc->pps = enc->fastPPS;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	88da      	ldrh	r2, [r3, #6]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	811a      	strh	r2, [r3, #8]
	enc->fastPPS=0;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	80da      	strh	r2, [r3, #6]
}
 8001fde:	bf00      	nop
 8001fe0:	370c      	adds	r7, #12
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
	...

08001fec <Motor_Init>:
 */
#include "Motors/motors.h"
#include <stddef.h>

void Motor_Init(s_motor *motor, void (*PWM_set)(uint16_t dCycle),
		void (*PIN_set)(uint8_t A, uint8_t B), uint16_t max_value){
 8001fec:	b480      	push	{r7}
 8001fee:	b085      	sub	sp, #20
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	60f8      	str	r0, [r7, #12]
 8001ff4:	60b9      	str	r1, [r7, #8]
 8001ff6:	607a      	str	r2, [r7, #4]
 8001ff8:	807b      	strh	r3, [r7, #2]

	motor->direction = NO_INIT;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	701a      	strb	r2, [r3, #0]
	motor->setPins = PIN_set;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	611a      	str	r2, [r3, #16]
	motor->setPWM = PWM_set;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	68ba      	ldr	r2, [r7, #8]
 800200a:	615a      	str	r2, [r3, #20]
	motor->maxValue = max_value / 100;
 800200c:	887b      	ldrh	r3, [r7, #2]
 800200e:	4a0a      	ldr	r2, [pc, #40]	@ (8002038 <Motor_Init+0x4c>)
 8002010:	fba2 2303 	umull	r2, r3, r2, r3
 8002014:	095b      	lsrs	r3, r3, #5
 8002016:	b29b      	uxth	r3, r3
 8002018:	461a      	mov	r2, r3
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	605a      	str	r2, [r3, #4]
	motor->vel = 0;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2200      	movs	r2, #0
 8002022:	609a      	str	r2, [r3, #8]
	motor->brakeTimeout = 0;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2200      	movs	r2, #0
 8002028:	819a      	strh	r2, [r3, #12]
}
 800202a:	bf00      	nop
 800202c:	3714      	adds	r7, #20
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	51eb851f 	.word	0x51eb851f

0800203c <Motor_Set_Speed>:

void Motor_Set_Speed(s_motor *motor, int8_t speed){
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	460b      	mov	r3, r1
 8002046:	70fb      	strb	r3, [r7, #3]
	if(motor->setPWM == NULL)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	695b      	ldr	r3, [r3, #20]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d04f      	beq.n	80020f0 <Motor_Set_Speed+0xb4>
		return;
	if(speed > 100)
 8002050:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002054:	2b64      	cmp	r3, #100	@ 0x64
 8002056:	dd01      	ble.n	800205c <Motor_Set_Speed+0x20>
		speed = 100;
 8002058:	2364      	movs	r3, #100	@ 0x64
 800205a:	70fb      	strb	r3, [r7, #3]
	if(speed < -100)
 800205c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002060:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 8002064:	da01      	bge.n	800206a <Motor_Set_Speed+0x2e>
		speed = -100;
 8002066:	239c      	movs	r3, #156	@ 0x9c
 8002068:	70fb      	strb	r3, [r7, #3]
	if(speed == motor->vel)
 800206a:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	429a      	cmp	r2, r3
 8002074:	d03e      	beq.n	80020f4 <Motor_Set_Speed+0xb8>
		return;

	motor->vel = speed * motor->maxValue;
 8002076:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	6852      	ldr	r2, [r2, #4]
 800207e:	fb02 f303 	mul.w	r3, r2, r3
 8002082:	461a      	mov	r2, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	609a      	str	r2, [r3, #8]

	if(speed > 0){
 8002088:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800208c:	2b00      	cmp	r3, #0
 800208e:	dd0e      	ble.n	80020ae <Motor_Set_Speed+0x72>
		motor->direction = FORWARD;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2202      	movs	r2, #2
 8002094:	701a      	strb	r2, [r3, #0]
		Motor_Set_Direction(motor, FORWARD);
 8002096:	2102      	movs	r1, #2
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f000 f82f 	bl	80020fc <Motor_Set_Direction>
		motor->setPWM((uint16_t)motor->vel);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	695b      	ldr	r3, [r3, #20]
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	6892      	ldr	r2, [r2, #8]
 80020a6:	b292      	uxth	r2, r2
 80020a8:	4610      	mov	r0, r2
 80020aa:	4798      	blx	r3
 80020ac:	e023      	b.n	80020f6 <Motor_Set_Speed+0xba>
	}else if(speed < 0){
 80020ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	da10      	bge.n	80020d8 <Motor_Set_Speed+0x9c>
		motor->direction = BACKWARD;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2203      	movs	r2, #3
 80020ba:	701a      	strb	r2, [r3, #0]
		Motor_Set_Direction(motor, BACKWARD);
 80020bc:	2103      	movs	r1, #3
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f000 f81c 	bl	80020fc <Motor_Set_Direction>
		motor->setPWM((uint16_t)(motor->vel * -1));
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	695b      	ldr	r3, [r3, #20]
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	6892      	ldr	r2, [r2, #8]
 80020cc:	b292      	uxth	r2, r2
 80020ce:	4252      	negs	r2, r2
 80020d0:	b292      	uxth	r2, r2
 80020d2:	4610      	mov	r0, r2
 80020d4:	4798      	blx	r3
 80020d6:	e00e      	b.n	80020f6 <Motor_Set_Speed+0xba>
	}else{
		motor->direction = FREE_WHEEL;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2201      	movs	r2, #1
 80020dc:	701a      	strb	r2, [r3, #0]
		Motor_Set_Direction(motor, FREE_WHEEL);
 80020de:	2101      	movs	r1, #1
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f000 f80b 	bl	80020fc <Motor_Set_Direction>
		motor->setPWM(0);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	695b      	ldr	r3, [r3, #20]
 80020ea:	2000      	movs	r0, #0
 80020ec:	4798      	blx	r3
 80020ee:	e002      	b.n	80020f6 <Motor_Set_Speed+0xba>
		return;
 80020f0:	bf00      	nop
 80020f2:	e000      	b.n	80020f6 <Motor_Set_Speed+0xba>
		return;
 80020f4:	bf00      	nop
	}
}
 80020f6:	3708      	adds	r7, #8
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}

080020fc <Motor_Set_Direction>:

void Motor_Set_Direction(s_motor *motor, e_direction direction){
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	460b      	mov	r3, r1
 8002106:	70fb      	strb	r3, [r7, #3]
	if(motor->setPins == NULL)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	691b      	ldr	r3, [r3, #16]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d027      	beq.n	8002160 <Motor_Set_Direction+0x64>
		return;
	switch(direction){
 8002110:	78fb      	ldrb	r3, [r7, #3]
 8002112:	2b04      	cmp	r3, #4
 8002114:	d825      	bhi.n	8002162 <Motor_Set_Direction+0x66>
 8002116:	a201      	add	r2, pc, #4	@ (adr r2, 800211c <Motor_Set_Direction+0x20>)
 8002118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800211c:	08002163 	.word	0x08002163
 8002120:	08002131 	.word	0x08002131
 8002124:	0800213d 	.word	0x0800213d
 8002128:	08002149 	.word	0x08002149
 800212c:	08002155 	.word	0x08002155
		case NO_INIT:
			break;
		case FREE_WHEEL:
			motor->setPins(0, 0);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	691b      	ldr	r3, [r3, #16]
 8002134:	2100      	movs	r1, #0
 8002136:	2000      	movs	r0, #0
 8002138:	4798      	blx	r3
			break;
 800213a:	e012      	b.n	8002162 <Motor_Set_Direction+0x66>
		case FORWARD:
			motor->setPins(1, 0);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	691b      	ldr	r3, [r3, #16]
 8002140:	2100      	movs	r1, #0
 8002142:	2001      	movs	r0, #1
 8002144:	4798      	blx	r3
			break;
 8002146:	e00c      	b.n	8002162 <Motor_Set_Direction+0x66>
		case BACKWARD:
			motor->setPins(0, 1);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	691b      	ldr	r3, [r3, #16]
 800214c:	2101      	movs	r1, #1
 800214e:	2000      	movs	r0, #0
 8002150:	4798      	blx	r3
			break;
 8002152:	e006      	b.n	8002162 <Motor_Set_Direction+0x66>
		case BRAKE:
			motor->setPins(1, 1);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	691b      	ldr	r3, [r3, #16]
 8002158:	2101      	movs	r1, #1
 800215a:	2001      	movs	r0, #1
 800215c:	4798      	blx	r3
			break;
 800215e:	e000      	b.n	8002162 <Motor_Set_Direction+0x66>
		return;
 8002160:	bf00      	nop
	}
}
 8002162:	3708      	adds	r7, #8
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}

08002168 <Motor_Break_Timeout>:
	motor->direction = BRAKE;
	Motor_Set_Direction(motor, BRAKE);

}

void Motor_Break_Timeout(s_motor *motor){
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
	if(motor->direction == BRAKE){
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	2b04      	cmp	r3, #4
 8002176:	d10c      	bne.n	8002192 <Motor_Break_Timeout+0x2a>
		motor->brakeTimeout--;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	899b      	ldrh	r3, [r3, #12]
 800217c:	3b01      	subs	r3, #1
 800217e:	b29a      	uxth	r2, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	819a      	strh	r2, [r3, #12]
		if(!motor->brakeTimeout)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	899b      	ldrh	r3, [r3, #12]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d102      	bne.n	8002192 <Motor_Break_Timeout+0x2a>
			motor->direction = FREE_WHEEL;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2201      	movs	r2, #1
 8002190:	701a      	strb	r2, [r3, #0]
	}
}
 8002192:	bf00      	nop
 8002194:	370c      	adds	r7, #12
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
	...

080021a0 <Motor_Set_MaxValue>:

void Motor_Set_MaxValue(s_motor *motor, uint32_t value){
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	6039      	str	r1, [r7, #0]
	motor->maxValue = value / 100;
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	4a05      	ldr	r2, [pc, #20]	@ (80021c4 <Motor_Set_MaxValue+0x24>)
 80021ae:	fba2 2303 	umull	r2, r3, r2, r3
 80021b2:	095a      	lsrs	r2, r3, #5
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	605a      	str	r2, [r3, #4]
}
 80021b8:	bf00      	nop
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr
 80021c4:	51eb851f 	.word	0x51eb851f

080021c8 <Comm_Init>:
static uint8_t TxAuxBuffer[30];
static uint8_t indexStart;
static uint8_t indexStartValue;
static uint8_t checksum;

void Comm_Init(s_commData* comm, void (*dataD)(s_commData *comm), void (*dataW)(s_commData *comm)){
 80021c8:	b480      	push	{r7}
 80021ca:	b085      	sub	sp, #20
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	60f8      	str	r0, [r7, #12]
 80021d0:	60b9      	str	r1, [r7, #8]
 80021d2:	607a      	str	r2, [r7, #4]
	comm->dataDecoder = dataD;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	68ba      	ldr	r2, [r7, #8]
 80021d8:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
	comm->dataWriter = dataW;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
	comm->timeOut = 0;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2200      	movs	r2, #0
 80021e8:	701a      	strb	r2, [r3, #0]
	comm->indexStart = 0;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2200      	movs	r2, #0
 80021ee:	705a      	strb	r2, [r3, #1]
	comm->checksumRx = 0;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2200      	movs	r2, #0
 80021f4:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
	comm->Tx.write=0;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2200      	movs	r2, #0
 80021fc:	70da      	strb	r2, [r3, #3]
	comm->Tx.read=0;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2200      	movs	r2, #0
 8002202:	709a      	strb	r2, [r3, #2]
	comm->Rx.write=0;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2200      	movs	r2, #0
 8002208:	f883 2105 	strb.w	r2, [r3, #261]	@ 0x105
	comm->Rx.read=0;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2200      	movs	r2, #0
 8002210:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
	comm->isESP01 = 0;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2200      	movs	r2, #0
 8002218:	f883 222f 	strb.w	r2, [r3, #559]	@ 0x22f
	comm->protocolState = START;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2200      	movs	r2, #0
 8002220:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
}
 8002224:	bf00      	nop
 8002226:	3714      	adds	r7, #20
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr

08002230 <Comm_Task>:

void Comm_Task(s_commData* comm){
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
	if(comm->Rx.read != comm->Rx.write){
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f893 2104 	ldrb.w	r2, [r3, #260]	@ 0x104
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 8002244:	429a      	cmp	r2, r3
 8002246:	d002      	beq.n	800224e <Comm_Task+0x1e>
		decodeProtocol(comm);
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f000 f815 	bl	8002278 <decodeProtocol>
	}
	if (comm->Tx.read != comm->Tx.write) {
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	789a      	ldrb	r2, [r3, #2]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	78db      	ldrb	r3, [r3, #3]
 8002256:	429a      	cmp	r2, r3
 8002258:	d009      	beq.n	800226e <Comm_Task+0x3e>
		if(comm->dataWriter != NULL)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8002260:	2b00      	cmp	r3, #0
 8002262:	d004      	beq.n	800226e <Comm_Task+0x3e>
			comm->dataWriter(comm);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	4798      	blx	r3
	}
}
 800226e:	bf00      	nop
 8002270:	3708      	adds	r7, #8
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
	...

08002278 <decodeProtocol>:

void decodeProtocol(s_commData *datosCom){
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
	static uint8_t nBytes=0;
	uint8_t indexWriteRxCopy = datosCom->Rx.write;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 8002286:	73fb      	strb	r3, [r7, #15]

	while (datosCom->Rx.read != indexWriteRxCopy){
 8002288:	e11b      	b.n	80024c2 <decodeProtocol+0x24a>
		switch(datosCom->protocolState){
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	f893 322e 	ldrb.w	r3, [r3, #558]	@ 0x22e
 8002290:	2b06      	cmp	r3, #6
 8002292:	f200 810e 	bhi.w	80024b2 <decodeProtocol+0x23a>
 8002296:	a201      	add	r2, pc, #4	@ (adr r2, 800229c <decodeProtocol+0x24>)
 8002298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800229c:	080022b9 	.word	0x080022b9
 80022a0:	080022eb 	.word	0x080022eb
 80022a4:	0800232d 	.word	0x0800232d
 80022a8:	0800236f 	.word	0x0800236f
 80022ac:	080023b1 	.word	0x080023b1
 80022b0:	080023e3 	.word	0x080023e3
 80022b4:	08002435 	.word	0x08002435
		case START:
			if (datosCom->Rx.buffer[datosCom->Rx.read++] == 'U'){
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 80022be:	1c5a      	adds	r2, r3, #1
 80022c0:	b2d1      	uxtb	r1, r2
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	f882 1104 	strb.w	r1, [r2, #260]	@ 0x104
 80022c8:	461a      	mov	r2, r3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4413      	add	r3, r2
 80022ce:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 80022d2:	2b55      	cmp	r3, #85	@ 0x55
 80022d4:	f040 80f2 	bne.w	80024bc <decodeProtocol+0x244>
				datosCom->protocolState = HEADER_1;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2201      	movs	r2, #1
 80022dc:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
				datosCom->checksumRx = 0;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2200      	movs	r2, #0
 80022e4:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
			}
			break;
 80022e8:	e0e8      	b.n	80024bc <decodeProtocol+0x244>
		case HEADER_1:
			if (datosCom->Rx.buffer[datosCom->Rx.read++] == 'N')
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 80022f0:	1c5a      	adds	r2, r3, #1
 80022f2:	b2d1      	uxtb	r1, r2
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	f882 1104 	strb.w	r1, [r2, #260]	@ 0x104
 80022fa:	461a      	mov	r2, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	4413      	add	r3, r2
 8002300:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8002304:	2b4e      	cmp	r3, #78	@ 0x4e
 8002306:	d104      	bne.n	8002312 <decodeProtocol+0x9a>
				datosCom->protocolState = HEADER_2;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2202      	movs	r2, #2
 800230c:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			else{
				datosCom->Rx.read--;
				datosCom->protocolState = START;
			}
			break;
 8002310:	e0d7      	b.n	80024c2 <decodeProtocol+0x24a>
				datosCom->Rx.read--;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8002318:	3b01      	subs	r3, #1
 800231a:	b2da      	uxtb	r2, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
				datosCom->protocolState = START;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			break;
 800232a:	e0ca      	b.n	80024c2 <decodeProtocol+0x24a>
		case HEADER_2:
			if (datosCom->Rx.buffer[datosCom->Rx.read++] == 'E')
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8002332:	1c5a      	adds	r2, r3, #1
 8002334:	b2d1      	uxtb	r1, r2
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	f882 1104 	strb.w	r1, [r2, #260]	@ 0x104
 800233c:	461a      	mov	r2, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4413      	add	r3, r2
 8002342:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8002346:	2b45      	cmp	r3, #69	@ 0x45
 8002348:	d104      	bne.n	8002354 <decodeProtocol+0xdc>
				datosCom->protocolState = HEADER_3;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2203      	movs	r2, #3
 800234e:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			else{
				datosCom->Rx.read--;
				datosCom->protocolState = START;
			}
			break;
 8002352:	e0b6      	b.n	80024c2 <decodeProtocol+0x24a>
				datosCom->Rx.read--;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800235a:	3b01      	subs	r3, #1
 800235c:	b2da      	uxtb	r2, r3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
				datosCom->protocolState = START;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			break;
 800236c:	e0a9      	b.n	80024c2 <decodeProtocol+0x24a>
		case HEADER_3:
			if (datosCom->Rx.buffer[datosCom->Rx.read++] == 'R')
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8002374:	1c5a      	adds	r2, r3, #1
 8002376:	b2d1      	uxtb	r1, r2
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	f882 1104 	strb.w	r1, [r2, #260]	@ 0x104
 800237e:	461a      	mov	r2, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	4413      	add	r3, r2
 8002384:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8002388:	2b52      	cmp	r3, #82	@ 0x52
 800238a:	d104      	bne.n	8002396 <decodeProtocol+0x11e>
				datosCom->protocolState = NBYTES;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2204      	movs	r2, #4
 8002390:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			else{
				datosCom->Rx.read--;
				datosCom->protocolState = START;
			}
			break;
 8002394:	e095      	b.n	80024c2 <decodeProtocol+0x24a>
				datosCom->Rx.read--;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800239c:	3b01      	subs	r3, #1
 800239e:	b2da      	uxtb	r2, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
				datosCom->protocolState = START;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2200      	movs	r2, #0
 80023aa:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			break;
 80023ae:	e088      	b.n	80024c2 <decodeProtocol+0x24a>
		case NBYTES:
			datosCom->indexStart = datosCom->Rx.read;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f893 2104 	ldrb.w	r2, [r3, #260]	@ 0x104
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	705a      	strb	r2, [r3, #1]
			nBytes = datosCom->Rx.buffer[datosCom->Rx.read++];
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 80023c0:	1c5a      	adds	r2, r3, #1
 80023c2:	b2d1      	uxtb	r1, r2
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	f882 1104 	strb.w	r1, [r2, #260]	@ 0x104
 80023ca:	461a      	mov	r2, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	4413      	add	r3, r2
 80023d0:	f893 2106 	ldrb.w	r2, [r3, #262]	@ 0x106
 80023d4:	4b41      	ldr	r3, [pc, #260]	@ (80024dc <decodeProtocol+0x264>)
 80023d6:	701a      	strb	r2, [r3, #0]
			datosCom->protocolState = TOKEN;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2205      	movs	r2, #5
 80023dc:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			break;
 80023e0:	e06f      	b.n	80024c2 <decodeProtocol+0x24a>
		case TOKEN:
			if (datosCom->Rx.buffer[datosCom->Rx.read++] == ':'){
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 80023e8:	1c5a      	adds	r2, r3, #1
 80023ea:	b2d1      	uxtb	r1, r2
 80023ec:	687a      	ldr	r2, [r7, #4]
 80023ee:	f882 1104 	strb.w	r1, [r2, #260]	@ 0x104
 80023f2:	461a      	mov	r2, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	4413      	add	r3, r2
 80023f8:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 80023fc:	2b3a      	cmp	r3, #58	@ 0x3a
 80023fe:	d10c      	bne.n	800241a <decodeProtocol+0x1a2>
				datosCom->protocolState = PAYLOAD;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2206      	movs	r2, #6
 8002404:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
				datosCom->checksumRx ='U' ^ 'N' ^ 'E' ^ 'R' ^ nBytes ^ ':';
 8002408:	4b34      	ldr	r3, [pc, #208]	@ (80024dc <decodeProtocol+0x264>)
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	f083 0336 	eor.w	r3, r3, #54	@ 0x36
 8002410:	b2da      	uxtb	r2, r3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
			}
			else{
				datosCom->Rx.read--;
				datosCom->protocolState = START;
			}
			break;
 8002418:	e053      	b.n	80024c2 <decodeProtocol+0x24a>
				datosCom->Rx.read--;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8002420:	3b01      	subs	r3, #1
 8002422:	b2da      	uxtb	r2, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
				datosCom->protocolState = START;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			break;
 8002432:	e046      	b.n	80024c2 <decodeProtocol+0x24a>
		case PAYLOAD:
			if (nBytes > 1){
 8002434:	4b29      	ldr	r3, [pc, #164]	@ (80024dc <decodeProtocol+0x264>)
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	2b01      	cmp	r3, #1
 800243a:	d914      	bls.n	8002466 <decodeProtocol+0x1ee>
				datosCom->checksumRx ^= datosCom->Rx.buffer[datosCom->Rx.read++];
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8002442:	1c5a      	adds	r2, r3, #1
 8002444:	b2d1      	uxtb	r1, r2
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	f882 1104 	strb.w	r1, [r2, #260]	@ 0x104
 800244c:	461a      	mov	r2, r3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4413      	add	r3, r2
 8002452:	f893 2106 	ldrb.w	r2, [r3, #262]	@ 0x106
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 800245c:	4053      	eors	r3, r2
 800245e:	b2da      	uxtb	r2, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
			}
			nBytes--;
 8002466:	4b1d      	ldr	r3, [pc, #116]	@ (80024dc <decodeProtocol+0x264>)
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	3b01      	subs	r3, #1
 800246c:	b2da      	uxtb	r2, r3
 800246e:	4b1b      	ldr	r3, [pc, #108]	@ (80024dc <decodeProtocol+0x264>)
 8002470:	701a      	strb	r2, [r3, #0]
			if(nBytes<=0){
 8002472:	4b1a      	ldr	r3, [pc, #104]	@ (80024dc <decodeProtocol+0x264>)
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d122      	bne.n	80024c0 <decodeProtocol+0x248>
				datosCom->protocolState = START;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
				if(datosCom->checksumRx == datosCom->Rx.buffer[datosCom->Rx.read]){
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f893 2206 	ldrb.w	r2, [r3, #518]	@ 0x206
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800248e:	4619      	mov	r1, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	440b      	add	r3, r1
 8002494:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8002498:	429a      	cmp	r2, r3
 800249a:	d111      	bne.n	80024c0 <decodeProtocol+0x248>
					if(datosCom->dataDecoder != NULL)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d00c      	beq.n	80024c0 <decodeProtocol+0x248>
						datosCom->dataDecoder(datosCom);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	4798      	blx	r3
				}
			}
			break;
 80024b0:	e006      	b.n	80024c0 <decodeProtocol+0x248>
		default:
			datosCom->protocolState = START;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			break;
 80024ba:	e002      	b.n	80024c2 <decodeProtocol+0x24a>
			break;
 80024bc:	bf00      	nop
 80024be:	e000      	b.n	80024c2 <decodeProtocol+0x24a>
			break;
 80024c0:	bf00      	nop
	while (datosCom->Rx.read != indexWriteRxCopy){
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 80024c8:	7bfa      	ldrb	r2, [r7, #15]
 80024ca:	429a      	cmp	r2, r3
 80024cc:	f47f aedd 	bne.w	800228a <decodeProtocol+0x12>
		}
	}
}
 80024d0:	bf00      	nop
 80024d2:	bf00      	nop
 80024d4:	3710      	adds	r7, #16
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	20000829 	.word	0x20000829

080024e0 <comm_sendCMD>:

void comm_sendCMD(s_commData *datosCom, _eID cmd, uint8_t *str, uint8_t len){
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	607a      	str	r2, [r7, #4]
 80024ea:	461a      	mov	r2, r3
 80024ec:	460b      	mov	r3, r1
 80024ee:	72fb      	strb	r3, [r7, #11]
 80024f0:	4613      	mov	r3, r2
 80024f2:	72bb      	strb	r3, [r7, #10]
    i = 0;
 80024f4:	4b62      	ldr	r3, [pc, #392]	@ (8002680 <comm_sendCMD+0x1a0>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	701a      	strb	r2, [r3, #0]
    auxIndex = 0;
 80024fa:	4b62      	ldr	r3, [pc, #392]	@ (8002684 <comm_sendCMD+0x1a4>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	701a      	strb	r2, [r3, #0]

    // Cabecera
    TxAuxBuffer[auxIndex++] = 'U'; // Start
 8002500:	4b60      	ldr	r3, [pc, #384]	@ (8002684 <comm_sendCMD+0x1a4>)
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	1c5a      	adds	r2, r3, #1
 8002506:	b2d1      	uxtb	r1, r2
 8002508:	4a5e      	ldr	r2, [pc, #376]	@ (8002684 <comm_sendCMD+0x1a4>)
 800250a:	7011      	strb	r1, [r2, #0]
 800250c:	461a      	mov	r2, r3
 800250e:	4b5e      	ldr	r3, [pc, #376]	@ (8002688 <comm_sendCMD+0x1a8>)
 8002510:	2155      	movs	r1, #85	@ 0x55
 8002512:	5499      	strb	r1, [r3, r2]
    TxAuxBuffer[auxIndex++] = 'N'; // Header 1
 8002514:	4b5b      	ldr	r3, [pc, #364]	@ (8002684 <comm_sendCMD+0x1a4>)
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	1c5a      	adds	r2, r3, #1
 800251a:	b2d1      	uxtb	r1, r2
 800251c:	4a59      	ldr	r2, [pc, #356]	@ (8002684 <comm_sendCMD+0x1a4>)
 800251e:	7011      	strb	r1, [r2, #0]
 8002520:	461a      	mov	r2, r3
 8002522:	4b59      	ldr	r3, [pc, #356]	@ (8002688 <comm_sendCMD+0x1a8>)
 8002524:	214e      	movs	r1, #78	@ 0x4e
 8002526:	5499      	strb	r1, [r3, r2]
    TxAuxBuffer[auxIndex++] = 'E'; // Header 2
 8002528:	4b56      	ldr	r3, [pc, #344]	@ (8002684 <comm_sendCMD+0x1a4>)
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	1c5a      	adds	r2, r3, #1
 800252e:	b2d1      	uxtb	r1, r2
 8002530:	4a54      	ldr	r2, [pc, #336]	@ (8002684 <comm_sendCMD+0x1a4>)
 8002532:	7011      	strb	r1, [r2, #0]
 8002534:	461a      	mov	r2, r3
 8002536:	4b54      	ldr	r3, [pc, #336]	@ (8002688 <comm_sendCMD+0x1a8>)
 8002538:	2145      	movs	r1, #69	@ 0x45
 800253a:	5499      	strb	r1, [r3, r2]
    TxAuxBuffer[auxIndex++] = 'R'; // Header 3
 800253c:	4b51      	ldr	r3, [pc, #324]	@ (8002684 <comm_sendCMD+0x1a4>)
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	1c5a      	adds	r2, r3, #1
 8002542:	b2d1      	uxtb	r1, r2
 8002544:	4a4f      	ldr	r2, [pc, #316]	@ (8002684 <comm_sendCMD+0x1a4>)
 8002546:	7011      	strb	r1, [r2, #0]
 8002548:	461a      	mov	r2, r3
 800254a:	4b4f      	ldr	r3, [pc, #316]	@ (8002688 <comm_sendCMD+0x1a8>)
 800254c:	2152      	movs	r1, #82	@ 0x52
 800254e:	5499      	strb	r1, [r3, r2]

    indexStart = auxIndex; // Se guarda la posición del primer dato del mensaje (cmd)
 8002550:	4b4c      	ldr	r3, [pc, #304]	@ (8002684 <comm_sendCMD+0x1a4>)
 8002552:	781a      	ldrb	r2, [r3, #0]
 8002554:	4b4d      	ldr	r3, [pc, #308]	@ (800268c <comm_sendCMD+0x1ac>)
 8002556:	701a      	strb	r2, [r3, #0]
    TxAuxBuffer[auxIndex++] = 0;   // Placeholder del indexStart, se sobrescribirá después
 8002558:	4b4a      	ldr	r3, [pc, #296]	@ (8002684 <comm_sendCMD+0x1a4>)
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	1c5a      	adds	r2, r3, #1
 800255e:	b2d1      	uxtb	r1, r2
 8002560:	4a48      	ldr	r2, [pc, #288]	@ (8002684 <comm_sendCMD+0x1a4>)
 8002562:	7011      	strb	r1, [r2, #0]
 8002564:	461a      	mov	r2, r3
 8002566:	4b48      	ldr	r3, [pc, #288]	@ (8002688 <comm_sendCMD+0x1a8>)
 8002568:	2100      	movs	r1, #0
 800256a:	5499      	strb	r1, [r3, r2]

    TxAuxBuffer[auxIndex++] = ':'; // Token
 800256c:	4b45      	ldr	r3, [pc, #276]	@ (8002684 <comm_sendCMD+0x1a4>)
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	1c5a      	adds	r2, r3, #1
 8002572:	b2d1      	uxtb	r1, r2
 8002574:	4a43      	ldr	r2, [pc, #268]	@ (8002684 <comm_sendCMD+0x1a4>)
 8002576:	7011      	strb	r1, [r2, #0]
 8002578:	461a      	mov	r2, r3
 800257a:	4b43      	ldr	r3, [pc, #268]	@ (8002688 <comm_sendCMD+0x1a8>)
 800257c:	213a      	movs	r1, #58	@ 0x3a
 800257e:	5499      	strb	r1, [r3, r2]
    TxAuxBuffer[auxIndex++] = cmd; // Comando
 8002580:	4b40      	ldr	r3, [pc, #256]	@ (8002684 <comm_sendCMD+0x1a4>)
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	1c5a      	adds	r2, r3, #1
 8002586:	b2d1      	uxtb	r1, r2
 8002588:	4a3e      	ldr	r2, [pc, #248]	@ (8002684 <comm_sendCMD+0x1a4>)
 800258a:	7011      	strb	r1, [r2, #0]
 800258c:	4619      	mov	r1, r3
 800258e:	4a3e      	ldr	r2, [pc, #248]	@ (8002688 <comm_sendCMD+0x1a8>)
 8002590:	7afb      	ldrb	r3, [r7, #11]
 8002592:	5453      	strb	r3, [r2, r1]

    if(cmd == USERTEXT || cmd == SYSERROR)
 8002594:	7afb      	ldrb	r3, [r7, #11]
 8002596:	2bb1      	cmp	r3, #177	@ 0xb1
 8002598:	d002      	beq.n	80025a0 <comm_sendCMD+0xc0>
 800259a:	7afb      	ldrb	r3, [r7, #11]
 800259c:	2bee      	cmp	r3, #238	@ 0xee
 800259e:	d109      	bne.n	80025b4 <comm_sendCMD+0xd4>
    	TxAuxBuffer[auxIndex++] = len;
 80025a0:	4b38      	ldr	r3, [pc, #224]	@ (8002684 <comm_sendCMD+0x1a4>)
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	1c5a      	adds	r2, r3, #1
 80025a6:	b2d1      	uxtb	r1, r2
 80025a8:	4a36      	ldr	r2, [pc, #216]	@ (8002684 <comm_sendCMD+0x1a4>)
 80025aa:	7011      	strb	r1, [r2, #0]
 80025ac:	4619      	mov	r1, r3
 80025ae:	4a36      	ldr	r2, [pc, #216]	@ (8002688 <comm_sendCMD+0x1a8>)
 80025b0:	7abb      	ldrb	r3, [r7, #10]
 80025b2:	5453      	strb	r3, [r2, r1]

    // Copia de datos si hay
    if (str != NULL && len > 0) {
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d013      	beq.n	80025e2 <comm_sendCMD+0x102>
 80025ba:	7abb      	ldrb	r3, [r7, #10]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d010      	beq.n	80025e2 <comm_sendCMD+0x102>
        memcpy(&TxAuxBuffer[auxIndex], str, len);
 80025c0:	4b30      	ldr	r3, [pc, #192]	@ (8002684 <comm_sendCMD+0x1a4>)
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	461a      	mov	r2, r3
 80025c6:	4b30      	ldr	r3, [pc, #192]	@ (8002688 <comm_sendCMD+0x1a8>)
 80025c8:	4413      	add	r3, r2
 80025ca:	7aba      	ldrb	r2, [r7, #10]
 80025cc:	6879      	ldr	r1, [r7, #4]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f010 f92c 	bl	801282c <memcpy>
        auxIndex += len;
 80025d4:	4b2b      	ldr	r3, [pc, #172]	@ (8002684 <comm_sendCMD+0x1a4>)
 80025d6:	781a      	ldrb	r2, [r3, #0]
 80025d8:	7abb      	ldrb	r3, [r7, #10]
 80025da:	4413      	add	r3, r2
 80025dc:	b2da      	uxtb	r2, r3
 80025de:	4b29      	ldr	r3, [pc, #164]	@ (8002684 <comm_sendCMD+0x1a4>)
 80025e0:	701a      	strb	r2, [r3, #0]
    }

    indexStartValue = auxIndex - indexStart - 1; // Cantidad de datos desde cmd hasta checksum
 80025e2:	4b28      	ldr	r3, [pc, #160]	@ (8002684 <comm_sendCMD+0x1a4>)
 80025e4:	781a      	ldrb	r2, [r3, #0]
 80025e6:	4b29      	ldr	r3, [pc, #164]	@ (800268c <comm_sendCMD+0x1ac>)
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	3b01      	subs	r3, #1
 80025f0:	b2da      	uxtb	r2, r3
 80025f2:	4b27      	ldr	r3, [pc, #156]	@ (8002690 <comm_sendCMD+0x1b0>)
 80025f4:	701a      	strb	r2, [r3, #0]
    TxAuxBuffer[indexStart] = indexStartValue;
 80025f6:	4b25      	ldr	r3, [pc, #148]	@ (800268c <comm_sendCMD+0x1ac>)
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	461a      	mov	r2, r3
 80025fc:	4b24      	ldr	r3, [pc, #144]	@ (8002690 <comm_sendCMD+0x1b0>)
 80025fe:	7819      	ldrb	r1, [r3, #0]
 8002600:	4b21      	ldr	r3, [pc, #132]	@ (8002688 <comm_sendCMD+0x1a8>)
 8002602:	5499      	strb	r1, [r3, r2]

    // Checksum
    checksum = 0;
 8002604:	4b23      	ldr	r3, [pc, #140]	@ (8002694 <comm_sendCMD+0x1b4>)
 8002606:	2200      	movs	r2, #0
 8002608:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < auxIndex; i++) {
 800260a:	4b1d      	ldr	r3, [pc, #116]	@ (8002680 <comm_sendCMD+0x1a0>)
 800260c:	2200      	movs	r2, #0
 800260e:	701a      	strb	r2, [r3, #0]
 8002610:	e01f      	b.n	8002652 <comm_sendCMD+0x172>
        checksum ^= TxAuxBuffer[i];
 8002612:	4b1b      	ldr	r3, [pc, #108]	@ (8002680 <comm_sendCMD+0x1a0>)
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	461a      	mov	r2, r3
 8002618:	4b1b      	ldr	r3, [pc, #108]	@ (8002688 <comm_sendCMD+0x1a8>)
 800261a:	5c9a      	ldrb	r2, [r3, r2]
 800261c:	4b1d      	ldr	r3, [pc, #116]	@ (8002694 <comm_sendCMD+0x1b4>)
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	4053      	eors	r3, r2
 8002622:	b2da      	uxtb	r2, r3
 8002624:	4b1b      	ldr	r3, [pc, #108]	@ (8002694 <comm_sendCMD+0x1b4>)
 8002626:	701a      	strb	r2, [r3, #0]
        datosCom->Tx.buffer[datosCom->Tx.write++] = TxAuxBuffer[i];
 8002628:	4b15      	ldr	r3, [pc, #84]	@ (8002680 <comm_sendCMD+0x1a0>)
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	4618      	mov	r0, r3
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	78db      	ldrb	r3, [r3, #3]
 8002632:	1c5a      	adds	r2, r3, #1
 8002634:	b2d1      	uxtb	r1, r2
 8002636:	68fa      	ldr	r2, [r7, #12]
 8002638:	70d1      	strb	r1, [r2, #3]
 800263a:	4619      	mov	r1, r3
 800263c:	4b12      	ldr	r3, [pc, #72]	@ (8002688 <comm_sendCMD+0x1a8>)
 800263e:	5c1a      	ldrb	r2, [r3, r0]
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	440b      	add	r3, r1
 8002644:	711a      	strb	r2, [r3, #4]
    for (i = 0; i < auxIndex; i++) {
 8002646:	4b0e      	ldr	r3, [pc, #56]	@ (8002680 <comm_sendCMD+0x1a0>)
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	3301      	adds	r3, #1
 800264c:	b2da      	uxtb	r2, r3
 800264e:	4b0c      	ldr	r3, [pc, #48]	@ (8002680 <comm_sendCMD+0x1a0>)
 8002650:	701a      	strb	r2, [r3, #0]
 8002652:	4b0b      	ldr	r3, [pc, #44]	@ (8002680 <comm_sendCMD+0x1a0>)
 8002654:	781a      	ldrb	r2, [r3, #0]
 8002656:	4b0b      	ldr	r3, [pc, #44]	@ (8002684 <comm_sendCMD+0x1a4>)
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	429a      	cmp	r2, r3
 800265c:	d3d9      	bcc.n	8002612 <comm_sendCMD+0x132>
    }

    datosCom->Tx.buffer[datosCom->Tx.write++] = checksum;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	78db      	ldrb	r3, [r3, #3]
 8002662:	1c5a      	adds	r2, r3, #1
 8002664:	b2d1      	uxtb	r1, r2
 8002666:	68fa      	ldr	r2, [r7, #12]
 8002668:	70d1      	strb	r1, [r2, #3]
 800266a:	4619      	mov	r1, r3
 800266c:	4b09      	ldr	r3, [pc, #36]	@ (8002694 <comm_sendCMD+0x1b4>)
 800266e:	781a      	ldrb	r2, [r3, #0]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	440b      	add	r3, r1
 8002674:	711a      	strb	r2, [r3, #4]
}
 8002676:	bf00      	nop
 8002678:	3710      	adds	r7, #16
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	20000806 	.word	0x20000806
 8002684:	20000807 	.word	0x20000807
 8002688:	20000808 	.word	0x20000808
 800268c:	20000826 	.word	0x20000826
 8002690:	20000827 	.word	0x20000827
 8002694:	20000828 	.word	0x20000828

08002698 <ESP01_SetWIFI>:
//const char CIFSRAPMAC[] = "+CIFSR:APMAC\r";
//const char CIFSRSTAIP[] = "+CIFSR:STAIP\r";
//const char CIFSRSTAMAC[] = "+CIFSR:STAMAC\r";


void ESP01_SetWIFI(const char *ssid, const char *password){
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	6039      	str	r1, [r7, #0]
	esp01ATSate = ESP01ATIDLE;
 80026a2:	4b12      	ldr	r3, [pc, #72]	@ (80026ec <ESP01_SetWIFI+0x54>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	701a      	strb	r2, [r3, #0]
	esp01Flags.byte = 0;
 80026a8:	4b11      	ldr	r3, [pc, #68]	@ (80026f0 <ESP01_SetWIFI+0x58>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	701a      	strb	r2, [r3, #0]

	strncpy(esp01SSID, ssid, 64);
 80026ae:	2240      	movs	r2, #64	@ 0x40
 80026b0:	6879      	ldr	r1, [r7, #4]
 80026b2:	4810      	ldr	r0, [pc, #64]	@ (80026f4 <ESP01_SetWIFI+0x5c>)
 80026b4:	f010 f87a 	bl	80127ac <strncpy>
	esp01SSID[63] = '\0';
 80026b8:	4b0e      	ldr	r3, [pc, #56]	@ (80026f4 <ESP01_SetWIFI+0x5c>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
	strncpy(esp01PASSWORD, password, 32);
 80026c0:	2220      	movs	r2, #32
 80026c2:	6839      	ldr	r1, [r7, #0]
 80026c4:	480c      	ldr	r0, [pc, #48]	@ (80026f8 <ESP01_SetWIFI+0x60>)
 80026c6:	f010 f871 	bl	80127ac <strncpy>
	esp01PASSWORD[31] = '\0';
 80026ca:	4b0b      	ldr	r3, [pc, #44]	@ (80026f8 <ESP01_SetWIFI+0x60>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	77da      	strb	r2, [r3, #31]

	esp01TimeoutTask = 50;
 80026d0:	4b0a      	ldr	r3, [pc, #40]	@ (80026fc <ESP01_SetWIFI+0x64>)
 80026d2:	2232      	movs	r2, #50	@ 0x32
 80026d4:	601a      	str	r2, [r3, #0]
	esp01ATSate = ESP01ATHARDRST0;
 80026d6:	4b05      	ldr	r3, [pc, #20]	@ (80026ec <ESP01_SetWIFI+0x54>)
 80026d8:	220d      	movs	r2, #13
 80026da:	701a      	strb	r2, [r3, #0]

	esp01TriesAT = 0;
 80026dc:	4b08      	ldr	r3, [pc, #32]	@ (8002700 <ESP01_SetWIFI+0x68>)
 80026de:	2200      	movs	r2, #0
 80026e0:	701a      	strb	r2, [r3, #0]

}
 80026e2:	bf00      	nop
 80026e4:	3708      	adds	r7, #8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	2000082a 	.word	0x2000082a
 80026f0:	2000082c 	.word	0x2000082c
 80026f4:	20000844 	.word	0x20000844
 80026f8:	20000884 	.word	0x20000884
 80026fc:	20000830 	.word	0x20000830
 8002700:	20000a60 	.word	0x20000a60

08002704 <ESP01_StartUDP>:


_eESP01STATUS ESP01_StartUDP(const char *RemoteIP, uint16_t RemotePORT, uint16_t LocalPORT){
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	460b      	mov	r3, r1
 800270e:	807b      	strh	r3, [r7, #2]
 8002710:	4613      	mov	r3, r2
 8002712:	803b      	strh	r3, [r7, #0]
	if(esp01Handle.WriteUSARTByte == NULL)
 8002714:	4b1d      	ldr	r3, [pc, #116]	@ (800278c <ESP01_StartUDP+0x88>)
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d102      	bne.n	8002722 <ESP01_StartUDP+0x1e>
		return ESP01_NOT_INIT;
 800271c:	f04f 33ff 	mov.w	r3, #4294967295
 8002720:	e02f      	b.n	8002782 <ESP01_StartUDP+0x7e>

	if(LocalPORT == 0)
 8002722:	883b      	ldrh	r3, [r7, #0]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d102      	bne.n	800272e <ESP01_StartUDP+0x2a>
		LocalPORT = 30000;
 8002728:	f247 5330 	movw	r3, #30000	@ 0x7530
 800272c:	803b      	strh	r3, [r7, #0]

	strcpy(esp01PROTO, "UDP");
 800272e:	4b18      	ldr	r3, [pc, #96]	@ (8002790 <ESP01_StartUDP+0x8c>)
 8002730:	4a18      	ldr	r2, [pc, #96]	@ (8002794 <ESP01_StartUDP+0x90>)
 8002732:	601a      	str	r2, [r3, #0]

	strncpy(esp01RemoteIP, RemoteIP, 15);
 8002734:	220f      	movs	r2, #15
 8002736:	6879      	ldr	r1, [r7, #4]
 8002738:	4817      	ldr	r0, [pc, #92]	@ (8002798 <ESP01_StartUDP+0x94>)
 800273a:	f010 f837 	bl	80127ac <strncpy>
	esp01RemoteIP[15] = '\0';
 800273e:	4b16      	ldr	r3, [pc, #88]	@ (8002798 <ESP01_StartUDP+0x94>)
 8002740:	2200      	movs	r2, #0
 8002742:	73da      	strb	r2, [r3, #15]

	itoa(RemotePORT, esp01RemotePORT, 10);
 8002744:	887b      	ldrh	r3, [r7, #2]
 8002746:	220a      	movs	r2, #10
 8002748:	4914      	ldr	r1, [pc, #80]	@ (800279c <ESP01_StartUDP+0x98>)
 800274a:	4618      	mov	r0, r3
 800274c:	f00f ffc0 	bl	80126d0 <itoa>
	itoa(LocalPORT, esp01LocalPORT, 10);
 8002750:	883b      	ldrh	r3, [r7, #0]
 8002752:	220a      	movs	r2, #10
 8002754:	4912      	ldr	r1, [pc, #72]	@ (80027a0 <ESP01_StartUDP+0x9c>)
 8002756:	4618      	mov	r0, r3
 8002758:	f00f ffba 	bl	80126d0 <itoa>

	if(esp01SSID[0] == '\0')
 800275c:	4b11      	ldr	r3, [pc, #68]	@ (80027a4 <ESP01_StartUDP+0xa0>)
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d101      	bne.n	8002768 <ESP01_StartUDP+0x64>
		return ESP01_WIFI_NOT_SETED;
 8002764:	2301      	movs	r3, #1
 8002766:	e00c      	b.n	8002782 <ESP01_StartUDP+0x7e>

	if(esp01Flags.bit.WIFICONNECTED == 0)
 8002768:	4b0f      	ldr	r3, [pc, #60]	@ (80027a8 <ESP01_StartUDP+0xa4>)
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	f003 0302 	and.w	r3, r3, #2
 8002770:	b2db      	uxtb	r3, r3
 8002772:	2b00      	cmp	r3, #0
 8002774:	d101      	bne.n	800277a <ESP01_StartUDP+0x76>
		return ESP01_WIFI_DISCONNECTED;
 8002776:	2300      	movs	r3, #0
 8002778:	e003      	b.n	8002782 <ESP01_StartUDP+0x7e>

	esp01ATSate = ESP01ATCIPCLOSE;
 800277a:	4b0c      	ldr	r3, [pc, #48]	@ (80027ac <ESP01_StartUDP+0xa8>)
 800277c:	2209      	movs	r2, #9
 800277e:	701a      	strb	r2, [r3, #0]

	return ESP01_UDPTCP_CONNECTING;
 8002780:	2306      	movs	r3, #6
}
 8002782:	4618      	mov	r0, r3
 8002784:	3708      	adds	r7, #8
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	20000a64 	.word	0x20000a64
 8002790:	20000008 	.word	0x20000008
 8002794:	00504455 	.word	0x00504455
 8002798:	200008a4 	.word	0x200008a4
 800279c:	200008b4 	.word	0x200008b4
 80027a0:	200008cc 	.word	0x200008cc
 80027a4:	20000844 	.word	0x20000844
 80027a8:	2000082c 	.word	0x2000082c
 80027ac:	2000082a 	.word	0x2000082a

080027b0 <ESP01_WriteRX>:
	else
		return ESP01_UDPTCP_DISCONNECTED;
}


void ESP01_WriteRX(uint8_t value){
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	4603      	mov	r3, r0
 80027b8:	71fb      	strb	r3, [r7, #7]
//	if(esp01Handle.bufRX == NULL)
//		return;
	esp01RXATBuf[esp01iwRXAT++] = value;
 80027ba:	4b0b      	ldr	r3, [pc, #44]	@ (80027e8 <ESP01_WriteRX+0x38>)
 80027bc:	881b      	ldrh	r3, [r3, #0]
 80027be:	1c5a      	adds	r2, r3, #1
 80027c0:	b291      	uxth	r1, r2
 80027c2:	4a09      	ldr	r2, [pc, #36]	@ (80027e8 <ESP01_WriteRX+0x38>)
 80027c4:	8011      	strh	r1, [r2, #0]
 80027c6:	4619      	mov	r1, r3
 80027c8:	4a08      	ldr	r2, [pc, #32]	@ (80027ec <ESP01_WriteRX+0x3c>)
 80027ca:	79fb      	ldrb	r3, [r7, #7]
 80027cc:	5453      	strb	r3, [r2, r1]
	if(esp01iwRXAT == ESP01RXBUFAT)
 80027ce:	4b06      	ldr	r3, [pc, #24]	@ (80027e8 <ESP01_WriteRX+0x38>)
 80027d0:	881b      	ldrh	r3, [r3, #0]
 80027d2:	2b80      	cmp	r3, #128	@ 0x80
 80027d4:	d102      	bne.n	80027dc <ESP01_WriteRX+0x2c>
		esp01iwRXAT = 0;
 80027d6:	4b04      	ldr	r3, [pc, #16]	@ (80027e8 <ESP01_WriteRX+0x38>)
 80027d8:	2200      	movs	r2, #0
 80027da:	801a      	strh	r2, [r3, #0]
}
 80027dc:	bf00      	nop
 80027de:	370c      	adds	r7, #12
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr
 80027e8:	20000a58 	.word	0x20000a58
 80027ec:	200008d8 	.word	0x200008d8

080027f0 <ESP01_Send>:

_eESP01STATUS ESP01_Send(uint8_t *buf, uint16_t irRingBuf, uint16_t length, uint16_t sizeRingBuf){
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b088      	sub	sp, #32
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	60f8      	str	r0, [r7, #12]
 80027f8:	4608      	mov	r0, r1
 80027fa:	4611      	mov	r1, r2
 80027fc:	461a      	mov	r2, r3
 80027fe:	4603      	mov	r3, r0
 8002800:	817b      	strh	r3, [r7, #10]
 8002802:	460b      	mov	r3, r1
 8002804:	813b      	strh	r3, [r7, #8]
 8002806:	4613      	mov	r3, r2
 8002808:	80fb      	strh	r3, [r7, #6]
	if(esp01Handle.WriteUSARTByte == NULL)
 800280a:	4b46      	ldr	r3, [pc, #280]	@ (8002924 <ESP01_Send+0x134>)
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d102      	bne.n	8002818 <ESP01_Send+0x28>
		return ESP01_NOT_INIT;
 8002812:	f04f 33ff 	mov.w	r3, #4294967295
 8002816:	e081      	b.n	800291c <ESP01_Send+0x12c>

	if(esp01Flags.bit.UDPTCPCONNECTED == 0)
 8002818:	4b43      	ldr	r3, [pc, #268]	@ (8002928 <ESP01_Send+0x138>)
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002820:	b2db      	uxtb	r3, r3
 8002822:	2b00      	cmp	r3, #0
 8002824:	d101      	bne.n	800282a <ESP01_Send+0x3a>
		return ESP01_UDPTCP_DISCONNECTED;
 8002826:	2305      	movs	r3, #5
 8002828:	e078      	b.n	800291c <ESP01_Send+0x12c>

	if(esp01Flags.bit.SENDINGDATA == 0){
 800282a:	4b3f      	ldr	r3, [pc, #252]	@ (8002928 <ESP01_Send+0x138>)
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	f003 0308 	and.w	r3, r3, #8
 8002832:	b2db      	uxtb	r3, r3
 8002834:	2b00      	cmp	r3, #0
 8002836:	d168      	bne.n	800290a <ESP01_Send+0x11a>
		char strInt[10];
		uint8_t l = 0;
 8002838:	2300      	movs	r3, #0
 800283a:	777b      	strb	r3, [r7, #29]

		itoa(length, strInt, 10);
 800283c:	893b      	ldrh	r3, [r7, #8]
 800283e:	f107 0110 	add.w	r1, r7, #16
 8002842:	220a      	movs	r2, #10
 8002844:	4618      	mov	r0, r3
 8002846:	f00f ff43 	bl	80126d0 <itoa>
		l = strlen(strInt);
 800284a:	f107 0310 	add.w	r3, r7, #16
 800284e:	4618      	mov	r0, r3
 8002850:	f7fd fcc6 	bl	80001e0 <strlen>
 8002854:	4603      	mov	r3, r0
 8002856:	777b      	strb	r3, [r7, #29]
		if(l>4 || l==0)
 8002858:	7f7b      	ldrb	r3, [r7, #29]
 800285a:	2b04      	cmp	r3, #4
 800285c:	d802      	bhi.n	8002864 <ESP01_Send+0x74>
 800285e:	7f7b      	ldrb	r3, [r7, #29]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d101      	bne.n	8002868 <ESP01_Send+0x78>
			return ESP01_SEND_ERROR;
 8002864:	230b      	movs	r3, #11
 8002866:	e059      	b.n	800291c <ESP01_Send+0x12c>
		ESP01StrToBufTX(ATCIPSEND);
 8002868:	4830      	ldr	r0, [pc, #192]	@ (800292c <ESP01_Send+0x13c>)
 800286a:	f000 ff4f 	bl	800370c <ESP01StrToBufTX>
		ESP01StrToBufTX(strInt);
 800286e:	f107 0310 	add.w	r3, r7, #16
 8002872:	4618      	mov	r0, r3
 8002874:	f000 ff4a 	bl	800370c <ESP01StrToBufTX>
		ESP01StrToBufTX("\r>");
 8002878:	482d      	ldr	r0, [pc, #180]	@ (8002930 <ESP01_Send+0x140>)
 800287a:	f000 ff47 	bl	800370c <ESP01StrToBufTX>
		for(uint16_t i=0; i<length; i++){
 800287e:	2300      	movs	r3, #0
 8002880:	83fb      	strh	r3, [r7, #30]
 8002882:	e020      	b.n	80028c6 <ESP01_Send+0xd6>
			esp01TXATBuf[esp01iwTX++] = buf[irRingBuf++];
 8002884:	897b      	ldrh	r3, [r7, #10]
 8002886:	1c5a      	adds	r2, r3, #1
 8002888:	817a      	strh	r2, [r7, #10]
 800288a:	461a      	mov	r2, r3
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	441a      	add	r2, r3
 8002890:	4b28      	ldr	r3, [pc, #160]	@ (8002934 <ESP01_Send+0x144>)
 8002892:	881b      	ldrh	r3, [r3, #0]
 8002894:	1c59      	adds	r1, r3, #1
 8002896:	b288      	uxth	r0, r1
 8002898:	4926      	ldr	r1, [pc, #152]	@ (8002934 <ESP01_Send+0x144>)
 800289a:	8008      	strh	r0, [r1, #0]
 800289c:	4619      	mov	r1, r3
 800289e:	7812      	ldrb	r2, [r2, #0]
 80028a0:	4b25      	ldr	r3, [pc, #148]	@ (8002938 <ESP01_Send+0x148>)
 80028a2:	545a      	strb	r2, [r3, r1]
			if(esp01iwTX == ESP01TXBUFAT)
 80028a4:	4b23      	ldr	r3, [pc, #140]	@ (8002934 <ESP01_Send+0x144>)
 80028a6:	881b      	ldrh	r3, [r3, #0]
 80028a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80028ac:	d102      	bne.n	80028b4 <ESP01_Send+0xc4>
				esp01iwTX = 0;
 80028ae:	4b21      	ldr	r3, [pc, #132]	@ (8002934 <ESP01_Send+0x144>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	801a      	strh	r2, [r3, #0]
			if(irRingBuf == sizeRingBuf)
 80028b4:	897a      	ldrh	r2, [r7, #10]
 80028b6:	88fb      	ldrh	r3, [r7, #6]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d101      	bne.n	80028c0 <ESP01_Send+0xd0>
				irRingBuf = 0;
 80028bc:	2300      	movs	r3, #0
 80028be:	817b      	strh	r3, [r7, #10]
		for(uint16_t i=0; i<length; i++){
 80028c0:	8bfb      	ldrh	r3, [r7, #30]
 80028c2:	3301      	adds	r3, #1
 80028c4:	83fb      	strh	r3, [r7, #30]
 80028c6:	8bfa      	ldrh	r2, [r7, #30]
 80028c8:	893b      	ldrh	r3, [r7, #8]
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d3da      	bcc.n	8002884 <ESP01_Send+0x94>
		}
		esp01Flags.bit.TXCIPSEND = 1;
 80028ce:	4a16      	ldr	r2, [pc, #88]	@ (8002928 <ESP01_Send+0x138>)
 80028d0:	7813      	ldrb	r3, [r2, #0]
 80028d2:	f043 0304 	orr.w	r3, r3, #4
 80028d6:	7013      	strb	r3, [r2, #0]
		esp01Flags.bit.SENDINGDATA = 1;
 80028d8:	4a13      	ldr	r2, [pc, #76]	@ (8002928 <ESP01_Send+0x138>)
 80028da:	7813      	ldrb	r3, [r2, #0]
 80028dc:	f043 0308 	orr.w	r3, r3, #8
 80028e0:	7013      	strb	r3, [r2, #0]
		if(ESP01DbgStr != NULL){
 80028e2:	4b16      	ldr	r3, [pc, #88]	@ (800293c <ESP01_Send+0x14c>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d00d      	beq.n	8002906 <ESP01_Send+0x116>
			ESP01DbgStr("+&DBGSENDING DATA ");
 80028ea:	4b14      	ldr	r3, [pc, #80]	@ (800293c <ESP01_Send+0x14c>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4814      	ldr	r0, [pc, #80]	@ (8002940 <ESP01_Send+0x150>)
 80028f0:	4798      	blx	r3
			ESP01DbgStr(strInt);
 80028f2:	4b12      	ldr	r3, [pc, #72]	@ (800293c <ESP01_Send+0x14c>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f107 0210 	add.w	r2, r7, #16
 80028fa:	4610      	mov	r0, r2
 80028fc:	4798      	blx	r3
			ESP01DbgStr("\n");
 80028fe:	4b0f      	ldr	r3, [pc, #60]	@ (800293c <ESP01_Send+0x14c>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4810      	ldr	r0, [pc, #64]	@ (8002944 <ESP01_Send+0x154>)
 8002904:	4798      	blx	r3
		}
		return ESP01_SEND_READY;
 8002906:	2309      	movs	r3, #9
 8002908:	e008      	b.n	800291c <ESP01_Send+0x12c>
	}
	if(ESP01DbgStr != NULL)
 800290a:	4b0c      	ldr	r3, [pc, #48]	@ (800293c <ESP01_Send+0x14c>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d003      	beq.n	800291a <ESP01_Send+0x12a>
		ESP01DbgStr("+&DBGSENDING DATA BUSY\n");
 8002912:	4b0a      	ldr	r3, [pc, #40]	@ (800293c <ESP01_Send+0x14c>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	480c      	ldr	r0, [pc, #48]	@ (8002948 <ESP01_Send+0x158>)
 8002918:	4798      	blx	r3
	return ESP01_SEND_BUSY;
 800291a:	2308      	movs	r3, #8
}
 800291c:	4618      	mov	r0, r3
 800291e:	3720      	adds	r7, #32
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	20000a64 	.word	0x20000a64
 8002928:	2000082c 	.word	0x2000082c
 800292c:	08014588 	.word	0x08014588
 8002930:	080130d8 	.word	0x080130d8
 8002934:	20000a5e 	.word	0x20000a5e
 8002938:	20000958 	.word	0x20000958
 800293c:	20000840 	.word	0x20000840
 8002940:	080130dc 	.word	0x080130dc
 8002944:	080130f0 	.word	0x080130f0
 8002948:	080130f4 	.word	0x080130f4

0800294c <ESP01_Init>:


void ESP01_Init(_sESP01Handle *hESP01){
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]

	memcpy(&esp01Handle, hESP01, sizeof(_sESP01Handle));
 8002954:	220c      	movs	r2, #12
 8002956:	6879      	ldr	r1, [r7, #4]
 8002958:	4810      	ldr	r0, [pc, #64]	@ (800299c <ESP01_Init+0x50>)
 800295a:	f00f ff67 	bl	801282c <memcpy>

	esp01ATSate = ESP01ATIDLE;
 800295e:	4b10      	ldr	r3, [pc, #64]	@ (80029a0 <ESP01_Init+0x54>)
 8002960:	2200      	movs	r2, #0
 8002962:	701a      	strb	r2, [r3, #0]
	esp01HState = 0;
 8002964:	4b0f      	ldr	r3, [pc, #60]	@ (80029a4 <ESP01_Init+0x58>)
 8002966:	2200      	movs	r2, #0
 8002968:	701a      	strb	r2, [r3, #0]
	esp01irTX = 0;
 800296a:	4b0f      	ldr	r3, [pc, #60]	@ (80029a8 <ESP01_Init+0x5c>)
 800296c:	2200      	movs	r2, #0
 800296e:	801a      	strh	r2, [r3, #0]
	esp01iwTX = 0;
 8002970:	4b0e      	ldr	r3, [pc, #56]	@ (80029ac <ESP01_Init+0x60>)
 8002972:	2200      	movs	r2, #0
 8002974:	801a      	strh	r2, [r3, #0]
	esp01irRXAT = 0;
 8002976:	4b0e      	ldr	r3, [pc, #56]	@ (80029b0 <ESP01_Init+0x64>)
 8002978:	2200      	movs	r2, #0
 800297a:	801a      	strh	r2, [r3, #0]
	esp01iwRXAT = 0;
 800297c:	4b0d      	ldr	r3, [pc, #52]	@ (80029b4 <ESP01_Init+0x68>)
 800297e:	2200      	movs	r2, #0
 8002980:	801a      	strh	r2, [r3, #0]
	esp01Flags.byte = 0;
 8002982:	4b0d      	ldr	r3, [pc, #52]	@ (80029b8 <ESP01_Init+0x6c>)
 8002984:	2200      	movs	r2, #0
 8002986:	701a      	strb	r2, [r3, #0]
	ESP01ChangeState = NULL;
 8002988:	4b0c      	ldr	r3, [pc, #48]	@ (80029bc <ESP01_Init+0x70>)
 800298a:	2200      	movs	r2, #0
 800298c:	601a      	str	r2, [r3, #0]
	ESP01DbgStr = NULL;
 800298e:	4b0c      	ldr	r3, [pc, #48]	@ (80029c0 <ESP01_Init+0x74>)
 8002990:	2200      	movs	r2, #0
 8002992:	601a      	str	r2, [r3, #0]
}
 8002994:	bf00      	nop
 8002996:	3708      	adds	r7, #8
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}
 800299c:	20000a64 	.word	0x20000a64
 80029a0:	2000082a 	.word	0x2000082a
 80029a4:	200008d2 	.word	0x200008d2
 80029a8:	20000a5c 	.word	0x20000a5c
 80029ac:	20000a5e 	.word	0x20000a5e
 80029b0:	20000a5a 	.word	0x20000a5a
 80029b4:	20000a58 	.word	0x20000a58
 80029b8:	2000082c 	.word	0x2000082c
 80029bc:	2000083c 	.word	0x2000083c
 80029c0:	20000840 	.word	0x20000840

080029c4 <ESP01_Timeout10ms>:


void ESP01_Timeout10ms(){
 80029c4:	b480      	push	{r7}
 80029c6:	af00      	add	r7, sp, #0
	if(esp01TimeoutTask)
 80029c8:	4b13      	ldr	r3, [pc, #76]	@ (8002a18 <ESP01_Timeout10ms+0x54>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d004      	beq.n	80029da <ESP01_Timeout10ms+0x16>
		esp01TimeoutTask--;
 80029d0:	4b11      	ldr	r3, [pc, #68]	@ (8002a18 <ESP01_Timeout10ms+0x54>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	3b01      	subs	r3, #1
 80029d6:	4a10      	ldr	r2, [pc, #64]	@ (8002a18 <ESP01_Timeout10ms+0x54>)
 80029d8:	6013      	str	r3, [r2, #0]

	if(esp01TimeoutDataRx){
 80029da:	4b10      	ldr	r3, [pc, #64]	@ (8002a1c <ESP01_Timeout10ms+0x58>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d00b      	beq.n	80029fa <ESP01_Timeout10ms+0x36>
		esp01TimeoutDataRx--;
 80029e2:	4b0e      	ldr	r3, [pc, #56]	@ (8002a1c <ESP01_Timeout10ms+0x58>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	3b01      	subs	r3, #1
 80029e8:	4a0c      	ldr	r2, [pc, #48]	@ (8002a1c <ESP01_Timeout10ms+0x58>)
 80029ea:	6013      	str	r3, [r2, #0]
		if(!esp01TimeoutDataRx)
 80029ec:	4b0b      	ldr	r3, [pc, #44]	@ (8002a1c <ESP01_Timeout10ms+0x58>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d102      	bne.n	80029fa <ESP01_Timeout10ms+0x36>
			esp01HState = 0;
 80029f4:	4b0a      	ldr	r3, [pc, #40]	@ (8002a20 <ESP01_Timeout10ms+0x5c>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	701a      	strb	r2, [r3, #0]
	}

	if(esp01TimeoutTxSymbol)
 80029fa:	4b0a      	ldr	r3, [pc, #40]	@ (8002a24 <ESP01_Timeout10ms+0x60>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d004      	beq.n	8002a0c <ESP01_Timeout10ms+0x48>
		esp01TimeoutTxSymbol--;
 8002a02:	4b08      	ldr	r3, [pc, #32]	@ (8002a24 <ESP01_Timeout10ms+0x60>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	3b01      	subs	r3, #1
 8002a08:	4a06      	ldr	r2, [pc, #24]	@ (8002a24 <ESP01_Timeout10ms+0x60>)
 8002a0a:	6013      	str	r3, [r2, #0]
}
 8002a0c:	bf00      	nop
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr
 8002a16:	bf00      	nop
 8002a18:	20000830 	.word	0x20000830
 8002a1c:	20000834 	.word	0x20000834
 8002a20:	200008d2 	.word	0x200008d2
 8002a24:	20000838 	.word	0x20000838

08002a28 <ESP01_Task>:

void ESP01_Task(){
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	af00      	add	r7, sp, #0
	if(esp01irRXAT != esp01iwRXAT)
 8002a2c:	4b08      	ldr	r3, [pc, #32]	@ (8002a50 <ESP01_Task+0x28>)
 8002a2e:	881a      	ldrh	r2, [r3, #0]
 8002a30:	4b08      	ldr	r3, [pc, #32]	@ (8002a54 <ESP01_Task+0x2c>)
 8002a32:	881b      	ldrh	r3, [r3, #0]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d001      	beq.n	8002a3c <ESP01_Task+0x14>
		ESP01ATDecode();
 8002a38:	f000 f820 	bl	8002a7c <ESP01ATDecode>

	if(!esp01TimeoutTask)
 8002a3c:	4b06      	ldr	r3, [pc, #24]	@ (8002a58 <ESP01_Task+0x30>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d101      	bne.n	8002a48 <ESP01_Task+0x20>
		ESP01DOConnection();
 8002a44:	f000 fbdc 	bl	8003200 <ESP01DOConnection>

	ESP01SENDData();
 8002a48:	f000 fde4 	bl	8003614 <ESP01SENDData>
}
 8002a4c:	bf00      	nop
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	20000a5a 	.word	0x20000a5a
 8002a54:	20000a58 	.word	0x20000a58
 8002a58:	20000830 	.word	0x20000830

08002a5c <ESP01_AttachChangeState>:

void ESP01_AttachChangeState(void (*aESP01ChangeState)(_eESP01STATUS esp01State)){
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
	ESP01ChangeState = aESP01ChangeState;
 8002a64:	4a04      	ldr	r2, [pc, #16]	@ (8002a78 <ESP01_AttachChangeState+0x1c>)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6013      	str	r3, [r2, #0]
}
 8002a6a:	bf00      	nop
 8002a6c:	370c      	adds	r7, #12
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop
 8002a78:	2000083c 	.word	0x2000083c

08002a7c <ESP01ATDecode>:
		return 1;
	return 0;
}

/* Private Functions */
static void ESP01ATDecode(){
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
	uint16_t i;
	uint8_t value;
	if(esp01ATSate==ESP01ATHARDRST0 || esp01ATSate==ESP01ATHARDRST1 ||
 8002a82:	4b7f      	ldr	r3, [pc, #508]	@ (8002c80 <ESP01ATDecode+0x204>)
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	2b0d      	cmp	r3, #13
 8002a88:	d007      	beq.n	8002a9a <ESP01ATDecode+0x1e>
 8002a8a:	4b7d      	ldr	r3, [pc, #500]	@ (8002c80 <ESP01ATDecode+0x204>)
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	2b0e      	cmp	r3, #14
 8002a90:	d003      	beq.n	8002a9a <ESP01ATDecode+0x1e>
	   esp01ATSate==ESP01ATHARDRSTSTOP){
 8002a92:	4b7b      	ldr	r3, [pc, #492]	@ (8002c80 <ESP01ATDecode+0x204>)
 8002a94:	781b      	ldrb	r3, [r3, #0]
	if(esp01ATSate==ESP01ATHARDRST0 || esp01ATSate==ESP01ATHARDRST1 ||
 8002a96:	2b0f      	cmp	r3, #15
 8002a98:	d104      	bne.n	8002aa4 <ESP01ATDecode+0x28>
		esp01irRXAT = esp01iwRXAT;
 8002a9a:	4b7a      	ldr	r3, [pc, #488]	@ (8002c84 <ESP01ATDecode+0x208>)
 8002a9c:	881a      	ldrh	r2, [r3, #0]
 8002a9e:	4b7a      	ldr	r3, [pc, #488]	@ (8002c88 <ESP01ATDecode+0x20c>)
 8002aa0:	801a      	strh	r2, [r3, #0]
		return;
 8002aa2:	e3a7      	b.n	80031f4 <ESP01ATDecode+0x778>
	}
	i = esp01iwRXAT;
 8002aa4:	4b77      	ldr	r3, [pc, #476]	@ (8002c84 <ESP01ATDecode+0x208>)
 8002aa6:	881b      	ldrh	r3, [r3, #0]
 8002aa8:	80fb      	strh	r3, [r7, #6]
	esp01TimeoutDataRx = 2;
 8002aaa:	4b78      	ldr	r3, [pc, #480]	@ (8002c8c <ESP01ATDecode+0x210>)
 8002aac:	2202      	movs	r2, #2
 8002aae:	601a      	str	r2, [r3, #0]
	while(esp01irRXAT != i){
 8002ab0:	e39a      	b.n	80031e8 <ESP01ATDecode+0x76c>
		value = esp01RXATBuf[esp01irRXAT];
 8002ab2:	4b75      	ldr	r3, [pc, #468]	@ (8002c88 <ESP01ATDecode+0x20c>)
 8002ab4:	881b      	ldrh	r3, [r3, #0]
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	4b75      	ldr	r3, [pc, #468]	@ (8002c90 <ESP01ATDecode+0x214>)
 8002aba:	5c9b      	ldrb	r3, [r3, r2]
 8002abc:	717b      	strb	r3, [r7, #5]
		switch(esp01HState){
 8002abe:	4b75      	ldr	r3, [pc, #468]	@ (8002c94 <ESP01ATDecode+0x218>)
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	2b0c      	cmp	r3, #12
 8002ac4:	f200 8353 	bhi.w	800316e <ESP01ATDecode+0x6f2>
 8002ac8:	a201      	add	r2, pc, #4	@ (adr r2, 8002ad0 <ESP01ATDecode+0x54>)
 8002aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ace:	bf00      	nop
 8002ad0:	08002b05 	.word	0x08002b05
 8002ad4:	08002bf5 	.word	0x08002bf5
 8002ad8:	08002dd7 	.word	0x08002dd7
 8002adc:	0800316f 	.word	0x0800316f
 8002ae0:	0800316f 	.word	0x0800316f
 8002ae4:	08002fdf 	.word	0x08002fdf
 8002ae8:	08003025 	.word	0x08003025
 8002aec:	0800303b 	.word	0x0800303b
 8002af0:	08003067 	.word	0x08003067
 8002af4:	0800316f 	.word	0x0800316f
 8002af8:	080030b3 	.word	0x080030b3
 8002afc:	080030db 	.word	0x080030db
 8002b00:	08003131 	.word	0x08003131
		case 0:
            indexResponse = 0;
 8002b04:	4b64      	ldr	r3, [pc, #400]	@ (8002c98 <ESP01ATDecode+0x21c>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	701a      	strb	r2, [r3, #0]
            indexResponseChar = 4;
 8002b0a:	4b64      	ldr	r3, [pc, #400]	@ (8002c9c <ESP01ATDecode+0x220>)
 8002b0c:	2204      	movs	r2, #4
 8002b0e:	701a      	strb	r2, [r3, #0]
            while(responses[indexResponse] != NULL){
 8002b10:	e03e      	b.n	8002b90 <ESP01ATDecode+0x114>
                if(value == responses[indexResponse][indexResponseChar]){ // todos los ocmandos de respuesta tienen una cabecer
 8002b12:	4b61      	ldr	r3, [pc, #388]	@ (8002c98 <ESP01ATDecode+0x21c>)
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	461a      	mov	r2, r3
 8002b18:	4b61      	ldr	r3, [pc, #388]	@ (8002ca0 <ESP01ATDecode+0x224>)
 8002b1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b1e:	4a5f      	ldr	r2, [pc, #380]	@ (8002c9c <ESP01ATDecode+0x220>)
 8002b20:	7812      	ldrb	r2, [r2, #0]
 8002b22:	4413      	add	r3, r2
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	797a      	ldrb	r2, [r7, #5]
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d12b      	bne.n	8002b84 <ESP01ATDecode+0x108>
                    esp01nBytes = (responses[indexResponse][0] - '0');			// aca saca los primeros dos numero que guarda la cantidad de bytes de la cabecera hace el *10 pq pone el primer byte en las decenas  y al otro lo suma así nomas
 8002b2c:	4b5a      	ldr	r3, [pc, #360]	@ (8002c98 <ESP01ATDecode+0x21c>)
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	461a      	mov	r2, r3
 8002b32:	4b5b      	ldr	r3, [pc, #364]	@ (8002ca0 <ESP01ATDecode+0x224>)
 8002b34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	3b30      	subs	r3, #48	@ 0x30
 8002b3c:	b29a      	uxth	r2, r3
 8002b3e:	4b59      	ldr	r3, [pc, #356]	@ (8002ca4 <ESP01ATDecode+0x228>)
 8002b40:	801a      	strh	r2, [r3, #0]
                    esp01nBytes *= 10;
 8002b42:	4b58      	ldr	r3, [pc, #352]	@ (8002ca4 <ESP01ATDecode+0x228>)
 8002b44:	881b      	ldrh	r3, [r3, #0]
 8002b46:	461a      	mov	r2, r3
 8002b48:	0092      	lsls	r2, r2, #2
 8002b4a:	4413      	add	r3, r2
 8002b4c:	005b      	lsls	r3, r3, #1
 8002b4e:	b29a      	uxth	r2, r3
 8002b50:	4b54      	ldr	r3, [pc, #336]	@ (8002ca4 <ESP01ATDecode+0x228>)
 8002b52:	801a      	strh	r2, [r3, #0]
                    esp01nBytes += (responses[indexResponse][1] - '0');
 8002b54:	4b50      	ldr	r3, [pc, #320]	@ (8002c98 <ESP01ATDecode+0x21c>)
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	461a      	mov	r2, r3
 8002b5a:	4b51      	ldr	r3, [pc, #324]	@ (8002ca0 <ESP01ATDecode+0x224>)
 8002b5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b60:	3301      	adds	r3, #1
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	461a      	mov	r2, r3
 8002b66:	4b4f      	ldr	r3, [pc, #316]	@ (8002ca4 <ESP01ATDecode+0x228>)
 8002b68:	881b      	ldrh	r3, [r3, #0]
 8002b6a:	4413      	add	r3, r2
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	3b30      	subs	r3, #48	@ 0x30
 8002b70:	b29a      	uxth	r2, r3
 8002b72:	4b4c      	ldr	r3, [pc, #304]	@ (8002ca4 <ESP01ATDecode+0x228>)
 8002b74:	801a      	strh	r2, [r3, #0]
                    esp01nBytes--;
 8002b76:	4b4b      	ldr	r3, [pc, #300]	@ (8002ca4 <ESP01ATDecode+0x228>)
 8002b78:	881b      	ldrh	r3, [r3, #0]
 8002b7a:	3b01      	subs	r3, #1
 8002b7c:	b29a      	uxth	r2, r3
 8002b7e:	4b49      	ldr	r3, [pc, #292]	@ (8002ca4 <ESP01ATDecode+0x228>)
 8002b80:	801a      	strh	r2, [r3, #0]
                    break;
 8002b82:	e00d      	b.n	8002ba0 <ESP01ATDecode+0x124>
                }
                indexResponse++;
 8002b84:	4b44      	ldr	r3, [pc, #272]	@ (8002c98 <ESP01ATDecode+0x21c>)
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	3301      	adds	r3, #1
 8002b8a:	b2da      	uxtb	r2, r3
 8002b8c:	4b42      	ldr	r3, [pc, #264]	@ (8002c98 <ESP01ATDecode+0x21c>)
 8002b8e:	701a      	strb	r2, [r3, #0]
            while(responses[indexResponse] != NULL){
 8002b90:	4b41      	ldr	r3, [pc, #260]	@ (8002c98 <ESP01ATDecode+0x21c>)
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	461a      	mov	r2, r3
 8002b96:	4b42      	ldr	r3, [pc, #264]	@ (8002ca0 <ESP01ATDecode+0x224>)
 8002b98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d1b8      	bne.n	8002b12 <ESP01ATDecode+0x96>
            }
            if(responses[indexResponse] != NULL){
 8002ba0:	4b3d      	ldr	r3, [pc, #244]	@ (8002c98 <ESP01ATDecode+0x21c>)
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	4b3e      	ldr	r3, [pc, #248]	@ (8002ca0 <ESP01ATDecode+0x224>)
 8002ba8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d009      	beq.n	8002bc4 <ESP01ATDecode+0x148>
                esp01HState = 1;
 8002bb0:	4b38      	ldr	r3, [pc, #224]	@ (8002c94 <ESP01ATDecode+0x218>)
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	701a      	strb	r2, [r3, #0]
                indexResponseChar++;
 8002bb6:	4b39      	ldr	r3, [pc, #228]	@ (8002c9c <ESP01ATDecode+0x220>)
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	3301      	adds	r3, #1
 8002bbc:	b2da      	uxtb	r2, r3
 8002bbe:	4b37      	ldr	r3, [pc, #220]	@ (8002c9c <ESP01ATDecode+0x220>)
 8002bc0:	701a      	strb	r2, [r3, #0]
						esp01Flags.bit.WAITINGSYMBOL = 0;
						esp01TimeoutTxSymbol = 0;
					}
				}
			}
			break;
 8002bc2:	e2db      	b.n	800317c <ESP01ATDecode+0x700>
				esp01TimeoutDataRx = 0;
 8002bc4:	4b31      	ldr	r3, [pc, #196]	@ (8002c8c <ESP01ATDecode+0x210>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	601a      	str	r2, [r3, #0]
				if(esp01Flags.bit.WAITINGSYMBOL){
 8002bca:	4b37      	ldr	r3, [pc, #220]	@ (8002ca8 <ESP01ATDecode+0x22c>)
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	f003 0301 	and.w	r3, r3, #1
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	f000 82d1 	beq.w	800317c <ESP01ATDecode+0x700>
					if(value == '>'){
 8002bda:	797b      	ldrb	r3, [r7, #5]
 8002bdc:	2b3e      	cmp	r3, #62	@ 0x3e
 8002bde:	f040 82cd 	bne.w	800317c <ESP01ATDecode+0x700>
						esp01Flags.bit.WAITINGSYMBOL = 0;
 8002be2:	4a31      	ldr	r2, [pc, #196]	@ (8002ca8 <ESP01ATDecode+0x22c>)
 8002be4:	7813      	ldrb	r3, [r2, #0]
 8002be6:	f023 0301 	bic.w	r3, r3, #1
 8002bea:	7013      	strb	r3, [r2, #0]
						esp01TimeoutTxSymbol = 0;
 8002bec:	4b2f      	ldr	r3, [pc, #188]	@ (8002cac <ESP01ATDecode+0x230>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	601a      	str	r2, [r3, #0]
			break;
 8002bf2:	e2c3      	b.n	800317c <ESP01ATDecode+0x700>
		case 1:
            if(value == responses[indexResponse][indexResponseChar]){
 8002bf4:	4b28      	ldr	r3, [pc, #160]	@ (8002c98 <ESP01ATDecode+0x21c>)
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	4b29      	ldr	r3, [pc, #164]	@ (8002ca0 <ESP01ATDecode+0x224>)
 8002bfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c00:	4a26      	ldr	r2, [pc, #152]	@ (8002c9c <ESP01ATDecode+0x220>)
 8002c02:	7812      	ldrb	r2, [r2, #0]
 8002c04:	4413      	add	r3, r2
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	797a      	ldrb	r2, [r7, #5]
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d133      	bne.n	8002c76 <ESP01ATDecode+0x1fa>
                esp01nBytes--;
 8002c0e:	4b25      	ldr	r3, [pc, #148]	@ (8002ca4 <ESP01ATDecode+0x228>)
 8002c10:	881b      	ldrh	r3, [r3, #0]
 8002c12:	3b01      	subs	r3, #1
 8002c14:	b29a      	uxth	r2, r3
 8002c16:	4b23      	ldr	r3, [pc, #140]	@ (8002ca4 <ESP01ATDecode+0x228>)
 8002c18:	801a      	strh	r2, [r3, #0]
                if(!esp01nBytes || value=='\r'){
 8002c1a:	4b22      	ldr	r3, [pc, #136]	@ (8002ca4 <ESP01ATDecode+0x228>)
 8002c1c:	881b      	ldrh	r3, [r3, #0]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d003      	beq.n	8002c2a <ESP01ATDecode+0x1ae>
 8002c22:	797b      	ldrb	r3, [r7, #5]
 8002c24:	2b0d      	cmp	r3, #13
 8002c26:	f040 80cf 	bne.w	8002dc8 <ESP01ATDecode+0x34c>
                    esp01HState = (responses[indexResponse][2] - '0');
 8002c2a:	4b1b      	ldr	r3, [pc, #108]	@ (8002c98 <ESP01ATDecode+0x21c>)
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	461a      	mov	r2, r3
 8002c30:	4b1b      	ldr	r3, [pc, #108]	@ (8002ca0 <ESP01ATDecode+0x224>)
 8002c32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c36:	3302      	adds	r3, #2
 8002c38:	781b      	ldrb	r3, [r3, #0]
 8002c3a:	3b30      	subs	r3, #48	@ 0x30
 8002c3c:	b2da      	uxtb	r2, r3
 8002c3e:	4b15      	ldr	r3, [pc, #84]	@ (8002c94 <ESP01ATDecode+0x218>)
 8002c40:	701a      	strb	r2, [r3, #0]
                    esp01HState *= 10;
 8002c42:	4b14      	ldr	r3, [pc, #80]	@ (8002c94 <ESP01ATDecode+0x218>)
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	461a      	mov	r2, r3
 8002c48:	0092      	lsls	r2, r2, #2
 8002c4a:	4413      	add	r3, r2
 8002c4c:	005b      	lsls	r3, r3, #1
 8002c4e:	b2da      	uxtb	r2, r3
 8002c50:	4b10      	ldr	r3, [pc, #64]	@ (8002c94 <ESP01ATDecode+0x218>)
 8002c52:	701a      	strb	r2, [r3, #0]
                    esp01HState += (responses[indexResponse][3] - '0');
 8002c54:	4b10      	ldr	r3, [pc, #64]	@ (8002c98 <ESP01ATDecode+0x21c>)
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	461a      	mov	r2, r3
 8002c5a:	4b11      	ldr	r3, [pc, #68]	@ (8002ca0 <ESP01ATDecode+0x224>)
 8002c5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c60:	3303      	adds	r3, #3
 8002c62:	781a      	ldrb	r2, [r3, #0]
 8002c64:	4b0b      	ldr	r3, [pc, #44]	@ (8002c94 <ESP01ATDecode+0x218>)
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	4413      	add	r3, r2
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	3b30      	subs	r3, #48	@ 0x30
 8002c6e:	b2da      	uxtb	r2, r3
 8002c70:	4b08      	ldr	r3, [pc, #32]	@ (8002c94 <ESP01ATDecode+0x218>)
 8002c72:	701a      	strb	r2, [r3, #0]
                    break;
 8002c74:	e2ab      	b.n	80031ce <ESP01ATDecode+0x752>
                }
            }
            else{
                indexResponse = 0;
 8002c76:	4b08      	ldr	r3, [pc, #32]	@ (8002c98 <ESP01ATDecode+0x21c>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	701a      	strb	r2, [r3, #0]
                while(responses[indexResponse] != NULL){
 8002c7c:	e088      	b.n	8002d90 <ESP01ATDecode+0x314>
 8002c7e:	bf00      	nop
 8002c80:	2000082a 	.word	0x2000082a
 8002c84:	20000a58 	.word	0x20000a58
 8002c88:	20000a5a 	.word	0x20000a5a
 8002c8c:	20000834 	.word	0x20000834
 8002c90:	200008d8 	.word	0x200008d8
 8002c94:	200008d2 	.word	0x200008d2
 8002c98:	20000a70 	.word	0x20000a70
 8002c9c:	20000a71 	.word	0x20000a71
 8002ca0:	080146ac 	.word	0x080146ac
 8002ca4:	200008d4 	.word	0x200008d4
 8002ca8:	2000082c 	.word	0x2000082c
 8002cac:	20000838 	.word	0x20000838
                    esp01nBytes = (responses[indexResponse][0] - '0');
 8002cb0:	4b99      	ldr	r3, [pc, #612]	@ (8002f18 <ESP01ATDecode+0x49c>)
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	4b99      	ldr	r3, [pc, #612]	@ (8002f1c <ESP01ATDecode+0x4a0>)
 8002cb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	3b30      	subs	r3, #48	@ 0x30
 8002cc0:	b29a      	uxth	r2, r3
 8002cc2:	4b97      	ldr	r3, [pc, #604]	@ (8002f20 <ESP01ATDecode+0x4a4>)
 8002cc4:	801a      	strh	r2, [r3, #0]
                    esp01nBytes *= 10;
 8002cc6:	4b96      	ldr	r3, [pc, #600]	@ (8002f20 <ESP01ATDecode+0x4a4>)
 8002cc8:	881b      	ldrh	r3, [r3, #0]
 8002cca:	461a      	mov	r2, r3
 8002ccc:	0092      	lsls	r2, r2, #2
 8002cce:	4413      	add	r3, r2
 8002cd0:	005b      	lsls	r3, r3, #1
 8002cd2:	b29a      	uxth	r2, r3
 8002cd4:	4b92      	ldr	r3, [pc, #584]	@ (8002f20 <ESP01ATDecode+0x4a4>)
 8002cd6:	801a      	strh	r2, [r3, #0]
                    esp01nBytes += (responses[indexResponse][1] - '0');
 8002cd8:	4b8f      	ldr	r3, [pc, #572]	@ (8002f18 <ESP01ATDecode+0x49c>)
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	461a      	mov	r2, r3
 8002cde:	4b8f      	ldr	r3, [pc, #572]	@ (8002f1c <ESP01ATDecode+0x4a0>)
 8002ce0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ce4:	3301      	adds	r3, #1
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	461a      	mov	r2, r3
 8002cea:	4b8d      	ldr	r3, [pc, #564]	@ (8002f20 <ESP01ATDecode+0x4a4>)
 8002cec:	881b      	ldrh	r3, [r3, #0]
 8002cee:	4413      	add	r3, r2
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	3b30      	subs	r3, #48	@ 0x30
 8002cf4:	b29a      	uxth	r2, r3
 8002cf6:	4b8a      	ldr	r3, [pc, #552]	@ (8002f20 <ESP01ATDecode+0x4a4>)
 8002cf8:	801a      	strh	r2, [r3, #0]
                    esp01nBytes -= (indexResponseChar-3);
 8002cfa:	4b89      	ldr	r3, [pc, #548]	@ (8002f20 <ESP01ATDecode+0x4a4>)
 8002cfc:	881b      	ldrh	r3, [r3, #0]
 8002cfe:	4a89      	ldr	r2, [pc, #548]	@ (8002f24 <ESP01ATDecode+0x4a8>)
 8002d00:	7812      	ldrb	r2, [r2, #0]
 8002d02:	1a9b      	subs	r3, r3, r2
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	3303      	adds	r3, #3
 8002d08:	b29a      	uxth	r2, r3
 8002d0a:	4b85      	ldr	r3, [pc, #532]	@ (8002f20 <ESP01ATDecode+0x4a4>)
 8002d0c:	801a      	strh	r2, [r3, #0]
                    if(esp01nBytes<128 && value==responses[indexResponse][indexResponseChar]){
 8002d0e:	4b84      	ldr	r3, [pc, #528]	@ (8002f20 <ESP01ATDecode+0x4a4>)
 8002d10:	881b      	ldrh	r3, [r3, #0]
 8002d12:	2b7f      	cmp	r3, #127	@ 0x7f
 8002d14:	d836      	bhi.n	8002d84 <ESP01ATDecode+0x308>
 8002d16:	4b80      	ldr	r3, [pc, #512]	@ (8002f18 <ESP01ATDecode+0x49c>)
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	4b7f      	ldr	r3, [pc, #508]	@ (8002f1c <ESP01ATDecode+0x4a0>)
 8002d1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d22:	4a80      	ldr	r2, [pc, #512]	@ (8002f24 <ESP01ATDecode+0x4a8>)
 8002d24:	7812      	ldrb	r2, [r2, #0]
 8002d26:	4413      	add	r3, r2
 8002d28:	781b      	ldrb	r3, [r3, #0]
 8002d2a:	797a      	ldrb	r2, [r7, #5]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d129      	bne.n	8002d84 <ESP01ATDecode+0x308>
                        if(esp01nBytes == 0){
 8002d30:	4b7b      	ldr	r3, [pc, #492]	@ (8002f20 <ESP01ATDecode+0x4a4>)
 8002d32:	881b      	ldrh	r3, [r3, #0]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d134      	bne.n	8002da2 <ESP01ATDecode+0x326>
                            esp01HState = (responses[indexResponse][2] - '0');
 8002d38:	4b77      	ldr	r3, [pc, #476]	@ (8002f18 <ESP01ATDecode+0x49c>)
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	4b77      	ldr	r3, [pc, #476]	@ (8002f1c <ESP01ATDecode+0x4a0>)
 8002d40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d44:	3302      	adds	r3, #2
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	3b30      	subs	r3, #48	@ 0x30
 8002d4a:	b2da      	uxtb	r2, r3
 8002d4c:	4b76      	ldr	r3, [pc, #472]	@ (8002f28 <ESP01ATDecode+0x4ac>)
 8002d4e:	701a      	strb	r2, [r3, #0]
                            esp01HState *= 10;
 8002d50:	4b75      	ldr	r3, [pc, #468]	@ (8002f28 <ESP01ATDecode+0x4ac>)
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	461a      	mov	r2, r3
 8002d56:	0092      	lsls	r2, r2, #2
 8002d58:	4413      	add	r3, r2
 8002d5a:	005b      	lsls	r3, r3, #1
 8002d5c:	b2da      	uxtb	r2, r3
 8002d5e:	4b72      	ldr	r3, [pc, #456]	@ (8002f28 <ESP01ATDecode+0x4ac>)
 8002d60:	701a      	strb	r2, [r3, #0]
                            esp01HState += (responses[indexResponse][3] - '0');
 8002d62:	4b6d      	ldr	r3, [pc, #436]	@ (8002f18 <ESP01ATDecode+0x49c>)
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	461a      	mov	r2, r3
 8002d68:	4b6c      	ldr	r3, [pc, #432]	@ (8002f1c <ESP01ATDecode+0x4a0>)
 8002d6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d6e:	3303      	adds	r3, #3
 8002d70:	781a      	ldrb	r2, [r3, #0]
 8002d72:	4b6d      	ldr	r3, [pc, #436]	@ (8002f28 <ESP01ATDecode+0x4ac>)
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	4413      	add	r3, r2
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	3b30      	subs	r3, #48	@ 0x30
 8002d7c:	b2da      	uxtb	r2, r3
 8002d7e:	4b6a      	ldr	r3, [pc, #424]	@ (8002f28 <ESP01ATDecode+0x4ac>)
 8002d80:	701a      	strb	r2, [r3, #0]
                        }
                        break;
 8002d82:	e00e      	b.n	8002da2 <ESP01ATDecode+0x326>
                    }
                    indexResponse++;
 8002d84:	4b64      	ldr	r3, [pc, #400]	@ (8002f18 <ESP01ATDecode+0x49c>)
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	3301      	adds	r3, #1
 8002d8a:	b2da      	uxtb	r2, r3
 8002d8c:	4b62      	ldr	r3, [pc, #392]	@ (8002f18 <ESP01ATDecode+0x49c>)
 8002d8e:	701a      	strb	r2, [r3, #0]
                while(responses[indexResponse] != NULL){
 8002d90:	4b61      	ldr	r3, [pc, #388]	@ (8002f18 <ESP01ATDecode+0x49c>)
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	461a      	mov	r2, r3
 8002d96:	4b61      	ldr	r3, [pc, #388]	@ (8002f1c <ESP01ATDecode+0x4a0>)
 8002d98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d187      	bne.n	8002cb0 <ESP01ATDecode+0x234>
 8002da0:	e000      	b.n	8002da4 <ESP01ATDecode+0x328>
                        break;
 8002da2:	bf00      	nop
                }
                if(responses[indexResponse] == NULL){
 8002da4:	4b5c      	ldr	r3, [pc, #368]	@ (8002f18 <ESP01ATDecode+0x49c>)
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	461a      	mov	r2, r3
 8002daa:	4b5c      	ldr	r3, [pc, #368]	@ (8002f1c <ESP01ATDecode+0x4a0>)
 8002dac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d109      	bne.n	8002dc8 <ESP01ATDecode+0x34c>
                    esp01HState = 0;
 8002db4:	4b5c      	ldr	r3, [pc, #368]	@ (8002f28 <ESP01ATDecode+0x4ac>)
 8002db6:	2200      	movs	r2, #0
 8002db8:	701a      	strb	r2, [r3, #0]
                    esp01irRXAT--;
 8002dba:	4b5c      	ldr	r3, [pc, #368]	@ (8002f2c <ESP01ATDecode+0x4b0>)
 8002dbc:	881b      	ldrh	r3, [r3, #0]
 8002dbe:	3b01      	subs	r3, #1
 8002dc0:	b29a      	uxth	r2, r3
 8002dc2:	4b5a      	ldr	r3, [pc, #360]	@ (8002f2c <ESP01ATDecode+0x4b0>)
 8002dc4:	801a      	strh	r2, [r3, #0]
                    break;
 8002dc6:	e202      	b.n	80031ce <ESP01ATDecode+0x752>
                }
            }
			indexResponseChar++;
 8002dc8:	4b56      	ldr	r3, [pc, #344]	@ (8002f24 <ESP01ATDecode+0x4a8>)
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	3301      	adds	r3, #1
 8002dce:	b2da      	uxtb	r2, r3
 8002dd0:	4b54      	ldr	r3, [pc, #336]	@ (8002f24 <ESP01ATDecode+0x4a8>)
 8002dd2:	701a      	strb	r2, [r3, #0]
			break;
 8002dd4:	e1fb      	b.n	80031ce <ESP01ATDecode+0x752>
		case 2:
			if(value == '\n'){
 8002dd6:	797b      	ldrb	r3, [r7, #5]
 8002dd8:	2b0a      	cmp	r3, #10
 8002dda:	f040 81d1 	bne.w	8003180 <ESP01ATDecode+0x704>
				esp01HState = 0;
 8002dde:	4b52      	ldr	r3, [pc, #328]	@ (8002f28 <ESP01ATDecode+0x4ac>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	701a      	strb	r2, [r3, #0]
				switch(indexResponse){
 8002de4:	4b4c      	ldr	r3, [pc, #304]	@ (8002f18 <ESP01ATDecode+0x49c>)
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	2b11      	cmp	r3, #17
 8002dea:	f200 81c9 	bhi.w	8003180 <ESP01ATDecode+0x704>
 8002dee:	a201      	add	r2, pc, #4	@ (adr r2, 8002df4 <ESP01ATDecode+0x378>)
 8002df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002df4:	08002fc3 	.word	0x08002fc3
 8002df8:	08002fc3 	.word	0x08002fc3
 8002dfc:	08002e3d 	.word	0x08002e3d
 8002e00:	08002e59 	.word	0x08002e59
 8002e04:	08002e87 	.word	0x08002e87
 8002e08:	08002fc3 	.word	0x08002fc3
 8002e0c:	08002ebd 	.word	0x08002ebd
 8002e10:	08002ebd 	.word	0x08002ebd
 8002e14:	08002ef1 	.word	0x08002ef1
 8002e18:	08002efd 	.word	0x08002efd
 8002e1c:	08002f49 	.word	0x08002f49
 8002e20:	08002f85 	.word	0x08002f85
 8002e24:	08003181 	.word	0x08003181
 8002e28:	08002f91 	.word	0x08002f91
 8002e2c:	08003181 	.word	0x08003181
 8002e30:	08002fa7 	.word	0x08002fa7
 8002e34:	08002fc3 	.word	0x08002fc3
 8002e38:	08002fc3 	.word	0x08002fc3
				case 0://AT
				case 1:
					break;
				case 2://OK
					if(esp01ATSate == ESP01ATRESPONSE){
 8002e3c:	4b3c      	ldr	r3, [pc, #240]	@ (8002f30 <ESP01ATDecode+0x4b4>)
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	f040 80c0 	bne.w	8002fc6 <ESP01ATDecode+0x54a>
						esp01TimeoutTask = 0;
 8002e46:	4b3b      	ldr	r3, [pc, #236]	@ (8002f34 <ESP01ATDecode+0x4b8>)
 8002e48:	2200      	movs	r2, #0
 8002e4a:	601a      	str	r2, [r3, #0]
						esp01Flags.bit.ATRESPONSEOK = 1;
 8002e4c:	4a3a      	ldr	r2, [pc, #232]	@ (8002f38 <ESP01ATDecode+0x4bc>)
 8002e4e:	7813      	ldrb	r3, [r2, #0]
 8002e50:	f043 0320 	orr.w	r3, r3, #32
 8002e54:	7013      	strb	r3, [r2, #0]
					}
					break;
 8002e56:	e0b6      	b.n	8002fc6 <ESP01ATDecode+0x54a>
				case 3://ERROR
					if(esp01Flags.bit.SENDINGDATA){
 8002e58:	4b37      	ldr	r3, [pc, #220]	@ (8002f38 <ESP01ATDecode+0x4bc>)
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	f003 0308 	and.w	r3, r3, #8
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	f000 80b1 	beq.w	8002fca <ESP01ATDecode+0x54e>
						esp01Flags.bit.SENDINGDATA = 0;
 8002e68:	4a33      	ldr	r2, [pc, #204]	@ (8002f38 <ESP01ATDecode+0x4bc>)
 8002e6a:	7813      	ldrb	r3, [r2, #0]
 8002e6c:	f023 0308 	bic.w	r3, r3, #8
 8002e70:	7013      	strb	r3, [r2, #0]
						esp01Flags.bit.UDPTCPCONNECTED = 0;
 8002e72:	4a31      	ldr	r2, [pc, #196]	@ (8002f38 <ESP01ATDecode+0x4bc>)
 8002e74:	7813      	ldrb	r3, [r2, #0]
 8002e76:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002e7a:	7013      	strb	r3, [r2, #0]
						esp01irTX = esp01iwTX;
 8002e7c:	4b2f      	ldr	r3, [pc, #188]	@ (8002f3c <ESP01ATDecode+0x4c0>)
 8002e7e:	881a      	ldrh	r2, [r3, #0]
 8002e80:	4b2f      	ldr	r3, [pc, #188]	@ (8002f40 <ESP01ATDecode+0x4c4>)
 8002e82:	801a      	strh	r2, [r3, #0]
					}
					break;
 8002e84:	e0a1      	b.n	8002fca <ESP01ATDecode+0x54e>
				case 4://WIFI GOT IP
					esp01TimeoutTask = 0;
 8002e86:	4b2b      	ldr	r3, [pc, #172]	@ (8002f34 <ESP01ATDecode+0x4b8>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	601a      	str	r2, [r3, #0]
					if(esp01ATSate == ESP01CWJAPRESPONSE)
 8002e8c:	4b28      	ldr	r3, [pc, #160]	@ (8002f30 <ESP01ATDecode+0x4b4>)
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	2b06      	cmp	r3, #6
 8002e92:	d104      	bne.n	8002e9e <ESP01ATDecode+0x422>
						esp01Flags.bit.ATRESPONSEOK = 1;
 8002e94:	4a28      	ldr	r2, [pc, #160]	@ (8002f38 <ESP01ATDecode+0x4bc>)
 8002e96:	7813      	ldrb	r3, [r2, #0]
 8002e98:	f043 0320 	orr.w	r3, r3, #32
 8002e9c:	7013      	strb	r3, [r2, #0]
					esp01Flags.bit.WIFICONNECTED = 1;
 8002e9e:	4a26      	ldr	r2, [pc, #152]	@ (8002f38 <ESP01ATDecode+0x4bc>)
 8002ea0:	7813      	ldrb	r3, [r2, #0]
 8002ea2:	f043 0302 	orr.w	r3, r3, #2
 8002ea6:	7013      	strb	r3, [r2, #0]
					if(ESP01ChangeState != NULL)
 8002ea8:	4b26      	ldr	r3, [pc, #152]	@ (8002f44 <ESP01ATDecode+0x4c8>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	f000 808e 	beq.w	8002fce <ESP01ATDecode+0x552>
						ESP01ChangeState(ESP01_WIFI_CONNECTED);
 8002eb2:	4b24      	ldr	r3, [pc, #144]	@ (8002f44 <ESP01ATDecode+0x4c8>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	2003      	movs	r0, #3
 8002eb8:	4798      	blx	r3
					break;
 8002eba:	e088      	b.n	8002fce <ESP01ATDecode+0x552>
				case 5://WIFI CONNECTED
					break;
				case 6://WIFI DISCONNECT
				case 7://WIFI DISCONNECTED
					esp01Flags.bit.UDPTCPCONNECTED = 0;
 8002ebc:	4a1e      	ldr	r2, [pc, #120]	@ (8002f38 <ESP01ATDecode+0x4bc>)
 8002ebe:	7813      	ldrb	r3, [r2, #0]
 8002ec0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002ec4:	7013      	strb	r3, [r2, #0]
					esp01Flags.bit.WIFICONNECTED = 0;
 8002ec6:	4a1c      	ldr	r2, [pc, #112]	@ (8002f38 <ESP01ATDecode+0x4bc>)
 8002ec8:	7813      	ldrb	r3, [r2, #0]
 8002eca:	f023 0302 	bic.w	r3, r3, #2
 8002ece:	7013      	strb	r3, [r2, #0]
					if(ESP01ChangeState != NULL)
 8002ed0:	4b1c      	ldr	r3, [pc, #112]	@ (8002f44 <ESP01ATDecode+0x4c8>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d003      	beq.n	8002ee0 <ESP01ATDecode+0x464>
						ESP01ChangeState(ESP01_WIFI_DISCONNECTED);
 8002ed8:	4b1a      	ldr	r3, [pc, #104]	@ (8002f44 <ESP01ATDecode+0x4c8>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2000      	movs	r0, #0
 8002ede:	4798      	blx	r3
					if(esp01ATSate == ESP01CWJAPRESPONSE)
 8002ee0:	4b13      	ldr	r3, [pc, #76]	@ (8002f30 <ESP01ATDecode+0x4b4>)
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	2b06      	cmp	r3, #6
 8002ee6:	d074      	beq.n	8002fd2 <ESP01ATDecode+0x556>
						break;
					esp01ATSate = ESP01ATHARDRSTSTOP;
 8002ee8:	4b11      	ldr	r3, [pc, #68]	@ (8002f30 <ESP01ATDecode+0x4b4>)
 8002eea:	220f      	movs	r2, #15
 8002eec:	701a      	strb	r2, [r3, #0]
					break;
 8002eee:	e075      	b.n	8002fdc <ESP01ATDecode+0x560>
				case 8://DISCONNECTED
					esp01Flags.bit.UDPTCPCONNECTED = 0;
 8002ef0:	4a11      	ldr	r2, [pc, #68]	@ (8002f38 <ESP01ATDecode+0x4bc>)
 8002ef2:	7813      	ldrb	r3, [r2, #0]
 8002ef4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002ef8:	7013      	strb	r3, [r2, #0]
					break;
 8002efa:	e06f      	b.n	8002fdc <ESP01ATDecode+0x560>
				case 9://SEND OK
					esp01Flags.bit.SENDINGDATA = 0;
 8002efc:	4a0e      	ldr	r2, [pc, #56]	@ (8002f38 <ESP01ATDecode+0x4bc>)
 8002efe:	7813      	ldrb	r3, [r2, #0]
 8002f00:	f023 0308 	bic.w	r3, r3, #8
 8002f04:	7013      	strb	r3, [r2, #0]
					if(ESP01ChangeState != NULL)
 8002f06:	4b0f      	ldr	r3, [pc, #60]	@ (8002f44 <ESP01ATDecode+0x4c8>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d063      	beq.n	8002fd6 <ESP01ATDecode+0x55a>
						ESP01ChangeState(ESP01_SEND_OK);
 8002f0e:	4b0d      	ldr	r3, [pc, #52]	@ (8002f44 <ESP01ATDecode+0x4c8>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	200a      	movs	r0, #10
 8002f14:	4798      	blx	r3
					break;
 8002f16:	e05e      	b.n	8002fd6 <ESP01ATDecode+0x55a>
 8002f18:	20000a70 	.word	0x20000a70
 8002f1c:	080146ac 	.word	0x080146ac
 8002f20:	200008d4 	.word	0x200008d4
 8002f24:	20000a71 	.word	0x20000a71
 8002f28:	200008d2 	.word	0x200008d2
 8002f2c:	20000a5a 	.word	0x20000a5a
 8002f30:	2000082a 	.word	0x2000082a
 8002f34:	20000830 	.word	0x20000830
 8002f38:	2000082c 	.word	0x2000082c
 8002f3c:	20000a5e 	.word	0x20000a5e
 8002f40:	20000a5c 	.word	0x20000a5c
 8002f44:	2000083c 	.word	0x2000083c
				case 10://CONNECT
					esp01TimeoutTask = 0;
 8002f48:	4b91      	ldr	r3, [pc, #580]	@ (8003190 <ESP01ATDecode+0x714>)
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	601a      	str	r2, [r3, #0]
					esp01Flags.bit.ATRESPONSEOK = 1;
 8002f4e:	4a91      	ldr	r2, [pc, #580]	@ (8003194 <ESP01ATDecode+0x718>)
 8002f50:	7813      	ldrb	r3, [r2, #0]
 8002f52:	f043 0320 	orr.w	r3, r3, #32
 8002f56:	7013      	strb	r3, [r2, #0]
					esp01Flags.bit.UDPTCPCONNECTED = 1;
 8002f58:	4a8e      	ldr	r2, [pc, #568]	@ (8003194 <ESP01ATDecode+0x718>)
 8002f5a:	7813      	ldrb	r3, [r2, #0]
 8002f5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002f60:	7013      	strb	r3, [r2, #0]
					if(ESP01DbgStr != NULL)
 8002f62:	4b8d      	ldr	r3, [pc, #564]	@ (8003198 <ESP01ATDecode+0x71c>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d003      	beq.n	8002f72 <ESP01ATDecode+0x4f6>
							ESP01DbgStr("+&UDPTCPCONNECTED=1\n");
 8002f6a:	4b8b      	ldr	r3, [pc, #556]	@ (8003198 <ESP01ATDecode+0x71c>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	488b      	ldr	r0, [pc, #556]	@ (800319c <ESP01ATDecode+0x720>)
 8002f70:	4798      	blx	r3
					if(ESP01ChangeState != NULL)
 8002f72:	4b8b      	ldr	r3, [pc, #556]	@ (80031a0 <ESP01ATDecode+0x724>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d02f      	beq.n	8002fda <ESP01ATDecode+0x55e>
						ESP01ChangeState(ESP01_UDPTCP_CONNECTED);
 8002f7a:	4b89      	ldr	r3, [pc, #548]	@ (80031a0 <ESP01ATDecode+0x724>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	2007      	movs	r0, #7
 8002f80:	4798      	blx	r3
					break;
 8002f82:	e02a      	b.n	8002fda <ESP01ATDecode+0x55e>
				case 11://CLOSED
					esp01Flags.bit.UDPTCPCONNECTED = 0;
 8002f84:	4a83      	ldr	r2, [pc, #524]	@ (8003194 <ESP01ATDecode+0x718>)
 8002f86:	7813      	ldrb	r3, [r2, #0]
 8002f88:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002f8c:	7013      	strb	r3, [r2, #0]
					break;
 8002f8e:	e025      	b.n	8002fdc <ESP01ATDecode+0x560>
				case 13://busy
					esp01Flags.bit.UDPTCPCONNECTED = 0;
 8002f90:	4a80      	ldr	r2, [pc, #512]	@ (8003194 <ESP01ATDecode+0x718>)
 8002f92:	7813      	ldrb	r3, [r2, #0]
 8002f94:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002f98:	7013      	strb	r3, [r2, #0]
					esp01Flags.bit.WIFICONNECTED = 0;
 8002f9a:	4a7e      	ldr	r2, [pc, #504]	@ (8003194 <ESP01ATDecode+0x718>)
 8002f9c:	7813      	ldrb	r3, [r2, #0]
 8002f9e:	f023 0302 	bic.w	r3, r3, #2
 8002fa2:	7013      	strb	r3, [r2, #0]
					break;
 8002fa4:	e01a      	b.n	8002fdc <ESP01ATDecode+0x560>
				case 15://ready
					esp01Flags.bit.UDPTCPCONNECTED = 0;
 8002fa6:	4a7b      	ldr	r2, [pc, #492]	@ (8003194 <ESP01ATDecode+0x718>)
 8002fa8:	7813      	ldrb	r3, [r2, #0]
 8002faa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002fae:	7013      	strb	r3, [r2, #0]
					esp01Flags.bit.WIFICONNECTED = 0;
 8002fb0:	4a78      	ldr	r2, [pc, #480]	@ (8003194 <ESP01ATDecode+0x718>)
 8002fb2:	7813      	ldrb	r3, [r2, #0]
 8002fb4:	f023 0302 	bic.w	r3, r3, #2
 8002fb8:	7013      	strb	r3, [r2, #0]
					esp01ATSate = ESP01ATHARDRSTSTOP;
 8002fba:	4b7a      	ldr	r3, [pc, #488]	@ (80031a4 <ESP01ATDecode+0x728>)
 8002fbc:	220f      	movs	r2, #15
 8002fbe:	701a      	strb	r2, [r3, #0]
					break;
 8002fc0:	e00c      	b.n	8002fdc <ESP01ATDecode+0x560>
					break;
 8002fc2:	bf00      	nop
 8002fc4:	e0dc      	b.n	8003180 <ESP01ATDecode+0x704>
					break;
 8002fc6:	bf00      	nop
 8002fc8:	e0da      	b.n	8003180 <ESP01ATDecode+0x704>
					break;
 8002fca:	bf00      	nop
 8002fcc:	e0d8      	b.n	8003180 <ESP01ATDecode+0x704>
					break;
 8002fce:	bf00      	nop
 8002fd0:	e0d6      	b.n	8003180 <ESP01ATDecode+0x704>
						break;
 8002fd2:	bf00      	nop
 8002fd4:	e0d4      	b.n	8003180 <ESP01ATDecode+0x704>
					break;
 8002fd6:	bf00      	nop
 8002fd8:	e0d2      	b.n	8003180 <ESP01ATDecode+0x704>
					break;
 8002fda:	bf00      	nop
					break;
				case 17://busy s
					break;
				}
			}
			break;
 8002fdc:	e0d0      	b.n	8003180 <ESP01ATDecode+0x704>
		case 5://CIFR,STAIP
			if(value == ','){
 8002fde:	797b      	ldrb	r3, [r7, #5]
 8002fe0:	2b2c      	cmp	r3, #44	@ 0x2c
 8002fe2:	d10c      	bne.n	8002ffe <ESP01ATDecode+0x582>
				esp01HState = 6;
 8002fe4:	4b70      	ldr	r3, [pc, #448]	@ (80031a8 <ESP01ATDecode+0x72c>)
 8002fe6:	2206      	movs	r2, #6
 8002fe8:	701a      	strb	r2, [r3, #0]
				if(ESP01DbgStr != NULL)
 8002fea:	4b6b      	ldr	r3, [pc, #428]	@ (8003198 <ESP01ATDecode+0x71c>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	f000 80c8 	beq.w	8003184 <ESP01ATDecode+0x708>
					ESP01DbgStr("+&DBGRESPONSE CIFSR\n");
 8002ff4:	4b68      	ldr	r3, [pc, #416]	@ (8003198 <ESP01ATDecode+0x71c>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	486c      	ldr	r0, [pc, #432]	@ (80031ac <ESP01ATDecode+0x730>)
 8002ffa:	4798      	blx	r3
				esp01HState = 0;
				esp01irRXAT--;
				if(ESP01DbgStr != NULL)
					ESP01DbgStr("+&DBGERROR CIFSR 5\n");
			}
			break;
 8002ffc:	e0c2      	b.n	8003184 <ESP01ATDecode+0x708>
				esp01HState = 0;
 8002ffe:	4b6a      	ldr	r3, [pc, #424]	@ (80031a8 <ESP01ATDecode+0x72c>)
 8003000:	2200      	movs	r2, #0
 8003002:	701a      	strb	r2, [r3, #0]
				esp01irRXAT--;
 8003004:	4b6a      	ldr	r3, [pc, #424]	@ (80031b0 <ESP01ATDecode+0x734>)
 8003006:	881b      	ldrh	r3, [r3, #0]
 8003008:	3b01      	subs	r3, #1
 800300a:	b29a      	uxth	r2, r3
 800300c:	4b68      	ldr	r3, [pc, #416]	@ (80031b0 <ESP01ATDecode+0x734>)
 800300e:	801a      	strh	r2, [r3, #0]
				if(ESP01DbgStr != NULL)
 8003010:	4b61      	ldr	r3, [pc, #388]	@ (8003198 <ESP01ATDecode+0x71c>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2b00      	cmp	r3, #0
 8003016:	f000 80b5 	beq.w	8003184 <ESP01ATDecode+0x708>
					ESP01DbgStr("+&DBGERROR CIFSR 5\n");
 800301a:	4b5f      	ldr	r3, [pc, #380]	@ (8003198 <ESP01ATDecode+0x71c>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4865      	ldr	r0, [pc, #404]	@ (80031b4 <ESP01ATDecode+0x738>)
 8003020:	4798      	blx	r3
			break;
 8003022:	e0af      	b.n	8003184 <ESP01ATDecode+0x708>
		case 6:
			if(value == '\"'){
 8003024:	797b      	ldrb	r3, [r7, #5]
 8003026:	2b22      	cmp	r3, #34	@ 0x22
 8003028:	f040 80ae 	bne.w	8003188 <ESP01ATDecode+0x70c>
				esp01HState = 7;
 800302c:	4b5e      	ldr	r3, [pc, #376]	@ (80031a8 <ESP01ATDecode+0x72c>)
 800302e:	2207      	movs	r2, #7
 8003030:	701a      	strb	r2, [r3, #0]
				esp01nBytes = 0;
 8003032:	4b61      	ldr	r3, [pc, #388]	@ (80031b8 <ESP01ATDecode+0x73c>)
 8003034:	2200      	movs	r2, #0
 8003036:	801a      	strh	r2, [r3, #0]
			}
			break;
 8003038:	e0a6      	b.n	8003188 <ESP01ATDecode+0x70c>
		case 7:
			if(value == '\"' || esp01nBytes==16)
 800303a:	797b      	ldrb	r3, [r7, #5]
 800303c:	2b22      	cmp	r3, #34	@ 0x22
 800303e:	d003      	beq.n	8003048 <ESP01ATDecode+0x5cc>
 8003040:	4b5d      	ldr	r3, [pc, #372]	@ (80031b8 <ESP01ATDecode+0x73c>)
 8003042:	881b      	ldrh	r3, [r3, #0]
 8003044:	2b10      	cmp	r3, #16
 8003046:	d103      	bne.n	8003050 <ESP01ATDecode+0x5d4>
				esp01HState = 8;
 8003048:	4b57      	ldr	r3, [pc, #348]	@ (80031a8 <ESP01ATDecode+0x72c>)
 800304a:	2208      	movs	r2, #8
 800304c:	701a      	strb	r2, [r3, #0]
			else
				esp01LocalIP[esp01nBytes++] = value;
			break;
 800304e:	e0be      	b.n	80031ce <ESP01ATDecode+0x752>
				esp01LocalIP[esp01nBytes++] = value;
 8003050:	4b59      	ldr	r3, [pc, #356]	@ (80031b8 <ESP01ATDecode+0x73c>)
 8003052:	881b      	ldrh	r3, [r3, #0]
 8003054:	1c5a      	adds	r2, r3, #1
 8003056:	b291      	uxth	r1, r2
 8003058:	4a57      	ldr	r2, [pc, #348]	@ (80031b8 <ESP01ATDecode+0x73c>)
 800305a:	8011      	strh	r1, [r2, #0]
 800305c:	4619      	mov	r1, r3
 800305e:	4a57      	ldr	r2, [pc, #348]	@ (80031bc <ESP01ATDecode+0x740>)
 8003060:	797b      	ldrb	r3, [r7, #5]
 8003062:	5453      	strb	r3, [r2, r1]
			break;
 8003064:	e0b3      	b.n	80031ce <ESP01ATDecode+0x752>
		case 8:
			if(value == '\n'){
 8003066:	797b      	ldrb	r3, [r7, #5]
 8003068:	2b0a      	cmp	r3, #10
 800306a:	f040 808f 	bne.w	800318c <ESP01ATDecode+0x710>
				esp01HState = 0;
 800306e:	4b4e      	ldr	r3, [pc, #312]	@ (80031a8 <ESP01ATDecode+0x72c>)
 8003070:	2200      	movs	r2, #0
 8003072:	701a      	strb	r2, [r3, #0]
				if(esp01nBytes < 16){
 8003074:	4b50      	ldr	r3, [pc, #320]	@ (80031b8 <ESP01ATDecode+0x73c>)
 8003076:	881b      	ldrh	r3, [r3, #0]
 8003078:	2b0f      	cmp	r3, #15
 800307a:	d80e      	bhi.n	800309a <ESP01ATDecode+0x61e>
					esp01LocalIP[esp01nBytes] = '\0';
 800307c:	4b4e      	ldr	r3, [pc, #312]	@ (80031b8 <ESP01ATDecode+0x73c>)
 800307e:	881b      	ldrh	r3, [r3, #0]
 8003080:	461a      	mov	r2, r3
 8003082:	4b4e      	ldr	r3, [pc, #312]	@ (80031bc <ESP01ATDecode+0x740>)
 8003084:	2100      	movs	r1, #0
 8003086:	5499      	strb	r1, [r3, r2]
					esp01Flags.bit.ATRESPONSEOK = 1;
 8003088:	4a42      	ldr	r2, [pc, #264]	@ (8003194 <ESP01ATDecode+0x718>)
 800308a:	7813      	ldrb	r3, [r2, #0]
 800308c:	f043 0320 	orr.w	r3, r3, #32
 8003090:	7013      	strb	r3, [r2, #0]
					esp01TimeoutTask = 0;
 8003092:	4b3f      	ldr	r3, [pc, #252]	@ (8003190 <ESP01ATDecode+0x714>)
 8003094:	2200      	movs	r2, #0
 8003096:	601a      	str	r2, [r3, #0]
 8003098:	e002      	b.n	80030a0 <ESP01ATDecode+0x624>
				}
				else
					esp01LocalIP[0] = '\0';
 800309a:	4b48      	ldr	r3, [pc, #288]	@ (80031bc <ESP01ATDecode+0x740>)
 800309c:	2200      	movs	r2, #0
 800309e:	701a      	strb	r2, [r3, #0]
				if(ESP01ChangeState != NULL)
 80030a0:	4b3f      	ldr	r3, [pc, #252]	@ (80031a0 <ESP01ATDecode+0x724>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d071      	beq.n	800318c <ESP01ATDecode+0x710>
					ESP01ChangeState(ESP01_WIFI_NEW_IP);
 80030a8:	4b3d      	ldr	r3, [pc, #244]	@ (80031a0 <ESP01ATDecode+0x724>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2004      	movs	r0, #4
 80030ae:	4798      	blx	r3
			}
			break;
 80030b0:	e06c      	b.n	800318c <ESP01ATDecode+0x710>
		case 10://IPD
			if(value == ','){
 80030b2:	797b      	ldrb	r3, [r7, #5]
 80030b4:	2b2c      	cmp	r3, #44	@ 0x2c
 80030b6:	d106      	bne.n	80030c6 <ESP01ATDecode+0x64a>
				esp01HState = 11;
 80030b8:	4b3b      	ldr	r3, [pc, #236]	@ (80031a8 <ESP01ATDecode+0x72c>)
 80030ba:	220b      	movs	r2, #11
 80030bc:	701a      	strb	r2, [r3, #0]
				esp01nBytes = 0;
 80030be:	4b3e      	ldr	r3, [pc, #248]	@ (80031b8 <ESP01ATDecode+0x73c>)
 80030c0:	2200      	movs	r2, #0
 80030c2:	801a      	strh	r2, [r3, #0]
			}
			else{
				esp01HState = 0;
				esp01irRXAT--;
			}
			break;
 80030c4:	e083      	b.n	80031ce <ESP01ATDecode+0x752>
				esp01HState = 0;
 80030c6:	4b38      	ldr	r3, [pc, #224]	@ (80031a8 <ESP01ATDecode+0x72c>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	701a      	strb	r2, [r3, #0]
				esp01irRXAT--;
 80030cc:	4b38      	ldr	r3, [pc, #224]	@ (80031b0 <ESP01ATDecode+0x734>)
 80030ce:	881b      	ldrh	r3, [r3, #0]
 80030d0:	3b01      	subs	r3, #1
 80030d2:	b29a      	uxth	r2, r3
 80030d4:	4b36      	ldr	r3, [pc, #216]	@ (80031b0 <ESP01ATDecode+0x734>)
 80030d6:	801a      	strh	r2, [r3, #0]
			break;
 80030d8:	e079      	b.n	80031ce <ESP01ATDecode+0x752>
		case 11:
			if(value == ':')
 80030da:	797b      	ldrb	r3, [r7, #5]
 80030dc:	2b3a      	cmp	r3, #58	@ 0x3a
 80030de:	d103      	bne.n	80030e8 <ESP01ATDecode+0x66c>
				esp01HState = 12;
 80030e0:	4b31      	ldr	r3, [pc, #196]	@ (80031a8 <ESP01ATDecode+0x72c>)
 80030e2:	220c      	movs	r2, #12
 80030e4:	701a      	strb	r2, [r3, #0]
				else{
					esp01nBytes *= 10;
					esp01nBytes += (value - '0');
				}
			}
			break;
 80030e6:	e072      	b.n	80031ce <ESP01ATDecode+0x752>
				if(value<'0' || value>'9'){
 80030e8:	797b      	ldrb	r3, [r7, #5]
 80030ea:	2b2f      	cmp	r3, #47	@ 0x2f
 80030ec:	d902      	bls.n	80030f4 <ESP01ATDecode+0x678>
 80030ee:	797b      	ldrb	r3, [r7, #5]
 80030f0:	2b39      	cmp	r3, #57	@ 0x39
 80030f2:	d909      	bls.n	8003108 <ESP01ATDecode+0x68c>
					esp01HState = 0;
 80030f4:	4b2c      	ldr	r3, [pc, #176]	@ (80031a8 <ESP01ATDecode+0x72c>)
 80030f6:	2200      	movs	r2, #0
 80030f8:	701a      	strb	r2, [r3, #0]
					esp01irRXAT--;
 80030fa:	4b2d      	ldr	r3, [pc, #180]	@ (80031b0 <ESP01ATDecode+0x734>)
 80030fc:	881b      	ldrh	r3, [r3, #0]
 80030fe:	3b01      	subs	r3, #1
 8003100:	b29a      	uxth	r2, r3
 8003102:	4b2b      	ldr	r3, [pc, #172]	@ (80031b0 <ESP01ATDecode+0x734>)
 8003104:	801a      	strh	r2, [r3, #0]
			break;
 8003106:	e062      	b.n	80031ce <ESP01ATDecode+0x752>
					esp01nBytes *= 10;
 8003108:	4b2b      	ldr	r3, [pc, #172]	@ (80031b8 <ESP01ATDecode+0x73c>)
 800310a:	881b      	ldrh	r3, [r3, #0]
 800310c:	461a      	mov	r2, r3
 800310e:	0092      	lsls	r2, r2, #2
 8003110:	4413      	add	r3, r2
 8003112:	005b      	lsls	r3, r3, #1
 8003114:	b29a      	uxth	r2, r3
 8003116:	4b28      	ldr	r3, [pc, #160]	@ (80031b8 <ESP01ATDecode+0x73c>)
 8003118:	801a      	strh	r2, [r3, #0]
					esp01nBytes += (value - '0');
 800311a:	797b      	ldrb	r3, [r7, #5]
 800311c:	b29a      	uxth	r2, r3
 800311e:	4b26      	ldr	r3, [pc, #152]	@ (80031b8 <ESP01ATDecode+0x73c>)
 8003120:	881b      	ldrh	r3, [r3, #0]
 8003122:	4413      	add	r3, r2
 8003124:	b29b      	uxth	r3, r3
 8003126:	3b30      	subs	r3, #48	@ 0x30
 8003128:	b29a      	uxth	r2, r3
 800312a:	4b23      	ldr	r3, [pc, #140]	@ (80031b8 <ESP01ATDecode+0x73c>)
 800312c:	801a      	strh	r2, [r3, #0]
			break;
 800312e:	e04e      	b.n	80031ce <ESP01ATDecode+0x752>
		case 12:
			if(esp01Handle.WriteByteToBufRX != NULL)
 8003130:	4b23      	ldr	r3, [pc, #140]	@ (80031c0 <ESP01ATDecode+0x744>)
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d004      	beq.n	8003142 <ESP01ATDecode+0x6c6>
				esp01Handle.WriteByteToBufRX(value);
 8003138:	4b21      	ldr	r3, [pc, #132]	@ (80031c0 <ESP01ATDecode+0x744>)
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	797a      	ldrb	r2, [r7, #5]
 800313e:	4610      	mov	r0, r2
 8003140:	4798      	blx	r3
			esp01nBytes--;
 8003142:	4b1d      	ldr	r3, [pc, #116]	@ (80031b8 <ESP01ATDecode+0x73c>)
 8003144:	881b      	ldrh	r3, [r3, #0]
 8003146:	3b01      	subs	r3, #1
 8003148:	b29a      	uxth	r2, r3
 800314a:	4b1b      	ldr	r3, [pc, #108]	@ (80031b8 <ESP01ATDecode+0x73c>)
 800314c:	801a      	strh	r2, [r3, #0]
			if(!esp01nBytes){
 800314e:	4b1a      	ldr	r3, [pc, #104]	@ (80031b8 <ESP01ATDecode+0x73c>)
 8003150:	881b      	ldrh	r3, [r3, #0]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d13a      	bne.n	80031cc <ESP01ATDecode+0x750>
				esp01HState = 0;
 8003156:	4b14      	ldr	r3, [pc, #80]	@ (80031a8 <ESP01ATDecode+0x72c>)
 8003158:	2200      	movs	r2, #0
 800315a:	701a      	strb	r2, [r3, #0]
				if(ESP01DbgStr != NULL)
 800315c:	4b0e      	ldr	r3, [pc, #56]	@ (8003198 <ESP01ATDecode+0x71c>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d033      	beq.n	80031cc <ESP01ATDecode+0x750>
					ESP01DbgStr("+&DBGRESPONSE IPD\n");
 8003164:	4b0c      	ldr	r3, [pc, #48]	@ (8003198 <ESP01ATDecode+0x71c>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4816      	ldr	r0, [pc, #88]	@ (80031c4 <ESP01ATDecode+0x748>)
 800316a:	4798      	blx	r3
			}
			break;
 800316c:	e02e      	b.n	80031cc <ESP01ATDecode+0x750>
		default:
			esp01HState = 0;
 800316e:	4b0e      	ldr	r3, [pc, #56]	@ (80031a8 <ESP01ATDecode+0x72c>)
 8003170:	2200      	movs	r2, #0
 8003172:	701a      	strb	r2, [r3, #0]
			esp01TimeoutDataRx = 0;
 8003174:	4b14      	ldr	r3, [pc, #80]	@ (80031c8 <ESP01ATDecode+0x74c>)
 8003176:	2200      	movs	r2, #0
 8003178:	601a      	str	r2, [r3, #0]
 800317a:	e028      	b.n	80031ce <ESP01ATDecode+0x752>
			break;
 800317c:	bf00      	nop
 800317e:	e026      	b.n	80031ce <ESP01ATDecode+0x752>
			break;
 8003180:	bf00      	nop
 8003182:	e024      	b.n	80031ce <ESP01ATDecode+0x752>
			break;
 8003184:	bf00      	nop
 8003186:	e022      	b.n	80031ce <ESP01ATDecode+0x752>
			break;
 8003188:	bf00      	nop
 800318a:	e020      	b.n	80031ce <ESP01ATDecode+0x752>
			break;
 800318c:	bf00      	nop
 800318e:	e01e      	b.n	80031ce <ESP01ATDecode+0x752>
 8003190:	20000830 	.word	0x20000830
 8003194:	2000082c 	.word	0x2000082c
 8003198:	20000840 	.word	0x20000840
 800319c:	0801310c 	.word	0x0801310c
 80031a0:	2000083c 	.word	0x2000083c
 80031a4:	2000082a 	.word	0x2000082a
 80031a8:	200008d2 	.word	0x200008d2
 80031ac:	08013124 	.word	0x08013124
 80031b0:	20000a5a 	.word	0x20000a5a
 80031b4:	0801313c 	.word	0x0801313c
 80031b8:	200008d4 	.word	0x200008d4
 80031bc:	200008bc 	.word	0x200008bc
 80031c0:	20000a64 	.word	0x20000a64
 80031c4:	08013150 	.word	0x08013150
 80031c8:	20000834 	.word	0x20000834
			break;
 80031cc:	bf00      	nop
		}

		esp01irRXAT++;
 80031ce:	4b0b      	ldr	r3, [pc, #44]	@ (80031fc <ESP01ATDecode+0x780>)
 80031d0:	881b      	ldrh	r3, [r3, #0]
 80031d2:	3301      	adds	r3, #1
 80031d4:	b29a      	uxth	r2, r3
 80031d6:	4b09      	ldr	r3, [pc, #36]	@ (80031fc <ESP01ATDecode+0x780>)
 80031d8:	801a      	strh	r2, [r3, #0]
		if(esp01irRXAT == ESP01RXBUFAT)
 80031da:	4b08      	ldr	r3, [pc, #32]	@ (80031fc <ESP01ATDecode+0x780>)
 80031dc:	881b      	ldrh	r3, [r3, #0]
 80031de:	2b80      	cmp	r3, #128	@ 0x80
 80031e0:	d102      	bne.n	80031e8 <ESP01ATDecode+0x76c>
			esp01irRXAT = 0;
 80031e2:	4b06      	ldr	r3, [pc, #24]	@ (80031fc <ESP01ATDecode+0x780>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	801a      	strh	r2, [r3, #0]
	while(esp01irRXAT != i){
 80031e8:	4b04      	ldr	r3, [pc, #16]	@ (80031fc <ESP01ATDecode+0x780>)
 80031ea:	881b      	ldrh	r3, [r3, #0]
 80031ec:	88fa      	ldrh	r2, [r7, #6]
 80031ee:	429a      	cmp	r2, r3
 80031f0:	f47f ac5f 	bne.w	8002ab2 <ESP01ATDecode+0x36>
	}
}
 80031f4:	3708      	adds	r7, #8
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	20000a5a 	.word	0x20000a5a

08003200 <ESP01DOConnection>:

static void ESP01DOConnection(){
 8003200:	b580      	push	{r7, lr}
 8003202:	af00      	add	r7, sp, #0
	esp01TimeoutTask = 100;
 8003204:	4b9c      	ldr	r3, [pc, #624]	@ (8003478 <ESP01DOConnection+0x278>)
 8003206:	2264      	movs	r2, #100	@ 0x64
 8003208:	601a      	str	r2, [r3, #0]
	switch(esp01ATSate){
 800320a:	4b9c      	ldr	r3, [pc, #624]	@ (800347c <ESP01DOConnection+0x27c>)
 800320c:	781b      	ldrb	r3, [r3, #0]
 800320e:	2b0f      	cmp	r3, #15
 8003210:	f200 81e6 	bhi.w	80035e0 <ESP01DOConnection+0x3e0>
 8003214:	a201      	add	r2, pc, #4	@ (adr r2, 800321c <ESP01DOConnection+0x1c>)
 8003216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800321a:	bf00      	nop
 800321c:	0800325d 	.word	0x0800325d
 8003220:	080032bb 	.word	0x080032bb
 8003224:	0800330d 	.word	0x0800330d
 8003228:	0800332b 	.word	0x0800332b
 800322c:	08003349 	.word	0x08003349
 8003230:	08003367 	.word	0x08003367
 8003234:	080033ed 	.word	0x080033ed
 8003238:	08003411 	.word	0x08003411
 800323c:	0800343f 	.word	0x0800343f
 8003240:	080034cd 	.word	0x080034cd
 8003244:	080034f5 	.word	0x080034f5
 8003248:	08003589 	.word	0x08003589
 800324c:	080035a7 	.word	0x080035a7
 8003250:	08003265 	.word	0x08003265
 8003254:	08003285 	.word	0x08003285
 8003258:	080032ad 	.word	0x080032ad
	case ESP01ATIDLE:
		esp01TimeoutTask = 0;
 800325c:	4b86      	ldr	r3, [pc, #536]	@ (8003478 <ESP01DOConnection+0x278>)
 800325e:	2200      	movs	r2, #0
 8003260:	601a      	str	r2, [r3, #0]
		break;
 8003262:	e1bd      	b.n	80035e0 <ESP01DOConnection+0x3e0>
	case ESP01ATHARDRST0:
		esp01Handle.DoCHPD(0);
 8003264:	4b86      	ldr	r3, [pc, #536]	@ (8003480 <ESP01DOConnection+0x280>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2000      	movs	r0, #0
 800326a:	4798      	blx	r3
		if(ESP01DbgStr != NULL)
 800326c:	4b85      	ldr	r3, [pc, #532]	@ (8003484 <ESP01DOConnection+0x284>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d003      	beq.n	800327c <ESP01DOConnection+0x7c>
			ESP01DbgStr("+&DBGESP01HARDRESET0\n");
 8003274:	4b83      	ldr	r3, [pc, #524]	@ (8003484 <ESP01DOConnection+0x284>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4883      	ldr	r0, [pc, #524]	@ (8003488 <ESP01DOConnection+0x288>)
 800327a:	4798      	blx	r3
		esp01ATSate = ESP01ATHARDRST1;
 800327c:	4b7f      	ldr	r3, [pc, #508]	@ (800347c <ESP01DOConnection+0x27c>)
 800327e:	220e      	movs	r2, #14
 8003280:	701a      	strb	r2, [r3, #0]
		break;
 8003282:	e1ad      	b.n	80035e0 <ESP01DOConnection+0x3e0>
	case ESP01ATHARDRST1:
		esp01Handle.DoCHPD(1);
 8003284:	4b7e      	ldr	r3, [pc, #504]	@ (8003480 <ESP01DOConnection+0x280>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	2001      	movs	r0, #1
 800328a:	4798      	blx	r3
		if(ESP01DbgStr != NULL)
 800328c:	4b7d      	ldr	r3, [pc, #500]	@ (8003484 <ESP01DOConnection+0x284>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d003      	beq.n	800329c <ESP01DOConnection+0x9c>
			ESP01DbgStr("+&DBGESP01HARDRESET1\n");
 8003294:	4b7b      	ldr	r3, [pc, #492]	@ (8003484 <ESP01DOConnection+0x284>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	487c      	ldr	r0, [pc, #496]	@ (800348c <ESP01DOConnection+0x28c>)
 800329a:	4798      	blx	r3
		esp01ATSate = ESP01ATHARDRSTSTOP;
 800329c:	4b77      	ldr	r3, [pc, #476]	@ (800347c <ESP01DOConnection+0x27c>)
 800329e:	220f      	movs	r2, #15
 80032a0:	701a      	strb	r2, [r3, #0]
		esp01TimeoutTask = 500;
 80032a2:	4b75      	ldr	r3, [pc, #468]	@ (8003478 <ESP01DOConnection+0x278>)
 80032a4:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80032a8:	601a      	str	r2, [r3, #0]
		break;
 80032aa:	e199      	b.n	80035e0 <ESP01DOConnection+0x3e0>
	case ESP01ATHARDRSTSTOP:
		esp01ATSate = ESP01ATAT;
 80032ac:	4b73      	ldr	r3, [pc, #460]	@ (800347c <ESP01DOConnection+0x27c>)
 80032ae:	2201      	movs	r2, #1
 80032b0:	701a      	strb	r2, [r3, #0]
		esp01TriesAT = 0;
 80032b2:	4b77      	ldr	r3, [pc, #476]	@ (8003490 <ESP01DOConnection+0x290>)
 80032b4:	2200      	movs	r2, #0
 80032b6:	701a      	strb	r2, [r3, #0]
		break;
 80032b8:	e192      	b.n	80035e0 <ESP01DOConnection+0x3e0>
	case ESP01ATAT:
		if(esp01TriesAT){
 80032ba:	4b75      	ldr	r3, [pc, #468]	@ (8003490 <ESP01DOConnection+0x290>)
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d00d      	beq.n	80032de <ESP01DOConnection+0xde>
			esp01TriesAT--;
 80032c2:	4b73      	ldr	r3, [pc, #460]	@ (8003490 <ESP01DOConnection+0x290>)
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	3b01      	subs	r3, #1
 80032c8:	b2da      	uxtb	r2, r3
 80032ca:	4b71      	ldr	r3, [pc, #452]	@ (8003490 <ESP01DOConnection+0x290>)
 80032cc:	701a      	strb	r2, [r3, #0]
			if(!esp01TriesAT){
 80032ce:	4b70      	ldr	r3, [pc, #448]	@ (8003490 <ESP01DOConnection+0x290>)
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d106      	bne.n	80032e4 <ESP01DOConnection+0xe4>
				esp01ATSate = ESP01ATHARDRST0;
 80032d6:	4b69      	ldr	r3, [pc, #420]	@ (800347c <ESP01DOConnection+0x27c>)
 80032d8:	220d      	movs	r2, #13
 80032da:	701a      	strb	r2, [r3, #0]
				break;
 80032dc:	e180      	b.n	80035e0 <ESP01DOConnection+0x3e0>
			}
		}
		else
			esp01TriesAT = 4;
 80032de:	4b6c      	ldr	r3, [pc, #432]	@ (8003490 <ESP01DOConnection+0x290>)
 80032e0:	2204      	movs	r2, #4
 80032e2:	701a      	strb	r2, [r3, #0]

		esp01Flags.bit.ATRESPONSEOK = 0;
 80032e4:	4a6b      	ldr	r2, [pc, #428]	@ (8003494 <ESP01DOConnection+0x294>)
 80032e6:	7813      	ldrb	r3, [r2, #0]
 80032e8:	f023 0320 	bic.w	r3, r3, #32
 80032ec:	7013      	strb	r3, [r2, #0]
		ESP01StrToBufTX(ATAT);
 80032ee:	486a      	ldr	r0, [pc, #424]	@ (8003498 <ESP01DOConnection+0x298>)
 80032f0:	f000 fa0c 	bl	800370c <ESP01StrToBufTX>
		if(ESP01DbgStr != NULL)
 80032f4:	4b63      	ldr	r3, [pc, #396]	@ (8003484 <ESP01DOConnection+0x284>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d003      	beq.n	8003304 <ESP01DOConnection+0x104>
			ESP01DbgStr("+&DBGESP01AT\n");
 80032fc:	4b61      	ldr	r3, [pc, #388]	@ (8003484 <ESP01DOConnection+0x284>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4866      	ldr	r0, [pc, #408]	@ (800349c <ESP01DOConnection+0x29c>)
 8003302:	4798      	blx	r3
		esp01ATSate = ESP01ATRESPONSE;
 8003304:	4b5d      	ldr	r3, [pc, #372]	@ (800347c <ESP01DOConnection+0x27c>)
 8003306:	2202      	movs	r2, #2
 8003308:	701a      	strb	r2, [r3, #0]
		break;
 800330a:	e169      	b.n	80035e0 <ESP01DOConnection+0x3e0>
	case ESP01ATRESPONSE:
		if(esp01Flags.bit.ATRESPONSEOK)
 800330c:	4b61      	ldr	r3, [pc, #388]	@ (8003494 <ESP01DOConnection+0x294>)
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	f003 0320 	and.w	r3, r3, #32
 8003314:	b2db      	uxtb	r3, r3
 8003316:	2b00      	cmp	r3, #0
 8003318:	d003      	beq.n	8003322 <ESP01DOConnection+0x122>
			esp01ATSate = ESP01ATCWMODE;
 800331a:	4b58      	ldr	r3, [pc, #352]	@ (800347c <ESP01DOConnection+0x27c>)
 800331c:	2203      	movs	r2, #3
 800331e:	701a      	strb	r2, [r3, #0]
		else
			esp01ATSate = ESP01ATAT;
		break;
 8003320:	e15e      	b.n	80035e0 <ESP01DOConnection+0x3e0>
			esp01ATSate = ESP01ATAT;
 8003322:	4b56      	ldr	r3, [pc, #344]	@ (800347c <ESP01DOConnection+0x27c>)
 8003324:	2201      	movs	r2, #1
 8003326:	701a      	strb	r2, [r3, #0]
		break;
 8003328:	e15a      	b.n	80035e0 <ESP01DOConnection+0x3e0>
	case ESP01ATCWMODE:
		ESP01StrToBufTX(ATCWMODE);
 800332a:	485d      	ldr	r0, [pc, #372]	@ (80034a0 <ESP01DOConnection+0x2a0>)
 800332c:	f000 f9ee 	bl	800370c <ESP01StrToBufTX>
		if(ESP01DbgStr != NULL)
 8003330:	4b54      	ldr	r3, [pc, #336]	@ (8003484 <ESP01DOConnection+0x284>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d003      	beq.n	8003340 <ESP01DOConnection+0x140>
			ESP01DbgStr("+&DBGESP01ATCWMODE\n");
 8003338:	4b52      	ldr	r3, [pc, #328]	@ (8003484 <ESP01DOConnection+0x284>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4859      	ldr	r0, [pc, #356]	@ (80034a4 <ESP01DOConnection+0x2a4>)
 800333e:	4798      	blx	r3
		esp01ATSate = ESP01ATCIPMUX;
 8003340:	4b4e      	ldr	r3, [pc, #312]	@ (800347c <ESP01DOConnection+0x27c>)
 8003342:	2204      	movs	r2, #4
 8003344:	701a      	strb	r2, [r3, #0]
		break;
 8003346:	e14b      	b.n	80035e0 <ESP01DOConnection+0x3e0>
	case ESP01ATCIPMUX:
		ESP01StrToBufTX(ATCIPMUX);
 8003348:	4857      	ldr	r0, [pc, #348]	@ (80034a8 <ESP01DOConnection+0x2a8>)
 800334a:	f000 f9df 	bl	800370c <ESP01StrToBufTX>
		if(ESP01DbgStr != NULL)
 800334e:	4b4d      	ldr	r3, [pc, #308]	@ (8003484 <ESP01DOConnection+0x284>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d003      	beq.n	800335e <ESP01DOConnection+0x15e>
			ESP01DbgStr("+&DBGESP01ATCIPMUX\n");
 8003356:	4b4b      	ldr	r3, [pc, #300]	@ (8003484 <ESP01DOConnection+0x284>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4854      	ldr	r0, [pc, #336]	@ (80034ac <ESP01DOConnection+0x2ac>)
 800335c:	4798      	blx	r3
		esp01ATSate = ESP01ATCWJAP;
 800335e:	4b47      	ldr	r3, [pc, #284]	@ (800347c <ESP01DOConnection+0x27c>)
 8003360:	2205      	movs	r2, #5
 8003362:	701a      	strb	r2, [r3, #0]
		break;
 8003364:	e13c      	b.n	80035e0 <ESP01DOConnection+0x3e0>
	case ESP01ATCWJAP:
		if(esp01Flags.bit.WIFICONNECTED){
 8003366:	4b4b      	ldr	r3, [pc, #300]	@ (8003494 <ESP01DOConnection+0x294>)
 8003368:	781b      	ldrb	r3, [r3, #0]
 800336a:	f003 0302 	and.w	r3, r3, #2
 800336e:	b2db      	uxtb	r3, r3
 8003370:	2b00      	cmp	r3, #0
 8003372:	d003      	beq.n	800337c <ESP01DOConnection+0x17c>
			esp01ATSate = ESP01ATCIFSR;
 8003374:	4b41      	ldr	r3, [pc, #260]	@ (800347c <ESP01DOConnection+0x27c>)
 8003376:	2207      	movs	r2, #7
 8003378:	701a      	strb	r2, [r3, #0]
			break;
 800337a:	e131      	b.n	80035e0 <ESP01DOConnection+0x3e0>
		}
		if(esp01SSID[0] == '\0')
 800337c:	4b4c      	ldr	r3, [pc, #304]	@ (80034b0 <ESP01DOConnection+0x2b0>)
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	2b00      	cmp	r3, #0
 8003382:	f000 812a 	beq.w	80035da <ESP01DOConnection+0x3da>
			break;
		ESP01StrToBufTX(ATCWJAP);
 8003386:	484b      	ldr	r0, [pc, #300]	@ (80034b4 <ESP01DOConnection+0x2b4>)
 8003388:	f000 f9c0 	bl	800370c <ESP01StrToBufTX>
		ESP01ByteToBufTX('\"');
 800338c:	2022      	movs	r0, #34	@ 0x22
 800338e:	f000 f9ed 	bl	800376c <ESP01ByteToBufTX>
		ESP01StrToBufTX(esp01SSID);
 8003392:	4847      	ldr	r0, [pc, #284]	@ (80034b0 <ESP01DOConnection+0x2b0>)
 8003394:	f000 f9ba 	bl	800370c <ESP01StrToBufTX>
		ESP01ByteToBufTX('\"');
 8003398:	2022      	movs	r0, #34	@ 0x22
 800339a:	f000 f9e7 	bl	800376c <ESP01ByteToBufTX>
		ESP01ByteToBufTX(',');
 800339e:	202c      	movs	r0, #44	@ 0x2c
 80033a0:	f000 f9e4 	bl	800376c <ESP01ByteToBufTX>
		ESP01ByteToBufTX('\"');
 80033a4:	2022      	movs	r0, #34	@ 0x22
 80033a6:	f000 f9e1 	bl	800376c <ESP01ByteToBufTX>
		ESP01StrToBufTX(esp01PASSWORD);
 80033aa:	4843      	ldr	r0, [pc, #268]	@ (80034b8 <ESP01DOConnection+0x2b8>)
 80033ac:	f000 f9ae 	bl	800370c <ESP01StrToBufTX>
		ESP01ByteToBufTX('\"');
 80033b0:	2022      	movs	r0, #34	@ 0x22
 80033b2:	f000 f9db 	bl	800376c <ESP01ByteToBufTX>
		ESP01ByteToBufTX('\r');
 80033b6:	200d      	movs	r0, #13
 80033b8:	f000 f9d8 	bl	800376c <ESP01ByteToBufTX>
		ESP01ByteToBufTX('\n');
 80033bc:	200a      	movs	r0, #10
 80033be:	f000 f9d5 	bl	800376c <ESP01ByteToBufTX>
		if(ESP01DbgStr != NULL)
 80033c2:	4b30      	ldr	r3, [pc, #192]	@ (8003484 <ESP01DOConnection+0x284>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d003      	beq.n	80033d2 <ESP01DOConnection+0x1d2>
			ESP01DbgStr("+&DBGESP01ATCWJAP\n");
 80033ca:	4b2e      	ldr	r3, [pc, #184]	@ (8003484 <ESP01DOConnection+0x284>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	483b      	ldr	r0, [pc, #236]	@ (80034bc <ESP01DOConnection+0x2bc>)
 80033d0:	4798      	blx	r3
		esp01Flags.bit.ATRESPONSEOK = 0;
 80033d2:	4a30      	ldr	r2, [pc, #192]	@ (8003494 <ESP01DOConnection+0x294>)
 80033d4:	7813      	ldrb	r3, [r2, #0]
 80033d6:	f023 0320 	bic.w	r3, r3, #32
 80033da:	7013      	strb	r3, [r2, #0]
		esp01ATSate = ESP01CWJAPRESPONSE;
 80033dc:	4b27      	ldr	r3, [pc, #156]	@ (800347c <ESP01DOConnection+0x27c>)
 80033de:	2206      	movs	r2, #6
 80033e0:	701a      	strb	r2, [r3, #0]
		esp01TimeoutTask = 5000;
 80033e2:	4b25      	ldr	r3, [pc, #148]	@ (8003478 <ESP01DOConnection+0x278>)
 80033e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033e8:	601a      	str	r2, [r3, #0]
		break;
 80033ea:	e0f9      	b.n	80035e0 <ESP01DOConnection+0x3e0>
	case ESP01CWJAPRESPONSE:
		if(esp01Flags.bit.ATRESPONSEOK){
 80033ec:	4b29      	ldr	r3, [pc, #164]	@ (8003494 <ESP01DOConnection+0x294>)
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	f003 0320 	and.w	r3, r3, #32
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d006      	beq.n	8003408 <ESP01DOConnection+0x208>
			esp01ATSate = ESP01ATCIFSR;
 80033fa:	4b20      	ldr	r3, [pc, #128]	@ (800347c <ESP01DOConnection+0x27c>)
 80033fc:	2207      	movs	r2, #7
 80033fe:	701a      	strb	r2, [r3, #0]
			esp01TriesAT = 4;
 8003400:	4b23      	ldr	r3, [pc, #140]	@ (8003490 <ESP01DOConnection+0x290>)
 8003402:	2204      	movs	r2, #4
 8003404:	701a      	strb	r2, [r3, #0]
		}
		else
			esp01ATSate = ESP01ATAT;
		break;
 8003406:	e0eb      	b.n	80035e0 <ESP01DOConnection+0x3e0>
			esp01ATSate = ESP01ATAT;
 8003408:	4b1c      	ldr	r3, [pc, #112]	@ (800347c <ESP01DOConnection+0x27c>)
 800340a:	2201      	movs	r2, #1
 800340c:	701a      	strb	r2, [r3, #0]
		break;
 800340e:	e0e7      	b.n	80035e0 <ESP01DOConnection+0x3e0>
	case ESP01ATCIFSR:
		esp01LocalIP[0] = '\0';
 8003410:	4b2b      	ldr	r3, [pc, #172]	@ (80034c0 <ESP01DOConnection+0x2c0>)
 8003412:	2200      	movs	r2, #0
 8003414:	701a      	strb	r2, [r3, #0]
		ESP01StrToBufTX(ATCIFSR);
 8003416:	482b      	ldr	r0, [pc, #172]	@ (80034c4 <ESP01DOConnection+0x2c4>)
 8003418:	f000 f978 	bl	800370c <ESP01StrToBufTX>
		if(ESP01DbgStr != NULL)
 800341c:	4b19      	ldr	r3, [pc, #100]	@ (8003484 <ESP01DOConnection+0x284>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d003      	beq.n	800342c <ESP01DOConnection+0x22c>
			ESP01DbgStr("+&DBGESP01CIFSR\n");
 8003424:	4b17      	ldr	r3, [pc, #92]	@ (8003484 <ESP01DOConnection+0x284>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4827      	ldr	r0, [pc, #156]	@ (80034c8 <ESP01DOConnection+0x2c8>)
 800342a:	4798      	blx	r3
		esp01Flags.bit.ATRESPONSEOK = 0;
 800342c:	4a19      	ldr	r2, [pc, #100]	@ (8003494 <ESP01DOConnection+0x294>)
 800342e:	7813      	ldrb	r3, [r2, #0]
 8003430:	f023 0320 	bic.w	r3, r3, #32
 8003434:	7013      	strb	r3, [r2, #0]
		esp01ATSate = ESP01CIFSRRESPONSE;
 8003436:	4b11      	ldr	r3, [pc, #68]	@ (800347c <ESP01DOConnection+0x27c>)
 8003438:	2208      	movs	r2, #8
 800343a:	701a      	strb	r2, [r3, #0]
		break;
 800343c:	e0d0      	b.n	80035e0 <ESP01DOConnection+0x3e0>
	case ESP01CIFSRRESPONSE:
		if(esp01Flags.bit.ATRESPONSEOK)
 800343e:	4b15      	ldr	r3, [pc, #84]	@ (8003494 <ESP01DOConnection+0x294>)
 8003440:	781b      	ldrb	r3, [r3, #0]
 8003442:	f003 0320 	and.w	r3, r3, #32
 8003446:	b2db      	uxtb	r3, r3
 8003448:	2b00      	cmp	r3, #0
 800344a:	d003      	beq.n	8003454 <ESP01DOConnection+0x254>
			esp01ATSate = ESP01ATCIPCLOSE;
 800344c:	4b0b      	ldr	r3, [pc, #44]	@ (800347c <ESP01DOConnection+0x27c>)
 800344e:	2209      	movs	r2, #9
 8003450:	701a      	strb	r2, [r3, #0]
				esp01ATSate = ESP01ATAT;
				break;
			}
			esp01ATSate = ESP01ATCIFSR;
		}
		break;
 8003452:	e0c5      	b.n	80035e0 <ESP01DOConnection+0x3e0>
			esp01TriesAT--;
 8003454:	4b0e      	ldr	r3, [pc, #56]	@ (8003490 <ESP01DOConnection+0x290>)
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	3b01      	subs	r3, #1
 800345a:	b2da      	uxtb	r2, r3
 800345c:	4b0c      	ldr	r3, [pc, #48]	@ (8003490 <ESP01DOConnection+0x290>)
 800345e:	701a      	strb	r2, [r3, #0]
			if(esp01TriesAT == 0){
 8003460:	4b0b      	ldr	r3, [pc, #44]	@ (8003490 <ESP01DOConnection+0x290>)
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d103      	bne.n	8003470 <ESP01DOConnection+0x270>
				esp01ATSate = ESP01ATAT;
 8003468:	4b04      	ldr	r3, [pc, #16]	@ (800347c <ESP01DOConnection+0x27c>)
 800346a:	2201      	movs	r2, #1
 800346c:	701a      	strb	r2, [r3, #0]
				break;
 800346e:	e0b7      	b.n	80035e0 <ESP01DOConnection+0x3e0>
			esp01ATSate = ESP01ATCIFSR;
 8003470:	4b02      	ldr	r3, [pc, #8]	@ (800347c <ESP01DOConnection+0x27c>)
 8003472:	2207      	movs	r2, #7
 8003474:	701a      	strb	r2, [r3, #0]
		break;
 8003476:	e0b3      	b.n	80035e0 <ESP01DOConnection+0x3e0>
 8003478:	20000830 	.word	0x20000830
 800347c:	2000082a 	.word	0x2000082a
 8003480:	20000a64 	.word	0x20000a64
 8003484:	20000840 	.word	0x20000840
 8003488:	08013164 	.word	0x08013164
 800348c:	0801317c 	.word	0x0801317c
 8003490:	20000a60 	.word	0x20000a60
 8003494:	2000082c 	.word	0x2000082c
 8003498:	08014528 	.word	0x08014528
 800349c:	08013194 	.word	0x08013194
 80034a0:	08014540 	.word	0x08014540
 80034a4:	080131a4 	.word	0x080131a4
 80034a8:	08014530 	.word	0x08014530
 80034ac:	080131b8 	.word	0x080131b8
 80034b0:	20000844 	.word	0x20000844
 80034b4:	08014550 	.word	0x08014550
 80034b8:	20000884 	.word	0x20000884
 80034bc:	080131cc 	.word	0x080131cc
 80034c0:	200008bc 	.word	0x200008bc
 80034c4:	0801455c 	.word	0x0801455c
 80034c8:	080131e0 	.word	0x080131e0
	case ESP01ATCIPCLOSE:
		if(esp01RemoteIP[0] == '\0')
 80034cc:	4b45      	ldr	r3, [pc, #276]	@ (80035e4 <ESP01DOConnection+0x3e4>)
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	f000 8084 	beq.w	80035de <ESP01DOConnection+0x3de>
			break;
		ESP01StrToBufTX(ATCIPCLOSE);
 80034d6:	4844      	ldr	r0, [pc, #272]	@ (80035e8 <ESP01DOConnection+0x3e8>)
 80034d8:	f000 f918 	bl	800370c <ESP01StrToBufTX>
		if(ESP01DbgStr != NULL)
 80034dc:	4b43      	ldr	r3, [pc, #268]	@ (80035ec <ESP01DOConnection+0x3ec>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d003      	beq.n	80034ec <ESP01DOConnection+0x2ec>
			ESP01DbgStr("+&DBGESP01ATCIPCLOSE\n");
 80034e4:	4b41      	ldr	r3, [pc, #260]	@ (80035ec <ESP01DOConnection+0x3ec>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4841      	ldr	r0, [pc, #260]	@ (80035f0 <ESP01DOConnection+0x3f0>)
 80034ea:	4798      	blx	r3
		esp01ATSate = ESP01ATCIPSTART;
 80034ec:	4b41      	ldr	r3, [pc, #260]	@ (80035f4 <ESP01DOConnection+0x3f4>)
 80034ee:	220a      	movs	r2, #10
 80034f0:	701a      	strb	r2, [r3, #0]
		break;
 80034f2:	e075      	b.n	80035e0 <ESP01DOConnection+0x3e0>
	case ESP01ATCIPSTART:
		ESP01StrToBufTX(ATCIPSTART);
 80034f4:	4840      	ldr	r0, [pc, #256]	@ (80035f8 <ESP01DOConnection+0x3f8>)
 80034f6:	f000 f909 	bl	800370c <ESP01StrToBufTX>
		ESP01ByteToBufTX('\"');
 80034fa:	2022      	movs	r0, #34	@ 0x22
 80034fc:	f000 f936 	bl	800376c <ESP01ByteToBufTX>
		ESP01StrToBufTX(esp01PROTO);
 8003500:	483e      	ldr	r0, [pc, #248]	@ (80035fc <ESP01DOConnection+0x3fc>)
 8003502:	f000 f903 	bl	800370c <ESP01StrToBufTX>
		ESP01ByteToBufTX('\"');
 8003506:	2022      	movs	r0, #34	@ 0x22
 8003508:	f000 f930 	bl	800376c <ESP01ByteToBufTX>
		ESP01ByteToBufTX(',');
 800350c:	202c      	movs	r0, #44	@ 0x2c
 800350e:	f000 f92d 	bl	800376c <ESP01ByteToBufTX>
		ESP01ByteToBufTX('\"');
 8003512:	2022      	movs	r0, #34	@ 0x22
 8003514:	f000 f92a 	bl	800376c <ESP01ByteToBufTX>
		ESP01StrToBufTX(esp01RemoteIP);
 8003518:	4832      	ldr	r0, [pc, #200]	@ (80035e4 <ESP01DOConnection+0x3e4>)
 800351a:	f000 f8f7 	bl	800370c <ESP01StrToBufTX>
		ESP01ByteToBufTX('\"');
 800351e:	2022      	movs	r0, #34	@ 0x22
 8003520:	f000 f924 	bl	800376c <ESP01ByteToBufTX>
		ESP01ByteToBufTX(',');
 8003524:	202c      	movs	r0, #44	@ 0x2c
 8003526:	f000 f921 	bl	800376c <ESP01ByteToBufTX>
		ESP01StrToBufTX(esp01RemotePORT);
 800352a:	4835      	ldr	r0, [pc, #212]	@ (8003600 <ESP01DOConnection+0x400>)
 800352c:	f000 f8ee 	bl	800370c <ESP01StrToBufTX>
		ESP01ByteToBufTX(',');
 8003530:	202c      	movs	r0, #44	@ 0x2c
 8003532:	f000 f91b 	bl	800376c <ESP01ByteToBufTX>
		ESP01StrToBufTX(esp01LocalPORT);
 8003536:	4833      	ldr	r0, [pc, #204]	@ (8003604 <ESP01DOConnection+0x404>)
 8003538:	f000 f8e8 	bl	800370c <ESP01StrToBufTX>
		ESP01ByteToBufTX(',');
 800353c:	202c      	movs	r0, #44	@ 0x2c
 800353e:	f000 f915 	bl	800376c <ESP01ByteToBufTX>
		ESP01ByteToBufTX('0');
 8003542:	2030      	movs	r0, #48	@ 0x30
 8003544:	f000 f912 	bl	800376c <ESP01ByteToBufTX>
		ESP01ByteToBufTX('\r');
 8003548:	200d      	movs	r0, #13
 800354a:	f000 f90f 	bl	800376c <ESP01ByteToBufTX>
		ESP01ByteToBufTX('\n');
 800354e:	200a      	movs	r0, #10
 8003550:	f000 f90c 	bl	800376c <ESP01ByteToBufTX>
		if(ESP01DbgStr != NULL)
 8003554:	4b25      	ldr	r3, [pc, #148]	@ (80035ec <ESP01DOConnection+0x3ec>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d003      	beq.n	8003564 <ESP01DOConnection+0x364>
			ESP01DbgStr("+&DBGESP01ATCIPSTART\n");
 800355c:	4b23      	ldr	r3, [pc, #140]	@ (80035ec <ESP01DOConnection+0x3ec>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4829      	ldr	r0, [pc, #164]	@ (8003608 <ESP01DOConnection+0x408>)
 8003562:	4798      	blx	r3
		esp01Flags.bit.ATRESPONSEOK = 0;
 8003564:	4a29      	ldr	r2, [pc, #164]	@ (800360c <ESP01DOConnection+0x40c>)
 8003566:	7813      	ldrb	r3, [r2, #0]
 8003568:	f023 0320 	bic.w	r3, r3, #32
 800356c:	7013      	strb	r3, [r2, #0]
		esp01Flags.bit.UDPTCPCONNECTED = 0;
 800356e:	4a27      	ldr	r2, [pc, #156]	@ (800360c <ESP01DOConnection+0x40c>)
 8003570:	7813      	ldrb	r3, [r2, #0]
 8003572:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003576:	7013      	strb	r3, [r2, #0]
		esp01ATSate = ESP01CIPSTARTRESPONSE;
 8003578:	4b1e      	ldr	r3, [pc, #120]	@ (80035f4 <ESP01DOConnection+0x3f4>)
 800357a:	220b      	movs	r2, #11
 800357c:	701a      	strb	r2, [r3, #0]
		esp01TimeoutTask = 5000;
 800357e:	4b24      	ldr	r3, [pc, #144]	@ (8003610 <ESP01DOConnection+0x410>)
 8003580:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003584:	601a      	str	r2, [r3, #0]
		break;
 8003586:	e02b      	b.n	80035e0 <ESP01DOConnection+0x3e0>
	case ESP01CIPSTARTRESPONSE:
		if(esp01Flags.bit.ATRESPONSEOK)
 8003588:	4b20      	ldr	r3, [pc, #128]	@ (800360c <ESP01DOConnection+0x40c>)
 800358a:	781b      	ldrb	r3, [r3, #0]
 800358c:	f003 0320 	and.w	r3, r3, #32
 8003590:	b2db      	uxtb	r3, r3
 8003592:	2b00      	cmp	r3, #0
 8003594:	d003      	beq.n	800359e <ESP01DOConnection+0x39e>
			esp01ATSate = ESP01ATCONNECTED;
 8003596:	4b17      	ldr	r3, [pc, #92]	@ (80035f4 <ESP01DOConnection+0x3f4>)
 8003598:	220c      	movs	r2, #12
 800359a:	701a      	strb	r2, [r3, #0]
		else
			esp01ATSate = ESP01ATAT;
		break;
 800359c:	e020      	b.n	80035e0 <ESP01DOConnection+0x3e0>
			esp01ATSate = ESP01ATAT;
 800359e:	4b15      	ldr	r3, [pc, #84]	@ (80035f4 <ESP01DOConnection+0x3f4>)
 80035a0:	2201      	movs	r2, #1
 80035a2:	701a      	strb	r2, [r3, #0]
		break;
 80035a4:	e01c      	b.n	80035e0 <ESP01DOConnection+0x3e0>
	case ESP01ATCONNECTED:
		if(esp01Flags.bit.WIFICONNECTED == 0){
 80035a6:	4b19      	ldr	r3, [pc, #100]	@ (800360c <ESP01DOConnection+0x40c>)
 80035a8:	781b      	ldrb	r3, [r3, #0]
 80035aa:	f003 0302 	and.w	r3, r3, #2
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d103      	bne.n	80035bc <ESP01DOConnection+0x3bc>
			esp01ATSate = ESP01ATAT;
 80035b4:	4b0f      	ldr	r3, [pc, #60]	@ (80035f4 <ESP01DOConnection+0x3f4>)
 80035b6:	2201      	movs	r2, #1
 80035b8:	701a      	strb	r2, [r3, #0]
			break;
 80035ba:	e011      	b.n	80035e0 <ESP01DOConnection+0x3e0>
		}
		if(esp01Flags.bit.UDPTCPCONNECTED == 0){
 80035bc:	4b13      	ldr	r3, [pc, #76]	@ (800360c <ESP01DOConnection+0x40c>)
 80035be:	781b      	ldrb	r3, [r3, #0]
 80035c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d103      	bne.n	80035d2 <ESP01DOConnection+0x3d2>
			esp01ATSate = ESP01ATCIPCLOSE;
 80035ca:	4b0a      	ldr	r3, [pc, #40]	@ (80035f4 <ESP01DOConnection+0x3f4>)
 80035cc:	2209      	movs	r2, #9
 80035ce:	701a      	strb	r2, [r3, #0]
			break;
 80035d0:	e006      	b.n	80035e0 <ESP01DOConnection+0x3e0>
		}
		esp01TimeoutTask = 0;
 80035d2:	4b0f      	ldr	r3, [pc, #60]	@ (8003610 <ESP01DOConnection+0x410>)
 80035d4:	2200      	movs	r2, #0
 80035d6:	601a      	str	r2, [r3, #0]
		break;
 80035d8:	e002      	b.n	80035e0 <ESP01DOConnection+0x3e0>
			break;
 80035da:	bf00      	nop
 80035dc:	e000      	b.n	80035e0 <ESP01DOConnection+0x3e0>
			break;
 80035de:	bf00      	nop
	}
}
 80035e0:	bf00      	nop
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	200008a4 	.word	0x200008a4
 80035e8:	08014578 	.word	0x08014578
 80035ec:	20000840 	.word	0x20000840
 80035f0:	080131f4 	.word	0x080131f4
 80035f4:	2000082a 	.word	0x2000082a
 80035f8:	08014568 	.word	0x08014568
 80035fc:	20000008 	.word	0x20000008
 8003600:	200008b4 	.word	0x200008b4
 8003604:	200008cc 	.word	0x200008cc
 8003608:	0801320c 	.word	0x0801320c
 800360c:	2000082c 	.word	0x2000082c
 8003610:	20000830 	.word	0x20000830

08003614 <ESP01SENDData>:

static void ESP01SENDData(){
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
	uint8_t value;

	if(esp01Flags.bit.WAITINGSYMBOL){
 800361a:	4b34      	ldr	r3, [pc, #208]	@ (80036ec <ESP01SENDData+0xd8>)
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	f003 0301 	and.w	r3, r3, #1
 8003622:	b2db      	uxtb	r3, r3
 8003624:	2b00      	cmp	r3, #0
 8003626:	d013      	beq.n	8003650 <ESP01SENDData+0x3c>
		if(!esp01TimeoutTxSymbol){
 8003628:	4b31      	ldr	r3, [pc, #196]	@ (80036f0 <ESP01SENDData+0xdc>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d159      	bne.n	80036e4 <ESP01SENDData+0xd0>
			esp01irTX = esp01iwTX;
 8003630:	4b30      	ldr	r3, [pc, #192]	@ (80036f4 <ESP01SENDData+0xe0>)
 8003632:	881a      	ldrh	r2, [r3, #0]
 8003634:	4b30      	ldr	r3, [pc, #192]	@ (80036f8 <ESP01SENDData+0xe4>)
 8003636:	801a      	strh	r2, [r3, #0]
			esp01Flags.bit.WAITINGSYMBOL = 0;
 8003638:	4a2c      	ldr	r2, [pc, #176]	@ (80036ec <ESP01SENDData+0xd8>)
 800363a:	7813      	ldrb	r3, [r2, #0]
 800363c:	f023 0301 	bic.w	r3, r3, #1
 8003640:	7013      	strb	r3, [r2, #0]
			esp01ATSate = ESP01ATAT;
 8003642:	4b2e      	ldr	r3, [pc, #184]	@ (80036fc <ESP01SENDData+0xe8>)
 8003644:	2201      	movs	r2, #1
 8003646:	701a      	strb	r2, [r3, #0]
			esp01TimeoutTask = 10;
 8003648:	4b2d      	ldr	r3, [pc, #180]	@ (8003700 <ESP01SENDData+0xec>)
 800364a:	220a      	movs	r2, #10
 800364c:	601a      	str	r2, [r3, #0]
		}
		return;
 800364e:	e049      	b.n	80036e4 <ESP01SENDData+0xd0>
	}
	if(esp01irTX != esp01iwTX){
 8003650:	4b29      	ldr	r3, [pc, #164]	@ (80036f8 <ESP01SENDData+0xe4>)
 8003652:	881a      	ldrh	r2, [r3, #0]
 8003654:	4b27      	ldr	r3, [pc, #156]	@ (80036f4 <ESP01SENDData+0xe0>)
 8003656:	881b      	ldrh	r3, [r3, #0]
 8003658:	429a      	cmp	r2, r3
 800365a:	d044      	beq.n	80036e6 <ESP01SENDData+0xd2>
		value = esp01TXATBuf[esp01irTX];
 800365c:	4b26      	ldr	r3, [pc, #152]	@ (80036f8 <ESP01SENDData+0xe4>)
 800365e:	881b      	ldrh	r3, [r3, #0]
 8003660:	461a      	mov	r2, r3
 8003662:	4b28      	ldr	r3, [pc, #160]	@ (8003704 <ESP01SENDData+0xf0>)
 8003664:	5c9b      	ldrb	r3, [r3, r2]
 8003666:	71fb      	strb	r3, [r7, #7]
		if(esp01Flags.bit.TXCIPSEND){
 8003668:	4b20      	ldr	r3, [pc, #128]	@ (80036ec <ESP01SENDData+0xd8>)
 800366a:	781b      	ldrb	r3, [r3, #0]
 800366c:	f003 0304 	and.w	r3, r3, #4
 8003670:	b2db      	uxtb	r3, r3
 8003672:	2b00      	cmp	r3, #0
 8003674:	d004      	beq.n	8003680 <ESP01SENDData+0x6c>
			if(value == '>')
 8003676:	79fb      	ldrb	r3, [r7, #7]
 8003678:	2b3e      	cmp	r3, #62	@ 0x3e
 800367a:	d101      	bne.n	8003680 <ESP01SENDData+0x6c>
				value = '\n';
 800367c:	230a      	movs	r3, #10
 800367e:	71fb      	strb	r3, [r7, #7]
		}
		if(esp01Handle.WriteUSARTByte(value)){
 8003680:	4b21      	ldr	r3, [pc, #132]	@ (8003708 <ESP01SENDData+0xf4>)
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	79fa      	ldrb	r2, [r7, #7]
 8003686:	4610      	mov	r0, r2
 8003688:	4798      	blx	r3
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d02a      	beq.n	80036e6 <ESP01SENDData+0xd2>
			if(esp01Flags.bit.TXCIPSEND){
 8003690:	4b16      	ldr	r3, [pc, #88]	@ (80036ec <ESP01SENDData+0xd8>)
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	f003 0304 	and.w	r3, r3, #4
 8003698:	b2db      	uxtb	r3, r3
 800369a:	2b00      	cmp	r3, #0
 800369c:	d013      	beq.n	80036c6 <ESP01SENDData+0xb2>
				if(esp01TXATBuf[esp01irTX] == '>'){
 800369e:	4b16      	ldr	r3, [pc, #88]	@ (80036f8 <ESP01SENDData+0xe4>)
 80036a0:	881b      	ldrh	r3, [r3, #0]
 80036a2:	461a      	mov	r2, r3
 80036a4:	4b17      	ldr	r3, [pc, #92]	@ (8003704 <ESP01SENDData+0xf0>)
 80036a6:	5c9b      	ldrb	r3, [r3, r2]
 80036a8:	2b3e      	cmp	r3, #62	@ 0x3e
 80036aa:	d10c      	bne.n	80036c6 <ESP01SENDData+0xb2>
					esp01Flags.bit.TXCIPSEND = 0;
 80036ac:	4a0f      	ldr	r2, [pc, #60]	@ (80036ec <ESP01SENDData+0xd8>)
 80036ae:	7813      	ldrb	r3, [r2, #0]
 80036b0:	f023 0304 	bic.w	r3, r3, #4
 80036b4:	7013      	strb	r3, [r2, #0]
					esp01Flags.bit.WAITINGSYMBOL = 1;
 80036b6:	4a0d      	ldr	r2, [pc, #52]	@ (80036ec <ESP01SENDData+0xd8>)
 80036b8:	7813      	ldrb	r3, [r2, #0]
 80036ba:	f043 0301 	orr.w	r3, r3, #1
 80036be:	7013      	strb	r3, [r2, #0]
					esp01TimeoutTxSymbol = 5;
 80036c0:	4b0b      	ldr	r3, [pc, #44]	@ (80036f0 <ESP01SENDData+0xdc>)
 80036c2:	2205      	movs	r2, #5
 80036c4:	601a      	str	r2, [r3, #0]
				}
			}
			esp01irTX++;
 80036c6:	4b0c      	ldr	r3, [pc, #48]	@ (80036f8 <ESP01SENDData+0xe4>)
 80036c8:	881b      	ldrh	r3, [r3, #0]
 80036ca:	3301      	adds	r3, #1
 80036cc:	b29a      	uxth	r2, r3
 80036ce:	4b0a      	ldr	r3, [pc, #40]	@ (80036f8 <ESP01SENDData+0xe4>)
 80036d0:	801a      	strh	r2, [r3, #0]
			if(esp01irTX == ESP01TXBUFAT)
 80036d2:	4b09      	ldr	r3, [pc, #36]	@ (80036f8 <ESP01SENDData+0xe4>)
 80036d4:	881b      	ldrh	r3, [r3, #0]
 80036d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036da:	d104      	bne.n	80036e6 <ESP01SENDData+0xd2>
				esp01irTX = 0;
 80036dc:	4b06      	ldr	r3, [pc, #24]	@ (80036f8 <ESP01SENDData+0xe4>)
 80036de:	2200      	movs	r2, #0
 80036e0:	801a      	strh	r2, [r3, #0]
 80036e2:	e000      	b.n	80036e6 <ESP01SENDData+0xd2>
		return;
 80036e4:	bf00      	nop
		}
	}
}
 80036e6:	3708      	adds	r7, #8
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	2000082c 	.word	0x2000082c
 80036f0:	20000838 	.word	0x20000838
 80036f4:	20000a5e 	.word	0x20000a5e
 80036f8:	20000a5c 	.word	0x20000a5c
 80036fc:	2000082a 	.word	0x2000082a
 8003700:	20000830 	.word	0x20000830
 8003704:	20000958 	.word	0x20000958
 8003708:	20000a64 	.word	0x20000a64

0800370c <ESP01StrToBufTX>:

static void ESP01StrToBufTX(const char *str){
 800370c:	b480      	push	{r7}
 800370e:	b085      	sub	sp, #20
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
	for(int i=0; str[i]; i++){
 8003714:	2300      	movs	r3, #0
 8003716:	60fb      	str	r3, [r7, #12]
 8003718:	e017      	b.n	800374a <ESP01StrToBufTX+0x3e>
		esp01TXATBuf[esp01iwTX++] = str[i];
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	441a      	add	r2, r3
 8003720:	4b10      	ldr	r3, [pc, #64]	@ (8003764 <ESP01StrToBufTX+0x58>)
 8003722:	881b      	ldrh	r3, [r3, #0]
 8003724:	1c59      	adds	r1, r3, #1
 8003726:	b288      	uxth	r0, r1
 8003728:	490e      	ldr	r1, [pc, #56]	@ (8003764 <ESP01StrToBufTX+0x58>)
 800372a:	8008      	strh	r0, [r1, #0]
 800372c:	4619      	mov	r1, r3
 800372e:	7812      	ldrb	r2, [r2, #0]
 8003730:	4b0d      	ldr	r3, [pc, #52]	@ (8003768 <ESP01StrToBufTX+0x5c>)
 8003732:	545a      	strb	r2, [r3, r1]
		if(esp01iwTX == ESP01TXBUFAT)
 8003734:	4b0b      	ldr	r3, [pc, #44]	@ (8003764 <ESP01StrToBufTX+0x58>)
 8003736:	881b      	ldrh	r3, [r3, #0]
 8003738:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800373c:	d102      	bne.n	8003744 <ESP01StrToBufTX+0x38>
			esp01iwTX = 0;
 800373e:	4b09      	ldr	r3, [pc, #36]	@ (8003764 <ESP01StrToBufTX+0x58>)
 8003740:	2200      	movs	r2, #0
 8003742:	801a      	strh	r2, [r3, #0]
	for(int i=0; str[i]; i++){
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	3301      	adds	r3, #1
 8003748:	60fb      	str	r3, [r7, #12]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	4413      	add	r3, r2
 8003750:	781b      	ldrb	r3, [r3, #0]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d1e1      	bne.n	800371a <ESP01StrToBufTX+0xe>
	}
}
 8003756:	bf00      	nop
 8003758:	bf00      	nop
 800375a:	3714      	adds	r7, #20
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr
 8003764:	20000a5e 	.word	0x20000a5e
 8003768:	20000958 	.word	0x20000958

0800376c <ESP01ByteToBufTX>:

static void ESP01ByteToBufTX(uint8_t value){
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	4603      	mov	r3, r0
 8003774:	71fb      	strb	r3, [r7, #7]
	esp01TXATBuf[esp01iwTX++] = value;
 8003776:	4b0c      	ldr	r3, [pc, #48]	@ (80037a8 <ESP01ByteToBufTX+0x3c>)
 8003778:	881b      	ldrh	r3, [r3, #0]
 800377a:	1c5a      	adds	r2, r3, #1
 800377c:	b291      	uxth	r1, r2
 800377e:	4a0a      	ldr	r2, [pc, #40]	@ (80037a8 <ESP01ByteToBufTX+0x3c>)
 8003780:	8011      	strh	r1, [r2, #0]
 8003782:	4619      	mov	r1, r3
 8003784:	4a09      	ldr	r2, [pc, #36]	@ (80037ac <ESP01ByteToBufTX+0x40>)
 8003786:	79fb      	ldrb	r3, [r7, #7]
 8003788:	5453      	strb	r3, [r2, r1]
	if(esp01iwTX == ESP01TXBUFAT)
 800378a:	4b07      	ldr	r3, [pc, #28]	@ (80037a8 <ESP01ByteToBufTX+0x3c>)
 800378c:	881b      	ldrh	r3, [r3, #0]
 800378e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003792:	d102      	bne.n	800379a <ESP01ByteToBufTX+0x2e>
		esp01iwTX = 0;
 8003794:	4b04      	ldr	r3, [pc, #16]	@ (80037a8 <ESP01ByteToBufTX+0x3c>)
 8003796:	2200      	movs	r2, #0
 8003798:	801a      	strh	r2, [r3, #0]
}
 800379a:	bf00      	nop
 800379c:	370c      	adds	r7, #12
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr
 80037a6:	bf00      	nop
 80037a8:	20000a5e 	.word	0x20000a5e
 80037ac:	20000958 	.word	0x20000958

080037b0 <OLED_Print_Data_Task>:
/************************************ FIN FUNCIONES PARA ABSTRACCIÓN DE HARDWARE ************************************/
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void OLED_Print_Data_Task(){
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af02      	add	r7, sp, #8
	if(Display.isInit){
 80037b6:	4bbe      	ldr	r3, [pc, #760]	@ (8003ab0 <OLED_Print_Data_Task+0x300>)
 80037b8:	781b      	ldrb	r3, [r3, #0]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	f000 816a 	beq.w	8003a94 <OLED_Print_Data_Task+0x2e4>
		switch(Display.state){
 80037c0:	4bbb      	ldr	r3, [pc, #748]	@ (8003ab0 <OLED_Print_Data_Task+0x300>)
 80037c2:	f893 3401 	ldrb.w	r3, [r3, #1025]	@ 0x401
 80037c6:	2b02      	cmp	r3, #2
 80037c8:	d023      	beq.n	8003812 <OLED_Print_Data_Task+0x62>
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	f300 8162 	bgt.w	8003a94 <OLED_Print_Data_Task+0x2e4>
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d001      	beq.n	80037d8 <OLED_Print_Data_Task+0x28>
 80037d4:	2b01      	cmp	r3, #1
				Display.state = INPUTS;
			}
			break;
		case MENU:

			break;
 80037d6:	e15d      	b.n	8003a94 <OLED_Print_Data_Task+0x2e4>
			if(HAL_GetTick() - Display.timer > 2000){
 80037d8:	f002 f894 	bl	8005904 <HAL_GetTick>
 80037dc:	4602      	mov	r2, r0
 80037de:	4bb4      	ldr	r3, [pc, #720]	@ (8003ab0 <OLED_Print_Data_Task+0x300>)
 80037e0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80037ea:	f240 8150 	bls.w	8003a8e <OLED_Print_Data_Task+0x2de>
				Display_Fill(SSD1306_COLOR_BLACK);
 80037ee:	2000      	movs	r0, #0
 80037f0:	f7fe f902 	bl	80019f8 <Display_Fill>
				Display_DrawBitmap(0, 0, status_screen, 128, 64, SSD1306_COLOR_WHITE);
 80037f4:	2301      	movs	r3, #1
 80037f6:	9301      	str	r3, [sp, #4]
 80037f8:	2340      	movs	r3, #64	@ 0x40
 80037fa:	9300      	str	r3, [sp, #0]
 80037fc:	2380      	movs	r3, #128	@ 0x80
 80037fe:	4aad      	ldr	r2, [pc, #692]	@ (8003ab4 <OLED_Print_Data_Task+0x304>)
 8003800:	2100      	movs	r1, #0
 8003802:	2000      	movs	r0, #0
 8003804:	f7fe f97c 	bl	8001b00 <Display_DrawBitmap>
				Display.state = INPUTS;
 8003808:	4ba9      	ldr	r3, [pc, #676]	@ (8003ab0 <OLED_Print_Data_Task+0x300>)
 800380a:	2202      	movs	r2, #2
 800380c:	f883 2401 	strb.w	r2, [r3, #1025]	@ 0x401
			break;
 8003810:	e13d      	b.n	8003a8e <OLED_Print_Data_Task+0x2de>
		case INPUTS:
			BateryLevel_Set();
 8003812:	f000 f96b 	bl	8003aec <BateryLevel_Set>

			Display_DrawBitmap(2, 17, ADC_Blackout, 37, 44, SSD1306_COLOR_BLACK);
 8003816:	2300      	movs	r3, #0
 8003818:	9301      	str	r3, [sp, #4]
 800381a:	232c      	movs	r3, #44	@ 0x2c
 800381c:	9300      	str	r3, [sp, #0]
 800381e:	2325      	movs	r3, #37	@ 0x25
 8003820:	4aa5      	ldr	r2, [pc, #660]	@ (8003ab8 <OLED_Print_Data_Task+0x308>)
 8003822:	2111      	movs	r1, #17
 8003824:	2002      	movs	r0, #2
 8003826:	f7fe f96b 	bl	8001b00 <Display_DrawBitmap>
			for(uint8_t i = 0; i < 8; i++){
 800382a:	2300      	movs	r3, #0
 800382c:	71fb      	strb	r3, [r7, #7]
 800382e:	e05e      	b.n	80038ee <OLED_Print_Data_Task+0x13e>
				Display.auxYPos = 107 * Analog.value[i] + 170000;
 8003830:	79fb      	ldrb	r3, [r7, #7]
 8003832:	4aa2      	ldr	r2, [pc, #648]	@ (8003abc <OLED_Print_Data_Task+0x30c>)
 8003834:	3308      	adds	r3, #8
 8003836:	005b      	lsls	r3, r3, #1
 8003838:	4413      	add	r3, r2
 800383a:	885b      	ldrh	r3, [r3, #2]
 800383c:	b2db      	uxtb	r3, r3
 800383e:	461a      	mov	r2, r3
 8003840:	0052      	lsls	r2, r2, #1
 8003842:	441a      	add	r2, r3
 8003844:	4611      	mov	r1, r2
 8003846:	00c8      	lsls	r0, r1, #3
 8003848:	4611      	mov	r1, r2
 800384a:	4602      	mov	r2, r0
 800384c:	440a      	add	r2, r1
 800384e:	0092      	lsls	r2, r2, #2
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	b2db      	uxtb	r3, r3
 8003854:	3310      	adds	r3, #16
 8003856:	b2da      	uxtb	r2, r3
 8003858:	4b95      	ldr	r3, [pc, #596]	@ (8003ab0 <OLED_Print_Data_Task+0x300>)
 800385a:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
				Display.auxYPos += 5000;
 800385e:	4b94      	ldr	r3, [pc, #592]	@ (8003ab0 <OLED_Print_Data_Task+0x300>)
 8003860:	f893 3415 	ldrb.w	r3, [r3, #1045]	@ 0x415
 8003864:	3b78      	subs	r3, #120	@ 0x78
 8003866:	b2da      	uxtb	r2, r3
 8003868:	4b91      	ldr	r3, [pc, #580]	@ (8003ab0 <OLED_Print_Data_Task+0x300>)
 800386a:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
				Display.auxYPos /= 10000;
 800386e:	4b90      	ldr	r3, [pc, #576]	@ (8003ab0 <OLED_Print_Data_Task+0x300>)
 8003870:	f893 3415 	ldrb.w	r3, [r3, #1045]	@ 0x415
 8003874:	4a92      	ldr	r2, [pc, #584]	@ (8003ac0 <OLED_Print_Data_Task+0x310>)
 8003876:	fb82 1203 	smull	r1, r2, r2, r3
 800387a:	1312      	asrs	r2, r2, #12
 800387c:	17db      	asrs	r3, r3, #31
 800387e:	1ad3      	subs	r3, r2, r3
 8003880:	b2da      	uxtb	r2, r3
 8003882:	4b8b      	ldr	r3, [pc, #556]	@ (8003ab0 <OLED_Print_Data_Task+0x300>)
 8003884:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
				Display.auxXPos = 2 + i * 3;
 8003888:	79fb      	ldrb	r3, [r7, #7]
 800388a:	461a      	mov	r2, r3
 800388c:	0052      	lsls	r2, r2, #1
 800388e:	4413      	add	r3, r2
 8003890:	b2db      	uxtb	r3, r3
 8003892:	3302      	adds	r3, #2
 8003894:	b2da      	uxtb	r2, r3
 8003896:	4b86      	ldr	r3, [pc, #536]	@ (8003ab0 <OLED_Print_Data_Task+0x300>)
 8003898:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
				Display_DrawLine(Display.auxXPos, 61,  Display.auxXPos, Display.auxYPos, SSD1306_COLOR_WHITE);
 800389c:	4b84      	ldr	r3, [pc, #528]	@ (8003ab0 <OLED_Print_Data_Task+0x300>)
 800389e:	f893 3414 	ldrb.w	r3, [r3, #1044]	@ 0x414
 80038a2:	4618      	mov	r0, r3
 80038a4:	4b82      	ldr	r3, [pc, #520]	@ (8003ab0 <OLED_Print_Data_Task+0x300>)
 80038a6:	f893 3414 	ldrb.w	r3, [r3, #1044]	@ 0x414
 80038aa:	461a      	mov	r2, r3
 80038ac:	4b80      	ldr	r3, [pc, #512]	@ (8003ab0 <OLED_Print_Data_Task+0x300>)
 80038ae:	f893 3415 	ldrb.w	r3, [r3, #1045]	@ 0x415
 80038b2:	4619      	mov	r1, r3
 80038b4:	2301      	movs	r3, #1
 80038b6:	9300      	str	r3, [sp, #0]
 80038b8:	460b      	mov	r3, r1
 80038ba:	213d      	movs	r1, #61	@ 0x3d
 80038bc:	f7fe fa2a 	bl	8001d14 <Display_DrawLine>
				Display_DrawLine(Display.auxXPos+1, 61,  Display.auxXPos+1, Display.auxYPos, SSD1306_COLOR_WHITE);
 80038c0:	4b7b      	ldr	r3, [pc, #492]	@ (8003ab0 <OLED_Print_Data_Task+0x300>)
 80038c2:	f893 3414 	ldrb.w	r3, [r3, #1044]	@ 0x414
 80038c6:	3301      	adds	r3, #1
 80038c8:	b298      	uxth	r0, r3
 80038ca:	4b79      	ldr	r3, [pc, #484]	@ (8003ab0 <OLED_Print_Data_Task+0x300>)
 80038cc:	f893 3414 	ldrb.w	r3, [r3, #1044]	@ 0x414
 80038d0:	3301      	adds	r3, #1
 80038d2:	b29a      	uxth	r2, r3
 80038d4:	4b76      	ldr	r3, [pc, #472]	@ (8003ab0 <OLED_Print_Data_Task+0x300>)
 80038d6:	f893 3415 	ldrb.w	r3, [r3, #1045]	@ 0x415
 80038da:	4619      	mov	r1, r3
 80038dc:	2301      	movs	r3, #1
 80038de:	9300      	str	r3, [sp, #0]
 80038e0:	460b      	mov	r3, r1
 80038e2:	213d      	movs	r1, #61	@ 0x3d
 80038e4:	f7fe fa16 	bl	8001d14 <Display_DrawLine>
			for(uint8_t i = 0; i < 8; i++){
 80038e8:	79fb      	ldrb	r3, [r7, #7]
 80038ea:	3301      	adds	r3, #1
 80038ec:	71fb      	strb	r3, [r7, #7]
 80038ee:	79fb      	ldrb	r3, [r7, #7]
 80038f0:	2b07      	cmp	r3, #7
 80038f2:	d99d      	bls.n	8003830 <OLED_Print_Data_Task+0x80>
			}

			if(MPU6050.isInit){
 80038f4:	4b73      	ldr	r3, [pc, #460]	@ (8003ac4 <OLED_Print_Data_Task+0x314>)
 80038f6:	f893 30c2 	ldrb.w	r3, [r3, #194]	@ 0xc2
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	f000 80c9 	beq.w	8003a92 <OLED_Print_Data_Task+0x2e2>
				MPU6050.Acc.x = (MPU6050.Acc.x / 16384.0) * 9.8f;
 8003900:	4b70      	ldr	r3, [pc, #448]	@ (8003ac4 <OLED_Print_Data_Task+0x314>)
 8003902:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003906:	4618      	mov	r0, r3
 8003908:	f7fc fe14 	bl	8000534 <__aeabi_i2d>
 800390c:	f04f 0200 	mov.w	r2, #0
 8003910:	4b6d      	ldr	r3, [pc, #436]	@ (8003ac8 <OLED_Print_Data_Task+0x318>)
 8003912:	f7fc ffa3 	bl	800085c <__aeabi_ddiv>
 8003916:	4602      	mov	r2, r0
 8003918:	460b      	mov	r3, r1
 800391a:	4610      	mov	r0, r2
 800391c:	4619      	mov	r1, r3
 800391e:	a362      	add	r3, pc, #392	@ (adr r3, 8003aa8 <OLED_Print_Data_Task+0x2f8>)
 8003920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003924:	f7fc fe70 	bl	8000608 <__aeabi_dmul>
 8003928:	4602      	mov	r2, r0
 800392a:	460b      	mov	r3, r1
 800392c:	4610      	mov	r0, r2
 800392e:	4619      	mov	r1, r3
 8003930:	f7fd f87c 	bl	8000a2c <__aeabi_d2iz>
 8003934:	4603      	mov	r3, r0
 8003936:	b21a      	sxth	r2, r3
 8003938:	4b62      	ldr	r3, [pc, #392]	@ (8003ac4 <OLED_Print_Data_Task+0x314>)
 800393a:	801a      	strh	r2, [r3, #0]
				MPU6050.Acc.y = (MPU6050.Acc.y / 16384.0) * 9.8f;
 800393c:	4b61      	ldr	r3, [pc, #388]	@ (8003ac4 <OLED_Print_Data_Task+0x314>)
 800393e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003942:	4618      	mov	r0, r3
 8003944:	f7fc fdf6 	bl	8000534 <__aeabi_i2d>
 8003948:	f04f 0200 	mov.w	r2, #0
 800394c:	4b5e      	ldr	r3, [pc, #376]	@ (8003ac8 <OLED_Print_Data_Task+0x318>)
 800394e:	f7fc ff85 	bl	800085c <__aeabi_ddiv>
 8003952:	4602      	mov	r2, r0
 8003954:	460b      	mov	r3, r1
 8003956:	4610      	mov	r0, r2
 8003958:	4619      	mov	r1, r3
 800395a:	a353      	add	r3, pc, #332	@ (adr r3, 8003aa8 <OLED_Print_Data_Task+0x2f8>)
 800395c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003960:	f7fc fe52 	bl	8000608 <__aeabi_dmul>
 8003964:	4602      	mov	r2, r0
 8003966:	460b      	mov	r3, r1
 8003968:	4610      	mov	r0, r2
 800396a:	4619      	mov	r1, r3
 800396c:	f7fd f85e 	bl	8000a2c <__aeabi_d2iz>
 8003970:	4603      	mov	r3, r0
 8003972:	b21a      	sxth	r2, r3
 8003974:	4b53      	ldr	r3, [pc, #332]	@ (8003ac4 <OLED_Print_Data_Task+0x314>)
 8003976:	805a      	strh	r2, [r3, #2]
				MPU6050.Acc.z = (MPU6050.Acc.z / 16384.0) * 9.8f;
 8003978:	4b52      	ldr	r3, [pc, #328]	@ (8003ac4 <OLED_Print_Data_Task+0x314>)
 800397a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800397e:	4618      	mov	r0, r3
 8003980:	f7fc fdd8 	bl	8000534 <__aeabi_i2d>
 8003984:	f04f 0200 	mov.w	r2, #0
 8003988:	4b4f      	ldr	r3, [pc, #316]	@ (8003ac8 <OLED_Print_Data_Task+0x318>)
 800398a:	f7fc ff67 	bl	800085c <__aeabi_ddiv>
 800398e:	4602      	mov	r2, r0
 8003990:	460b      	mov	r3, r1
 8003992:	4610      	mov	r0, r2
 8003994:	4619      	mov	r1, r3
 8003996:	a344      	add	r3, pc, #272	@ (adr r3, 8003aa8 <OLED_Print_Data_Task+0x2f8>)
 8003998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800399c:	f7fc fe34 	bl	8000608 <__aeabi_dmul>
 80039a0:	4602      	mov	r2, r0
 80039a2:	460b      	mov	r3, r1
 80039a4:	4610      	mov	r0, r2
 80039a6:	4619      	mov	r1, r3
 80039a8:	f7fd f840 	bl	8000a2c <__aeabi_d2iz>
 80039ac:	4603      	mov	r3, r0
 80039ae:	b21a      	sxth	r2, r3
 80039b0:	4b44      	ldr	r3, [pc, #272]	@ (8003ac4 <OLED_Print_Data_Task+0x314>)
 80039b2:	809a      	strh	r2, [r3, #4]
				sprintf((char*)Display.auxString, "Ax:%d", MPU6050.Acc.x);
 80039b4:	4b43      	ldr	r3, [pc, #268]	@ (8003ac4 <OLED_Print_Data_Task+0x314>)
 80039b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80039ba:	461a      	mov	r2, r3
 80039bc:	4943      	ldr	r1, [pc, #268]	@ (8003acc <OLED_Print_Data_Task+0x31c>)
 80039be:	4844      	ldr	r0, [pc, #272]	@ (8003ad0 <OLED_Print_Data_Task+0x320>)
 80039c0:	f00e feca 	bl	8012758 <siprintf>
				Display_SetCursor(25, 17);
 80039c4:	2111      	movs	r1, #17
 80039c6:	2019      	movs	r0, #25
 80039c8:	f7fd fffe 	bl	80019c8 <Display_SetCursor>
				Display_WriteString((char*)Display.auxString, Font_7x10, SSD1306_COLOR_WHITE);
 80039cc:	4a41      	ldr	r2, [pc, #260]	@ (8003ad4 <OLED_Print_Data_Task+0x324>)
 80039ce:	2301      	movs	r3, #1
 80039d0:	ca06      	ldmia	r2, {r1, r2}
 80039d2:	483f      	ldr	r0, [pc, #252]	@ (8003ad0 <OLED_Print_Data_Task+0x320>)
 80039d4:	f7fe f978 	bl	8001cc8 <Display_WriteString>
				sprintf((char*)Display.auxString, "Ay:%d", MPU6050.Acc.y);
 80039d8:	4b3a      	ldr	r3, [pc, #232]	@ (8003ac4 <OLED_Print_Data_Task+0x314>)
 80039da:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80039de:	461a      	mov	r2, r3
 80039e0:	493d      	ldr	r1, [pc, #244]	@ (8003ad8 <OLED_Print_Data_Task+0x328>)
 80039e2:	483b      	ldr	r0, [pc, #236]	@ (8003ad0 <OLED_Print_Data_Task+0x320>)
 80039e4:	f00e feb8 	bl	8012758 <siprintf>
				Display_SetCursor(25, 34);
 80039e8:	2122      	movs	r1, #34	@ 0x22
 80039ea:	2019      	movs	r0, #25
 80039ec:	f7fd ffec 	bl	80019c8 <Display_SetCursor>
				Display_WriteString((char*)Display.auxString, Font_7x10, SSD1306_COLOR_WHITE);
 80039f0:	4a38      	ldr	r2, [pc, #224]	@ (8003ad4 <OLED_Print_Data_Task+0x324>)
 80039f2:	2301      	movs	r3, #1
 80039f4:	ca06      	ldmia	r2, {r1, r2}
 80039f6:	4836      	ldr	r0, [pc, #216]	@ (8003ad0 <OLED_Print_Data_Task+0x320>)
 80039f8:	f7fe f966 	bl	8001cc8 <Display_WriteString>
				sprintf((char*)Display.auxString, "Az:%d", MPU6050.Acc.z);
 80039fc:	4b31      	ldr	r3, [pc, #196]	@ (8003ac4 <OLED_Print_Data_Task+0x314>)
 80039fe:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003a02:	461a      	mov	r2, r3
 8003a04:	4935      	ldr	r1, [pc, #212]	@ (8003adc <OLED_Print_Data_Task+0x32c>)
 8003a06:	4832      	ldr	r0, [pc, #200]	@ (8003ad0 <OLED_Print_Data_Task+0x320>)
 8003a08:	f00e fea6 	bl	8012758 <siprintf>
				Display_SetCursor(25, 51);
 8003a0c:	2133      	movs	r1, #51	@ 0x33
 8003a0e:	2019      	movs	r0, #25
 8003a10:	f7fd ffda 	bl	80019c8 <Display_SetCursor>
				Display_WriteString((char*)Display.auxString, Font_7x10, SSD1306_COLOR_WHITE);
 8003a14:	4a2f      	ldr	r2, [pc, #188]	@ (8003ad4 <OLED_Print_Data_Task+0x324>)
 8003a16:	2301      	movs	r3, #1
 8003a18:	ca06      	ldmia	r2, {r1, r2}
 8003a1a:	482d      	ldr	r0, [pc, #180]	@ (8003ad0 <OLED_Print_Data_Task+0x320>)
 8003a1c:	f7fe f954 	bl	8001cc8 <Display_WriteString>
				sprintf((char*)Display.auxString, "Gx:%d", MPU6050.Gyro.x);
 8003a20:	4b28      	ldr	r3, [pc, #160]	@ (8003ac4 <OLED_Print_Data_Task+0x314>)
 8003a22:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003a26:	461a      	mov	r2, r3
 8003a28:	492d      	ldr	r1, [pc, #180]	@ (8003ae0 <OLED_Print_Data_Task+0x330>)
 8003a2a:	4829      	ldr	r0, [pc, #164]	@ (8003ad0 <OLED_Print_Data_Task+0x320>)
 8003a2c:	f00e fe94 	bl	8012758 <siprintf>
				Display_SetCursor(73, 17);
 8003a30:	2111      	movs	r1, #17
 8003a32:	2049      	movs	r0, #73	@ 0x49
 8003a34:	f7fd ffc8 	bl	80019c8 <Display_SetCursor>
				Display_WriteString((char*)Display.auxString, Font_7x10, SSD1306_COLOR_WHITE);
 8003a38:	4a26      	ldr	r2, [pc, #152]	@ (8003ad4 <OLED_Print_Data_Task+0x324>)
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	ca06      	ldmia	r2, {r1, r2}
 8003a3e:	4824      	ldr	r0, [pc, #144]	@ (8003ad0 <OLED_Print_Data_Task+0x320>)
 8003a40:	f7fe f942 	bl	8001cc8 <Display_WriteString>
				sprintf((char*)Display.auxString, "Gy:%d", MPU6050.Gyro.y);
 8003a44:	4b1f      	ldr	r3, [pc, #124]	@ (8003ac4 <OLED_Print_Data_Task+0x314>)
 8003a46:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	4925      	ldr	r1, [pc, #148]	@ (8003ae4 <OLED_Print_Data_Task+0x334>)
 8003a4e:	4820      	ldr	r0, [pc, #128]	@ (8003ad0 <OLED_Print_Data_Task+0x320>)
 8003a50:	f00e fe82 	bl	8012758 <siprintf>
				Display_SetCursor(73, 34);
 8003a54:	2122      	movs	r1, #34	@ 0x22
 8003a56:	2049      	movs	r0, #73	@ 0x49
 8003a58:	f7fd ffb6 	bl	80019c8 <Display_SetCursor>
				Display_WriteString((char*)Display.auxString, Font_7x10, SSD1306_COLOR_WHITE);
 8003a5c:	4a1d      	ldr	r2, [pc, #116]	@ (8003ad4 <OLED_Print_Data_Task+0x324>)
 8003a5e:	2301      	movs	r3, #1
 8003a60:	ca06      	ldmia	r2, {r1, r2}
 8003a62:	481b      	ldr	r0, [pc, #108]	@ (8003ad0 <OLED_Print_Data_Task+0x320>)
 8003a64:	f7fe f930 	bl	8001cc8 <Display_WriteString>
				sprintf((char*)Display.auxString, "Gz:%d", MPU6050.Gyro.z);
 8003a68:	4b16      	ldr	r3, [pc, #88]	@ (8003ac4 <OLED_Print_Data_Task+0x314>)
 8003a6a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8003a6e:	461a      	mov	r2, r3
 8003a70:	491d      	ldr	r1, [pc, #116]	@ (8003ae8 <OLED_Print_Data_Task+0x338>)
 8003a72:	4817      	ldr	r0, [pc, #92]	@ (8003ad0 <OLED_Print_Data_Task+0x320>)
 8003a74:	f00e fe70 	bl	8012758 <siprintf>
				Display_SetCursor(73, 51);
 8003a78:	2133      	movs	r1, #51	@ 0x33
 8003a7a:	2049      	movs	r0, #73	@ 0x49
 8003a7c:	f7fd ffa4 	bl	80019c8 <Display_SetCursor>
				Display_WriteString((char*)Display.auxString, Font_7x10, SSD1306_COLOR_WHITE);
 8003a80:	4a14      	ldr	r2, [pc, #80]	@ (8003ad4 <OLED_Print_Data_Task+0x324>)
 8003a82:	2301      	movs	r3, #1
 8003a84:	ca06      	ldmia	r2, {r1, r2}
 8003a86:	4812      	ldr	r0, [pc, #72]	@ (8003ad0 <OLED_Print_Data_Task+0x320>)
 8003a88:	f7fe f91e 	bl	8001cc8 <Display_WriteString>
			}
			break;
 8003a8c:	e001      	b.n	8003a92 <OLED_Print_Data_Task+0x2e2>
			break;
 8003a8e:	bf00      	nop
 8003a90:	e000      	b.n	8003a94 <OLED_Print_Data_Task+0x2e4>
			break;
 8003a92:	bf00      	nop
		}
	}

	Display_I2C_Refresh_Ready(TRUE);
 8003a94:	2001      	movs	r0, #1
 8003a96:	f7fd ff87 	bl	80019a8 <Display_I2C_Refresh_Ready>
}
 8003a9a:	bf00      	nop
 8003a9c:	3708      	adds	r7, #8
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	f3af 8000 	nop.w
 8003aa8:	a0000000 	.word	0xa0000000
 8003aac:	40239999 	.word	0x40239999
 8003ab0:	20000e20 	.word	0x20000e20
 8003ab4:	080138e0 	.word	0x080138e0
 8003ab8:	08013ce0 	.word	0x08013ce0
 8003abc:	20001238 	.word	0x20001238
 8003ac0:	68db8bad 	.word	0x68db8bad
 8003ac4:	20000d5c 	.word	0x20000d5c
 8003ac8:	40d00000 	.word	0x40d00000
 8003acc:	08013224 	.word	0x08013224
 8003ad0:	20001228 	.word	0x20001228
 8003ad4:	20000000 	.word	0x20000000
 8003ad8:	0801322c 	.word	0x0801322c
 8003adc:	08013234 	.word	0x08013234
 8003ae0:	0801323c 	.word	0x0801323c
 8003ae4:	08013244 	.word	0x08013244
 8003ae8:	0801324c 	.word	0x0801324c

08003aec <BateryLevel_Set>:

void BateryLevel_Set(){
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b082      	sub	sp, #8
 8003af0:	af02      	add	r7, sp, #8
	Display_DrawFilledRectangle(3, 4, 6, 9, SSD1306_COLOR_BLACK);
 8003af2:	2300      	movs	r3, #0
 8003af4:	9300      	str	r3, [sp, #0]
 8003af6:	2309      	movs	r3, #9
 8003af8:	2206      	movs	r2, #6
 8003afa:	2104      	movs	r1, #4
 8003afc:	2003      	movs	r0, #3
 8003afe:	f7fe f9b7 	bl	8001e70 <Display_DrawFilledRectangle>
	if(Analog.value[8] >= 3900){
 8003b02:	4b1f      	ldr	r3, [pc, #124]	@ (8003b80 <BateryLevel_Set+0x94>)
 8003b04:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8003b06:	f640 723b 	movw	r2, #3899	@ 0xf3b
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d908      	bls.n	8003b20 <BateryLevel_Set+0x34>
		Display_DrawFilledRectangle(3, 4, 6, 9, SSD1306_COLOR_WHITE);
 8003b0e:	2301      	movs	r3, #1
 8003b10:	9300      	str	r3, [sp, #0]
 8003b12:	2309      	movs	r3, #9
 8003b14:	2206      	movs	r2, #6
 8003b16:	2104      	movs	r1, #4
 8003b18:	2003      	movs	r0, #3
 8003b1a:	f7fe f9a9 	bl	8001e70 <Display_DrawFilledRectangle>
	}else if(Analog.value[8] >= 2047){
		Display_DrawFilledRectangle(3, 8, 6, 5, SSD1306_COLOR_WHITE);
	}else if(Analog.value[8] >= 1023){
		Display_DrawFilledRectangle(3, 11, 6, 2, SSD1306_COLOR_WHITE);
	}
}
 8003b1e:	e02b      	b.n	8003b78 <BateryLevel_Set+0x8c>
	}else if(Analog.value[8] >= 3000){
 8003b20:	4b17      	ldr	r3, [pc, #92]	@ (8003b80 <BateryLevel_Set+0x94>)
 8003b22:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8003b24:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d908      	bls.n	8003b3e <BateryLevel_Set+0x52>
		Display_DrawFilledRectangle(3, 6, 6, 7, SSD1306_COLOR_WHITE);
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	9300      	str	r3, [sp, #0]
 8003b30:	2307      	movs	r3, #7
 8003b32:	2206      	movs	r2, #6
 8003b34:	2106      	movs	r1, #6
 8003b36:	2003      	movs	r0, #3
 8003b38:	f7fe f99a 	bl	8001e70 <Display_DrawFilledRectangle>
}
 8003b3c:	e01c      	b.n	8003b78 <BateryLevel_Set+0x8c>
	}else if(Analog.value[8] >= 2047){
 8003b3e:	4b10      	ldr	r3, [pc, #64]	@ (8003b80 <BateryLevel_Set+0x94>)
 8003b40:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8003b42:	f240 72fe 	movw	r2, #2046	@ 0x7fe
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d908      	bls.n	8003b5c <BateryLevel_Set+0x70>
		Display_DrawFilledRectangle(3, 8, 6, 5, SSD1306_COLOR_WHITE);
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	9300      	str	r3, [sp, #0]
 8003b4e:	2305      	movs	r3, #5
 8003b50:	2206      	movs	r2, #6
 8003b52:	2108      	movs	r1, #8
 8003b54:	2003      	movs	r0, #3
 8003b56:	f7fe f98b 	bl	8001e70 <Display_DrawFilledRectangle>
}
 8003b5a:	e00d      	b.n	8003b78 <BateryLevel_Set+0x8c>
	}else if(Analog.value[8] >= 1023){
 8003b5c:	4b08      	ldr	r3, [pc, #32]	@ (8003b80 <BateryLevel_Set+0x94>)
 8003b5e:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8003b60:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d907      	bls.n	8003b78 <BateryLevel_Set+0x8c>
		Display_DrawFilledRectangle(3, 11, 6, 2, SSD1306_COLOR_WHITE);
 8003b68:	2301      	movs	r3, #1
 8003b6a:	9300      	str	r3, [sp, #0]
 8003b6c:	2302      	movs	r3, #2
 8003b6e:	2206      	movs	r2, #6
 8003b70:	210b      	movs	r1, #11
 8003b72:	2003      	movs	r0, #3
 8003b74:	f7fe f97c 	bl	8001e70 <Display_DrawFilledRectangle>
}
 8003b78:	bf00      	nop
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	20001238 	.word	0x20001238

08003b84 <decodeOn_USB>:

void decodeOn_USB(s_commData *data){
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b084      	sub	sp, #16
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
	switch(RXBUF[RXCMD]){
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	785b      	ldrb	r3, [r3, #1]
 8003b90:	3302      	adds	r3, #2
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	4413      	add	r3, r2
 8003b96:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8003b9a:	2bf1      	cmp	r3, #241	@ 0xf1
 8003b9c:	f000 81c8 	beq.w	8003f30 <decodeOn_USB+0x3ac>
 8003ba0:	2bf1      	cmp	r3, #241	@ 0xf1
 8003ba2:	f300 81be 	bgt.w	8003f22 <decodeOn_USB+0x39e>
 8003ba6:	2bf0      	cmp	r3, #240	@ 0xf0
 8003ba8:	d036      	beq.n	8003c18 <decodeOn_USB+0x94>
 8003baa:	2bf0      	cmp	r3, #240	@ 0xf0
 8003bac:	f300 81b9 	bgt.w	8003f22 <decodeOn_USB+0x39e>
 8003bb0:	2bb1      	cmp	r3, #177	@ 0xb1
 8003bb2:	dc2d      	bgt.n	8003c10 <decodeOn_USB+0x8c>
 8003bb4:	2ba0      	cmp	r3, #160	@ 0xa0
 8003bb6:	f2c0 81b4 	blt.w	8003f22 <decodeOn_USB+0x39e>
 8003bba:	3ba0      	subs	r3, #160	@ 0xa0
 8003bbc:	2b11      	cmp	r3, #17
 8003bbe:	f200 81b0 	bhi.w	8003f22 <decodeOn_USB+0x39e>
 8003bc2:	a201      	add	r2, pc, #4	@ (adr r2, 8003bc8 <decodeOn_USB+0x44>)
 8003bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bc8:	08003c33 	.word	0x08003c33
 8003bcc:	08003ca9 	.word	0x08003ca9
 8003bd0:	08003d03 	.word	0x08003d03
 8003bd4:	08003d97 	.word	0x08003d97
 8003bd8:	08003e5d 	.word	0x08003e5d
 8003bdc:	08003f23 	.word	0x08003f23
 8003be0:	08003f23 	.word	0x08003f23
 8003be4:	08003f23 	.word	0x08003f23
 8003be8:	08003f23 	.word	0x08003f23
 8003bec:	08003f23 	.word	0x08003f23
 8003bf0:	08003f23 	.word	0x08003f23
 8003bf4:	08003f23 	.word	0x08003f23
 8003bf8:	08003f23 	.word	0x08003f23
 8003bfc:	08003f23 	.word	0x08003f23
 8003c00:	08003f23 	.word	0x08003f23
 8003c04:	08003f23 	.word	0x08003f23
 8003c08:	08003f23 	.word	0x08003f23
 8003c0c:	08003f35 	.word	0x08003f35
 8003c10:	2bde      	cmp	r3, #222	@ 0xde
 8003c12:	f000 8191 	beq.w	8003f38 <decodeOn_USB+0x3b4>
 8003c16:	e184      	b.n	8003f22 <decodeOn_USB+0x39e>
	case GETALIVE:
		data->auxBuffer[0] = ACK;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	220d      	movs	r2, #13
 8003c1c:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
		comm_sendCMD(data, GETALIVE, &data->auxBuffer[0], 1);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 8003c26:	2301      	movs	r3, #1
 8003c28:	21f0      	movs	r1, #240	@ 0xf0
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f7fe fc58 	bl	80024e0 <comm_sendCMD>
		break;
 8003c30:	e183      	b.n	8003f3a <decodeOn_USB+0x3b6>
	case FIRMWARE:
		break;
	case USERTEXT:
		break;
	case ADCSINGLE:
		if(RXBUF[RXCMD + 1] <= 8 && RXBUF[RXCMD + 1] >= 0){
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	785b      	ldrb	r3, [r3, #1]
 8003c36:	3303      	adds	r3, #3
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	4413      	add	r3, r2
 8003c3c:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8003c40:	2b08      	cmp	r3, #8
 8003c42:	d82a      	bhi.n	8003c9a <decodeOn_USB+0x116>
			decom.ui16[0] = Analog.value[RXBUF[RXCMD + 1]];
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	785b      	ldrb	r3, [r3, #1]
 8003c48:	3303      	adds	r3, #3
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	4413      	add	r3, r2
 8003c4e:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8003c52:	4a78      	ldr	r2, [pc, #480]	@ (8003e34 <decodeOn_USB+0x2b0>)
 8003c54:	3308      	adds	r3, #8
 8003c56:	005b      	lsls	r3, r3, #1
 8003c58:	4413      	add	r3, r2
 8003c5a:	885a      	ldrh	r2, [r3, #2]
 8003c5c:	4b76      	ldr	r3, [pc, #472]	@ (8003e38 <decodeOn_USB+0x2b4>)
 8003c5e:	801a      	strh	r2, [r3, #0]
			data->auxBuffer[0] = RXBUF[RXCMD + 1];
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	785b      	ldrb	r3, [r3, #1]
 8003c64:	3303      	adds	r3, #3
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	4413      	add	r3, r2
 8003c6a:	f893 2106 	ldrb.w	r2, [r3, #262]	@ 0x106
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
			data->auxBuffer[1] = decom.ui8[0];
 8003c74:	4b70      	ldr	r3, [pc, #448]	@ (8003e38 <decodeOn_USB+0x2b4>)
 8003c76:	781a      	ldrb	r2, [r3, #0]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f883 2211 	strb.w	r2, [r3, #529]	@ 0x211
			data->auxBuffer[2] = decom.ui8[1];
 8003c7e:	4b6e      	ldr	r3, [pc, #440]	@ (8003e38 <decodeOn_USB+0x2b4>)
 8003c80:	785a      	ldrb	r2, [r3, #1]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f883 2212 	strb.w	r2, [r3, #530]	@ 0x212
			comm_sendCMD(data, ADCSINGLE, &data->auxBuffer[0], 3);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 8003c8e:	2303      	movs	r3, #3
 8003c90:	21a0      	movs	r1, #160	@ 0xa0
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f7fe fc24 	bl	80024e0 <comm_sendCMD>
		}else{
			comm_sendCMD(data, SYSWARNING, (uint8_t*)"NO ADC", 6);
		}
		break;
 8003c98:	e14f      	b.n	8003f3a <decodeOn_USB+0x3b6>
			comm_sendCMD(data, SYSWARNING, (uint8_t*)"NO ADC", 6);
 8003c9a:	2306      	movs	r3, #6
 8003c9c:	4a67      	ldr	r2, [pc, #412]	@ (8003e3c <decodeOn_USB+0x2b8>)
 8003c9e:	21ef      	movs	r1, #239	@ 0xef
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f7fe fc1d 	bl	80024e0 <comm_sendCMD>
		break;
 8003ca6:	e148      	b.n	8003f3a <decodeOn_USB+0x3b6>
	case ADCBLOCK:
		for(uint8_t i = 0; i < ADC_NUM_SENSORS; i++){
 8003ca8:	2300      	movs	r3, #0
 8003caa:	73fb      	strb	r3, [r7, #15]
 8003cac:	e01d      	b.n	8003cea <decodeOn_USB+0x166>
			decom.ui16[0] = Analog.value[i];
 8003cae:	7bfb      	ldrb	r3, [r7, #15]
 8003cb0:	4a60      	ldr	r2, [pc, #384]	@ (8003e34 <decodeOn_USB+0x2b0>)
 8003cb2:	3308      	adds	r3, #8
 8003cb4:	005b      	lsls	r3, r3, #1
 8003cb6:	4413      	add	r3, r2
 8003cb8:	885a      	ldrh	r2, [r3, #2]
 8003cba:	4b5f      	ldr	r3, [pc, #380]	@ (8003e38 <decodeOn_USB+0x2b4>)
 8003cbc:	801a      	strh	r2, [r3, #0]
			data->auxBuffer[i*2] = decom.ui8[0];
 8003cbe:	7bfb      	ldrb	r3, [r7, #15]
 8003cc0:	005b      	lsls	r3, r3, #1
 8003cc2:	4a5d      	ldr	r2, [pc, #372]	@ (8003e38 <decodeOn_USB+0x2b4>)
 8003cc4:	7811      	ldrb	r1, [r2, #0]
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	4413      	add	r3, r2
 8003cca:	460a      	mov	r2, r1
 8003ccc:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
			data->auxBuffer[i*2+1] = decom.ui8[1];
 8003cd0:	7bfb      	ldrb	r3, [r7, #15]
 8003cd2:	005b      	lsls	r3, r3, #1
 8003cd4:	3301      	adds	r3, #1
 8003cd6:	4a58      	ldr	r2, [pc, #352]	@ (8003e38 <decodeOn_USB+0x2b4>)
 8003cd8:	7851      	ldrb	r1, [r2, #1]
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	4413      	add	r3, r2
 8003cde:	460a      	mov	r2, r1
 8003ce0:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
		for(uint8_t i = 0; i < ADC_NUM_SENSORS; i++){
 8003ce4:	7bfb      	ldrb	r3, [r7, #15]
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	73fb      	strb	r3, [r7, #15]
 8003cea:	7bfb      	ldrb	r3, [r7, #15]
 8003cec:	2b08      	cmp	r3, #8
 8003cee:	d9de      	bls.n	8003cae <decodeOn_USB+0x12a>
		}
		comm_sendCMD(data, ADCBLOCK, data->auxBuffer, 17);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 8003cf6:	2311      	movs	r3, #17
 8003cf8:	21a1      	movs	r1, #161	@ 0xa1
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f7fe fbf0 	bl	80024e0 <comm_sendCMD>
		break;
 8003d00:	e11b      	b.n	8003f3a <decodeOn_USB+0x3b6>
	case DEBUGER:

		break;
	case SETMOTOR:
		if(RXBUF[RXCMD + 1] == MOTOR_L){
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	785b      	ldrb	r3, [r3, #1]
 8003d06:	3303      	adds	r3, #3
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	4413      	add	r3, r2
 8003d0c:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d117      	bne.n	8003d44 <decodeOn_USB+0x1c0>
			Motor_Set_Speed(&MotorL, RXBUF[RXCMD + 2]);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	785b      	ldrb	r3, [r3, #1]
 8003d18:	3304      	adds	r3, #4
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	4413      	add	r3, r2
 8003d1e:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8003d22:	b25b      	sxtb	r3, r3
 8003d24:	4619      	mov	r1, r3
 8003d26:	4846      	ldr	r0, [pc, #280]	@ (8003e40 <decodeOn_USB+0x2bc>)
 8003d28:	f7fe f988 	bl	800203c <Motor_Set_Speed>
			USB.data.auxBuffer[0] = ACK;
 8003d2c:	4b45      	ldr	r3, [pc, #276]	@ (8003e44 <decodeOn_USB+0x2c0>)
 8003d2e:	220d      	movs	r2, #13
 8003d30:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
			comm_sendCMD(data, SETMOTOR, data->auxBuffer, 1);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	21a2      	movs	r1, #162	@ 0xa2
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f7fe fbce 	bl	80024e0 <comm_sendCMD>
		}
		if(RXBUF[RXCMD + 1] == MOTOR_R){
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	785b      	ldrb	r3, [r3, #1]
 8003d48:	3303      	adds	r3, #3
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	4413      	add	r3, r2
 8003d4e:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d118      	bne.n	8003d88 <decodeOn_USB+0x204>
			Motor_Set_Speed(&MotorR, RXBUF[RXCMD + 2]);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	785b      	ldrb	r3, [r3, #1]
 8003d5a:	3304      	adds	r3, #4
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	4413      	add	r3, r2
 8003d60:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8003d64:	b25b      	sxtb	r3, r3
 8003d66:	4619      	mov	r1, r3
 8003d68:	4837      	ldr	r0, [pc, #220]	@ (8003e48 <decodeOn_USB+0x2c4>)
 8003d6a:	f7fe f967 	bl	800203c <Motor_Set_Speed>
			USB.data.auxBuffer[0] = ACK;
 8003d6e:	4b35      	ldr	r3, [pc, #212]	@ (8003e44 <decodeOn_USB+0x2c0>)
 8003d70:	220d      	movs	r2, #13
 8003d72:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
			comm_sendCMD(data, SETMOTOR, data->auxBuffer, 1);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	21a2      	movs	r1, #162	@ 0xa2
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f7fe fbad 	bl	80024e0 <comm_sendCMD>
		}else{
			comm_sendCMD(data, SYSWARNING, (uint8_t*)"NO MOTOR", 8);
		}
		break;
 8003d86:	e0d8      	b.n	8003f3a <decodeOn_USB+0x3b6>
			comm_sendCMD(data, SYSWARNING, (uint8_t*)"NO MOTOR", 8);
 8003d88:	2308      	movs	r3, #8
 8003d8a:	4a30      	ldr	r2, [pc, #192]	@ (8003e4c <decodeOn_USB+0x2c8>)
 8003d8c:	21ef      	movs	r1, #239	@ 0xef
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f7fe fba6 	bl	80024e0 <comm_sendCMD>
		break;
 8003d94:	e0d1      	b.n	8003f3a <decodeOn_USB+0x3b6>
	case GET_ENCODER:
		if(RXBUF[RXCMD + 1] == ENCODER_L){
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	785b      	ldrb	r3, [r3, #1]
 8003d9a:	3303      	adds	r3, #3
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	4413      	add	r3, r2
 8003da0:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d11a      	bne.n	8003dde <decodeOn_USB+0x25a>
			decom.ui16[0] = EncoderL.pps;
 8003da8:	4b29      	ldr	r3, [pc, #164]	@ (8003e50 <decodeOn_USB+0x2cc>)
 8003daa:	891a      	ldrh	r2, [r3, #8]
 8003dac:	4b22      	ldr	r3, [pc, #136]	@ (8003e38 <decodeOn_USB+0x2b4>)
 8003dae:	801a      	strh	r2, [r3, #0]
			data->auxBuffer[0] = ENCODER_L;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2200      	movs	r2, #0
 8003db4:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
			data->auxBuffer[1] = decom.ui8[0];
 8003db8:	4b1f      	ldr	r3, [pc, #124]	@ (8003e38 <decodeOn_USB+0x2b4>)
 8003dba:	781a      	ldrb	r2, [r3, #0]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f883 2211 	strb.w	r2, [r3, #529]	@ 0x211
			data->auxBuffer[2] = decom.ui8[1];
 8003dc2:	4b1d      	ldr	r3, [pc, #116]	@ (8003e38 <decodeOn_USB+0x2b4>)
 8003dc4:	785a      	ldrb	r2, [r3, #1]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f883 2212 	strb.w	r2, [r3, #530]	@ 0x212
			comm_sendCMD(data, GET_ENCODER, &data->auxBuffer[0], 3);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	21a3      	movs	r1, #163	@ 0xa3
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f7fe fb82 	bl	80024e0 <comm_sendCMD>
			data->auxBuffer[2] = decom.ui8[1];
			comm_sendCMD(data, GET_ENCODER, &data->auxBuffer[0], 3);
		}else{
			comm_sendCMD(data, SYSWARNING, (uint8_t*)"NO ENCODER", 10);
		}
		break;
 8003ddc:	e0ad      	b.n	8003f3a <decodeOn_USB+0x3b6>
		}else if(RXBUF[RXCMD + 1] == ENCODER_R){
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	785b      	ldrb	r3, [r3, #1]
 8003de2:	3303      	adds	r3, #3
 8003de4:	687a      	ldr	r2, [r7, #4]
 8003de6:	4413      	add	r3, r2
 8003de8:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d11a      	bne.n	8003e26 <decodeOn_USB+0x2a2>
			decom.ui16[0] = EncoderR.pps;
 8003df0:	4b18      	ldr	r3, [pc, #96]	@ (8003e54 <decodeOn_USB+0x2d0>)
 8003df2:	891a      	ldrh	r2, [r3, #8]
 8003df4:	4b10      	ldr	r3, [pc, #64]	@ (8003e38 <decodeOn_USB+0x2b4>)
 8003df6:	801a      	strh	r2, [r3, #0]
			data->auxBuffer[0] = ENCODER_R;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
			data->auxBuffer[1] = decom.ui8[0];
 8003e00:	4b0d      	ldr	r3, [pc, #52]	@ (8003e38 <decodeOn_USB+0x2b4>)
 8003e02:	781a      	ldrb	r2, [r3, #0]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f883 2211 	strb.w	r2, [r3, #529]	@ 0x211
			data->auxBuffer[2] = decom.ui8[1];
 8003e0a:	4b0b      	ldr	r3, [pc, #44]	@ (8003e38 <decodeOn_USB+0x2b4>)
 8003e0c:	785a      	ldrb	r2, [r3, #1]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f883 2212 	strb.w	r2, [r3, #530]	@ 0x212
			comm_sendCMD(data, GET_ENCODER, &data->auxBuffer[0], 3);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	21a3      	movs	r1, #163	@ 0xa3
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f7fe fb5e 	bl	80024e0 <comm_sendCMD>
		break;
 8003e24:	e089      	b.n	8003f3a <decodeOn_USB+0x3b6>
			comm_sendCMD(data, SYSWARNING, (uint8_t*)"NO ENCODER", 10);
 8003e26:	230a      	movs	r3, #10
 8003e28:	4a0b      	ldr	r2, [pc, #44]	@ (8003e58 <decodeOn_USB+0x2d4>)
 8003e2a:	21ef      	movs	r1, #239	@ 0xef
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f7fe fb57 	bl	80024e0 <comm_sendCMD>
		break;
 8003e32:	e082      	b.n	8003f3a <decodeOn_USB+0x3b6>
 8003e34:	20001238 	.word	0x20001238
 8003e38:	20000d0c 	.word	0x20000d0c
 8003e3c:	08013254 	.word	0x08013254
 8003e40:	20000d14 	.word	0x20000d14
 8003e44:	2000125c 	.word	0x2000125c
 8003e48:	20000d2c 	.word	0x20000d2c
 8003e4c:	0801325c 	.word	0x0801325c
 8003e50:	20000d44 	.word	0x20000d44
 8003e54:	20000d50 	.word	0x20000d50
 8003e58:	08013268 	.word	0x08013268
	case MPUBLOCK:
		decom.i16[0] = MPU6050.Acc.x;
 8003e5c:	4b39      	ldr	r3, [pc, #228]	@ (8003f44 <decodeOn_USB+0x3c0>)
 8003e5e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003e62:	4b39      	ldr	r3, [pc, #228]	@ (8003f48 <decodeOn_USB+0x3c4>)
 8003e64:	801a      	strh	r2, [r3, #0]
		data->auxBuffer[0] = decom.ui8[0];
 8003e66:	4b38      	ldr	r3, [pc, #224]	@ (8003f48 <decodeOn_USB+0x3c4>)
 8003e68:	781a      	ldrb	r2, [r3, #0]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
		data->auxBuffer[1] = decom.ui8[1];
 8003e70:	4b35      	ldr	r3, [pc, #212]	@ (8003f48 <decodeOn_USB+0x3c4>)
 8003e72:	785a      	ldrb	r2, [r3, #1]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f883 2211 	strb.w	r2, [r3, #529]	@ 0x211
		decom.i16[0] = MPU6050.Acc.y;
 8003e7a:	4b32      	ldr	r3, [pc, #200]	@ (8003f44 <decodeOn_USB+0x3c0>)
 8003e7c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8003e80:	4b31      	ldr	r3, [pc, #196]	@ (8003f48 <decodeOn_USB+0x3c4>)
 8003e82:	801a      	strh	r2, [r3, #0]
		data->auxBuffer[2] = decom.ui8[0];
 8003e84:	4b30      	ldr	r3, [pc, #192]	@ (8003f48 <decodeOn_USB+0x3c4>)
 8003e86:	781a      	ldrb	r2, [r3, #0]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f883 2212 	strb.w	r2, [r3, #530]	@ 0x212
		data->auxBuffer[3] = decom.ui8[1];
 8003e8e:	4b2e      	ldr	r3, [pc, #184]	@ (8003f48 <decodeOn_USB+0x3c4>)
 8003e90:	785a      	ldrb	r2, [r3, #1]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f883 2213 	strb.w	r2, [r3, #531]	@ 0x213
		decom.i16[0] = MPU6050.Acc.z;
 8003e98:	4b2a      	ldr	r3, [pc, #168]	@ (8003f44 <decodeOn_USB+0x3c0>)
 8003e9a:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8003e9e:	4b2a      	ldr	r3, [pc, #168]	@ (8003f48 <decodeOn_USB+0x3c4>)
 8003ea0:	801a      	strh	r2, [r3, #0]
		data->auxBuffer[4] = decom.ui8[0];
 8003ea2:	4b29      	ldr	r3, [pc, #164]	@ (8003f48 <decodeOn_USB+0x3c4>)
 8003ea4:	781a      	ldrb	r2, [r3, #0]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f883 2214 	strb.w	r2, [r3, #532]	@ 0x214
		data->auxBuffer[5] = decom.ui8[1];
 8003eac:	4b26      	ldr	r3, [pc, #152]	@ (8003f48 <decodeOn_USB+0x3c4>)
 8003eae:	785a      	ldrb	r2, [r3, #1]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f883 2215 	strb.w	r2, [r3, #533]	@ 0x215
		decom.i16[0] = MPU6050.Gyro.x;
 8003eb6:	4b23      	ldr	r3, [pc, #140]	@ (8003f44 <decodeOn_USB+0x3c0>)
 8003eb8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8003ebc:	4b22      	ldr	r3, [pc, #136]	@ (8003f48 <decodeOn_USB+0x3c4>)
 8003ebe:	801a      	strh	r2, [r3, #0]
		data->auxBuffer[6] = decom.ui8[0];
 8003ec0:	4b21      	ldr	r3, [pc, #132]	@ (8003f48 <decodeOn_USB+0x3c4>)
 8003ec2:	781a      	ldrb	r2, [r3, #0]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f883 2216 	strb.w	r2, [r3, #534]	@ 0x216
		data->auxBuffer[7] = decom.ui8[1];
 8003eca:	4b1f      	ldr	r3, [pc, #124]	@ (8003f48 <decodeOn_USB+0x3c4>)
 8003ecc:	785a      	ldrb	r2, [r3, #1]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f883 2217 	strb.w	r2, [r3, #535]	@ 0x217
		decom.i16[0] = MPU6050.Gyro.y;
 8003ed4:	4b1b      	ldr	r3, [pc, #108]	@ (8003f44 <decodeOn_USB+0x3c0>)
 8003ed6:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8003eda:	4b1b      	ldr	r3, [pc, #108]	@ (8003f48 <decodeOn_USB+0x3c4>)
 8003edc:	801a      	strh	r2, [r3, #0]
		data->auxBuffer[8] = decom.ui8[0];
 8003ede:	4b1a      	ldr	r3, [pc, #104]	@ (8003f48 <decodeOn_USB+0x3c4>)
 8003ee0:	781a      	ldrb	r2, [r3, #0]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f883 2218 	strb.w	r2, [r3, #536]	@ 0x218
		data->auxBuffer[9] = decom.ui8[1];
 8003ee8:	4b17      	ldr	r3, [pc, #92]	@ (8003f48 <decodeOn_USB+0x3c4>)
 8003eea:	785a      	ldrb	r2, [r3, #1]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	f883 2219 	strb.w	r2, [r3, #537]	@ 0x219
		decom.i16[0] = MPU6050.Gyro.z;
 8003ef2:	4b14      	ldr	r3, [pc, #80]	@ (8003f44 <decodeOn_USB+0x3c0>)
 8003ef4:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8003ef8:	4b13      	ldr	r3, [pc, #76]	@ (8003f48 <decodeOn_USB+0x3c4>)
 8003efa:	801a      	strh	r2, [r3, #0]
		data->auxBuffer[10] = decom.ui8[0];
 8003efc:	4b12      	ldr	r3, [pc, #72]	@ (8003f48 <decodeOn_USB+0x3c4>)
 8003efe:	781a      	ldrb	r2, [r3, #0]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f883 221a 	strb.w	r2, [r3, #538]	@ 0x21a
		data->auxBuffer[11] = decom.ui8[1];
 8003f06:	4b10      	ldr	r3, [pc, #64]	@ (8003f48 <decodeOn_USB+0x3c4>)
 8003f08:	785a      	ldrb	r2, [r3, #1]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f883 221b 	strb.w	r2, [r3, #539]	@ 0x21b
		comm_sendCMD(data, MPUBLOCK, data->auxBuffer, 12);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 8003f16:	230c      	movs	r3, #12
 8003f18:	21a4      	movs	r1, #164	@ 0xa4
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f7fe fae0 	bl	80024e0 <comm_sendCMD>
		break;
 8003f20:	e00b      	b.n	8003f3a <decodeOn_USB+0x3b6>
	default:
		comm_sendCMD(data, SYSWARNING, (uint8_t*)"NO CMD", 6);
 8003f22:	2306      	movs	r3, #6
 8003f24:	4a09      	ldr	r2, [pc, #36]	@ (8003f4c <decodeOn_USB+0x3c8>)
 8003f26:	21ef      	movs	r1, #239	@ 0xef
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f7fe fad9 	bl	80024e0 <comm_sendCMD>
		break;
 8003f2e:	e004      	b.n	8003f3a <decodeOn_USB+0x3b6>
		break;
 8003f30:	bf00      	nop
 8003f32:	e002      	b.n	8003f3a <decodeOn_USB+0x3b6>
		break;
 8003f34:	bf00      	nop
 8003f36:	e000      	b.n	8003f3a <decodeOn_USB+0x3b6>
		break;
 8003f38:	bf00      	nop
	}
}
 8003f3a:	bf00      	nop
 8003f3c:	3710      	adds	r7, #16
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	bf00      	nop
 8003f44:	20000d5c 	.word	0x20000d5c
 8003f48:	20000d0c 	.word	0x20000d0c
 8003f4c:	08013274 	.word	0x08013274

08003f50 <onKeyChangeState>:

void onKeyChangeState(e_Estados value){
 8003f50:	b480      	push	{r7}
 8003f52:	b083      	sub	sp, #12
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	4603      	mov	r3, r0
 8003f58:	71fb      	strb	r3, [r7, #7]

}
 8003f5a:	bf00      	nop
 8003f5c:	370c      	adds	r7, #12
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr
	...

08003f68 <onESP01ChangeState>:

void onESP01ChangeState(_eESP01STATUS esp01State) {
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b082      	sub	sp, #8
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	4603      	mov	r3, r0
 8003f70:	71fb      	strb	r3, [r7, #7]
   switch (esp01State) {
 8003f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f76:	3301      	adds	r3, #1
 8003f78:	2b0c      	cmp	r3, #12
 8003f7a:	d85e      	bhi.n	800403a <onESP01ChangeState+0xd2>
 8003f7c:	a201      	add	r2, pc, #4	@ (adr r2, 8003f84 <onESP01ChangeState+0x1c>)
 8003f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f82:	bf00      	nop
 8003f84:	08003fb9 	.word	0x08003fb9
 8003f88:	08003fc3 	.word	0x08003fc3
 8003f8c:	08003fcd 	.word	0x08003fcd
 8003f90:	08003fd7 	.word	0x08003fd7
 8003f94:	08003fe1 	.word	0x08003fe1
 8003f98:	08003feb 	.word	0x08003feb
 8003f9c:	08003ff5 	.word	0x08003ff5
 8003fa0:	08003fff 	.word	0x08003fff
 8003fa4:	08004009 	.word	0x08004009
 8003fa8:	08004013 	.word	0x08004013
 8003fac:	0800401d 	.word	0x0800401d
 8003fb0:	08004027 	.word	0x08004027
 8003fb4:	08004031 	.word	0x08004031
        case ESP01_NOT_INIT:
            sprintf((char*)USB.data.auxBuffer, "ESP01: No inicializado");
 8003fb8:	4929      	ldr	r1, [pc, #164]	@ (8004060 <onESP01ChangeState+0xf8>)
 8003fba:	482a      	ldr	r0, [pc, #168]	@ (8004064 <onESP01ChangeState+0xfc>)
 8003fbc:	f00e fbcc 	bl	8012758 <siprintf>
            break;
 8003fc0:	e040      	b.n	8004044 <onESP01ChangeState+0xdc>
        case ESP01_WIFI_DISCONNECTED:
            sprintf((char*)USB.data.auxBuffer, "ESP01: WiFi desconectado");
 8003fc2:	4929      	ldr	r1, [pc, #164]	@ (8004068 <onESP01ChangeState+0x100>)
 8003fc4:	4827      	ldr	r0, [pc, #156]	@ (8004064 <onESP01ChangeState+0xfc>)
 8003fc6:	f00e fbc7 	bl	8012758 <siprintf>
            break;
 8003fca:	e03b      	b.n	8004044 <onESP01ChangeState+0xdc>
        case ESP01_WIFI_NOT_SETED:
            sprintf((char*)USB.data.auxBuffer, "ESP01: WiFi no configurado");
 8003fcc:	4927      	ldr	r1, [pc, #156]	@ (800406c <onESP01ChangeState+0x104>)
 8003fce:	4825      	ldr	r0, [pc, #148]	@ (8004064 <onESP01ChangeState+0xfc>)
 8003fd0:	f00e fbc2 	bl	8012758 <siprintf>
            break;
 8003fd4:	e036      	b.n	8004044 <onESP01ChangeState+0xdc>
        case ESP01_WIFI_CONNECTING_WIFI:
            sprintf((char*)USB.data.auxBuffer, "ESP01: Conectando a WiFi...");
 8003fd6:	4926      	ldr	r1, [pc, #152]	@ (8004070 <onESP01ChangeState+0x108>)
 8003fd8:	4822      	ldr	r0, [pc, #136]	@ (8004064 <onESP01ChangeState+0xfc>)
 8003fda:	f00e fbbd 	bl	8012758 <siprintf>
            break;
 8003fde:	e031      	b.n	8004044 <onESP01ChangeState+0xdc>
        case ESP01_WIFI_CONNECTED:
            sprintf((char*)USB.data.auxBuffer, "ESP01: WiFi conectado");
 8003fe0:	4924      	ldr	r1, [pc, #144]	@ (8004074 <onESP01ChangeState+0x10c>)
 8003fe2:	4820      	ldr	r0, [pc, #128]	@ (8004064 <onESP01ChangeState+0xfc>)
 8003fe4:	f00e fbb8 	bl	8012758 <siprintf>
            break;
 8003fe8:	e02c      	b.n	8004044 <onESP01ChangeState+0xdc>
        case ESP01_WIFI_NEW_IP:
            sprintf((char*)USB.data.auxBuffer, "ESP01: Nueva IP asignada");
 8003fea:	4923      	ldr	r1, [pc, #140]	@ (8004078 <onESP01ChangeState+0x110>)
 8003fec:	481d      	ldr	r0, [pc, #116]	@ (8004064 <onESP01ChangeState+0xfc>)
 8003fee:	f00e fbb3 	bl	8012758 <siprintf>
            break;
 8003ff2:	e027      	b.n	8004044 <onESP01ChangeState+0xdc>
        case ESP01_UDPTCP_DISCONNECTED:
            sprintf((char*)USB.data.auxBuffer, "ESP01: UDP/TCP desconectado");
 8003ff4:	4921      	ldr	r1, [pc, #132]	@ (800407c <onESP01ChangeState+0x114>)
 8003ff6:	481b      	ldr	r0, [pc, #108]	@ (8004064 <onESP01ChangeState+0xfc>)
 8003ff8:	f00e fbae 	bl	8012758 <siprintf>
            break;
 8003ffc:	e022      	b.n	8004044 <onESP01ChangeState+0xdc>
        case ESP01_UDPTCP_CONNECTING:
            sprintf((char*)USB.data.auxBuffer, "ESP01: Conectando UDP/TCP...");
 8003ffe:	4920      	ldr	r1, [pc, #128]	@ (8004080 <onESP01ChangeState+0x118>)
 8004000:	4818      	ldr	r0, [pc, #96]	@ (8004064 <onESP01ChangeState+0xfc>)
 8004002:	f00e fba9 	bl	8012758 <siprintf>
            break;
 8004006:	e01d      	b.n	8004044 <onESP01ChangeState+0xdc>
        case ESP01_UDPTCP_CONNECTED:
            sprintf((char*)USB.data.auxBuffer, "ESP01: UDP/TCP conectado");
 8004008:	491e      	ldr	r1, [pc, #120]	@ (8004084 <onESP01ChangeState+0x11c>)
 800400a:	4816      	ldr	r0, [pc, #88]	@ (8004064 <onESP01ChangeState+0xfc>)
 800400c:	f00e fba4 	bl	8012758 <siprintf>
            break;
 8004010:	e018      	b.n	8004044 <onESP01ChangeState+0xdc>
        case ESP01_SEND_BUSY:
            sprintf((char*)USB.data.auxBuffer, "ESP01: Enviando datos...");
 8004012:	491d      	ldr	r1, [pc, #116]	@ (8004088 <onESP01ChangeState+0x120>)
 8004014:	4813      	ldr	r0, [pc, #76]	@ (8004064 <onESP01ChangeState+0xfc>)
 8004016:	f00e fb9f 	bl	8012758 <siprintf>
            break;
 800401a:	e013      	b.n	8004044 <onESP01ChangeState+0xdc>
        case ESP01_SEND_READY:
            sprintf((char*)USB.data.auxBuffer, "ESP01: Listo para enviar");
 800401c:	491b      	ldr	r1, [pc, #108]	@ (800408c <onESP01ChangeState+0x124>)
 800401e:	4811      	ldr	r0, [pc, #68]	@ (8004064 <onESP01ChangeState+0xfc>)
 8004020:	f00e fb9a 	bl	8012758 <siprintf>
            break;
 8004024:	e00e      	b.n	8004044 <onESP01ChangeState+0xdc>
        case ESP01_SEND_OK:
            sprintf((char*)USB.data.auxBuffer, "ESP01: Envío OK");
 8004026:	491a      	ldr	r1, [pc, #104]	@ (8004090 <onESP01ChangeState+0x128>)
 8004028:	480e      	ldr	r0, [pc, #56]	@ (8004064 <onESP01ChangeState+0xfc>)
 800402a:	f00e fb95 	bl	8012758 <siprintf>
            break;
 800402e:	e009      	b.n	8004044 <onESP01ChangeState+0xdc>
        case ESP01_SEND_ERROR:
            sprintf((char*)USB.data.auxBuffer, "ESP01: Error al enviar");
 8004030:	4918      	ldr	r1, [pc, #96]	@ (8004094 <onESP01ChangeState+0x12c>)
 8004032:	480c      	ldr	r0, [pc, #48]	@ (8004064 <onESP01ChangeState+0xfc>)
 8004034:	f00e fb90 	bl	8012758 <siprintf>
            break;
 8004038:	e004      	b.n	8004044 <onESP01ChangeState+0xdc>
        default:
            sprintf((char*)USB.data.auxBuffer, "ESP01: Estado desconocido");
 800403a:	4917      	ldr	r1, [pc, #92]	@ (8004098 <onESP01ChangeState+0x130>)
 800403c:	4809      	ldr	r0, [pc, #36]	@ (8004064 <onESP01ChangeState+0xfc>)
 800403e:	f00e fb8b 	bl	8012758 <siprintf>
            break;
 8004042:	bf00      	nop
    }

    // Cast explícito también aplicado aquí
    comm_sendCMD(&USB.data, USERTEXT, USB.data.auxBuffer, strlen((char*)USB.data.auxBuffer));
 8004044:	4807      	ldr	r0, [pc, #28]	@ (8004064 <onESP01ChangeState+0xfc>)
 8004046:	f7fc f8cb 	bl	80001e0 <strlen>
 800404a:	4603      	mov	r3, r0
 800404c:	b2db      	uxtb	r3, r3
 800404e:	4a05      	ldr	r2, [pc, #20]	@ (8004064 <onESP01ChangeState+0xfc>)
 8004050:	21b1      	movs	r1, #177	@ 0xb1
 8004052:	4812      	ldr	r0, [pc, #72]	@ (800409c <onESP01ChangeState+0x134>)
 8004054:	f7fe fa44 	bl	80024e0 <comm_sendCMD>
}
 8004058:	bf00      	nop
 800405a:	3708      	adds	r7, #8
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}
 8004060:	0801327c 	.word	0x0801327c
 8004064:	2000146c 	.word	0x2000146c
 8004068:	08013294 	.word	0x08013294
 800406c:	080132b0 	.word	0x080132b0
 8004070:	080132cc 	.word	0x080132cc
 8004074:	080132e8 	.word	0x080132e8
 8004078:	08013300 	.word	0x08013300
 800407c:	0801331c 	.word	0x0801331c
 8004080:	08013338 	.word	0x08013338
 8004084:	08013358 	.word	0x08013358
 8004088:	08013374 	.word	0x08013374
 800408c:	08013390 	.word	0x08013390
 8004090:	080133ac 	.word	0x080133ac
 8004094:	080133c0 	.word	0x080133c0
 8004098:	080133d8 	.word	0x080133d8
 800409c:	2000125c 	.word	0x2000125c

080040a0 <task_10ms>:

void onESP01Debug(const char *dbgStr) {
    comm_sendCMD(&USB.data, USERTEXT, (uint8_t *)dbgStr, strlen(dbgStr));
}

void task_10ms(){
 80040a0:	b580      	push	{r7, lr}
 80040a2:	af00      	add	r7, sp, #0
	IS10MS = FALSE;
 80040a4:	4a3c      	ldr	r2, [pc, #240]	@ (8004198 <task_10ms+0xf8>)
 80040a6:	7813      	ldrb	r3, [r2, #0]
 80040a8:	f023 0301 	bic.w	r3, r3, #1
 80040ac:	7013      	strb	r3, [r2, #0]

	is100ms1--;
 80040ae:	4b3b      	ldr	r3, [pc, #236]	@ (800419c <task_10ms+0xfc>)
 80040b0:	781b      	ldrb	r3, [r3, #0]
 80040b2:	3b01      	subs	r3, #1
 80040b4:	b2da      	uxtb	r2, r3
 80040b6:	4b39      	ldr	r3, [pc, #228]	@ (800419c <task_10ms+0xfc>)
 80040b8:	701a      	strb	r2, [r3, #0]
	if(!is100ms1){
 80040ba:	4b38      	ldr	r3, [pc, #224]	@ (800419c <task_10ms+0xfc>)
 80040bc:	781b      	ldrb	r3, [r3, #0]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d143      	bne.n	800414a <task_10ms+0xaa>
		is100ms1 = 10;
 80040c2:	4b36      	ldr	r3, [pc, #216]	@ (800419c <task_10ms+0xfc>)
 80040c4:	220a      	movs	r2, #10
 80040c6:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 80040c8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80040cc:	4834      	ldr	r0, [pc, #208]	@ (80041a0 <task_10ms+0x100>)
 80040ce:	f003 f848 	bl	8007162 <HAL_GPIO_TogglePin>
		is1s--;
 80040d2:	4b34      	ldr	r3, [pc, #208]	@ (80041a4 <task_10ms+0x104>)
 80040d4:	781b      	ldrb	r3, [r3, #0]
 80040d6:	3b01      	subs	r3, #1
 80040d8:	b2da      	uxtb	r2, r3
 80040da:	4b32      	ldr	r3, [pc, #200]	@ (80041a4 <task_10ms+0x104>)
 80040dc:	701a      	strb	r2, [r3, #0]
		if(!is1s){
 80040de:	4b31      	ldr	r3, [pc, #196]	@ (80041a4 <task_10ms+0x104>)
 80040e0:	781b      	ldrb	r3, [r3, #0]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d131      	bne.n	800414a <task_10ms+0xaa>
			is1s = 10;
 80040e6:	4b2f      	ldr	r3, [pc, #188]	@ (80041a4 <task_10ms+0x104>)
 80040e8:	220a      	movs	r2, #10
 80040ea:	701a      	strb	r2, [r3, #0]
			Encoder_1s_Elapsed(&EncoderL);
 80040ec:	482e      	ldr	r0, [pc, #184]	@ (80041a8 <task_10ms+0x108>)
 80040ee:	f7fd ff6b 	bl	8001fc8 <Encoder_1s_Elapsed>
			Encoder_1s_Elapsed(&EncoderR);
 80040f2:	482e      	ldr	r0, [pc, #184]	@ (80041ac <task_10ms+0x10c>)
 80040f4:	f7fd ff68 	bl	8001fc8 <Encoder_1s_Elapsed>

			/* ESTABILIZACIÓN DE PWM */
			Motor_Set_MaxValue(&MotorR, (3026/Analog.value[9]));//<! Usamos esto para independizar la salida PWM de la carga de las baterias
 80040f8:	4b2d      	ldr	r3, [pc, #180]	@ (80041b0 <task_10ms+0x110>)
 80040fa:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80040fc:	461a      	mov	r2, r3
 80040fe:	f640 33d2 	movw	r3, #3026	@ 0xbd2
 8004102:	fb93 f3f2 	sdiv	r3, r3, r2
 8004106:	4619      	mov	r1, r3
 8004108:	482a      	ldr	r0, [pc, #168]	@ (80041b4 <task_10ms+0x114>)
 800410a:	f7fe f849 	bl	80021a0 <Motor_Set_MaxValue>
			Motor_Set_MaxValue(&MotorL, (3026/Analog.value[9]));
 800410e:	4b28      	ldr	r3, [pc, #160]	@ (80041b0 <task_10ms+0x110>)
 8004110:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004112:	461a      	mov	r2, r3
 8004114:	f640 33d2 	movw	r3, #3026	@ 0xbd2
 8004118:	fb93 f3f2 	sdiv	r3, r3, r2
 800411c:	4619      	mov	r1, r3
 800411e:	4826      	ldr	r0, [pc, #152]	@ (80041b8 <task_10ms+0x118>)
 8004120:	f7fe f83e 	bl	80021a0 <Motor_Set_MaxValue>
			/* END ESTABILIZACIÓN DE PWM */

			is20s--;
 8004124:	4b25      	ldr	r3, [pc, #148]	@ (80041bc <task_10ms+0x11c>)
 8004126:	781b      	ldrb	r3, [r3, #0]
 8004128:	3b01      	subs	r3, #1
 800412a:	b2da      	uxtb	r2, r3
 800412c:	4b23      	ldr	r3, [pc, #140]	@ (80041bc <task_10ms+0x11c>)
 800412e:	701a      	strb	r2, [r3, #0]
			if(!is20s){
 8004130:	4b22      	ldr	r3, [pc, #136]	@ (80041bc <task_10ms+0x11c>)
 8004132:	781b      	ldrb	r3, [r3, #0]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d108      	bne.n	800414a <task_10ms+0xaa>
				is20s = 10;
 8004138:	4b20      	ldr	r3, [pc, #128]	@ (80041bc <task_10ms+0x11c>)
 800413a:	220a      	movs	r2, #10
 800413c:	701a      	strb	r2, [r3, #0]
				comm_sendCMD(&ESP.data, GETALIVE, NULL, 0);
 800413e:	2300      	movs	r3, #0
 8004140:	2200      	movs	r2, #0
 8004142:	21f0      	movs	r1, #240	@ 0xf0
 8004144:	481e      	ldr	r0, [pc, #120]	@ (80041c0 <task_10ms+0x120>)
 8004146:	f7fe f9cb 	bl	80024e0 <comm_sendCMD>
			}
		}
	}

	Display.refreshCounter_10ms--;
 800414a:	4b1e      	ldr	r3, [pc, #120]	@ (80041c4 <task_10ms+0x124>)
 800414c:	f893 3413 	ldrb.w	r3, [r3, #1043]	@ 0x413
 8004150:	3b01      	subs	r3, #1
 8004152:	b2da      	uxtb	r2, r3
 8004154:	4b1b      	ldr	r3, [pc, #108]	@ (80041c4 <task_10ms+0x124>)
 8004156:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
	if(!Display.refreshCounter_10ms){ 							//Tasa de refresco variable
 800415a:	4b1a      	ldr	r3, [pc, #104]	@ (80041c4 <task_10ms+0x124>)
 800415c:	f893 3413 	ldrb.w	r3, [r3, #1043]	@ 0x413
 8004160:	2b00      	cmp	r3, #0
 8004162:	d107      	bne.n	8004174 <task_10ms+0xd4>
		Display.refreshCounter_10ms = Display.refreshRate_10ms;
 8004164:	4b17      	ldr	r3, [pc, #92]	@ (80041c4 <task_10ms+0x124>)
 8004166:	f893 2412 	ldrb.w	r2, [r3, #1042]	@ 0x412
 800416a:	4b16      	ldr	r3, [pc, #88]	@ (80041c4 <task_10ms+0x124>)
 800416c:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
		OLED_Print_Data_Task();
 8004170:	f7ff fb1e 	bl	80037b0 <OLED_Print_Data_Task>
	}

	ESP01_Timeout10ms();
 8004174:	f7fe fc26 	bl	80029c4 <ESP01_Timeout10ms>

	Debouncer_Task();
 8004178:	f7fc ff46 	bl	8001008 <Debouncer_Task>

	Motor_Break_Timeout(&MotorL);
 800417c:	480e      	ldr	r0, [pc, #56]	@ (80041b8 <task_10ms+0x118>)
 800417e:	f7fd fff3 	bl	8002168 <Motor_Break_Timeout>
	Motor_Break_Timeout(&MotorR);
 8004182:	480c      	ldr	r0, [pc, #48]	@ (80041b4 <task_10ms+0x114>)
 8004184:	f7fd fff0 	bl	8002168 <Motor_Break_Timeout>
	Encoder_Task(&EncoderL);
 8004188:	4807      	ldr	r0, [pc, #28]	@ (80041a8 <task_10ms+0x108>)
 800418a:	f7fd fedd 	bl	8001f48 <Encoder_Task>
	Encoder_Task(&EncoderR);
 800418e:	4807      	ldr	r0, [pc, #28]	@ (80041ac <task_10ms+0x10c>)
 8004190:	f7fd feda 	bl	8001f48 <Encoder_Task>
}
 8004194:	bf00      	nop
 8004196:	bd80      	pop	{r7, pc}
 8004198:	20000d08 	.word	0x20000d08
 800419c:	2000000c 	.word	0x2000000c
 80041a0:	40020800 	.word	0x40020800
 80041a4:	2000000d 	.word	0x2000000d
 80041a8:	20000d44 	.word	0x20000d44
 80041ac:	20000d50 	.word	0x20000d50
 80041b0:	20001238 	.word	0x20001238
 80041b4:	20000d2c 	.word	0x20000d2c
 80041b8:	20000d14 	.word	0x20000d14
 80041bc:	2000000f 	.word	0x2000000f
 80041c0:	200014a8 	.word	0x200014a8
 80041c4:	20000e20 	.word	0x20000e20

080041c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80041cc:	f001 fb34 	bl	8005838 <HAL_Init>

  /* USER CODE BEGIN Init */
  MPU6050.isInit = FALSE;
 80041d0:	4b3b      	ldr	r3, [pc, #236]	@ (80042c0 <main+0xf8>)
 80041d2:	2200      	movs	r2, #0
 80041d4:	f883 20c2 	strb.w	r2, [r3, #194]	@ 0xc2
  Display.isInit = FALSE;
 80041d8:	4b3a      	ldr	r3, [pc, #232]	@ (80042c4 <main+0xfc>)
 80041da:	2200      	movs	r2, #0
 80041dc:	701a      	strb	r2, [r3, #0]
  Display.state = INIT;
 80041de:	4b39      	ldr	r3, [pc, #228]	@ (80042c4 <main+0xfc>)
 80041e0:	2200      	movs	r2, #0
 80041e2:	f883 2401 	strb.w	r2, [r3, #1025]	@ 0x401
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80041e6:	f000 f895 	bl	8004314 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80041ea:	f000 fb27 	bl	800483c <MX_GPIO_Init>
  MX_DMA_Init();
 80041ee:	f000 fae7 	bl	80047c0 <MX_DMA_Init>
  MX_ADC1_Init();
 80041f2:	f000 f8f9 	bl	80043e8 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 80041f6:	f00d fcd7 	bl	8011ba8 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 80041fa:	f000 f9e5 	bl	80045c8 <MX_TIM1_Init>
  MX_I2C1_Init();
 80041fe:	f000 f9b5 	bl	800456c <MX_I2C1_Init>
  MX_TIM3_Init();
 8004202:	f000 fa31 	bl	8004668 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8004206:	f000 fab1 	bl	800476c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  /* INICIALIZACIÓN DE PROTOCOLO MEDIANTE USB */
  Comm_Init(&USB.data, &decodeOn_USB, &writeOn_USB);
 800420a:	4a2f      	ldr	r2, [pc, #188]	@ (80042c8 <main+0x100>)
 800420c:	492f      	ldr	r1, [pc, #188]	@ (80042cc <main+0x104>)
 800420e:	4830      	ldr	r0, [pc, #192]	@ (80042d0 <main+0x108>)
 8004210:	f7fd ffda 	bl	80021c8 <Comm_Init>
  CDC_Attach_Rx(&dataRxOn_USB);
 8004214:	482f      	ldr	r0, [pc, #188]	@ (80042d4 <main+0x10c>)
 8004216:	f00d fe19 	bl	8011e4c <CDC_Attach_Rx>
  /* FIN INICIALIZACIÓN DE PROTOCOLO MEDIANTE USB */

  /* INICIALIZACIÓN DE USER KEY Y DEBOUNCE */
  Debounce_Init();
 800421a:	f7fc fe8d 	bl	8000f38 <Debounce_Init>
  key = Debounce_Add(&KEY_Read_Value, &onKeyChangeState);
 800421e:	492e      	ldr	r1, [pc, #184]	@ (80042d8 <main+0x110>)
 8004220:	482e      	ldr	r0, [pc, #184]	@ (80042dc <main+0x114>)
 8004222:	f7fc febd 	bl	8000fa0 <Debounce_Add>
 8004226:	4603      	mov	r3, r0
 8004228:	461a      	mov	r2, r3
 800422a:	4b2d      	ldr	r3, [pc, #180]	@ (80042e0 <main+0x118>)
 800422c:	701a      	strb	r2, [r3, #0]
  /* FIN INICIALIZACIÓN DE USER KEY Y DEBOUNCE */

  /* INICIALIZACIÓN DE MPU6050 */
  Init_MPU6050();
 800422e:	f000 fc25 	bl	8004a7c <Init_MPU6050>
  /* FIN INICIALIZACIÓN DE MPU6050 */

  /* INICIALIZACIÓN DISPLAY*/
  Init_Display();
 8004232:	f000 fc5b 	bl	8004aec <Init_Display>
  /* FIN INICIALIZACIÓN DISPLAY */

  /* INICIALIZACIÓN DE MOTORES Y ENCODERS */
  Motor_Init(&MotorL, &Motor_Left_SetPWM , &Motor_Left_SetPins , htim3.Instance->ARR);
 8004236:	4b2b      	ldr	r3, [pc, #172]	@ (80042e4 <main+0x11c>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800423c:	b29b      	uxth	r3, r3
 800423e:	4a2a      	ldr	r2, [pc, #168]	@ (80042e8 <main+0x120>)
 8004240:	492a      	ldr	r1, [pc, #168]	@ (80042ec <main+0x124>)
 8004242:	482b      	ldr	r0, [pc, #172]	@ (80042f0 <main+0x128>)
 8004244:	f7fd fed2 	bl	8001fec <Motor_Init>
  Motor_Init(&MotorR, &Motor_Right_SetPWM, &Motor_Right_SetPins, htim3.Instance->ARR);
 8004248:	4b26      	ldr	r3, [pc, #152]	@ (80042e4 <main+0x11c>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800424e:	b29b      	uxth	r3, r3
 8004250:	4a28      	ldr	r2, [pc, #160]	@ (80042f4 <main+0x12c>)
 8004252:	4929      	ldr	r1, [pc, #164]	@ (80042f8 <main+0x130>)
 8004254:	4829      	ldr	r0, [pc, #164]	@ (80042fc <main+0x134>)
 8004256:	f7fd fec9 	bl	8001fec <Motor_Init>

  Encoder_Init(&EncoderL, ENCODER_FASTPPS_COUNTER_10MS);
 800425a:	210a      	movs	r1, #10
 800425c:	4828      	ldr	r0, [pc, #160]	@ (8004300 <main+0x138>)
 800425e:	f7fd fe54 	bl	8001f0a <Encoder_Init>
  Encoder_Init(&EncoderR, ENCODER_FASTPPS_COUNTER_10MS);
 8004262:	210a      	movs	r1, #10
 8004264:	4827      	ldr	r0, [pc, #156]	@ (8004304 <main+0x13c>)
 8004266:	f7fd fe50 	bl	8001f0a <Encoder_Init>
  /* FIN INICIALIZACIÓN DE MOTORES Y ENCODERS */

  /* ESP01 INITIALIZATION */
  Init_WiFi();
 800426a:	f000 fc91 	bl	8004b90 <Init_WiFi>
  /* END ESP01 INITIALIZATION */
  Car.state = IDLE;
 800426e:	4b26      	ldr	r3, [pc, #152]	@ (8004308 <main+0x140>)
 8004270:	2200      	movs	r2, #0
 8004272:	701a      	strb	r2, [r3, #0]

  Init_Timing();
 8004274:	f000 fbbe 	bl	80049f4 <Init_Timing>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  /* USER TASK */
	Comm_Task(&USB.data);
 8004278:	4815      	ldr	r0, [pc, #84]	@ (80042d0 <main+0x108>)
 800427a:	f7fd ffd9 	bl	8002230 <Comm_Task>
	Comm_Task(&ESP.data);
 800427e:	4823      	ldr	r0, [pc, #140]	@ (800430c <main+0x144>)
 8004280:	f7fd ffd6 	bl	8002230 <Comm_Task>
	Display_UpdateScreen_Task();
 8004284:	f7fd fb18 	bl	80018b8 <Display_UpdateScreen_Task>
	MPU6050_MAF(&MPU6050);
 8004288:	480d      	ldr	r0, [pc, #52]	@ (80042c0 <main+0xf8>)
 800428a:	f7fd f8c5 	bl	8001418 <MPU6050_MAF>
	ESP01_Task();
 800428e:	f7fe fbcb 	bl	8002a28 <ESP01_Task>
	/* END USER TASK */

	if(IS10MS){
 8004292:	4b1f      	ldr	r3, [pc, #124]	@ (8004310 <main+0x148>)
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	f003 0301 	and.w	r3, r3, #1
 800429a:	b2db      	uxtb	r3, r3
 800429c:	2b00      	cmp	r3, #0
 800429e:	d001      	beq.n	80042a4 <main+0xdc>
		task_10ms();
 80042a0:	f7ff fefe 	bl	80040a0 <task_10ms>
	}

	switch(Car.state){
 80042a4:	4b18      	ldr	r3, [pc, #96]	@ (8004308 <main+0x140>)
 80042a6:	781b      	ldrb	r3, [r3, #0]
 80042a8:	2b02      	cmp	r3, #2
 80042aa:	d005      	beq.n	80042b8 <main+0xf0>
 80042ac:	2b02      	cmp	r3, #2
 80042ae:	dce3      	bgt.n	8004278 <main+0xb0>
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d003      	beq.n	80042bc <main+0xf4>
 80042b4:	2b01      	cmp	r3, #1
	case IDLE:

		break;
	case FOLLOW_LINE:

		break;
 80042b6:	e002      	b.n	80042be <main+0xf6>
	case GO_FROM_TO:

		break;
 80042b8:	bf00      	nop
 80042ba:	e7dd      	b.n	8004278 <main+0xb0>
		break;
 80042bc:	bf00      	nop
	Comm_Task(&USB.data);
 80042be:	e7db      	b.n	8004278 <main+0xb0>
 80042c0:	20000d5c 	.word	0x20000d5c
 80042c4:	20000e20 	.word	0x20000e20
 80042c8:	08004fb5 	.word	0x08004fb5
 80042cc:	08003b85 	.word	0x08003b85
 80042d0:	2000125c 	.word	0x2000125c
 80042d4:	08005029 	.word	0x08005029
 80042d8:	08003f51 	.word	0x08003f51
 80042dc:	08004f9d 	.word	0x08004f9d
 80042e0:	20000d10 	.word	0x20000d10
 80042e4:	20000c78 	.word	0x20000c78
 80042e8:	08005081 	.word	0x08005081
 80042ec:	080050f5 	.word	0x080050f5
 80042f0:	20000d14 	.word	0x20000d14
 80042f4:	080050b9 	.word	0x080050b9
 80042f8:	08005119 	.word	0x08005119
 80042fc:	20000d2c 	.word	0x20000d2c
 8004300:	20000d44 	.word	0x20000d44
 8004304:	20000d50 	.word	0x20000d50
 8004308:	200016dc 	.word	0x200016dc
 800430c:	200014a8 	.word	0x200014a8
 8004310:	20000d08 	.word	0x20000d08

08004314 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b094      	sub	sp, #80	@ 0x50
 8004318:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800431a:	f107 0320 	add.w	r3, r7, #32
 800431e:	2230      	movs	r2, #48	@ 0x30
 8004320:	2100      	movs	r1, #0
 8004322:	4618      	mov	r0, r3
 8004324:	f00e fa3a 	bl	801279c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004328:	f107 030c 	add.w	r3, r7, #12
 800432c:	2200      	movs	r2, #0
 800432e:	601a      	str	r2, [r3, #0]
 8004330:	605a      	str	r2, [r3, #4]
 8004332:	609a      	str	r2, [r3, #8]
 8004334:	60da      	str	r2, [r3, #12]
 8004336:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004338:	2300      	movs	r3, #0
 800433a:	60bb      	str	r3, [r7, #8]
 800433c:	4b28      	ldr	r3, [pc, #160]	@ (80043e0 <SystemClock_Config+0xcc>)
 800433e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004340:	4a27      	ldr	r2, [pc, #156]	@ (80043e0 <SystemClock_Config+0xcc>)
 8004342:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004346:	6413      	str	r3, [r2, #64]	@ 0x40
 8004348:	4b25      	ldr	r3, [pc, #148]	@ (80043e0 <SystemClock_Config+0xcc>)
 800434a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800434c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004350:	60bb      	str	r3, [r7, #8]
 8004352:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004354:	2300      	movs	r3, #0
 8004356:	607b      	str	r3, [r7, #4]
 8004358:	4b22      	ldr	r3, [pc, #136]	@ (80043e4 <SystemClock_Config+0xd0>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a21      	ldr	r2, [pc, #132]	@ (80043e4 <SystemClock_Config+0xd0>)
 800435e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004362:	6013      	str	r3, [r2, #0]
 8004364:	4b1f      	ldr	r3, [pc, #124]	@ (80043e4 <SystemClock_Config+0xd0>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800436c:	607b      	str	r3, [r7, #4]
 800436e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004370:	2301      	movs	r3, #1
 8004372:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004374:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004378:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800437a:	2302      	movs	r3, #2
 800437c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800437e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004382:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8004384:	2319      	movs	r3, #25
 8004386:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8004388:	23c0      	movs	r3, #192	@ 0xc0
 800438a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800438c:	2302      	movs	r3, #2
 800438e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004390:	2304      	movs	r3, #4
 8004392:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004394:	f107 0320 	add.w	r3, r7, #32
 8004398:	4618      	mov	r0, r3
 800439a:	f007 fd41 	bl	800be20 <HAL_RCC_OscConfig>
 800439e:	4603      	mov	r3, r0
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d001      	beq.n	80043a8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80043a4:	f000 feca 	bl	800513c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80043a8:	230f      	movs	r3, #15
 80043aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80043ac:	2302      	movs	r3, #2
 80043ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80043b0:	2300      	movs	r3, #0
 80043b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80043b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80043b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80043ba:	2300      	movs	r3, #0
 80043bc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80043be:	f107 030c 	add.w	r3, r7, #12
 80043c2:	2103      	movs	r1, #3
 80043c4:	4618      	mov	r0, r3
 80043c6:	f007 ffa3 	bl	800c310 <HAL_RCC_ClockConfig>
 80043ca:	4603      	mov	r3, r0
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d001      	beq.n	80043d4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80043d0:	f000 feb4 	bl	800513c <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80043d4:	f008 f882 	bl	800c4dc <HAL_RCC_EnableCSS>
}
 80043d8:	bf00      	nop
 80043da:	3750      	adds	r7, #80	@ 0x50
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}
 80043e0:	40023800 	.word	0x40023800
 80043e4:	40007000 	.word	0x40007000

080043e8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b084      	sub	sp, #16
 80043ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80043ee:	463b      	mov	r3, r7
 80043f0:	2200      	movs	r2, #0
 80043f2:	601a      	str	r2, [r3, #0]
 80043f4:	605a      	str	r2, [r3, #4]
 80043f6:	609a      	str	r2, [r3, #8]
 80043f8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80043fa:	4b59      	ldr	r3, [pc, #356]	@ (8004560 <MX_ADC1_Init+0x178>)
 80043fc:	4a59      	ldr	r2, [pc, #356]	@ (8004564 <MX_ADC1_Init+0x17c>)
 80043fe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004400:	4b57      	ldr	r3, [pc, #348]	@ (8004560 <MX_ADC1_Init+0x178>)
 8004402:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004406:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004408:	4b55      	ldr	r3, [pc, #340]	@ (8004560 <MX_ADC1_Init+0x178>)
 800440a:	2200      	movs	r2, #0
 800440c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800440e:	4b54      	ldr	r3, [pc, #336]	@ (8004560 <MX_ADC1_Init+0x178>)
 8004410:	2201      	movs	r2, #1
 8004412:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8004414:	4b52      	ldr	r3, [pc, #328]	@ (8004560 <MX_ADC1_Init+0x178>)
 8004416:	2200      	movs	r2, #0
 8004418:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800441a:	4b51      	ldr	r3, [pc, #324]	@ (8004560 <MX_ADC1_Init+0x178>)
 800441c:	2200      	movs	r2, #0
 800441e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004422:	4b4f      	ldr	r3, [pc, #316]	@ (8004560 <MX_ADC1_Init+0x178>)
 8004424:	2200      	movs	r2, #0
 8004426:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004428:	4b4d      	ldr	r3, [pc, #308]	@ (8004560 <MX_ADC1_Init+0x178>)
 800442a:	4a4f      	ldr	r2, [pc, #316]	@ (8004568 <MX_ADC1_Init+0x180>)
 800442c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800442e:	4b4c      	ldr	r3, [pc, #304]	@ (8004560 <MX_ADC1_Init+0x178>)
 8004430:	2200      	movs	r2, #0
 8004432:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 9;
 8004434:	4b4a      	ldr	r3, [pc, #296]	@ (8004560 <MX_ADC1_Init+0x178>)
 8004436:	2209      	movs	r2, #9
 8004438:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800443a:	4b49      	ldr	r3, [pc, #292]	@ (8004560 <MX_ADC1_Init+0x178>)
 800443c:	2200      	movs	r2, #0
 800443e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004442:	4b47      	ldr	r3, [pc, #284]	@ (8004560 <MX_ADC1_Init+0x178>)
 8004444:	2201      	movs	r2, #1
 8004446:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004448:	4845      	ldr	r0, [pc, #276]	@ (8004560 <MX_ADC1_Init+0x178>)
 800444a:	f001 fa8b 	bl	8005964 <HAL_ADC_Init>
 800444e:	4603      	mov	r3, r0
 8004450:	2b00      	cmp	r3, #0
 8004452:	d001      	beq.n	8004458 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8004454:	f000 fe72 	bl	800513c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8004458:	2301      	movs	r3, #1
 800445a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800445c:	2301      	movs	r3, #1
 800445e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8004460:	2303      	movs	r3, #3
 8004462:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004464:	463b      	mov	r3, r7
 8004466:	4619      	mov	r1, r3
 8004468:	483d      	ldr	r0, [pc, #244]	@ (8004560 <MX_ADC1_Init+0x178>)
 800446a:	f001 fcdd 	bl	8005e28 <HAL_ADC_ConfigChannel>
 800446e:	4603      	mov	r3, r0
 8004470:	2b00      	cmp	r3, #0
 8004472:	d001      	beq.n	8004478 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8004474:	f000 fe62 	bl	800513c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8004478:	2302      	movs	r3, #2
 800447a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800447c:	2302      	movs	r3, #2
 800447e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004480:	463b      	mov	r3, r7
 8004482:	4619      	mov	r1, r3
 8004484:	4836      	ldr	r0, [pc, #216]	@ (8004560 <MX_ADC1_Init+0x178>)
 8004486:	f001 fccf 	bl	8005e28 <HAL_ADC_ConfigChannel>
 800448a:	4603      	mov	r3, r0
 800448c:	2b00      	cmp	r3, #0
 800448e:	d001      	beq.n	8004494 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8004490:	f000 fe54 	bl	800513c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8004494:	2303      	movs	r3, #3
 8004496:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8004498:	2303      	movs	r3, #3
 800449a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800449c:	463b      	mov	r3, r7
 800449e:	4619      	mov	r1, r3
 80044a0:	482f      	ldr	r0, [pc, #188]	@ (8004560 <MX_ADC1_Init+0x178>)
 80044a2:	f001 fcc1 	bl	8005e28 <HAL_ADC_ConfigChannel>
 80044a6:	4603      	mov	r3, r0
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d001      	beq.n	80044b0 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80044ac:	f000 fe46 	bl	800513c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80044b0:	2304      	movs	r3, #4
 80044b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80044b4:	2304      	movs	r3, #4
 80044b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80044b8:	463b      	mov	r3, r7
 80044ba:	4619      	mov	r1, r3
 80044bc:	4828      	ldr	r0, [pc, #160]	@ (8004560 <MX_ADC1_Init+0x178>)
 80044be:	f001 fcb3 	bl	8005e28 <HAL_ADC_ConfigChannel>
 80044c2:	4603      	mov	r3, r0
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d001      	beq.n	80044cc <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80044c8:	f000 fe38 	bl	800513c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80044cc:	2305      	movs	r3, #5
 80044ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80044d0:	2305      	movs	r3, #5
 80044d2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80044d4:	463b      	mov	r3, r7
 80044d6:	4619      	mov	r1, r3
 80044d8:	4821      	ldr	r0, [pc, #132]	@ (8004560 <MX_ADC1_Init+0x178>)
 80044da:	f001 fca5 	bl	8005e28 <HAL_ADC_ConfigChannel>
 80044de:	4603      	mov	r3, r0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d001      	beq.n	80044e8 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 80044e4:	f000 fe2a 	bl	800513c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80044e8:	2306      	movs	r3, #6
 80044ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80044ec:	2306      	movs	r3, #6
 80044ee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80044f0:	463b      	mov	r3, r7
 80044f2:	4619      	mov	r1, r3
 80044f4:	481a      	ldr	r0, [pc, #104]	@ (8004560 <MX_ADC1_Init+0x178>)
 80044f6:	f001 fc97 	bl	8005e28 <HAL_ADC_ConfigChannel>
 80044fa:	4603      	mov	r3, r0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d001      	beq.n	8004504 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8004500:	f000 fe1c 	bl	800513c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8004504:	2307      	movs	r3, #7
 8004506:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8004508:	2307      	movs	r3, #7
 800450a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800450c:	463b      	mov	r3, r7
 800450e:	4619      	mov	r1, r3
 8004510:	4813      	ldr	r0, [pc, #76]	@ (8004560 <MX_ADC1_Init+0x178>)
 8004512:	f001 fc89 	bl	8005e28 <HAL_ADC_ConfigChannel>
 8004516:	4603      	mov	r3, r0
 8004518:	2b00      	cmp	r3, #0
 800451a:	d001      	beq.n	8004520 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 800451c:	f000 fe0e 	bl	800513c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8004520:	2308      	movs	r3, #8
 8004522:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8004524:	2308      	movs	r3, #8
 8004526:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004528:	463b      	mov	r3, r7
 800452a:	4619      	mov	r1, r3
 800452c:	480c      	ldr	r0, [pc, #48]	@ (8004560 <MX_ADC1_Init+0x178>)
 800452e:	f001 fc7b 	bl	8005e28 <HAL_ADC_ConfigChannel>
 8004532:	4603      	mov	r3, r0
 8004534:	2b00      	cmp	r3, #0
 8004536:	d001      	beq.n	800453c <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8004538:	f000 fe00 	bl	800513c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800453c:	2309      	movs	r3, #9
 800453e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8004540:	2309      	movs	r3, #9
 8004542:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004544:	463b      	mov	r3, r7
 8004546:	4619      	mov	r1, r3
 8004548:	4805      	ldr	r0, [pc, #20]	@ (8004560 <MX_ADC1_Init+0x178>)
 800454a:	f001 fc6d 	bl	8005e28 <HAL_ADC_ConfigChannel>
 800454e:	4603      	mov	r3, r0
 8004550:	2b00      	cmp	r3, #0
 8004552:	d001      	beq.n	8004558 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8004554:	f000 fdf2 	bl	800513c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004558:	bf00      	nop
 800455a:	3710      	adds	r7, #16
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}
 8004560:	20000a74 	.word	0x20000a74
 8004564:	40012000 	.word	0x40012000
 8004568:	0f000001 	.word	0x0f000001

0800456c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004570:	4b12      	ldr	r3, [pc, #72]	@ (80045bc <MX_I2C1_Init+0x50>)
 8004572:	4a13      	ldr	r2, [pc, #76]	@ (80045c0 <MX_I2C1_Init+0x54>)
 8004574:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8004576:	4b11      	ldr	r3, [pc, #68]	@ (80045bc <MX_I2C1_Init+0x50>)
 8004578:	4a12      	ldr	r2, [pc, #72]	@ (80045c4 <MX_I2C1_Init+0x58>)
 800457a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800457c:	4b0f      	ldr	r3, [pc, #60]	@ (80045bc <MX_I2C1_Init+0x50>)
 800457e:	2200      	movs	r2, #0
 8004580:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004582:	4b0e      	ldr	r3, [pc, #56]	@ (80045bc <MX_I2C1_Init+0x50>)
 8004584:	2200      	movs	r2, #0
 8004586:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004588:	4b0c      	ldr	r3, [pc, #48]	@ (80045bc <MX_I2C1_Init+0x50>)
 800458a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800458e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004590:	4b0a      	ldr	r3, [pc, #40]	@ (80045bc <MX_I2C1_Init+0x50>)
 8004592:	2200      	movs	r2, #0
 8004594:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004596:	4b09      	ldr	r3, [pc, #36]	@ (80045bc <MX_I2C1_Init+0x50>)
 8004598:	2200      	movs	r2, #0
 800459a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800459c:	4b07      	ldr	r3, [pc, #28]	@ (80045bc <MX_I2C1_Init+0x50>)
 800459e:	2200      	movs	r2, #0
 80045a0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80045a2:	4b06      	ldr	r3, [pc, #24]	@ (80045bc <MX_I2C1_Init+0x50>)
 80045a4:	2200      	movs	r2, #0
 80045a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80045a8:	4804      	ldr	r0, [pc, #16]	@ (80045bc <MX_I2C1_Init+0x50>)
 80045aa:	f002 fe0d 	bl	80071c8 <HAL_I2C_Init>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d001      	beq.n	80045b8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80045b4:	f000 fdc2 	bl	800513c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80045b8:	bf00      	nop
 80045ba:	bd80      	pop	{r7, pc}
 80045bc:	20000b1c 	.word	0x20000b1c
 80045c0:	40005400 	.word	0x40005400
 80045c4:	00061a80 	.word	0x00061a80

080045c8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b086      	sub	sp, #24
 80045cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80045ce:	f107 0308 	add.w	r3, r7, #8
 80045d2:	2200      	movs	r2, #0
 80045d4:	601a      	str	r2, [r3, #0]
 80045d6:	605a      	str	r2, [r3, #4]
 80045d8:	609a      	str	r2, [r3, #8]
 80045da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80045dc:	463b      	mov	r3, r7
 80045de:	2200      	movs	r2, #0
 80045e0:	601a      	str	r2, [r3, #0]
 80045e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80045e4:	4b1e      	ldr	r3, [pc, #120]	@ (8004660 <MX_TIM1_Init+0x98>)
 80045e6:	4a1f      	ldr	r2, [pc, #124]	@ (8004664 <MX_TIM1_Init+0x9c>)
 80045e8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80045ea:	4b1d      	ldr	r3, [pc, #116]	@ (8004660 <MX_TIM1_Init+0x98>)
 80045ec:	2200      	movs	r2, #0
 80045ee:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80045f0:	4b1b      	ldr	r3, [pc, #108]	@ (8004660 <MX_TIM1_Init+0x98>)
 80045f2:	2200      	movs	r2, #0
 80045f4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 23999;
 80045f6:	4b1a      	ldr	r3, [pc, #104]	@ (8004660 <MX_TIM1_Init+0x98>)
 80045f8:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 80045fc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80045fe:	4b18      	ldr	r3, [pc, #96]	@ (8004660 <MX_TIM1_Init+0x98>)
 8004600:	2200      	movs	r2, #0
 8004602:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004604:	4b16      	ldr	r3, [pc, #88]	@ (8004660 <MX_TIM1_Init+0x98>)
 8004606:	2200      	movs	r2, #0
 8004608:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800460a:	4b15      	ldr	r3, [pc, #84]	@ (8004660 <MX_TIM1_Init+0x98>)
 800460c:	2200      	movs	r2, #0
 800460e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004610:	4813      	ldr	r0, [pc, #76]	@ (8004660 <MX_TIM1_Init+0x98>)
 8004612:	f008 f884 	bl	800c71e <HAL_TIM_Base_Init>
 8004616:	4603      	mov	r3, r0
 8004618:	2b00      	cmp	r3, #0
 800461a:	d001      	beq.n	8004620 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800461c:	f000 fd8e 	bl	800513c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004620:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004624:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004626:	f107 0308 	add.w	r3, r7, #8
 800462a:	4619      	mov	r1, r3
 800462c:	480c      	ldr	r0, [pc, #48]	@ (8004660 <MX_TIM1_Init+0x98>)
 800462e:	f008 fbe3 	bl	800cdf8 <HAL_TIM_ConfigClockSource>
 8004632:	4603      	mov	r3, r0
 8004634:	2b00      	cmp	r3, #0
 8004636:	d001      	beq.n	800463c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8004638:	f000 fd80 	bl	800513c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800463c:	2300      	movs	r3, #0
 800463e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004640:	2300      	movs	r3, #0
 8004642:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004644:	463b      	mov	r3, r7
 8004646:	4619      	mov	r1, r3
 8004648:	4805      	ldr	r0, [pc, #20]	@ (8004660 <MX_TIM1_Init+0x98>)
 800464a:	f008 ff9d 	bl	800d588 <HAL_TIMEx_MasterConfigSynchronization>
 800464e:	4603      	mov	r3, r0
 8004650:	2b00      	cmp	r3, #0
 8004652:	d001      	beq.n	8004658 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8004654:	f000 fd72 	bl	800513c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8004658:	bf00      	nop
 800465a:	3718      	adds	r7, #24
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}
 8004660:	20000c30 	.word	0x20000c30
 8004664:	40010000 	.word	0x40010000

08004668 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b08e      	sub	sp, #56	@ 0x38
 800466c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800466e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004672:	2200      	movs	r2, #0
 8004674:	601a      	str	r2, [r3, #0]
 8004676:	605a      	str	r2, [r3, #4]
 8004678:	609a      	str	r2, [r3, #8]
 800467a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800467c:	f107 0320 	add.w	r3, r7, #32
 8004680:	2200      	movs	r2, #0
 8004682:	601a      	str	r2, [r3, #0]
 8004684:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004686:	1d3b      	adds	r3, r7, #4
 8004688:	2200      	movs	r2, #0
 800468a:	601a      	str	r2, [r3, #0]
 800468c:	605a      	str	r2, [r3, #4]
 800468e:	609a      	str	r2, [r3, #8]
 8004690:	60da      	str	r2, [r3, #12]
 8004692:	611a      	str	r2, [r3, #16]
 8004694:	615a      	str	r2, [r3, #20]
 8004696:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004698:	4b32      	ldr	r3, [pc, #200]	@ (8004764 <MX_TIM3_Init+0xfc>)
 800469a:	4a33      	ldr	r2, [pc, #204]	@ (8004768 <MX_TIM3_Init+0x100>)
 800469c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15;
 800469e:	4b31      	ldr	r3, [pc, #196]	@ (8004764 <MX_TIM3_Init+0xfc>)
 80046a0:	220f      	movs	r2, #15
 80046a2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80046a4:	4b2f      	ldr	r3, [pc, #188]	@ (8004764 <MX_TIM3_Init+0xfc>)
 80046a6:	2200      	movs	r2, #0
 80046a8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 59999;
 80046aa:	4b2e      	ldr	r3, [pc, #184]	@ (8004764 <MX_TIM3_Init+0xfc>)
 80046ac:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 80046b0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80046b2:	4b2c      	ldr	r3, [pc, #176]	@ (8004764 <MX_TIM3_Init+0xfc>)
 80046b4:	2200      	movs	r2, #0
 80046b6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80046b8:	4b2a      	ldr	r3, [pc, #168]	@ (8004764 <MX_TIM3_Init+0xfc>)
 80046ba:	2200      	movs	r2, #0
 80046bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80046be:	4829      	ldr	r0, [pc, #164]	@ (8004764 <MX_TIM3_Init+0xfc>)
 80046c0:	f008 f82d 	bl	800c71e <HAL_TIM_Base_Init>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d001      	beq.n	80046ce <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80046ca:	f000 fd37 	bl	800513c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80046ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80046d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80046d4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80046d8:	4619      	mov	r1, r3
 80046da:	4822      	ldr	r0, [pc, #136]	@ (8004764 <MX_TIM3_Init+0xfc>)
 80046dc:	f008 fb8c 	bl	800cdf8 <HAL_TIM_ConfigClockSource>
 80046e0:	4603      	mov	r3, r0
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d001      	beq.n	80046ea <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80046e6:	f000 fd29 	bl	800513c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80046ea:	481e      	ldr	r0, [pc, #120]	@ (8004764 <MX_TIM3_Init+0xfc>)
 80046ec:	f008 f8c8 	bl	800c880 <HAL_TIM_PWM_Init>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d001      	beq.n	80046fa <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80046f6:	f000 fd21 	bl	800513c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80046fa:	2300      	movs	r3, #0
 80046fc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80046fe:	2300      	movs	r3, #0
 8004700:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004702:	f107 0320 	add.w	r3, r7, #32
 8004706:	4619      	mov	r1, r3
 8004708:	4816      	ldr	r0, [pc, #88]	@ (8004764 <MX_TIM3_Init+0xfc>)
 800470a:	f008 ff3d 	bl	800d588 <HAL_TIMEx_MasterConfigSynchronization>
 800470e:	4603      	mov	r3, r0
 8004710:	2b00      	cmp	r3, #0
 8004712:	d001      	beq.n	8004718 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8004714:	f000 fd12 	bl	800513c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004718:	2360      	movs	r3, #96	@ 0x60
 800471a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800471c:	2300      	movs	r3, #0
 800471e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004720:	2300      	movs	r3, #0
 8004722:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004724:	2300      	movs	r3, #0
 8004726:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004728:	1d3b      	adds	r3, r7, #4
 800472a:	2200      	movs	r2, #0
 800472c:	4619      	mov	r1, r3
 800472e:	480d      	ldr	r0, [pc, #52]	@ (8004764 <MX_TIM3_Init+0xfc>)
 8004730:	f008 faa0 	bl	800cc74 <HAL_TIM_PWM_ConfigChannel>
 8004734:	4603      	mov	r3, r0
 8004736:	2b00      	cmp	r3, #0
 8004738:	d001      	beq.n	800473e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800473a:	f000 fcff 	bl	800513c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800473e:	1d3b      	adds	r3, r7, #4
 8004740:	2204      	movs	r2, #4
 8004742:	4619      	mov	r1, r3
 8004744:	4807      	ldr	r0, [pc, #28]	@ (8004764 <MX_TIM3_Init+0xfc>)
 8004746:	f008 fa95 	bl	800cc74 <HAL_TIM_PWM_ConfigChannel>
 800474a:	4603      	mov	r3, r0
 800474c:	2b00      	cmp	r3, #0
 800474e:	d001      	beq.n	8004754 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8004750:	f000 fcf4 	bl	800513c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004754:	4803      	ldr	r0, [pc, #12]	@ (8004764 <MX_TIM3_Init+0xfc>)
 8004756:	f000 fec5 	bl	80054e4 <HAL_TIM_MspPostInit>

}
 800475a:	bf00      	nop
 800475c:	3738      	adds	r7, #56	@ 0x38
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
 8004762:	bf00      	nop
 8004764:	20000c78 	.word	0x20000c78
 8004768:	40000400 	.word	0x40000400

0800476c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004770:	4b11      	ldr	r3, [pc, #68]	@ (80047b8 <MX_USART1_UART_Init+0x4c>)
 8004772:	4a12      	ldr	r2, [pc, #72]	@ (80047bc <MX_USART1_UART_Init+0x50>)
 8004774:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004776:	4b10      	ldr	r3, [pc, #64]	@ (80047b8 <MX_USART1_UART_Init+0x4c>)
 8004778:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800477c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800477e:	4b0e      	ldr	r3, [pc, #56]	@ (80047b8 <MX_USART1_UART_Init+0x4c>)
 8004780:	2200      	movs	r2, #0
 8004782:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004784:	4b0c      	ldr	r3, [pc, #48]	@ (80047b8 <MX_USART1_UART_Init+0x4c>)
 8004786:	2200      	movs	r2, #0
 8004788:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800478a:	4b0b      	ldr	r3, [pc, #44]	@ (80047b8 <MX_USART1_UART_Init+0x4c>)
 800478c:	2200      	movs	r2, #0
 800478e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004790:	4b09      	ldr	r3, [pc, #36]	@ (80047b8 <MX_USART1_UART_Init+0x4c>)
 8004792:	220c      	movs	r2, #12
 8004794:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004796:	4b08      	ldr	r3, [pc, #32]	@ (80047b8 <MX_USART1_UART_Init+0x4c>)
 8004798:	2200      	movs	r2, #0
 800479a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800479c:	4b06      	ldr	r3, [pc, #24]	@ (80047b8 <MX_USART1_UART_Init+0x4c>)
 800479e:	2200      	movs	r2, #0
 80047a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80047a2:	4805      	ldr	r0, [pc, #20]	@ (80047b8 <MX_USART1_UART_Init+0x4c>)
 80047a4:	f008 ff72 	bl	800d68c <HAL_UART_Init>
 80047a8:	4603      	mov	r3, r0
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d001      	beq.n	80047b2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80047ae:	f000 fcc5 	bl	800513c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80047b2:	bf00      	nop
 80047b4:	bd80      	pop	{r7, pc}
 80047b6:	bf00      	nop
 80047b8:	20000cc0 	.word	0x20000cc0
 80047bc:	40011000 	.word	0x40011000

080047c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b082      	sub	sp, #8
 80047c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80047c6:	2300      	movs	r3, #0
 80047c8:	607b      	str	r3, [r7, #4]
 80047ca:	4b1b      	ldr	r3, [pc, #108]	@ (8004838 <MX_DMA_Init+0x78>)
 80047cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047ce:	4a1a      	ldr	r2, [pc, #104]	@ (8004838 <MX_DMA_Init+0x78>)
 80047d0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80047d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80047d6:	4b18      	ldr	r3, [pc, #96]	@ (8004838 <MX_DMA_Init+0x78>)
 80047d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80047de:	607b      	str	r3, [r7, #4]
 80047e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80047e2:	2300      	movs	r3, #0
 80047e4:	603b      	str	r3, [r7, #0]
 80047e6:	4b14      	ldr	r3, [pc, #80]	@ (8004838 <MX_DMA_Init+0x78>)
 80047e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047ea:	4a13      	ldr	r2, [pc, #76]	@ (8004838 <MX_DMA_Init+0x78>)
 80047ec:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80047f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80047f2:	4b11      	ldr	r3, [pc, #68]	@ (8004838 <MX_DMA_Init+0x78>)
 80047f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80047fa:	603b      	str	r3, [r7, #0]
 80047fc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80047fe:	2200      	movs	r2, #0
 8004800:	2100      	movs	r1, #0
 8004802:	200b      	movs	r0, #11
 8004804:	f001 fea5 	bl	8006552 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8004808:	200b      	movs	r0, #11
 800480a:	f001 febe 	bl	800658a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800480e:	2200      	movs	r2, #0
 8004810:	2100      	movs	r1, #0
 8004812:	200c      	movs	r0, #12
 8004814:	f001 fe9d 	bl	8006552 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8004818:	200c      	movs	r0, #12
 800481a:	f001 feb6 	bl	800658a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800481e:	2200      	movs	r2, #0
 8004820:	2100      	movs	r1, #0
 8004822:	2038      	movs	r0, #56	@ 0x38
 8004824:	f001 fe95 	bl	8006552 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8004828:	2038      	movs	r0, #56	@ 0x38
 800482a:	f001 feae 	bl	800658a <HAL_NVIC_EnableIRQ>

}
 800482e:	bf00      	nop
 8004830:	3708      	adds	r7, #8
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
 8004836:	bf00      	nop
 8004838:	40023800 	.word	0x40023800

0800483c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b08a      	sub	sp, #40	@ 0x28
 8004840:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004842:	f107 0314 	add.w	r3, r7, #20
 8004846:	2200      	movs	r2, #0
 8004848:	601a      	str	r2, [r3, #0]
 800484a:	605a      	str	r2, [r3, #4]
 800484c:	609a      	str	r2, [r3, #8]
 800484e:	60da      	str	r2, [r3, #12]
 8004850:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004852:	2300      	movs	r3, #0
 8004854:	613b      	str	r3, [r7, #16]
 8004856:	4b63      	ldr	r3, [pc, #396]	@ (80049e4 <MX_GPIO_Init+0x1a8>)
 8004858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800485a:	4a62      	ldr	r2, [pc, #392]	@ (80049e4 <MX_GPIO_Init+0x1a8>)
 800485c:	f043 0304 	orr.w	r3, r3, #4
 8004860:	6313      	str	r3, [r2, #48]	@ 0x30
 8004862:	4b60      	ldr	r3, [pc, #384]	@ (80049e4 <MX_GPIO_Init+0x1a8>)
 8004864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004866:	f003 0304 	and.w	r3, r3, #4
 800486a:	613b      	str	r3, [r7, #16]
 800486c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800486e:	2300      	movs	r3, #0
 8004870:	60fb      	str	r3, [r7, #12]
 8004872:	4b5c      	ldr	r3, [pc, #368]	@ (80049e4 <MX_GPIO_Init+0x1a8>)
 8004874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004876:	4a5b      	ldr	r2, [pc, #364]	@ (80049e4 <MX_GPIO_Init+0x1a8>)
 8004878:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800487c:	6313      	str	r3, [r2, #48]	@ 0x30
 800487e:	4b59      	ldr	r3, [pc, #356]	@ (80049e4 <MX_GPIO_Init+0x1a8>)
 8004880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004882:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004886:	60fb      	str	r3, [r7, #12]
 8004888:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800488a:	2300      	movs	r3, #0
 800488c:	60bb      	str	r3, [r7, #8]
 800488e:	4b55      	ldr	r3, [pc, #340]	@ (80049e4 <MX_GPIO_Init+0x1a8>)
 8004890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004892:	4a54      	ldr	r2, [pc, #336]	@ (80049e4 <MX_GPIO_Init+0x1a8>)
 8004894:	f043 0301 	orr.w	r3, r3, #1
 8004898:	6313      	str	r3, [r2, #48]	@ 0x30
 800489a:	4b52      	ldr	r3, [pc, #328]	@ (80049e4 <MX_GPIO_Init+0x1a8>)
 800489c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800489e:	f003 0301 	and.w	r3, r3, #1
 80048a2:	60bb      	str	r3, [r7, #8]
 80048a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80048a6:	2300      	movs	r3, #0
 80048a8:	607b      	str	r3, [r7, #4]
 80048aa:	4b4e      	ldr	r3, [pc, #312]	@ (80049e4 <MX_GPIO_Init+0x1a8>)
 80048ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048ae:	4a4d      	ldr	r2, [pc, #308]	@ (80049e4 <MX_GPIO_Init+0x1a8>)
 80048b0:	f043 0302 	orr.w	r3, r3, #2
 80048b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80048b6:	4b4b      	ldr	r3, [pc, #300]	@ (80049e4 <MX_GPIO_Init+0x1a8>)
 80048b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048ba:	f003 0302 	and.w	r3, r3, #2
 80048be:	607b      	str	r3, [r7, #4]
 80048c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80048c2:	2200      	movs	r2, #0
 80048c4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80048c8:	4847      	ldr	r0, [pc, #284]	@ (80049e8 <MX_GPIO_Init+0x1ac>)
 80048ca:	f002 fc31 	bl	8007130 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP_EN_GPIO_Port, ESP_EN_Pin, GPIO_PIN_SET);
 80048ce:	2201      	movs	r2, #1
 80048d0:	2104      	movs	r1, #4
 80048d2:	4846      	ldr	r0, [pc, #280]	@ (80049ec <MX_GPIO_Init+0x1b0>)
 80048d4:	f002 fc2c 	bl	8007130 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LedStatus_2_Pin|M2_IN2_Pin, GPIO_PIN_RESET);
 80048d8:	2200      	movs	r2, #0
 80048da:	f44f 6181 	mov.w	r1, #1032	@ 0x408
 80048de:	4843      	ldr	r0, [pc, #268]	@ (80049ec <MX_GPIO_Init+0x1b0>)
 80048e0:	f002 fc26 	bl	8007130 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, M1_IN1_Pin|M1_IN2_Pin|M2_IN1_Pin, GPIO_PIN_RESET);
 80048e4:	2200      	movs	r2, #0
 80048e6:	f44f 4106 	mov.w	r1, #34304	@ 0x8600
 80048ea:	4841      	ldr	r0, [pc, #260]	@ (80049f0 <MX_GPIO_Init+0x1b4>)
 80048ec:	f002 fc20 	bl	8007130 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 80048f0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80048f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80048f6:	2301      	movs	r3, #1
 80048f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048fa:	2300      	movs	r3, #0
 80048fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048fe:	2300      	movs	r3, #0
 8004900:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8004902:	f107 0314 	add.w	r3, r7, #20
 8004906:	4619      	mov	r1, r3
 8004908:	4837      	ldr	r0, [pc, #220]	@ (80049e8 <MX_GPIO_Init+0x1ac>)
 800490a:	f002 fa75 	bl	8006df8 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY_Pin */
  GPIO_InitStruct.Pin = KEY_Pin;
 800490e:	2301      	movs	r3, #1
 8004910:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004912:	2300      	movs	r3, #0
 8004914:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004916:	2300      	movs	r3, #0
 8004918:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 800491a:	f107 0314 	add.w	r3, r7, #20
 800491e:	4619      	mov	r1, r3
 8004920:	4833      	ldr	r0, [pc, #204]	@ (80049f0 <MX_GPIO_Init+0x1b4>)
 8004922:	f002 fa69 	bl	8006df8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ESP_EN_Pin LedStatus_2_Pin M2_IN2_Pin */
  GPIO_InitStruct.Pin = ESP_EN_Pin|LedStatus_2_Pin|M2_IN2_Pin;
 8004926:	f240 430c 	movw	r3, #1036	@ 0x40c
 800492a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800492c:	2301      	movs	r3, #1
 800492e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004930:	2300      	movs	r3, #0
 8004932:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004934:	2300      	movs	r3, #0
 8004936:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004938:	f107 0314 	add.w	r3, r7, #20
 800493c:	4619      	mov	r1, r3
 800493e:	482b      	ldr	r0, [pc, #172]	@ (80049ec <MX_GPIO_Init+0x1b0>)
 8004940:	f002 fa5a 	bl	8006df8 <HAL_GPIO_Init>

  /*Configure GPIO pin : M1_ENC_A_Pin */
  GPIO_InitStruct.Pin = M1_ENC_A_Pin;
 8004944:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004948:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800494a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800494e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004950:	2300      	movs	r3, #0
 8004952:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(M1_ENC_A_GPIO_Port, &GPIO_InitStruct);
 8004954:	f107 0314 	add.w	r3, r7, #20
 8004958:	4619      	mov	r1, r3
 800495a:	4824      	ldr	r0, [pc, #144]	@ (80049ec <MX_GPIO_Init+0x1b0>)
 800495c:	f002 fa4c 	bl	8006df8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8004960:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8004964:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004966:	2302      	movs	r3, #2
 8004968:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800496a:	2300      	movs	r3, #0
 800496c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800496e:	2303      	movs	r3, #3
 8004970:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004972:	2305      	movs	r3, #5
 8004974:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004976:	f107 0314 	add.w	r3, r7, #20
 800497a:	4619      	mov	r1, r3
 800497c:	481b      	ldr	r0, [pc, #108]	@ (80049ec <MX_GPIO_Init+0x1b0>)
 800497e:	f002 fa3b 	bl	8006df8 <HAL_GPIO_Init>

  /*Configure GPIO pin : M2_ENC_A_Pin */
  GPIO_InitStruct.Pin = M2_ENC_A_Pin;
 8004982:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004986:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004988:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800498c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800498e:	2300      	movs	r3, #0
 8004990:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(M2_ENC_A_GPIO_Port, &GPIO_InitStruct);
 8004992:	f107 0314 	add.w	r3, r7, #20
 8004996:	4619      	mov	r1, r3
 8004998:	4815      	ldr	r0, [pc, #84]	@ (80049f0 <MX_GPIO_Init+0x1b4>)
 800499a:	f002 fa2d 	bl	8006df8 <HAL_GPIO_Init>

  /*Configure GPIO pins : M1_IN1_Pin M1_IN2_Pin M2_IN1_Pin */
  GPIO_InitStruct.Pin = M1_IN1_Pin|M1_IN2_Pin|M2_IN1_Pin;
 800499e:	f44f 4306 	mov.w	r3, #34304	@ 0x8600
 80049a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80049a4:	2301      	movs	r3, #1
 80049a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049a8:	2300      	movs	r3, #0
 80049aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049ac:	2300      	movs	r3, #0
 80049ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049b0:	f107 0314 	add.w	r3, r7, #20
 80049b4:	4619      	mov	r1, r3
 80049b6:	480e      	ldr	r0, [pc, #56]	@ (80049f0 <MX_GPIO_Init+0x1b4>)
 80049b8:	f002 fa1e 	bl	8006df8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80049bc:	2200      	movs	r2, #0
 80049be:	2100      	movs	r1, #0
 80049c0:	2017      	movs	r0, #23
 80049c2:	f001 fdc6 	bl	8006552 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80049c6:	2017      	movs	r0, #23
 80049c8:	f001 fddf 	bl	800658a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80049cc:	2200      	movs	r2, #0
 80049ce:	2100      	movs	r1, #0
 80049d0:	2028      	movs	r0, #40	@ 0x28
 80049d2:	f001 fdbe 	bl	8006552 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80049d6:	2028      	movs	r0, #40	@ 0x28
 80049d8:	f001 fdd7 	bl	800658a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80049dc:	bf00      	nop
 80049de:	3728      	adds	r7, #40	@ 0x28
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}
 80049e4:	40023800 	.word	0x40023800
 80049e8:	40020800 	.word	0x40020800
 80049ec:	40020400 	.word	0x40020400
 80049f0:	40020000 	.word	0x40020000

080049f4 <Init_Timing>:

/* USER CODE BEGIN 4 */
/************************************ USER INIT FUNCTIONS ****************************************/
/* INICIALIZACIÓN DE TIMERS Y PWM*/
void Init_Timing(){
 80049f4:	b580      	push	{r7, lr}
 80049f6:	af00      	add	r7, sp, #0
	  if(HAL_TIM_Base_Start_IT(&htim1) != HAL_OK){
 80049f8:	4819      	ldr	r0, [pc, #100]	@ (8004a60 <Init_Timing+0x6c>)
 80049fa:	f007 fedf 	bl	800c7bc <HAL_TIM_Base_Start_IT>
 80049fe:	4603      	mov	r3, r0
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d005      	beq.n	8004a10 <Init_Timing+0x1c>
		  comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"TIM1 INIT", 9);
 8004a04:	2309      	movs	r3, #9
 8004a06:	4a17      	ldr	r2, [pc, #92]	@ (8004a64 <Init_Timing+0x70>)
 8004a08:	21ee      	movs	r1, #238	@ 0xee
 8004a0a:	4817      	ldr	r0, [pc, #92]	@ (8004a68 <Init_Timing+0x74>)
 8004a0c:	f7fd fd68 	bl	80024e0 <comm_sendCMD>
	  }
	  if(HAL_TIM_Base_Start_IT(&htim3) != HAL_OK){
 8004a10:	4816      	ldr	r0, [pc, #88]	@ (8004a6c <Init_Timing+0x78>)
 8004a12:	f007 fed3 	bl	800c7bc <HAL_TIM_Base_Start_IT>
 8004a16:	4603      	mov	r3, r0
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d005      	beq.n	8004a28 <Init_Timing+0x34>
	  	  comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"TIM3 INIT BASE", 14);
 8004a1c:	230e      	movs	r3, #14
 8004a1e:	4a14      	ldr	r2, [pc, #80]	@ (8004a70 <Init_Timing+0x7c>)
 8004a20:	21ee      	movs	r1, #238	@ 0xee
 8004a22:	4811      	ldr	r0, [pc, #68]	@ (8004a68 <Init_Timing+0x74>)
 8004a24:	f7fd fd5c 	bl	80024e0 <comm_sendCMD>
	  }
	  if(HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1) != HAL_OK){
 8004a28:	2100      	movs	r1, #0
 8004a2a:	4810      	ldr	r0, [pc, #64]	@ (8004a6c <Init_Timing+0x78>)
 8004a2c:	f007 ff82 	bl	800c934 <HAL_TIM_PWM_Start>
 8004a30:	4603      	mov	r3, r0
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d005      	beq.n	8004a42 <Init_Timing+0x4e>
		  comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"TIM3 INIT PWM1", 14);
 8004a36:	230e      	movs	r3, #14
 8004a38:	4a0e      	ldr	r2, [pc, #56]	@ (8004a74 <Init_Timing+0x80>)
 8004a3a:	21ee      	movs	r1, #238	@ 0xee
 8004a3c:	480a      	ldr	r0, [pc, #40]	@ (8004a68 <Init_Timing+0x74>)
 8004a3e:	f7fd fd4f 	bl	80024e0 <comm_sendCMD>
	  }
	  if(HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2) != HAL_OK){
 8004a42:	2104      	movs	r1, #4
 8004a44:	4809      	ldr	r0, [pc, #36]	@ (8004a6c <Init_Timing+0x78>)
 8004a46:	f007 ff75 	bl	800c934 <HAL_TIM_PWM_Start>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d005      	beq.n	8004a5c <Init_Timing+0x68>
		  comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"TIM3 INIT PWM2", 14);
 8004a50:	230e      	movs	r3, #14
 8004a52:	4a09      	ldr	r2, [pc, #36]	@ (8004a78 <Init_Timing+0x84>)
 8004a54:	21ee      	movs	r1, #238	@ 0xee
 8004a56:	4804      	ldr	r0, [pc, #16]	@ (8004a68 <Init_Timing+0x74>)
 8004a58:	f7fd fd42 	bl	80024e0 <comm_sendCMD>
	  }
}
 8004a5c:	bf00      	nop
 8004a5e:	bd80      	pop	{r7, pc}
 8004a60:	20000c30 	.word	0x20000c30
 8004a64:	080133f4 	.word	0x080133f4
 8004a68:	2000125c 	.word	0x2000125c
 8004a6c:	20000c78 	.word	0x20000c78
 8004a70:	08013400 	.word	0x08013400
 8004a74:	08013410 	.word	0x08013410
 8004a78:	08013420 	.word	0x08013420

08004a7c <Init_MPU6050>:
/* FIN INICIALIZACIÓN DE TIMERS Y PWM*/
/* INICIALIZACIÓN DE MPU6050 */
void Init_MPU6050(){
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	af00      	add	r7, sp, #0
	if(HAL_I2C_IsDeviceReady(&hi2c1, MPU6050_ADDR, 1, 10000) != HAL_OK){
 8004a80:	f242 7310 	movw	r3, #10000	@ 0x2710
 8004a84:	2201      	movs	r2, #1
 8004a86:	21d0      	movs	r1, #208	@ 0xd0
 8004a88:	4811      	ldr	r0, [pc, #68]	@ (8004ad0 <Init_MPU6050+0x54>)
 8004a8a:	f003 fc0f 	bl	80082ac <HAL_I2C_IsDeviceReady>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d006      	beq.n	8004aa2 <Init_MPU6050+0x26>
		comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"MPU6050 READY", 13);
 8004a94:	230d      	movs	r3, #13
 8004a96:	4a0f      	ldr	r2, [pc, #60]	@ (8004ad4 <Init_MPU6050+0x58>)
 8004a98:	21ee      	movs	r1, #238	@ 0xee
 8004a9a:	480f      	ldr	r0, [pc, #60]	@ (8004ad8 <Init_MPU6050+0x5c>)
 8004a9c:	f7fd fd20 	bl	80024e0 <comm_sendCMD>
			comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"MPU6050 INIT", 12);
		}else{
			MPU6050_Calibrate(&MPU6050);
		}
	}
}
 8004aa0:	e013      	b.n	8004aca <Init_MPU6050+0x4e>
		MPU6050_Set_I2C_Communication(&I2C1_Mem_Write, &I2C1_Mem_Read);
 8004aa2:	490e      	ldr	r1, [pc, #56]	@ (8004adc <Init_MPU6050+0x60>)
 8004aa4:	480e      	ldr	r0, [pc, #56]	@ (8004ae0 <Init_MPU6050+0x64>)
 8004aa6:	f7fc fae1 	bl	800106c <MPU6050_Set_I2C_Communication>
		if(MPU6050_Init(&MPU6050) != SYS_OK){
 8004aaa:	480e      	ldr	r0, [pc, #56]	@ (8004ae4 <Init_MPU6050+0x68>)
 8004aac:	f7fc faf4 	bl	8001098 <MPU6050_Init>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d006      	beq.n	8004ac4 <Init_MPU6050+0x48>
			comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"MPU6050 INIT", 12);
 8004ab6:	230c      	movs	r3, #12
 8004ab8:	4a0b      	ldr	r2, [pc, #44]	@ (8004ae8 <Init_MPU6050+0x6c>)
 8004aba:	21ee      	movs	r1, #238	@ 0xee
 8004abc:	4806      	ldr	r0, [pc, #24]	@ (8004ad8 <Init_MPU6050+0x5c>)
 8004abe:	f7fd fd0f 	bl	80024e0 <comm_sendCMD>
}
 8004ac2:	e002      	b.n	8004aca <Init_MPU6050+0x4e>
			MPU6050_Calibrate(&MPU6050);
 8004ac4:	4807      	ldr	r0, [pc, #28]	@ (8004ae4 <Init_MPU6050+0x68>)
 8004ac6:	f7fc fb99 	bl	80011fc <MPU6050_Calibrate>
}
 8004aca:	bf00      	nop
 8004acc:	bd80      	pop	{r7, pc}
 8004ace:	bf00      	nop
 8004ad0:	20000b1c 	.word	0x20000b1c
 8004ad4:	08013430 	.word	0x08013430
 8004ad8:	2000125c 	.word	0x2000125c
 8004adc:	08004f39 	.word	0x08004f39
 8004ae0:	08004ef9 	.word	0x08004ef9
 8004ae4:	20000d5c 	.word	0x20000d5c
 8004ae8:	08013440 	.word	0x08013440

08004aec <Init_Display>:
/* FIN INICIALIZACIÓN DE MPU6050 */

/* INICIALIZACIÓN DISPLAY*/
void Init_Display(){
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b082      	sub	sp, #8
 8004af0:	af02      	add	r7, sp, #8
	Display.refreshCounter_10ms = DISPLAY_MEDIUM_REFRESH_RATE_10MS;
 8004af2:	4b1f      	ldr	r3, [pc, #124]	@ (8004b70 <Init_Display+0x84>)
 8004af4:	2214      	movs	r2, #20
 8004af6:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
	Display.refreshRate_10ms = DISPLAY_MEDIUM_REFRESH_RATE_10MS;
 8004afa:	4b1d      	ldr	r3, [pc, #116]	@ (8004b70 <Init_Display+0x84>)
 8004afc:	2214      	movs	r2, #20
 8004afe:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412

	if(HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 10000) != HAL_OK){
 8004b02:	f242 7310 	movw	r3, #10000	@ 0x2710
 8004b06:	2201      	movs	r2, #1
 8004b08:	2178      	movs	r1, #120	@ 0x78
 8004b0a:	481a      	ldr	r0, [pc, #104]	@ (8004b74 <Init_Display+0x88>)
 8004b0c:	f003 fbce 	bl	80082ac <HAL_I2C_IsDeviceReady>
 8004b10:	4603      	mov	r3, r0
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d006      	beq.n	8004b24 <Init_Display+0x38>
		comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"OLED READY", 10);
 8004b16:	230a      	movs	r3, #10
 8004b18:	4a17      	ldr	r2, [pc, #92]	@ (8004b78 <Init_Display+0x8c>)
 8004b1a:	21ee      	movs	r1, #238	@ 0xee
 8004b1c:	4817      	ldr	r0, [pc, #92]	@ (8004b7c <Init_Display+0x90>)
 8004b1e:	f7fd fcdf 	bl	80024e0 <comm_sendCMD>
			Display_DrawBitmap(0,0, uner_logo, 128, 64, 1);
			Display.isInit = TRUE;
			Display.timer = HAL_GetTick();
		}
	}
}
 8004b22:	e022      	b.n	8004b6a <Init_Display+0x7e>
		Display_Set_I2C_Master_Transmit(&I2C1_DMA_Mem_Write, &I2C1_Master_Transmit);
 8004b24:	4916      	ldr	r1, [pc, #88]	@ (8004b80 <Init_Display+0x94>)
 8004b26:	4817      	ldr	r0, [pc, #92]	@ (8004b84 <Init_Display+0x98>)
 8004b28:	f7fc fd3e 	bl	80015a8 <Display_Set_I2C_Master_Transmit>
		if(Display_Init() != SYS_OK){
 8004b2c:	f7fc fd52 	bl	80015d4 <Display_Init>
 8004b30:	4603      	mov	r3, r0
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d006      	beq.n	8004b44 <Init_Display+0x58>
			comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"OLED INIT", 9);
 8004b36:	2309      	movs	r3, #9
 8004b38:	4a13      	ldr	r2, [pc, #76]	@ (8004b88 <Init_Display+0x9c>)
 8004b3a:	21ee      	movs	r1, #238	@ 0xee
 8004b3c:	480f      	ldr	r0, [pc, #60]	@ (8004b7c <Init_Display+0x90>)
 8004b3e:	f7fd fccf 	bl	80024e0 <comm_sendCMD>
}
 8004b42:	e012      	b.n	8004b6a <Init_Display+0x7e>
			Display_DrawBitmap(0,0, uner_logo, 128, 64, 1);
 8004b44:	2301      	movs	r3, #1
 8004b46:	9301      	str	r3, [sp, #4]
 8004b48:	2340      	movs	r3, #64	@ 0x40
 8004b4a:	9300      	str	r3, [sp, #0]
 8004b4c:	2380      	movs	r3, #128	@ 0x80
 8004b4e:	4a0f      	ldr	r2, [pc, #60]	@ (8004b8c <Init_Display+0xa0>)
 8004b50:	2100      	movs	r1, #0
 8004b52:	2000      	movs	r0, #0
 8004b54:	f7fc ffd4 	bl	8001b00 <Display_DrawBitmap>
			Display.isInit = TRUE;
 8004b58:	4b05      	ldr	r3, [pc, #20]	@ (8004b70 <Init_Display+0x84>)
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	701a      	strb	r2, [r3, #0]
			Display.timer = HAL_GetTick();
 8004b5e:	f000 fed1 	bl	8005904 <HAL_GetTick>
 8004b62:	4603      	mov	r3, r0
 8004b64:	4a02      	ldr	r2, [pc, #8]	@ (8004b70 <Init_Display+0x84>)
 8004b66:	f8c2 3404 	str.w	r3, [r2, #1028]	@ 0x404
}
 8004b6a:	bf00      	nop
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}
 8004b70:	20000e20 	.word	0x20000e20
 8004b74:	20000b1c 	.word	0x20000b1c
 8004b78:	08013450 	.word	0x08013450
 8004b7c:	2000125c 	.word	0x2000125c
 8004b80:	08004ec5 	.word	0x08004ec5
 8004b84:	08004e89 	.word	0x08004e89
 8004b88:	0801345c 	.word	0x0801345c
 8004b8c:	080134e0 	.word	0x080134e0

08004b90 <Init_WiFi>:
/* FIN INICIALIZACIÓN DISPLAY */

/* INICIALIZACIÓN WIFI */
void Init_WiFi(){
 8004b90:	b580      	push	{r7, lr}
 8004b92:	af00      	add	r7, sp, #0
	ESP.password = 	"wlan412877";
 8004b94:	4b1b      	ldr	r3, [pc, #108]	@ (8004c04 <Init_WiFi+0x74>)
 8004b96:	4a1c      	ldr	r2, [pc, #112]	@ (8004c08 <Init_WiFi+0x78>)
 8004b98:	611a      	str	r2, [r3, #16]
	ESP.ssid = 		"InternetPlus_bed788";
 8004b9a:	4b1a      	ldr	r3, [pc, #104]	@ (8004c04 <Init_WiFi+0x74>)
 8004b9c:	4a1b      	ldr	r2, [pc, #108]	@ (8004c0c <Init_WiFi+0x7c>)
 8004b9e:	60da      	str	r2, [r3, #12]
	ESP.IP = 		"192.168.1.10";
 8004ba0:	4b18      	ldr	r3, [pc, #96]	@ (8004c04 <Init_WiFi+0x74>)
 8004ba2:	4a1b      	ldr	r2, [pc, #108]	@ (8004c10 <Init_WiFi+0x80>)
 8004ba4:	615a      	str	r2, [r3, #20]

	Comm_Init(&ESP.data, &decodeOn_USB, &writeOn_ESP);
 8004ba6:	4a1b      	ldr	r2, [pc, #108]	@ (8004c14 <Init_WiFi+0x84>)
 8004ba8:	491b      	ldr	r1, [pc, #108]	@ (8004c18 <Init_WiFi+0x88>)
 8004baa:	481c      	ldr	r0, [pc, #112]	@ (8004c1c <Init_WiFi+0x8c>)
 8004bac:	f7fd fb0c 	bl	80021c8 <Comm_Init>
	ESP.data.isESP01 = TRUE;
 8004bb0:	4b14      	ldr	r3, [pc, #80]	@ (8004c04 <Init_WiFi+0x74>)
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f883 2247 	strb.w	r2, [r3, #583]	@ 0x247
	HAL_UART_Receive_IT(&huart1, &ESP.AT_Rx_data, 1);
 8004bb8:	2201      	movs	r2, #1
 8004bba:	4919      	ldr	r1, [pc, #100]	@ (8004c20 <Init_WiFi+0x90>)
 8004bbc:	4819      	ldr	r0, [pc, #100]	@ (8004c24 <Init_WiFi+0x94>)
 8004bbe:	f008 fdb5 	bl	800d72c <HAL_UART_Receive_IT>

	ESP.Config.DoCHPD = setESP01_CHPD;
 8004bc2:	4b10      	ldr	r3, [pc, #64]	@ (8004c04 <Init_WiFi+0x74>)
 8004bc4:	4a18      	ldr	r2, [pc, #96]	@ (8004c28 <Init_WiFi+0x98>)
 8004bc6:	601a      	str	r2, [r3, #0]
	ESP.Config.WriteUSARTByte = ESP01_UART_Transmit;
 8004bc8:	4b0e      	ldr	r3, [pc, #56]	@ (8004c04 <Init_WiFi+0x74>)
 8004bca:	4a18      	ldr	r2, [pc, #96]	@ (8004c2c <Init_WiFi+0x9c>)
 8004bcc:	605a      	str	r2, [r3, #4]
	ESP.Config.WriteByteToBufRX = ESP01_Data_Recived;
 8004bce:	4b0d      	ldr	r3, [pc, #52]	@ (8004c04 <Init_WiFi+0x74>)
 8004bd0:	4a17      	ldr	r2, [pc, #92]	@ (8004c30 <Init_WiFi+0xa0>)
 8004bd2:	609a      	str	r2, [r3, #8]

	ESP01_Init(&ESP.Config);
 8004bd4:	480b      	ldr	r0, [pc, #44]	@ (8004c04 <Init_WiFi+0x74>)
 8004bd6:	f7fd feb9 	bl	800294c <ESP01_Init>
	ESP01_SetWIFI(ESP.ssid, ESP.password);
 8004bda:	4b0a      	ldr	r3, [pc, #40]	@ (8004c04 <Init_WiFi+0x74>)
 8004bdc:	68db      	ldr	r3, [r3, #12]
 8004bde:	4a09      	ldr	r2, [pc, #36]	@ (8004c04 <Init_WiFi+0x74>)
 8004be0:	6912      	ldr	r2, [r2, #16]
 8004be2:	4611      	mov	r1, r2
 8004be4:	4618      	mov	r0, r3
 8004be6:	f7fd fd57 	bl	8002698 <ESP01_SetWIFI>
	ESP01_StartUDP("192.168.1.10", 30010, 30000);
 8004bea:	f247 5230 	movw	r2, #30000	@ 0x7530
 8004bee:	f247 513a 	movw	r1, #30010	@ 0x753a
 8004bf2:	4807      	ldr	r0, [pc, #28]	@ (8004c10 <Init_WiFi+0x80>)
 8004bf4:	f7fd fd86 	bl	8002704 <ESP01_StartUDP>
	ESP01_AttachChangeState(&onESP01ChangeState);
 8004bf8:	480e      	ldr	r0, [pc, #56]	@ (8004c34 <Init_WiFi+0xa4>)
 8004bfa:	f7fd ff2f 	bl	8002a5c <ESP01_AttachChangeState>
	//ESP01_AttachDebugStr(&onESP01Debug);
}
 8004bfe:	bf00      	nop
 8004c00:	bd80      	pop	{r7, pc}
 8004c02:	bf00      	nop
 8004c04:	20001490 	.word	0x20001490
 8004c08:	08013468 	.word	0x08013468
 8004c0c:	08013474 	.word	0x08013474
 8004c10:	08013488 	.word	0x08013488
 8004c14:	08004e31 	.word	0x08004e31
 8004c18:	08003b85 	.word	0x08003b85
 8004c1c:	200014a8 	.word	0x200014a8
 8004c20:	200016d8 	.word	0x200016d8
 8004c24:	20000cc0 	.word	0x20000cc0
 8004c28:	08004f79 	.word	0x08004f79
 8004c2c:	08004dc1 	.word	0x08004dc1
 8004c30:	08004df9 	.word	0x08004df9
 8004c34:	08003f69 	.word	0x08003f69

08004c38 <HAL_TIM_PeriodElapsedCallback>:
/* END INICIALIZACIÓN WIFI */

/************************************ END USER INIT FUNCTIONS ****************************************/
/***************************************** HAL CALLBACKS *********************************************/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){ //								1/4000s
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b084      	sub	sp, #16
 8004c3c:	af02      	add	r7, sp, #8
 8004c3e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1){
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a1a      	ldr	r2, [pc, #104]	@ (8004cb0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d123      	bne.n	8004c92 <HAL_TIM_PeriodElapsedCallback+0x5a>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&Analog.raw, ADC_NUM_SENSORS);
 8004c4a:	2209      	movs	r2, #9
 8004c4c:	4919      	ldr	r1, [pc, #100]	@ (8004cb4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8004c4e:	481a      	ldr	r0, [pc, #104]	@ (8004cb8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8004c50:	f000 ffdc 	bl	8005c0c <HAL_ADC_Start_DMA>
		is5ms--;
 8004c54:	4b19      	ldr	r3, [pc, #100]	@ (8004cbc <HAL_TIM_PeriodElapsedCallback+0x84>)
 8004c56:	781b      	ldrb	r3, [r3, #0]
 8004c58:	3b01      	subs	r3, #1
 8004c5a:	b2da      	uxtb	r2, r3
 8004c5c:	4b17      	ldr	r3, [pc, #92]	@ (8004cbc <HAL_TIM_PeriodElapsedCallback+0x84>)
 8004c5e:	701a      	strb	r2, [r3, #0]
		if(!is5ms){
 8004c60:	4b16      	ldr	r3, [pc, #88]	@ (8004cbc <HAL_TIM_PeriodElapsedCallback+0x84>)
 8004c62:	781b      	ldrb	r3, [r3, #0]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d114      	bne.n	8004c92 <HAL_TIM_PeriodElapsedCallback+0x5a>
			is5ms = 20;
 8004c68:	4b14      	ldr	r3, [pc, #80]	@ (8004cbc <HAL_TIM_PeriodElapsedCallback+0x84>)
 8004c6a:	2214      	movs	r2, #20
 8004c6c:	701a      	strb	r2, [r3, #0]
			if(MPU6050.isInit){
 8004c6e:	4b14      	ldr	r3, [pc, #80]	@ (8004cc0 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8004c70:	f893 30c2 	ldrb.w	r3, [r3, #194]	@ 0xc2
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d00c      	beq.n	8004c92 <HAL_TIM_PeriodElapsedCallback+0x5a>
				HAL_I2C_Mem_Read_DMA(&hi2c1, MPU6050_ADDR, ACCEL_XOUT_REG, 1, MPU6050.bit_data, 14);
 8004c78:	230e      	movs	r3, #14
 8004c7a:	9301      	str	r3, [sp, #4]
 8004c7c:	4b11      	ldr	r3, [pc, #68]	@ (8004cc4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8004c7e:	9300      	str	r3, [sp, #0]
 8004c80:	2301      	movs	r3, #1
 8004c82:	223b      	movs	r2, #59	@ 0x3b
 8004c84:	21d0      	movs	r1, #208	@ 0xd0
 8004c86:	4810      	ldr	r0, [pc, #64]	@ (8004cc8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8004c88:	f003 f980 	bl	8007f8c <HAL_I2C_Mem_Read_DMA>
				Display_I2C_DMA_Ready(FALSE);
 8004c8c:	2000      	movs	r0, #0
 8004c8e:	f7fc fe7b 	bl	8001988 <Display_I2C_DMA_Ready>
			}
		}
	}
	if(htim->Instance == TIM3){
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a0d      	ldr	r2, [pc, #52]	@ (8004ccc <HAL_TIM_PeriodElapsedCallback+0x94>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d104      	bne.n	8004ca6 <HAL_TIM_PeriodElapsedCallback+0x6e>
		IS10MS = TRUE;
 8004c9c:	4a0c      	ldr	r2, [pc, #48]	@ (8004cd0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8004c9e:	7813      	ldrb	r3, [r2, #0]
 8004ca0:	f043 0301 	orr.w	r3, r3, #1
 8004ca4:	7013      	strb	r3, [r2, #0]
	}
}
 8004ca6:	bf00      	nop
 8004ca8:	3708      	adds	r7, #8
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}
 8004cae:	bf00      	nop
 8004cb0:	40010000 	.word	0x40010000
 8004cb4:	20001238 	.word	0x20001238
 8004cb8:	20000a74 	.word	0x20000a74
 8004cbc:	2000000e 	.word	0x2000000e
 8004cc0:	20000d5c 	.word	0x20000d5c
 8004cc4:	20000e10 	.word	0x20000e10
 8004cc8:	20000b1c 	.word	0x20000b1c
 8004ccc:	40000400 	.word	0x40000400
 8004cd0:	20000d08 	.word	0x20000d08

08004cd4 <HAL_I2C_MemTxCpltCallback>:

void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c){
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b082      	sub	sp, #8
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
	if(hi2c->Devaddress == SSD1306_I2C_ADDR){
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ce0:	2b78      	cmp	r3, #120	@ 0x78
 8004ce2:	d107      	bne.n	8004cf4 <HAL_I2C_MemTxCpltCallback+0x20>
		if(!MPU6050.isInit){
 8004ce4:	4b05      	ldr	r3, [pc, #20]	@ (8004cfc <HAL_I2C_MemTxCpltCallback+0x28>)
 8004ce6:	f893 30c2 	ldrb.w	r3, [r3, #194]	@ 0xc2
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d102      	bne.n	8004cf4 <HAL_I2C_MemTxCpltCallback+0x20>
			Display_I2C_DMA_Ready(TRUE);
 8004cee:	2001      	movs	r0, #1
 8004cf0:	f7fc fe4a 	bl	8001988 <Display_I2C_DMA_Ready>
		}
	}
}
 8004cf4:	bf00      	nop
 8004cf6:	3708      	adds	r7, #8
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}
 8004cfc:	20000d5c 	.word	0x20000d5c

08004d00 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b082      	sub	sp, #8
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
	if(hi2c->Devaddress == MPU6050_ADDR){
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d0c:	2bd0      	cmp	r3, #208	@ 0xd0
 8004d0e:	d105      	bne.n	8004d1c <HAL_I2C_MemRxCpltCallback+0x1c>
		MPU6050_I2C_DMA_Cplt(&MPU6050);
 8004d10:	4804      	ldr	r0, [pc, #16]	@ (8004d24 <HAL_I2C_MemRxCpltCallback+0x24>)
 8004d12:	f7fc fb19 	bl	8001348 <MPU6050_I2C_DMA_Cplt>
		Display_I2C_DMA_Ready(TRUE);
 8004d16:	2001      	movs	r0, #1
 8004d18:	f7fc fe36 	bl	8001988 <Display_I2C_DMA_Ready>
	}
}
 8004d1c:	bf00      	nop
 8004d1e:	3708      	adds	r7, #8
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}
 8004d24:	20000d5c 	.word	0x20000d5c

08004d28 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b082      	sub	sp, #8
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
	ADC_Conversion_Cplt(Analog.raw, Analog.value);
 8004d30:	4903      	ldr	r1, [pc, #12]	@ (8004d40 <HAL_ADC_ConvCpltCallback+0x18>)
 8004d32:	4804      	ldr	r0, [pc, #16]	@ (8004d44 <HAL_ADC_ConvCpltCallback+0x1c>)
 8004d34:	f7fc f838 	bl	8000da8 <ADC_Conversion_Cplt>
}
 8004d38:	bf00      	nop
 8004d3a:	3708      	adds	r7, #8
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}
 8004d40:	2000124a 	.word	0x2000124a
 8004d44:	20001238 	.word	0x20001238

08004d48 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b082      	sub	sp, #8
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	4603      	mov	r3, r0
 8004d50:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == M1_ENC_A_Pin){
 8004d52:	88fb      	ldrh	r3, [r7, #6]
 8004d54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d58:	d102      	bne.n	8004d60 <HAL_GPIO_EXTI_Callback+0x18>
    	Encoder_Add_Pulse(&EncoderL);
 8004d5a:	4807      	ldr	r0, [pc, #28]	@ (8004d78 <HAL_GPIO_EXTI_Callback+0x30>)
 8004d5c:	f7fd f924 	bl	8001fa8 <Encoder_Add_Pulse>
    }
    if (GPIO_Pin == M2_ENC_A_Pin){
 8004d60:	88fb      	ldrh	r3, [r7, #6]
 8004d62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d66:	d102      	bne.n	8004d6e <HAL_GPIO_EXTI_Callback+0x26>
    	Encoder_Add_Pulse(&EncoderR);
 8004d68:	4804      	ldr	r0, [pc, #16]	@ (8004d7c <HAL_GPIO_EXTI_Callback+0x34>)
 8004d6a:	f7fd f91d 	bl	8001fa8 <Encoder_Add_Pulse>
	}
}
 8004d6e:	bf00      	nop
 8004d70:	3708      	adds	r7, #8
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	bf00      	nop
 8004d78:	20000d44 	.word	0x20000d44
 8004d7c:	20000d50 	.word	0x20000d50

08004d80 <HAL_UART_RxCpltCallback>:
/**************************************** END HAL CALLBACKS ***************************************/

/******************************************** ESP ***********************************************/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b082      	sub	sp, #8
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a08      	ldr	r2, [pc, #32]	@ (8004db0 <HAL_UART_RxCpltCallback+0x30>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d10a      	bne.n	8004da8 <HAL_UART_RxCpltCallback+0x28>
		ESP01_WriteRX(ESP.AT_Rx_data);
 8004d92:	4b08      	ldr	r3, [pc, #32]	@ (8004db4 <HAL_UART_RxCpltCallback+0x34>)
 8004d94:	f893 3248 	ldrb.w	r3, [r3, #584]	@ 0x248
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f7fd fd09 	bl	80027b0 <ESP01_WriteRX>
		HAL_UART_Receive_IT(&huart1, &ESP.AT_Rx_data, 1);
 8004d9e:	2201      	movs	r2, #1
 8004da0:	4905      	ldr	r1, [pc, #20]	@ (8004db8 <HAL_UART_RxCpltCallback+0x38>)
 8004da2:	4806      	ldr	r0, [pc, #24]	@ (8004dbc <HAL_UART_RxCpltCallback+0x3c>)
 8004da4:	f008 fcc2 	bl	800d72c <HAL_UART_Receive_IT>
	}
}
 8004da8:	bf00      	nop
 8004daa:	3708      	adds	r7, #8
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}
 8004db0:	40011000 	.word	0x40011000
 8004db4:	20001490 	.word	0x20001490
 8004db8:	200016d8 	.word	0x200016d8
 8004dbc:	20000cc0 	.word	0x20000cc0

08004dc0 <ESP01_UART_Transmit>:

int ESP01_UART_Transmit(uint8_t val){
 8004dc0:	b480      	push	{r7}
 8004dc2:	b083      	sub	sp, #12
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	71fb      	strb	r3, [r7, #7]
	if(__HAL_UART_GET_FLAG(&huart1, UART_FLAG_TXE)){
 8004dca:	4b09      	ldr	r3, [pc, #36]	@ (8004df0 <ESP01_UART_Transmit+0x30>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dd4:	2b80      	cmp	r3, #128	@ 0x80
 8004dd6:	d104      	bne.n	8004de2 <ESP01_UART_Transmit+0x22>
		USART1->DR = val;
 8004dd8:	4a06      	ldr	r2, [pc, #24]	@ (8004df4 <ESP01_UART_Transmit+0x34>)
 8004dda:	79fb      	ldrb	r3, [r7, #7]
 8004ddc:	6053      	str	r3, [r2, #4]
		return 1;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e000      	b.n	8004de4 <ESP01_UART_Transmit+0x24>
	}
	return 0;
 8004de2:	2300      	movs	r3, #0
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	370c      	adds	r7, #12
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr
 8004df0:	20000cc0 	.word	0x20000cc0
 8004df4:	40011000 	.word	0x40011000

08004df8 <ESP01_Data_Recived>:

void ESP01_Data_Recived(uint8_t value){
 8004df8:	b480      	push	{r7}
 8004dfa:	b083      	sub	sp, #12
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	4603      	mov	r3, r0
 8004e00:	71fb      	strb	r3, [r7, #7]
	ESP.data.Rx.buffer[ESP.data.Rx.write++] = value;
 8004e02:	4b0a      	ldr	r3, [pc, #40]	@ (8004e2c <ESP01_Data_Recived+0x34>)
 8004e04:	f893 311d 	ldrb.w	r3, [r3, #285]	@ 0x11d
 8004e08:	1c5a      	adds	r2, r3, #1
 8004e0a:	b2d1      	uxtb	r1, r2
 8004e0c:	4a07      	ldr	r2, [pc, #28]	@ (8004e2c <ESP01_Data_Recived+0x34>)
 8004e0e:	f882 111d 	strb.w	r1, [r2, #285]	@ 0x11d
 8004e12:	461a      	mov	r2, r3
 8004e14:	4b05      	ldr	r3, [pc, #20]	@ (8004e2c <ESP01_Data_Recived+0x34>)
 8004e16:	4413      	add	r3, r2
 8004e18:	79fa      	ldrb	r2, [r7, #7]
 8004e1a:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
}
 8004e1e:	bf00      	nop
 8004e20:	370c      	adds	r7, #12
 8004e22:	46bd      	mov	sp, r7
 8004e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e28:	4770      	bx	lr
 8004e2a:	bf00      	nop
 8004e2c:	20001490 	.word	0x20001490

08004e30 <writeOn_ESP>:

void writeOn_ESP(s_commData *data){
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b082      	sub	sp, #8
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
	ESP.bytesToTx = data->Tx.write - data->Tx.read;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	78da      	ldrb	r2, [r3, #3]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	789b      	ldrb	r3, [r3, #2]
 8004e40:	1ad3      	subs	r3, r2, r3
 8004e42:	b2da      	uxtb	r2, r3
 8004e44:	4b0f      	ldr	r3, [pc, #60]	@ (8004e84 <writeOn_ESP+0x54>)
 8004e46:	f883 2249 	strb.w	r2, [r3, #585]	@ 0x249
	if(ESP01_Send(data->Tx.buffer,  data->Tx.read,  ESP.bytesToTx,  RINGBUFFLENGTH) == ESP01_SEND_READY){
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	1d18      	adds	r0, r3, #4
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	789b      	ldrb	r3, [r3, #2]
 8004e52:	4619      	mov	r1, r3
 8004e54:	4b0b      	ldr	r3, [pc, #44]	@ (8004e84 <writeOn_ESP+0x54>)
 8004e56:	f893 3249 	ldrb.w	r3, [r3, #585]	@ 0x249
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004e60:	f7fd fcc6 	bl	80027f0 <ESP01_Send>
 8004e64:	4603      	mov	r3, r0
 8004e66:	2b09      	cmp	r3, #9
 8004e68:	d108      	bne.n	8004e7c <writeOn_ESP+0x4c>
		data->Tx.read += ESP.bytesToTx;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	789a      	ldrb	r2, [r3, #2]
 8004e6e:	4b05      	ldr	r3, [pc, #20]	@ (8004e84 <writeOn_ESP+0x54>)
 8004e70:	f893 3249 	ldrb.w	r3, [r3, #585]	@ 0x249
 8004e74:	4413      	add	r3, r2
 8004e76:	b2da      	uxtb	r2, r3
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	709a      	strb	r2, [r3, #2]
	}
}
 8004e7c:	bf00      	nop
 8004e7e:	3708      	adds	r7, #8
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}
 8004e84:	20001490 	.word	0x20001490

08004e88 <I2C1_DMA_Mem_Write>:
/******************************************** END ESP ***********************************************/

/*************************************** HARDWARE ABSTRACTION ************************************/
e_system I2C1_DMA_Mem_Write(uint16_t Dev_Address, uint8_t reg, uint8_t *p_Data, uint16_t _Size){
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b086      	sub	sp, #24
 8004e8c:	af02      	add	r7, sp, #8
 8004e8e:	60ba      	str	r2, [r7, #8]
 8004e90:	461a      	mov	r2, r3
 8004e92:	4603      	mov	r3, r0
 8004e94:	81fb      	strh	r3, [r7, #14]
 8004e96:	460b      	mov	r3, r1
 8004e98:	737b      	strb	r3, [r7, #13]
 8004e9a:	4613      	mov	r3, r2
 8004e9c:	80fb      	strh	r3, [r7, #6]
	return (e_system)HAL_I2C_Mem_Write_DMA(&hi2c1, Dev_Address, reg, 1, p_Data, _Size);
 8004e9e:	7b7b      	ldrb	r3, [r7, #13]
 8004ea0:	b29a      	uxth	r2, r3
 8004ea2:	89f9      	ldrh	r1, [r7, #14]
 8004ea4:	88fb      	ldrh	r3, [r7, #6]
 8004ea6:	9301      	str	r3, [sp, #4]
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	9300      	str	r3, [sp, #0]
 8004eac:	2301      	movs	r3, #1
 8004eae:	4804      	ldr	r0, [pc, #16]	@ (8004ec0 <I2C1_DMA_Mem_Write+0x38>)
 8004eb0:	f002 ff0e 	bl	8007cd0 <HAL_I2C_Mem_Write_DMA>
 8004eb4:	4603      	mov	r3, r0
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3710      	adds	r7, #16
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	bf00      	nop
 8004ec0:	20000b1c 	.word	0x20000b1c

08004ec4 <I2C1_Master_Transmit>:

e_system I2C1_Master_Transmit(uint16_t Dev_Address, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout){
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b086      	sub	sp, #24
 8004ec8:	af02      	add	r7, sp, #8
 8004eca:	60b9      	str	r1, [r7, #8]
 8004ecc:	607b      	str	r3, [r7, #4]
 8004ece:	4603      	mov	r3, r0
 8004ed0:	81fb      	strh	r3, [r7, #14]
 8004ed2:	4613      	mov	r3, r2
 8004ed4:	81bb      	strh	r3, [r7, #12]
	return (e_system)HAL_I2C_Master_Transmit(&hi2c1, Dev_Address, p_Data, _Size, _Timeout);
 8004ed6:	89ba      	ldrh	r2, [r7, #12]
 8004ed8:	89f9      	ldrh	r1, [r7, #14]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	9300      	str	r3, [sp, #0]
 8004ede:	4613      	mov	r3, r2
 8004ee0:	68ba      	ldr	r2, [r7, #8]
 8004ee2:	4804      	ldr	r0, [pc, #16]	@ (8004ef4 <I2C1_Master_Transmit+0x30>)
 8004ee4:	f002 faca 	bl	800747c <HAL_I2C_Master_Transmit>
 8004ee8:	4603      	mov	r3, r0
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3710      	adds	r7, #16
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}
 8004ef2:	bf00      	nop
 8004ef4:	20000b1c 	.word	0x20000b1c

08004ef8 <I2C1_Mem_Write>:

e_system I2C1_Mem_Write(uint16_t Dev_Address, uint8_t Mem_Adress, uint8_t Mem_AddSize, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout){
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b086      	sub	sp, #24
 8004efc:	af04      	add	r7, sp, #16
 8004efe:	603b      	str	r3, [r7, #0]
 8004f00:	4603      	mov	r3, r0
 8004f02:	80fb      	strh	r3, [r7, #6]
 8004f04:	460b      	mov	r3, r1
 8004f06:	717b      	strb	r3, [r7, #5]
 8004f08:	4613      	mov	r3, r2
 8004f0a:	713b      	strb	r3, [r7, #4]
	return HAL_I2C_Mem_Write(&hi2c1, Dev_Address, Mem_Adress, Mem_AddSize, p_Data, _Size, _Timeout);
 8004f0c:	797b      	ldrb	r3, [r7, #5]
 8004f0e:	b29a      	uxth	r2, r3
 8004f10:	793b      	ldrb	r3, [r7, #4]
 8004f12:	b298      	uxth	r0, r3
 8004f14:	88f9      	ldrh	r1, [r7, #6]
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	9302      	str	r3, [sp, #8]
 8004f1a:	8a3b      	ldrh	r3, [r7, #16]
 8004f1c:	9301      	str	r3, [sp, #4]
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	9300      	str	r3, [sp, #0]
 8004f22:	4603      	mov	r3, r0
 8004f24:	4803      	ldr	r0, [pc, #12]	@ (8004f34 <I2C1_Mem_Write+0x3c>)
 8004f26:	f002 fba7 	bl	8007678 <HAL_I2C_Mem_Write>
 8004f2a:	4603      	mov	r3, r0
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3708      	adds	r7, #8
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}
 8004f34:	20000b1c 	.word	0x20000b1c

08004f38 <I2C1_Mem_Read>:

e_system I2C1_Mem_Read(uint16_t Dev_Address, uint8_t Mem_Adress, uint8_t Mem_AddSize, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout){
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b086      	sub	sp, #24
 8004f3c:	af04      	add	r7, sp, #16
 8004f3e:	603b      	str	r3, [r7, #0]
 8004f40:	4603      	mov	r3, r0
 8004f42:	80fb      	strh	r3, [r7, #6]
 8004f44:	460b      	mov	r3, r1
 8004f46:	717b      	strb	r3, [r7, #5]
 8004f48:	4613      	mov	r3, r2
 8004f4a:	713b      	strb	r3, [r7, #4]
	return HAL_I2C_Mem_Read(&hi2c1, Dev_Address, Mem_Adress, Mem_AddSize, p_Data, _Size, _Timeout);
 8004f4c:	797b      	ldrb	r3, [r7, #5]
 8004f4e:	b29a      	uxth	r2, r3
 8004f50:	793b      	ldrb	r3, [r7, #4]
 8004f52:	b298      	uxth	r0, r3
 8004f54:	88f9      	ldrh	r1, [r7, #6]
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	9302      	str	r3, [sp, #8]
 8004f5a:	8a3b      	ldrh	r3, [r7, #16]
 8004f5c:	9301      	str	r3, [sp, #4]
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	9300      	str	r3, [sp, #0]
 8004f62:	4603      	mov	r3, r0
 8004f64:	4803      	ldr	r0, [pc, #12]	@ (8004f74 <I2C1_Mem_Read+0x3c>)
 8004f66:	f002 fc81 	bl	800786c <HAL_I2C_Mem_Read>
 8004f6a:	4603      	mov	r3, r0
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3708      	adds	r7, #8
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}
 8004f74:	20000b1c 	.word	0x20000b1c

08004f78 <setESP01_CHPD>:

void setESP01_CHPD(uint8_t val){
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b082      	sub	sp, #8
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	4603      	mov	r3, r0
 8004f80:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ESP_EN_GPIO_Port, ESP_EN_Pin, val);
 8004f82:	79fb      	ldrb	r3, [r7, #7]
 8004f84:	461a      	mov	r2, r3
 8004f86:	2104      	movs	r1, #4
 8004f88:	4803      	ldr	r0, [pc, #12]	@ (8004f98 <setESP01_CHPD+0x20>)
 8004f8a:	f002 f8d1 	bl	8007130 <HAL_GPIO_WritePin>
}
 8004f8e:	bf00      	nop
 8004f90:	3708      	adds	r7, #8
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}
 8004f96:	bf00      	nop
 8004f98:	40020400 	.word	0x40020400

08004f9c <KEY_Read_Value>:

uint8_t KEY_Read_Value(){
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin);
 8004fa0:	2101      	movs	r1, #1
 8004fa2:	4803      	ldr	r0, [pc, #12]	@ (8004fb0 <KEY_Read_Value+0x14>)
 8004fa4:	f002 f8ac 	bl	8007100 <HAL_GPIO_ReadPin>
 8004fa8:	4603      	mov	r3, r0
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	bd80      	pop	{r7, pc}
 8004fae:	bf00      	nop
 8004fb0:	40020000 	.word	0x40020000

08004fb4 <writeOn_USB>:

void writeOn_USB(s_commData *data){
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b082      	sub	sp, #8
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
	if(USB.data.Tx.write > USB.data.Tx.read){
 8004fbc:	4b19      	ldr	r3, [pc, #100]	@ (8005024 <writeOn_USB+0x70>)
 8004fbe:	78da      	ldrb	r2, [r3, #3]
 8004fc0:	4b18      	ldr	r3, [pc, #96]	@ (8005024 <writeOn_USB+0x70>)
 8004fc2:	789b      	ldrb	r3, [r3, #2]
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d909      	bls.n	8004fdc <writeOn_USB+0x28>
		USB.bytesToTx = USB.data.Tx.write - USB.data.Tx.read;
 8004fc8:	4b16      	ldr	r3, [pc, #88]	@ (8005024 <writeOn_USB+0x70>)
 8004fca:	78da      	ldrb	r2, [r3, #3]
 8004fcc:	4b15      	ldr	r3, [pc, #84]	@ (8005024 <writeOn_USB+0x70>)
 8004fce:	789b      	ldrb	r3, [r3, #2]
 8004fd0:	1ad3      	subs	r3, r2, r3
 8004fd2:	b2da      	uxtb	r2, r3
 8004fd4:	4b13      	ldr	r3, [pc, #76]	@ (8005024 <writeOn_USB+0x70>)
 8004fd6:	f883 2230 	strb.w	r2, [r3, #560]	@ 0x230
 8004fda:	e006      	b.n	8004fea <writeOn_USB+0x36>
	}else{
		USB.bytesToTx = RINGBUFFLENGTH - USB.data.Tx.read;
 8004fdc:	4b11      	ldr	r3, [pc, #68]	@ (8005024 <writeOn_USB+0x70>)
 8004fde:	789b      	ldrb	r3, [r3, #2]
 8004fe0:	425b      	negs	r3, r3
 8004fe2:	b2da      	uxtb	r2, r3
 8004fe4:	4b0f      	ldr	r3, [pc, #60]	@ (8005024 <writeOn_USB+0x70>)
 8004fe6:	f883 2230 	strb.w	r2, [r3, #560]	@ 0x230
	}
	if(CDC_Transmit_FS(&USB.data.Tx.buffer[USB.data.Tx.read], USB.bytesToTx) == USBD_OK){
 8004fea:	4b0e      	ldr	r3, [pc, #56]	@ (8005024 <writeOn_USB+0x70>)
 8004fec:	789b      	ldrb	r3, [r3, #2]
 8004fee:	461a      	mov	r2, r3
 8004ff0:	4b0c      	ldr	r3, [pc, #48]	@ (8005024 <writeOn_USB+0x70>)
 8004ff2:	4413      	add	r3, r2
 8004ff4:	3304      	adds	r3, #4
 8004ff6:	4a0b      	ldr	r2, [pc, #44]	@ (8005024 <writeOn_USB+0x70>)
 8004ff8:	f892 2230 	ldrb.w	r2, [r2, #560]	@ 0x230
 8004ffc:	4611      	mov	r1, r2
 8004ffe:	4618      	mov	r0, r3
 8005000:	f00c feec 	bl	8011ddc <CDC_Transmit_FS>
 8005004:	4603      	mov	r3, r0
 8005006:	2b00      	cmp	r3, #0
 8005008:	d108      	bne.n	800501c <writeOn_USB+0x68>
		USB.data.Tx.read += USB.bytesToTx;
 800500a:	4b06      	ldr	r3, [pc, #24]	@ (8005024 <writeOn_USB+0x70>)
 800500c:	789a      	ldrb	r2, [r3, #2]
 800500e:	4b05      	ldr	r3, [pc, #20]	@ (8005024 <writeOn_USB+0x70>)
 8005010:	f893 3230 	ldrb.w	r3, [r3, #560]	@ 0x230
 8005014:	4413      	add	r3, r2
 8005016:	b2da      	uxtb	r2, r3
 8005018:	4b02      	ldr	r3, [pc, #8]	@ (8005024 <writeOn_USB+0x70>)
 800501a:	709a      	strb	r2, [r3, #2]
	}
}
 800501c:	bf00      	nop
 800501e:	3708      	adds	r7, #8
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}
 8005024:	2000125c 	.word	0x2000125c

08005028 <dataRxOn_USB>:

void dataRxOn_USB(uint8_t *buff, uint32_t len){
 8005028:	b480      	push	{r7}
 800502a:	b085      	sub	sp, #20
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
 8005030:	6039      	str	r1, [r7, #0]
	if(buff != NULL){
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d01a      	beq.n	800506e <dataRxOn_USB+0x46>
		for(uint16_t i = 0; i < len; i++){
 8005038:	2300      	movs	r3, #0
 800503a:	81fb      	strh	r3, [r7, #14]
 800503c:	e013      	b.n	8005066 <dataRxOn_USB+0x3e>
			USB.data.Rx.buffer[USB.data.Rx.write++] = buff[i];
 800503e:	89fb      	ldrh	r3, [r7, #14]
 8005040:	687a      	ldr	r2, [r7, #4]
 8005042:	441a      	add	r2, r3
 8005044:	4b0d      	ldr	r3, [pc, #52]	@ (800507c <dataRxOn_USB+0x54>)
 8005046:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 800504a:	1c59      	adds	r1, r3, #1
 800504c:	b2c8      	uxtb	r0, r1
 800504e:	490b      	ldr	r1, [pc, #44]	@ (800507c <dataRxOn_USB+0x54>)
 8005050:	f881 0105 	strb.w	r0, [r1, #261]	@ 0x105
 8005054:	4619      	mov	r1, r3
 8005056:	7812      	ldrb	r2, [r2, #0]
 8005058:	4b08      	ldr	r3, [pc, #32]	@ (800507c <dataRxOn_USB+0x54>)
 800505a:	440b      	add	r3, r1
 800505c:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
		for(uint16_t i = 0; i < len; i++){
 8005060:	89fb      	ldrh	r3, [r7, #14]
 8005062:	3301      	adds	r3, #1
 8005064:	81fb      	strh	r3, [r7, #14]
 8005066:	89fb      	ldrh	r3, [r7, #14]
 8005068:	683a      	ldr	r2, [r7, #0]
 800506a:	429a      	cmp	r2, r3
 800506c:	d8e7      	bhi.n	800503e <dataRxOn_USB+0x16>
		}
	}
}
 800506e:	bf00      	nop
 8005070:	3714      	adds	r7, #20
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr
 800507a:	bf00      	nop
 800507c:	2000125c 	.word	0x2000125c

08005080 <Motor_Left_SetPins>:

void Motor_Left_SetPins(uint8_t pinA, uint8_t pinB){
 8005080:	b580      	push	{r7, lr}
 8005082:	b082      	sub	sp, #8
 8005084:	af00      	add	r7, sp, #0
 8005086:	4603      	mov	r3, r0
 8005088:	460a      	mov	r2, r1
 800508a:	71fb      	strb	r3, [r7, #7]
 800508c:	4613      	mov	r3, r2
 800508e:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(M1_IN1_GPIO_Port, M1_IN1_Pin, pinA);
 8005090:	79fb      	ldrb	r3, [r7, #7]
 8005092:	461a      	mov	r2, r3
 8005094:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005098:	4806      	ldr	r0, [pc, #24]	@ (80050b4 <Motor_Left_SetPins+0x34>)
 800509a:	f002 f849 	bl	8007130 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(M1_IN2_GPIO_Port, M1_IN2_Pin, pinB);
 800509e:	79bb      	ldrb	r3, [r7, #6]
 80050a0:	461a      	mov	r2, r3
 80050a2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80050a6:	4803      	ldr	r0, [pc, #12]	@ (80050b4 <Motor_Left_SetPins+0x34>)
 80050a8:	f002 f842 	bl	8007130 <HAL_GPIO_WritePin>
}
 80050ac:	bf00      	nop
 80050ae:	3708      	adds	r7, #8
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}
 80050b4:	40020000 	.word	0x40020000

080050b8 <Motor_Right_SetPins>:

void Motor_Right_SetPins(uint8_t pinA, uint8_t pinB){
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b082      	sub	sp, #8
 80050bc:	af00      	add	r7, sp, #0
 80050be:	4603      	mov	r3, r0
 80050c0:	460a      	mov	r2, r1
 80050c2:	71fb      	strb	r3, [r7, #7]
 80050c4:	4613      	mov	r3, r2
 80050c6:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(M2_IN1_GPIO_Port, M2_IN1_Pin, pinA);
 80050c8:	79fb      	ldrb	r3, [r7, #7]
 80050ca:	461a      	mov	r2, r3
 80050cc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80050d0:	4806      	ldr	r0, [pc, #24]	@ (80050ec <Motor_Right_SetPins+0x34>)
 80050d2:	f002 f82d 	bl	8007130 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(M2_IN2_GPIO_Port, M2_IN2_Pin, pinB);
 80050d6:	79bb      	ldrb	r3, [r7, #6]
 80050d8:	461a      	mov	r2, r3
 80050da:	2108      	movs	r1, #8
 80050dc:	4804      	ldr	r0, [pc, #16]	@ (80050f0 <Motor_Right_SetPins+0x38>)
 80050de:	f002 f827 	bl	8007130 <HAL_GPIO_WritePin>
}
 80050e2:	bf00      	nop
 80050e4:	3708      	adds	r7, #8
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
 80050ea:	bf00      	nop
 80050ec:	40020000 	.word	0x40020000
 80050f0:	40020400 	.word	0x40020400

080050f4 <Motor_Left_SetPWM>:

void Motor_Left_SetPWM(uint16_t dCycle){
 80050f4:	b480      	push	{r7}
 80050f6:	b083      	sub	sp, #12
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	4603      	mov	r3, r0
 80050fc:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, dCycle);
 80050fe:	4b05      	ldr	r3, [pc, #20]	@ (8005114 <Motor_Left_SetPWM+0x20>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	88fa      	ldrh	r2, [r7, #6]
 8005104:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8005106:	bf00      	nop
 8005108:	370c      	adds	r7, #12
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr
 8005112:	bf00      	nop
 8005114:	20000c78 	.word	0x20000c78

08005118 <Motor_Right_SetPWM>:

void Motor_Right_SetPWM(uint16_t dCycle){
 8005118:	b480      	push	{r7}
 800511a:	b083      	sub	sp, #12
 800511c:	af00      	add	r7, sp, #0
 800511e:	4603      	mov	r3, r0
 8005120:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, dCycle);
 8005122:	4b05      	ldr	r3, [pc, #20]	@ (8005138 <Motor_Right_SetPWM+0x20>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	88fa      	ldrh	r2, [r7, #6]
 8005128:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800512a:	bf00      	nop
 800512c:	370c      	adds	r7, #12
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr
 8005136:	bf00      	nop
 8005138:	20000c78 	.word	0x20000c78

0800513c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800513c:	b480      	push	{r7}
 800513e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005140:	b672      	cpsid	i
}
 8005142:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005144:	bf00      	nop
 8005146:	e7fd      	b.n	8005144 <Error_Handler+0x8>

08005148 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b082      	sub	sp, #8
 800514c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800514e:	2300      	movs	r3, #0
 8005150:	607b      	str	r3, [r7, #4]
 8005152:	4b13      	ldr	r3, [pc, #76]	@ (80051a0 <HAL_MspInit+0x58>)
 8005154:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005156:	4a12      	ldr	r2, [pc, #72]	@ (80051a0 <HAL_MspInit+0x58>)
 8005158:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800515c:	6453      	str	r3, [r2, #68]	@ 0x44
 800515e:	4b10      	ldr	r3, [pc, #64]	@ (80051a0 <HAL_MspInit+0x58>)
 8005160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005162:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005166:	607b      	str	r3, [r7, #4]
 8005168:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800516a:	2300      	movs	r3, #0
 800516c:	603b      	str	r3, [r7, #0]
 800516e:	4b0c      	ldr	r3, [pc, #48]	@ (80051a0 <HAL_MspInit+0x58>)
 8005170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005172:	4a0b      	ldr	r2, [pc, #44]	@ (80051a0 <HAL_MspInit+0x58>)
 8005174:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005178:	6413      	str	r3, [r2, #64]	@ 0x40
 800517a:	4b09      	ldr	r3, [pc, #36]	@ (80051a0 <HAL_MspInit+0x58>)
 800517c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800517e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005182:	603b      	str	r3, [r7, #0]
 8005184:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 0, 0);
 8005186:	2200      	movs	r2, #0
 8005188:	2100      	movs	r1, #0
 800518a:	2051      	movs	r0, #81	@ 0x51
 800518c:	f001 f9e1 	bl	8006552 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8005190:	2051      	movs	r0, #81	@ 0x51
 8005192:	f001 f9fa 	bl	800658a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005196:	bf00      	nop
 8005198:	3708      	adds	r7, #8
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}
 800519e:	bf00      	nop
 80051a0:	40023800 	.word	0x40023800

080051a4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b08a      	sub	sp, #40	@ 0x28
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051ac:	f107 0314 	add.w	r3, r7, #20
 80051b0:	2200      	movs	r2, #0
 80051b2:	601a      	str	r2, [r3, #0]
 80051b4:	605a      	str	r2, [r3, #4]
 80051b6:	609a      	str	r2, [r3, #8]
 80051b8:	60da      	str	r2, [r3, #12]
 80051ba:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a40      	ldr	r2, [pc, #256]	@ (80052c4 <HAL_ADC_MspInit+0x120>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d179      	bne.n	80052ba <HAL_ADC_MspInit+0x116>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80051c6:	2300      	movs	r3, #0
 80051c8:	613b      	str	r3, [r7, #16]
 80051ca:	4b3f      	ldr	r3, [pc, #252]	@ (80052c8 <HAL_ADC_MspInit+0x124>)
 80051cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051ce:	4a3e      	ldr	r2, [pc, #248]	@ (80052c8 <HAL_ADC_MspInit+0x124>)
 80051d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80051d6:	4b3c      	ldr	r3, [pc, #240]	@ (80052c8 <HAL_ADC_MspInit+0x124>)
 80051d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051de:	613b      	str	r3, [r7, #16]
 80051e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80051e2:	2300      	movs	r3, #0
 80051e4:	60fb      	str	r3, [r7, #12]
 80051e6:	4b38      	ldr	r3, [pc, #224]	@ (80052c8 <HAL_ADC_MspInit+0x124>)
 80051e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051ea:	4a37      	ldr	r2, [pc, #220]	@ (80052c8 <HAL_ADC_MspInit+0x124>)
 80051ec:	f043 0301 	orr.w	r3, r3, #1
 80051f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80051f2:	4b35      	ldr	r3, [pc, #212]	@ (80052c8 <HAL_ADC_MspInit+0x124>)
 80051f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051f6:	f003 0301 	and.w	r3, r3, #1
 80051fa:	60fb      	str	r3, [r7, #12]
 80051fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80051fe:	2300      	movs	r3, #0
 8005200:	60bb      	str	r3, [r7, #8]
 8005202:	4b31      	ldr	r3, [pc, #196]	@ (80052c8 <HAL_ADC_MspInit+0x124>)
 8005204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005206:	4a30      	ldr	r2, [pc, #192]	@ (80052c8 <HAL_ADC_MspInit+0x124>)
 8005208:	f043 0302 	orr.w	r3, r3, #2
 800520c:	6313      	str	r3, [r2, #48]	@ 0x30
 800520e:	4b2e      	ldr	r3, [pc, #184]	@ (80052c8 <HAL_ADC_MspInit+0x124>)
 8005210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005212:	f003 0302 	and.w	r3, r3, #2
 8005216:	60bb      	str	r3, [r7, #8]
 8005218:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = LF1_Pin|LF2_Pin|LF3_Pin|LF4_Pin
 800521a:	23fe      	movs	r3, #254	@ 0xfe
 800521c:	617b      	str	r3, [r7, #20]
                          |WD1_Pin|WD2_Pin|WD3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800521e:	2303      	movs	r3, #3
 8005220:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005222:	2300      	movs	r3, #0
 8005224:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005226:	f107 0314 	add.w	r3, r7, #20
 800522a:	4619      	mov	r1, r3
 800522c:	4827      	ldr	r0, [pc, #156]	@ (80052cc <HAL_ADC_MspInit+0x128>)
 800522e:	f001 fde3 	bl	8006df8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = WD4_Pin|BAT_LVL_Pin;
 8005232:	2303      	movs	r3, #3
 8005234:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005236:	2303      	movs	r3, #3
 8005238:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800523a:	2300      	movs	r3, #0
 800523c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800523e:	f107 0314 	add.w	r3, r7, #20
 8005242:	4619      	mov	r1, r3
 8005244:	4822      	ldr	r0, [pc, #136]	@ (80052d0 <HAL_ADC_MspInit+0x12c>)
 8005246:	f001 fdd7 	bl	8006df8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800524a:	4b22      	ldr	r3, [pc, #136]	@ (80052d4 <HAL_ADC_MspInit+0x130>)
 800524c:	4a22      	ldr	r2, [pc, #136]	@ (80052d8 <HAL_ADC_MspInit+0x134>)
 800524e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8005250:	4b20      	ldr	r3, [pc, #128]	@ (80052d4 <HAL_ADC_MspInit+0x130>)
 8005252:	2200      	movs	r2, #0
 8005254:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005256:	4b1f      	ldr	r3, [pc, #124]	@ (80052d4 <HAL_ADC_MspInit+0x130>)
 8005258:	2200      	movs	r2, #0
 800525a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800525c:	4b1d      	ldr	r3, [pc, #116]	@ (80052d4 <HAL_ADC_MspInit+0x130>)
 800525e:	2200      	movs	r2, #0
 8005260:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8005262:	4b1c      	ldr	r3, [pc, #112]	@ (80052d4 <HAL_ADC_MspInit+0x130>)
 8005264:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005268:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800526a:	4b1a      	ldr	r3, [pc, #104]	@ (80052d4 <HAL_ADC_MspInit+0x130>)
 800526c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005270:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005272:	4b18      	ldr	r3, [pc, #96]	@ (80052d4 <HAL_ADC_MspInit+0x130>)
 8005274:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005278:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800527a:	4b16      	ldr	r3, [pc, #88]	@ (80052d4 <HAL_ADC_MspInit+0x130>)
 800527c:	2200      	movs	r2, #0
 800527e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8005280:	4b14      	ldr	r3, [pc, #80]	@ (80052d4 <HAL_ADC_MspInit+0x130>)
 8005282:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8005286:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005288:	4b12      	ldr	r3, [pc, #72]	@ (80052d4 <HAL_ADC_MspInit+0x130>)
 800528a:	2200      	movs	r2, #0
 800528c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800528e:	4811      	ldr	r0, [pc, #68]	@ (80052d4 <HAL_ADC_MspInit+0x130>)
 8005290:	f001 f996 	bl	80065c0 <HAL_DMA_Init>
 8005294:	4603      	mov	r3, r0
 8005296:	2b00      	cmp	r3, #0
 8005298:	d001      	beq.n	800529e <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800529a:	f7ff ff4f 	bl	800513c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	4a0c      	ldr	r2, [pc, #48]	@ (80052d4 <HAL_ADC_MspInit+0x130>)
 80052a2:	639a      	str	r2, [r3, #56]	@ 0x38
 80052a4:	4a0b      	ldr	r2, [pc, #44]	@ (80052d4 <HAL_ADC_MspInit+0x130>)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80052aa:	2200      	movs	r2, #0
 80052ac:	2100      	movs	r1, #0
 80052ae:	2012      	movs	r0, #18
 80052b0:	f001 f94f 	bl	8006552 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80052b4:	2012      	movs	r0, #18
 80052b6:	f001 f968 	bl	800658a <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80052ba:	bf00      	nop
 80052bc:	3728      	adds	r7, #40	@ 0x28
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}
 80052c2:	bf00      	nop
 80052c4:	40012000 	.word	0x40012000
 80052c8:	40023800 	.word	0x40023800
 80052cc:	40020000 	.word	0x40020000
 80052d0:	40020400 	.word	0x40020400
 80052d4:	20000abc 	.word	0x20000abc
 80052d8:	40026410 	.word	0x40026410

080052dc <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b08a      	sub	sp, #40	@ 0x28
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052e4:	f107 0314 	add.w	r3, r7, #20
 80052e8:	2200      	movs	r2, #0
 80052ea:	601a      	str	r2, [r3, #0]
 80052ec:	605a      	str	r2, [r3, #4]
 80052ee:	609a      	str	r2, [r3, #8]
 80052f0:	60da      	str	r2, [r3, #12]
 80052f2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a50      	ldr	r2, [pc, #320]	@ (800543c <HAL_I2C_MspInit+0x160>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	f040 8099 	bne.w	8005432 <HAL_I2C_MspInit+0x156>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005300:	2300      	movs	r3, #0
 8005302:	613b      	str	r3, [r7, #16]
 8005304:	4b4e      	ldr	r3, [pc, #312]	@ (8005440 <HAL_I2C_MspInit+0x164>)
 8005306:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005308:	4a4d      	ldr	r2, [pc, #308]	@ (8005440 <HAL_I2C_MspInit+0x164>)
 800530a:	f043 0302 	orr.w	r3, r3, #2
 800530e:	6313      	str	r3, [r2, #48]	@ 0x30
 8005310:	4b4b      	ldr	r3, [pc, #300]	@ (8005440 <HAL_I2C_MspInit+0x164>)
 8005312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005314:	f003 0302 	and.w	r3, r3, #2
 8005318:	613b      	str	r3, [r7, #16]
 800531a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 800531c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8005320:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005322:	2312      	movs	r3, #18
 8005324:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005326:	2300      	movs	r3, #0
 8005328:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800532a:	2303      	movs	r3, #3
 800532c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800532e:	2304      	movs	r3, #4
 8005330:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005332:	f107 0314 	add.w	r3, r7, #20
 8005336:	4619      	mov	r1, r3
 8005338:	4842      	ldr	r0, [pc, #264]	@ (8005444 <HAL_I2C_MspInit+0x168>)
 800533a:	f001 fd5d 	bl	8006df8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800533e:	2300      	movs	r3, #0
 8005340:	60fb      	str	r3, [r7, #12]
 8005342:	4b3f      	ldr	r3, [pc, #252]	@ (8005440 <HAL_I2C_MspInit+0x164>)
 8005344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005346:	4a3e      	ldr	r2, [pc, #248]	@ (8005440 <HAL_I2C_MspInit+0x164>)
 8005348:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800534c:	6413      	str	r3, [r2, #64]	@ 0x40
 800534e:	4b3c      	ldr	r3, [pc, #240]	@ (8005440 <HAL_I2C_MspInit+0x164>)
 8005350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005352:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005356:	60fb      	str	r3, [r7, #12]
 8005358:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 800535a:	4b3b      	ldr	r3, [pc, #236]	@ (8005448 <HAL_I2C_MspInit+0x16c>)
 800535c:	4a3b      	ldr	r2, [pc, #236]	@ (800544c <HAL_I2C_MspInit+0x170>)
 800535e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 8005360:	4b39      	ldr	r3, [pc, #228]	@ (8005448 <HAL_I2C_MspInit+0x16c>)
 8005362:	2200      	movs	r2, #0
 8005364:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005366:	4b38      	ldr	r3, [pc, #224]	@ (8005448 <HAL_I2C_MspInit+0x16c>)
 8005368:	2240      	movs	r2, #64	@ 0x40
 800536a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800536c:	4b36      	ldr	r3, [pc, #216]	@ (8005448 <HAL_I2C_MspInit+0x16c>)
 800536e:	2200      	movs	r2, #0
 8005370:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005372:	4b35      	ldr	r3, [pc, #212]	@ (8005448 <HAL_I2C_MspInit+0x16c>)
 8005374:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005378:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800537a:	4b33      	ldr	r3, [pc, #204]	@ (8005448 <HAL_I2C_MspInit+0x16c>)
 800537c:	2200      	movs	r2, #0
 800537e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005380:	4b31      	ldr	r3, [pc, #196]	@ (8005448 <HAL_I2C_MspInit+0x16c>)
 8005382:	2200      	movs	r2, #0
 8005384:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8005386:	4b30      	ldr	r3, [pc, #192]	@ (8005448 <HAL_I2C_MspInit+0x16c>)
 8005388:	2200      	movs	r2, #0
 800538a:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800538c:	4b2e      	ldr	r3, [pc, #184]	@ (8005448 <HAL_I2C_MspInit+0x16c>)
 800538e:	2200      	movs	r2, #0
 8005390:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005392:	4b2d      	ldr	r3, [pc, #180]	@ (8005448 <HAL_I2C_MspInit+0x16c>)
 8005394:	2200      	movs	r2, #0
 8005396:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8005398:	482b      	ldr	r0, [pc, #172]	@ (8005448 <HAL_I2C_MspInit+0x16c>)
 800539a:	f001 f911 	bl	80065c0 <HAL_DMA_Init>
 800539e:	4603      	mov	r3, r0
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d001      	beq.n	80053a8 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 80053a4:	f7ff feca 	bl	800513c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	4a27      	ldr	r2, [pc, #156]	@ (8005448 <HAL_I2C_MspInit+0x16c>)
 80053ac:	635a      	str	r2, [r3, #52]	@ 0x34
 80053ae:	4a26      	ldr	r2, [pc, #152]	@ (8005448 <HAL_I2C_MspInit+0x16c>)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80053b4:	4b26      	ldr	r3, [pc, #152]	@ (8005450 <HAL_I2C_MspInit+0x174>)
 80053b6:	4a27      	ldr	r2, [pc, #156]	@ (8005454 <HAL_I2C_MspInit+0x178>)
 80053b8:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80053ba:	4b25      	ldr	r3, [pc, #148]	@ (8005450 <HAL_I2C_MspInit+0x174>)
 80053bc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80053c0:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80053c2:	4b23      	ldr	r3, [pc, #140]	@ (8005450 <HAL_I2C_MspInit+0x174>)
 80053c4:	2200      	movs	r2, #0
 80053c6:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80053c8:	4b21      	ldr	r3, [pc, #132]	@ (8005450 <HAL_I2C_MspInit+0x174>)
 80053ca:	2200      	movs	r2, #0
 80053cc:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80053ce:	4b20      	ldr	r3, [pc, #128]	@ (8005450 <HAL_I2C_MspInit+0x174>)
 80053d0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80053d4:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80053d6:	4b1e      	ldr	r3, [pc, #120]	@ (8005450 <HAL_I2C_MspInit+0x174>)
 80053d8:	2200      	movs	r2, #0
 80053da:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80053dc:	4b1c      	ldr	r3, [pc, #112]	@ (8005450 <HAL_I2C_MspInit+0x174>)
 80053de:	2200      	movs	r2, #0
 80053e0:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80053e2:	4b1b      	ldr	r3, [pc, #108]	@ (8005450 <HAL_I2C_MspInit+0x174>)
 80053e4:	2200      	movs	r2, #0
 80053e6:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80053e8:	4b19      	ldr	r3, [pc, #100]	@ (8005450 <HAL_I2C_MspInit+0x174>)
 80053ea:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80053ee:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80053f0:	4b17      	ldr	r3, [pc, #92]	@ (8005450 <HAL_I2C_MspInit+0x174>)
 80053f2:	2200      	movs	r2, #0
 80053f4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80053f6:	4816      	ldr	r0, [pc, #88]	@ (8005450 <HAL_I2C_MspInit+0x174>)
 80053f8:	f001 f8e2 	bl	80065c0 <HAL_DMA_Init>
 80053fc:	4603      	mov	r3, r0
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d001      	beq.n	8005406 <HAL_I2C_MspInit+0x12a>
    {
      Error_Handler();
 8005402:	f7ff fe9b 	bl	800513c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	4a11      	ldr	r2, [pc, #68]	@ (8005450 <HAL_I2C_MspInit+0x174>)
 800540a:	639a      	str	r2, [r3, #56]	@ 0x38
 800540c:	4a10      	ldr	r2, [pc, #64]	@ (8005450 <HAL_I2C_MspInit+0x174>)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8005412:	2200      	movs	r2, #0
 8005414:	2100      	movs	r1, #0
 8005416:	201f      	movs	r0, #31
 8005418:	f001 f89b 	bl	8006552 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800541c:	201f      	movs	r0, #31
 800541e:	f001 f8b4 	bl	800658a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8005422:	2200      	movs	r2, #0
 8005424:	2100      	movs	r1, #0
 8005426:	2020      	movs	r0, #32
 8005428:	f001 f893 	bl	8006552 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800542c:	2020      	movs	r0, #32
 800542e:	f001 f8ac 	bl	800658a <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8005432:	bf00      	nop
 8005434:	3728      	adds	r7, #40	@ 0x28
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}
 800543a:	bf00      	nop
 800543c:	40005400 	.word	0x40005400
 8005440:	40023800 	.word	0x40023800
 8005444:	40020400 	.word	0x40020400
 8005448:	20000b70 	.word	0x20000b70
 800544c:	40026028 	.word	0x40026028
 8005450:	20000bd0 	.word	0x20000bd0
 8005454:	40026010 	.word	0x40026010

08005458 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b084      	sub	sp, #16
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a1c      	ldr	r2, [pc, #112]	@ (80054d8 <HAL_TIM_Base_MspInit+0x80>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d116      	bne.n	8005498 <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800546a:	2300      	movs	r3, #0
 800546c:	60fb      	str	r3, [r7, #12]
 800546e:	4b1b      	ldr	r3, [pc, #108]	@ (80054dc <HAL_TIM_Base_MspInit+0x84>)
 8005470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005472:	4a1a      	ldr	r2, [pc, #104]	@ (80054dc <HAL_TIM_Base_MspInit+0x84>)
 8005474:	f043 0301 	orr.w	r3, r3, #1
 8005478:	6453      	str	r3, [r2, #68]	@ 0x44
 800547a:	4b18      	ldr	r3, [pc, #96]	@ (80054dc <HAL_TIM_Base_MspInit+0x84>)
 800547c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800547e:	f003 0301 	and.w	r3, r3, #1
 8005482:	60fb      	str	r3, [r7, #12]
 8005484:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8005486:	2200      	movs	r2, #0
 8005488:	2100      	movs	r1, #0
 800548a:	2019      	movs	r0, #25
 800548c:	f001 f861 	bl	8006552 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8005490:	2019      	movs	r0, #25
 8005492:	f001 f87a 	bl	800658a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 8005496:	e01a      	b.n	80054ce <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a10      	ldr	r2, [pc, #64]	@ (80054e0 <HAL_TIM_Base_MspInit+0x88>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d115      	bne.n	80054ce <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80054a2:	2300      	movs	r3, #0
 80054a4:	60bb      	str	r3, [r7, #8]
 80054a6:	4b0d      	ldr	r3, [pc, #52]	@ (80054dc <HAL_TIM_Base_MspInit+0x84>)
 80054a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054aa:	4a0c      	ldr	r2, [pc, #48]	@ (80054dc <HAL_TIM_Base_MspInit+0x84>)
 80054ac:	f043 0302 	orr.w	r3, r3, #2
 80054b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80054b2:	4b0a      	ldr	r3, [pc, #40]	@ (80054dc <HAL_TIM_Base_MspInit+0x84>)
 80054b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054b6:	f003 0302 	and.w	r3, r3, #2
 80054ba:	60bb      	str	r3, [r7, #8]
 80054bc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80054be:	2200      	movs	r2, #0
 80054c0:	2100      	movs	r1, #0
 80054c2:	201d      	movs	r0, #29
 80054c4:	f001 f845 	bl	8006552 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80054c8:	201d      	movs	r0, #29
 80054ca:	f001 f85e 	bl	800658a <HAL_NVIC_EnableIRQ>
}
 80054ce:	bf00      	nop
 80054d0:	3710      	adds	r7, #16
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}
 80054d6:	bf00      	nop
 80054d8:	40010000 	.word	0x40010000
 80054dc:	40023800 	.word	0x40023800
 80054e0:	40000400 	.word	0x40000400

080054e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b088      	sub	sp, #32
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054ec:	f107 030c 	add.w	r3, r7, #12
 80054f0:	2200      	movs	r2, #0
 80054f2:	601a      	str	r2, [r3, #0]
 80054f4:	605a      	str	r2, [r3, #4]
 80054f6:	609a      	str	r2, [r3, #8]
 80054f8:	60da      	str	r2, [r3, #12]
 80054fa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a12      	ldr	r2, [pc, #72]	@ (800554c <HAL_TIM_MspPostInit+0x68>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d11d      	bne.n	8005542 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005506:	2300      	movs	r3, #0
 8005508:	60bb      	str	r3, [r7, #8]
 800550a:	4b11      	ldr	r3, [pc, #68]	@ (8005550 <HAL_TIM_MspPostInit+0x6c>)
 800550c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800550e:	4a10      	ldr	r2, [pc, #64]	@ (8005550 <HAL_TIM_MspPostInit+0x6c>)
 8005510:	f043 0302 	orr.w	r3, r3, #2
 8005514:	6313      	str	r3, [r2, #48]	@ 0x30
 8005516:	4b0e      	ldr	r3, [pc, #56]	@ (8005550 <HAL_TIM_MspPostInit+0x6c>)
 8005518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800551a:	f003 0302 	and.w	r3, r3, #2
 800551e:	60bb      	str	r3, [r7, #8]
 8005520:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = M1_PWM_Pin|M2_PWM_Pin;
 8005522:	2330      	movs	r3, #48	@ 0x30
 8005524:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005526:	2302      	movs	r3, #2
 8005528:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800552a:	2300      	movs	r3, #0
 800552c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800552e:	2300      	movs	r3, #0
 8005530:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005532:	2302      	movs	r3, #2
 8005534:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005536:	f107 030c 	add.w	r3, r7, #12
 800553a:	4619      	mov	r1, r3
 800553c:	4805      	ldr	r0, [pc, #20]	@ (8005554 <HAL_TIM_MspPostInit+0x70>)
 800553e:	f001 fc5b 	bl	8006df8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8005542:	bf00      	nop
 8005544:	3720      	adds	r7, #32
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}
 800554a:	bf00      	nop
 800554c:	40000400 	.word	0x40000400
 8005550:	40023800 	.word	0x40023800
 8005554:	40020400 	.word	0x40020400

08005558 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b08a      	sub	sp, #40	@ 0x28
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005560:	f107 0314 	add.w	r3, r7, #20
 8005564:	2200      	movs	r2, #0
 8005566:	601a      	str	r2, [r3, #0]
 8005568:	605a      	str	r2, [r3, #4]
 800556a:	609a      	str	r2, [r3, #8]
 800556c:	60da      	str	r2, [r3, #12]
 800556e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a1d      	ldr	r2, [pc, #116]	@ (80055ec <HAL_UART_MspInit+0x94>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d133      	bne.n	80055e2 <HAL_UART_MspInit+0x8a>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800557a:	2300      	movs	r3, #0
 800557c:	613b      	str	r3, [r7, #16]
 800557e:	4b1c      	ldr	r3, [pc, #112]	@ (80055f0 <HAL_UART_MspInit+0x98>)
 8005580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005582:	4a1b      	ldr	r2, [pc, #108]	@ (80055f0 <HAL_UART_MspInit+0x98>)
 8005584:	f043 0310 	orr.w	r3, r3, #16
 8005588:	6453      	str	r3, [r2, #68]	@ 0x44
 800558a:	4b19      	ldr	r3, [pc, #100]	@ (80055f0 <HAL_UART_MspInit+0x98>)
 800558c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800558e:	f003 0310 	and.w	r3, r3, #16
 8005592:	613b      	str	r3, [r7, #16]
 8005594:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005596:	2300      	movs	r3, #0
 8005598:	60fb      	str	r3, [r7, #12]
 800559a:	4b15      	ldr	r3, [pc, #84]	@ (80055f0 <HAL_UART_MspInit+0x98>)
 800559c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800559e:	4a14      	ldr	r2, [pc, #80]	@ (80055f0 <HAL_UART_MspInit+0x98>)
 80055a0:	f043 0302 	orr.w	r3, r3, #2
 80055a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80055a6:	4b12      	ldr	r3, [pc, #72]	@ (80055f0 <HAL_UART_MspInit+0x98>)
 80055a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055aa:	f003 0302 	and.w	r3, r3, #2
 80055ae:	60fb      	str	r3, [r7, #12]
 80055b0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ESP_RX_Pin|ESP_TX_Pin;
 80055b2:	23c0      	movs	r3, #192	@ 0xc0
 80055b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055b6:	2302      	movs	r3, #2
 80055b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055ba:	2300      	movs	r3, #0
 80055bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80055be:	2303      	movs	r3, #3
 80055c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80055c2:	2307      	movs	r3, #7
 80055c4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80055c6:	f107 0314 	add.w	r3, r7, #20
 80055ca:	4619      	mov	r1, r3
 80055cc:	4809      	ldr	r0, [pc, #36]	@ (80055f4 <HAL_UART_MspInit+0x9c>)
 80055ce:	f001 fc13 	bl	8006df8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80055d2:	2200      	movs	r2, #0
 80055d4:	2100      	movs	r1, #0
 80055d6:	2025      	movs	r0, #37	@ 0x25
 80055d8:	f000 ffbb 	bl	8006552 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80055dc:	2025      	movs	r0, #37	@ 0x25
 80055de:	f000 ffd4 	bl	800658a <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80055e2:	bf00      	nop
 80055e4:	3728      	adds	r7, #40	@ 0x28
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}
 80055ea:	bf00      	nop
 80055ec:	40011000 	.word	0x40011000
 80055f0:	40023800 	.word	0x40023800
 80055f4:	40020400 	.word	0x40020400

080055f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80055fc:	f007 f874 	bl	800c6e8 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005600:	bf00      	nop
 8005602:	e7fd      	b.n	8005600 <NMI_Handler+0x8>

08005604 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005604:	b480      	push	{r7}
 8005606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005608:	bf00      	nop
 800560a:	e7fd      	b.n	8005608 <HardFault_Handler+0x4>

0800560c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800560c:	b480      	push	{r7}
 800560e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005610:	bf00      	nop
 8005612:	e7fd      	b.n	8005610 <MemManage_Handler+0x4>

08005614 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005614:	b480      	push	{r7}
 8005616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005618:	bf00      	nop
 800561a:	e7fd      	b.n	8005618 <BusFault_Handler+0x4>

0800561c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800561c:	b480      	push	{r7}
 800561e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005620:	bf00      	nop
 8005622:	e7fd      	b.n	8005620 <UsageFault_Handler+0x4>

08005624 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005624:	b480      	push	{r7}
 8005626:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005628:	bf00      	nop
 800562a:	46bd      	mov	sp, r7
 800562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005630:	4770      	bx	lr

08005632 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005632:	b480      	push	{r7}
 8005634:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005636:	bf00      	nop
 8005638:	46bd      	mov	sp, r7
 800563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563e:	4770      	bx	lr

08005640 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005640:	b480      	push	{r7}
 8005642:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005644:	bf00      	nop
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr

0800564e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800564e:	b580      	push	{r7, lr}
 8005650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005652:	f000 f943 	bl	80058dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005656:	bf00      	nop
 8005658:	bd80      	pop	{r7, pc}
	...

0800565c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8005660:	4802      	ldr	r0, [pc, #8]	@ (800566c <DMA1_Stream0_IRQHandler+0x10>)
 8005662:	f001 f945 	bl	80068f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8005666:	bf00      	nop
 8005668:	bd80      	pop	{r7, pc}
 800566a:	bf00      	nop
 800566c:	20000bd0 	.word	0x20000bd0

08005670 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8005674:	4802      	ldr	r0, [pc, #8]	@ (8005680 <DMA1_Stream1_IRQHandler+0x10>)
 8005676:	f001 f93b 	bl	80068f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800567a:	bf00      	nop
 800567c:	bd80      	pop	{r7, pc}
 800567e:	bf00      	nop
 8005680:	20000b70 	.word	0x20000b70

08005684 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8005688:	4802      	ldr	r0, [pc, #8]	@ (8005694 <ADC_IRQHandler+0x10>)
 800568a:	f000 f9ae 	bl	80059ea <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800568e:	bf00      	nop
 8005690:	bd80      	pop	{r7, pc}
 8005692:	bf00      	nop
 8005694:	20000a74 	.word	0x20000a74

08005698 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(M2_ENC_A_Pin);
 800569c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80056a0:	f001 fd7a 	bl	8007198 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80056a4:	bf00      	nop
 80056a6:	bd80      	pop	{r7, pc}

080056a8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80056ac:	4802      	ldr	r0, [pc, #8]	@ (80056b8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80056ae:	f007 f9f1 	bl	800ca94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80056b2:	bf00      	nop
 80056b4:	bd80      	pop	{r7, pc}
 80056b6:	bf00      	nop
 80056b8:	20000c30 	.word	0x20000c30

080056bc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80056c0:	4802      	ldr	r0, [pc, #8]	@ (80056cc <TIM3_IRQHandler+0x10>)
 80056c2:	f007 f9e7 	bl	800ca94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80056c6:	bf00      	nop
 80056c8:	bd80      	pop	{r7, pc}
 80056ca:	bf00      	nop
 80056cc:	20000c78 	.word	0x20000c78

080056d0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80056d4:	4802      	ldr	r0, [pc, #8]	@ (80056e0 <I2C1_EV_IRQHandler+0x10>)
 80056d6:	f002 ff17 	bl	8008508 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80056da:	bf00      	nop
 80056dc:	bd80      	pop	{r7, pc}
 80056de:	bf00      	nop
 80056e0:	20000b1c 	.word	0x20000b1c

080056e4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80056e8:	4802      	ldr	r0, [pc, #8]	@ (80056f4 <I2C1_ER_IRQHandler+0x10>)
 80056ea:	f003 f87e 	bl	80087ea <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80056ee:	bf00      	nop
 80056f0:	bd80      	pop	{r7, pc}
 80056f2:	bf00      	nop
 80056f4:	20000b1c 	.word	0x20000b1c

080056f8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80056fc:	4802      	ldr	r0, [pc, #8]	@ (8005708 <USART1_IRQHandler+0x10>)
 80056fe:	f008 f83b 	bl	800d778 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005702:	bf00      	nop
 8005704:	bd80      	pop	{r7, pc}
 8005706:	bf00      	nop
 8005708:	20000cc0 	.word	0x20000cc0

0800570c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(M1_ENC_A_Pin);
 8005710:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8005714:	f001 fd40 	bl	8007198 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005718:	bf00      	nop
 800571a:	bd80      	pop	{r7, pc}

0800571c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005720:	4802      	ldr	r0, [pc, #8]	@ (800572c <DMA2_Stream0_IRQHandler+0x10>)
 8005722:	f001 f8e5 	bl	80068f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8005726:	bf00      	nop
 8005728:	bd80      	pop	{r7, pc}
 800572a:	bf00      	nop
 800572c:	20000abc 	.word	0x20000abc

08005730 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8005734:	4802      	ldr	r0, [pc, #8]	@ (8005740 <OTG_FS_IRQHandler+0x10>)
 8005736:	f005 fa64 	bl	800ac02 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800573a:	bf00      	nop
 800573c:	bd80      	pop	{r7, pc}
 800573e:	bf00      	nop
 8005740:	20001fcc 	.word	0x20001fcc

08005744 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 8005744:	b480      	push	{r7}
 8005746:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 8005748:	bf00      	nop
 800574a:	46bd      	mov	sp, r7
 800574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005750:	4770      	bx	lr
	...

08005754 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b086      	sub	sp, #24
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800575c:	4a14      	ldr	r2, [pc, #80]	@ (80057b0 <_sbrk+0x5c>)
 800575e:	4b15      	ldr	r3, [pc, #84]	@ (80057b4 <_sbrk+0x60>)
 8005760:	1ad3      	subs	r3, r2, r3
 8005762:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005768:	4b13      	ldr	r3, [pc, #76]	@ (80057b8 <_sbrk+0x64>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d102      	bne.n	8005776 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005770:	4b11      	ldr	r3, [pc, #68]	@ (80057b8 <_sbrk+0x64>)
 8005772:	4a12      	ldr	r2, [pc, #72]	@ (80057bc <_sbrk+0x68>)
 8005774:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005776:	4b10      	ldr	r3, [pc, #64]	@ (80057b8 <_sbrk+0x64>)
 8005778:	681a      	ldr	r2, [r3, #0]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	4413      	add	r3, r2
 800577e:	693a      	ldr	r2, [r7, #16]
 8005780:	429a      	cmp	r2, r3
 8005782:	d207      	bcs.n	8005794 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005784:	f00d f826 	bl	80127d4 <__errno>
 8005788:	4603      	mov	r3, r0
 800578a:	220c      	movs	r2, #12
 800578c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800578e:	f04f 33ff 	mov.w	r3, #4294967295
 8005792:	e009      	b.n	80057a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005794:	4b08      	ldr	r3, [pc, #32]	@ (80057b8 <_sbrk+0x64>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800579a:	4b07      	ldr	r3, [pc, #28]	@ (80057b8 <_sbrk+0x64>)
 800579c:	681a      	ldr	r2, [r3, #0]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	4413      	add	r3, r2
 80057a2:	4a05      	ldr	r2, [pc, #20]	@ (80057b8 <_sbrk+0x64>)
 80057a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80057a6:	68fb      	ldr	r3, [r7, #12]
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3718      	adds	r7, #24
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}
 80057b0:	20020000 	.word	0x20020000
 80057b4:	00000400 	.word	0x00000400
 80057b8:	200016e0 	.word	0x200016e0
 80057bc:	20002818 	.word	0x20002818

080057c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80057c0:	b480      	push	{r7}
 80057c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80057c4:	4b06      	ldr	r3, [pc, #24]	@ (80057e0 <SystemInit+0x20>)
 80057c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057ca:	4a05      	ldr	r2, [pc, #20]	@ (80057e0 <SystemInit+0x20>)
 80057cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80057d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80057d4:	bf00      	nop
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr
 80057de:	bf00      	nop
 80057e0:	e000ed00 	.word	0xe000ed00

080057e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80057e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800581c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80057e8:	f7ff ffea 	bl	80057c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80057ec:	480c      	ldr	r0, [pc, #48]	@ (8005820 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80057ee:	490d      	ldr	r1, [pc, #52]	@ (8005824 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80057f0:	4a0d      	ldr	r2, [pc, #52]	@ (8005828 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80057f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80057f4:	e002      	b.n	80057fc <LoopCopyDataInit>

080057f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80057f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80057f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80057fa:	3304      	adds	r3, #4

080057fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80057fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80057fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005800:	d3f9      	bcc.n	80057f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005802:	4a0a      	ldr	r2, [pc, #40]	@ (800582c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005804:	4c0a      	ldr	r4, [pc, #40]	@ (8005830 <LoopFillZerobss+0x22>)
  movs r3, #0
 8005806:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005808:	e001      	b.n	800580e <LoopFillZerobss>

0800580a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800580a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800580c:	3204      	adds	r2, #4

0800580e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800580e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005810:	d3fb      	bcc.n	800580a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005812:	f00c ffe5 	bl	80127e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005816:	f7fe fcd7 	bl	80041c8 <main>
  bx  lr    
 800581a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800581c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005820:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005824:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 8005828:	08014780 	.word	0x08014780
  ldr r2, =_sbss
 800582c:	20000164 	.word	0x20000164
  ldr r4, =_ebss
 8005830:	20002818 	.word	0x20002818

08005834 <DMA1_Stream2_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005834:	e7fe      	b.n	8005834 <DMA1_Stream2_IRQHandler>
	...

08005838 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800583c:	4b0e      	ldr	r3, [pc, #56]	@ (8005878 <HAL_Init+0x40>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a0d      	ldr	r2, [pc, #52]	@ (8005878 <HAL_Init+0x40>)
 8005842:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005846:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005848:	4b0b      	ldr	r3, [pc, #44]	@ (8005878 <HAL_Init+0x40>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a0a      	ldr	r2, [pc, #40]	@ (8005878 <HAL_Init+0x40>)
 800584e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005852:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005854:	4b08      	ldr	r3, [pc, #32]	@ (8005878 <HAL_Init+0x40>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a07      	ldr	r2, [pc, #28]	@ (8005878 <HAL_Init+0x40>)
 800585a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800585e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005860:	2003      	movs	r0, #3
 8005862:	f000 fe6b 	bl	800653c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005866:	200f      	movs	r0, #15
 8005868:	f000 f808 	bl	800587c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800586c:	f7ff fc6c 	bl	8005148 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005870:	2300      	movs	r3, #0
}
 8005872:	4618      	mov	r0, r3
 8005874:	bd80      	pop	{r7, pc}
 8005876:	bf00      	nop
 8005878:	40023c00 	.word	0x40023c00

0800587c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b082      	sub	sp, #8
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005884:	4b12      	ldr	r3, [pc, #72]	@ (80058d0 <HAL_InitTick+0x54>)
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	4b12      	ldr	r3, [pc, #72]	@ (80058d4 <HAL_InitTick+0x58>)
 800588a:	781b      	ldrb	r3, [r3, #0]
 800588c:	4619      	mov	r1, r3
 800588e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005892:	fbb3 f3f1 	udiv	r3, r3, r1
 8005896:	fbb2 f3f3 	udiv	r3, r2, r3
 800589a:	4618      	mov	r0, r3
 800589c:	f000 fe83 	bl	80065a6 <HAL_SYSTICK_Config>
 80058a0:	4603      	mov	r3, r0
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d001      	beq.n	80058aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	e00e      	b.n	80058c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2b0f      	cmp	r3, #15
 80058ae:	d80a      	bhi.n	80058c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80058b0:	2200      	movs	r2, #0
 80058b2:	6879      	ldr	r1, [r7, #4]
 80058b4:	f04f 30ff 	mov.w	r0, #4294967295
 80058b8:	f000 fe4b 	bl	8006552 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80058bc:	4a06      	ldr	r2, [pc, #24]	@ (80058d8 <HAL_InitTick+0x5c>)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80058c2:	2300      	movs	r3, #0
 80058c4:	e000      	b.n	80058c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80058c6:	2301      	movs	r3, #1
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3708      	adds	r7, #8
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}
 80058d0:	20000010 	.word	0x20000010
 80058d4:	20000018 	.word	0x20000018
 80058d8:	20000014 	.word	0x20000014

080058dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80058dc:	b480      	push	{r7}
 80058de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80058e0:	4b06      	ldr	r3, [pc, #24]	@ (80058fc <HAL_IncTick+0x20>)
 80058e2:	781b      	ldrb	r3, [r3, #0]
 80058e4:	461a      	mov	r2, r3
 80058e6:	4b06      	ldr	r3, [pc, #24]	@ (8005900 <HAL_IncTick+0x24>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4413      	add	r3, r2
 80058ec:	4a04      	ldr	r2, [pc, #16]	@ (8005900 <HAL_IncTick+0x24>)
 80058ee:	6013      	str	r3, [r2, #0]
}
 80058f0:	bf00      	nop
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr
 80058fa:	bf00      	nop
 80058fc:	20000018 	.word	0x20000018
 8005900:	200016e4 	.word	0x200016e4

08005904 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005904:	b480      	push	{r7}
 8005906:	af00      	add	r7, sp, #0
  return uwTick;
 8005908:	4b03      	ldr	r3, [pc, #12]	@ (8005918 <HAL_GetTick+0x14>)
 800590a:	681b      	ldr	r3, [r3, #0]
}
 800590c:	4618      	mov	r0, r3
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr
 8005916:	bf00      	nop
 8005918:	200016e4 	.word	0x200016e4

0800591c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b084      	sub	sp, #16
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005924:	f7ff ffee 	bl	8005904 <HAL_GetTick>
 8005928:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005934:	d005      	beq.n	8005942 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005936:	4b0a      	ldr	r3, [pc, #40]	@ (8005960 <HAL_Delay+0x44>)
 8005938:	781b      	ldrb	r3, [r3, #0]
 800593a:	461a      	mov	r2, r3
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	4413      	add	r3, r2
 8005940:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005942:	bf00      	nop
 8005944:	f7ff ffde 	bl	8005904 <HAL_GetTick>
 8005948:	4602      	mov	r2, r0
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	1ad3      	subs	r3, r2, r3
 800594e:	68fa      	ldr	r2, [r7, #12]
 8005950:	429a      	cmp	r2, r3
 8005952:	d8f7      	bhi.n	8005944 <HAL_Delay+0x28>
  {
  }
}
 8005954:	bf00      	nop
 8005956:	bf00      	nop
 8005958:	3710      	adds	r7, #16
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}
 800595e:	bf00      	nop
 8005960:	20000018 	.word	0x20000018

08005964 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b084      	sub	sp, #16
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800596c:	2300      	movs	r3, #0
 800596e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d101      	bne.n	800597a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	e033      	b.n	80059e2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800597e:	2b00      	cmp	r3, #0
 8005980:	d109      	bne.n	8005996 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f7ff fc0e 	bl	80051a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2200      	movs	r2, #0
 800598c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2200      	movs	r2, #0
 8005992:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800599a:	f003 0310 	and.w	r3, r3, #16
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d118      	bne.n	80059d4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059a6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80059aa:	f023 0302 	bic.w	r3, r3, #2
 80059ae:	f043 0202 	orr.w	r2, r3, #2
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f000 fb68 	bl	800608c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2200      	movs	r2, #0
 80059c0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059c6:	f023 0303 	bic.w	r3, r3, #3
 80059ca:	f043 0201 	orr.w	r2, r3, #1
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	641a      	str	r2, [r3, #64]	@ 0x40
 80059d2:	e001      	b.n	80059d8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80059d4:	2301      	movs	r3, #1
 80059d6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2200      	movs	r2, #0
 80059dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80059e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3710      	adds	r7, #16
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}

080059ea <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80059ea:	b580      	push	{r7, lr}
 80059ec:	b086      	sub	sp, #24
 80059ee:	af00      	add	r7, sp, #0
 80059f0:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80059f2:	2300      	movs	r3, #0
 80059f4:	617b      	str	r3, [r7, #20]
 80059f6:	2300      	movs	r3, #0
 80059f8:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	f003 0302 	and.w	r3, r3, #2
 8005a10:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	f003 0320 	and.w	r3, r3, #32
 8005a18:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d049      	beq.n	8005ab4 <HAL_ADC_IRQHandler+0xca>
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d046      	beq.n	8005ab4 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a2a:	f003 0310 	and.w	r3, r3, #16
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d105      	bne.n	8005a3e <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a36:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d12b      	bne.n	8005aa4 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d127      	bne.n	8005aa4 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a5a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d006      	beq.n	8005a70 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d119      	bne.n	8005aa4 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	685a      	ldr	r2, [r3, #4]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f022 0220 	bic.w	r2, r2, #32
 8005a7e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a84:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a90:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d105      	bne.n	8005aa4 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a9c:	f043 0201 	orr.w	r2, r3, #1
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f7ff f93f 	bl	8004d28 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f06f 0212 	mvn.w	r2, #18
 8005ab2:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f003 0304 	and.w	r3, r3, #4
 8005aba:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ac2:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d057      	beq.n	8005b7a <HAL_ADC_IRQHandler+0x190>
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d054      	beq.n	8005b7a <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ad4:	f003 0310 	and.w	r3, r3, #16
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d105      	bne.n	8005ae8 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ae0:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d139      	bne.n	8005b6a <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005afc:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d006      	beq.n	8005b12 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	689b      	ldr	r3, [r3, #8]
 8005b0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d12b      	bne.n	8005b6a <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d124      	bne.n	8005b6a <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d11d      	bne.n	8005b6a <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d119      	bne.n	8005b6a <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	685a      	ldr	r2, [r3, #4]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005b44:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b4a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d105      	bne.n	8005b6a <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b62:	f043 0201 	orr.w	r2, r3, #1
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f000 fc0c 	bl	8006388 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f06f 020c 	mvn.w	r2, #12
 8005b78:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	f003 0301 	and.w	r3, r3, #1
 8005b80:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b88:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d017      	beq.n	8005bc0 <HAL_ADC_IRQHandler+0x1d6>
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d014      	beq.n	8005bc0 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f003 0301 	and.w	r3, r3, #1
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	d10d      	bne.n	8005bc0 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ba8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	f000 f925 	bl	8005e00 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f06f 0201 	mvn.w	r2, #1
 8005bbe:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f003 0320 	and.w	r3, r3, #32
 8005bc6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005bce:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d015      	beq.n	8005c02 <HAL_ADC_IRQHandler+0x218>
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d012      	beq.n	8005c02 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005be0:	f043 0202 	orr.w	r2, r3, #2
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f06f 0220 	mvn.w	r2, #32
 8005bf0:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f000 f90e 	bl	8005e14 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f06f 0220 	mvn.w	r2, #32
 8005c00:	601a      	str	r2, [r3, #0]
  }
}
 8005c02:	bf00      	nop
 8005c04:	3718      	adds	r7, #24
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}
	...

08005c0c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b086      	sub	sp, #24
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	60f8      	str	r0, [r7, #12]
 8005c14:	60b9      	str	r1, [r7, #8]
 8005c16:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c22:	2b01      	cmp	r3, #1
 8005c24:	d101      	bne.n	8005c2a <HAL_ADC_Start_DMA+0x1e>
 8005c26:	2302      	movs	r3, #2
 8005c28:	e0ce      	b.n	8005dc8 <HAL_ADC_Start_DMA+0x1bc>
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	f003 0301 	and.w	r3, r3, #1
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d018      	beq.n	8005c72 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	689a      	ldr	r2, [r3, #8]
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f042 0201 	orr.w	r2, r2, #1
 8005c4e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005c50:	4b5f      	ldr	r3, [pc, #380]	@ (8005dd0 <HAL_ADC_Start_DMA+0x1c4>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a5f      	ldr	r2, [pc, #380]	@ (8005dd4 <HAL_ADC_Start_DMA+0x1c8>)
 8005c56:	fba2 2303 	umull	r2, r3, r2, r3
 8005c5a:	0c9a      	lsrs	r2, r3, #18
 8005c5c:	4613      	mov	r3, r2
 8005c5e:	005b      	lsls	r3, r3, #1
 8005c60:	4413      	add	r3, r2
 8005c62:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8005c64:	e002      	b.n	8005c6c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	3b01      	subs	r3, #1
 8005c6a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d1f9      	bne.n	8005c66 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c80:	d107      	bne.n	8005c92 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	689a      	ldr	r2, [r3, #8]
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005c90:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	f003 0301 	and.w	r3, r3, #1
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	f040 8086 	bne.w	8005dae <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ca6:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8005caa:	f023 0301 	bic.w	r3, r3, #1
 8005cae:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d007      	beq.n	8005cd4 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cc8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8005ccc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cd8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005cdc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ce0:	d106      	bne.n	8005cf0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ce6:	f023 0206 	bic.w	r2, r3, #6
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	645a      	str	r2, [r3, #68]	@ 0x44
 8005cee:	e002      	b.n	8005cf6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005cfe:	4b36      	ldr	r3, [pc, #216]	@ (8005dd8 <HAL_ADC_Start_DMA+0x1cc>)
 8005d00:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d06:	4a35      	ldr	r2, [pc, #212]	@ (8005ddc <HAL_ADC_Start_DMA+0x1d0>)
 8005d08:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d0e:	4a34      	ldr	r2, [pc, #208]	@ (8005de0 <HAL_ADC_Start_DMA+0x1d4>)
 8005d10:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d16:	4a33      	ldr	r2, [pc, #204]	@ (8005de4 <HAL_ADC_Start_DMA+0x1d8>)
 8005d18:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8005d22:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	685a      	ldr	r2, [r3, #4]
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8005d32:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	689a      	ldr	r2, [r3, #8]
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005d42:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	334c      	adds	r3, #76	@ 0x4c
 8005d4e:	4619      	mov	r1, r3
 8005d50:	68ba      	ldr	r2, [r7, #8]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f000 fce2 	bl	800671c <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	f003 031f 	and.w	r3, r3, #31
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d10f      	bne.n	8005d84 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	689b      	ldr	r3, [r3, #8]
 8005d6a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d129      	bne.n	8005dc6 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	689a      	ldr	r2, [r3, #8]
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8005d80:	609a      	str	r2, [r3, #8]
 8005d82:	e020      	b.n	8005dc6 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a17      	ldr	r2, [pc, #92]	@ (8005de8 <HAL_ADC_Start_DMA+0x1dc>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d11b      	bne.n	8005dc6 <HAL_ADC_Start_DMA+0x1ba>
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	689b      	ldr	r3, [r3, #8]
 8005d94:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d114      	bne.n	8005dc6 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	689a      	ldr	r2, [r3, #8]
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8005daa:	609a      	str	r2, [r3, #8]
 8005dac:	e00b      	b.n	8005dc6 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005db2:	f043 0210 	orr.w	r2, r3, #16
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dbe:	f043 0201 	orr.w	r2, r3, #1
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8005dc6:	2300      	movs	r3, #0
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3718      	adds	r7, #24
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}
 8005dd0:	20000010 	.word	0x20000010
 8005dd4:	431bde83 	.word	0x431bde83
 8005dd8:	40012300 	.word	0x40012300
 8005ddc:	08006285 	.word	0x08006285
 8005de0:	0800633f 	.word	0x0800633f
 8005de4:	0800635b 	.word	0x0800635b
 8005de8:	40012000 	.word	0x40012000

08005dec <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b083      	sub	sp, #12
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8005df4:	bf00      	nop
 8005df6:	370c      	adds	r7, #12
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr

08005e00 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b083      	sub	sp, #12
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8005e08:	bf00      	nop
 8005e0a:	370c      	adds	r7, #12
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e12:	4770      	bx	lr

08005e14 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b083      	sub	sp, #12
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8005e1c:	bf00      	nop
 8005e1e:	370c      	adds	r7, #12
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr

08005e28 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b085      	sub	sp, #20
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
 8005e30:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005e32:	2300      	movs	r3, #0
 8005e34:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d101      	bne.n	8005e44 <HAL_ADC_ConfigChannel+0x1c>
 8005e40:	2302      	movs	r3, #2
 8005e42:	e113      	b.n	800606c <HAL_ADC_ConfigChannel+0x244>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2201      	movs	r2, #1
 8005e48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	2b09      	cmp	r3, #9
 8005e52:	d925      	bls.n	8005ea0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	68d9      	ldr	r1, [r3, #12]
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	b29b      	uxth	r3, r3
 8005e60:	461a      	mov	r2, r3
 8005e62:	4613      	mov	r3, r2
 8005e64:	005b      	lsls	r3, r3, #1
 8005e66:	4413      	add	r3, r2
 8005e68:	3b1e      	subs	r3, #30
 8005e6a:	2207      	movs	r2, #7
 8005e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e70:	43da      	mvns	r2, r3
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	400a      	ands	r2, r1
 8005e78:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	68d9      	ldr	r1, [r3, #12]
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	689a      	ldr	r2, [r3, #8]
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	b29b      	uxth	r3, r3
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	005b      	lsls	r3, r3, #1
 8005e90:	4403      	add	r3, r0
 8005e92:	3b1e      	subs	r3, #30
 8005e94:	409a      	lsls	r2, r3
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	430a      	orrs	r2, r1
 8005e9c:	60da      	str	r2, [r3, #12]
 8005e9e:	e022      	b.n	8005ee6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	6919      	ldr	r1, [r3, #16]
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	b29b      	uxth	r3, r3
 8005eac:	461a      	mov	r2, r3
 8005eae:	4613      	mov	r3, r2
 8005eb0:	005b      	lsls	r3, r3, #1
 8005eb2:	4413      	add	r3, r2
 8005eb4:	2207      	movs	r2, #7
 8005eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8005eba:	43da      	mvns	r2, r3
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	400a      	ands	r2, r1
 8005ec2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	6919      	ldr	r1, [r3, #16]
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	689a      	ldr	r2, [r3, #8]
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	b29b      	uxth	r3, r3
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	005b      	lsls	r3, r3, #1
 8005eda:	4403      	add	r3, r0
 8005edc:	409a      	lsls	r2, r3
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	430a      	orrs	r2, r1
 8005ee4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	2b06      	cmp	r3, #6
 8005eec:	d824      	bhi.n	8005f38 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	685a      	ldr	r2, [r3, #4]
 8005ef8:	4613      	mov	r3, r2
 8005efa:	009b      	lsls	r3, r3, #2
 8005efc:	4413      	add	r3, r2
 8005efe:	3b05      	subs	r3, #5
 8005f00:	221f      	movs	r2, #31
 8005f02:	fa02 f303 	lsl.w	r3, r2, r3
 8005f06:	43da      	mvns	r2, r3
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	400a      	ands	r2, r1
 8005f0e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	b29b      	uxth	r3, r3
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	685a      	ldr	r2, [r3, #4]
 8005f22:	4613      	mov	r3, r2
 8005f24:	009b      	lsls	r3, r3, #2
 8005f26:	4413      	add	r3, r2
 8005f28:	3b05      	subs	r3, #5
 8005f2a:	fa00 f203 	lsl.w	r2, r0, r3
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	430a      	orrs	r2, r1
 8005f34:	635a      	str	r2, [r3, #52]	@ 0x34
 8005f36:	e04c      	b.n	8005fd2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	2b0c      	cmp	r3, #12
 8005f3e:	d824      	bhi.n	8005f8a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	685a      	ldr	r2, [r3, #4]
 8005f4a:	4613      	mov	r3, r2
 8005f4c:	009b      	lsls	r3, r3, #2
 8005f4e:	4413      	add	r3, r2
 8005f50:	3b23      	subs	r3, #35	@ 0x23
 8005f52:	221f      	movs	r2, #31
 8005f54:	fa02 f303 	lsl.w	r3, r2, r3
 8005f58:	43da      	mvns	r2, r3
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	400a      	ands	r2, r1
 8005f60:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	4618      	mov	r0, r3
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	685a      	ldr	r2, [r3, #4]
 8005f74:	4613      	mov	r3, r2
 8005f76:	009b      	lsls	r3, r3, #2
 8005f78:	4413      	add	r3, r2
 8005f7a:	3b23      	subs	r3, #35	@ 0x23
 8005f7c:	fa00 f203 	lsl.w	r2, r0, r3
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	430a      	orrs	r2, r1
 8005f86:	631a      	str	r2, [r3, #48]	@ 0x30
 8005f88:	e023      	b.n	8005fd2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	685a      	ldr	r2, [r3, #4]
 8005f94:	4613      	mov	r3, r2
 8005f96:	009b      	lsls	r3, r3, #2
 8005f98:	4413      	add	r3, r2
 8005f9a:	3b41      	subs	r3, #65	@ 0x41
 8005f9c:	221f      	movs	r2, #31
 8005f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8005fa2:	43da      	mvns	r2, r3
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	400a      	ands	r2, r1
 8005faa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	4618      	mov	r0, r3
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	685a      	ldr	r2, [r3, #4]
 8005fbe:	4613      	mov	r3, r2
 8005fc0:	009b      	lsls	r3, r3, #2
 8005fc2:	4413      	add	r3, r2
 8005fc4:	3b41      	subs	r3, #65	@ 0x41
 8005fc6:	fa00 f203 	lsl.w	r2, r0, r3
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	430a      	orrs	r2, r1
 8005fd0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005fd2:	4b29      	ldr	r3, [pc, #164]	@ (8006078 <HAL_ADC_ConfigChannel+0x250>)
 8005fd4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a28      	ldr	r2, [pc, #160]	@ (800607c <HAL_ADC_ConfigChannel+0x254>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d10f      	bne.n	8006000 <HAL_ADC_ConfigChannel+0x1d8>
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	2b12      	cmp	r3, #18
 8005fe6:	d10b      	bne.n	8006000 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a1d      	ldr	r2, [pc, #116]	@ (800607c <HAL_ADC_ConfigChannel+0x254>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d12b      	bne.n	8006062 <HAL_ADC_ConfigChannel+0x23a>
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a1c      	ldr	r2, [pc, #112]	@ (8006080 <HAL_ADC_ConfigChannel+0x258>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d003      	beq.n	800601c <HAL_ADC_ConfigChannel+0x1f4>
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	2b11      	cmp	r3, #17
 800601a:	d122      	bne.n	8006062 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a11      	ldr	r2, [pc, #68]	@ (8006080 <HAL_ADC_ConfigChannel+0x258>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d111      	bne.n	8006062 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800603e:	4b11      	ldr	r3, [pc, #68]	@ (8006084 <HAL_ADC_ConfigChannel+0x25c>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a11      	ldr	r2, [pc, #68]	@ (8006088 <HAL_ADC_ConfigChannel+0x260>)
 8006044:	fba2 2303 	umull	r2, r3, r2, r3
 8006048:	0c9a      	lsrs	r2, r3, #18
 800604a:	4613      	mov	r3, r2
 800604c:	009b      	lsls	r3, r3, #2
 800604e:	4413      	add	r3, r2
 8006050:	005b      	lsls	r3, r3, #1
 8006052:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8006054:	e002      	b.n	800605c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	3b01      	subs	r3, #1
 800605a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d1f9      	bne.n	8006056 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2200      	movs	r2, #0
 8006066:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800606a:	2300      	movs	r3, #0
}
 800606c:	4618      	mov	r0, r3
 800606e:	3714      	adds	r7, #20
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr
 8006078:	40012300 	.word	0x40012300
 800607c:	40012000 	.word	0x40012000
 8006080:	10000012 	.word	0x10000012
 8006084:	20000010 	.word	0x20000010
 8006088:	431bde83 	.word	0x431bde83

0800608c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800608c:	b480      	push	{r7}
 800608e:	b085      	sub	sp, #20
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006094:	4b79      	ldr	r3, [pc, #484]	@ (800627c <ADC_Init+0x1f0>)
 8006096:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	685a      	ldr	r2, [r3, #4]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	431a      	orrs	r2, r3
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	685a      	ldr	r2, [r3, #4]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80060c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	6859      	ldr	r1, [r3, #4]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	691b      	ldr	r3, [r3, #16]
 80060cc:	021a      	lsls	r2, r3, #8
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	430a      	orrs	r2, r1
 80060d4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	685a      	ldr	r2, [r3, #4]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80060e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	6859      	ldr	r1, [r3, #4]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	689a      	ldr	r2, [r3, #8]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	430a      	orrs	r2, r1
 80060f6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	689a      	ldr	r2, [r3, #8]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006106:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	6899      	ldr	r1, [r3, #8]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	68da      	ldr	r2, [r3, #12]
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	430a      	orrs	r2, r1
 8006118:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800611e:	4a58      	ldr	r2, [pc, #352]	@ (8006280 <ADC_Init+0x1f4>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d022      	beq.n	800616a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	689a      	ldr	r2, [r3, #8]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006132:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	6899      	ldr	r1, [r3, #8]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	430a      	orrs	r2, r1
 8006144:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	689a      	ldr	r2, [r3, #8]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006154:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	6899      	ldr	r1, [r3, #8]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	430a      	orrs	r2, r1
 8006166:	609a      	str	r2, [r3, #8]
 8006168:	e00f      	b.n	800618a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	689a      	ldr	r2, [r3, #8]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006178:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	689a      	ldr	r2, [r3, #8]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006188:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	689a      	ldr	r2, [r3, #8]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f022 0202 	bic.w	r2, r2, #2
 8006198:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	6899      	ldr	r1, [r3, #8]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	7e1b      	ldrb	r3, [r3, #24]
 80061a4:	005a      	lsls	r2, r3, #1
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	430a      	orrs	r2, r1
 80061ac:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d01b      	beq.n	80061f0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	685a      	ldr	r2, [r3, #4]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80061c6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	685a      	ldr	r2, [r3, #4]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80061d6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	6859      	ldr	r1, [r3, #4]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061e2:	3b01      	subs	r3, #1
 80061e4:	035a      	lsls	r2, r3, #13
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	430a      	orrs	r2, r1
 80061ec:	605a      	str	r2, [r3, #4]
 80061ee:	e007      	b.n	8006200 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	685a      	ldr	r2, [r3, #4]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80061fe:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800620e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	69db      	ldr	r3, [r3, #28]
 800621a:	3b01      	subs	r3, #1
 800621c:	051a      	lsls	r2, r3, #20
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	430a      	orrs	r2, r1
 8006224:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	689a      	ldr	r2, [r3, #8]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8006234:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	6899      	ldr	r1, [r3, #8]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006242:	025a      	lsls	r2, r3, #9
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	430a      	orrs	r2, r1
 800624a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	689a      	ldr	r2, [r3, #8]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800625a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	6899      	ldr	r1, [r3, #8]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	695b      	ldr	r3, [r3, #20]
 8006266:	029a      	lsls	r2, r3, #10
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	430a      	orrs	r2, r1
 800626e:	609a      	str	r2, [r3, #8]
}
 8006270:	bf00      	nop
 8006272:	3714      	adds	r7, #20
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr
 800627c:	40012300 	.word	0x40012300
 8006280:	0f000001 	.word	0x0f000001

08006284 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b084      	sub	sp, #16
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006290:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006296:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800629a:	2b00      	cmp	r3, #0
 800629c:	d13c      	bne.n	8006318 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062a2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d12b      	bne.n	8006310 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d127      	bne.n	8006310 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062c6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d006      	beq.n	80062dc <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	689b      	ldr	r3, [r3, #8]
 80062d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d119      	bne.n	8006310 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	685a      	ldr	r2, [r3, #4]
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f022 0220 	bic.w	r2, r2, #32
 80062ea:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062f0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006300:	2b00      	cmp	r3, #0
 8006302:	d105      	bne.n	8006310 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006308:	f043 0201 	orr.w	r2, r3, #1
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006310:	68f8      	ldr	r0, [r7, #12]
 8006312:	f7fe fd09 	bl	8004d28 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006316:	e00e      	b.n	8006336 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800631c:	f003 0310 	and.w	r3, r3, #16
 8006320:	2b00      	cmp	r3, #0
 8006322:	d003      	beq.n	800632c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8006324:	68f8      	ldr	r0, [r7, #12]
 8006326:	f7ff fd75 	bl	8005e14 <HAL_ADC_ErrorCallback>
}
 800632a:	e004      	b.n	8006336 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006330:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	4798      	blx	r3
}
 8006336:	bf00      	nop
 8006338:	3710      	adds	r7, #16
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}

0800633e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800633e:	b580      	push	{r7, lr}
 8006340:	b084      	sub	sp, #16
 8006342:	af00      	add	r7, sp, #0
 8006344:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800634a:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800634c:	68f8      	ldr	r0, [r7, #12]
 800634e:	f7ff fd4d 	bl	8005dec <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006352:	bf00      	nop
 8006354:	3710      	adds	r7, #16
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}

0800635a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800635a:	b580      	push	{r7, lr}
 800635c:	b084      	sub	sp, #16
 800635e:	af00      	add	r7, sp, #0
 8006360:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006366:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2240      	movs	r2, #64	@ 0x40
 800636c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006372:	f043 0204 	orr.w	r2, r3, #4
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800637a:	68f8      	ldr	r0, [r7, #12]
 800637c:	f7ff fd4a 	bl	8005e14 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006380:	bf00      	nop
 8006382:	3710      	adds	r7, #16
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}

08006388 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006388:	b480      	push	{r7}
 800638a:	b083      	sub	sp, #12
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8006390:	bf00      	nop
 8006392:	370c      	adds	r7, #12
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr

0800639c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800639c:	b480      	push	{r7}
 800639e:	b085      	sub	sp, #20
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f003 0307 	and.w	r3, r3, #7
 80063aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80063ac:	4b0c      	ldr	r3, [pc, #48]	@ (80063e0 <__NVIC_SetPriorityGrouping+0x44>)
 80063ae:	68db      	ldr	r3, [r3, #12]
 80063b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80063b2:	68ba      	ldr	r2, [r7, #8]
 80063b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80063b8:	4013      	ands	r3, r2
 80063ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80063c4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80063c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80063cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80063ce:	4a04      	ldr	r2, [pc, #16]	@ (80063e0 <__NVIC_SetPriorityGrouping+0x44>)
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	60d3      	str	r3, [r2, #12]
}
 80063d4:	bf00      	nop
 80063d6:	3714      	adds	r7, #20
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr
 80063e0:	e000ed00 	.word	0xe000ed00

080063e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80063e4:	b480      	push	{r7}
 80063e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80063e8:	4b04      	ldr	r3, [pc, #16]	@ (80063fc <__NVIC_GetPriorityGrouping+0x18>)
 80063ea:	68db      	ldr	r3, [r3, #12]
 80063ec:	0a1b      	lsrs	r3, r3, #8
 80063ee:	f003 0307 	and.w	r3, r3, #7
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	46bd      	mov	sp, r7
 80063f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fa:	4770      	bx	lr
 80063fc:	e000ed00 	.word	0xe000ed00

08006400 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006400:	b480      	push	{r7}
 8006402:	b083      	sub	sp, #12
 8006404:	af00      	add	r7, sp, #0
 8006406:	4603      	mov	r3, r0
 8006408:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800640a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800640e:	2b00      	cmp	r3, #0
 8006410:	db0b      	blt.n	800642a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006412:	79fb      	ldrb	r3, [r7, #7]
 8006414:	f003 021f 	and.w	r2, r3, #31
 8006418:	4907      	ldr	r1, [pc, #28]	@ (8006438 <__NVIC_EnableIRQ+0x38>)
 800641a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800641e:	095b      	lsrs	r3, r3, #5
 8006420:	2001      	movs	r0, #1
 8006422:	fa00 f202 	lsl.w	r2, r0, r2
 8006426:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800642a:	bf00      	nop
 800642c:	370c      	adds	r7, #12
 800642e:	46bd      	mov	sp, r7
 8006430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006434:	4770      	bx	lr
 8006436:	bf00      	nop
 8006438:	e000e100 	.word	0xe000e100

0800643c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800643c:	b480      	push	{r7}
 800643e:	b083      	sub	sp, #12
 8006440:	af00      	add	r7, sp, #0
 8006442:	4603      	mov	r3, r0
 8006444:	6039      	str	r1, [r7, #0]
 8006446:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006448:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800644c:	2b00      	cmp	r3, #0
 800644e:	db0a      	blt.n	8006466 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	b2da      	uxtb	r2, r3
 8006454:	490c      	ldr	r1, [pc, #48]	@ (8006488 <__NVIC_SetPriority+0x4c>)
 8006456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800645a:	0112      	lsls	r2, r2, #4
 800645c:	b2d2      	uxtb	r2, r2
 800645e:	440b      	add	r3, r1
 8006460:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006464:	e00a      	b.n	800647c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	b2da      	uxtb	r2, r3
 800646a:	4908      	ldr	r1, [pc, #32]	@ (800648c <__NVIC_SetPriority+0x50>)
 800646c:	79fb      	ldrb	r3, [r7, #7]
 800646e:	f003 030f 	and.w	r3, r3, #15
 8006472:	3b04      	subs	r3, #4
 8006474:	0112      	lsls	r2, r2, #4
 8006476:	b2d2      	uxtb	r2, r2
 8006478:	440b      	add	r3, r1
 800647a:	761a      	strb	r2, [r3, #24]
}
 800647c:	bf00      	nop
 800647e:	370c      	adds	r7, #12
 8006480:	46bd      	mov	sp, r7
 8006482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006486:	4770      	bx	lr
 8006488:	e000e100 	.word	0xe000e100
 800648c:	e000ed00 	.word	0xe000ed00

08006490 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006490:	b480      	push	{r7}
 8006492:	b089      	sub	sp, #36	@ 0x24
 8006494:	af00      	add	r7, sp, #0
 8006496:	60f8      	str	r0, [r7, #12]
 8006498:	60b9      	str	r1, [r7, #8]
 800649a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	f003 0307 	and.w	r3, r3, #7
 80064a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80064a4:	69fb      	ldr	r3, [r7, #28]
 80064a6:	f1c3 0307 	rsb	r3, r3, #7
 80064aa:	2b04      	cmp	r3, #4
 80064ac:	bf28      	it	cs
 80064ae:	2304      	movcs	r3, #4
 80064b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80064b2:	69fb      	ldr	r3, [r7, #28]
 80064b4:	3304      	adds	r3, #4
 80064b6:	2b06      	cmp	r3, #6
 80064b8:	d902      	bls.n	80064c0 <NVIC_EncodePriority+0x30>
 80064ba:	69fb      	ldr	r3, [r7, #28]
 80064bc:	3b03      	subs	r3, #3
 80064be:	e000      	b.n	80064c2 <NVIC_EncodePriority+0x32>
 80064c0:	2300      	movs	r3, #0
 80064c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80064c4:	f04f 32ff 	mov.w	r2, #4294967295
 80064c8:	69bb      	ldr	r3, [r7, #24]
 80064ca:	fa02 f303 	lsl.w	r3, r2, r3
 80064ce:	43da      	mvns	r2, r3
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	401a      	ands	r2, r3
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80064d8:	f04f 31ff 	mov.w	r1, #4294967295
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	fa01 f303 	lsl.w	r3, r1, r3
 80064e2:	43d9      	mvns	r1, r3
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80064e8:	4313      	orrs	r3, r2
         );
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3724      	adds	r7, #36	@ 0x24
 80064ee:	46bd      	mov	sp, r7
 80064f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f4:	4770      	bx	lr
	...

080064f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b082      	sub	sp, #8
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	3b01      	subs	r3, #1
 8006504:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006508:	d301      	bcc.n	800650e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800650a:	2301      	movs	r3, #1
 800650c:	e00f      	b.n	800652e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800650e:	4a0a      	ldr	r2, [pc, #40]	@ (8006538 <SysTick_Config+0x40>)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	3b01      	subs	r3, #1
 8006514:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006516:	210f      	movs	r1, #15
 8006518:	f04f 30ff 	mov.w	r0, #4294967295
 800651c:	f7ff ff8e 	bl	800643c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006520:	4b05      	ldr	r3, [pc, #20]	@ (8006538 <SysTick_Config+0x40>)
 8006522:	2200      	movs	r2, #0
 8006524:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006526:	4b04      	ldr	r3, [pc, #16]	@ (8006538 <SysTick_Config+0x40>)
 8006528:	2207      	movs	r2, #7
 800652a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800652c:	2300      	movs	r3, #0
}
 800652e:	4618      	mov	r0, r3
 8006530:	3708      	adds	r7, #8
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}
 8006536:	bf00      	nop
 8006538:	e000e010 	.word	0xe000e010

0800653c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b082      	sub	sp, #8
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f7ff ff29 	bl	800639c <__NVIC_SetPriorityGrouping>
}
 800654a:	bf00      	nop
 800654c:	3708      	adds	r7, #8
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}

08006552 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006552:	b580      	push	{r7, lr}
 8006554:	b086      	sub	sp, #24
 8006556:	af00      	add	r7, sp, #0
 8006558:	4603      	mov	r3, r0
 800655a:	60b9      	str	r1, [r7, #8]
 800655c:	607a      	str	r2, [r7, #4]
 800655e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006560:	2300      	movs	r3, #0
 8006562:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006564:	f7ff ff3e 	bl	80063e4 <__NVIC_GetPriorityGrouping>
 8006568:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800656a:	687a      	ldr	r2, [r7, #4]
 800656c:	68b9      	ldr	r1, [r7, #8]
 800656e:	6978      	ldr	r0, [r7, #20]
 8006570:	f7ff ff8e 	bl	8006490 <NVIC_EncodePriority>
 8006574:	4602      	mov	r2, r0
 8006576:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800657a:	4611      	mov	r1, r2
 800657c:	4618      	mov	r0, r3
 800657e:	f7ff ff5d 	bl	800643c <__NVIC_SetPriority>
}
 8006582:	bf00      	nop
 8006584:	3718      	adds	r7, #24
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}

0800658a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800658a:	b580      	push	{r7, lr}
 800658c:	b082      	sub	sp, #8
 800658e:	af00      	add	r7, sp, #0
 8006590:	4603      	mov	r3, r0
 8006592:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006594:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006598:	4618      	mov	r0, r3
 800659a:	f7ff ff31 	bl	8006400 <__NVIC_EnableIRQ>
}
 800659e:	bf00      	nop
 80065a0:	3708      	adds	r7, #8
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}

080065a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80065a6:	b580      	push	{r7, lr}
 80065a8:	b082      	sub	sp, #8
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f7ff ffa2 	bl	80064f8 <SysTick_Config>
 80065b4:	4603      	mov	r3, r0
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3708      	adds	r7, #8
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}
	...

080065c0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b086      	sub	sp, #24
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80065c8:	2300      	movs	r3, #0
 80065ca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80065cc:	f7ff f99a 	bl	8005904 <HAL_GetTick>
 80065d0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d101      	bne.n	80065dc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80065d8:	2301      	movs	r3, #1
 80065da:	e099      	b.n	8006710 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2202      	movs	r2, #2
 80065e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2200      	movs	r2, #0
 80065e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f022 0201 	bic.w	r2, r2, #1
 80065fa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80065fc:	e00f      	b.n	800661e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80065fe:	f7ff f981 	bl	8005904 <HAL_GetTick>
 8006602:	4602      	mov	r2, r0
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	1ad3      	subs	r3, r2, r3
 8006608:	2b05      	cmp	r3, #5
 800660a:	d908      	bls.n	800661e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2220      	movs	r2, #32
 8006610:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2203      	movs	r2, #3
 8006616:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800661a:	2303      	movs	r3, #3
 800661c:	e078      	b.n	8006710 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f003 0301 	and.w	r3, r3, #1
 8006628:	2b00      	cmp	r3, #0
 800662a:	d1e8      	bne.n	80065fe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006634:	697a      	ldr	r2, [r7, #20]
 8006636:	4b38      	ldr	r3, [pc, #224]	@ (8006718 <HAL_DMA_Init+0x158>)
 8006638:	4013      	ands	r3, r2
 800663a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	685a      	ldr	r2, [r3, #4]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	689b      	ldr	r3, [r3, #8]
 8006644:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800664a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	691b      	ldr	r3, [r3, #16]
 8006650:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006656:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	699b      	ldr	r3, [r3, #24]
 800665c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006662:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6a1b      	ldr	r3, [r3, #32]
 8006668:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800666a:	697a      	ldr	r2, [r7, #20]
 800666c:	4313      	orrs	r3, r2
 800666e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006674:	2b04      	cmp	r3, #4
 8006676:	d107      	bne.n	8006688 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006680:	4313      	orrs	r3, r2
 8006682:	697a      	ldr	r2, [r7, #20]
 8006684:	4313      	orrs	r3, r2
 8006686:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	697a      	ldr	r2, [r7, #20]
 800668e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	695b      	ldr	r3, [r3, #20]
 8006696:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	f023 0307 	bic.w	r3, r3, #7
 800669e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066a4:	697a      	ldr	r2, [r7, #20]
 80066a6:	4313      	orrs	r3, r2
 80066a8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066ae:	2b04      	cmp	r3, #4
 80066b0:	d117      	bne.n	80066e2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066b6:	697a      	ldr	r2, [r7, #20]
 80066b8:	4313      	orrs	r3, r2
 80066ba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d00e      	beq.n	80066e2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f000 fb1b 	bl	8006d00 <DMA_CheckFifoParam>
 80066ca:	4603      	mov	r3, r0
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d008      	beq.n	80066e2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2240      	movs	r2, #64	@ 0x40
 80066d4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2201      	movs	r2, #1
 80066da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80066de:	2301      	movs	r3, #1
 80066e0:	e016      	b.n	8006710 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	697a      	ldr	r2, [r7, #20]
 80066e8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f000 fad2 	bl	8006c94 <DMA_CalcBaseAndBitshift>
 80066f0:	4603      	mov	r3, r0
 80066f2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066f8:	223f      	movs	r2, #63	@ 0x3f
 80066fa:	409a      	lsls	r2, r3
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2200      	movs	r2, #0
 8006704:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2201      	movs	r2, #1
 800670a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800670e:	2300      	movs	r3, #0
}
 8006710:	4618      	mov	r0, r3
 8006712:	3718      	adds	r7, #24
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}
 8006718:	f010803f 	.word	0xf010803f

0800671c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b086      	sub	sp, #24
 8006720:	af00      	add	r7, sp, #0
 8006722:	60f8      	str	r0, [r7, #12]
 8006724:	60b9      	str	r1, [r7, #8]
 8006726:	607a      	str	r2, [r7, #4]
 8006728:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800672a:	2300      	movs	r3, #0
 800672c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006732:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800673a:	2b01      	cmp	r3, #1
 800673c:	d101      	bne.n	8006742 <HAL_DMA_Start_IT+0x26>
 800673e:	2302      	movs	r3, #2
 8006740:	e040      	b.n	80067c4 <HAL_DMA_Start_IT+0xa8>
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2201      	movs	r2, #1
 8006746:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006750:	b2db      	uxtb	r3, r3
 8006752:	2b01      	cmp	r3, #1
 8006754:	d12f      	bne.n	80067b6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	2202      	movs	r2, #2
 800675a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	2200      	movs	r2, #0
 8006762:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	687a      	ldr	r2, [r7, #4]
 8006768:	68b9      	ldr	r1, [r7, #8]
 800676a:	68f8      	ldr	r0, [r7, #12]
 800676c:	f000 fa64 	bl	8006c38 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006774:	223f      	movs	r2, #63	@ 0x3f
 8006776:	409a      	lsls	r2, r3
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	681a      	ldr	r2, [r3, #0]
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f042 0216 	orr.w	r2, r2, #22
 800678a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006790:	2b00      	cmp	r3, #0
 8006792:	d007      	beq.n	80067a4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	681a      	ldr	r2, [r3, #0]
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f042 0208 	orr.w	r2, r2, #8
 80067a2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	681a      	ldr	r2, [r3, #0]
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f042 0201 	orr.w	r2, r2, #1
 80067b2:	601a      	str	r2, [r3, #0]
 80067b4:	e005      	b.n	80067c2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	2200      	movs	r2, #0
 80067ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80067be:	2302      	movs	r3, #2
 80067c0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80067c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	3718      	adds	r7, #24
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}

080067cc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b084      	sub	sp, #16
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067d8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80067da:	f7ff f893 	bl	8005904 <HAL_GetTick>
 80067de:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80067e6:	b2db      	uxtb	r3, r3
 80067e8:	2b02      	cmp	r3, #2
 80067ea:	d008      	beq.n	80067fe <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2280      	movs	r2, #128	@ 0x80
 80067f0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2200      	movs	r2, #0
 80067f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80067fa:	2301      	movs	r3, #1
 80067fc:	e052      	b.n	80068a4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	681a      	ldr	r2, [r3, #0]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f022 0216 	bic.w	r2, r2, #22
 800680c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	695a      	ldr	r2, [r3, #20]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800681c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006822:	2b00      	cmp	r3, #0
 8006824:	d103      	bne.n	800682e <HAL_DMA_Abort+0x62>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800682a:	2b00      	cmp	r3, #0
 800682c:	d007      	beq.n	800683e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	681a      	ldr	r2, [r3, #0]
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f022 0208 	bic.w	r2, r2, #8
 800683c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	681a      	ldr	r2, [r3, #0]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f022 0201 	bic.w	r2, r2, #1
 800684c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800684e:	e013      	b.n	8006878 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006850:	f7ff f858 	bl	8005904 <HAL_GetTick>
 8006854:	4602      	mov	r2, r0
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	1ad3      	subs	r3, r2, r3
 800685a:	2b05      	cmp	r3, #5
 800685c:	d90c      	bls.n	8006878 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2220      	movs	r2, #32
 8006862:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2203      	movs	r2, #3
 8006868:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2200      	movs	r2, #0
 8006870:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8006874:	2303      	movs	r3, #3
 8006876:	e015      	b.n	80068a4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f003 0301 	and.w	r3, r3, #1
 8006882:	2b00      	cmp	r3, #0
 8006884:	d1e4      	bne.n	8006850 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800688a:	223f      	movs	r2, #63	@ 0x3f
 800688c:	409a      	lsls	r2, r3
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2201      	movs	r2, #1
 8006896:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2200      	movs	r2, #0
 800689e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80068a2:	2300      	movs	r3, #0
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	3710      	adds	r7, #16
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}

080068ac <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b083      	sub	sp, #12
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80068ba:	b2db      	uxtb	r3, r3
 80068bc:	2b02      	cmp	r3, #2
 80068be:	d004      	beq.n	80068ca <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2280      	movs	r2, #128	@ 0x80
 80068c4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80068c6:	2301      	movs	r3, #1
 80068c8:	e00c      	b.n	80068e4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2205      	movs	r2, #5
 80068ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	681a      	ldr	r2, [r3, #0]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f022 0201 	bic.w	r2, r2, #1
 80068e0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80068e2:	2300      	movs	r3, #0
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	370c      	adds	r7, #12
 80068e8:	46bd      	mov	sp, r7
 80068ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ee:	4770      	bx	lr

080068f0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b086      	sub	sp, #24
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80068f8:	2300      	movs	r3, #0
 80068fa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80068fc:	4b8e      	ldr	r3, [pc, #568]	@ (8006b38 <HAL_DMA_IRQHandler+0x248>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a8e      	ldr	r2, [pc, #568]	@ (8006b3c <HAL_DMA_IRQHandler+0x24c>)
 8006902:	fba2 2303 	umull	r2, r3, r2, r3
 8006906:	0a9b      	lsrs	r3, r3, #10
 8006908:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800690e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800691a:	2208      	movs	r2, #8
 800691c:	409a      	lsls	r2, r3
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	4013      	ands	r3, r2
 8006922:	2b00      	cmp	r3, #0
 8006924:	d01a      	beq.n	800695c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f003 0304 	and.w	r3, r3, #4
 8006930:	2b00      	cmp	r3, #0
 8006932:	d013      	beq.n	800695c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	681a      	ldr	r2, [r3, #0]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f022 0204 	bic.w	r2, r2, #4
 8006942:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006948:	2208      	movs	r2, #8
 800694a:	409a      	lsls	r2, r3
 800694c:	693b      	ldr	r3, [r7, #16]
 800694e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006954:	f043 0201 	orr.w	r2, r3, #1
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006960:	2201      	movs	r2, #1
 8006962:	409a      	lsls	r2, r3
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	4013      	ands	r3, r2
 8006968:	2b00      	cmp	r3, #0
 800696a:	d012      	beq.n	8006992 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	695b      	ldr	r3, [r3, #20]
 8006972:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006976:	2b00      	cmp	r3, #0
 8006978:	d00b      	beq.n	8006992 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800697e:	2201      	movs	r2, #1
 8006980:	409a      	lsls	r2, r3
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800698a:	f043 0202 	orr.w	r2, r3, #2
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006996:	2204      	movs	r2, #4
 8006998:	409a      	lsls	r2, r3
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	4013      	ands	r3, r2
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d012      	beq.n	80069c8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f003 0302 	and.w	r3, r3, #2
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d00b      	beq.n	80069c8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069b4:	2204      	movs	r2, #4
 80069b6:	409a      	lsls	r2, r3
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069c0:	f043 0204 	orr.w	r2, r3, #4
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069cc:	2210      	movs	r2, #16
 80069ce:	409a      	lsls	r2, r3
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	4013      	ands	r3, r2
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d043      	beq.n	8006a60 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f003 0308 	and.w	r3, r3, #8
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d03c      	beq.n	8006a60 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069ea:	2210      	movs	r2, #16
 80069ec:	409a      	lsls	r2, r3
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d018      	beq.n	8006a32 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d108      	bne.n	8006a20 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d024      	beq.n	8006a60 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	4798      	blx	r3
 8006a1e:	e01f      	b.n	8006a60 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d01b      	beq.n	8006a60 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	4798      	blx	r3
 8006a30:	e016      	b.n	8006a60 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d107      	bne.n	8006a50 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	681a      	ldr	r2, [r3, #0]
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f022 0208 	bic.w	r2, r2, #8
 8006a4e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d003      	beq.n	8006a60 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a64:	2220      	movs	r2, #32
 8006a66:	409a      	lsls	r2, r3
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	4013      	ands	r3, r2
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	f000 808f 	beq.w	8006b90 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f003 0310 	and.w	r3, r3, #16
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	f000 8087 	beq.w	8006b90 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a86:	2220      	movs	r2, #32
 8006a88:	409a      	lsls	r2, r3
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006a94:	b2db      	uxtb	r3, r3
 8006a96:	2b05      	cmp	r3, #5
 8006a98:	d136      	bne.n	8006b08 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	681a      	ldr	r2, [r3, #0]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f022 0216 	bic.w	r2, r2, #22
 8006aa8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	695a      	ldr	r2, [r3, #20]
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006ab8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d103      	bne.n	8006aca <HAL_DMA_IRQHandler+0x1da>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d007      	beq.n	8006ada <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	681a      	ldr	r2, [r3, #0]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f022 0208 	bic.w	r2, r2, #8
 8006ad8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ade:	223f      	movs	r2, #63	@ 0x3f
 8006ae0:	409a      	lsls	r2, r3
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2201      	movs	r2, #1
 8006aea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2200      	movs	r2, #0
 8006af2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d07e      	beq.n	8006bfc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	4798      	blx	r3
        }
        return;
 8006b06:	e079      	b.n	8006bfc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d01d      	beq.n	8006b52 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d10d      	bne.n	8006b40 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d031      	beq.n	8006b90 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	4798      	blx	r3
 8006b34:	e02c      	b.n	8006b90 <HAL_DMA_IRQHandler+0x2a0>
 8006b36:	bf00      	nop
 8006b38:	20000010 	.word	0x20000010
 8006b3c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d023      	beq.n	8006b90 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	4798      	blx	r3
 8006b50:	e01e      	b.n	8006b90 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d10f      	bne.n	8006b80 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	681a      	ldr	r2, [r3, #0]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f022 0210 	bic.w	r2, r2, #16
 8006b6e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2201      	movs	r2, #1
 8006b74:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d003      	beq.n	8006b90 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d032      	beq.n	8006bfe <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b9c:	f003 0301 	and.w	r3, r3, #1
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d022      	beq.n	8006bea <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2205      	movs	r2, #5
 8006ba8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	681a      	ldr	r2, [r3, #0]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f022 0201 	bic.w	r2, r2, #1
 8006bba:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	3301      	adds	r3, #1
 8006bc0:	60bb      	str	r3, [r7, #8]
 8006bc2:	697a      	ldr	r2, [r7, #20]
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	d307      	bcc.n	8006bd8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f003 0301 	and.w	r3, r3, #1
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d1f2      	bne.n	8006bbc <HAL_DMA_IRQHandler+0x2cc>
 8006bd6:	e000      	b.n	8006bda <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006bd8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2201      	movs	r2, #1
 8006bde:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2200      	movs	r2, #0
 8006be6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d005      	beq.n	8006bfe <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	4798      	blx	r3
 8006bfa:	e000      	b.n	8006bfe <HAL_DMA_IRQHandler+0x30e>
        return;
 8006bfc:	bf00      	nop
    }
  }
}
 8006bfe:	3718      	adds	r7, #24
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}

08006c04 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b083      	sub	sp, #12
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006c12:	b2db      	uxtb	r3, r3
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	370c      	adds	r7, #12
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1e:	4770      	bx	lr

08006c20 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b083      	sub	sp, #12
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	370c      	adds	r7, #12
 8006c30:	46bd      	mov	sp, r7
 8006c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c36:	4770      	bx	lr

08006c38 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b085      	sub	sp, #20
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	60f8      	str	r0, [r7, #12]
 8006c40:	60b9      	str	r1, [r7, #8]
 8006c42:	607a      	str	r2, [r7, #4]
 8006c44:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	681a      	ldr	r2, [r3, #0]
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006c54:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	683a      	ldr	r2, [r7, #0]
 8006c5c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	689b      	ldr	r3, [r3, #8]
 8006c62:	2b40      	cmp	r3, #64	@ 0x40
 8006c64:	d108      	bne.n	8006c78 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	687a      	ldr	r2, [r7, #4]
 8006c6c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	68ba      	ldr	r2, [r7, #8]
 8006c74:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006c76:	e007      	b.n	8006c88 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	68ba      	ldr	r2, [r7, #8]
 8006c7e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	687a      	ldr	r2, [r7, #4]
 8006c86:	60da      	str	r2, [r3, #12]
}
 8006c88:	bf00      	nop
 8006c8a:	3714      	adds	r7, #20
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c92:	4770      	bx	lr

08006c94 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b085      	sub	sp, #20
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	b2db      	uxtb	r3, r3
 8006ca2:	3b10      	subs	r3, #16
 8006ca4:	4a14      	ldr	r2, [pc, #80]	@ (8006cf8 <DMA_CalcBaseAndBitshift+0x64>)
 8006ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8006caa:	091b      	lsrs	r3, r3, #4
 8006cac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006cae:	4a13      	ldr	r2, [pc, #76]	@ (8006cfc <DMA_CalcBaseAndBitshift+0x68>)
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	4413      	add	r3, r2
 8006cb4:	781b      	ldrb	r3, [r3, #0]
 8006cb6:	461a      	mov	r2, r3
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	2b03      	cmp	r3, #3
 8006cc0:	d909      	bls.n	8006cd6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8006cca:	f023 0303 	bic.w	r3, r3, #3
 8006cce:	1d1a      	adds	r2, r3, #4
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	659a      	str	r2, [r3, #88]	@ 0x58
 8006cd4:	e007      	b.n	8006ce6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8006cde:	f023 0303 	bic.w	r3, r3, #3
 8006ce2:	687a      	ldr	r2, [r7, #4]
 8006ce4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	3714      	adds	r7, #20
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf4:	4770      	bx	lr
 8006cf6:	bf00      	nop
 8006cf8:	aaaaaaab 	.word	0xaaaaaaab
 8006cfc:	08014710 	.word	0x08014710

08006d00 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b085      	sub	sp, #20
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d08:	2300      	movs	r3, #0
 8006d0a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d10:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	699b      	ldr	r3, [r3, #24]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d11f      	bne.n	8006d5a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	2b03      	cmp	r3, #3
 8006d1e:	d856      	bhi.n	8006dce <DMA_CheckFifoParam+0xce>
 8006d20:	a201      	add	r2, pc, #4	@ (adr r2, 8006d28 <DMA_CheckFifoParam+0x28>)
 8006d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d26:	bf00      	nop
 8006d28:	08006d39 	.word	0x08006d39
 8006d2c:	08006d4b 	.word	0x08006d4b
 8006d30:	08006d39 	.word	0x08006d39
 8006d34:	08006dcf 	.word	0x08006dcf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d3c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d046      	beq.n	8006dd2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006d44:	2301      	movs	r3, #1
 8006d46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006d48:	e043      	b.n	8006dd2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d4e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006d52:	d140      	bne.n	8006dd6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006d54:	2301      	movs	r3, #1
 8006d56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006d58:	e03d      	b.n	8006dd6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	699b      	ldr	r3, [r3, #24]
 8006d5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d62:	d121      	bne.n	8006da8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	2b03      	cmp	r3, #3
 8006d68:	d837      	bhi.n	8006dda <DMA_CheckFifoParam+0xda>
 8006d6a:	a201      	add	r2, pc, #4	@ (adr r2, 8006d70 <DMA_CheckFifoParam+0x70>)
 8006d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d70:	08006d81 	.word	0x08006d81
 8006d74:	08006d87 	.word	0x08006d87
 8006d78:	08006d81 	.word	0x08006d81
 8006d7c:	08006d99 	.word	0x08006d99
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006d80:	2301      	movs	r3, #1
 8006d82:	73fb      	strb	r3, [r7, #15]
      break;
 8006d84:	e030      	b.n	8006de8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d8a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d025      	beq.n	8006dde <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006d92:	2301      	movs	r3, #1
 8006d94:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006d96:	e022      	b.n	8006dde <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d9c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006da0:	d11f      	bne.n	8006de2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006da2:	2301      	movs	r3, #1
 8006da4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006da6:	e01c      	b.n	8006de2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	2b02      	cmp	r3, #2
 8006dac:	d903      	bls.n	8006db6 <DMA_CheckFifoParam+0xb6>
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	2b03      	cmp	r3, #3
 8006db2:	d003      	beq.n	8006dbc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006db4:	e018      	b.n	8006de8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006db6:	2301      	movs	r3, #1
 8006db8:	73fb      	strb	r3, [r7, #15]
      break;
 8006dba:	e015      	b.n	8006de8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dc0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d00e      	beq.n	8006de6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006dc8:	2301      	movs	r3, #1
 8006dca:	73fb      	strb	r3, [r7, #15]
      break;
 8006dcc:	e00b      	b.n	8006de6 <DMA_CheckFifoParam+0xe6>
      break;
 8006dce:	bf00      	nop
 8006dd0:	e00a      	b.n	8006de8 <DMA_CheckFifoParam+0xe8>
      break;
 8006dd2:	bf00      	nop
 8006dd4:	e008      	b.n	8006de8 <DMA_CheckFifoParam+0xe8>
      break;
 8006dd6:	bf00      	nop
 8006dd8:	e006      	b.n	8006de8 <DMA_CheckFifoParam+0xe8>
      break;
 8006dda:	bf00      	nop
 8006ddc:	e004      	b.n	8006de8 <DMA_CheckFifoParam+0xe8>
      break;
 8006dde:	bf00      	nop
 8006de0:	e002      	b.n	8006de8 <DMA_CheckFifoParam+0xe8>
      break;   
 8006de2:	bf00      	nop
 8006de4:	e000      	b.n	8006de8 <DMA_CheckFifoParam+0xe8>
      break;
 8006de6:	bf00      	nop
    }
  } 
  
  return status; 
 8006de8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	3714      	adds	r7, #20
 8006dee:	46bd      	mov	sp, r7
 8006df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df4:	4770      	bx	lr
 8006df6:	bf00      	nop

08006df8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b089      	sub	sp, #36	@ 0x24
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
 8006e00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006e02:	2300      	movs	r3, #0
 8006e04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006e06:	2300      	movs	r3, #0
 8006e08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006e0e:	2300      	movs	r3, #0
 8006e10:	61fb      	str	r3, [r7, #28]
 8006e12:	e159      	b.n	80070c8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006e14:	2201      	movs	r2, #1
 8006e16:	69fb      	ldr	r3, [r7, #28]
 8006e18:	fa02 f303 	lsl.w	r3, r2, r3
 8006e1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	697a      	ldr	r2, [r7, #20]
 8006e24:	4013      	ands	r3, r2
 8006e26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006e28:	693a      	ldr	r2, [r7, #16]
 8006e2a:	697b      	ldr	r3, [r7, #20]
 8006e2c:	429a      	cmp	r2, r3
 8006e2e:	f040 8148 	bne.w	80070c2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	685b      	ldr	r3, [r3, #4]
 8006e36:	f003 0303 	and.w	r3, r3, #3
 8006e3a:	2b01      	cmp	r3, #1
 8006e3c:	d005      	beq.n	8006e4a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006e46:	2b02      	cmp	r3, #2
 8006e48:	d130      	bne.n	8006eac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	689b      	ldr	r3, [r3, #8]
 8006e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006e50:	69fb      	ldr	r3, [r7, #28]
 8006e52:	005b      	lsls	r3, r3, #1
 8006e54:	2203      	movs	r2, #3
 8006e56:	fa02 f303 	lsl.w	r3, r2, r3
 8006e5a:	43db      	mvns	r3, r3
 8006e5c:	69ba      	ldr	r2, [r7, #24]
 8006e5e:	4013      	ands	r3, r2
 8006e60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	68da      	ldr	r2, [r3, #12]
 8006e66:	69fb      	ldr	r3, [r7, #28]
 8006e68:	005b      	lsls	r3, r3, #1
 8006e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8006e6e:	69ba      	ldr	r2, [r7, #24]
 8006e70:	4313      	orrs	r3, r2
 8006e72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	69ba      	ldr	r2, [r7, #24]
 8006e78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006e80:	2201      	movs	r2, #1
 8006e82:	69fb      	ldr	r3, [r7, #28]
 8006e84:	fa02 f303 	lsl.w	r3, r2, r3
 8006e88:	43db      	mvns	r3, r3
 8006e8a:	69ba      	ldr	r2, [r7, #24]
 8006e8c:	4013      	ands	r3, r2
 8006e8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	091b      	lsrs	r3, r3, #4
 8006e96:	f003 0201 	and.w	r2, r3, #1
 8006e9a:	69fb      	ldr	r3, [r7, #28]
 8006e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8006ea0:	69ba      	ldr	r2, [r7, #24]
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	69ba      	ldr	r2, [r7, #24]
 8006eaa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	685b      	ldr	r3, [r3, #4]
 8006eb0:	f003 0303 	and.w	r3, r3, #3
 8006eb4:	2b03      	cmp	r3, #3
 8006eb6:	d017      	beq.n	8006ee8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	68db      	ldr	r3, [r3, #12]
 8006ebc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006ebe:	69fb      	ldr	r3, [r7, #28]
 8006ec0:	005b      	lsls	r3, r3, #1
 8006ec2:	2203      	movs	r2, #3
 8006ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ec8:	43db      	mvns	r3, r3
 8006eca:	69ba      	ldr	r2, [r7, #24]
 8006ecc:	4013      	ands	r3, r2
 8006ece:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	689a      	ldr	r2, [r3, #8]
 8006ed4:	69fb      	ldr	r3, [r7, #28]
 8006ed6:	005b      	lsls	r3, r3, #1
 8006ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8006edc:	69ba      	ldr	r2, [r7, #24]
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	69ba      	ldr	r2, [r7, #24]
 8006ee6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	f003 0303 	and.w	r3, r3, #3
 8006ef0:	2b02      	cmp	r3, #2
 8006ef2:	d123      	bne.n	8006f3c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006ef4:	69fb      	ldr	r3, [r7, #28]
 8006ef6:	08da      	lsrs	r2, r3, #3
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	3208      	adds	r2, #8
 8006efc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f00:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006f02:	69fb      	ldr	r3, [r7, #28]
 8006f04:	f003 0307 	and.w	r3, r3, #7
 8006f08:	009b      	lsls	r3, r3, #2
 8006f0a:	220f      	movs	r2, #15
 8006f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8006f10:	43db      	mvns	r3, r3
 8006f12:	69ba      	ldr	r2, [r7, #24]
 8006f14:	4013      	ands	r3, r2
 8006f16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	691a      	ldr	r2, [r3, #16]
 8006f1c:	69fb      	ldr	r3, [r7, #28]
 8006f1e:	f003 0307 	and.w	r3, r3, #7
 8006f22:	009b      	lsls	r3, r3, #2
 8006f24:	fa02 f303 	lsl.w	r3, r2, r3
 8006f28:	69ba      	ldr	r2, [r7, #24]
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006f2e:	69fb      	ldr	r3, [r7, #28]
 8006f30:	08da      	lsrs	r2, r3, #3
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	3208      	adds	r2, #8
 8006f36:	69b9      	ldr	r1, [r7, #24]
 8006f38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006f42:	69fb      	ldr	r3, [r7, #28]
 8006f44:	005b      	lsls	r3, r3, #1
 8006f46:	2203      	movs	r2, #3
 8006f48:	fa02 f303 	lsl.w	r3, r2, r3
 8006f4c:	43db      	mvns	r3, r3
 8006f4e:	69ba      	ldr	r2, [r7, #24]
 8006f50:	4013      	ands	r3, r2
 8006f52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	685b      	ldr	r3, [r3, #4]
 8006f58:	f003 0203 	and.w	r2, r3, #3
 8006f5c:	69fb      	ldr	r3, [r7, #28]
 8006f5e:	005b      	lsls	r3, r3, #1
 8006f60:	fa02 f303 	lsl.w	r3, r2, r3
 8006f64:	69ba      	ldr	r2, [r7, #24]
 8006f66:	4313      	orrs	r3, r2
 8006f68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	69ba      	ldr	r2, [r7, #24]
 8006f6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	685b      	ldr	r3, [r3, #4]
 8006f74:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	f000 80a2 	beq.w	80070c2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006f7e:	2300      	movs	r3, #0
 8006f80:	60fb      	str	r3, [r7, #12]
 8006f82:	4b57      	ldr	r3, [pc, #348]	@ (80070e0 <HAL_GPIO_Init+0x2e8>)
 8006f84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f86:	4a56      	ldr	r2, [pc, #344]	@ (80070e0 <HAL_GPIO_Init+0x2e8>)
 8006f88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006f8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8006f8e:	4b54      	ldr	r3, [pc, #336]	@ (80070e0 <HAL_GPIO_Init+0x2e8>)
 8006f90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006f96:	60fb      	str	r3, [r7, #12]
 8006f98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006f9a:	4a52      	ldr	r2, [pc, #328]	@ (80070e4 <HAL_GPIO_Init+0x2ec>)
 8006f9c:	69fb      	ldr	r3, [r7, #28]
 8006f9e:	089b      	lsrs	r3, r3, #2
 8006fa0:	3302      	adds	r3, #2
 8006fa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006fa8:	69fb      	ldr	r3, [r7, #28]
 8006faa:	f003 0303 	and.w	r3, r3, #3
 8006fae:	009b      	lsls	r3, r3, #2
 8006fb0:	220f      	movs	r2, #15
 8006fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8006fb6:	43db      	mvns	r3, r3
 8006fb8:	69ba      	ldr	r2, [r7, #24]
 8006fba:	4013      	ands	r3, r2
 8006fbc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	4a49      	ldr	r2, [pc, #292]	@ (80070e8 <HAL_GPIO_Init+0x2f0>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d019      	beq.n	8006ffa <HAL_GPIO_Init+0x202>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	4a48      	ldr	r2, [pc, #288]	@ (80070ec <HAL_GPIO_Init+0x2f4>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d013      	beq.n	8006ff6 <HAL_GPIO_Init+0x1fe>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	4a47      	ldr	r2, [pc, #284]	@ (80070f0 <HAL_GPIO_Init+0x2f8>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d00d      	beq.n	8006ff2 <HAL_GPIO_Init+0x1fa>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	4a46      	ldr	r2, [pc, #280]	@ (80070f4 <HAL_GPIO_Init+0x2fc>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d007      	beq.n	8006fee <HAL_GPIO_Init+0x1f6>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	4a45      	ldr	r2, [pc, #276]	@ (80070f8 <HAL_GPIO_Init+0x300>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d101      	bne.n	8006fea <HAL_GPIO_Init+0x1f2>
 8006fe6:	2304      	movs	r3, #4
 8006fe8:	e008      	b.n	8006ffc <HAL_GPIO_Init+0x204>
 8006fea:	2307      	movs	r3, #7
 8006fec:	e006      	b.n	8006ffc <HAL_GPIO_Init+0x204>
 8006fee:	2303      	movs	r3, #3
 8006ff0:	e004      	b.n	8006ffc <HAL_GPIO_Init+0x204>
 8006ff2:	2302      	movs	r3, #2
 8006ff4:	e002      	b.n	8006ffc <HAL_GPIO_Init+0x204>
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	e000      	b.n	8006ffc <HAL_GPIO_Init+0x204>
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	69fa      	ldr	r2, [r7, #28]
 8006ffe:	f002 0203 	and.w	r2, r2, #3
 8007002:	0092      	lsls	r2, r2, #2
 8007004:	4093      	lsls	r3, r2
 8007006:	69ba      	ldr	r2, [r7, #24]
 8007008:	4313      	orrs	r3, r2
 800700a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800700c:	4935      	ldr	r1, [pc, #212]	@ (80070e4 <HAL_GPIO_Init+0x2ec>)
 800700e:	69fb      	ldr	r3, [r7, #28]
 8007010:	089b      	lsrs	r3, r3, #2
 8007012:	3302      	adds	r3, #2
 8007014:	69ba      	ldr	r2, [r7, #24]
 8007016:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800701a:	4b38      	ldr	r3, [pc, #224]	@ (80070fc <HAL_GPIO_Init+0x304>)
 800701c:	689b      	ldr	r3, [r3, #8]
 800701e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	43db      	mvns	r3, r3
 8007024:	69ba      	ldr	r2, [r7, #24]
 8007026:	4013      	ands	r3, r2
 8007028:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	685b      	ldr	r3, [r3, #4]
 800702e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007032:	2b00      	cmp	r3, #0
 8007034:	d003      	beq.n	800703e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8007036:	69ba      	ldr	r2, [r7, #24]
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	4313      	orrs	r3, r2
 800703c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800703e:	4a2f      	ldr	r2, [pc, #188]	@ (80070fc <HAL_GPIO_Init+0x304>)
 8007040:	69bb      	ldr	r3, [r7, #24]
 8007042:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007044:	4b2d      	ldr	r3, [pc, #180]	@ (80070fc <HAL_GPIO_Init+0x304>)
 8007046:	68db      	ldr	r3, [r3, #12]
 8007048:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	43db      	mvns	r3, r3
 800704e:	69ba      	ldr	r2, [r7, #24]
 8007050:	4013      	ands	r3, r2
 8007052:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	685b      	ldr	r3, [r3, #4]
 8007058:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800705c:	2b00      	cmp	r3, #0
 800705e:	d003      	beq.n	8007068 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8007060:	69ba      	ldr	r2, [r7, #24]
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	4313      	orrs	r3, r2
 8007066:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007068:	4a24      	ldr	r2, [pc, #144]	@ (80070fc <HAL_GPIO_Init+0x304>)
 800706a:	69bb      	ldr	r3, [r7, #24]
 800706c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800706e:	4b23      	ldr	r3, [pc, #140]	@ (80070fc <HAL_GPIO_Init+0x304>)
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	43db      	mvns	r3, r3
 8007078:	69ba      	ldr	r2, [r7, #24]
 800707a:	4013      	ands	r3, r2
 800707c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	685b      	ldr	r3, [r3, #4]
 8007082:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007086:	2b00      	cmp	r3, #0
 8007088:	d003      	beq.n	8007092 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800708a:	69ba      	ldr	r2, [r7, #24]
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	4313      	orrs	r3, r2
 8007090:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007092:	4a1a      	ldr	r2, [pc, #104]	@ (80070fc <HAL_GPIO_Init+0x304>)
 8007094:	69bb      	ldr	r3, [r7, #24]
 8007096:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007098:	4b18      	ldr	r3, [pc, #96]	@ (80070fc <HAL_GPIO_Init+0x304>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	43db      	mvns	r3, r3
 80070a2:	69ba      	ldr	r2, [r7, #24]
 80070a4:	4013      	ands	r3, r2
 80070a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d003      	beq.n	80070bc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80070b4:	69ba      	ldr	r2, [r7, #24]
 80070b6:	693b      	ldr	r3, [r7, #16]
 80070b8:	4313      	orrs	r3, r2
 80070ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80070bc:	4a0f      	ldr	r2, [pc, #60]	@ (80070fc <HAL_GPIO_Init+0x304>)
 80070be:	69bb      	ldr	r3, [r7, #24]
 80070c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80070c2:	69fb      	ldr	r3, [r7, #28]
 80070c4:	3301      	adds	r3, #1
 80070c6:	61fb      	str	r3, [r7, #28]
 80070c8:	69fb      	ldr	r3, [r7, #28]
 80070ca:	2b0f      	cmp	r3, #15
 80070cc:	f67f aea2 	bls.w	8006e14 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80070d0:	bf00      	nop
 80070d2:	bf00      	nop
 80070d4:	3724      	adds	r7, #36	@ 0x24
 80070d6:	46bd      	mov	sp, r7
 80070d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070dc:	4770      	bx	lr
 80070de:	bf00      	nop
 80070e0:	40023800 	.word	0x40023800
 80070e4:	40013800 	.word	0x40013800
 80070e8:	40020000 	.word	0x40020000
 80070ec:	40020400 	.word	0x40020400
 80070f0:	40020800 	.word	0x40020800
 80070f4:	40020c00 	.word	0x40020c00
 80070f8:	40021000 	.word	0x40021000
 80070fc:	40013c00 	.word	0x40013c00

08007100 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007100:	b480      	push	{r7}
 8007102:	b085      	sub	sp, #20
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
 8007108:	460b      	mov	r3, r1
 800710a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	691a      	ldr	r2, [r3, #16]
 8007110:	887b      	ldrh	r3, [r7, #2]
 8007112:	4013      	ands	r3, r2
 8007114:	2b00      	cmp	r3, #0
 8007116:	d002      	beq.n	800711e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007118:	2301      	movs	r3, #1
 800711a:	73fb      	strb	r3, [r7, #15]
 800711c:	e001      	b.n	8007122 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800711e:	2300      	movs	r3, #0
 8007120:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007122:	7bfb      	ldrb	r3, [r7, #15]
}
 8007124:	4618      	mov	r0, r3
 8007126:	3714      	adds	r7, #20
 8007128:	46bd      	mov	sp, r7
 800712a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712e:	4770      	bx	lr

08007130 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007130:	b480      	push	{r7}
 8007132:	b083      	sub	sp, #12
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
 8007138:	460b      	mov	r3, r1
 800713a:	807b      	strh	r3, [r7, #2]
 800713c:	4613      	mov	r3, r2
 800713e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007140:	787b      	ldrb	r3, [r7, #1]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d003      	beq.n	800714e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007146:	887a      	ldrh	r2, [r7, #2]
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800714c:	e003      	b.n	8007156 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800714e:	887b      	ldrh	r3, [r7, #2]
 8007150:	041a      	lsls	r2, r3, #16
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	619a      	str	r2, [r3, #24]
}
 8007156:	bf00      	nop
 8007158:	370c      	adds	r7, #12
 800715a:	46bd      	mov	sp, r7
 800715c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007160:	4770      	bx	lr

08007162 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007162:	b480      	push	{r7}
 8007164:	b085      	sub	sp, #20
 8007166:	af00      	add	r7, sp, #0
 8007168:	6078      	str	r0, [r7, #4]
 800716a:	460b      	mov	r3, r1
 800716c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	695b      	ldr	r3, [r3, #20]
 8007172:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007174:	887a      	ldrh	r2, [r7, #2]
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	4013      	ands	r3, r2
 800717a:	041a      	lsls	r2, r3, #16
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	43d9      	mvns	r1, r3
 8007180:	887b      	ldrh	r3, [r7, #2]
 8007182:	400b      	ands	r3, r1
 8007184:	431a      	orrs	r2, r3
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	619a      	str	r2, [r3, #24]
}
 800718a:	bf00      	nop
 800718c:	3714      	adds	r7, #20
 800718e:	46bd      	mov	sp, r7
 8007190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007194:	4770      	bx	lr
	...

08007198 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b082      	sub	sp, #8
 800719c:	af00      	add	r7, sp, #0
 800719e:	4603      	mov	r3, r0
 80071a0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80071a2:	4b08      	ldr	r3, [pc, #32]	@ (80071c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80071a4:	695a      	ldr	r2, [r3, #20]
 80071a6:	88fb      	ldrh	r3, [r7, #6]
 80071a8:	4013      	ands	r3, r2
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d006      	beq.n	80071bc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80071ae:	4a05      	ldr	r2, [pc, #20]	@ (80071c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80071b0:	88fb      	ldrh	r3, [r7, #6]
 80071b2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80071b4:	88fb      	ldrh	r3, [r7, #6]
 80071b6:	4618      	mov	r0, r3
 80071b8:	f7fd fdc6 	bl	8004d48 <HAL_GPIO_EXTI_Callback>
  }
}
 80071bc:	bf00      	nop
 80071be:	3708      	adds	r7, #8
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}
 80071c4:	40013c00 	.word	0x40013c00

080071c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b084      	sub	sp, #16
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d101      	bne.n	80071da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80071d6:	2301      	movs	r3, #1
 80071d8:	e12b      	b.n	8007432 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80071e0:	b2db      	uxtb	r3, r3
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d106      	bne.n	80071f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2200      	movs	r2, #0
 80071ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f7fe f874 	bl	80052dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2224      	movs	r2, #36	@ 0x24
 80071f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	681a      	ldr	r2, [r3, #0]
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f022 0201 	bic.w	r2, r2, #1
 800720a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	681a      	ldr	r2, [r3, #0]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800721a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	681a      	ldr	r2, [r3, #0]
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800722a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800722c:	f005 fa34 	bl	800c698 <HAL_RCC_GetPCLK1Freq>
 8007230:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	685b      	ldr	r3, [r3, #4]
 8007236:	4a81      	ldr	r2, [pc, #516]	@ (800743c <HAL_I2C_Init+0x274>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d807      	bhi.n	800724c <HAL_I2C_Init+0x84>
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	4a80      	ldr	r2, [pc, #512]	@ (8007440 <HAL_I2C_Init+0x278>)
 8007240:	4293      	cmp	r3, r2
 8007242:	bf94      	ite	ls
 8007244:	2301      	movls	r3, #1
 8007246:	2300      	movhi	r3, #0
 8007248:	b2db      	uxtb	r3, r3
 800724a:	e006      	b.n	800725a <HAL_I2C_Init+0x92>
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	4a7d      	ldr	r2, [pc, #500]	@ (8007444 <HAL_I2C_Init+0x27c>)
 8007250:	4293      	cmp	r3, r2
 8007252:	bf94      	ite	ls
 8007254:	2301      	movls	r3, #1
 8007256:	2300      	movhi	r3, #0
 8007258:	b2db      	uxtb	r3, r3
 800725a:	2b00      	cmp	r3, #0
 800725c:	d001      	beq.n	8007262 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800725e:	2301      	movs	r3, #1
 8007260:	e0e7      	b.n	8007432 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	4a78      	ldr	r2, [pc, #480]	@ (8007448 <HAL_I2C_Init+0x280>)
 8007266:	fba2 2303 	umull	r2, r3, r2, r3
 800726a:	0c9b      	lsrs	r3, r3, #18
 800726c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	68ba      	ldr	r2, [r7, #8]
 800727e:	430a      	orrs	r2, r1
 8007280:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	6a1b      	ldr	r3, [r3, #32]
 8007288:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	685b      	ldr	r3, [r3, #4]
 8007290:	4a6a      	ldr	r2, [pc, #424]	@ (800743c <HAL_I2C_Init+0x274>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d802      	bhi.n	800729c <HAL_I2C_Init+0xd4>
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	3301      	adds	r3, #1
 800729a:	e009      	b.n	80072b0 <HAL_I2C_Init+0xe8>
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80072a2:	fb02 f303 	mul.w	r3, r2, r3
 80072a6:	4a69      	ldr	r2, [pc, #420]	@ (800744c <HAL_I2C_Init+0x284>)
 80072a8:	fba2 2303 	umull	r2, r3, r2, r3
 80072ac:	099b      	lsrs	r3, r3, #6
 80072ae:	3301      	adds	r3, #1
 80072b0:	687a      	ldr	r2, [r7, #4]
 80072b2:	6812      	ldr	r2, [r2, #0]
 80072b4:	430b      	orrs	r3, r1
 80072b6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	69db      	ldr	r3, [r3, #28]
 80072be:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80072c2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	685b      	ldr	r3, [r3, #4]
 80072ca:	495c      	ldr	r1, [pc, #368]	@ (800743c <HAL_I2C_Init+0x274>)
 80072cc:	428b      	cmp	r3, r1
 80072ce:	d819      	bhi.n	8007304 <HAL_I2C_Init+0x13c>
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	1e59      	subs	r1, r3, #1
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	685b      	ldr	r3, [r3, #4]
 80072d8:	005b      	lsls	r3, r3, #1
 80072da:	fbb1 f3f3 	udiv	r3, r1, r3
 80072de:	1c59      	adds	r1, r3, #1
 80072e0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80072e4:	400b      	ands	r3, r1
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d00a      	beq.n	8007300 <HAL_I2C_Init+0x138>
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	1e59      	subs	r1, r3, #1
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	685b      	ldr	r3, [r3, #4]
 80072f2:	005b      	lsls	r3, r3, #1
 80072f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80072f8:	3301      	adds	r3, #1
 80072fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80072fe:	e051      	b.n	80073a4 <HAL_I2C_Init+0x1dc>
 8007300:	2304      	movs	r3, #4
 8007302:	e04f      	b.n	80073a4 <HAL_I2C_Init+0x1dc>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	689b      	ldr	r3, [r3, #8]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d111      	bne.n	8007330 <HAL_I2C_Init+0x168>
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	1e58      	subs	r0, r3, #1
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6859      	ldr	r1, [r3, #4]
 8007314:	460b      	mov	r3, r1
 8007316:	005b      	lsls	r3, r3, #1
 8007318:	440b      	add	r3, r1
 800731a:	fbb0 f3f3 	udiv	r3, r0, r3
 800731e:	3301      	adds	r3, #1
 8007320:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007324:	2b00      	cmp	r3, #0
 8007326:	bf0c      	ite	eq
 8007328:	2301      	moveq	r3, #1
 800732a:	2300      	movne	r3, #0
 800732c:	b2db      	uxtb	r3, r3
 800732e:	e012      	b.n	8007356 <HAL_I2C_Init+0x18e>
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	1e58      	subs	r0, r3, #1
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6859      	ldr	r1, [r3, #4]
 8007338:	460b      	mov	r3, r1
 800733a:	009b      	lsls	r3, r3, #2
 800733c:	440b      	add	r3, r1
 800733e:	0099      	lsls	r1, r3, #2
 8007340:	440b      	add	r3, r1
 8007342:	fbb0 f3f3 	udiv	r3, r0, r3
 8007346:	3301      	adds	r3, #1
 8007348:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800734c:	2b00      	cmp	r3, #0
 800734e:	bf0c      	ite	eq
 8007350:	2301      	moveq	r3, #1
 8007352:	2300      	movne	r3, #0
 8007354:	b2db      	uxtb	r3, r3
 8007356:	2b00      	cmp	r3, #0
 8007358:	d001      	beq.n	800735e <HAL_I2C_Init+0x196>
 800735a:	2301      	movs	r3, #1
 800735c:	e022      	b.n	80073a4 <HAL_I2C_Init+0x1dc>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	689b      	ldr	r3, [r3, #8]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d10e      	bne.n	8007384 <HAL_I2C_Init+0x1bc>
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	1e58      	subs	r0, r3, #1
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6859      	ldr	r1, [r3, #4]
 800736e:	460b      	mov	r3, r1
 8007370:	005b      	lsls	r3, r3, #1
 8007372:	440b      	add	r3, r1
 8007374:	fbb0 f3f3 	udiv	r3, r0, r3
 8007378:	3301      	adds	r3, #1
 800737a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800737e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007382:	e00f      	b.n	80073a4 <HAL_I2C_Init+0x1dc>
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	1e58      	subs	r0, r3, #1
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6859      	ldr	r1, [r3, #4]
 800738c:	460b      	mov	r3, r1
 800738e:	009b      	lsls	r3, r3, #2
 8007390:	440b      	add	r3, r1
 8007392:	0099      	lsls	r1, r3, #2
 8007394:	440b      	add	r3, r1
 8007396:	fbb0 f3f3 	udiv	r3, r0, r3
 800739a:	3301      	adds	r3, #1
 800739c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80073a0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80073a4:	6879      	ldr	r1, [r7, #4]
 80073a6:	6809      	ldr	r1, [r1, #0]
 80073a8:	4313      	orrs	r3, r2
 80073aa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	69da      	ldr	r2, [r3, #28]
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6a1b      	ldr	r3, [r3, #32]
 80073be:	431a      	orrs	r2, r3
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	430a      	orrs	r2, r1
 80073c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	689b      	ldr	r3, [r3, #8]
 80073ce:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80073d2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80073d6:	687a      	ldr	r2, [r7, #4]
 80073d8:	6911      	ldr	r1, [r2, #16]
 80073da:	687a      	ldr	r2, [r7, #4]
 80073dc:	68d2      	ldr	r2, [r2, #12]
 80073de:	4311      	orrs	r1, r2
 80073e0:	687a      	ldr	r2, [r7, #4]
 80073e2:	6812      	ldr	r2, [r2, #0]
 80073e4:	430b      	orrs	r3, r1
 80073e6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	68db      	ldr	r3, [r3, #12]
 80073ee:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	695a      	ldr	r2, [r3, #20]
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	699b      	ldr	r3, [r3, #24]
 80073fa:	431a      	orrs	r2, r3
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	430a      	orrs	r2, r1
 8007402:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	681a      	ldr	r2, [r3, #0]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f042 0201 	orr.w	r2, r2, #1
 8007412:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2200      	movs	r2, #0
 8007418:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2220      	movs	r2, #32
 800741e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2200      	movs	r2, #0
 8007426:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2200      	movs	r2, #0
 800742c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8007430:	2300      	movs	r3, #0
}
 8007432:	4618      	mov	r0, r3
 8007434:	3710      	adds	r7, #16
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}
 800743a:	bf00      	nop
 800743c:	000186a0 	.word	0x000186a0
 8007440:	001e847f 	.word	0x001e847f
 8007444:	003d08ff 	.word	0x003d08ff
 8007448:	431bde83 	.word	0x431bde83
 800744c:	10624dd3 	.word	0x10624dd3

08007450 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8007450:	b480      	push	{r7}
 8007452:	b083      	sub	sp, #12
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	695b      	ldr	r3, [r3, #20]
 800745e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007462:	2b80      	cmp	r3, #128	@ 0x80
 8007464:	d103      	bne.n	800746e <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	2200      	movs	r2, #0
 800746c:	611a      	str	r2, [r3, #16]
  }
}
 800746e:	bf00      	nop
 8007470:	370c      	adds	r7, #12
 8007472:	46bd      	mov	sp, r7
 8007474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007478:	4770      	bx	lr
	...

0800747c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b088      	sub	sp, #32
 8007480:	af02      	add	r7, sp, #8
 8007482:	60f8      	str	r0, [r7, #12]
 8007484:	607a      	str	r2, [r7, #4]
 8007486:	461a      	mov	r2, r3
 8007488:	460b      	mov	r3, r1
 800748a:	817b      	strh	r3, [r7, #10]
 800748c:	4613      	mov	r3, r2
 800748e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007490:	f7fe fa38 	bl	8005904 <HAL_GetTick>
 8007494:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800749c:	b2db      	uxtb	r3, r3
 800749e:	2b20      	cmp	r3, #32
 80074a0:	f040 80e0 	bne.w	8007664 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	9300      	str	r3, [sp, #0]
 80074a8:	2319      	movs	r3, #25
 80074aa:	2201      	movs	r2, #1
 80074ac:	4970      	ldr	r1, [pc, #448]	@ (8007670 <HAL_I2C_Master_Transmit+0x1f4>)
 80074ae:	68f8      	ldr	r0, [r7, #12]
 80074b0:	f002 ffe0 	bl	800a474 <I2C_WaitOnFlagUntilTimeout>
 80074b4:	4603      	mov	r3, r0
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d001      	beq.n	80074be <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80074ba:	2302      	movs	r3, #2
 80074bc:	e0d3      	b.n	8007666 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80074c4:	2b01      	cmp	r3, #1
 80074c6:	d101      	bne.n	80074cc <HAL_I2C_Master_Transmit+0x50>
 80074c8:	2302      	movs	r3, #2
 80074ca:	e0cc      	b.n	8007666 <HAL_I2C_Master_Transmit+0x1ea>
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	2201      	movs	r2, #1
 80074d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f003 0301 	and.w	r3, r3, #1
 80074de:	2b01      	cmp	r3, #1
 80074e0:	d007      	beq.n	80074f2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	681a      	ldr	r2, [r3, #0]
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f042 0201 	orr.w	r2, r2, #1
 80074f0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	681a      	ldr	r2, [r3, #0]
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007500:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	2221      	movs	r2, #33	@ 0x21
 8007506:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	2210      	movs	r2, #16
 800750e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	2200      	movs	r2, #0
 8007516:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	687a      	ldr	r2, [r7, #4]
 800751c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	893a      	ldrh	r2, [r7, #8]
 8007522:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007528:	b29a      	uxth	r2, r3
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	4a50      	ldr	r2, [pc, #320]	@ (8007674 <HAL_I2C_Master_Transmit+0x1f8>)
 8007532:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007534:	8979      	ldrh	r1, [r7, #10]
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	6a3a      	ldr	r2, [r7, #32]
 800753a:	68f8      	ldr	r0, [r7, #12]
 800753c:	f002 fbd6 	bl	8009cec <I2C_MasterRequestWrite>
 8007540:	4603      	mov	r3, r0
 8007542:	2b00      	cmp	r3, #0
 8007544:	d001      	beq.n	800754a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8007546:	2301      	movs	r3, #1
 8007548:	e08d      	b.n	8007666 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800754a:	2300      	movs	r3, #0
 800754c:	613b      	str	r3, [r7, #16]
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	695b      	ldr	r3, [r3, #20]
 8007554:	613b      	str	r3, [r7, #16]
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	699b      	ldr	r3, [r3, #24]
 800755c:	613b      	str	r3, [r7, #16]
 800755e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8007560:	e066      	b.n	8007630 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007562:	697a      	ldr	r2, [r7, #20]
 8007564:	6a39      	ldr	r1, [r7, #32]
 8007566:	68f8      	ldr	r0, [r7, #12]
 8007568:	f003 f89e 	bl	800a6a8 <I2C_WaitOnTXEFlagUntilTimeout>
 800756c:	4603      	mov	r3, r0
 800756e:	2b00      	cmp	r3, #0
 8007570:	d00d      	beq.n	800758e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007576:	2b04      	cmp	r3, #4
 8007578:	d107      	bne.n	800758a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	681a      	ldr	r2, [r3, #0]
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007588:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800758a:	2301      	movs	r3, #1
 800758c:	e06b      	b.n	8007666 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007592:	781a      	ldrb	r2, [r3, #0]
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800759e:	1c5a      	adds	r2, r3, #1
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80075a8:	b29b      	uxth	r3, r3
 80075aa:	3b01      	subs	r3, #1
 80075ac:	b29a      	uxth	r2, r3
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80075b6:	3b01      	subs	r3, #1
 80075b8:	b29a      	uxth	r2, r3
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	695b      	ldr	r3, [r3, #20]
 80075c4:	f003 0304 	and.w	r3, r3, #4
 80075c8:	2b04      	cmp	r3, #4
 80075ca:	d11b      	bne.n	8007604 <HAL_I2C_Master_Transmit+0x188>
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d017      	beq.n	8007604 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075d8:	781a      	ldrb	r2, [r3, #0]
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075e4:	1c5a      	adds	r2, r3, #1
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80075ee:	b29b      	uxth	r3, r3
 80075f0:	3b01      	subs	r3, #1
 80075f2:	b29a      	uxth	r2, r3
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80075fc:	3b01      	subs	r3, #1
 80075fe:	b29a      	uxth	r2, r3
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007604:	697a      	ldr	r2, [r7, #20]
 8007606:	6a39      	ldr	r1, [r7, #32]
 8007608:	68f8      	ldr	r0, [r7, #12]
 800760a:	f003 f895 	bl	800a738 <I2C_WaitOnBTFFlagUntilTimeout>
 800760e:	4603      	mov	r3, r0
 8007610:	2b00      	cmp	r3, #0
 8007612:	d00d      	beq.n	8007630 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007618:	2b04      	cmp	r3, #4
 800761a:	d107      	bne.n	800762c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	681a      	ldr	r2, [r3, #0]
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800762a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800762c:	2301      	movs	r3, #1
 800762e:	e01a      	b.n	8007666 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007634:	2b00      	cmp	r3, #0
 8007636:	d194      	bne.n	8007562 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	681a      	ldr	r2, [r3, #0]
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007646:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	2220      	movs	r2, #32
 800764c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	2200      	movs	r2, #0
 8007654:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	2200      	movs	r2, #0
 800765c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007660:	2300      	movs	r3, #0
 8007662:	e000      	b.n	8007666 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8007664:	2302      	movs	r3, #2
  }
}
 8007666:	4618      	mov	r0, r3
 8007668:	3718      	adds	r7, #24
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}
 800766e:	bf00      	nop
 8007670:	00100002 	.word	0x00100002
 8007674:	ffff0000 	.word	0xffff0000

08007678 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b088      	sub	sp, #32
 800767c:	af02      	add	r7, sp, #8
 800767e:	60f8      	str	r0, [r7, #12]
 8007680:	4608      	mov	r0, r1
 8007682:	4611      	mov	r1, r2
 8007684:	461a      	mov	r2, r3
 8007686:	4603      	mov	r3, r0
 8007688:	817b      	strh	r3, [r7, #10]
 800768a:	460b      	mov	r3, r1
 800768c:	813b      	strh	r3, [r7, #8]
 800768e:	4613      	mov	r3, r2
 8007690:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007692:	f7fe f937 	bl	8005904 <HAL_GetTick>
 8007696:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800769e:	b2db      	uxtb	r3, r3
 80076a0:	2b20      	cmp	r3, #32
 80076a2:	f040 80d9 	bne.w	8007858 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	9300      	str	r3, [sp, #0]
 80076aa:	2319      	movs	r3, #25
 80076ac:	2201      	movs	r2, #1
 80076ae:	496d      	ldr	r1, [pc, #436]	@ (8007864 <HAL_I2C_Mem_Write+0x1ec>)
 80076b0:	68f8      	ldr	r0, [r7, #12]
 80076b2:	f002 fedf 	bl	800a474 <I2C_WaitOnFlagUntilTimeout>
 80076b6:	4603      	mov	r3, r0
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d001      	beq.n	80076c0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80076bc:	2302      	movs	r3, #2
 80076be:	e0cc      	b.n	800785a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80076c6:	2b01      	cmp	r3, #1
 80076c8:	d101      	bne.n	80076ce <HAL_I2C_Mem_Write+0x56>
 80076ca:	2302      	movs	r3, #2
 80076cc:	e0c5      	b.n	800785a <HAL_I2C_Mem_Write+0x1e2>
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	2201      	movs	r2, #1
 80076d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f003 0301 	and.w	r3, r3, #1
 80076e0:	2b01      	cmp	r3, #1
 80076e2:	d007      	beq.n	80076f4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	681a      	ldr	r2, [r3, #0]
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f042 0201 	orr.w	r2, r2, #1
 80076f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	681a      	ldr	r2, [r3, #0]
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007702:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	2221      	movs	r2, #33	@ 0x21
 8007708:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	2240      	movs	r2, #64	@ 0x40
 8007710:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	2200      	movs	r2, #0
 8007718:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	6a3a      	ldr	r2, [r7, #32]
 800771e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007724:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800772a:	b29a      	uxth	r2, r3
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	4a4d      	ldr	r2, [pc, #308]	@ (8007868 <HAL_I2C_Mem_Write+0x1f0>)
 8007734:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007736:	88f8      	ldrh	r0, [r7, #6]
 8007738:	893a      	ldrh	r2, [r7, #8]
 800773a:	8979      	ldrh	r1, [r7, #10]
 800773c:	697b      	ldr	r3, [r7, #20]
 800773e:	9301      	str	r3, [sp, #4]
 8007740:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007742:	9300      	str	r3, [sp, #0]
 8007744:	4603      	mov	r3, r0
 8007746:	68f8      	ldr	r0, [r7, #12]
 8007748:	f002 fb52 	bl	8009df0 <I2C_RequestMemoryWrite>
 800774c:	4603      	mov	r3, r0
 800774e:	2b00      	cmp	r3, #0
 8007750:	d052      	beq.n	80077f8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8007752:	2301      	movs	r3, #1
 8007754:	e081      	b.n	800785a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007756:	697a      	ldr	r2, [r7, #20]
 8007758:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800775a:	68f8      	ldr	r0, [r7, #12]
 800775c:	f002 ffa4 	bl	800a6a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8007760:	4603      	mov	r3, r0
 8007762:	2b00      	cmp	r3, #0
 8007764:	d00d      	beq.n	8007782 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800776a:	2b04      	cmp	r3, #4
 800776c:	d107      	bne.n	800777e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	681a      	ldr	r2, [r3, #0]
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800777c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800777e:	2301      	movs	r3, #1
 8007780:	e06b      	b.n	800785a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007786:	781a      	ldrb	r2, [r3, #0]
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007792:	1c5a      	adds	r2, r3, #1
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800779c:	3b01      	subs	r3, #1
 800779e:	b29a      	uxth	r2, r3
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80077a8:	b29b      	uxth	r3, r3
 80077aa:	3b01      	subs	r3, #1
 80077ac:	b29a      	uxth	r2, r3
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	695b      	ldr	r3, [r3, #20]
 80077b8:	f003 0304 	and.w	r3, r3, #4
 80077bc:	2b04      	cmp	r3, #4
 80077be:	d11b      	bne.n	80077f8 <HAL_I2C_Mem_Write+0x180>
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d017      	beq.n	80077f8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077cc:	781a      	ldrb	r2, [r3, #0]
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077d8:	1c5a      	adds	r2, r3, #1
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80077e2:	3b01      	subs	r3, #1
 80077e4:	b29a      	uxth	r2, r3
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80077ee:	b29b      	uxth	r3, r3
 80077f0:	3b01      	subs	r3, #1
 80077f2:	b29a      	uxth	r2, r3
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d1aa      	bne.n	8007756 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007800:	697a      	ldr	r2, [r7, #20]
 8007802:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007804:	68f8      	ldr	r0, [r7, #12]
 8007806:	f002 ff97 	bl	800a738 <I2C_WaitOnBTFFlagUntilTimeout>
 800780a:	4603      	mov	r3, r0
 800780c:	2b00      	cmp	r3, #0
 800780e:	d00d      	beq.n	800782c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007814:	2b04      	cmp	r3, #4
 8007816:	d107      	bne.n	8007828 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	681a      	ldr	r2, [r3, #0]
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007826:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007828:	2301      	movs	r3, #1
 800782a:	e016      	b.n	800785a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	681a      	ldr	r2, [r3, #0]
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800783a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	2220      	movs	r2, #32
 8007840:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	2200      	movs	r2, #0
 8007848:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	2200      	movs	r2, #0
 8007850:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007854:	2300      	movs	r3, #0
 8007856:	e000      	b.n	800785a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007858:	2302      	movs	r3, #2
  }
}
 800785a:	4618      	mov	r0, r3
 800785c:	3718      	adds	r7, #24
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}
 8007862:	bf00      	nop
 8007864:	00100002 	.word	0x00100002
 8007868:	ffff0000 	.word	0xffff0000

0800786c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b08c      	sub	sp, #48	@ 0x30
 8007870:	af02      	add	r7, sp, #8
 8007872:	60f8      	str	r0, [r7, #12]
 8007874:	4608      	mov	r0, r1
 8007876:	4611      	mov	r1, r2
 8007878:	461a      	mov	r2, r3
 800787a:	4603      	mov	r3, r0
 800787c:	817b      	strh	r3, [r7, #10]
 800787e:	460b      	mov	r3, r1
 8007880:	813b      	strh	r3, [r7, #8]
 8007882:	4613      	mov	r3, r2
 8007884:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007886:	f7fe f83d 	bl	8005904 <HAL_GetTick>
 800788a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007892:	b2db      	uxtb	r3, r3
 8007894:	2b20      	cmp	r3, #32
 8007896:	f040 8214 	bne.w	8007cc2 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800789a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800789c:	9300      	str	r3, [sp, #0]
 800789e:	2319      	movs	r3, #25
 80078a0:	2201      	movs	r2, #1
 80078a2:	497b      	ldr	r1, [pc, #492]	@ (8007a90 <HAL_I2C_Mem_Read+0x224>)
 80078a4:	68f8      	ldr	r0, [r7, #12]
 80078a6:	f002 fde5 	bl	800a474 <I2C_WaitOnFlagUntilTimeout>
 80078aa:	4603      	mov	r3, r0
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d001      	beq.n	80078b4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80078b0:	2302      	movs	r3, #2
 80078b2:	e207      	b.n	8007cc4 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80078ba:	2b01      	cmp	r3, #1
 80078bc:	d101      	bne.n	80078c2 <HAL_I2C_Mem_Read+0x56>
 80078be:	2302      	movs	r3, #2
 80078c0:	e200      	b.n	8007cc4 <HAL_I2C_Mem_Read+0x458>
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	2201      	movs	r2, #1
 80078c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f003 0301 	and.w	r3, r3, #1
 80078d4:	2b01      	cmp	r3, #1
 80078d6:	d007      	beq.n	80078e8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	681a      	ldr	r2, [r3, #0]
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f042 0201 	orr.w	r2, r2, #1
 80078e6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	681a      	ldr	r2, [r3, #0]
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80078f6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	2222      	movs	r2, #34	@ 0x22
 80078fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	2240      	movs	r2, #64	@ 0x40
 8007904:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	2200      	movs	r2, #0
 800790c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007912:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8007918:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800791e:	b29a      	uxth	r2, r3
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	4a5b      	ldr	r2, [pc, #364]	@ (8007a94 <HAL_I2C_Mem_Read+0x228>)
 8007928:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800792a:	88f8      	ldrh	r0, [r7, #6]
 800792c:	893a      	ldrh	r2, [r7, #8]
 800792e:	8979      	ldrh	r1, [r7, #10]
 8007930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007932:	9301      	str	r3, [sp, #4]
 8007934:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007936:	9300      	str	r3, [sp, #0]
 8007938:	4603      	mov	r3, r0
 800793a:	68f8      	ldr	r0, [r7, #12]
 800793c:	f002 faee 	bl	8009f1c <I2C_RequestMemoryRead>
 8007940:	4603      	mov	r3, r0
 8007942:	2b00      	cmp	r3, #0
 8007944:	d001      	beq.n	800794a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8007946:	2301      	movs	r3, #1
 8007948:	e1bc      	b.n	8007cc4 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800794e:	2b00      	cmp	r3, #0
 8007950:	d113      	bne.n	800797a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007952:	2300      	movs	r3, #0
 8007954:	623b      	str	r3, [r7, #32]
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	695b      	ldr	r3, [r3, #20]
 800795c:	623b      	str	r3, [r7, #32]
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	699b      	ldr	r3, [r3, #24]
 8007964:	623b      	str	r3, [r7, #32]
 8007966:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	681a      	ldr	r2, [r3, #0]
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007976:	601a      	str	r2, [r3, #0]
 8007978:	e190      	b.n	8007c9c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800797e:	2b01      	cmp	r3, #1
 8007980:	d11b      	bne.n	80079ba <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	681a      	ldr	r2, [r3, #0]
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007990:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007992:	2300      	movs	r3, #0
 8007994:	61fb      	str	r3, [r7, #28]
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	695b      	ldr	r3, [r3, #20]
 800799c:	61fb      	str	r3, [r7, #28]
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	699b      	ldr	r3, [r3, #24]
 80079a4:	61fb      	str	r3, [r7, #28]
 80079a6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	681a      	ldr	r2, [r3, #0]
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80079b6:	601a      	str	r2, [r3, #0]
 80079b8:	e170      	b.n	8007c9c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80079be:	2b02      	cmp	r3, #2
 80079c0:	d11b      	bne.n	80079fa <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	681a      	ldr	r2, [r3, #0]
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80079d0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	681a      	ldr	r2, [r3, #0]
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80079e0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80079e2:	2300      	movs	r3, #0
 80079e4:	61bb      	str	r3, [r7, #24]
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	695b      	ldr	r3, [r3, #20]
 80079ec:	61bb      	str	r3, [r7, #24]
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	699b      	ldr	r3, [r3, #24]
 80079f4:	61bb      	str	r3, [r7, #24]
 80079f6:	69bb      	ldr	r3, [r7, #24]
 80079f8:	e150      	b.n	8007c9c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80079fa:	2300      	movs	r3, #0
 80079fc:	617b      	str	r3, [r7, #20]
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	695b      	ldr	r3, [r3, #20]
 8007a04:	617b      	str	r3, [r7, #20]
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	699b      	ldr	r3, [r3, #24]
 8007a0c:	617b      	str	r3, [r7, #20]
 8007a0e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007a10:	e144      	b.n	8007c9c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a16:	2b03      	cmp	r3, #3
 8007a18:	f200 80f1 	bhi.w	8007bfe <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a20:	2b01      	cmp	r3, #1
 8007a22:	d123      	bne.n	8007a6c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007a24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a26:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007a28:	68f8      	ldr	r0, [r7, #12]
 8007a2a:	f002 feff 	bl	800a82c <I2C_WaitOnRXNEFlagUntilTimeout>
 8007a2e:	4603      	mov	r3, r0
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d001      	beq.n	8007a38 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8007a34:	2301      	movs	r3, #1
 8007a36:	e145      	b.n	8007cc4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	691a      	ldr	r2, [r3, #16]
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a42:	b2d2      	uxtb	r2, r2
 8007a44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a4a:	1c5a      	adds	r2, r3, #1
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a54:	3b01      	subs	r3, #1
 8007a56:	b29a      	uxth	r2, r3
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a60:	b29b      	uxth	r3, r3
 8007a62:	3b01      	subs	r3, #1
 8007a64:	b29a      	uxth	r2, r3
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007a6a:	e117      	b.n	8007c9c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a70:	2b02      	cmp	r3, #2
 8007a72:	d14e      	bne.n	8007b12 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a76:	9300      	str	r3, [sp, #0]
 8007a78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	4906      	ldr	r1, [pc, #24]	@ (8007a98 <HAL_I2C_Mem_Read+0x22c>)
 8007a7e:	68f8      	ldr	r0, [r7, #12]
 8007a80:	f002 fcf8 	bl	800a474 <I2C_WaitOnFlagUntilTimeout>
 8007a84:	4603      	mov	r3, r0
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d008      	beq.n	8007a9c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	e11a      	b.n	8007cc4 <HAL_I2C_Mem_Read+0x458>
 8007a8e:	bf00      	nop
 8007a90:	00100002 	.word	0x00100002
 8007a94:	ffff0000 	.word	0xffff0000
 8007a98:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	681a      	ldr	r2, [r3, #0]
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007aaa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	691a      	ldr	r2, [r3, #16]
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ab6:	b2d2      	uxtb	r2, r2
 8007ab8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007abe:	1c5a      	adds	r2, r3, #1
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ac8:	3b01      	subs	r3, #1
 8007aca:	b29a      	uxth	r2, r3
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ad4:	b29b      	uxth	r3, r3
 8007ad6:	3b01      	subs	r3, #1
 8007ad8:	b29a      	uxth	r2, r3
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	691a      	ldr	r2, [r3, #16]
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ae8:	b2d2      	uxtb	r2, r2
 8007aea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007af0:	1c5a      	adds	r2, r3, #1
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007afa:	3b01      	subs	r3, #1
 8007afc:	b29a      	uxth	r2, r3
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b06:	b29b      	uxth	r3, r3
 8007b08:	3b01      	subs	r3, #1
 8007b0a:	b29a      	uxth	r2, r3
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007b10:	e0c4      	b.n	8007c9c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b14:	9300      	str	r3, [sp, #0]
 8007b16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b18:	2200      	movs	r2, #0
 8007b1a:	496c      	ldr	r1, [pc, #432]	@ (8007ccc <HAL_I2C_Mem_Read+0x460>)
 8007b1c:	68f8      	ldr	r0, [r7, #12]
 8007b1e:	f002 fca9 	bl	800a474 <I2C_WaitOnFlagUntilTimeout>
 8007b22:	4603      	mov	r3, r0
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d001      	beq.n	8007b2c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8007b28:	2301      	movs	r3, #1
 8007b2a:	e0cb      	b.n	8007cc4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	681a      	ldr	r2, [r3, #0]
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007b3a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	691a      	ldr	r2, [r3, #16]
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b46:	b2d2      	uxtb	r2, r2
 8007b48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b4e:	1c5a      	adds	r2, r3, #1
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b58:	3b01      	subs	r3, #1
 8007b5a:	b29a      	uxth	r2, r3
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b64:	b29b      	uxth	r3, r3
 8007b66:	3b01      	subs	r3, #1
 8007b68:	b29a      	uxth	r2, r3
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b70:	9300      	str	r3, [sp, #0]
 8007b72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b74:	2200      	movs	r2, #0
 8007b76:	4955      	ldr	r1, [pc, #340]	@ (8007ccc <HAL_I2C_Mem_Read+0x460>)
 8007b78:	68f8      	ldr	r0, [r7, #12]
 8007b7a:	f002 fc7b 	bl	800a474 <I2C_WaitOnFlagUntilTimeout>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d001      	beq.n	8007b88 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8007b84:	2301      	movs	r3, #1
 8007b86:	e09d      	b.n	8007cc4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	681a      	ldr	r2, [r3, #0]
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007b96:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	691a      	ldr	r2, [r3, #16]
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ba2:	b2d2      	uxtb	r2, r2
 8007ba4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007baa:	1c5a      	adds	r2, r3, #1
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007bb4:	3b01      	subs	r3, #1
 8007bb6:	b29a      	uxth	r2, r3
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007bc0:	b29b      	uxth	r3, r3
 8007bc2:	3b01      	subs	r3, #1
 8007bc4:	b29a      	uxth	r2, r3
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	691a      	ldr	r2, [r3, #16]
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bd4:	b2d2      	uxtb	r2, r2
 8007bd6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bdc:	1c5a      	adds	r2, r3, #1
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007be6:	3b01      	subs	r3, #1
 8007be8:	b29a      	uxth	r2, r3
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007bf2:	b29b      	uxth	r3, r3
 8007bf4:	3b01      	subs	r3, #1
 8007bf6:	b29a      	uxth	r2, r3
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007bfc:	e04e      	b.n	8007c9c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007bfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c00:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007c02:	68f8      	ldr	r0, [r7, #12]
 8007c04:	f002 fe12 	bl	800a82c <I2C_WaitOnRXNEFlagUntilTimeout>
 8007c08:	4603      	mov	r3, r0
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d001      	beq.n	8007c12 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8007c0e:	2301      	movs	r3, #1
 8007c10:	e058      	b.n	8007cc4 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	691a      	ldr	r2, [r3, #16]
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c1c:	b2d2      	uxtb	r2, r2
 8007c1e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c24:	1c5a      	adds	r2, r3, #1
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c2e:	3b01      	subs	r3, #1
 8007c30:	b29a      	uxth	r2, r3
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c3a:	b29b      	uxth	r3, r3
 8007c3c:	3b01      	subs	r3, #1
 8007c3e:	b29a      	uxth	r2, r3
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	695b      	ldr	r3, [r3, #20]
 8007c4a:	f003 0304 	and.w	r3, r3, #4
 8007c4e:	2b04      	cmp	r3, #4
 8007c50:	d124      	bne.n	8007c9c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c56:	2b03      	cmp	r3, #3
 8007c58:	d107      	bne.n	8007c6a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	681a      	ldr	r2, [r3, #0]
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007c68:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	691a      	ldr	r2, [r3, #16]
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c74:	b2d2      	uxtb	r2, r2
 8007c76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c7c:	1c5a      	adds	r2, r3, #1
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c86:	3b01      	subs	r3, #1
 8007c88:	b29a      	uxth	r2, r3
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c92:	b29b      	uxth	r3, r3
 8007c94:	3b01      	subs	r3, #1
 8007c96:	b29a      	uxth	r2, r3
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	f47f aeb6 	bne.w	8007a12 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	2220      	movs	r2, #32
 8007caa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	e000      	b.n	8007cc4 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8007cc2:	2302      	movs	r3, #2
  }
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3728      	adds	r7, #40	@ 0x28
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}
 8007ccc:	00010004 	.word	0x00010004

08007cd0 <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b08a      	sub	sp, #40	@ 0x28
 8007cd4:	af02      	add	r7, sp, #8
 8007cd6:	60f8      	str	r0, [r7, #12]
 8007cd8:	4608      	mov	r0, r1
 8007cda:	4611      	mov	r1, r2
 8007cdc:	461a      	mov	r2, r3
 8007cde:	4603      	mov	r3, r0
 8007ce0:	817b      	strh	r3, [r7, #10]
 8007ce2:	460b      	mov	r3, r1
 8007ce4:	813b      	strh	r3, [r7, #8]
 8007ce6:	4613      	mov	r3, r2
 8007ce8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8007cea:	2300      	movs	r3, #0
 8007cec:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007cee:	f7fd fe09 	bl	8005904 <HAL_GetTick>
 8007cf2:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007cfa:	b2db      	uxtb	r3, r3
 8007cfc:	2b20      	cmp	r3, #32
 8007cfe:	f040 8136 	bne.w	8007f6e <HAL_I2C_Mem_Write_DMA+0x29e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8007d02:	4b9d      	ldr	r3, [pc, #628]	@ (8007f78 <HAL_I2C_Mem_Write_DMA+0x2a8>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	08db      	lsrs	r3, r3, #3
 8007d08:	4a9c      	ldr	r2, [pc, #624]	@ (8007f7c <HAL_I2C_Mem_Write_DMA+0x2ac>)
 8007d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8007d0e:	0a1a      	lsrs	r2, r3, #8
 8007d10:	4613      	mov	r3, r2
 8007d12:	009b      	lsls	r3, r3, #2
 8007d14:	4413      	add	r3, r2
 8007d16:	009a      	lsls	r2, r3, #2
 8007d18:	4413      	add	r3, r2
 8007d1a:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8007d1c:	697b      	ldr	r3, [r7, #20]
 8007d1e:	3b01      	subs	r3, #1
 8007d20:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8007d22:	697b      	ldr	r3, [r7, #20]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d112      	bne.n	8007d4e <HAL_I2C_Mem_Write_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	2220      	movs	r2, #32
 8007d32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d42:	f043 0220 	orr.w	r2, r3, #32
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8007d4a:	2302      	movs	r3, #2
 8007d4c:	e110      	b.n	8007f70 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	699b      	ldr	r3, [r3, #24]
 8007d54:	f003 0302 	and.w	r3, r3, #2
 8007d58:	2b02      	cmp	r3, #2
 8007d5a:	d0df      	beq.n	8007d1c <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007d62:	2b01      	cmp	r3, #1
 8007d64:	d101      	bne.n	8007d6a <HAL_I2C_Mem_Write_DMA+0x9a>
 8007d66:	2302      	movs	r3, #2
 8007d68:	e102      	b.n	8007f70 <HAL_I2C_Mem_Write_DMA+0x2a0>
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	2201      	movs	r2, #1
 8007d6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f003 0301 	and.w	r3, r3, #1
 8007d7c:	2b01      	cmp	r3, #1
 8007d7e:	d007      	beq.n	8007d90 <HAL_I2C_Mem_Write_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	681a      	ldr	r2, [r3, #0]
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f042 0201 	orr.w	r2, r2, #1
 8007d8e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	681a      	ldr	r2, [r3, #0]
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007d9e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	2221      	movs	r2, #33	@ 0x21
 8007da4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	2240      	movs	r2, #64	@ 0x40
 8007dac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	2200      	movs	r2, #0
 8007db4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007dba:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8007dc0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007dc6:	b29a      	uxth	r2, r3
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	4a6c      	ldr	r2, [pc, #432]	@ (8007f80 <HAL_I2C_Mem_Write_DMA+0x2b0>)
 8007dd0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8007dd2:	897a      	ldrh	r2, [r7, #10]
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8007dd8:	893a      	ldrh	r2, [r7, #8]
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 8007dde:	88fa      	ldrh	r2, [r7, #6]
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	2200      	movs	r2, #0
 8007de8:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	f000 80a9 	beq.w	8007f46 <HAL_I2C_Mem_Write_DMA+0x276>
    {
      if (hi2c->hdmatx != NULL)
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d02a      	beq.n	8007e52 <HAL_I2C_Mem_Write_DMA+0x182>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e00:	4a60      	ldr	r2, [pc, #384]	@ (8007f84 <HAL_I2C_Mem_Write_DMA+0x2b4>)
 8007e02:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e08:	4a5f      	ldr	r2, [pc, #380]	@ (8007f88 <HAL_I2C_Mem_Write_DMA+0x2b8>)
 8007e0a:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e10:	2200      	movs	r2, #0
 8007e12:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e18:	2200      	movs	r2, #0
 8007e1a:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e20:	2200      	movs	r2, #0
 8007e22:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e28:	2200      	movs	r2, #0
 8007e2a:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e34:	4619      	mov	r1, r3
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	3310      	adds	r3, #16
 8007e3c:	461a      	mov	r2, r3
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007e42:	f7fe fc6b 	bl	800671c <HAL_DMA_Start_IT>
 8007e46:	4603      	mov	r3, r0
 8007e48:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8007e4a:	7efb      	ldrb	r3, [r7, #27]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d166      	bne.n	8007f1e <HAL_I2C_Mem_Write_DMA+0x24e>
 8007e50:	e013      	b.n	8007e7a <HAL_I2C_Mem_Write_DMA+0x1aa>
        hi2c->State     = HAL_I2C_STATE_READY;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	2220      	movs	r2, #32
 8007e56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e66:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	2200      	movs	r2, #0
 8007e72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8007e76:	2301      	movs	r3, #1
 8007e78:	e07a      	b.n	8007f70 <HAL_I2C_Mem_Write_DMA+0x2a0>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8007e7a:	88f8      	ldrh	r0, [r7, #6]
 8007e7c:	893a      	ldrh	r2, [r7, #8]
 8007e7e:	8979      	ldrh	r1, [r7, #10]
 8007e80:	69fb      	ldr	r3, [r7, #28]
 8007e82:	9301      	str	r3, [sp, #4]
 8007e84:	2323      	movs	r3, #35	@ 0x23
 8007e86:	9300      	str	r3, [sp, #0]
 8007e88:	4603      	mov	r3, r0
 8007e8a:	68f8      	ldr	r0, [r7, #12]
 8007e8c:	f001 ffb0 	bl	8009df0 <I2C_RequestMemoryWrite>
 8007e90:	4603      	mov	r3, r0
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d022      	beq.n	8007edc <HAL_I2C_Mem_Write_DMA+0x20c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	f7fe fd06 	bl	80068ac <HAL_DMA_Abort_IT>
 8007ea0:	4603      	mov	r3, r0
 8007ea2:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	681a      	ldr	r2, [r3, #0]
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007eba:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	681a      	ldr	r2, [r3, #0]
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f022 0201 	bic.w	r2, r2, #1
 8007ed6:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8007ed8:	2301      	movs	r3, #1
 8007eda:	e049      	b.n	8007f70 <HAL_I2C_Mem_Write_DMA+0x2a0>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007edc:	2300      	movs	r3, #0
 8007ede:	613b      	str	r3, [r7, #16]
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	695b      	ldr	r3, [r3, #20]
 8007ee6:	613b      	str	r3, [r7, #16]
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	699b      	ldr	r3, [r3, #24]
 8007eee:	613b      	str	r3, [r7, #16]
 8007ef0:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	685a      	ldr	r2, [r3, #4]
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007f08:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	685a      	ldr	r2, [r3, #4]
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007f18:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	e028      	b.n	8007f70 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	2220      	movs	r2, #32
 8007f22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	2200      	movs	r2, #0
 8007f2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f32:	f043 0210 	orr.w	r2, r3, #16
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8007f42:	2301      	movs	r3, #1
 8007f44:	e014      	b.n	8007f70 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	2220      	movs	r2, #32
 8007f4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	2200      	movs	r2, #0
 8007f52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f5a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	2200      	movs	r2, #0
 8007f66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	e000      	b.n	8007f70 <HAL_I2C_Mem_Write_DMA+0x2a0>
    }
  }
  else
  {
    return HAL_BUSY;
 8007f6e:	2302      	movs	r3, #2
  }
}
 8007f70:	4618      	mov	r0, r3
 8007f72:	3720      	adds	r7, #32
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}
 8007f78:	20000010 	.word	0x20000010
 8007f7c:	14f8b589 	.word	0x14f8b589
 8007f80:	ffff0000 	.word	0xffff0000
 8007f84:	0800a0ed 	.word	0x0800a0ed
 8007f88:	0800a2ab 	.word	0x0800a2ab

08007f8c <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b08c      	sub	sp, #48	@ 0x30
 8007f90:	af02      	add	r7, sp, #8
 8007f92:	60f8      	str	r0, [r7, #12]
 8007f94:	4608      	mov	r0, r1
 8007f96:	4611      	mov	r1, r2
 8007f98:	461a      	mov	r2, r3
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	817b      	strh	r3, [r7, #10]
 8007f9e:	460b      	mov	r3, r1
 8007fa0:	813b      	strh	r3, [r7, #8]
 8007fa2:	4613      	mov	r3, r2
 8007fa4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007fa6:	f7fd fcad 	bl	8005904 <HAL_GetTick>
 8007faa:	6278      	str	r0, [r7, #36]	@ 0x24
  __IO uint32_t count = 0U;
 8007fac:	2300      	movs	r3, #0
 8007fae:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007fb6:	b2db      	uxtb	r3, r3
 8007fb8:	2b20      	cmp	r3, #32
 8007fba:	f040 8172 	bne.w	80082a2 <HAL_I2C_Mem_Read_DMA+0x316>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8007fbe:	4b93      	ldr	r3, [pc, #588]	@ (800820c <HAL_I2C_Mem_Read_DMA+0x280>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	08db      	lsrs	r3, r3, #3
 8007fc4:	4a92      	ldr	r2, [pc, #584]	@ (8008210 <HAL_I2C_Mem_Read_DMA+0x284>)
 8007fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8007fca:	0a1a      	lsrs	r2, r3, #8
 8007fcc:	4613      	mov	r3, r2
 8007fce:	009b      	lsls	r3, r3, #2
 8007fd0:	4413      	add	r3, r2
 8007fd2:	009a      	lsls	r2, r3, #2
 8007fd4:	4413      	add	r3, r2
 8007fd6:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8007fd8:	69fb      	ldr	r3, [r7, #28]
 8007fda:	3b01      	subs	r3, #1
 8007fdc:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 8007fde:	69fb      	ldr	r3, [r7, #28]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d112      	bne.n	800800a <HAL_I2C_Mem_Read_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	2220      	movs	r2, #32
 8007fee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ffe:	f043 0220 	orr.w	r2, r3, #32
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8008006:	2302      	movs	r3, #2
 8008008:	e14c      	b.n	80082a4 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	699b      	ldr	r3, [r3, #24]
 8008010:	f003 0302 	and.w	r3, r3, #2
 8008014:	2b02      	cmp	r3, #2
 8008016:	d0df      	beq.n	8007fd8 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800801e:	2b01      	cmp	r3, #1
 8008020:	d101      	bne.n	8008026 <HAL_I2C_Mem_Read_DMA+0x9a>
 8008022:	2302      	movs	r3, #2
 8008024:	e13e      	b.n	80082a4 <HAL_I2C_Mem_Read_DMA+0x318>
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	2201      	movs	r2, #1
 800802a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f003 0301 	and.w	r3, r3, #1
 8008038:	2b01      	cmp	r3, #1
 800803a:	d007      	beq.n	800804c <HAL_I2C_Mem_Read_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	681a      	ldr	r2, [r3, #0]
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f042 0201 	orr.w	r2, r2, #1
 800804a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	681a      	ldr	r2, [r3, #0]
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800805a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	2222      	movs	r2, #34	@ 0x22
 8008060:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	2240      	movs	r2, #64	@ 0x40
 8008068:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	2200      	movs	r2, #0
 8008070:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008076:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800807c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008082:	b29a      	uxth	r2, r3
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	4a62      	ldr	r2, [pc, #392]	@ (8008214 <HAL_I2C_Mem_Read_DMA+0x288>)
 800808c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 800808e:	897a      	ldrh	r2, [r7, #10]
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8008094:	893a      	ldrh	r2, [r7, #8]
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 800809a:	88fa      	ldrh	r2, [r7, #6]
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	2200      	movs	r2, #0
 80080a4:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	f000 80cc 	beq.w	8008248 <HAL_I2C_Mem_Read_DMA+0x2bc>
    {
      if (hi2c->hdmarx != NULL)
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d02d      	beq.n	8008114 <HAL_I2C_Mem_Read_DMA+0x188>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080bc:	4a56      	ldr	r2, [pc, #344]	@ (8008218 <HAL_I2C_Mem_Read_DMA+0x28c>)
 80080be:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080c4:	4a55      	ldr	r2, [pc, #340]	@ (800821c <HAL_I2C_Mem_Read_DMA+0x290>)
 80080c6:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080cc:	2200      	movs	r2, #0
 80080ce:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080d4:	2200      	movs	r2, #0
 80080d6:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080dc:	2200      	movs	r2, #0
 80080de:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080e4:	2200      	movs	r2, #0
 80080e6:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	3310      	adds	r3, #16
 80080f2:	4619      	mov	r1, r3
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080f8:	461a      	mov	r2, r3
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80080fe:	f7fe fb0d 	bl	800671c <HAL_DMA_Start_IT>
 8008102:	4603      	mov	r3, r0
 8008104:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8008108:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800810c:	2b00      	cmp	r3, #0
 800810e:	f040 8087 	bne.w	8008220 <HAL_I2C_Mem_Read_DMA+0x294>
 8008112:	e013      	b.n	800813c <HAL_I2C_Mem_Read_DMA+0x1b0>
        hi2c->State     = HAL_I2C_STATE_READY;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	2220      	movs	r2, #32
 8008118:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	2200      	movs	r2, #0
 8008120:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008128:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	2200      	movs	r2, #0
 8008134:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8008138:	2301      	movs	r3, #1
 800813a:	e0b3      	b.n	80082a4 <HAL_I2C_Mem_Read_DMA+0x318>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800813c:	88f8      	ldrh	r0, [r7, #6]
 800813e:	893a      	ldrh	r2, [r7, #8]
 8008140:	8979      	ldrh	r1, [r7, #10]
 8008142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008144:	9301      	str	r3, [sp, #4]
 8008146:	2323      	movs	r3, #35	@ 0x23
 8008148:	9300      	str	r3, [sp, #0]
 800814a:	4603      	mov	r3, r0
 800814c:	68f8      	ldr	r0, [r7, #12]
 800814e:	f001 fee5 	bl	8009f1c <I2C_RequestMemoryRead>
 8008152:	4603      	mov	r3, r0
 8008154:	2b00      	cmp	r3, #0
 8008156:	d023      	beq.n	80081a0 <HAL_I2C_Mem_Read_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800815c:	4618      	mov	r0, r3
 800815e:	f7fe fba5 	bl	80068ac <HAL_DMA_Abort_IT>
 8008162:	4603      	mov	r3, r0
 8008164:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800816c:	2200      	movs	r2, #0
 800816e:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	681a      	ldr	r2, [r3, #0]
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800817e:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	2200      	movs	r2, #0
 8008184:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	2200      	movs	r2, #0
 800818a:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	681a      	ldr	r2, [r3, #0]
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f022 0201 	bic.w	r2, r2, #1
 800819a:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 800819c:	2301      	movs	r3, #1
 800819e:	e081      	b.n	80082a4 <HAL_I2C_Mem_Read_DMA+0x318>
        }

        if (hi2c->XferSize == 1U)
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80081a4:	2b01      	cmp	r3, #1
 80081a6:	d108      	bne.n	80081ba <HAL_I2C_Mem_Read_DMA+0x22e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	681a      	ldr	r2, [r3, #0]
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80081b6:	601a      	str	r2, [r3, #0]
 80081b8:	e007      	b.n	80081ca <HAL_I2C_Mem_Read_DMA+0x23e>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	685a      	ldr	r2, [r3, #4]
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80081c8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80081ca:	2300      	movs	r3, #0
 80081cc:	61bb      	str	r3, [r7, #24]
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	695b      	ldr	r3, [r3, #20]
 80081d4:	61bb      	str	r3, [r7, #24]
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	699b      	ldr	r3, [r3, #24]
 80081dc:	61bb      	str	r3, [r7, #24]
 80081de:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	2200      	movs	r2, #0
 80081e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	685a      	ldr	r2, [r3, #4]
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80081f6:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	685a      	ldr	r2, [r3, #4]
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008206:	605a      	str	r2, [r3, #4]
 8008208:	e049      	b.n	800829e <HAL_I2C_Mem_Read_DMA+0x312>
 800820a:	bf00      	nop
 800820c:	20000010 	.word	0x20000010
 8008210:	14f8b589 	.word	0x14f8b589
 8008214:	ffff0000 	.word	0xffff0000
 8008218:	0800a0ed 	.word	0x0800a0ed
 800821c:	0800a2ab 	.word	0x0800a2ab
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	2220      	movs	r2, #32
 8008224:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	2200      	movs	r2, #0
 800822c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008234:	f043 0210 	orr.w	r2, r3, #16
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	2200      	movs	r2, #0
 8008240:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8008244:	2301      	movs	r3, #1
 8008246:	e02d      	b.n	80082a4 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8008248:	88f8      	ldrh	r0, [r7, #6]
 800824a:	893a      	ldrh	r2, [r7, #8]
 800824c:	8979      	ldrh	r1, [r7, #10]
 800824e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008250:	9301      	str	r3, [sp, #4]
 8008252:	2323      	movs	r3, #35	@ 0x23
 8008254:	9300      	str	r3, [sp, #0]
 8008256:	4603      	mov	r3, r0
 8008258:	68f8      	ldr	r0, [r7, #12]
 800825a:	f001 fe5f 	bl	8009f1c <I2C_RequestMemoryRead>
 800825e:	4603      	mov	r3, r0
 8008260:	2b00      	cmp	r3, #0
 8008262:	d001      	beq.n	8008268 <HAL_I2C_Mem_Read_DMA+0x2dc>
      {
        return HAL_ERROR;
 8008264:	2301      	movs	r3, #1
 8008266:	e01d      	b.n	80082a4 <HAL_I2C_Mem_Read_DMA+0x318>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008268:	2300      	movs	r3, #0
 800826a:	617b      	str	r3, [r7, #20]
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	695b      	ldr	r3, [r3, #20]
 8008272:	617b      	str	r3, [r7, #20]
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	699b      	ldr	r3, [r3, #24]
 800827a:	617b      	str	r3, [r7, #20]
 800827c:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	681a      	ldr	r2, [r3, #0]
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800828c:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	2220      	movs	r2, #32
 8008292:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	2200      	movs	r2, #0
 800829a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }

    return HAL_OK;
 800829e:	2300      	movs	r3, #0
 80082a0:	e000      	b.n	80082a4 <HAL_I2C_Mem_Read_DMA+0x318>
  }
  else
  {
    return HAL_BUSY;
 80082a2:	2302      	movs	r3, #2
  }
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	3728      	adds	r7, #40	@ 0x28
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bd80      	pop	{r7, pc}

080082ac <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b08a      	sub	sp, #40	@ 0x28
 80082b0:	af02      	add	r7, sp, #8
 80082b2:	60f8      	str	r0, [r7, #12]
 80082b4:	607a      	str	r2, [r7, #4]
 80082b6:	603b      	str	r3, [r7, #0]
 80082b8:	460b      	mov	r3, r1
 80082ba:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80082bc:	f7fd fb22 	bl	8005904 <HAL_GetTick>
 80082c0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80082c2:	2300      	movs	r3, #0
 80082c4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80082cc:	b2db      	uxtb	r3, r3
 80082ce:	2b20      	cmp	r3, #32
 80082d0:	f040 8111 	bne.w	80084f6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80082d4:	69fb      	ldr	r3, [r7, #28]
 80082d6:	9300      	str	r3, [sp, #0]
 80082d8:	2319      	movs	r3, #25
 80082da:	2201      	movs	r2, #1
 80082dc:	4988      	ldr	r1, [pc, #544]	@ (8008500 <HAL_I2C_IsDeviceReady+0x254>)
 80082de:	68f8      	ldr	r0, [r7, #12]
 80082e0:	f002 f8c8 	bl	800a474 <I2C_WaitOnFlagUntilTimeout>
 80082e4:	4603      	mov	r3, r0
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d001      	beq.n	80082ee <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80082ea:	2302      	movs	r3, #2
 80082ec:	e104      	b.n	80084f8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80082f4:	2b01      	cmp	r3, #1
 80082f6:	d101      	bne.n	80082fc <HAL_I2C_IsDeviceReady+0x50>
 80082f8:	2302      	movs	r3, #2
 80082fa:	e0fd      	b.n	80084f8 <HAL_I2C_IsDeviceReady+0x24c>
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	2201      	movs	r2, #1
 8008300:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f003 0301 	and.w	r3, r3, #1
 800830e:	2b01      	cmp	r3, #1
 8008310:	d007      	beq.n	8008322 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	681a      	ldr	r2, [r3, #0]
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f042 0201 	orr.w	r2, r2, #1
 8008320:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	681a      	ldr	r2, [r3, #0]
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008330:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	2224      	movs	r2, #36	@ 0x24
 8008336:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	2200      	movs	r2, #0
 800833e:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	4a70      	ldr	r2, [pc, #448]	@ (8008504 <HAL_I2C_IsDeviceReady+0x258>)
 8008344:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	681a      	ldr	r2, [r3, #0]
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008354:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8008356:	69fb      	ldr	r3, [r7, #28]
 8008358:	9300      	str	r3, [sp, #0]
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	2200      	movs	r2, #0
 800835e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008362:	68f8      	ldr	r0, [r7, #12]
 8008364:	f002 f886 	bl	800a474 <I2C_WaitOnFlagUntilTimeout>
 8008368:	4603      	mov	r3, r0
 800836a:	2b00      	cmp	r3, #0
 800836c:	d00d      	beq.n	800838a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008378:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800837c:	d103      	bne.n	8008386 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008384:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8008386:	2303      	movs	r3, #3
 8008388:	e0b6      	b.n	80084f8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800838a:	897b      	ldrh	r3, [r7, #10]
 800838c:	b2db      	uxtb	r3, r3
 800838e:	461a      	mov	r2, r3
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8008398:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800839a:	f7fd fab3 	bl	8005904 <HAL_GetTick>
 800839e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	695b      	ldr	r3, [r3, #20]
 80083a6:	f003 0302 	and.w	r3, r3, #2
 80083aa:	2b02      	cmp	r3, #2
 80083ac:	bf0c      	ite	eq
 80083ae:	2301      	moveq	r3, #1
 80083b0:	2300      	movne	r3, #0
 80083b2:	b2db      	uxtb	r3, r3
 80083b4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	695b      	ldr	r3, [r3, #20]
 80083bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80083c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80083c4:	bf0c      	ite	eq
 80083c6:	2301      	moveq	r3, #1
 80083c8:	2300      	movne	r3, #0
 80083ca:	b2db      	uxtb	r3, r3
 80083cc:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80083ce:	e025      	b.n	800841c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80083d0:	f7fd fa98 	bl	8005904 <HAL_GetTick>
 80083d4:	4602      	mov	r2, r0
 80083d6:	69fb      	ldr	r3, [r7, #28]
 80083d8:	1ad3      	subs	r3, r2, r3
 80083da:	683a      	ldr	r2, [r7, #0]
 80083dc:	429a      	cmp	r2, r3
 80083de:	d302      	bcc.n	80083e6 <HAL_I2C_IsDeviceReady+0x13a>
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d103      	bne.n	80083ee <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	22a0      	movs	r2, #160	@ 0xa0
 80083ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	695b      	ldr	r3, [r3, #20]
 80083f4:	f003 0302 	and.w	r3, r3, #2
 80083f8:	2b02      	cmp	r3, #2
 80083fa:	bf0c      	ite	eq
 80083fc:	2301      	moveq	r3, #1
 80083fe:	2300      	movne	r3, #0
 8008400:	b2db      	uxtb	r3, r3
 8008402:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	695b      	ldr	r3, [r3, #20]
 800840a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800840e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008412:	bf0c      	ite	eq
 8008414:	2301      	moveq	r3, #1
 8008416:	2300      	movne	r3, #0
 8008418:	b2db      	uxtb	r3, r3
 800841a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008422:	b2db      	uxtb	r3, r3
 8008424:	2ba0      	cmp	r3, #160	@ 0xa0
 8008426:	d005      	beq.n	8008434 <HAL_I2C_IsDeviceReady+0x188>
 8008428:	7dfb      	ldrb	r3, [r7, #23]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d102      	bne.n	8008434 <HAL_I2C_IsDeviceReady+0x188>
 800842e:	7dbb      	ldrb	r3, [r7, #22]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d0cd      	beq.n	80083d0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	2220      	movs	r2, #32
 8008438:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	695b      	ldr	r3, [r3, #20]
 8008442:	f003 0302 	and.w	r3, r3, #2
 8008446:	2b02      	cmp	r3, #2
 8008448:	d129      	bne.n	800849e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	681a      	ldr	r2, [r3, #0]
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008458:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800845a:	2300      	movs	r3, #0
 800845c:	613b      	str	r3, [r7, #16]
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	695b      	ldr	r3, [r3, #20]
 8008464:	613b      	str	r3, [r7, #16]
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	699b      	ldr	r3, [r3, #24]
 800846c:	613b      	str	r3, [r7, #16]
 800846e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008470:	69fb      	ldr	r3, [r7, #28]
 8008472:	9300      	str	r3, [sp, #0]
 8008474:	2319      	movs	r3, #25
 8008476:	2201      	movs	r2, #1
 8008478:	4921      	ldr	r1, [pc, #132]	@ (8008500 <HAL_I2C_IsDeviceReady+0x254>)
 800847a:	68f8      	ldr	r0, [r7, #12]
 800847c:	f001 fffa 	bl	800a474 <I2C_WaitOnFlagUntilTimeout>
 8008480:	4603      	mov	r3, r0
 8008482:	2b00      	cmp	r3, #0
 8008484:	d001      	beq.n	800848a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8008486:	2301      	movs	r3, #1
 8008488:	e036      	b.n	80084f8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	2220      	movs	r2, #32
 800848e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	2200      	movs	r2, #0
 8008496:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800849a:	2300      	movs	r3, #0
 800849c:	e02c      	b.n	80084f8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	681a      	ldr	r2, [r3, #0]
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80084ac:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80084b6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80084b8:	69fb      	ldr	r3, [r7, #28]
 80084ba:	9300      	str	r3, [sp, #0]
 80084bc:	2319      	movs	r3, #25
 80084be:	2201      	movs	r2, #1
 80084c0:	490f      	ldr	r1, [pc, #60]	@ (8008500 <HAL_I2C_IsDeviceReady+0x254>)
 80084c2:	68f8      	ldr	r0, [r7, #12]
 80084c4:	f001 ffd6 	bl	800a474 <I2C_WaitOnFlagUntilTimeout>
 80084c8:	4603      	mov	r3, r0
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d001      	beq.n	80084d2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80084ce:	2301      	movs	r3, #1
 80084d0:	e012      	b.n	80084f8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80084d2:	69bb      	ldr	r3, [r7, #24]
 80084d4:	3301      	adds	r3, #1
 80084d6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80084d8:	69ba      	ldr	r2, [r7, #24]
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	429a      	cmp	r2, r3
 80084de:	f4ff af32 	bcc.w	8008346 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	2220      	movs	r2, #32
 80084e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	2200      	movs	r2, #0
 80084ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80084f2:	2301      	movs	r3, #1
 80084f4:	e000      	b.n	80084f8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80084f6:	2302      	movs	r3, #2
  }
}
 80084f8:	4618      	mov	r0, r3
 80084fa:	3720      	adds	r7, #32
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bd80      	pop	{r7, pc}
 8008500:	00100002 	.word	0x00100002
 8008504:	ffff0000 	.word	0xffff0000

08008508 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b088      	sub	sp, #32
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8008510:	2300      	movs	r3, #0
 8008512:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	685b      	ldr	r3, [r3, #4]
 800851a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008520:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008528:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008530:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8008532:	7bfb      	ldrb	r3, [r7, #15]
 8008534:	2b10      	cmp	r3, #16
 8008536:	d003      	beq.n	8008540 <HAL_I2C_EV_IRQHandler+0x38>
 8008538:	7bfb      	ldrb	r3, [r7, #15]
 800853a:	2b40      	cmp	r3, #64	@ 0x40
 800853c:	f040 80c1 	bne.w	80086c2 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	699b      	ldr	r3, [r3, #24]
 8008546:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	695b      	ldr	r3, [r3, #20]
 800854e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8008550:	69fb      	ldr	r3, [r7, #28]
 8008552:	f003 0301 	and.w	r3, r3, #1
 8008556:	2b00      	cmp	r3, #0
 8008558:	d10d      	bne.n	8008576 <HAL_I2C_EV_IRQHandler+0x6e>
 800855a:	693b      	ldr	r3, [r7, #16]
 800855c:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8008560:	d003      	beq.n	800856a <HAL_I2C_EV_IRQHandler+0x62>
 8008562:	693b      	ldr	r3, [r7, #16]
 8008564:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8008568:	d101      	bne.n	800856e <HAL_I2C_EV_IRQHandler+0x66>
 800856a:	2301      	movs	r3, #1
 800856c:	e000      	b.n	8008570 <HAL_I2C_EV_IRQHandler+0x68>
 800856e:	2300      	movs	r3, #0
 8008570:	2b01      	cmp	r3, #1
 8008572:	f000 8132 	beq.w	80087da <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008576:	69fb      	ldr	r3, [r7, #28]
 8008578:	f003 0301 	and.w	r3, r3, #1
 800857c:	2b00      	cmp	r3, #0
 800857e:	d00c      	beq.n	800859a <HAL_I2C_EV_IRQHandler+0x92>
 8008580:	697b      	ldr	r3, [r7, #20]
 8008582:	0a5b      	lsrs	r3, r3, #9
 8008584:	f003 0301 	and.w	r3, r3, #1
 8008588:	2b00      	cmp	r3, #0
 800858a:	d006      	beq.n	800859a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f002 f9d9 	bl	800a944 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	f000 fd8b 	bl	80090ae <I2C_Master_SB>
 8008598:	e092      	b.n	80086c0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800859a:	69fb      	ldr	r3, [r7, #28]
 800859c:	08db      	lsrs	r3, r3, #3
 800859e:	f003 0301 	and.w	r3, r3, #1
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d009      	beq.n	80085ba <HAL_I2C_EV_IRQHandler+0xb2>
 80085a6:	697b      	ldr	r3, [r7, #20]
 80085a8:	0a5b      	lsrs	r3, r3, #9
 80085aa:	f003 0301 	and.w	r3, r3, #1
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d003      	beq.n	80085ba <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f000 fe01 	bl	80091ba <I2C_Master_ADD10>
 80085b8:	e082      	b.n	80086c0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80085ba:	69fb      	ldr	r3, [r7, #28]
 80085bc:	085b      	lsrs	r3, r3, #1
 80085be:	f003 0301 	and.w	r3, r3, #1
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d009      	beq.n	80085da <HAL_I2C_EV_IRQHandler+0xd2>
 80085c6:	697b      	ldr	r3, [r7, #20]
 80085c8:	0a5b      	lsrs	r3, r3, #9
 80085ca:	f003 0301 	and.w	r3, r3, #1
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d003      	beq.n	80085da <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f000 fe1b 	bl	800920e <I2C_Master_ADDR>
 80085d8:	e072      	b.n	80086c0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80085da:	69bb      	ldr	r3, [r7, #24]
 80085dc:	089b      	lsrs	r3, r3, #2
 80085de:	f003 0301 	and.w	r3, r3, #1
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d03b      	beq.n	800865e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	685b      	ldr	r3, [r3, #4]
 80085ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80085f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80085f4:	f000 80f3 	beq.w	80087de <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80085f8:	69fb      	ldr	r3, [r7, #28]
 80085fa:	09db      	lsrs	r3, r3, #7
 80085fc:	f003 0301 	and.w	r3, r3, #1
 8008600:	2b00      	cmp	r3, #0
 8008602:	d00f      	beq.n	8008624 <HAL_I2C_EV_IRQHandler+0x11c>
 8008604:	697b      	ldr	r3, [r7, #20]
 8008606:	0a9b      	lsrs	r3, r3, #10
 8008608:	f003 0301 	and.w	r3, r3, #1
 800860c:	2b00      	cmp	r3, #0
 800860e:	d009      	beq.n	8008624 <HAL_I2C_EV_IRQHandler+0x11c>
 8008610:	69fb      	ldr	r3, [r7, #28]
 8008612:	089b      	lsrs	r3, r3, #2
 8008614:	f003 0301 	and.w	r3, r3, #1
 8008618:	2b00      	cmp	r3, #0
 800861a:	d103      	bne.n	8008624 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	f000 f9df 	bl	80089e0 <I2C_MasterTransmit_TXE>
 8008622:	e04d      	b.n	80086c0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008624:	69fb      	ldr	r3, [r7, #28]
 8008626:	089b      	lsrs	r3, r3, #2
 8008628:	f003 0301 	and.w	r3, r3, #1
 800862c:	2b00      	cmp	r3, #0
 800862e:	f000 80d6 	beq.w	80087de <HAL_I2C_EV_IRQHandler+0x2d6>
 8008632:	697b      	ldr	r3, [r7, #20]
 8008634:	0a5b      	lsrs	r3, r3, #9
 8008636:	f003 0301 	and.w	r3, r3, #1
 800863a:	2b00      	cmp	r3, #0
 800863c:	f000 80cf 	beq.w	80087de <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8008640:	7bbb      	ldrb	r3, [r7, #14]
 8008642:	2b21      	cmp	r3, #33	@ 0x21
 8008644:	d103      	bne.n	800864e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f000 fa66 	bl	8008b18 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800864c:	e0c7      	b.n	80087de <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800864e:	7bfb      	ldrb	r3, [r7, #15]
 8008650:	2b40      	cmp	r3, #64	@ 0x40
 8008652:	f040 80c4 	bne.w	80087de <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f000 fad4 	bl	8008c04 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800865c:	e0bf      	b.n	80087de <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	685b      	ldr	r3, [r3, #4]
 8008664:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008668:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800866c:	f000 80b7 	beq.w	80087de <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008670:	69fb      	ldr	r3, [r7, #28]
 8008672:	099b      	lsrs	r3, r3, #6
 8008674:	f003 0301 	and.w	r3, r3, #1
 8008678:	2b00      	cmp	r3, #0
 800867a:	d00f      	beq.n	800869c <HAL_I2C_EV_IRQHandler+0x194>
 800867c:	697b      	ldr	r3, [r7, #20]
 800867e:	0a9b      	lsrs	r3, r3, #10
 8008680:	f003 0301 	and.w	r3, r3, #1
 8008684:	2b00      	cmp	r3, #0
 8008686:	d009      	beq.n	800869c <HAL_I2C_EV_IRQHandler+0x194>
 8008688:	69fb      	ldr	r3, [r7, #28]
 800868a:	089b      	lsrs	r3, r3, #2
 800868c:	f003 0301 	and.w	r3, r3, #1
 8008690:	2b00      	cmp	r3, #0
 8008692:	d103      	bne.n	800869c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8008694:	6878      	ldr	r0, [r7, #4]
 8008696:	f000 fb4d 	bl	8008d34 <I2C_MasterReceive_RXNE>
 800869a:	e011      	b.n	80086c0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800869c:	69fb      	ldr	r3, [r7, #28]
 800869e:	089b      	lsrs	r3, r3, #2
 80086a0:	f003 0301 	and.w	r3, r3, #1
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	f000 809a 	beq.w	80087de <HAL_I2C_EV_IRQHandler+0x2d6>
 80086aa:	697b      	ldr	r3, [r7, #20]
 80086ac:	0a5b      	lsrs	r3, r3, #9
 80086ae:	f003 0301 	and.w	r3, r3, #1
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	f000 8093 	beq.w	80087de <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80086b8:	6878      	ldr	r0, [r7, #4]
 80086ba:	f000 fc03 	bl	8008ec4 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80086be:	e08e      	b.n	80087de <HAL_I2C_EV_IRQHandler+0x2d6>
 80086c0:	e08d      	b.n	80087de <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d004      	beq.n	80086d4 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	695b      	ldr	r3, [r3, #20]
 80086d0:	61fb      	str	r3, [r7, #28]
 80086d2:	e007      	b.n	80086e4 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	699b      	ldr	r3, [r3, #24]
 80086da:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	695b      	ldr	r3, [r3, #20]
 80086e2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80086e4:	69fb      	ldr	r3, [r7, #28]
 80086e6:	085b      	lsrs	r3, r3, #1
 80086e8:	f003 0301 	and.w	r3, r3, #1
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d012      	beq.n	8008716 <HAL_I2C_EV_IRQHandler+0x20e>
 80086f0:	697b      	ldr	r3, [r7, #20]
 80086f2:	0a5b      	lsrs	r3, r3, #9
 80086f4:	f003 0301 	and.w	r3, r3, #1
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d00c      	beq.n	8008716 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008700:	2b00      	cmp	r3, #0
 8008702:	d003      	beq.n	800870c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	699b      	ldr	r3, [r3, #24]
 800870a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800870c:	69b9      	ldr	r1, [r7, #24]
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f000 ffcc 	bl	80096ac <I2C_Slave_ADDR>
 8008714:	e066      	b.n	80087e4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008716:	69fb      	ldr	r3, [r7, #28]
 8008718:	091b      	lsrs	r3, r3, #4
 800871a:	f003 0301 	and.w	r3, r3, #1
 800871e:	2b00      	cmp	r3, #0
 8008720:	d009      	beq.n	8008736 <HAL_I2C_EV_IRQHandler+0x22e>
 8008722:	697b      	ldr	r3, [r7, #20]
 8008724:	0a5b      	lsrs	r3, r3, #9
 8008726:	f003 0301 	and.w	r3, r3, #1
 800872a:	2b00      	cmp	r3, #0
 800872c:	d003      	beq.n	8008736 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	f001 f806 	bl	8009740 <I2C_Slave_STOPF>
 8008734:	e056      	b.n	80087e4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008736:	7bbb      	ldrb	r3, [r7, #14]
 8008738:	2b21      	cmp	r3, #33	@ 0x21
 800873a:	d002      	beq.n	8008742 <HAL_I2C_EV_IRQHandler+0x23a>
 800873c:	7bbb      	ldrb	r3, [r7, #14]
 800873e:	2b29      	cmp	r3, #41	@ 0x29
 8008740:	d125      	bne.n	800878e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008742:	69fb      	ldr	r3, [r7, #28]
 8008744:	09db      	lsrs	r3, r3, #7
 8008746:	f003 0301 	and.w	r3, r3, #1
 800874a:	2b00      	cmp	r3, #0
 800874c:	d00f      	beq.n	800876e <HAL_I2C_EV_IRQHandler+0x266>
 800874e:	697b      	ldr	r3, [r7, #20]
 8008750:	0a9b      	lsrs	r3, r3, #10
 8008752:	f003 0301 	and.w	r3, r3, #1
 8008756:	2b00      	cmp	r3, #0
 8008758:	d009      	beq.n	800876e <HAL_I2C_EV_IRQHandler+0x266>
 800875a:	69fb      	ldr	r3, [r7, #28]
 800875c:	089b      	lsrs	r3, r3, #2
 800875e:	f003 0301 	and.w	r3, r3, #1
 8008762:	2b00      	cmp	r3, #0
 8008764:	d103      	bne.n	800876e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f000 fee2 	bl	8009530 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800876c:	e039      	b.n	80087e2 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800876e:	69fb      	ldr	r3, [r7, #28]
 8008770:	089b      	lsrs	r3, r3, #2
 8008772:	f003 0301 	and.w	r3, r3, #1
 8008776:	2b00      	cmp	r3, #0
 8008778:	d033      	beq.n	80087e2 <HAL_I2C_EV_IRQHandler+0x2da>
 800877a:	697b      	ldr	r3, [r7, #20]
 800877c:	0a5b      	lsrs	r3, r3, #9
 800877e:	f003 0301 	and.w	r3, r3, #1
 8008782:	2b00      	cmp	r3, #0
 8008784:	d02d      	beq.n	80087e2 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8008786:	6878      	ldr	r0, [r7, #4]
 8008788:	f000 ff0f 	bl	80095aa <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800878c:	e029      	b.n	80087e2 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800878e:	69fb      	ldr	r3, [r7, #28]
 8008790:	099b      	lsrs	r3, r3, #6
 8008792:	f003 0301 	and.w	r3, r3, #1
 8008796:	2b00      	cmp	r3, #0
 8008798:	d00f      	beq.n	80087ba <HAL_I2C_EV_IRQHandler+0x2b2>
 800879a:	697b      	ldr	r3, [r7, #20]
 800879c:	0a9b      	lsrs	r3, r3, #10
 800879e:	f003 0301 	and.w	r3, r3, #1
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d009      	beq.n	80087ba <HAL_I2C_EV_IRQHandler+0x2b2>
 80087a6:	69fb      	ldr	r3, [r7, #28]
 80087a8:	089b      	lsrs	r3, r3, #2
 80087aa:	f003 0301 	and.w	r3, r3, #1
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d103      	bne.n	80087ba <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f000 ff1a 	bl	80095ec <I2C_SlaveReceive_RXNE>
 80087b8:	e014      	b.n	80087e4 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80087ba:	69fb      	ldr	r3, [r7, #28]
 80087bc:	089b      	lsrs	r3, r3, #2
 80087be:	f003 0301 	and.w	r3, r3, #1
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d00e      	beq.n	80087e4 <HAL_I2C_EV_IRQHandler+0x2dc>
 80087c6:	697b      	ldr	r3, [r7, #20]
 80087c8:	0a5b      	lsrs	r3, r3, #9
 80087ca:	f003 0301 	and.w	r3, r3, #1
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d008      	beq.n	80087e4 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f000 ff48 	bl	8009668 <I2C_SlaveReceive_BTF>
 80087d8:	e004      	b.n	80087e4 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80087da:	bf00      	nop
 80087dc:	e002      	b.n	80087e4 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80087de:	bf00      	nop
 80087e0:	e000      	b.n	80087e4 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80087e2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80087e4:	3720      	adds	r7, #32
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}

080087ea <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80087ea:	b580      	push	{r7, lr}
 80087ec:	b08a      	sub	sp, #40	@ 0x28
 80087ee:	af00      	add	r7, sp, #0
 80087f0:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	695b      	ldr	r3, [r3, #20]
 80087f8:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	685b      	ldr	r3, [r3, #4]
 8008800:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8008802:	2300      	movs	r3, #0
 8008804:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800880c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800880e:	6a3b      	ldr	r3, [r7, #32]
 8008810:	0a1b      	lsrs	r3, r3, #8
 8008812:	f003 0301 	and.w	r3, r3, #1
 8008816:	2b00      	cmp	r3, #0
 8008818:	d00e      	beq.n	8008838 <HAL_I2C_ER_IRQHandler+0x4e>
 800881a:	69fb      	ldr	r3, [r7, #28]
 800881c:	0a1b      	lsrs	r3, r3, #8
 800881e:	f003 0301 	and.w	r3, r3, #1
 8008822:	2b00      	cmp	r3, #0
 8008824:	d008      	beq.n	8008838 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8008826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008828:	f043 0301 	orr.w	r3, r3, #1
 800882c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008836:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8008838:	6a3b      	ldr	r3, [r7, #32]
 800883a:	0a5b      	lsrs	r3, r3, #9
 800883c:	f003 0301 	and.w	r3, r3, #1
 8008840:	2b00      	cmp	r3, #0
 8008842:	d00e      	beq.n	8008862 <HAL_I2C_ER_IRQHandler+0x78>
 8008844:	69fb      	ldr	r3, [r7, #28]
 8008846:	0a1b      	lsrs	r3, r3, #8
 8008848:	f003 0301 	and.w	r3, r3, #1
 800884c:	2b00      	cmp	r3, #0
 800884e:	d008      	beq.n	8008862 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8008850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008852:	f043 0302 	orr.w	r3, r3, #2
 8008856:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8008860:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8008862:	6a3b      	ldr	r3, [r7, #32]
 8008864:	0a9b      	lsrs	r3, r3, #10
 8008866:	f003 0301 	and.w	r3, r3, #1
 800886a:	2b00      	cmp	r3, #0
 800886c:	d03f      	beq.n	80088ee <HAL_I2C_ER_IRQHandler+0x104>
 800886e:	69fb      	ldr	r3, [r7, #28]
 8008870:	0a1b      	lsrs	r3, r3, #8
 8008872:	f003 0301 	and.w	r3, r3, #1
 8008876:	2b00      	cmp	r3, #0
 8008878:	d039      	beq.n	80088ee <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800887a:	7efb      	ldrb	r3, [r7, #27]
 800887c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008882:	b29b      	uxth	r3, r3
 8008884:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800888c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008892:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8008894:	7ebb      	ldrb	r3, [r7, #26]
 8008896:	2b20      	cmp	r3, #32
 8008898:	d112      	bne.n	80088c0 <HAL_I2C_ER_IRQHandler+0xd6>
 800889a:	697b      	ldr	r3, [r7, #20]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d10f      	bne.n	80088c0 <HAL_I2C_ER_IRQHandler+0xd6>
 80088a0:	7cfb      	ldrb	r3, [r7, #19]
 80088a2:	2b21      	cmp	r3, #33	@ 0x21
 80088a4:	d008      	beq.n	80088b8 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80088a6:	7cfb      	ldrb	r3, [r7, #19]
 80088a8:	2b29      	cmp	r3, #41	@ 0x29
 80088aa:	d005      	beq.n	80088b8 <HAL_I2C_ER_IRQHandler+0xce>
 80088ac:	7cfb      	ldrb	r3, [r7, #19]
 80088ae:	2b28      	cmp	r3, #40	@ 0x28
 80088b0:	d106      	bne.n	80088c0 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	2b21      	cmp	r3, #33	@ 0x21
 80088b6:	d103      	bne.n	80088c0 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80088b8:	6878      	ldr	r0, [r7, #4]
 80088ba:	f001 f871 	bl	80099a0 <I2C_Slave_AF>
 80088be:	e016      	b.n	80088ee <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80088c8:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80088ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088cc:	f043 0304 	orr.w	r3, r3, #4
 80088d0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80088d2:	7efb      	ldrb	r3, [r7, #27]
 80088d4:	2b10      	cmp	r3, #16
 80088d6:	d002      	beq.n	80088de <HAL_I2C_ER_IRQHandler+0xf4>
 80088d8:	7efb      	ldrb	r3, [r7, #27]
 80088da:	2b40      	cmp	r3, #64	@ 0x40
 80088dc:	d107      	bne.n	80088ee <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	681a      	ldr	r2, [r3, #0]
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80088ec:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80088ee:	6a3b      	ldr	r3, [r7, #32]
 80088f0:	0adb      	lsrs	r3, r3, #11
 80088f2:	f003 0301 	and.w	r3, r3, #1
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d00e      	beq.n	8008918 <HAL_I2C_ER_IRQHandler+0x12e>
 80088fa:	69fb      	ldr	r3, [r7, #28]
 80088fc:	0a1b      	lsrs	r3, r3, #8
 80088fe:	f003 0301 	and.w	r3, r3, #1
 8008902:	2b00      	cmp	r3, #0
 8008904:	d008      	beq.n	8008918 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8008906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008908:	f043 0308 	orr.w	r3, r3, #8
 800890c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8008916:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8008918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800891a:	2b00      	cmp	r3, #0
 800891c:	d008      	beq.n	8008930 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008924:	431a      	orrs	r2, r3
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f001 f8ac 	bl	8009a88 <I2C_ITError>
  }
}
 8008930:	bf00      	nop
 8008932:	3728      	adds	r7, #40	@ 0x28
 8008934:	46bd      	mov	sp, r7
 8008936:	bd80      	pop	{r7, pc}

08008938 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008938:	b480      	push	{r7}
 800893a:	b083      	sub	sp, #12
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8008940:	bf00      	nop
 8008942:	370c      	adds	r7, #12
 8008944:	46bd      	mov	sp, r7
 8008946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894a:	4770      	bx	lr

0800894c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800894c:	b480      	push	{r7}
 800894e:	b083      	sub	sp, #12
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8008954:	bf00      	nop
 8008956:	370c      	adds	r7, #12
 8008958:	46bd      	mov	sp, r7
 800895a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895e:	4770      	bx	lr

08008960 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008960:	b480      	push	{r7}
 8008962:	b083      	sub	sp, #12
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8008968:	bf00      	nop
 800896a:	370c      	adds	r7, #12
 800896c:	46bd      	mov	sp, r7
 800896e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008972:	4770      	bx	lr

08008974 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008974:	b480      	push	{r7}
 8008976:	b083      	sub	sp, #12
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800897c:	bf00      	nop
 800897e:	370c      	adds	r7, #12
 8008980:	46bd      	mov	sp, r7
 8008982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008986:	4770      	bx	lr

08008988 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8008988:	b480      	push	{r7}
 800898a:	b083      	sub	sp, #12
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
 8008990:	460b      	mov	r3, r1
 8008992:	70fb      	strb	r3, [r7, #3]
 8008994:	4613      	mov	r3, r2
 8008996:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8008998:	bf00      	nop
 800899a:	370c      	adds	r7, #12
 800899c:	46bd      	mov	sp, r7
 800899e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a2:	4770      	bx	lr

080089a4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80089a4:	b480      	push	{r7}
 80089a6:	b083      	sub	sp, #12
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80089ac:	bf00      	nop
 80089ae:	370c      	adds	r7, #12
 80089b0:	46bd      	mov	sp, r7
 80089b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b6:	4770      	bx	lr

080089b8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80089b8:	b480      	push	{r7}
 80089ba:	b083      	sub	sp, #12
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80089c0:	bf00      	nop
 80089c2:	370c      	adds	r7, #12
 80089c4:	46bd      	mov	sp, r7
 80089c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ca:	4770      	bx	lr

080089cc <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80089cc:	b480      	push	{r7}
 80089ce:	b083      	sub	sp, #12
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80089d4:	bf00      	nop
 80089d6:	370c      	adds	r7, #12
 80089d8:	46bd      	mov	sp, r7
 80089da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089de:	4770      	bx	lr

080089e0 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b084      	sub	sp, #16
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80089ee:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80089f6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089fc:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d150      	bne.n	8008aa8 <I2C_MasterTransmit_TXE+0xc8>
 8008a06:	7bfb      	ldrb	r3, [r7, #15]
 8008a08:	2b21      	cmp	r3, #33	@ 0x21
 8008a0a:	d14d      	bne.n	8008aa8 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008a0c:	68bb      	ldr	r3, [r7, #8]
 8008a0e:	2b08      	cmp	r3, #8
 8008a10:	d01d      	beq.n	8008a4e <I2C_MasterTransmit_TXE+0x6e>
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	2b20      	cmp	r3, #32
 8008a16:	d01a      	beq.n	8008a4e <I2C_MasterTransmit_TXE+0x6e>
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008a1e:	d016      	beq.n	8008a4e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	685a      	ldr	r2, [r3, #4]
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8008a2e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2211      	movs	r2, #17
 8008a34:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	2200      	movs	r2, #0
 8008a3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2220      	movs	r2, #32
 8008a42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f7ff ff76 	bl	8008938 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008a4c:	e060      	b.n	8008b10 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	685a      	ldr	r2, [r3, #4]
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8008a5c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	681a      	ldr	r2, [r3, #0]
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008a6c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2200      	movs	r2, #0
 8008a72:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2220      	movs	r2, #32
 8008a78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008a82:	b2db      	uxtb	r3, r3
 8008a84:	2b40      	cmp	r3, #64	@ 0x40
 8008a86:	d107      	bne.n	8008a98 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	f7fc f91f 	bl	8004cd4 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008a96:	e03b      	b.n	8008b10 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8008aa0:	6878      	ldr	r0, [r7, #4]
 8008aa2:	f7ff ff49 	bl	8008938 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008aa6:	e033      	b.n	8008b10 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8008aa8:	7bfb      	ldrb	r3, [r7, #15]
 8008aaa:	2b21      	cmp	r3, #33	@ 0x21
 8008aac:	d005      	beq.n	8008aba <I2C_MasterTransmit_TXE+0xda>
 8008aae:	7bbb      	ldrb	r3, [r7, #14]
 8008ab0:	2b40      	cmp	r3, #64	@ 0x40
 8008ab2:	d12d      	bne.n	8008b10 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8008ab4:	7bfb      	ldrb	r3, [r7, #15]
 8008ab6:	2b22      	cmp	r3, #34	@ 0x22
 8008ab8:	d12a      	bne.n	8008b10 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008abe:	b29b      	uxth	r3, r3
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d108      	bne.n	8008ad6 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	685a      	ldr	r2, [r3, #4]
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008ad2:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8008ad4:	e01c      	b.n	8008b10 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008adc:	b2db      	uxtb	r3, r3
 8008ade:	2b40      	cmp	r3, #64	@ 0x40
 8008ae0:	d103      	bne.n	8008aea <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8008ae2:	6878      	ldr	r0, [r7, #4]
 8008ae4:	f000 f88e 	bl	8008c04 <I2C_MemoryTransmit_TXE_BTF>
}
 8008ae8:	e012      	b.n	8008b10 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008aee:	781a      	ldrb	r2, [r3, #0]
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008afa:	1c5a      	adds	r2, r3, #1
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b04:	b29b      	uxth	r3, r3
 8008b06:	3b01      	subs	r3, #1
 8008b08:	b29a      	uxth	r2, r3
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8008b0e:	e7ff      	b.n	8008b10 <I2C_MasterTransmit_TXE+0x130>
 8008b10:	bf00      	nop
 8008b12:	3710      	adds	r7, #16
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bd80      	pop	{r7, pc}

08008b18 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b084      	sub	sp, #16
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b24:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008b2c:	b2db      	uxtb	r3, r3
 8008b2e:	2b21      	cmp	r3, #33	@ 0x21
 8008b30:	d164      	bne.n	8008bfc <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b36:	b29b      	uxth	r3, r3
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d012      	beq.n	8008b62 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b40:	781a      	ldrb	r2, [r3, #0]
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b4c:	1c5a      	adds	r2, r3, #1
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b56:	b29b      	uxth	r3, r3
 8008b58:	3b01      	subs	r3, #1
 8008b5a:	b29a      	uxth	r2, r3
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8008b60:	e04c      	b.n	8008bfc <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	2b08      	cmp	r3, #8
 8008b66:	d01d      	beq.n	8008ba4 <I2C_MasterTransmit_BTF+0x8c>
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	2b20      	cmp	r3, #32
 8008b6c:	d01a      	beq.n	8008ba4 <I2C_MasterTransmit_BTF+0x8c>
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008b74:	d016      	beq.n	8008ba4 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	685a      	ldr	r2, [r3, #4]
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8008b84:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2211      	movs	r2, #17
 8008b8a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2220      	movs	r2, #32
 8008b98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8008b9c:	6878      	ldr	r0, [r7, #4]
 8008b9e:	f7ff fecb 	bl	8008938 <HAL_I2C_MasterTxCpltCallback>
}
 8008ba2:	e02b      	b.n	8008bfc <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	685a      	ldr	r2, [r3, #4]
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8008bb2:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	681a      	ldr	r2, [r3, #0]
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008bc2:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2220      	movs	r2, #32
 8008bce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008bd8:	b2db      	uxtb	r3, r3
 8008bda:	2b40      	cmp	r3, #64	@ 0x40
 8008bdc:	d107      	bne.n	8008bee <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2200      	movs	r2, #0
 8008be2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	f7fc f874 	bl	8004cd4 <HAL_I2C_MemTxCpltCallback>
}
 8008bec:	e006      	b.n	8008bfc <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	f7ff fe9e 	bl	8008938 <HAL_I2C_MasterTxCpltCallback>
}
 8008bfc:	bf00      	nop
 8008bfe:	3710      	adds	r7, #16
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bd80      	pop	{r7, pc}

08008c04 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b084      	sub	sp, #16
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008c12:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d11d      	bne.n	8008c58 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c20:	2b01      	cmp	r3, #1
 8008c22:	d10b      	bne.n	8008c3c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008c28:	b2da      	uxtb	r2, r3
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c34:	1c9a      	adds	r2, r3, #2
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8008c3a:	e077      	b.n	8008d2c <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008c40:	b29b      	uxth	r3, r3
 8008c42:	121b      	asrs	r3, r3, #8
 8008c44:	b2da      	uxtb	r2, r3
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c50:	1c5a      	adds	r2, r3, #1
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8008c56:	e069      	b.n	8008d2c <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c5c:	2b01      	cmp	r3, #1
 8008c5e:	d10b      	bne.n	8008c78 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008c64:	b2da      	uxtb	r2, r3
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c70:	1c5a      	adds	r2, r3, #1
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8008c76:	e059      	b.n	8008d2c <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c7c:	2b02      	cmp	r3, #2
 8008c7e:	d152      	bne.n	8008d26 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8008c80:	7bfb      	ldrb	r3, [r7, #15]
 8008c82:	2b22      	cmp	r3, #34	@ 0x22
 8008c84:	d10d      	bne.n	8008ca2 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	681a      	ldr	r2, [r3, #0]
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008c94:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c9a:	1c5a      	adds	r2, r3, #1
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8008ca0:	e044      	b.n	8008d2c <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008ca6:	b29b      	uxth	r3, r3
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d015      	beq.n	8008cd8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8008cac:	7bfb      	ldrb	r3, [r7, #15]
 8008cae:	2b21      	cmp	r3, #33	@ 0x21
 8008cb0:	d112      	bne.n	8008cd8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cb6:	781a      	ldrb	r2, [r3, #0]
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cc2:	1c5a      	adds	r2, r3, #1
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008ccc:	b29b      	uxth	r3, r3
 8008cce:	3b01      	subs	r3, #1
 8008cd0:	b29a      	uxth	r2, r3
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8008cd6:	e029      	b.n	8008d2c <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008cdc:	b29b      	uxth	r3, r3
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d124      	bne.n	8008d2c <I2C_MemoryTransmit_TXE_BTF+0x128>
 8008ce2:	7bfb      	ldrb	r3, [r7, #15]
 8008ce4:	2b21      	cmp	r3, #33	@ 0x21
 8008ce6:	d121      	bne.n	8008d2c <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	685a      	ldr	r2, [r3, #4]
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8008cf6:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	681a      	ldr	r2, [r3, #0]
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008d06:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2220      	movs	r2, #32
 8008d12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2200      	movs	r2, #0
 8008d1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	f7fb ffd8 	bl	8004cd4 <HAL_I2C_MemTxCpltCallback>
}
 8008d24:	e002      	b.n	8008d2c <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f7fe fb92 	bl	8007450 <I2C_Flush_DR>
}
 8008d2c:	bf00      	nop
 8008d2e:	3710      	adds	r7, #16
 8008d30:	46bd      	mov	sp, r7
 8008d32:	bd80      	pop	{r7, pc}

08008d34 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b084      	sub	sp, #16
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008d42:	b2db      	uxtb	r3, r3
 8008d44:	2b22      	cmp	r3, #34	@ 0x22
 8008d46:	f040 80b9 	bne.w	8008ebc <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d4e:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008d54:	b29b      	uxth	r3, r3
 8008d56:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8008d58:	68bb      	ldr	r3, [r7, #8]
 8008d5a:	2b03      	cmp	r3, #3
 8008d5c:	d921      	bls.n	8008da2 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	691a      	ldr	r2, [r3, #16]
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d68:	b2d2      	uxtb	r2, r2
 8008d6a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d70:	1c5a      	adds	r2, r3, #1
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008d7a:	b29b      	uxth	r3, r3
 8008d7c:	3b01      	subs	r3, #1
 8008d7e:	b29a      	uxth	r2, r3
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008d88:	b29b      	uxth	r3, r3
 8008d8a:	2b03      	cmp	r3, #3
 8008d8c:	f040 8096 	bne.w	8008ebc <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	685a      	ldr	r2, [r3, #4]
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008d9e:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8008da0:	e08c      	b.n	8008ebc <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008da6:	2b02      	cmp	r3, #2
 8008da8:	d07f      	beq.n	8008eaa <I2C_MasterReceive_RXNE+0x176>
 8008daa:	68bb      	ldr	r3, [r7, #8]
 8008dac:	2b01      	cmp	r3, #1
 8008dae:	d002      	beq.n	8008db6 <I2C_MasterReceive_RXNE+0x82>
 8008db0:	68bb      	ldr	r3, [r7, #8]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d179      	bne.n	8008eaa <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f001 fd06 	bl	800a7c8 <I2C_WaitOnSTOPRequestThroughIT>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d14c      	bne.n	8008e5c <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	681a      	ldr	r2, [r3, #0]
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008dd0:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	685a      	ldr	r2, [r3, #4]
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8008de0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	691a      	ldr	r2, [r3, #16]
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dec:	b2d2      	uxtb	r2, r2
 8008dee:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008df4:	1c5a      	adds	r2, r3, #1
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008dfe:	b29b      	uxth	r3, r3
 8008e00:	3b01      	subs	r3, #1
 8008e02:	b29a      	uxth	r2, r3
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2220      	movs	r2, #32
 8008e0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008e16:	b2db      	uxtb	r3, r3
 8008e18:	2b40      	cmp	r3, #64	@ 0x40
 8008e1a:	d10a      	bne.n	8008e32 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2200      	movs	r2, #0
 8008e20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2200      	movs	r2, #0
 8008e28:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8008e2a:	6878      	ldr	r0, [r7, #4]
 8008e2c:	f7fb ff68 	bl	8004d00 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8008e30:	e044      	b.n	8008ebc <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2200      	movs	r2, #0
 8008e36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	2b08      	cmp	r3, #8
 8008e3e:	d002      	beq.n	8008e46 <I2C_MasterReceive_RXNE+0x112>
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	2b20      	cmp	r3, #32
 8008e44:	d103      	bne.n	8008e4e <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	2200      	movs	r2, #0
 8008e4a:	631a      	str	r2, [r3, #48]	@ 0x30
 8008e4c:	e002      	b.n	8008e54 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	2212      	movs	r2, #18
 8008e52:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	f7ff fd79 	bl	800894c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8008e5a:	e02f      	b.n	8008ebc <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	685a      	ldr	r2, [r3, #4]
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8008e6a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	691a      	ldr	r2, [r3, #16]
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e76:	b2d2      	uxtb	r2, r2
 8008e78:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e7e:	1c5a      	adds	r2, r3, #1
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008e88:	b29b      	uxth	r3, r3
 8008e8a:	3b01      	subs	r3, #1
 8008e8c:	b29a      	uxth	r2, r3
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	2220      	movs	r2, #32
 8008e96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8008ea2:	6878      	ldr	r0, [r7, #4]
 8008ea4:	f7ff fd88 	bl	80089b8 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8008ea8:	e008      	b.n	8008ebc <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	685a      	ldr	r2, [r3, #4]
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008eb8:	605a      	str	r2, [r3, #4]
}
 8008eba:	e7ff      	b.n	8008ebc <I2C_MasterReceive_RXNE+0x188>
 8008ebc:	bf00      	nop
 8008ebe:	3710      	adds	r7, #16
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd80      	pop	{r7, pc}

08008ec4 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b084      	sub	sp, #16
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ed0:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008ed6:	b29b      	uxth	r3, r3
 8008ed8:	2b04      	cmp	r3, #4
 8008eda:	d11b      	bne.n	8008f14 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	685a      	ldr	r2, [r3, #4]
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008eea:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	691a      	ldr	r2, [r3, #16]
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ef6:	b2d2      	uxtb	r2, r2
 8008ef8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008efe:	1c5a      	adds	r2, r3, #1
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008f08:	b29b      	uxth	r3, r3
 8008f0a:	3b01      	subs	r3, #1
 8008f0c:	b29a      	uxth	r2, r3
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8008f12:	e0c8      	b.n	80090a6 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008f18:	b29b      	uxth	r3, r3
 8008f1a:	2b03      	cmp	r3, #3
 8008f1c:	d129      	bne.n	8008f72 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	685a      	ldr	r2, [r3, #4]
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008f2c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	2b04      	cmp	r3, #4
 8008f32:	d00a      	beq.n	8008f4a <I2C_MasterReceive_BTF+0x86>
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	2b02      	cmp	r3, #2
 8008f38:	d007      	beq.n	8008f4a <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	681a      	ldr	r2, [r3, #0]
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008f48:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	691a      	ldr	r2, [r3, #16]
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f54:	b2d2      	uxtb	r2, r2
 8008f56:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f5c:	1c5a      	adds	r2, r3, #1
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008f66:	b29b      	uxth	r3, r3
 8008f68:	3b01      	subs	r3, #1
 8008f6a:	b29a      	uxth	r2, r3
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8008f70:	e099      	b.n	80090a6 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008f76:	b29b      	uxth	r3, r3
 8008f78:	2b02      	cmp	r3, #2
 8008f7a:	f040 8081 	bne.w	8009080 <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	2b01      	cmp	r3, #1
 8008f82:	d002      	beq.n	8008f8a <I2C_MasterReceive_BTF+0xc6>
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	2b10      	cmp	r3, #16
 8008f88:	d108      	bne.n	8008f9c <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	681a      	ldr	r2, [r3, #0]
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008f98:	601a      	str	r2, [r3, #0]
 8008f9a:	e019      	b.n	8008fd0 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	2b04      	cmp	r3, #4
 8008fa0:	d002      	beq.n	8008fa8 <I2C_MasterReceive_BTF+0xe4>
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	2b02      	cmp	r3, #2
 8008fa6:	d108      	bne.n	8008fba <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	681a      	ldr	r2, [r3, #0]
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008fb6:	601a      	str	r2, [r3, #0]
 8008fb8:	e00a      	b.n	8008fd0 <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	2b10      	cmp	r3, #16
 8008fbe:	d007      	beq.n	8008fd0 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	681a      	ldr	r2, [r3, #0]
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008fce:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	691a      	ldr	r2, [r3, #16]
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fda:	b2d2      	uxtb	r2, r2
 8008fdc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fe2:	1c5a      	adds	r2, r3, #1
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008fec:	b29b      	uxth	r3, r3
 8008fee:	3b01      	subs	r3, #1
 8008ff0:	b29a      	uxth	r2, r3
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	691a      	ldr	r2, [r3, #16]
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009000:	b2d2      	uxtb	r2, r2
 8009002:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009008:	1c5a      	adds	r2, r3, #1
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009012:	b29b      	uxth	r3, r3
 8009014:	3b01      	subs	r3, #1
 8009016:	b29a      	uxth	r2, r3
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	685a      	ldr	r2, [r3, #4]
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800902a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2220      	movs	r2, #32
 8009030:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800903a:	b2db      	uxtb	r3, r3
 800903c:	2b40      	cmp	r3, #64	@ 0x40
 800903e:	d10a      	bne.n	8009056 <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2200      	movs	r2, #0
 8009044:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2200      	movs	r2, #0
 800904c:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f7fb fe56 	bl	8004d00 <HAL_I2C_MemRxCpltCallback>
}
 8009054:	e027      	b.n	80090a6 <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	2200      	movs	r2, #0
 800905a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	2b08      	cmp	r3, #8
 8009062:	d002      	beq.n	800906a <I2C_MasterReceive_BTF+0x1a6>
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	2b20      	cmp	r3, #32
 8009068:	d103      	bne.n	8009072 <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2200      	movs	r2, #0
 800906e:	631a      	str	r2, [r3, #48]	@ 0x30
 8009070:	e002      	b.n	8009078 <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2212      	movs	r2, #18
 8009076:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8009078:	6878      	ldr	r0, [r7, #4]
 800907a:	f7ff fc67 	bl	800894c <HAL_I2C_MasterRxCpltCallback>
}
 800907e:	e012      	b.n	80090a6 <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	691a      	ldr	r2, [r3, #16]
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800908a:	b2d2      	uxtb	r2, r2
 800908c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009092:	1c5a      	adds	r2, r3, #1
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800909c:	b29b      	uxth	r3, r3
 800909e:	3b01      	subs	r3, #1
 80090a0:	b29a      	uxth	r2, r3
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80090a6:	bf00      	nop
 80090a8:	3710      	adds	r7, #16
 80090aa:	46bd      	mov	sp, r7
 80090ac:	bd80      	pop	{r7, pc}

080090ae <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80090ae:	b480      	push	{r7}
 80090b0:	b083      	sub	sp, #12
 80090b2:	af00      	add	r7, sp, #0
 80090b4:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80090bc:	b2db      	uxtb	r3, r3
 80090be:	2b40      	cmp	r3, #64	@ 0x40
 80090c0:	d117      	bne.n	80090f2 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d109      	bne.n	80090de <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80090ce:	b2db      	uxtb	r3, r3
 80090d0:	461a      	mov	r2, r3
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80090da:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80090dc:	e067      	b.n	80091ae <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80090e2:	b2db      	uxtb	r3, r3
 80090e4:	f043 0301 	orr.w	r3, r3, #1
 80090e8:	b2da      	uxtb	r2, r3
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	611a      	str	r2, [r3, #16]
}
 80090f0:	e05d      	b.n	80091ae <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	691b      	ldr	r3, [r3, #16]
 80090f6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80090fa:	d133      	bne.n	8009164 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009102:	b2db      	uxtb	r3, r3
 8009104:	2b21      	cmp	r3, #33	@ 0x21
 8009106:	d109      	bne.n	800911c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800910c:	b2db      	uxtb	r3, r3
 800910e:	461a      	mov	r2, r3
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8009118:	611a      	str	r2, [r3, #16]
 800911a:	e008      	b.n	800912e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009120:	b2db      	uxtb	r3, r3
 8009122:	f043 0301 	orr.w	r3, r3, #1
 8009126:	b2da      	uxtb	r2, r3
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009132:	2b00      	cmp	r3, #0
 8009134:	d004      	beq.n	8009140 <I2C_Master_SB+0x92>
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800913a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800913c:	2b00      	cmp	r3, #0
 800913e:	d108      	bne.n	8009152 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009144:	2b00      	cmp	r3, #0
 8009146:	d032      	beq.n	80091ae <I2C_Master_SB+0x100>
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800914c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800914e:	2b00      	cmp	r3, #0
 8009150:	d02d      	beq.n	80091ae <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	685a      	ldr	r2, [r3, #4]
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009160:	605a      	str	r2, [r3, #4]
}
 8009162:	e024      	b.n	80091ae <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009168:	2b00      	cmp	r3, #0
 800916a:	d10e      	bne.n	800918a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009170:	b29b      	uxth	r3, r3
 8009172:	11db      	asrs	r3, r3, #7
 8009174:	b2db      	uxtb	r3, r3
 8009176:	f003 0306 	and.w	r3, r3, #6
 800917a:	b2db      	uxtb	r3, r3
 800917c:	f063 030f 	orn	r3, r3, #15
 8009180:	b2da      	uxtb	r2, r3
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	611a      	str	r2, [r3, #16]
}
 8009188:	e011      	b.n	80091ae <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800918e:	2b01      	cmp	r3, #1
 8009190:	d10d      	bne.n	80091ae <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009196:	b29b      	uxth	r3, r3
 8009198:	11db      	asrs	r3, r3, #7
 800919a:	b2db      	uxtb	r3, r3
 800919c:	f003 0306 	and.w	r3, r3, #6
 80091a0:	b2db      	uxtb	r3, r3
 80091a2:	f063 030e 	orn	r3, r3, #14
 80091a6:	b2da      	uxtb	r2, r3
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	611a      	str	r2, [r3, #16]
}
 80091ae:	bf00      	nop
 80091b0:	370c      	adds	r7, #12
 80091b2:	46bd      	mov	sp, r7
 80091b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b8:	4770      	bx	lr

080091ba <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80091ba:	b480      	push	{r7}
 80091bc:	b083      	sub	sp, #12
 80091be:	af00      	add	r7, sp, #0
 80091c0:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80091c6:	b2da      	uxtb	r2, r3
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d004      	beq.n	80091e0 <I2C_Master_ADD10+0x26>
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d108      	bne.n	80091f2 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d00c      	beq.n	8009202 <I2C_Master_ADD10+0x48>
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d007      	beq.n	8009202 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	685a      	ldr	r2, [r3, #4]
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009200:	605a      	str	r2, [r3, #4]
  }
}
 8009202:	bf00      	nop
 8009204:	370c      	adds	r7, #12
 8009206:	46bd      	mov	sp, r7
 8009208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920c:	4770      	bx	lr

0800920e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800920e:	b480      	push	{r7}
 8009210:	b091      	sub	sp, #68	@ 0x44
 8009212:	af00      	add	r7, sp, #0
 8009214:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800921c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009224:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800922a:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009232:	b2db      	uxtb	r3, r3
 8009234:	2b22      	cmp	r3, #34	@ 0x22
 8009236:	f040 8169 	bne.w	800950c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800923e:	2b00      	cmp	r3, #0
 8009240:	d10f      	bne.n	8009262 <I2C_Master_ADDR+0x54>
 8009242:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009246:	2b40      	cmp	r3, #64	@ 0x40
 8009248:	d10b      	bne.n	8009262 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800924a:	2300      	movs	r3, #0
 800924c:	633b      	str	r3, [r7, #48]	@ 0x30
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	695b      	ldr	r3, [r3, #20]
 8009254:	633b      	str	r3, [r7, #48]	@ 0x30
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	699b      	ldr	r3, [r3, #24]
 800925c:	633b      	str	r3, [r7, #48]	@ 0x30
 800925e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009260:	e160      	b.n	8009524 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009266:	2b00      	cmp	r3, #0
 8009268:	d11d      	bne.n	80092a6 <I2C_Master_ADDR+0x98>
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	691b      	ldr	r3, [r3, #16]
 800926e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8009272:	d118      	bne.n	80092a6 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009274:	2300      	movs	r3, #0
 8009276:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	695b      	ldr	r3, [r3, #20]
 800927e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	699b      	ldr	r3, [r3, #24]
 8009286:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009288:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	681a      	ldr	r2, [r3, #0]
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009298:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800929e:	1c5a      	adds	r2, r3, #1
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	651a      	str	r2, [r3, #80]	@ 0x50
 80092a4:	e13e      	b.n	8009524 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80092aa:	b29b      	uxth	r3, r3
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d113      	bne.n	80092d8 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80092b0:	2300      	movs	r3, #0
 80092b2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	695b      	ldr	r3, [r3, #20]
 80092ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	699b      	ldr	r3, [r3, #24]
 80092c2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80092c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	681a      	ldr	r2, [r3, #0]
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80092d4:	601a      	str	r2, [r3, #0]
 80092d6:	e115      	b.n	8009504 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80092dc:	b29b      	uxth	r3, r3
 80092de:	2b01      	cmp	r3, #1
 80092e0:	f040 808a 	bne.w	80093f8 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80092e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092e6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80092ea:	d137      	bne.n	800935c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	681a      	ldr	r2, [r3, #0]
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80092fa:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	685b      	ldr	r3, [r3, #4]
 8009302:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009306:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800930a:	d113      	bne.n	8009334 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	681a      	ldr	r2, [r3, #0]
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800931a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800931c:	2300      	movs	r3, #0
 800931e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	695b      	ldr	r3, [r3, #20]
 8009326:	627b      	str	r3, [r7, #36]	@ 0x24
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	699b      	ldr	r3, [r3, #24]
 800932e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009332:	e0e7      	b.n	8009504 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009334:	2300      	movs	r3, #0
 8009336:	623b      	str	r3, [r7, #32]
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	695b      	ldr	r3, [r3, #20]
 800933e:	623b      	str	r3, [r7, #32]
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	699b      	ldr	r3, [r3, #24]
 8009346:	623b      	str	r3, [r7, #32]
 8009348:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	681a      	ldr	r2, [r3, #0]
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009358:	601a      	str	r2, [r3, #0]
 800935a:	e0d3      	b.n	8009504 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800935c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800935e:	2b08      	cmp	r3, #8
 8009360:	d02e      	beq.n	80093c0 <I2C_Master_ADDR+0x1b2>
 8009362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009364:	2b20      	cmp	r3, #32
 8009366:	d02b      	beq.n	80093c0 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8009368:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800936a:	2b12      	cmp	r3, #18
 800936c:	d102      	bne.n	8009374 <I2C_Master_ADDR+0x166>
 800936e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009370:	2b01      	cmp	r3, #1
 8009372:	d125      	bne.n	80093c0 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8009374:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009376:	2b04      	cmp	r3, #4
 8009378:	d00e      	beq.n	8009398 <I2C_Master_ADDR+0x18a>
 800937a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800937c:	2b02      	cmp	r3, #2
 800937e:	d00b      	beq.n	8009398 <I2C_Master_ADDR+0x18a>
 8009380:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009382:	2b10      	cmp	r3, #16
 8009384:	d008      	beq.n	8009398 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	681a      	ldr	r2, [r3, #0]
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009394:	601a      	str	r2, [r3, #0]
 8009396:	e007      	b.n	80093a8 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	681a      	ldr	r2, [r3, #0]
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80093a6:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80093a8:	2300      	movs	r3, #0
 80093aa:	61fb      	str	r3, [r7, #28]
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	695b      	ldr	r3, [r3, #20]
 80093b2:	61fb      	str	r3, [r7, #28]
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	699b      	ldr	r3, [r3, #24]
 80093ba:	61fb      	str	r3, [r7, #28]
 80093bc:	69fb      	ldr	r3, [r7, #28]
 80093be:	e0a1      	b.n	8009504 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	681a      	ldr	r2, [r3, #0]
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80093ce:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80093d0:	2300      	movs	r3, #0
 80093d2:	61bb      	str	r3, [r7, #24]
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	695b      	ldr	r3, [r3, #20]
 80093da:	61bb      	str	r3, [r7, #24]
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	699b      	ldr	r3, [r3, #24]
 80093e2:	61bb      	str	r3, [r7, #24]
 80093e4:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	681a      	ldr	r2, [r3, #0]
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80093f4:	601a      	str	r2, [r3, #0]
 80093f6:	e085      	b.n	8009504 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80093fc:	b29b      	uxth	r3, r3
 80093fe:	2b02      	cmp	r3, #2
 8009400:	d14d      	bne.n	800949e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8009402:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009404:	2b04      	cmp	r3, #4
 8009406:	d016      	beq.n	8009436 <I2C_Master_ADDR+0x228>
 8009408:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800940a:	2b02      	cmp	r3, #2
 800940c:	d013      	beq.n	8009436 <I2C_Master_ADDR+0x228>
 800940e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009410:	2b10      	cmp	r3, #16
 8009412:	d010      	beq.n	8009436 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	681a      	ldr	r2, [r3, #0]
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009422:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	681a      	ldr	r2, [r3, #0]
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009432:	601a      	str	r2, [r3, #0]
 8009434:	e007      	b.n	8009446 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	681a      	ldr	r2, [r3, #0]
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009444:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	685b      	ldr	r3, [r3, #4]
 800944c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009450:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009454:	d117      	bne.n	8009486 <I2C_Master_ADDR+0x278>
 8009456:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009458:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800945c:	d00b      	beq.n	8009476 <I2C_Master_ADDR+0x268>
 800945e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009460:	2b01      	cmp	r3, #1
 8009462:	d008      	beq.n	8009476 <I2C_Master_ADDR+0x268>
 8009464:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009466:	2b08      	cmp	r3, #8
 8009468:	d005      	beq.n	8009476 <I2C_Master_ADDR+0x268>
 800946a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800946c:	2b10      	cmp	r3, #16
 800946e:	d002      	beq.n	8009476 <I2C_Master_ADDR+0x268>
 8009470:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009472:	2b20      	cmp	r3, #32
 8009474:	d107      	bne.n	8009486 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	685a      	ldr	r2, [r3, #4]
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009484:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009486:	2300      	movs	r3, #0
 8009488:	617b      	str	r3, [r7, #20]
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	695b      	ldr	r3, [r3, #20]
 8009490:	617b      	str	r3, [r7, #20]
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	699b      	ldr	r3, [r3, #24]
 8009498:	617b      	str	r3, [r7, #20]
 800949a:	697b      	ldr	r3, [r7, #20]
 800949c:	e032      	b.n	8009504 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	681a      	ldr	r2, [r3, #0]
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80094ac:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	685b      	ldr	r3, [r3, #4]
 80094b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80094b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80094bc:	d117      	bne.n	80094ee <I2C_Master_ADDR+0x2e0>
 80094be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094c0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80094c4:	d00b      	beq.n	80094de <I2C_Master_ADDR+0x2d0>
 80094c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094c8:	2b01      	cmp	r3, #1
 80094ca:	d008      	beq.n	80094de <I2C_Master_ADDR+0x2d0>
 80094cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094ce:	2b08      	cmp	r3, #8
 80094d0:	d005      	beq.n	80094de <I2C_Master_ADDR+0x2d0>
 80094d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094d4:	2b10      	cmp	r3, #16
 80094d6:	d002      	beq.n	80094de <I2C_Master_ADDR+0x2d0>
 80094d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094da:	2b20      	cmp	r3, #32
 80094dc:	d107      	bne.n	80094ee <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	685a      	ldr	r2, [r3, #4]
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80094ec:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80094ee:	2300      	movs	r3, #0
 80094f0:	613b      	str	r3, [r7, #16]
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	695b      	ldr	r3, [r3, #20]
 80094f8:	613b      	str	r3, [r7, #16]
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	699b      	ldr	r3, [r3, #24]
 8009500:	613b      	str	r3, [r7, #16]
 8009502:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2200      	movs	r2, #0
 8009508:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800950a:	e00b      	b.n	8009524 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800950c:	2300      	movs	r3, #0
 800950e:	60fb      	str	r3, [r7, #12]
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	695b      	ldr	r3, [r3, #20]
 8009516:	60fb      	str	r3, [r7, #12]
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	699b      	ldr	r3, [r3, #24]
 800951e:	60fb      	str	r3, [r7, #12]
 8009520:	68fb      	ldr	r3, [r7, #12]
}
 8009522:	e7ff      	b.n	8009524 <I2C_Master_ADDR+0x316>
 8009524:	bf00      	nop
 8009526:	3744      	adds	r7, #68	@ 0x44
 8009528:	46bd      	mov	sp, r7
 800952a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952e:	4770      	bx	lr

08009530 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b084      	sub	sp, #16
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800953e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009544:	b29b      	uxth	r3, r3
 8009546:	2b00      	cmp	r3, #0
 8009548:	d02b      	beq.n	80095a2 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800954e:	781a      	ldrb	r2, [r3, #0]
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800955a:	1c5a      	adds	r2, r3, #1
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009564:	b29b      	uxth	r3, r3
 8009566:	3b01      	subs	r3, #1
 8009568:	b29a      	uxth	r2, r3
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009572:	b29b      	uxth	r3, r3
 8009574:	2b00      	cmp	r3, #0
 8009576:	d114      	bne.n	80095a2 <I2C_SlaveTransmit_TXE+0x72>
 8009578:	7bfb      	ldrb	r3, [r7, #15]
 800957a:	2b29      	cmp	r3, #41	@ 0x29
 800957c:	d111      	bne.n	80095a2 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	685a      	ldr	r2, [r3, #4]
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800958c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	2221      	movs	r2, #33	@ 0x21
 8009592:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2228      	movs	r2, #40	@ 0x28
 8009598:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800959c:	6878      	ldr	r0, [r7, #4]
 800959e:	f7ff f9df 	bl	8008960 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80095a2:	bf00      	nop
 80095a4:	3710      	adds	r7, #16
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bd80      	pop	{r7, pc}

080095aa <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80095aa:	b480      	push	{r7}
 80095ac:	b083      	sub	sp, #12
 80095ae:	af00      	add	r7, sp, #0
 80095b0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80095b6:	b29b      	uxth	r3, r3
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d011      	beq.n	80095e0 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095c0:	781a      	ldrb	r2, [r3, #0]
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095cc:	1c5a      	adds	r2, r3, #1
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80095d6:	b29b      	uxth	r3, r3
 80095d8:	3b01      	subs	r3, #1
 80095da:	b29a      	uxth	r2, r3
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80095e0:	bf00      	nop
 80095e2:	370c      	adds	r7, #12
 80095e4:	46bd      	mov	sp, r7
 80095e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ea:	4770      	bx	lr

080095ec <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b084      	sub	sp, #16
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80095fa:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009600:	b29b      	uxth	r3, r3
 8009602:	2b00      	cmp	r3, #0
 8009604:	d02c      	beq.n	8009660 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	691a      	ldr	r2, [r3, #16]
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009610:	b2d2      	uxtb	r2, r2
 8009612:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009618:	1c5a      	adds	r2, r3, #1
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009622:	b29b      	uxth	r3, r3
 8009624:	3b01      	subs	r3, #1
 8009626:	b29a      	uxth	r2, r3
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009630:	b29b      	uxth	r3, r3
 8009632:	2b00      	cmp	r3, #0
 8009634:	d114      	bne.n	8009660 <I2C_SlaveReceive_RXNE+0x74>
 8009636:	7bfb      	ldrb	r3, [r7, #15]
 8009638:	2b2a      	cmp	r3, #42	@ 0x2a
 800963a:	d111      	bne.n	8009660 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	685a      	ldr	r2, [r3, #4]
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800964a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2222      	movs	r2, #34	@ 0x22
 8009650:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	2228      	movs	r2, #40	@ 0x28
 8009656:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800965a:	6878      	ldr	r0, [r7, #4]
 800965c:	f7ff f98a 	bl	8008974 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8009660:	bf00      	nop
 8009662:	3710      	adds	r7, #16
 8009664:	46bd      	mov	sp, r7
 8009666:	bd80      	pop	{r7, pc}

08009668 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8009668:	b480      	push	{r7}
 800966a:	b083      	sub	sp, #12
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009674:	b29b      	uxth	r3, r3
 8009676:	2b00      	cmp	r3, #0
 8009678:	d012      	beq.n	80096a0 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	691a      	ldr	r2, [r3, #16]
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009684:	b2d2      	uxtb	r2, r2
 8009686:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800968c:	1c5a      	adds	r2, r3, #1
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009696:	b29b      	uxth	r3, r3
 8009698:	3b01      	subs	r3, #1
 800969a:	b29a      	uxth	r2, r3
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80096a0:	bf00      	nop
 80096a2:	370c      	adds	r7, #12
 80096a4:	46bd      	mov	sp, r7
 80096a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096aa:	4770      	bx	lr

080096ac <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b084      	sub	sp, #16
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
 80096b4:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80096b6:	2300      	movs	r3, #0
 80096b8:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80096c0:	b2db      	uxtb	r3, r3
 80096c2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80096c6:	2b28      	cmp	r3, #40	@ 0x28
 80096c8:	d127      	bne.n	800971a <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	685a      	ldr	r2, [r3, #4]
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80096d8:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	089b      	lsrs	r3, r3, #2
 80096de:	f003 0301 	and.w	r3, r3, #1
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d101      	bne.n	80096ea <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80096e6:	2301      	movs	r3, #1
 80096e8:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	09db      	lsrs	r3, r3, #7
 80096ee:	f003 0301 	and.w	r3, r3, #1
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d103      	bne.n	80096fe <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	68db      	ldr	r3, [r3, #12]
 80096fa:	81bb      	strh	r3, [r7, #12]
 80096fc:	e002      	b.n	8009704 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	699b      	ldr	r3, [r3, #24]
 8009702:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2200      	movs	r2, #0
 8009708:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800970c:	89ba      	ldrh	r2, [r7, #12]
 800970e:	7bfb      	ldrb	r3, [r7, #15]
 8009710:	4619      	mov	r1, r3
 8009712:	6878      	ldr	r0, [r7, #4]
 8009714:	f7ff f938 	bl	8008988 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8009718:	e00e      	b.n	8009738 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800971a:	2300      	movs	r3, #0
 800971c:	60bb      	str	r3, [r7, #8]
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	695b      	ldr	r3, [r3, #20]
 8009724:	60bb      	str	r3, [r7, #8]
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	699b      	ldr	r3, [r3, #24]
 800972c:	60bb      	str	r3, [r7, #8]
 800972e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2200      	movs	r2, #0
 8009734:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8009738:	bf00      	nop
 800973a:	3710      	adds	r7, #16
 800973c:	46bd      	mov	sp, r7
 800973e:	bd80      	pop	{r7, pc}

08009740 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b084      	sub	sp, #16
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800974e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	685a      	ldr	r2, [r3, #4]
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800975e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8009760:	2300      	movs	r3, #0
 8009762:	60bb      	str	r3, [r7, #8]
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	695b      	ldr	r3, [r3, #20]
 800976a:	60bb      	str	r3, [r7, #8]
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	681a      	ldr	r2, [r3, #0]
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	f042 0201 	orr.w	r2, r2, #1
 800977a:	601a      	str	r2, [r3, #0]
 800977c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	681a      	ldr	r2, [r3, #0]
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800978c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	685b      	ldr	r3, [r3, #4]
 8009794:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009798:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800979c:	d172      	bne.n	8009884 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800979e:	7bfb      	ldrb	r3, [r7, #15]
 80097a0:	2b22      	cmp	r3, #34	@ 0x22
 80097a2:	d002      	beq.n	80097aa <I2C_Slave_STOPF+0x6a>
 80097a4:	7bfb      	ldrb	r3, [r7, #15]
 80097a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80097a8:	d135      	bne.n	8009816 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	685b      	ldr	r3, [r3, #4]
 80097b2:	b29a      	uxth	r2, r3
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80097bc:	b29b      	uxth	r3, r3
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d005      	beq.n	80097ce <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097c6:	f043 0204 	orr.w	r2, r3, #4
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	685a      	ldr	r2, [r3, #4]
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80097dc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097e2:	4618      	mov	r0, r3
 80097e4:	f7fd fa0e 	bl	8006c04 <HAL_DMA_GetState>
 80097e8:	4603      	mov	r3, r0
 80097ea:	2b01      	cmp	r3, #1
 80097ec:	d049      	beq.n	8009882 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097f2:	4a69      	ldr	r2, [pc, #420]	@ (8009998 <I2C_Slave_STOPF+0x258>)
 80097f4:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097fa:	4618      	mov	r0, r3
 80097fc:	f7fd f856 	bl	80068ac <HAL_DMA_Abort_IT>
 8009800:	4603      	mov	r3, r0
 8009802:	2b00      	cmp	r3, #0
 8009804:	d03d      	beq.n	8009882 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800980a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800980c:	687a      	ldr	r2, [r7, #4]
 800980e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8009810:	4610      	mov	r0, r2
 8009812:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009814:	e035      	b.n	8009882 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	685b      	ldr	r3, [r3, #4]
 800981e:	b29a      	uxth	r2, r3
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009828:	b29b      	uxth	r3, r3
 800982a:	2b00      	cmp	r3, #0
 800982c:	d005      	beq.n	800983a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009832:	f043 0204 	orr.w	r2, r3, #4
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	685a      	ldr	r2, [r3, #4]
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009848:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800984e:	4618      	mov	r0, r3
 8009850:	f7fd f9d8 	bl	8006c04 <HAL_DMA_GetState>
 8009854:	4603      	mov	r3, r0
 8009856:	2b01      	cmp	r3, #1
 8009858:	d014      	beq.n	8009884 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800985e:	4a4e      	ldr	r2, [pc, #312]	@ (8009998 <I2C_Slave_STOPF+0x258>)
 8009860:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009866:	4618      	mov	r0, r3
 8009868:	f7fd f820 	bl	80068ac <HAL_DMA_Abort_IT>
 800986c:	4603      	mov	r3, r0
 800986e:	2b00      	cmp	r3, #0
 8009870:	d008      	beq.n	8009884 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009876:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009878:	687a      	ldr	r2, [r7, #4]
 800987a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800987c:	4610      	mov	r0, r2
 800987e:	4798      	blx	r3
 8009880:	e000      	b.n	8009884 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009882:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009888:	b29b      	uxth	r3, r3
 800988a:	2b00      	cmp	r3, #0
 800988c:	d03e      	beq.n	800990c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	695b      	ldr	r3, [r3, #20]
 8009894:	f003 0304 	and.w	r3, r3, #4
 8009898:	2b04      	cmp	r3, #4
 800989a:	d112      	bne.n	80098c2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	691a      	ldr	r2, [r3, #16]
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098a6:	b2d2      	uxtb	r2, r2
 80098a8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098ae:	1c5a      	adds	r2, r3, #1
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80098b8:	b29b      	uxth	r3, r3
 80098ba:	3b01      	subs	r3, #1
 80098bc:	b29a      	uxth	r2, r3
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	695b      	ldr	r3, [r3, #20]
 80098c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098cc:	2b40      	cmp	r3, #64	@ 0x40
 80098ce:	d112      	bne.n	80098f6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	691a      	ldr	r2, [r3, #16]
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098da:	b2d2      	uxtb	r2, r2
 80098dc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098e2:	1c5a      	adds	r2, r3, #1
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80098ec:	b29b      	uxth	r3, r3
 80098ee:	3b01      	subs	r3, #1
 80098f0:	b29a      	uxth	r2, r3
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80098fa:	b29b      	uxth	r3, r3
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d005      	beq.n	800990c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009904:	f043 0204 	orr.w	r2, r3, #4
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009910:	2b00      	cmp	r3, #0
 8009912:	d003      	beq.n	800991c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8009914:	6878      	ldr	r0, [r7, #4]
 8009916:	f000 f8b7 	bl	8009a88 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800991a:	e039      	b.n	8009990 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800991c:	7bfb      	ldrb	r3, [r7, #15]
 800991e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009920:	d109      	bne.n	8009936 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	2200      	movs	r2, #0
 8009926:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2228      	movs	r2, #40	@ 0x28
 800992c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009930:	6878      	ldr	r0, [r7, #4]
 8009932:	f7ff f81f 	bl	8008974 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800993c:	b2db      	uxtb	r3, r3
 800993e:	2b28      	cmp	r3, #40	@ 0x28
 8009940:	d111      	bne.n	8009966 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	4a15      	ldr	r2, [pc, #84]	@ (800999c <I2C_Slave_STOPF+0x25c>)
 8009946:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2200      	movs	r2, #0
 800994c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	2220      	movs	r2, #32
 8009952:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	2200      	movs	r2, #0
 800995a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800995e:	6878      	ldr	r0, [r7, #4]
 8009960:	f7ff f820 	bl	80089a4 <HAL_I2C_ListenCpltCallback>
}
 8009964:	e014      	b.n	8009990 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800996a:	2b22      	cmp	r3, #34	@ 0x22
 800996c:	d002      	beq.n	8009974 <I2C_Slave_STOPF+0x234>
 800996e:	7bfb      	ldrb	r3, [r7, #15]
 8009970:	2b22      	cmp	r3, #34	@ 0x22
 8009972:	d10d      	bne.n	8009990 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	2200      	movs	r2, #0
 8009978:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	2220      	movs	r2, #32
 800997e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	2200      	movs	r2, #0
 8009986:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800998a:	6878      	ldr	r0, [r7, #4]
 800998c:	f7fe fff2 	bl	8008974 <HAL_I2C_SlaveRxCpltCallback>
}
 8009990:	bf00      	nop
 8009992:	3710      	adds	r7, #16
 8009994:	46bd      	mov	sp, r7
 8009996:	bd80      	pop	{r7, pc}
 8009998:	0800a325 	.word	0x0800a325
 800999c:	ffff0000 	.word	0xffff0000

080099a0 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b084      	sub	sp, #16
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80099ae:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099b4:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80099b6:	68bb      	ldr	r3, [r7, #8]
 80099b8:	2b08      	cmp	r3, #8
 80099ba:	d002      	beq.n	80099c2 <I2C_Slave_AF+0x22>
 80099bc:	68bb      	ldr	r3, [r7, #8]
 80099be:	2b20      	cmp	r3, #32
 80099c0:	d129      	bne.n	8009a16 <I2C_Slave_AF+0x76>
 80099c2:	7bfb      	ldrb	r3, [r7, #15]
 80099c4:	2b28      	cmp	r3, #40	@ 0x28
 80099c6:	d126      	bne.n	8009a16 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	4a2e      	ldr	r2, [pc, #184]	@ (8009a84 <I2C_Slave_AF+0xe4>)
 80099cc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	685a      	ldr	r2, [r3, #4]
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80099dc:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80099e6:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	681a      	ldr	r2, [r3, #0]
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80099f6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	2200      	movs	r2, #0
 80099fc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	2220      	movs	r2, #32
 8009a02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	2200      	movs	r2, #0
 8009a0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8009a0e:	6878      	ldr	r0, [r7, #4]
 8009a10:	f7fe ffc8 	bl	80089a4 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8009a14:	e031      	b.n	8009a7a <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8009a16:	7bfb      	ldrb	r3, [r7, #15]
 8009a18:	2b21      	cmp	r3, #33	@ 0x21
 8009a1a:	d129      	bne.n	8009a70 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	4a19      	ldr	r2, [pc, #100]	@ (8009a84 <I2C_Slave_AF+0xe4>)
 8009a20:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	2221      	movs	r2, #33	@ 0x21
 8009a26:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	2220      	movs	r2, #32
 8009a2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	2200      	movs	r2, #0
 8009a34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	685a      	ldr	r2, [r3, #4]
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8009a46:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8009a50:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	681a      	ldr	r2, [r3, #0]
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009a60:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8009a62:	6878      	ldr	r0, [r7, #4]
 8009a64:	f7fd fcf4 	bl	8007450 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009a68:	6878      	ldr	r0, [r7, #4]
 8009a6a:	f7fe ff79 	bl	8008960 <HAL_I2C_SlaveTxCpltCallback>
}
 8009a6e:	e004      	b.n	8009a7a <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8009a78:	615a      	str	r2, [r3, #20]
}
 8009a7a:	bf00      	nop
 8009a7c:	3710      	adds	r7, #16
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	bd80      	pop	{r7, pc}
 8009a82:	bf00      	nop
 8009a84:	ffff0000 	.word	0xffff0000

08009a88 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b084      	sub	sp, #16
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009a96:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009a9e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8009aa0:	7bbb      	ldrb	r3, [r7, #14]
 8009aa2:	2b10      	cmp	r3, #16
 8009aa4:	d002      	beq.n	8009aac <I2C_ITError+0x24>
 8009aa6:	7bbb      	ldrb	r3, [r7, #14]
 8009aa8:	2b40      	cmp	r3, #64	@ 0x40
 8009aaa:	d10a      	bne.n	8009ac2 <I2C_ITError+0x3a>
 8009aac:	7bfb      	ldrb	r3, [r7, #15]
 8009aae:	2b22      	cmp	r3, #34	@ 0x22
 8009ab0:	d107      	bne.n	8009ac2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	681a      	ldr	r2, [r3, #0]
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009ac0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009ac2:	7bfb      	ldrb	r3, [r7, #15]
 8009ac4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8009ac8:	2b28      	cmp	r3, #40	@ 0x28
 8009aca:	d107      	bne.n	8009adc <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2200      	movs	r2, #0
 8009ad0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	2228      	movs	r2, #40	@ 0x28
 8009ad6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8009ada:	e015      	b.n	8009b08 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	685b      	ldr	r3, [r3, #4]
 8009ae2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009ae6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009aea:	d00a      	beq.n	8009b02 <I2C_ITError+0x7a>
 8009aec:	7bfb      	ldrb	r3, [r7, #15]
 8009aee:	2b60      	cmp	r3, #96	@ 0x60
 8009af0:	d007      	beq.n	8009b02 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	2220      	movs	r2, #32
 8009af6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	2200      	movs	r2, #0
 8009afe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	2200      	movs	r2, #0
 8009b06:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	685b      	ldr	r3, [r3, #4]
 8009b0e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009b12:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009b16:	d162      	bne.n	8009bde <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	685a      	ldr	r2, [r3, #4]
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009b26:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b2c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8009b30:	b2db      	uxtb	r3, r3
 8009b32:	2b01      	cmp	r3, #1
 8009b34:	d020      	beq.n	8009b78 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b3a:	4a6a      	ldr	r2, [pc, #424]	@ (8009ce4 <I2C_ITError+0x25c>)
 8009b3c:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b42:	4618      	mov	r0, r3
 8009b44:	f7fc feb2 	bl	80068ac <HAL_DMA_Abort_IT>
 8009b48:	4603      	mov	r3, r0
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	f000 8089 	beq.w	8009c62 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	681a      	ldr	r2, [r3, #0]
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	f022 0201 	bic.w	r2, r2, #1
 8009b5e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2220      	movs	r2, #32
 8009b64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009b6e:	687a      	ldr	r2, [r7, #4]
 8009b70:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8009b72:	4610      	mov	r0, r2
 8009b74:	4798      	blx	r3
 8009b76:	e074      	b.n	8009c62 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b7c:	4a59      	ldr	r2, [pc, #356]	@ (8009ce4 <I2C_ITError+0x25c>)
 8009b7e:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b84:	4618      	mov	r0, r3
 8009b86:	f7fc fe91 	bl	80068ac <HAL_DMA_Abort_IT>
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d068      	beq.n	8009c62 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	695b      	ldr	r3, [r3, #20]
 8009b96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b9a:	2b40      	cmp	r3, #64	@ 0x40
 8009b9c:	d10b      	bne.n	8009bb6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	691a      	ldr	r2, [r3, #16]
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ba8:	b2d2      	uxtb	r2, r2
 8009baa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bb0:	1c5a      	adds	r2, r3, #1
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	681a      	ldr	r2, [r3, #0]
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	f022 0201 	bic.w	r2, r2, #1
 8009bc4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	2220      	movs	r2, #32
 8009bca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009bd4:	687a      	ldr	r2, [r7, #4]
 8009bd6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8009bd8:	4610      	mov	r0, r2
 8009bda:	4798      	blx	r3
 8009bdc:	e041      	b.n	8009c62 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009be4:	b2db      	uxtb	r3, r3
 8009be6:	2b60      	cmp	r3, #96	@ 0x60
 8009be8:	d125      	bne.n	8009c36 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	2220      	movs	r2, #32
 8009bee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	695b      	ldr	r3, [r3, #20]
 8009bfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c02:	2b40      	cmp	r3, #64	@ 0x40
 8009c04:	d10b      	bne.n	8009c1e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	691a      	ldr	r2, [r3, #16]
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c10:	b2d2      	uxtb	r2, r2
 8009c12:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c18:	1c5a      	adds	r2, r3, #1
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	681a      	ldr	r2, [r3, #0]
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	f022 0201 	bic.w	r2, r2, #1
 8009c2c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8009c2e:	6878      	ldr	r0, [r7, #4]
 8009c30:	f7fe fecc 	bl	80089cc <HAL_I2C_AbortCpltCallback>
 8009c34:	e015      	b.n	8009c62 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	695b      	ldr	r3, [r3, #20]
 8009c3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c40:	2b40      	cmp	r3, #64	@ 0x40
 8009c42:	d10b      	bne.n	8009c5c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	691a      	ldr	r2, [r3, #16]
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c4e:	b2d2      	uxtb	r2, r2
 8009c50:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c56:	1c5a      	adds	r2, r3, #1
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8009c5c:	6878      	ldr	r0, [r7, #4]
 8009c5e:	f7fe feab 	bl	80089b8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c66:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8009c68:	68bb      	ldr	r3, [r7, #8]
 8009c6a:	f003 0301 	and.w	r3, r3, #1
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d10e      	bne.n	8009c90 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8009c72:	68bb      	ldr	r3, [r7, #8]
 8009c74:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d109      	bne.n	8009c90 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8009c7c:	68bb      	ldr	r3, [r7, #8]
 8009c7e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d104      	bne.n	8009c90 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8009c86:	68bb      	ldr	r3, [r7, #8]
 8009c88:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d007      	beq.n	8009ca0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	685a      	ldr	r2, [r3, #4]
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8009c9e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009ca6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009cac:	f003 0304 	and.w	r3, r3, #4
 8009cb0:	2b04      	cmp	r3, #4
 8009cb2:	d113      	bne.n	8009cdc <I2C_ITError+0x254>
 8009cb4:	7bfb      	ldrb	r3, [r7, #15]
 8009cb6:	2b28      	cmp	r3, #40	@ 0x28
 8009cb8:	d110      	bne.n	8009cdc <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	4a0a      	ldr	r2, [pc, #40]	@ (8009ce8 <I2C_ITError+0x260>)
 8009cbe:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	2220      	movs	r2, #32
 8009cca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8009cd6:	6878      	ldr	r0, [r7, #4]
 8009cd8:	f7fe fe64 	bl	80089a4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009cdc:	bf00      	nop
 8009cde:	3710      	adds	r7, #16
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	bd80      	pop	{r7, pc}
 8009ce4:	0800a325 	.word	0x0800a325
 8009ce8:	ffff0000 	.word	0xffff0000

08009cec <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b088      	sub	sp, #32
 8009cf0:	af02      	add	r7, sp, #8
 8009cf2:	60f8      	str	r0, [r7, #12]
 8009cf4:	607a      	str	r2, [r7, #4]
 8009cf6:	603b      	str	r3, [r7, #0]
 8009cf8:	460b      	mov	r3, r1
 8009cfa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d00:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8009d02:	697b      	ldr	r3, [r7, #20]
 8009d04:	2b08      	cmp	r3, #8
 8009d06:	d006      	beq.n	8009d16 <I2C_MasterRequestWrite+0x2a>
 8009d08:	697b      	ldr	r3, [r7, #20]
 8009d0a:	2b01      	cmp	r3, #1
 8009d0c:	d003      	beq.n	8009d16 <I2C_MasterRequestWrite+0x2a>
 8009d0e:	697b      	ldr	r3, [r7, #20]
 8009d10:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009d14:	d108      	bne.n	8009d28 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	681a      	ldr	r2, [r3, #0]
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009d24:	601a      	str	r2, [r3, #0]
 8009d26:	e00b      	b.n	8009d40 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d2c:	2b12      	cmp	r3, #18
 8009d2e:	d107      	bne.n	8009d40 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	681a      	ldr	r2, [r3, #0]
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009d3e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	9300      	str	r3, [sp, #0]
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	2200      	movs	r2, #0
 8009d48:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009d4c:	68f8      	ldr	r0, [r7, #12]
 8009d4e:	f000 fb91 	bl	800a474 <I2C_WaitOnFlagUntilTimeout>
 8009d52:	4603      	mov	r3, r0
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d00d      	beq.n	8009d74 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009d62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009d66:	d103      	bne.n	8009d70 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009d6e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8009d70:	2303      	movs	r3, #3
 8009d72:	e035      	b.n	8009de0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	691b      	ldr	r3, [r3, #16]
 8009d78:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009d7c:	d108      	bne.n	8009d90 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009d7e:	897b      	ldrh	r3, [r7, #10]
 8009d80:	b2db      	uxtb	r3, r3
 8009d82:	461a      	mov	r2, r3
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8009d8c:	611a      	str	r2, [r3, #16]
 8009d8e:	e01b      	b.n	8009dc8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009d90:	897b      	ldrh	r3, [r7, #10]
 8009d92:	11db      	asrs	r3, r3, #7
 8009d94:	b2db      	uxtb	r3, r3
 8009d96:	f003 0306 	and.w	r3, r3, #6
 8009d9a:	b2db      	uxtb	r3, r3
 8009d9c:	f063 030f 	orn	r3, r3, #15
 8009da0:	b2da      	uxtb	r2, r3
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009da8:	683b      	ldr	r3, [r7, #0]
 8009daa:	687a      	ldr	r2, [r7, #4]
 8009dac:	490e      	ldr	r1, [pc, #56]	@ (8009de8 <I2C_MasterRequestWrite+0xfc>)
 8009dae:	68f8      	ldr	r0, [r7, #12]
 8009db0:	f000 fbda 	bl	800a568 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009db4:	4603      	mov	r3, r0
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d001      	beq.n	8009dbe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8009dba:	2301      	movs	r3, #1
 8009dbc:	e010      	b.n	8009de0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009dbe:	897b      	ldrh	r3, [r7, #10]
 8009dc0:	b2da      	uxtb	r2, r3
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	687a      	ldr	r2, [r7, #4]
 8009dcc:	4907      	ldr	r1, [pc, #28]	@ (8009dec <I2C_MasterRequestWrite+0x100>)
 8009dce:	68f8      	ldr	r0, [r7, #12]
 8009dd0:	f000 fbca 	bl	800a568 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009dd4:	4603      	mov	r3, r0
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d001      	beq.n	8009dde <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8009dda:	2301      	movs	r3, #1
 8009ddc:	e000      	b.n	8009de0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8009dde:	2300      	movs	r3, #0
}
 8009de0:	4618      	mov	r0, r3
 8009de2:	3718      	adds	r7, #24
 8009de4:	46bd      	mov	sp, r7
 8009de6:	bd80      	pop	{r7, pc}
 8009de8:	00010008 	.word	0x00010008
 8009dec:	00010002 	.word	0x00010002

08009df0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b088      	sub	sp, #32
 8009df4:	af02      	add	r7, sp, #8
 8009df6:	60f8      	str	r0, [r7, #12]
 8009df8:	4608      	mov	r0, r1
 8009dfa:	4611      	mov	r1, r2
 8009dfc:	461a      	mov	r2, r3
 8009dfe:	4603      	mov	r3, r0
 8009e00:	817b      	strh	r3, [r7, #10]
 8009e02:	460b      	mov	r3, r1
 8009e04:	813b      	strh	r3, [r7, #8]
 8009e06:	4613      	mov	r3, r2
 8009e08:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	681a      	ldr	r2, [r3, #0]
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009e18:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e1c:	9300      	str	r3, [sp, #0]
 8009e1e:	6a3b      	ldr	r3, [r7, #32]
 8009e20:	2200      	movs	r2, #0
 8009e22:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009e26:	68f8      	ldr	r0, [r7, #12]
 8009e28:	f000 fb24 	bl	800a474 <I2C_WaitOnFlagUntilTimeout>
 8009e2c:	4603      	mov	r3, r0
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d00d      	beq.n	8009e4e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009e3c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009e40:	d103      	bne.n	8009e4a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009e48:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8009e4a:	2303      	movs	r3, #3
 8009e4c:	e05f      	b.n	8009f0e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009e4e:	897b      	ldrh	r3, [r7, #10]
 8009e50:	b2db      	uxtb	r3, r3
 8009e52:	461a      	mov	r2, r3
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8009e5c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e60:	6a3a      	ldr	r2, [r7, #32]
 8009e62:	492d      	ldr	r1, [pc, #180]	@ (8009f18 <I2C_RequestMemoryWrite+0x128>)
 8009e64:	68f8      	ldr	r0, [r7, #12]
 8009e66:	f000 fb7f 	bl	800a568 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009e6a:	4603      	mov	r3, r0
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d001      	beq.n	8009e74 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8009e70:	2301      	movs	r3, #1
 8009e72:	e04c      	b.n	8009f0e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009e74:	2300      	movs	r3, #0
 8009e76:	617b      	str	r3, [r7, #20]
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	695b      	ldr	r3, [r3, #20]
 8009e7e:	617b      	str	r3, [r7, #20]
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	699b      	ldr	r3, [r3, #24]
 8009e86:	617b      	str	r3, [r7, #20]
 8009e88:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009e8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009e8c:	6a39      	ldr	r1, [r7, #32]
 8009e8e:	68f8      	ldr	r0, [r7, #12]
 8009e90:	f000 fc0a 	bl	800a6a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8009e94:	4603      	mov	r3, r0
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d00d      	beq.n	8009eb6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e9e:	2b04      	cmp	r3, #4
 8009ea0:	d107      	bne.n	8009eb2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	681a      	ldr	r2, [r3, #0]
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009eb0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009eb2:	2301      	movs	r3, #1
 8009eb4:	e02b      	b.n	8009f0e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009eb6:	88fb      	ldrh	r3, [r7, #6]
 8009eb8:	2b01      	cmp	r3, #1
 8009eba:	d105      	bne.n	8009ec8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009ebc:	893b      	ldrh	r3, [r7, #8]
 8009ebe:	b2da      	uxtb	r2, r3
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	611a      	str	r2, [r3, #16]
 8009ec6:	e021      	b.n	8009f0c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009ec8:	893b      	ldrh	r3, [r7, #8]
 8009eca:	0a1b      	lsrs	r3, r3, #8
 8009ecc:	b29b      	uxth	r3, r3
 8009ece:	b2da      	uxtb	r2, r3
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009ed6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009ed8:	6a39      	ldr	r1, [r7, #32]
 8009eda:	68f8      	ldr	r0, [r7, #12]
 8009edc:	f000 fbe4 	bl	800a6a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8009ee0:	4603      	mov	r3, r0
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d00d      	beq.n	8009f02 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009eea:	2b04      	cmp	r3, #4
 8009eec:	d107      	bne.n	8009efe <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	681a      	ldr	r2, [r3, #0]
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009efc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009efe:	2301      	movs	r3, #1
 8009f00:	e005      	b.n	8009f0e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009f02:	893b      	ldrh	r3, [r7, #8]
 8009f04:	b2da      	uxtb	r2, r3
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8009f0c:	2300      	movs	r3, #0
}
 8009f0e:	4618      	mov	r0, r3
 8009f10:	3718      	adds	r7, #24
 8009f12:	46bd      	mov	sp, r7
 8009f14:	bd80      	pop	{r7, pc}
 8009f16:	bf00      	nop
 8009f18:	00010002 	.word	0x00010002

08009f1c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b088      	sub	sp, #32
 8009f20:	af02      	add	r7, sp, #8
 8009f22:	60f8      	str	r0, [r7, #12]
 8009f24:	4608      	mov	r0, r1
 8009f26:	4611      	mov	r1, r2
 8009f28:	461a      	mov	r2, r3
 8009f2a:	4603      	mov	r3, r0
 8009f2c:	817b      	strh	r3, [r7, #10]
 8009f2e:	460b      	mov	r3, r1
 8009f30:	813b      	strh	r3, [r7, #8]
 8009f32:	4613      	mov	r3, r2
 8009f34:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	681a      	ldr	r2, [r3, #0]
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009f44:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	681a      	ldr	r2, [r3, #0]
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009f54:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f58:	9300      	str	r3, [sp, #0]
 8009f5a:	6a3b      	ldr	r3, [r7, #32]
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009f62:	68f8      	ldr	r0, [r7, #12]
 8009f64:	f000 fa86 	bl	800a474 <I2C_WaitOnFlagUntilTimeout>
 8009f68:	4603      	mov	r3, r0
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d00d      	beq.n	8009f8a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009f78:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009f7c:	d103      	bne.n	8009f86 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009f84:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8009f86:	2303      	movs	r3, #3
 8009f88:	e0aa      	b.n	800a0e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009f8a:	897b      	ldrh	r3, [r7, #10]
 8009f8c:	b2db      	uxtb	r3, r3
 8009f8e:	461a      	mov	r2, r3
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8009f98:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f9c:	6a3a      	ldr	r2, [r7, #32]
 8009f9e:	4952      	ldr	r1, [pc, #328]	@ (800a0e8 <I2C_RequestMemoryRead+0x1cc>)
 8009fa0:	68f8      	ldr	r0, [r7, #12]
 8009fa2:	f000 fae1 	bl	800a568 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009fa6:	4603      	mov	r3, r0
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d001      	beq.n	8009fb0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8009fac:	2301      	movs	r3, #1
 8009fae:	e097      	b.n	800a0e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	617b      	str	r3, [r7, #20]
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	695b      	ldr	r3, [r3, #20]
 8009fba:	617b      	str	r3, [r7, #20]
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	699b      	ldr	r3, [r3, #24]
 8009fc2:	617b      	str	r3, [r7, #20]
 8009fc4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009fc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009fc8:	6a39      	ldr	r1, [r7, #32]
 8009fca:	68f8      	ldr	r0, [r7, #12]
 8009fcc:	f000 fb6c 	bl	800a6a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8009fd0:	4603      	mov	r3, r0
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d00d      	beq.n	8009ff2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009fda:	2b04      	cmp	r3, #4
 8009fdc:	d107      	bne.n	8009fee <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	681a      	ldr	r2, [r3, #0]
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009fec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009fee:	2301      	movs	r3, #1
 8009ff0:	e076      	b.n	800a0e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009ff2:	88fb      	ldrh	r3, [r7, #6]
 8009ff4:	2b01      	cmp	r3, #1
 8009ff6:	d105      	bne.n	800a004 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009ff8:	893b      	ldrh	r3, [r7, #8]
 8009ffa:	b2da      	uxtb	r2, r3
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	611a      	str	r2, [r3, #16]
 800a002:	e021      	b.n	800a048 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a004:	893b      	ldrh	r3, [r7, #8]
 800a006:	0a1b      	lsrs	r3, r3, #8
 800a008:	b29b      	uxth	r3, r3
 800a00a:	b2da      	uxtb	r2, r3
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a012:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a014:	6a39      	ldr	r1, [r7, #32]
 800a016:	68f8      	ldr	r0, [r7, #12]
 800a018:	f000 fb46 	bl	800a6a8 <I2C_WaitOnTXEFlagUntilTimeout>
 800a01c:	4603      	mov	r3, r0
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d00d      	beq.n	800a03e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a026:	2b04      	cmp	r3, #4
 800a028:	d107      	bne.n	800a03a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	681a      	ldr	r2, [r3, #0]
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a038:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a03a:	2301      	movs	r3, #1
 800a03c:	e050      	b.n	800a0e0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a03e:	893b      	ldrh	r3, [r7, #8]
 800a040:	b2da      	uxtb	r2, r3
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a048:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a04a:	6a39      	ldr	r1, [r7, #32]
 800a04c:	68f8      	ldr	r0, [r7, #12]
 800a04e:	f000 fb2b 	bl	800a6a8 <I2C_WaitOnTXEFlagUntilTimeout>
 800a052:	4603      	mov	r3, r0
 800a054:	2b00      	cmp	r3, #0
 800a056:	d00d      	beq.n	800a074 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a05c:	2b04      	cmp	r3, #4
 800a05e:	d107      	bne.n	800a070 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	681a      	ldr	r2, [r3, #0]
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a06e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a070:	2301      	movs	r3, #1
 800a072:	e035      	b.n	800a0e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	681a      	ldr	r2, [r3, #0]
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a082:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a086:	9300      	str	r3, [sp, #0]
 800a088:	6a3b      	ldr	r3, [r7, #32]
 800a08a:	2200      	movs	r2, #0
 800a08c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800a090:	68f8      	ldr	r0, [r7, #12]
 800a092:	f000 f9ef 	bl	800a474 <I2C_WaitOnFlagUntilTimeout>
 800a096:	4603      	mov	r3, r0
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d00d      	beq.n	800a0b8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a0a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a0aa:	d103      	bne.n	800a0b4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a0b2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800a0b4:	2303      	movs	r3, #3
 800a0b6:	e013      	b.n	800a0e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a0b8:	897b      	ldrh	r3, [r7, #10]
 800a0ba:	b2db      	uxtb	r3, r3
 800a0bc:	f043 0301 	orr.w	r3, r3, #1
 800a0c0:	b2da      	uxtb	r2, r3
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a0c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0ca:	6a3a      	ldr	r2, [r7, #32]
 800a0cc:	4906      	ldr	r1, [pc, #24]	@ (800a0e8 <I2C_RequestMemoryRead+0x1cc>)
 800a0ce:	68f8      	ldr	r0, [r7, #12]
 800a0d0:	f000 fa4a 	bl	800a568 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a0d4:	4603      	mov	r3, r0
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d001      	beq.n	800a0de <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800a0da:	2301      	movs	r3, #1
 800a0dc:	e000      	b.n	800a0e0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800a0de:	2300      	movs	r3, #0
}
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	3718      	adds	r7, #24
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	bd80      	pop	{r7, pc}
 800a0e8:	00010002 	.word	0x00010002

0800a0ec <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b086      	sub	sp, #24
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0f8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a0fa:	697b      	ldr	r3, [r7, #20]
 800a0fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a100:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800a102:	697b      	ldr	r3, [r7, #20]
 800a104:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a108:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800a10a:	697b      	ldr	r3, [r7, #20]
 800a10c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a10e:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800a110:	697b      	ldr	r3, [r7, #20]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	685a      	ldr	r2, [r3, #4]
 800a116:	697b      	ldr	r3, [r7, #20]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800a11e:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800a120:	697b      	ldr	r3, [r7, #20]
 800a122:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a124:	2b00      	cmp	r3, #0
 800a126:	d003      	beq.n	800a130 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800a128:	697b      	ldr	r3, [r7, #20]
 800a12a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a12c:	2200      	movs	r2, #0
 800a12e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800a130:	697b      	ldr	r3, [r7, #20]
 800a132:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a134:	2b00      	cmp	r3, #0
 800a136:	d003      	beq.n	800a140 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800a138:	697b      	ldr	r3, [r7, #20]
 800a13a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a13c:	2200      	movs	r2, #0
 800a13e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 800a140:	7cfb      	ldrb	r3, [r7, #19]
 800a142:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 800a146:	2b21      	cmp	r3, #33	@ 0x21
 800a148:	d007      	beq.n	800a15a <I2C_DMAXferCplt+0x6e>
 800a14a:	7cfb      	ldrb	r3, [r7, #19]
 800a14c:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 800a150:	2b22      	cmp	r3, #34	@ 0x22
 800a152:	d131      	bne.n	800a1b8 <I2C_DMAXferCplt+0xcc>
 800a154:	7cbb      	ldrb	r3, [r7, #18]
 800a156:	2b20      	cmp	r3, #32
 800a158:	d12e      	bne.n	800a1b8 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800a15a:	697b      	ldr	r3, [r7, #20]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	685a      	ldr	r2, [r3, #4]
 800a160:	697b      	ldr	r3, [r7, #20]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a168:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 800a16a:	697b      	ldr	r3, [r7, #20]
 800a16c:	2200      	movs	r2, #0
 800a16e:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800a170:	7cfb      	ldrb	r3, [r7, #19]
 800a172:	2b29      	cmp	r3, #41	@ 0x29
 800a174:	d10a      	bne.n	800a18c <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800a176:	697b      	ldr	r3, [r7, #20]
 800a178:	2221      	movs	r2, #33	@ 0x21
 800a17a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800a17c:	697b      	ldr	r3, [r7, #20]
 800a17e:	2228      	movs	r2, #40	@ 0x28
 800a180:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800a184:	6978      	ldr	r0, [r7, #20]
 800a186:	f7fe fbeb 	bl	8008960 <HAL_I2C_SlaveTxCpltCallback>
 800a18a:	e00c      	b.n	800a1a6 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800a18c:	7cfb      	ldrb	r3, [r7, #19]
 800a18e:	2b2a      	cmp	r3, #42	@ 0x2a
 800a190:	d109      	bne.n	800a1a6 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800a192:	697b      	ldr	r3, [r7, #20]
 800a194:	2222      	movs	r2, #34	@ 0x22
 800a196:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800a198:	697b      	ldr	r3, [r7, #20]
 800a19a:	2228      	movs	r2, #40	@ 0x28
 800a19c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800a1a0:	6978      	ldr	r0, [r7, #20]
 800a1a2:	f7fe fbe7 	bl	8008974 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800a1a6:	697b      	ldr	r3, [r7, #20]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	685a      	ldr	r2, [r3, #4]
 800a1ac:	697b      	ldr	r3, [r7, #20]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800a1b4:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800a1b6:	e074      	b.n	800a2a2 <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 800a1b8:	697b      	ldr	r3, [r7, #20]
 800a1ba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a1be:	b2db      	uxtb	r3, r3
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d06e      	beq.n	800a2a2 <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 800a1c4:	697b      	ldr	r3, [r7, #20]
 800a1c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a1c8:	b29b      	uxth	r3, r3
 800a1ca:	2b01      	cmp	r3, #1
 800a1cc:	d107      	bne.n	800a1de <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a1ce:	697b      	ldr	r3, [r7, #20]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	681a      	ldr	r2, [r3, #0]
 800a1d4:	697b      	ldr	r3, [r7, #20]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a1dc:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800a1de:	697b      	ldr	r3, [r7, #20]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	685a      	ldr	r2, [r3, #4]
 800a1e4:	697b      	ldr	r3, [r7, #20]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800a1ec:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800a1f4:	d009      	beq.n	800a20a <I2C_DMAXferCplt+0x11e>
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	2b08      	cmp	r3, #8
 800a1fa:	d006      	beq.n	800a20a <I2C_DMAXferCplt+0x11e>
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800a202:	d002      	beq.n	800a20a <I2C_DMAXferCplt+0x11e>
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	2b20      	cmp	r3, #32
 800a208:	d107      	bne.n	800a21a <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a20a:	697b      	ldr	r3, [r7, #20]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	681a      	ldr	r2, [r3, #0]
 800a210:	697b      	ldr	r3, [r7, #20]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a218:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800a21a:	697b      	ldr	r3, [r7, #20]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	685a      	ldr	r2, [r3, #4]
 800a220:	697b      	ldr	r3, [r7, #20]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800a228:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800a22a:	697b      	ldr	r3, [r7, #20]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	685a      	ldr	r2, [r3, #4]
 800a230:	697b      	ldr	r3, [r7, #20]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a238:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 800a23a:	697b      	ldr	r3, [r7, #20]
 800a23c:	2200      	movs	r2, #0
 800a23e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800a240:	697b      	ldr	r3, [r7, #20]
 800a242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a244:	2b00      	cmp	r3, #0
 800a246:	d003      	beq.n	800a250 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 800a248:	6978      	ldr	r0, [r7, #20]
 800a24a:	f7fe fbb5 	bl	80089b8 <HAL_I2C_ErrorCallback>
}
 800a24e:	e028      	b.n	800a2a2 <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 800a250:	697b      	ldr	r3, [r7, #20]
 800a252:	2220      	movs	r2, #32
 800a254:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a258:	697b      	ldr	r3, [r7, #20]
 800a25a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a25e:	b2db      	uxtb	r3, r3
 800a260:	2b40      	cmp	r3, #64	@ 0x40
 800a262:	d10a      	bne.n	800a27a <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a264:	697b      	ldr	r3, [r7, #20]
 800a266:	2200      	movs	r2, #0
 800a268:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 800a26c:	697b      	ldr	r3, [r7, #20]
 800a26e:	2200      	movs	r2, #0
 800a270:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 800a272:	6978      	ldr	r0, [r7, #20]
 800a274:	f7fa fd44 	bl	8004d00 <HAL_I2C_MemRxCpltCallback>
}
 800a278:	e013      	b.n	800a2a2 <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a27a:	697b      	ldr	r3, [r7, #20]
 800a27c:	2200      	movs	r2, #0
 800a27e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	2b08      	cmp	r3, #8
 800a286:	d002      	beq.n	800a28e <I2C_DMAXferCplt+0x1a2>
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	2b20      	cmp	r3, #32
 800a28c:	d103      	bne.n	800a296 <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 800a28e:	697b      	ldr	r3, [r7, #20]
 800a290:	2200      	movs	r2, #0
 800a292:	631a      	str	r2, [r3, #48]	@ 0x30
 800a294:	e002      	b.n	800a29c <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800a296:	697b      	ldr	r3, [r7, #20]
 800a298:	2212      	movs	r2, #18
 800a29a:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 800a29c:	6978      	ldr	r0, [r7, #20]
 800a29e:	f7fe fb55 	bl	800894c <HAL_I2C_MasterRxCpltCallback>
}
 800a2a2:	bf00      	nop
 800a2a4:	3718      	adds	r7, #24
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	bd80      	pop	{r7, pc}

0800a2aa <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800a2aa:	b580      	push	{r7, lr}
 800a2ac:	b084      	sub	sp, #16
 800a2ae:	af00      	add	r7, sp, #0
 800a2b0:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2b6:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d003      	beq.n	800a2c8 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d003      	beq.n	800a2d8 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800a2d8:	6878      	ldr	r0, [r7, #4]
 800a2da:	f7fc fca1 	bl	8006c20 <HAL_DMA_GetError>
 800a2de:	4603      	mov	r3, r0
 800a2e0:	2b02      	cmp	r3, #2
 800a2e2:	d01b      	beq.n	800a31c <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	681a      	ldr	r2, [r3, #0]
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a2f2:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	2220      	movs	r2, #32
 800a2fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	2200      	movs	r2, #0
 800a306:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a30e:	f043 0210 	orr.w	r2, r3, #16
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800a316:	68f8      	ldr	r0, [r7, #12]
 800a318:	f7fe fb4e 	bl	80089b8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a31c:	bf00      	nop
 800a31e:	3710      	adds	r7, #16
 800a320:	46bd      	mov	sp, r7
 800a322:	bd80      	pop	{r7, pc}

0800a324 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800a324:	b580      	push	{r7, lr}
 800a326:	b086      	sub	sp, #24
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a32c:	2300      	movs	r3, #0
 800a32e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a334:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a336:	697b      	ldr	r3, [r7, #20]
 800a338:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a33c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800a33e:	4b4b      	ldr	r3, [pc, #300]	@ (800a46c <I2C_DMAAbort+0x148>)
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	08db      	lsrs	r3, r3, #3
 800a344:	4a4a      	ldr	r2, [pc, #296]	@ (800a470 <I2C_DMAAbort+0x14c>)
 800a346:	fba2 2303 	umull	r2, r3, r2, r3
 800a34a:	0a1a      	lsrs	r2, r3, #8
 800a34c:	4613      	mov	r3, r2
 800a34e:	009b      	lsls	r3, r3, #2
 800a350:	4413      	add	r3, r2
 800a352:	00da      	lsls	r2, r3, #3
 800a354:	1ad3      	subs	r3, r2, r3
 800a356:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d106      	bne.n	800a36c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a35e:	697b      	ldr	r3, [r7, #20]
 800a360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a362:	f043 0220 	orr.w	r2, r3, #32
 800a366:	697b      	ldr	r3, [r7, #20]
 800a368:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 800a36a:	e00a      	b.n	800a382 <I2C_DMAAbort+0x5e>
    }
    count--;
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	3b01      	subs	r3, #1
 800a370:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800a372:	697b      	ldr	r3, [r7, #20]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a37c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a380:	d0ea      	beq.n	800a358 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800a382:	697b      	ldr	r3, [r7, #20]
 800a384:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a386:	2b00      	cmp	r3, #0
 800a388:	d003      	beq.n	800a392 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800a38a:	697b      	ldr	r3, [r7, #20]
 800a38c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a38e:	2200      	movs	r2, #0
 800a390:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800a392:	697b      	ldr	r3, [r7, #20]
 800a394:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a396:	2b00      	cmp	r3, #0
 800a398:	d003      	beq.n	800a3a2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800a39a:	697b      	ldr	r3, [r7, #20]
 800a39c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a39e:	2200      	movs	r2, #0
 800a3a0:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a3a2:	697b      	ldr	r3, [r7, #20]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	681a      	ldr	r2, [r3, #0]
 800a3a8:	697b      	ldr	r3, [r7, #20]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a3b0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800a3b2:	697b      	ldr	r3, [r7, #20]
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800a3b8:	697b      	ldr	r3, [r7, #20]
 800a3ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d003      	beq.n	800a3c8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800a3c0:	697b      	ldr	r3, [r7, #20]
 800a3c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 800a3c8:	697b      	ldr	r3, [r7, #20]
 800a3ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d003      	beq.n	800a3d8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800a3d0:	697b      	ldr	r3, [r7, #20]
 800a3d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800a3d8:	697b      	ldr	r3, [r7, #20]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	681a      	ldr	r2, [r3, #0]
 800a3de:	697b      	ldr	r3, [r7, #20]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	f022 0201 	bic.w	r2, r2, #1
 800a3e6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800a3e8:	697b      	ldr	r3, [r7, #20]
 800a3ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a3ee:	b2db      	uxtb	r3, r3
 800a3f0:	2b60      	cmp	r3, #96	@ 0x60
 800a3f2:	d10e      	bne.n	800a412 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800a3f4:	697b      	ldr	r3, [r7, #20]
 800a3f6:	2220      	movs	r2, #32
 800a3f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a3fc:	697b      	ldr	r3, [r7, #20]
 800a3fe:	2200      	movs	r2, #0
 800a400:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800a404:	697b      	ldr	r3, [r7, #20]
 800a406:	2200      	movs	r2, #0
 800a408:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800a40a:	6978      	ldr	r0, [r7, #20]
 800a40c:	f7fe fade 	bl	80089cc <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a410:	e027      	b.n	800a462 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800a412:	7cfb      	ldrb	r3, [r7, #19]
 800a414:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800a418:	2b28      	cmp	r3, #40	@ 0x28
 800a41a:	d117      	bne.n	800a44c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800a41c:	697b      	ldr	r3, [r7, #20]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	681a      	ldr	r2, [r3, #0]
 800a422:	697b      	ldr	r3, [r7, #20]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	f042 0201 	orr.w	r2, r2, #1
 800a42a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a42c:	697b      	ldr	r3, [r7, #20]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	681a      	ldr	r2, [r3, #0]
 800a432:	697b      	ldr	r3, [r7, #20]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a43a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800a43c:	697b      	ldr	r3, [r7, #20]
 800a43e:	2200      	movs	r2, #0
 800a440:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800a442:	697b      	ldr	r3, [r7, #20]
 800a444:	2228      	movs	r2, #40	@ 0x28
 800a446:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800a44a:	e007      	b.n	800a45c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800a44c:	697b      	ldr	r3, [r7, #20]
 800a44e:	2220      	movs	r2, #32
 800a450:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a454:	697b      	ldr	r3, [r7, #20]
 800a456:	2200      	movs	r2, #0
 800a458:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800a45c:	6978      	ldr	r0, [r7, #20]
 800a45e:	f7fe faab 	bl	80089b8 <HAL_I2C_ErrorCallback>
}
 800a462:	bf00      	nop
 800a464:	3718      	adds	r7, #24
 800a466:	46bd      	mov	sp, r7
 800a468:	bd80      	pop	{r7, pc}
 800a46a:	bf00      	nop
 800a46c:	20000010 	.word	0x20000010
 800a470:	14f8b589 	.word	0x14f8b589

0800a474 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a474:	b580      	push	{r7, lr}
 800a476:	b084      	sub	sp, #16
 800a478:	af00      	add	r7, sp, #0
 800a47a:	60f8      	str	r0, [r7, #12]
 800a47c:	60b9      	str	r1, [r7, #8]
 800a47e:	603b      	str	r3, [r7, #0]
 800a480:	4613      	mov	r3, r2
 800a482:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a484:	e048      	b.n	800a518 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a486:	683b      	ldr	r3, [r7, #0]
 800a488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a48c:	d044      	beq.n	800a518 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a48e:	f7fb fa39 	bl	8005904 <HAL_GetTick>
 800a492:	4602      	mov	r2, r0
 800a494:	69bb      	ldr	r3, [r7, #24]
 800a496:	1ad3      	subs	r3, r2, r3
 800a498:	683a      	ldr	r2, [r7, #0]
 800a49a:	429a      	cmp	r2, r3
 800a49c:	d302      	bcc.n	800a4a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a49e:	683b      	ldr	r3, [r7, #0]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d139      	bne.n	800a518 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800a4a4:	68bb      	ldr	r3, [r7, #8]
 800a4a6:	0c1b      	lsrs	r3, r3, #16
 800a4a8:	b2db      	uxtb	r3, r3
 800a4aa:	2b01      	cmp	r3, #1
 800a4ac:	d10d      	bne.n	800a4ca <I2C_WaitOnFlagUntilTimeout+0x56>
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	695b      	ldr	r3, [r3, #20]
 800a4b4:	43da      	mvns	r2, r3
 800a4b6:	68bb      	ldr	r3, [r7, #8]
 800a4b8:	4013      	ands	r3, r2
 800a4ba:	b29b      	uxth	r3, r3
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	bf0c      	ite	eq
 800a4c0:	2301      	moveq	r3, #1
 800a4c2:	2300      	movne	r3, #0
 800a4c4:	b2db      	uxtb	r3, r3
 800a4c6:	461a      	mov	r2, r3
 800a4c8:	e00c      	b.n	800a4e4 <I2C_WaitOnFlagUntilTimeout+0x70>
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	699b      	ldr	r3, [r3, #24]
 800a4d0:	43da      	mvns	r2, r3
 800a4d2:	68bb      	ldr	r3, [r7, #8]
 800a4d4:	4013      	ands	r3, r2
 800a4d6:	b29b      	uxth	r3, r3
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	bf0c      	ite	eq
 800a4dc:	2301      	moveq	r3, #1
 800a4de:	2300      	movne	r3, #0
 800a4e0:	b2db      	uxtb	r3, r3
 800a4e2:	461a      	mov	r2, r3
 800a4e4:	79fb      	ldrb	r3, [r7, #7]
 800a4e6:	429a      	cmp	r2, r3
 800a4e8:	d116      	bne.n	800a518 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	2220      	movs	r2, #32
 800a4f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a504:	f043 0220 	orr.w	r2, r3, #32
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	2200      	movs	r2, #0
 800a510:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800a514:	2301      	movs	r3, #1
 800a516:	e023      	b.n	800a560 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a518:	68bb      	ldr	r3, [r7, #8]
 800a51a:	0c1b      	lsrs	r3, r3, #16
 800a51c:	b2db      	uxtb	r3, r3
 800a51e:	2b01      	cmp	r3, #1
 800a520:	d10d      	bne.n	800a53e <I2C_WaitOnFlagUntilTimeout+0xca>
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	695b      	ldr	r3, [r3, #20]
 800a528:	43da      	mvns	r2, r3
 800a52a:	68bb      	ldr	r3, [r7, #8]
 800a52c:	4013      	ands	r3, r2
 800a52e:	b29b      	uxth	r3, r3
 800a530:	2b00      	cmp	r3, #0
 800a532:	bf0c      	ite	eq
 800a534:	2301      	moveq	r3, #1
 800a536:	2300      	movne	r3, #0
 800a538:	b2db      	uxtb	r3, r3
 800a53a:	461a      	mov	r2, r3
 800a53c:	e00c      	b.n	800a558 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	699b      	ldr	r3, [r3, #24]
 800a544:	43da      	mvns	r2, r3
 800a546:	68bb      	ldr	r3, [r7, #8]
 800a548:	4013      	ands	r3, r2
 800a54a:	b29b      	uxth	r3, r3
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	bf0c      	ite	eq
 800a550:	2301      	moveq	r3, #1
 800a552:	2300      	movne	r3, #0
 800a554:	b2db      	uxtb	r3, r3
 800a556:	461a      	mov	r2, r3
 800a558:	79fb      	ldrb	r3, [r7, #7]
 800a55a:	429a      	cmp	r2, r3
 800a55c:	d093      	beq.n	800a486 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a55e:	2300      	movs	r3, #0
}
 800a560:	4618      	mov	r0, r3
 800a562:	3710      	adds	r7, #16
 800a564:	46bd      	mov	sp, r7
 800a566:	bd80      	pop	{r7, pc}

0800a568 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	b084      	sub	sp, #16
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	60f8      	str	r0, [r7, #12]
 800a570:	60b9      	str	r1, [r7, #8]
 800a572:	607a      	str	r2, [r7, #4]
 800a574:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a576:	e071      	b.n	800a65c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	695b      	ldr	r3, [r3, #20]
 800a57e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a582:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a586:	d123      	bne.n	800a5d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	681a      	ldr	r2, [r3, #0]
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a596:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800a5a0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	2220      	movs	r2, #32
 800a5ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5bc:	f043 0204 	orr.w	r2, r3, #4
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800a5cc:	2301      	movs	r3, #1
 800a5ce:	e067      	b.n	800a6a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5d6:	d041      	beq.n	800a65c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a5d8:	f7fb f994 	bl	8005904 <HAL_GetTick>
 800a5dc:	4602      	mov	r2, r0
 800a5de:	683b      	ldr	r3, [r7, #0]
 800a5e0:	1ad3      	subs	r3, r2, r3
 800a5e2:	687a      	ldr	r2, [r7, #4]
 800a5e4:	429a      	cmp	r2, r3
 800a5e6:	d302      	bcc.n	800a5ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d136      	bne.n	800a65c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800a5ee:	68bb      	ldr	r3, [r7, #8]
 800a5f0:	0c1b      	lsrs	r3, r3, #16
 800a5f2:	b2db      	uxtb	r3, r3
 800a5f4:	2b01      	cmp	r3, #1
 800a5f6:	d10c      	bne.n	800a612 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	695b      	ldr	r3, [r3, #20]
 800a5fe:	43da      	mvns	r2, r3
 800a600:	68bb      	ldr	r3, [r7, #8]
 800a602:	4013      	ands	r3, r2
 800a604:	b29b      	uxth	r3, r3
 800a606:	2b00      	cmp	r3, #0
 800a608:	bf14      	ite	ne
 800a60a:	2301      	movne	r3, #1
 800a60c:	2300      	moveq	r3, #0
 800a60e:	b2db      	uxtb	r3, r3
 800a610:	e00b      	b.n	800a62a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	699b      	ldr	r3, [r3, #24]
 800a618:	43da      	mvns	r2, r3
 800a61a:	68bb      	ldr	r3, [r7, #8]
 800a61c:	4013      	ands	r3, r2
 800a61e:	b29b      	uxth	r3, r3
 800a620:	2b00      	cmp	r3, #0
 800a622:	bf14      	ite	ne
 800a624:	2301      	movne	r3, #1
 800a626:	2300      	moveq	r3, #0
 800a628:	b2db      	uxtb	r3, r3
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d016      	beq.n	800a65c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	2200      	movs	r2, #0
 800a632:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	2220      	movs	r2, #32
 800a638:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	2200      	movs	r2, #0
 800a640:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a648:	f043 0220 	orr.w	r2, r3, #32
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	2200      	movs	r2, #0
 800a654:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800a658:	2301      	movs	r3, #1
 800a65a:	e021      	b.n	800a6a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a65c:	68bb      	ldr	r3, [r7, #8]
 800a65e:	0c1b      	lsrs	r3, r3, #16
 800a660:	b2db      	uxtb	r3, r3
 800a662:	2b01      	cmp	r3, #1
 800a664:	d10c      	bne.n	800a680 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	695b      	ldr	r3, [r3, #20]
 800a66c:	43da      	mvns	r2, r3
 800a66e:	68bb      	ldr	r3, [r7, #8]
 800a670:	4013      	ands	r3, r2
 800a672:	b29b      	uxth	r3, r3
 800a674:	2b00      	cmp	r3, #0
 800a676:	bf14      	ite	ne
 800a678:	2301      	movne	r3, #1
 800a67a:	2300      	moveq	r3, #0
 800a67c:	b2db      	uxtb	r3, r3
 800a67e:	e00b      	b.n	800a698 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	699b      	ldr	r3, [r3, #24]
 800a686:	43da      	mvns	r2, r3
 800a688:	68bb      	ldr	r3, [r7, #8]
 800a68a:	4013      	ands	r3, r2
 800a68c:	b29b      	uxth	r3, r3
 800a68e:	2b00      	cmp	r3, #0
 800a690:	bf14      	ite	ne
 800a692:	2301      	movne	r3, #1
 800a694:	2300      	moveq	r3, #0
 800a696:	b2db      	uxtb	r3, r3
 800a698:	2b00      	cmp	r3, #0
 800a69a:	f47f af6d 	bne.w	800a578 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800a69e:	2300      	movs	r3, #0
}
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	3710      	adds	r7, #16
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	bd80      	pop	{r7, pc}

0800a6a8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b084      	sub	sp, #16
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	60f8      	str	r0, [r7, #12]
 800a6b0:	60b9      	str	r1, [r7, #8]
 800a6b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a6b4:	e034      	b.n	800a720 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a6b6:	68f8      	ldr	r0, [r7, #12]
 800a6b8:	f000 f915 	bl	800a8e6 <I2C_IsAcknowledgeFailed>
 800a6bc:	4603      	mov	r3, r0
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d001      	beq.n	800a6c6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a6c2:	2301      	movs	r3, #1
 800a6c4:	e034      	b.n	800a730 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a6c6:	68bb      	ldr	r3, [r7, #8]
 800a6c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6cc:	d028      	beq.n	800a720 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a6ce:	f7fb f919 	bl	8005904 <HAL_GetTick>
 800a6d2:	4602      	mov	r2, r0
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	1ad3      	subs	r3, r2, r3
 800a6d8:	68ba      	ldr	r2, [r7, #8]
 800a6da:	429a      	cmp	r2, r3
 800a6dc:	d302      	bcc.n	800a6e4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800a6de:	68bb      	ldr	r3, [r7, #8]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d11d      	bne.n	800a720 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	695b      	ldr	r3, [r3, #20]
 800a6ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a6ee:	2b80      	cmp	r3, #128	@ 0x80
 800a6f0:	d016      	beq.n	800a720 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	2220      	movs	r2, #32
 800a6fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	2200      	movs	r2, #0
 800a704:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a70c:	f043 0220 	orr.w	r2, r3, #32
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	2200      	movs	r2, #0
 800a718:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800a71c:	2301      	movs	r3, #1
 800a71e:	e007      	b.n	800a730 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	695b      	ldr	r3, [r3, #20]
 800a726:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a72a:	2b80      	cmp	r3, #128	@ 0x80
 800a72c:	d1c3      	bne.n	800a6b6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a72e:	2300      	movs	r3, #0
}
 800a730:	4618      	mov	r0, r3
 800a732:	3710      	adds	r7, #16
 800a734:	46bd      	mov	sp, r7
 800a736:	bd80      	pop	{r7, pc}

0800a738 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a738:	b580      	push	{r7, lr}
 800a73a:	b084      	sub	sp, #16
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	60f8      	str	r0, [r7, #12]
 800a740:	60b9      	str	r1, [r7, #8]
 800a742:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a744:	e034      	b.n	800a7b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a746:	68f8      	ldr	r0, [r7, #12]
 800a748:	f000 f8cd 	bl	800a8e6 <I2C_IsAcknowledgeFailed>
 800a74c:	4603      	mov	r3, r0
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d001      	beq.n	800a756 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a752:	2301      	movs	r3, #1
 800a754:	e034      	b.n	800a7c0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a756:	68bb      	ldr	r3, [r7, #8]
 800a758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a75c:	d028      	beq.n	800a7b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a75e:	f7fb f8d1 	bl	8005904 <HAL_GetTick>
 800a762:	4602      	mov	r2, r0
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	1ad3      	subs	r3, r2, r3
 800a768:	68ba      	ldr	r2, [r7, #8]
 800a76a:	429a      	cmp	r2, r3
 800a76c:	d302      	bcc.n	800a774 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a76e:	68bb      	ldr	r3, [r7, #8]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d11d      	bne.n	800a7b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	695b      	ldr	r3, [r3, #20]
 800a77a:	f003 0304 	and.w	r3, r3, #4
 800a77e:	2b04      	cmp	r3, #4
 800a780:	d016      	beq.n	800a7b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	2200      	movs	r2, #0
 800a786:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	2220      	movs	r2, #32
 800a78c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	2200      	movs	r2, #0
 800a794:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a79c:	f043 0220 	orr.w	r2, r3, #32
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800a7ac:	2301      	movs	r3, #1
 800a7ae:	e007      	b.n	800a7c0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	695b      	ldr	r3, [r3, #20]
 800a7b6:	f003 0304 	and.w	r3, r3, #4
 800a7ba:	2b04      	cmp	r3, #4
 800a7bc:	d1c3      	bne.n	800a746 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a7be:	2300      	movs	r3, #0
}
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	3710      	adds	r7, #16
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	bd80      	pop	{r7, pc}

0800a7c8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800a7c8:	b480      	push	{r7}
 800a7ca:	b085      	sub	sp, #20
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800a7d4:	4b13      	ldr	r3, [pc, #76]	@ (800a824 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	08db      	lsrs	r3, r3, #3
 800a7da:	4a13      	ldr	r2, [pc, #76]	@ (800a828 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800a7dc:	fba2 2303 	umull	r2, r3, r2, r3
 800a7e0:	0a1a      	lsrs	r2, r3, #8
 800a7e2:	4613      	mov	r3, r2
 800a7e4:	009b      	lsls	r3, r3, #2
 800a7e6:	4413      	add	r3, r2
 800a7e8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	3b01      	subs	r3, #1
 800a7ee:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d107      	bne.n	800a806 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7fa:	f043 0220 	orr.w	r2, r3, #32
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800a802:	2301      	movs	r3, #1
 800a804:	e008      	b.n	800a818 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a810:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a814:	d0e9      	beq.n	800a7ea <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800a816:	2300      	movs	r3, #0
}
 800a818:	4618      	mov	r0, r3
 800a81a:	3714      	adds	r7, #20
 800a81c:	46bd      	mov	sp, r7
 800a81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a822:	4770      	bx	lr
 800a824:	20000010 	.word	0x20000010
 800a828:	14f8b589 	.word	0x14f8b589

0800a82c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b084      	sub	sp, #16
 800a830:	af00      	add	r7, sp, #0
 800a832:	60f8      	str	r0, [r7, #12]
 800a834:	60b9      	str	r1, [r7, #8]
 800a836:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a838:	e049      	b.n	800a8ce <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	695b      	ldr	r3, [r3, #20]
 800a840:	f003 0310 	and.w	r3, r3, #16
 800a844:	2b10      	cmp	r3, #16
 800a846:	d119      	bne.n	800a87c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	f06f 0210 	mvn.w	r2, #16
 800a850:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	2200      	movs	r2, #0
 800a856:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	2220      	movs	r2, #32
 800a85c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	2200      	movs	r2, #0
 800a864:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	2200      	movs	r2, #0
 800a874:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800a878:	2301      	movs	r3, #1
 800a87a:	e030      	b.n	800a8de <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a87c:	f7fb f842 	bl	8005904 <HAL_GetTick>
 800a880:	4602      	mov	r2, r0
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	1ad3      	subs	r3, r2, r3
 800a886:	68ba      	ldr	r2, [r7, #8]
 800a888:	429a      	cmp	r2, r3
 800a88a:	d302      	bcc.n	800a892 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800a88c:	68bb      	ldr	r3, [r7, #8]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d11d      	bne.n	800a8ce <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	695b      	ldr	r3, [r3, #20]
 800a898:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a89c:	2b40      	cmp	r3, #64	@ 0x40
 800a89e:	d016      	beq.n	800a8ce <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	2220      	movs	r2, #32
 800a8aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	2200      	movs	r2, #0
 800a8b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8ba:	f043 0220 	orr.w	r2, r3, #32
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800a8ca:	2301      	movs	r3, #1
 800a8cc:	e007      	b.n	800a8de <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	695b      	ldr	r3, [r3, #20]
 800a8d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a8d8:	2b40      	cmp	r3, #64	@ 0x40
 800a8da:	d1ae      	bne.n	800a83a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a8dc:	2300      	movs	r3, #0
}
 800a8de:	4618      	mov	r0, r3
 800a8e0:	3710      	adds	r7, #16
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	bd80      	pop	{r7, pc}

0800a8e6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a8e6:	b480      	push	{r7}
 800a8e8:	b083      	sub	sp, #12
 800a8ea:	af00      	add	r7, sp, #0
 800a8ec:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	695b      	ldr	r3, [r3, #20]
 800a8f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a8f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a8fc:	d11b      	bne.n	800a936 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800a906:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	2200      	movs	r2, #0
 800a90c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	2220      	movs	r2, #32
 800a912:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	2200      	movs	r2, #0
 800a91a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a922:	f043 0204 	orr.w	r2, r3, #4
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	2200      	movs	r2, #0
 800a92e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800a932:	2301      	movs	r3, #1
 800a934:	e000      	b.n	800a938 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a936:	2300      	movs	r3, #0
}
 800a938:	4618      	mov	r0, r3
 800a93a:	370c      	adds	r7, #12
 800a93c:	46bd      	mov	sp, r7
 800a93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a942:	4770      	bx	lr

0800a944 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800a944:	b480      	push	{r7}
 800a946:	b083      	sub	sp, #12
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a950:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800a954:	d103      	bne.n	800a95e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	2201      	movs	r2, #1
 800a95a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800a95c:	e007      	b.n	800a96e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a962:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800a966:	d102      	bne.n	800a96e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	2208      	movs	r2, #8
 800a96c:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800a96e:	bf00      	nop
 800a970:	370c      	adds	r7, #12
 800a972:	46bd      	mov	sp, r7
 800a974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a978:	4770      	bx	lr

0800a97a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800a97a:	b580      	push	{r7, lr}
 800a97c:	b086      	sub	sp, #24
 800a97e:	af02      	add	r7, sp, #8
 800a980:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d101      	bne.n	800a98c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800a988:	2301      	movs	r3, #1
 800a98a:	e101      	b.n	800ab90 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800a998:	b2db      	uxtb	r3, r3
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d106      	bne.n	800a9ac <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800a9a6:	6878      	ldr	r0, [r7, #4]
 800a9a8:	f007 fb70 	bl	801208c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	2203      	movs	r2, #3
 800a9b0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800a9b4:	68bb      	ldr	r3, [r7, #8]
 800a9b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a9ba:	d102      	bne.n	800a9c2 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	2200      	movs	r2, #0
 800a9c0:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	f003 feeb 	bl	800e7a2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	6818      	ldr	r0, [r3, #0]
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	7c1a      	ldrb	r2, [r3, #16]
 800a9d4:	f88d 2000 	strb.w	r2, [sp]
 800a9d8:	3304      	adds	r3, #4
 800a9da:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a9dc:	f003 fdca 	bl	800e574 <USB_CoreInit>
 800a9e0:	4603      	mov	r3, r0
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d005      	beq.n	800a9f2 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	2202      	movs	r2, #2
 800a9ea:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800a9ee:	2301      	movs	r3, #1
 800a9f0:	e0ce      	b.n	800ab90 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	2100      	movs	r1, #0
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	f003 fee3 	bl	800e7c4 <USB_SetCurrentMode>
 800a9fe:	4603      	mov	r3, r0
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d005      	beq.n	800aa10 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	2202      	movs	r2, #2
 800aa08:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800aa0c:	2301      	movs	r3, #1
 800aa0e:	e0bf      	b.n	800ab90 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800aa10:	2300      	movs	r3, #0
 800aa12:	73fb      	strb	r3, [r7, #15]
 800aa14:	e04a      	b.n	800aaac <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800aa16:	7bfa      	ldrb	r2, [r7, #15]
 800aa18:	6879      	ldr	r1, [r7, #4]
 800aa1a:	4613      	mov	r3, r2
 800aa1c:	00db      	lsls	r3, r3, #3
 800aa1e:	4413      	add	r3, r2
 800aa20:	009b      	lsls	r3, r3, #2
 800aa22:	440b      	add	r3, r1
 800aa24:	3315      	adds	r3, #21
 800aa26:	2201      	movs	r2, #1
 800aa28:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800aa2a:	7bfa      	ldrb	r2, [r7, #15]
 800aa2c:	6879      	ldr	r1, [r7, #4]
 800aa2e:	4613      	mov	r3, r2
 800aa30:	00db      	lsls	r3, r3, #3
 800aa32:	4413      	add	r3, r2
 800aa34:	009b      	lsls	r3, r3, #2
 800aa36:	440b      	add	r3, r1
 800aa38:	3314      	adds	r3, #20
 800aa3a:	7bfa      	ldrb	r2, [r7, #15]
 800aa3c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800aa3e:	7bfa      	ldrb	r2, [r7, #15]
 800aa40:	7bfb      	ldrb	r3, [r7, #15]
 800aa42:	b298      	uxth	r0, r3
 800aa44:	6879      	ldr	r1, [r7, #4]
 800aa46:	4613      	mov	r3, r2
 800aa48:	00db      	lsls	r3, r3, #3
 800aa4a:	4413      	add	r3, r2
 800aa4c:	009b      	lsls	r3, r3, #2
 800aa4e:	440b      	add	r3, r1
 800aa50:	332e      	adds	r3, #46	@ 0x2e
 800aa52:	4602      	mov	r2, r0
 800aa54:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800aa56:	7bfa      	ldrb	r2, [r7, #15]
 800aa58:	6879      	ldr	r1, [r7, #4]
 800aa5a:	4613      	mov	r3, r2
 800aa5c:	00db      	lsls	r3, r3, #3
 800aa5e:	4413      	add	r3, r2
 800aa60:	009b      	lsls	r3, r3, #2
 800aa62:	440b      	add	r3, r1
 800aa64:	3318      	adds	r3, #24
 800aa66:	2200      	movs	r2, #0
 800aa68:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800aa6a:	7bfa      	ldrb	r2, [r7, #15]
 800aa6c:	6879      	ldr	r1, [r7, #4]
 800aa6e:	4613      	mov	r3, r2
 800aa70:	00db      	lsls	r3, r3, #3
 800aa72:	4413      	add	r3, r2
 800aa74:	009b      	lsls	r3, r3, #2
 800aa76:	440b      	add	r3, r1
 800aa78:	331c      	adds	r3, #28
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800aa7e:	7bfa      	ldrb	r2, [r7, #15]
 800aa80:	6879      	ldr	r1, [r7, #4]
 800aa82:	4613      	mov	r3, r2
 800aa84:	00db      	lsls	r3, r3, #3
 800aa86:	4413      	add	r3, r2
 800aa88:	009b      	lsls	r3, r3, #2
 800aa8a:	440b      	add	r3, r1
 800aa8c:	3320      	adds	r3, #32
 800aa8e:	2200      	movs	r2, #0
 800aa90:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800aa92:	7bfa      	ldrb	r2, [r7, #15]
 800aa94:	6879      	ldr	r1, [r7, #4]
 800aa96:	4613      	mov	r3, r2
 800aa98:	00db      	lsls	r3, r3, #3
 800aa9a:	4413      	add	r3, r2
 800aa9c:	009b      	lsls	r3, r3, #2
 800aa9e:	440b      	add	r3, r1
 800aaa0:	3324      	adds	r3, #36	@ 0x24
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800aaa6:	7bfb      	ldrb	r3, [r7, #15]
 800aaa8:	3301      	adds	r3, #1
 800aaaa:	73fb      	strb	r3, [r7, #15]
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	791b      	ldrb	r3, [r3, #4]
 800aab0:	7bfa      	ldrb	r2, [r7, #15]
 800aab2:	429a      	cmp	r2, r3
 800aab4:	d3af      	bcc.n	800aa16 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800aab6:	2300      	movs	r3, #0
 800aab8:	73fb      	strb	r3, [r7, #15]
 800aaba:	e044      	b.n	800ab46 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800aabc:	7bfa      	ldrb	r2, [r7, #15]
 800aabe:	6879      	ldr	r1, [r7, #4]
 800aac0:	4613      	mov	r3, r2
 800aac2:	00db      	lsls	r3, r3, #3
 800aac4:	4413      	add	r3, r2
 800aac6:	009b      	lsls	r3, r3, #2
 800aac8:	440b      	add	r3, r1
 800aaca:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800aace:	2200      	movs	r2, #0
 800aad0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800aad2:	7bfa      	ldrb	r2, [r7, #15]
 800aad4:	6879      	ldr	r1, [r7, #4]
 800aad6:	4613      	mov	r3, r2
 800aad8:	00db      	lsls	r3, r3, #3
 800aada:	4413      	add	r3, r2
 800aadc:	009b      	lsls	r3, r3, #2
 800aade:	440b      	add	r3, r1
 800aae0:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800aae4:	7bfa      	ldrb	r2, [r7, #15]
 800aae6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800aae8:	7bfa      	ldrb	r2, [r7, #15]
 800aaea:	6879      	ldr	r1, [r7, #4]
 800aaec:	4613      	mov	r3, r2
 800aaee:	00db      	lsls	r3, r3, #3
 800aaf0:	4413      	add	r3, r2
 800aaf2:	009b      	lsls	r3, r3, #2
 800aaf4:	440b      	add	r3, r1
 800aaf6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800aafa:	2200      	movs	r2, #0
 800aafc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800aafe:	7bfa      	ldrb	r2, [r7, #15]
 800ab00:	6879      	ldr	r1, [r7, #4]
 800ab02:	4613      	mov	r3, r2
 800ab04:	00db      	lsls	r3, r3, #3
 800ab06:	4413      	add	r3, r2
 800ab08:	009b      	lsls	r3, r3, #2
 800ab0a:	440b      	add	r3, r1
 800ab0c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800ab10:	2200      	movs	r2, #0
 800ab12:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800ab14:	7bfa      	ldrb	r2, [r7, #15]
 800ab16:	6879      	ldr	r1, [r7, #4]
 800ab18:	4613      	mov	r3, r2
 800ab1a:	00db      	lsls	r3, r3, #3
 800ab1c:	4413      	add	r3, r2
 800ab1e:	009b      	lsls	r3, r3, #2
 800ab20:	440b      	add	r3, r1
 800ab22:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800ab26:	2200      	movs	r2, #0
 800ab28:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800ab2a:	7bfa      	ldrb	r2, [r7, #15]
 800ab2c:	6879      	ldr	r1, [r7, #4]
 800ab2e:	4613      	mov	r3, r2
 800ab30:	00db      	lsls	r3, r3, #3
 800ab32:	4413      	add	r3, r2
 800ab34:	009b      	lsls	r3, r3, #2
 800ab36:	440b      	add	r3, r1
 800ab38:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800ab3c:	2200      	movs	r2, #0
 800ab3e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ab40:	7bfb      	ldrb	r3, [r7, #15]
 800ab42:	3301      	adds	r3, #1
 800ab44:	73fb      	strb	r3, [r7, #15]
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	791b      	ldrb	r3, [r3, #4]
 800ab4a:	7bfa      	ldrb	r2, [r7, #15]
 800ab4c:	429a      	cmp	r2, r3
 800ab4e:	d3b5      	bcc.n	800aabc <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	6818      	ldr	r0, [r3, #0]
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	7c1a      	ldrb	r2, [r3, #16]
 800ab58:	f88d 2000 	strb.w	r2, [sp]
 800ab5c:	3304      	adds	r3, #4
 800ab5e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ab60:	f003 fe7c 	bl	800e85c <USB_DevInit>
 800ab64:	4603      	mov	r3, r0
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d005      	beq.n	800ab76 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	2202      	movs	r2, #2
 800ab6e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800ab72:	2301      	movs	r3, #1
 800ab74:	e00c      	b.n	800ab90 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	2200      	movs	r2, #0
 800ab7a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	2201      	movs	r2, #1
 800ab80:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	4618      	mov	r0, r3
 800ab8a:	f004 fec6 	bl	800f91a <USB_DevDisconnect>

  return HAL_OK;
 800ab8e:	2300      	movs	r3, #0
}
 800ab90:	4618      	mov	r0, r3
 800ab92:	3710      	adds	r7, #16
 800ab94:	46bd      	mov	sp, r7
 800ab96:	bd80      	pop	{r7, pc}

0800ab98 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800ab98:	b580      	push	{r7, lr}
 800ab9a:	b084      	sub	sp, #16
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800abac:	2b01      	cmp	r3, #1
 800abae:	d101      	bne.n	800abb4 <HAL_PCD_Start+0x1c>
 800abb0:	2302      	movs	r3, #2
 800abb2:	e022      	b.n	800abfa <HAL_PCD_Start+0x62>
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	2201      	movs	r2, #1
 800abb8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	68db      	ldr	r3, [r3, #12]
 800abc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d009      	beq.n	800abdc <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800abcc:	2b01      	cmp	r3, #1
 800abce:	d105      	bne.n	800abdc <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abd4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	4618      	mov	r0, r3
 800abe2:	f003 fdcd 	bl	800e780 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	4618      	mov	r0, r3
 800abec:	f004 fe74 	bl	800f8d8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	2200      	movs	r2, #0
 800abf4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800abf8:	2300      	movs	r3, #0
}
 800abfa:	4618      	mov	r0, r3
 800abfc:	3710      	adds	r7, #16
 800abfe:	46bd      	mov	sp, r7
 800ac00:	bd80      	pop	{r7, pc}

0800ac02 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800ac02:	b590      	push	{r4, r7, lr}
 800ac04:	b08d      	sub	sp, #52	@ 0x34
 800ac06:	af00      	add	r7, sp, #0
 800ac08:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac10:	6a3b      	ldr	r3, [r7, #32]
 800ac12:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	4618      	mov	r0, r3
 800ac1a:	f004 ff32 	bl	800fa82 <USB_GetMode>
 800ac1e:	4603      	mov	r3, r0
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	f040 848c 	bne.w	800b53e <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	f004 fe96 	bl	800f95c <USB_ReadInterrupts>
 800ac30:	4603      	mov	r3, r0
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	f000 8482 	beq.w	800b53c <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800ac38:	69fb      	ldr	r3, [r7, #28]
 800ac3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac3e:	689b      	ldr	r3, [r3, #8]
 800ac40:	0a1b      	lsrs	r3, r3, #8
 800ac42:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	4618      	mov	r0, r3
 800ac52:	f004 fe83 	bl	800f95c <USB_ReadInterrupts>
 800ac56:	4603      	mov	r3, r0
 800ac58:	f003 0302 	and.w	r3, r3, #2
 800ac5c:	2b02      	cmp	r3, #2
 800ac5e:	d107      	bne.n	800ac70 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	695a      	ldr	r2, [r3, #20]
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	f002 0202 	and.w	r2, r2, #2
 800ac6e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	4618      	mov	r0, r3
 800ac76:	f004 fe71 	bl	800f95c <USB_ReadInterrupts>
 800ac7a:	4603      	mov	r3, r0
 800ac7c:	f003 0310 	and.w	r3, r3, #16
 800ac80:	2b10      	cmp	r3, #16
 800ac82:	d161      	bne.n	800ad48 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	699a      	ldr	r2, [r3, #24]
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	f022 0210 	bic.w	r2, r2, #16
 800ac92:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800ac94:	6a3b      	ldr	r3, [r7, #32]
 800ac96:	6a1b      	ldr	r3, [r3, #32]
 800ac98:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800ac9a:	69bb      	ldr	r3, [r7, #24]
 800ac9c:	f003 020f 	and.w	r2, r3, #15
 800aca0:	4613      	mov	r3, r2
 800aca2:	00db      	lsls	r3, r3, #3
 800aca4:	4413      	add	r3, r2
 800aca6:	009b      	lsls	r3, r3, #2
 800aca8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800acac:	687a      	ldr	r2, [r7, #4]
 800acae:	4413      	add	r3, r2
 800acb0:	3304      	adds	r3, #4
 800acb2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800acb4:	69bb      	ldr	r3, [r7, #24]
 800acb6:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800acba:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800acbe:	d124      	bne.n	800ad0a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800acc0:	69ba      	ldr	r2, [r7, #24]
 800acc2:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800acc6:	4013      	ands	r3, r2
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d035      	beq.n	800ad38 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800accc:	697b      	ldr	r3, [r7, #20]
 800acce:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800acd0:	69bb      	ldr	r3, [r7, #24]
 800acd2:	091b      	lsrs	r3, r3, #4
 800acd4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800acd6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800acda:	b29b      	uxth	r3, r3
 800acdc:	461a      	mov	r2, r3
 800acde:	6a38      	ldr	r0, [r7, #32]
 800ace0:	f004 fca8 	bl	800f634 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800ace4:	697b      	ldr	r3, [r7, #20]
 800ace6:	68da      	ldr	r2, [r3, #12]
 800ace8:	69bb      	ldr	r3, [r7, #24]
 800acea:	091b      	lsrs	r3, r3, #4
 800acec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800acf0:	441a      	add	r2, r3
 800acf2:	697b      	ldr	r3, [r7, #20]
 800acf4:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800acf6:	697b      	ldr	r3, [r7, #20]
 800acf8:	695a      	ldr	r2, [r3, #20]
 800acfa:	69bb      	ldr	r3, [r7, #24]
 800acfc:	091b      	lsrs	r3, r3, #4
 800acfe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ad02:	441a      	add	r2, r3
 800ad04:	697b      	ldr	r3, [r7, #20]
 800ad06:	615a      	str	r2, [r3, #20]
 800ad08:	e016      	b.n	800ad38 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800ad0a:	69bb      	ldr	r3, [r7, #24]
 800ad0c:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800ad10:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800ad14:	d110      	bne.n	800ad38 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800ad1c:	2208      	movs	r2, #8
 800ad1e:	4619      	mov	r1, r3
 800ad20:	6a38      	ldr	r0, [r7, #32]
 800ad22:	f004 fc87 	bl	800f634 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800ad26:	697b      	ldr	r3, [r7, #20]
 800ad28:	695a      	ldr	r2, [r3, #20]
 800ad2a:	69bb      	ldr	r3, [r7, #24]
 800ad2c:	091b      	lsrs	r3, r3, #4
 800ad2e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ad32:	441a      	add	r2, r3
 800ad34:	697b      	ldr	r3, [r7, #20]
 800ad36:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	699a      	ldr	r2, [r3, #24]
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	f042 0210 	orr.w	r2, r2, #16
 800ad46:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	f004 fe05 	bl	800f95c <USB_ReadInterrupts>
 800ad52:	4603      	mov	r3, r0
 800ad54:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800ad58:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800ad5c:	f040 80a7 	bne.w	800aeae <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800ad60:	2300      	movs	r3, #0
 800ad62:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	4618      	mov	r0, r3
 800ad6a:	f004 fe0a 	bl	800f982 <USB_ReadDevAllOutEpInterrupt>
 800ad6e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800ad70:	e099      	b.n	800aea6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800ad72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad74:	f003 0301 	and.w	r3, r3, #1
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	f000 808e 	beq.w	800ae9a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ad84:	b2d2      	uxtb	r2, r2
 800ad86:	4611      	mov	r1, r2
 800ad88:	4618      	mov	r0, r3
 800ad8a:	f004 fe2e 	bl	800f9ea <USB_ReadDevOutEPInterrupt>
 800ad8e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800ad90:	693b      	ldr	r3, [r7, #16]
 800ad92:	f003 0301 	and.w	r3, r3, #1
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d00c      	beq.n	800adb4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800ad9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad9c:	015a      	lsls	r2, r3, #5
 800ad9e:	69fb      	ldr	r3, [r7, #28]
 800ada0:	4413      	add	r3, r2
 800ada2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ada6:	461a      	mov	r2, r3
 800ada8:	2301      	movs	r3, #1
 800adaa:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800adac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800adae:	6878      	ldr	r0, [r7, #4]
 800adb0:	f000 fea4 	bl	800bafc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800adb4:	693b      	ldr	r3, [r7, #16]
 800adb6:	f003 0308 	and.w	r3, r3, #8
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d00c      	beq.n	800add8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800adbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adc0:	015a      	lsls	r2, r3, #5
 800adc2:	69fb      	ldr	r3, [r7, #28]
 800adc4:	4413      	add	r3, r2
 800adc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800adca:	461a      	mov	r2, r3
 800adcc:	2308      	movs	r3, #8
 800adce:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800add0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800add2:	6878      	ldr	r0, [r7, #4]
 800add4:	f000 ff7a 	bl	800bccc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800add8:	693b      	ldr	r3, [r7, #16]
 800adda:	f003 0310 	and.w	r3, r3, #16
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d008      	beq.n	800adf4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800ade2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ade4:	015a      	lsls	r2, r3, #5
 800ade6:	69fb      	ldr	r3, [r7, #28]
 800ade8:	4413      	add	r3, r2
 800adea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800adee:	461a      	mov	r2, r3
 800adf0:	2310      	movs	r3, #16
 800adf2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800adf4:	693b      	ldr	r3, [r7, #16]
 800adf6:	f003 0302 	and.w	r3, r3, #2
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d030      	beq.n	800ae60 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800adfe:	6a3b      	ldr	r3, [r7, #32]
 800ae00:	695b      	ldr	r3, [r3, #20]
 800ae02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ae06:	2b80      	cmp	r3, #128	@ 0x80
 800ae08:	d109      	bne.n	800ae1e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800ae0a:	69fb      	ldr	r3, [r7, #28]
 800ae0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ae10:	685b      	ldr	r3, [r3, #4]
 800ae12:	69fa      	ldr	r2, [r7, #28]
 800ae14:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ae18:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800ae1c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800ae1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ae20:	4613      	mov	r3, r2
 800ae22:	00db      	lsls	r3, r3, #3
 800ae24:	4413      	add	r3, r2
 800ae26:	009b      	lsls	r3, r3, #2
 800ae28:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800ae2c:	687a      	ldr	r2, [r7, #4]
 800ae2e:	4413      	add	r3, r2
 800ae30:	3304      	adds	r3, #4
 800ae32:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800ae34:	697b      	ldr	r3, [r7, #20]
 800ae36:	78db      	ldrb	r3, [r3, #3]
 800ae38:	2b01      	cmp	r3, #1
 800ae3a:	d108      	bne.n	800ae4e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800ae3c:	697b      	ldr	r3, [r7, #20]
 800ae3e:	2200      	movs	r2, #0
 800ae40:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800ae42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae44:	b2db      	uxtb	r3, r3
 800ae46:	4619      	mov	r1, r3
 800ae48:	6878      	ldr	r0, [r7, #4]
 800ae4a:	f007 fa1b 	bl	8012284 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800ae4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae50:	015a      	lsls	r2, r3, #5
 800ae52:	69fb      	ldr	r3, [r7, #28]
 800ae54:	4413      	add	r3, r2
 800ae56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae5a:	461a      	mov	r2, r3
 800ae5c:	2302      	movs	r3, #2
 800ae5e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800ae60:	693b      	ldr	r3, [r7, #16]
 800ae62:	f003 0320 	and.w	r3, r3, #32
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d008      	beq.n	800ae7c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800ae6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae6c:	015a      	lsls	r2, r3, #5
 800ae6e:	69fb      	ldr	r3, [r7, #28]
 800ae70:	4413      	add	r3, r2
 800ae72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae76:	461a      	mov	r2, r3
 800ae78:	2320      	movs	r3, #32
 800ae7a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800ae7c:	693b      	ldr	r3, [r7, #16]
 800ae7e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d009      	beq.n	800ae9a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800ae86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae88:	015a      	lsls	r2, r3, #5
 800ae8a:	69fb      	ldr	r3, [r7, #28]
 800ae8c:	4413      	add	r3, r2
 800ae8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae92:	461a      	mov	r2, r3
 800ae94:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800ae98:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800ae9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae9c:	3301      	adds	r3, #1
 800ae9e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800aea0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aea2:	085b      	lsrs	r3, r3, #1
 800aea4:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800aea6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	f47f af62 	bne.w	800ad72 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	f004 fd52 	bl	800f95c <USB_ReadInterrupts>
 800aeb8:	4603      	mov	r3, r0
 800aeba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800aebe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800aec2:	f040 80db 	bne.w	800b07c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	4618      	mov	r0, r3
 800aecc:	f004 fd73 	bl	800f9b6 <USB_ReadDevAllInEpInterrupt>
 800aed0:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800aed2:	2300      	movs	r3, #0
 800aed4:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800aed6:	e0cd      	b.n	800b074 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800aed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aeda:	f003 0301 	and.w	r3, r3, #1
 800aede:	2b00      	cmp	r3, #0
 800aee0:	f000 80c2 	beq.w	800b068 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aeea:	b2d2      	uxtb	r2, r2
 800aeec:	4611      	mov	r1, r2
 800aeee:	4618      	mov	r0, r3
 800aef0:	f004 fd99 	bl	800fa26 <USB_ReadDevInEPInterrupt>
 800aef4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800aef6:	693b      	ldr	r3, [r7, #16]
 800aef8:	f003 0301 	and.w	r3, r3, #1
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d057      	beq.n	800afb0 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800af00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af02:	f003 030f 	and.w	r3, r3, #15
 800af06:	2201      	movs	r2, #1
 800af08:	fa02 f303 	lsl.w	r3, r2, r3
 800af0c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800af0e:	69fb      	ldr	r3, [r7, #28]
 800af10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800af14:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	43db      	mvns	r3, r3
 800af1a:	69f9      	ldr	r1, [r7, #28]
 800af1c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800af20:	4013      	ands	r3, r2
 800af22:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800af24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af26:	015a      	lsls	r2, r3, #5
 800af28:	69fb      	ldr	r3, [r7, #28]
 800af2a:	4413      	add	r3, r2
 800af2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800af30:	461a      	mov	r2, r3
 800af32:	2301      	movs	r3, #1
 800af34:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	799b      	ldrb	r3, [r3, #6]
 800af3a:	2b01      	cmp	r3, #1
 800af3c:	d132      	bne.n	800afa4 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800af3e:	6879      	ldr	r1, [r7, #4]
 800af40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800af42:	4613      	mov	r3, r2
 800af44:	00db      	lsls	r3, r3, #3
 800af46:	4413      	add	r3, r2
 800af48:	009b      	lsls	r3, r3, #2
 800af4a:	440b      	add	r3, r1
 800af4c:	3320      	adds	r3, #32
 800af4e:	6819      	ldr	r1, [r3, #0]
 800af50:	6878      	ldr	r0, [r7, #4]
 800af52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800af54:	4613      	mov	r3, r2
 800af56:	00db      	lsls	r3, r3, #3
 800af58:	4413      	add	r3, r2
 800af5a:	009b      	lsls	r3, r3, #2
 800af5c:	4403      	add	r3, r0
 800af5e:	331c      	adds	r3, #28
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	4419      	add	r1, r3
 800af64:	6878      	ldr	r0, [r7, #4]
 800af66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800af68:	4613      	mov	r3, r2
 800af6a:	00db      	lsls	r3, r3, #3
 800af6c:	4413      	add	r3, r2
 800af6e:	009b      	lsls	r3, r3, #2
 800af70:	4403      	add	r3, r0
 800af72:	3320      	adds	r3, #32
 800af74:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800af76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d113      	bne.n	800afa4 <HAL_PCD_IRQHandler+0x3a2>
 800af7c:	6879      	ldr	r1, [r7, #4]
 800af7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800af80:	4613      	mov	r3, r2
 800af82:	00db      	lsls	r3, r3, #3
 800af84:	4413      	add	r3, r2
 800af86:	009b      	lsls	r3, r3, #2
 800af88:	440b      	add	r3, r1
 800af8a:	3324      	adds	r3, #36	@ 0x24
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d108      	bne.n	800afa4 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	6818      	ldr	r0, [r3, #0]
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800af9c:	461a      	mov	r2, r3
 800af9e:	2101      	movs	r1, #1
 800afa0:	f004 fda0 	bl	800fae4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800afa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afa6:	b2db      	uxtb	r3, r3
 800afa8:	4619      	mov	r1, r3
 800afaa:	6878      	ldr	r0, [r7, #4]
 800afac:	f007 f8ef 	bl	801218e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800afb0:	693b      	ldr	r3, [r7, #16]
 800afb2:	f003 0308 	and.w	r3, r3, #8
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d008      	beq.n	800afcc <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800afba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afbc:	015a      	lsls	r2, r3, #5
 800afbe:	69fb      	ldr	r3, [r7, #28]
 800afc0:	4413      	add	r3, r2
 800afc2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800afc6:	461a      	mov	r2, r3
 800afc8:	2308      	movs	r3, #8
 800afca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800afcc:	693b      	ldr	r3, [r7, #16]
 800afce:	f003 0310 	and.w	r3, r3, #16
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d008      	beq.n	800afe8 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800afd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afd8:	015a      	lsls	r2, r3, #5
 800afda:	69fb      	ldr	r3, [r7, #28]
 800afdc:	4413      	add	r3, r2
 800afde:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800afe2:	461a      	mov	r2, r3
 800afe4:	2310      	movs	r3, #16
 800afe6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800afe8:	693b      	ldr	r3, [r7, #16]
 800afea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d008      	beq.n	800b004 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800aff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aff4:	015a      	lsls	r2, r3, #5
 800aff6:	69fb      	ldr	r3, [r7, #28]
 800aff8:	4413      	add	r3, r2
 800affa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800affe:	461a      	mov	r2, r3
 800b000:	2340      	movs	r3, #64	@ 0x40
 800b002:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800b004:	693b      	ldr	r3, [r7, #16]
 800b006:	f003 0302 	and.w	r3, r3, #2
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d023      	beq.n	800b056 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800b00e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b010:	6a38      	ldr	r0, [r7, #32]
 800b012:	f003 fd87 	bl	800eb24 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800b016:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b018:	4613      	mov	r3, r2
 800b01a:	00db      	lsls	r3, r3, #3
 800b01c:	4413      	add	r3, r2
 800b01e:	009b      	lsls	r3, r3, #2
 800b020:	3310      	adds	r3, #16
 800b022:	687a      	ldr	r2, [r7, #4]
 800b024:	4413      	add	r3, r2
 800b026:	3304      	adds	r3, #4
 800b028:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800b02a:	697b      	ldr	r3, [r7, #20]
 800b02c:	78db      	ldrb	r3, [r3, #3]
 800b02e:	2b01      	cmp	r3, #1
 800b030:	d108      	bne.n	800b044 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800b032:	697b      	ldr	r3, [r7, #20]
 800b034:	2200      	movs	r2, #0
 800b036:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800b038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b03a:	b2db      	uxtb	r3, r3
 800b03c:	4619      	mov	r1, r3
 800b03e:	6878      	ldr	r0, [r7, #4]
 800b040:	f007 f932 	bl	80122a8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800b044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b046:	015a      	lsls	r2, r3, #5
 800b048:	69fb      	ldr	r3, [r7, #28]
 800b04a:	4413      	add	r3, r2
 800b04c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b050:	461a      	mov	r2, r3
 800b052:	2302      	movs	r3, #2
 800b054:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800b056:	693b      	ldr	r3, [r7, #16]
 800b058:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d003      	beq.n	800b068 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800b060:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b062:	6878      	ldr	r0, [r7, #4]
 800b064:	f000 fcbd 	bl	800b9e2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800b068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b06a:	3301      	adds	r3, #1
 800b06c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800b06e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b070:	085b      	lsrs	r3, r3, #1
 800b072:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800b074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b076:	2b00      	cmp	r3, #0
 800b078:	f47f af2e 	bne.w	800aed8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	4618      	mov	r0, r3
 800b082:	f004 fc6b 	bl	800f95c <USB_ReadInterrupts>
 800b086:	4603      	mov	r3, r0
 800b088:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b08c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b090:	d122      	bne.n	800b0d8 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800b092:	69fb      	ldr	r3, [r7, #28]
 800b094:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b098:	685b      	ldr	r3, [r3, #4]
 800b09a:	69fa      	ldr	r2, [r7, #28]
 800b09c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b0a0:	f023 0301 	bic.w	r3, r3, #1
 800b0a4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800b0ac:	2b01      	cmp	r3, #1
 800b0ae:	d108      	bne.n	800b0c2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800b0b8:	2100      	movs	r1, #0
 800b0ba:	6878      	ldr	r0, [r7, #4]
 800b0bc:	f000 fea4 	bl	800be08 <HAL_PCDEx_LPM_Callback>
 800b0c0:	e002      	b.n	800b0c8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800b0c2:	6878      	ldr	r0, [r7, #4]
 800b0c4:	f007 f8d0 	bl	8012268 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	695a      	ldr	r2, [r3, #20]
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800b0d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	4618      	mov	r0, r3
 800b0de:	f004 fc3d 	bl	800f95c <USB_ReadInterrupts>
 800b0e2:	4603      	mov	r3, r0
 800b0e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b0e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b0ec:	d112      	bne.n	800b114 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800b0ee:	69fb      	ldr	r3, [r7, #28]
 800b0f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b0f4:	689b      	ldr	r3, [r3, #8]
 800b0f6:	f003 0301 	and.w	r3, r3, #1
 800b0fa:	2b01      	cmp	r3, #1
 800b0fc:	d102      	bne.n	800b104 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800b0fe:	6878      	ldr	r0, [r7, #4]
 800b100:	f007 f88c 	bl	801221c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	695a      	ldr	r2, [r3, #20]
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800b112:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	4618      	mov	r0, r3
 800b11a:	f004 fc1f 	bl	800f95c <USB_ReadInterrupts>
 800b11e:	4603      	mov	r3, r0
 800b120:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b124:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b128:	f040 80b7 	bne.w	800b29a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800b12c:	69fb      	ldr	r3, [r7, #28]
 800b12e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b132:	685b      	ldr	r3, [r3, #4]
 800b134:	69fa      	ldr	r2, [r7, #28]
 800b136:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b13a:	f023 0301 	bic.w	r3, r3, #1
 800b13e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	2110      	movs	r1, #16
 800b146:	4618      	mov	r0, r3
 800b148:	f003 fcec 	bl	800eb24 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b14c:	2300      	movs	r3, #0
 800b14e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b150:	e046      	b.n	800b1e0 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800b152:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b154:	015a      	lsls	r2, r3, #5
 800b156:	69fb      	ldr	r3, [r7, #28]
 800b158:	4413      	add	r3, r2
 800b15a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b15e:	461a      	mov	r2, r3
 800b160:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800b164:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b166:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b168:	015a      	lsls	r2, r3, #5
 800b16a:	69fb      	ldr	r3, [r7, #28]
 800b16c:	4413      	add	r3, r2
 800b16e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b176:	0151      	lsls	r1, r2, #5
 800b178:	69fa      	ldr	r2, [r7, #28]
 800b17a:	440a      	add	r2, r1
 800b17c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b180:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b184:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800b186:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b188:	015a      	lsls	r2, r3, #5
 800b18a:	69fb      	ldr	r3, [r7, #28]
 800b18c:	4413      	add	r3, r2
 800b18e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b192:	461a      	mov	r2, r3
 800b194:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800b198:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b19a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b19c:	015a      	lsls	r2, r3, #5
 800b19e:	69fb      	ldr	r3, [r7, #28]
 800b1a0:	4413      	add	r3, r2
 800b1a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b1aa:	0151      	lsls	r1, r2, #5
 800b1ac:	69fa      	ldr	r2, [r7, #28]
 800b1ae:	440a      	add	r2, r1
 800b1b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b1b4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b1b8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800b1ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1bc:	015a      	lsls	r2, r3, #5
 800b1be:	69fb      	ldr	r3, [r7, #28]
 800b1c0:	4413      	add	r3, r2
 800b1c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b1ca:	0151      	lsls	r1, r2, #5
 800b1cc:	69fa      	ldr	r2, [r7, #28]
 800b1ce:	440a      	add	r2, r1
 800b1d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b1d4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b1d8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b1da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1dc:	3301      	adds	r3, #1
 800b1de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	791b      	ldrb	r3, [r3, #4]
 800b1e4:	461a      	mov	r2, r3
 800b1e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1e8:	4293      	cmp	r3, r2
 800b1ea:	d3b2      	bcc.n	800b152 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800b1ec:	69fb      	ldr	r3, [r7, #28]
 800b1ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b1f2:	69db      	ldr	r3, [r3, #28]
 800b1f4:	69fa      	ldr	r2, [r7, #28]
 800b1f6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b1fa:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800b1fe:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	7bdb      	ldrb	r3, [r3, #15]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d016      	beq.n	800b236 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800b208:	69fb      	ldr	r3, [r7, #28]
 800b20a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b20e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b212:	69fa      	ldr	r2, [r7, #28]
 800b214:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b218:	f043 030b 	orr.w	r3, r3, #11
 800b21c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800b220:	69fb      	ldr	r3, [r7, #28]
 800b222:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b226:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b228:	69fa      	ldr	r2, [r7, #28]
 800b22a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b22e:	f043 030b 	orr.w	r3, r3, #11
 800b232:	6453      	str	r3, [r2, #68]	@ 0x44
 800b234:	e015      	b.n	800b262 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800b236:	69fb      	ldr	r3, [r7, #28]
 800b238:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b23c:	695b      	ldr	r3, [r3, #20]
 800b23e:	69fa      	ldr	r2, [r7, #28]
 800b240:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b244:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800b248:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800b24c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800b24e:	69fb      	ldr	r3, [r7, #28]
 800b250:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b254:	691b      	ldr	r3, [r3, #16]
 800b256:	69fa      	ldr	r2, [r7, #28]
 800b258:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b25c:	f043 030b 	orr.w	r3, r3, #11
 800b260:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800b262:	69fb      	ldr	r3, [r7, #28]
 800b264:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	69fa      	ldr	r2, [r7, #28]
 800b26c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b270:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800b274:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	6818      	ldr	r0, [r3, #0]
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800b284:	461a      	mov	r2, r3
 800b286:	f004 fc2d 	bl	800fae4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	695a      	ldr	r2, [r3, #20]
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800b298:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	4618      	mov	r0, r3
 800b2a0:	f004 fb5c 	bl	800f95c <USB_ReadInterrupts>
 800b2a4:	4603      	mov	r3, r0
 800b2a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b2aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b2ae:	d123      	bne.n	800b2f8 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	f004 fbf2 	bl	800fa9e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	4618      	mov	r0, r3
 800b2c0:	f003 fca9 	bl	800ec16 <USB_GetDevSpeed>
 800b2c4:	4603      	mov	r3, r0
 800b2c6:	461a      	mov	r2, r3
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	681c      	ldr	r4, [r3, #0]
 800b2d0:	f001 f9d6 	bl	800c680 <HAL_RCC_GetHCLKFreq>
 800b2d4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800b2da:	461a      	mov	r2, r3
 800b2dc:	4620      	mov	r0, r4
 800b2de:	f003 f9ad 	bl	800e63c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800b2e2:	6878      	ldr	r0, [r7, #4]
 800b2e4:	f006 ff7b 	bl	80121de <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	695a      	ldr	r2, [r3, #20]
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800b2f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	f004 fb2d 	bl	800f95c <USB_ReadInterrupts>
 800b302:	4603      	mov	r3, r0
 800b304:	f003 0308 	and.w	r3, r3, #8
 800b308:	2b08      	cmp	r3, #8
 800b30a:	d10a      	bne.n	800b322 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800b30c:	6878      	ldr	r0, [r7, #4]
 800b30e:	f006 ff58 	bl	80121c2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	695a      	ldr	r2, [r3, #20]
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	f002 0208 	and.w	r2, r2, #8
 800b320:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	4618      	mov	r0, r3
 800b328:	f004 fb18 	bl	800f95c <USB_ReadInterrupts>
 800b32c:	4603      	mov	r3, r0
 800b32e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b332:	2b80      	cmp	r3, #128	@ 0x80
 800b334:	d123      	bne.n	800b37e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800b336:	6a3b      	ldr	r3, [r7, #32]
 800b338:	699b      	ldr	r3, [r3, #24]
 800b33a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b33e:	6a3b      	ldr	r3, [r7, #32]
 800b340:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b342:	2301      	movs	r3, #1
 800b344:	627b      	str	r3, [r7, #36]	@ 0x24
 800b346:	e014      	b.n	800b372 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800b348:	6879      	ldr	r1, [r7, #4]
 800b34a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b34c:	4613      	mov	r3, r2
 800b34e:	00db      	lsls	r3, r3, #3
 800b350:	4413      	add	r3, r2
 800b352:	009b      	lsls	r3, r3, #2
 800b354:	440b      	add	r3, r1
 800b356:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800b35a:	781b      	ldrb	r3, [r3, #0]
 800b35c:	2b01      	cmp	r3, #1
 800b35e:	d105      	bne.n	800b36c <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800b360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b362:	b2db      	uxtb	r3, r3
 800b364:	4619      	mov	r1, r3
 800b366:	6878      	ldr	r0, [r7, #4]
 800b368:	f000 fb0a 	bl	800b980 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b36c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b36e:	3301      	adds	r3, #1
 800b370:	627b      	str	r3, [r7, #36]	@ 0x24
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	791b      	ldrb	r3, [r3, #4]
 800b376:	461a      	mov	r2, r3
 800b378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b37a:	4293      	cmp	r3, r2
 800b37c:	d3e4      	bcc.n	800b348 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	4618      	mov	r0, r3
 800b384:	f004 faea 	bl	800f95c <USB_ReadInterrupts>
 800b388:	4603      	mov	r3, r0
 800b38a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b38e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b392:	d13c      	bne.n	800b40e <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b394:	2301      	movs	r3, #1
 800b396:	627b      	str	r3, [r7, #36]	@ 0x24
 800b398:	e02b      	b.n	800b3f2 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800b39a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b39c:	015a      	lsls	r2, r3, #5
 800b39e:	69fb      	ldr	r3, [r7, #28]
 800b3a0:	4413      	add	r3, r2
 800b3a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800b3aa:	6879      	ldr	r1, [r7, #4]
 800b3ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b3ae:	4613      	mov	r3, r2
 800b3b0:	00db      	lsls	r3, r3, #3
 800b3b2:	4413      	add	r3, r2
 800b3b4:	009b      	lsls	r3, r3, #2
 800b3b6:	440b      	add	r3, r1
 800b3b8:	3318      	adds	r3, #24
 800b3ba:	781b      	ldrb	r3, [r3, #0]
 800b3bc:	2b01      	cmp	r3, #1
 800b3be:	d115      	bne.n	800b3ec <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800b3c0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	da12      	bge.n	800b3ec <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800b3c6:	6879      	ldr	r1, [r7, #4]
 800b3c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b3ca:	4613      	mov	r3, r2
 800b3cc:	00db      	lsls	r3, r3, #3
 800b3ce:	4413      	add	r3, r2
 800b3d0:	009b      	lsls	r3, r3, #2
 800b3d2:	440b      	add	r3, r1
 800b3d4:	3317      	adds	r3, #23
 800b3d6:	2201      	movs	r2, #1
 800b3d8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800b3da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3dc:	b2db      	uxtb	r3, r3
 800b3de:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b3e2:	b2db      	uxtb	r3, r3
 800b3e4:	4619      	mov	r1, r3
 800b3e6:	6878      	ldr	r0, [r7, #4]
 800b3e8:	f000 faca 	bl	800b980 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b3ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3ee:	3301      	adds	r3, #1
 800b3f0:	627b      	str	r3, [r7, #36]	@ 0x24
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	791b      	ldrb	r3, [r3, #4]
 800b3f6:	461a      	mov	r2, r3
 800b3f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3fa:	4293      	cmp	r3, r2
 800b3fc:	d3cd      	bcc.n	800b39a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	695a      	ldr	r2, [r3, #20]
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800b40c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	4618      	mov	r0, r3
 800b414:	f004 faa2 	bl	800f95c <USB_ReadInterrupts>
 800b418:	4603      	mov	r3, r0
 800b41a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b41e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b422:	d156      	bne.n	800b4d2 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b424:	2301      	movs	r3, #1
 800b426:	627b      	str	r3, [r7, #36]	@ 0x24
 800b428:	e045      	b.n	800b4b6 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800b42a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b42c:	015a      	lsls	r2, r3, #5
 800b42e:	69fb      	ldr	r3, [r7, #28]
 800b430:	4413      	add	r3, r2
 800b432:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800b43a:	6879      	ldr	r1, [r7, #4]
 800b43c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b43e:	4613      	mov	r3, r2
 800b440:	00db      	lsls	r3, r3, #3
 800b442:	4413      	add	r3, r2
 800b444:	009b      	lsls	r3, r3, #2
 800b446:	440b      	add	r3, r1
 800b448:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800b44c:	781b      	ldrb	r3, [r3, #0]
 800b44e:	2b01      	cmp	r3, #1
 800b450:	d12e      	bne.n	800b4b0 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800b452:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800b454:	2b00      	cmp	r3, #0
 800b456:	da2b      	bge.n	800b4b0 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800b458:	69bb      	ldr	r3, [r7, #24]
 800b45a:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800b464:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800b468:	429a      	cmp	r2, r3
 800b46a:	d121      	bne.n	800b4b0 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800b46c:	6879      	ldr	r1, [r7, #4]
 800b46e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b470:	4613      	mov	r3, r2
 800b472:	00db      	lsls	r3, r3, #3
 800b474:	4413      	add	r3, r2
 800b476:	009b      	lsls	r3, r3, #2
 800b478:	440b      	add	r3, r1
 800b47a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800b47e:	2201      	movs	r2, #1
 800b480:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800b482:	6a3b      	ldr	r3, [r7, #32]
 800b484:	699b      	ldr	r3, [r3, #24]
 800b486:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800b48a:	6a3b      	ldr	r3, [r7, #32]
 800b48c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800b48e:	6a3b      	ldr	r3, [r7, #32]
 800b490:	695b      	ldr	r3, [r3, #20]
 800b492:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b496:	2b00      	cmp	r3, #0
 800b498:	d10a      	bne.n	800b4b0 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800b49a:	69fb      	ldr	r3, [r7, #28]
 800b49c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b4a0:	685b      	ldr	r3, [r3, #4]
 800b4a2:	69fa      	ldr	r2, [r7, #28]
 800b4a4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b4a8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800b4ac:	6053      	str	r3, [r2, #4]
            break;
 800b4ae:	e008      	b.n	800b4c2 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b4b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4b2:	3301      	adds	r3, #1
 800b4b4:	627b      	str	r3, [r7, #36]	@ 0x24
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	791b      	ldrb	r3, [r3, #4]
 800b4ba:	461a      	mov	r2, r3
 800b4bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4be:	4293      	cmp	r3, r2
 800b4c0:	d3b3      	bcc.n	800b42a <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	695a      	ldr	r2, [r3, #20]
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800b4d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	f004 fa40 	bl	800f95c <USB_ReadInterrupts>
 800b4dc:	4603      	mov	r3, r0
 800b4de:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b4e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b4e6:	d10a      	bne.n	800b4fe <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800b4e8:	6878      	ldr	r0, [r7, #4]
 800b4ea:	f006 feef 	bl	80122cc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	695a      	ldr	r2, [r3, #20]
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800b4fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	4618      	mov	r0, r3
 800b504:	f004 fa2a 	bl	800f95c <USB_ReadInterrupts>
 800b508:	4603      	mov	r3, r0
 800b50a:	f003 0304 	and.w	r3, r3, #4
 800b50e:	2b04      	cmp	r3, #4
 800b510:	d115      	bne.n	800b53e <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	685b      	ldr	r3, [r3, #4]
 800b518:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800b51a:	69bb      	ldr	r3, [r7, #24]
 800b51c:	f003 0304 	and.w	r3, r3, #4
 800b520:	2b00      	cmp	r3, #0
 800b522:	d002      	beq.n	800b52a <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800b524:	6878      	ldr	r0, [r7, #4]
 800b526:	f006 fedf 	bl	80122e8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	6859      	ldr	r1, [r3, #4]
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	69ba      	ldr	r2, [r7, #24]
 800b536:	430a      	orrs	r2, r1
 800b538:	605a      	str	r2, [r3, #4]
 800b53a:	e000      	b.n	800b53e <HAL_PCD_IRQHandler+0x93c>
      return;
 800b53c:	bf00      	nop
    }
  }
}
 800b53e:	3734      	adds	r7, #52	@ 0x34
 800b540:	46bd      	mov	sp, r7
 800b542:	bd90      	pop	{r4, r7, pc}

0800b544 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800b544:	b580      	push	{r7, lr}
 800b546:	b082      	sub	sp, #8
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
 800b54c:	460b      	mov	r3, r1
 800b54e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800b556:	2b01      	cmp	r3, #1
 800b558:	d101      	bne.n	800b55e <HAL_PCD_SetAddress+0x1a>
 800b55a:	2302      	movs	r3, #2
 800b55c:	e012      	b.n	800b584 <HAL_PCD_SetAddress+0x40>
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	2201      	movs	r2, #1
 800b562:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	78fa      	ldrb	r2, [r7, #3]
 800b56a:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	78fa      	ldrb	r2, [r7, #3]
 800b572:	4611      	mov	r1, r2
 800b574:	4618      	mov	r0, r3
 800b576:	f004 f989 	bl	800f88c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	2200      	movs	r2, #0
 800b57e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800b582:	2300      	movs	r3, #0
}
 800b584:	4618      	mov	r0, r3
 800b586:	3708      	adds	r7, #8
 800b588:	46bd      	mov	sp, r7
 800b58a:	bd80      	pop	{r7, pc}

0800b58c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800b58c:	b580      	push	{r7, lr}
 800b58e:	b084      	sub	sp, #16
 800b590:	af00      	add	r7, sp, #0
 800b592:	6078      	str	r0, [r7, #4]
 800b594:	4608      	mov	r0, r1
 800b596:	4611      	mov	r1, r2
 800b598:	461a      	mov	r2, r3
 800b59a:	4603      	mov	r3, r0
 800b59c:	70fb      	strb	r3, [r7, #3]
 800b59e:	460b      	mov	r3, r1
 800b5a0:	803b      	strh	r3, [r7, #0]
 800b5a2:	4613      	mov	r3, r2
 800b5a4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800b5aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	da0f      	bge.n	800b5d2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b5b2:	78fb      	ldrb	r3, [r7, #3]
 800b5b4:	f003 020f 	and.w	r2, r3, #15
 800b5b8:	4613      	mov	r3, r2
 800b5ba:	00db      	lsls	r3, r3, #3
 800b5bc:	4413      	add	r3, r2
 800b5be:	009b      	lsls	r3, r3, #2
 800b5c0:	3310      	adds	r3, #16
 800b5c2:	687a      	ldr	r2, [r7, #4]
 800b5c4:	4413      	add	r3, r2
 800b5c6:	3304      	adds	r3, #4
 800b5c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	2201      	movs	r2, #1
 800b5ce:	705a      	strb	r2, [r3, #1]
 800b5d0:	e00f      	b.n	800b5f2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b5d2:	78fb      	ldrb	r3, [r7, #3]
 800b5d4:	f003 020f 	and.w	r2, r3, #15
 800b5d8:	4613      	mov	r3, r2
 800b5da:	00db      	lsls	r3, r3, #3
 800b5dc:	4413      	add	r3, r2
 800b5de:	009b      	lsls	r3, r3, #2
 800b5e0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800b5e4:	687a      	ldr	r2, [r7, #4]
 800b5e6:	4413      	add	r3, r2
 800b5e8:	3304      	adds	r3, #4
 800b5ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	2200      	movs	r2, #0
 800b5f0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800b5f2:	78fb      	ldrb	r3, [r7, #3]
 800b5f4:	f003 030f 	and.w	r3, r3, #15
 800b5f8:	b2da      	uxtb	r2, r3
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800b5fe:	883b      	ldrh	r3, [r7, #0]
 800b600:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	78ba      	ldrb	r2, [r7, #2]
 800b60c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	785b      	ldrb	r3, [r3, #1]
 800b612:	2b00      	cmp	r3, #0
 800b614:	d004      	beq.n	800b620 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	781b      	ldrb	r3, [r3, #0]
 800b61a:	461a      	mov	r2, r3
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800b620:	78bb      	ldrb	r3, [r7, #2]
 800b622:	2b02      	cmp	r3, #2
 800b624:	d102      	bne.n	800b62c <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	2200      	movs	r2, #0
 800b62a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800b632:	2b01      	cmp	r3, #1
 800b634:	d101      	bne.n	800b63a <HAL_PCD_EP_Open+0xae>
 800b636:	2302      	movs	r3, #2
 800b638:	e00e      	b.n	800b658 <HAL_PCD_EP_Open+0xcc>
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	2201      	movs	r2, #1
 800b63e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	68f9      	ldr	r1, [r7, #12]
 800b648:	4618      	mov	r0, r3
 800b64a:	f003 fb09 	bl	800ec60 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	2200      	movs	r2, #0
 800b652:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800b656:	7afb      	ldrb	r3, [r7, #11]
}
 800b658:	4618      	mov	r0, r3
 800b65a:	3710      	adds	r7, #16
 800b65c:	46bd      	mov	sp, r7
 800b65e:	bd80      	pop	{r7, pc}

0800b660 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b660:	b580      	push	{r7, lr}
 800b662:	b084      	sub	sp, #16
 800b664:	af00      	add	r7, sp, #0
 800b666:	6078      	str	r0, [r7, #4]
 800b668:	460b      	mov	r3, r1
 800b66a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800b66c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b670:	2b00      	cmp	r3, #0
 800b672:	da0f      	bge.n	800b694 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b674:	78fb      	ldrb	r3, [r7, #3]
 800b676:	f003 020f 	and.w	r2, r3, #15
 800b67a:	4613      	mov	r3, r2
 800b67c:	00db      	lsls	r3, r3, #3
 800b67e:	4413      	add	r3, r2
 800b680:	009b      	lsls	r3, r3, #2
 800b682:	3310      	adds	r3, #16
 800b684:	687a      	ldr	r2, [r7, #4]
 800b686:	4413      	add	r3, r2
 800b688:	3304      	adds	r3, #4
 800b68a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	2201      	movs	r2, #1
 800b690:	705a      	strb	r2, [r3, #1]
 800b692:	e00f      	b.n	800b6b4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b694:	78fb      	ldrb	r3, [r7, #3]
 800b696:	f003 020f 	and.w	r2, r3, #15
 800b69a:	4613      	mov	r3, r2
 800b69c:	00db      	lsls	r3, r3, #3
 800b69e:	4413      	add	r3, r2
 800b6a0:	009b      	lsls	r3, r3, #2
 800b6a2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800b6a6:	687a      	ldr	r2, [r7, #4]
 800b6a8:	4413      	add	r3, r2
 800b6aa:	3304      	adds	r3, #4
 800b6ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	2200      	movs	r2, #0
 800b6b2:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800b6b4:	78fb      	ldrb	r3, [r7, #3]
 800b6b6:	f003 030f 	and.w	r3, r3, #15
 800b6ba:	b2da      	uxtb	r2, r3
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800b6c6:	2b01      	cmp	r3, #1
 800b6c8:	d101      	bne.n	800b6ce <HAL_PCD_EP_Close+0x6e>
 800b6ca:	2302      	movs	r3, #2
 800b6cc:	e00e      	b.n	800b6ec <HAL_PCD_EP_Close+0x8c>
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	2201      	movs	r2, #1
 800b6d2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	68f9      	ldr	r1, [r7, #12]
 800b6dc:	4618      	mov	r0, r3
 800b6de:	f003 fb47 	bl	800ed70 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	2200      	movs	r2, #0
 800b6e6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800b6ea:	2300      	movs	r3, #0
}
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	3710      	adds	r7, #16
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	bd80      	pop	{r7, pc}

0800b6f4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b086      	sub	sp, #24
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	60f8      	str	r0, [r7, #12]
 800b6fc:	607a      	str	r2, [r7, #4]
 800b6fe:	603b      	str	r3, [r7, #0]
 800b700:	460b      	mov	r3, r1
 800b702:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b704:	7afb      	ldrb	r3, [r7, #11]
 800b706:	f003 020f 	and.w	r2, r3, #15
 800b70a:	4613      	mov	r3, r2
 800b70c:	00db      	lsls	r3, r3, #3
 800b70e:	4413      	add	r3, r2
 800b710:	009b      	lsls	r3, r3, #2
 800b712:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800b716:	68fa      	ldr	r2, [r7, #12]
 800b718:	4413      	add	r3, r2
 800b71a:	3304      	adds	r3, #4
 800b71c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800b71e:	697b      	ldr	r3, [r7, #20]
 800b720:	687a      	ldr	r2, [r7, #4]
 800b722:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800b724:	697b      	ldr	r3, [r7, #20]
 800b726:	683a      	ldr	r2, [r7, #0]
 800b728:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800b72a:	697b      	ldr	r3, [r7, #20]
 800b72c:	2200      	movs	r2, #0
 800b72e:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800b730:	697b      	ldr	r3, [r7, #20]
 800b732:	2200      	movs	r2, #0
 800b734:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b736:	7afb      	ldrb	r3, [r7, #11]
 800b738:	f003 030f 	and.w	r3, r3, #15
 800b73c:	b2da      	uxtb	r2, r3
 800b73e:	697b      	ldr	r3, [r7, #20]
 800b740:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	799b      	ldrb	r3, [r3, #6]
 800b746:	2b01      	cmp	r3, #1
 800b748:	d102      	bne.n	800b750 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800b74a:	687a      	ldr	r2, [r7, #4]
 800b74c:	697b      	ldr	r3, [r7, #20]
 800b74e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	6818      	ldr	r0, [r3, #0]
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	799b      	ldrb	r3, [r3, #6]
 800b758:	461a      	mov	r2, r3
 800b75a:	6979      	ldr	r1, [r7, #20]
 800b75c:	f003 fbe4 	bl	800ef28 <USB_EPStartXfer>

  return HAL_OK;
 800b760:	2300      	movs	r3, #0
}
 800b762:	4618      	mov	r0, r3
 800b764:	3718      	adds	r7, #24
 800b766:	46bd      	mov	sp, r7
 800b768:	bd80      	pop	{r7, pc}

0800b76a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800b76a:	b480      	push	{r7}
 800b76c:	b083      	sub	sp, #12
 800b76e:	af00      	add	r7, sp, #0
 800b770:	6078      	str	r0, [r7, #4]
 800b772:	460b      	mov	r3, r1
 800b774:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800b776:	78fb      	ldrb	r3, [r7, #3]
 800b778:	f003 020f 	and.w	r2, r3, #15
 800b77c:	6879      	ldr	r1, [r7, #4]
 800b77e:	4613      	mov	r3, r2
 800b780:	00db      	lsls	r3, r3, #3
 800b782:	4413      	add	r3, r2
 800b784:	009b      	lsls	r3, r3, #2
 800b786:	440b      	add	r3, r1
 800b788:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800b78c:	681b      	ldr	r3, [r3, #0]
}
 800b78e:	4618      	mov	r0, r3
 800b790:	370c      	adds	r7, #12
 800b792:	46bd      	mov	sp, r7
 800b794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b798:	4770      	bx	lr

0800b79a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800b79a:	b580      	push	{r7, lr}
 800b79c:	b086      	sub	sp, #24
 800b79e:	af00      	add	r7, sp, #0
 800b7a0:	60f8      	str	r0, [r7, #12]
 800b7a2:	607a      	str	r2, [r7, #4]
 800b7a4:	603b      	str	r3, [r7, #0]
 800b7a6:	460b      	mov	r3, r1
 800b7a8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b7aa:	7afb      	ldrb	r3, [r7, #11]
 800b7ac:	f003 020f 	and.w	r2, r3, #15
 800b7b0:	4613      	mov	r3, r2
 800b7b2:	00db      	lsls	r3, r3, #3
 800b7b4:	4413      	add	r3, r2
 800b7b6:	009b      	lsls	r3, r3, #2
 800b7b8:	3310      	adds	r3, #16
 800b7ba:	68fa      	ldr	r2, [r7, #12]
 800b7bc:	4413      	add	r3, r2
 800b7be:	3304      	adds	r3, #4
 800b7c0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800b7c2:	697b      	ldr	r3, [r7, #20]
 800b7c4:	687a      	ldr	r2, [r7, #4]
 800b7c6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800b7c8:	697b      	ldr	r3, [r7, #20]
 800b7ca:	683a      	ldr	r2, [r7, #0]
 800b7cc:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800b7ce:	697b      	ldr	r3, [r7, #20]
 800b7d0:	2200      	movs	r2, #0
 800b7d2:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800b7d4:	697b      	ldr	r3, [r7, #20]
 800b7d6:	2201      	movs	r2, #1
 800b7d8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b7da:	7afb      	ldrb	r3, [r7, #11]
 800b7dc:	f003 030f 	and.w	r3, r3, #15
 800b7e0:	b2da      	uxtb	r2, r3
 800b7e2:	697b      	ldr	r3, [r7, #20]
 800b7e4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	799b      	ldrb	r3, [r3, #6]
 800b7ea:	2b01      	cmp	r3, #1
 800b7ec:	d102      	bne.n	800b7f4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800b7ee:	687a      	ldr	r2, [r7, #4]
 800b7f0:	697b      	ldr	r3, [r7, #20]
 800b7f2:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	6818      	ldr	r0, [r3, #0]
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	799b      	ldrb	r3, [r3, #6]
 800b7fc:	461a      	mov	r2, r3
 800b7fe:	6979      	ldr	r1, [r7, #20]
 800b800:	f003 fb92 	bl	800ef28 <USB_EPStartXfer>

  return HAL_OK;
 800b804:	2300      	movs	r3, #0
}
 800b806:	4618      	mov	r0, r3
 800b808:	3718      	adds	r7, #24
 800b80a:	46bd      	mov	sp, r7
 800b80c:	bd80      	pop	{r7, pc}

0800b80e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b80e:	b580      	push	{r7, lr}
 800b810:	b084      	sub	sp, #16
 800b812:	af00      	add	r7, sp, #0
 800b814:	6078      	str	r0, [r7, #4]
 800b816:	460b      	mov	r3, r1
 800b818:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800b81a:	78fb      	ldrb	r3, [r7, #3]
 800b81c:	f003 030f 	and.w	r3, r3, #15
 800b820:	687a      	ldr	r2, [r7, #4]
 800b822:	7912      	ldrb	r2, [r2, #4]
 800b824:	4293      	cmp	r3, r2
 800b826:	d901      	bls.n	800b82c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800b828:	2301      	movs	r3, #1
 800b82a:	e04f      	b.n	800b8cc <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800b82c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b830:	2b00      	cmp	r3, #0
 800b832:	da0f      	bge.n	800b854 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b834:	78fb      	ldrb	r3, [r7, #3]
 800b836:	f003 020f 	and.w	r2, r3, #15
 800b83a:	4613      	mov	r3, r2
 800b83c:	00db      	lsls	r3, r3, #3
 800b83e:	4413      	add	r3, r2
 800b840:	009b      	lsls	r3, r3, #2
 800b842:	3310      	adds	r3, #16
 800b844:	687a      	ldr	r2, [r7, #4]
 800b846:	4413      	add	r3, r2
 800b848:	3304      	adds	r3, #4
 800b84a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	2201      	movs	r2, #1
 800b850:	705a      	strb	r2, [r3, #1]
 800b852:	e00d      	b.n	800b870 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800b854:	78fa      	ldrb	r2, [r7, #3]
 800b856:	4613      	mov	r3, r2
 800b858:	00db      	lsls	r3, r3, #3
 800b85a:	4413      	add	r3, r2
 800b85c:	009b      	lsls	r3, r3, #2
 800b85e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800b862:	687a      	ldr	r2, [r7, #4]
 800b864:	4413      	add	r3, r2
 800b866:	3304      	adds	r3, #4
 800b868:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	2200      	movs	r2, #0
 800b86e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	2201      	movs	r2, #1
 800b874:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b876:	78fb      	ldrb	r3, [r7, #3]
 800b878:	f003 030f 	and.w	r3, r3, #15
 800b87c:	b2da      	uxtb	r2, r3
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800b888:	2b01      	cmp	r3, #1
 800b88a:	d101      	bne.n	800b890 <HAL_PCD_EP_SetStall+0x82>
 800b88c:	2302      	movs	r3, #2
 800b88e:	e01d      	b.n	800b8cc <HAL_PCD_EP_SetStall+0xbe>
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	2201      	movs	r2, #1
 800b894:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	68f9      	ldr	r1, [r7, #12]
 800b89e:	4618      	mov	r0, r3
 800b8a0:	f003 ff20 	bl	800f6e4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800b8a4:	78fb      	ldrb	r3, [r7, #3]
 800b8a6:	f003 030f 	and.w	r3, r3, #15
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d109      	bne.n	800b8c2 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	6818      	ldr	r0, [r3, #0]
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	7999      	ldrb	r1, [r3, #6]
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800b8bc:	461a      	mov	r2, r3
 800b8be:	f004 f911 	bl	800fae4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	2200      	movs	r2, #0
 800b8c6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800b8ca:	2300      	movs	r3, #0
}
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	3710      	adds	r7, #16
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	bd80      	pop	{r7, pc}

0800b8d4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b084      	sub	sp, #16
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]
 800b8dc:	460b      	mov	r3, r1
 800b8de:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800b8e0:	78fb      	ldrb	r3, [r7, #3]
 800b8e2:	f003 030f 	and.w	r3, r3, #15
 800b8e6:	687a      	ldr	r2, [r7, #4]
 800b8e8:	7912      	ldrb	r2, [r2, #4]
 800b8ea:	4293      	cmp	r3, r2
 800b8ec:	d901      	bls.n	800b8f2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800b8ee:	2301      	movs	r3, #1
 800b8f0:	e042      	b.n	800b978 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800b8f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	da0f      	bge.n	800b91a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b8fa:	78fb      	ldrb	r3, [r7, #3]
 800b8fc:	f003 020f 	and.w	r2, r3, #15
 800b900:	4613      	mov	r3, r2
 800b902:	00db      	lsls	r3, r3, #3
 800b904:	4413      	add	r3, r2
 800b906:	009b      	lsls	r3, r3, #2
 800b908:	3310      	adds	r3, #16
 800b90a:	687a      	ldr	r2, [r7, #4]
 800b90c:	4413      	add	r3, r2
 800b90e:	3304      	adds	r3, #4
 800b910:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	2201      	movs	r2, #1
 800b916:	705a      	strb	r2, [r3, #1]
 800b918:	e00f      	b.n	800b93a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b91a:	78fb      	ldrb	r3, [r7, #3]
 800b91c:	f003 020f 	and.w	r2, r3, #15
 800b920:	4613      	mov	r3, r2
 800b922:	00db      	lsls	r3, r3, #3
 800b924:	4413      	add	r3, r2
 800b926:	009b      	lsls	r3, r3, #2
 800b928:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800b92c:	687a      	ldr	r2, [r7, #4]
 800b92e:	4413      	add	r3, r2
 800b930:	3304      	adds	r3, #4
 800b932:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	2200      	movs	r2, #0
 800b938:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	2200      	movs	r2, #0
 800b93e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b940:	78fb      	ldrb	r3, [r7, #3]
 800b942:	f003 030f 	and.w	r3, r3, #15
 800b946:	b2da      	uxtb	r2, r3
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800b952:	2b01      	cmp	r3, #1
 800b954:	d101      	bne.n	800b95a <HAL_PCD_EP_ClrStall+0x86>
 800b956:	2302      	movs	r3, #2
 800b958:	e00e      	b.n	800b978 <HAL_PCD_EP_ClrStall+0xa4>
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	2201      	movs	r2, #1
 800b95e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	68f9      	ldr	r1, [r7, #12]
 800b968:	4618      	mov	r0, r3
 800b96a:	f003 ff29 	bl	800f7c0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	2200      	movs	r2, #0
 800b972:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800b976:	2300      	movs	r3, #0
}
 800b978:	4618      	mov	r0, r3
 800b97a:	3710      	adds	r7, #16
 800b97c:	46bd      	mov	sp, r7
 800b97e:	bd80      	pop	{r7, pc}

0800b980 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b980:	b580      	push	{r7, lr}
 800b982:	b084      	sub	sp, #16
 800b984:	af00      	add	r7, sp, #0
 800b986:	6078      	str	r0, [r7, #4]
 800b988:	460b      	mov	r3, r1
 800b98a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800b98c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b990:	2b00      	cmp	r3, #0
 800b992:	da0c      	bge.n	800b9ae <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b994:	78fb      	ldrb	r3, [r7, #3]
 800b996:	f003 020f 	and.w	r2, r3, #15
 800b99a:	4613      	mov	r3, r2
 800b99c:	00db      	lsls	r3, r3, #3
 800b99e:	4413      	add	r3, r2
 800b9a0:	009b      	lsls	r3, r3, #2
 800b9a2:	3310      	adds	r3, #16
 800b9a4:	687a      	ldr	r2, [r7, #4]
 800b9a6:	4413      	add	r3, r2
 800b9a8:	3304      	adds	r3, #4
 800b9aa:	60fb      	str	r3, [r7, #12]
 800b9ac:	e00c      	b.n	800b9c8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b9ae:	78fb      	ldrb	r3, [r7, #3]
 800b9b0:	f003 020f 	and.w	r2, r3, #15
 800b9b4:	4613      	mov	r3, r2
 800b9b6:	00db      	lsls	r3, r3, #3
 800b9b8:	4413      	add	r3, r2
 800b9ba:	009b      	lsls	r3, r3, #2
 800b9bc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800b9c0:	687a      	ldr	r2, [r7, #4]
 800b9c2:	4413      	add	r3, r2
 800b9c4:	3304      	adds	r3, #4
 800b9c6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	68f9      	ldr	r1, [r7, #12]
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	f003 fd48 	bl	800f464 <USB_EPStopXfer>
 800b9d4:	4603      	mov	r3, r0
 800b9d6:	72fb      	strb	r3, [r7, #11]

  return ret;
 800b9d8:	7afb      	ldrb	r3, [r7, #11]
}
 800b9da:	4618      	mov	r0, r3
 800b9dc:	3710      	adds	r7, #16
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	bd80      	pop	{r7, pc}

0800b9e2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800b9e2:	b580      	push	{r7, lr}
 800b9e4:	b08a      	sub	sp, #40	@ 0x28
 800b9e6:	af02      	add	r7, sp, #8
 800b9e8:	6078      	str	r0, [r7, #4]
 800b9ea:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b9f2:	697b      	ldr	r3, [r7, #20]
 800b9f4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800b9f6:	683a      	ldr	r2, [r7, #0]
 800b9f8:	4613      	mov	r3, r2
 800b9fa:	00db      	lsls	r3, r3, #3
 800b9fc:	4413      	add	r3, r2
 800b9fe:	009b      	lsls	r3, r3, #2
 800ba00:	3310      	adds	r3, #16
 800ba02:	687a      	ldr	r2, [r7, #4]
 800ba04:	4413      	add	r3, r2
 800ba06:	3304      	adds	r3, #4
 800ba08:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	695a      	ldr	r2, [r3, #20]
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	691b      	ldr	r3, [r3, #16]
 800ba12:	429a      	cmp	r2, r3
 800ba14:	d901      	bls.n	800ba1a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800ba16:	2301      	movs	r3, #1
 800ba18:	e06b      	b.n	800baf2 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	691a      	ldr	r2, [r3, #16]
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	695b      	ldr	r3, [r3, #20]
 800ba22:	1ad3      	subs	r3, r2, r3
 800ba24:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	689b      	ldr	r3, [r3, #8]
 800ba2a:	69fa      	ldr	r2, [r7, #28]
 800ba2c:	429a      	cmp	r2, r3
 800ba2e:	d902      	bls.n	800ba36 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	689b      	ldr	r3, [r3, #8]
 800ba34:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800ba36:	69fb      	ldr	r3, [r7, #28]
 800ba38:	3303      	adds	r3, #3
 800ba3a:	089b      	lsrs	r3, r3, #2
 800ba3c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800ba3e:	e02a      	b.n	800ba96 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	691a      	ldr	r2, [r3, #16]
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	695b      	ldr	r3, [r3, #20]
 800ba48:	1ad3      	subs	r3, r2, r3
 800ba4a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	689b      	ldr	r3, [r3, #8]
 800ba50:	69fa      	ldr	r2, [r7, #28]
 800ba52:	429a      	cmp	r2, r3
 800ba54:	d902      	bls.n	800ba5c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	689b      	ldr	r3, [r3, #8]
 800ba5a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800ba5c:	69fb      	ldr	r3, [r7, #28]
 800ba5e:	3303      	adds	r3, #3
 800ba60:	089b      	lsrs	r3, r3, #2
 800ba62:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	68d9      	ldr	r1, [r3, #12]
 800ba68:	683b      	ldr	r3, [r7, #0]
 800ba6a:	b2da      	uxtb	r2, r3
 800ba6c:	69fb      	ldr	r3, [r7, #28]
 800ba6e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800ba74:	9300      	str	r3, [sp, #0]
 800ba76:	4603      	mov	r3, r0
 800ba78:	6978      	ldr	r0, [r7, #20]
 800ba7a:	f003 fd9d 	bl	800f5b8 <USB_WritePacket>

    ep->xfer_buff  += len;
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	68da      	ldr	r2, [r3, #12]
 800ba82:	69fb      	ldr	r3, [r7, #28]
 800ba84:	441a      	add	r2, r3
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	695a      	ldr	r2, [r3, #20]
 800ba8e:	69fb      	ldr	r3, [r7, #28]
 800ba90:	441a      	add	r2, r3
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800ba96:	683b      	ldr	r3, [r7, #0]
 800ba98:	015a      	lsls	r2, r3, #5
 800ba9a:	693b      	ldr	r3, [r7, #16]
 800ba9c:	4413      	add	r3, r2
 800ba9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800baa2:	699b      	ldr	r3, [r3, #24]
 800baa4:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800baa6:	69ba      	ldr	r2, [r7, #24]
 800baa8:	429a      	cmp	r2, r3
 800baaa:	d809      	bhi.n	800bac0 <PCD_WriteEmptyTxFifo+0xde>
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	695a      	ldr	r2, [r3, #20]
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800bab4:	429a      	cmp	r2, r3
 800bab6:	d203      	bcs.n	800bac0 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	691b      	ldr	r3, [r3, #16]
 800babc:	2b00      	cmp	r3, #0
 800babe:	d1bf      	bne.n	800ba40 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	691a      	ldr	r2, [r3, #16]
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	695b      	ldr	r3, [r3, #20]
 800bac8:	429a      	cmp	r2, r3
 800baca:	d811      	bhi.n	800baf0 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800bacc:	683b      	ldr	r3, [r7, #0]
 800bace:	f003 030f 	and.w	r3, r3, #15
 800bad2:	2201      	movs	r2, #1
 800bad4:	fa02 f303 	lsl.w	r3, r2, r3
 800bad8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800bada:	693b      	ldr	r3, [r7, #16]
 800badc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bae0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bae2:	68bb      	ldr	r3, [r7, #8]
 800bae4:	43db      	mvns	r3, r3
 800bae6:	6939      	ldr	r1, [r7, #16]
 800bae8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800baec:	4013      	ands	r3, r2
 800baee:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800baf0:	2300      	movs	r3, #0
}
 800baf2:	4618      	mov	r0, r3
 800baf4:	3720      	adds	r7, #32
 800baf6:	46bd      	mov	sp, r7
 800baf8:	bd80      	pop	{r7, pc}
	...

0800bafc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800bafc:	b580      	push	{r7, lr}
 800bafe:	b088      	sub	sp, #32
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	6078      	str	r0, [r7, #4]
 800bb04:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb0c:	69fb      	ldr	r3, [r7, #28]
 800bb0e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800bb10:	69fb      	ldr	r3, [r7, #28]
 800bb12:	333c      	adds	r3, #60	@ 0x3c
 800bb14:	3304      	adds	r3, #4
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800bb1a:	683b      	ldr	r3, [r7, #0]
 800bb1c:	015a      	lsls	r2, r3, #5
 800bb1e:	69bb      	ldr	r3, [r7, #24]
 800bb20:	4413      	add	r3, r2
 800bb22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bb26:	689b      	ldr	r3, [r3, #8]
 800bb28:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	799b      	ldrb	r3, [r3, #6]
 800bb2e:	2b01      	cmp	r3, #1
 800bb30:	d17b      	bne.n	800bc2a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800bb32:	693b      	ldr	r3, [r7, #16]
 800bb34:	f003 0308 	and.w	r3, r3, #8
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d015      	beq.n	800bb68 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bb3c:	697b      	ldr	r3, [r7, #20]
 800bb3e:	4a61      	ldr	r2, [pc, #388]	@ (800bcc4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800bb40:	4293      	cmp	r3, r2
 800bb42:	f240 80b9 	bls.w	800bcb8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800bb46:	693b      	ldr	r3, [r7, #16]
 800bb48:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	f000 80b3 	beq.w	800bcb8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800bb52:	683b      	ldr	r3, [r7, #0]
 800bb54:	015a      	lsls	r2, r3, #5
 800bb56:	69bb      	ldr	r3, [r7, #24]
 800bb58:	4413      	add	r3, r2
 800bb5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bb5e:	461a      	mov	r2, r3
 800bb60:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bb64:	6093      	str	r3, [r2, #8]
 800bb66:	e0a7      	b.n	800bcb8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800bb68:	693b      	ldr	r3, [r7, #16]
 800bb6a:	f003 0320 	and.w	r3, r3, #32
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d009      	beq.n	800bb86 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800bb72:	683b      	ldr	r3, [r7, #0]
 800bb74:	015a      	lsls	r2, r3, #5
 800bb76:	69bb      	ldr	r3, [r7, #24]
 800bb78:	4413      	add	r3, r2
 800bb7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bb7e:	461a      	mov	r2, r3
 800bb80:	2320      	movs	r3, #32
 800bb82:	6093      	str	r3, [r2, #8]
 800bb84:	e098      	b.n	800bcb8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800bb86:	693b      	ldr	r3, [r7, #16]
 800bb88:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	f040 8093 	bne.w	800bcb8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bb92:	697b      	ldr	r3, [r7, #20]
 800bb94:	4a4b      	ldr	r2, [pc, #300]	@ (800bcc4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800bb96:	4293      	cmp	r3, r2
 800bb98:	d90f      	bls.n	800bbba <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800bb9a:	693b      	ldr	r3, [r7, #16]
 800bb9c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d00a      	beq.n	800bbba <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800bba4:	683b      	ldr	r3, [r7, #0]
 800bba6:	015a      	lsls	r2, r3, #5
 800bba8:	69bb      	ldr	r3, [r7, #24]
 800bbaa:	4413      	add	r3, r2
 800bbac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bbb0:	461a      	mov	r2, r3
 800bbb2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bbb6:	6093      	str	r3, [r2, #8]
 800bbb8:	e07e      	b.n	800bcb8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800bbba:	683a      	ldr	r2, [r7, #0]
 800bbbc:	4613      	mov	r3, r2
 800bbbe:	00db      	lsls	r3, r3, #3
 800bbc0:	4413      	add	r3, r2
 800bbc2:	009b      	lsls	r3, r3, #2
 800bbc4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800bbc8:	687a      	ldr	r2, [r7, #4]
 800bbca:	4413      	add	r3, r2
 800bbcc:	3304      	adds	r3, #4
 800bbce:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	6a1a      	ldr	r2, [r3, #32]
 800bbd4:	683b      	ldr	r3, [r7, #0]
 800bbd6:	0159      	lsls	r1, r3, #5
 800bbd8:	69bb      	ldr	r3, [r7, #24]
 800bbda:	440b      	add	r3, r1
 800bbdc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bbe0:	691b      	ldr	r3, [r3, #16]
 800bbe2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bbe6:	1ad2      	subs	r2, r2, r3
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800bbec:	683b      	ldr	r3, [r7, #0]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d114      	bne.n	800bc1c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	691b      	ldr	r3, [r3, #16]
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d109      	bne.n	800bc0e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	6818      	ldr	r0, [r3, #0]
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800bc04:	461a      	mov	r2, r3
 800bc06:	2101      	movs	r1, #1
 800bc08:	f003 ff6c 	bl	800fae4 <USB_EP0_OutStart>
 800bc0c:	e006      	b.n	800bc1c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	68da      	ldr	r2, [r3, #12]
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	695b      	ldr	r3, [r3, #20]
 800bc16:	441a      	add	r2, r3
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800bc1c:	683b      	ldr	r3, [r7, #0]
 800bc1e:	b2db      	uxtb	r3, r3
 800bc20:	4619      	mov	r1, r3
 800bc22:	6878      	ldr	r0, [r7, #4]
 800bc24:	f006 fa98 	bl	8012158 <HAL_PCD_DataOutStageCallback>
 800bc28:	e046      	b.n	800bcb8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800bc2a:	697b      	ldr	r3, [r7, #20]
 800bc2c:	4a26      	ldr	r2, [pc, #152]	@ (800bcc8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800bc2e:	4293      	cmp	r3, r2
 800bc30:	d124      	bne.n	800bc7c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800bc32:	693b      	ldr	r3, [r7, #16]
 800bc34:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d00a      	beq.n	800bc52 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800bc3c:	683b      	ldr	r3, [r7, #0]
 800bc3e:	015a      	lsls	r2, r3, #5
 800bc40:	69bb      	ldr	r3, [r7, #24]
 800bc42:	4413      	add	r3, r2
 800bc44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bc48:	461a      	mov	r2, r3
 800bc4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bc4e:	6093      	str	r3, [r2, #8]
 800bc50:	e032      	b.n	800bcb8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800bc52:	693b      	ldr	r3, [r7, #16]
 800bc54:	f003 0320 	and.w	r3, r3, #32
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d008      	beq.n	800bc6e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800bc5c:	683b      	ldr	r3, [r7, #0]
 800bc5e:	015a      	lsls	r2, r3, #5
 800bc60:	69bb      	ldr	r3, [r7, #24]
 800bc62:	4413      	add	r3, r2
 800bc64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bc68:	461a      	mov	r2, r3
 800bc6a:	2320      	movs	r3, #32
 800bc6c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800bc6e:	683b      	ldr	r3, [r7, #0]
 800bc70:	b2db      	uxtb	r3, r3
 800bc72:	4619      	mov	r1, r3
 800bc74:	6878      	ldr	r0, [r7, #4]
 800bc76:	f006 fa6f 	bl	8012158 <HAL_PCD_DataOutStageCallback>
 800bc7a:	e01d      	b.n	800bcb8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800bc7c:	683b      	ldr	r3, [r7, #0]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d114      	bne.n	800bcac <PCD_EP_OutXfrComplete_int+0x1b0>
 800bc82:	6879      	ldr	r1, [r7, #4]
 800bc84:	683a      	ldr	r2, [r7, #0]
 800bc86:	4613      	mov	r3, r2
 800bc88:	00db      	lsls	r3, r3, #3
 800bc8a:	4413      	add	r3, r2
 800bc8c:	009b      	lsls	r3, r3, #2
 800bc8e:	440b      	add	r3, r1
 800bc90:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d108      	bne.n	800bcac <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	6818      	ldr	r0, [r3, #0]
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800bca4:	461a      	mov	r2, r3
 800bca6:	2100      	movs	r1, #0
 800bca8:	f003 ff1c 	bl	800fae4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800bcac:	683b      	ldr	r3, [r7, #0]
 800bcae:	b2db      	uxtb	r3, r3
 800bcb0:	4619      	mov	r1, r3
 800bcb2:	6878      	ldr	r0, [r7, #4]
 800bcb4:	f006 fa50 	bl	8012158 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800bcb8:	2300      	movs	r3, #0
}
 800bcba:	4618      	mov	r0, r3
 800bcbc:	3720      	adds	r7, #32
 800bcbe:	46bd      	mov	sp, r7
 800bcc0:	bd80      	pop	{r7, pc}
 800bcc2:	bf00      	nop
 800bcc4:	4f54300a 	.word	0x4f54300a
 800bcc8:	4f54310a 	.word	0x4f54310a

0800bccc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800bccc:	b580      	push	{r7, lr}
 800bcce:	b086      	sub	sp, #24
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	6078      	str	r0, [r7, #4]
 800bcd4:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bcdc:	697b      	ldr	r3, [r7, #20]
 800bcde:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800bce0:	697b      	ldr	r3, [r7, #20]
 800bce2:	333c      	adds	r3, #60	@ 0x3c
 800bce4:	3304      	adds	r3, #4
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800bcea:	683b      	ldr	r3, [r7, #0]
 800bcec:	015a      	lsls	r2, r3, #5
 800bcee:	693b      	ldr	r3, [r7, #16]
 800bcf0:	4413      	add	r3, r2
 800bcf2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bcf6:	689b      	ldr	r3, [r3, #8]
 800bcf8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	4a15      	ldr	r2, [pc, #84]	@ (800bd54 <PCD_EP_OutSetupPacket_int+0x88>)
 800bcfe:	4293      	cmp	r3, r2
 800bd00:	d90e      	bls.n	800bd20 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800bd02:	68bb      	ldr	r3, [r7, #8]
 800bd04:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d009      	beq.n	800bd20 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800bd0c:	683b      	ldr	r3, [r7, #0]
 800bd0e:	015a      	lsls	r2, r3, #5
 800bd10:	693b      	ldr	r3, [r7, #16]
 800bd12:	4413      	add	r3, r2
 800bd14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bd18:	461a      	mov	r2, r3
 800bd1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bd1e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800bd20:	6878      	ldr	r0, [r7, #4]
 800bd22:	f006 fa07 	bl	8012134 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	4a0a      	ldr	r2, [pc, #40]	@ (800bd54 <PCD_EP_OutSetupPacket_int+0x88>)
 800bd2a:	4293      	cmp	r3, r2
 800bd2c:	d90c      	bls.n	800bd48 <PCD_EP_OutSetupPacket_int+0x7c>
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	799b      	ldrb	r3, [r3, #6]
 800bd32:	2b01      	cmp	r3, #1
 800bd34:	d108      	bne.n	800bd48 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	6818      	ldr	r0, [r3, #0]
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800bd40:	461a      	mov	r2, r3
 800bd42:	2101      	movs	r1, #1
 800bd44:	f003 fece 	bl	800fae4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800bd48:	2300      	movs	r3, #0
}
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	3718      	adds	r7, #24
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	bd80      	pop	{r7, pc}
 800bd52:	bf00      	nop
 800bd54:	4f54300a 	.word	0x4f54300a

0800bd58 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800bd58:	b480      	push	{r7}
 800bd5a:	b085      	sub	sp, #20
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	6078      	str	r0, [r7, #4]
 800bd60:	460b      	mov	r3, r1
 800bd62:	70fb      	strb	r3, [r7, #3]
 800bd64:	4613      	mov	r3, r2
 800bd66:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd6e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800bd70:	78fb      	ldrb	r3, [r7, #3]
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d107      	bne.n	800bd86 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800bd76:	883b      	ldrh	r3, [r7, #0]
 800bd78:	0419      	lsls	r1, r3, #16
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	68ba      	ldr	r2, [r7, #8]
 800bd80:	430a      	orrs	r2, r1
 800bd82:	629a      	str	r2, [r3, #40]	@ 0x28
 800bd84:	e028      	b.n	800bdd8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd8c:	0c1b      	lsrs	r3, r3, #16
 800bd8e:	68ba      	ldr	r2, [r7, #8]
 800bd90:	4413      	add	r3, r2
 800bd92:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800bd94:	2300      	movs	r3, #0
 800bd96:	73fb      	strb	r3, [r7, #15]
 800bd98:	e00d      	b.n	800bdb6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	681a      	ldr	r2, [r3, #0]
 800bd9e:	7bfb      	ldrb	r3, [r7, #15]
 800bda0:	3340      	adds	r3, #64	@ 0x40
 800bda2:	009b      	lsls	r3, r3, #2
 800bda4:	4413      	add	r3, r2
 800bda6:	685b      	ldr	r3, [r3, #4]
 800bda8:	0c1b      	lsrs	r3, r3, #16
 800bdaa:	68ba      	ldr	r2, [r7, #8]
 800bdac:	4413      	add	r3, r2
 800bdae:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800bdb0:	7bfb      	ldrb	r3, [r7, #15]
 800bdb2:	3301      	adds	r3, #1
 800bdb4:	73fb      	strb	r3, [r7, #15]
 800bdb6:	7bfa      	ldrb	r2, [r7, #15]
 800bdb8:	78fb      	ldrb	r3, [r7, #3]
 800bdba:	3b01      	subs	r3, #1
 800bdbc:	429a      	cmp	r2, r3
 800bdbe:	d3ec      	bcc.n	800bd9a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800bdc0:	883b      	ldrh	r3, [r7, #0]
 800bdc2:	0418      	lsls	r0, r3, #16
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	6819      	ldr	r1, [r3, #0]
 800bdc8:	78fb      	ldrb	r3, [r7, #3]
 800bdca:	3b01      	subs	r3, #1
 800bdcc:	68ba      	ldr	r2, [r7, #8]
 800bdce:	4302      	orrs	r2, r0
 800bdd0:	3340      	adds	r3, #64	@ 0x40
 800bdd2:	009b      	lsls	r3, r3, #2
 800bdd4:	440b      	add	r3, r1
 800bdd6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800bdd8:	2300      	movs	r3, #0
}
 800bdda:	4618      	mov	r0, r3
 800bddc:	3714      	adds	r7, #20
 800bdde:	46bd      	mov	sp, r7
 800bde0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde4:	4770      	bx	lr

0800bde6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800bde6:	b480      	push	{r7}
 800bde8:	b083      	sub	sp, #12
 800bdea:	af00      	add	r7, sp, #0
 800bdec:	6078      	str	r0, [r7, #4]
 800bdee:	460b      	mov	r3, r1
 800bdf0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	887a      	ldrh	r2, [r7, #2]
 800bdf8:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800bdfa:	2300      	movs	r3, #0
}
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	370c      	adds	r7, #12
 800be00:	46bd      	mov	sp, r7
 800be02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be06:	4770      	bx	lr

0800be08 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800be08:	b480      	push	{r7}
 800be0a:	b083      	sub	sp, #12
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	6078      	str	r0, [r7, #4]
 800be10:	460b      	mov	r3, r1
 800be12:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800be14:	bf00      	nop
 800be16:	370c      	adds	r7, #12
 800be18:	46bd      	mov	sp, r7
 800be1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be1e:	4770      	bx	lr

0800be20 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800be20:	b580      	push	{r7, lr}
 800be22:	b086      	sub	sp, #24
 800be24:	af00      	add	r7, sp, #0
 800be26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d101      	bne.n	800be32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800be2e:	2301      	movs	r3, #1
 800be30:	e267      	b.n	800c302 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	f003 0301 	and.w	r3, r3, #1
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d075      	beq.n	800bf2a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800be3e:	4b88      	ldr	r3, [pc, #544]	@ (800c060 <HAL_RCC_OscConfig+0x240>)
 800be40:	689b      	ldr	r3, [r3, #8]
 800be42:	f003 030c 	and.w	r3, r3, #12
 800be46:	2b04      	cmp	r3, #4
 800be48:	d00c      	beq.n	800be64 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800be4a:	4b85      	ldr	r3, [pc, #532]	@ (800c060 <HAL_RCC_OscConfig+0x240>)
 800be4c:	689b      	ldr	r3, [r3, #8]
 800be4e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800be52:	2b08      	cmp	r3, #8
 800be54:	d112      	bne.n	800be7c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800be56:	4b82      	ldr	r3, [pc, #520]	@ (800c060 <HAL_RCC_OscConfig+0x240>)
 800be58:	685b      	ldr	r3, [r3, #4]
 800be5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800be5e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800be62:	d10b      	bne.n	800be7c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800be64:	4b7e      	ldr	r3, [pc, #504]	@ (800c060 <HAL_RCC_OscConfig+0x240>)
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d05b      	beq.n	800bf28 <HAL_RCC_OscConfig+0x108>
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	685b      	ldr	r3, [r3, #4]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d157      	bne.n	800bf28 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800be78:	2301      	movs	r3, #1
 800be7a:	e242      	b.n	800c302 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	685b      	ldr	r3, [r3, #4]
 800be80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800be84:	d106      	bne.n	800be94 <HAL_RCC_OscConfig+0x74>
 800be86:	4b76      	ldr	r3, [pc, #472]	@ (800c060 <HAL_RCC_OscConfig+0x240>)
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	4a75      	ldr	r2, [pc, #468]	@ (800c060 <HAL_RCC_OscConfig+0x240>)
 800be8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800be90:	6013      	str	r3, [r2, #0]
 800be92:	e01d      	b.n	800bed0 <HAL_RCC_OscConfig+0xb0>
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	685b      	ldr	r3, [r3, #4]
 800be98:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800be9c:	d10c      	bne.n	800beb8 <HAL_RCC_OscConfig+0x98>
 800be9e:	4b70      	ldr	r3, [pc, #448]	@ (800c060 <HAL_RCC_OscConfig+0x240>)
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	4a6f      	ldr	r2, [pc, #444]	@ (800c060 <HAL_RCC_OscConfig+0x240>)
 800bea4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800bea8:	6013      	str	r3, [r2, #0]
 800beaa:	4b6d      	ldr	r3, [pc, #436]	@ (800c060 <HAL_RCC_OscConfig+0x240>)
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	4a6c      	ldr	r2, [pc, #432]	@ (800c060 <HAL_RCC_OscConfig+0x240>)
 800beb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800beb4:	6013      	str	r3, [r2, #0]
 800beb6:	e00b      	b.n	800bed0 <HAL_RCC_OscConfig+0xb0>
 800beb8:	4b69      	ldr	r3, [pc, #420]	@ (800c060 <HAL_RCC_OscConfig+0x240>)
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	4a68      	ldr	r2, [pc, #416]	@ (800c060 <HAL_RCC_OscConfig+0x240>)
 800bebe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bec2:	6013      	str	r3, [r2, #0]
 800bec4:	4b66      	ldr	r3, [pc, #408]	@ (800c060 <HAL_RCC_OscConfig+0x240>)
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	4a65      	ldr	r2, [pc, #404]	@ (800c060 <HAL_RCC_OscConfig+0x240>)
 800beca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800bece:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	685b      	ldr	r3, [r3, #4]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d013      	beq.n	800bf00 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bed8:	f7f9 fd14 	bl	8005904 <HAL_GetTick>
 800bedc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bede:	e008      	b.n	800bef2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bee0:	f7f9 fd10 	bl	8005904 <HAL_GetTick>
 800bee4:	4602      	mov	r2, r0
 800bee6:	693b      	ldr	r3, [r7, #16]
 800bee8:	1ad3      	subs	r3, r2, r3
 800beea:	2b64      	cmp	r3, #100	@ 0x64
 800beec:	d901      	bls.n	800bef2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800beee:	2303      	movs	r3, #3
 800bef0:	e207      	b.n	800c302 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bef2:	4b5b      	ldr	r3, [pc, #364]	@ (800c060 <HAL_RCC_OscConfig+0x240>)
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800befa:	2b00      	cmp	r3, #0
 800befc:	d0f0      	beq.n	800bee0 <HAL_RCC_OscConfig+0xc0>
 800befe:	e014      	b.n	800bf2a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bf00:	f7f9 fd00 	bl	8005904 <HAL_GetTick>
 800bf04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800bf06:	e008      	b.n	800bf1a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bf08:	f7f9 fcfc 	bl	8005904 <HAL_GetTick>
 800bf0c:	4602      	mov	r2, r0
 800bf0e:	693b      	ldr	r3, [r7, #16]
 800bf10:	1ad3      	subs	r3, r2, r3
 800bf12:	2b64      	cmp	r3, #100	@ 0x64
 800bf14:	d901      	bls.n	800bf1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800bf16:	2303      	movs	r3, #3
 800bf18:	e1f3      	b.n	800c302 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800bf1a:	4b51      	ldr	r3, [pc, #324]	@ (800c060 <HAL_RCC_OscConfig+0x240>)
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d1f0      	bne.n	800bf08 <HAL_RCC_OscConfig+0xe8>
 800bf26:	e000      	b.n	800bf2a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bf28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	f003 0302 	and.w	r3, r3, #2
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d063      	beq.n	800bffe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800bf36:	4b4a      	ldr	r3, [pc, #296]	@ (800c060 <HAL_RCC_OscConfig+0x240>)
 800bf38:	689b      	ldr	r3, [r3, #8]
 800bf3a:	f003 030c 	and.w	r3, r3, #12
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d00b      	beq.n	800bf5a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800bf42:	4b47      	ldr	r3, [pc, #284]	@ (800c060 <HAL_RCC_OscConfig+0x240>)
 800bf44:	689b      	ldr	r3, [r3, #8]
 800bf46:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800bf4a:	2b08      	cmp	r3, #8
 800bf4c:	d11c      	bne.n	800bf88 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800bf4e:	4b44      	ldr	r3, [pc, #272]	@ (800c060 <HAL_RCC_OscConfig+0x240>)
 800bf50:	685b      	ldr	r3, [r3, #4]
 800bf52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d116      	bne.n	800bf88 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800bf5a:	4b41      	ldr	r3, [pc, #260]	@ (800c060 <HAL_RCC_OscConfig+0x240>)
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	f003 0302 	and.w	r3, r3, #2
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d005      	beq.n	800bf72 <HAL_RCC_OscConfig+0x152>
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	68db      	ldr	r3, [r3, #12]
 800bf6a:	2b01      	cmp	r3, #1
 800bf6c:	d001      	beq.n	800bf72 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800bf6e:	2301      	movs	r3, #1
 800bf70:	e1c7      	b.n	800c302 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bf72:	4b3b      	ldr	r3, [pc, #236]	@ (800c060 <HAL_RCC_OscConfig+0x240>)
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	691b      	ldr	r3, [r3, #16]
 800bf7e:	00db      	lsls	r3, r3, #3
 800bf80:	4937      	ldr	r1, [pc, #220]	@ (800c060 <HAL_RCC_OscConfig+0x240>)
 800bf82:	4313      	orrs	r3, r2
 800bf84:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800bf86:	e03a      	b.n	800bffe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	68db      	ldr	r3, [r3, #12]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d020      	beq.n	800bfd2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800bf90:	4b34      	ldr	r3, [pc, #208]	@ (800c064 <HAL_RCC_OscConfig+0x244>)
 800bf92:	2201      	movs	r2, #1
 800bf94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bf96:	f7f9 fcb5 	bl	8005904 <HAL_GetTick>
 800bf9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bf9c:	e008      	b.n	800bfb0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bf9e:	f7f9 fcb1 	bl	8005904 <HAL_GetTick>
 800bfa2:	4602      	mov	r2, r0
 800bfa4:	693b      	ldr	r3, [r7, #16]
 800bfa6:	1ad3      	subs	r3, r2, r3
 800bfa8:	2b02      	cmp	r3, #2
 800bfaa:	d901      	bls.n	800bfb0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800bfac:	2303      	movs	r3, #3
 800bfae:	e1a8      	b.n	800c302 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bfb0:	4b2b      	ldr	r3, [pc, #172]	@ (800c060 <HAL_RCC_OscConfig+0x240>)
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	f003 0302 	and.w	r3, r3, #2
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d0f0      	beq.n	800bf9e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bfbc:	4b28      	ldr	r3, [pc, #160]	@ (800c060 <HAL_RCC_OscConfig+0x240>)
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	691b      	ldr	r3, [r3, #16]
 800bfc8:	00db      	lsls	r3, r3, #3
 800bfca:	4925      	ldr	r1, [pc, #148]	@ (800c060 <HAL_RCC_OscConfig+0x240>)
 800bfcc:	4313      	orrs	r3, r2
 800bfce:	600b      	str	r3, [r1, #0]
 800bfd0:	e015      	b.n	800bffe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800bfd2:	4b24      	ldr	r3, [pc, #144]	@ (800c064 <HAL_RCC_OscConfig+0x244>)
 800bfd4:	2200      	movs	r2, #0
 800bfd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bfd8:	f7f9 fc94 	bl	8005904 <HAL_GetTick>
 800bfdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bfde:	e008      	b.n	800bff2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bfe0:	f7f9 fc90 	bl	8005904 <HAL_GetTick>
 800bfe4:	4602      	mov	r2, r0
 800bfe6:	693b      	ldr	r3, [r7, #16]
 800bfe8:	1ad3      	subs	r3, r2, r3
 800bfea:	2b02      	cmp	r3, #2
 800bfec:	d901      	bls.n	800bff2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800bfee:	2303      	movs	r3, #3
 800bff0:	e187      	b.n	800c302 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bff2:	4b1b      	ldr	r3, [pc, #108]	@ (800c060 <HAL_RCC_OscConfig+0x240>)
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	f003 0302 	and.w	r3, r3, #2
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d1f0      	bne.n	800bfe0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	f003 0308 	and.w	r3, r3, #8
 800c006:	2b00      	cmp	r3, #0
 800c008:	d036      	beq.n	800c078 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	695b      	ldr	r3, [r3, #20]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d016      	beq.n	800c040 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c012:	4b15      	ldr	r3, [pc, #84]	@ (800c068 <HAL_RCC_OscConfig+0x248>)
 800c014:	2201      	movs	r2, #1
 800c016:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c018:	f7f9 fc74 	bl	8005904 <HAL_GetTick>
 800c01c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c01e:	e008      	b.n	800c032 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c020:	f7f9 fc70 	bl	8005904 <HAL_GetTick>
 800c024:	4602      	mov	r2, r0
 800c026:	693b      	ldr	r3, [r7, #16]
 800c028:	1ad3      	subs	r3, r2, r3
 800c02a:	2b02      	cmp	r3, #2
 800c02c:	d901      	bls.n	800c032 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800c02e:	2303      	movs	r3, #3
 800c030:	e167      	b.n	800c302 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c032:	4b0b      	ldr	r3, [pc, #44]	@ (800c060 <HAL_RCC_OscConfig+0x240>)
 800c034:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c036:	f003 0302 	and.w	r3, r3, #2
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d0f0      	beq.n	800c020 <HAL_RCC_OscConfig+0x200>
 800c03e:	e01b      	b.n	800c078 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c040:	4b09      	ldr	r3, [pc, #36]	@ (800c068 <HAL_RCC_OscConfig+0x248>)
 800c042:	2200      	movs	r2, #0
 800c044:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c046:	f7f9 fc5d 	bl	8005904 <HAL_GetTick>
 800c04a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c04c:	e00e      	b.n	800c06c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c04e:	f7f9 fc59 	bl	8005904 <HAL_GetTick>
 800c052:	4602      	mov	r2, r0
 800c054:	693b      	ldr	r3, [r7, #16]
 800c056:	1ad3      	subs	r3, r2, r3
 800c058:	2b02      	cmp	r3, #2
 800c05a:	d907      	bls.n	800c06c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800c05c:	2303      	movs	r3, #3
 800c05e:	e150      	b.n	800c302 <HAL_RCC_OscConfig+0x4e2>
 800c060:	40023800 	.word	0x40023800
 800c064:	42470000 	.word	0x42470000
 800c068:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c06c:	4b88      	ldr	r3, [pc, #544]	@ (800c290 <HAL_RCC_OscConfig+0x470>)
 800c06e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c070:	f003 0302 	and.w	r3, r3, #2
 800c074:	2b00      	cmp	r3, #0
 800c076:	d1ea      	bne.n	800c04e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	f003 0304 	and.w	r3, r3, #4
 800c080:	2b00      	cmp	r3, #0
 800c082:	f000 8097 	beq.w	800c1b4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c086:	2300      	movs	r3, #0
 800c088:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c08a:	4b81      	ldr	r3, [pc, #516]	@ (800c290 <HAL_RCC_OscConfig+0x470>)
 800c08c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c08e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c092:	2b00      	cmp	r3, #0
 800c094:	d10f      	bne.n	800c0b6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c096:	2300      	movs	r3, #0
 800c098:	60bb      	str	r3, [r7, #8]
 800c09a:	4b7d      	ldr	r3, [pc, #500]	@ (800c290 <HAL_RCC_OscConfig+0x470>)
 800c09c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c09e:	4a7c      	ldr	r2, [pc, #496]	@ (800c290 <HAL_RCC_OscConfig+0x470>)
 800c0a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c0a4:	6413      	str	r3, [r2, #64]	@ 0x40
 800c0a6:	4b7a      	ldr	r3, [pc, #488]	@ (800c290 <HAL_RCC_OscConfig+0x470>)
 800c0a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c0aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c0ae:	60bb      	str	r3, [r7, #8]
 800c0b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c0b2:	2301      	movs	r3, #1
 800c0b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c0b6:	4b77      	ldr	r3, [pc, #476]	@ (800c294 <HAL_RCC_OscConfig+0x474>)
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d118      	bne.n	800c0f4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800c0c2:	4b74      	ldr	r3, [pc, #464]	@ (800c294 <HAL_RCC_OscConfig+0x474>)
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	4a73      	ldr	r2, [pc, #460]	@ (800c294 <HAL_RCC_OscConfig+0x474>)
 800c0c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c0cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c0ce:	f7f9 fc19 	bl	8005904 <HAL_GetTick>
 800c0d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c0d4:	e008      	b.n	800c0e8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c0d6:	f7f9 fc15 	bl	8005904 <HAL_GetTick>
 800c0da:	4602      	mov	r2, r0
 800c0dc:	693b      	ldr	r3, [r7, #16]
 800c0de:	1ad3      	subs	r3, r2, r3
 800c0e0:	2b02      	cmp	r3, #2
 800c0e2:	d901      	bls.n	800c0e8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800c0e4:	2303      	movs	r3, #3
 800c0e6:	e10c      	b.n	800c302 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c0e8:	4b6a      	ldr	r3, [pc, #424]	@ (800c294 <HAL_RCC_OscConfig+0x474>)
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d0f0      	beq.n	800c0d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	689b      	ldr	r3, [r3, #8]
 800c0f8:	2b01      	cmp	r3, #1
 800c0fa:	d106      	bne.n	800c10a <HAL_RCC_OscConfig+0x2ea>
 800c0fc:	4b64      	ldr	r3, [pc, #400]	@ (800c290 <HAL_RCC_OscConfig+0x470>)
 800c0fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c100:	4a63      	ldr	r2, [pc, #396]	@ (800c290 <HAL_RCC_OscConfig+0x470>)
 800c102:	f043 0301 	orr.w	r3, r3, #1
 800c106:	6713      	str	r3, [r2, #112]	@ 0x70
 800c108:	e01c      	b.n	800c144 <HAL_RCC_OscConfig+0x324>
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	689b      	ldr	r3, [r3, #8]
 800c10e:	2b05      	cmp	r3, #5
 800c110:	d10c      	bne.n	800c12c <HAL_RCC_OscConfig+0x30c>
 800c112:	4b5f      	ldr	r3, [pc, #380]	@ (800c290 <HAL_RCC_OscConfig+0x470>)
 800c114:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c116:	4a5e      	ldr	r2, [pc, #376]	@ (800c290 <HAL_RCC_OscConfig+0x470>)
 800c118:	f043 0304 	orr.w	r3, r3, #4
 800c11c:	6713      	str	r3, [r2, #112]	@ 0x70
 800c11e:	4b5c      	ldr	r3, [pc, #368]	@ (800c290 <HAL_RCC_OscConfig+0x470>)
 800c120:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c122:	4a5b      	ldr	r2, [pc, #364]	@ (800c290 <HAL_RCC_OscConfig+0x470>)
 800c124:	f043 0301 	orr.w	r3, r3, #1
 800c128:	6713      	str	r3, [r2, #112]	@ 0x70
 800c12a:	e00b      	b.n	800c144 <HAL_RCC_OscConfig+0x324>
 800c12c:	4b58      	ldr	r3, [pc, #352]	@ (800c290 <HAL_RCC_OscConfig+0x470>)
 800c12e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c130:	4a57      	ldr	r2, [pc, #348]	@ (800c290 <HAL_RCC_OscConfig+0x470>)
 800c132:	f023 0301 	bic.w	r3, r3, #1
 800c136:	6713      	str	r3, [r2, #112]	@ 0x70
 800c138:	4b55      	ldr	r3, [pc, #340]	@ (800c290 <HAL_RCC_OscConfig+0x470>)
 800c13a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c13c:	4a54      	ldr	r2, [pc, #336]	@ (800c290 <HAL_RCC_OscConfig+0x470>)
 800c13e:	f023 0304 	bic.w	r3, r3, #4
 800c142:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	689b      	ldr	r3, [r3, #8]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d015      	beq.n	800c178 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c14c:	f7f9 fbda 	bl	8005904 <HAL_GetTick>
 800c150:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c152:	e00a      	b.n	800c16a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c154:	f7f9 fbd6 	bl	8005904 <HAL_GetTick>
 800c158:	4602      	mov	r2, r0
 800c15a:	693b      	ldr	r3, [r7, #16]
 800c15c:	1ad3      	subs	r3, r2, r3
 800c15e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c162:	4293      	cmp	r3, r2
 800c164:	d901      	bls.n	800c16a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800c166:	2303      	movs	r3, #3
 800c168:	e0cb      	b.n	800c302 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c16a:	4b49      	ldr	r3, [pc, #292]	@ (800c290 <HAL_RCC_OscConfig+0x470>)
 800c16c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c16e:	f003 0302 	and.w	r3, r3, #2
 800c172:	2b00      	cmp	r3, #0
 800c174:	d0ee      	beq.n	800c154 <HAL_RCC_OscConfig+0x334>
 800c176:	e014      	b.n	800c1a2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c178:	f7f9 fbc4 	bl	8005904 <HAL_GetTick>
 800c17c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c17e:	e00a      	b.n	800c196 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c180:	f7f9 fbc0 	bl	8005904 <HAL_GetTick>
 800c184:	4602      	mov	r2, r0
 800c186:	693b      	ldr	r3, [r7, #16]
 800c188:	1ad3      	subs	r3, r2, r3
 800c18a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c18e:	4293      	cmp	r3, r2
 800c190:	d901      	bls.n	800c196 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800c192:	2303      	movs	r3, #3
 800c194:	e0b5      	b.n	800c302 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c196:	4b3e      	ldr	r3, [pc, #248]	@ (800c290 <HAL_RCC_OscConfig+0x470>)
 800c198:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c19a:	f003 0302 	and.w	r3, r3, #2
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d1ee      	bne.n	800c180 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800c1a2:	7dfb      	ldrb	r3, [r7, #23]
 800c1a4:	2b01      	cmp	r3, #1
 800c1a6:	d105      	bne.n	800c1b4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c1a8:	4b39      	ldr	r3, [pc, #228]	@ (800c290 <HAL_RCC_OscConfig+0x470>)
 800c1aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c1ac:	4a38      	ldr	r2, [pc, #224]	@ (800c290 <HAL_RCC_OscConfig+0x470>)
 800c1ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c1b2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	699b      	ldr	r3, [r3, #24]
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	f000 80a1 	beq.w	800c300 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800c1be:	4b34      	ldr	r3, [pc, #208]	@ (800c290 <HAL_RCC_OscConfig+0x470>)
 800c1c0:	689b      	ldr	r3, [r3, #8]
 800c1c2:	f003 030c 	and.w	r3, r3, #12
 800c1c6:	2b08      	cmp	r3, #8
 800c1c8:	d05c      	beq.n	800c284 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	699b      	ldr	r3, [r3, #24]
 800c1ce:	2b02      	cmp	r3, #2
 800c1d0:	d141      	bne.n	800c256 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c1d2:	4b31      	ldr	r3, [pc, #196]	@ (800c298 <HAL_RCC_OscConfig+0x478>)
 800c1d4:	2200      	movs	r2, #0
 800c1d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c1d8:	f7f9 fb94 	bl	8005904 <HAL_GetTick>
 800c1dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c1de:	e008      	b.n	800c1f2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c1e0:	f7f9 fb90 	bl	8005904 <HAL_GetTick>
 800c1e4:	4602      	mov	r2, r0
 800c1e6:	693b      	ldr	r3, [r7, #16]
 800c1e8:	1ad3      	subs	r3, r2, r3
 800c1ea:	2b02      	cmp	r3, #2
 800c1ec:	d901      	bls.n	800c1f2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800c1ee:	2303      	movs	r3, #3
 800c1f0:	e087      	b.n	800c302 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c1f2:	4b27      	ldr	r3, [pc, #156]	@ (800c290 <HAL_RCC_OscConfig+0x470>)
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d1f0      	bne.n	800c1e0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	69da      	ldr	r2, [r3, #28]
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	6a1b      	ldr	r3, [r3, #32]
 800c206:	431a      	orrs	r2, r3
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c20c:	019b      	lsls	r3, r3, #6
 800c20e:	431a      	orrs	r2, r3
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c214:	085b      	lsrs	r3, r3, #1
 800c216:	3b01      	subs	r3, #1
 800c218:	041b      	lsls	r3, r3, #16
 800c21a:	431a      	orrs	r2, r3
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c220:	061b      	lsls	r3, r3, #24
 800c222:	491b      	ldr	r1, [pc, #108]	@ (800c290 <HAL_RCC_OscConfig+0x470>)
 800c224:	4313      	orrs	r3, r2
 800c226:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c228:	4b1b      	ldr	r3, [pc, #108]	@ (800c298 <HAL_RCC_OscConfig+0x478>)
 800c22a:	2201      	movs	r2, #1
 800c22c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c22e:	f7f9 fb69 	bl	8005904 <HAL_GetTick>
 800c232:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c234:	e008      	b.n	800c248 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c236:	f7f9 fb65 	bl	8005904 <HAL_GetTick>
 800c23a:	4602      	mov	r2, r0
 800c23c:	693b      	ldr	r3, [r7, #16]
 800c23e:	1ad3      	subs	r3, r2, r3
 800c240:	2b02      	cmp	r3, #2
 800c242:	d901      	bls.n	800c248 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800c244:	2303      	movs	r3, #3
 800c246:	e05c      	b.n	800c302 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c248:	4b11      	ldr	r3, [pc, #68]	@ (800c290 <HAL_RCC_OscConfig+0x470>)
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c250:	2b00      	cmp	r3, #0
 800c252:	d0f0      	beq.n	800c236 <HAL_RCC_OscConfig+0x416>
 800c254:	e054      	b.n	800c300 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c256:	4b10      	ldr	r3, [pc, #64]	@ (800c298 <HAL_RCC_OscConfig+0x478>)
 800c258:	2200      	movs	r2, #0
 800c25a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c25c:	f7f9 fb52 	bl	8005904 <HAL_GetTick>
 800c260:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c262:	e008      	b.n	800c276 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c264:	f7f9 fb4e 	bl	8005904 <HAL_GetTick>
 800c268:	4602      	mov	r2, r0
 800c26a:	693b      	ldr	r3, [r7, #16]
 800c26c:	1ad3      	subs	r3, r2, r3
 800c26e:	2b02      	cmp	r3, #2
 800c270:	d901      	bls.n	800c276 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800c272:	2303      	movs	r3, #3
 800c274:	e045      	b.n	800c302 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c276:	4b06      	ldr	r3, [pc, #24]	@ (800c290 <HAL_RCC_OscConfig+0x470>)
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d1f0      	bne.n	800c264 <HAL_RCC_OscConfig+0x444>
 800c282:	e03d      	b.n	800c300 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	699b      	ldr	r3, [r3, #24]
 800c288:	2b01      	cmp	r3, #1
 800c28a:	d107      	bne.n	800c29c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800c28c:	2301      	movs	r3, #1
 800c28e:	e038      	b.n	800c302 <HAL_RCC_OscConfig+0x4e2>
 800c290:	40023800 	.word	0x40023800
 800c294:	40007000 	.word	0x40007000
 800c298:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800c29c:	4b1b      	ldr	r3, [pc, #108]	@ (800c30c <HAL_RCC_OscConfig+0x4ec>)
 800c29e:	685b      	ldr	r3, [r3, #4]
 800c2a0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	699b      	ldr	r3, [r3, #24]
 800c2a6:	2b01      	cmp	r3, #1
 800c2a8:	d028      	beq.n	800c2fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c2b4:	429a      	cmp	r2, r3
 800c2b6:	d121      	bne.n	800c2fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c2c2:	429a      	cmp	r2, r3
 800c2c4:	d11a      	bne.n	800c2fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800c2c6:	68fa      	ldr	r2, [r7, #12]
 800c2c8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800c2cc:	4013      	ands	r3, r2
 800c2ce:	687a      	ldr	r2, [r7, #4]
 800c2d0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800c2d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800c2d4:	4293      	cmp	r3, r2
 800c2d6:	d111      	bne.n	800c2fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c2e2:	085b      	lsrs	r3, r3, #1
 800c2e4:	3b01      	subs	r3, #1
 800c2e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800c2e8:	429a      	cmp	r2, r3
 800c2ea:	d107      	bne.n	800c2fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800c2f8:	429a      	cmp	r2, r3
 800c2fa:	d001      	beq.n	800c300 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800c2fc:	2301      	movs	r3, #1
 800c2fe:	e000      	b.n	800c302 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800c300:	2300      	movs	r3, #0
}
 800c302:	4618      	mov	r0, r3
 800c304:	3718      	adds	r7, #24
 800c306:	46bd      	mov	sp, r7
 800c308:	bd80      	pop	{r7, pc}
 800c30a:	bf00      	nop
 800c30c:	40023800 	.word	0x40023800

0800c310 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c310:	b580      	push	{r7, lr}
 800c312:	b084      	sub	sp, #16
 800c314:	af00      	add	r7, sp, #0
 800c316:	6078      	str	r0, [r7, #4]
 800c318:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d101      	bne.n	800c324 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c320:	2301      	movs	r3, #1
 800c322:	e0cc      	b.n	800c4be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c324:	4b68      	ldr	r3, [pc, #416]	@ (800c4c8 <HAL_RCC_ClockConfig+0x1b8>)
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	f003 0307 	and.w	r3, r3, #7
 800c32c:	683a      	ldr	r2, [r7, #0]
 800c32e:	429a      	cmp	r2, r3
 800c330:	d90c      	bls.n	800c34c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c332:	4b65      	ldr	r3, [pc, #404]	@ (800c4c8 <HAL_RCC_ClockConfig+0x1b8>)
 800c334:	683a      	ldr	r2, [r7, #0]
 800c336:	b2d2      	uxtb	r2, r2
 800c338:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c33a:	4b63      	ldr	r3, [pc, #396]	@ (800c4c8 <HAL_RCC_ClockConfig+0x1b8>)
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	f003 0307 	and.w	r3, r3, #7
 800c342:	683a      	ldr	r2, [r7, #0]
 800c344:	429a      	cmp	r2, r3
 800c346:	d001      	beq.n	800c34c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800c348:	2301      	movs	r3, #1
 800c34a:	e0b8      	b.n	800c4be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	f003 0302 	and.w	r3, r3, #2
 800c354:	2b00      	cmp	r3, #0
 800c356:	d020      	beq.n	800c39a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	f003 0304 	and.w	r3, r3, #4
 800c360:	2b00      	cmp	r3, #0
 800c362:	d005      	beq.n	800c370 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c364:	4b59      	ldr	r3, [pc, #356]	@ (800c4cc <HAL_RCC_ClockConfig+0x1bc>)
 800c366:	689b      	ldr	r3, [r3, #8]
 800c368:	4a58      	ldr	r2, [pc, #352]	@ (800c4cc <HAL_RCC_ClockConfig+0x1bc>)
 800c36a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800c36e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	f003 0308 	and.w	r3, r3, #8
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d005      	beq.n	800c388 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800c37c:	4b53      	ldr	r3, [pc, #332]	@ (800c4cc <HAL_RCC_ClockConfig+0x1bc>)
 800c37e:	689b      	ldr	r3, [r3, #8]
 800c380:	4a52      	ldr	r2, [pc, #328]	@ (800c4cc <HAL_RCC_ClockConfig+0x1bc>)
 800c382:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800c386:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c388:	4b50      	ldr	r3, [pc, #320]	@ (800c4cc <HAL_RCC_ClockConfig+0x1bc>)
 800c38a:	689b      	ldr	r3, [r3, #8]
 800c38c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	689b      	ldr	r3, [r3, #8]
 800c394:	494d      	ldr	r1, [pc, #308]	@ (800c4cc <HAL_RCC_ClockConfig+0x1bc>)
 800c396:	4313      	orrs	r3, r2
 800c398:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	f003 0301 	and.w	r3, r3, #1
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d044      	beq.n	800c430 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	685b      	ldr	r3, [r3, #4]
 800c3aa:	2b01      	cmp	r3, #1
 800c3ac:	d107      	bne.n	800c3be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c3ae:	4b47      	ldr	r3, [pc, #284]	@ (800c4cc <HAL_RCC_ClockConfig+0x1bc>)
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d119      	bne.n	800c3ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c3ba:	2301      	movs	r3, #1
 800c3bc:	e07f      	b.n	800c4be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	685b      	ldr	r3, [r3, #4]
 800c3c2:	2b02      	cmp	r3, #2
 800c3c4:	d003      	beq.n	800c3ce <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c3ca:	2b03      	cmp	r3, #3
 800c3cc:	d107      	bne.n	800c3de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c3ce:	4b3f      	ldr	r3, [pc, #252]	@ (800c4cc <HAL_RCC_ClockConfig+0x1bc>)
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d109      	bne.n	800c3ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c3da:	2301      	movs	r3, #1
 800c3dc:	e06f      	b.n	800c4be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c3de:	4b3b      	ldr	r3, [pc, #236]	@ (800c4cc <HAL_RCC_ClockConfig+0x1bc>)
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	f003 0302 	and.w	r3, r3, #2
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d101      	bne.n	800c3ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c3ea:	2301      	movs	r3, #1
 800c3ec:	e067      	b.n	800c4be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c3ee:	4b37      	ldr	r3, [pc, #220]	@ (800c4cc <HAL_RCC_ClockConfig+0x1bc>)
 800c3f0:	689b      	ldr	r3, [r3, #8]
 800c3f2:	f023 0203 	bic.w	r2, r3, #3
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	685b      	ldr	r3, [r3, #4]
 800c3fa:	4934      	ldr	r1, [pc, #208]	@ (800c4cc <HAL_RCC_ClockConfig+0x1bc>)
 800c3fc:	4313      	orrs	r3, r2
 800c3fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800c400:	f7f9 fa80 	bl	8005904 <HAL_GetTick>
 800c404:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c406:	e00a      	b.n	800c41e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c408:	f7f9 fa7c 	bl	8005904 <HAL_GetTick>
 800c40c:	4602      	mov	r2, r0
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	1ad3      	subs	r3, r2, r3
 800c412:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c416:	4293      	cmp	r3, r2
 800c418:	d901      	bls.n	800c41e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800c41a:	2303      	movs	r3, #3
 800c41c:	e04f      	b.n	800c4be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c41e:	4b2b      	ldr	r3, [pc, #172]	@ (800c4cc <HAL_RCC_ClockConfig+0x1bc>)
 800c420:	689b      	ldr	r3, [r3, #8]
 800c422:	f003 020c 	and.w	r2, r3, #12
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	685b      	ldr	r3, [r3, #4]
 800c42a:	009b      	lsls	r3, r3, #2
 800c42c:	429a      	cmp	r2, r3
 800c42e:	d1eb      	bne.n	800c408 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800c430:	4b25      	ldr	r3, [pc, #148]	@ (800c4c8 <HAL_RCC_ClockConfig+0x1b8>)
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	f003 0307 	and.w	r3, r3, #7
 800c438:	683a      	ldr	r2, [r7, #0]
 800c43a:	429a      	cmp	r2, r3
 800c43c:	d20c      	bcs.n	800c458 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c43e:	4b22      	ldr	r3, [pc, #136]	@ (800c4c8 <HAL_RCC_ClockConfig+0x1b8>)
 800c440:	683a      	ldr	r2, [r7, #0]
 800c442:	b2d2      	uxtb	r2, r2
 800c444:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c446:	4b20      	ldr	r3, [pc, #128]	@ (800c4c8 <HAL_RCC_ClockConfig+0x1b8>)
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	f003 0307 	and.w	r3, r3, #7
 800c44e:	683a      	ldr	r2, [r7, #0]
 800c450:	429a      	cmp	r2, r3
 800c452:	d001      	beq.n	800c458 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800c454:	2301      	movs	r3, #1
 800c456:	e032      	b.n	800c4be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	f003 0304 	and.w	r3, r3, #4
 800c460:	2b00      	cmp	r3, #0
 800c462:	d008      	beq.n	800c476 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c464:	4b19      	ldr	r3, [pc, #100]	@ (800c4cc <HAL_RCC_ClockConfig+0x1bc>)
 800c466:	689b      	ldr	r3, [r3, #8]
 800c468:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	68db      	ldr	r3, [r3, #12]
 800c470:	4916      	ldr	r1, [pc, #88]	@ (800c4cc <HAL_RCC_ClockConfig+0x1bc>)
 800c472:	4313      	orrs	r3, r2
 800c474:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	f003 0308 	and.w	r3, r3, #8
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d009      	beq.n	800c496 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c482:	4b12      	ldr	r3, [pc, #72]	@ (800c4cc <HAL_RCC_ClockConfig+0x1bc>)
 800c484:	689b      	ldr	r3, [r3, #8]
 800c486:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	691b      	ldr	r3, [r3, #16]
 800c48e:	00db      	lsls	r3, r3, #3
 800c490:	490e      	ldr	r1, [pc, #56]	@ (800c4cc <HAL_RCC_ClockConfig+0x1bc>)
 800c492:	4313      	orrs	r3, r2
 800c494:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800c496:	f000 f82d 	bl	800c4f4 <HAL_RCC_GetSysClockFreq>
 800c49a:	4602      	mov	r2, r0
 800c49c:	4b0b      	ldr	r3, [pc, #44]	@ (800c4cc <HAL_RCC_ClockConfig+0x1bc>)
 800c49e:	689b      	ldr	r3, [r3, #8]
 800c4a0:	091b      	lsrs	r3, r3, #4
 800c4a2:	f003 030f 	and.w	r3, r3, #15
 800c4a6:	490a      	ldr	r1, [pc, #40]	@ (800c4d0 <HAL_RCC_ClockConfig+0x1c0>)
 800c4a8:	5ccb      	ldrb	r3, [r1, r3]
 800c4aa:	fa22 f303 	lsr.w	r3, r2, r3
 800c4ae:	4a09      	ldr	r2, [pc, #36]	@ (800c4d4 <HAL_RCC_ClockConfig+0x1c4>)
 800c4b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800c4b2:	4b09      	ldr	r3, [pc, #36]	@ (800c4d8 <HAL_RCC_ClockConfig+0x1c8>)
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	4618      	mov	r0, r3
 800c4b8:	f7f9 f9e0 	bl	800587c <HAL_InitTick>

  return HAL_OK;
 800c4bc:	2300      	movs	r3, #0
}
 800c4be:	4618      	mov	r0, r3
 800c4c0:	3710      	adds	r7, #16
 800c4c2:	46bd      	mov	sp, r7
 800c4c4:	bd80      	pop	{r7, pc}
 800c4c6:	bf00      	nop
 800c4c8:	40023c00 	.word	0x40023c00
 800c4cc:	40023800 	.word	0x40023800
 800c4d0:	080146f8 	.word	0x080146f8
 800c4d4:	20000010 	.word	0x20000010
 800c4d8:	20000014 	.word	0x20000014

0800c4dc <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800c4dc:	b480      	push	{r7}
 800c4de:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 800c4e0:	4b03      	ldr	r3, [pc, #12]	@ (800c4f0 <HAL_RCC_EnableCSS+0x14>)
 800c4e2:	2201      	movs	r2, #1
 800c4e4:	601a      	str	r2, [r3, #0]
}
 800c4e6:	bf00      	nop
 800c4e8:	46bd      	mov	sp, r7
 800c4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ee:	4770      	bx	lr
 800c4f0:	4247004c 	.word	0x4247004c

0800c4f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c4f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c4f8:	b090      	sub	sp, #64	@ 0x40
 800c4fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800c4fc:	2300      	movs	r3, #0
 800c4fe:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800c500:	2300      	movs	r3, #0
 800c502:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800c504:	2300      	movs	r3, #0
 800c506:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800c508:	2300      	movs	r3, #0
 800c50a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c50c:	4b59      	ldr	r3, [pc, #356]	@ (800c674 <HAL_RCC_GetSysClockFreq+0x180>)
 800c50e:	689b      	ldr	r3, [r3, #8]
 800c510:	f003 030c 	and.w	r3, r3, #12
 800c514:	2b08      	cmp	r3, #8
 800c516:	d00d      	beq.n	800c534 <HAL_RCC_GetSysClockFreq+0x40>
 800c518:	2b08      	cmp	r3, #8
 800c51a:	f200 80a1 	bhi.w	800c660 <HAL_RCC_GetSysClockFreq+0x16c>
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d002      	beq.n	800c528 <HAL_RCC_GetSysClockFreq+0x34>
 800c522:	2b04      	cmp	r3, #4
 800c524:	d003      	beq.n	800c52e <HAL_RCC_GetSysClockFreq+0x3a>
 800c526:	e09b      	b.n	800c660 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800c528:	4b53      	ldr	r3, [pc, #332]	@ (800c678 <HAL_RCC_GetSysClockFreq+0x184>)
 800c52a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800c52c:	e09b      	b.n	800c666 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800c52e:	4b53      	ldr	r3, [pc, #332]	@ (800c67c <HAL_RCC_GetSysClockFreq+0x188>)
 800c530:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800c532:	e098      	b.n	800c666 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c534:	4b4f      	ldr	r3, [pc, #316]	@ (800c674 <HAL_RCC_GetSysClockFreq+0x180>)
 800c536:	685b      	ldr	r3, [r3, #4]
 800c538:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c53c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800c53e:	4b4d      	ldr	r3, [pc, #308]	@ (800c674 <HAL_RCC_GetSysClockFreq+0x180>)
 800c540:	685b      	ldr	r3, [r3, #4]
 800c542:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c546:	2b00      	cmp	r3, #0
 800c548:	d028      	beq.n	800c59c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c54a:	4b4a      	ldr	r3, [pc, #296]	@ (800c674 <HAL_RCC_GetSysClockFreq+0x180>)
 800c54c:	685b      	ldr	r3, [r3, #4]
 800c54e:	099b      	lsrs	r3, r3, #6
 800c550:	2200      	movs	r2, #0
 800c552:	623b      	str	r3, [r7, #32]
 800c554:	627a      	str	r2, [r7, #36]	@ 0x24
 800c556:	6a3b      	ldr	r3, [r7, #32]
 800c558:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800c55c:	2100      	movs	r1, #0
 800c55e:	4b47      	ldr	r3, [pc, #284]	@ (800c67c <HAL_RCC_GetSysClockFreq+0x188>)
 800c560:	fb03 f201 	mul.w	r2, r3, r1
 800c564:	2300      	movs	r3, #0
 800c566:	fb00 f303 	mul.w	r3, r0, r3
 800c56a:	4413      	add	r3, r2
 800c56c:	4a43      	ldr	r2, [pc, #268]	@ (800c67c <HAL_RCC_GetSysClockFreq+0x188>)
 800c56e:	fba0 1202 	umull	r1, r2, r0, r2
 800c572:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c574:	460a      	mov	r2, r1
 800c576:	62ba      	str	r2, [r7, #40]	@ 0x28
 800c578:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c57a:	4413      	add	r3, r2
 800c57c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c57e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c580:	2200      	movs	r2, #0
 800c582:	61bb      	str	r3, [r7, #24]
 800c584:	61fa      	str	r2, [r7, #28]
 800c586:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c58a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800c58e:	f7f4 fa75 	bl	8000a7c <__aeabi_uldivmod>
 800c592:	4602      	mov	r2, r0
 800c594:	460b      	mov	r3, r1
 800c596:	4613      	mov	r3, r2
 800c598:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c59a:	e053      	b.n	800c644 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c59c:	4b35      	ldr	r3, [pc, #212]	@ (800c674 <HAL_RCC_GetSysClockFreq+0x180>)
 800c59e:	685b      	ldr	r3, [r3, #4]
 800c5a0:	099b      	lsrs	r3, r3, #6
 800c5a2:	2200      	movs	r2, #0
 800c5a4:	613b      	str	r3, [r7, #16]
 800c5a6:	617a      	str	r2, [r7, #20]
 800c5a8:	693b      	ldr	r3, [r7, #16]
 800c5aa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800c5ae:	f04f 0b00 	mov.w	fp, #0
 800c5b2:	4652      	mov	r2, sl
 800c5b4:	465b      	mov	r3, fp
 800c5b6:	f04f 0000 	mov.w	r0, #0
 800c5ba:	f04f 0100 	mov.w	r1, #0
 800c5be:	0159      	lsls	r1, r3, #5
 800c5c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c5c4:	0150      	lsls	r0, r2, #5
 800c5c6:	4602      	mov	r2, r0
 800c5c8:	460b      	mov	r3, r1
 800c5ca:	ebb2 080a 	subs.w	r8, r2, sl
 800c5ce:	eb63 090b 	sbc.w	r9, r3, fp
 800c5d2:	f04f 0200 	mov.w	r2, #0
 800c5d6:	f04f 0300 	mov.w	r3, #0
 800c5da:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800c5de:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800c5e2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800c5e6:	ebb2 0408 	subs.w	r4, r2, r8
 800c5ea:	eb63 0509 	sbc.w	r5, r3, r9
 800c5ee:	f04f 0200 	mov.w	r2, #0
 800c5f2:	f04f 0300 	mov.w	r3, #0
 800c5f6:	00eb      	lsls	r3, r5, #3
 800c5f8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c5fc:	00e2      	lsls	r2, r4, #3
 800c5fe:	4614      	mov	r4, r2
 800c600:	461d      	mov	r5, r3
 800c602:	eb14 030a 	adds.w	r3, r4, sl
 800c606:	603b      	str	r3, [r7, #0]
 800c608:	eb45 030b 	adc.w	r3, r5, fp
 800c60c:	607b      	str	r3, [r7, #4]
 800c60e:	f04f 0200 	mov.w	r2, #0
 800c612:	f04f 0300 	mov.w	r3, #0
 800c616:	e9d7 4500 	ldrd	r4, r5, [r7]
 800c61a:	4629      	mov	r1, r5
 800c61c:	028b      	lsls	r3, r1, #10
 800c61e:	4621      	mov	r1, r4
 800c620:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800c624:	4621      	mov	r1, r4
 800c626:	028a      	lsls	r2, r1, #10
 800c628:	4610      	mov	r0, r2
 800c62a:	4619      	mov	r1, r3
 800c62c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c62e:	2200      	movs	r2, #0
 800c630:	60bb      	str	r3, [r7, #8]
 800c632:	60fa      	str	r2, [r7, #12]
 800c634:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c638:	f7f4 fa20 	bl	8000a7c <__aeabi_uldivmod>
 800c63c:	4602      	mov	r2, r0
 800c63e:	460b      	mov	r3, r1
 800c640:	4613      	mov	r3, r2
 800c642:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800c644:	4b0b      	ldr	r3, [pc, #44]	@ (800c674 <HAL_RCC_GetSysClockFreq+0x180>)
 800c646:	685b      	ldr	r3, [r3, #4]
 800c648:	0c1b      	lsrs	r3, r3, #16
 800c64a:	f003 0303 	and.w	r3, r3, #3
 800c64e:	3301      	adds	r3, #1
 800c650:	005b      	lsls	r3, r3, #1
 800c652:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800c654:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c658:	fbb2 f3f3 	udiv	r3, r2, r3
 800c65c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800c65e:	e002      	b.n	800c666 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800c660:	4b05      	ldr	r3, [pc, #20]	@ (800c678 <HAL_RCC_GetSysClockFreq+0x184>)
 800c662:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800c664:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c666:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800c668:	4618      	mov	r0, r3
 800c66a:	3740      	adds	r7, #64	@ 0x40
 800c66c:	46bd      	mov	sp, r7
 800c66e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c672:	bf00      	nop
 800c674:	40023800 	.word	0x40023800
 800c678:	00f42400 	.word	0x00f42400
 800c67c:	017d7840 	.word	0x017d7840

0800c680 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c680:	b480      	push	{r7}
 800c682:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c684:	4b03      	ldr	r3, [pc, #12]	@ (800c694 <HAL_RCC_GetHCLKFreq+0x14>)
 800c686:	681b      	ldr	r3, [r3, #0]
}
 800c688:	4618      	mov	r0, r3
 800c68a:	46bd      	mov	sp, r7
 800c68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c690:	4770      	bx	lr
 800c692:	bf00      	nop
 800c694:	20000010 	.word	0x20000010

0800c698 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c698:	b580      	push	{r7, lr}
 800c69a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800c69c:	f7ff fff0 	bl	800c680 <HAL_RCC_GetHCLKFreq>
 800c6a0:	4602      	mov	r2, r0
 800c6a2:	4b05      	ldr	r3, [pc, #20]	@ (800c6b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800c6a4:	689b      	ldr	r3, [r3, #8]
 800c6a6:	0a9b      	lsrs	r3, r3, #10
 800c6a8:	f003 0307 	and.w	r3, r3, #7
 800c6ac:	4903      	ldr	r1, [pc, #12]	@ (800c6bc <HAL_RCC_GetPCLK1Freq+0x24>)
 800c6ae:	5ccb      	ldrb	r3, [r1, r3]
 800c6b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c6b4:	4618      	mov	r0, r3
 800c6b6:	bd80      	pop	{r7, pc}
 800c6b8:	40023800 	.word	0x40023800
 800c6bc:	08014708 	.word	0x08014708

0800c6c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c6c0:	b580      	push	{r7, lr}
 800c6c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800c6c4:	f7ff ffdc 	bl	800c680 <HAL_RCC_GetHCLKFreq>
 800c6c8:	4602      	mov	r2, r0
 800c6ca:	4b05      	ldr	r3, [pc, #20]	@ (800c6e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800c6cc:	689b      	ldr	r3, [r3, #8]
 800c6ce:	0b5b      	lsrs	r3, r3, #13
 800c6d0:	f003 0307 	and.w	r3, r3, #7
 800c6d4:	4903      	ldr	r1, [pc, #12]	@ (800c6e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c6d6:	5ccb      	ldrb	r3, [r1, r3]
 800c6d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c6dc:	4618      	mov	r0, r3
 800c6de:	bd80      	pop	{r7, pc}
 800c6e0:	40023800 	.word	0x40023800
 800c6e4:	08014708 	.word	0x08014708

0800c6e8 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800c6e8:	b580      	push	{r7, lr}
 800c6ea:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 800c6ec:	4b06      	ldr	r3, [pc, #24]	@ (800c708 <HAL_RCC_NMI_IRQHandler+0x20>)
 800c6ee:	68db      	ldr	r3, [r3, #12]
 800c6f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c6f4:	2b80      	cmp	r3, #128	@ 0x80
 800c6f6:	d104      	bne.n	800c702 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800c6f8:	f000 f80a 	bl	800c710 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800c6fc:	4b03      	ldr	r3, [pc, #12]	@ (800c70c <HAL_RCC_NMI_IRQHandler+0x24>)
 800c6fe:	2280      	movs	r2, #128	@ 0x80
 800c700:	701a      	strb	r2, [r3, #0]
  }
}
 800c702:	bf00      	nop
 800c704:	bd80      	pop	{r7, pc}
 800c706:	bf00      	nop
 800c708:	40023800 	.word	0x40023800
 800c70c:	4002380e 	.word	0x4002380e

0800c710 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800c710:	b480      	push	{r7}
 800c712:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 800c714:	bf00      	nop
 800c716:	46bd      	mov	sp, r7
 800c718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c71c:	4770      	bx	lr

0800c71e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c71e:	b580      	push	{r7, lr}
 800c720:	b082      	sub	sp, #8
 800c722:	af00      	add	r7, sp, #0
 800c724:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d101      	bne.n	800c730 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c72c:	2301      	movs	r3, #1
 800c72e:	e041      	b.n	800c7b4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c736:	b2db      	uxtb	r3, r3
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d106      	bne.n	800c74a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	2200      	movs	r2, #0
 800c740:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c744:	6878      	ldr	r0, [r7, #4]
 800c746:	f7f8 fe87 	bl	8005458 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	2202      	movs	r2, #2
 800c74e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	681a      	ldr	r2, [r3, #0]
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	3304      	adds	r3, #4
 800c75a:	4619      	mov	r1, r3
 800c75c:	4610      	mov	r0, r2
 800c75e:	f000 fc3b 	bl	800cfd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	2201      	movs	r2, #1
 800c766:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	2201      	movs	r2, #1
 800c76e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	2201      	movs	r2, #1
 800c776:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	2201      	movs	r2, #1
 800c77e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	2201      	movs	r2, #1
 800c786:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	2201      	movs	r2, #1
 800c78e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	2201      	movs	r2, #1
 800c796:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	2201      	movs	r2, #1
 800c79e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	2201      	movs	r2, #1
 800c7a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	2201      	movs	r2, #1
 800c7ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c7b2:	2300      	movs	r3, #0
}
 800c7b4:	4618      	mov	r0, r3
 800c7b6:	3708      	adds	r7, #8
 800c7b8:	46bd      	mov	sp, r7
 800c7ba:	bd80      	pop	{r7, pc}

0800c7bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c7bc:	b480      	push	{r7}
 800c7be:	b085      	sub	sp, #20
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c7ca:	b2db      	uxtb	r3, r3
 800c7cc:	2b01      	cmp	r3, #1
 800c7ce:	d001      	beq.n	800c7d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c7d0:	2301      	movs	r3, #1
 800c7d2:	e044      	b.n	800c85e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	2202      	movs	r2, #2
 800c7d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	68da      	ldr	r2, [r3, #12]
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	f042 0201 	orr.w	r2, r2, #1
 800c7ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	4a1e      	ldr	r2, [pc, #120]	@ (800c86c <HAL_TIM_Base_Start_IT+0xb0>)
 800c7f2:	4293      	cmp	r3, r2
 800c7f4:	d018      	beq.n	800c828 <HAL_TIM_Base_Start_IT+0x6c>
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c7fe:	d013      	beq.n	800c828 <HAL_TIM_Base_Start_IT+0x6c>
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	4a1a      	ldr	r2, [pc, #104]	@ (800c870 <HAL_TIM_Base_Start_IT+0xb4>)
 800c806:	4293      	cmp	r3, r2
 800c808:	d00e      	beq.n	800c828 <HAL_TIM_Base_Start_IT+0x6c>
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	4a19      	ldr	r2, [pc, #100]	@ (800c874 <HAL_TIM_Base_Start_IT+0xb8>)
 800c810:	4293      	cmp	r3, r2
 800c812:	d009      	beq.n	800c828 <HAL_TIM_Base_Start_IT+0x6c>
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	4a17      	ldr	r2, [pc, #92]	@ (800c878 <HAL_TIM_Base_Start_IT+0xbc>)
 800c81a:	4293      	cmp	r3, r2
 800c81c:	d004      	beq.n	800c828 <HAL_TIM_Base_Start_IT+0x6c>
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	4a16      	ldr	r2, [pc, #88]	@ (800c87c <HAL_TIM_Base_Start_IT+0xc0>)
 800c824:	4293      	cmp	r3, r2
 800c826:	d111      	bne.n	800c84c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	689b      	ldr	r3, [r3, #8]
 800c82e:	f003 0307 	and.w	r3, r3, #7
 800c832:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	2b06      	cmp	r3, #6
 800c838:	d010      	beq.n	800c85c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	681a      	ldr	r2, [r3, #0]
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	f042 0201 	orr.w	r2, r2, #1
 800c848:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c84a:	e007      	b.n	800c85c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	681a      	ldr	r2, [r3, #0]
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	f042 0201 	orr.w	r2, r2, #1
 800c85a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c85c:	2300      	movs	r3, #0
}
 800c85e:	4618      	mov	r0, r3
 800c860:	3714      	adds	r7, #20
 800c862:	46bd      	mov	sp, r7
 800c864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c868:	4770      	bx	lr
 800c86a:	bf00      	nop
 800c86c:	40010000 	.word	0x40010000
 800c870:	40000400 	.word	0x40000400
 800c874:	40000800 	.word	0x40000800
 800c878:	40000c00 	.word	0x40000c00
 800c87c:	40014000 	.word	0x40014000

0800c880 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c880:	b580      	push	{r7, lr}
 800c882:	b082      	sub	sp, #8
 800c884:	af00      	add	r7, sp, #0
 800c886:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d101      	bne.n	800c892 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c88e:	2301      	movs	r3, #1
 800c890:	e041      	b.n	800c916 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c898:	b2db      	uxtb	r3, r3
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d106      	bne.n	800c8ac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	2200      	movs	r2, #0
 800c8a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c8a6:	6878      	ldr	r0, [r7, #4]
 800c8a8:	f000 f839 	bl	800c91e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	2202      	movs	r2, #2
 800c8b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	681a      	ldr	r2, [r3, #0]
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	3304      	adds	r3, #4
 800c8bc:	4619      	mov	r1, r3
 800c8be:	4610      	mov	r0, r2
 800c8c0:	f000 fb8a 	bl	800cfd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	2201      	movs	r2, #1
 800c8c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	2201      	movs	r2, #1
 800c8d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	2201      	movs	r2, #1
 800c8d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	2201      	movs	r2, #1
 800c8e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	2201      	movs	r2, #1
 800c8e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	2201      	movs	r2, #1
 800c8f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	2201      	movs	r2, #1
 800c8f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	2201      	movs	r2, #1
 800c900:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	2201      	movs	r2, #1
 800c908:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	2201      	movs	r2, #1
 800c910:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c914:	2300      	movs	r3, #0
}
 800c916:	4618      	mov	r0, r3
 800c918:	3708      	adds	r7, #8
 800c91a:	46bd      	mov	sp, r7
 800c91c:	bd80      	pop	{r7, pc}

0800c91e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800c91e:	b480      	push	{r7}
 800c920:	b083      	sub	sp, #12
 800c922:	af00      	add	r7, sp, #0
 800c924:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800c926:	bf00      	nop
 800c928:	370c      	adds	r7, #12
 800c92a:	46bd      	mov	sp, r7
 800c92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c930:	4770      	bx	lr
	...

0800c934 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c934:	b580      	push	{r7, lr}
 800c936:	b084      	sub	sp, #16
 800c938:	af00      	add	r7, sp, #0
 800c93a:	6078      	str	r0, [r7, #4]
 800c93c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c93e:	683b      	ldr	r3, [r7, #0]
 800c940:	2b00      	cmp	r3, #0
 800c942:	d109      	bne.n	800c958 <HAL_TIM_PWM_Start+0x24>
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800c94a:	b2db      	uxtb	r3, r3
 800c94c:	2b01      	cmp	r3, #1
 800c94e:	bf14      	ite	ne
 800c950:	2301      	movne	r3, #1
 800c952:	2300      	moveq	r3, #0
 800c954:	b2db      	uxtb	r3, r3
 800c956:	e022      	b.n	800c99e <HAL_TIM_PWM_Start+0x6a>
 800c958:	683b      	ldr	r3, [r7, #0]
 800c95a:	2b04      	cmp	r3, #4
 800c95c:	d109      	bne.n	800c972 <HAL_TIM_PWM_Start+0x3e>
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800c964:	b2db      	uxtb	r3, r3
 800c966:	2b01      	cmp	r3, #1
 800c968:	bf14      	ite	ne
 800c96a:	2301      	movne	r3, #1
 800c96c:	2300      	moveq	r3, #0
 800c96e:	b2db      	uxtb	r3, r3
 800c970:	e015      	b.n	800c99e <HAL_TIM_PWM_Start+0x6a>
 800c972:	683b      	ldr	r3, [r7, #0]
 800c974:	2b08      	cmp	r3, #8
 800c976:	d109      	bne.n	800c98c <HAL_TIM_PWM_Start+0x58>
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800c97e:	b2db      	uxtb	r3, r3
 800c980:	2b01      	cmp	r3, #1
 800c982:	bf14      	ite	ne
 800c984:	2301      	movne	r3, #1
 800c986:	2300      	moveq	r3, #0
 800c988:	b2db      	uxtb	r3, r3
 800c98a:	e008      	b.n	800c99e <HAL_TIM_PWM_Start+0x6a>
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c992:	b2db      	uxtb	r3, r3
 800c994:	2b01      	cmp	r3, #1
 800c996:	bf14      	ite	ne
 800c998:	2301      	movne	r3, #1
 800c99a:	2300      	moveq	r3, #0
 800c99c:	b2db      	uxtb	r3, r3
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d001      	beq.n	800c9a6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800c9a2:	2301      	movs	r3, #1
 800c9a4:	e068      	b.n	800ca78 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c9a6:	683b      	ldr	r3, [r7, #0]
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d104      	bne.n	800c9b6 <HAL_TIM_PWM_Start+0x82>
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	2202      	movs	r2, #2
 800c9b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c9b4:	e013      	b.n	800c9de <HAL_TIM_PWM_Start+0xaa>
 800c9b6:	683b      	ldr	r3, [r7, #0]
 800c9b8:	2b04      	cmp	r3, #4
 800c9ba:	d104      	bne.n	800c9c6 <HAL_TIM_PWM_Start+0x92>
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	2202      	movs	r2, #2
 800c9c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c9c4:	e00b      	b.n	800c9de <HAL_TIM_PWM_Start+0xaa>
 800c9c6:	683b      	ldr	r3, [r7, #0]
 800c9c8:	2b08      	cmp	r3, #8
 800c9ca:	d104      	bne.n	800c9d6 <HAL_TIM_PWM_Start+0xa2>
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	2202      	movs	r2, #2
 800c9d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c9d4:	e003      	b.n	800c9de <HAL_TIM_PWM_Start+0xaa>
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	2202      	movs	r2, #2
 800c9da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	2201      	movs	r2, #1
 800c9e4:	6839      	ldr	r1, [r7, #0]
 800c9e6:	4618      	mov	r0, r3
 800c9e8:	f000 fda8 	bl	800d53c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	4a23      	ldr	r2, [pc, #140]	@ (800ca80 <HAL_TIM_PWM_Start+0x14c>)
 800c9f2:	4293      	cmp	r3, r2
 800c9f4:	d107      	bne.n	800ca06 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800ca04:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	4a1d      	ldr	r2, [pc, #116]	@ (800ca80 <HAL_TIM_PWM_Start+0x14c>)
 800ca0c:	4293      	cmp	r3, r2
 800ca0e:	d018      	beq.n	800ca42 <HAL_TIM_PWM_Start+0x10e>
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ca18:	d013      	beq.n	800ca42 <HAL_TIM_PWM_Start+0x10e>
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	4a19      	ldr	r2, [pc, #100]	@ (800ca84 <HAL_TIM_PWM_Start+0x150>)
 800ca20:	4293      	cmp	r3, r2
 800ca22:	d00e      	beq.n	800ca42 <HAL_TIM_PWM_Start+0x10e>
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	4a17      	ldr	r2, [pc, #92]	@ (800ca88 <HAL_TIM_PWM_Start+0x154>)
 800ca2a:	4293      	cmp	r3, r2
 800ca2c:	d009      	beq.n	800ca42 <HAL_TIM_PWM_Start+0x10e>
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	4a16      	ldr	r2, [pc, #88]	@ (800ca8c <HAL_TIM_PWM_Start+0x158>)
 800ca34:	4293      	cmp	r3, r2
 800ca36:	d004      	beq.n	800ca42 <HAL_TIM_PWM_Start+0x10e>
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	4a14      	ldr	r2, [pc, #80]	@ (800ca90 <HAL_TIM_PWM_Start+0x15c>)
 800ca3e:	4293      	cmp	r3, r2
 800ca40:	d111      	bne.n	800ca66 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	689b      	ldr	r3, [r3, #8]
 800ca48:	f003 0307 	and.w	r3, r3, #7
 800ca4c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	2b06      	cmp	r3, #6
 800ca52:	d010      	beq.n	800ca76 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	681a      	ldr	r2, [r3, #0]
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	f042 0201 	orr.w	r2, r2, #1
 800ca62:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ca64:	e007      	b.n	800ca76 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	681a      	ldr	r2, [r3, #0]
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	f042 0201 	orr.w	r2, r2, #1
 800ca74:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ca76:	2300      	movs	r3, #0
}
 800ca78:	4618      	mov	r0, r3
 800ca7a:	3710      	adds	r7, #16
 800ca7c:	46bd      	mov	sp, r7
 800ca7e:	bd80      	pop	{r7, pc}
 800ca80:	40010000 	.word	0x40010000
 800ca84:	40000400 	.word	0x40000400
 800ca88:	40000800 	.word	0x40000800
 800ca8c:	40000c00 	.word	0x40000c00
 800ca90:	40014000 	.word	0x40014000

0800ca94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ca94:	b580      	push	{r7, lr}
 800ca96:	b084      	sub	sp, #16
 800ca98:	af00      	add	r7, sp, #0
 800ca9a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	68db      	ldr	r3, [r3, #12]
 800caa2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	691b      	ldr	r3, [r3, #16]
 800caaa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800caac:	68bb      	ldr	r3, [r7, #8]
 800caae:	f003 0302 	and.w	r3, r3, #2
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d020      	beq.n	800caf8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	f003 0302 	and.w	r3, r3, #2
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d01b      	beq.n	800caf8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	f06f 0202 	mvn.w	r2, #2
 800cac8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	2201      	movs	r2, #1
 800cace:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	699b      	ldr	r3, [r3, #24]
 800cad6:	f003 0303 	and.w	r3, r3, #3
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d003      	beq.n	800cae6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800cade:	6878      	ldr	r0, [r7, #4]
 800cae0:	f000 fa5b 	bl	800cf9a <HAL_TIM_IC_CaptureCallback>
 800cae4:	e005      	b.n	800caf2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800cae6:	6878      	ldr	r0, [r7, #4]
 800cae8:	f000 fa4d 	bl	800cf86 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800caec:	6878      	ldr	r0, [r7, #4]
 800caee:	f000 fa5e 	bl	800cfae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	2200      	movs	r2, #0
 800caf6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800caf8:	68bb      	ldr	r3, [r7, #8]
 800cafa:	f003 0304 	and.w	r3, r3, #4
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d020      	beq.n	800cb44 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	f003 0304 	and.w	r3, r3, #4
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d01b      	beq.n	800cb44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	f06f 0204 	mvn.w	r2, #4
 800cb14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	2202      	movs	r2, #2
 800cb1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	699b      	ldr	r3, [r3, #24]
 800cb22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d003      	beq.n	800cb32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cb2a:	6878      	ldr	r0, [r7, #4]
 800cb2c:	f000 fa35 	bl	800cf9a <HAL_TIM_IC_CaptureCallback>
 800cb30:	e005      	b.n	800cb3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cb32:	6878      	ldr	r0, [r7, #4]
 800cb34:	f000 fa27 	bl	800cf86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cb38:	6878      	ldr	r0, [r7, #4]
 800cb3a:	f000 fa38 	bl	800cfae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	2200      	movs	r2, #0
 800cb42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800cb44:	68bb      	ldr	r3, [r7, #8]
 800cb46:	f003 0308 	and.w	r3, r3, #8
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d020      	beq.n	800cb90 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	f003 0308 	and.w	r3, r3, #8
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d01b      	beq.n	800cb90 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	f06f 0208 	mvn.w	r2, #8
 800cb60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	2204      	movs	r2, #4
 800cb66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	69db      	ldr	r3, [r3, #28]
 800cb6e:	f003 0303 	and.w	r3, r3, #3
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d003      	beq.n	800cb7e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cb76:	6878      	ldr	r0, [r7, #4]
 800cb78:	f000 fa0f 	bl	800cf9a <HAL_TIM_IC_CaptureCallback>
 800cb7c:	e005      	b.n	800cb8a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cb7e:	6878      	ldr	r0, [r7, #4]
 800cb80:	f000 fa01 	bl	800cf86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cb84:	6878      	ldr	r0, [r7, #4]
 800cb86:	f000 fa12 	bl	800cfae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	2200      	movs	r2, #0
 800cb8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800cb90:	68bb      	ldr	r3, [r7, #8]
 800cb92:	f003 0310 	and.w	r3, r3, #16
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d020      	beq.n	800cbdc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	f003 0310 	and.w	r3, r3, #16
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d01b      	beq.n	800cbdc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	f06f 0210 	mvn.w	r2, #16
 800cbac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	2208      	movs	r2, #8
 800cbb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	69db      	ldr	r3, [r3, #28]
 800cbba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d003      	beq.n	800cbca <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cbc2:	6878      	ldr	r0, [r7, #4]
 800cbc4:	f000 f9e9 	bl	800cf9a <HAL_TIM_IC_CaptureCallback>
 800cbc8:	e005      	b.n	800cbd6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cbca:	6878      	ldr	r0, [r7, #4]
 800cbcc:	f000 f9db 	bl	800cf86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cbd0:	6878      	ldr	r0, [r7, #4]
 800cbd2:	f000 f9ec 	bl	800cfae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	2200      	movs	r2, #0
 800cbda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800cbdc:	68bb      	ldr	r3, [r7, #8]
 800cbde:	f003 0301 	and.w	r3, r3, #1
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d00c      	beq.n	800cc00 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	f003 0301 	and.w	r3, r3, #1
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d007      	beq.n	800cc00 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	f06f 0201 	mvn.w	r2, #1
 800cbf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800cbfa:	6878      	ldr	r0, [r7, #4]
 800cbfc:	f7f8 f81c 	bl	8004c38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800cc00:	68bb      	ldr	r3, [r7, #8]
 800cc02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d00c      	beq.n	800cc24 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d007      	beq.n	800cc24 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800cc1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800cc1e:	6878      	ldr	r0, [r7, #4]
 800cc20:	f000 fd2a 	bl	800d678 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800cc24:	68bb      	ldr	r3, [r7, #8]
 800cc26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d00c      	beq.n	800cc48 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d007      	beq.n	800cc48 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800cc40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800cc42:	6878      	ldr	r0, [r7, #4]
 800cc44:	f000 f9bd 	bl	800cfc2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800cc48:	68bb      	ldr	r3, [r7, #8]
 800cc4a:	f003 0320 	and.w	r3, r3, #32
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d00c      	beq.n	800cc6c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	f003 0320 	and.w	r3, r3, #32
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d007      	beq.n	800cc6c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	f06f 0220 	mvn.w	r2, #32
 800cc64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800cc66:	6878      	ldr	r0, [r7, #4]
 800cc68:	f000 fcfc 	bl	800d664 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800cc6c:	bf00      	nop
 800cc6e:	3710      	adds	r7, #16
 800cc70:	46bd      	mov	sp, r7
 800cc72:	bd80      	pop	{r7, pc}

0800cc74 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800cc74:	b580      	push	{r7, lr}
 800cc76:	b086      	sub	sp, #24
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	60f8      	str	r0, [r7, #12]
 800cc7c:	60b9      	str	r1, [r7, #8]
 800cc7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cc80:	2300      	movs	r3, #0
 800cc82:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800cc8a:	2b01      	cmp	r3, #1
 800cc8c:	d101      	bne.n	800cc92 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800cc8e:	2302      	movs	r3, #2
 800cc90:	e0ae      	b.n	800cdf0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	2201      	movs	r2, #1
 800cc96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	2b0c      	cmp	r3, #12
 800cc9e:	f200 809f 	bhi.w	800cde0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800cca2:	a201      	add	r2, pc, #4	@ (adr r2, 800cca8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800cca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cca8:	0800ccdd 	.word	0x0800ccdd
 800ccac:	0800cde1 	.word	0x0800cde1
 800ccb0:	0800cde1 	.word	0x0800cde1
 800ccb4:	0800cde1 	.word	0x0800cde1
 800ccb8:	0800cd1d 	.word	0x0800cd1d
 800ccbc:	0800cde1 	.word	0x0800cde1
 800ccc0:	0800cde1 	.word	0x0800cde1
 800ccc4:	0800cde1 	.word	0x0800cde1
 800ccc8:	0800cd5f 	.word	0x0800cd5f
 800cccc:	0800cde1 	.word	0x0800cde1
 800ccd0:	0800cde1 	.word	0x0800cde1
 800ccd4:	0800cde1 	.word	0x0800cde1
 800ccd8:	0800cd9f 	.word	0x0800cd9f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	68b9      	ldr	r1, [r7, #8]
 800cce2:	4618      	mov	r0, r3
 800cce4:	f000 fa04 	bl	800d0f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	699a      	ldr	r2, [r3, #24]
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	f042 0208 	orr.w	r2, r2, #8
 800ccf6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	699a      	ldr	r2, [r3, #24]
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	f022 0204 	bic.w	r2, r2, #4
 800cd06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	6999      	ldr	r1, [r3, #24]
 800cd0e:	68bb      	ldr	r3, [r7, #8]
 800cd10:	691a      	ldr	r2, [r3, #16]
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	430a      	orrs	r2, r1
 800cd18:	619a      	str	r2, [r3, #24]
      break;
 800cd1a:	e064      	b.n	800cde6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	68b9      	ldr	r1, [r7, #8]
 800cd22:	4618      	mov	r0, r3
 800cd24:	f000 fa4a 	bl	800d1bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	699a      	ldr	r2, [r3, #24]
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800cd36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	699a      	ldr	r2, [r3, #24]
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800cd46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	6999      	ldr	r1, [r3, #24]
 800cd4e:	68bb      	ldr	r3, [r7, #8]
 800cd50:	691b      	ldr	r3, [r3, #16]
 800cd52:	021a      	lsls	r2, r3, #8
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	430a      	orrs	r2, r1
 800cd5a:	619a      	str	r2, [r3, #24]
      break;
 800cd5c:	e043      	b.n	800cde6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	68b9      	ldr	r1, [r7, #8]
 800cd64:	4618      	mov	r0, r3
 800cd66:	f000 fa95 	bl	800d294 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	69da      	ldr	r2, [r3, #28]
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	f042 0208 	orr.w	r2, r2, #8
 800cd78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	69da      	ldr	r2, [r3, #28]
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	f022 0204 	bic.w	r2, r2, #4
 800cd88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	69d9      	ldr	r1, [r3, #28]
 800cd90:	68bb      	ldr	r3, [r7, #8]
 800cd92:	691a      	ldr	r2, [r3, #16]
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	430a      	orrs	r2, r1
 800cd9a:	61da      	str	r2, [r3, #28]
      break;
 800cd9c:	e023      	b.n	800cde6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	68b9      	ldr	r1, [r7, #8]
 800cda4:	4618      	mov	r0, r3
 800cda6:	f000 fadf 	bl	800d368 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	69da      	ldr	r2, [r3, #28]
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800cdb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	69da      	ldr	r2, [r3, #28]
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800cdc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	69d9      	ldr	r1, [r3, #28]
 800cdd0:	68bb      	ldr	r3, [r7, #8]
 800cdd2:	691b      	ldr	r3, [r3, #16]
 800cdd4:	021a      	lsls	r2, r3, #8
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	430a      	orrs	r2, r1
 800cddc:	61da      	str	r2, [r3, #28]
      break;
 800cdde:	e002      	b.n	800cde6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800cde0:	2301      	movs	r3, #1
 800cde2:	75fb      	strb	r3, [r7, #23]
      break;
 800cde4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	2200      	movs	r2, #0
 800cdea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800cdee:	7dfb      	ldrb	r3, [r7, #23]
}
 800cdf0:	4618      	mov	r0, r3
 800cdf2:	3718      	adds	r7, #24
 800cdf4:	46bd      	mov	sp, r7
 800cdf6:	bd80      	pop	{r7, pc}

0800cdf8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800cdf8:	b580      	push	{r7, lr}
 800cdfa:	b084      	sub	sp, #16
 800cdfc:	af00      	add	r7, sp, #0
 800cdfe:	6078      	str	r0, [r7, #4]
 800ce00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ce02:	2300      	movs	r3, #0
 800ce04:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ce0c:	2b01      	cmp	r3, #1
 800ce0e:	d101      	bne.n	800ce14 <HAL_TIM_ConfigClockSource+0x1c>
 800ce10:	2302      	movs	r3, #2
 800ce12:	e0b4      	b.n	800cf7e <HAL_TIM_ConfigClockSource+0x186>
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	2201      	movs	r2, #1
 800ce18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	2202      	movs	r2, #2
 800ce20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	689b      	ldr	r3, [r3, #8]
 800ce2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ce2c:	68bb      	ldr	r3, [r7, #8]
 800ce2e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800ce32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ce34:	68bb      	ldr	r3, [r7, #8]
 800ce36:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ce3a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	68ba      	ldr	r2, [r7, #8]
 800ce42:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ce44:	683b      	ldr	r3, [r7, #0]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ce4c:	d03e      	beq.n	800cecc <HAL_TIM_ConfigClockSource+0xd4>
 800ce4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ce52:	f200 8087 	bhi.w	800cf64 <HAL_TIM_ConfigClockSource+0x16c>
 800ce56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ce5a:	f000 8086 	beq.w	800cf6a <HAL_TIM_ConfigClockSource+0x172>
 800ce5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ce62:	d87f      	bhi.n	800cf64 <HAL_TIM_ConfigClockSource+0x16c>
 800ce64:	2b70      	cmp	r3, #112	@ 0x70
 800ce66:	d01a      	beq.n	800ce9e <HAL_TIM_ConfigClockSource+0xa6>
 800ce68:	2b70      	cmp	r3, #112	@ 0x70
 800ce6a:	d87b      	bhi.n	800cf64 <HAL_TIM_ConfigClockSource+0x16c>
 800ce6c:	2b60      	cmp	r3, #96	@ 0x60
 800ce6e:	d050      	beq.n	800cf12 <HAL_TIM_ConfigClockSource+0x11a>
 800ce70:	2b60      	cmp	r3, #96	@ 0x60
 800ce72:	d877      	bhi.n	800cf64 <HAL_TIM_ConfigClockSource+0x16c>
 800ce74:	2b50      	cmp	r3, #80	@ 0x50
 800ce76:	d03c      	beq.n	800cef2 <HAL_TIM_ConfigClockSource+0xfa>
 800ce78:	2b50      	cmp	r3, #80	@ 0x50
 800ce7a:	d873      	bhi.n	800cf64 <HAL_TIM_ConfigClockSource+0x16c>
 800ce7c:	2b40      	cmp	r3, #64	@ 0x40
 800ce7e:	d058      	beq.n	800cf32 <HAL_TIM_ConfigClockSource+0x13a>
 800ce80:	2b40      	cmp	r3, #64	@ 0x40
 800ce82:	d86f      	bhi.n	800cf64 <HAL_TIM_ConfigClockSource+0x16c>
 800ce84:	2b30      	cmp	r3, #48	@ 0x30
 800ce86:	d064      	beq.n	800cf52 <HAL_TIM_ConfigClockSource+0x15a>
 800ce88:	2b30      	cmp	r3, #48	@ 0x30
 800ce8a:	d86b      	bhi.n	800cf64 <HAL_TIM_ConfigClockSource+0x16c>
 800ce8c:	2b20      	cmp	r3, #32
 800ce8e:	d060      	beq.n	800cf52 <HAL_TIM_ConfigClockSource+0x15a>
 800ce90:	2b20      	cmp	r3, #32
 800ce92:	d867      	bhi.n	800cf64 <HAL_TIM_ConfigClockSource+0x16c>
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d05c      	beq.n	800cf52 <HAL_TIM_ConfigClockSource+0x15a>
 800ce98:	2b10      	cmp	r3, #16
 800ce9a:	d05a      	beq.n	800cf52 <HAL_TIM_ConfigClockSource+0x15a>
 800ce9c:	e062      	b.n	800cf64 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800cea2:	683b      	ldr	r3, [r7, #0]
 800cea4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800cea6:	683b      	ldr	r3, [r7, #0]
 800cea8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ceaa:	683b      	ldr	r3, [r7, #0]
 800ceac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ceae:	f000 fb25 	bl	800d4fc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	689b      	ldr	r3, [r3, #8]
 800ceb8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ceba:	68bb      	ldr	r3, [r7, #8]
 800cebc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800cec0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	68ba      	ldr	r2, [r7, #8]
 800cec8:	609a      	str	r2, [r3, #8]
      break;
 800ceca:	e04f      	b.n	800cf6c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ced0:	683b      	ldr	r3, [r7, #0]
 800ced2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ced4:	683b      	ldr	r3, [r7, #0]
 800ced6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ced8:	683b      	ldr	r3, [r7, #0]
 800ceda:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800cedc:	f000 fb0e 	bl	800d4fc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	689a      	ldr	r2, [r3, #8]
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ceee:	609a      	str	r2, [r3, #8]
      break;
 800cef0:	e03c      	b.n	800cf6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800cef6:	683b      	ldr	r3, [r7, #0]
 800cef8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800cefa:	683b      	ldr	r3, [r7, #0]
 800cefc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cefe:	461a      	mov	r2, r3
 800cf00:	f000 fa82 	bl	800d408 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	2150      	movs	r1, #80	@ 0x50
 800cf0a:	4618      	mov	r0, r3
 800cf0c:	f000 fadb 	bl	800d4c6 <TIM_ITRx_SetConfig>
      break;
 800cf10:	e02c      	b.n	800cf6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800cf16:	683b      	ldr	r3, [r7, #0]
 800cf18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800cf1a:	683b      	ldr	r3, [r7, #0]
 800cf1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800cf1e:	461a      	mov	r2, r3
 800cf20:	f000 faa1 	bl	800d466 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	2160      	movs	r1, #96	@ 0x60
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	f000 facb 	bl	800d4c6 <TIM_ITRx_SetConfig>
      break;
 800cf30:	e01c      	b.n	800cf6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800cf36:	683b      	ldr	r3, [r7, #0]
 800cf38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800cf3a:	683b      	ldr	r3, [r7, #0]
 800cf3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cf3e:	461a      	mov	r2, r3
 800cf40:	f000 fa62 	bl	800d408 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	2140      	movs	r1, #64	@ 0x40
 800cf4a:	4618      	mov	r0, r3
 800cf4c:	f000 fabb 	bl	800d4c6 <TIM_ITRx_SetConfig>
      break;
 800cf50:	e00c      	b.n	800cf6c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	681a      	ldr	r2, [r3, #0]
 800cf56:	683b      	ldr	r3, [r7, #0]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	4619      	mov	r1, r3
 800cf5c:	4610      	mov	r0, r2
 800cf5e:	f000 fab2 	bl	800d4c6 <TIM_ITRx_SetConfig>
      break;
 800cf62:	e003      	b.n	800cf6c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800cf64:	2301      	movs	r3, #1
 800cf66:	73fb      	strb	r3, [r7, #15]
      break;
 800cf68:	e000      	b.n	800cf6c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800cf6a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	2201      	movs	r2, #1
 800cf70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	2200      	movs	r2, #0
 800cf78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800cf7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf7e:	4618      	mov	r0, r3
 800cf80:	3710      	adds	r7, #16
 800cf82:	46bd      	mov	sp, r7
 800cf84:	bd80      	pop	{r7, pc}

0800cf86 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cf86:	b480      	push	{r7}
 800cf88:	b083      	sub	sp, #12
 800cf8a:	af00      	add	r7, sp, #0
 800cf8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800cf8e:	bf00      	nop
 800cf90:	370c      	adds	r7, #12
 800cf92:	46bd      	mov	sp, r7
 800cf94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf98:	4770      	bx	lr

0800cf9a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800cf9a:	b480      	push	{r7}
 800cf9c:	b083      	sub	sp, #12
 800cf9e:	af00      	add	r7, sp, #0
 800cfa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800cfa2:	bf00      	nop
 800cfa4:	370c      	adds	r7, #12
 800cfa6:	46bd      	mov	sp, r7
 800cfa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfac:	4770      	bx	lr

0800cfae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cfae:	b480      	push	{r7}
 800cfb0:	b083      	sub	sp, #12
 800cfb2:	af00      	add	r7, sp, #0
 800cfb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cfb6:	bf00      	nop
 800cfb8:	370c      	adds	r7, #12
 800cfba:	46bd      	mov	sp, r7
 800cfbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc0:	4770      	bx	lr

0800cfc2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cfc2:	b480      	push	{r7}
 800cfc4:	b083      	sub	sp, #12
 800cfc6:	af00      	add	r7, sp, #0
 800cfc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cfca:	bf00      	nop
 800cfcc:	370c      	adds	r7, #12
 800cfce:	46bd      	mov	sp, r7
 800cfd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd4:	4770      	bx	lr
	...

0800cfd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800cfd8:	b480      	push	{r7}
 800cfda:	b085      	sub	sp, #20
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	6078      	str	r0, [r7, #4]
 800cfe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	4a3a      	ldr	r2, [pc, #232]	@ (800d0d4 <TIM_Base_SetConfig+0xfc>)
 800cfec:	4293      	cmp	r3, r2
 800cfee:	d00f      	beq.n	800d010 <TIM_Base_SetConfig+0x38>
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cff6:	d00b      	beq.n	800d010 <TIM_Base_SetConfig+0x38>
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	4a37      	ldr	r2, [pc, #220]	@ (800d0d8 <TIM_Base_SetConfig+0x100>)
 800cffc:	4293      	cmp	r3, r2
 800cffe:	d007      	beq.n	800d010 <TIM_Base_SetConfig+0x38>
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	4a36      	ldr	r2, [pc, #216]	@ (800d0dc <TIM_Base_SetConfig+0x104>)
 800d004:	4293      	cmp	r3, r2
 800d006:	d003      	beq.n	800d010 <TIM_Base_SetConfig+0x38>
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	4a35      	ldr	r2, [pc, #212]	@ (800d0e0 <TIM_Base_SetConfig+0x108>)
 800d00c:	4293      	cmp	r3, r2
 800d00e:	d108      	bne.n	800d022 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d016:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d018:	683b      	ldr	r3, [r7, #0]
 800d01a:	685b      	ldr	r3, [r3, #4]
 800d01c:	68fa      	ldr	r2, [r7, #12]
 800d01e:	4313      	orrs	r3, r2
 800d020:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	4a2b      	ldr	r2, [pc, #172]	@ (800d0d4 <TIM_Base_SetConfig+0xfc>)
 800d026:	4293      	cmp	r3, r2
 800d028:	d01b      	beq.n	800d062 <TIM_Base_SetConfig+0x8a>
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d030:	d017      	beq.n	800d062 <TIM_Base_SetConfig+0x8a>
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	4a28      	ldr	r2, [pc, #160]	@ (800d0d8 <TIM_Base_SetConfig+0x100>)
 800d036:	4293      	cmp	r3, r2
 800d038:	d013      	beq.n	800d062 <TIM_Base_SetConfig+0x8a>
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	4a27      	ldr	r2, [pc, #156]	@ (800d0dc <TIM_Base_SetConfig+0x104>)
 800d03e:	4293      	cmp	r3, r2
 800d040:	d00f      	beq.n	800d062 <TIM_Base_SetConfig+0x8a>
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	4a26      	ldr	r2, [pc, #152]	@ (800d0e0 <TIM_Base_SetConfig+0x108>)
 800d046:	4293      	cmp	r3, r2
 800d048:	d00b      	beq.n	800d062 <TIM_Base_SetConfig+0x8a>
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	4a25      	ldr	r2, [pc, #148]	@ (800d0e4 <TIM_Base_SetConfig+0x10c>)
 800d04e:	4293      	cmp	r3, r2
 800d050:	d007      	beq.n	800d062 <TIM_Base_SetConfig+0x8a>
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	4a24      	ldr	r2, [pc, #144]	@ (800d0e8 <TIM_Base_SetConfig+0x110>)
 800d056:	4293      	cmp	r3, r2
 800d058:	d003      	beq.n	800d062 <TIM_Base_SetConfig+0x8a>
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	4a23      	ldr	r2, [pc, #140]	@ (800d0ec <TIM_Base_SetConfig+0x114>)
 800d05e:	4293      	cmp	r3, r2
 800d060:	d108      	bne.n	800d074 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d068:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d06a:	683b      	ldr	r3, [r7, #0]
 800d06c:	68db      	ldr	r3, [r3, #12]
 800d06e:	68fa      	ldr	r2, [r7, #12]
 800d070:	4313      	orrs	r3, r2
 800d072:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800d07a:	683b      	ldr	r3, [r7, #0]
 800d07c:	695b      	ldr	r3, [r3, #20]
 800d07e:	4313      	orrs	r3, r2
 800d080:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	68fa      	ldr	r2, [r7, #12]
 800d086:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d088:	683b      	ldr	r3, [r7, #0]
 800d08a:	689a      	ldr	r2, [r3, #8]
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d090:	683b      	ldr	r3, [r7, #0]
 800d092:	681a      	ldr	r2, [r3, #0]
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	4a0e      	ldr	r2, [pc, #56]	@ (800d0d4 <TIM_Base_SetConfig+0xfc>)
 800d09c:	4293      	cmp	r3, r2
 800d09e:	d103      	bne.n	800d0a8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d0a0:	683b      	ldr	r3, [r7, #0]
 800d0a2:	691a      	ldr	r2, [r3, #16]
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	2201      	movs	r2, #1
 800d0ac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	691b      	ldr	r3, [r3, #16]
 800d0b2:	f003 0301 	and.w	r3, r3, #1
 800d0b6:	2b01      	cmp	r3, #1
 800d0b8:	d105      	bne.n	800d0c6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	691b      	ldr	r3, [r3, #16]
 800d0be:	f023 0201 	bic.w	r2, r3, #1
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	611a      	str	r2, [r3, #16]
  }
}
 800d0c6:	bf00      	nop
 800d0c8:	3714      	adds	r7, #20
 800d0ca:	46bd      	mov	sp, r7
 800d0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d0:	4770      	bx	lr
 800d0d2:	bf00      	nop
 800d0d4:	40010000 	.word	0x40010000
 800d0d8:	40000400 	.word	0x40000400
 800d0dc:	40000800 	.word	0x40000800
 800d0e0:	40000c00 	.word	0x40000c00
 800d0e4:	40014000 	.word	0x40014000
 800d0e8:	40014400 	.word	0x40014400
 800d0ec:	40014800 	.word	0x40014800

0800d0f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d0f0:	b480      	push	{r7}
 800d0f2:	b087      	sub	sp, #28
 800d0f4:	af00      	add	r7, sp, #0
 800d0f6:	6078      	str	r0, [r7, #4]
 800d0f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	6a1b      	ldr	r3, [r3, #32]
 800d0fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	6a1b      	ldr	r3, [r3, #32]
 800d104:	f023 0201 	bic.w	r2, r3, #1
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	685b      	ldr	r3, [r3, #4]
 800d110:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	699b      	ldr	r3, [r3, #24]
 800d116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d11e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	f023 0303 	bic.w	r3, r3, #3
 800d126:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d128:	683b      	ldr	r3, [r7, #0]
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	68fa      	ldr	r2, [r7, #12]
 800d12e:	4313      	orrs	r3, r2
 800d130:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d132:	697b      	ldr	r3, [r7, #20]
 800d134:	f023 0302 	bic.w	r3, r3, #2
 800d138:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d13a:	683b      	ldr	r3, [r7, #0]
 800d13c:	689b      	ldr	r3, [r3, #8]
 800d13e:	697a      	ldr	r2, [r7, #20]
 800d140:	4313      	orrs	r3, r2
 800d142:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	4a1c      	ldr	r2, [pc, #112]	@ (800d1b8 <TIM_OC1_SetConfig+0xc8>)
 800d148:	4293      	cmp	r3, r2
 800d14a:	d10c      	bne.n	800d166 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d14c:	697b      	ldr	r3, [r7, #20]
 800d14e:	f023 0308 	bic.w	r3, r3, #8
 800d152:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d154:	683b      	ldr	r3, [r7, #0]
 800d156:	68db      	ldr	r3, [r3, #12]
 800d158:	697a      	ldr	r2, [r7, #20]
 800d15a:	4313      	orrs	r3, r2
 800d15c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d15e:	697b      	ldr	r3, [r7, #20]
 800d160:	f023 0304 	bic.w	r3, r3, #4
 800d164:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	4a13      	ldr	r2, [pc, #76]	@ (800d1b8 <TIM_OC1_SetConfig+0xc8>)
 800d16a:	4293      	cmp	r3, r2
 800d16c:	d111      	bne.n	800d192 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d16e:	693b      	ldr	r3, [r7, #16]
 800d170:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d174:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d176:	693b      	ldr	r3, [r7, #16]
 800d178:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800d17c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d17e:	683b      	ldr	r3, [r7, #0]
 800d180:	695b      	ldr	r3, [r3, #20]
 800d182:	693a      	ldr	r2, [r7, #16]
 800d184:	4313      	orrs	r3, r2
 800d186:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d188:	683b      	ldr	r3, [r7, #0]
 800d18a:	699b      	ldr	r3, [r3, #24]
 800d18c:	693a      	ldr	r2, [r7, #16]
 800d18e:	4313      	orrs	r3, r2
 800d190:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	693a      	ldr	r2, [r7, #16]
 800d196:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	68fa      	ldr	r2, [r7, #12]
 800d19c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d19e:	683b      	ldr	r3, [r7, #0]
 800d1a0:	685a      	ldr	r2, [r3, #4]
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	697a      	ldr	r2, [r7, #20]
 800d1aa:	621a      	str	r2, [r3, #32]
}
 800d1ac:	bf00      	nop
 800d1ae:	371c      	adds	r7, #28
 800d1b0:	46bd      	mov	sp, r7
 800d1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b6:	4770      	bx	lr
 800d1b8:	40010000 	.word	0x40010000

0800d1bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d1bc:	b480      	push	{r7}
 800d1be:	b087      	sub	sp, #28
 800d1c0:	af00      	add	r7, sp, #0
 800d1c2:	6078      	str	r0, [r7, #4]
 800d1c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	6a1b      	ldr	r3, [r3, #32]
 800d1ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	6a1b      	ldr	r3, [r3, #32]
 800d1d0:	f023 0210 	bic.w	r2, r3, #16
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	685b      	ldr	r3, [r3, #4]
 800d1dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	699b      	ldr	r3, [r3, #24]
 800d1e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d1ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d1f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d1f4:	683b      	ldr	r3, [r7, #0]
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	021b      	lsls	r3, r3, #8
 800d1fa:	68fa      	ldr	r2, [r7, #12]
 800d1fc:	4313      	orrs	r3, r2
 800d1fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d200:	697b      	ldr	r3, [r7, #20]
 800d202:	f023 0320 	bic.w	r3, r3, #32
 800d206:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d208:	683b      	ldr	r3, [r7, #0]
 800d20a:	689b      	ldr	r3, [r3, #8]
 800d20c:	011b      	lsls	r3, r3, #4
 800d20e:	697a      	ldr	r2, [r7, #20]
 800d210:	4313      	orrs	r3, r2
 800d212:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	4a1e      	ldr	r2, [pc, #120]	@ (800d290 <TIM_OC2_SetConfig+0xd4>)
 800d218:	4293      	cmp	r3, r2
 800d21a:	d10d      	bne.n	800d238 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d21c:	697b      	ldr	r3, [r7, #20]
 800d21e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d222:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d224:	683b      	ldr	r3, [r7, #0]
 800d226:	68db      	ldr	r3, [r3, #12]
 800d228:	011b      	lsls	r3, r3, #4
 800d22a:	697a      	ldr	r2, [r7, #20]
 800d22c:	4313      	orrs	r3, r2
 800d22e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d230:	697b      	ldr	r3, [r7, #20]
 800d232:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d236:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	4a15      	ldr	r2, [pc, #84]	@ (800d290 <TIM_OC2_SetConfig+0xd4>)
 800d23c:	4293      	cmp	r3, r2
 800d23e:	d113      	bne.n	800d268 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d240:	693b      	ldr	r3, [r7, #16]
 800d242:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800d246:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d248:	693b      	ldr	r3, [r7, #16]
 800d24a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d24e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d250:	683b      	ldr	r3, [r7, #0]
 800d252:	695b      	ldr	r3, [r3, #20]
 800d254:	009b      	lsls	r3, r3, #2
 800d256:	693a      	ldr	r2, [r7, #16]
 800d258:	4313      	orrs	r3, r2
 800d25a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d25c:	683b      	ldr	r3, [r7, #0]
 800d25e:	699b      	ldr	r3, [r3, #24]
 800d260:	009b      	lsls	r3, r3, #2
 800d262:	693a      	ldr	r2, [r7, #16]
 800d264:	4313      	orrs	r3, r2
 800d266:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	693a      	ldr	r2, [r7, #16]
 800d26c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	68fa      	ldr	r2, [r7, #12]
 800d272:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d274:	683b      	ldr	r3, [r7, #0]
 800d276:	685a      	ldr	r2, [r3, #4]
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	697a      	ldr	r2, [r7, #20]
 800d280:	621a      	str	r2, [r3, #32]
}
 800d282:	bf00      	nop
 800d284:	371c      	adds	r7, #28
 800d286:	46bd      	mov	sp, r7
 800d288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d28c:	4770      	bx	lr
 800d28e:	bf00      	nop
 800d290:	40010000 	.word	0x40010000

0800d294 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d294:	b480      	push	{r7}
 800d296:	b087      	sub	sp, #28
 800d298:	af00      	add	r7, sp, #0
 800d29a:	6078      	str	r0, [r7, #4]
 800d29c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	6a1b      	ldr	r3, [r3, #32]
 800d2a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	6a1b      	ldr	r3, [r3, #32]
 800d2a8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	685b      	ldr	r3, [r3, #4]
 800d2b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	69db      	ldr	r3, [r3, #28]
 800d2ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d2c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	f023 0303 	bic.w	r3, r3, #3
 800d2ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d2cc:	683b      	ldr	r3, [r7, #0]
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	68fa      	ldr	r2, [r7, #12]
 800d2d2:	4313      	orrs	r3, r2
 800d2d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d2d6:	697b      	ldr	r3, [r7, #20]
 800d2d8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800d2dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d2de:	683b      	ldr	r3, [r7, #0]
 800d2e0:	689b      	ldr	r3, [r3, #8]
 800d2e2:	021b      	lsls	r3, r3, #8
 800d2e4:	697a      	ldr	r2, [r7, #20]
 800d2e6:	4313      	orrs	r3, r2
 800d2e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	4a1d      	ldr	r2, [pc, #116]	@ (800d364 <TIM_OC3_SetConfig+0xd0>)
 800d2ee:	4293      	cmp	r3, r2
 800d2f0:	d10d      	bne.n	800d30e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d2f2:	697b      	ldr	r3, [r7, #20]
 800d2f4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d2f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d2fa:	683b      	ldr	r3, [r7, #0]
 800d2fc:	68db      	ldr	r3, [r3, #12]
 800d2fe:	021b      	lsls	r3, r3, #8
 800d300:	697a      	ldr	r2, [r7, #20]
 800d302:	4313      	orrs	r3, r2
 800d304:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d306:	697b      	ldr	r3, [r7, #20]
 800d308:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800d30c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	4a14      	ldr	r2, [pc, #80]	@ (800d364 <TIM_OC3_SetConfig+0xd0>)
 800d312:	4293      	cmp	r3, r2
 800d314:	d113      	bne.n	800d33e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d316:	693b      	ldr	r3, [r7, #16]
 800d318:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d31c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d31e:	693b      	ldr	r3, [r7, #16]
 800d320:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800d324:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d326:	683b      	ldr	r3, [r7, #0]
 800d328:	695b      	ldr	r3, [r3, #20]
 800d32a:	011b      	lsls	r3, r3, #4
 800d32c:	693a      	ldr	r2, [r7, #16]
 800d32e:	4313      	orrs	r3, r2
 800d330:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d332:	683b      	ldr	r3, [r7, #0]
 800d334:	699b      	ldr	r3, [r3, #24]
 800d336:	011b      	lsls	r3, r3, #4
 800d338:	693a      	ldr	r2, [r7, #16]
 800d33a:	4313      	orrs	r3, r2
 800d33c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	693a      	ldr	r2, [r7, #16]
 800d342:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	68fa      	ldr	r2, [r7, #12]
 800d348:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d34a:	683b      	ldr	r3, [r7, #0]
 800d34c:	685a      	ldr	r2, [r3, #4]
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	697a      	ldr	r2, [r7, #20]
 800d356:	621a      	str	r2, [r3, #32]
}
 800d358:	bf00      	nop
 800d35a:	371c      	adds	r7, #28
 800d35c:	46bd      	mov	sp, r7
 800d35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d362:	4770      	bx	lr
 800d364:	40010000 	.word	0x40010000

0800d368 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d368:	b480      	push	{r7}
 800d36a:	b087      	sub	sp, #28
 800d36c:	af00      	add	r7, sp, #0
 800d36e:	6078      	str	r0, [r7, #4]
 800d370:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	6a1b      	ldr	r3, [r3, #32]
 800d376:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	6a1b      	ldr	r3, [r3, #32]
 800d37c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	685b      	ldr	r3, [r3, #4]
 800d388:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	69db      	ldr	r3, [r3, #28]
 800d38e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d396:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d39e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d3a0:	683b      	ldr	r3, [r7, #0]
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	021b      	lsls	r3, r3, #8
 800d3a6:	68fa      	ldr	r2, [r7, #12]
 800d3a8:	4313      	orrs	r3, r2
 800d3aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d3ac:	693b      	ldr	r3, [r7, #16]
 800d3ae:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800d3b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d3b4:	683b      	ldr	r3, [r7, #0]
 800d3b6:	689b      	ldr	r3, [r3, #8]
 800d3b8:	031b      	lsls	r3, r3, #12
 800d3ba:	693a      	ldr	r2, [r7, #16]
 800d3bc:	4313      	orrs	r3, r2
 800d3be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	4a10      	ldr	r2, [pc, #64]	@ (800d404 <TIM_OC4_SetConfig+0x9c>)
 800d3c4:	4293      	cmp	r3, r2
 800d3c6:	d109      	bne.n	800d3dc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d3c8:	697b      	ldr	r3, [r7, #20]
 800d3ca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d3ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d3d0:	683b      	ldr	r3, [r7, #0]
 800d3d2:	695b      	ldr	r3, [r3, #20]
 800d3d4:	019b      	lsls	r3, r3, #6
 800d3d6:	697a      	ldr	r2, [r7, #20]
 800d3d8:	4313      	orrs	r3, r2
 800d3da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	697a      	ldr	r2, [r7, #20]
 800d3e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	68fa      	ldr	r2, [r7, #12]
 800d3e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d3e8:	683b      	ldr	r3, [r7, #0]
 800d3ea:	685a      	ldr	r2, [r3, #4]
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	693a      	ldr	r2, [r7, #16]
 800d3f4:	621a      	str	r2, [r3, #32]
}
 800d3f6:	bf00      	nop
 800d3f8:	371c      	adds	r7, #28
 800d3fa:	46bd      	mov	sp, r7
 800d3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d400:	4770      	bx	lr
 800d402:	bf00      	nop
 800d404:	40010000 	.word	0x40010000

0800d408 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d408:	b480      	push	{r7}
 800d40a:	b087      	sub	sp, #28
 800d40c:	af00      	add	r7, sp, #0
 800d40e:	60f8      	str	r0, [r7, #12]
 800d410:	60b9      	str	r1, [r7, #8]
 800d412:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	6a1b      	ldr	r3, [r3, #32]
 800d418:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	6a1b      	ldr	r3, [r3, #32]
 800d41e:	f023 0201 	bic.w	r2, r3, #1
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	699b      	ldr	r3, [r3, #24]
 800d42a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d42c:	693b      	ldr	r3, [r7, #16]
 800d42e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800d432:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	011b      	lsls	r3, r3, #4
 800d438:	693a      	ldr	r2, [r7, #16]
 800d43a:	4313      	orrs	r3, r2
 800d43c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d43e:	697b      	ldr	r3, [r7, #20]
 800d440:	f023 030a 	bic.w	r3, r3, #10
 800d444:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d446:	697a      	ldr	r2, [r7, #20]
 800d448:	68bb      	ldr	r3, [r7, #8]
 800d44a:	4313      	orrs	r3, r2
 800d44c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	693a      	ldr	r2, [r7, #16]
 800d452:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	697a      	ldr	r2, [r7, #20]
 800d458:	621a      	str	r2, [r3, #32]
}
 800d45a:	bf00      	nop
 800d45c:	371c      	adds	r7, #28
 800d45e:	46bd      	mov	sp, r7
 800d460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d464:	4770      	bx	lr

0800d466 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d466:	b480      	push	{r7}
 800d468:	b087      	sub	sp, #28
 800d46a:	af00      	add	r7, sp, #0
 800d46c:	60f8      	str	r0, [r7, #12]
 800d46e:	60b9      	str	r1, [r7, #8]
 800d470:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	6a1b      	ldr	r3, [r3, #32]
 800d476:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	6a1b      	ldr	r3, [r3, #32]
 800d47c:	f023 0210 	bic.w	r2, r3, #16
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	699b      	ldr	r3, [r3, #24]
 800d488:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d48a:	693b      	ldr	r3, [r7, #16]
 800d48c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800d490:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	031b      	lsls	r3, r3, #12
 800d496:	693a      	ldr	r2, [r7, #16]
 800d498:	4313      	orrs	r3, r2
 800d49a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d49c:	697b      	ldr	r3, [r7, #20]
 800d49e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800d4a2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d4a4:	68bb      	ldr	r3, [r7, #8]
 800d4a6:	011b      	lsls	r3, r3, #4
 800d4a8:	697a      	ldr	r2, [r7, #20]
 800d4aa:	4313      	orrs	r3, r2
 800d4ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	693a      	ldr	r2, [r7, #16]
 800d4b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	697a      	ldr	r2, [r7, #20]
 800d4b8:	621a      	str	r2, [r3, #32]
}
 800d4ba:	bf00      	nop
 800d4bc:	371c      	adds	r7, #28
 800d4be:	46bd      	mov	sp, r7
 800d4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c4:	4770      	bx	lr

0800d4c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d4c6:	b480      	push	{r7}
 800d4c8:	b085      	sub	sp, #20
 800d4ca:	af00      	add	r7, sp, #0
 800d4cc:	6078      	str	r0, [r7, #4]
 800d4ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	689b      	ldr	r3, [r3, #8]
 800d4d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d4dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d4de:	683a      	ldr	r2, [r7, #0]
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	4313      	orrs	r3, r2
 800d4e4:	f043 0307 	orr.w	r3, r3, #7
 800d4e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	68fa      	ldr	r2, [r7, #12]
 800d4ee:	609a      	str	r2, [r3, #8]
}
 800d4f0:	bf00      	nop
 800d4f2:	3714      	adds	r7, #20
 800d4f4:	46bd      	mov	sp, r7
 800d4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4fa:	4770      	bx	lr

0800d4fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d4fc:	b480      	push	{r7}
 800d4fe:	b087      	sub	sp, #28
 800d500:	af00      	add	r7, sp, #0
 800d502:	60f8      	str	r0, [r7, #12]
 800d504:	60b9      	str	r1, [r7, #8]
 800d506:	607a      	str	r2, [r7, #4]
 800d508:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	689b      	ldr	r3, [r3, #8]
 800d50e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d510:	697b      	ldr	r3, [r7, #20]
 800d512:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d516:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d518:	683b      	ldr	r3, [r7, #0]
 800d51a:	021a      	lsls	r2, r3, #8
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	431a      	orrs	r2, r3
 800d520:	68bb      	ldr	r3, [r7, #8]
 800d522:	4313      	orrs	r3, r2
 800d524:	697a      	ldr	r2, [r7, #20]
 800d526:	4313      	orrs	r3, r2
 800d528:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	697a      	ldr	r2, [r7, #20]
 800d52e:	609a      	str	r2, [r3, #8]
}
 800d530:	bf00      	nop
 800d532:	371c      	adds	r7, #28
 800d534:	46bd      	mov	sp, r7
 800d536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d53a:	4770      	bx	lr

0800d53c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d53c:	b480      	push	{r7}
 800d53e:	b087      	sub	sp, #28
 800d540:	af00      	add	r7, sp, #0
 800d542:	60f8      	str	r0, [r7, #12]
 800d544:	60b9      	str	r1, [r7, #8]
 800d546:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d548:	68bb      	ldr	r3, [r7, #8]
 800d54a:	f003 031f 	and.w	r3, r3, #31
 800d54e:	2201      	movs	r2, #1
 800d550:	fa02 f303 	lsl.w	r3, r2, r3
 800d554:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	6a1a      	ldr	r2, [r3, #32]
 800d55a:	697b      	ldr	r3, [r7, #20]
 800d55c:	43db      	mvns	r3, r3
 800d55e:	401a      	ands	r2, r3
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	6a1a      	ldr	r2, [r3, #32]
 800d568:	68bb      	ldr	r3, [r7, #8]
 800d56a:	f003 031f 	and.w	r3, r3, #31
 800d56e:	6879      	ldr	r1, [r7, #4]
 800d570:	fa01 f303 	lsl.w	r3, r1, r3
 800d574:	431a      	orrs	r2, r3
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	621a      	str	r2, [r3, #32]
}
 800d57a:	bf00      	nop
 800d57c:	371c      	adds	r7, #28
 800d57e:	46bd      	mov	sp, r7
 800d580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d584:	4770      	bx	lr
	...

0800d588 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d588:	b480      	push	{r7}
 800d58a:	b085      	sub	sp, #20
 800d58c:	af00      	add	r7, sp, #0
 800d58e:	6078      	str	r0, [r7, #4]
 800d590:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d598:	2b01      	cmp	r3, #1
 800d59a:	d101      	bne.n	800d5a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d59c:	2302      	movs	r3, #2
 800d59e:	e050      	b.n	800d642 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	2201      	movs	r2, #1
 800d5a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	2202      	movs	r2, #2
 800d5ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	685b      	ldr	r3, [r3, #4]
 800d5b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	689b      	ldr	r3, [r3, #8]
 800d5be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d5c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d5c8:	683b      	ldr	r3, [r7, #0]
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	68fa      	ldr	r2, [r7, #12]
 800d5ce:	4313      	orrs	r3, r2
 800d5d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	68fa      	ldr	r2, [r7, #12]
 800d5d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	4a1c      	ldr	r2, [pc, #112]	@ (800d650 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800d5e0:	4293      	cmp	r3, r2
 800d5e2:	d018      	beq.n	800d616 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d5ec:	d013      	beq.n	800d616 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	4a18      	ldr	r2, [pc, #96]	@ (800d654 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800d5f4:	4293      	cmp	r3, r2
 800d5f6:	d00e      	beq.n	800d616 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	4a16      	ldr	r2, [pc, #88]	@ (800d658 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800d5fe:	4293      	cmp	r3, r2
 800d600:	d009      	beq.n	800d616 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	4a15      	ldr	r2, [pc, #84]	@ (800d65c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800d608:	4293      	cmp	r3, r2
 800d60a:	d004      	beq.n	800d616 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	4a13      	ldr	r2, [pc, #76]	@ (800d660 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800d612:	4293      	cmp	r3, r2
 800d614:	d10c      	bne.n	800d630 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d616:	68bb      	ldr	r3, [r7, #8]
 800d618:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d61c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d61e:	683b      	ldr	r3, [r7, #0]
 800d620:	685b      	ldr	r3, [r3, #4]
 800d622:	68ba      	ldr	r2, [r7, #8]
 800d624:	4313      	orrs	r3, r2
 800d626:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	68ba      	ldr	r2, [r7, #8]
 800d62e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	2201      	movs	r2, #1
 800d634:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	2200      	movs	r2, #0
 800d63c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d640:	2300      	movs	r3, #0
}
 800d642:	4618      	mov	r0, r3
 800d644:	3714      	adds	r7, #20
 800d646:	46bd      	mov	sp, r7
 800d648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d64c:	4770      	bx	lr
 800d64e:	bf00      	nop
 800d650:	40010000 	.word	0x40010000
 800d654:	40000400 	.word	0x40000400
 800d658:	40000800 	.word	0x40000800
 800d65c:	40000c00 	.word	0x40000c00
 800d660:	40014000 	.word	0x40014000

0800d664 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d664:	b480      	push	{r7}
 800d666:	b083      	sub	sp, #12
 800d668:	af00      	add	r7, sp, #0
 800d66a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d66c:	bf00      	nop
 800d66e:	370c      	adds	r7, #12
 800d670:	46bd      	mov	sp, r7
 800d672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d676:	4770      	bx	lr

0800d678 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d678:	b480      	push	{r7}
 800d67a:	b083      	sub	sp, #12
 800d67c:	af00      	add	r7, sp, #0
 800d67e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d680:	bf00      	nop
 800d682:	370c      	adds	r7, #12
 800d684:	46bd      	mov	sp, r7
 800d686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d68a:	4770      	bx	lr

0800d68c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d68c:	b580      	push	{r7, lr}
 800d68e:	b082      	sub	sp, #8
 800d690:	af00      	add	r7, sp, #0
 800d692:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	2b00      	cmp	r3, #0
 800d698:	d101      	bne.n	800d69e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d69a:	2301      	movs	r3, #1
 800d69c:	e042      	b.n	800d724 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d6a4:	b2db      	uxtb	r3, r3
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d106      	bne.n	800d6b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	2200      	movs	r2, #0
 800d6ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d6b2:	6878      	ldr	r0, [r7, #4]
 800d6b4:	f7f7 ff50 	bl	8005558 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	2224      	movs	r2, #36	@ 0x24
 800d6bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	68da      	ldr	r2, [r3, #12]
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800d6ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800d6d0:	6878      	ldr	r0, [r7, #4]
 800d6d2:	f000 fcdb 	bl	800e08c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	691a      	ldr	r2, [r3, #16]
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800d6e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	695a      	ldr	r2, [r3, #20]
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800d6f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	68da      	ldr	r2, [r3, #12]
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800d704:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	2200      	movs	r2, #0
 800d70a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	2220      	movs	r2, #32
 800d710:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	2220      	movs	r2, #32
 800d718:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	2200      	movs	r2, #0
 800d720:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800d722:	2300      	movs	r3, #0
}
 800d724:	4618      	mov	r0, r3
 800d726:	3708      	adds	r7, #8
 800d728:	46bd      	mov	sp, r7
 800d72a:	bd80      	pop	{r7, pc}

0800d72c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d72c:	b580      	push	{r7, lr}
 800d72e:	b084      	sub	sp, #16
 800d730:	af00      	add	r7, sp, #0
 800d732:	60f8      	str	r0, [r7, #12]
 800d734:	60b9      	str	r1, [r7, #8]
 800d736:	4613      	mov	r3, r2
 800d738:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d740:	b2db      	uxtb	r3, r3
 800d742:	2b20      	cmp	r3, #32
 800d744:	d112      	bne.n	800d76c <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800d746:	68bb      	ldr	r3, [r7, #8]
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d002      	beq.n	800d752 <HAL_UART_Receive_IT+0x26>
 800d74c:	88fb      	ldrh	r3, [r7, #6]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d101      	bne.n	800d756 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800d752:	2301      	movs	r3, #1
 800d754:	e00b      	b.n	800d76e <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	2200      	movs	r2, #0
 800d75a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800d75c:	88fb      	ldrh	r3, [r7, #6]
 800d75e:	461a      	mov	r2, r3
 800d760:	68b9      	ldr	r1, [r7, #8]
 800d762:	68f8      	ldr	r0, [r7, #12]
 800d764:	f000 faba 	bl	800dcdc <UART_Start_Receive_IT>
 800d768:	4603      	mov	r3, r0
 800d76a:	e000      	b.n	800d76e <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800d76c:	2302      	movs	r3, #2
  }
}
 800d76e:	4618      	mov	r0, r3
 800d770:	3710      	adds	r7, #16
 800d772:	46bd      	mov	sp, r7
 800d774:	bd80      	pop	{r7, pc}
	...

0800d778 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d778:	b580      	push	{r7, lr}
 800d77a:	b0ba      	sub	sp, #232	@ 0xe8
 800d77c:	af00      	add	r7, sp, #0
 800d77e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	68db      	ldr	r3, [r3, #12]
 800d790:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	695b      	ldr	r3, [r3, #20]
 800d79a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800d79e:	2300      	movs	r3, #0
 800d7a0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800d7a4:	2300      	movs	r3, #0
 800d7a6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800d7aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d7ae:	f003 030f 	and.w	r3, r3, #15
 800d7b2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800d7b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d10f      	bne.n	800d7de <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800d7be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d7c2:	f003 0320 	and.w	r3, r3, #32
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d009      	beq.n	800d7de <HAL_UART_IRQHandler+0x66>
 800d7ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d7ce:	f003 0320 	and.w	r3, r3, #32
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d003      	beq.n	800d7de <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800d7d6:	6878      	ldr	r0, [r7, #4]
 800d7d8:	f000 fb99 	bl	800df0e <UART_Receive_IT>
      return;
 800d7dc:	e25b      	b.n	800dc96 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800d7de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	f000 80de 	beq.w	800d9a4 <HAL_UART_IRQHandler+0x22c>
 800d7e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d7ec:	f003 0301 	and.w	r3, r3, #1
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d106      	bne.n	800d802 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800d7f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d7f8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	f000 80d1 	beq.w	800d9a4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800d802:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d806:	f003 0301 	and.w	r3, r3, #1
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d00b      	beq.n	800d826 <HAL_UART_IRQHandler+0xae>
 800d80e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d812:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d816:	2b00      	cmp	r3, #0
 800d818:	d005      	beq.n	800d826 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d81e:	f043 0201 	orr.w	r2, r3, #1
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800d826:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d82a:	f003 0304 	and.w	r3, r3, #4
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d00b      	beq.n	800d84a <HAL_UART_IRQHandler+0xd2>
 800d832:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d836:	f003 0301 	and.w	r3, r3, #1
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d005      	beq.n	800d84a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d842:	f043 0202 	orr.w	r2, r3, #2
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800d84a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d84e:	f003 0302 	and.w	r3, r3, #2
 800d852:	2b00      	cmp	r3, #0
 800d854:	d00b      	beq.n	800d86e <HAL_UART_IRQHandler+0xf6>
 800d856:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d85a:	f003 0301 	and.w	r3, r3, #1
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d005      	beq.n	800d86e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d866:	f043 0204 	orr.w	r2, r3, #4
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800d86e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d872:	f003 0308 	and.w	r3, r3, #8
 800d876:	2b00      	cmp	r3, #0
 800d878:	d011      	beq.n	800d89e <HAL_UART_IRQHandler+0x126>
 800d87a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d87e:	f003 0320 	and.w	r3, r3, #32
 800d882:	2b00      	cmp	r3, #0
 800d884:	d105      	bne.n	800d892 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800d886:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d88a:	f003 0301 	and.w	r3, r3, #1
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d005      	beq.n	800d89e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d896:	f043 0208 	orr.w	r2, r3, #8
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	f000 81f2 	beq.w	800dc8c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800d8a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d8ac:	f003 0320 	and.w	r3, r3, #32
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d008      	beq.n	800d8c6 <HAL_UART_IRQHandler+0x14e>
 800d8b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d8b8:	f003 0320 	and.w	r3, r3, #32
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d002      	beq.n	800d8c6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800d8c0:	6878      	ldr	r0, [r7, #4]
 800d8c2:	f000 fb24 	bl	800df0e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	695b      	ldr	r3, [r3, #20]
 800d8cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d8d0:	2b40      	cmp	r3, #64	@ 0x40
 800d8d2:	bf0c      	ite	eq
 800d8d4:	2301      	moveq	r3, #1
 800d8d6:	2300      	movne	r3, #0
 800d8d8:	b2db      	uxtb	r3, r3
 800d8da:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d8e2:	f003 0308 	and.w	r3, r3, #8
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d103      	bne.n	800d8f2 <HAL_UART_IRQHandler+0x17a>
 800d8ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d04f      	beq.n	800d992 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d8f2:	6878      	ldr	r0, [r7, #4]
 800d8f4:	f000 fa2c 	bl	800dd50 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	695b      	ldr	r3, [r3, #20]
 800d8fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d902:	2b40      	cmp	r3, #64	@ 0x40
 800d904:	d141      	bne.n	800d98a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	3314      	adds	r3, #20
 800d90c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d910:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d914:	e853 3f00 	ldrex	r3, [r3]
 800d918:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800d91c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d920:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d924:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	3314      	adds	r3, #20
 800d92e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800d932:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800d936:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d93a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800d93e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800d942:	e841 2300 	strex	r3, r2, [r1]
 800d946:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800d94a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d1d9      	bne.n	800d906 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d956:	2b00      	cmp	r3, #0
 800d958:	d013      	beq.n	800d982 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d95e:	4a7e      	ldr	r2, [pc, #504]	@ (800db58 <HAL_UART_IRQHandler+0x3e0>)
 800d960:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d966:	4618      	mov	r0, r3
 800d968:	f7f8 ffa0 	bl	80068ac <HAL_DMA_Abort_IT>
 800d96c:	4603      	mov	r3, r0
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d016      	beq.n	800d9a0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d976:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d978:	687a      	ldr	r2, [r7, #4]
 800d97a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800d97c:	4610      	mov	r0, r2
 800d97e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d980:	e00e      	b.n	800d9a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d982:	6878      	ldr	r0, [r7, #4]
 800d984:	f000 f994 	bl	800dcb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d988:	e00a      	b.n	800d9a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d98a:	6878      	ldr	r0, [r7, #4]
 800d98c:	f000 f990 	bl	800dcb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d990:	e006      	b.n	800d9a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d992:	6878      	ldr	r0, [r7, #4]
 800d994:	f000 f98c 	bl	800dcb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	2200      	movs	r2, #0
 800d99c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800d99e:	e175      	b.n	800dc8c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d9a0:	bf00      	nop
    return;
 800d9a2:	e173      	b.n	800dc8c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d9a8:	2b01      	cmp	r3, #1
 800d9aa:	f040 814f 	bne.w	800dc4c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800d9ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d9b2:	f003 0310 	and.w	r3, r3, #16
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	f000 8148 	beq.w	800dc4c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800d9bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d9c0:	f003 0310 	and.w	r3, r3, #16
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	f000 8141 	beq.w	800dc4c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800d9ca:	2300      	movs	r3, #0
 800d9cc:	60bb      	str	r3, [r7, #8]
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	60bb      	str	r3, [r7, #8]
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	685b      	ldr	r3, [r3, #4]
 800d9dc:	60bb      	str	r3, [r7, #8]
 800d9de:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	695b      	ldr	r3, [r3, #20]
 800d9e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d9ea:	2b40      	cmp	r3, #64	@ 0x40
 800d9ec:	f040 80b6 	bne.w	800db5c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	685b      	ldr	r3, [r3, #4]
 800d9f8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d9fc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800da00:	2b00      	cmp	r3, #0
 800da02:	f000 8145 	beq.w	800dc90 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800da0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800da0e:	429a      	cmp	r2, r3
 800da10:	f080 813e 	bcs.w	800dc90 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800da1a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800da20:	69db      	ldr	r3, [r3, #28]
 800da22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800da26:	f000 8088 	beq.w	800db3a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	330c      	adds	r3, #12
 800da30:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da34:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800da38:	e853 3f00 	ldrex	r3, [r3]
 800da3c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800da40:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800da44:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800da48:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	330c      	adds	r3, #12
 800da52:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800da56:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800da5a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da5e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800da62:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800da66:	e841 2300 	strex	r3, r2, [r1]
 800da6a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800da6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800da72:	2b00      	cmp	r3, #0
 800da74:	d1d9      	bne.n	800da2a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	3314      	adds	r3, #20
 800da7c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da7e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800da80:	e853 3f00 	ldrex	r3, [r3]
 800da84:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800da86:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800da88:	f023 0301 	bic.w	r3, r3, #1
 800da8c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	3314      	adds	r3, #20
 800da96:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800da9a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800da9e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800daa0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800daa2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800daa6:	e841 2300 	strex	r3, r2, [r1]
 800daaa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800daac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d1e1      	bne.n	800da76 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	3314      	adds	r3, #20
 800dab8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800daba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800dabc:	e853 3f00 	ldrex	r3, [r3]
 800dac0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800dac2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dac4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dac8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	3314      	adds	r3, #20
 800dad2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800dad6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800dad8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dada:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800dadc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800dade:	e841 2300 	strex	r3, r2, [r1]
 800dae2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800dae4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d1e3      	bne.n	800dab2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	2220      	movs	r2, #32
 800daee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	2200      	movs	r2, #0
 800daf6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	330c      	adds	r3, #12
 800dafe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800db02:	e853 3f00 	ldrex	r3, [r3]
 800db06:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800db08:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800db0a:	f023 0310 	bic.w	r3, r3, #16
 800db0e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	330c      	adds	r3, #12
 800db18:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800db1c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800db1e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db20:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800db22:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800db24:	e841 2300 	strex	r3, r2, [r1]
 800db28:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800db2a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d1e3      	bne.n	800daf8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800db34:	4618      	mov	r0, r3
 800db36:	f7f8 fe49 	bl	80067cc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	2202      	movs	r2, #2
 800db3e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800db48:	b29b      	uxth	r3, r3
 800db4a:	1ad3      	subs	r3, r2, r3
 800db4c:	b29b      	uxth	r3, r3
 800db4e:	4619      	mov	r1, r3
 800db50:	6878      	ldr	r0, [r7, #4]
 800db52:	f000 f8b7 	bl	800dcc4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800db56:	e09b      	b.n	800dc90 <HAL_UART_IRQHandler+0x518>
 800db58:	0800de17 	.word	0x0800de17
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800db64:	b29b      	uxth	r3, r3
 800db66:	1ad3      	subs	r3, r2, r3
 800db68:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800db70:	b29b      	uxth	r3, r3
 800db72:	2b00      	cmp	r3, #0
 800db74:	f000 808e 	beq.w	800dc94 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800db78:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	f000 8089 	beq.w	800dc94 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	330c      	adds	r3, #12
 800db88:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db8c:	e853 3f00 	ldrex	r3, [r3]
 800db90:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800db92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db94:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800db98:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	330c      	adds	r3, #12
 800dba2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800dba6:	647a      	str	r2, [r7, #68]	@ 0x44
 800dba8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbaa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800dbac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800dbae:	e841 2300 	strex	r3, r2, [r1]
 800dbb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800dbb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d1e3      	bne.n	800db82 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	3314      	adds	r3, #20
 800dbc0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbc4:	e853 3f00 	ldrex	r3, [r3]
 800dbc8:	623b      	str	r3, [r7, #32]
   return(result);
 800dbca:	6a3b      	ldr	r3, [r7, #32]
 800dbcc:	f023 0301 	bic.w	r3, r3, #1
 800dbd0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	3314      	adds	r3, #20
 800dbda:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800dbde:	633a      	str	r2, [r7, #48]	@ 0x30
 800dbe0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbe2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800dbe4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dbe6:	e841 2300 	strex	r3, r2, [r1]
 800dbea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800dbec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d1e3      	bne.n	800dbba <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	2220      	movs	r2, #32
 800dbf6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	2200      	movs	r2, #0
 800dbfe:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	330c      	adds	r3, #12
 800dc06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc08:	693b      	ldr	r3, [r7, #16]
 800dc0a:	e853 3f00 	ldrex	r3, [r3]
 800dc0e:	60fb      	str	r3, [r7, #12]
   return(result);
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	f023 0310 	bic.w	r3, r3, #16
 800dc16:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	330c      	adds	r3, #12
 800dc20:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800dc24:	61fa      	str	r2, [r7, #28]
 800dc26:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc28:	69b9      	ldr	r1, [r7, #24]
 800dc2a:	69fa      	ldr	r2, [r7, #28]
 800dc2c:	e841 2300 	strex	r3, r2, [r1]
 800dc30:	617b      	str	r3, [r7, #20]
   return(result);
 800dc32:	697b      	ldr	r3, [r7, #20]
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d1e3      	bne.n	800dc00 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	2202      	movs	r2, #2
 800dc3c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800dc3e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800dc42:	4619      	mov	r1, r3
 800dc44:	6878      	ldr	r0, [r7, #4]
 800dc46:	f000 f83d 	bl	800dcc4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800dc4a:	e023      	b.n	800dc94 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800dc4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dc50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d009      	beq.n	800dc6c <HAL_UART_IRQHandler+0x4f4>
 800dc58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800dc5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d003      	beq.n	800dc6c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800dc64:	6878      	ldr	r0, [r7, #4]
 800dc66:	f000 f8ea 	bl	800de3e <UART_Transmit_IT>
    return;
 800dc6a:	e014      	b.n	800dc96 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800dc6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dc70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d00e      	beq.n	800dc96 <HAL_UART_IRQHandler+0x51e>
 800dc78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800dc7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d008      	beq.n	800dc96 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800dc84:	6878      	ldr	r0, [r7, #4]
 800dc86:	f000 f92a 	bl	800dede <UART_EndTransmit_IT>
    return;
 800dc8a:	e004      	b.n	800dc96 <HAL_UART_IRQHandler+0x51e>
    return;
 800dc8c:	bf00      	nop
 800dc8e:	e002      	b.n	800dc96 <HAL_UART_IRQHandler+0x51e>
      return;
 800dc90:	bf00      	nop
 800dc92:	e000      	b.n	800dc96 <HAL_UART_IRQHandler+0x51e>
      return;
 800dc94:	bf00      	nop
  }
}
 800dc96:	37e8      	adds	r7, #232	@ 0xe8
 800dc98:	46bd      	mov	sp, r7
 800dc9a:	bd80      	pop	{r7, pc}

0800dc9c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800dc9c:	b480      	push	{r7}
 800dc9e:	b083      	sub	sp, #12
 800dca0:	af00      	add	r7, sp, #0
 800dca2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800dca4:	bf00      	nop
 800dca6:	370c      	adds	r7, #12
 800dca8:	46bd      	mov	sp, r7
 800dcaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcae:	4770      	bx	lr

0800dcb0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800dcb0:	b480      	push	{r7}
 800dcb2:	b083      	sub	sp, #12
 800dcb4:	af00      	add	r7, sp, #0
 800dcb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800dcb8:	bf00      	nop
 800dcba:	370c      	adds	r7, #12
 800dcbc:	46bd      	mov	sp, r7
 800dcbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcc2:	4770      	bx	lr

0800dcc4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800dcc4:	b480      	push	{r7}
 800dcc6:	b083      	sub	sp, #12
 800dcc8:	af00      	add	r7, sp, #0
 800dcca:	6078      	str	r0, [r7, #4]
 800dccc:	460b      	mov	r3, r1
 800dcce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800dcd0:	bf00      	nop
 800dcd2:	370c      	adds	r7, #12
 800dcd4:	46bd      	mov	sp, r7
 800dcd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcda:	4770      	bx	lr

0800dcdc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800dcdc:	b480      	push	{r7}
 800dcde:	b085      	sub	sp, #20
 800dce0:	af00      	add	r7, sp, #0
 800dce2:	60f8      	str	r0, [r7, #12]
 800dce4:	60b9      	str	r1, [r7, #8]
 800dce6:	4613      	mov	r3, r2
 800dce8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	68ba      	ldr	r2, [r7, #8]
 800dcee:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	88fa      	ldrh	r2, [r7, #6]
 800dcf4:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	88fa      	ldrh	r2, [r7, #6]
 800dcfa:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	2200      	movs	r2, #0
 800dd00:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	2222      	movs	r2, #34	@ 0x22
 800dd06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	691b      	ldr	r3, [r3, #16]
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d007      	beq.n	800dd22 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	68da      	ldr	r2, [r3, #12]
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800dd20:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	695a      	ldr	r2, [r3, #20]
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	f042 0201 	orr.w	r2, r2, #1
 800dd30:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	68da      	ldr	r2, [r3, #12]
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	f042 0220 	orr.w	r2, r2, #32
 800dd40:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800dd42:	2300      	movs	r3, #0
}
 800dd44:	4618      	mov	r0, r3
 800dd46:	3714      	adds	r7, #20
 800dd48:	46bd      	mov	sp, r7
 800dd4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd4e:	4770      	bx	lr

0800dd50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800dd50:	b480      	push	{r7}
 800dd52:	b095      	sub	sp, #84	@ 0x54
 800dd54:	af00      	add	r7, sp, #0
 800dd56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	330c      	adds	r3, #12
 800dd5e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd62:	e853 3f00 	ldrex	r3, [r3]
 800dd66:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800dd68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd6a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800dd6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	330c      	adds	r3, #12
 800dd76:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800dd78:	643a      	str	r2, [r7, #64]	@ 0x40
 800dd7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd7c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800dd7e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800dd80:	e841 2300 	strex	r3, r2, [r1]
 800dd84:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800dd86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d1e5      	bne.n	800dd58 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	3314      	adds	r3, #20
 800dd92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd94:	6a3b      	ldr	r3, [r7, #32]
 800dd96:	e853 3f00 	ldrex	r3, [r3]
 800dd9a:	61fb      	str	r3, [r7, #28]
   return(result);
 800dd9c:	69fb      	ldr	r3, [r7, #28]
 800dd9e:	f023 0301 	bic.w	r3, r3, #1
 800dda2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	3314      	adds	r3, #20
 800ddaa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ddac:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ddae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddb0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ddb2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ddb4:	e841 2300 	strex	r3, r2, [r1]
 800ddb8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ddba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d1e5      	bne.n	800dd8c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ddc4:	2b01      	cmp	r3, #1
 800ddc6:	d119      	bne.n	800ddfc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	330c      	adds	r3, #12
 800ddce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	e853 3f00 	ldrex	r3, [r3]
 800ddd6:	60bb      	str	r3, [r7, #8]
   return(result);
 800ddd8:	68bb      	ldr	r3, [r7, #8]
 800ddda:	f023 0310 	bic.w	r3, r3, #16
 800ddde:	647b      	str	r3, [r7, #68]	@ 0x44
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	330c      	adds	r3, #12
 800dde6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800dde8:	61ba      	str	r2, [r7, #24]
 800ddea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddec:	6979      	ldr	r1, [r7, #20]
 800ddee:	69ba      	ldr	r2, [r7, #24]
 800ddf0:	e841 2300 	strex	r3, r2, [r1]
 800ddf4:	613b      	str	r3, [r7, #16]
   return(result);
 800ddf6:	693b      	ldr	r3, [r7, #16]
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d1e5      	bne.n	800ddc8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	2220      	movs	r2, #32
 800de00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	2200      	movs	r2, #0
 800de08:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800de0a:	bf00      	nop
 800de0c:	3754      	adds	r7, #84	@ 0x54
 800de0e:	46bd      	mov	sp, r7
 800de10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de14:	4770      	bx	lr

0800de16 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800de16:	b580      	push	{r7, lr}
 800de18:	b084      	sub	sp, #16
 800de1a:	af00      	add	r7, sp, #0
 800de1c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800de22:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	2200      	movs	r2, #0
 800de28:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	2200      	movs	r2, #0
 800de2e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800de30:	68f8      	ldr	r0, [r7, #12]
 800de32:	f7ff ff3d 	bl	800dcb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800de36:	bf00      	nop
 800de38:	3710      	adds	r7, #16
 800de3a:	46bd      	mov	sp, r7
 800de3c:	bd80      	pop	{r7, pc}

0800de3e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800de3e:	b480      	push	{r7}
 800de40:	b085      	sub	sp, #20
 800de42:	af00      	add	r7, sp, #0
 800de44:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800de4c:	b2db      	uxtb	r3, r3
 800de4e:	2b21      	cmp	r3, #33	@ 0x21
 800de50:	d13e      	bne.n	800ded0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	689b      	ldr	r3, [r3, #8]
 800de56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800de5a:	d114      	bne.n	800de86 <UART_Transmit_IT+0x48>
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	691b      	ldr	r3, [r3, #16]
 800de60:	2b00      	cmp	r3, #0
 800de62:	d110      	bne.n	800de86 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	6a1b      	ldr	r3, [r3, #32]
 800de68:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	881b      	ldrh	r3, [r3, #0]
 800de6e:	461a      	mov	r2, r3
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800de78:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	6a1b      	ldr	r3, [r3, #32]
 800de7e:	1c9a      	adds	r2, r3, #2
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	621a      	str	r2, [r3, #32]
 800de84:	e008      	b.n	800de98 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	6a1b      	ldr	r3, [r3, #32]
 800de8a:	1c59      	adds	r1, r3, #1
 800de8c:	687a      	ldr	r2, [r7, #4]
 800de8e:	6211      	str	r1, [r2, #32]
 800de90:	781a      	ldrb	r2, [r3, #0]
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800de9c:	b29b      	uxth	r3, r3
 800de9e:	3b01      	subs	r3, #1
 800dea0:	b29b      	uxth	r3, r3
 800dea2:	687a      	ldr	r2, [r7, #4]
 800dea4:	4619      	mov	r1, r3
 800dea6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d10f      	bne.n	800decc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	68da      	ldr	r2, [r3, #12]
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800deba:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	68da      	ldr	r2, [r3, #12]
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800deca:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800decc:	2300      	movs	r3, #0
 800dece:	e000      	b.n	800ded2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800ded0:	2302      	movs	r3, #2
  }
}
 800ded2:	4618      	mov	r0, r3
 800ded4:	3714      	adds	r7, #20
 800ded6:	46bd      	mov	sp, r7
 800ded8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dedc:	4770      	bx	lr

0800dede <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800dede:	b580      	push	{r7, lr}
 800dee0:	b082      	sub	sp, #8
 800dee2:	af00      	add	r7, sp, #0
 800dee4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	68da      	ldr	r2, [r3, #12]
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800def4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	2220      	movs	r2, #32
 800defa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800defe:	6878      	ldr	r0, [r7, #4]
 800df00:	f7ff fecc 	bl	800dc9c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800df04:	2300      	movs	r3, #0
}
 800df06:	4618      	mov	r0, r3
 800df08:	3708      	adds	r7, #8
 800df0a:	46bd      	mov	sp, r7
 800df0c:	bd80      	pop	{r7, pc}

0800df0e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800df0e:	b580      	push	{r7, lr}
 800df10:	b08c      	sub	sp, #48	@ 0x30
 800df12:	af00      	add	r7, sp, #0
 800df14:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800df1c:	b2db      	uxtb	r3, r3
 800df1e:	2b22      	cmp	r3, #34	@ 0x22
 800df20:	f040 80ae 	bne.w	800e080 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	689b      	ldr	r3, [r3, #8]
 800df28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800df2c:	d117      	bne.n	800df5e <UART_Receive_IT+0x50>
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	691b      	ldr	r3, [r3, #16]
 800df32:	2b00      	cmp	r3, #0
 800df34:	d113      	bne.n	800df5e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800df36:	2300      	movs	r3, #0
 800df38:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df3e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	685b      	ldr	r3, [r3, #4]
 800df46:	b29b      	uxth	r3, r3
 800df48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800df4c:	b29a      	uxth	r2, r3
 800df4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df50:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df56:	1c9a      	adds	r2, r3, #2
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	629a      	str	r2, [r3, #40]	@ 0x28
 800df5c:	e026      	b.n	800dfac <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df62:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800df64:	2300      	movs	r3, #0
 800df66:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	689b      	ldr	r3, [r3, #8]
 800df6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800df70:	d007      	beq.n	800df82 <UART_Receive_IT+0x74>
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	689b      	ldr	r3, [r3, #8]
 800df76:	2b00      	cmp	r3, #0
 800df78:	d10a      	bne.n	800df90 <UART_Receive_IT+0x82>
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	691b      	ldr	r3, [r3, #16]
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d106      	bne.n	800df90 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	685b      	ldr	r3, [r3, #4]
 800df88:	b2da      	uxtb	r2, r3
 800df8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df8c:	701a      	strb	r2, [r3, #0]
 800df8e:	e008      	b.n	800dfa2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	685b      	ldr	r3, [r3, #4]
 800df96:	b2db      	uxtb	r3, r3
 800df98:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800df9c:	b2da      	uxtb	r2, r3
 800df9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfa0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dfa6:	1c5a      	adds	r2, r3, #1
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800dfb0:	b29b      	uxth	r3, r3
 800dfb2:	3b01      	subs	r3, #1
 800dfb4:	b29b      	uxth	r3, r3
 800dfb6:	687a      	ldr	r2, [r7, #4]
 800dfb8:	4619      	mov	r1, r3
 800dfba:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d15d      	bne.n	800e07c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	68da      	ldr	r2, [r3, #12]
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	f022 0220 	bic.w	r2, r2, #32
 800dfce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	68da      	ldr	r2, [r3, #12]
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800dfde:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	695a      	ldr	r2, [r3, #20]
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	f022 0201 	bic.w	r2, r2, #1
 800dfee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	2220      	movs	r2, #32
 800dff4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	2200      	movs	r2, #0
 800dffc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e002:	2b01      	cmp	r3, #1
 800e004:	d135      	bne.n	800e072 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	2200      	movs	r2, #0
 800e00a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	330c      	adds	r3, #12
 800e012:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e014:	697b      	ldr	r3, [r7, #20]
 800e016:	e853 3f00 	ldrex	r3, [r3]
 800e01a:	613b      	str	r3, [r7, #16]
   return(result);
 800e01c:	693b      	ldr	r3, [r7, #16]
 800e01e:	f023 0310 	bic.w	r3, r3, #16
 800e022:	627b      	str	r3, [r7, #36]	@ 0x24
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	330c      	adds	r3, #12
 800e02a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e02c:	623a      	str	r2, [r7, #32]
 800e02e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e030:	69f9      	ldr	r1, [r7, #28]
 800e032:	6a3a      	ldr	r2, [r7, #32]
 800e034:	e841 2300 	strex	r3, r2, [r1]
 800e038:	61bb      	str	r3, [r7, #24]
   return(result);
 800e03a:	69bb      	ldr	r3, [r7, #24]
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d1e5      	bne.n	800e00c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	f003 0310 	and.w	r3, r3, #16
 800e04a:	2b10      	cmp	r3, #16
 800e04c:	d10a      	bne.n	800e064 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800e04e:	2300      	movs	r3, #0
 800e050:	60fb      	str	r3, [r7, #12]
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	60fb      	str	r3, [r7, #12]
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	685b      	ldr	r3, [r3, #4]
 800e060:	60fb      	str	r3, [r7, #12]
 800e062:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800e068:	4619      	mov	r1, r3
 800e06a:	6878      	ldr	r0, [r7, #4]
 800e06c:	f7ff fe2a 	bl	800dcc4 <HAL_UARTEx_RxEventCallback>
 800e070:	e002      	b.n	800e078 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800e072:	6878      	ldr	r0, [r7, #4]
 800e074:	f7f6 fe84 	bl	8004d80 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800e078:	2300      	movs	r3, #0
 800e07a:	e002      	b.n	800e082 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800e07c:	2300      	movs	r3, #0
 800e07e:	e000      	b.n	800e082 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800e080:	2302      	movs	r3, #2
  }
}
 800e082:	4618      	mov	r0, r3
 800e084:	3730      	adds	r7, #48	@ 0x30
 800e086:	46bd      	mov	sp, r7
 800e088:	bd80      	pop	{r7, pc}
	...

0800e08c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e08c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e090:	b0c0      	sub	sp, #256	@ 0x100
 800e092:	af00      	add	r7, sp, #0
 800e094:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	691b      	ldr	r3, [r3, #16]
 800e0a0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800e0a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e0a8:	68d9      	ldr	r1, [r3, #12]
 800e0aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e0ae:	681a      	ldr	r2, [r3, #0]
 800e0b0:	ea40 0301 	orr.w	r3, r0, r1
 800e0b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800e0b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e0ba:	689a      	ldr	r2, [r3, #8]
 800e0bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e0c0:	691b      	ldr	r3, [r3, #16]
 800e0c2:	431a      	orrs	r2, r3
 800e0c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e0c8:	695b      	ldr	r3, [r3, #20]
 800e0ca:	431a      	orrs	r2, r3
 800e0cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e0d0:	69db      	ldr	r3, [r3, #28]
 800e0d2:	4313      	orrs	r3, r2
 800e0d4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800e0d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	68db      	ldr	r3, [r3, #12]
 800e0e0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800e0e4:	f021 010c 	bic.w	r1, r1, #12
 800e0e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e0ec:	681a      	ldr	r2, [r3, #0]
 800e0ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800e0f2:	430b      	orrs	r3, r1
 800e0f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800e0f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	695b      	ldr	r3, [r3, #20]
 800e0fe:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800e102:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e106:	6999      	ldr	r1, [r3, #24]
 800e108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e10c:	681a      	ldr	r2, [r3, #0]
 800e10e:	ea40 0301 	orr.w	r3, r0, r1
 800e112:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800e114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e118:	681a      	ldr	r2, [r3, #0]
 800e11a:	4b8f      	ldr	r3, [pc, #572]	@ (800e358 <UART_SetConfig+0x2cc>)
 800e11c:	429a      	cmp	r2, r3
 800e11e:	d005      	beq.n	800e12c <UART_SetConfig+0xa0>
 800e120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e124:	681a      	ldr	r2, [r3, #0]
 800e126:	4b8d      	ldr	r3, [pc, #564]	@ (800e35c <UART_SetConfig+0x2d0>)
 800e128:	429a      	cmp	r2, r3
 800e12a:	d104      	bne.n	800e136 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800e12c:	f7fe fac8 	bl	800c6c0 <HAL_RCC_GetPCLK2Freq>
 800e130:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800e134:	e003      	b.n	800e13e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800e136:	f7fe faaf 	bl	800c698 <HAL_RCC_GetPCLK1Freq>
 800e13a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e13e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e142:	69db      	ldr	r3, [r3, #28]
 800e144:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e148:	f040 810c 	bne.w	800e364 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800e14c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800e150:	2200      	movs	r2, #0
 800e152:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800e156:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800e15a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800e15e:	4622      	mov	r2, r4
 800e160:	462b      	mov	r3, r5
 800e162:	1891      	adds	r1, r2, r2
 800e164:	65b9      	str	r1, [r7, #88]	@ 0x58
 800e166:	415b      	adcs	r3, r3
 800e168:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e16a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800e16e:	4621      	mov	r1, r4
 800e170:	eb12 0801 	adds.w	r8, r2, r1
 800e174:	4629      	mov	r1, r5
 800e176:	eb43 0901 	adc.w	r9, r3, r1
 800e17a:	f04f 0200 	mov.w	r2, #0
 800e17e:	f04f 0300 	mov.w	r3, #0
 800e182:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800e186:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800e18a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800e18e:	4690      	mov	r8, r2
 800e190:	4699      	mov	r9, r3
 800e192:	4623      	mov	r3, r4
 800e194:	eb18 0303 	adds.w	r3, r8, r3
 800e198:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800e19c:	462b      	mov	r3, r5
 800e19e:	eb49 0303 	adc.w	r3, r9, r3
 800e1a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800e1a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e1aa:	685b      	ldr	r3, [r3, #4]
 800e1ac:	2200      	movs	r2, #0
 800e1ae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800e1b2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800e1b6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800e1ba:	460b      	mov	r3, r1
 800e1bc:	18db      	adds	r3, r3, r3
 800e1be:	653b      	str	r3, [r7, #80]	@ 0x50
 800e1c0:	4613      	mov	r3, r2
 800e1c2:	eb42 0303 	adc.w	r3, r2, r3
 800e1c6:	657b      	str	r3, [r7, #84]	@ 0x54
 800e1c8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800e1cc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800e1d0:	f7f2 fc54 	bl	8000a7c <__aeabi_uldivmod>
 800e1d4:	4602      	mov	r2, r0
 800e1d6:	460b      	mov	r3, r1
 800e1d8:	4b61      	ldr	r3, [pc, #388]	@ (800e360 <UART_SetConfig+0x2d4>)
 800e1da:	fba3 2302 	umull	r2, r3, r3, r2
 800e1de:	095b      	lsrs	r3, r3, #5
 800e1e0:	011c      	lsls	r4, r3, #4
 800e1e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800e1e6:	2200      	movs	r2, #0
 800e1e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800e1ec:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800e1f0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800e1f4:	4642      	mov	r2, r8
 800e1f6:	464b      	mov	r3, r9
 800e1f8:	1891      	adds	r1, r2, r2
 800e1fa:	64b9      	str	r1, [r7, #72]	@ 0x48
 800e1fc:	415b      	adcs	r3, r3
 800e1fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e200:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800e204:	4641      	mov	r1, r8
 800e206:	eb12 0a01 	adds.w	sl, r2, r1
 800e20a:	4649      	mov	r1, r9
 800e20c:	eb43 0b01 	adc.w	fp, r3, r1
 800e210:	f04f 0200 	mov.w	r2, #0
 800e214:	f04f 0300 	mov.w	r3, #0
 800e218:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800e21c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800e220:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e224:	4692      	mov	sl, r2
 800e226:	469b      	mov	fp, r3
 800e228:	4643      	mov	r3, r8
 800e22a:	eb1a 0303 	adds.w	r3, sl, r3
 800e22e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800e232:	464b      	mov	r3, r9
 800e234:	eb4b 0303 	adc.w	r3, fp, r3
 800e238:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800e23c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e240:	685b      	ldr	r3, [r3, #4]
 800e242:	2200      	movs	r2, #0
 800e244:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800e248:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800e24c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800e250:	460b      	mov	r3, r1
 800e252:	18db      	adds	r3, r3, r3
 800e254:	643b      	str	r3, [r7, #64]	@ 0x40
 800e256:	4613      	mov	r3, r2
 800e258:	eb42 0303 	adc.w	r3, r2, r3
 800e25c:	647b      	str	r3, [r7, #68]	@ 0x44
 800e25e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800e262:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800e266:	f7f2 fc09 	bl	8000a7c <__aeabi_uldivmod>
 800e26a:	4602      	mov	r2, r0
 800e26c:	460b      	mov	r3, r1
 800e26e:	4611      	mov	r1, r2
 800e270:	4b3b      	ldr	r3, [pc, #236]	@ (800e360 <UART_SetConfig+0x2d4>)
 800e272:	fba3 2301 	umull	r2, r3, r3, r1
 800e276:	095b      	lsrs	r3, r3, #5
 800e278:	2264      	movs	r2, #100	@ 0x64
 800e27a:	fb02 f303 	mul.w	r3, r2, r3
 800e27e:	1acb      	subs	r3, r1, r3
 800e280:	00db      	lsls	r3, r3, #3
 800e282:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800e286:	4b36      	ldr	r3, [pc, #216]	@ (800e360 <UART_SetConfig+0x2d4>)
 800e288:	fba3 2302 	umull	r2, r3, r3, r2
 800e28c:	095b      	lsrs	r3, r3, #5
 800e28e:	005b      	lsls	r3, r3, #1
 800e290:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800e294:	441c      	add	r4, r3
 800e296:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800e29a:	2200      	movs	r2, #0
 800e29c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800e2a0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800e2a4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800e2a8:	4642      	mov	r2, r8
 800e2aa:	464b      	mov	r3, r9
 800e2ac:	1891      	adds	r1, r2, r2
 800e2ae:	63b9      	str	r1, [r7, #56]	@ 0x38
 800e2b0:	415b      	adcs	r3, r3
 800e2b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e2b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800e2b8:	4641      	mov	r1, r8
 800e2ba:	1851      	adds	r1, r2, r1
 800e2bc:	6339      	str	r1, [r7, #48]	@ 0x30
 800e2be:	4649      	mov	r1, r9
 800e2c0:	414b      	adcs	r3, r1
 800e2c2:	637b      	str	r3, [r7, #52]	@ 0x34
 800e2c4:	f04f 0200 	mov.w	r2, #0
 800e2c8:	f04f 0300 	mov.w	r3, #0
 800e2cc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800e2d0:	4659      	mov	r1, fp
 800e2d2:	00cb      	lsls	r3, r1, #3
 800e2d4:	4651      	mov	r1, sl
 800e2d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800e2da:	4651      	mov	r1, sl
 800e2dc:	00ca      	lsls	r2, r1, #3
 800e2de:	4610      	mov	r0, r2
 800e2e0:	4619      	mov	r1, r3
 800e2e2:	4603      	mov	r3, r0
 800e2e4:	4642      	mov	r2, r8
 800e2e6:	189b      	adds	r3, r3, r2
 800e2e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800e2ec:	464b      	mov	r3, r9
 800e2ee:	460a      	mov	r2, r1
 800e2f0:	eb42 0303 	adc.w	r3, r2, r3
 800e2f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800e2f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e2fc:	685b      	ldr	r3, [r3, #4]
 800e2fe:	2200      	movs	r2, #0
 800e300:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800e304:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800e308:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800e30c:	460b      	mov	r3, r1
 800e30e:	18db      	adds	r3, r3, r3
 800e310:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e312:	4613      	mov	r3, r2
 800e314:	eb42 0303 	adc.w	r3, r2, r3
 800e318:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e31a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800e31e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800e322:	f7f2 fbab 	bl	8000a7c <__aeabi_uldivmod>
 800e326:	4602      	mov	r2, r0
 800e328:	460b      	mov	r3, r1
 800e32a:	4b0d      	ldr	r3, [pc, #52]	@ (800e360 <UART_SetConfig+0x2d4>)
 800e32c:	fba3 1302 	umull	r1, r3, r3, r2
 800e330:	095b      	lsrs	r3, r3, #5
 800e332:	2164      	movs	r1, #100	@ 0x64
 800e334:	fb01 f303 	mul.w	r3, r1, r3
 800e338:	1ad3      	subs	r3, r2, r3
 800e33a:	00db      	lsls	r3, r3, #3
 800e33c:	3332      	adds	r3, #50	@ 0x32
 800e33e:	4a08      	ldr	r2, [pc, #32]	@ (800e360 <UART_SetConfig+0x2d4>)
 800e340:	fba2 2303 	umull	r2, r3, r2, r3
 800e344:	095b      	lsrs	r3, r3, #5
 800e346:	f003 0207 	and.w	r2, r3, #7
 800e34a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	4422      	add	r2, r4
 800e352:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800e354:	e106      	b.n	800e564 <UART_SetConfig+0x4d8>
 800e356:	bf00      	nop
 800e358:	40011000 	.word	0x40011000
 800e35c:	40011400 	.word	0x40011400
 800e360:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800e364:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800e368:	2200      	movs	r2, #0
 800e36a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800e36e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800e372:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800e376:	4642      	mov	r2, r8
 800e378:	464b      	mov	r3, r9
 800e37a:	1891      	adds	r1, r2, r2
 800e37c:	6239      	str	r1, [r7, #32]
 800e37e:	415b      	adcs	r3, r3
 800e380:	627b      	str	r3, [r7, #36]	@ 0x24
 800e382:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800e386:	4641      	mov	r1, r8
 800e388:	1854      	adds	r4, r2, r1
 800e38a:	4649      	mov	r1, r9
 800e38c:	eb43 0501 	adc.w	r5, r3, r1
 800e390:	f04f 0200 	mov.w	r2, #0
 800e394:	f04f 0300 	mov.w	r3, #0
 800e398:	00eb      	lsls	r3, r5, #3
 800e39a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800e39e:	00e2      	lsls	r2, r4, #3
 800e3a0:	4614      	mov	r4, r2
 800e3a2:	461d      	mov	r5, r3
 800e3a4:	4643      	mov	r3, r8
 800e3a6:	18e3      	adds	r3, r4, r3
 800e3a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800e3ac:	464b      	mov	r3, r9
 800e3ae:	eb45 0303 	adc.w	r3, r5, r3
 800e3b2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800e3b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e3ba:	685b      	ldr	r3, [r3, #4]
 800e3bc:	2200      	movs	r2, #0
 800e3be:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800e3c2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800e3c6:	f04f 0200 	mov.w	r2, #0
 800e3ca:	f04f 0300 	mov.w	r3, #0
 800e3ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800e3d2:	4629      	mov	r1, r5
 800e3d4:	008b      	lsls	r3, r1, #2
 800e3d6:	4621      	mov	r1, r4
 800e3d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800e3dc:	4621      	mov	r1, r4
 800e3de:	008a      	lsls	r2, r1, #2
 800e3e0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800e3e4:	f7f2 fb4a 	bl	8000a7c <__aeabi_uldivmod>
 800e3e8:	4602      	mov	r2, r0
 800e3ea:	460b      	mov	r3, r1
 800e3ec:	4b60      	ldr	r3, [pc, #384]	@ (800e570 <UART_SetConfig+0x4e4>)
 800e3ee:	fba3 2302 	umull	r2, r3, r3, r2
 800e3f2:	095b      	lsrs	r3, r3, #5
 800e3f4:	011c      	lsls	r4, r3, #4
 800e3f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800e3fa:	2200      	movs	r2, #0
 800e3fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800e400:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800e404:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800e408:	4642      	mov	r2, r8
 800e40a:	464b      	mov	r3, r9
 800e40c:	1891      	adds	r1, r2, r2
 800e40e:	61b9      	str	r1, [r7, #24]
 800e410:	415b      	adcs	r3, r3
 800e412:	61fb      	str	r3, [r7, #28]
 800e414:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e418:	4641      	mov	r1, r8
 800e41a:	1851      	adds	r1, r2, r1
 800e41c:	6139      	str	r1, [r7, #16]
 800e41e:	4649      	mov	r1, r9
 800e420:	414b      	adcs	r3, r1
 800e422:	617b      	str	r3, [r7, #20]
 800e424:	f04f 0200 	mov.w	r2, #0
 800e428:	f04f 0300 	mov.w	r3, #0
 800e42c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800e430:	4659      	mov	r1, fp
 800e432:	00cb      	lsls	r3, r1, #3
 800e434:	4651      	mov	r1, sl
 800e436:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800e43a:	4651      	mov	r1, sl
 800e43c:	00ca      	lsls	r2, r1, #3
 800e43e:	4610      	mov	r0, r2
 800e440:	4619      	mov	r1, r3
 800e442:	4603      	mov	r3, r0
 800e444:	4642      	mov	r2, r8
 800e446:	189b      	adds	r3, r3, r2
 800e448:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800e44c:	464b      	mov	r3, r9
 800e44e:	460a      	mov	r2, r1
 800e450:	eb42 0303 	adc.w	r3, r2, r3
 800e454:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e458:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e45c:	685b      	ldr	r3, [r3, #4]
 800e45e:	2200      	movs	r2, #0
 800e460:	67bb      	str	r3, [r7, #120]	@ 0x78
 800e462:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800e464:	f04f 0200 	mov.w	r2, #0
 800e468:	f04f 0300 	mov.w	r3, #0
 800e46c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800e470:	4649      	mov	r1, r9
 800e472:	008b      	lsls	r3, r1, #2
 800e474:	4641      	mov	r1, r8
 800e476:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800e47a:	4641      	mov	r1, r8
 800e47c:	008a      	lsls	r2, r1, #2
 800e47e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800e482:	f7f2 fafb 	bl	8000a7c <__aeabi_uldivmod>
 800e486:	4602      	mov	r2, r0
 800e488:	460b      	mov	r3, r1
 800e48a:	4611      	mov	r1, r2
 800e48c:	4b38      	ldr	r3, [pc, #224]	@ (800e570 <UART_SetConfig+0x4e4>)
 800e48e:	fba3 2301 	umull	r2, r3, r3, r1
 800e492:	095b      	lsrs	r3, r3, #5
 800e494:	2264      	movs	r2, #100	@ 0x64
 800e496:	fb02 f303 	mul.w	r3, r2, r3
 800e49a:	1acb      	subs	r3, r1, r3
 800e49c:	011b      	lsls	r3, r3, #4
 800e49e:	3332      	adds	r3, #50	@ 0x32
 800e4a0:	4a33      	ldr	r2, [pc, #204]	@ (800e570 <UART_SetConfig+0x4e4>)
 800e4a2:	fba2 2303 	umull	r2, r3, r2, r3
 800e4a6:	095b      	lsrs	r3, r3, #5
 800e4a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e4ac:	441c      	add	r4, r3
 800e4ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800e4b2:	2200      	movs	r2, #0
 800e4b4:	673b      	str	r3, [r7, #112]	@ 0x70
 800e4b6:	677a      	str	r2, [r7, #116]	@ 0x74
 800e4b8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800e4bc:	4642      	mov	r2, r8
 800e4be:	464b      	mov	r3, r9
 800e4c0:	1891      	adds	r1, r2, r2
 800e4c2:	60b9      	str	r1, [r7, #8]
 800e4c4:	415b      	adcs	r3, r3
 800e4c6:	60fb      	str	r3, [r7, #12]
 800e4c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e4cc:	4641      	mov	r1, r8
 800e4ce:	1851      	adds	r1, r2, r1
 800e4d0:	6039      	str	r1, [r7, #0]
 800e4d2:	4649      	mov	r1, r9
 800e4d4:	414b      	adcs	r3, r1
 800e4d6:	607b      	str	r3, [r7, #4]
 800e4d8:	f04f 0200 	mov.w	r2, #0
 800e4dc:	f04f 0300 	mov.w	r3, #0
 800e4e0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800e4e4:	4659      	mov	r1, fp
 800e4e6:	00cb      	lsls	r3, r1, #3
 800e4e8:	4651      	mov	r1, sl
 800e4ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800e4ee:	4651      	mov	r1, sl
 800e4f0:	00ca      	lsls	r2, r1, #3
 800e4f2:	4610      	mov	r0, r2
 800e4f4:	4619      	mov	r1, r3
 800e4f6:	4603      	mov	r3, r0
 800e4f8:	4642      	mov	r2, r8
 800e4fa:	189b      	adds	r3, r3, r2
 800e4fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e4fe:	464b      	mov	r3, r9
 800e500:	460a      	mov	r2, r1
 800e502:	eb42 0303 	adc.w	r3, r2, r3
 800e506:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800e508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e50c:	685b      	ldr	r3, [r3, #4]
 800e50e:	2200      	movs	r2, #0
 800e510:	663b      	str	r3, [r7, #96]	@ 0x60
 800e512:	667a      	str	r2, [r7, #100]	@ 0x64
 800e514:	f04f 0200 	mov.w	r2, #0
 800e518:	f04f 0300 	mov.w	r3, #0
 800e51c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800e520:	4649      	mov	r1, r9
 800e522:	008b      	lsls	r3, r1, #2
 800e524:	4641      	mov	r1, r8
 800e526:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800e52a:	4641      	mov	r1, r8
 800e52c:	008a      	lsls	r2, r1, #2
 800e52e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800e532:	f7f2 faa3 	bl	8000a7c <__aeabi_uldivmod>
 800e536:	4602      	mov	r2, r0
 800e538:	460b      	mov	r3, r1
 800e53a:	4b0d      	ldr	r3, [pc, #52]	@ (800e570 <UART_SetConfig+0x4e4>)
 800e53c:	fba3 1302 	umull	r1, r3, r3, r2
 800e540:	095b      	lsrs	r3, r3, #5
 800e542:	2164      	movs	r1, #100	@ 0x64
 800e544:	fb01 f303 	mul.w	r3, r1, r3
 800e548:	1ad3      	subs	r3, r2, r3
 800e54a:	011b      	lsls	r3, r3, #4
 800e54c:	3332      	adds	r3, #50	@ 0x32
 800e54e:	4a08      	ldr	r2, [pc, #32]	@ (800e570 <UART_SetConfig+0x4e4>)
 800e550:	fba2 2303 	umull	r2, r3, r2, r3
 800e554:	095b      	lsrs	r3, r3, #5
 800e556:	f003 020f 	and.w	r2, r3, #15
 800e55a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	4422      	add	r2, r4
 800e562:	609a      	str	r2, [r3, #8]
}
 800e564:	bf00      	nop
 800e566:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800e56a:	46bd      	mov	sp, r7
 800e56c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e570:	51eb851f 	.word	0x51eb851f

0800e574 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e574:	b084      	sub	sp, #16
 800e576:	b580      	push	{r7, lr}
 800e578:	b084      	sub	sp, #16
 800e57a:	af00      	add	r7, sp, #0
 800e57c:	6078      	str	r0, [r7, #4]
 800e57e:	f107 001c 	add.w	r0, r7, #28
 800e582:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e586:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800e58a:	2b01      	cmp	r3, #1
 800e58c:	d123      	bne.n	800e5d6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e592:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	68db      	ldr	r3, [r3, #12]
 800e59e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800e5a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e5a6:	687a      	ldr	r2, [r7, #4]
 800e5a8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	68db      	ldr	r3, [r3, #12]
 800e5ae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800e5b6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800e5ba:	2b01      	cmp	r3, #1
 800e5bc:	d105      	bne.n	800e5ca <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	68db      	ldr	r3, [r3, #12]
 800e5c2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800e5ca:	6878      	ldr	r0, [r7, #4]
 800e5cc:	f001 fae8 	bl	800fba0 <USB_CoreReset>
 800e5d0:	4603      	mov	r3, r0
 800e5d2:	73fb      	strb	r3, [r7, #15]
 800e5d4:	e01b      	b.n	800e60e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	68db      	ldr	r3, [r3, #12]
 800e5da:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800e5e2:	6878      	ldr	r0, [r7, #4]
 800e5e4:	f001 fadc 	bl	800fba0 <USB_CoreReset>
 800e5e8:	4603      	mov	r3, r0
 800e5ea:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800e5ec:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d106      	bne.n	800e602 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e5f8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	639a      	str	r2, [r3, #56]	@ 0x38
 800e600:	e005      	b.n	800e60e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e606:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800e60e:	7fbb      	ldrb	r3, [r7, #30]
 800e610:	2b01      	cmp	r3, #1
 800e612:	d10b      	bne.n	800e62c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	689b      	ldr	r3, [r3, #8]
 800e618:	f043 0206 	orr.w	r2, r3, #6
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	689b      	ldr	r3, [r3, #8]
 800e624:	f043 0220 	orr.w	r2, r3, #32
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800e62c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e62e:	4618      	mov	r0, r3
 800e630:	3710      	adds	r7, #16
 800e632:	46bd      	mov	sp, r7
 800e634:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e638:	b004      	add	sp, #16
 800e63a:	4770      	bx	lr

0800e63c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800e63c:	b480      	push	{r7}
 800e63e:	b087      	sub	sp, #28
 800e640:	af00      	add	r7, sp, #0
 800e642:	60f8      	str	r0, [r7, #12]
 800e644:	60b9      	str	r1, [r7, #8]
 800e646:	4613      	mov	r3, r2
 800e648:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800e64a:	79fb      	ldrb	r3, [r7, #7]
 800e64c:	2b02      	cmp	r3, #2
 800e64e:	d165      	bne.n	800e71c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800e650:	68bb      	ldr	r3, [r7, #8]
 800e652:	4a41      	ldr	r2, [pc, #260]	@ (800e758 <USB_SetTurnaroundTime+0x11c>)
 800e654:	4293      	cmp	r3, r2
 800e656:	d906      	bls.n	800e666 <USB_SetTurnaroundTime+0x2a>
 800e658:	68bb      	ldr	r3, [r7, #8]
 800e65a:	4a40      	ldr	r2, [pc, #256]	@ (800e75c <USB_SetTurnaroundTime+0x120>)
 800e65c:	4293      	cmp	r3, r2
 800e65e:	d202      	bcs.n	800e666 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800e660:	230f      	movs	r3, #15
 800e662:	617b      	str	r3, [r7, #20]
 800e664:	e062      	b.n	800e72c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800e666:	68bb      	ldr	r3, [r7, #8]
 800e668:	4a3c      	ldr	r2, [pc, #240]	@ (800e75c <USB_SetTurnaroundTime+0x120>)
 800e66a:	4293      	cmp	r3, r2
 800e66c:	d306      	bcc.n	800e67c <USB_SetTurnaroundTime+0x40>
 800e66e:	68bb      	ldr	r3, [r7, #8]
 800e670:	4a3b      	ldr	r2, [pc, #236]	@ (800e760 <USB_SetTurnaroundTime+0x124>)
 800e672:	4293      	cmp	r3, r2
 800e674:	d202      	bcs.n	800e67c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800e676:	230e      	movs	r3, #14
 800e678:	617b      	str	r3, [r7, #20]
 800e67a:	e057      	b.n	800e72c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800e67c:	68bb      	ldr	r3, [r7, #8]
 800e67e:	4a38      	ldr	r2, [pc, #224]	@ (800e760 <USB_SetTurnaroundTime+0x124>)
 800e680:	4293      	cmp	r3, r2
 800e682:	d306      	bcc.n	800e692 <USB_SetTurnaroundTime+0x56>
 800e684:	68bb      	ldr	r3, [r7, #8]
 800e686:	4a37      	ldr	r2, [pc, #220]	@ (800e764 <USB_SetTurnaroundTime+0x128>)
 800e688:	4293      	cmp	r3, r2
 800e68a:	d202      	bcs.n	800e692 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800e68c:	230d      	movs	r3, #13
 800e68e:	617b      	str	r3, [r7, #20]
 800e690:	e04c      	b.n	800e72c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800e692:	68bb      	ldr	r3, [r7, #8]
 800e694:	4a33      	ldr	r2, [pc, #204]	@ (800e764 <USB_SetTurnaroundTime+0x128>)
 800e696:	4293      	cmp	r3, r2
 800e698:	d306      	bcc.n	800e6a8 <USB_SetTurnaroundTime+0x6c>
 800e69a:	68bb      	ldr	r3, [r7, #8]
 800e69c:	4a32      	ldr	r2, [pc, #200]	@ (800e768 <USB_SetTurnaroundTime+0x12c>)
 800e69e:	4293      	cmp	r3, r2
 800e6a0:	d802      	bhi.n	800e6a8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800e6a2:	230c      	movs	r3, #12
 800e6a4:	617b      	str	r3, [r7, #20]
 800e6a6:	e041      	b.n	800e72c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800e6a8:	68bb      	ldr	r3, [r7, #8]
 800e6aa:	4a2f      	ldr	r2, [pc, #188]	@ (800e768 <USB_SetTurnaroundTime+0x12c>)
 800e6ac:	4293      	cmp	r3, r2
 800e6ae:	d906      	bls.n	800e6be <USB_SetTurnaroundTime+0x82>
 800e6b0:	68bb      	ldr	r3, [r7, #8]
 800e6b2:	4a2e      	ldr	r2, [pc, #184]	@ (800e76c <USB_SetTurnaroundTime+0x130>)
 800e6b4:	4293      	cmp	r3, r2
 800e6b6:	d802      	bhi.n	800e6be <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800e6b8:	230b      	movs	r3, #11
 800e6ba:	617b      	str	r3, [r7, #20]
 800e6bc:	e036      	b.n	800e72c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800e6be:	68bb      	ldr	r3, [r7, #8]
 800e6c0:	4a2a      	ldr	r2, [pc, #168]	@ (800e76c <USB_SetTurnaroundTime+0x130>)
 800e6c2:	4293      	cmp	r3, r2
 800e6c4:	d906      	bls.n	800e6d4 <USB_SetTurnaroundTime+0x98>
 800e6c6:	68bb      	ldr	r3, [r7, #8]
 800e6c8:	4a29      	ldr	r2, [pc, #164]	@ (800e770 <USB_SetTurnaroundTime+0x134>)
 800e6ca:	4293      	cmp	r3, r2
 800e6cc:	d802      	bhi.n	800e6d4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800e6ce:	230a      	movs	r3, #10
 800e6d0:	617b      	str	r3, [r7, #20]
 800e6d2:	e02b      	b.n	800e72c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800e6d4:	68bb      	ldr	r3, [r7, #8]
 800e6d6:	4a26      	ldr	r2, [pc, #152]	@ (800e770 <USB_SetTurnaroundTime+0x134>)
 800e6d8:	4293      	cmp	r3, r2
 800e6da:	d906      	bls.n	800e6ea <USB_SetTurnaroundTime+0xae>
 800e6dc:	68bb      	ldr	r3, [r7, #8]
 800e6de:	4a25      	ldr	r2, [pc, #148]	@ (800e774 <USB_SetTurnaroundTime+0x138>)
 800e6e0:	4293      	cmp	r3, r2
 800e6e2:	d202      	bcs.n	800e6ea <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800e6e4:	2309      	movs	r3, #9
 800e6e6:	617b      	str	r3, [r7, #20]
 800e6e8:	e020      	b.n	800e72c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800e6ea:	68bb      	ldr	r3, [r7, #8]
 800e6ec:	4a21      	ldr	r2, [pc, #132]	@ (800e774 <USB_SetTurnaroundTime+0x138>)
 800e6ee:	4293      	cmp	r3, r2
 800e6f0:	d306      	bcc.n	800e700 <USB_SetTurnaroundTime+0xc4>
 800e6f2:	68bb      	ldr	r3, [r7, #8]
 800e6f4:	4a20      	ldr	r2, [pc, #128]	@ (800e778 <USB_SetTurnaroundTime+0x13c>)
 800e6f6:	4293      	cmp	r3, r2
 800e6f8:	d802      	bhi.n	800e700 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800e6fa:	2308      	movs	r3, #8
 800e6fc:	617b      	str	r3, [r7, #20]
 800e6fe:	e015      	b.n	800e72c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800e700:	68bb      	ldr	r3, [r7, #8]
 800e702:	4a1d      	ldr	r2, [pc, #116]	@ (800e778 <USB_SetTurnaroundTime+0x13c>)
 800e704:	4293      	cmp	r3, r2
 800e706:	d906      	bls.n	800e716 <USB_SetTurnaroundTime+0xda>
 800e708:	68bb      	ldr	r3, [r7, #8]
 800e70a:	4a1c      	ldr	r2, [pc, #112]	@ (800e77c <USB_SetTurnaroundTime+0x140>)
 800e70c:	4293      	cmp	r3, r2
 800e70e:	d202      	bcs.n	800e716 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800e710:	2307      	movs	r3, #7
 800e712:	617b      	str	r3, [r7, #20]
 800e714:	e00a      	b.n	800e72c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800e716:	2306      	movs	r3, #6
 800e718:	617b      	str	r3, [r7, #20]
 800e71a:	e007      	b.n	800e72c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800e71c:	79fb      	ldrb	r3, [r7, #7]
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d102      	bne.n	800e728 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800e722:	2309      	movs	r3, #9
 800e724:	617b      	str	r3, [r7, #20]
 800e726:	e001      	b.n	800e72c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800e728:	2309      	movs	r3, #9
 800e72a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	68db      	ldr	r3, [r3, #12]
 800e730:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	68da      	ldr	r2, [r3, #12]
 800e73c:	697b      	ldr	r3, [r7, #20]
 800e73e:	029b      	lsls	r3, r3, #10
 800e740:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800e744:	431a      	orrs	r2, r3
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800e74a:	2300      	movs	r3, #0
}
 800e74c:	4618      	mov	r0, r3
 800e74e:	371c      	adds	r7, #28
 800e750:	46bd      	mov	sp, r7
 800e752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e756:	4770      	bx	lr
 800e758:	00d8acbf 	.word	0x00d8acbf
 800e75c:	00e4e1c0 	.word	0x00e4e1c0
 800e760:	00f42400 	.word	0x00f42400
 800e764:	01067380 	.word	0x01067380
 800e768:	011a499f 	.word	0x011a499f
 800e76c:	01312cff 	.word	0x01312cff
 800e770:	014ca43f 	.word	0x014ca43f
 800e774:	016e3600 	.word	0x016e3600
 800e778:	01a6ab1f 	.word	0x01a6ab1f
 800e77c:	01e84800 	.word	0x01e84800

0800e780 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e780:	b480      	push	{r7}
 800e782:	b083      	sub	sp, #12
 800e784:	af00      	add	r7, sp, #0
 800e786:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	689b      	ldr	r3, [r3, #8]
 800e78c:	f043 0201 	orr.w	r2, r3, #1
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e794:	2300      	movs	r3, #0
}
 800e796:	4618      	mov	r0, r3
 800e798:	370c      	adds	r7, #12
 800e79a:	46bd      	mov	sp, r7
 800e79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7a0:	4770      	bx	lr

0800e7a2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e7a2:	b480      	push	{r7}
 800e7a4:	b083      	sub	sp, #12
 800e7a6:	af00      	add	r7, sp, #0
 800e7a8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	689b      	ldr	r3, [r3, #8]
 800e7ae:	f023 0201 	bic.w	r2, r3, #1
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e7b6:	2300      	movs	r3, #0
}
 800e7b8:	4618      	mov	r0, r3
 800e7ba:	370c      	adds	r7, #12
 800e7bc:	46bd      	mov	sp, r7
 800e7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7c2:	4770      	bx	lr

0800e7c4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800e7c4:	b580      	push	{r7, lr}
 800e7c6:	b084      	sub	sp, #16
 800e7c8:	af00      	add	r7, sp, #0
 800e7ca:	6078      	str	r0, [r7, #4]
 800e7cc:	460b      	mov	r3, r1
 800e7ce:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800e7d0:	2300      	movs	r3, #0
 800e7d2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	68db      	ldr	r3, [r3, #12]
 800e7d8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800e7e0:	78fb      	ldrb	r3, [r7, #3]
 800e7e2:	2b01      	cmp	r3, #1
 800e7e4:	d115      	bne.n	800e812 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	68db      	ldr	r3, [r3, #12]
 800e7ea:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800e7f2:	200a      	movs	r0, #10
 800e7f4:	f7f7 f892 	bl	800591c <HAL_Delay>
      ms += 10U;
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	330a      	adds	r3, #10
 800e7fc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800e7fe:	6878      	ldr	r0, [r7, #4]
 800e800:	f001 f93f 	bl	800fa82 <USB_GetMode>
 800e804:	4603      	mov	r3, r0
 800e806:	2b01      	cmp	r3, #1
 800e808:	d01e      	beq.n	800e848 <USB_SetCurrentMode+0x84>
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	2bc7      	cmp	r3, #199	@ 0xc7
 800e80e:	d9f0      	bls.n	800e7f2 <USB_SetCurrentMode+0x2e>
 800e810:	e01a      	b.n	800e848 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800e812:	78fb      	ldrb	r3, [r7, #3]
 800e814:	2b00      	cmp	r3, #0
 800e816:	d115      	bne.n	800e844 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	68db      	ldr	r3, [r3, #12]
 800e81c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800e824:	200a      	movs	r0, #10
 800e826:	f7f7 f879 	bl	800591c <HAL_Delay>
      ms += 10U;
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	330a      	adds	r3, #10
 800e82e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800e830:	6878      	ldr	r0, [r7, #4]
 800e832:	f001 f926 	bl	800fa82 <USB_GetMode>
 800e836:	4603      	mov	r3, r0
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d005      	beq.n	800e848 <USB_SetCurrentMode+0x84>
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	2bc7      	cmp	r3, #199	@ 0xc7
 800e840:	d9f0      	bls.n	800e824 <USB_SetCurrentMode+0x60>
 800e842:	e001      	b.n	800e848 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800e844:	2301      	movs	r3, #1
 800e846:	e005      	b.n	800e854 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	2bc8      	cmp	r3, #200	@ 0xc8
 800e84c:	d101      	bne.n	800e852 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800e84e:	2301      	movs	r3, #1
 800e850:	e000      	b.n	800e854 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800e852:	2300      	movs	r3, #0
}
 800e854:	4618      	mov	r0, r3
 800e856:	3710      	adds	r7, #16
 800e858:	46bd      	mov	sp, r7
 800e85a:	bd80      	pop	{r7, pc}

0800e85c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e85c:	b084      	sub	sp, #16
 800e85e:	b580      	push	{r7, lr}
 800e860:	b086      	sub	sp, #24
 800e862:	af00      	add	r7, sp, #0
 800e864:	6078      	str	r0, [r7, #4]
 800e866:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800e86a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800e86e:	2300      	movs	r3, #0
 800e870:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800e876:	2300      	movs	r3, #0
 800e878:	613b      	str	r3, [r7, #16]
 800e87a:	e009      	b.n	800e890 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800e87c:	687a      	ldr	r2, [r7, #4]
 800e87e:	693b      	ldr	r3, [r7, #16]
 800e880:	3340      	adds	r3, #64	@ 0x40
 800e882:	009b      	lsls	r3, r3, #2
 800e884:	4413      	add	r3, r2
 800e886:	2200      	movs	r2, #0
 800e888:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800e88a:	693b      	ldr	r3, [r7, #16]
 800e88c:	3301      	adds	r3, #1
 800e88e:	613b      	str	r3, [r7, #16]
 800e890:	693b      	ldr	r3, [r7, #16]
 800e892:	2b0e      	cmp	r3, #14
 800e894:	d9f2      	bls.n	800e87c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800e896:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d11c      	bne.n	800e8d8 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e8a4:	685b      	ldr	r3, [r3, #4]
 800e8a6:	68fa      	ldr	r2, [r7, #12]
 800e8a8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e8ac:	f043 0302 	orr.w	r3, r3, #2
 800e8b0:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e8b6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e8c2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e8ce:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	639a      	str	r2, [r3, #56]	@ 0x38
 800e8d6:	e00b      	b.n	800e8f0 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e8dc:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e8e8:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800e8f6:	461a      	mov	r2, r3
 800e8f8:	2300      	movs	r3, #0
 800e8fa:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e8fc:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800e900:	2b01      	cmp	r3, #1
 800e902:	d10d      	bne.n	800e920 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800e904:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d104      	bne.n	800e916 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800e90c:	2100      	movs	r1, #0
 800e90e:	6878      	ldr	r0, [r7, #4]
 800e910:	f000 f968 	bl	800ebe4 <USB_SetDevSpeed>
 800e914:	e008      	b.n	800e928 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800e916:	2101      	movs	r1, #1
 800e918:	6878      	ldr	r0, [r7, #4]
 800e91a:	f000 f963 	bl	800ebe4 <USB_SetDevSpeed>
 800e91e:	e003      	b.n	800e928 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800e920:	2103      	movs	r1, #3
 800e922:	6878      	ldr	r0, [r7, #4]
 800e924:	f000 f95e 	bl	800ebe4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800e928:	2110      	movs	r1, #16
 800e92a:	6878      	ldr	r0, [r7, #4]
 800e92c:	f000 f8fa 	bl	800eb24 <USB_FlushTxFifo>
 800e930:	4603      	mov	r3, r0
 800e932:	2b00      	cmp	r3, #0
 800e934:	d001      	beq.n	800e93a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800e936:	2301      	movs	r3, #1
 800e938:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800e93a:	6878      	ldr	r0, [r7, #4]
 800e93c:	f000 f924 	bl	800eb88 <USB_FlushRxFifo>
 800e940:	4603      	mov	r3, r0
 800e942:	2b00      	cmp	r3, #0
 800e944:	d001      	beq.n	800e94a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800e946:	2301      	movs	r3, #1
 800e948:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e950:	461a      	mov	r2, r3
 800e952:	2300      	movs	r3, #0
 800e954:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e95c:	461a      	mov	r2, r3
 800e95e:	2300      	movs	r3, #0
 800e960:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e968:	461a      	mov	r2, r3
 800e96a:	2300      	movs	r3, #0
 800e96c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e96e:	2300      	movs	r3, #0
 800e970:	613b      	str	r3, [r7, #16]
 800e972:	e043      	b.n	800e9fc <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e974:	693b      	ldr	r3, [r7, #16]
 800e976:	015a      	lsls	r2, r3, #5
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	4413      	add	r3, r2
 800e97c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e986:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e98a:	d118      	bne.n	800e9be <USB_DevInit+0x162>
    {
      if (i == 0U)
 800e98c:	693b      	ldr	r3, [r7, #16]
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d10a      	bne.n	800e9a8 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800e992:	693b      	ldr	r3, [r7, #16]
 800e994:	015a      	lsls	r2, r3, #5
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	4413      	add	r3, r2
 800e99a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e99e:	461a      	mov	r2, r3
 800e9a0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800e9a4:	6013      	str	r3, [r2, #0]
 800e9a6:	e013      	b.n	800e9d0 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800e9a8:	693b      	ldr	r3, [r7, #16]
 800e9aa:	015a      	lsls	r2, r3, #5
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	4413      	add	r3, r2
 800e9b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e9b4:	461a      	mov	r2, r3
 800e9b6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800e9ba:	6013      	str	r3, [r2, #0]
 800e9bc:	e008      	b.n	800e9d0 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800e9be:	693b      	ldr	r3, [r7, #16]
 800e9c0:	015a      	lsls	r2, r3, #5
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	4413      	add	r3, r2
 800e9c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e9ca:	461a      	mov	r2, r3
 800e9cc:	2300      	movs	r3, #0
 800e9ce:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800e9d0:	693b      	ldr	r3, [r7, #16]
 800e9d2:	015a      	lsls	r2, r3, #5
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	4413      	add	r3, r2
 800e9d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e9dc:	461a      	mov	r2, r3
 800e9de:	2300      	movs	r3, #0
 800e9e0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800e9e2:	693b      	ldr	r3, [r7, #16]
 800e9e4:	015a      	lsls	r2, r3, #5
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	4413      	add	r3, r2
 800e9ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e9ee:	461a      	mov	r2, r3
 800e9f0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800e9f4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e9f6:	693b      	ldr	r3, [r7, #16]
 800e9f8:	3301      	adds	r3, #1
 800e9fa:	613b      	str	r3, [r7, #16]
 800e9fc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800ea00:	461a      	mov	r2, r3
 800ea02:	693b      	ldr	r3, [r7, #16]
 800ea04:	4293      	cmp	r3, r2
 800ea06:	d3b5      	bcc.n	800e974 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ea08:	2300      	movs	r3, #0
 800ea0a:	613b      	str	r3, [r7, #16]
 800ea0c:	e043      	b.n	800ea96 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ea0e:	693b      	ldr	r3, [r7, #16]
 800ea10:	015a      	lsls	r2, r3, #5
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	4413      	add	r3, r2
 800ea16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ea20:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ea24:	d118      	bne.n	800ea58 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800ea26:	693b      	ldr	r3, [r7, #16]
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d10a      	bne.n	800ea42 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ea2c:	693b      	ldr	r3, [r7, #16]
 800ea2e:	015a      	lsls	r2, r3, #5
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	4413      	add	r3, r2
 800ea34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ea38:	461a      	mov	r2, r3
 800ea3a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800ea3e:	6013      	str	r3, [r2, #0]
 800ea40:	e013      	b.n	800ea6a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ea42:	693b      	ldr	r3, [r7, #16]
 800ea44:	015a      	lsls	r2, r3, #5
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	4413      	add	r3, r2
 800ea4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ea4e:	461a      	mov	r2, r3
 800ea50:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800ea54:	6013      	str	r3, [r2, #0]
 800ea56:	e008      	b.n	800ea6a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800ea58:	693b      	ldr	r3, [r7, #16]
 800ea5a:	015a      	lsls	r2, r3, #5
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	4413      	add	r3, r2
 800ea60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ea64:	461a      	mov	r2, r3
 800ea66:	2300      	movs	r3, #0
 800ea68:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800ea6a:	693b      	ldr	r3, [r7, #16]
 800ea6c:	015a      	lsls	r2, r3, #5
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	4413      	add	r3, r2
 800ea72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ea76:	461a      	mov	r2, r3
 800ea78:	2300      	movs	r3, #0
 800ea7a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800ea7c:	693b      	ldr	r3, [r7, #16]
 800ea7e:	015a      	lsls	r2, r3, #5
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	4413      	add	r3, r2
 800ea84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ea88:	461a      	mov	r2, r3
 800ea8a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800ea8e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ea90:	693b      	ldr	r3, [r7, #16]
 800ea92:	3301      	adds	r3, #1
 800ea94:	613b      	str	r3, [r7, #16]
 800ea96:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800ea9a:	461a      	mov	r2, r3
 800ea9c:	693b      	ldr	r3, [r7, #16]
 800ea9e:	4293      	cmp	r3, r2
 800eaa0:	d3b5      	bcc.n	800ea0e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800eaa8:	691b      	ldr	r3, [r3, #16]
 800eaaa:	68fa      	ldr	r2, [r7, #12]
 800eaac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800eab0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800eab4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	2200      	movs	r2, #0
 800eaba:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800eac2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800eac4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d105      	bne.n	800ead8 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	699b      	ldr	r3, [r3, #24]
 800ead0:	f043 0210 	orr.w	r2, r3, #16
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	699a      	ldr	r2, [r3, #24]
 800eadc:	4b10      	ldr	r3, [pc, #64]	@ (800eb20 <USB_DevInit+0x2c4>)
 800eade:	4313      	orrs	r3, r2
 800eae0:	687a      	ldr	r2, [r7, #4]
 800eae2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800eae4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d005      	beq.n	800eaf8 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	699b      	ldr	r3, [r3, #24]
 800eaf0:	f043 0208 	orr.w	r2, r3, #8
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800eaf8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800eafc:	2b01      	cmp	r3, #1
 800eafe:	d107      	bne.n	800eb10 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	699b      	ldr	r3, [r3, #24]
 800eb04:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800eb08:	f043 0304 	orr.w	r3, r3, #4
 800eb0c:	687a      	ldr	r2, [r7, #4]
 800eb0e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800eb10:	7dfb      	ldrb	r3, [r7, #23]
}
 800eb12:	4618      	mov	r0, r3
 800eb14:	3718      	adds	r7, #24
 800eb16:	46bd      	mov	sp, r7
 800eb18:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800eb1c:	b004      	add	sp, #16
 800eb1e:	4770      	bx	lr
 800eb20:	803c3800 	.word	0x803c3800

0800eb24 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800eb24:	b480      	push	{r7}
 800eb26:	b085      	sub	sp, #20
 800eb28:	af00      	add	r7, sp, #0
 800eb2a:	6078      	str	r0, [r7, #4]
 800eb2c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800eb2e:	2300      	movs	r3, #0
 800eb30:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	3301      	adds	r3, #1
 800eb36:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800eb3e:	d901      	bls.n	800eb44 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800eb40:	2303      	movs	r3, #3
 800eb42:	e01b      	b.n	800eb7c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	691b      	ldr	r3, [r3, #16]
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	daf2      	bge.n	800eb32 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800eb4c:	2300      	movs	r3, #0
 800eb4e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800eb50:	683b      	ldr	r3, [r7, #0]
 800eb52:	019b      	lsls	r3, r3, #6
 800eb54:	f043 0220 	orr.w	r2, r3, #32
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	3301      	adds	r3, #1
 800eb60:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800eb68:	d901      	bls.n	800eb6e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800eb6a:	2303      	movs	r3, #3
 800eb6c:	e006      	b.n	800eb7c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	691b      	ldr	r3, [r3, #16]
 800eb72:	f003 0320 	and.w	r3, r3, #32
 800eb76:	2b20      	cmp	r3, #32
 800eb78:	d0f0      	beq.n	800eb5c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800eb7a:	2300      	movs	r3, #0
}
 800eb7c:	4618      	mov	r0, r3
 800eb7e:	3714      	adds	r7, #20
 800eb80:	46bd      	mov	sp, r7
 800eb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb86:	4770      	bx	lr

0800eb88 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800eb88:	b480      	push	{r7}
 800eb8a:	b085      	sub	sp, #20
 800eb8c:	af00      	add	r7, sp, #0
 800eb8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800eb90:	2300      	movs	r3, #0
 800eb92:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800eb94:	68fb      	ldr	r3, [r7, #12]
 800eb96:	3301      	adds	r3, #1
 800eb98:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800eba0:	d901      	bls.n	800eba6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800eba2:	2303      	movs	r3, #3
 800eba4:	e018      	b.n	800ebd8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	691b      	ldr	r3, [r3, #16]
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	daf2      	bge.n	800eb94 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800ebae:	2300      	movs	r3, #0
 800ebb0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	2210      	movs	r2, #16
 800ebb6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	3301      	adds	r3, #1
 800ebbc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ebc4:	d901      	bls.n	800ebca <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800ebc6:	2303      	movs	r3, #3
 800ebc8:	e006      	b.n	800ebd8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	691b      	ldr	r3, [r3, #16]
 800ebce:	f003 0310 	and.w	r3, r3, #16
 800ebd2:	2b10      	cmp	r3, #16
 800ebd4:	d0f0      	beq.n	800ebb8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800ebd6:	2300      	movs	r3, #0
}
 800ebd8:	4618      	mov	r0, r3
 800ebda:	3714      	adds	r7, #20
 800ebdc:	46bd      	mov	sp, r7
 800ebde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebe2:	4770      	bx	lr

0800ebe4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ebe4:	b480      	push	{r7}
 800ebe6:	b085      	sub	sp, #20
 800ebe8:	af00      	add	r7, sp, #0
 800ebea:	6078      	str	r0, [r7, #4]
 800ebec:	460b      	mov	r3, r1
 800ebee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ebfa:	681a      	ldr	r2, [r3, #0]
 800ebfc:	78fb      	ldrb	r3, [r7, #3]
 800ebfe:	68f9      	ldr	r1, [r7, #12]
 800ec00:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ec04:	4313      	orrs	r3, r2
 800ec06:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ec08:	2300      	movs	r3, #0
}
 800ec0a:	4618      	mov	r0, r3
 800ec0c:	3714      	adds	r7, #20
 800ec0e:	46bd      	mov	sp, r7
 800ec10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec14:	4770      	bx	lr

0800ec16 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800ec16:	b480      	push	{r7}
 800ec18:	b087      	sub	sp, #28
 800ec1a:	af00      	add	r7, sp, #0
 800ec1c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800ec22:	693b      	ldr	r3, [r7, #16]
 800ec24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ec28:	689b      	ldr	r3, [r3, #8]
 800ec2a:	f003 0306 	and.w	r3, r3, #6
 800ec2e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d102      	bne.n	800ec3c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800ec36:	2300      	movs	r3, #0
 800ec38:	75fb      	strb	r3, [r7, #23]
 800ec3a:	e00a      	b.n	800ec52 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	2b02      	cmp	r3, #2
 800ec40:	d002      	beq.n	800ec48 <USB_GetDevSpeed+0x32>
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	2b06      	cmp	r3, #6
 800ec46:	d102      	bne.n	800ec4e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800ec48:	2302      	movs	r3, #2
 800ec4a:	75fb      	strb	r3, [r7, #23]
 800ec4c:	e001      	b.n	800ec52 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800ec4e:	230f      	movs	r3, #15
 800ec50:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800ec52:	7dfb      	ldrb	r3, [r7, #23]
}
 800ec54:	4618      	mov	r0, r3
 800ec56:	371c      	adds	r7, #28
 800ec58:	46bd      	mov	sp, r7
 800ec5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec5e:	4770      	bx	lr

0800ec60 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800ec60:	b480      	push	{r7}
 800ec62:	b085      	sub	sp, #20
 800ec64:	af00      	add	r7, sp, #0
 800ec66:	6078      	str	r0, [r7, #4]
 800ec68:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ec6e:	683b      	ldr	r3, [r7, #0]
 800ec70:	781b      	ldrb	r3, [r3, #0]
 800ec72:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ec74:	683b      	ldr	r3, [r7, #0]
 800ec76:	785b      	ldrb	r3, [r3, #1]
 800ec78:	2b01      	cmp	r3, #1
 800ec7a:	d13a      	bne.n	800ecf2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ec82:	69da      	ldr	r2, [r3, #28]
 800ec84:	683b      	ldr	r3, [r7, #0]
 800ec86:	781b      	ldrb	r3, [r3, #0]
 800ec88:	f003 030f 	and.w	r3, r3, #15
 800ec8c:	2101      	movs	r1, #1
 800ec8e:	fa01 f303 	lsl.w	r3, r1, r3
 800ec92:	b29b      	uxth	r3, r3
 800ec94:	68f9      	ldr	r1, [r7, #12]
 800ec96:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ec9a:	4313      	orrs	r3, r2
 800ec9c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800ec9e:	68bb      	ldr	r3, [r7, #8]
 800eca0:	015a      	lsls	r2, r3, #5
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	4413      	add	r3, r2
 800eca6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d155      	bne.n	800ed60 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ecb4:	68bb      	ldr	r3, [r7, #8]
 800ecb6:	015a      	lsls	r2, r3, #5
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	4413      	add	r3, r2
 800ecbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ecc0:	681a      	ldr	r2, [r3, #0]
 800ecc2:	683b      	ldr	r3, [r7, #0]
 800ecc4:	689b      	ldr	r3, [r3, #8]
 800ecc6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ecca:	683b      	ldr	r3, [r7, #0]
 800eccc:	791b      	ldrb	r3, [r3, #4]
 800ecce:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ecd0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ecd2:	68bb      	ldr	r3, [r7, #8]
 800ecd4:	059b      	lsls	r3, r3, #22
 800ecd6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ecd8:	4313      	orrs	r3, r2
 800ecda:	68ba      	ldr	r2, [r7, #8]
 800ecdc:	0151      	lsls	r1, r2, #5
 800ecde:	68fa      	ldr	r2, [r7, #12]
 800ece0:	440a      	add	r2, r1
 800ece2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ece6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ecea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ecee:	6013      	str	r3, [r2, #0]
 800ecf0:	e036      	b.n	800ed60 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ecf8:	69da      	ldr	r2, [r3, #28]
 800ecfa:	683b      	ldr	r3, [r7, #0]
 800ecfc:	781b      	ldrb	r3, [r3, #0]
 800ecfe:	f003 030f 	and.w	r3, r3, #15
 800ed02:	2101      	movs	r1, #1
 800ed04:	fa01 f303 	lsl.w	r3, r1, r3
 800ed08:	041b      	lsls	r3, r3, #16
 800ed0a:	68f9      	ldr	r1, [r7, #12]
 800ed0c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ed10:	4313      	orrs	r3, r2
 800ed12:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800ed14:	68bb      	ldr	r3, [r7, #8]
 800ed16:	015a      	lsls	r2, r3, #5
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	4413      	add	r3, r2
 800ed1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ed20:	681b      	ldr	r3, [r3, #0]
 800ed22:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d11a      	bne.n	800ed60 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ed2a:	68bb      	ldr	r3, [r7, #8]
 800ed2c:	015a      	lsls	r2, r3, #5
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	4413      	add	r3, r2
 800ed32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ed36:	681a      	ldr	r2, [r3, #0]
 800ed38:	683b      	ldr	r3, [r7, #0]
 800ed3a:	689b      	ldr	r3, [r3, #8]
 800ed3c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800ed40:	683b      	ldr	r3, [r7, #0]
 800ed42:	791b      	ldrb	r3, [r3, #4]
 800ed44:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ed46:	430b      	orrs	r3, r1
 800ed48:	4313      	orrs	r3, r2
 800ed4a:	68ba      	ldr	r2, [r7, #8]
 800ed4c:	0151      	lsls	r1, r2, #5
 800ed4e:	68fa      	ldr	r2, [r7, #12]
 800ed50:	440a      	add	r2, r1
 800ed52:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ed56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ed5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ed5e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800ed60:	2300      	movs	r3, #0
}
 800ed62:	4618      	mov	r0, r3
 800ed64:	3714      	adds	r7, #20
 800ed66:	46bd      	mov	sp, r7
 800ed68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed6c:	4770      	bx	lr
	...

0800ed70 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800ed70:	b480      	push	{r7}
 800ed72:	b085      	sub	sp, #20
 800ed74:	af00      	add	r7, sp, #0
 800ed76:	6078      	str	r0, [r7, #4]
 800ed78:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ed7e:	683b      	ldr	r3, [r7, #0]
 800ed80:	781b      	ldrb	r3, [r3, #0]
 800ed82:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800ed84:	683b      	ldr	r3, [r7, #0]
 800ed86:	785b      	ldrb	r3, [r3, #1]
 800ed88:	2b01      	cmp	r3, #1
 800ed8a:	d161      	bne.n	800ee50 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ed8c:	68bb      	ldr	r3, [r7, #8]
 800ed8e:	015a      	lsls	r2, r3, #5
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	4413      	add	r3, r2
 800ed94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ed9e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800eda2:	d11f      	bne.n	800ede4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800eda4:	68bb      	ldr	r3, [r7, #8]
 800eda6:	015a      	lsls	r2, r3, #5
 800eda8:	68fb      	ldr	r3, [r7, #12]
 800edaa:	4413      	add	r3, r2
 800edac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	68ba      	ldr	r2, [r7, #8]
 800edb4:	0151      	lsls	r1, r2, #5
 800edb6:	68fa      	ldr	r2, [r7, #12]
 800edb8:	440a      	add	r2, r1
 800edba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800edbe:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800edc2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800edc4:	68bb      	ldr	r3, [r7, #8]
 800edc6:	015a      	lsls	r2, r3, #5
 800edc8:	68fb      	ldr	r3, [r7, #12]
 800edca:	4413      	add	r3, r2
 800edcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	68ba      	ldr	r2, [r7, #8]
 800edd4:	0151      	lsls	r1, r2, #5
 800edd6:	68fa      	ldr	r2, [r7, #12]
 800edd8:	440a      	add	r2, r1
 800edda:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800edde:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ede2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ede4:	68fb      	ldr	r3, [r7, #12]
 800ede6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800edea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800edec:	683b      	ldr	r3, [r7, #0]
 800edee:	781b      	ldrb	r3, [r3, #0]
 800edf0:	f003 030f 	and.w	r3, r3, #15
 800edf4:	2101      	movs	r1, #1
 800edf6:	fa01 f303 	lsl.w	r3, r1, r3
 800edfa:	b29b      	uxth	r3, r3
 800edfc:	43db      	mvns	r3, r3
 800edfe:	68f9      	ldr	r1, [r7, #12]
 800ee00:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ee04:	4013      	ands	r3, r2
 800ee06:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ee0e:	69da      	ldr	r2, [r3, #28]
 800ee10:	683b      	ldr	r3, [r7, #0]
 800ee12:	781b      	ldrb	r3, [r3, #0]
 800ee14:	f003 030f 	and.w	r3, r3, #15
 800ee18:	2101      	movs	r1, #1
 800ee1a:	fa01 f303 	lsl.w	r3, r1, r3
 800ee1e:	b29b      	uxth	r3, r3
 800ee20:	43db      	mvns	r3, r3
 800ee22:	68f9      	ldr	r1, [r7, #12]
 800ee24:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ee28:	4013      	ands	r3, r2
 800ee2a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800ee2c:	68bb      	ldr	r3, [r7, #8]
 800ee2e:	015a      	lsls	r2, r3, #5
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	4413      	add	r3, r2
 800ee34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ee38:	681a      	ldr	r2, [r3, #0]
 800ee3a:	68bb      	ldr	r3, [r7, #8]
 800ee3c:	0159      	lsls	r1, r3, #5
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	440b      	add	r3, r1
 800ee42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ee46:	4619      	mov	r1, r3
 800ee48:	4b35      	ldr	r3, [pc, #212]	@ (800ef20 <USB_DeactivateEndpoint+0x1b0>)
 800ee4a:	4013      	ands	r3, r2
 800ee4c:	600b      	str	r3, [r1, #0]
 800ee4e:	e060      	b.n	800ef12 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ee50:	68bb      	ldr	r3, [r7, #8]
 800ee52:	015a      	lsls	r2, r3, #5
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	4413      	add	r3, r2
 800ee58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ee5c:	681b      	ldr	r3, [r3, #0]
 800ee5e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ee62:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ee66:	d11f      	bne.n	800eea8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800ee68:	68bb      	ldr	r3, [r7, #8]
 800ee6a:	015a      	lsls	r2, r3, #5
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	4413      	add	r3, r2
 800ee70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	68ba      	ldr	r2, [r7, #8]
 800ee78:	0151      	lsls	r1, r2, #5
 800ee7a:	68fa      	ldr	r2, [r7, #12]
 800ee7c:	440a      	add	r2, r1
 800ee7e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ee82:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ee86:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800ee88:	68bb      	ldr	r3, [r7, #8]
 800ee8a:	015a      	lsls	r2, r3, #5
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	4413      	add	r3, r2
 800ee90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	68ba      	ldr	r2, [r7, #8]
 800ee98:	0151      	lsls	r1, r2, #5
 800ee9a:	68fa      	ldr	r2, [r7, #12]
 800ee9c:	440a      	add	r2, r1
 800ee9e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800eea2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800eea6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800eea8:	68fb      	ldr	r3, [r7, #12]
 800eeaa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800eeae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800eeb0:	683b      	ldr	r3, [r7, #0]
 800eeb2:	781b      	ldrb	r3, [r3, #0]
 800eeb4:	f003 030f 	and.w	r3, r3, #15
 800eeb8:	2101      	movs	r1, #1
 800eeba:	fa01 f303 	lsl.w	r3, r1, r3
 800eebe:	041b      	lsls	r3, r3, #16
 800eec0:	43db      	mvns	r3, r3
 800eec2:	68f9      	ldr	r1, [r7, #12]
 800eec4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800eec8:	4013      	ands	r3, r2
 800eeca:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800eecc:	68fb      	ldr	r3, [r7, #12]
 800eece:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800eed2:	69da      	ldr	r2, [r3, #28]
 800eed4:	683b      	ldr	r3, [r7, #0]
 800eed6:	781b      	ldrb	r3, [r3, #0]
 800eed8:	f003 030f 	and.w	r3, r3, #15
 800eedc:	2101      	movs	r1, #1
 800eede:	fa01 f303 	lsl.w	r3, r1, r3
 800eee2:	041b      	lsls	r3, r3, #16
 800eee4:	43db      	mvns	r3, r3
 800eee6:	68f9      	ldr	r1, [r7, #12]
 800eee8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800eeec:	4013      	ands	r3, r2
 800eeee:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800eef0:	68bb      	ldr	r3, [r7, #8]
 800eef2:	015a      	lsls	r2, r3, #5
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	4413      	add	r3, r2
 800eef8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eefc:	681a      	ldr	r2, [r3, #0]
 800eefe:	68bb      	ldr	r3, [r7, #8]
 800ef00:	0159      	lsls	r1, r3, #5
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	440b      	add	r3, r1
 800ef06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ef0a:	4619      	mov	r1, r3
 800ef0c:	4b05      	ldr	r3, [pc, #20]	@ (800ef24 <USB_DeactivateEndpoint+0x1b4>)
 800ef0e:	4013      	ands	r3, r2
 800ef10:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800ef12:	2300      	movs	r3, #0
}
 800ef14:	4618      	mov	r0, r3
 800ef16:	3714      	adds	r7, #20
 800ef18:	46bd      	mov	sp, r7
 800ef1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef1e:	4770      	bx	lr
 800ef20:	ec337800 	.word	0xec337800
 800ef24:	eff37800 	.word	0xeff37800

0800ef28 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800ef28:	b580      	push	{r7, lr}
 800ef2a:	b08a      	sub	sp, #40	@ 0x28
 800ef2c:	af02      	add	r7, sp, #8
 800ef2e:	60f8      	str	r0, [r7, #12]
 800ef30:	60b9      	str	r1, [r7, #8]
 800ef32:	4613      	mov	r3, r2
 800ef34:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800ef3a:	68bb      	ldr	r3, [r7, #8]
 800ef3c:	781b      	ldrb	r3, [r3, #0]
 800ef3e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ef40:	68bb      	ldr	r3, [r7, #8]
 800ef42:	785b      	ldrb	r3, [r3, #1]
 800ef44:	2b01      	cmp	r3, #1
 800ef46:	f040 817f 	bne.w	800f248 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800ef4a:	68bb      	ldr	r3, [r7, #8]
 800ef4c:	691b      	ldr	r3, [r3, #16]
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	d132      	bne.n	800efb8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ef52:	69bb      	ldr	r3, [r7, #24]
 800ef54:	015a      	lsls	r2, r3, #5
 800ef56:	69fb      	ldr	r3, [r7, #28]
 800ef58:	4413      	add	r3, r2
 800ef5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ef5e:	691b      	ldr	r3, [r3, #16]
 800ef60:	69ba      	ldr	r2, [r7, #24]
 800ef62:	0151      	lsls	r1, r2, #5
 800ef64:	69fa      	ldr	r2, [r7, #28]
 800ef66:	440a      	add	r2, r1
 800ef68:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ef6c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800ef70:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800ef74:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ef76:	69bb      	ldr	r3, [r7, #24]
 800ef78:	015a      	lsls	r2, r3, #5
 800ef7a:	69fb      	ldr	r3, [r7, #28]
 800ef7c:	4413      	add	r3, r2
 800ef7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ef82:	691b      	ldr	r3, [r3, #16]
 800ef84:	69ba      	ldr	r2, [r7, #24]
 800ef86:	0151      	lsls	r1, r2, #5
 800ef88:	69fa      	ldr	r2, [r7, #28]
 800ef8a:	440a      	add	r2, r1
 800ef8c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ef90:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ef94:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ef96:	69bb      	ldr	r3, [r7, #24]
 800ef98:	015a      	lsls	r2, r3, #5
 800ef9a:	69fb      	ldr	r3, [r7, #28]
 800ef9c:	4413      	add	r3, r2
 800ef9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800efa2:	691b      	ldr	r3, [r3, #16]
 800efa4:	69ba      	ldr	r2, [r7, #24]
 800efa6:	0151      	lsls	r1, r2, #5
 800efa8:	69fa      	ldr	r2, [r7, #28]
 800efaa:	440a      	add	r2, r1
 800efac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800efb0:	0cdb      	lsrs	r3, r3, #19
 800efb2:	04db      	lsls	r3, r3, #19
 800efb4:	6113      	str	r3, [r2, #16]
 800efb6:	e097      	b.n	800f0e8 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800efb8:	69bb      	ldr	r3, [r7, #24]
 800efba:	015a      	lsls	r2, r3, #5
 800efbc:	69fb      	ldr	r3, [r7, #28]
 800efbe:	4413      	add	r3, r2
 800efc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800efc4:	691b      	ldr	r3, [r3, #16]
 800efc6:	69ba      	ldr	r2, [r7, #24]
 800efc8:	0151      	lsls	r1, r2, #5
 800efca:	69fa      	ldr	r2, [r7, #28]
 800efcc:	440a      	add	r2, r1
 800efce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800efd2:	0cdb      	lsrs	r3, r3, #19
 800efd4:	04db      	lsls	r3, r3, #19
 800efd6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800efd8:	69bb      	ldr	r3, [r7, #24]
 800efda:	015a      	lsls	r2, r3, #5
 800efdc:	69fb      	ldr	r3, [r7, #28]
 800efde:	4413      	add	r3, r2
 800efe0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800efe4:	691b      	ldr	r3, [r3, #16]
 800efe6:	69ba      	ldr	r2, [r7, #24]
 800efe8:	0151      	lsls	r1, r2, #5
 800efea:	69fa      	ldr	r2, [r7, #28]
 800efec:	440a      	add	r2, r1
 800efee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800eff2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800eff6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800effa:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800effc:	69bb      	ldr	r3, [r7, #24]
 800effe:	2b00      	cmp	r3, #0
 800f000:	d11a      	bne.n	800f038 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800f002:	68bb      	ldr	r3, [r7, #8]
 800f004:	691a      	ldr	r2, [r3, #16]
 800f006:	68bb      	ldr	r3, [r7, #8]
 800f008:	689b      	ldr	r3, [r3, #8]
 800f00a:	429a      	cmp	r2, r3
 800f00c:	d903      	bls.n	800f016 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800f00e:	68bb      	ldr	r3, [r7, #8]
 800f010:	689a      	ldr	r2, [r3, #8]
 800f012:	68bb      	ldr	r3, [r7, #8]
 800f014:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f016:	69bb      	ldr	r3, [r7, #24]
 800f018:	015a      	lsls	r2, r3, #5
 800f01a:	69fb      	ldr	r3, [r7, #28]
 800f01c:	4413      	add	r3, r2
 800f01e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f022:	691b      	ldr	r3, [r3, #16]
 800f024:	69ba      	ldr	r2, [r7, #24]
 800f026:	0151      	lsls	r1, r2, #5
 800f028:	69fa      	ldr	r2, [r7, #28]
 800f02a:	440a      	add	r2, r1
 800f02c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f030:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800f034:	6113      	str	r3, [r2, #16]
 800f036:	e044      	b.n	800f0c2 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800f038:	68bb      	ldr	r3, [r7, #8]
 800f03a:	691a      	ldr	r2, [r3, #16]
 800f03c:	68bb      	ldr	r3, [r7, #8]
 800f03e:	689b      	ldr	r3, [r3, #8]
 800f040:	4413      	add	r3, r2
 800f042:	1e5a      	subs	r2, r3, #1
 800f044:	68bb      	ldr	r3, [r7, #8]
 800f046:	689b      	ldr	r3, [r3, #8]
 800f048:	fbb2 f3f3 	udiv	r3, r2, r3
 800f04c:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 800f04e:	69bb      	ldr	r3, [r7, #24]
 800f050:	015a      	lsls	r2, r3, #5
 800f052:	69fb      	ldr	r3, [r7, #28]
 800f054:	4413      	add	r3, r2
 800f056:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f05a:	691a      	ldr	r2, [r3, #16]
 800f05c:	8afb      	ldrh	r3, [r7, #22]
 800f05e:	04d9      	lsls	r1, r3, #19
 800f060:	4ba4      	ldr	r3, [pc, #656]	@ (800f2f4 <USB_EPStartXfer+0x3cc>)
 800f062:	400b      	ands	r3, r1
 800f064:	69b9      	ldr	r1, [r7, #24]
 800f066:	0148      	lsls	r0, r1, #5
 800f068:	69f9      	ldr	r1, [r7, #28]
 800f06a:	4401      	add	r1, r0
 800f06c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800f070:	4313      	orrs	r3, r2
 800f072:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800f074:	68bb      	ldr	r3, [r7, #8]
 800f076:	791b      	ldrb	r3, [r3, #4]
 800f078:	2b01      	cmp	r3, #1
 800f07a:	d122      	bne.n	800f0c2 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800f07c:	69bb      	ldr	r3, [r7, #24]
 800f07e:	015a      	lsls	r2, r3, #5
 800f080:	69fb      	ldr	r3, [r7, #28]
 800f082:	4413      	add	r3, r2
 800f084:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f088:	691b      	ldr	r3, [r3, #16]
 800f08a:	69ba      	ldr	r2, [r7, #24]
 800f08c:	0151      	lsls	r1, r2, #5
 800f08e:	69fa      	ldr	r2, [r7, #28]
 800f090:	440a      	add	r2, r1
 800f092:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f096:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800f09a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 800f09c:	69bb      	ldr	r3, [r7, #24]
 800f09e:	015a      	lsls	r2, r3, #5
 800f0a0:	69fb      	ldr	r3, [r7, #28]
 800f0a2:	4413      	add	r3, r2
 800f0a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f0a8:	691a      	ldr	r2, [r3, #16]
 800f0aa:	8afb      	ldrh	r3, [r7, #22]
 800f0ac:	075b      	lsls	r3, r3, #29
 800f0ae:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800f0b2:	69b9      	ldr	r1, [r7, #24]
 800f0b4:	0148      	lsls	r0, r1, #5
 800f0b6:	69f9      	ldr	r1, [r7, #28]
 800f0b8:	4401      	add	r1, r0
 800f0ba:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800f0be:	4313      	orrs	r3, r2
 800f0c0:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800f0c2:	69bb      	ldr	r3, [r7, #24]
 800f0c4:	015a      	lsls	r2, r3, #5
 800f0c6:	69fb      	ldr	r3, [r7, #28]
 800f0c8:	4413      	add	r3, r2
 800f0ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f0ce:	691a      	ldr	r2, [r3, #16]
 800f0d0:	68bb      	ldr	r3, [r7, #8]
 800f0d2:	691b      	ldr	r3, [r3, #16]
 800f0d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f0d8:	69b9      	ldr	r1, [r7, #24]
 800f0da:	0148      	lsls	r0, r1, #5
 800f0dc:	69f9      	ldr	r1, [r7, #28]
 800f0de:	4401      	add	r1, r0
 800f0e0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800f0e4:	4313      	orrs	r3, r2
 800f0e6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800f0e8:	79fb      	ldrb	r3, [r7, #7]
 800f0ea:	2b01      	cmp	r3, #1
 800f0ec:	d14b      	bne.n	800f186 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800f0ee:	68bb      	ldr	r3, [r7, #8]
 800f0f0:	69db      	ldr	r3, [r3, #28]
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d009      	beq.n	800f10a <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800f0f6:	69bb      	ldr	r3, [r7, #24]
 800f0f8:	015a      	lsls	r2, r3, #5
 800f0fa:	69fb      	ldr	r3, [r7, #28]
 800f0fc:	4413      	add	r3, r2
 800f0fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f102:	461a      	mov	r2, r3
 800f104:	68bb      	ldr	r3, [r7, #8]
 800f106:	69db      	ldr	r3, [r3, #28]
 800f108:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800f10a:	68bb      	ldr	r3, [r7, #8]
 800f10c:	791b      	ldrb	r3, [r3, #4]
 800f10e:	2b01      	cmp	r3, #1
 800f110:	d128      	bne.n	800f164 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f112:	69fb      	ldr	r3, [r7, #28]
 800f114:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f118:	689b      	ldr	r3, [r3, #8]
 800f11a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d110      	bne.n	800f144 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800f122:	69bb      	ldr	r3, [r7, #24]
 800f124:	015a      	lsls	r2, r3, #5
 800f126:	69fb      	ldr	r3, [r7, #28]
 800f128:	4413      	add	r3, r2
 800f12a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	69ba      	ldr	r2, [r7, #24]
 800f132:	0151      	lsls	r1, r2, #5
 800f134:	69fa      	ldr	r2, [r7, #28]
 800f136:	440a      	add	r2, r1
 800f138:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f13c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800f140:	6013      	str	r3, [r2, #0]
 800f142:	e00f      	b.n	800f164 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800f144:	69bb      	ldr	r3, [r7, #24]
 800f146:	015a      	lsls	r2, r3, #5
 800f148:	69fb      	ldr	r3, [r7, #28]
 800f14a:	4413      	add	r3, r2
 800f14c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	69ba      	ldr	r2, [r7, #24]
 800f154:	0151      	lsls	r1, r2, #5
 800f156:	69fa      	ldr	r2, [r7, #28]
 800f158:	440a      	add	r2, r1
 800f15a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f15e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f162:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f164:	69bb      	ldr	r3, [r7, #24]
 800f166:	015a      	lsls	r2, r3, #5
 800f168:	69fb      	ldr	r3, [r7, #28]
 800f16a:	4413      	add	r3, r2
 800f16c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	69ba      	ldr	r2, [r7, #24]
 800f174:	0151      	lsls	r1, r2, #5
 800f176:	69fa      	ldr	r2, [r7, #28]
 800f178:	440a      	add	r2, r1
 800f17a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f17e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800f182:	6013      	str	r3, [r2, #0]
 800f184:	e166      	b.n	800f454 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f186:	69bb      	ldr	r3, [r7, #24]
 800f188:	015a      	lsls	r2, r3, #5
 800f18a:	69fb      	ldr	r3, [r7, #28]
 800f18c:	4413      	add	r3, r2
 800f18e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	69ba      	ldr	r2, [r7, #24]
 800f196:	0151      	lsls	r1, r2, #5
 800f198:	69fa      	ldr	r2, [r7, #28]
 800f19a:	440a      	add	r2, r1
 800f19c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f1a0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800f1a4:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800f1a6:	68bb      	ldr	r3, [r7, #8]
 800f1a8:	791b      	ldrb	r3, [r3, #4]
 800f1aa:	2b01      	cmp	r3, #1
 800f1ac:	d015      	beq.n	800f1da <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800f1ae:	68bb      	ldr	r3, [r7, #8]
 800f1b0:	691b      	ldr	r3, [r3, #16]
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	f000 814e 	beq.w	800f454 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800f1b8:	69fb      	ldr	r3, [r7, #28]
 800f1ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f1be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f1c0:	68bb      	ldr	r3, [r7, #8]
 800f1c2:	781b      	ldrb	r3, [r3, #0]
 800f1c4:	f003 030f 	and.w	r3, r3, #15
 800f1c8:	2101      	movs	r1, #1
 800f1ca:	fa01 f303 	lsl.w	r3, r1, r3
 800f1ce:	69f9      	ldr	r1, [r7, #28]
 800f1d0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800f1d4:	4313      	orrs	r3, r2
 800f1d6:	634b      	str	r3, [r1, #52]	@ 0x34
 800f1d8:	e13c      	b.n	800f454 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f1da:	69fb      	ldr	r3, [r7, #28]
 800f1dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f1e0:	689b      	ldr	r3, [r3, #8]
 800f1e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d110      	bne.n	800f20c <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800f1ea:	69bb      	ldr	r3, [r7, #24]
 800f1ec:	015a      	lsls	r2, r3, #5
 800f1ee:	69fb      	ldr	r3, [r7, #28]
 800f1f0:	4413      	add	r3, r2
 800f1f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	69ba      	ldr	r2, [r7, #24]
 800f1fa:	0151      	lsls	r1, r2, #5
 800f1fc:	69fa      	ldr	r2, [r7, #28]
 800f1fe:	440a      	add	r2, r1
 800f200:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f204:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800f208:	6013      	str	r3, [r2, #0]
 800f20a:	e00f      	b.n	800f22c <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800f20c:	69bb      	ldr	r3, [r7, #24]
 800f20e:	015a      	lsls	r2, r3, #5
 800f210:	69fb      	ldr	r3, [r7, #28]
 800f212:	4413      	add	r3, r2
 800f214:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	69ba      	ldr	r2, [r7, #24]
 800f21c:	0151      	lsls	r1, r2, #5
 800f21e:	69fa      	ldr	r2, [r7, #28]
 800f220:	440a      	add	r2, r1
 800f222:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f226:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f22a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800f22c:	68bb      	ldr	r3, [r7, #8]
 800f22e:	68d9      	ldr	r1, [r3, #12]
 800f230:	68bb      	ldr	r3, [r7, #8]
 800f232:	781a      	ldrb	r2, [r3, #0]
 800f234:	68bb      	ldr	r3, [r7, #8]
 800f236:	691b      	ldr	r3, [r3, #16]
 800f238:	b298      	uxth	r0, r3
 800f23a:	79fb      	ldrb	r3, [r7, #7]
 800f23c:	9300      	str	r3, [sp, #0]
 800f23e:	4603      	mov	r3, r0
 800f240:	68f8      	ldr	r0, [r7, #12]
 800f242:	f000 f9b9 	bl	800f5b8 <USB_WritePacket>
 800f246:	e105      	b.n	800f454 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800f248:	69bb      	ldr	r3, [r7, #24]
 800f24a:	015a      	lsls	r2, r3, #5
 800f24c:	69fb      	ldr	r3, [r7, #28]
 800f24e:	4413      	add	r3, r2
 800f250:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f254:	691b      	ldr	r3, [r3, #16]
 800f256:	69ba      	ldr	r2, [r7, #24]
 800f258:	0151      	lsls	r1, r2, #5
 800f25a:	69fa      	ldr	r2, [r7, #28]
 800f25c:	440a      	add	r2, r1
 800f25e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f262:	0cdb      	lsrs	r3, r3, #19
 800f264:	04db      	lsls	r3, r3, #19
 800f266:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800f268:	69bb      	ldr	r3, [r7, #24]
 800f26a:	015a      	lsls	r2, r3, #5
 800f26c:	69fb      	ldr	r3, [r7, #28]
 800f26e:	4413      	add	r3, r2
 800f270:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f274:	691b      	ldr	r3, [r3, #16]
 800f276:	69ba      	ldr	r2, [r7, #24]
 800f278:	0151      	lsls	r1, r2, #5
 800f27a:	69fa      	ldr	r2, [r7, #28]
 800f27c:	440a      	add	r2, r1
 800f27e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f282:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800f286:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800f28a:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800f28c:	69bb      	ldr	r3, [r7, #24]
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d132      	bne.n	800f2f8 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800f292:	68bb      	ldr	r3, [r7, #8]
 800f294:	691b      	ldr	r3, [r3, #16]
 800f296:	2b00      	cmp	r3, #0
 800f298:	d003      	beq.n	800f2a2 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800f29a:	68bb      	ldr	r3, [r7, #8]
 800f29c:	689a      	ldr	r2, [r3, #8]
 800f29e:	68bb      	ldr	r3, [r7, #8]
 800f2a0:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800f2a2:	68bb      	ldr	r3, [r7, #8]
 800f2a4:	689a      	ldr	r2, [r3, #8]
 800f2a6:	68bb      	ldr	r3, [r7, #8]
 800f2a8:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800f2aa:	69bb      	ldr	r3, [r7, #24]
 800f2ac:	015a      	lsls	r2, r3, #5
 800f2ae:	69fb      	ldr	r3, [r7, #28]
 800f2b0:	4413      	add	r3, r2
 800f2b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f2b6:	691a      	ldr	r2, [r3, #16]
 800f2b8:	68bb      	ldr	r3, [r7, #8]
 800f2ba:	6a1b      	ldr	r3, [r3, #32]
 800f2bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f2c0:	69b9      	ldr	r1, [r7, #24]
 800f2c2:	0148      	lsls	r0, r1, #5
 800f2c4:	69f9      	ldr	r1, [r7, #28]
 800f2c6:	4401      	add	r1, r0
 800f2c8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800f2cc:	4313      	orrs	r3, r2
 800f2ce:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f2d0:	69bb      	ldr	r3, [r7, #24]
 800f2d2:	015a      	lsls	r2, r3, #5
 800f2d4:	69fb      	ldr	r3, [r7, #28]
 800f2d6:	4413      	add	r3, r2
 800f2d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f2dc:	691b      	ldr	r3, [r3, #16]
 800f2de:	69ba      	ldr	r2, [r7, #24]
 800f2e0:	0151      	lsls	r1, r2, #5
 800f2e2:	69fa      	ldr	r2, [r7, #28]
 800f2e4:	440a      	add	r2, r1
 800f2e6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f2ea:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800f2ee:	6113      	str	r3, [r2, #16]
 800f2f0:	e062      	b.n	800f3b8 <USB_EPStartXfer+0x490>
 800f2f2:	bf00      	nop
 800f2f4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800f2f8:	68bb      	ldr	r3, [r7, #8]
 800f2fa:	691b      	ldr	r3, [r3, #16]
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d123      	bne.n	800f348 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800f300:	69bb      	ldr	r3, [r7, #24]
 800f302:	015a      	lsls	r2, r3, #5
 800f304:	69fb      	ldr	r3, [r7, #28]
 800f306:	4413      	add	r3, r2
 800f308:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f30c:	691a      	ldr	r2, [r3, #16]
 800f30e:	68bb      	ldr	r3, [r7, #8]
 800f310:	689b      	ldr	r3, [r3, #8]
 800f312:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f316:	69b9      	ldr	r1, [r7, #24]
 800f318:	0148      	lsls	r0, r1, #5
 800f31a:	69f9      	ldr	r1, [r7, #28]
 800f31c:	4401      	add	r1, r0
 800f31e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800f322:	4313      	orrs	r3, r2
 800f324:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f326:	69bb      	ldr	r3, [r7, #24]
 800f328:	015a      	lsls	r2, r3, #5
 800f32a:	69fb      	ldr	r3, [r7, #28]
 800f32c:	4413      	add	r3, r2
 800f32e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f332:	691b      	ldr	r3, [r3, #16]
 800f334:	69ba      	ldr	r2, [r7, #24]
 800f336:	0151      	lsls	r1, r2, #5
 800f338:	69fa      	ldr	r2, [r7, #28]
 800f33a:	440a      	add	r2, r1
 800f33c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f340:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800f344:	6113      	str	r3, [r2, #16]
 800f346:	e037      	b.n	800f3b8 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800f348:	68bb      	ldr	r3, [r7, #8]
 800f34a:	691a      	ldr	r2, [r3, #16]
 800f34c:	68bb      	ldr	r3, [r7, #8]
 800f34e:	689b      	ldr	r3, [r3, #8]
 800f350:	4413      	add	r3, r2
 800f352:	1e5a      	subs	r2, r3, #1
 800f354:	68bb      	ldr	r3, [r7, #8]
 800f356:	689b      	ldr	r3, [r3, #8]
 800f358:	fbb2 f3f3 	udiv	r3, r2, r3
 800f35c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800f35e:	68bb      	ldr	r3, [r7, #8]
 800f360:	689b      	ldr	r3, [r3, #8]
 800f362:	8afa      	ldrh	r2, [r7, #22]
 800f364:	fb03 f202 	mul.w	r2, r3, r2
 800f368:	68bb      	ldr	r3, [r7, #8]
 800f36a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800f36c:	69bb      	ldr	r3, [r7, #24]
 800f36e:	015a      	lsls	r2, r3, #5
 800f370:	69fb      	ldr	r3, [r7, #28]
 800f372:	4413      	add	r3, r2
 800f374:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f378:	691a      	ldr	r2, [r3, #16]
 800f37a:	8afb      	ldrh	r3, [r7, #22]
 800f37c:	04d9      	lsls	r1, r3, #19
 800f37e:	4b38      	ldr	r3, [pc, #224]	@ (800f460 <USB_EPStartXfer+0x538>)
 800f380:	400b      	ands	r3, r1
 800f382:	69b9      	ldr	r1, [r7, #24]
 800f384:	0148      	lsls	r0, r1, #5
 800f386:	69f9      	ldr	r1, [r7, #28]
 800f388:	4401      	add	r1, r0
 800f38a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800f38e:	4313      	orrs	r3, r2
 800f390:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800f392:	69bb      	ldr	r3, [r7, #24]
 800f394:	015a      	lsls	r2, r3, #5
 800f396:	69fb      	ldr	r3, [r7, #28]
 800f398:	4413      	add	r3, r2
 800f39a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f39e:	691a      	ldr	r2, [r3, #16]
 800f3a0:	68bb      	ldr	r3, [r7, #8]
 800f3a2:	6a1b      	ldr	r3, [r3, #32]
 800f3a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f3a8:	69b9      	ldr	r1, [r7, #24]
 800f3aa:	0148      	lsls	r0, r1, #5
 800f3ac:	69f9      	ldr	r1, [r7, #28]
 800f3ae:	4401      	add	r1, r0
 800f3b0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800f3b4:	4313      	orrs	r3, r2
 800f3b6:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800f3b8:	79fb      	ldrb	r3, [r7, #7]
 800f3ba:	2b01      	cmp	r3, #1
 800f3bc:	d10d      	bne.n	800f3da <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800f3be:	68bb      	ldr	r3, [r7, #8]
 800f3c0:	68db      	ldr	r3, [r3, #12]
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d009      	beq.n	800f3da <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800f3c6:	68bb      	ldr	r3, [r7, #8]
 800f3c8:	68d9      	ldr	r1, [r3, #12]
 800f3ca:	69bb      	ldr	r3, [r7, #24]
 800f3cc:	015a      	lsls	r2, r3, #5
 800f3ce:	69fb      	ldr	r3, [r7, #28]
 800f3d0:	4413      	add	r3, r2
 800f3d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f3d6:	460a      	mov	r2, r1
 800f3d8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800f3da:	68bb      	ldr	r3, [r7, #8]
 800f3dc:	791b      	ldrb	r3, [r3, #4]
 800f3de:	2b01      	cmp	r3, #1
 800f3e0:	d128      	bne.n	800f434 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f3e2:	69fb      	ldr	r3, [r7, #28]
 800f3e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f3e8:	689b      	ldr	r3, [r3, #8]
 800f3ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d110      	bne.n	800f414 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800f3f2:	69bb      	ldr	r3, [r7, #24]
 800f3f4:	015a      	lsls	r2, r3, #5
 800f3f6:	69fb      	ldr	r3, [r7, #28]
 800f3f8:	4413      	add	r3, r2
 800f3fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	69ba      	ldr	r2, [r7, #24]
 800f402:	0151      	lsls	r1, r2, #5
 800f404:	69fa      	ldr	r2, [r7, #28]
 800f406:	440a      	add	r2, r1
 800f408:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f40c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800f410:	6013      	str	r3, [r2, #0]
 800f412:	e00f      	b.n	800f434 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800f414:	69bb      	ldr	r3, [r7, #24]
 800f416:	015a      	lsls	r2, r3, #5
 800f418:	69fb      	ldr	r3, [r7, #28]
 800f41a:	4413      	add	r3, r2
 800f41c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	69ba      	ldr	r2, [r7, #24]
 800f424:	0151      	lsls	r1, r2, #5
 800f426:	69fa      	ldr	r2, [r7, #28]
 800f428:	440a      	add	r2, r1
 800f42a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f42e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f432:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800f434:	69bb      	ldr	r3, [r7, #24]
 800f436:	015a      	lsls	r2, r3, #5
 800f438:	69fb      	ldr	r3, [r7, #28]
 800f43a:	4413      	add	r3, r2
 800f43c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	69ba      	ldr	r2, [r7, #24]
 800f444:	0151      	lsls	r1, r2, #5
 800f446:	69fa      	ldr	r2, [r7, #28]
 800f448:	440a      	add	r2, r1
 800f44a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f44e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800f452:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f454:	2300      	movs	r3, #0
}
 800f456:	4618      	mov	r0, r3
 800f458:	3720      	adds	r7, #32
 800f45a:	46bd      	mov	sp, r7
 800f45c:	bd80      	pop	{r7, pc}
 800f45e:	bf00      	nop
 800f460:	1ff80000 	.word	0x1ff80000

0800f464 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f464:	b480      	push	{r7}
 800f466:	b087      	sub	sp, #28
 800f468:	af00      	add	r7, sp, #0
 800f46a:	6078      	str	r0, [r7, #4]
 800f46c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800f46e:	2300      	movs	r3, #0
 800f470:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800f472:	2300      	movs	r3, #0
 800f474:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f47a:	683b      	ldr	r3, [r7, #0]
 800f47c:	785b      	ldrb	r3, [r3, #1]
 800f47e:	2b01      	cmp	r3, #1
 800f480:	d14a      	bne.n	800f518 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f482:	683b      	ldr	r3, [r7, #0]
 800f484:	781b      	ldrb	r3, [r3, #0]
 800f486:	015a      	lsls	r2, r3, #5
 800f488:	693b      	ldr	r3, [r7, #16]
 800f48a:	4413      	add	r3, r2
 800f48c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f496:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f49a:	f040 8086 	bne.w	800f5aa <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800f49e:	683b      	ldr	r3, [r7, #0]
 800f4a0:	781b      	ldrb	r3, [r3, #0]
 800f4a2:	015a      	lsls	r2, r3, #5
 800f4a4:	693b      	ldr	r3, [r7, #16]
 800f4a6:	4413      	add	r3, r2
 800f4a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f4ac:	681b      	ldr	r3, [r3, #0]
 800f4ae:	683a      	ldr	r2, [r7, #0]
 800f4b0:	7812      	ldrb	r2, [r2, #0]
 800f4b2:	0151      	lsls	r1, r2, #5
 800f4b4:	693a      	ldr	r2, [r7, #16]
 800f4b6:	440a      	add	r2, r1
 800f4b8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f4bc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800f4c0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800f4c2:	683b      	ldr	r3, [r7, #0]
 800f4c4:	781b      	ldrb	r3, [r3, #0]
 800f4c6:	015a      	lsls	r2, r3, #5
 800f4c8:	693b      	ldr	r3, [r7, #16]
 800f4ca:	4413      	add	r3, r2
 800f4cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f4d0:	681b      	ldr	r3, [r3, #0]
 800f4d2:	683a      	ldr	r2, [r7, #0]
 800f4d4:	7812      	ldrb	r2, [r2, #0]
 800f4d6:	0151      	lsls	r1, r2, #5
 800f4d8:	693a      	ldr	r2, [r7, #16]
 800f4da:	440a      	add	r2, r1
 800f4dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f4e0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f4e4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	3301      	adds	r3, #1
 800f4ea:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800f4ec:	68fb      	ldr	r3, [r7, #12]
 800f4ee:	f242 7210 	movw	r2, #10000	@ 0x2710
 800f4f2:	4293      	cmp	r3, r2
 800f4f4:	d902      	bls.n	800f4fc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800f4f6:	2301      	movs	r3, #1
 800f4f8:	75fb      	strb	r3, [r7, #23]
          break;
 800f4fa:	e056      	b.n	800f5aa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800f4fc:	683b      	ldr	r3, [r7, #0]
 800f4fe:	781b      	ldrb	r3, [r3, #0]
 800f500:	015a      	lsls	r2, r3, #5
 800f502:	693b      	ldr	r3, [r7, #16]
 800f504:	4413      	add	r3, r2
 800f506:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f50a:	681b      	ldr	r3, [r3, #0]
 800f50c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f510:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f514:	d0e7      	beq.n	800f4e6 <USB_EPStopXfer+0x82>
 800f516:	e048      	b.n	800f5aa <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f518:	683b      	ldr	r3, [r7, #0]
 800f51a:	781b      	ldrb	r3, [r3, #0]
 800f51c:	015a      	lsls	r2, r3, #5
 800f51e:	693b      	ldr	r3, [r7, #16]
 800f520:	4413      	add	r3, r2
 800f522:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f526:	681b      	ldr	r3, [r3, #0]
 800f528:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f52c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f530:	d13b      	bne.n	800f5aa <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800f532:	683b      	ldr	r3, [r7, #0]
 800f534:	781b      	ldrb	r3, [r3, #0]
 800f536:	015a      	lsls	r2, r3, #5
 800f538:	693b      	ldr	r3, [r7, #16]
 800f53a:	4413      	add	r3, r2
 800f53c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f540:	681b      	ldr	r3, [r3, #0]
 800f542:	683a      	ldr	r2, [r7, #0]
 800f544:	7812      	ldrb	r2, [r2, #0]
 800f546:	0151      	lsls	r1, r2, #5
 800f548:	693a      	ldr	r2, [r7, #16]
 800f54a:	440a      	add	r2, r1
 800f54c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f550:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800f554:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800f556:	683b      	ldr	r3, [r7, #0]
 800f558:	781b      	ldrb	r3, [r3, #0]
 800f55a:	015a      	lsls	r2, r3, #5
 800f55c:	693b      	ldr	r3, [r7, #16]
 800f55e:	4413      	add	r3, r2
 800f560:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	683a      	ldr	r2, [r7, #0]
 800f568:	7812      	ldrb	r2, [r2, #0]
 800f56a:	0151      	lsls	r1, r2, #5
 800f56c:	693a      	ldr	r2, [r7, #16]
 800f56e:	440a      	add	r2, r1
 800f570:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f574:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f578:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	3301      	adds	r3, #1
 800f57e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	f242 7210 	movw	r2, #10000	@ 0x2710
 800f586:	4293      	cmp	r3, r2
 800f588:	d902      	bls.n	800f590 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800f58a:	2301      	movs	r3, #1
 800f58c:	75fb      	strb	r3, [r7, #23]
          break;
 800f58e:	e00c      	b.n	800f5aa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800f590:	683b      	ldr	r3, [r7, #0]
 800f592:	781b      	ldrb	r3, [r3, #0]
 800f594:	015a      	lsls	r2, r3, #5
 800f596:	693b      	ldr	r3, [r7, #16]
 800f598:	4413      	add	r3, r2
 800f59a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f59e:	681b      	ldr	r3, [r3, #0]
 800f5a0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f5a4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f5a8:	d0e7      	beq.n	800f57a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800f5aa:	7dfb      	ldrb	r3, [r7, #23]
}
 800f5ac:	4618      	mov	r0, r3
 800f5ae:	371c      	adds	r7, #28
 800f5b0:	46bd      	mov	sp, r7
 800f5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5b6:	4770      	bx	lr

0800f5b8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800f5b8:	b480      	push	{r7}
 800f5ba:	b089      	sub	sp, #36	@ 0x24
 800f5bc:	af00      	add	r7, sp, #0
 800f5be:	60f8      	str	r0, [r7, #12]
 800f5c0:	60b9      	str	r1, [r7, #8]
 800f5c2:	4611      	mov	r1, r2
 800f5c4:	461a      	mov	r2, r3
 800f5c6:	460b      	mov	r3, r1
 800f5c8:	71fb      	strb	r3, [r7, #7]
 800f5ca:	4613      	mov	r3, r2
 800f5cc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f5ce:	68fb      	ldr	r3, [r7, #12]
 800f5d0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800f5d2:	68bb      	ldr	r3, [r7, #8]
 800f5d4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800f5d6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d123      	bne.n	800f626 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800f5de:	88bb      	ldrh	r3, [r7, #4]
 800f5e0:	3303      	adds	r3, #3
 800f5e2:	089b      	lsrs	r3, r3, #2
 800f5e4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800f5e6:	2300      	movs	r3, #0
 800f5e8:	61bb      	str	r3, [r7, #24]
 800f5ea:	e018      	b.n	800f61e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800f5ec:	79fb      	ldrb	r3, [r7, #7]
 800f5ee:	031a      	lsls	r2, r3, #12
 800f5f0:	697b      	ldr	r3, [r7, #20]
 800f5f2:	4413      	add	r3, r2
 800f5f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800f5f8:	461a      	mov	r2, r3
 800f5fa:	69fb      	ldr	r3, [r7, #28]
 800f5fc:	681b      	ldr	r3, [r3, #0]
 800f5fe:	6013      	str	r3, [r2, #0]
      pSrc++;
 800f600:	69fb      	ldr	r3, [r7, #28]
 800f602:	3301      	adds	r3, #1
 800f604:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800f606:	69fb      	ldr	r3, [r7, #28]
 800f608:	3301      	adds	r3, #1
 800f60a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800f60c:	69fb      	ldr	r3, [r7, #28]
 800f60e:	3301      	adds	r3, #1
 800f610:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800f612:	69fb      	ldr	r3, [r7, #28]
 800f614:	3301      	adds	r3, #1
 800f616:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800f618:	69bb      	ldr	r3, [r7, #24]
 800f61a:	3301      	adds	r3, #1
 800f61c:	61bb      	str	r3, [r7, #24]
 800f61e:	69ba      	ldr	r2, [r7, #24]
 800f620:	693b      	ldr	r3, [r7, #16]
 800f622:	429a      	cmp	r2, r3
 800f624:	d3e2      	bcc.n	800f5ec <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800f626:	2300      	movs	r3, #0
}
 800f628:	4618      	mov	r0, r3
 800f62a:	3724      	adds	r7, #36	@ 0x24
 800f62c:	46bd      	mov	sp, r7
 800f62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f632:	4770      	bx	lr

0800f634 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800f634:	b480      	push	{r7}
 800f636:	b08b      	sub	sp, #44	@ 0x2c
 800f638:	af00      	add	r7, sp, #0
 800f63a:	60f8      	str	r0, [r7, #12]
 800f63c:	60b9      	str	r1, [r7, #8]
 800f63e:	4613      	mov	r3, r2
 800f640:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f642:	68fb      	ldr	r3, [r7, #12]
 800f644:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800f646:	68bb      	ldr	r3, [r7, #8]
 800f648:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800f64a:	88fb      	ldrh	r3, [r7, #6]
 800f64c:	089b      	lsrs	r3, r3, #2
 800f64e:	b29b      	uxth	r3, r3
 800f650:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800f652:	88fb      	ldrh	r3, [r7, #6]
 800f654:	f003 0303 	and.w	r3, r3, #3
 800f658:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800f65a:	2300      	movs	r3, #0
 800f65c:	623b      	str	r3, [r7, #32]
 800f65e:	e014      	b.n	800f68a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800f660:	69bb      	ldr	r3, [r7, #24]
 800f662:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800f666:	681a      	ldr	r2, [r3, #0]
 800f668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f66a:	601a      	str	r2, [r3, #0]
    pDest++;
 800f66c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f66e:	3301      	adds	r3, #1
 800f670:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800f672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f674:	3301      	adds	r3, #1
 800f676:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800f678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f67a:	3301      	adds	r3, #1
 800f67c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800f67e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f680:	3301      	adds	r3, #1
 800f682:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800f684:	6a3b      	ldr	r3, [r7, #32]
 800f686:	3301      	adds	r3, #1
 800f688:	623b      	str	r3, [r7, #32]
 800f68a:	6a3a      	ldr	r2, [r7, #32]
 800f68c:	697b      	ldr	r3, [r7, #20]
 800f68e:	429a      	cmp	r2, r3
 800f690:	d3e6      	bcc.n	800f660 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800f692:	8bfb      	ldrh	r3, [r7, #30]
 800f694:	2b00      	cmp	r3, #0
 800f696:	d01e      	beq.n	800f6d6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800f698:	2300      	movs	r3, #0
 800f69a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800f69c:	69bb      	ldr	r3, [r7, #24]
 800f69e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800f6a2:	461a      	mov	r2, r3
 800f6a4:	f107 0310 	add.w	r3, r7, #16
 800f6a8:	6812      	ldr	r2, [r2, #0]
 800f6aa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800f6ac:	693a      	ldr	r2, [r7, #16]
 800f6ae:	6a3b      	ldr	r3, [r7, #32]
 800f6b0:	b2db      	uxtb	r3, r3
 800f6b2:	00db      	lsls	r3, r3, #3
 800f6b4:	fa22 f303 	lsr.w	r3, r2, r3
 800f6b8:	b2da      	uxtb	r2, r3
 800f6ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6bc:	701a      	strb	r2, [r3, #0]
      i++;
 800f6be:	6a3b      	ldr	r3, [r7, #32]
 800f6c0:	3301      	adds	r3, #1
 800f6c2:	623b      	str	r3, [r7, #32]
      pDest++;
 800f6c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6c6:	3301      	adds	r3, #1
 800f6c8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800f6ca:	8bfb      	ldrh	r3, [r7, #30]
 800f6cc:	3b01      	subs	r3, #1
 800f6ce:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800f6d0:	8bfb      	ldrh	r3, [r7, #30]
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d1ea      	bne.n	800f6ac <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800f6d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800f6d8:	4618      	mov	r0, r3
 800f6da:	372c      	adds	r7, #44	@ 0x2c
 800f6dc:	46bd      	mov	sp, r7
 800f6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6e2:	4770      	bx	lr

0800f6e4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800f6e4:	b480      	push	{r7}
 800f6e6:	b085      	sub	sp, #20
 800f6e8:	af00      	add	r7, sp, #0
 800f6ea:	6078      	str	r0, [r7, #4]
 800f6ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f6f2:	683b      	ldr	r3, [r7, #0]
 800f6f4:	781b      	ldrb	r3, [r3, #0]
 800f6f6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f6f8:	683b      	ldr	r3, [r7, #0]
 800f6fa:	785b      	ldrb	r3, [r3, #1]
 800f6fc:	2b01      	cmp	r3, #1
 800f6fe:	d12c      	bne.n	800f75a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800f700:	68bb      	ldr	r3, [r7, #8]
 800f702:	015a      	lsls	r2, r3, #5
 800f704:	68fb      	ldr	r3, [r7, #12]
 800f706:	4413      	add	r3, r2
 800f708:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f70c:	681b      	ldr	r3, [r3, #0]
 800f70e:	2b00      	cmp	r3, #0
 800f710:	db12      	blt.n	800f738 <USB_EPSetStall+0x54>
 800f712:	68bb      	ldr	r3, [r7, #8]
 800f714:	2b00      	cmp	r3, #0
 800f716:	d00f      	beq.n	800f738 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800f718:	68bb      	ldr	r3, [r7, #8]
 800f71a:	015a      	lsls	r2, r3, #5
 800f71c:	68fb      	ldr	r3, [r7, #12]
 800f71e:	4413      	add	r3, r2
 800f720:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	68ba      	ldr	r2, [r7, #8]
 800f728:	0151      	lsls	r1, r2, #5
 800f72a:	68fa      	ldr	r2, [r7, #12]
 800f72c:	440a      	add	r2, r1
 800f72e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f732:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800f736:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800f738:	68bb      	ldr	r3, [r7, #8]
 800f73a:	015a      	lsls	r2, r3, #5
 800f73c:	68fb      	ldr	r3, [r7, #12]
 800f73e:	4413      	add	r3, r2
 800f740:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f744:	681b      	ldr	r3, [r3, #0]
 800f746:	68ba      	ldr	r2, [r7, #8]
 800f748:	0151      	lsls	r1, r2, #5
 800f74a:	68fa      	ldr	r2, [r7, #12]
 800f74c:	440a      	add	r2, r1
 800f74e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f752:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800f756:	6013      	str	r3, [r2, #0]
 800f758:	e02b      	b.n	800f7b2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800f75a:	68bb      	ldr	r3, [r7, #8]
 800f75c:	015a      	lsls	r2, r3, #5
 800f75e:	68fb      	ldr	r3, [r7, #12]
 800f760:	4413      	add	r3, r2
 800f762:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f766:	681b      	ldr	r3, [r3, #0]
 800f768:	2b00      	cmp	r3, #0
 800f76a:	db12      	blt.n	800f792 <USB_EPSetStall+0xae>
 800f76c:	68bb      	ldr	r3, [r7, #8]
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d00f      	beq.n	800f792 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800f772:	68bb      	ldr	r3, [r7, #8]
 800f774:	015a      	lsls	r2, r3, #5
 800f776:	68fb      	ldr	r3, [r7, #12]
 800f778:	4413      	add	r3, r2
 800f77a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f77e:	681b      	ldr	r3, [r3, #0]
 800f780:	68ba      	ldr	r2, [r7, #8]
 800f782:	0151      	lsls	r1, r2, #5
 800f784:	68fa      	ldr	r2, [r7, #12]
 800f786:	440a      	add	r2, r1
 800f788:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f78c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800f790:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800f792:	68bb      	ldr	r3, [r7, #8]
 800f794:	015a      	lsls	r2, r3, #5
 800f796:	68fb      	ldr	r3, [r7, #12]
 800f798:	4413      	add	r3, r2
 800f79a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	68ba      	ldr	r2, [r7, #8]
 800f7a2:	0151      	lsls	r1, r2, #5
 800f7a4:	68fa      	ldr	r2, [r7, #12]
 800f7a6:	440a      	add	r2, r1
 800f7a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f7ac:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800f7b0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f7b2:	2300      	movs	r3, #0
}
 800f7b4:	4618      	mov	r0, r3
 800f7b6:	3714      	adds	r7, #20
 800f7b8:	46bd      	mov	sp, r7
 800f7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7be:	4770      	bx	lr

0800f7c0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800f7c0:	b480      	push	{r7}
 800f7c2:	b085      	sub	sp, #20
 800f7c4:	af00      	add	r7, sp, #0
 800f7c6:	6078      	str	r0, [r7, #4]
 800f7c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f7ce:	683b      	ldr	r3, [r7, #0]
 800f7d0:	781b      	ldrb	r3, [r3, #0]
 800f7d2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f7d4:	683b      	ldr	r3, [r7, #0]
 800f7d6:	785b      	ldrb	r3, [r3, #1]
 800f7d8:	2b01      	cmp	r3, #1
 800f7da:	d128      	bne.n	800f82e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800f7dc:	68bb      	ldr	r3, [r7, #8]
 800f7de:	015a      	lsls	r2, r3, #5
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	4413      	add	r3, r2
 800f7e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	68ba      	ldr	r2, [r7, #8]
 800f7ec:	0151      	lsls	r1, r2, #5
 800f7ee:	68fa      	ldr	r2, [r7, #12]
 800f7f0:	440a      	add	r2, r1
 800f7f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f7f6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800f7fa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f7fc:	683b      	ldr	r3, [r7, #0]
 800f7fe:	791b      	ldrb	r3, [r3, #4]
 800f800:	2b03      	cmp	r3, #3
 800f802:	d003      	beq.n	800f80c <USB_EPClearStall+0x4c>
 800f804:	683b      	ldr	r3, [r7, #0]
 800f806:	791b      	ldrb	r3, [r3, #4]
 800f808:	2b02      	cmp	r3, #2
 800f80a:	d138      	bne.n	800f87e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f80c:	68bb      	ldr	r3, [r7, #8]
 800f80e:	015a      	lsls	r2, r3, #5
 800f810:	68fb      	ldr	r3, [r7, #12]
 800f812:	4413      	add	r3, r2
 800f814:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	68ba      	ldr	r2, [r7, #8]
 800f81c:	0151      	lsls	r1, r2, #5
 800f81e:	68fa      	ldr	r2, [r7, #12]
 800f820:	440a      	add	r2, r1
 800f822:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f826:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f82a:	6013      	str	r3, [r2, #0]
 800f82c:	e027      	b.n	800f87e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800f82e:	68bb      	ldr	r3, [r7, #8]
 800f830:	015a      	lsls	r2, r3, #5
 800f832:	68fb      	ldr	r3, [r7, #12]
 800f834:	4413      	add	r3, r2
 800f836:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f83a:	681b      	ldr	r3, [r3, #0]
 800f83c:	68ba      	ldr	r2, [r7, #8]
 800f83e:	0151      	lsls	r1, r2, #5
 800f840:	68fa      	ldr	r2, [r7, #12]
 800f842:	440a      	add	r2, r1
 800f844:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f848:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800f84c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f84e:	683b      	ldr	r3, [r7, #0]
 800f850:	791b      	ldrb	r3, [r3, #4]
 800f852:	2b03      	cmp	r3, #3
 800f854:	d003      	beq.n	800f85e <USB_EPClearStall+0x9e>
 800f856:	683b      	ldr	r3, [r7, #0]
 800f858:	791b      	ldrb	r3, [r3, #4]
 800f85a:	2b02      	cmp	r3, #2
 800f85c:	d10f      	bne.n	800f87e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f85e:	68bb      	ldr	r3, [r7, #8]
 800f860:	015a      	lsls	r2, r3, #5
 800f862:	68fb      	ldr	r3, [r7, #12]
 800f864:	4413      	add	r3, r2
 800f866:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f86a:	681b      	ldr	r3, [r3, #0]
 800f86c:	68ba      	ldr	r2, [r7, #8]
 800f86e:	0151      	lsls	r1, r2, #5
 800f870:	68fa      	ldr	r2, [r7, #12]
 800f872:	440a      	add	r2, r1
 800f874:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f878:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f87c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800f87e:	2300      	movs	r3, #0
}
 800f880:	4618      	mov	r0, r3
 800f882:	3714      	adds	r7, #20
 800f884:	46bd      	mov	sp, r7
 800f886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f88a:	4770      	bx	lr

0800f88c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800f88c:	b480      	push	{r7}
 800f88e:	b085      	sub	sp, #20
 800f890:	af00      	add	r7, sp, #0
 800f892:	6078      	str	r0, [r7, #4]
 800f894:	460b      	mov	r3, r1
 800f896:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800f89c:	68fb      	ldr	r3, [r7, #12]
 800f89e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	68fa      	ldr	r2, [r7, #12]
 800f8a6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f8aa:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800f8ae:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800f8b0:	68fb      	ldr	r3, [r7, #12]
 800f8b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f8b6:	681a      	ldr	r2, [r3, #0]
 800f8b8:	78fb      	ldrb	r3, [r7, #3]
 800f8ba:	011b      	lsls	r3, r3, #4
 800f8bc:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800f8c0:	68f9      	ldr	r1, [r7, #12]
 800f8c2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800f8c6:	4313      	orrs	r3, r2
 800f8c8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800f8ca:	2300      	movs	r3, #0
}
 800f8cc:	4618      	mov	r0, r3
 800f8ce:	3714      	adds	r7, #20
 800f8d0:	46bd      	mov	sp, r7
 800f8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8d6:	4770      	bx	lr

0800f8d8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800f8d8:	b480      	push	{r7}
 800f8da:	b085      	sub	sp, #20
 800f8dc:	af00      	add	r7, sp, #0
 800f8de:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800f8e4:	68fb      	ldr	r3, [r7, #12]
 800f8e6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800f8ea:	681b      	ldr	r3, [r3, #0]
 800f8ec:	68fa      	ldr	r2, [r7, #12]
 800f8ee:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800f8f2:	f023 0303 	bic.w	r3, r3, #3
 800f8f6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800f8f8:	68fb      	ldr	r3, [r7, #12]
 800f8fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f8fe:	685b      	ldr	r3, [r3, #4]
 800f900:	68fa      	ldr	r2, [r7, #12]
 800f902:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f906:	f023 0302 	bic.w	r3, r3, #2
 800f90a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f90c:	2300      	movs	r3, #0
}
 800f90e:	4618      	mov	r0, r3
 800f910:	3714      	adds	r7, #20
 800f912:	46bd      	mov	sp, r7
 800f914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f918:	4770      	bx	lr

0800f91a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800f91a:	b480      	push	{r7}
 800f91c:	b085      	sub	sp, #20
 800f91e:	af00      	add	r7, sp, #0
 800f920:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800f926:	68fb      	ldr	r3, [r7, #12]
 800f928:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	68fa      	ldr	r2, [r7, #12]
 800f930:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800f934:	f023 0303 	bic.w	r3, r3, #3
 800f938:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f940:	685b      	ldr	r3, [r3, #4]
 800f942:	68fa      	ldr	r2, [r7, #12]
 800f944:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f948:	f043 0302 	orr.w	r3, r3, #2
 800f94c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f94e:	2300      	movs	r3, #0
}
 800f950:	4618      	mov	r0, r3
 800f952:	3714      	adds	r7, #20
 800f954:	46bd      	mov	sp, r7
 800f956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f95a:	4770      	bx	lr

0800f95c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800f95c:	b480      	push	{r7}
 800f95e:	b085      	sub	sp, #20
 800f960:	af00      	add	r7, sp, #0
 800f962:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	695b      	ldr	r3, [r3, #20]
 800f968:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	699b      	ldr	r3, [r3, #24]
 800f96e:	68fa      	ldr	r2, [r7, #12]
 800f970:	4013      	ands	r3, r2
 800f972:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800f974:	68fb      	ldr	r3, [r7, #12]
}
 800f976:	4618      	mov	r0, r3
 800f978:	3714      	adds	r7, #20
 800f97a:	46bd      	mov	sp, r7
 800f97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f980:	4770      	bx	lr

0800f982 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800f982:	b480      	push	{r7}
 800f984:	b085      	sub	sp, #20
 800f986:	af00      	add	r7, sp, #0
 800f988:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800f98e:	68fb      	ldr	r3, [r7, #12]
 800f990:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f994:	699b      	ldr	r3, [r3, #24]
 800f996:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f998:	68fb      	ldr	r3, [r7, #12]
 800f99a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f99e:	69db      	ldr	r3, [r3, #28]
 800f9a0:	68ba      	ldr	r2, [r7, #8]
 800f9a2:	4013      	ands	r3, r2
 800f9a4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800f9a6:	68bb      	ldr	r3, [r7, #8]
 800f9a8:	0c1b      	lsrs	r3, r3, #16
}
 800f9aa:	4618      	mov	r0, r3
 800f9ac:	3714      	adds	r7, #20
 800f9ae:	46bd      	mov	sp, r7
 800f9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9b4:	4770      	bx	lr

0800f9b6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800f9b6:	b480      	push	{r7}
 800f9b8:	b085      	sub	sp, #20
 800f9ba:	af00      	add	r7, sp, #0
 800f9bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800f9c2:	68fb      	ldr	r3, [r7, #12]
 800f9c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f9c8:	699b      	ldr	r3, [r3, #24]
 800f9ca:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f9cc:	68fb      	ldr	r3, [r7, #12]
 800f9ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f9d2:	69db      	ldr	r3, [r3, #28]
 800f9d4:	68ba      	ldr	r2, [r7, #8]
 800f9d6:	4013      	ands	r3, r2
 800f9d8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800f9da:	68bb      	ldr	r3, [r7, #8]
 800f9dc:	b29b      	uxth	r3, r3
}
 800f9de:	4618      	mov	r0, r3
 800f9e0:	3714      	adds	r7, #20
 800f9e2:	46bd      	mov	sp, r7
 800f9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9e8:	4770      	bx	lr

0800f9ea <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800f9ea:	b480      	push	{r7}
 800f9ec:	b085      	sub	sp, #20
 800f9ee:	af00      	add	r7, sp, #0
 800f9f0:	6078      	str	r0, [r7, #4]
 800f9f2:	460b      	mov	r3, r1
 800f9f4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800f9fa:	78fb      	ldrb	r3, [r7, #3]
 800f9fc:	015a      	lsls	r2, r3, #5
 800f9fe:	68fb      	ldr	r3, [r7, #12]
 800fa00:	4413      	add	r3, r2
 800fa02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fa06:	689b      	ldr	r3, [r3, #8]
 800fa08:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800fa0a:	68fb      	ldr	r3, [r7, #12]
 800fa0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fa10:	695b      	ldr	r3, [r3, #20]
 800fa12:	68ba      	ldr	r2, [r7, #8]
 800fa14:	4013      	ands	r3, r2
 800fa16:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800fa18:	68bb      	ldr	r3, [r7, #8]
}
 800fa1a:	4618      	mov	r0, r3
 800fa1c:	3714      	adds	r7, #20
 800fa1e:	46bd      	mov	sp, r7
 800fa20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa24:	4770      	bx	lr

0800fa26 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800fa26:	b480      	push	{r7}
 800fa28:	b087      	sub	sp, #28
 800fa2a:	af00      	add	r7, sp, #0
 800fa2c:	6078      	str	r0, [r7, #4]
 800fa2e:	460b      	mov	r3, r1
 800fa30:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800fa36:	697b      	ldr	r3, [r7, #20]
 800fa38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fa3c:	691b      	ldr	r3, [r3, #16]
 800fa3e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800fa40:	697b      	ldr	r3, [r7, #20]
 800fa42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fa46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fa48:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800fa4a:	78fb      	ldrb	r3, [r7, #3]
 800fa4c:	f003 030f 	and.w	r3, r3, #15
 800fa50:	68fa      	ldr	r2, [r7, #12]
 800fa52:	fa22 f303 	lsr.w	r3, r2, r3
 800fa56:	01db      	lsls	r3, r3, #7
 800fa58:	b2db      	uxtb	r3, r3
 800fa5a:	693a      	ldr	r2, [r7, #16]
 800fa5c:	4313      	orrs	r3, r2
 800fa5e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800fa60:	78fb      	ldrb	r3, [r7, #3]
 800fa62:	015a      	lsls	r2, r3, #5
 800fa64:	697b      	ldr	r3, [r7, #20]
 800fa66:	4413      	add	r3, r2
 800fa68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fa6c:	689b      	ldr	r3, [r3, #8]
 800fa6e:	693a      	ldr	r2, [r7, #16]
 800fa70:	4013      	ands	r3, r2
 800fa72:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800fa74:	68bb      	ldr	r3, [r7, #8]
}
 800fa76:	4618      	mov	r0, r3
 800fa78:	371c      	adds	r7, #28
 800fa7a:	46bd      	mov	sp, r7
 800fa7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa80:	4770      	bx	lr

0800fa82 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800fa82:	b480      	push	{r7}
 800fa84:	b083      	sub	sp, #12
 800fa86:	af00      	add	r7, sp, #0
 800fa88:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	695b      	ldr	r3, [r3, #20]
 800fa8e:	f003 0301 	and.w	r3, r3, #1
}
 800fa92:	4618      	mov	r0, r3
 800fa94:	370c      	adds	r7, #12
 800fa96:	46bd      	mov	sp, r7
 800fa98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa9c:	4770      	bx	lr

0800fa9e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800fa9e:	b480      	push	{r7}
 800faa0:	b085      	sub	sp, #20
 800faa2:	af00      	add	r7, sp, #0
 800faa4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800faaa:	68fb      	ldr	r3, [r7, #12]
 800faac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fab0:	681b      	ldr	r3, [r3, #0]
 800fab2:	68fa      	ldr	r2, [r7, #12]
 800fab4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800fab8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800fabc:	f023 0307 	bic.w	r3, r3, #7
 800fac0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800fac2:	68fb      	ldr	r3, [r7, #12]
 800fac4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fac8:	685b      	ldr	r3, [r3, #4]
 800faca:	68fa      	ldr	r2, [r7, #12]
 800facc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800fad0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800fad4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800fad6:	2300      	movs	r3, #0
}
 800fad8:	4618      	mov	r0, r3
 800fada:	3714      	adds	r7, #20
 800fadc:	46bd      	mov	sp, r7
 800fade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fae2:	4770      	bx	lr

0800fae4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800fae4:	b480      	push	{r7}
 800fae6:	b087      	sub	sp, #28
 800fae8:	af00      	add	r7, sp, #0
 800faea:	60f8      	str	r0, [r7, #12]
 800faec:	460b      	mov	r3, r1
 800faee:	607a      	str	r2, [r7, #4]
 800faf0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800faf2:	68fb      	ldr	r3, [r7, #12]
 800faf4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800faf6:	68fb      	ldr	r3, [r7, #12]
 800faf8:	333c      	adds	r3, #60	@ 0x3c
 800fafa:	3304      	adds	r3, #4
 800fafc:	681b      	ldr	r3, [r3, #0]
 800fafe:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800fb00:	693b      	ldr	r3, [r7, #16]
 800fb02:	4a26      	ldr	r2, [pc, #152]	@ (800fb9c <USB_EP0_OutStart+0xb8>)
 800fb04:	4293      	cmp	r3, r2
 800fb06:	d90a      	bls.n	800fb1e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800fb08:	697b      	ldr	r3, [r7, #20]
 800fb0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fb0e:	681b      	ldr	r3, [r3, #0]
 800fb10:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800fb14:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800fb18:	d101      	bne.n	800fb1e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800fb1a:	2300      	movs	r3, #0
 800fb1c:	e037      	b.n	800fb8e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800fb1e:	697b      	ldr	r3, [r7, #20]
 800fb20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fb24:	461a      	mov	r2, r3
 800fb26:	2300      	movs	r3, #0
 800fb28:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800fb2a:	697b      	ldr	r3, [r7, #20]
 800fb2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fb30:	691b      	ldr	r3, [r3, #16]
 800fb32:	697a      	ldr	r2, [r7, #20]
 800fb34:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800fb38:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800fb3c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800fb3e:	697b      	ldr	r3, [r7, #20]
 800fb40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fb44:	691b      	ldr	r3, [r3, #16]
 800fb46:	697a      	ldr	r2, [r7, #20]
 800fb48:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800fb4c:	f043 0318 	orr.w	r3, r3, #24
 800fb50:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800fb52:	697b      	ldr	r3, [r7, #20]
 800fb54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fb58:	691b      	ldr	r3, [r3, #16]
 800fb5a:	697a      	ldr	r2, [r7, #20]
 800fb5c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800fb60:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800fb64:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800fb66:	7afb      	ldrb	r3, [r7, #11]
 800fb68:	2b01      	cmp	r3, #1
 800fb6a:	d10f      	bne.n	800fb8c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800fb6c:	697b      	ldr	r3, [r7, #20]
 800fb6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fb72:	461a      	mov	r2, r3
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800fb78:	697b      	ldr	r3, [r7, #20]
 800fb7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	697a      	ldr	r2, [r7, #20]
 800fb82:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800fb86:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800fb8a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800fb8c:	2300      	movs	r3, #0
}
 800fb8e:	4618      	mov	r0, r3
 800fb90:	371c      	adds	r7, #28
 800fb92:	46bd      	mov	sp, r7
 800fb94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb98:	4770      	bx	lr
 800fb9a:	bf00      	nop
 800fb9c:	4f54300a 	.word	0x4f54300a

0800fba0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800fba0:	b480      	push	{r7}
 800fba2:	b085      	sub	sp, #20
 800fba4:	af00      	add	r7, sp, #0
 800fba6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800fba8:	2300      	movs	r3, #0
 800fbaa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800fbac:	68fb      	ldr	r3, [r7, #12]
 800fbae:	3301      	adds	r3, #1
 800fbb0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800fbb2:	68fb      	ldr	r3, [r7, #12]
 800fbb4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800fbb8:	d901      	bls.n	800fbbe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800fbba:	2303      	movs	r3, #3
 800fbbc:	e01b      	b.n	800fbf6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	691b      	ldr	r3, [r3, #16]
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	daf2      	bge.n	800fbac <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800fbc6:	2300      	movs	r3, #0
 800fbc8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	691b      	ldr	r3, [r3, #16]
 800fbce:	f043 0201 	orr.w	r2, r3, #1
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800fbd6:	68fb      	ldr	r3, [r7, #12]
 800fbd8:	3301      	adds	r3, #1
 800fbda:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800fbdc:	68fb      	ldr	r3, [r7, #12]
 800fbde:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800fbe2:	d901      	bls.n	800fbe8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800fbe4:	2303      	movs	r3, #3
 800fbe6:	e006      	b.n	800fbf6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	691b      	ldr	r3, [r3, #16]
 800fbec:	f003 0301 	and.w	r3, r3, #1
 800fbf0:	2b01      	cmp	r3, #1
 800fbf2:	d0f0      	beq.n	800fbd6 <USB_CoreReset+0x36>

  return HAL_OK;
 800fbf4:	2300      	movs	r3, #0
}
 800fbf6:	4618      	mov	r0, r3
 800fbf8:	3714      	adds	r7, #20
 800fbfa:	46bd      	mov	sp, r7
 800fbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc00:	4770      	bx	lr
	...

0800fc04 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fc04:	b580      	push	{r7, lr}
 800fc06:	b084      	sub	sp, #16
 800fc08:	af00      	add	r7, sp, #0
 800fc0a:	6078      	str	r0, [r7, #4]
 800fc0c:	460b      	mov	r3, r1
 800fc0e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800fc10:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800fc14:	f002 fd00 	bl	8012618 <USBD_static_malloc>
 800fc18:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800fc1a:	68fb      	ldr	r3, [r7, #12]
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	d109      	bne.n	800fc34 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	32b0      	adds	r2, #176	@ 0xb0
 800fc2a:	2100      	movs	r1, #0
 800fc2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800fc30:	2302      	movs	r3, #2
 800fc32:	e0d4      	b.n	800fdde <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800fc34:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800fc38:	2100      	movs	r1, #0
 800fc3a:	68f8      	ldr	r0, [r7, #12]
 800fc3c:	f002 fdae 	bl	801279c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	32b0      	adds	r2, #176	@ 0xb0
 800fc4a:	68f9      	ldr	r1, [r7, #12]
 800fc4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	32b0      	adds	r2, #176	@ 0xb0
 800fc5a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	7c1b      	ldrb	r3, [r3, #16]
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	d138      	bne.n	800fcde <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800fc6c:	4b5e      	ldr	r3, [pc, #376]	@ (800fde8 <USBD_CDC_Init+0x1e4>)
 800fc6e:	7819      	ldrb	r1, [r3, #0]
 800fc70:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800fc74:	2202      	movs	r2, #2
 800fc76:	6878      	ldr	r0, [r7, #4]
 800fc78:	f002 fbab 	bl	80123d2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800fc7c:	4b5a      	ldr	r3, [pc, #360]	@ (800fde8 <USBD_CDC_Init+0x1e4>)
 800fc7e:	781b      	ldrb	r3, [r3, #0]
 800fc80:	f003 020f 	and.w	r2, r3, #15
 800fc84:	6879      	ldr	r1, [r7, #4]
 800fc86:	4613      	mov	r3, r2
 800fc88:	009b      	lsls	r3, r3, #2
 800fc8a:	4413      	add	r3, r2
 800fc8c:	009b      	lsls	r3, r3, #2
 800fc8e:	440b      	add	r3, r1
 800fc90:	3324      	adds	r3, #36	@ 0x24
 800fc92:	2201      	movs	r2, #1
 800fc94:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800fc96:	4b55      	ldr	r3, [pc, #340]	@ (800fdec <USBD_CDC_Init+0x1e8>)
 800fc98:	7819      	ldrb	r1, [r3, #0]
 800fc9a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800fc9e:	2202      	movs	r2, #2
 800fca0:	6878      	ldr	r0, [r7, #4]
 800fca2:	f002 fb96 	bl	80123d2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800fca6:	4b51      	ldr	r3, [pc, #324]	@ (800fdec <USBD_CDC_Init+0x1e8>)
 800fca8:	781b      	ldrb	r3, [r3, #0]
 800fcaa:	f003 020f 	and.w	r2, r3, #15
 800fcae:	6879      	ldr	r1, [r7, #4]
 800fcb0:	4613      	mov	r3, r2
 800fcb2:	009b      	lsls	r3, r3, #2
 800fcb4:	4413      	add	r3, r2
 800fcb6:	009b      	lsls	r3, r3, #2
 800fcb8:	440b      	add	r3, r1
 800fcba:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800fcbe:	2201      	movs	r2, #1
 800fcc0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800fcc2:	4b4b      	ldr	r3, [pc, #300]	@ (800fdf0 <USBD_CDC_Init+0x1ec>)
 800fcc4:	781b      	ldrb	r3, [r3, #0]
 800fcc6:	f003 020f 	and.w	r2, r3, #15
 800fcca:	6879      	ldr	r1, [r7, #4]
 800fccc:	4613      	mov	r3, r2
 800fcce:	009b      	lsls	r3, r3, #2
 800fcd0:	4413      	add	r3, r2
 800fcd2:	009b      	lsls	r3, r3, #2
 800fcd4:	440b      	add	r3, r1
 800fcd6:	3326      	adds	r3, #38	@ 0x26
 800fcd8:	2210      	movs	r2, #16
 800fcda:	801a      	strh	r2, [r3, #0]
 800fcdc:	e035      	b.n	800fd4a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800fcde:	4b42      	ldr	r3, [pc, #264]	@ (800fde8 <USBD_CDC_Init+0x1e4>)
 800fce0:	7819      	ldrb	r1, [r3, #0]
 800fce2:	2340      	movs	r3, #64	@ 0x40
 800fce4:	2202      	movs	r2, #2
 800fce6:	6878      	ldr	r0, [r7, #4]
 800fce8:	f002 fb73 	bl	80123d2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800fcec:	4b3e      	ldr	r3, [pc, #248]	@ (800fde8 <USBD_CDC_Init+0x1e4>)
 800fcee:	781b      	ldrb	r3, [r3, #0]
 800fcf0:	f003 020f 	and.w	r2, r3, #15
 800fcf4:	6879      	ldr	r1, [r7, #4]
 800fcf6:	4613      	mov	r3, r2
 800fcf8:	009b      	lsls	r3, r3, #2
 800fcfa:	4413      	add	r3, r2
 800fcfc:	009b      	lsls	r3, r3, #2
 800fcfe:	440b      	add	r3, r1
 800fd00:	3324      	adds	r3, #36	@ 0x24
 800fd02:	2201      	movs	r2, #1
 800fd04:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800fd06:	4b39      	ldr	r3, [pc, #228]	@ (800fdec <USBD_CDC_Init+0x1e8>)
 800fd08:	7819      	ldrb	r1, [r3, #0]
 800fd0a:	2340      	movs	r3, #64	@ 0x40
 800fd0c:	2202      	movs	r2, #2
 800fd0e:	6878      	ldr	r0, [r7, #4]
 800fd10:	f002 fb5f 	bl	80123d2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800fd14:	4b35      	ldr	r3, [pc, #212]	@ (800fdec <USBD_CDC_Init+0x1e8>)
 800fd16:	781b      	ldrb	r3, [r3, #0]
 800fd18:	f003 020f 	and.w	r2, r3, #15
 800fd1c:	6879      	ldr	r1, [r7, #4]
 800fd1e:	4613      	mov	r3, r2
 800fd20:	009b      	lsls	r3, r3, #2
 800fd22:	4413      	add	r3, r2
 800fd24:	009b      	lsls	r3, r3, #2
 800fd26:	440b      	add	r3, r1
 800fd28:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800fd2c:	2201      	movs	r2, #1
 800fd2e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800fd30:	4b2f      	ldr	r3, [pc, #188]	@ (800fdf0 <USBD_CDC_Init+0x1ec>)
 800fd32:	781b      	ldrb	r3, [r3, #0]
 800fd34:	f003 020f 	and.w	r2, r3, #15
 800fd38:	6879      	ldr	r1, [r7, #4]
 800fd3a:	4613      	mov	r3, r2
 800fd3c:	009b      	lsls	r3, r3, #2
 800fd3e:	4413      	add	r3, r2
 800fd40:	009b      	lsls	r3, r3, #2
 800fd42:	440b      	add	r3, r1
 800fd44:	3326      	adds	r3, #38	@ 0x26
 800fd46:	2210      	movs	r2, #16
 800fd48:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800fd4a:	4b29      	ldr	r3, [pc, #164]	@ (800fdf0 <USBD_CDC_Init+0x1ec>)
 800fd4c:	7819      	ldrb	r1, [r3, #0]
 800fd4e:	2308      	movs	r3, #8
 800fd50:	2203      	movs	r2, #3
 800fd52:	6878      	ldr	r0, [r7, #4]
 800fd54:	f002 fb3d 	bl	80123d2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800fd58:	4b25      	ldr	r3, [pc, #148]	@ (800fdf0 <USBD_CDC_Init+0x1ec>)
 800fd5a:	781b      	ldrb	r3, [r3, #0]
 800fd5c:	f003 020f 	and.w	r2, r3, #15
 800fd60:	6879      	ldr	r1, [r7, #4]
 800fd62:	4613      	mov	r3, r2
 800fd64:	009b      	lsls	r3, r3, #2
 800fd66:	4413      	add	r3, r2
 800fd68:	009b      	lsls	r3, r3, #2
 800fd6a:	440b      	add	r3, r1
 800fd6c:	3324      	adds	r3, #36	@ 0x24
 800fd6e:	2201      	movs	r2, #1
 800fd70:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800fd72:	68fb      	ldr	r3, [r7, #12]
 800fd74:	2200      	movs	r2, #0
 800fd76:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800fd80:	687a      	ldr	r2, [r7, #4]
 800fd82:	33b0      	adds	r3, #176	@ 0xb0
 800fd84:	009b      	lsls	r3, r3, #2
 800fd86:	4413      	add	r3, r2
 800fd88:	685b      	ldr	r3, [r3, #4]
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800fd8e:	68fb      	ldr	r3, [r7, #12]
 800fd90:	2200      	movs	r2, #0
 800fd92:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800fd96:	68fb      	ldr	r3, [r7, #12]
 800fd98:	2200      	movs	r2, #0
 800fd9a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800fd9e:	68fb      	ldr	r3, [r7, #12]
 800fda0:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	d101      	bne.n	800fdac <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800fda8:	2302      	movs	r3, #2
 800fdaa:	e018      	b.n	800fdde <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	7c1b      	ldrb	r3, [r3, #16]
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d10a      	bne.n	800fdca <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800fdb4:	4b0d      	ldr	r3, [pc, #52]	@ (800fdec <USBD_CDC_Init+0x1e8>)
 800fdb6:	7819      	ldrb	r1, [r3, #0]
 800fdb8:	68fb      	ldr	r3, [r7, #12]
 800fdba:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800fdbe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800fdc2:	6878      	ldr	r0, [r7, #4]
 800fdc4:	f002 fbf4 	bl	80125b0 <USBD_LL_PrepareReceive>
 800fdc8:	e008      	b.n	800fddc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800fdca:	4b08      	ldr	r3, [pc, #32]	@ (800fdec <USBD_CDC_Init+0x1e8>)
 800fdcc:	7819      	ldrb	r1, [r3, #0]
 800fdce:	68fb      	ldr	r3, [r7, #12]
 800fdd0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800fdd4:	2340      	movs	r3, #64	@ 0x40
 800fdd6:	6878      	ldr	r0, [r7, #4]
 800fdd8:	f002 fbea 	bl	80125b0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800fddc:	2300      	movs	r3, #0
}
 800fdde:	4618      	mov	r0, r3
 800fde0:	3710      	adds	r7, #16
 800fde2:	46bd      	mov	sp, r7
 800fde4:	bd80      	pop	{r7, pc}
 800fde6:	bf00      	nop
 800fde8:	200000a3 	.word	0x200000a3
 800fdec:	200000a4 	.word	0x200000a4
 800fdf0:	200000a5 	.word	0x200000a5

0800fdf4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fdf4:	b580      	push	{r7, lr}
 800fdf6:	b082      	sub	sp, #8
 800fdf8:	af00      	add	r7, sp, #0
 800fdfa:	6078      	str	r0, [r7, #4]
 800fdfc:	460b      	mov	r3, r1
 800fdfe:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800fe00:	4b3a      	ldr	r3, [pc, #232]	@ (800feec <USBD_CDC_DeInit+0xf8>)
 800fe02:	781b      	ldrb	r3, [r3, #0]
 800fe04:	4619      	mov	r1, r3
 800fe06:	6878      	ldr	r0, [r7, #4]
 800fe08:	f002 fb09 	bl	801241e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800fe0c:	4b37      	ldr	r3, [pc, #220]	@ (800feec <USBD_CDC_DeInit+0xf8>)
 800fe0e:	781b      	ldrb	r3, [r3, #0]
 800fe10:	f003 020f 	and.w	r2, r3, #15
 800fe14:	6879      	ldr	r1, [r7, #4]
 800fe16:	4613      	mov	r3, r2
 800fe18:	009b      	lsls	r3, r3, #2
 800fe1a:	4413      	add	r3, r2
 800fe1c:	009b      	lsls	r3, r3, #2
 800fe1e:	440b      	add	r3, r1
 800fe20:	3324      	adds	r3, #36	@ 0x24
 800fe22:	2200      	movs	r2, #0
 800fe24:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800fe26:	4b32      	ldr	r3, [pc, #200]	@ (800fef0 <USBD_CDC_DeInit+0xfc>)
 800fe28:	781b      	ldrb	r3, [r3, #0]
 800fe2a:	4619      	mov	r1, r3
 800fe2c:	6878      	ldr	r0, [r7, #4]
 800fe2e:	f002 faf6 	bl	801241e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800fe32:	4b2f      	ldr	r3, [pc, #188]	@ (800fef0 <USBD_CDC_DeInit+0xfc>)
 800fe34:	781b      	ldrb	r3, [r3, #0]
 800fe36:	f003 020f 	and.w	r2, r3, #15
 800fe3a:	6879      	ldr	r1, [r7, #4]
 800fe3c:	4613      	mov	r3, r2
 800fe3e:	009b      	lsls	r3, r3, #2
 800fe40:	4413      	add	r3, r2
 800fe42:	009b      	lsls	r3, r3, #2
 800fe44:	440b      	add	r3, r1
 800fe46:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800fe4a:	2200      	movs	r2, #0
 800fe4c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800fe4e:	4b29      	ldr	r3, [pc, #164]	@ (800fef4 <USBD_CDC_DeInit+0x100>)
 800fe50:	781b      	ldrb	r3, [r3, #0]
 800fe52:	4619      	mov	r1, r3
 800fe54:	6878      	ldr	r0, [r7, #4]
 800fe56:	f002 fae2 	bl	801241e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800fe5a:	4b26      	ldr	r3, [pc, #152]	@ (800fef4 <USBD_CDC_DeInit+0x100>)
 800fe5c:	781b      	ldrb	r3, [r3, #0]
 800fe5e:	f003 020f 	and.w	r2, r3, #15
 800fe62:	6879      	ldr	r1, [r7, #4]
 800fe64:	4613      	mov	r3, r2
 800fe66:	009b      	lsls	r3, r3, #2
 800fe68:	4413      	add	r3, r2
 800fe6a:	009b      	lsls	r3, r3, #2
 800fe6c:	440b      	add	r3, r1
 800fe6e:	3324      	adds	r3, #36	@ 0x24
 800fe70:	2200      	movs	r2, #0
 800fe72:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800fe74:	4b1f      	ldr	r3, [pc, #124]	@ (800fef4 <USBD_CDC_DeInit+0x100>)
 800fe76:	781b      	ldrb	r3, [r3, #0]
 800fe78:	f003 020f 	and.w	r2, r3, #15
 800fe7c:	6879      	ldr	r1, [r7, #4]
 800fe7e:	4613      	mov	r3, r2
 800fe80:	009b      	lsls	r3, r3, #2
 800fe82:	4413      	add	r3, r2
 800fe84:	009b      	lsls	r3, r3, #2
 800fe86:	440b      	add	r3, r1
 800fe88:	3326      	adds	r3, #38	@ 0x26
 800fe8a:	2200      	movs	r2, #0
 800fe8c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	32b0      	adds	r2, #176	@ 0xb0
 800fe98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d01f      	beq.n	800fee0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800fea6:	687a      	ldr	r2, [r7, #4]
 800fea8:	33b0      	adds	r3, #176	@ 0xb0
 800feaa:	009b      	lsls	r3, r3, #2
 800feac:	4413      	add	r3, r2
 800feae:	685b      	ldr	r3, [r3, #4]
 800feb0:	685b      	ldr	r3, [r3, #4]
 800feb2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	32b0      	adds	r2, #176	@ 0xb0
 800febe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fec2:	4618      	mov	r0, r3
 800fec4:	f002 fbb6 	bl	8012634 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	32b0      	adds	r2, #176	@ 0xb0
 800fed2:	2100      	movs	r1, #0
 800fed4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	2200      	movs	r2, #0
 800fedc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800fee0:	2300      	movs	r3, #0
}
 800fee2:	4618      	mov	r0, r3
 800fee4:	3708      	adds	r7, #8
 800fee6:	46bd      	mov	sp, r7
 800fee8:	bd80      	pop	{r7, pc}
 800feea:	bf00      	nop
 800feec:	200000a3 	.word	0x200000a3
 800fef0:	200000a4 	.word	0x200000a4
 800fef4:	200000a5 	.word	0x200000a5

0800fef8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800fef8:	b580      	push	{r7, lr}
 800fefa:	b086      	sub	sp, #24
 800fefc:	af00      	add	r7, sp, #0
 800fefe:	6078      	str	r0, [r7, #4]
 800ff00:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	32b0      	adds	r2, #176	@ 0xb0
 800ff0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff10:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800ff12:	2300      	movs	r3, #0
 800ff14:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800ff16:	2300      	movs	r3, #0
 800ff18:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800ff1a:	2300      	movs	r3, #0
 800ff1c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800ff1e:	693b      	ldr	r3, [r7, #16]
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	d101      	bne.n	800ff28 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800ff24:	2303      	movs	r3, #3
 800ff26:	e0bf      	b.n	80100a8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ff28:	683b      	ldr	r3, [r7, #0]
 800ff2a:	781b      	ldrb	r3, [r3, #0]
 800ff2c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	d050      	beq.n	800ffd6 <USBD_CDC_Setup+0xde>
 800ff34:	2b20      	cmp	r3, #32
 800ff36:	f040 80af 	bne.w	8010098 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800ff3a:	683b      	ldr	r3, [r7, #0]
 800ff3c:	88db      	ldrh	r3, [r3, #6]
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d03a      	beq.n	800ffb8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800ff42:	683b      	ldr	r3, [r7, #0]
 800ff44:	781b      	ldrb	r3, [r3, #0]
 800ff46:	b25b      	sxtb	r3, r3
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	da1b      	bge.n	800ff84 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ff52:	687a      	ldr	r2, [r7, #4]
 800ff54:	33b0      	adds	r3, #176	@ 0xb0
 800ff56:	009b      	lsls	r3, r3, #2
 800ff58:	4413      	add	r3, r2
 800ff5a:	685b      	ldr	r3, [r3, #4]
 800ff5c:	689b      	ldr	r3, [r3, #8]
 800ff5e:	683a      	ldr	r2, [r7, #0]
 800ff60:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800ff62:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ff64:	683a      	ldr	r2, [r7, #0]
 800ff66:	88d2      	ldrh	r2, [r2, #6]
 800ff68:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800ff6a:	683b      	ldr	r3, [r7, #0]
 800ff6c:	88db      	ldrh	r3, [r3, #6]
 800ff6e:	2b07      	cmp	r3, #7
 800ff70:	bf28      	it	cs
 800ff72:	2307      	movcs	r3, #7
 800ff74:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800ff76:	693b      	ldr	r3, [r7, #16]
 800ff78:	89fa      	ldrh	r2, [r7, #14]
 800ff7a:	4619      	mov	r1, r3
 800ff7c:	6878      	ldr	r0, [r7, #4]
 800ff7e:	f001 fd93 	bl	8011aa8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800ff82:	e090      	b.n	80100a6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800ff84:	683b      	ldr	r3, [r7, #0]
 800ff86:	785a      	ldrb	r2, [r3, #1]
 800ff88:	693b      	ldr	r3, [r7, #16]
 800ff8a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800ff8e:	683b      	ldr	r3, [r7, #0]
 800ff90:	88db      	ldrh	r3, [r3, #6]
 800ff92:	2b3f      	cmp	r3, #63	@ 0x3f
 800ff94:	d803      	bhi.n	800ff9e <USBD_CDC_Setup+0xa6>
 800ff96:	683b      	ldr	r3, [r7, #0]
 800ff98:	88db      	ldrh	r3, [r3, #6]
 800ff9a:	b2da      	uxtb	r2, r3
 800ff9c:	e000      	b.n	800ffa0 <USBD_CDC_Setup+0xa8>
 800ff9e:	2240      	movs	r2, #64	@ 0x40
 800ffa0:	693b      	ldr	r3, [r7, #16]
 800ffa2:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800ffa6:	6939      	ldr	r1, [r7, #16]
 800ffa8:	693b      	ldr	r3, [r7, #16]
 800ffaa:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800ffae:	461a      	mov	r2, r3
 800ffb0:	6878      	ldr	r0, [r7, #4]
 800ffb2:	f001 fda5 	bl	8011b00 <USBD_CtlPrepareRx>
      break;
 800ffb6:	e076      	b.n	80100a6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ffbe:	687a      	ldr	r2, [r7, #4]
 800ffc0:	33b0      	adds	r3, #176	@ 0xb0
 800ffc2:	009b      	lsls	r3, r3, #2
 800ffc4:	4413      	add	r3, r2
 800ffc6:	685b      	ldr	r3, [r3, #4]
 800ffc8:	689b      	ldr	r3, [r3, #8]
 800ffca:	683a      	ldr	r2, [r7, #0]
 800ffcc:	7850      	ldrb	r0, [r2, #1]
 800ffce:	2200      	movs	r2, #0
 800ffd0:	6839      	ldr	r1, [r7, #0]
 800ffd2:	4798      	blx	r3
      break;
 800ffd4:	e067      	b.n	80100a6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ffd6:	683b      	ldr	r3, [r7, #0]
 800ffd8:	785b      	ldrb	r3, [r3, #1]
 800ffda:	2b0b      	cmp	r3, #11
 800ffdc:	d851      	bhi.n	8010082 <USBD_CDC_Setup+0x18a>
 800ffde:	a201      	add	r2, pc, #4	@ (adr r2, 800ffe4 <USBD_CDC_Setup+0xec>)
 800ffe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ffe4:	08010015 	.word	0x08010015
 800ffe8:	08010091 	.word	0x08010091
 800ffec:	08010083 	.word	0x08010083
 800fff0:	08010083 	.word	0x08010083
 800fff4:	08010083 	.word	0x08010083
 800fff8:	08010083 	.word	0x08010083
 800fffc:	08010083 	.word	0x08010083
 8010000:	08010083 	.word	0x08010083
 8010004:	08010083 	.word	0x08010083
 8010008:	08010083 	.word	0x08010083
 801000c:	0801003f 	.word	0x0801003f
 8010010:	08010069 	.word	0x08010069
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801001a:	b2db      	uxtb	r3, r3
 801001c:	2b03      	cmp	r3, #3
 801001e:	d107      	bne.n	8010030 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8010020:	f107 030a 	add.w	r3, r7, #10
 8010024:	2202      	movs	r2, #2
 8010026:	4619      	mov	r1, r3
 8010028:	6878      	ldr	r0, [r7, #4]
 801002a:	f001 fd3d 	bl	8011aa8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801002e:	e032      	b.n	8010096 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8010030:	6839      	ldr	r1, [r7, #0]
 8010032:	6878      	ldr	r0, [r7, #4]
 8010034:	f001 fcbb 	bl	80119ae <USBD_CtlError>
            ret = USBD_FAIL;
 8010038:	2303      	movs	r3, #3
 801003a:	75fb      	strb	r3, [r7, #23]
          break;
 801003c:	e02b      	b.n	8010096 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010044:	b2db      	uxtb	r3, r3
 8010046:	2b03      	cmp	r3, #3
 8010048:	d107      	bne.n	801005a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 801004a:	f107 030d 	add.w	r3, r7, #13
 801004e:	2201      	movs	r2, #1
 8010050:	4619      	mov	r1, r3
 8010052:	6878      	ldr	r0, [r7, #4]
 8010054:	f001 fd28 	bl	8011aa8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8010058:	e01d      	b.n	8010096 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 801005a:	6839      	ldr	r1, [r7, #0]
 801005c:	6878      	ldr	r0, [r7, #4]
 801005e:	f001 fca6 	bl	80119ae <USBD_CtlError>
            ret = USBD_FAIL;
 8010062:	2303      	movs	r3, #3
 8010064:	75fb      	strb	r3, [r7, #23]
          break;
 8010066:	e016      	b.n	8010096 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801006e:	b2db      	uxtb	r3, r3
 8010070:	2b03      	cmp	r3, #3
 8010072:	d00f      	beq.n	8010094 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8010074:	6839      	ldr	r1, [r7, #0]
 8010076:	6878      	ldr	r0, [r7, #4]
 8010078:	f001 fc99 	bl	80119ae <USBD_CtlError>
            ret = USBD_FAIL;
 801007c:	2303      	movs	r3, #3
 801007e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8010080:	e008      	b.n	8010094 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8010082:	6839      	ldr	r1, [r7, #0]
 8010084:	6878      	ldr	r0, [r7, #4]
 8010086:	f001 fc92 	bl	80119ae <USBD_CtlError>
          ret = USBD_FAIL;
 801008a:	2303      	movs	r3, #3
 801008c:	75fb      	strb	r3, [r7, #23]
          break;
 801008e:	e002      	b.n	8010096 <USBD_CDC_Setup+0x19e>
          break;
 8010090:	bf00      	nop
 8010092:	e008      	b.n	80100a6 <USBD_CDC_Setup+0x1ae>
          break;
 8010094:	bf00      	nop
      }
      break;
 8010096:	e006      	b.n	80100a6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8010098:	6839      	ldr	r1, [r7, #0]
 801009a:	6878      	ldr	r0, [r7, #4]
 801009c:	f001 fc87 	bl	80119ae <USBD_CtlError>
      ret = USBD_FAIL;
 80100a0:	2303      	movs	r3, #3
 80100a2:	75fb      	strb	r3, [r7, #23]
      break;
 80100a4:	bf00      	nop
  }

  return (uint8_t)ret;
 80100a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80100a8:	4618      	mov	r0, r3
 80100aa:	3718      	adds	r7, #24
 80100ac:	46bd      	mov	sp, r7
 80100ae:	bd80      	pop	{r7, pc}

080100b0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80100b0:	b580      	push	{r7, lr}
 80100b2:	b084      	sub	sp, #16
 80100b4:	af00      	add	r7, sp, #0
 80100b6:	6078      	str	r0, [r7, #4]
 80100b8:	460b      	mov	r3, r1
 80100ba:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80100c2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	32b0      	adds	r2, #176	@ 0xb0
 80100ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d101      	bne.n	80100da <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80100d6:	2303      	movs	r3, #3
 80100d8:	e065      	b.n	80101a6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	32b0      	adds	r2, #176	@ 0xb0
 80100e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80100e8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80100ea:	78fb      	ldrb	r3, [r7, #3]
 80100ec:	f003 020f 	and.w	r2, r3, #15
 80100f0:	6879      	ldr	r1, [r7, #4]
 80100f2:	4613      	mov	r3, r2
 80100f4:	009b      	lsls	r3, r3, #2
 80100f6:	4413      	add	r3, r2
 80100f8:	009b      	lsls	r3, r3, #2
 80100fa:	440b      	add	r3, r1
 80100fc:	3318      	adds	r3, #24
 80100fe:	681b      	ldr	r3, [r3, #0]
 8010100:	2b00      	cmp	r3, #0
 8010102:	d02f      	beq.n	8010164 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8010104:	78fb      	ldrb	r3, [r7, #3]
 8010106:	f003 020f 	and.w	r2, r3, #15
 801010a:	6879      	ldr	r1, [r7, #4]
 801010c:	4613      	mov	r3, r2
 801010e:	009b      	lsls	r3, r3, #2
 8010110:	4413      	add	r3, r2
 8010112:	009b      	lsls	r3, r3, #2
 8010114:	440b      	add	r3, r1
 8010116:	3318      	adds	r3, #24
 8010118:	681a      	ldr	r2, [r3, #0]
 801011a:	78fb      	ldrb	r3, [r7, #3]
 801011c:	f003 010f 	and.w	r1, r3, #15
 8010120:	68f8      	ldr	r0, [r7, #12]
 8010122:	460b      	mov	r3, r1
 8010124:	00db      	lsls	r3, r3, #3
 8010126:	440b      	add	r3, r1
 8010128:	009b      	lsls	r3, r3, #2
 801012a:	4403      	add	r3, r0
 801012c:	331c      	adds	r3, #28
 801012e:	681b      	ldr	r3, [r3, #0]
 8010130:	fbb2 f1f3 	udiv	r1, r2, r3
 8010134:	fb01 f303 	mul.w	r3, r1, r3
 8010138:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 801013a:	2b00      	cmp	r3, #0
 801013c:	d112      	bne.n	8010164 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 801013e:	78fb      	ldrb	r3, [r7, #3]
 8010140:	f003 020f 	and.w	r2, r3, #15
 8010144:	6879      	ldr	r1, [r7, #4]
 8010146:	4613      	mov	r3, r2
 8010148:	009b      	lsls	r3, r3, #2
 801014a:	4413      	add	r3, r2
 801014c:	009b      	lsls	r3, r3, #2
 801014e:	440b      	add	r3, r1
 8010150:	3318      	adds	r3, #24
 8010152:	2200      	movs	r2, #0
 8010154:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8010156:	78f9      	ldrb	r1, [r7, #3]
 8010158:	2300      	movs	r3, #0
 801015a:	2200      	movs	r2, #0
 801015c:	6878      	ldr	r0, [r7, #4]
 801015e:	f002 fa06 	bl	801256e <USBD_LL_Transmit>
 8010162:	e01f      	b.n	80101a4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8010164:	68bb      	ldr	r3, [r7, #8]
 8010166:	2200      	movs	r2, #0
 8010168:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010172:	687a      	ldr	r2, [r7, #4]
 8010174:	33b0      	adds	r3, #176	@ 0xb0
 8010176:	009b      	lsls	r3, r3, #2
 8010178:	4413      	add	r3, r2
 801017a:	685b      	ldr	r3, [r3, #4]
 801017c:	691b      	ldr	r3, [r3, #16]
 801017e:	2b00      	cmp	r3, #0
 8010180:	d010      	beq.n	80101a4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010188:	687a      	ldr	r2, [r7, #4]
 801018a:	33b0      	adds	r3, #176	@ 0xb0
 801018c:	009b      	lsls	r3, r3, #2
 801018e:	4413      	add	r3, r2
 8010190:	685b      	ldr	r3, [r3, #4]
 8010192:	691b      	ldr	r3, [r3, #16]
 8010194:	68ba      	ldr	r2, [r7, #8]
 8010196:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 801019a:	68ba      	ldr	r2, [r7, #8]
 801019c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80101a0:	78fa      	ldrb	r2, [r7, #3]
 80101a2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80101a4:	2300      	movs	r3, #0
}
 80101a6:	4618      	mov	r0, r3
 80101a8:	3710      	adds	r7, #16
 80101aa:	46bd      	mov	sp, r7
 80101ac:	bd80      	pop	{r7, pc}

080101ae <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80101ae:	b580      	push	{r7, lr}
 80101b0:	b084      	sub	sp, #16
 80101b2:	af00      	add	r7, sp, #0
 80101b4:	6078      	str	r0, [r7, #4]
 80101b6:	460b      	mov	r3, r1
 80101b8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	32b0      	adds	r2, #176	@ 0xb0
 80101c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80101c8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	32b0      	adds	r2, #176	@ 0xb0
 80101d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d101      	bne.n	80101e0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80101dc:	2303      	movs	r3, #3
 80101de:	e01a      	b.n	8010216 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80101e0:	78fb      	ldrb	r3, [r7, #3]
 80101e2:	4619      	mov	r1, r3
 80101e4:	6878      	ldr	r0, [r7, #4]
 80101e6:	f002 fa04 	bl	80125f2 <USBD_LL_GetRxDataSize>
 80101ea:	4602      	mov	r2, r0
 80101ec:	68fb      	ldr	r3, [r7, #12]
 80101ee:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80101f8:	687a      	ldr	r2, [r7, #4]
 80101fa:	33b0      	adds	r3, #176	@ 0xb0
 80101fc:	009b      	lsls	r3, r3, #2
 80101fe:	4413      	add	r3, r2
 8010200:	685b      	ldr	r3, [r3, #4]
 8010202:	68db      	ldr	r3, [r3, #12]
 8010204:	68fa      	ldr	r2, [r7, #12]
 8010206:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 801020a:	68fa      	ldr	r2, [r7, #12]
 801020c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8010210:	4611      	mov	r1, r2
 8010212:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8010214:	2300      	movs	r3, #0
}
 8010216:	4618      	mov	r0, r3
 8010218:	3710      	adds	r7, #16
 801021a:	46bd      	mov	sp, r7
 801021c:	bd80      	pop	{r7, pc}

0801021e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 801021e:	b580      	push	{r7, lr}
 8010220:	b084      	sub	sp, #16
 8010222:	af00      	add	r7, sp, #0
 8010224:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	32b0      	adds	r2, #176	@ 0xb0
 8010230:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010234:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8010236:	68fb      	ldr	r3, [r7, #12]
 8010238:	2b00      	cmp	r3, #0
 801023a:	d101      	bne.n	8010240 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 801023c:	2303      	movs	r3, #3
 801023e:	e024      	b.n	801028a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010246:	687a      	ldr	r2, [r7, #4]
 8010248:	33b0      	adds	r3, #176	@ 0xb0
 801024a:	009b      	lsls	r3, r3, #2
 801024c:	4413      	add	r3, r2
 801024e:	685b      	ldr	r3, [r3, #4]
 8010250:	2b00      	cmp	r3, #0
 8010252:	d019      	beq.n	8010288 <USBD_CDC_EP0_RxReady+0x6a>
 8010254:	68fb      	ldr	r3, [r7, #12]
 8010256:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 801025a:	2bff      	cmp	r3, #255	@ 0xff
 801025c:	d014      	beq.n	8010288 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010264:	687a      	ldr	r2, [r7, #4]
 8010266:	33b0      	adds	r3, #176	@ 0xb0
 8010268:	009b      	lsls	r3, r3, #2
 801026a:	4413      	add	r3, r2
 801026c:	685b      	ldr	r3, [r3, #4]
 801026e:	689b      	ldr	r3, [r3, #8]
 8010270:	68fa      	ldr	r2, [r7, #12]
 8010272:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8010276:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8010278:	68fa      	ldr	r2, [r7, #12]
 801027a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 801027e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8010280:	68fb      	ldr	r3, [r7, #12]
 8010282:	22ff      	movs	r2, #255	@ 0xff
 8010284:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8010288:	2300      	movs	r3, #0
}
 801028a:	4618      	mov	r0, r3
 801028c:	3710      	adds	r7, #16
 801028e:	46bd      	mov	sp, r7
 8010290:	bd80      	pop	{r7, pc}
	...

08010294 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8010294:	b580      	push	{r7, lr}
 8010296:	b086      	sub	sp, #24
 8010298:	af00      	add	r7, sp, #0
 801029a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 801029c:	2182      	movs	r1, #130	@ 0x82
 801029e:	4818      	ldr	r0, [pc, #96]	@ (8010300 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80102a0:	f000 fd4f 	bl	8010d42 <USBD_GetEpDesc>
 80102a4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80102a6:	2101      	movs	r1, #1
 80102a8:	4815      	ldr	r0, [pc, #84]	@ (8010300 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80102aa:	f000 fd4a 	bl	8010d42 <USBD_GetEpDesc>
 80102ae:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80102b0:	2181      	movs	r1, #129	@ 0x81
 80102b2:	4813      	ldr	r0, [pc, #76]	@ (8010300 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80102b4:	f000 fd45 	bl	8010d42 <USBD_GetEpDesc>
 80102b8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80102ba:	697b      	ldr	r3, [r7, #20]
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d002      	beq.n	80102c6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80102c0:	697b      	ldr	r3, [r7, #20]
 80102c2:	2210      	movs	r2, #16
 80102c4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80102c6:	693b      	ldr	r3, [r7, #16]
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d006      	beq.n	80102da <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80102cc:	693b      	ldr	r3, [r7, #16]
 80102ce:	2200      	movs	r2, #0
 80102d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80102d4:	711a      	strb	r2, [r3, #4]
 80102d6:	2200      	movs	r2, #0
 80102d8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80102da:	68fb      	ldr	r3, [r7, #12]
 80102dc:	2b00      	cmp	r3, #0
 80102de:	d006      	beq.n	80102ee <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80102e0:	68fb      	ldr	r3, [r7, #12]
 80102e2:	2200      	movs	r2, #0
 80102e4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80102e8:	711a      	strb	r2, [r3, #4]
 80102ea:	2200      	movs	r2, #0
 80102ec:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	2243      	movs	r2, #67	@ 0x43
 80102f2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80102f4:	4b02      	ldr	r3, [pc, #8]	@ (8010300 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80102f6:	4618      	mov	r0, r3
 80102f8:	3718      	adds	r7, #24
 80102fa:	46bd      	mov	sp, r7
 80102fc:	bd80      	pop	{r7, pc}
 80102fe:	bf00      	nop
 8010300:	20000060 	.word	0x20000060

08010304 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8010304:	b580      	push	{r7, lr}
 8010306:	b086      	sub	sp, #24
 8010308:	af00      	add	r7, sp, #0
 801030a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 801030c:	2182      	movs	r1, #130	@ 0x82
 801030e:	4818      	ldr	r0, [pc, #96]	@ (8010370 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8010310:	f000 fd17 	bl	8010d42 <USBD_GetEpDesc>
 8010314:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8010316:	2101      	movs	r1, #1
 8010318:	4815      	ldr	r0, [pc, #84]	@ (8010370 <USBD_CDC_GetHSCfgDesc+0x6c>)
 801031a:	f000 fd12 	bl	8010d42 <USBD_GetEpDesc>
 801031e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8010320:	2181      	movs	r1, #129	@ 0x81
 8010322:	4813      	ldr	r0, [pc, #76]	@ (8010370 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8010324:	f000 fd0d 	bl	8010d42 <USBD_GetEpDesc>
 8010328:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801032a:	697b      	ldr	r3, [r7, #20]
 801032c:	2b00      	cmp	r3, #0
 801032e:	d002      	beq.n	8010336 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8010330:	697b      	ldr	r3, [r7, #20]
 8010332:	2210      	movs	r2, #16
 8010334:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8010336:	693b      	ldr	r3, [r7, #16]
 8010338:	2b00      	cmp	r3, #0
 801033a:	d006      	beq.n	801034a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 801033c:	693b      	ldr	r3, [r7, #16]
 801033e:	2200      	movs	r2, #0
 8010340:	711a      	strb	r2, [r3, #4]
 8010342:	2200      	movs	r2, #0
 8010344:	f042 0202 	orr.w	r2, r2, #2
 8010348:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801034a:	68fb      	ldr	r3, [r7, #12]
 801034c:	2b00      	cmp	r3, #0
 801034e:	d006      	beq.n	801035e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8010350:	68fb      	ldr	r3, [r7, #12]
 8010352:	2200      	movs	r2, #0
 8010354:	711a      	strb	r2, [r3, #4]
 8010356:	2200      	movs	r2, #0
 8010358:	f042 0202 	orr.w	r2, r2, #2
 801035c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	2243      	movs	r2, #67	@ 0x43
 8010362:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8010364:	4b02      	ldr	r3, [pc, #8]	@ (8010370 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8010366:	4618      	mov	r0, r3
 8010368:	3718      	adds	r7, #24
 801036a:	46bd      	mov	sp, r7
 801036c:	bd80      	pop	{r7, pc}
 801036e:	bf00      	nop
 8010370:	20000060 	.word	0x20000060

08010374 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8010374:	b580      	push	{r7, lr}
 8010376:	b086      	sub	sp, #24
 8010378:	af00      	add	r7, sp, #0
 801037a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 801037c:	2182      	movs	r1, #130	@ 0x82
 801037e:	4818      	ldr	r0, [pc, #96]	@ (80103e0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8010380:	f000 fcdf 	bl	8010d42 <USBD_GetEpDesc>
 8010384:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8010386:	2101      	movs	r1, #1
 8010388:	4815      	ldr	r0, [pc, #84]	@ (80103e0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 801038a:	f000 fcda 	bl	8010d42 <USBD_GetEpDesc>
 801038e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8010390:	2181      	movs	r1, #129	@ 0x81
 8010392:	4813      	ldr	r0, [pc, #76]	@ (80103e0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8010394:	f000 fcd5 	bl	8010d42 <USBD_GetEpDesc>
 8010398:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801039a:	697b      	ldr	r3, [r7, #20]
 801039c:	2b00      	cmp	r3, #0
 801039e:	d002      	beq.n	80103a6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80103a0:	697b      	ldr	r3, [r7, #20]
 80103a2:	2210      	movs	r2, #16
 80103a4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80103a6:	693b      	ldr	r3, [r7, #16]
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d006      	beq.n	80103ba <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80103ac:	693b      	ldr	r3, [r7, #16]
 80103ae:	2200      	movs	r2, #0
 80103b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80103b4:	711a      	strb	r2, [r3, #4]
 80103b6:	2200      	movs	r2, #0
 80103b8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80103ba:	68fb      	ldr	r3, [r7, #12]
 80103bc:	2b00      	cmp	r3, #0
 80103be:	d006      	beq.n	80103ce <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80103c0:	68fb      	ldr	r3, [r7, #12]
 80103c2:	2200      	movs	r2, #0
 80103c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80103c8:	711a      	strb	r2, [r3, #4]
 80103ca:	2200      	movs	r2, #0
 80103cc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	2243      	movs	r2, #67	@ 0x43
 80103d2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80103d4:	4b02      	ldr	r3, [pc, #8]	@ (80103e0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80103d6:	4618      	mov	r0, r3
 80103d8:	3718      	adds	r7, #24
 80103da:	46bd      	mov	sp, r7
 80103dc:	bd80      	pop	{r7, pc}
 80103de:	bf00      	nop
 80103e0:	20000060 	.word	0x20000060

080103e4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80103e4:	b480      	push	{r7}
 80103e6:	b083      	sub	sp, #12
 80103e8:	af00      	add	r7, sp, #0
 80103ea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	220a      	movs	r2, #10
 80103f0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80103f2:	4b03      	ldr	r3, [pc, #12]	@ (8010400 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80103f4:	4618      	mov	r0, r3
 80103f6:	370c      	adds	r7, #12
 80103f8:	46bd      	mov	sp, r7
 80103fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103fe:	4770      	bx	lr
 8010400:	2000001c 	.word	0x2000001c

08010404 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8010404:	b480      	push	{r7}
 8010406:	b083      	sub	sp, #12
 8010408:	af00      	add	r7, sp, #0
 801040a:	6078      	str	r0, [r7, #4]
 801040c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801040e:	683b      	ldr	r3, [r7, #0]
 8010410:	2b00      	cmp	r3, #0
 8010412:	d101      	bne.n	8010418 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8010414:	2303      	movs	r3, #3
 8010416:	e009      	b.n	801042c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801041e:	687a      	ldr	r2, [r7, #4]
 8010420:	33b0      	adds	r3, #176	@ 0xb0
 8010422:	009b      	lsls	r3, r3, #2
 8010424:	4413      	add	r3, r2
 8010426:	683a      	ldr	r2, [r7, #0]
 8010428:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 801042a:	2300      	movs	r3, #0
}
 801042c:	4618      	mov	r0, r3
 801042e:	370c      	adds	r7, #12
 8010430:	46bd      	mov	sp, r7
 8010432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010436:	4770      	bx	lr

08010438 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8010438:	b480      	push	{r7}
 801043a:	b087      	sub	sp, #28
 801043c:	af00      	add	r7, sp, #0
 801043e:	60f8      	str	r0, [r7, #12]
 8010440:	60b9      	str	r1, [r7, #8]
 8010442:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010444:	68fb      	ldr	r3, [r7, #12]
 8010446:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801044a:	68fb      	ldr	r3, [r7, #12]
 801044c:	32b0      	adds	r2, #176	@ 0xb0
 801044e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010452:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8010454:	697b      	ldr	r3, [r7, #20]
 8010456:	2b00      	cmp	r3, #0
 8010458:	d101      	bne.n	801045e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 801045a:	2303      	movs	r3, #3
 801045c:	e008      	b.n	8010470 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 801045e:	697b      	ldr	r3, [r7, #20]
 8010460:	68ba      	ldr	r2, [r7, #8]
 8010462:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8010466:	697b      	ldr	r3, [r7, #20]
 8010468:	687a      	ldr	r2, [r7, #4]
 801046a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 801046e:	2300      	movs	r3, #0
}
 8010470:	4618      	mov	r0, r3
 8010472:	371c      	adds	r7, #28
 8010474:	46bd      	mov	sp, r7
 8010476:	f85d 7b04 	ldr.w	r7, [sp], #4
 801047a:	4770      	bx	lr

0801047c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 801047c:	b480      	push	{r7}
 801047e:	b085      	sub	sp, #20
 8010480:	af00      	add	r7, sp, #0
 8010482:	6078      	str	r0, [r7, #4]
 8010484:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	32b0      	adds	r2, #176	@ 0xb0
 8010490:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010494:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8010496:	68fb      	ldr	r3, [r7, #12]
 8010498:	2b00      	cmp	r3, #0
 801049a:	d101      	bne.n	80104a0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 801049c:	2303      	movs	r3, #3
 801049e:	e004      	b.n	80104aa <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80104a0:	68fb      	ldr	r3, [r7, #12]
 80104a2:	683a      	ldr	r2, [r7, #0]
 80104a4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80104a8:	2300      	movs	r3, #0
}
 80104aa:	4618      	mov	r0, r3
 80104ac:	3714      	adds	r7, #20
 80104ae:	46bd      	mov	sp, r7
 80104b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104b4:	4770      	bx	lr
	...

080104b8 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80104b8:	b580      	push	{r7, lr}
 80104ba:	b084      	sub	sp, #16
 80104bc:	af00      	add	r7, sp, #0
 80104be:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	32b0      	adds	r2, #176	@ 0xb0
 80104ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80104ce:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80104d0:	2301      	movs	r3, #1
 80104d2:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80104d4:	68bb      	ldr	r3, [r7, #8]
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	d101      	bne.n	80104de <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80104da:	2303      	movs	r3, #3
 80104dc:	e025      	b.n	801052a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80104de:	68bb      	ldr	r3, [r7, #8]
 80104e0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	d11f      	bne.n	8010528 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80104e8:	68bb      	ldr	r3, [r7, #8]
 80104ea:	2201      	movs	r2, #1
 80104ec:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80104f0:	4b10      	ldr	r3, [pc, #64]	@ (8010534 <USBD_CDC_TransmitPacket+0x7c>)
 80104f2:	781b      	ldrb	r3, [r3, #0]
 80104f4:	f003 020f 	and.w	r2, r3, #15
 80104f8:	68bb      	ldr	r3, [r7, #8]
 80104fa:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 80104fe:	6878      	ldr	r0, [r7, #4]
 8010500:	4613      	mov	r3, r2
 8010502:	009b      	lsls	r3, r3, #2
 8010504:	4413      	add	r3, r2
 8010506:	009b      	lsls	r3, r3, #2
 8010508:	4403      	add	r3, r0
 801050a:	3318      	adds	r3, #24
 801050c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 801050e:	4b09      	ldr	r3, [pc, #36]	@ (8010534 <USBD_CDC_TransmitPacket+0x7c>)
 8010510:	7819      	ldrb	r1, [r3, #0]
 8010512:	68bb      	ldr	r3, [r7, #8]
 8010514:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8010518:	68bb      	ldr	r3, [r7, #8]
 801051a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 801051e:	6878      	ldr	r0, [r7, #4]
 8010520:	f002 f825 	bl	801256e <USBD_LL_Transmit>

    ret = USBD_OK;
 8010524:	2300      	movs	r3, #0
 8010526:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8010528:	7bfb      	ldrb	r3, [r7, #15]
}
 801052a:	4618      	mov	r0, r3
 801052c:	3710      	adds	r7, #16
 801052e:	46bd      	mov	sp, r7
 8010530:	bd80      	pop	{r7, pc}
 8010532:	bf00      	nop
 8010534:	200000a3 	.word	0x200000a3

08010538 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8010538:	b580      	push	{r7, lr}
 801053a:	b084      	sub	sp, #16
 801053c:	af00      	add	r7, sp, #0
 801053e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	32b0      	adds	r2, #176	@ 0xb0
 801054a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801054e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	32b0      	adds	r2, #176	@ 0xb0
 801055a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801055e:	2b00      	cmp	r3, #0
 8010560:	d101      	bne.n	8010566 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8010562:	2303      	movs	r3, #3
 8010564:	e018      	b.n	8010598 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	7c1b      	ldrb	r3, [r3, #16]
 801056a:	2b00      	cmp	r3, #0
 801056c:	d10a      	bne.n	8010584 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801056e:	4b0c      	ldr	r3, [pc, #48]	@ (80105a0 <USBD_CDC_ReceivePacket+0x68>)
 8010570:	7819      	ldrb	r1, [r3, #0]
 8010572:	68fb      	ldr	r3, [r7, #12]
 8010574:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8010578:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801057c:	6878      	ldr	r0, [r7, #4]
 801057e:	f002 f817 	bl	80125b0 <USBD_LL_PrepareReceive>
 8010582:	e008      	b.n	8010596 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8010584:	4b06      	ldr	r3, [pc, #24]	@ (80105a0 <USBD_CDC_ReceivePacket+0x68>)
 8010586:	7819      	ldrb	r1, [r3, #0]
 8010588:	68fb      	ldr	r3, [r7, #12]
 801058a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 801058e:	2340      	movs	r3, #64	@ 0x40
 8010590:	6878      	ldr	r0, [r7, #4]
 8010592:	f002 f80d 	bl	80125b0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8010596:	2300      	movs	r3, #0
}
 8010598:	4618      	mov	r0, r3
 801059a:	3710      	adds	r7, #16
 801059c:	46bd      	mov	sp, r7
 801059e:	bd80      	pop	{r7, pc}
 80105a0:	200000a4 	.word	0x200000a4

080105a4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80105a4:	b580      	push	{r7, lr}
 80105a6:	b086      	sub	sp, #24
 80105a8:	af00      	add	r7, sp, #0
 80105aa:	60f8      	str	r0, [r7, #12]
 80105ac:	60b9      	str	r1, [r7, #8]
 80105ae:	4613      	mov	r3, r2
 80105b0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80105b2:	68fb      	ldr	r3, [r7, #12]
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	d101      	bne.n	80105bc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80105b8:	2303      	movs	r3, #3
 80105ba:	e01f      	b.n	80105fc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80105bc:	68fb      	ldr	r3, [r7, #12]
 80105be:	2200      	movs	r2, #0
 80105c0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80105c4:	68fb      	ldr	r3, [r7, #12]
 80105c6:	2200      	movs	r2, #0
 80105c8:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80105cc:	68fb      	ldr	r3, [r7, #12]
 80105ce:	2200      	movs	r2, #0
 80105d0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80105d4:	68bb      	ldr	r3, [r7, #8]
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d003      	beq.n	80105e2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80105da:	68fb      	ldr	r3, [r7, #12]
 80105dc:	68ba      	ldr	r2, [r7, #8]
 80105de:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80105e2:	68fb      	ldr	r3, [r7, #12]
 80105e4:	2201      	movs	r2, #1
 80105e6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80105ea:	68fb      	ldr	r3, [r7, #12]
 80105ec:	79fa      	ldrb	r2, [r7, #7]
 80105ee:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80105f0:	68f8      	ldr	r0, [r7, #12]
 80105f2:	f001 fe87 	bl	8012304 <USBD_LL_Init>
 80105f6:	4603      	mov	r3, r0
 80105f8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80105fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80105fc:	4618      	mov	r0, r3
 80105fe:	3718      	adds	r7, #24
 8010600:	46bd      	mov	sp, r7
 8010602:	bd80      	pop	{r7, pc}

08010604 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8010604:	b580      	push	{r7, lr}
 8010606:	b084      	sub	sp, #16
 8010608:	af00      	add	r7, sp, #0
 801060a:	6078      	str	r0, [r7, #4]
 801060c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801060e:	2300      	movs	r3, #0
 8010610:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8010612:	683b      	ldr	r3, [r7, #0]
 8010614:	2b00      	cmp	r3, #0
 8010616:	d101      	bne.n	801061c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8010618:	2303      	movs	r3, #3
 801061a:	e025      	b.n	8010668 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	683a      	ldr	r2, [r7, #0]
 8010620:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	32ae      	adds	r2, #174	@ 0xae
 801062e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010634:	2b00      	cmp	r3, #0
 8010636:	d00f      	beq.n	8010658 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	32ae      	adds	r2, #174	@ 0xae
 8010642:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010646:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010648:	f107 020e 	add.w	r2, r7, #14
 801064c:	4610      	mov	r0, r2
 801064e:	4798      	blx	r3
 8010650:	4602      	mov	r2, r0
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801065e:	1c5a      	adds	r2, r3, #1
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8010666:	2300      	movs	r3, #0
}
 8010668:	4618      	mov	r0, r3
 801066a:	3710      	adds	r7, #16
 801066c:	46bd      	mov	sp, r7
 801066e:	bd80      	pop	{r7, pc}

08010670 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8010670:	b580      	push	{r7, lr}
 8010672:	b082      	sub	sp, #8
 8010674:	af00      	add	r7, sp, #0
 8010676:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8010678:	6878      	ldr	r0, [r7, #4]
 801067a:	f001 fe8f 	bl	801239c <USBD_LL_Start>
 801067e:	4603      	mov	r3, r0
}
 8010680:	4618      	mov	r0, r3
 8010682:	3708      	adds	r7, #8
 8010684:	46bd      	mov	sp, r7
 8010686:	bd80      	pop	{r7, pc}

08010688 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8010688:	b480      	push	{r7}
 801068a:	b083      	sub	sp, #12
 801068c:	af00      	add	r7, sp, #0
 801068e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010690:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8010692:	4618      	mov	r0, r3
 8010694:	370c      	adds	r7, #12
 8010696:	46bd      	mov	sp, r7
 8010698:	f85d 7b04 	ldr.w	r7, [sp], #4
 801069c:	4770      	bx	lr

0801069e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801069e:	b580      	push	{r7, lr}
 80106a0:	b084      	sub	sp, #16
 80106a2:	af00      	add	r7, sp, #0
 80106a4:	6078      	str	r0, [r7, #4]
 80106a6:	460b      	mov	r3, r1
 80106a8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80106aa:	2300      	movs	r3, #0
 80106ac:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	d009      	beq.n	80106cc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80106be:	681b      	ldr	r3, [r3, #0]
 80106c0:	78fa      	ldrb	r2, [r7, #3]
 80106c2:	4611      	mov	r1, r2
 80106c4:	6878      	ldr	r0, [r7, #4]
 80106c6:	4798      	blx	r3
 80106c8:	4603      	mov	r3, r0
 80106ca:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80106cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80106ce:	4618      	mov	r0, r3
 80106d0:	3710      	adds	r7, #16
 80106d2:	46bd      	mov	sp, r7
 80106d4:	bd80      	pop	{r7, pc}

080106d6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80106d6:	b580      	push	{r7, lr}
 80106d8:	b084      	sub	sp, #16
 80106da:	af00      	add	r7, sp, #0
 80106dc:	6078      	str	r0, [r7, #4]
 80106de:	460b      	mov	r3, r1
 80106e0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80106e2:	2300      	movs	r3, #0
 80106e4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80106ec:	685b      	ldr	r3, [r3, #4]
 80106ee:	78fa      	ldrb	r2, [r7, #3]
 80106f0:	4611      	mov	r1, r2
 80106f2:	6878      	ldr	r0, [r7, #4]
 80106f4:	4798      	blx	r3
 80106f6:	4603      	mov	r3, r0
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d001      	beq.n	8010700 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80106fc:	2303      	movs	r3, #3
 80106fe:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8010700:	7bfb      	ldrb	r3, [r7, #15]
}
 8010702:	4618      	mov	r0, r3
 8010704:	3710      	adds	r7, #16
 8010706:	46bd      	mov	sp, r7
 8010708:	bd80      	pop	{r7, pc}

0801070a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801070a:	b580      	push	{r7, lr}
 801070c:	b084      	sub	sp, #16
 801070e:	af00      	add	r7, sp, #0
 8010710:	6078      	str	r0, [r7, #4]
 8010712:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801071a:	6839      	ldr	r1, [r7, #0]
 801071c:	4618      	mov	r0, r3
 801071e:	f001 f90c 	bl	801193a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	2201      	movs	r2, #1
 8010726:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8010730:	461a      	mov	r2, r3
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 801073e:	f003 031f 	and.w	r3, r3, #31
 8010742:	2b02      	cmp	r3, #2
 8010744:	d01a      	beq.n	801077c <USBD_LL_SetupStage+0x72>
 8010746:	2b02      	cmp	r3, #2
 8010748:	d822      	bhi.n	8010790 <USBD_LL_SetupStage+0x86>
 801074a:	2b00      	cmp	r3, #0
 801074c:	d002      	beq.n	8010754 <USBD_LL_SetupStage+0x4a>
 801074e:	2b01      	cmp	r3, #1
 8010750:	d00a      	beq.n	8010768 <USBD_LL_SetupStage+0x5e>
 8010752:	e01d      	b.n	8010790 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801075a:	4619      	mov	r1, r3
 801075c:	6878      	ldr	r0, [r7, #4]
 801075e:	f000 fb63 	bl	8010e28 <USBD_StdDevReq>
 8010762:	4603      	mov	r3, r0
 8010764:	73fb      	strb	r3, [r7, #15]
      break;
 8010766:	e020      	b.n	80107aa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801076e:	4619      	mov	r1, r3
 8010770:	6878      	ldr	r0, [r7, #4]
 8010772:	f000 fbcb 	bl	8010f0c <USBD_StdItfReq>
 8010776:	4603      	mov	r3, r0
 8010778:	73fb      	strb	r3, [r7, #15]
      break;
 801077a:	e016      	b.n	80107aa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8010782:	4619      	mov	r1, r3
 8010784:	6878      	ldr	r0, [r7, #4]
 8010786:	f000 fc2d 	bl	8010fe4 <USBD_StdEPReq>
 801078a:	4603      	mov	r3, r0
 801078c:	73fb      	strb	r3, [r7, #15]
      break;
 801078e:	e00c      	b.n	80107aa <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8010796:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 801079a:	b2db      	uxtb	r3, r3
 801079c:	4619      	mov	r1, r3
 801079e:	6878      	ldr	r0, [r7, #4]
 80107a0:	f001 fe5c 	bl	801245c <USBD_LL_StallEP>
 80107a4:	4603      	mov	r3, r0
 80107a6:	73fb      	strb	r3, [r7, #15]
      break;
 80107a8:	bf00      	nop
  }

  return ret;
 80107aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80107ac:	4618      	mov	r0, r3
 80107ae:	3710      	adds	r7, #16
 80107b0:	46bd      	mov	sp, r7
 80107b2:	bd80      	pop	{r7, pc}

080107b4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80107b4:	b580      	push	{r7, lr}
 80107b6:	b086      	sub	sp, #24
 80107b8:	af00      	add	r7, sp, #0
 80107ba:	60f8      	str	r0, [r7, #12]
 80107bc:	460b      	mov	r3, r1
 80107be:	607a      	str	r2, [r7, #4]
 80107c0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80107c2:	2300      	movs	r3, #0
 80107c4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80107c6:	7afb      	ldrb	r3, [r7, #11]
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	d16e      	bne.n	80108aa <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80107cc:	68fb      	ldr	r3, [r7, #12]
 80107ce:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80107d2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80107d4:	68fb      	ldr	r3, [r7, #12]
 80107d6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80107da:	2b03      	cmp	r3, #3
 80107dc:	f040 8098 	bne.w	8010910 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80107e0:	693b      	ldr	r3, [r7, #16]
 80107e2:	689a      	ldr	r2, [r3, #8]
 80107e4:	693b      	ldr	r3, [r7, #16]
 80107e6:	68db      	ldr	r3, [r3, #12]
 80107e8:	429a      	cmp	r2, r3
 80107ea:	d913      	bls.n	8010814 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80107ec:	693b      	ldr	r3, [r7, #16]
 80107ee:	689a      	ldr	r2, [r3, #8]
 80107f0:	693b      	ldr	r3, [r7, #16]
 80107f2:	68db      	ldr	r3, [r3, #12]
 80107f4:	1ad2      	subs	r2, r2, r3
 80107f6:	693b      	ldr	r3, [r7, #16]
 80107f8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80107fa:	693b      	ldr	r3, [r7, #16]
 80107fc:	68da      	ldr	r2, [r3, #12]
 80107fe:	693b      	ldr	r3, [r7, #16]
 8010800:	689b      	ldr	r3, [r3, #8]
 8010802:	4293      	cmp	r3, r2
 8010804:	bf28      	it	cs
 8010806:	4613      	movcs	r3, r2
 8010808:	461a      	mov	r2, r3
 801080a:	6879      	ldr	r1, [r7, #4]
 801080c:	68f8      	ldr	r0, [r7, #12]
 801080e:	f001 f994 	bl	8011b3a <USBD_CtlContinueRx>
 8010812:	e07d      	b.n	8010910 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8010814:	68fb      	ldr	r3, [r7, #12]
 8010816:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 801081a:	f003 031f 	and.w	r3, r3, #31
 801081e:	2b02      	cmp	r3, #2
 8010820:	d014      	beq.n	801084c <USBD_LL_DataOutStage+0x98>
 8010822:	2b02      	cmp	r3, #2
 8010824:	d81d      	bhi.n	8010862 <USBD_LL_DataOutStage+0xae>
 8010826:	2b00      	cmp	r3, #0
 8010828:	d002      	beq.n	8010830 <USBD_LL_DataOutStage+0x7c>
 801082a:	2b01      	cmp	r3, #1
 801082c:	d003      	beq.n	8010836 <USBD_LL_DataOutStage+0x82>
 801082e:	e018      	b.n	8010862 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8010830:	2300      	movs	r3, #0
 8010832:	75bb      	strb	r3, [r7, #22]
            break;
 8010834:	e018      	b.n	8010868 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8010836:	68fb      	ldr	r3, [r7, #12]
 8010838:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 801083c:	b2db      	uxtb	r3, r3
 801083e:	4619      	mov	r1, r3
 8010840:	68f8      	ldr	r0, [r7, #12]
 8010842:	f000 fa64 	bl	8010d0e <USBD_CoreFindIF>
 8010846:	4603      	mov	r3, r0
 8010848:	75bb      	strb	r3, [r7, #22]
            break;
 801084a:	e00d      	b.n	8010868 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 801084c:	68fb      	ldr	r3, [r7, #12]
 801084e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8010852:	b2db      	uxtb	r3, r3
 8010854:	4619      	mov	r1, r3
 8010856:	68f8      	ldr	r0, [r7, #12]
 8010858:	f000 fa66 	bl	8010d28 <USBD_CoreFindEP>
 801085c:	4603      	mov	r3, r0
 801085e:	75bb      	strb	r3, [r7, #22]
            break;
 8010860:	e002      	b.n	8010868 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8010862:	2300      	movs	r3, #0
 8010864:	75bb      	strb	r3, [r7, #22]
            break;
 8010866:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8010868:	7dbb      	ldrb	r3, [r7, #22]
 801086a:	2b00      	cmp	r3, #0
 801086c:	d119      	bne.n	80108a2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801086e:	68fb      	ldr	r3, [r7, #12]
 8010870:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010874:	b2db      	uxtb	r3, r3
 8010876:	2b03      	cmp	r3, #3
 8010878:	d113      	bne.n	80108a2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 801087a:	7dba      	ldrb	r2, [r7, #22]
 801087c:	68fb      	ldr	r3, [r7, #12]
 801087e:	32ae      	adds	r2, #174	@ 0xae
 8010880:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010884:	691b      	ldr	r3, [r3, #16]
 8010886:	2b00      	cmp	r3, #0
 8010888:	d00b      	beq.n	80108a2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 801088a:	7dba      	ldrb	r2, [r7, #22]
 801088c:	68fb      	ldr	r3, [r7, #12]
 801088e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8010892:	7dba      	ldrb	r2, [r7, #22]
 8010894:	68fb      	ldr	r3, [r7, #12]
 8010896:	32ae      	adds	r2, #174	@ 0xae
 8010898:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801089c:	691b      	ldr	r3, [r3, #16]
 801089e:	68f8      	ldr	r0, [r7, #12]
 80108a0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80108a2:	68f8      	ldr	r0, [r7, #12]
 80108a4:	f001 f95a 	bl	8011b5c <USBD_CtlSendStatus>
 80108a8:	e032      	b.n	8010910 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80108aa:	7afb      	ldrb	r3, [r7, #11]
 80108ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80108b0:	b2db      	uxtb	r3, r3
 80108b2:	4619      	mov	r1, r3
 80108b4:	68f8      	ldr	r0, [r7, #12]
 80108b6:	f000 fa37 	bl	8010d28 <USBD_CoreFindEP>
 80108ba:	4603      	mov	r3, r0
 80108bc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80108be:	7dbb      	ldrb	r3, [r7, #22]
 80108c0:	2bff      	cmp	r3, #255	@ 0xff
 80108c2:	d025      	beq.n	8010910 <USBD_LL_DataOutStage+0x15c>
 80108c4:	7dbb      	ldrb	r3, [r7, #22]
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	d122      	bne.n	8010910 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80108ca:	68fb      	ldr	r3, [r7, #12]
 80108cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80108d0:	b2db      	uxtb	r3, r3
 80108d2:	2b03      	cmp	r3, #3
 80108d4:	d117      	bne.n	8010906 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80108d6:	7dba      	ldrb	r2, [r7, #22]
 80108d8:	68fb      	ldr	r3, [r7, #12]
 80108da:	32ae      	adds	r2, #174	@ 0xae
 80108dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80108e0:	699b      	ldr	r3, [r3, #24]
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	d00f      	beq.n	8010906 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80108e6:	7dba      	ldrb	r2, [r7, #22]
 80108e8:	68fb      	ldr	r3, [r7, #12]
 80108ea:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80108ee:	7dba      	ldrb	r2, [r7, #22]
 80108f0:	68fb      	ldr	r3, [r7, #12]
 80108f2:	32ae      	adds	r2, #174	@ 0xae
 80108f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80108f8:	699b      	ldr	r3, [r3, #24]
 80108fa:	7afa      	ldrb	r2, [r7, #11]
 80108fc:	4611      	mov	r1, r2
 80108fe:	68f8      	ldr	r0, [r7, #12]
 8010900:	4798      	blx	r3
 8010902:	4603      	mov	r3, r0
 8010904:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8010906:	7dfb      	ldrb	r3, [r7, #23]
 8010908:	2b00      	cmp	r3, #0
 801090a:	d001      	beq.n	8010910 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 801090c:	7dfb      	ldrb	r3, [r7, #23]
 801090e:	e000      	b.n	8010912 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8010910:	2300      	movs	r3, #0
}
 8010912:	4618      	mov	r0, r3
 8010914:	3718      	adds	r7, #24
 8010916:	46bd      	mov	sp, r7
 8010918:	bd80      	pop	{r7, pc}

0801091a <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801091a:	b580      	push	{r7, lr}
 801091c:	b086      	sub	sp, #24
 801091e:	af00      	add	r7, sp, #0
 8010920:	60f8      	str	r0, [r7, #12]
 8010922:	460b      	mov	r3, r1
 8010924:	607a      	str	r2, [r7, #4]
 8010926:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8010928:	7afb      	ldrb	r3, [r7, #11]
 801092a:	2b00      	cmp	r3, #0
 801092c:	d16f      	bne.n	8010a0e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 801092e:	68fb      	ldr	r3, [r7, #12]
 8010930:	3314      	adds	r3, #20
 8010932:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8010934:	68fb      	ldr	r3, [r7, #12]
 8010936:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 801093a:	2b02      	cmp	r3, #2
 801093c:	d15a      	bne.n	80109f4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 801093e:	693b      	ldr	r3, [r7, #16]
 8010940:	689a      	ldr	r2, [r3, #8]
 8010942:	693b      	ldr	r3, [r7, #16]
 8010944:	68db      	ldr	r3, [r3, #12]
 8010946:	429a      	cmp	r2, r3
 8010948:	d914      	bls.n	8010974 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801094a:	693b      	ldr	r3, [r7, #16]
 801094c:	689a      	ldr	r2, [r3, #8]
 801094e:	693b      	ldr	r3, [r7, #16]
 8010950:	68db      	ldr	r3, [r3, #12]
 8010952:	1ad2      	subs	r2, r2, r3
 8010954:	693b      	ldr	r3, [r7, #16]
 8010956:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8010958:	693b      	ldr	r3, [r7, #16]
 801095a:	689b      	ldr	r3, [r3, #8]
 801095c:	461a      	mov	r2, r3
 801095e:	6879      	ldr	r1, [r7, #4]
 8010960:	68f8      	ldr	r0, [r7, #12]
 8010962:	f001 f8bc 	bl	8011ade <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010966:	2300      	movs	r3, #0
 8010968:	2200      	movs	r2, #0
 801096a:	2100      	movs	r1, #0
 801096c:	68f8      	ldr	r0, [r7, #12]
 801096e:	f001 fe1f 	bl	80125b0 <USBD_LL_PrepareReceive>
 8010972:	e03f      	b.n	80109f4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8010974:	693b      	ldr	r3, [r7, #16]
 8010976:	68da      	ldr	r2, [r3, #12]
 8010978:	693b      	ldr	r3, [r7, #16]
 801097a:	689b      	ldr	r3, [r3, #8]
 801097c:	429a      	cmp	r2, r3
 801097e:	d11c      	bne.n	80109ba <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8010980:	693b      	ldr	r3, [r7, #16]
 8010982:	685a      	ldr	r2, [r3, #4]
 8010984:	693b      	ldr	r3, [r7, #16]
 8010986:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8010988:	429a      	cmp	r2, r3
 801098a:	d316      	bcc.n	80109ba <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 801098c:	693b      	ldr	r3, [r7, #16]
 801098e:	685a      	ldr	r2, [r3, #4]
 8010990:	68fb      	ldr	r3, [r7, #12]
 8010992:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8010996:	429a      	cmp	r2, r3
 8010998:	d20f      	bcs.n	80109ba <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801099a:	2200      	movs	r2, #0
 801099c:	2100      	movs	r1, #0
 801099e:	68f8      	ldr	r0, [r7, #12]
 80109a0:	f001 f89d 	bl	8011ade <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80109a4:	68fb      	ldr	r3, [r7, #12]
 80109a6:	2200      	movs	r2, #0
 80109a8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80109ac:	2300      	movs	r3, #0
 80109ae:	2200      	movs	r2, #0
 80109b0:	2100      	movs	r1, #0
 80109b2:	68f8      	ldr	r0, [r7, #12]
 80109b4:	f001 fdfc 	bl	80125b0 <USBD_LL_PrepareReceive>
 80109b8:	e01c      	b.n	80109f4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80109ba:	68fb      	ldr	r3, [r7, #12]
 80109bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80109c0:	b2db      	uxtb	r3, r3
 80109c2:	2b03      	cmp	r3, #3
 80109c4:	d10f      	bne.n	80109e6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80109c6:	68fb      	ldr	r3, [r7, #12]
 80109c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80109cc:	68db      	ldr	r3, [r3, #12]
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	d009      	beq.n	80109e6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80109d2:	68fb      	ldr	r3, [r7, #12]
 80109d4:	2200      	movs	r2, #0
 80109d6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80109da:	68fb      	ldr	r3, [r7, #12]
 80109dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80109e0:	68db      	ldr	r3, [r3, #12]
 80109e2:	68f8      	ldr	r0, [r7, #12]
 80109e4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80109e6:	2180      	movs	r1, #128	@ 0x80
 80109e8:	68f8      	ldr	r0, [r7, #12]
 80109ea:	f001 fd37 	bl	801245c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80109ee:	68f8      	ldr	r0, [r7, #12]
 80109f0:	f001 f8c7 	bl	8011b82 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80109f4:	68fb      	ldr	r3, [r7, #12]
 80109f6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	d03a      	beq.n	8010a74 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80109fe:	68f8      	ldr	r0, [r7, #12]
 8010a00:	f7ff fe42 	bl	8010688 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8010a04:	68fb      	ldr	r3, [r7, #12]
 8010a06:	2200      	movs	r2, #0
 8010a08:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8010a0c:	e032      	b.n	8010a74 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8010a0e:	7afb      	ldrb	r3, [r7, #11]
 8010a10:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8010a14:	b2db      	uxtb	r3, r3
 8010a16:	4619      	mov	r1, r3
 8010a18:	68f8      	ldr	r0, [r7, #12]
 8010a1a:	f000 f985 	bl	8010d28 <USBD_CoreFindEP>
 8010a1e:	4603      	mov	r3, r0
 8010a20:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010a22:	7dfb      	ldrb	r3, [r7, #23]
 8010a24:	2bff      	cmp	r3, #255	@ 0xff
 8010a26:	d025      	beq.n	8010a74 <USBD_LL_DataInStage+0x15a>
 8010a28:	7dfb      	ldrb	r3, [r7, #23]
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	d122      	bne.n	8010a74 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010a2e:	68fb      	ldr	r3, [r7, #12]
 8010a30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010a34:	b2db      	uxtb	r3, r3
 8010a36:	2b03      	cmp	r3, #3
 8010a38:	d11c      	bne.n	8010a74 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8010a3a:	7dfa      	ldrb	r2, [r7, #23]
 8010a3c:	68fb      	ldr	r3, [r7, #12]
 8010a3e:	32ae      	adds	r2, #174	@ 0xae
 8010a40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010a44:	695b      	ldr	r3, [r3, #20]
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	d014      	beq.n	8010a74 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8010a4a:	7dfa      	ldrb	r2, [r7, #23]
 8010a4c:	68fb      	ldr	r3, [r7, #12]
 8010a4e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8010a52:	7dfa      	ldrb	r2, [r7, #23]
 8010a54:	68fb      	ldr	r3, [r7, #12]
 8010a56:	32ae      	adds	r2, #174	@ 0xae
 8010a58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010a5c:	695b      	ldr	r3, [r3, #20]
 8010a5e:	7afa      	ldrb	r2, [r7, #11]
 8010a60:	4611      	mov	r1, r2
 8010a62:	68f8      	ldr	r0, [r7, #12]
 8010a64:	4798      	blx	r3
 8010a66:	4603      	mov	r3, r0
 8010a68:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8010a6a:	7dbb      	ldrb	r3, [r7, #22]
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d001      	beq.n	8010a74 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8010a70:	7dbb      	ldrb	r3, [r7, #22]
 8010a72:	e000      	b.n	8010a76 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8010a74:	2300      	movs	r3, #0
}
 8010a76:	4618      	mov	r0, r3
 8010a78:	3718      	adds	r7, #24
 8010a7a:	46bd      	mov	sp, r7
 8010a7c:	bd80      	pop	{r7, pc}

08010a7e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8010a7e:	b580      	push	{r7, lr}
 8010a80:	b084      	sub	sp, #16
 8010a82:	af00      	add	r7, sp, #0
 8010a84:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8010a86:	2300      	movs	r3, #0
 8010a88:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	2201      	movs	r2, #1
 8010a8e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	2200      	movs	r2, #0
 8010a96:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	2200      	movs	r2, #0
 8010a9e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	2200      	movs	r2, #0
 8010aa4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	2200      	movs	r2, #0
 8010aac:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	d014      	beq.n	8010ae4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010ac0:	685b      	ldr	r3, [r3, #4]
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	d00e      	beq.n	8010ae4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010acc:	685b      	ldr	r3, [r3, #4]
 8010ace:	687a      	ldr	r2, [r7, #4]
 8010ad0:	6852      	ldr	r2, [r2, #4]
 8010ad2:	b2d2      	uxtb	r2, r2
 8010ad4:	4611      	mov	r1, r2
 8010ad6:	6878      	ldr	r0, [r7, #4]
 8010ad8:	4798      	blx	r3
 8010ada:	4603      	mov	r3, r0
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	d001      	beq.n	8010ae4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8010ae0:	2303      	movs	r3, #3
 8010ae2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010ae4:	2340      	movs	r3, #64	@ 0x40
 8010ae6:	2200      	movs	r2, #0
 8010ae8:	2100      	movs	r1, #0
 8010aea:	6878      	ldr	r0, [r7, #4]
 8010aec:	f001 fc71 	bl	80123d2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	2201      	movs	r2, #1
 8010af4:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	2240      	movs	r2, #64	@ 0x40
 8010afc:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010b00:	2340      	movs	r3, #64	@ 0x40
 8010b02:	2200      	movs	r2, #0
 8010b04:	2180      	movs	r1, #128	@ 0x80
 8010b06:	6878      	ldr	r0, [r7, #4]
 8010b08:	f001 fc63 	bl	80123d2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	2201      	movs	r2, #1
 8010b10:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	2240      	movs	r2, #64	@ 0x40
 8010b16:	621a      	str	r2, [r3, #32]

  return ret;
 8010b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b1a:	4618      	mov	r0, r3
 8010b1c:	3710      	adds	r7, #16
 8010b1e:	46bd      	mov	sp, r7
 8010b20:	bd80      	pop	{r7, pc}

08010b22 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8010b22:	b480      	push	{r7}
 8010b24:	b083      	sub	sp, #12
 8010b26:	af00      	add	r7, sp, #0
 8010b28:	6078      	str	r0, [r7, #4]
 8010b2a:	460b      	mov	r3, r1
 8010b2c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	78fa      	ldrb	r2, [r7, #3]
 8010b32:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8010b34:	2300      	movs	r3, #0
}
 8010b36:	4618      	mov	r0, r3
 8010b38:	370c      	adds	r7, #12
 8010b3a:	46bd      	mov	sp, r7
 8010b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b40:	4770      	bx	lr

08010b42 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8010b42:	b480      	push	{r7}
 8010b44:	b083      	sub	sp, #12
 8010b46:	af00      	add	r7, sp, #0
 8010b48:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010b50:	b2db      	uxtb	r3, r3
 8010b52:	2b04      	cmp	r3, #4
 8010b54:	d006      	beq.n	8010b64 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010b5c:	b2da      	uxtb	r2, r3
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	2204      	movs	r2, #4
 8010b68:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8010b6c:	2300      	movs	r3, #0
}
 8010b6e:	4618      	mov	r0, r3
 8010b70:	370c      	adds	r7, #12
 8010b72:	46bd      	mov	sp, r7
 8010b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b78:	4770      	bx	lr

08010b7a <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8010b7a:	b480      	push	{r7}
 8010b7c:	b083      	sub	sp, #12
 8010b7e:	af00      	add	r7, sp, #0
 8010b80:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010b88:	b2db      	uxtb	r3, r3
 8010b8a:	2b04      	cmp	r3, #4
 8010b8c:	d106      	bne.n	8010b9c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8010b94:	b2da      	uxtb	r2, r3
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8010b9c:	2300      	movs	r3, #0
}
 8010b9e:	4618      	mov	r0, r3
 8010ba0:	370c      	adds	r7, #12
 8010ba2:	46bd      	mov	sp, r7
 8010ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ba8:	4770      	bx	lr

08010baa <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8010baa:	b580      	push	{r7, lr}
 8010bac:	b082      	sub	sp, #8
 8010bae:	af00      	add	r7, sp, #0
 8010bb0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010bb8:	b2db      	uxtb	r3, r3
 8010bba:	2b03      	cmp	r3, #3
 8010bbc:	d110      	bne.n	8010be0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	d00b      	beq.n	8010be0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010bce:	69db      	ldr	r3, [r3, #28]
 8010bd0:	2b00      	cmp	r3, #0
 8010bd2:	d005      	beq.n	8010be0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010bda:	69db      	ldr	r3, [r3, #28]
 8010bdc:	6878      	ldr	r0, [r7, #4]
 8010bde:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8010be0:	2300      	movs	r3, #0
}
 8010be2:	4618      	mov	r0, r3
 8010be4:	3708      	adds	r7, #8
 8010be6:	46bd      	mov	sp, r7
 8010be8:	bd80      	pop	{r7, pc}

08010bea <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8010bea:	b580      	push	{r7, lr}
 8010bec:	b082      	sub	sp, #8
 8010bee:	af00      	add	r7, sp, #0
 8010bf0:	6078      	str	r0, [r7, #4]
 8010bf2:	460b      	mov	r3, r1
 8010bf4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	32ae      	adds	r2, #174	@ 0xae
 8010c00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	d101      	bne.n	8010c0c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8010c08:	2303      	movs	r3, #3
 8010c0a:	e01c      	b.n	8010c46 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010c12:	b2db      	uxtb	r3, r3
 8010c14:	2b03      	cmp	r3, #3
 8010c16:	d115      	bne.n	8010c44 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	32ae      	adds	r2, #174	@ 0xae
 8010c22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010c26:	6a1b      	ldr	r3, [r3, #32]
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	d00b      	beq.n	8010c44 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	32ae      	adds	r2, #174	@ 0xae
 8010c36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010c3a:	6a1b      	ldr	r3, [r3, #32]
 8010c3c:	78fa      	ldrb	r2, [r7, #3]
 8010c3e:	4611      	mov	r1, r2
 8010c40:	6878      	ldr	r0, [r7, #4]
 8010c42:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8010c44:	2300      	movs	r3, #0
}
 8010c46:	4618      	mov	r0, r3
 8010c48:	3708      	adds	r7, #8
 8010c4a:	46bd      	mov	sp, r7
 8010c4c:	bd80      	pop	{r7, pc}

08010c4e <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8010c4e:	b580      	push	{r7, lr}
 8010c50:	b082      	sub	sp, #8
 8010c52:	af00      	add	r7, sp, #0
 8010c54:	6078      	str	r0, [r7, #4]
 8010c56:	460b      	mov	r3, r1
 8010c58:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	32ae      	adds	r2, #174	@ 0xae
 8010c64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	d101      	bne.n	8010c70 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8010c6c:	2303      	movs	r3, #3
 8010c6e:	e01c      	b.n	8010caa <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010c76:	b2db      	uxtb	r3, r3
 8010c78:	2b03      	cmp	r3, #3
 8010c7a:	d115      	bne.n	8010ca8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	32ae      	adds	r2, #174	@ 0xae
 8010c86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	d00b      	beq.n	8010ca8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	32ae      	adds	r2, #174	@ 0xae
 8010c9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010ca0:	78fa      	ldrb	r2, [r7, #3]
 8010ca2:	4611      	mov	r1, r2
 8010ca4:	6878      	ldr	r0, [r7, #4]
 8010ca6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8010ca8:	2300      	movs	r3, #0
}
 8010caa:	4618      	mov	r0, r3
 8010cac:	3708      	adds	r7, #8
 8010cae:	46bd      	mov	sp, r7
 8010cb0:	bd80      	pop	{r7, pc}

08010cb2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8010cb2:	b480      	push	{r7}
 8010cb4:	b083      	sub	sp, #12
 8010cb6:	af00      	add	r7, sp, #0
 8010cb8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010cba:	2300      	movs	r3, #0
}
 8010cbc:	4618      	mov	r0, r3
 8010cbe:	370c      	adds	r7, #12
 8010cc0:	46bd      	mov	sp, r7
 8010cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cc6:	4770      	bx	lr

08010cc8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8010cc8:	b580      	push	{r7, lr}
 8010cca:	b084      	sub	sp, #16
 8010ccc:	af00      	add	r7, sp, #0
 8010cce:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8010cd0:	2300      	movs	r3, #0
 8010cd2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	2201      	movs	r2, #1
 8010cd8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010ce2:	2b00      	cmp	r3, #0
 8010ce4:	d00e      	beq.n	8010d04 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010cec:	685b      	ldr	r3, [r3, #4]
 8010cee:	687a      	ldr	r2, [r7, #4]
 8010cf0:	6852      	ldr	r2, [r2, #4]
 8010cf2:	b2d2      	uxtb	r2, r2
 8010cf4:	4611      	mov	r1, r2
 8010cf6:	6878      	ldr	r0, [r7, #4]
 8010cf8:	4798      	blx	r3
 8010cfa:	4603      	mov	r3, r0
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d001      	beq.n	8010d04 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8010d00:	2303      	movs	r3, #3
 8010d02:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8010d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8010d06:	4618      	mov	r0, r3
 8010d08:	3710      	adds	r7, #16
 8010d0a:	46bd      	mov	sp, r7
 8010d0c:	bd80      	pop	{r7, pc}

08010d0e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8010d0e:	b480      	push	{r7}
 8010d10:	b083      	sub	sp, #12
 8010d12:	af00      	add	r7, sp, #0
 8010d14:	6078      	str	r0, [r7, #4]
 8010d16:	460b      	mov	r3, r1
 8010d18:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8010d1a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8010d1c:	4618      	mov	r0, r3
 8010d1e:	370c      	adds	r7, #12
 8010d20:	46bd      	mov	sp, r7
 8010d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d26:	4770      	bx	lr

08010d28 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8010d28:	b480      	push	{r7}
 8010d2a:	b083      	sub	sp, #12
 8010d2c:	af00      	add	r7, sp, #0
 8010d2e:	6078      	str	r0, [r7, #4]
 8010d30:	460b      	mov	r3, r1
 8010d32:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8010d34:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8010d36:	4618      	mov	r0, r3
 8010d38:	370c      	adds	r7, #12
 8010d3a:	46bd      	mov	sp, r7
 8010d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d40:	4770      	bx	lr

08010d42 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8010d42:	b580      	push	{r7, lr}
 8010d44:	b086      	sub	sp, #24
 8010d46:	af00      	add	r7, sp, #0
 8010d48:	6078      	str	r0, [r7, #4]
 8010d4a:	460b      	mov	r3, r1
 8010d4c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8010d56:	2300      	movs	r3, #0
 8010d58:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8010d5a:	68fb      	ldr	r3, [r7, #12]
 8010d5c:	885b      	ldrh	r3, [r3, #2]
 8010d5e:	b29b      	uxth	r3, r3
 8010d60:	68fa      	ldr	r2, [r7, #12]
 8010d62:	7812      	ldrb	r2, [r2, #0]
 8010d64:	4293      	cmp	r3, r2
 8010d66:	d91f      	bls.n	8010da8 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8010d68:	68fb      	ldr	r3, [r7, #12]
 8010d6a:	781b      	ldrb	r3, [r3, #0]
 8010d6c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8010d6e:	e013      	b.n	8010d98 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8010d70:	f107 030a 	add.w	r3, r7, #10
 8010d74:	4619      	mov	r1, r3
 8010d76:	6978      	ldr	r0, [r7, #20]
 8010d78:	f000 f81b 	bl	8010db2 <USBD_GetNextDesc>
 8010d7c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8010d7e:	697b      	ldr	r3, [r7, #20]
 8010d80:	785b      	ldrb	r3, [r3, #1]
 8010d82:	2b05      	cmp	r3, #5
 8010d84:	d108      	bne.n	8010d98 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8010d86:	697b      	ldr	r3, [r7, #20]
 8010d88:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8010d8a:	693b      	ldr	r3, [r7, #16]
 8010d8c:	789b      	ldrb	r3, [r3, #2]
 8010d8e:	78fa      	ldrb	r2, [r7, #3]
 8010d90:	429a      	cmp	r2, r3
 8010d92:	d008      	beq.n	8010da6 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8010d94:	2300      	movs	r3, #0
 8010d96:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8010d98:	68fb      	ldr	r3, [r7, #12]
 8010d9a:	885b      	ldrh	r3, [r3, #2]
 8010d9c:	b29a      	uxth	r2, r3
 8010d9e:	897b      	ldrh	r3, [r7, #10]
 8010da0:	429a      	cmp	r2, r3
 8010da2:	d8e5      	bhi.n	8010d70 <USBD_GetEpDesc+0x2e>
 8010da4:	e000      	b.n	8010da8 <USBD_GetEpDesc+0x66>
          break;
 8010da6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8010da8:	693b      	ldr	r3, [r7, #16]
}
 8010daa:	4618      	mov	r0, r3
 8010dac:	3718      	adds	r7, #24
 8010dae:	46bd      	mov	sp, r7
 8010db0:	bd80      	pop	{r7, pc}

08010db2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8010db2:	b480      	push	{r7}
 8010db4:	b085      	sub	sp, #20
 8010db6:	af00      	add	r7, sp, #0
 8010db8:	6078      	str	r0, [r7, #4]
 8010dba:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8010dc0:	683b      	ldr	r3, [r7, #0]
 8010dc2:	881b      	ldrh	r3, [r3, #0]
 8010dc4:	68fa      	ldr	r2, [r7, #12]
 8010dc6:	7812      	ldrb	r2, [r2, #0]
 8010dc8:	4413      	add	r3, r2
 8010dca:	b29a      	uxth	r2, r3
 8010dcc:	683b      	ldr	r3, [r7, #0]
 8010dce:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8010dd0:	68fb      	ldr	r3, [r7, #12]
 8010dd2:	781b      	ldrb	r3, [r3, #0]
 8010dd4:	461a      	mov	r2, r3
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	4413      	add	r3, r2
 8010dda:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8010ddc:	68fb      	ldr	r3, [r7, #12]
}
 8010dde:	4618      	mov	r0, r3
 8010de0:	3714      	adds	r7, #20
 8010de2:	46bd      	mov	sp, r7
 8010de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010de8:	4770      	bx	lr

08010dea <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8010dea:	b480      	push	{r7}
 8010dec:	b087      	sub	sp, #28
 8010dee:	af00      	add	r7, sp, #0
 8010df0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8010df6:	697b      	ldr	r3, [r7, #20]
 8010df8:	781b      	ldrb	r3, [r3, #0]
 8010dfa:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8010dfc:	697b      	ldr	r3, [r7, #20]
 8010dfe:	3301      	adds	r3, #1
 8010e00:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8010e02:	697b      	ldr	r3, [r7, #20]
 8010e04:	781b      	ldrb	r3, [r3, #0]
 8010e06:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8010e08:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8010e0c:	021b      	lsls	r3, r3, #8
 8010e0e:	b21a      	sxth	r2, r3
 8010e10:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010e14:	4313      	orrs	r3, r2
 8010e16:	b21b      	sxth	r3, r3
 8010e18:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8010e1a:	89fb      	ldrh	r3, [r7, #14]
}
 8010e1c:	4618      	mov	r0, r3
 8010e1e:	371c      	adds	r7, #28
 8010e20:	46bd      	mov	sp, r7
 8010e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e26:	4770      	bx	lr

08010e28 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010e28:	b580      	push	{r7, lr}
 8010e2a:	b084      	sub	sp, #16
 8010e2c:	af00      	add	r7, sp, #0
 8010e2e:	6078      	str	r0, [r7, #4]
 8010e30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010e32:	2300      	movs	r3, #0
 8010e34:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010e36:	683b      	ldr	r3, [r7, #0]
 8010e38:	781b      	ldrb	r3, [r3, #0]
 8010e3a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8010e3e:	2b40      	cmp	r3, #64	@ 0x40
 8010e40:	d005      	beq.n	8010e4e <USBD_StdDevReq+0x26>
 8010e42:	2b40      	cmp	r3, #64	@ 0x40
 8010e44:	d857      	bhi.n	8010ef6 <USBD_StdDevReq+0xce>
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	d00f      	beq.n	8010e6a <USBD_StdDevReq+0x42>
 8010e4a:	2b20      	cmp	r3, #32
 8010e4c:	d153      	bne.n	8010ef6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	32ae      	adds	r2, #174	@ 0xae
 8010e58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010e5c:	689b      	ldr	r3, [r3, #8]
 8010e5e:	6839      	ldr	r1, [r7, #0]
 8010e60:	6878      	ldr	r0, [r7, #4]
 8010e62:	4798      	blx	r3
 8010e64:	4603      	mov	r3, r0
 8010e66:	73fb      	strb	r3, [r7, #15]
      break;
 8010e68:	e04a      	b.n	8010f00 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8010e6a:	683b      	ldr	r3, [r7, #0]
 8010e6c:	785b      	ldrb	r3, [r3, #1]
 8010e6e:	2b09      	cmp	r3, #9
 8010e70:	d83b      	bhi.n	8010eea <USBD_StdDevReq+0xc2>
 8010e72:	a201      	add	r2, pc, #4	@ (adr r2, 8010e78 <USBD_StdDevReq+0x50>)
 8010e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e78:	08010ecd 	.word	0x08010ecd
 8010e7c:	08010ee1 	.word	0x08010ee1
 8010e80:	08010eeb 	.word	0x08010eeb
 8010e84:	08010ed7 	.word	0x08010ed7
 8010e88:	08010eeb 	.word	0x08010eeb
 8010e8c:	08010eab 	.word	0x08010eab
 8010e90:	08010ea1 	.word	0x08010ea1
 8010e94:	08010eeb 	.word	0x08010eeb
 8010e98:	08010ec3 	.word	0x08010ec3
 8010e9c:	08010eb5 	.word	0x08010eb5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8010ea0:	6839      	ldr	r1, [r7, #0]
 8010ea2:	6878      	ldr	r0, [r7, #4]
 8010ea4:	f000 fa3c 	bl	8011320 <USBD_GetDescriptor>
          break;
 8010ea8:	e024      	b.n	8010ef4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8010eaa:	6839      	ldr	r1, [r7, #0]
 8010eac:	6878      	ldr	r0, [r7, #4]
 8010eae:	f000 fba1 	bl	80115f4 <USBD_SetAddress>
          break;
 8010eb2:	e01f      	b.n	8010ef4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8010eb4:	6839      	ldr	r1, [r7, #0]
 8010eb6:	6878      	ldr	r0, [r7, #4]
 8010eb8:	f000 fbe0 	bl	801167c <USBD_SetConfig>
 8010ebc:	4603      	mov	r3, r0
 8010ebe:	73fb      	strb	r3, [r7, #15]
          break;
 8010ec0:	e018      	b.n	8010ef4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8010ec2:	6839      	ldr	r1, [r7, #0]
 8010ec4:	6878      	ldr	r0, [r7, #4]
 8010ec6:	f000 fc83 	bl	80117d0 <USBD_GetConfig>
          break;
 8010eca:	e013      	b.n	8010ef4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8010ecc:	6839      	ldr	r1, [r7, #0]
 8010ece:	6878      	ldr	r0, [r7, #4]
 8010ed0:	f000 fcb4 	bl	801183c <USBD_GetStatus>
          break;
 8010ed4:	e00e      	b.n	8010ef4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8010ed6:	6839      	ldr	r1, [r7, #0]
 8010ed8:	6878      	ldr	r0, [r7, #4]
 8010eda:	f000 fce3 	bl	80118a4 <USBD_SetFeature>
          break;
 8010ede:	e009      	b.n	8010ef4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8010ee0:	6839      	ldr	r1, [r7, #0]
 8010ee2:	6878      	ldr	r0, [r7, #4]
 8010ee4:	f000 fd07 	bl	80118f6 <USBD_ClrFeature>
          break;
 8010ee8:	e004      	b.n	8010ef4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8010eea:	6839      	ldr	r1, [r7, #0]
 8010eec:	6878      	ldr	r0, [r7, #4]
 8010eee:	f000 fd5e 	bl	80119ae <USBD_CtlError>
          break;
 8010ef2:	bf00      	nop
      }
      break;
 8010ef4:	e004      	b.n	8010f00 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8010ef6:	6839      	ldr	r1, [r7, #0]
 8010ef8:	6878      	ldr	r0, [r7, #4]
 8010efa:	f000 fd58 	bl	80119ae <USBD_CtlError>
      break;
 8010efe:	bf00      	nop
  }

  return ret;
 8010f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f02:	4618      	mov	r0, r3
 8010f04:	3710      	adds	r7, #16
 8010f06:	46bd      	mov	sp, r7
 8010f08:	bd80      	pop	{r7, pc}
 8010f0a:	bf00      	nop

08010f0c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010f0c:	b580      	push	{r7, lr}
 8010f0e:	b084      	sub	sp, #16
 8010f10:	af00      	add	r7, sp, #0
 8010f12:	6078      	str	r0, [r7, #4]
 8010f14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010f16:	2300      	movs	r3, #0
 8010f18:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010f1a:	683b      	ldr	r3, [r7, #0]
 8010f1c:	781b      	ldrb	r3, [r3, #0]
 8010f1e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8010f22:	2b40      	cmp	r3, #64	@ 0x40
 8010f24:	d005      	beq.n	8010f32 <USBD_StdItfReq+0x26>
 8010f26:	2b40      	cmp	r3, #64	@ 0x40
 8010f28:	d852      	bhi.n	8010fd0 <USBD_StdItfReq+0xc4>
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	d001      	beq.n	8010f32 <USBD_StdItfReq+0x26>
 8010f2e:	2b20      	cmp	r3, #32
 8010f30:	d14e      	bne.n	8010fd0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010f38:	b2db      	uxtb	r3, r3
 8010f3a:	3b01      	subs	r3, #1
 8010f3c:	2b02      	cmp	r3, #2
 8010f3e:	d840      	bhi.n	8010fc2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8010f40:	683b      	ldr	r3, [r7, #0]
 8010f42:	889b      	ldrh	r3, [r3, #4]
 8010f44:	b2db      	uxtb	r3, r3
 8010f46:	2b01      	cmp	r3, #1
 8010f48:	d836      	bhi.n	8010fb8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8010f4a:	683b      	ldr	r3, [r7, #0]
 8010f4c:	889b      	ldrh	r3, [r3, #4]
 8010f4e:	b2db      	uxtb	r3, r3
 8010f50:	4619      	mov	r1, r3
 8010f52:	6878      	ldr	r0, [r7, #4]
 8010f54:	f7ff fedb 	bl	8010d0e <USBD_CoreFindIF>
 8010f58:	4603      	mov	r3, r0
 8010f5a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010f5c:	7bbb      	ldrb	r3, [r7, #14]
 8010f5e:	2bff      	cmp	r3, #255	@ 0xff
 8010f60:	d01d      	beq.n	8010f9e <USBD_StdItfReq+0x92>
 8010f62:	7bbb      	ldrb	r3, [r7, #14]
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	d11a      	bne.n	8010f9e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8010f68:	7bba      	ldrb	r2, [r7, #14]
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	32ae      	adds	r2, #174	@ 0xae
 8010f6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010f72:	689b      	ldr	r3, [r3, #8]
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d00f      	beq.n	8010f98 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8010f78:	7bba      	ldrb	r2, [r7, #14]
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8010f80:	7bba      	ldrb	r2, [r7, #14]
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	32ae      	adds	r2, #174	@ 0xae
 8010f86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010f8a:	689b      	ldr	r3, [r3, #8]
 8010f8c:	6839      	ldr	r1, [r7, #0]
 8010f8e:	6878      	ldr	r0, [r7, #4]
 8010f90:	4798      	blx	r3
 8010f92:	4603      	mov	r3, r0
 8010f94:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8010f96:	e004      	b.n	8010fa2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8010f98:	2303      	movs	r3, #3
 8010f9a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8010f9c:	e001      	b.n	8010fa2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8010f9e:	2303      	movs	r3, #3
 8010fa0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8010fa2:	683b      	ldr	r3, [r7, #0]
 8010fa4:	88db      	ldrh	r3, [r3, #6]
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	d110      	bne.n	8010fcc <USBD_StdItfReq+0xc0>
 8010faa:	7bfb      	ldrb	r3, [r7, #15]
 8010fac:	2b00      	cmp	r3, #0
 8010fae:	d10d      	bne.n	8010fcc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8010fb0:	6878      	ldr	r0, [r7, #4]
 8010fb2:	f000 fdd3 	bl	8011b5c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8010fb6:	e009      	b.n	8010fcc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8010fb8:	6839      	ldr	r1, [r7, #0]
 8010fba:	6878      	ldr	r0, [r7, #4]
 8010fbc:	f000 fcf7 	bl	80119ae <USBD_CtlError>
          break;
 8010fc0:	e004      	b.n	8010fcc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8010fc2:	6839      	ldr	r1, [r7, #0]
 8010fc4:	6878      	ldr	r0, [r7, #4]
 8010fc6:	f000 fcf2 	bl	80119ae <USBD_CtlError>
          break;
 8010fca:	e000      	b.n	8010fce <USBD_StdItfReq+0xc2>
          break;
 8010fcc:	bf00      	nop
      }
      break;
 8010fce:	e004      	b.n	8010fda <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8010fd0:	6839      	ldr	r1, [r7, #0]
 8010fd2:	6878      	ldr	r0, [r7, #4]
 8010fd4:	f000 fceb 	bl	80119ae <USBD_CtlError>
      break;
 8010fd8:	bf00      	nop
  }

  return ret;
 8010fda:	7bfb      	ldrb	r3, [r7, #15]
}
 8010fdc:	4618      	mov	r0, r3
 8010fde:	3710      	adds	r7, #16
 8010fe0:	46bd      	mov	sp, r7
 8010fe2:	bd80      	pop	{r7, pc}

08010fe4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010fe4:	b580      	push	{r7, lr}
 8010fe6:	b084      	sub	sp, #16
 8010fe8:	af00      	add	r7, sp, #0
 8010fea:	6078      	str	r0, [r7, #4]
 8010fec:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8010fee:	2300      	movs	r3, #0
 8010ff0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8010ff2:	683b      	ldr	r3, [r7, #0]
 8010ff4:	889b      	ldrh	r3, [r3, #4]
 8010ff6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010ff8:	683b      	ldr	r3, [r7, #0]
 8010ffa:	781b      	ldrb	r3, [r3, #0]
 8010ffc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8011000:	2b40      	cmp	r3, #64	@ 0x40
 8011002:	d007      	beq.n	8011014 <USBD_StdEPReq+0x30>
 8011004:	2b40      	cmp	r3, #64	@ 0x40
 8011006:	f200 817f 	bhi.w	8011308 <USBD_StdEPReq+0x324>
 801100a:	2b00      	cmp	r3, #0
 801100c:	d02a      	beq.n	8011064 <USBD_StdEPReq+0x80>
 801100e:	2b20      	cmp	r3, #32
 8011010:	f040 817a 	bne.w	8011308 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8011014:	7bbb      	ldrb	r3, [r7, #14]
 8011016:	4619      	mov	r1, r3
 8011018:	6878      	ldr	r0, [r7, #4]
 801101a:	f7ff fe85 	bl	8010d28 <USBD_CoreFindEP>
 801101e:	4603      	mov	r3, r0
 8011020:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011022:	7b7b      	ldrb	r3, [r7, #13]
 8011024:	2bff      	cmp	r3, #255	@ 0xff
 8011026:	f000 8174 	beq.w	8011312 <USBD_StdEPReq+0x32e>
 801102a:	7b7b      	ldrb	r3, [r7, #13]
 801102c:	2b00      	cmp	r3, #0
 801102e:	f040 8170 	bne.w	8011312 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8011032:	7b7a      	ldrb	r2, [r7, #13]
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 801103a:	7b7a      	ldrb	r2, [r7, #13]
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	32ae      	adds	r2, #174	@ 0xae
 8011040:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011044:	689b      	ldr	r3, [r3, #8]
 8011046:	2b00      	cmp	r3, #0
 8011048:	f000 8163 	beq.w	8011312 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 801104c:	7b7a      	ldrb	r2, [r7, #13]
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	32ae      	adds	r2, #174	@ 0xae
 8011052:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011056:	689b      	ldr	r3, [r3, #8]
 8011058:	6839      	ldr	r1, [r7, #0]
 801105a:	6878      	ldr	r0, [r7, #4]
 801105c:	4798      	blx	r3
 801105e:	4603      	mov	r3, r0
 8011060:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8011062:	e156      	b.n	8011312 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011064:	683b      	ldr	r3, [r7, #0]
 8011066:	785b      	ldrb	r3, [r3, #1]
 8011068:	2b03      	cmp	r3, #3
 801106a:	d008      	beq.n	801107e <USBD_StdEPReq+0x9a>
 801106c:	2b03      	cmp	r3, #3
 801106e:	f300 8145 	bgt.w	80112fc <USBD_StdEPReq+0x318>
 8011072:	2b00      	cmp	r3, #0
 8011074:	f000 809b 	beq.w	80111ae <USBD_StdEPReq+0x1ca>
 8011078:	2b01      	cmp	r3, #1
 801107a:	d03c      	beq.n	80110f6 <USBD_StdEPReq+0x112>
 801107c:	e13e      	b.n	80112fc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011084:	b2db      	uxtb	r3, r3
 8011086:	2b02      	cmp	r3, #2
 8011088:	d002      	beq.n	8011090 <USBD_StdEPReq+0xac>
 801108a:	2b03      	cmp	r3, #3
 801108c:	d016      	beq.n	80110bc <USBD_StdEPReq+0xd8>
 801108e:	e02c      	b.n	80110ea <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011090:	7bbb      	ldrb	r3, [r7, #14]
 8011092:	2b00      	cmp	r3, #0
 8011094:	d00d      	beq.n	80110b2 <USBD_StdEPReq+0xce>
 8011096:	7bbb      	ldrb	r3, [r7, #14]
 8011098:	2b80      	cmp	r3, #128	@ 0x80
 801109a:	d00a      	beq.n	80110b2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801109c:	7bbb      	ldrb	r3, [r7, #14]
 801109e:	4619      	mov	r1, r3
 80110a0:	6878      	ldr	r0, [r7, #4]
 80110a2:	f001 f9db 	bl	801245c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80110a6:	2180      	movs	r1, #128	@ 0x80
 80110a8:	6878      	ldr	r0, [r7, #4]
 80110aa:	f001 f9d7 	bl	801245c <USBD_LL_StallEP>
 80110ae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80110b0:	e020      	b.n	80110f4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80110b2:	6839      	ldr	r1, [r7, #0]
 80110b4:	6878      	ldr	r0, [r7, #4]
 80110b6:	f000 fc7a 	bl	80119ae <USBD_CtlError>
              break;
 80110ba:	e01b      	b.n	80110f4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80110bc:	683b      	ldr	r3, [r7, #0]
 80110be:	885b      	ldrh	r3, [r3, #2]
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	d10e      	bne.n	80110e2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80110c4:	7bbb      	ldrb	r3, [r7, #14]
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d00b      	beq.n	80110e2 <USBD_StdEPReq+0xfe>
 80110ca:	7bbb      	ldrb	r3, [r7, #14]
 80110cc:	2b80      	cmp	r3, #128	@ 0x80
 80110ce:	d008      	beq.n	80110e2 <USBD_StdEPReq+0xfe>
 80110d0:	683b      	ldr	r3, [r7, #0]
 80110d2:	88db      	ldrh	r3, [r3, #6]
 80110d4:	2b00      	cmp	r3, #0
 80110d6:	d104      	bne.n	80110e2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80110d8:	7bbb      	ldrb	r3, [r7, #14]
 80110da:	4619      	mov	r1, r3
 80110dc:	6878      	ldr	r0, [r7, #4]
 80110de:	f001 f9bd 	bl	801245c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80110e2:	6878      	ldr	r0, [r7, #4]
 80110e4:	f000 fd3a 	bl	8011b5c <USBD_CtlSendStatus>

              break;
 80110e8:	e004      	b.n	80110f4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80110ea:	6839      	ldr	r1, [r7, #0]
 80110ec:	6878      	ldr	r0, [r7, #4]
 80110ee:	f000 fc5e 	bl	80119ae <USBD_CtlError>
              break;
 80110f2:	bf00      	nop
          }
          break;
 80110f4:	e107      	b.n	8011306 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80110fc:	b2db      	uxtb	r3, r3
 80110fe:	2b02      	cmp	r3, #2
 8011100:	d002      	beq.n	8011108 <USBD_StdEPReq+0x124>
 8011102:	2b03      	cmp	r3, #3
 8011104:	d016      	beq.n	8011134 <USBD_StdEPReq+0x150>
 8011106:	e04b      	b.n	80111a0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011108:	7bbb      	ldrb	r3, [r7, #14]
 801110a:	2b00      	cmp	r3, #0
 801110c:	d00d      	beq.n	801112a <USBD_StdEPReq+0x146>
 801110e:	7bbb      	ldrb	r3, [r7, #14]
 8011110:	2b80      	cmp	r3, #128	@ 0x80
 8011112:	d00a      	beq.n	801112a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8011114:	7bbb      	ldrb	r3, [r7, #14]
 8011116:	4619      	mov	r1, r3
 8011118:	6878      	ldr	r0, [r7, #4]
 801111a:	f001 f99f 	bl	801245c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801111e:	2180      	movs	r1, #128	@ 0x80
 8011120:	6878      	ldr	r0, [r7, #4]
 8011122:	f001 f99b 	bl	801245c <USBD_LL_StallEP>
 8011126:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8011128:	e040      	b.n	80111ac <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 801112a:	6839      	ldr	r1, [r7, #0]
 801112c:	6878      	ldr	r0, [r7, #4]
 801112e:	f000 fc3e 	bl	80119ae <USBD_CtlError>
              break;
 8011132:	e03b      	b.n	80111ac <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8011134:	683b      	ldr	r3, [r7, #0]
 8011136:	885b      	ldrh	r3, [r3, #2]
 8011138:	2b00      	cmp	r3, #0
 801113a:	d136      	bne.n	80111aa <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801113c:	7bbb      	ldrb	r3, [r7, #14]
 801113e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011142:	2b00      	cmp	r3, #0
 8011144:	d004      	beq.n	8011150 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8011146:	7bbb      	ldrb	r3, [r7, #14]
 8011148:	4619      	mov	r1, r3
 801114a:	6878      	ldr	r0, [r7, #4]
 801114c:	f001 f9a5 	bl	801249a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8011150:	6878      	ldr	r0, [r7, #4]
 8011152:	f000 fd03 	bl	8011b5c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8011156:	7bbb      	ldrb	r3, [r7, #14]
 8011158:	4619      	mov	r1, r3
 801115a:	6878      	ldr	r0, [r7, #4]
 801115c:	f7ff fde4 	bl	8010d28 <USBD_CoreFindEP>
 8011160:	4603      	mov	r3, r0
 8011162:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011164:	7b7b      	ldrb	r3, [r7, #13]
 8011166:	2bff      	cmp	r3, #255	@ 0xff
 8011168:	d01f      	beq.n	80111aa <USBD_StdEPReq+0x1c6>
 801116a:	7b7b      	ldrb	r3, [r7, #13]
 801116c:	2b00      	cmp	r3, #0
 801116e:	d11c      	bne.n	80111aa <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8011170:	7b7a      	ldrb	r2, [r7, #13]
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8011178:	7b7a      	ldrb	r2, [r7, #13]
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	32ae      	adds	r2, #174	@ 0xae
 801117e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011182:	689b      	ldr	r3, [r3, #8]
 8011184:	2b00      	cmp	r3, #0
 8011186:	d010      	beq.n	80111aa <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8011188:	7b7a      	ldrb	r2, [r7, #13]
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	32ae      	adds	r2, #174	@ 0xae
 801118e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011192:	689b      	ldr	r3, [r3, #8]
 8011194:	6839      	ldr	r1, [r7, #0]
 8011196:	6878      	ldr	r0, [r7, #4]
 8011198:	4798      	blx	r3
 801119a:	4603      	mov	r3, r0
 801119c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 801119e:	e004      	b.n	80111aa <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80111a0:	6839      	ldr	r1, [r7, #0]
 80111a2:	6878      	ldr	r0, [r7, #4]
 80111a4:	f000 fc03 	bl	80119ae <USBD_CtlError>
              break;
 80111a8:	e000      	b.n	80111ac <USBD_StdEPReq+0x1c8>
              break;
 80111aa:	bf00      	nop
          }
          break;
 80111ac:	e0ab      	b.n	8011306 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80111b4:	b2db      	uxtb	r3, r3
 80111b6:	2b02      	cmp	r3, #2
 80111b8:	d002      	beq.n	80111c0 <USBD_StdEPReq+0x1dc>
 80111ba:	2b03      	cmp	r3, #3
 80111bc:	d032      	beq.n	8011224 <USBD_StdEPReq+0x240>
 80111be:	e097      	b.n	80112f0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80111c0:	7bbb      	ldrb	r3, [r7, #14]
 80111c2:	2b00      	cmp	r3, #0
 80111c4:	d007      	beq.n	80111d6 <USBD_StdEPReq+0x1f2>
 80111c6:	7bbb      	ldrb	r3, [r7, #14]
 80111c8:	2b80      	cmp	r3, #128	@ 0x80
 80111ca:	d004      	beq.n	80111d6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80111cc:	6839      	ldr	r1, [r7, #0]
 80111ce:	6878      	ldr	r0, [r7, #4]
 80111d0:	f000 fbed 	bl	80119ae <USBD_CtlError>
                break;
 80111d4:	e091      	b.n	80112fa <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80111d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80111da:	2b00      	cmp	r3, #0
 80111dc:	da0b      	bge.n	80111f6 <USBD_StdEPReq+0x212>
 80111de:	7bbb      	ldrb	r3, [r7, #14]
 80111e0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80111e4:	4613      	mov	r3, r2
 80111e6:	009b      	lsls	r3, r3, #2
 80111e8:	4413      	add	r3, r2
 80111ea:	009b      	lsls	r3, r3, #2
 80111ec:	3310      	adds	r3, #16
 80111ee:	687a      	ldr	r2, [r7, #4]
 80111f0:	4413      	add	r3, r2
 80111f2:	3304      	adds	r3, #4
 80111f4:	e00b      	b.n	801120e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80111f6:	7bbb      	ldrb	r3, [r7, #14]
 80111f8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80111fc:	4613      	mov	r3, r2
 80111fe:	009b      	lsls	r3, r3, #2
 8011200:	4413      	add	r3, r2
 8011202:	009b      	lsls	r3, r3, #2
 8011204:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8011208:	687a      	ldr	r2, [r7, #4]
 801120a:	4413      	add	r3, r2
 801120c:	3304      	adds	r3, #4
 801120e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8011210:	68bb      	ldr	r3, [r7, #8]
 8011212:	2200      	movs	r2, #0
 8011214:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011216:	68bb      	ldr	r3, [r7, #8]
 8011218:	2202      	movs	r2, #2
 801121a:	4619      	mov	r1, r3
 801121c:	6878      	ldr	r0, [r7, #4]
 801121e:	f000 fc43 	bl	8011aa8 <USBD_CtlSendData>
              break;
 8011222:	e06a      	b.n	80112fa <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8011224:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011228:	2b00      	cmp	r3, #0
 801122a:	da11      	bge.n	8011250 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801122c:	7bbb      	ldrb	r3, [r7, #14]
 801122e:	f003 020f 	and.w	r2, r3, #15
 8011232:	6879      	ldr	r1, [r7, #4]
 8011234:	4613      	mov	r3, r2
 8011236:	009b      	lsls	r3, r3, #2
 8011238:	4413      	add	r3, r2
 801123a:	009b      	lsls	r3, r3, #2
 801123c:	440b      	add	r3, r1
 801123e:	3324      	adds	r3, #36	@ 0x24
 8011240:	881b      	ldrh	r3, [r3, #0]
 8011242:	2b00      	cmp	r3, #0
 8011244:	d117      	bne.n	8011276 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8011246:	6839      	ldr	r1, [r7, #0]
 8011248:	6878      	ldr	r0, [r7, #4]
 801124a:	f000 fbb0 	bl	80119ae <USBD_CtlError>
                  break;
 801124e:	e054      	b.n	80112fa <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8011250:	7bbb      	ldrb	r3, [r7, #14]
 8011252:	f003 020f 	and.w	r2, r3, #15
 8011256:	6879      	ldr	r1, [r7, #4]
 8011258:	4613      	mov	r3, r2
 801125a:	009b      	lsls	r3, r3, #2
 801125c:	4413      	add	r3, r2
 801125e:	009b      	lsls	r3, r3, #2
 8011260:	440b      	add	r3, r1
 8011262:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8011266:	881b      	ldrh	r3, [r3, #0]
 8011268:	2b00      	cmp	r3, #0
 801126a:	d104      	bne.n	8011276 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 801126c:	6839      	ldr	r1, [r7, #0]
 801126e:	6878      	ldr	r0, [r7, #4]
 8011270:	f000 fb9d 	bl	80119ae <USBD_CtlError>
                  break;
 8011274:	e041      	b.n	80112fa <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011276:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801127a:	2b00      	cmp	r3, #0
 801127c:	da0b      	bge.n	8011296 <USBD_StdEPReq+0x2b2>
 801127e:	7bbb      	ldrb	r3, [r7, #14]
 8011280:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011284:	4613      	mov	r3, r2
 8011286:	009b      	lsls	r3, r3, #2
 8011288:	4413      	add	r3, r2
 801128a:	009b      	lsls	r3, r3, #2
 801128c:	3310      	adds	r3, #16
 801128e:	687a      	ldr	r2, [r7, #4]
 8011290:	4413      	add	r3, r2
 8011292:	3304      	adds	r3, #4
 8011294:	e00b      	b.n	80112ae <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8011296:	7bbb      	ldrb	r3, [r7, #14]
 8011298:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801129c:	4613      	mov	r3, r2
 801129e:	009b      	lsls	r3, r3, #2
 80112a0:	4413      	add	r3, r2
 80112a2:	009b      	lsls	r3, r3, #2
 80112a4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80112a8:	687a      	ldr	r2, [r7, #4]
 80112aa:	4413      	add	r3, r2
 80112ac:	3304      	adds	r3, #4
 80112ae:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80112b0:	7bbb      	ldrb	r3, [r7, #14]
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	d002      	beq.n	80112bc <USBD_StdEPReq+0x2d8>
 80112b6:	7bbb      	ldrb	r3, [r7, #14]
 80112b8:	2b80      	cmp	r3, #128	@ 0x80
 80112ba:	d103      	bne.n	80112c4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80112bc:	68bb      	ldr	r3, [r7, #8]
 80112be:	2200      	movs	r2, #0
 80112c0:	601a      	str	r2, [r3, #0]
 80112c2:	e00e      	b.n	80112e2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80112c4:	7bbb      	ldrb	r3, [r7, #14]
 80112c6:	4619      	mov	r1, r3
 80112c8:	6878      	ldr	r0, [r7, #4]
 80112ca:	f001 f905 	bl	80124d8 <USBD_LL_IsStallEP>
 80112ce:	4603      	mov	r3, r0
 80112d0:	2b00      	cmp	r3, #0
 80112d2:	d003      	beq.n	80112dc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80112d4:	68bb      	ldr	r3, [r7, #8]
 80112d6:	2201      	movs	r2, #1
 80112d8:	601a      	str	r2, [r3, #0]
 80112da:	e002      	b.n	80112e2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80112dc:	68bb      	ldr	r3, [r7, #8]
 80112de:	2200      	movs	r2, #0
 80112e0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80112e2:	68bb      	ldr	r3, [r7, #8]
 80112e4:	2202      	movs	r2, #2
 80112e6:	4619      	mov	r1, r3
 80112e8:	6878      	ldr	r0, [r7, #4]
 80112ea:	f000 fbdd 	bl	8011aa8 <USBD_CtlSendData>
              break;
 80112ee:	e004      	b.n	80112fa <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80112f0:	6839      	ldr	r1, [r7, #0]
 80112f2:	6878      	ldr	r0, [r7, #4]
 80112f4:	f000 fb5b 	bl	80119ae <USBD_CtlError>
              break;
 80112f8:	bf00      	nop
          }
          break;
 80112fa:	e004      	b.n	8011306 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80112fc:	6839      	ldr	r1, [r7, #0]
 80112fe:	6878      	ldr	r0, [r7, #4]
 8011300:	f000 fb55 	bl	80119ae <USBD_CtlError>
          break;
 8011304:	bf00      	nop
      }
      break;
 8011306:	e005      	b.n	8011314 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8011308:	6839      	ldr	r1, [r7, #0]
 801130a:	6878      	ldr	r0, [r7, #4]
 801130c:	f000 fb4f 	bl	80119ae <USBD_CtlError>
      break;
 8011310:	e000      	b.n	8011314 <USBD_StdEPReq+0x330>
      break;
 8011312:	bf00      	nop
  }

  return ret;
 8011314:	7bfb      	ldrb	r3, [r7, #15]
}
 8011316:	4618      	mov	r0, r3
 8011318:	3710      	adds	r7, #16
 801131a:	46bd      	mov	sp, r7
 801131c:	bd80      	pop	{r7, pc}
	...

08011320 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011320:	b580      	push	{r7, lr}
 8011322:	b084      	sub	sp, #16
 8011324:	af00      	add	r7, sp, #0
 8011326:	6078      	str	r0, [r7, #4]
 8011328:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801132a:	2300      	movs	r3, #0
 801132c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801132e:	2300      	movs	r3, #0
 8011330:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8011332:	2300      	movs	r3, #0
 8011334:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8011336:	683b      	ldr	r3, [r7, #0]
 8011338:	885b      	ldrh	r3, [r3, #2]
 801133a:	0a1b      	lsrs	r3, r3, #8
 801133c:	b29b      	uxth	r3, r3
 801133e:	3b01      	subs	r3, #1
 8011340:	2b06      	cmp	r3, #6
 8011342:	f200 8128 	bhi.w	8011596 <USBD_GetDescriptor+0x276>
 8011346:	a201      	add	r2, pc, #4	@ (adr r2, 801134c <USBD_GetDescriptor+0x2c>)
 8011348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801134c:	08011369 	.word	0x08011369
 8011350:	08011381 	.word	0x08011381
 8011354:	080113c1 	.word	0x080113c1
 8011358:	08011597 	.word	0x08011597
 801135c:	08011597 	.word	0x08011597
 8011360:	08011537 	.word	0x08011537
 8011364:	08011563 	.word	0x08011563
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801136e:	681b      	ldr	r3, [r3, #0]
 8011370:	687a      	ldr	r2, [r7, #4]
 8011372:	7c12      	ldrb	r2, [r2, #16]
 8011374:	f107 0108 	add.w	r1, r7, #8
 8011378:	4610      	mov	r0, r2
 801137a:	4798      	blx	r3
 801137c:	60f8      	str	r0, [r7, #12]
      break;
 801137e:	e112      	b.n	80115a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	7c1b      	ldrb	r3, [r3, #16]
 8011384:	2b00      	cmp	r3, #0
 8011386:	d10d      	bne.n	80113a4 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801138e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011390:	f107 0208 	add.w	r2, r7, #8
 8011394:	4610      	mov	r0, r2
 8011396:	4798      	blx	r3
 8011398:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801139a:	68fb      	ldr	r3, [r7, #12]
 801139c:	3301      	adds	r3, #1
 801139e:	2202      	movs	r2, #2
 80113a0:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80113a2:	e100      	b.n	80115a6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80113aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80113ac:	f107 0208 	add.w	r2, r7, #8
 80113b0:	4610      	mov	r0, r2
 80113b2:	4798      	blx	r3
 80113b4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80113b6:	68fb      	ldr	r3, [r7, #12]
 80113b8:	3301      	adds	r3, #1
 80113ba:	2202      	movs	r2, #2
 80113bc:	701a      	strb	r2, [r3, #0]
      break;
 80113be:	e0f2      	b.n	80115a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80113c0:	683b      	ldr	r3, [r7, #0]
 80113c2:	885b      	ldrh	r3, [r3, #2]
 80113c4:	b2db      	uxtb	r3, r3
 80113c6:	2b05      	cmp	r3, #5
 80113c8:	f200 80ac 	bhi.w	8011524 <USBD_GetDescriptor+0x204>
 80113cc:	a201      	add	r2, pc, #4	@ (adr r2, 80113d4 <USBD_GetDescriptor+0xb4>)
 80113ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113d2:	bf00      	nop
 80113d4:	080113ed 	.word	0x080113ed
 80113d8:	08011421 	.word	0x08011421
 80113dc:	08011455 	.word	0x08011455
 80113e0:	08011489 	.word	0x08011489
 80113e4:	080114bd 	.word	0x080114bd
 80113e8:	080114f1 	.word	0x080114f1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80113f2:	685b      	ldr	r3, [r3, #4]
 80113f4:	2b00      	cmp	r3, #0
 80113f6:	d00b      	beq.n	8011410 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80113fe:	685b      	ldr	r3, [r3, #4]
 8011400:	687a      	ldr	r2, [r7, #4]
 8011402:	7c12      	ldrb	r2, [r2, #16]
 8011404:	f107 0108 	add.w	r1, r7, #8
 8011408:	4610      	mov	r0, r2
 801140a:	4798      	blx	r3
 801140c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801140e:	e091      	b.n	8011534 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011410:	6839      	ldr	r1, [r7, #0]
 8011412:	6878      	ldr	r0, [r7, #4]
 8011414:	f000 facb 	bl	80119ae <USBD_CtlError>
            err++;
 8011418:	7afb      	ldrb	r3, [r7, #11]
 801141a:	3301      	adds	r3, #1
 801141c:	72fb      	strb	r3, [r7, #11]
          break;
 801141e:	e089      	b.n	8011534 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011426:	689b      	ldr	r3, [r3, #8]
 8011428:	2b00      	cmp	r3, #0
 801142a:	d00b      	beq.n	8011444 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011432:	689b      	ldr	r3, [r3, #8]
 8011434:	687a      	ldr	r2, [r7, #4]
 8011436:	7c12      	ldrb	r2, [r2, #16]
 8011438:	f107 0108 	add.w	r1, r7, #8
 801143c:	4610      	mov	r0, r2
 801143e:	4798      	blx	r3
 8011440:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011442:	e077      	b.n	8011534 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011444:	6839      	ldr	r1, [r7, #0]
 8011446:	6878      	ldr	r0, [r7, #4]
 8011448:	f000 fab1 	bl	80119ae <USBD_CtlError>
            err++;
 801144c:	7afb      	ldrb	r3, [r7, #11]
 801144e:	3301      	adds	r3, #1
 8011450:	72fb      	strb	r3, [r7, #11]
          break;
 8011452:	e06f      	b.n	8011534 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801145a:	68db      	ldr	r3, [r3, #12]
 801145c:	2b00      	cmp	r3, #0
 801145e:	d00b      	beq.n	8011478 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011466:	68db      	ldr	r3, [r3, #12]
 8011468:	687a      	ldr	r2, [r7, #4]
 801146a:	7c12      	ldrb	r2, [r2, #16]
 801146c:	f107 0108 	add.w	r1, r7, #8
 8011470:	4610      	mov	r0, r2
 8011472:	4798      	blx	r3
 8011474:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011476:	e05d      	b.n	8011534 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011478:	6839      	ldr	r1, [r7, #0]
 801147a:	6878      	ldr	r0, [r7, #4]
 801147c:	f000 fa97 	bl	80119ae <USBD_CtlError>
            err++;
 8011480:	7afb      	ldrb	r3, [r7, #11]
 8011482:	3301      	adds	r3, #1
 8011484:	72fb      	strb	r3, [r7, #11]
          break;
 8011486:	e055      	b.n	8011534 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801148e:	691b      	ldr	r3, [r3, #16]
 8011490:	2b00      	cmp	r3, #0
 8011492:	d00b      	beq.n	80114ac <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801149a:	691b      	ldr	r3, [r3, #16]
 801149c:	687a      	ldr	r2, [r7, #4]
 801149e:	7c12      	ldrb	r2, [r2, #16]
 80114a0:	f107 0108 	add.w	r1, r7, #8
 80114a4:	4610      	mov	r0, r2
 80114a6:	4798      	blx	r3
 80114a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80114aa:	e043      	b.n	8011534 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80114ac:	6839      	ldr	r1, [r7, #0]
 80114ae:	6878      	ldr	r0, [r7, #4]
 80114b0:	f000 fa7d 	bl	80119ae <USBD_CtlError>
            err++;
 80114b4:	7afb      	ldrb	r3, [r7, #11]
 80114b6:	3301      	adds	r3, #1
 80114b8:	72fb      	strb	r3, [r7, #11]
          break;
 80114ba:	e03b      	b.n	8011534 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80114c2:	695b      	ldr	r3, [r3, #20]
 80114c4:	2b00      	cmp	r3, #0
 80114c6:	d00b      	beq.n	80114e0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80114ce:	695b      	ldr	r3, [r3, #20]
 80114d0:	687a      	ldr	r2, [r7, #4]
 80114d2:	7c12      	ldrb	r2, [r2, #16]
 80114d4:	f107 0108 	add.w	r1, r7, #8
 80114d8:	4610      	mov	r0, r2
 80114da:	4798      	blx	r3
 80114dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80114de:	e029      	b.n	8011534 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80114e0:	6839      	ldr	r1, [r7, #0]
 80114e2:	6878      	ldr	r0, [r7, #4]
 80114e4:	f000 fa63 	bl	80119ae <USBD_CtlError>
            err++;
 80114e8:	7afb      	ldrb	r3, [r7, #11]
 80114ea:	3301      	adds	r3, #1
 80114ec:	72fb      	strb	r3, [r7, #11]
          break;
 80114ee:	e021      	b.n	8011534 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80114f6:	699b      	ldr	r3, [r3, #24]
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	d00b      	beq.n	8011514 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011502:	699b      	ldr	r3, [r3, #24]
 8011504:	687a      	ldr	r2, [r7, #4]
 8011506:	7c12      	ldrb	r2, [r2, #16]
 8011508:	f107 0108 	add.w	r1, r7, #8
 801150c:	4610      	mov	r0, r2
 801150e:	4798      	blx	r3
 8011510:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011512:	e00f      	b.n	8011534 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011514:	6839      	ldr	r1, [r7, #0]
 8011516:	6878      	ldr	r0, [r7, #4]
 8011518:	f000 fa49 	bl	80119ae <USBD_CtlError>
            err++;
 801151c:	7afb      	ldrb	r3, [r7, #11]
 801151e:	3301      	adds	r3, #1
 8011520:	72fb      	strb	r3, [r7, #11]
          break;
 8011522:	e007      	b.n	8011534 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8011524:	6839      	ldr	r1, [r7, #0]
 8011526:	6878      	ldr	r0, [r7, #4]
 8011528:	f000 fa41 	bl	80119ae <USBD_CtlError>
          err++;
 801152c:	7afb      	ldrb	r3, [r7, #11]
 801152e:	3301      	adds	r3, #1
 8011530:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8011532:	bf00      	nop
      }
      break;
 8011534:	e037      	b.n	80115a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	7c1b      	ldrb	r3, [r3, #16]
 801153a:	2b00      	cmp	r3, #0
 801153c:	d109      	bne.n	8011552 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011544:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011546:	f107 0208 	add.w	r2, r7, #8
 801154a:	4610      	mov	r0, r2
 801154c:	4798      	blx	r3
 801154e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011550:	e029      	b.n	80115a6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8011552:	6839      	ldr	r1, [r7, #0]
 8011554:	6878      	ldr	r0, [r7, #4]
 8011556:	f000 fa2a 	bl	80119ae <USBD_CtlError>
        err++;
 801155a:	7afb      	ldrb	r3, [r7, #11]
 801155c:	3301      	adds	r3, #1
 801155e:	72fb      	strb	r3, [r7, #11]
      break;
 8011560:	e021      	b.n	80115a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	7c1b      	ldrb	r3, [r3, #16]
 8011566:	2b00      	cmp	r3, #0
 8011568:	d10d      	bne.n	8011586 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011572:	f107 0208 	add.w	r2, r7, #8
 8011576:	4610      	mov	r0, r2
 8011578:	4798      	blx	r3
 801157a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801157c:	68fb      	ldr	r3, [r7, #12]
 801157e:	3301      	adds	r3, #1
 8011580:	2207      	movs	r2, #7
 8011582:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011584:	e00f      	b.n	80115a6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8011586:	6839      	ldr	r1, [r7, #0]
 8011588:	6878      	ldr	r0, [r7, #4]
 801158a:	f000 fa10 	bl	80119ae <USBD_CtlError>
        err++;
 801158e:	7afb      	ldrb	r3, [r7, #11]
 8011590:	3301      	adds	r3, #1
 8011592:	72fb      	strb	r3, [r7, #11]
      break;
 8011594:	e007      	b.n	80115a6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8011596:	6839      	ldr	r1, [r7, #0]
 8011598:	6878      	ldr	r0, [r7, #4]
 801159a:	f000 fa08 	bl	80119ae <USBD_CtlError>
      err++;
 801159e:	7afb      	ldrb	r3, [r7, #11]
 80115a0:	3301      	adds	r3, #1
 80115a2:	72fb      	strb	r3, [r7, #11]
      break;
 80115a4:	bf00      	nop
  }

  if (err != 0U)
 80115a6:	7afb      	ldrb	r3, [r7, #11]
 80115a8:	2b00      	cmp	r3, #0
 80115aa:	d11e      	bne.n	80115ea <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80115ac:	683b      	ldr	r3, [r7, #0]
 80115ae:	88db      	ldrh	r3, [r3, #6]
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	d016      	beq.n	80115e2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80115b4:	893b      	ldrh	r3, [r7, #8]
 80115b6:	2b00      	cmp	r3, #0
 80115b8:	d00e      	beq.n	80115d8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80115ba:	683b      	ldr	r3, [r7, #0]
 80115bc:	88da      	ldrh	r2, [r3, #6]
 80115be:	893b      	ldrh	r3, [r7, #8]
 80115c0:	4293      	cmp	r3, r2
 80115c2:	bf28      	it	cs
 80115c4:	4613      	movcs	r3, r2
 80115c6:	b29b      	uxth	r3, r3
 80115c8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80115ca:	893b      	ldrh	r3, [r7, #8]
 80115cc:	461a      	mov	r2, r3
 80115ce:	68f9      	ldr	r1, [r7, #12]
 80115d0:	6878      	ldr	r0, [r7, #4]
 80115d2:	f000 fa69 	bl	8011aa8 <USBD_CtlSendData>
 80115d6:	e009      	b.n	80115ec <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80115d8:	6839      	ldr	r1, [r7, #0]
 80115da:	6878      	ldr	r0, [r7, #4]
 80115dc:	f000 f9e7 	bl	80119ae <USBD_CtlError>
 80115e0:	e004      	b.n	80115ec <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80115e2:	6878      	ldr	r0, [r7, #4]
 80115e4:	f000 faba 	bl	8011b5c <USBD_CtlSendStatus>
 80115e8:	e000      	b.n	80115ec <USBD_GetDescriptor+0x2cc>
    return;
 80115ea:	bf00      	nop
  }
}
 80115ec:	3710      	adds	r7, #16
 80115ee:	46bd      	mov	sp, r7
 80115f0:	bd80      	pop	{r7, pc}
 80115f2:	bf00      	nop

080115f4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80115f4:	b580      	push	{r7, lr}
 80115f6:	b084      	sub	sp, #16
 80115f8:	af00      	add	r7, sp, #0
 80115fa:	6078      	str	r0, [r7, #4]
 80115fc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80115fe:	683b      	ldr	r3, [r7, #0]
 8011600:	889b      	ldrh	r3, [r3, #4]
 8011602:	2b00      	cmp	r3, #0
 8011604:	d131      	bne.n	801166a <USBD_SetAddress+0x76>
 8011606:	683b      	ldr	r3, [r7, #0]
 8011608:	88db      	ldrh	r3, [r3, #6]
 801160a:	2b00      	cmp	r3, #0
 801160c:	d12d      	bne.n	801166a <USBD_SetAddress+0x76>
 801160e:	683b      	ldr	r3, [r7, #0]
 8011610:	885b      	ldrh	r3, [r3, #2]
 8011612:	2b7f      	cmp	r3, #127	@ 0x7f
 8011614:	d829      	bhi.n	801166a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8011616:	683b      	ldr	r3, [r7, #0]
 8011618:	885b      	ldrh	r3, [r3, #2]
 801161a:	b2db      	uxtb	r3, r3
 801161c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011620:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011628:	b2db      	uxtb	r3, r3
 801162a:	2b03      	cmp	r3, #3
 801162c:	d104      	bne.n	8011638 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801162e:	6839      	ldr	r1, [r7, #0]
 8011630:	6878      	ldr	r0, [r7, #4]
 8011632:	f000 f9bc 	bl	80119ae <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011636:	e01d      	b.n	8011674 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	7bfa      	ldrb	r2, [r7, #15]
 801163c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8011640:	7bfb      	ldrb	r3, [r7, #15]
 8011642:	4619      	mov	r1, r3
 8011644:	6878      	ldr	r0, [r7, #4]
 8011646:	f000 ff73 	bl	8012530 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801164a:	6878      	ldr	r0, [r7, #4]
 801164c:	f000 fa86 	bl	8011b5c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8011650:	7bfb      	ldrb	r3, [r7, #15]
 8011652:	2b00      	cmp	r3, #0
 8011654:	d004      	beq.n	8011660 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	2202      	movs	r2, #2
 801165a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801165e:	e009      	b.n	8011674 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	2201      	movs	r2, #1
 8011664:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011668:	e004      	b.n	8011674 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801166a:	6839      	ldr	r1, [r7, #0]
 801166c:	6878      	ldr	r0, [r7, #4]
 801166e:	f000 f99e 	bl	80119ae <USBD_CtlError>
  }
}
 8011672:	bf00      	nop
 8011674:	bf00      	nop
 8011676:	3710      	adds	r7, #16
 8011678:	46bd      	mov	sp, r7
 801167a:	bd80      	pop	{r7, pc}

0801167c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801167c:	b580      	push	{r7, lr}
 801167e:	b084      	sub	sp, #16
 8011680:	af00      	add	r7, sp, #0
 8011682:	6078      	str	r0, [r7, #4]
 8011684:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011686:	2300      	movs	r3, #0
 8011688:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801168a:	683b      	ldr	r3, [r7, #0]
 801168c:	885b      	ldrh	r3, [r3, #2]
 801168e:	b2da      	uxtb	r2, r3
 8011690:	4b4e      	ldr	r3, [pc, #312]	@ (80117cc <USBD_SetConfig+0x150>)
 8011692:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8011694:	4b4d      	ldr	r3, [pc, #308]	@ (80117cc <USBD_SetConfig+0x150>)
 8011696:	781b      	ldrb	r3, [r3, #0]
 8011698:	2b01      	cmp	r3, #1
 801169a:	d905      	bls.n	80116a8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 801169c:	6839      	ldr	r1, [r7, #0]
 801169e:	6878      	ldr	r0, [r7, #4]
 80116a0:	f000 f985 	bl	80119ae <USBD_CtlError>
    return USBD_FAIL;
 80116a4:	2303      	movs	r3, #3
 80116a6:	e08c      	b.n	80117c2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80116ae:	b2db      	uxtb	r3, r3
 80116b0:	2b02      	cmp	r3, #2
 80116b2:	d002      	beq.n	80116ba <USBD_SetConfig+0x3e>
 80116b4:	2b03      	cmp	r3, #3
 80116b6:	d029      	beq.n	801170c <USBD_SetConfig+0x90>
 80116b8:	e075      	b.n	80117a6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80116ba:	4b44      	ldr	r3, [pc, #272]	@ (80117cc <USBD_SetConfig+0x150>)
 80116bc:	781b      	ldrb	r3, [r3, #0]
 80116be:	2b00      	cmp	r3, #0
 80116c0:	d020      	beq.n	8011704 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80116c2:	4b42      	ldr	r3, [pc, #264]	@ (80117cc <USBD_SetConfig+0x150>)
 80116c4:	781b      	ldrb	r3, [r3, #0]
 80116c6:	461a      	mov	r2, r3
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80116cc:	4b3f      	ldr	r3, [pc, #252]	@ (80117cc <USBD_SetConfig+0x150>)
 80116ce:	781b      	ldrb	r3, [r3, #0]
 80116d0:	4619      	mov	r1, r3
 80116d2:	6878      	ldr	r0, [r7, #4]
 80116d4:	f7fe ffe3 	bl	801069e <USBD_SetClassConfig>
 80116d8:	4603      	mov	r3, r0
 80116da:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80116dc:	7bfb      	ldrb	r3, [r7, #15]
 80116de:	2b00      	cmp	r3, #0
 80116e0:	d008      	beq.n	80116f4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80116e2:	6839      	ldr	r1, [r7, #0]
 80116e4:	6878      	ldr	r0, [r7, #4]
 80116e6:	f000 f962 	bl	80119ae <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80116ea:	687b      	ldr	r3, [r7, #4]
 80116ec:	2202      	movs	r2, #2
 80116ee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80116f2:	e065      	b.n	80117c0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80116f4:	6878      	ldr	r0, [r7, #4]
 80116f6:	f000 fa31 	bl	8011b5c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	2203      	movs	r2, #3
 80116fe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8011702:	e05d      	b.n	80117c0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8011704:	6878      	ldr	r0, [r7, #4]
 8011706:	f000 fa29 	bl	8011b5c <USBD_CtlSendStatus>
      break;
 801170a:	e059      	b.n	80117c0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 801170c:	4b2f      	ldr	r3, [pc, #188]	@ (80117cc <USBD_SetConfig+0x150>)
 801170e:	781b      	ldrb	r3, [r3, #0]
 8011710:	2b00      	cmp	r3, #0
 8011712:	d112      	bne.n	801173a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	2202      	movs	r2, #2
 8011718:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 801171c:	4b2b      	ldr	r3, [pc, #172]	@ (80117cc <USBD_SetConfig+0x150>)
 801171e:	781b      	ldrb	r3, [r3, #0]
 8011720:	461a      	mov	r2, r3
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8011726:	4b29      	ldr	r3, [pc, #164]	@ (80117cc <USBD_SetConfig+0x150>)
 8011728:	781b      	ldrb	r3, [r3, #0]
 801172a:	4619      	mov	r1, r3
 801172c:	6878      	ldr	r0, [r7, #4]
 801172e:	f7fe ffd2 	bl	80106d6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8011732:	6878      	ldr	r0, [r7, #4]
 8011734:	f000 fa12 	bl	8011b5c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8011738:	e042      	b.n	80117c0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 801173a:	4b24      	ldr	r3, [pc, #144]	@ (80117cc <USBD_SetConfig+0x150>)
 801173c:	781b      	ldrb	r3, [r3, #0]
 801173e:	461a      	mov	r2, r3
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	685b      	ldr	r3, [r3, #4]
 8011744:	429a      	cmp	r2, r3
 8011746:	d02a      	beq.n	801179e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	685b      	ldr	r3, [r3, #4]
 801174c:	b2db      	uxtb	r3, r3
 801174e:	4619      	mov	r1, r3
 8011750:	6878      	ldr	r0, [r7, #4]
 8011752:	f7fe ffc0 	bl	80106d6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8011756:	4b1d      	ldr	r3, [pc, #116]	@ (80117cc <USBD_SetConfig+0x150>)
 8011758:	781b      	ldrb	r3, [r3, #0]
 801175a:	461a      	mov	r2, r3
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8011760:	4b1a      	ldr	r3, [pc, #104]	@ (80117cc <USBD_SetConfig+0x150>)
 8011762:	781b      	ldrb	r3, [r3, #0]
 8011764:	4619      	mov	r1, r3
 8011766:	6878      	ldr	r0, [r7, #4]
 8011768:	f7fe ff99 	bl	801069e <USBD_SetClassConfig>
 801176c:	4603      	mov	r3, r0
 801176e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8011770:	7bfb      	ldrb	r3, [r7, #15]
 8011772:	2b00      	cmp	r3, #0
 8011774:	d00f      	beq.n	8011796 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8011776:	6839      	ldr	r1, [r7, #0]
 8011778:	6878      	ldr	r0, [r7, #4]
 801177a:	f000 f918 	bl	80119ae <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	685b      	ldr	r3, [r3, #4]
 8011782:	b2db      	uxtb	r3, r3
 8011784:	4619      	mov	r1, r3
 8011786:	6878      	ldr	r0, [r7, #4]
 8011788:	f7fe ffa5 	bl	80106d6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	2202      	movs	r2, #2
 8011790:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8011794:	e014      	b.n	80117c0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8011796:	6878      	ldr	r0, [r7, #4]
 8011798:	f000 f9e0 	bl	8011b5c <USBD_CtlSendStatus>
      break;
 801179c:	e010      	b.n	80117c0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801179e:	6878      	ldr	r0, [r7, #4]
 80117a0:	f000 f9dc 	bl	8011b5c <USBD_CtlSendStatus>
      break;
 80117a4:	e00c      	b.n	80117c0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80117a6:	6839      	ldr	r1, [r7, #0]
 80117a8:	6878      	ldr	r0, [r7, #4]
 80117aa:	f000 f900 	bl	80119ae <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80117ae:	4b07      	ldr	r3, [pc, #28]	@ (80117cc <USBD_SetConfig+0x150>)
 80117b0:	781b      	ldrb	r3, [r3, #0]
 80117b2:	4619      	mov	r1, r3
 80117b4:	6878      	ldr	r0, [r7, #4]
 80117b6:	f7fe ff8e 	bl	80106d6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80117ba:	2303      	movs	r3, #3
 80117bc:	73fb      	strb	r3, [r7, #15]
      break;
 80117be:	bf00      	nop
  }

  return ret;
 80117c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80117c2:	4618      	mov	r0, r3
 80117c4:	3710      	adds	r7, #16
 80117c6:	46bd      	mov	sp, r7
 80117c8:	bd80      	pop	{r7, pc}
 80117ca:	bf00      	nop
 80117cc:	200016e8 	.word	0x200016e8

080117d0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80117d0:	b580      	push	{r7, lr}
 80117d2:	b082      	sub	sp, #8
 80117d4:	af00      	add	r7, sp, #0
 80117d6:	6078      	str	r0, [r7, #4]
 80117d8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80117da:	683b      	ldr	r3, [r7, #0]
 80117dc:	88db      	ldrh	r3, [r3, #6]
 80117de:	2b01      	cmp	r3, #1
 80117e0:	d004      	beq.n	80117ec <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80117e2:	6839      	ldr	r1, [r7, #0]
 80117e4:	6878      	ldr	r0, [r7, #4]
 80117e6:	f000 f8e2 	bl	80119ae <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80117ea:	e023      	b.n	8011834 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80117f2:	b2db      	uxtb	r3, r3
 80117f4:	2b02      	cmp	r3, #2
 80117f6:	dc02      	bgt.n	80117fe <USBD_GetConfig+0x2e>
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	dc03      	bgt.n	8011804 <USBD_GetConfig+0x34>
 80117fc:	e015      	b.n	801182a <USBD_GetConfig+0x5a>
 80117fe:	2b03      	cmp	r3, #3
 8011800:	d00b      	beq.n	801181a <USBD_GetConfig+0x4a>
 8011802:	e012      	b.n	801182a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	2200      	movs	r2, #0
 8011808:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	3308      	adds	r3, #8
 801180e:	2201      	movs	r2, #1
 8011810:	4619      	mov	r1, r3
 8011812:	6878      	ldr	r0, [r7, #4]
 8011814:	f000 f948 	bl	8011aa8 <USBD_CtlSendData>
        break;
 8011818:	e00c      	b.n	8011834 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	3304      	adds	r3, #4
 801181e:	2201      	movs	r2, #1
 8011820:	4619      	mov	r1, r3
 8011822:	6878      	ldr	r0, [r7, #4]
 8011824:	f000 f940 	bl	8011aa8 <USBD_CtlSendData>
        break;
 8011828:	e004      	b.n	8011834 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801182a:	6839      	ldr	r1, [r7, #0]
 801182c:	6878      	ldr	r0, [r7, #4]
 801182e:	f000 f8be 	bl	80119ae <USBD_CtlError>
        break;
 8011832:	bf00      	nop
}
 8011834:	bf00      	nop
 8011836:	3708      	adds	r7, #8
 8011838:	46bd      	mov	sp, r7
 801183a:	bd80      	pop	{r7, pc}

0801183c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801183c:	b580      	push	{r7, lr}
 801183e:	b082      	sub	sp, #8
 8011840:	af00      	add	r7, sp, #0
 8011842:	6078      	str	r0, [r7, #4]
 8011844:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801184c:	b2db      	uxtb	r3, r3
 801184e:	3b01      	subs	r3, #1
 8011850:	2b02      	cmp	r3, #2
 8011852:	d81e      	bhi.n	8011892 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8011854:	683b      	ldr	r3, [r7, #0]
 8011856:	88db      	ldrh	r3, [r3, #6]
 8011858:	2b02      	cmp	r3, #2
 801185a:	d004      	beq.n	8011866 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 801185c:	6839      	ldr	r1, [r7, #0]
 801185e:	6878      	ldr	r0, [r7, #4]
 8011860:	f000 f8a5 	bl	80119ae <USBD_CtlError>
        break;
 8011864:	e01a      	b.n	801189c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	2201      	movs	r2, #1
 801186a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8011872:	2b00      	cmp	r3, #0
 8011874:	d005      	beq.n	8011882 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	68db      	ldr	r3, [r3, #12]
 801187a:	f043 0202 	orr.w	r2, r3, #2
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	330c      	adds	r3, #12
 8011886:	2202      	movs	r2, #2
 8011888:	4619      	mov	r1, r3
 801188a:	6878      	ldr	r0, [r7, #4]
 801188c:	f000 f90c 	bl	8011aa8 <USBD_CtlSendData>
      break;
 8011890:	e004      	b.n	801189c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8011892:	6839      	ldr	r1, [r7, #0]
 8011894:	6878      	ldr	r0, [r7, #4]
 8011896:	f000 f88a 	bl	80119ae <USBD_CtlError>
      break;
 801189a:	bf00      	nop
  }
}
 801189c:	bf00      	nop
 801189e:	3708      	adds	r7, #8
 80118a0:	46bd      	mov	sp, r7
 80118a2:	bd80      	pop	{r7, pc}

080118a4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80118a4:	b580      	push	{r7, lr}
 80118a6:	b082      	sub	sp, #8
 80118a8:	af00      	add	r7, sp, #0
 80118aa:	6078      	str	r0, [r7, #4]
 80118ac:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80118ae:	683b      	ldr	r3, [r7, #0]
 80118b0:	885b      	ldrh	r3, [r3, #2]
 80118b2:	2b01      	cmp	r3, #1
 80118b4:	d107      	bne.n	80118c6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	2201      	movs	r2, #1
 80118ba:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80118be:	6878      	ldr	r0, [r7, #4]
 80118c0:	f000 f94c 	bl	8011b5c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80118c4:	e013      	b.n	80118ee <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80118c6:	683b      	ldr	r3, [r7, #0]
 80118c8:	885b      	ldrh	r3, [r3, #2]
 80118ca:	2b02      	cmp	r3, #2
 80118cc:	d10b      	bne.n	80118e6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80118ce:	683b      	ldr	r3, [r7, #0]
 80118d0:	889b      	ldrh	r3, [r3, #4]
 80118d2:	0a1b      	lsrs	r3, r3, #8
 80118d4:	b29b      	uxth	r3, r3
 80118d6:	b2da      	uxtb	r2, r3
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80118de:	6878      	ldr	r0, [r7, #4]
 80118e0:	f000 f93c 	bl	8011b5c <USBD_CtlSendStatus>
}
 80118e4:	e003      	b.n	80118ee <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80118e6:	6839      	ldr	r1, [r7, #0]
 80118e8:	6878      	ldr	r0, [r7, #4]
 80118ea:	f000 f860 	bl	80119ae <USBD_CtlError>
}
 80118ee:	bf00      	nop
 80118f0:	3708      	adds	r7, #8
 80118f2:	46bd      	mov	sp, r7
 80118f4:	bd80      	pop	{r7, pc}

080118f6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80118f6:	b580      	push	{r7, lr}
 80118f8:	b082      	sub	sp, #8
 80118fa:	af00      	add	r7, sp, #0
 80118fc:	6078      	str	r0, [r7, #4]
 80118fe:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011906:	b2db      	uxtb	r3, r3
 8011908:	3b01      	subs	r3, #1
 801190a:	2b02      	cmp	r3, #2
 801190c:	d80b      	bhi.n	8011926 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801190e:	683b      	ldr	r3, [r7, #0]
 8011910:	885b      	ldrh	r3, [r3, #2]
 8011912:	2b01      	cmp	r3, #1
 8011914:	d10c      	bne.n	8011930 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	2200      	movs	r2, #0
 801191a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801191e:	6878      	ldr	r0, [r7, #4]
 8011920:	f000 f91c 	bl	8011b5c <USBD_CtlSendStatus>
      }
      break;
 8011924:	e004      	b.n	8011930 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8011926:	6839      	ldr	r1, [r7, #0]
 8011928:	6878      	ldr	r0, [r7, #4]
 801192a:	f000 f840 	bl	80119ae <USBD_CtlError>
      break;
 801192e:	e000      	b.n	8011932 <USBD_ClrFeature+0x3c>
      break;
 8011930:	bf00      	nop
  }
}
 8011932:	bf00      	nop
 8011934:	3708      	adds	r7, #8
 8011936:	46bd      	mov	sp, r7
 8011938:	bd80      	pop	{r7, pc}

0801193a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801193a:	b580      	push	{r7, lr}
 801193c:	b084      	sub	sp, #16
 801193e:	af00      	add	r7, sp, #0
 8011940:	6078      	str	r0, [r7, #4]
 8011942:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8011944:	683b      	ldr	r3, [r7, #0]
 8011946:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8011948:	68fb      	ldr	r3, [r7, #12]
 801194a:	781a      	ldrb	r2, [r3, #0]
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8011950:	68fb      	ldr	r3, [r7, #12]
 8011952:	3301      	adds	r3, #1
 8011954:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8011956:	68fb      	ldr	r3, [r7, #12]
 8011958:	781a      	ldrb	r2, [r3, #0]
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801195e:	68fb      	ldr	r3, [r7, #12]
 8011960:	3301      	adds	r3, #1
 8011962:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8011964:	68f8      	ldr	r0, [r7, #12]
 8011966:	f7ff fa40 	bl	8010dea <SWAPBYTE>
 801196a:	4603      	mov	r3, r0
 801196c:	461a      	mov	r2, r3
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8011972:	68fb      	ldr	r3, [r7, #12]
 8011974:	3301      	adds	r3, #1
 8011976:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8011978:	68fb      	ldr	r3, [r7, #12]
 801197a:	3301      	adds	r3, #1
 801197c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801197e:	68f8      	ldr	r0, [r7, #12]
 8011980:	f7ff fa33 	bl	8010dea <SWAPBYTE>
 8011984:	4603      	mov	r3, r0
 8011986:	461a      	mov	r2, r3
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 801198c:	68fb      	ldr	r3, [r7, #12]
 801198e:	3301      	adds	r3, #1
 8011990:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8011992:	68fb      	ldr	r3, [r7, #12]
 8011994:	3301      	adds	r3, #1
 8011996:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8011998:	68f8      	ldr	r0, [r7, #12]
 801199a:	f7ff fa26 	bl	8010dea <SWAPBYTE>
 801199e:	4603      	mov	r3, r0
 80119a0:	461a      	mov	r2, r3
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	80da      	strh	r2, [r3, #6]
}
 80119a6:	bf00      	nop
 80119a8:	3710      	adds	r7, #16
 80119aa:	46bd      	mov	sp, r7
 80119ac:	bd80      	pop	{r7, pc}

080119ae <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80119ae:	b580      	push	{r7, lr}
 80119b0:	b082      	sub	sp, #8
 80119b2:	af00      	add	r7, sp, #0
 80119b4:	6078      	str	r0, [r7, #4]
 80119b6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80119b8:	2180      	movs	r1, #128	@ 0x80
 80119ba:	6878      	ldr	r0, [r7, #4]
 80119bc:	f000 fd4e 	bl	801245c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80119c0:	2100      	movs	r1, #0
 80119c2:	6878      	ldr	r0, [r7, #4]
 80119c4:	f000 fd4a 	bl	801245c <USBD_LL_StallEP>
}
 80119c8:	bf00      	nop
 80119ca:	3708      	adds	r7, #8
 80119cc:	46bd      	mov	sp, r7
 80119ce:	bd80      	pop	{r7, pc}

080119d0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80119d0:	b580      	push	{r7, lr}
 80119d2:	b086      	sub	sp, #24
 80119d4:	af00      	add	r7, sp, #0
 80119d6:	60f8      	str	r0, [r7, #12]
 80119d8:	60b9      	str	r1, [r7, #8]
 80119da:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80119dc:	2300      	movs	r3, #0
 80119de:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80119e0:	68fb      	ldr	r3, [r7, #12]
 80119e2:	2b00      	cmp	r3, #0
 80119e4:	d042      	beq.n	8011a6c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80119e6:	68fb      	ldr	r3, [r7, #12]
 80119e8:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80119ea:	6938      	ldr	r0, [r7, #16]
 80119ec:	f000 f842 	bl	8011a74 <USBD_GetLen>
 80119f0:	4603      	mov	r3, r0
 80119f2:	3301      	adds	r3, #1
 80119f4:	005b      	lsls	r3, r3, #1
 80119f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80119fa:	d808      	bhi.n	8011a0e <USBD_GetString+0x3e>
 80119fc:	6938      	ldr	r0, [r7, #16]
 80119fe:	f000 f839 	bl	8011a74 <USBD_GetLen>
 8011a02:	4603      	mov	r3, r0
 8011a04:	3301      	adds	r3, #1
 8011a06:	b29b      	uxth	r3, r3
 8011a08:	005b      	lsls	r3, r3, #1
 8011a0a:	b29a      	uxth	r2, r3
 8011a0c:	e001      	b.n	8011a12 <USBD_GetString+0x42>
 8011a0e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8011a16:	7dfb      	ldrb	r3, [r7, #23]
 8011a18:	68ba      	ldr	r2, [r7, #8]
 8011a1a:	4413      	add	r3, r2
 8011a1c:	687a      	ldr	r2, [r7, #4]
 8011a1e:	7812      	ldrb	r2, [r2, #0]
 8011a20:	701a      	strb	r2, [r3, #0]
  idx++;
 8011a22:	7dfb      	ldrb	r3, [r7, #23]
 8011a24:	3301      	adds	r3, #1
 8011a26:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8011a28:	7dfb      	ldrb	r3, [r7, #23]
 8011a2a:	68ba      	ldr	r2, [r7, #8]
 8011a2c:	4413      	add	r3, r2
 8011a2e:	2203      	movs	r2, #3
 8011a30:	701a      	strb	r2, [r3, #0]
  idx++;
 8011a32:	7dfb      	ldrb	r3, [r7, #23]
 8011a34:	3301      	adds	r3, #1
 8011a36:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8011a38:	e013      	b.n	8011a62 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8011a3a:	7dfb      	ldrb	r3, [r7, #23]
 8011a3c:	68ba      	ldr	r2, [r7, #8]
 8011a3e:	4413      	add	r3, r2
 8011a40:	693a      	ldr	r2, [r7, #16]
 8011a42:	7812      	ldrb	r2, [r2, #0]
 8011a44:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8011a46:	693b      	ldr	r3, [r7, #16]
 8011a48:	3301      	adds	r3, #1
 8011a4a:	613b      	str	r3, [r7, #16]
    idx++;
 8011a4c:	7dfb      	ldrb	r3, [r7, #23]
 8011a4e:	3301      	adds	r3, #1
 8011a50:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8011a52:	7dfb      	ldrb	r3, [r7, #23]
 8011a54:	68ba      	ldr	r2, [r7, #8]
 8011a56:	4413      	add	r3, r2
 8011a58:	2200      	movs	r2, #0
 8011a5a:	701a      	strb	r2, [r3, #0]
    idx++;
 8011a5c:	7dfb      	ldrb	r3, [r7, #23]
 8011a5e:	3301      	adds	r3, #1
 8011a60:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8011a62:	693b      	ldr	r3, [r7, #16]
 8011a64:	781b      	ldrb	r3, [r3, #0]
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	d1e7      	bne.n	8011a3a <USBD_GetString+0x6a>
 8011a6a:	e000      	b.n	8011a6e <USBD_GetString+0x9e>
    return;
 8011a6c:	bf00      	nop
  }
}
 8011a6e:	3718      	adds	r7, #24
 8011a70:	46bd      	mov	sp, r7
 8011a72:	bd80      	pop	{r7, pc}

08011a74 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8011a74:	b480      	push	{r7}
 8011a76:	b085      	sub	sp, #20
 8011a78:	af00      	add	r7, sp, #0
 8011a7a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8011a7c:	2300      	movs	r3, #0
 8011a7e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8011a84:	e005      	b.n	8011a92 <USBD_GetLen+0x1e>
  {
    len++;
 8011a86:	7bfb      	ldrb	r3, [r7, #15]
 8011a88:	3301      	adds	r3, #1
 8011a8a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8011a8c:	68bb      	ldr	r3, [r7, #8]
 8011a8e:	3301      	adds	r3, #1
 8011a90:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8011a92:	68bb      	ldr	r3, [r7, #8]
 8011a94:	781b      	ldrb	r3, [r3, #0]
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	d1f5      	bne.n	8011a86 <USBD_GetLen+0x12>
  }

  return len;
 8011a9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8011a9c:	4618      	mov	r0, r3
 8011a9e:	3714      	adds	r7, #20
 8011aa0:	46bd      	mov	sp, r7
 8011aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aa6:	4770      	bx	lr

08011aa8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8011aa8:	b580      	push	{r7, lr}
 8011aaa:	b084      	sub	sp, #16
 8011aac:	af00      	add	r7, sp, #0
 8011aae:	60f8      	str	r0, [r7, #12]
 8011ab0:	60b9      	str	r1, [r7, #8]
 8011ab2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8011ab4:	68fb      	ldr	r3, [r7, #12]
 8011ab6:	2202      	movs	r2, #2
 8011ab8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8011abc:	68fb      	ldr	r3, [r7, #12]
 8011abe:	687a      	ldr	r2, [r7, #4]
 8011ac0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8011ac2:	68fb      	ldr	r3, [r7, #12]
 8011ac4:	687a      	ldr	r2, [r7, #4]
 8011ac6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	68ba      	ldr	r2, [r7, #8]
 8011acc:	2100      	movs	r1, #0
 8011ace:	68f8      	ldr	r0, [r7, #12]
 8011ad0:	f000 fd4d 	bl	801256e <USBD_LL_Transmit>

  return USBD_OK;
 8011ad4:	2300      	movs	r3, #0
}
 8011ad6:	4618      	mov	r0, r3
 8011ad8:	3710      	adds	r7, #16
 8011ada:	46bd      	mov	sp, r7
 8011adc:	bd80      	pop	{r7, pc}

08011ade <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8011ade:	b580      	push	{r7, lr}
 8011ae0:	b084      	sub	sp, #16
 8011ae2:	af00      	add	r7, sp, #0
 8011ae4:	60f8      	str	r0, [r7, #12]
 8011ae6:	60b9      	str	r1, [r7, #8]
 8011ae8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	68ba      	ldr	r2, [r7, #8]
 8011aee:	2100      	movs	r1, #0
 8011af0:	68f8      	ldr	r0, [r7, #12]
 8011af2:	f000 fd3c 	bl	801256e <USBD_LL_Transmit>

  return USBD_OK;
 8011af6:	2300      	movs	r3, #0
}
 8011af8:	4618      	mov	r0, r3
 8011afa:	3710      	adds	r7, #16
 8011afc:	46bd      	mov	sp, r7
 8011afe:	bd80      	pop	{r7, pc}

08011b00 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8011b00:	b580      	push	{r7, lr}
 8011b02:	b084      	sub	sp, #16
 8011b04:	af00      	add	r7, sp, #0
 8011b06:	60f8      	str	r0, [r7, #12]
 8011b08:	60b9      	str	r1, [r7, #8]
 8011b0a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8011b0c:	68fb      	ldr	r3, [r7, #12]
 8011b0e:	2203      	movs	r2, #3
 8011b10:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8011b14:	68fb      	ldr	r3, [r7, #12]
 8011b16:	687a      	ldr	r2, [r7, #4]
 8011b18:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8011b1c:	68fb      	ldr	r3, [r7, #12]
 8011b1e:	687a      	ldr	r2, [r7, #4]
 8011b20:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	68ba      	ldr	r2, [r7, #8]
 8011b28:	2100      	movs	r1, #0
 8011b2a:	68f8      	ldr	r0, [r7, #12]
 8011b2c:	f000 fd40 	bl	80125b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011b30:	2300      	movs	r3, #0
}
 8011b32:	4618      	mov	r0, r3
 8011b34:	3710      	adds	r7, #16
 8011b36:	46bd      	mov	sp, r7
 8011b38:	bd80      	pop	{r7, pc}

08011b3a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8011b3a:	b580      	push	{r7, lr}
 8011b3c:	b084      	sub	sp, #16
 8011b3e:	af00      	add	r7, sp, #0
 8011b40:	60f8      	str	r0, [r7, #12]
 8011b42:	60b9      	str	r1, [r7, #8]
 8011b44:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	68ba      	ldr	r2, [r7, #8]
 8011b4a:	2100      	movs	r1, #0
 8011b4c:	68f8      	ldr	r0, [r7, #12]
 8011b4e:	f000 fd2f 	bl	80125b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011b52:	2300      	movs	r3, #0
}
 8011b54:	4618      	mov	r0, r3
 8011b56:	3710      	adds	r7, #16
 8011b58:	46bd      	mov	sp, r7
 8011b5a:	bd80      	pop	{r7, pc}

08011b5c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8011b5c:	b580      	push	{r7, lr}
 8011b5e:	b082      	sub	sp, #8
 8011b60:	af00      	add	r7, sp, #0
 8011b62:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	2204      	movs	r2, #4
 8011b68:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8011b6c:	2300      	movs	r3, #0
 8011b6e:	2200      	movs	r2, #0
 8011b70:	2100      	movs	r1, #0
 8011b72:	6878      	ldr	r0, [r7, #4]
 8011b74:	f000 fcfb 	bl	801256e <USBD_LL_Transmit>

  return USBD_OK;
 8011b78:	2300      	movs	r3, #0
}
 8011b7a:	4618      	mov	r0, r3
 8011b7c:	3708      	adds	r7, #8
 8011b7e:	46bd      	mov	sp, r7
 8011b80:	bd80      	pop	{r7, pc}

08011b82 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8011b82:	b580      	push	{r7, lr}
 8011b84:	b082      	sub	sp, #8
 8011b86:	af00      	add	r7, sp, #0
 8011b88:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	2205      	movs	r2, #5
 8011b8e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011b92:	2300      	movs	r3, #0
 8011b94:	2200      	movs	r2, #0
 8011b96:	2100      	movs	r1, #0
 8011b98:	6878      	ldr	r0, [r7, #4]
 8011b9a:	f000 fd09 	bl	80125b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011b9e:	2300      	movs	r3, #0
}
 8011ba0:	4618      	mov	r0, r3
 8011ba2:	3708      	adds	r7, #8
 8011ba4:	46bd      	mov	sp, r7
 8011ba6:	bd80      	pop	{r7, pc}

08011ba8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8011ba8:	b580      	push	{r7, lr}
 8011baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8011bac:	2200      	movs	r2, #0
 8011bae:	4912      	ldr	r1, [pc, #72]	@ (8011bf8 <MX_USB_DEVICE_Init+0x50>)
 8011bb0:	4812      	ldr	r0, [pc, #72]	@ (8011bfc <MX_USB_DEVICE_Init+0x54>)
 8011bb2:	f7fe fcf7 	bl	80105a4 <USBD_Init>
 8011bb6:	4603      	mov	r3, r0
 8011bb8:	2b00      	cmp	r3, #0
 8011bba:	d001      	beq.n	8011bc0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8011bbc:	f7f3 fabe 	bl	800513c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8011bc0:	490f      	ldr	r1, [pc, #60]	@ (8011c00 <MX_USB_DEVICE_Init+0x58>)
 8011bc2:	480e      	ldr	r0, [pc, #56]	@ (8011bfc <MX_USB_DEVICE_Init+0x54>)
 8011bc4:	f7fe fd1e 	bl	8010604 <USBD_RegisterClass>
 8011bc8:	4603      	mov	r3, r0
 8011bca:	2b00      	cmp	r3, #0
 8011bcc:	d001      	beq.n	8011bd2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8011bce:	f7f3 fab5 	bl	800513c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8011bd2:	490c      	ldr	r1, [pc, #48]	@ (8011c04 <MX_USB_DEVICE_Init+0x5c>)
 8011bd4:	4809      	ldr	r0, [pc, #36]	@ (8011bfc <MX_USB_DEVICE_Init+0x54>)
 8011bd6:	f7fe fc15 	bl	8010404 <USBD_CDC_RegisterInterface>
 8011bda:	4603      	mov	r3, r0
 8011bdc:	2b00      	cmp	r3, #0
 8011bde:	d001      	beq.n	8011be4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8011be0:	f7f3 faac 	bl	800513c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8011be4:	4805      	ldr	r0, [pc, #20]	@ (8011bfc <MX_USB_DEVICE_Init+0x54>)
 8011be6:	f7fe fd43 	bl	8010670 <USBD_Start>
 8011bea:	4603      	mov	r3, r0
 8011bec:	2b00      	cmp	r3, #0
 8011bee:	d001      	beq.n	8011bf4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8011bf0:	f7f3 faa4 	bl	800513c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8011bf4:	bf00      	nop
 8011bf6:	bd80      	pop	{r7, pc}
 8011bf8:	200000c4 	.word	0x200000c4
 8011bfc:	200016ec 	.word	0x200016ec
 8011c00:	20000028 	.word	0x20000028
 8011c04:	200000b0 	.word	0x200000b0

08011c08 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8011c08:	b580      	push	{r7, lr}
 8011c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8011c0c:	2200      	movs	r2, #0
 8011c0e:	4905      	ldr	r1, [pc, #20]	@ (8011c24 <CDC_Init_FS+0x1c>)
 8011c10:	4805      	ldr	r0, [pc, #20]	@ (8011c28 <CDC_Init_FS+0x20>)
 8011c12:	f7fe fc11 	bl	8010438 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8011c16:	4905      	ldr	r1, [pc, #20]	@ (8011c2c <CDC_Init_FS+0x24>)
 8011c18:	4803      	ldr	r0, [pc, #12]	@ (8011c28 <CDC_Init_FS+0x20>)
 8011c1a:	f7fe fc2f 	bl	801047c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8011c1e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8011c20:	4618      	mov	r0, r3
 8011c22:	bd80      	pop	{r7, pc}
 8011c24:	20001bc8 	.word	0x20001bc8
 8011c28:	200016ec 	.word	0x200016ec
 8011c2c:	200019c8 	.word	0x200019c8

08011c30 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8011c30:	b480      	push	{r7}
 8011c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8011c34:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8011c36:	4618      	mov	r0, r3
 8011c38:	46bd      	mov	sp, r7
 8011c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c3e:	4770      	bx	lr

08011c40 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8011c40:	b480      	push	{r7}
 8011c42:	b083      	sub	sp, #12
 8011c44:	af00      	add	r7, sp, #0
 8011c46:	4603      	mov	r3, r0
 8011c48:	6039      	str	r1, [r7, #0]
 8011c4a:	71fb      	strb	r3, [r7, #7]
 8011c4c:	4613      	mov	r3, r2
 8011c4e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8011c50:	79fb      	ldrb	r3, [r7, #7]
 8011c52:	2b23      	cmp	r3, #35	@ 0x23
 8011c54:	f200 8097 	bhi.w	8011d86 <CDC_Control_FS+0x146>
 8011c58:	a201      	add	r2, pc, #4	@ (adr r2, 8011c60 <CDC_Control_FS+0x20>)
 8011c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c5e:	bf00      	nop
 8011c60:	08011d87 	.word	0x08011d87
 8011c64:	08011d87 	.word	0x08011d87
 8011c68:	08011d87 	.word	0x08011d87
 8011c6c:	08011d87 	.word	0x08011d87
 8011c70:	08011d87 	.word	0x08011d87
 8011c74:	08011d87 	.word	0x08011d87
 8011c78:	08011d87 	.word	0x08011d87
 8011c7c:	08011d87 	.word	0x08011d87
 8011c80:	08011d87 	.word	0x08011d87
 8011c84:	08011d87 	.word	0x08011d87
 8011c88:	08011d87 	.word	0x08011d87
 8011c8c:	08011d87 	.word	0x08011d87
 8011c90:	08011d87 	.word	0x08011d87
 8011c94:	08011d87 	.word	0x08011d87
 8011c98:	08011d87 	.word	0x08011d87
 8011c9c:	08011d87 	.word	0x08011d87
 8011ca0:	08011d87 	.word	0x08011d87
 8011ca4:	08011d87 	.word	0x08011d87
 8011ca8:	08011d87 	.word	0x08011d87
 8011cac:	08011d87 	.word	0x08011d87
 8011cb0:	08011d87 	.word	0x08011d87
 8011cb4:	08011d87 	.word	0x08011d87
 8011cb8:	08011d87 	.word	0x08011d87
 8011cbc:	08011d87 	.word	0x08011d87
 8011cc0:	08011d87 	.word	0x08011d87
 8011cc4:	08011d87 	.word	0x08011d87
 8011cc8:	08011d87 	.word	0x08011d87
 8011ccc:	08011d87 	.word	0x08011d87
 8011cd0:	08011d87 	.word	0x08011d87
 8011cd4:	08011d87 	.word	0x08011d87
 8011cd8:	08011d87 	.word	0x08011d87
 8011cdc:	08011d87 	.word	0x08011d87
 8011ce0:	08011cf1 	.word	0x08011cf1
 8011ce4:	08011d33 	.word	0x08011d33
 8011ce8:	08011d87 	.word	0x08011d87
 8011cec:	08011d87 	.word	0x08011d87
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	LineCoding.bitrate = (uint32_t)(pbuf[0]) | (pbuf[1] << 8) | (pbuf[2] << 16) | (pbuf[3] << 24);
 8011cf0:	683b      	ldr	r3, [r7, #0]
 8011cf2:	781b      	ldrb	r3, [r3, #0]
 8011cf4:	461a      	mov	r2, r3
 8011cf6:	683b      	ldr	r3, [r7, #0]
 8011cf8:	3301      	adds	r3, #1
 8011cfa:	781b      	ldrb	r3, [r3, #0]
 8011cfc:	021b      	lsls	r3, r3, #8
 8011cfe:	431a      	orrs	r2, r3
 8011d00:	683b      	ldr	r3, [r7, #0]
 8011d02:	3302      	adds	r3, #2
 8011d04:	781b      	ldrb	r3, [r3, #0]
 8011d06:	041b      	lsls	r3, r3, #16
 8011d08:	431a      	orrs	r2, r3
 8011d0a:	683b      	ldr	r3, [r7, #0]
 8011d0c:	3303      	adds	r3, #3
 8011d0e:	781b      	ldrb	r3, [r3, #0]
 8011d10:	061b      	lsls	r3, r3, #24
 8011d12:	4313      	orrs	r3, r2
 8011d14:	4a20      	ldr	r2, [pc, #128]	@ (8011d98 <CDC_Control_FS+0x158>)
 8011d16:	6013      	str	r3, [r2, #0]
		LineCoding.format = pbuf[4];
 8011d18:	683b      	ldr	r3, [r7, #0]
 8011d1a:	791a      	ldrb	r2, [r3, #4]
 8011d1c:	4b1e      	ldr	r3, [pc, #120]	@ (8011d98 <CDC_Control_FS+0x158>)
 8011d1e:	711a      	strb	r2, [r3, #4]
		LineCoding.paritytype = pbuf[5];
 8011d20:	683b      	ldr	r3, [r7, #0]
 8011d22:	795a      	ldrb	r2, [r3, #5]
 8011d24:	4b1c      	ldr	r3, [pc, #112]	@ (8011d98 <CDC_Control_FS+0x158>)
 8011d26:	715a      	strb	r2, [r3, #5]
		LineCoding.datatype = pbuf[6];
 8011d28:	683b      	ldr	r3, [r7, #0]
 8011d2a:	799a      	ldrb	r2, [r3, #6]
 8011d2c:	4b1a      	ldr	r3, [pc, #104]	@ (8011d98 <CDC_Control_FS+0x158>)
 8011d2e:	719a      	strb	r2, [r3, #6]
    break;
 8011d30:	e02a      	b.n	8011d88 <CDC_Control_FS+0x148>

    case CDC_GET_LINE_CODING:
    	pbuf[0] = (uint8_t)(LineCoding.bitrate);
 8011d32:	4b19      	ldr	r3, [pc, #100]	@ (8011d98 <CDC_Control_FS+0x158>)
 8011d34:	681b      	ldr	r3, [r3, #0]
 8011d36:	b2da      	uxtb	r2, r3
 8011d38:	683b      	ldr	r3, [r7, #0]
 8011d3a:	701a      	strb	r2, [r3, #0]
    	pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 8011d3c:	4b16      	ldr	r3, [pc, #88]	@ (8011d98 <CDC_Control_FS+0x158>)
 8011d3e:	681b      	ldr	r3, [r3, #0]
 8011d40:	0a1a      	lsrs	r2, r3, #8
 8011d42:	683b      	ldr	r3, [r7, #0]
 8011d44:	3301      	adds	r3, #1
 8011d46:	b2d2      	uxtb	r2, r2
 8011d48:	701a      	strb	r2, [r3, #0]
    	pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 8011d4a:	4b13      	ldr	r3, [pc, #76]	@ (8011d98 <CDC_Control_FS+0x158>)
 8011d4c:	681b      	ldr	r3, [r3, #0]
 8011d4e:	0c1a      	lsrs	r2, r3, #16
 8011d50:	683b      	ldr	r3, [r7, #0]
 8011d52:	3302      	adds	r3, #2
 8011d54:	b2d2      	uxtb	r2, r2
 8011d56:	701a      	strb	r2, [r3, #0]
    	pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 8011d58:	4b0f      	ldr	r3, [pc, #60]	@ (8011d98 <CDC_Control_FS+0x158>)
 8011d5a:	681b      	ldr	r3, [r3, #0]
 8011d5c:	0e1a      	lsrs	r2, r3, #24
 8011d5e:	683b      	ldr	r3, [r7, #0]
 8011d60:	3303      	adds	r3, #3
 8011d62:	b2d2      	uxtb	r2, r2
 8011d64:	701a      	strb	r2, [r3, #0]
    	pbuf[4] = LineCoding.format;
 8011d66:	683b      	ldr	r3, [r7, #0]
 8011d68:	3304      	adds	r3, #4
 8011d6a:	4a0b      	ldr	r2, [pc, #44]	@ (8011d98 <CDC_Control_FS+0x158>)
 8011d6c:	7912      	ldrb	r2, [r2, #4]
 8011d6e:	701a      	strb	r2, [r3, #0]
    	pbuf[5] = LineCoding.paritytype;
 8011d70:	683b      	ldr	r3, [r7, #0]
 8011d72:	3305      	adds	r3, #5
 8011d74:	4a08      	ldr	r2, [pc, #32]	@ (8011d98 <CDC_Control_FS+0x158>)
 8011d76:	7952      	ldrb	r2, [r2, #5]
 8011d78:	701a      	strb	r2, [r3, #0]
    	pbuf[6] = LineCoding.datatype;
 8011d7a:	683b      	ldr	r3, [r7, #0]
 8011d7c:	3306      	adds	r3, #6
 8011d7e:	4a06      	ldr	r2, [pc, #24]	@ (8011d98 <CDC_Control_FS+0x158>)
 8011d80:	7992      	ldrb	r2, [r2, #6]
 8011d82:	701a      	strb	r2, [r3, #0]
	break;
 8011d84:	e000      	b.n	8011d88 <CDC_Control_FS+0x148>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8011d86:	bf00      	nop
  }

  return (USBD_OK);
 8011d88:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8011d8a:	4618      	mov	r0, r3
 8011d8c:	370c      	adds	r7, #12
 8011d8e:	46bd      	mov	sp, r7
 8011d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d94:	4770      	bx	lr
 8011d96:	bf00      	nop
 8011d98:	200000a8 	.word	0x200000a8

08011d9c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8011d9c:	b580      	push	{r7, lr}
 8011d9e:	b082      	sub	sp, #8
 8011da0:	af00      	add	r7, sp, #0
 8011da2:	6078      	str	r0, [r7, #4]
 8011da4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	if(dataOnRx != NULL){
 8011da6:	4b0b      	ldr	r3, [pc, #44]	@ (8011dd4 <CDC_Receive_FS+0x38>)
 8011da8:	681b      	ldr	r3, [r3, #0]
 8011daa:	2b00      	cmp	r3, #0
 8011dac:	d006      	beq.n	8011dbc <CDC_Receive_FS+0x20>
		dataOnRx(Buf, *Len);
 8011dae:	4b09      	ldr	r3, [pc, #36]	@ (8011dd4 <CDC_Receive_FS+0x38>)
 8011db0:	681b      	ldr	r3, [r3, #0]
 8011db2:	683a      	ldr	r2, [r7, #0]
 8011db4:	6812      	ldr	r2, [r2, #0]
 8011db6:	4611      	mov	r1, r2
 8011db8:	6878      	ldr	r0, [r7, #4]
 8011dba:	4798      	blx	r3
	}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8011dbc:	6879      	ldr	r1, [r7, #4]
 8011dbe:	4806      	ldr	r0, [pc, #24]	@ (8011dd8 <CDC_Receive_FS+0x3c>)
 8011dc0:	f7fe fb5c 	bl	801047c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8011dc4:	4804      	ldr	r0, [pc, #16]	@ (8011dd8 <CDC_Receive_FS+0x3c>)
 8011dc6:	f7fe fbb7 	bl	8010538 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8011dca:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8011dcc:	4618      	mov	r0, r3
 8011dce:	3708      	adds	r7, #8
 8011dd0:	46bd      	mov	sp, r7
 8011dd2:	bd80      	pop	{r7, pc}
 8011dd4:	20001dc8 	.word	0x20001dc8
 8011dd8:	200016ec 	.word	0x200016ec

08011ddc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8011ddc:	b580      	push	{r7, lr}
 8011dde:	b084      	sub	sp, #16
 8011de0:	af00      	add	r7, sp, #0
 8011de2:	6078      	str	r0, [r7, #4]
 8011de4:	460b      	mov	r3, r1
 8011de6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8011de8:	2300      	movs	r3, #0
 8011dea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8011dec:	4b0d      	ldr	r3, [pc, #52]	@ (8011e24 <CDC_Transmit_FS+0x48>)
 8011dee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8011df2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8011df4:	68bb      	ldr	r3, [r7, #8]
 8011df6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8011dfa:	2b00      	cmp	r3, #0
 8011dfc:	d001      	beq.n	8011e02 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8011dfe:	2301      	movs	r3, #1
 8011e00:	e00b      	b.n	8011e1a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8011e02:	887b      	ldrh	r3, [r7, #2]
 8011e04:	461a      	mov	r2, r3
 8011e06:	6879      	ldr	r1, [r7, #4]
 8011e08:	4806      	ldr	r0, [pc, #24]	@ (8011e24 <CDC_Transmit_FS+0x48>)
 8011e0a:	f7fe fb15 	bl	8010438 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8011e0e:	4805      	ldr	r0, [pc, #20]	@ (8011e24 <CDC_Transmit_FS+0x48>)
 8011e10:	f7fe fb52 	bl	80104b8 <USBD_CDC_TransmitPacket>
 8011e14:	4603      	mov	r3, r0
 8011e16:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8011e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8011e1a:	4618      	mov	r0, r3
 8011e1c:	3710      	adds	r7, #16
 8011e1e:	46bd      	mov	sp, r7
 8011e20:	bd80      	pop	{r7, pc}
 8011e22:	bf00      	nop
 8011e24:	200016ec 	.word	0x200016ec

08011e28 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8011e28:	b480      	push	{r7}
 8011e2a:	b087      	sub	sp, #28
 8011e2c:	af00      	add	r7, sp, #0
 8011e2e:	60f8      	str	r0, [r7, #12]
 8011e30:	60b9      	str	r1, [r7, #8]
 8011e32:	4613      	mov	r3, r2
 8011e34:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8011e36:	2300      	movs	r3, #0
 8011e38:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8011e3a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011e3e:	4618      	mov	r0, r3
 8011e40:	371c      	adds	r7, #28
 8011e42:	46bd      	mov	sp, r7
 8011e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e48:	4770      	bx	lr
	...

08011e4c <CDC_Attach_Rx>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void CDC_Attach_Rx(void (*RxData)(uint8_t* buf, uint32_t len)){
 8011e4c:	b480      	push	{r7}
 8011e4e:	b083      	sub	sp, #12
 8011e50:	af00      	add	r7, sp, #0
 8011e52:	6078      	str	r0, [r7, #4]
	dataOnRx = RxData;
 8011e54:	4a04      	ldr	r2, [pc, #16]	@ (8011e68 <CDC_Attach_Rx+0x1c>)
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	6013      	str	r3, [r2, #0]
}
 8011e5a:	bf00      	nop
 8011e5c:	370c      	adds	r7, #12
 8011e5e:	46bd      	mov	sp, r7
 8011e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e64:	4770      	bx	lr
 8011e66:	bf00      	nop
 8011e68:	20001dc8 	.word	0x20001dc8

08011e6c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011e6c:	b480      	push	{r7}
 8011e6e:	b083      	sub	sp, #12
 8011e70:	af00      	add	r7, sp, #0
 8011e72:	4603      	mov	r3, r0
 8011e74:	6039      	str	r1, [r7, #0]
 8011e76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8011e78:	683b      	ldr	r3, [r7, #0]
 8011e7a:	2212      	movs	r2, #18
 8011e7c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8011e7e:	4b03      	ldr	r3, [pc, #12]	@ (8011e8c <USBD_FS_DeviceDescriptor+0x20>)
}
 8011e80:	4618      	mov	r0, r3
 8011e82:	370c      	adds	r7, #12
 8011e84:	46bd      	mov	sp, r7
 8011e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e8a:	4770      	bx	lr
 8011e8c:	200000e0 	.word	0x200000e0

08011e90 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011e90:	b480      	push	{r7}
 8011e92:	b083      	sub	sp, #12
 8011e94:	af00      	add	r7, sp, #0
 8011e96:	4603      	mov	r3, r0
 8011e98:	6039      	str	r1, [r7, #0]
 8011e9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8011e9c:	683b      	ldr	r3, [r7, #0]
 8011e9e:	2204      	movs	r2, #4
 8011ea0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8011ea2:	4b03      	ldr	r3, [pc, #12]	@ (8011eb0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8011ea4:	4618      	mov	r0, r3
 8011ea6:	370c      	adds	r7, #12
 8011ea8:	46bd      	mov	sp, r7
 8011eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eae:	4770      	bx	lr
 8011eb0:	200000f4 	.word	0x200000f4

08011eb4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011eb4:	b580      	push	{r7, lr}
 8011eb6:	b082      	sub	sp, #8
 8011eb8:	af00      	add	r7, sp, #0
 8011eba:	4603      	mov	r3, r0
 8011ebc:	6039      	str	r1, [r7, #0]
 8011ebe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011ec0:	79fb      	ldrb	r3, [r7, #7]
 8011ec2:	2b00      	cmp	r3, #0
 8011ec4:	d105      	bne.n	8011ed2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8011ec6:	683a      	ldr	r2, [r7, #0]
 8011ec8:	4907      	ldr	r1, [pc, #28]	@ (8011ee8 <USBD_FS_ProductStrDescriptor+0x34>)
 8011eca:	4808      	ldr	r0, [pc, #32]	@ (8011eec <USBD_FS_ProductStrDescriptor+0x38>)
 8011ecc:	f7ff fd80 	bl	80119d0 <USBD_GetString>
 8011ed0:	e004      	b.n	8011edc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8011ed2:	683a      	ldr	r2, [r7, #0]
 8011ed4:	4904      	ldr	r1, [pc, #16]	@ (8011ee8 <USBD_FS_ProductStrDescriptor+0x34>)
 8011ed6:	4805      	ldr	r0, [pc, #20]	@ (8011eec <USBD_FS_ProductStrDescriptor+0x38>)
 8011ed8:	f7ff fd7a 	bl	80119d0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011edc:	4b02      	ldr	r3, [pc, #8]	@ (8011ee8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8011ede:	4618      	mov	r0, r3
 8011ee0:	3708      	adds	r7, #8
 8011ee2:	46bd      	mov	sp, r7
 8011ee4:	bd80      	pop	{r7, pc}
 8011ee6:	bf00      	nop
 8011ee8:	20001dcc 	.word	0x20001dcc
 8011eec:	08013498 	.word	0x08013498

08011ef0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011ef0:	b580      	push	{r7, lr}
 8011ef2:	b082      	sub	sp, #8
 8011ef4:	af00      	add	r7, sp, #0
 8011ef6:	4603      	mov	r3, r0
 8011ef8:	6039      	str	r1, [r7, #0]
 8011efa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8011efc:	683a      	ldr	r2, [r7, #0]
 8011efe:	4904      	ldr	r1, [pc, #16]	@ (8011f10 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8011f00:	4804      	ldr	r0, [pc, #16]	@ (8011f14 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8011f02:	f7ff fd65 	bl	80119d0 <USBD_GetString>
  return USBD_StrDesc;
 8011f06:	4b02      	ldr	r3, [pc, #8]	@ (8011f10 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8011f08:	4618      	mov	r0, r3
 8011f0a:	3708      	adds	r7, #8
 8011f0c:	46bd      	mov	sp, r7
 8011f0e:	bd80      	pop	{r7, pc}
 8011f10:	20001dcc 	.word	0x20001dcc
 8011f14:	080134b0 	.word	0x080134b0

08011f18 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011f18:	b580      	push	{r7, lr}
 8011f1a:	b082      	sub	sp, #8
 8011f1c:	af00      	add	r7, sp, #0
 8011f1e:	4603      	mov	r3, r0
 8011f20:	6039      	str	r1, [r7, #0]
 8011f22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8011f24:	683b      	ldr	r3, [r7, #0]
 8011f26:	221a      	movs	r2, #26
 8011f28:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8011f2a:	f000 f843 	bl	8011fb4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8011f2e:	4b02      	ldr	r3, [pc, #8]	@ (8011f38 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8011f30:	4618      	mov	r0, r3
 8011f32:	3708      	adds	r7, #8
 8011f34:	46bd      	mov	sp, r7
 8011f36:	bd80      	pop	{r7, pc}
 8011f38:	200000f8 	.word	0x200000f8

08011f3c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011f3c:	b580      	push	{r7, lr}
 8011f3e:	b082      	sub	sp, #8
 8011f40:	af00      	add	r7, sp, #0
 8011f42:	4603      	mov	r3, r0
 8011f44:	6039      	str	r1, [r7, #0]
 8011f46:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8011f48:	79fb      	ldrb	r3, [r7, #7]
 8011f4a:	2b00      	cmp	r3, #0
 8011f4c:	d105      	bne.n	8011f5a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8011f4e:	683a      	ldr	r2, [r7, #0]
 8011f50:	4907      	ldr	r1, [pc, #28]	@ (8011f70 <USBD_FS_ConfigStrDescriptor+0x34>)
 8011f52:	4808      	ldr	r0, [pc, #32]	@ (8011f74 <USBD_FS_ConfigStrDescriptor+0x38>)
 8011f54:	f7ff fd3c 	bl	80119d0 <USBD_GetString>
 8011f58:	e004      	b.n	8011f64 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8011f5a:	683a      	ldr	r2, [r7, #0]
 8011f5c:	4904      	ldr	r1, [pc, #16]	@ (8011f70 <USBD_FS_ConfigStrDescriptor+0x34>)
 8011f5e:	4805      	ldr	r0, [pc, #20]	@ (8011f74 <USBD_FS_ConfigStrDescriptor+0x38>)
 8011f60:	f7ff fd36 	bl	80119d0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011f64:	4b02      	ldr	r3, [pc, #8]	@ (8011f70 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8011f66:	4618      	mov	r0, r3
 8011f68:	3708      	adds	r7, #8
 8011f6a:	46bd      	mov	sp, r7
 8011f6c:	bd80      	pop	{r7, pc}
 8011f6e:	bf00      	nop
 8011f70:	20001dcc 	.word	0x20001dcc
 8011f74:	080134c4 	.word	0x080134c4

08011f78 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011f78:	b580      	push	{r7, lr}
 8011f7a:	b082      	sub	sp, #8
 8011f7c:	af00      	add	r7, sp, #0
 8011f7e:	4603      	mov	r3, r0
 8011f80:	6039      	str	r1, [r7, #0]
 8011f82:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011f84:	79fb      	ldrb	r3, [r7, #7]
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	d105      	bne.n	8011f96 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8011f8a:	683a      	ldr	r2, [r7, #0]
 8011f8c:	4907      	ldr	r1, [pc, #28]	@ (8011fac <USBD_FS_InterfaceStrDescriptor+0x34>)
 8011f8e:	4808      	ldr	r0, [pc, #32]	@ (8011fb0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8011f90:	f7ff fd1e 	bl	80119d0 <USBD_GetString>
 8011f94:	e004      	b.n	8011fa0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8011f96:	683a      	ldr	r2, [r7, #0]
 8011f98:	4904      	ldr	r1, [pc, #16]	@ (8011fac <USBD_FS_InterfaceStrDescriptor+0x34>)
 8011f9a:	4805      	ldr	r0, [pc, #20]	@ (8011fb0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8011f9c:	f7ff fd18 	bl	80119d0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011fa0:	4b02      	ldr	r3, [pc, #8]	@ (8011fac <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8011fa2:	4618      	mov	r0, r3
 8011fa4:	3708      	adds	r7, #8
 8011fa6:	46bd      	mov	sp, r7
 8011fa8:	bd80      	pop	{r7, pc}
 8011faa:	bf00      	nop
 8011fac:	20001dcc 	.word	0x20001dcc
 8011fb0:	080134d0 	.word	0x080134d0

08011fb4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8011fb4:	b580      	push	{r7, lr}
 8011fb6:	b084      	sub	sp, #16
 8011fb8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8011fba:	4b0f      	ldr	r3, [pc, #60]	@ (8011ff8 <Get_SerialNum+0x44>)
 8011fbc:	681b      	ldr	r3, [r3, #0]
 8011fbe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8011fc0:	4b0e      	ldr	r3, [pc, #56]	@ (8011ffc <Get_SerialNum+0x48>)
 8011fc2:	681b      	ldr	r3, [r3, #0]
 8011fc4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8011fc6:	4b0e      	ldr	r3, [pc, #56]	@ (8012000 <Get_SerialNum+0x4c>)
 8011fc8:	681b      	ldr	r3, [r3, #0]
 8011fca:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8011fcc:	68fa      	ldr	r2, [r7, #12]
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	4413      	add	r3, r2
 8011fd2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8011fd4:	68fb      	ldr	r3, [r7, #12]
 8011fd6:	2b00      	cmp	r3, #0
 8011fd8:	d009      	beq.n	8011fee <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8011fda:	2208      	movs	r2, #8
 8011fdc:	4909      	ldr	r1, [pc, #36]	@ (8012004 <Get_SerialNum+0x50>)
 8011fde:	68f8      	ldr	r0, [r7, #12]
 8011fe0:	f000 f814 	bl	801200c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8011fe4:	2204      	movs	r2, #4
 8011fe6:	4908      	ldr	r1, [pc, #32]	@ (8012008 <Get_SerialNum+0x54>)
 8011fe8:	68b8      	ldr	r0, [r7, #8]
 8011fea:	f000 f80f 	bl	801200c <IntToUnicode>
  }
}
 8011fee:	bf00      	nop
 8011ff0:	3710      	adds	r7, #16
 8011ff2:	46bd      	mov	sp, r7
 8011ff4:	bd80      	pop	{r7, pc}
 8011ff6:	bf00      	nop
 8011ff8:	1fff7a10 	.word	0x1fff7a10
 8011ffc:	1fff7a14 	.word	0x1fff7a14
 8012000:	1fff7a18 	.word	0x1fff7a18
 8012004:	200000fa 	.word	0x200000fa
 8012008:	2000010a 	.word	0x2000010a

0801200c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801200c:	b480      	push	{r7}
 801200e:	b087      	sub	sp, #28
 8012010:	af00      	add	r7, sp, #0
 8012012:	60f8      	str	r0, [r7, #12]
 8012014:	60b9      	str	r1, [r7, #8]
 8012016:	4613      	mov	r3, r2
 8012018:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801201a:	2300      	movs	r3, #0
 801201c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801201e:	2300      	movs	r3, #0
 8012020:	75fb      	strb	r3, [r7, #23]
 8012022:	e027      	b.n	8012074 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8012024:	68fb      	ldr	r3, [r7, #12]
 8012026:	0f1b      	lsrs	r3, r3, #28
 8012028:	2b09      	cmp	r3, #9
 801202a:	d80b      	bhi.n	8012044 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801202c:	68fb      	ldr	r3, [r7, #12]
 801202e:	0f1b      	lsrs	r3, r3, #28
 8012030:	b2da      	uxtb	r2, r3
 8012032:	7dfb      	ldrb	r3, [r7, #23]
 8012034:	005b      	lsls	r3, r3, #1
 8012036:	4619      	mov	r1, r3
 8012038:	68bb      	ldr	r3, [r7, #8]
 801203a:	440b      	add	r3, r1
 801203c:	3230      	adds	r2, #48	@ 0x30
 801203e:	b2d2      	uxtb	r2, r2
 8012040:	701a      	strb	r2, [r3, #0]
 8012042:	e00a      	b.n	801205a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8012044:	68fb      	ldr	r3, [r7, #12]
 8012046:	0f1b      	lsrs	r3, r3, #28
 8012048:	b2da      	uxtb	r2, r3
 801204a:	7dfb      	ldrb	r3, [r7, #23]
 801204c:	005b      	lsls	r3, r3, #1
 801204e:	4619      	mov	r1, r3
 8012050:	68bb      	ldr	r3, [r7, #8]
 8012052:	440b      	add	r3, r1
 8012054:	3237      	adds	r2, #55	@ 0x37
 8012056:	b2d2      	uxtb	r2, r2
 8012058:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801205a:	68fb      	ldr	r3, [r7, #12]
 801205c:	011b      	lsls	r3, r3, #4
 801205e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8012060:	7dfb      	ldrb	r3, [r7, #23]
 8012062:	005b      	lsls	r3, r3, #1
 8012064:	3301      	adds	r3, #1
 8012066:	68ba      	ldr	r2, [r7, #8]
 8012068:	4413      	add	r3, r2
 801206a:	2200      	movs	r2, #0
 801206c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801206e:	7dfb      	ldrb	r3, [r7, #23]
 8012070:	3301      	adds	r3, #1
 8012072:	75fb      	strb	r3, [r7, #23]
 8012074:	7dfa      	ldrb	r2, [r7, #23]
 8012076:	79fb      	ldrb	r3, [r7, #7]
 8012078:	429a      	cmp	r2, r3
 801207a:	d3d3      	bcc.n	8012024 <IntToUnicode+0x18>
  }
}
 801207c:	bf00      	nop
 801207e:	bf00      	nop
 8012080:	371c      	adds	r7, #28
 8012082:	46bd      	mov	sp, r7
 8012084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012088:	4770      	bx	lr
	...

0801208c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801208c:	b580      	push	{r7, lr}
 801208e:	b08a      	sub	sp, #40	@ 0x28
 8012090:	af00      	add	r7, sp, #0
 8012092:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012094:	f107 0314 	add.w	r3, r7, #20
 8012098:	2200      	movs	r2, #0
 801209a:	601a      	str	r2, [r3, #0]
 801209c:	605a      	str	r2, [r3, #4]
 801209e:	609a      	str	r2, [r3, #8]
 80120a0:	60da      	str	r2, [r3, #12]
 80120a2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	681b      	ldr	r3, [r3, #0]
 80120a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80120ac:	d13a      	bne.n	8012124 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80120ae:	2300      	movs	r3, #0
 80120b0:	613b      	str	r3, [r7, #16]
 80120b2:	4b1e      	ldr	r3, [pc, #120]	@ (801212c <HAL_PCD_MspInit+0xa0>)
 80120b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80120b6:	4a1d      	ldr	r2, [pc, #116]	@ (801212c <HAL_PCD_MspInit+0xa0>)
 80120b8:	f043 0301 	orr.w	r3, r3, #1
 80120bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80120be:	4b1b      	ldr	r3, [pc, #108]	@ (801212c <HAL_PCD_MspInit+0xa0>)
 80120c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80120c2:	f003 0301 	and.w	r3, r3, #1
 80120c6:	613b      	str	r3, [r7, #16]
 80120c8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80120ca:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80120ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80120d0:	2302      	movs	r3, #2
 80120d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80120d4:	2300      	movs	r3, #0
 80120d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80120d8:	2303      	movs	r3, #3
 80120da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80120dc:	230a      	movs	r3, #10
 80120de:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80120e0:	f107 0314 	add.w	r3, r7, #20
 80120e4:	4619      	mov	r1, r3
 80120e6:	4812      	ldr	r0, [pc, #72]	@ (8012130 <HAL_PCD_MspInit+0xa4>)
 80120e8:	f7f4 fe86 	bl	8006df8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80120ec:	4b0f      	ldr	r3, [pc, #60]	@ (801212c <HAL_PCD_MspInit+0xa0>)
 80120ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80120f0:	4a0e      	ldr	r2, [pc, #56]	@ (801212c <HAL_PCD_MspInit+0xa0>)
 80120f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80120f6:	6353      	str	r3, [r2, #52]	@ 0x34
 80120f8:	2300      	movs	r3, #0
 80120fa:	60fb      	str	r3, [r7, #12]
 80120fc:	4b0b      	ldr	r3, [pc, #44]	@ (801212c <HAL_PCD_MspInit+0xa0>)
 80120fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012100:	4a0a      	ldr	r2, [pc, #40]	@ (801212c <HAL_PCD_MspInit+0xa0>)
 8012102:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8012106:	6453      	str	r3, [r2, #68]	@ 0x44
 8012108:	4b08      	ldr	r3, [pc, #32]	@ (801212c <HAL_PCD_MspInit+0xa0>)
 801210a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801210c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8012110:	60fb      	str	r3, [r7, #12]
 8012112:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8012114:	2200      	movs	r2, #0
 8012116:	2100      	movs	r1, #0
 8012118:	2043      	movs	r0, #67	@ 0x43
 801211a:	f7f4 fa1a 	bl	8006552 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801211e:	2043      	movs	r0, #67	@ 0x43
 8012120:	f7f4 fa33 	bl	800658a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8012124:	bf00      	nop
 8012126:	3728      	adds	r7, #40	@ 0x28
 8012128:	46bd      	mov	sp, r7
 801212a:	bd80      	pop	{r7, pc}
 801212c:	40023800 	.word	0x40023800
 8012130:	40020000 	.word	0x40020000

08012134 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012134:	b580      	push	{r7, lr}
 8012136:	b082      	sub	sp, #8
 8012138:	af00      	add	r7, sp, #0
 801213a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8012148:	4619      	mov	r1, r3
 801214a:	4610      	mov	r0, r2
 801214c:	f7fe fadd 	bl	801070a <USBD_LL_SetupStage>
}
 8012150:	bf00      	nop
 8012152:	3708      	adds	r7, #8
 8012154:	46bd      	mov	sp, r7
 8012156:	bd80      	pop	{r7, pc}

08012158 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012158:	b580      	push	{r7, lr}
 801215a:	b082      	sub	sp, #8
 801215c:	af00      	add	r7, sp, #0
 801215e:	6078      	str	r0, [r7, #4]
 8012160:	460b      	mov	r3, r1
 8012162:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 801216a:	78fa      	ldrb	r2, [r7, #3]
 801216c:	6879      	ldr	r1, [r7, #4]
 801216e:	4613      	mov	r3, r2
 8012170:	00db      	lsls	r3, r3, #3
 8012172:	4413      	add	r3, r2
 8012174:	009b      	lsls	r3, r3, #2
 8012176:	440b      	add	r3, r1
 8012178:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 801217c:	681a      	ldr	r2, [r3, #0]
 801217e:	78fb      	ldrb	r3, [r7, #3]
 8012180:	4619      	mov	r1, r3
 8012182:	f7fe fb17 	bl	80107b4 <USBD_LL_DataOutStage>
}
 8012186:	bf00      	nop
 8012188:	3708      	adds	r7, #8
 801218a:	46bd      	mov	sp, r7
 801218c:	bd80      	pop	{r7, pc}

0801218e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801218e:	b580      	push	{r7, lr}
 8012190:	b082      	sub	sp, #8
 8012192:	af00      	add	r7, sp, #0
 8012194:	6078      	str	r0, [r7, #4]
 8012196:	460b      	mov	r3, r1
 8012198:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80121a0:	78fa      	ldrb	r2, [r7, #3]
 80121a2:	6879      	ldr	r1, [r7, #4]
 80121a4:	4613      	mov	r3, r2
 80121a6:	00db      	lsls	r3, r3, #3
 80121a8:	4413      	add	r3, r2
 80121aa:	009b      	lsls	r3, r3, #2
 80121ac:	440b      	add	r3, r1
 80121ae:	3320      	adds	r3, #32
 80121b0:	681a      	ldr	r2, [r3, #0]
 80121b2:	78fb      	ldrb	r3, [r7, #3]
 80121b4:	4619      	mov	r1, r3
 80121b6:	f7fe fbb0 	bl	801091a <USBD_LL_DataInStage>
}
 80121ba:	bf00      	nop
 80121bc:	3708      	adds	r7, #8
 80121be:	46bd      	mov	sp, r7
 80121c0:	bd80      	pop	{r7, pc}

080121c2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80121c2:	b580      	push	{r7, lr}
 80121c4:	b082      	sub	sp, #8
 80121c6:	af00      	add	r7, sp, #0
 80121c8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80121d0:	4618      	mov	r0, r3
 80121d2:	f7fe fcea 	bl	8010baa <USBD_LL_SOF>
}
 80121d6:	bf00      	nop
 80121d8:	3708      	adds	r7, #8
 80121da:	46bd      	mov	sp, r7
 80121dc:	bd80      	pop	{r7, pc}

080121de <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80121de:	b580      	push	{r7, lr}
 80121e0:	b084      	sub	sp, #16
 80121e2:	af00      	add	r7, sp, #0
 80121e4:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80121e6:	2301      	movs	r3, #1
 80121e8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	79db      	ldrb	r3, [r3, #7]
 80121ee:	2b02      	cmp	r3, #2
 80121f0:	d001      	beq.n	80121f6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80121f2:	f7f2 ffa3 	bl	800513c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80121fc:	7bfa      	ldrb	r2, [r7, #15]
 80121fe:	4611      	mov	r1, r2
 8012200:	4618      	mov	r0, r3
 8012202:	f7fe fc8e 	bl	8010b22 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8012206:	687b      	ldr	r3, [r7, #4]
 8012208:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801220c:	4618      	mov	r0, r3
 801220e:	f7fe fc36 	bl	8010a7e <USBD_LL_Reset>
}
 8012212:	bf00      	nop
 8012214:	3710      	adds	r7, #16
 8012216:	46bd      	mov	sp, r7
 8012218:	bd80      	pop	{r7, pc}
	...

0801221c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801221c:	b580      	push	{r7, lr}
 801221e:	b082      	sub	sp, #8
 8012220:	af00      	add	r7, sp, #0
 8012222:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8012224:	687b      	ldr	r3, [r7, #4]
 8012226:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801222a:	4618      	mov	r0, r3
 801222c:	f7fe fc89 	bl	8010b42 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8012230:	687b      	ldr	r3, [r7, #4]
 8012232:	681b      	ldr	r3, [r3, #0]
 8012234:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8012238:	681b      	ldr	r3, [r3, #0]
 801223a:	687a      	ldr	r2, [r7, #4]
 801223c:	6812      	ldr	r2, [r2, #0]
 801223e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8012242:	f043 0301 	orr.w	r3, r3, #1
 8012246:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	7adb      	ldrb	r3, [r3, #11]
 801224c:	2b00      	cmp	r3, #0
 801224e:	d005      	beq.n	801225c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012250:	4b04      	ldr	r3, [pc, #16]	@ (8012264 <HAL_PCD_SuspendCallback+0x48>)
 8012252:	691b      	ldr	r3, [r3, #16]
 8012254:	4a03      	ldr	r2, [pc, #12]	@ (8012264 <HAL_PCD_SuspendCallback+0x48>)
 8012256:	f043 0306 	orr.w	r3, r3, #6
 801225a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801225c:	bf00      	nop
 801225e:	3708      	adds	r7, #8
 8012260:	46bd      	mov	sp, r7
 8012262:	bd80      	pop	{r7, pc}
 8012264:	e000ed00 	.word	0xe000ed00

08012268 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012268:	b580      	push	{r7, lr}
 801226a:	b082      	sub	sp, #8
 801226c:	af00      	add	r7, sp, #0
 801226e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8012276:	4618      	mov	r0, r3
 8012278:	f7fe fc7f 	bl	8010b7a <USBD_LL_Resume>
}
 801227c:	bf00      	nop
 801227e:	3708      	adds	r7, #8
 8012280:	46bd      	mov	sp, r7
 8012282:	bd80      	pop	{r7, pc}

08012284 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012284:	b580      	push	{r7, lr}
 8012286:	b082      	sub	sp, #8
 8012288:	af00      	add	r7, sp, #0
 801228a:	6078      	str	r0, [r7, #4]
 801228c:	460b      	mov	r3, r1
 801228e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8012296:	78fa      	ldrb	r2, [r7, #3]
 8012298:	4611      	mov	r1, r2
 801229a:	4618      	mov	r0, r3
 801229c:	f7fe fcd7 	bl	8010c4e <USBD_LL_IsoOUTIncomplete>
}
 80122a0:	bf00      	nop
 80122a2:	3708      	adds	r7, #8
 80122a4:	46bd      	mov	sp, r7
 80122a6:	bd80      	pop	{r7, pc}

080122a8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80122a8:	b580      	push	{r7, lr}
 80122aa:	b082      	sub	sp, #8
 80122ac:	af00      	add	r7, sp, #0
 80122ae:	6078      	str	r0, [r7, #4]
 80122b0:	460b      	mov	r3, r1
 80122b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80122ba:	78fa      	ldrb	r2, [r7, #3]
 80122bc:	4611      	mov	r1, r2
 80122be:	4618      	mov	r0, r3
 80122c0:	f7fe fc93 	bl	8010bea <USBD_LL_IsoINIncomplete>
}
 80122c4:	bf00      	nop
 80122c6:	3708      	adds	r7, #8
 80122c8:	46bd      	mov	sp, r7
 80122ca:	bd80      	pop	{r7, pc}

080122cc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80122cc:	b580      	push	{r7, lr}
 80122ce:	b082      	sub	sp, #8
 80122d0:	af00      	add	r7, sp, #0
 80122d2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80122da:	4618      	mov	r0, r3
 80122dc:	f7fe fce9 	bl	8010cb2 <USBD_LL_DevConnected>
}
 80122e0:	bf00      	nop
 80122e2:	3708      	adds	r7, #8
 80122e4:	46bd      	mov	sp, r7
 80122e6:	bd80      	pop	{r7, pc}

080122e8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80122e8:	b580      	push	{r7, lr}
 80122ea:	b082      	sub	sp, #8
 80122ec:	af00      	add	r7, sp, #0
 80122ee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80122f0:	687b      	ldr	r3, [r7, #4]
 80122f2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80122f6:	4618      	mov	r0, r3
 80122f8:	f7fe fce6 	bl	8010cc8 <USBD_LL_DevDisconnected>
}
 80122fc:	bf00      	nop
 80122fe:	3708      	adds	r7, #8
 8012300:	46bd      	mov	sp, r7
 8012302:	bd80      	pop	{r7, pc}

08012304 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8012304:	b580      	push	{r7, lr}
 8012306:	b082      	sub	sp, #8
 8012308:	af00      	add	r7, sp, #0
 801230a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	781b      	ldrb	r3, [r3, #0]
 8012310:	2b00      	cmp	r3, #0
 8012312:	d13c      	bne.n	801238e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8012314:	4a20      	ldr	r2, [pc, #128]	@ (8012398 <USBD_LL_Init+0x94>)
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	4a1e      	ldr	r2, [pc, #120]	@ (8012398 <USBD_LL_Init+0x94>)
 8012320:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8012324:	4b1c      	ldr	r3, [pc, #112]	@ (8012398 <USBD_LL_Init+0x94>)
 8012326:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 801232a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 801232c:	4b1a      	ldr	r3, [pc, #104]	@ (8012398 <USBD_LL_Init+0x94>)
 801232e:	2204      	movs	r2, #4
 8012330:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8012332:	4b19      	ldr	r3, [pc, #100]	@ (8012398 <USBD_LL_Init+0x94>)
 8012334:	2202      	movs	r2, #2
 8012336:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8012338:	4b17      	ldr	r3, [pc, #92]	@ (8012398 <USBD_LL_Init+0x94>)
 801233a:	2200      	movs	r2, #0
 801233c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801233e:	4b16      	ldr	r3, [pc, #88]	@ (8012398 <USBD_LL_Init+0x94>)
 8012340:	2202      	movs	r2, #2
 8012342:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8012344:	4b14      	ldr	r3, [pc, #80]	@ (8012398 <USBD_LL_Init+0x94>)
 8012346:	2200      	movs	r2, #0
 8012348:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801234a:	4b13      	ldr	r3, [pc, #76]	@ (8012398 <USBD_LL_Init+0x94>)
 801234c:	2200      	movs	r2, #0
 801234e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8012350:	4b11      	ldr	r3, [pc, #68]	@ (8012398 <USBD_LL_Init+0x94>)
 8012352:	2200      	movs	r2, #0
 8012354:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8012356:	4b10      	ldr	r3, [pc, #64]	@ (8012398 <USBD_LL_Init+0x94>)
 8012358:	2200      	movs	r2, #0
 801235a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801235c:	4b0e      	ldr	r3, [pc, #56]	@ (8012398 <USBD_LL_Init+0x94>)
 801235e:	2200      	movs	r2, #0
 8012360:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8012362:	480d      	ldr	r0, [pc, #52]	@ (8012398 <USBD_LL_Init+0x94>)
 8012364:	f7f8 fb09 	bl	800a97a <HAL_PCD_Init>
 8012368:	4603      	mov	r3, r0
 801236a:	2b00      	cmp	r3, #0
 801236c:	d001      	beq.n	8012372 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801236e:	f7f2 fee5 	bl	800513c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8012372:	2180      	movs	r1, #128	@ 0x80
 8012374:	4808      	ldr	r0, [pc, #32]	@ (8012398 <USBD_LL_Init+0x94>)
 8012376:	f7f9 fd36 	bl	800bde6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801237a:	2240      	movs	r2, #64	@ 0x40
 801237c:	2100      	movs	r1, #0
 801237e:	4806      	ldr	r0, [pc, #24]	@ (8012398 <USBD_LL_Init+0x94>)
 8012380:	f7f9 fcea 	bl	800bd58 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8012384:	2280      	movs	r2, #128	@ 0x80
 8012386:	2101      	movs	r1, #1
 8012388:	4803      	ldr	r0, [pc, #12]	@ (8012398 <USBD_LL_Init+0x94>)
 801238a:	f7f9 fce5 	bl	800bd58 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801238e:	2300      	movs	r3, #0
}
 8012390:	4618      	mov	r0, r3
 8012392:	3708      	adds	r7, #8
 8012394:	46bd      	mov	sp, r7
 8012396:	bd80      	pop	{r7, pc}
 8012398:	20001fcc 	.word	0x20001fcc

0801239c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801239c:	b580      	push	{r7, lr}
 801239e:	b084      	sub	sp, #16
 80123a0:	af00      	add	r7, sp, #0
 80123a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80123a4:	2300      	movs	r3, #0
 80123a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80123a8:	2300      	movs	r3, #0
 80123aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80123b2:	4618      	mov	r0, r3
 80123b4:	f7f8 fbf0 	bl	800ab98 <HAL_PCD_Start>
 80123b8:	4603      	mov	r3, r0
 80123ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80123bc:	7bfb      	ldrb	r3, [r7, #15]
 80123be:	4618      	mov	r0, r3
 80123c0:	f000 f942 	bl	8012648 <USBD_Get_USB_Status>
 80123c4:	4603      	mov	r3, r0
 80123c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80123c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80123ca:	4618      	mov	r0, r3
 80123cc:	3710      	adds	r7, #16
 80123ce:	46bd      	mov	sp, r7
 80123d0:	bd80      	pop	{r7, pc}

080123d2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80123d2:	b580      	push	{r7, lr}
 80123d4:	b084      	sub	sp, #16
 80123d6:	af00      	add	r7, sp, #0
 80123d8:	6078      	str	r0, [r7, #4]
 80123da:	4608      	mov	r0, r1
 80123dc:	4611      	mov	r1, r2
 80123de:	461a      	mov	r2, r3
 80123e0:	4603      	mov	r3, r0
 80123e2:	70fb      	strb	r3, [r7, #3]
 80123e4:	460b      	mov	r3, r1
 80123e6:	70bb      	strb	r3, [r7, #2]
 80123e8:	4613      	mov	r3, r2
 80123ea:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80123ec:	2300      	movs	r3, #0
 80123ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80123f0:	2300      	movs	r3, #0
 80123f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80123fa:	78bb      	ldrb	r3, [r7, #2]
 80123fc:	883a      	ldrh	r2, [r7, #0]
 80123fe:	78f9      	ldrb	r1, [r7, #3]
 8012400:	f7f9 f8c4 	bl	800b58c <HAL_PCD_EP_Open>
 8012404:	4603      	mov	r3, r0
 8012406:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012408:	7bfb      	ldrb	r3, [r7, #15]
 801240a:	4618      	mov	r0, r3
 801240c:	f000 f91c 	bl	8012648 <USBD_Get_USB_Status>
 8012410:	4603      	mov	r3, r0
 8012412:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012414:	7bbb      	ldrb	r3, [r7, #14]
}
 8012416:	4618      	mov	r0, r3
 8012418:	3710      	adds	r7, #16
 801241a:	46bd      	mov	sp, r7
 801241c:	bd80      	pop	{r7, pc}

0801241e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801241e:	b580      	push	{r7, lr}
 8012420:	b084      	sub	sp, #16
 8012422:	af00      	add	r7, sp, #0
 8012424:	6078      	str	r0, [r7, #4]
 8012426:	460b      	mov	r3, r1
 8012428:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801242a:	2300      	movs	r3, #0
 801242c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801242e:	2300      	movs	r3, #0
 8012430:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012438:	78fa      	ldrb	r2, [r7, #3]
 801243a:	4611      	mov	r1, r2
 801243c:	4618      	mov	r0, r3
 801243e:	f7f9 f90f 	bl	800b660 <HAL_PCD_EP_Close>
 8012442:	4603      	mov	r3, r0
 8012444:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012446:	7bfb      	ldrb	r3, [r7, #15]
 8012448:	4618      	mov	r0, r3
 801244a:	f000 f8fd 	bl	8012648 <USBD_Get_USB_Status>
 801244e:	4603      	mov	r3, r0
 8012450:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012452:	7bbb      	ldrb	r3, [r7, #14]
}
 8012454:	4618      	mov	r0, r3
 8012456:	3710      	adds	r7, #16
 8012458:	46bd      	mov	sp, r7
 801245a:	bd80      	pop	{r7, pc}

0801245c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801245c:	b580      	push	{r7, lr}
 801245e:	b084      	sub	sp, #16
 8012460:	af00      	add	r7, sp, #0
 8012462:	6078      	str	r0, [r7, #4]
 8012464:	460b      	mov	r3, r1
 8012466:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012468:	2300      	movs	r3, #0
 801246a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801246c:	2300      	movs	r3, #0
 801246e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012476:	78fa      	ldrb	r2, [r7, #3]
 8012478:	4611      	mov	r1, r2
 801247a:	4618      	mov	r0, r3
 801247c:	f7f9 f9c7 	bl	800b80e <HAL_PCD_EP_SetStall>
 8012480:	4603      	mov	r3, r0
 8012482:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012484:	7bfb      	ldrb	r3, [r7, #15]
 8012486:	4618      	mov	r0, r3
 8012488:	f000 f8de 	bl	8012648 <USBD_Get_USB_Status>
 801248c:	4603      	mov	r3, r0
 801248e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012490:	7bbb      	ldrb	r3, [r7, #14]
}
 8012492:	4618      	mov	r0, r3
 8012494:	3710      	adds	r7, #16
 8012496:	46bd      	mov	sp, r7
 8012498:	bd80      	pop	{r7, pc}

0801249a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801249a:	b580      	push	{r7, lr}
 801249c:	b084      	sub	sp, #16
 801249e:	af00      	add	r7, sp, #0
 80124a0:	6078      	str	r0, [r7, #4]
 80124a2:	460b      	mov	r3, r1
 80124a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80124a6:	2300      	movs	r3, #0
 80124a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80124aa:	2300      	movs	r3, #0
 80124ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80124b4:	78fa      	ldrb	r2, [r7, #3]
 80124b6:	4611      	mov	r1, r2
 80124b8:	4618      	mov	r0, r3
 80124ba:	f7f9 fa0b 	bl	800b8d4 <HAL_PCD_EP_ClrStall>
 80124be:	4603      	mov	r3, r0
 80124c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80124c2:	7bfb      	ldrb	r3, [r7, #15]
 80124c4:	4618      	mov	r0, r3
 80124c6:	f000 f8bf 	bl	8012648 <USBD_Get_USB_Status>
 80124ca:	4603      	mov	r3, r0
 80124cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80124ce:	7bbb      	ldrb	r3, [r7, #14]
}
 80124d0:	4618      	mov	r0, r3
 80124d2:	3710      	adds	r7, #16
 80124d4:	46bd      	mov	sp, r7
 80124d6:	bd80      	pop	{r7, pc}

080124d8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80124d8:	b480      	push	{r7}
 80124da:	b085      	sub	sp, #20
 80124dc:	af00      	add	r7, sp, #0
 80124de:	6078      	str	r0, [r7, #4]
 80124e0:	460b      	mov	r3, r1
 80124e2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80124ea:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80124ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80124f0:	2b00      	cmp	r3, #0
 80124f2:	da0b      	bge.n	801250c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80124f4:	78fb      	ldrb	r3, [r7, #3]
 80124f6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80124fa:	68f9      	ldr	r1, [r7, #12]
 80124fc:	4613      	mov	r3, r2
 80124fe:	00db      	lsls	r3, r3, #3
 8012500:	4413      	add	r3, r2
 8012502:	009b      	lsls	r3, r3, #2
 8012504:	440b      	add	r3, r1
 8012506:	3316      	adds	r3, #22
 8012508:	781b      	ldrb	r3, [r3, #0]
 801250a:	e00b      	b.n	8012524 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801250c:	78fb      	ldrb	r3, [r7, #3]
 801250e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8012512:	68f9      	ldr	r1, [r7, #12]
 8012514:	4613      	mov	r3, r2
 8012516:	00db      	lsls	r3, r3, #3
 8012518:	4413      	add	r3, r2
 801251a:	009b      	lsls	r3, r3, #2
 801251c:	440b      	add	r3, r1
 801251e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8012522:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012524:	4618      	mov	r0, r3
 8012526:	3714      	adds	r7, #20
 8012528:	46bd      	mov	sp, r7
 801252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801252e:	4770      	bx	lr

08012530 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8012530:	b580      	push	{r7, lr}
 8012532:	b084      	sub	sp, #16
 8012534:	af00      	add	r7, sp, #0
 8012536:	6078      	str	r0, [r7, #4]
 8012538:	460b      	mov	r3, r1
 801253a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801253c:	2300      	movs	r3, #0
 801253e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012540:	2300      	movs	r3, #0
 8012542:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801254a:	78fa      	ldrb	r2, [r7, #3]
 801254c:	4611      	mov	r1, r2
 801254e:	4618      	mov	r0, r3
 8012550:	f7f8 fff8 	bl	800b544 <HAL_PCD_SetAddress>
 8012554:	4603      	mov	r3, r0
 8012556:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012558:	7bfb      	ldrb	r3, [r7, #15]
 801255a:	4618      	mov	r0, r3
 801255c:	f000 f874 	bl	8012648 <USBD_Get_USB_Status>
 8012560:	4603      	mov	r3, r0
 8012562:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012564:	7bbb      	ldrb	r3, [r7, #14]
}
 8012566:	4618      	mov	r0, r3
 8012568:	3710      	adds	r7, #16
 801256a:	46bd      	mov	sp, r7
 801256c:	bd80      	pop	{r7, pc}

0801256e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801256e:	b580      	push	{r7, lr}
 8012570:	b086      	sub	sp, #24
 8012572:	af00      	add	r7, sp, #0
 8012574:	60f8      	str	r0, [r7, #12]
 8012576:	607a      	str	r2, [r7, #4]
 8012578:	603b      	str	r3, [r7, #0]
 801257a:	460b      	mov	r3, r1
 801257c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801257e:	2300      	movs	r3, #0
 8012580:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012582:	2300      	movs	r3, #0
 8012584:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8012586:	68fb      	ldr	r3, [r7, #12]
 8012588:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801258c:	7af9      	ldrb	r1, [r7, #11]
 801258e:	683b      	ldr	r3, [r7, #0]
 8012590:	687a      	ldr	r2, [r7, #4]
 8012592:	f7f9 f902 	bl	800b79a <HAL_PCD_EP_Transmit>
 8012596:	4603      	mov	r3, r0
 8012598:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801259a:	7dfb      	ldrb	r3, [r7, #23]
 801259c:	4618      	mov	r0, r3
 801259e:	f000 f853 	bl	8012648 <USBD_Get_USB_Status>
 80125a2:	4603      	mov	r3, r0
 80125a4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80125a6:	7dbb      	ldrb	r3, [r7, #22]
}
 80125a8:	4618      	mov	r0, r3
 80125aa:	3718      	adds	r7, #24
 80125ac:	46bd      	mov	sp, r7
 80125ae:	bd80      	pop	{r7, pc}

080125b0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80125b0:	b580      	push	{r7, lr}
 80125b2:	b086      	sub	sp, #24
 80125b4:	af00      	add	r7, sp, #0
 80125b6:	60f8      	str	r0, [r7, #12]
 80125b8:	607a      	str	r2, [r7, #4]
 80125ba:	603b      	str	r3, [r7, #0]
 80125bc:	460b      	mov	r3, r1
 80125be:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80125c0:	2300      	movs	r3, #0
 80125c2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80125c4:	2300      	movs	r3, #0
 80125c6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80125c8:	68fb      	ldr	r3, [r7, #12]
 80125ca:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80125ce:	7af9      	ldrb	r1, [r7, #11]
 80125d0:	683b      	ldr	r3, [r7, #0]
 80125d2:	687a      	ldr	r2, [r7, #4]
 80125d4:	f7f9 f88e 	bl	800b6f4 <HAL_PCD_EP_Receive>
 80125d8:	4603      	mov	r3, r0
 80125da:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80125dc:	7dfb      	ldrb	r3, [r7, #23]
 80125de:	4618      	mov	r0, r3
 80125e0:	f000 f832 	bl	8012648 <USBD_Get_USB_Status>
 80125e4:	4603      	mov	r3, r0
 80125e6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80125e8:	7dbb      	ldrb	r3, [r7, #22]
}
 80125ea:	4618      	mov	r0, r3
 80125ec:	3718      	adds	r7, #24
 80125ee:	46bd      	mov	sp, r7
 80125f0:	bd80      	pop	{r7, pc}

080125f2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80125f2:	b580      	push	{r7, lr}
 80125f4:	b082      	sub	sp, #8
 80125f6:	af00      	add	r7, sp, #0
 80125f8:	6078      	str	r0, [r7, #4]
 80125fa:	460b      	mov	r3, r1
 80125fc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012604:	78fa      	ldrb	r2, [r7, #3]
 8012606:	4611      	mov	r1, r2
 8012608:	4618      	mov	r0, r3
 801260a:	f7f9 f8ae 	bl	800b76a <HAL_PCD_EP_GetRxCount>
 801260e:	4603      	mov	r3, r0
}
 8012610:	4618      	mov	r0, r3
 8012612:	3708      	adds	r7, #8
 8012614:	46bd      	mov	sp, r7
 8012616:	bd80      	pop	{r7, pc}

08012618 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8012618:	b480      	push	{r7}
 801261a:	b083      	sub	sp, #12
 801261c:	af00      	add	r7, sp, #0
 801261e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8012620:	4b03      	ldr	r3, [pc, #12]	@ (8012630 <USBD_static_malloc+0x18>)
}
 8012622:	4618      	mov	r0, r3
 8012624:	370c      	adds	r7, #12
 8012626:	46bd      	mov	sp, r7
 8012628:	f85d 7b04 	ldr.w	r7, [sp], #4
 801262c:	4770      	bx	lr
 801262e:	bf00      	nop
 8012630:	200024b0 	.word	0x200024b0

08012634 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8012634:	b480      	push	{r7}
 8012636:	b083      	sub	sp, #12
 8012638:	af00      	add	r7, sp, #0
 801263a:	6078      	str	r0, [r7, #4]

}
 801263c:	bf00      	nop
 801263e:	370c      	adds	r7, #12
 8012640:	46bd      	mov	sp, r7
 8012642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012646:	4770      	bx	lr

08012648 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8012648:	b480      	push	{r7}
 801264a:	b085      	sub	sp, #20
 801264c:	af00      	add	r7, sp, #0
 801264e:	4603      	mov	r3, r0
 8012650:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012652:	2300      	movs	r3, #0
 8012654:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8012656:	79fb      	ldrb	r3, [r7, #7]
 8012658:	2b03      	cmp	r3, #3
 801265a:	d817      	bhi.n	801268c <USBD_Get_USB_Status+0x44>
 801265c:	a201      	add	r2, pc, #4	@ (adr r2, 8012664 <USBD_Get_USB_Status+0x1c>)
 801265e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012662:	bf00      	nop
 8012664:	08012675 	.word	0x08012675
 8012668:	0801267b 	.word	0x0801267b
 801266c:	08012681 	.word	0x08012681
 8012670:	08012687 	.word	0x08012687
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8012674:	2300      	movs	r3, #0
 8012676:	73fb      	strb	r3, [r7, #15]
    break;
 8012678:	e00b      	b.n	8012692 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801267a:	2303      	movs	r3, #3
 801267c:	73fb      	strb	r3, [r7, #15]
    break;
 801267e:	e008      	b.n	8012692 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8012680:	2301      	movs	r3, #1
 8012682:	73fb      	strb	r3, [r7, #15]
    break;
 8012684:	e005      	b.n	8012692 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8012686:	2303      	movs	r3, #3
 8012688:	73fb      	strb	r3, [r7, #15]
    break;
 801268a:	e002      	b.n	8012692 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801268c:	2303      	movs	r3, #3
 801268e:	73fb      	strb	r3, [r7, #15]
    break;
 8012690:	bf00      	nop
  }
  return usb_status;
 8012692:	7bfb      	ldrb	r3, [r7, #15]
}
 8012694:	4618      	mov	r0, r3
 8012696:	3714      	adds	r7, #20
 8012698:	46bd      	mov	sp, r7
 801269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801269e:	4770      	bx	lr

080126a0 <__itoa>:
 80126a0:	1e93      	subs	r3, r2, #2
 80126a2:	2b22      	cmp	r3, #34	@ 0x22
 80126a4:	b510      	push	{r4, lr}
 80126a6:	460c      	mov	r4, r1
 80126a8:	d904      	bls.n	80126b4 <__itoa+0x14>
 80126aa:	2300      	movs	r3, #0
 80126ac:	700b      	strb	r3, [r1, #0]
 80126ae:	461c      	mov	r4, r3
 80126b0:	4620      	mov	r0, r4
 80126b2:	bd10      	pop	{r4, pc}
 80126b4:	2a0a      	cmp	r2, #10
 80126b6:	d109      	bne.n	80126cc <__itoa+0x2c>
 80126b8:	2800      	cmp	r0, #0
 80126ba:	da07      	bge.n	80126cc <__itoa+0x2c>
 80126bc:	232d      	movs	r3, #45	@ 0x2d
 80126be:	700b      	strb	r3, [r1, #0]
 80126c0:	4240      	negs	r0, r0
 80126c2:	2101      	movs	r1, #1
 80126c4:	4421      	add	r1, r4
 80126c6:	f000 f805 	bl	80126d4 <__utoa>
 80126ca:	e7f1      	b.n	80126b0 <__itoa+0x10>
 80126cc:	2100      	movs	r1, #0
 80126ce:	e7f9      	b.n	80126c4 <__itoa+0x24>

080126d0 <itoa>:
 80126d0:	f7ff bfe6 	b.w	80126a0 <__itoa>

080126d4 <__utoa>:
 80126d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80126d6:	4c1f      	ldr	r4, [pc, #124]	@ (8012754 <__utoa+0x80>)
 80126d8:	b08b      	sub	sp, #44	@ 0x2c
 80126da:	4605      	mov	r5, r0
 80126dc:	460b      	mov	r3, r1
 80126de:	466e      	mov	r6, sp
 80126e0:	f104 0c20 	add.w	ip, r4, #32
 80126e4:	6820      	ldr	r0, [r4, #0]
 80126e6:	6861      	ldr	r1, [r4, #4]
 80126e8:	4637      	mov	r7, r6
 80126ea:	c703      	stmia	r7!, {r0, r1}
 80126ec:	3408      	adds	r4, #8
 80126ee:	4564      	cmp	r4, ip
 80126f0:	463e      	mov	r6, r7
 80126f2:	d1f7      	bne.n	80126e4 <__utoa+0x10>
 80126f4:	7921      	ldrb	r1, [r4, #4]
 80126f6:	7139      	strb	r1, [r7, #4]
 80126f8:	1e91      	subs	r1, r2, #2
 80126fa:	6820      	ldr	r0, [r4, #0]
 80126fc:	6038      	str	r0, [r7, #0]
 80126fe:	2922      	cmp	r1, #34	@ 0x22
 8012700:	f04f 0100 	mov.w	r1, #0
 8012704:	d904      	bls.n	8012710 <__utoa+0x3c>
 8012706:	7019      	strb	r1, [r3, #0]
 8012708:	460b      	mov	r3, r1
 801270a:	4618      	mov	r0, r3
 801270c:	b00b      	add	sp, #44	@ 0x2c
 801270e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012710:	1e58      	subs	r0, r3, #1
 8012712:	4684      	mov	ip, r0
 8012714:	fbb5 f7f2 	udiv	r7, r5, r2
 8012718:	fb02 5617 	mls	r6, r2, r7, r5
 801271c:	3628      	adds	r6, #40	@ 0x28
 801271e:	446e      	add	r6, sp
 8012720:	460c      	mov	r4, r1
 8012722:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8012726:	f80c 6f01 	strb.w	r6, [ip, #1]!
 801272a:	462e      	mov	r6, r5
 801272c:	42b2      	cmp	r2, r6
 801272e:	f101 0101 	add.w	r1, r1, #1
 8012732:	463d      	mov	r5, r7
 8012734:	d9ee      	bls.n	8012714 <__utoa+0x40>
 8012736:	2200      	movs	r2, #0
 8012738:	545a      	strb	r2, [r3, r1]
 801273a:	1919      	adds	r1, r3, r4
 801273c:	1aa5      	subs	r5, r4, r2
 801273e:	42aa      	cmp	r2, r5
 8012740:	dae3      	bge.n	801270a <__utoa+0x36>
 8012742:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8012746:	780e      	ldrb	r6, [r1, #0]
 8012748:	7006      	strb	r6, [r0, #0]
 801274a:	3201      	adds	r2, #1
 801274c:	f801 5901 	strb.w	r5, [r1], #-1
 8012750:	e7f4      	b.n	801273c <__utoa+0x68>
 8012752:	bf00      	nop
 8012754:	08014718 	.word	0x08014718

08012758 <siprintf>:
 8012758:	b40e      	push	{r1, r2, r3}
 801275a:	b510      	push	{r4, lr}
 801275c:	b09d      	sub	sp, #116	@ 0x74
 801275e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8012760:	9002      	str	r0, [sp, #8]
 8012762:	9006      	str	r0, [sp, #24]
 8012764:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8012768:	480a      	ldr	r0, [pc, #40]	@ (8012794 <siprintf+0x3c>)
 801276a:	9107      	str	r1, [sp, #28]
 801276c:	9104      	str	r1, [sp, #16]
 801276e:	490a      	ldr	r1, [pc, #40]	@ (8012798 <siprintf+0x40>)
 8012770:	f853 2b04 	ldr.w	r2, [r3], #4
 8012774:	9105      	str	r1, [sp, #20]
 8012776:	2400      	movs	r4, #0
 8012778:	a902      	add	r1, sp, #8
 801277a:	6800      	ldr	r0, [r0, #0]
 801277c:	9301      	str	r3, [sp, #4]
 801277e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8012780:	f000 f9b6 	bl	8012af0 <_svfiprintf_r>
 8012784:	9b02      	ldr	r3, [sp, #8]
 8012786:	701c      	strb	r4, [r3, #0]
 8012788:	b01d      	add	sp, #116	@ 0x74
 801278a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801278e:	b003      	add	sp, #12
 8012790:	4770      	bx	lr
 8012792:	bf00      	nop
 8012794:	20000114 	.word	0x20000114
 8012798:	ffff0208 	.word	0xffff0208

0801279c <memset>:
 801279c:	4402      	add	r2, r0
 801279e:	4603      	mov	r3, r0
 80127a0:	4293      	cmp	r3, r2
 80127a2:	d100      	bne.n	80127a6 <memset+0xa>
 80127a4:	4770      	bx	lr
 80127a6:	f803 1b01 	strb.w	r1, [r3], #1
 80127aa:	e7f9      	b.n	80127a0 <memset+0x4>

080127ac <strncpy>:
 80127ac:	b510      	push	{r4, lr}
 80127ae:	3901      	subs	r1, #1
 80127b0:	4603      	mov	r3, r0
 80127b2:	b132      	cbz	r2, 80127c2 <strncpy+0x16>
 80127b4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80127b8:	f803 4b01 	strb.w	r4, [r3], #1
 80127bc:	3a01      	subs	r2, #1
 80127be:	2c00      	cmp	r4, #0
 80127c0:	d1f7      	bne.n	80127b2 <strncpy+0x6>
 80127c2:	441a      	add	r2, r3
 80127c4:	2100      	movs	r1, #0
 80127c6:	4293      	cmp	r3, r2
 80127c8:	d100      	bne.n	80127cc <strncpy+0x20>
 80127ca:	bd10      	pop	{r4, pc}
 80127cc:	f803 1b01 	strb.w	r1, [r3], #1
 80127d0:	e7f9      	b.n	80127c6 <strncpy+0x1a>
	...

080127d4 <__errno>:
 80127d4:	4b01      	ldr	r3, [pc, #4]	@ (80127dc <__errno+0x8>)
 80127d6:	6818      	ldr	r0, [r3, #0]
 80127d8:	4770      	bx	lr
 80127da:	bf00      	nop
 80127dc:	20000114 	.word	0x20000114

080127e0 <__libc_init_array>:
 80127e0:	b570      	push	{r4, r5, r6, lr}
 80127e2:	4d0d      	ldr	r5, [pc, #52]	@ (8012818 <__libc_init_array+0x38>)
 80127e4:	4c0d      	ldr	r4, [pc, #52]	@ (801281c <__libc_init_array+0x3c>)
 80127e6:	1b64      	subs	r4, r4, r5
 80127e8:	10a4      	asrs	r4, r4, #2
 80127ea:	2600      	movs	r6, #0
 80127ec:	42a6      	cmp	r6, r4
 80127ee:	d109      	bne.n	8012804 <__libc_init_array+0x24>
 80127f0:	4d0b      	ldr	r5, [pc, #44]	@ (8012820 <__libc_init_array+0x40>)
 80127f2:	4c0c      	ldr	r4, [pc, #48]	@ (8012824 <__libc_init_array+0x44>)
 80127f4:	f000 fc64 	bl	80130c0 <_init>
 80127f8:	1b64      	subs	r4, r4, r5
 80127fa:	10a4      	asrs	r4, r4, #2
 80127fc:	2600      	movs	r6, #0
 80127fe:	42a6      	cmp	r6, r4
 8012800:	d105      	bne.n	801280e <__libc_init_array+0x2e>
 8012802:	bd70      	pop	{r4, r5, r6, pc}
 8012804:	f855 3b04 	ldr.w	r3, [r5], #4
 8012808:	4798      	blx	r3
 801280a:	3601      	adds	r6, #1
 801280c:	e7ee      	b.n	80127ec <__libc_init_array+0xc>
 801280e:	f855 3b04 	ldr.w	r3, [r5], #4
 8012812:	4798      	blx	r3
 8012814:	3601      	adds	r6, #1
 8012816:	e7f2      	b.n	80127fe <__libc_init_array+0x1e>
 8012818:	08014778 	.word	0x08014778
 801281c:	08014778 	.word	0x08014778
 8012820:	08014778 	.word	0x08014778
 8012824:	0801477c 	.word	0x0801477c

08012828 <__retarget_lock_acquire_recursive>:
 8012828:	4770      	bx	lr

0801282a <__retarget_lock_release_recursive>:
 801282a:	4770      	bx	lr

0801282c <memcpy>:
 801282c:	440a      	add	r2, r1
 801282e:	4291      	cmp	r1, r2
 8012830:	f100 33ff 	add.w	r3, r0, #4294967295
 8012834:	d100      	bne.n	8012838 <memcpy+0xc>
 8012836:	4770      	bx	lr
 8012838:	b510      	push	{r4, lr}
 801283a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801283e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012842:	4291      	cmp	r1, r2
 8012844:	d1f9      	bne.n	801283a <memcpy+0xe>
 8012846:	bd10      	pop	{r4, pc}

08012848 <_free_r>:
 8012848:	b538      	push	{r3, r4, r5, lr}
 801284a:	4605      	mov	r5, r0
 801284c:	2900      	cmp	r1, #0
 801284e:	d041      	beq.n	80128d4 <_free_r+0x8c>
 8012850:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012854:	1f0c      	subs	r4, r1, #4
 8012856:	2b00      	cmp	r3, #0
 8012858:	bfb8      	it	lt
 801285a:	18e4      	addlt	r4, r4, r3
 801285c:	f000 f8e0 	bl	8012a20 <__malloc_lock>
 8012860:	4a1d      	ldr	r2, [pc, #116]	@ (80128d8 <_free_r+0x90>)
 8012862:	6813      	ldr	r3, [r2, #0]
 8012864:	b933      	cbnz	r3, 8012874 <_free_r+0x2c>
 8012866:	6063      	str	r3, [r4, #4]
 8012868:	6014      	str	r4, [r2, #0]
 801286a:	4628      	mov	r0, r5
 801286c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012870:	f000 b8dc 	b.w	8012a2c <__malloc_unlock>
 8012874:	42a3      	cmp	r3, r4
 8012876:	d908      	bls.n	801288a <_free_r+0x42>
 8012878:	6820      	ldr	r0, [r4, #0]
 801287a:	1821      	adds	r1, r4, r0
 801287c:	428b      	cmp	r3, r1
 801287e:	bf01      	itttt	eq
 8012880:	6819      	ldreq	r1, [r3, #0]
 8012882:	685b      	ldreq	r3, [r3, #4]
 8012884:	1809      	addeq	r1, r1, r0
 8012886:	6021      	streq	r1, [r4, #0]
 8012888:	e7ed      	b.n	8012866 <_free_r+0x1e>
 801288a:	461a      	mov	r2, r3
 801288c:	685b      	ldr	r3, [r3, #4]
 801288e:	b10b      	cbz	r3, 8012894 <_free_r+0x4c>
 8012890:	42a3      	cmp	r3, r4
 8012892:	d9fa      	bls.n	801288a <_free_r+0x42>
 8012894:	6811      	ldr	r1, [r2, #0]
 8012896:	1850      	adds	r0, r2, r1
 8012898:	42a0      	cmp	r0, r4
 801289a:	d10b      	bne.n	80128b4 <_free_r+0x6c>
 801289c:	6820      	ldr	r0, [r4, #0]
 801289e:	4401      	add	r1, r0
 80128a0:	1850      	adds	r0, r2, r1
 80128a2:	4283      	cmp	r3, r0
 80128a4:	6011      	str	r1, [r2, #0]
 80128a6:	d1e0      	bne.n	801286a <_free_r+0x22>
 80128a8:	6818      	ldr	r0, [r3, #0]
 80128aa:	685b      	ldr	r3, [r3, #4]
 80128ac:	6053      	str	r3, [r2, #4]
 80128ae:	4408      	add	r0, r1
 80128b0:	6010      	str	r0, [r2, #0]
 80128b2:	e7da      	b.n	801286a <_free_r+0x22>
 80128b4:	d902      	bls.n	80128bc <_free_r+0x74>
 80128b6:	230c      	movs	r3, #12
 80128b8:	602b      	str	r3, [r5, #0]
 80128ba:	e7d6      	b.n	801286a <_free_r+0x22>
 80128bc:	6820      	ldr	r0, [r4, #0]
 80128be:	1821      	adds	r1, r4, r0
 80128c0:	428b      	cmp	r3, r1
 80128c2:	bf04      	itt	eq
 80128c4:	6819      	ldreq	r1, [r3, #0]
 80128c6:	685b      	ldreq	r3, [r3, #4]
 80128c8:	6063      	str	r3, [r4, #4]
 80128ca:	bf04      	itt	eq
 80128cc:	1809      	addeq	r1, r1, r0
 80128ce:	6021      	streq	r1, [r4, #0]
 80128d0:	6054      	str	r4, [r2, #4]
 80128d2:	e7ca      	b.n	801286a <_free_r+0x22>
 80128d4:	bd38      	pop	{r3, r4, r5, pc}
 80128d6:	bf00      	nop
 80128d8:	20002814 	.word	0x20002814

080128dc <sbrk_aligned>:
 80128dc:	b570      	push	{r4, r5, r6, lr}
 80128de:	4e0f      	ldr	r6, [pc, #60]	@ (801291c <sbrk_aligned+0x40>)
 80128e0:	460c      	mov	r4, r1
 80128e2:	6831      	ldr	r1, [r6, #0]
 80128e4:	4605      	mov	r5, r0
 80128e6:	b911      	cbnz	r1, 80128ee <sbrk_aligned+0x12>
 80128e8:	f000 fba4 	bl	8013034 <_sbrk_r>
 80128ec:	6030      	str	r0, [r6, #0]
 80128ee:	4621      	mov	r1, r4
 80128f0:	4628      	mov	r0, r5
 80128f2:	f000 fb9f 	bl	8013034 <_sbrk_r>
 80128f6:	1c43      	adds	r3, r0, #1
 80128f8:	d103      	bne.n	8012902 <sbrk_aligned+0x26>
 80128fa:	f04f 34ff 	mov.w	r4, #4294967295
 80128fe:	4620      	mov	r0, r4
 8012900:	bd70      	pop	{r4, r5, r6, pc}
 8012902:	1cc4      	adds	r4, r0, #3
 8012904:	f024 0403 	bic.w	r4, r4, #3
 8012908:	42a0      	cmp	r0, r4
 801290a:	d0f8      	beq.n	80128fe <sbrk_aligned+0x22>
 801290c:	1a21      	subs	r1, r4, r0
 801290e:	4628      	mov	r0, r5
 8012910:	f000 fb90 	bl	8013034 <_sbrk_r>
 8012914:	3001      	adds	r0, #1
 8012916:	d1f2      	bne.n	80128fe <sbrk_aligned+0x22>
 8012918:	e7ef      	b.n	80128fa <sbrk_aligned+0x1e>
 801291a:	bf00      	nop
 801291c:	20002810 	.word	0x20002810

08012920 <_malloc_r>:
 8012920:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012924:	1ccd      	adds	r5, r1, #3
 8012926:	f025 0503 	bic.w	r5, r5, #3
 801292a:	3508      	adds	r5, #8
 801292c:	2d0c      	cmp	r5, #12
 801292e:	bf38      	it	cc
 8012930:	250c      	movcc	r5, #12
 8012932:	2d00      	cmp	r5, #0
 8012934:	4606      	mov	r6, r0
 8012936:	db01      	blt.n	801293c <_malloc_r+0x1c>
 8012938:	42a9      	cmp	r1, r5
 801293a:	d904      	bls.n	8012946 <_malloc_r+0x26>
 801293c:	230c      	movs	r3, #12
 801293e:	6033      	str	r3, [r6, #0]
 8012940:	2000      	movs	r0, #0
 8012942:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012946:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012a1c <_malloc_r+0xfc>
 801294a:	f000 f869 	bl	8012a20 <__malloc_lock>
 801294e:	f8d8 3000 	ldr.w	r3, [r8]
 8012952:	461c      	mov	r4, r3
 8012954:	bb44      	cbnz	r4, 80129a8 <_malloc_r+0x88>
 8012956:	4629      	mov	r1, r5
 8012958:	4630      	mov	r0, r6
 801295a:	f7ff ffbf 	bl	80128dc <sbrk_aligned>
 801295e:	1c43      	adds	r3, r0, #1
 8012960:	4604      	mov	r4, r0
 8012962:	d158      	bne.n	8012a16 <_malloc_r+0xf6>
 8012964:	f8d8 4000 	ldr.w	r4, [r8]
 8012968:	4627      	mov	r7, r4
 801296a:	2f00      	cmp	r7, #0
 801296c:	d143      	bne.n	80129f6 <_malloc_r+0xd6>
 801296e:	2c00      	cmp	r4, #0
 8012970:	d04b      	beq.n	8012a0a <_malloc_r+0xea>
 8012972:	6823      	ldr	r3, [r4, #0]
 8012974:	4639      	mov	r1, r7
 8012976:	4630      	mov	r0, r6
 8012978:	eb04 0903 	add.w	r9, r4, r3
 801297c:	f000 fb5a 	bl	8013034 <_sbrk_r>
 8012980:	4581      	cmp	r9, r0
 8012982:	d142      	bne.n	8012a0a <_malloc_r+0xea>
 8012984:	6821      	ldr	r1, [r4, #0]
 8012986:	1a6d      	subs	r5, r5, r1
 8012988:	4629      	mov	r1, r5
 801298a:	4630      	mov	r0, r6
 801298c:	f7ff ffa6 	bl	80128dc <sbrk_aligned>
 8012990:	3001      	adds	r0, #1
 8012992:	d03a      	beq.n	8012a0a <_malloc_r+0xea>
 8012994:	6823      	ldr	r3, [r4, #0]
 8012996:	442b      	add	r3, r5
 8012998:	6023      	str	r3, [r4, #0]
 801299a:	f8d8 3000 	ldr.w	r3, [r8]
 801299e:	685a      	ldr	r2, [r3, #4]
 80129a0:	bb62      	cbnz	r2, 80129fc <_malloc_r+0xdc>
 80129a2:	f8c8 7000 	str.w	r7, [r8]
 80129a6:	e00f      	b.n	80129c8 <_malloc_r+0xa8>
 80129a8:	6822      	ldr	r2, [r4, #0]
 80129aa:	1b52      	subs	r2, r2, r5
 80129ac:	d420      	bmi.n	80129f0 <_malloc_r+0xd0>
 80129ae:	2a0b      	cmp	r2, #11
 80129b0:	d917      	bls.n	80129e2 <_malloc_r+0xc2>
 80129b2:	1961      	adds	r1, r4, r5
 80129b4:	42a3      	cmp	r3, r4
 80129b6:	6025      	str	r5, [r4, #0]
 80129b8:	bf18      	it	ne
 80129ba:	6059      	strne	r1, [r3, #4]
 80129bc:	6863      	ldr	r3, [r4, #4]
 80129be:	bf08      	it	eq
 80129c0:	f8c8 1000 	streq.w	r1, [r8]
 80129c4:	5162      	str	r2, [r4, r5]
 80129c6:	604b      	str	r3, [r1, #4]
 80129c8:	4630      	mov	r0, r6
 80129ca:	f000 f82f 	bl	8012a2c <__malloc_unlock>
 80129ce:	f104 000b 	add.w	r0, r4, #11
 80129d2:	1d23      	adds	r3, r4, #4
 80129d4:	f020 0007 	bic.w	r0, r0, #7
 80129d8:	1ac2      	subs	r2, r0, r3
 80129da:	bf1c      	itt	ne
 80129dc:	1a1b      	subne	r3, r3, r0
 80129de:	50a3      	strne	r3, [r4, r2]
 80129e0:	e7af      	b.n	8012942 <_malloc_r+0x22>
 80129e2:	6862      	ldr	r2, [r4, #4]
 80129e4:	42a3      	cmp	r3, r4
 80129e6:	bf0c      	ite	eq
 80129e8:	f8c8 2000 	streq.w	r2, [r8]
 80129ec:	605a      	strne	r2, [r3, #4]
 80129ee:	e7eb      	b.n	80129c8 <_malloc_r+0xa8>
 80129f0:	4623      	mov	r3, r4
 80129f2:	6864      	ldr	r4, [r4, #4]
 80129f4:	e7ae      	b.n	8012954 <_malloc_r+0x34>
 80129f6:	463c      	mov	r4, r7
 80129f8:	687f      	ldr	r7, [r7, #4]
 80129fa:	e7b6      	b.n	801296a <_malloc_r+0x4a>
 80129fc:	461a      	mov	r2, r3
 80129fe:	685b      	ldr	r3, [r3, #4]
 8012a00:	42a3      	cmp	r3, r4
 8012a02:	d1fb      	bne.n	80129fc <_malloc_r+0xdc>
 8012a04:	2300      	movs	r3, #0
 8012a06:	6053      	str	r3, [r2, #4]
 8012a08:	e7de      	b.n	80129c8 <_malloc_r+0xa8>
 8012a0a:	230c      	movs	r3, #12
 8012a0c:	6033      	str	r3, [r6, #0]
 8012a0e:	4630      	mov	r0, r6
 8012a10:	f000 f80c 	bl	8012a2c <__malloc_unlock>
 8012a14:	e794      	b.n	8012940 <_malloc_r+0x20>
 8012a16:	6005      	str	r5, [r0, #0]
 8012a18:	e7d6      	b.n	80129c8 <_malloc_r+0xa8>
 8012a1a:	bf00      	nop
 8012a1c:	20002814 	.word	0x20002814

08012a20 <__malloc_lock>:
 8012a20:	4801      	ldr	r0, [pc, #4]	@ (8012a28 <__malloc_lock+0x8>)
 8012a22:	f7ff bf01 	b.w	8012828 <__retarget_lock_acquire_recursive>
 8012a26:	bf00      	nop
 8012a28:	2000280c 	.word	0x2000280c

08012a2c <__malloc_unlock>:
 8012a2c:	4801      	ldr	r0, [pc, #4]	@ (8012a34 <__malloc_unlock+0x8>)
 8012a2e:	f7ff befc 	b.w	801282a <__retarget_lock_release_recursive>
 8012a32:	bf00      	nop
 8012a34:	2000280c 	.word	0x2000280c

08012a38 <__ssputs_r>:
 8012a38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012a3c:	688e      	ldr	r6, [r1, #8]
 8012a3e:	461f      	mov	r7, r3
 8012a40:	42be      	cmp	r6, r7
 8012a42:	680b      	ldr	r3, [r1, #0]
 8012a44:	4682      	mov	sl, r0
 8012a46:	460c      	mov	r4, r1
 8012a48:	4690      	mov	r8, r2
 8012a4a:	d82d      	bhi.n	8012aa8 <__ssputs_r+0x70>
 8012a4c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012a50:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8012a54:	d026      	beq.n	8012aa4 <__ssputs_r+0x6c>
 8012a56:	6965      	ldr	r5, [r4, #20]
 8012a58:	6909      	ldr	r1, [r1, #16]
 8012a5a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012a5e:	eba3 0901 	sub.w	r9, r3, r1
 8012a62:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012a66:	1c7b      	adds	r3, r7, #1
 8012a68:	444b      	add	r3, r9
 8012a6a:	106d      	asrs	r5, r5, #1
 8012a6c:	429d      	cmp	r5, r3
 8012a6e:	bf38      	it	cc
 8012a70:	461d      	movcc	r5, r3
 8012a72:	0553      	lsls	r3, r2, #21
 8012a74:	d527      	bpl.n	8012ac6 <__ssputs_r+0x8e>
 8012a76:	4629      	mov	r1, r5
 8012a78:	f7ff ff52 	bl	8012920 <_malloc_r>
 8012a7c:	4606      	mov	r6, r0
 8012a7e:	b360      	cbz	r0, 8012ada <__ssputs_r+0xa2>
 8012a80:	6921      	ldr	r1, [r4, #16]
 8012a82:	464a      	mov	r2, r9
 8012a84:	f7ff fed2 	bl	801282c <memcpy>
 8012a88:	89a3      	ldrh	r3, [r4, #12]
 8012a8a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8012a8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012a92:	81a3      	strh	r3, [r4, #12]
 8012a94:	6126      	str	r6, [r4, #16]
 8012a96:	6165      	str	r5, [r4, #20]
 8012a98:	444e      	add	r6, r9
 8012a9a:	eba5 0509 	sub.w	r5, r5, r9
 8012a9e:	6026      	str	r6, [r4, #0]
 8012aa0:	60a5      	str	r5, [r4, #8]
 8012aa2:	463e      	mov	r6, r7
 8012aa4:	42be      	cmp	r6, r7
 8012aa6:	d900      	bls.n	8012aaa <__ssputs_r+0x72>
 8012aa8:	463e      	mov	r6, r7
 8012aaa:	6820      	ldr	r0, [r4, #0]
 8012aac:	4632      	mov	r2, r6
 8012aae:	4641      	mov	r1, r8
 8012ab0:	f000 faa6 	bl	8013000 <memmove>
 8012ab4:	68a3      	ldr	r3, [r4, #8]
 8012ab6:	1b9b      	subs	r3, r3, r6
 8012ab8:	60a3      	str	r3, [r4, #8]
 8012aba:	6823      	ldr	r3, [r4, #0]
 8012abc:	4433      	add	r3, r6
 8012abe:	6023      	str	r3, [r4, #0]
 8012ac0:	2000      	movs	r0, #0
 8012ac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012ac6:	462a      	mov	r2, r5
 8012ac8:	f000 fac4 	bl	8013054 <_realloc_r>
 8012acc:	4606      	mov	r6, r0
 8012ace:	2800      	cmp	r0, #0
 8012ad0:	d1e0      	bne.n	8012a94 <__ssputs_r+0x5c>
 8012ad2:	6921      	ldr	r1, [r4, #16]
 8012ad4:	4650      	mov	r0, sl
 8012ad6:	f7ff feb7 	bl	8012848 <_free_r>
 8012ada:	230c      	movs	r3, #12
 8012adc:	f8ca 3000 	str.w	r3, [sl]
 8012ae0:	89a3      	ldrh	r3, [r4, #12]
 8012ae2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012ae6:	81a3      	strh	r3, [r4, #12]
 8012ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8012aec:	e7e9      	b.n	8012ac2 <__ssputs_r+0x8a>
	...

08012af0 <_svfiprintf_r>:
 8012af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012af4:	4698      	mov	r8, r3
 8012af6:	898b      	ldrh	r3, [r1, #12]
 8012af8:	061b      	lsls	r3, r3, #24
 8012afa:	b09d      	sub	sp, #116	@ 0x74
 8012afc:	4607      	mov	r7, r0
 8012afe:	460d      	mov	r5, r1
 8012b00:	4614      	mov	r4, r2
 8012b02:	d510      	bpl.n	8012b26 <_svfiprintf_r+0x36>
 8012b04:	690b      	ldr	r3, [r1, #16]
 8012b06:	b973      	cbnz	r3, 8012b26 <_svfiprintf_r+0x36>
 8012b08:	2140      	movs	r1, #64	@ 0x40
 8012b0a:	f7ff ff09 	bl	8012920 <_malloc_r>
 8012b0e:	6028      	str	r0, [r5, #0]
 8012b10:	6128      	str	r0, [r5, #16]
 8012b12:	b930      	cbnz	r0, 8012b22 <_svfiprintf_r+0x32>
 8012b14:	230c      	movs	r3, #12
 8012b16:	603b      	str	r3, [r7, #0]
 8012b18:	f04f 30ff 	mov.w	r0, #4294967295
 8012b1c:	b01d      	add	sp, #116	@ 0x74
 8012b1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b22:	2340      	movs	r3, #64	@ 0x40
 8012b24:	616b      	str	r3, [r5, #20]
 8012b26:	2300      	movs	r3, #0
 8012b28:	9309      	str	r3, [sp, #36]	@ 0x24
 8012b2a:	2320      	movs	r3, #32
 8012b2c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012b30:	f8cd 800c 	str.w	r8, [sp, #12]
 8012b34:	2330      	movs	r3, #48	@ 0x30
 8012b36:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8012cd4 <_svfiprintf_r+0x1e4>
 8012b3a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012b3e:	f04f 0901 	mov.w	r9, #1
 8012b42:	4623      	mov	r3, r4
 8012b44:	469a      	mov	sl, r3
 8012b46:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012b4a:	b10a      	cbz	r2, 8012b50 <_svfiprintf_r+0x60>
 8012b4c:	2a25      	cmp	r2, #37	@ 0x25
 8012b4e:	d1f9      	bne.n	8012b44 <_svfiprintf_r+0x54>
 8012b50:	ebba 0b04 	subs.w	fp, sl, r4
 8012b54:	d00b      	beq.n	8012b6e <_svfiprintf_r+0x7e>
 8012b56:	465b      	mov	r3, fp
 8012b58:	4622      	mov	r2, r4
 8012b5a:	4629      	mov	r1, r5
 8012b5c:	4638      	mov	r0, r7
 8012b5e:	f7ff ff6b 	bl	8012a38 <__ssputs_r>
 8012b62:	3001      	adds	r0, #1
 8012b64:	f000 80a7 	beq.w	8012cb6 <_svfiprintf_r+0x1c6>
 8012b68:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012b6a:	445a      	add	r2, fp
 8012b6c:	9209      	str	r2, [sp, #36]	@ 0x24
 8012b6e:	f89a 3000 	ldrb.w	r3, [sl]
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	f000 809f 	beq.w	8012cb6 <_svfiprintf_r+0x1c6>
 8012b78:	2300      	movs	r3, #0
 8012b7a:	f04f 32ff 	mov.w	r2, #4294967295
 8012b7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012b82:	f10a 0a01 	add.w	sl, sl, #1
 8012b86:	9304      	str	r3, [sp, #16]
 8012b88:	9307      	str	r3, [sp, #28]
 8012b8a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012b8e:	931a      	str	r3, [sp, #104]	@ 0x68
 8012b90:	4654      	mov	r4, sl
 8012b92:	2205      	movs	r2, #5
 8012b94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012b98:	484e      	ldr	r0, [pc, #312]	@ (8012cd4 <_svfiprintf_r+0x1e4>)
 8012b9a:	f7ed fb29 	bl	80001f0 <memchr>
 8012b9e:	9a04      	ldr	r2, [sp, #16]
 8012ba0:	b9d8      	cbnz	r0, 8012bda <_svfiprintf_r+0xea>
 8012ba2:	06d0      	lsls	r0, r2, #27
 8012ba4:	bf44      	itt	mi
 8012ba6:	2320      	movmi	r3, #32
 8012ba8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012bac:	0711      	lsls	r1, r2, #28
 8012bae:	bf44      	itt	mi
 8012bb0:	232b      	movmi	r3, #43	@ 0x2b
 8012bb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012bb6:	f89a 3000 	ldrb.w	r3, [sl]
 8012bba:	2b2a      	cmp	r3, #42	@ 0x2a
 8012bbc:	d015      	beq.n	8012bea <_svfiprintf_r+0xfa>
 8012bbe:	9a07      	ldr	r2, [sp, #28]
 8012bc0:	4654      	mov	r4, sl
 8012bc2:	2000      	movs	r0, #0
 8012bc4:	f04f 0c0a 	mov.w	ip, #10
 8012bc8:	4621      	mov	r1, r4
 8012bca:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012bce:	3b30      	subs	r3, #48	@ 0x30
 8012bd0:	2b09      	cmp	r3, #9
 8012bd2:	d94b      	bls.n	8012c6c <_svfiprintf_r+0x17c>
 8012bd4:	b1b0      	cbz	r0, 8012c04 <_svfiprintf_r+0x114>
 8012bd6:	9207      	str	r2, [sp, #28]
 8012bd8:	e014      	b.n	8012c04 <_svfiprintf_r+0x114>
 8012bda:	eba0 0308 	sub.w	r3, r0, r8
 8012bde:	fa09 f303 	lsl.w	r3, r9, r3
 8012be2:	4313      	orrs	r3, r2
 8012be4:	9304      	str	r3, [sp, #16]
 8012be6:	46a2      	mov	sl, r4
 8012be8:	e7d2      	b.n	8012b90 <_svfiprintf_r+0xa0>
 8012bea:	9b03      	ldr	r3, [sp, #12]
 8012bec:	1d19      	adds	r1, r3, #4
 8012bee:	681b      	ldr	r3, [r3, #0]
 8012bf0:	9103      	str	r1, [sp, #12]
 8012bf2:	2b00      	cmp	r3, #0
 8012bf4:	bfbb      	ittet	lt
 8012bf6:	425b      	neglt	r3, r3
 8012bf8:	f042 0202 	orrlt.w	r2, r2, #2
 8012bfc:	9307      	strge	r3, [sp, #28]
 8012bfe:	9307      	strlt	r3, [sp, #28]
 8012c00:	bfb8      	it	lt
 8012c02:	9204      	strlt	r2, [sp, #16]
 8012c04:	7823      	ldrb	r3, [r4, #0]
 8012c06:	2b2e      	cmp	r3, #46	@ 0x2e
 8012c08:	d10a      	bne.n	8012c20 <_svfiprintf_r+0x130>
 8012c0a:	7863      	ldrb	r3, [r4, #1]
 8012c0c:	2b2a      	cmp	r3, #42	@ 0x2a
 8012c0e:	d132      	bne.n	8012c76 <_svfiprintf_r+0x186>
 8012c10:	9b03      	ldr	r3, [sp, #12]
 8012c12:	1d1a      	adds	r2, r3, #4
 8012c14:	681b      	ldr	r3, [r3, #0]
 8012c16:	9203      	str	r2, [sp, #12]
 8012c18:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012c1c:	3402      	adds	r4, #2
 8012c1e:	9305      	str	r3, [sp, #20]
 8012c20:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8012ce4 <_svfiprintf_r+0x1f4>
 8012c24:	7821      	ldrb	r1, [r4, #0]
 8012c26:	2203      	movs	r2, #3
 8012c28:	4650      	mov	r0, sl
 8012c2a:	f7ed fae1 	bl	80001f0 <memchr>
 8012c2e:	b138      	cbz	r0, 8012c40 <_svfiprintf_r+0x150>
 8012c30:	9b04      	ldr	r3, [sp, #16]
 8012c32:	eba0 000a 	sub.w	r0, r0, sl
 8012c36:	2240      	movs	r2, #64	@ 0x40
 8012c38:	4082      	lsls	r2, r0
 8012c3a:	4313      	orrs	r3, r2
 8012c3c:	3401      	adds	r4, #1
 8012c3e:	9304      	str	r3, [sp, #16]
 8012c40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012c44:	4824      	ldr	r0, [pc, #144]	@ (8012cd8 <_svfiprintf_r+0x1e8>)
 8012c46:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012c4a:	2206      	movs	r2, #6
 8012c4c:	f7ed fad0 	bl	80001f0 <memchr>
 8012c50:	2800      	cmp	r0, #0
 8012c52:	d036      	beq.n	8012cc2 <_svfiprintf_r+0x1d2>
 8012c54:	4b21      	ldr	r3, [pc, #132]	@ (8012cdc <_svfiprintf_r+0x1ec>)
 8012c56:	bb1b      	cbnz	r3, 8012ca0 <_svfiprintf_r+0x1b0>
 8012c58:	9b03      	ldr	r3, [sp, #12]
 8012c5a:	3307      	adds	r3, #7
 8012c5c:	f023 0307 	bic.w	r3, r3, #7
 8012c60:	3308      	adds	r3, #8
 8012c62:	9303      	str	r3, [sp, #12]
 8012c64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012c66:	4433      	add	r3, r6
 8012c68:	9309      	str	r3, [sp, #36]	@ 0x24
 8012c6a:	e76a      	b.n	8012b42 <_svfiprintf_r+0x52>
 8012c6c:	fb0c 3202 	mla	r2, ip, r2, r3
 8012c70:	460c      	mov	r4, r1
 8012c72:	2001      	movs	r0, #1
 8012c74:	e7a8      	b.n	8012bc8 <_svfiprintf_r+0xd8>
 8012c76:	2300      	movs	r3, #0
 8012c78:	3401      	adds	r4, #1
 8012c7a:	9305      	str	r3, [sp, #20]
 8012c7c:	4619      	mov	r1, r3
 8012c7e:	f04f 0c0a 	mov.w	ip, #10
 8012c82:	4620      	mov	r0, r4
 8012c84:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012c88:	3a30      	subs	r2, #48	@ 0x30
 8012c8a:	2a09      	cmp	r2, #9
 8012c8c:	d903      	bls.n	8012c96 <_svfiprintf_r+0x1a6>
 8012c8e:	2b00      	cmp	r3, #0
 8012c90:	d0c6      	beq.n	8012c20 <_svfiprintf_r+0x130>
 8012c92:	9105      	str	r1, [sp, #20]
 8012c94:	e7c4      	b.n	8012c20 <_svfiprintf_r+0x130>
 8012c96:	fb0c 2101 	mla	r1, ip, r1, r2
 8012c9a:	4604      	mov	r4, r0
 8012c9c:	2301      	movs	r3, #1
 8012c9e:	e7f0      	b.n	8012c82 <_svfiprintf_r+0x192>
 8012ca0:	ab03      	add	r3, sp, #12
 8012ca2:	9300      	str	r3, [sp, #0]
 8012ca4:	462a      	mov	r2, r5
 8012ca6:	4b0e      	ldr	r3, [pc, #56]	@ (8012ce0 <_svfiprintf_r+0x1f0>)
 8012ca8:	a904      	add	r1, sp, #16
 8012caa:	4638      	mov	r0, r7
 8012cac:	f3af 8000 	nop.w
 8012cb0:	1c42      	adds	r2, r0, #1
 8012cb2:	4606      	mov	r6, r0
 8012cb4:	d1d6      	bne.n	8012c64 <_svfiprintf_r+0x174>
 8012cb6:	89ab      	ldrh	r3, [r5, #12]
 8012cb8:	065b      	lsls	r3, r3, #25
 8012cba:	f53f af2d 	bmi.w	8012b18 <_svfiprintf_r+0x28>
 8012cbe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012cc0:	e72c      	b.n	8012b1c <_svfiprintf_r+0x2c>
 8012cc2:	ab03      	add	r3, sp, #12
 8012cc4:	9300      	str	r3, [sp, #0]
 8012cc6:	462a      	mov	r2, r5
 8012cc8:	4b05      	ldr	r3, [pc, #20]	@ (8012ce0 <_svfiprintf_r+0x1f0>)
 8012cca:	a904      	add	r1, sp, #16
 8012ccc:	4638      	mov	r0, r7
 8012cce:	f000 f879 	bl	8012dc4 <_printf_i>
 8012cd2:	e7ed      	b.n	8012cb0 <_svfiprintf_r+0x1c0>
 8012cd4:	0801473d 	.word	0x0801473d
 8012cd8:	08014747 	.word	0x08014747
 8012cdc:	00000000 	.word	0x00000000
 8012ce0:	08012a39 	.word	0x08012a39
 8012ce4:	08014743 	.word	0x08014743

08012ce8 <_printf_common>:
 8012ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012cec:	4616      	mov	r6, r2
 8012cee:	4698      	mov	r8, r3
 8012cf0:	688a      	ldr	r2, [r1, #8]
 8012cf2:	690b      	ldr	r3, [r1, #16]
 8012cf4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012cf8:	4293      	cmp	r3, r2
 8012cfa:	bfb8      	it	lt
 8012cfc:	4613      	movlt	r3, r2
 8012cfe:	6033      	str	r3, [r6, #0]
 8012d00:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8012d04:	4607      	mov	r7, r0
 8012d06:	460c      	mov	r4, r1
 8012d08:	b10a      	cbz	r2, 8012d0e <_printf_common+0x26>
 8012d0a:	3301      	adds	r3, #1
 8012d0c:	6033      	str	r3, [r6, #0]
 8012d0e:	6823      	ldr	r3, [r4, #0]
 8012d10:	0699      	lsls	r1, r3, #26
 8012d12:	bf42      	ittt	mi
 8012d14:	6833      	ldrmi	r3, [r6, #0]
 8012d16:	3302      	addmi	r3, #2
 8012d18:	6033      	strmi	r3, [r6, #0]
 8012d1a:	6825      	ldr	r5, [r4, #0]
 8012d1c:	f015 0506 	ands.w	r5, r5, #6
 8012d20:	d106      	bne.n	8012d30 <_printf_common+0x48>
 8012d22:	f104 0a19 	add.w	sl, r4, #25
 8012d26:	68e3      	ldr	r3, [r4, #12]
 8012d28:	6832      	ldr	r2, [r6, #0]
 8012d2a:	1a9b      	subs	r3, r3, r2
 8012d2c:	42ab      	cmp	r3, r5
 8012d2e:	dc26      	bgt.n	8012d7e <_printf_common+0x96>
 8012d30:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8012d34:	6822      	ldr	r2, [r4, #0]
 8012d36:	3b00      	subs	r3, #0
 8012d38:	bf18      	it	ne
 8012d3a:	2301      	movne	r3, #1
 8012d3c:	0692      	lsls	r2, r2, #26
 8012d3e:	d42b      	bmi.n	8012d98 <_printf_common+0xb0>
 8012d40:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8012d44:	4641      	mov	r1, r8
 8012d46:	4638      	mov	r0, r7
 8012d48:	47c8      	blx	r9
 8012d4a:	3001      	adds	r0, #1
 8012d4c:	d01e      	beq.n	8012d8c <_printf_common+0xa4>
 8012d4e:	6823      	ldr	r3, [r4, #0]
 8012d50:	6922      	ldr	r2, [r4, #16]
 8012d52:	f003 0306 	and.w	r3, r3, #6
 8012d56:	2b04      	cmp	r3, #4
 8012d58:	bf02      	ittt	eq
 8012d5a:	68e5      	ldreq	r5, [r4, #12]
 8012d5c:	6833      	ldreq	r3, [r6, #0]
 8012d5e:	1aed      	subeq	r5, r5, r3
 8012d60:	68a3      	ldr	r3, [r4, #8]
 8012d62:	bf0c      	ite	eq
 8012d64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012d68:	2500      	movne	r5, #0
 8012d6a:	4293      	cmp	r3, r2
 8012d6c:	bfc4      	itt	gt
 8012d6e:	1a9b      	subgt	r3, r3, r2
 8012d70:	18ed      	addgt	r5, r5, r3
 8012d72:	2600      	movs	r6, #0
 8012d74:	341a      	adds	r4, #26
 8012d76:	42b5      	cmp	r5, r6
 8012d78:	d11a      	bne.n	8012db0 <_printf_common+0xc8>
 8012d7a:	2000      	movs	r0, #0
 8012d7c:	e008      	b.n	8012d90 <_printf_common+0xa8>
 8012d7e:	2301      	movs	r3, #1
 8012d80:	4652      	mov	r2, sl
 8012d82:	4641      	mov	r1, r8
 8012d84:	4638      	mov	r0, r7
 8012d86:	47c8      	blx	r9
 8012d88:	3001      	adds	r0, #1
 8012d8a:	d103      	bne.n	8012d94 <_printf_common+0xac>
 8012d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8012d90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012d94:	3501      	adds	r5, #1
 8012d96:	e7c6      	b.n	8012d26 <_printf_common+0x3e>
 8012d98:	18e1      	adds	r1, r4, r3
 8012d9a:	1c5a      	adds	r2, r3, #1
 8012d9c:	2030      	movs	r0, #48	@ 0x30
 8012d9e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8012da2:	4422      	add	r2, r4
 8012da4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8012da8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8012dac:	3302      	adds	r3, #2
 8012dae:	e7c7      	b.n	8012d40 <_printf_common+0x58>
 8012db0:	2301      	movs	r3, #1
 8012db2:	4622      	mov	r2, r4
 8012db4:	4641      	mov	r1, r8
 8012db6:	4638      	mov	r0, r7
 8012db8:	47c8      	blx	r9
 8012dba:	3001      	adds	r0, #1
 8012dbc:	d0e6      	beq.n	8012d8c <_printf_common+0xa4>
 8012dbe:	3601      	adds	r6, #1
 8012dc0:	e7d9      	b.n	8012d76 <_printf_common+0x8e>
	...

08012dc4 <_printf_i>:
 8012dc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012dc8:	7e0f      	ldrb	r7, [r1, #24]
 8012dca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012dcc:	2f78      	cmp	r7, #120	@ 0x78
 8012dce:	4691      	mov	r9, r2
 8012dd0:	4680      	mov	r8, r0
 8012dd2:	460c      	mov	r4, r1
 8012dd4:	469a      	mov	sl, r3
 8012dd6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8012dda:	d807      	bhi.n	8012dec <_printf_i+0x28>
 8012ddc:	2f62      	cmp	r7, #98	@ 0x62
 8012dde:	d80a      	bhi.n	8012df6 <_printf_i+0x32>
 8012de0:	2f00      	cmp	r7, #0
 8012de2:	f000 80d1 	beq.w	8012f88 <_printf_i+0x1c4>
 8012de6:	2f58      	cmp	r7, #88	@ 0x58
 8012de8:	f000 80b8 	beq.w	8012f5c <_printf_i+0x198>
 8012dec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012df0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8012df4:	e03a      	b.n	8012e6c <_printf_i+0xa8>
 8012df6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8012dfa:	2b15      	cmp	r3, #21
 8012dfc:	d8f6      	bhi.n	8012dec <_printf_i+0x28>
 8012dfe:	a101      	add	r1, pc, #4	@ (adr r1, 8012e04 <_printf_i+0x40>)
 8012e00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012e04:	08012e5d 	.word	0x08012e5d
 8012e08:	08012e71 	.word	0x08012e71
 8012e0c:	08012ded 	.word	0x08012ded
 8012e10:	08012ded 	.word	0x08012ded
 8012e14:	08012ded 	.word	0x08012ded
 8012e18:	08012ded 	.word	0x08012ded
 8012e1c:	08012e71 	.word	0x08012e71
 8012e20:	08012ded 	.word	0x08012ded
 8012e24:	08012ded 	.word	0x08012ded
 8012e28:	08012ded 	.word	0x08012ded
 8012e2c:	08012ded 	.word	0x08012ded
 8012e30:	08012f6f 	.word	0x08012f6f
 8012e34:	08012e9b 	.word	0x08012e9b
 8012e38:	08012f29 	.word	0x08012f29
 8012e3c:	08012ded 	.word	0x08012ded
 8012e40:	08012ded 	.word	0x08012ded
 8012e44:	08012f91 	.word	0x08012f91
 8012e48:	08012ded 	.word	0x08012ded
 8012e4c:	08012e9b 	.word	0x08012e9b
 8012e50:	08012ded 	.word	0x08012ded
 8012e54:	08012ded 	.word	0x08012ded
 8012e58:	08012f31 	.word	0x08012f31
 8012e5c:	6833      	ldr	r3, [r6, #0]
 8012e5e:	1d1a      	adds	r2, r3, #4
 8012e60:	681b      	ldr	r3, [r3, #0]
 8012e62:	6032      	str	r2, [r6, #0]
 8012e64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012e68:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8012e6c:	2301      	movs	r3, #1
 8012e6e:	e09c      	b.n	8012faa <_printf_i+0x1e6>
 8012e70:	6833      	ldr	r3, [r6, #0]
 8012e72:	6820      	ldr	r0, [r4, #0]
 8012e74:	1d19      	adds	r1, r3, #4
 8012e76:	6031      	str	r1, [r6, #0]
 8012e78:	0606      	lsls	r6, r0, #24
 8012e7a:	d501      	bpl.n	8012e80 <_printf_i+0xbc>
 8012e7c:	681d      	ldr	r5, [r3, #0]
 8012e7e:	e003      	b.n	8012e88 <_printf_i+0xc4>
 8012e80:	0645      	lsls	r5, r0, #25
 8012e82:	d5fb      	bpl.n	8012e7c <_printf_i+0xb8>
 8012e84:	f9b3 5000 	ldrsh.w	r5, [r3]
 8012e88:	2d00      	cmp	r5, #0
 8012e8a:	da03      	bge.n	8012e94 <_printf_i+0xd0>
 8012e8c:	232d      	movs	r3, #45	@ 0x2d
 8012e8e:	426d      	negs	r5, r5
 8012e90:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012e94:	4858      	ldr	r0, [pc, #352]	@ (8012ff8 <_printf_i+0x234>)
 8012e96:	230a      	movs	r3, #10
 8012e98:	e011      	b.n	8012ebe <_printf_i+0xfa>
 8012e9a:	6821      	ldr	r1, [r4, #0]
 8012e9c:	6833      	ldr	r3, [r6, #0]
 8012e9e:	0608      	lsls	r0, r1, #24
 8012ea0:	f853 5b04 	ldr.w	r5, [r3], #4
 8012ea4:	d402      	bmi.n	8012eac <_printf_i+0xe8>
 8012ea6:	0649      	lsls	r1, r1, #25
 8012ea8:	bf48      	it	mi
 8012eaa:	b2ad      	uxthmi	r5, r5
 8012eac:	2f6f      	cmp	r7, #111	@ 0x6f
 8012eae:	4852      	ldr	r0, [pc, #328]	@ (8012ff8 <_printf_i+0x234>)
 8012eb0:	6033      	str	r3, [r6, #0]
 8012eb2:	bf14      	ite	ne
 8012eb4:	230a      	movne	r3, #10
 8012eb6:	2308      	moveq	r3, #8
 8012eb8:	2100      	movs	r1, #0
 8012eba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8012ebe:	6866      	ldr	r6, [r4, #4]
 8012ec0:	60a6      	str	r6, [r4, #8]
 8012ec2:	2e00      	cmp	r6, #0
 8012ec4:	db05      	blt.n	8012ed2 <_printf_i+0x10e>
 8012ec6:	6821      	ldr	r1, [r4, #0]
 8012ec8:	432e      	orrs	r6, r5
 8012eca:	f021 0104 	bic.w	r1, r1, #4
 8012ece:	6021      	str	r1, [r4, #0]
 8012ed0:	d04b      	beq.n	8012f6a <_printf_i+0x1a6>
 8012ed2:	4616      	mov	r6, r2
 8012ed4:	fbb5 f1f3 	udiv	r1, r5, r3
 8012ed8:	fb03 5711 	mls	r7, r3, r1, r5
 8012edc:	5dc7      	ldrb	r7, [r0, r7]
 8012ede:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012ee2:	462f      	mov	r7, r5
 8012ee4:	42bb      	cmp	r3, r7
 8012ee6:	460d      	mov	r5, r1
 8012ee8:	d9f4      	bls.n	8012ed4 <_printf_i+0x110>
 8012eea:	2b08      	cmp	r3, #8
 8012eec:	d10b      	bne.n	8012f06 <_printf_i+0x142>
 8012eee:	6823      	ldr	r3, [r4, #0]
 8012ef0:	07df      	lsls	r7, r3, #31
 8012ef2:	d508      	bpl.n	8012f06 <_printf_i+0x142>
 8012ef4:	6923      	ldr	r3, [r4, #16]
 8012ef6:	6861      	ldr	r1, [r4, #4]
 8012ef8:	4299      	cmp	r1, r3
 8012efa:	bfde      	ittt	le
 8012efc:	2330      	movle	r3, #48	@ 0x30
 8012efe:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012f02:	f106 36ff 	addle.w	r6, r6, #4294967295
 8012f06:	1b92      	subs	r2, r2, r6
 8012f08:	6122      	str	r2, [r4, #16]
 8012f0a:	f8cd a000 	str.w	sl, [sp]
 8012f0e:	464b      	mov	r3, r9
 8012f10:	aa03      	add	r2, sp, #12
 8012f12:	4621      	mov	r1, r4
 8012f14:	4640      	mov	r0, r8
 8012f16:	f7ff fee7 	bl	8012ce8 <_printf_common>
 8012f1a:	3001      	adds	r0, #1
 8012f1c:	d14a      	bne.n	8012fb4 <_printf_i+0x1f0>
 8012f1e:	f04f 30ff 	mov.w	r0, #4294967295
 8012f22:	b004      	add	sp, #16
 8012f24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012f28:	6823      	ldr	r3, [r4, #0]
 8012f2a:	f043 0320 	orr.w	r3, r3, #32
 8012f2e:	6023      	str	r3, [r4, #0]
 8012f30:	4832      	ldr	r0, [pc, #200]	@ (8012ffc <_printf_i+0x238>)
 8012f32:	2778      	movs	r7, #120	@ 0x78
 8012f34:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8012f38:	6823      	ldr	r3, [r4, #0]
 8012f3a:	6831      	ldr	r1, [r6, #0]
 8012f3c:	061f      	lsls	r7, r3, #24
 8012f3e:	f851 5b04 	ldr.w	r5, [r1], #4
 8012f42:	d402      	bmi.n	8012f4a <_printf_i+0x186>
 8012f44:	065f      	lsls	r7, r3, #25
 8012f46:	bf48      	it	mi
 8012f48:	b2ad      	uxthmi	r5, r5
 8012f4a:	6031      	str	r1, [r6, #0]
 8012f4c:	07d9      	lsls	r1, r3, #31
 8012f4e:	bf44      	itt	mi
 8012f50:	f043 0320 	orrmi.w	r3, r3, #32
 8012f54:	6023      	strmi	r3, [r4, #0]
 8012f56:	b11d      	cbz	r5, 8012f60 <_printf_i+0x19c>
 8012f58:	2310      	movs	r3, #16
 8012f5a:	e7ad      	b.n	8012eb8 <_printf_i+0xf4>
 8012f5c:	4826      	ldr	r0, [pc, #152]	@ (8012ff8 <_printf_i+0x234>)
 8012f5e:	e7e9      	b.n	8012f34 <_printf_i+0x170>
 8012f60:	6823      	ldr	r3, [r4, #0]
 8012f62:	f023 0320 	bic.w	r3, r3, #32
 8012f66:	6023      	str	r3, [r4, #0]
 8012f68:	e7f6      	b.n	8012f58 <_printf_i+0x194>
 8012f6a:	4616      	mov	r6, r2
 8012f6c:	e7bd      	b.n	8012eea <_printf_i+0x126>
 8012f6e:	6833      	ldr	r3, [r6, #0]
 8012f70:	6825      	ldr	r5, [r4, #0]
 8012f72:	6961      	ldr	r1, [r4, #20]
 8012f74:	1d18      	adds	r0, r3, #4
 8012f76:	6030      	str	r0, [r6, #0]
 8012f78:	062e      	lsls	r6, r5, #24
 8012f7a:	681b      	ldr	r3, [r3, #0]
 8012f7c:	d501      	bpl.n	8012f82 <_printf_i+0x1be>
 8012f7e:	6019      	str	r1, [r3, #0]
 8012f80:	e002      	b.n	8012f88 <_printf_i+0x1c4>
 8012f82:	0668      	lsls	r0, r5, #25
 8012f84:	d5fb      	bpl.n	8012f7e <_printf_i+0x1ba>
 8012f86:	8019      	strh	r1, [r3, #0]
 8012f88:	2300      	movs	r3, #0
 8012f8a:	6123      	str	r3, [r4, #16]
 8012f8c:	4616      	mov	r6, r2
 8012f8e:	e7bc      	b.n	8012f0a <_printf_i+0x146>
 8012f90:	6833      	ldr	r3, [r6, #0]
 8012f92:	1d1a      	adds	r2, r3, #4
 8012f94:	6032      	str	r2, [r6, #0]
 8012f96:	681e      	ldr	r6, [r3, #0]
 8012f98:	6862      	ldr	r2, [r4, #4]
 8012f9a:	2100      	movs	r1, #0
 8012f9c:	4630      	mov	r0, r6
 8012f9e:	f7ed f927 	bl	80001f0 <memchr>
 8012fa2:	b108      	cbz	r0, 8012fa8 <_printf_i+0x1e4>
 8012fa4:	1b80      	subs	r0, r0, r6
 8012fa6:	6060      	str	r0, [r4, #4]
 8012fa8:	6863      	ldr	r3, [r4, #4]
 8012faa:	6123      	str	r3, [r4, #16]
 8012fac:	2300      	movs	r3, #0
 8012fae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012fb2:	e7aa      	b.n	8012f0a <_printf_i+0x146>
 8012fb4:	6923      	ldr	r3, [r4, #16]
 8012fb6:	4632      	mov	r2, r6
 8012fb8:	4649      	mov	r1, r9
 8012fba:	4640      	mov	r0, r8
 8012fbc:	47d0      	blx	sl
 8012fbe:	3001      	adds	r0, #1
 8012fc0:	d0ad      	beq.n	8012f1e <_printf_i+0x15a>
 8012fc2:	6823      	ldr	r3, [r4, #0]
 8012fc4:	079b      	lsls	r3, r3, #30
 8012fc6:	d413      	bmi.n	8012ff0 <_printf_i+0x22c>
 8012fc8:	68e0      	ldr	r0, [r4, #12]
 8012fca:	9b03      	ldr	r3, [sp, #12]
 8012fcc:	4298      	cmp	r0, r3
 8012fce:	bfb8      	it	lt
 8012fd0:	4618      	movlt	r0, r3
 8012fd2:	e7a6      	b.n	8012f22 <_printf_i+0x15e>
 8012fd4:	2301      	movs	r3, #1
 8012fd6:	4632      	mov	r2, r6
 8012fd8:	4649      	mov	r1, r9
 8012fda:	4640      	mov	r0, r8
 8012fdc:	47d0      	blx	sl
 8012fde:	3001      	adds	r0, #1
 8012fe0:	d09d      	beq.n	8012f1e <_printf_i+0x15a>
 8012fe2:	3501      	adds	r5, #1
 8012fe4:	68e3      	ldr	r3, [r4, #12]
 8012fe6:	9903      	ldr	r1, [sp, #12]
 8012fe8:	1a5b      	subs	r3, r3, r1
 8012fea:	42ab      	cmp	r3, r5
 8012fec:	dcf2      	bgt.n	8012fd4 <_printf_i+0x210>
 8012fee:	e7eb      	b.n	8012fc8 <_printf_i+0x204>
 8012ff0:	2500      	movs	r5, #0
 8012ff2:	f104 0619 	add.w	r6, r4, #25
 8012ff6:	e7f5      	b.n	8012fe4 <_printf_i+0x220>
 8012ff8:	0801474e 	.word	0x0801474e
 8012ffc:	0801475f 	.word	0x0801475f

08013000 <memmove>:
 8013000:	4288      	cmp	r0, r1
 8013002:	b510      	push	{r4, lr}
 8013004:	eb01 0402 	add.w	r4, r1, r2
 8013008:	d902      	bls.n	8013010 <memmove+0x10>
 801300a:	4284      	cmp	r4, r0
 801300c:	4623      	mov	r3, r4
 801300e:	d807      	bhi.n	8013020 <memmove+0x20>
 8013010:	1e43      	subs	r3, r0, #1
 8013012:	42a1      	cmp	r1, r4
 8013014:	d008      	beq.n	8013028 <memmove+0x28>
 8013016:	f811 2b01 	ldrb.w	r2, [r1], #1
 801301a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801301e:	e7f8      	b.n	8013012 <memmove+0x12>
 8013020:	4402      	add	r2, r0
 8013022:	4601      	mov	r1, r0
 8013024:	428a      	cmp	r2, r1
 8013026:	d100      	bne.n	801302a <memmove+0x2a>
 8013028:	bd10      	pop	{r4, pc}
 801302a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801302e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013032:	e7f7      	b.n	8013024 <memmove+0x24>

08013034 <_sbrk_r>:
 8013034:	b538      	push	{r3, r4, r5, lr}
 8013036:	4d06      	ldr	r5, [pc, #24]	@ (8013050 <_sbrk_r+0x1c>)
 8013038:	2300      	movs	r3, #0
 801303a:	4604      	mov	r4, r0
 801303c:	4608      	mov	r0, r1
 801303e:	602b      	str	r3, [r5, #0]
 8013040:	f7f2 fb88 	bl	8005754 <_sbrk>
 8013044:	1c43      	adds	r3, r0, #1
 8013046:	d102      	bne.n	801304e <_sbrk_r+0x1a>
 8013048:	682b      	ldr	r3, [r5, #0]
 801304a:	b103      	cbz	r3, 801304e <_sbrk_r+0x1a>
 801304c:	6023      	str	r3, [r4, #0]
 801304e:	bd38      	pop	{r3, r4, r5, pc}
 8013050:	20002808 	.word	0x20002808

08013054 <_realloc_r>:
 8013054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013058:	4607      	mov	r7, r0
 801305a:	4614      	mov	r4, r2
 801305c:	460d      	mov	r5, r1
 801305e:	b921      	cbnz	r1, 801306a <_realloc_r+0x16>
 8013060:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013064:	4611      	mov	r1, r2
 8013066:	f7ff bc5b 	b.w	8012920 <_malloc_r>
 801306a:	b92a      	cbnz	r2, 8013078 <_realloc_r+0x24>
 801306c:	f7ff fbec 	bl	8012848 <_free_r>
 8013070:	4625      	mov	r5, r4
 8013072:	4628      	mov	r0, r5
 8013074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013078:	f000 f81a 	bl	80130b0 <_malloc_usable_size_r>
 801307c:	4284      	cmp	r4, r0
 801307e:	4606      	mov	r6, r0
 8013080:	d802      	bhi.n	8013088 <_realloc_r+0x34>
 8013082:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8013086:	d8f4      	bhi.n	8013072 <_realloc_r+0x1e>
 8013088:	4621      	mov	r1, r4
 801308a:	4638      	mov	r0, r7
 801308c:	f7ff fc48 	bl	8012920 <_malloc_r>
 8013090:	4680      	mov	r8, r0
 8013092:	b908      	cbnz	r0, 8013098 <_realloc_r+0x44>
 8013094:	4645      	mov	r5, r8
 8013096:	e7ec      	b.n	8013072 <_realloc_r+0x1e>
 8013098:	42b4      	cmp	r4, r6
 801309a:	4622      	mov	r2, r4
 801309c:	4629      	mov	r1, r5
 801309e:	bf28      	it	cs
 80130a0:	4632      	movcs	r2, r6
 80130a2:	f7ff fbc3 	bl	801282c <memcpy>
 80130a6:	4629      	mov	r1, r5
 80130a8:	4638      	mov	r0, r7
 80130aa:	f7ff fbcd 	bl	8012848 <_free_r>
 80130ae:	e7f1      	b.n	8013094 <_realloc_r+0x40>

080130b0 <_malloc_usable_size_r>:
 80130b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80130b4:	1f18      	subs	r0, r3, #4
 80130b6:	2b00      	cmp	r3, #0
 80130b8:	bfbc      	itt	lt
 80130ba:	580b      	ldrlt	r3, [r1, r0]
 80130bc:	18c0      	addlt	r0, r0, r3
 80130be:	4770      	bx	lr

080130c0 <_init>:
 80130c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80130c2:	bf00      	nop
 80130c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80130c6:	bc08      	pop	{r3}
 80130c8:	469e      	mov	lr, r3
 80130ca:	4770      	bx	lr

080130cc <_fini>:
 80130cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80130ce:	bf00      	nop
 80130d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80130d2:	bc08      	pop	{r3}
 80130d4:	469e      	mov	lr, r3
 80130d6:	4770      	bx	lr
